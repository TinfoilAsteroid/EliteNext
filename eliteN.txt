# file opened: eliteNext.asm
   1  0000                  DEVICE ZXSPECTRUMNEXT
   2  0000                  SLDOPT COMMENT WPMEM, LOGPOINT, ASSERTION
   3  0000                  DEFINE  DOUBLEBUFFER 1
   4  0000                  DEFINE  LATECLIPPING 1
   5  0000                  DEFINE  SIMPLEWARP   1
   6  0000                  DEFINE  MAINLOOP_COOL_LASERS
   7  0000                  DEFINE  MAINLOOP_ECM
   8  0000                  DEFINE  MAINLOOP_KEYBOARDSCAN
   9  0000              ;    DEFINE  MAINLOOP_DEMOSHIPS
  10  0000              ;   DEFINE  MAINLOOP_DEBUGMISSILE 1
  11  0000                  DEFINE  MAINLOOP_INPUTHANDLER
  12  0000                 ; DEFINE  MAINLOOP_EVENTHANDLER 1
  13  0000                  DEFINE  MAINLOOP_RECHARGE 1
  14  0000               ;   DEFINE  MAINLOOP_LAUNCHMISSILE
  15  0000                  DEFINE  MAINLOOP_UPDATEUNIVERSE 1
  16  0000                  DEFINE  MAINLOOP_DUST_RENDER 1
  17  0000                  DEFINE  MAINLOOP_SUN_RENDER 1
  18  0000                  DEFINE  MAINLOOP_PLANET_RENDER 1
  19  0000                  DEFINE  MAINLOOP_SPACESTATION_RENDER 1
  20  0000                  DEFINE  MAINLOOP_MODEL_RENDER    1
  21  0000                  DEFINE  MAINLOOP_SPAWN_ALWAYS_OUTSIDE_SAFEZONE 1
  22  0000                  DEFINE  MAINLOOP_WARP_ENABLED 1
  23  0000
  24  0000                  ;DEFINE DEBUGCIRCLE1 1
  25  0000                  ;DEFINE DEBUGCIRCLE2 1
  26  0000                  ;DEFINE DEBUGCIRCLE3 1
  27  0000                  ;DEFINE DEBUGCIRCLE4 1
  28  0000                  ;DEFINE DEBUGCIRCLE5 1
  29  0000                  ;DEFINE DEBUGCIRCLE6 1
  30  0000                  ;DEFINE  DEBUGPLANET 1
  31  0000                  ;DEFINE  DEBUGPLANETCIRCLE 1
  32  0000                  ;DEFINE  MERIDANLINEDEBUG 1
  33  0000                  DEFINE  PLANETSARESOLID 1
  34  0000                  ;DEFINE DEBUG_LL122_DIRECT 1 ; PASS
  35  0000                  ;DEFINE DEBUG_LL121_DIRECT 1 ; PASS
  36  0000                  ;DEFINE DEBUG_LL129_DIRECT 1 ; PASS
  37  0000                  ;DEFINE DEBUG_LL120_DIRECT 1 ; PASS
  38  0000                  ;DEFINE DEBUG_LL123_DIRECT 1 ; PASS
  39  0000                  ;DEFINE DEBUG_LL118_DIRECT 1
  40  0000                  ;DEFINE DEBUG_LL128_DIRECT
  41  0000              ;                  DEFINE DEBUG_LL123_DIRECT 1
  42  0000              ;                  DEFINE DEBUG_LL118_DIRECT 1
  43  0000              ;                  DEFINE DEBUG_LL28_6502
  44  0000                                ;DEFINE DEBUG_LL145_6502 1
  45  0000              ;                DEFINE DEBUG_LL129
  46  0000               ;               DEFINE DEBUG_LL120 1
  47  0000                         ; DEFINE DEBUGCLIP 1
  48  0000                  ;DEFINE SKIPATTRACTMUSIC 1
  49  0000                  ;DEFINE SKIPATTRACTGRAPHICS 1
  50  0000                  ;DEFINE  SKIPATTRACT 1
  51  0000                  ;DEFINE  LOGDIVIDEDEBUG 1
  52  0000                  ; DEFINE  BLINEDEBUG 1
  53  0000                  ;DEFINE  TESTMERIDIAN 1
  54  0000                  ;DEFINE  CLIPVersion3 1
  55  0000                  ;DEFINE  LOGMATHS     1
  56  0000                  ;DEFINE  DIAGSPRITES 1
  57  0000              ;    DEFINE   SKIPATTRACT
  58  0000                  ; DEFINE DEBUGMISSILETEST 1
  59  0000                  ; DEFINE DEBUGLINEDRAW 1
  60  0000                   DEFINE  LASER_V2    1
  61  0000               CSPECTMAP eliteN.map
  62  0000               OPT --zxnext=cspect --syntax=a --reversepop
  63  0000                              DEFINE  SOUNDPACE 3
  64  0000              ;                DEFINE  ENABLE_SOUND 1
  65  0000                             DEFINE     MAIN_INTERRUPTENABLE 1
  66  0000              ;               DEFINE INTERRUPT_BLOCKER 1
  67  0000              DEBUGSEGSIZE   equ 1
  68  0000              DEBUGLOGSUMMARY equ 1
  69  0000              ;DEBUGLOGDETAIL equ 1
  70  0000
  71  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  72  0000              ; Game Defines
  73  0000              ScreenLocal      EQU 0
  74  0000              ScreenGalactic   EQU ScreenLocal + 1
  75  0000              ScreenMarket     EQU ScreenGalactic + 1
  76  0000              ScreenMarketDsp  EQU ScreenMarket + 1
  77  0000              ScreenStatus     EQU ScreenMarketDsp + 1
  78  0000              ScreenInvent     EQU ScreenStatus + 1
  79  0000              ScreenPlanet     EQU ScreenInvent + 1
  80  0000              ScreenEquip      EQU ScreenPlanet + 1
  81  0000              ScreenLaunch     EQU ScreenEquip + 1
  82  0000              ScreenFront      EQU ScreenLaunch + 1
  83  0000              ScreenAft        EQU ScreenFront+1
  84  0000              ScreenLeft       EQU ScreenAft+1
  85  0000              ScreenRight      EQU ScreenLeft+1
  86  0000              ScreenDocking    EQU ScreenRight+1
  87  0000              ScreenHyperspace EQU ScreenDocking+1
  88  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  89  0000              ; Colour Defines
  90  0000                  INCLUDE "./Hardware/L2ColourDefines.asm"
# file opened: ./Hardware/L2ColourDefines.asm
   1+ 0000              L2ColourBLACK           EQU   0
   2+ 0000              L2ColourRED_1           EQU 224                 ; RGB 255,  0,  0
   3+ 0000              L2ColourRED_2           EQU 192                 ; RGB 218,  0,  0
   4+ 0000              L2ColourRED_3           EQU 160                 ; RGB 182,  0,  0
   5+ 0000              L2ColourRED_4           EQU 128                 ; RGB 145,  0,  0
   6+ 0000              L2ColourRED_5           EQU  96                 ; RGB 109,  0,  0
   7+ 0000              L2ColourRED_6           EQU  64                 ; RGB  72,  0,  0
   8+ 0000              L2ColourRED_7           EQU  32                 ; RGB  36,  0,  0
   9+ 0000              L2ColourYELLOW_1        EQU 252                 ; RGB 255,255,  0
  10+ 0000              L2ColourYELLOW_2        EQU 216                 ; RGB 218,218,  0
  11+ 0000              L2ColourYELLOW_3        EQU 180                 ; RGB 182,182,  0
  12+ 0000              L2ColourYELLOW_4        EQU 144                 ; RGB 145,145,  0
  13+ 0000              L2ColourYELLOW_5        EQU 108                 ; RGB 109.109,  0
  14+ 0000              L2ColourYELLOW_6        EQU  72                 ; RGB  72, 72,  0
  15+ 0000              L2ColourYELLOW_7        EQU  36                 ; RGB  36, 36,  0
  16+ 0000              L2ColourGREEN_1		    EQU  28                 ; RGB   0,255,  0
  17+ 0000              L2ColourGREEN_2		    EQU  24                 ; RGB   0,218,  0
  18+ 0000              L2ColourGREEN_3		    EQU  16                 ; RGB   0,145,  0
  19+ 0000              L2ColourGREEN_4         EQU  12                 ; RGB   0,109,  0
  20+ 0000              L2ColourGREEN_5         EQU   8                 ; RGB   0, 72,  0
  21+ 0000              L2ColourGREEN_6         EQU   4                 ; RGB   0, 36,  0
  22+ 0000              L2ColourBLUE_1          EQU   3                 ; RGB 0,0,255
  23+ 0000              L2ColourBLUE_2          EQU   2                 ; RGB 0,0,170
  24+ 0000              L2ColourBLUE_3          EQU   1                 ; RGB 0,0,85
  25+ 0000
  26+ 0000
  27+ 0000              L2ColourWHITE_1         EQU 255                 ; RGB 255,255,255
  28+ 0000              L2ColourWHITE_2         EQU 146
  29+ 0000              L2ColourGREY_1		    EQU L2ColourWHITE_2
  30+ 0000              L2ColourGREY_2		    EQU 109
  31+ 0000              L2ColourGREY_3		    EQU  73
  32+ 0000              L2ColourGREY_4		    EQU  37
  33+ 0000
  34+ 0000              L2ColourGREEN_MB        EQU  29                 ;RGB 0,255,85
  35+ 0000              L2ColourGREEN_MR        EQU 124                 ;RGB 109.255,0
  36+ 0000              L2ColourCREAM_1         EQU 218                 ; RGB 218,218,170
  37+ 0000              L2ColourCREAM_2         EQU 182                 ; RGB 182,182,170
  38+ 0000              L2ColourCREAM_3         EQU 146                 ; RGB 145,145,170
  39+ 0000
  40+ 0000              L2ColourTRANSPARENT     EQU 227                 ; RGB 255,  0,255
  41+ 0000              L2ColourMAGENTA_1       EQU 162                 ; RGB 182,  0,170
  42+ 0000              L2ColourMAGENTA_2       EQU 130                 ; RGB 145,  0,170
  43+ 0000              L2ColourMAGENTA_3       EQU  97                 ; RGB 109,  0, 85
  44+ 0000              L2ColourMAGENTA_4       EQU  65                 ; RGB  72,  0, 85
  45+ 0000              L2ColourORANGE_1        EQU 236                 ; RGB
  46+ 0000              L2ColourORANGE_2        EQU 168                 ; RGB
  47+ 0000              L2ColourORANGE_3        EQU  68                 ; RGB
  48+ 0000              L2ColourCYAN_1          EQU  31                 ; RGB   0,255, 255
  49+ 0000              L2ColourCYAN_2          EQU  18                 ; RGB
  50+ 0000              L2ColourCYAN_3          EQU   9                 ; RGB
  51+ 0000              L2ColourPURPLE_1        EQU 109                 ; RGB
  52+ 0000              L2ColourPURPLE_2        EQU  66                 ; RGB
  53+ 0000              L2ColourPURPLE_3        EQU  33                 ; RGB
  54+ 0000              L2ColourPINK_1		    EQU 231                 ; RGB
  55+ 0000              L2ColourPINK_2		    EQU 226                 ; RGB
  56+ 0000              L2ColourPINK_3		    EQU 225                 ; RGB
  57+ 0000              L2ColourPINK_4		    EQU 224                 ; RGB
  58+ 0000
# file closed: ./Hardware/L2ColourDefines.asm
  91  0000                  INCLUDE "./Hardware/L1ColourDefines.asm"
# file opened: ./Hardware/L1ColourDefines.asm
   1+ 0000
   2+ 0000              L1ColourInkBlack        EQU %00000000
   3+ 0000              L1ColourInkBlue         EQU %00000001
   4+ 0000              L1ColourInkRed          EQU %00000010
   5+ 0000              L1ColourInkMagenta      EQU %00000011
   6+ 0000              L1ColourInkGreen        EQU %00000100
   7+ 0000              L1ColourInkCyan         EQU %00000101
   8+ 0000              L1ColourInkYellow       EQU %00000110
   9+ 0000              L1ColourInkWhite        EQU %00000111
  10+ 0000              L1ColourPaperBlack      EQU %00000000
  11+ 0000              L1ColourPaperBlue       EQU %00001000
  12+ 0000              L1ColourPaperRed        EQU %00010000
  13+ 0000              L1ColourPaperMagenta    EQU %00011000
  14+ 0000              L1ColourPaperGreen      EQU %00100000
  15+ 0000              L1ColourPaperCyan       EQU %00101000
  16+ 0000              L1ColourPaperYellow     EQU %00110000
  17+ 0000              L1ColourPaperWhite      EQU %00111000
  18+ 0000              L1ColourFlash           EQU %10000000
  19+ 0000              L1ColourBright          EQU %01000000
  20+ 0000              ;----------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              ; Screen Specific Colour Defines
  22+ 0000              L1InvHighlight          EQU L1ColourBright | L1ColourPaperRed   | L1ColourInkYellow
  23+ 0000              L1InvLowlight           EQU                  L1ColourPaperBlack | L1ColourInkWhite
# file closed: ./Hardware/L1ColourDefines.asm
  92  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  93  0000              ; Total screen list
  94  0000              ; Local Chart
  95  0000              ; Galactic Chart
  96  0000              ; Market Prices
  97  0000              ; Inventory
  98  0000              ; Comander status
  99  0000              ; System Data
 100  0000              ; Mission Briefing
 101  0000              ; missio completion
 102  0000              ; Docked  Menu (only place otehr than pause you can load and save)
 103  0000              ; Pause Menu (only place you can load from )
 104  0000              ; byint and selling equipment
 105  0000              ; bying and selling stock
 106  0000
 107  0000                                      INCLUDE "./Hardware/register_defines.asm"
# file opened: ./Hardware/register_defines.asm
   1+ 0000              ; Peripheral 2
   2+ 0000              ENABLE_CPU_SPEED_MODE                   EQU %10000000
   3+ 0000              DIVERT_BEEP_ONLY                        EQU %01000000
   4+ 0000              ENABLE_50_60_SWITCH                     EQU %00100000
   5+ 0000              ENABLE_MMCAUTO_SWITCH                   EQU %00010000
   6+ 0000              ENABLE_MULTIFACE_M1                     EQU %00001000
   7+ 0000              PS2MODE_KEYBOARD                        EQU %00000000
   8+ 0000              PS2MODE_MOUSE                           EQU %00000100
   9+ 0000              AUDIO_CHIPMODE_YM                       EQU %00000000
  10+ 0000              AUDIO_CHIPMODE_AY                       EQU %00000001
  11+ 0000              AUDIO_CHIPMODE_DISABLED                 EQU %00000010
  12+ 0000              INTERNAL_SPEAKER_ENABLE                 EQU %00010000
  13+ 0000              ; Peripheral 3
  14+ 0000              UNLOCK_PORT_7FFD_PAGING                 EQU %10000000
  15+ 0000              DISABLE_RAM_IO_CONTENTION               EQU %01000000
  16+ 0000              AY_STEREO_MODE_ACB                      EQU %00100000
  17+ 0000              INTERNAL_SPEAKER                        EQU %00010000
  18+ 0000              ENABLE_DACS                             EQU %00001000
  19+ 0000              ENABLE_TIMEX_VIDEO_MODE                 EQU %00000100
  20+ 0000              ENABLE_TURBO_SOUND                      EQU %00000010
  21+ 0000              ENABLE_ISSUE2_KEYBOARD                  EQU %00000001
  22+ 0000              ; Peripheral 4
  23+ 0000              ENABLE_AY2_MONO                         EQU %10000000
  24+ 0000              ENABLE_AY1_MONO                         EQU %01000000
  25+ 0000              ENABLE_AY0_MONO                         EQU %00100000
  26+ 0000              SPRITE_ID_LOCKSTEP                      EQU %00010000
  27+ 0000              RESET_DIVMMC_MAPRAM                     EQU %00001000
  28+ 0000              SILENCE_HDMI_AUDIO                      EQU %00000100
  29+ 0000              SCALLINES_50PCT                         EQU %00000001
  30+ 0000              SCANLINES_25PCT                         EQU %00000010
  31+ 0000              SCANLINES_125PCT                        EQU %00000011
  32+ 0000              ; Audio Registers
  33+ 0000              CHANNEL_A_FINE                          EQU 0
  34+ 0000              CHANNEL_A_COARSE                        EQU 1
  35+ 0000              CHANNEL_B_FINE                          EQU 2
  36+ 0000              CHANNEL_B_COARSE                        EQU 3
  37+ 0000              CHANNEL_C_FINE                          EQU 4
  38+ 0000              CHANNEL_C_COARSE                        EQU 5
  39+ 0000              NOISE_PERIOD                            EQU 6
  40+ 0000              TONE_ENABLE                             EQU 7
  41+ 0000              CHANNEL_A_AMPLITUDE                     EQU 8
  42+ 0000              CHANNEL_B_AMPLITUDE                     EQU 9
  43+ 0000              CHANNEL_C_AMPLITUDE                     EQU 10
  44+ 0000              ENVELOPE_PERIOD_FINE                    EQU 11
  45+ 0000              ENVELOPE_PERIOD_COARSE                  EQU 12
  46+ 0000              ENVELOPE_SHAPE                          EQU 13
  47+ 0000
  48+ 0000              ENVELOPE_HOLD_ON                        EQU 1
  49+ 0000              ENVELOPE_ALTERNATE_ON                   EQU 2
  50+ 0000              ENVELOPE_ATTACK_ON                      EQU 4
  51+ 0000              ENVELOPE_CONTINUE_ON                    EQU 8
  52+ 0000
  53+ 0000              ENVELOPE_SHAPE_SINGLE_DECAY             EQU 0                                                                                    ; \____________
  54+ 0000              ENVELOPE_SHAPE_SINGLE_ATTACK            EQU                        ENVELOPE_ATTACK_ON                                            ; /|___________
  55+ 0000              ENVELOPE_SHAPE_REPEAT_DECAY             EQU ENVELOPE_CONTINUE_ON                                                                 ; \|\|\|\|\|\|\
  56+ 0000              ENVELOPE_SHAPE_REPEAT_DECAY_ATTACK      EQU ENVELOPE_CONTINUE_ON |                      ENVELOPE_ALTERNATE_ON                    ; \/\/\/\/\/\/\
  57+ 0000              ENVELOPE_SHAPE_SINGLE_DECAY_HOLD        EQU ENVELOPE_CONTINUE_ON |                      ENVELOPE_ALTERNATE_ON | ENVELOPE_HOLD_ON ; \|-----------
  58+ 0000              ENVELOPE_SHAPE_REPEAT_ATTACK            EQU ENVELOPE_CONTINUE_ON | ENVELOPE_ATTACK_ON                                            ; /|/|/|/|/|/|/|
  59+ 0000              ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD       EQU ENVELOPE_CONTINUE_ON | ENVELOPE_ATTACK_ON |                         ENVELOPE_HOLD_ON ; /------------
  60+ 0000              ENVELOPE_SHAPE_REPEAT_ATTACK_DECAY      EQU ENVELOPE_CONTINUE_ON | ENVELOPE_ATTACK_ON | ENVELOPE_ALTERNATE_ON                    ; /\/\/\/\/\/\/
  61+ 0000
  62+ 0000              ENVELOPE_HOLD                           EQU %00000001
  63+ 0000              ENVELOPE_ALTERNATE                      EQU %00000010
  64+ 0000              ENVELOPE_ATTACK                         EQU %00000010
  65+ 0000              ENVELOPE_CONTINUE                       EQU %00000010
  66+ 0000              ; Sound Control
  67+ 0000              TONE_CHANNEL_A                          EQU %00000001
  68+ 0000              TONE_CHANNEL_B                          EQU %00000010
  69+ 0000              TONE_CHANNEL_C                          EQU %00000100
  70+ 0000              NOISE_CHANNEL_A                         EQU %00001000
  71+ 0000              NOISE_CHANNEL_B                         EQU %00010000
  72+ 0000              NOISE_CHANNEL_C                         EQU %00100000
  73+ 0000              ; Version for AND to enabled (its inverted)
  74+ 0000              TONE_CHANNEL_A_ON                       EQU %11111110
  75+ 0000              TONE_CHANNEL_B_ON                       EQU %11111101
  76+ 0000              TONE_CHANNEL_C_ON                       EQU %11111011
  77+ 0000              NOISE_CHANNEL_A_ON                      EQU %11110111
  78+ 0000              NOISE_CHANNEL_B_ON                      EQU %11101111
  79+ 0000              NOISE_CHANNEL_C_ON                      EQU %11011111
  80+ 0000
  81+ 0000              ; Turbo Sound Control
  82+ 0000              TURBO_MANDATORY                         EQU %10011100
  83+ 0000              TURBO_LEFT                              EQU %01000000
  84+ 0000              TURBO_RIGHT                             EQU %00100000
  85+ 0000              TURBO_CHIP_AY3                          EQU %00000011
  86+ 0000              TURBO_CHIP_AY2                          EQU %00000010
  87+ 0000              TURBO_CHIP_AY1                          EQU %00000001
  88+ 0000
  89+ 0000              IO_LAYER2_PORT                          EQU $123B
  90+ 0000              IO_EXT_BANK_PORT 			            EQU $DFFD ; 57341
  91+ 0000              IO_BANK_PORT                            EQU $7FFD ; 32765
  92+ 0000              REGISTER_NUMBER_PORT					EQU $243B
  93+ 0000              REGISTER_VALUE_PORT						EQU $253B
  94+ 0000              SPRITE_SLOT_PORT						EQU $303B ; port for sprite and pattern index
  95+ 0000              SPRITE_INFO_PORT                        EQU $0057
  96+ 0000              SPRITE_PATTERN_UPLOAD_PORT				EQU $005B
  97+ 0000              TURBO_SOUND_NEXT_CONTROL                EQU $FFFD
  98+ 0000              SOUND_CHIP_REGISTER_WRITE               EQU $BFFD
  99+ 0000              IO_KEYBOARD_PORT                        EQU $FE
 100+ 0000              IO_DATAGEAR_DMA_PORT 		            EQU $6B
 101+ 0000              UART_TX_PORT_PORT                       EQU $133B
 102+ 0000              UART_RX_PORT_PORT                       EQU $143B
 103+ 0000              UART_CONTROL_PORT                       EQU $153B
 104+ 0000              UART_FRAME_PORT                         EQU $163B
 105+ 0000              CTC_CHANNEL1_PORT                       EQU $183B
 106+ 0000              CTC_CHANNEL2_PORT                       EQU $193B
 107+ 0000              CTC_CHANNEL3_PORT                       EQU $1A3B
 108+ 0000              CTC_CHANNEL4_PORT                       EQU $1B3B
 109+ 0000              PLUS_3_MEMORY_PAGING_CONTROL_PORT       EQU $1FFD
 110+ 0000              MB02_DMA_PORT                           EQU $0B
 111+ 0000              SPECDRUM_DAC_OUTPUT                     EQU $DF
 112+ 0000
 113+ 0000              Speed_3_5MHZ                            EQU 0
 114+ 0000              Speed_7MHZ                              EQU 1
 115+ 0000              Speed_14MHZ                             EQU 2
 116+ 0000              Speed_28MHZ                             EQU 3
 117+ 0000
 118+ 0000
 119+ 0000              MACHINE_ID_REGISTER						EQU 0
 120+ 0000              VERSION_REGISTER						EQU 1
 121+ 0000              RESET_REGISTER		    				EQU 2
 122+ 0000              MACHINE_TYPE_REGISTER					EQU 3
 123+ 0000              PAGE_RAM_REGISTER						EQU 4
 124+ 0000              PERIPHERAL_1_REGISTER					EQU 5   ; Sets joystick mode, video frequency and Scandoubler
 125+ 0000              PERIPHERAL_2_REGISTER					EQU 6   ; Enables CPU Speed key, DivMMC, Multiface, Mouse and AY audio.
 126+ 0000              TURBO_MODE_REGISTER						EQU 7
 127+ 0000              PERIPHERAL_3_REGISTER					EQU 8   ; ABC/ACB Stereo, Internal Speaker, SpecDrum, Timex Video Modes, Turbo Sound Next, RAM contention and [un]lock 128k paging
 128+ 0000              PERIPHERAL_4_REGISTER                   EQU 9   ; Sets scanlines, AY mono output, Sprite-id lockstep, reset DivMMC mapram and disable HDMI audio
 129+ 0000              PERIPHERAL_5_REGISTER                   EQU 10  ; Mouse
 130+ 0000              CORE_VERSION_REGISTER                   EQU 14
 131+ 0000              ANTI_BRICK_SYSTEM_REGISTER				EQU 16
 132+ 0000              VIDEO_TIMING_REGISTER                   EQU 17
 133+ 0000              LAYER2_RAM_PAGE_REGISTER				EQU 18
 134+ 0000              LAYER2_RAM_SHADOW_REGISTER      		EQU 19
 135+ 0000              TRANSPARENCY_COLOUR_REGISTER			EQU 20
 136+ 0000              SPRITE_LAYERS_SYSTEM_REGISTER			EQU 21
 137+ 0000              LAYER2_OFFSET_X_REGISTER				EQU 22
 138+ 0000              LAYER2_OFFSET_Y_REGISTER				EQU 23
 139+ 0000              CLIP_WINDOW_LAYER2_REGISTER				EQU 24
 140+ 0000              CLIP_WINDOW_SPRITES_REGISTER			EQU 25
 141+ 0000              CLIP_WINDOW_ULA_REGISTER				EQU 26
 142+ 0000              CLIP_WINDOW_TILEMAP_REGISTER            EQU 27
 143+ 0000              CLIP_WINDOW_CONTROL_REGISTER			EQU 28
 144+ 0000              ;29 not used
 145+ 0000              ACTIVE_VIDEO_LINE_MSB_REGISTER			EQU 30
 146+ 0000              ACTIVE_VIDEO_LINE_LSB_REGISTER			EQU 31
 147+ 0000              ; 32 to 34 not used
 148+ 0000              LINE_INTERRUPT_CONTROL_REGISTER			EQU 34
 149+ 0000              LINE_INTERRUPT_VALUE_LSB_REGISTER		EQU 35
 150+ 0000              ULA_X_OFFSET_REGISTER                   EQU 38
 151+ 0000              ULA_Y_OFFSET_REGSITER                   EQU 39
 152+ 0000              KEYMAP_HIGH_ADDRESS_REGISTER			EQU 40
 153+ 0000              KEYMAP_LOW_ADDRESS_REGISTER				EQU 41
 154+ 0000              KEYMAP_HIGH_DATA_REGISTER				EQU 42
 155+ 0000              KEYMAP_LOW_DATA_REGISTER				EQU 43
 156+ 0000              DAC_B_MIRROR_REGISTER                   EQU 44
 157+ 0000              DAC_AB_MIRROR_REGISTER                  EQU 45
 158+ 0000              DAC_C_MORROR_REGISTER                   EQU 46
 159+ 0000              TILEMAP_OFFSET_XMSB_REGISTER            EQU 47
 160+ 0000              TILEMAP_OFFSET_XLSB_REGISTER            EQU 48
 161+ 0000              TILEMAP_OFFSET_YMSB_REGISTER            EQU 49
 162+ 0000              LORES_OFFSET_X_REGISTER					EQU 50
 163+ 0000              LORES_OFFSET_Y_REGISTER					EQU 51
 164+ 0000              SPRITE_PORT_INDEX_REGISTER              EQU 52
 165+ 0000              SPRITE_PORT_ATTR0_REGISTER              EQU 53
 166+ 0000              SPRITE_PORT_ATTR1_REGISTER              EQU 54
 167+ 0000              SPRITE_PORT_ATTR2_REGISTER              EQU 55
 168+ 0000              SPRITE_PORT_ATTR3_REGISTER              EQU 56
 169+ 0000              SPRITE_PORT_ATTR4_REGISTER              EQU 57
 170+ 0000              PALETTE_INDEX_REGISTER					EQU 64
 171+ 0000              PALETTE_VALUE_8BIT_REGISTER				EQU 65
 172+ 0000              PALETTE_FORMAT_REGISTER					EQU 66
 173+ 0000              PALETTE_CONTROL_REGISTER				EQU 67
 174+ 0000              PALETTE_VALUE_9BIT_REGISTER				EQU 68
 175+ 0000              TRANSPARENCY_COLOUR_FALLBACK_REGISTER   EQU 69
 176+ 0000              SPRITES_TRANSPARENCY_INDEX_REGISTER     EQU 70
 177+ 0000              TILEMAP_TRANSPARENCY_INDEX_REGISTER     EQU 71
 178+ 0000              ; 72 to 79 unused
 179+ 0000              MMU_SLOT_0_REGISTER						EQU 80
 180+ 0000              MMU_SLOT_1_REGISTER						EQU 81
 181+ 0000              MMU_SLOT_2_REGISTER						EQU 82
 182+ 0000              MMU_SLOT_3_REGISTER						EQU 83
 183+ 0000              MMU_SLOT_4_REGISTER						EQU 84
 184+ 0000              MMU_SLOT_5_REGISTER						EQU 85
 185+ 0000              MMU_SLOT_6_REGISTER						EQU 86
 186+ 0000              MMU_SLOT_7_REGISTER						EQU 87
 187+ 0000              ; 88 to 95 unused
 188+ 0000              COPPER_DATA_REGISTER					EQU 96
 189+ 0000              COPPER_CONTROL_LOW_REGISTER				EQU 97
 190+ 0000              COPPER_CONTROL_HIGH_REGISTER			EQU 98
 191+ 0000              COPPER_DATA_16BIT_WRITE_REGISTER        EQU 99
 192+ 0000              VERTICAL_VIDEO_LINE_OFFSET_REGISTER     EQU 100
 193+ 0000              ULA_CONTROL_REGISTER                    EQU 104
 194+ 0000              DISPLAY_CONTROL_1_REGISTER              EQU 105
 195+ 0000              LORES_CONTROL_REGISTER                  EQU 106
 196+ 0000              TILEMAP_CONTROL_REGISTER                EQU 107
 197+ 0000              DEFAULT_TILEMAP_ATTRIBUTE_REGISTER      EQU 108
 198+ 0000              ; 109 unused
 199+ 0000              TILEMAP_BASE_ADDRESS_REGISTER           EQU 110
 200+ 0000              TILE_DEFINITIONS_BASE_ADDRESS_REGISTER  EQU 111
 201+ 0000              LAYER_2_CONTROL_REGISTER                EQU 112
 202+ 0000              LAYER_2_X_OFFSET_MSB_REGISTER           EQU 113
 203+ 0000              SPRITE_PORT_MIRROR_ATTRIBUTE_1          EQU 114
 204+ 0000              SPRITE_PORT_MIRROR_ATTRIBUTE_2          EQU 115
 205+ 0000              SPRITE_PORT_MIRROR_ATTRIBUTE_3          EQU 116
 206+ 0000              SPRITE_PORT_MIRROR_ATTRIBUTE_4          EQU 117
 207+ 0000              USER_STORAGE_0_REGISTER                 EQU 118 ; general purpose variable, e.g. for copper
 208+ 0000              EXPANSION_BUS_ENABLE_REGISTER           EQU 128
 209+ 0000              EXTENDED_KEYS_0_REGISTER                EQU 176
 210+ 0000              EXTENDED_KEYS_1_REGISTER                EQU 177
 211+ 0000
 212+ 0000              INTERUPT_CONTROL                        EQU $0C ; Interrupt control
 213+ 0000              NMI_RETURN_LSB				            EQU	$0C2	; NMI Return Address LSB
 214+ 0000              NMI_RETURN_MSB				            EQU	$0C3	; NMI Return Address MSB
 215+ 0000              INTERRUPT_EN0				            EQU	$0C4	; INT EN 0
 216+ 0000              INTERRUPT_EN1				            EQU	$0C5	; INT EN 1
 217+ 0000              INTERRUPT_EN2				            EQU	$0C6	; INT EN 2
 218+ 0000              INTERRUPT_ST0				            EQU	$0C8	; INT status 0
 219+ 0000              INTERRUPT_ST1				            EQU	$0C9	; INT status 1
 220+ 0000              INTERRUPT_ST2				            EQU	$0CA	; INT status 2
 221+ 0000              INTERRUPT_DM0				            EQU	$0CC	; INT DMA EN 0
 222+ 0000              INTERRUPT_DM1				            EQU	$0CD	; INT DMA EN 1
 223+ 0000              INTERRUPT_DM2				            EQU	$0CE	; INT DMA EN 2
 224+ 0000              CTC_CHANNEL_0				            EQU	$183B	; CTC channel 0 port
 225+ 0000              CTC_CHANNEL_1				            EQU	$193B	; CTC channel 1 port
 226+ 0000              CTC_CHANNEL_2				            EQU	$1A3B	; CTC channel 2 port
 227+ 0000              CTC_CHANNEL_3				            EQU	$1B3B	; CTC channel 3 port
 228+ 0000              CTC_CHANNEL_4				            EQU	$1C3B	; CTC channel 4 port
 229+ 0000              CTC_CHANNEL_5				            EQU	$1D3B	; CTC channel 5 port
 230+ 0000              CTC_CHANNEL_6				            EQU	$1E3B	; CTC channel 6 port
 231+ 0000              CTC_CHANNEL_7				            EQU	$1F3B	; CTC channel 7 port
 232+ 0000              CTCBASE                                 EQU $c0		; MSB Base address of buffer
 233+ 0000              CTCSIZE                                 EQU $04 	; MSB buffer length
 234+ 0000              CTCEND                                  EQU CTCBASE+(CTCSIZE*2)
 235+ 0000
 236+ 0000
 237+ 0000              DEBUG_LEDS_REGISTER						EQU 255
 238+ 0000
 239+ 0000
 240+ 0000              GetNextRegSaveBC:	MACRO register
 241+ 0000 ~                                push bc
 242+ 0000 ~                                ld bc,$243B
 243+ 0000 ~                                ld a,register
 244+ 0000 ~                                out (c),a
 245+ 0000 ~                                inc b
 246+ 0000 ~                                in a,(c)
 247+ 0000 ~                                pop bc
 248+ 0000                                  ENDM
 249+ 0000
 250+ 0000              GetNextReg:	MACRO register
 251+ 0000 ~                        ld bc,$243B
 252+ 0000 ~                        ld a,register
 253+ 0000 ~                        out (c),a
 254+ 0000 ~                        inc b
 255+ 0000 ~                        in a,(c)
 256+ 0000                          ENDM
 257+ 0000
# file closed: ./Hardware/register_defines.asm
 108  0000                                      INCLUDE "./Layer2Graphics/layer2_defines.asm"
# file opened: ./Layer2Graphics/layer2_defines.asm
   1+ 0000
   2+ 0000
   3+ 0000              LAYER2_SHIFTED_SCREEN_TOP  	 equ 0
   4+ 0000              LAYER2_SHIFTED_SCREEN_MIDDLE equ $40
   5+ 0000              LAYER2_SHIFTED_SCREEN_BOTTOM equ $80
   6+ 0000
   7+ 0000              ; note hi byte is not decoded on DMA port so can out OUTIR
   8+ 0000
   9+ 0000              IO_SPRITE_SLOT_PORT 		 equ 12347
  10+ 0000              IO_SPRITE_PATTERN_PORT       equ 91
  11+ 0000              IO_SPRITE_ATTRIBUTES_PORT    equ 87
  12+ 0000
  13+ 0000              LAYER2_VISIBLE_MASK 		equ $02
  14+ 0000              ; DEBUG 0 for always write to primary 08 for double buffering
  15+ 0000                  IFDEF DOUBLEBUFFER
  16+ 0000              LAYER2_SHADOW_SCREEN_MASK 	equ $08
  17+ 0000                  ELSE
  18+ 0000 ~            LAYER2_SHADOW_SCREEN_MASK 	equ $00
  19+ 0000                  ENDIF
  20+ 0000              LAYER2_READ_ENABLE_MASK 	equ %00000100
  21+ 0000              LAYER2_WRITE_ENABLE_MASK 	equ %00000001
  22+ 0000              LAYER2_READ_WRITE_MASK      equ %00000101
  23+ 0000              LAYER2_SCREEN_SECTION_MASK 	equ $03
  24+ 0000              LAYER2_SCREEN_SECTION_SHIFT equ 6
  25+ 0000
  26+ 0000              LAYER2_DISABLE_MEM_WRITE    equ %11111110
  27+ 0000              LAYER2_DISABLE_MEM_READ     equ %11111011
  28+ 0000              LAYER2_DISABLE_MEM_ACCESS   equ %11111010
  29+ 0000
  30+ 0000              LAYER2_SCREEN_BANK1          equ 8
  31+ 0000              LAYER2_SCREEN_BANK2          equ 9
  32+ 0000              LAYER2_SCREEN_BANK3          equ 10
  33+ 0000              LAYER2_SCREEN_BANK4          equ 11     ; used by 320 and 640 mode
  34+ 0000              LAYER2_SCREEN_BANK5          equ 12     ; used by 320 and 640 mode
  35+ 0000              LAYER2_SHADOW_BANK1          equ 13
  36+ 0000              LAYER2_SHADOW_BANK2          equ 14
  37+ 0000              LAYER2_SHADOW_BANK3          equ 15
  38+ 0000              LAYER2_SHADOW_BANK4          equ 16     ; used by 320 and 640 mode
  39+ 0000              LAYER2_SHADOW_BANK5          equ 17     ; used by 320 and 640 mode
  40+ 0000
  41+ 0000              SCREEN_HEIGHT 				 equ 192
  42+ 0000              SCREEN_RAM_BASE				 equ $0000
  43+ 0000              SCREEN_HOZ_MIN_PIX		     equ 10
  44+ 0000
  45+ 0000              SPRITES_VISIBLE_MASK         equ $01
  46+ 0000              SPRITES_ON_BORDER_MASK       equ $02
  47+ 0000              LAYER_PRIORITIES_MASK        equ $07
  48+ 0000              LORES_MODE_MASK              equ $80
  49+ 0000              LAYER_PRIORITIES_SHIFT       equ 2
  50+ 0000
  51+ 0000              LAYER_PRIORITIES_S_L_U 		equ 0
  52+ 0000              LAYER_PRIORITIES_L_S_U 		equ 1
  53+ 0000              LAYER_PRIORITIES_S_U_L  	equ 2
  54+ 0000              LAYER_PRIORITIES_L_U_S 		equ 3
  55+ 0000              LAYER_PRIORITIES_U_S_L 		equ 4
  56+ 0000              LAYER_PRIORITIES_U_L_S 		equ 5
  57+ 0000
  58+ 0000              DMA_WRO_BLOCK_PORTA_A2B_XFR  equ $7D
  59+ 0000              DMA_WRO_BLOCK_PORTA_B2A_XFR  equ $79
  60+ 0000              DMA_WR1_P1FIXED_MEMORY       equ $24
  61+ 0000              DMA_WR1_P1DEC_MEMORY         equ $04
  62+ 0000              DMA_WR1_P1INC_MEMORY         equ $14
  63+ 0000              DMA_WR2_P2FIXED_MEMORY       equ $20
  64+ 0000              DMA_WR2_P2DEC_MEMORY         equ $00
  65+ 0000              DMA_WR2_P2INC_MEMORY         equ $10
  66+ 0000              DMA_WR4_CONT_MODE            equ $AD
  67+ 0000              DMA_WR4_BURST_MODE           equ $CD
  68+ 0000              DMA_RESET                    equ $c3
  69+ 0000              DMA_RESET_PORT_A_TIMING      equ $c7
  70+ 0000              DMA_RESET_PORT_B_TIMING      equ $cb
  71+ 0000              DMA_LOAD                     equ $cf
  72+ 0000              DMA_CONTINUE                 equ $d3
  73+ 0000              DMA_DISABLE_INTERUPTS        equ $af
  74+ 0000              DMA_ENABLE_INTERUPTS         equ $ab
  75+ 0000              DMA_RESET_DISABLE_INTERUPTS  equ $a3
  76+ 0000              DMA_ENABLE_AFTER_RETI        equ $b7
  77+ 0000              DMA_READ_STATUS_BYTE         equ $bf
  78+ 0000              DMA_REINIT_STATUS_BYTE       equ $8b
  79+ 0000              DMA_START_READ_SEQUENCE      equ $a7
  80+ 0000              DMA_FORCE_READY              equ $b3
  81+ 0000              DMA_STOP_AT_END			     equ $82
  82+ 0000              DMA_DISABLE                  equ $83
  83+ 0000              DMA_ENABLE                   equ $87
  84+ 0000              DMA_WRITE_REGISTER_COMMAND   equ $bb
  85+ 0000              DMA_BURST                    equ $cd
  86+ 0000              DMA_CONTINUOUS               equ $ad
  87+ 0000              ZXN_DMA_PORT                 equ $6b
  88+ 0000
  89+ 0000
  90+ 0000              COLOUR_TRANSPARENT			 equ $E3
  91+ 0000
  92+ 0000
  93+ 0000
  94+ 0000
# file closed: ./Layer2Graphics/layer2_defines.asm
 109  0000                                      INCLUDE	"./Hardware/memory_bank_defines.asm"
# file opened: ./Hardware/memory_bank_defines.asm
   1+ 0000
   2+ 0000              membanksize			    equ	$1FFF
   3+ 0000
   4+ 0000              StartOfBank     	    equ $0000
   5+ 0000
   6+ 0000              membank0 			    equ $0000
   7+ 0000              dmaCopySrcAddr		    equ	$0000
   8+ 0000              MathsTablesAddr         equ $0000
   9+ 0000              membank1 			    equ $2000
  10+ 0000              membank2 			    equ $4000
  11+ 0000              membank3 			    equ $6000
  12+ 0000              membank4 			    equ $8000
  13+ 0000              membank5 			    equ $a000
  14+ 0000              membank6 			    equ $c000
  15+ 0000              ScreenBank              equ $c000
  16+ 0000              MenuGalChtAddr          equ $c000
  17+ 0000              MenuEquipSAddr          equ $c000
  18+ 0000              MenuInventAddr          equ $c000
  19+ 0000              MenuMarketAddr          equ $c000
  20+ 0000              DispMarketAddr          equ $c000
  21+ 0000              MenuShrChtAddr          equ $c000
  22+ 0000              MenuStatusAddr          equ $c000
  23+ 0000              MenuSystemAddr          equ $c000
  24+ 0000              ViewFrontAddr           equ $c000
  25+ 0000              SunBankAddr             equ $c000
  26+ 0000              PlanetBankAddr          equ $c000
  27+ 0000              SpaceStationBankAddr    equ $c000
  28+ 0000              UniverseBankAddr	    equ $c000
  29+ 0000              LaunchShipAddr          equ $c000
  30+ 0000              membank7 			    equ $e000
  31+ 0000              L1membankAddr   	    equ $e000
  32+ 0000              L2membankAddr   	    equ $e000
  33+ 0000              ShipModelsAddr	        equ $e000
  34+ 0000              SpritemembankAddr       equ $e000
  35+ 0000              ResetUniverseAddr       equ $e000
  36+ 0000              StockTableAddr	        equ $e000
  37+ 0000              CommanderAddr           equ $e000
  38+ 0000              LAYER2Addr              equ $e000
  39+ 0000              LAYER1Addr              equ $e000
  40+ 0000              SPRITEAddr              equ $e000
  41+ 0000              ConsoleImageAddr        equ $e000
  42+ 0000              GalaxyDataAddr          equ $e000
  43+ 0000              SoundAddr               equ $e000
  44+ 0000              KeyboardAddr            equ $e000
  45+ 0000              MathsBankedFnsAddr      equ $0000
  46+ 0000
  47+ 0000              EXSDOSMMU0              equ MMU_SLOT_0_REGISTER
  48+ 0000              MathsTablesMMU          equ MMU_SLOT_0_REGISTER
  49+ 0000              ShipReadMMU             equ MMU_SLOT_0_REGISTER
  50+ 0000              DMACpySourceMMU		    equ	MMU_SLOT_0_REGISTER
  51+ 0000              EXSDOSMMU1              equ MMU_SLOT_1_REGISTER
  52+ 0000              SunMMU 		            equ MMU_SLOT_6_REGISTER
  53+ 0000              PlanetMMU 		        equ MMU_SLOT_6_REGISTER
  54+ 0000              UniverseMMU 		    equ MMU_SLOT_6_REGISTER
  55+ 0000              SpaceStationMMU         equ MMU_SLOT_6_REGISTER
  56+ 0000              ScreenBankMMU           equ MMU_SLOT_6_REGISTER
  57+ 0000              MenuEquipSMMU           equ MMU_SLOT_6_REGISTER
  58+ 0000              MenuShrChtMMU           equ MMU_SLOT_6_REGISTER
  59+ 0000              MenuGalChtMMU           equ MMU_SLOT_6_REGISTER
  60+ 0000              MenuInventMMU           equ MMU_SLOT_6_REGISTER
  61+ 0000              MenuSystemMMU           equ MMU_SLOT_6_REGISTER
  62+ 0000              MenuMarketMMU           equ MMU_SLOT_6_REGISTER
  63+ 0000              DispMarketMMU           equ MMU_SLOT_6_REGISTER
  64+ 0000              MenuStatusMMU           equ MMU_SLOT_6_REGISTER
  65+ 0000              LaunchShipMMU           equ MMU_SLOT_6_REGISTER
  66+ 0000              L1memMMU       		    equ MMU_SLOT_7_REGISTER
  67+ 0000              L2memMMU       		    equ MMU_SLOT_7_REGISTER
  68+ 0000              SpritememMMU   		    equ MMU_SLOT_7_REGISTER
  69+ 0000              ShipModelMMU  		    equ MMU_SLOT_7_REGISTER
  70+ 0000              ResetUniverseMMU	    equ MMU_SLOT_7_REGISTER
  71+ 0000              CommanderMMU	        equ MMU_SLOT_7_REGISTER
  72+ 0000              StockTableMMU		    equ MMU_SLOT_7_REGISTER
  73+ 0000              ConsoleImageDataMMU	    equ MMU_SLOT_7_REGISTER
  74+ 0000              GalaxyDataMMU	        equ MMU_SLOT_7_REGISTER
  75+ 0000              SoundMMU                equ MMU_SLOT_7_REGISTER
  76+ 0000              KeyboardMMU             equ MMU_SLOT_7_REGISTER
  77+ 0000              MathsBankedFnsMMU       equ MMU_SLOT_0_REGISTER
  78+ 0000
  79+ 0000              ; banks 8 to 17 are reserved for layer 2 memory
  80+ 0000              BankResetUniv           equ 49
  81+ 0000              BankMenuShrCht          equ 50
  82+ 0000              BankMenuGalCht          equ 51
  83+ 0000              BankMenuInvent          equ 52
  84+ 0000              BankMenuSystem          equ 53
  85+ 0000              BankMenuMarket          equ 54
  86+ 0000              BankStockTable          equ 55
  87+ 0000              BankCommander           equ 56
  88+ 0000              BankLAYER2              equ 57
  89+ 0000              BankLAYER1              equ 58
  90+ 0000              BankShipModels1         equ 59
  91+ 0000              BankSPRITE              equ 60
  92+ 0000              BankConsole             equ 61
  93+ 0000              BankFrontView           equ 62
  94+ 0000              BankMenuStatus          equ 63
  95+ 0000              BankMenuEquipS          equ 64
  96+ 0000              BankLaunchShip          equ 65
  97+ 0000              BankDispMarket          equ 66
  98+ 0000              BankShipModels2         equ 67
  99+ 0000              BankShipModels3         equ 68
 100+ 0000              BankShipModels4         equ 69
 101+ 0000
 102+ 0000              BankUNIVDATA0           equ 70
 103+ 0000              BankSpaceStationData    equ 70
 104+ 0000              BankUNIVDATA1           equ 71
 105+ 0000              BankUNIVDATA2           equ 72
 106+ 0000              BankUNIVDATA3           equ 73
 107+ 0000              BankUNIVDATA4           equ 74
 108+ 0000              BankUNIVDATA5           equ 75
 109+ 0000              BankUNIVDATA6           equ 76
 110+ 0000              BankUNIVDATA7           equ 77
 111+ 0000              BankUNIVDATA8           equ 78
 112+ 0000              BankUNIVDATA9           equ 79
 113+ 0000              BankUNIVDATA10          equ 80
 114+ 0000              BankUNIVDATA11          equ 81
 115+ 0000              BankUNIVDATA12          equ 82
 116+ 0000              BankUNIVDATA13          equ 83
 117+ 0000              BankSunData             equ 84
 118+ 0000              BankPlanetData          equ 85
 119+ 0000
 120+ 0000              BankGalaxyData0         equ 91
 121+ 0000              BankGalaxyData1         equ 92
 122+ 0000              BankGalaxyData2         equ 93
 123+ 0000              BankGalaxyData3         equ 94
 124+ 0000              BankGalaxyData4         equ 95
 125+ 0000              BankGalaxyData5         equ 96
 126+ 0000              BankGalaxyData6         equ 97
 127+ 0000              BankGalaxyData7         equ 98
 128+ 0000
 129+ 0000              BankMathsTables         equ 99
 130+ 0000              BankSound               equ 100
 131+ 0000              BankKeyboard            equ 101
 132+ 0000              BankMathsBankedFns      equ 102
 133+ 0000
 134+ 0000              BankROM                 equ 255
 135+ 0000
 136+ 0000
# file closed: ./Hardware/memory_bank_defines.asm
 110  0000                                      INCLUDE "./Hardware/screen_equates.asm"
# file opened: ./Hardware/screen_equates.asm
   1+ 0000              ScreenHeight 		    equ 192
   2+ 0000              ScreenLastRow           equ ScreenHeight -1
   3+ 0000              ScreenWidth  		    equ 256
   4+ 0000              ScreenLastCol           equ ScreenWidth -1
   5+ 0000              ScreenHeightHalf	    equ 96
   6+ 0000              ScreenWidthHalf  	    equ 128
   7+ 0000              ScreenCenterY		    equ 96
   8+ 0000              ScreenCenterX           equ 128
   9+ 0000              ViewHeight              equ 128
  10+ 0000              ViewHeightPlus1         equ 128+1
  11+ 0000              ViewLastRow       	    equ ViewHeight -1
  12+ 0000              ViewWidth  			    equ 256
  13+ 0000              ViewLastCol             equ ViewWidth -1
  14+ 0000              ViewHeightHalf          equ 63
  15+ 0000              ViewWidthHalf           equ 127
  16+ 0000              ViewCenterY             equ 192/2
  17+ 0000              ViewCenterX             equ 128
  18+ 0000                                      DISPLAY "TODO: place odler for debugging"
  19+ 0000              ShipColour			    equ $FF		; place holder for debugging TODO
  20+ 0000              ScreenL1Bottom          equ $5000
  21+ 0000              ScreenL1BottomLen       equ 32 * 8 * 8
  22+ 0000              ScreenL1AttrBtm         equ $5A00
  23+ 0000              ScreenL1AttrBtmLen      equ 32 * 8
  24+ 0000
# file closed: ./Hardware/screen_equates.asm
 111  0000                                      INCLUDE "./Data/ShipModelEquates.asm"
# file opened: ./Data/ShipModelEquates.asm
   1+ 0000              ScoopDebrisOffset	        equ	0                               ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
   2+ 0000              MissileLockLoOffset	        equ 1
   3+ 0000              MissileLockHiOffset	        equ 2
   4+ 0000              EdgeAddyOffset		        equ 3
   5+ 0000              LineX4Offset		        equ 5
   6+ 0000              GunVertexOffset		        equ 6
   7+ 0000              ExplosionCtOffset	        equ 7
   8+ 0000              VertexCountOffset           equ 8
   9+ 0000              VertexCtX6Offset	        equ 9
  10+ 0000              EdgeCountOffset		        equ 10
  11+ 0000              BountyLoOffset		        equ 11
  12+ 0000              BountyHiOffset		        equ 12
  13+ 0000              FaceCtX4Offset		        equ 13
  14+ 0000              DotOffset			        equ 14
  15+ 0000              EnergyOffset		        equ 15
  16+ 0000              SpeedOffset			        equ 16
  17+ 0000              FaceAddyOffset		        equ 17
  18+ 0000              QOffset				        equ 19
  19+ 0000              LaserOffset			        equ 20
  20+ 0000              VerticiesAddyOffset         equ 21
  21+ 0000              ShipTypeOffset              equ 23
  22+ 0000              ShipNewBitsOffset           equ 24
  23+ 0000              ShipAIFlagsOffset           equ 25
  24+ 0000              ShipECMFittedChanceOffset   equ 26
  25+ 0000              ShipSolidFlagOffset         equ 27 ; Intially for non cargo these will be garbage
  26+ 0000              ShipSolidFillOffset         equ 28
  27+ 0000              ShipSolidLenOffset          equ 29
  28+ 0000              ShipDataLength              equ ShipECMFittedChanceOffset+1
  29+ 0000
  30+ 0000              CobraTablePointer           equ 43
  31+ 0000              ;29 faulty
  32+ 0000              BankThreshold               equ 16
  33+ 0000
  34+ 0000              ShipTableALast              equ 23
  35+ 0000              ShipTableBLast              equ 39
  36+ 0000              ShipTableCLast              equ 55
  37+ 0000
# file closed: ./Data/ShipModelEquates.asm
 112  0000                                      INCLUDE "./Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1+ 0000              InitNoDoubleBuffer:         MACRO
   2+ 0000 ~                                        MMUSelectLayer1
   3+ 0000 ~                                        call	l1_cls
   4+ 0000 ~                                        ld		a,7
   5+ 0000 ~                                        call	l1_attr_cls_to_a
   6+ 0000 ~                                        MMUSelectLayer2
   7+ 0000 ~                                        call    asm_l2_double_buffer_off
   8+ 0000 ~                                        call	l2_cls	; Get some space
   9+ 0000 ~                                        MMUSelectSpriteBank
  10+ 0000 ~                                        call    sprite_cls_cursors
  11+ 0000                                          ENDM
  12+ 0000
  13+ 0000
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 113  0000                                      INCLUDE "./Macros/graphicsMacros.asm"
# file opened: ./Macros/graphicsMacros.asm
   1+ 0000              ; General Graphics macros
   2+ 0000              DoubleBufferIfPossible: MACRO
   3+ 0000 ~                                    IFDEF DOUBLEBUFFER
   4+ 0000 ~                                        MMUSelectLayer2
   5+ 0000 ~                                        call  l2_cls
   6+ 0000 ~                                        call  l2_flip_buffers
   7+ 0000 ~                                    ENDIF
   8+ 0000                                      ENDM
   9+ 0000
  10+ 0000              DoubleBuffer320IfPossible: MACRO
  11+ 0000 ~                                    IFDEF DOUBLEBUFFER
  12+ 0000 ~                                        MMUSelectLayer2
  13+ 0000 ~                                        call  l2_320_cls
  14+ 0000 ~                                        call  l2_flip_buffers
  15+ 0000 ~                                    ENDIF
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              DoubleBuffer640IfPossible: MACRO
  19+ 0000 ~                                    IFDEF DOUBLEBUFFER
  20+ 0000 ~                                        MMUSelectLayer2
  21+ 0000 ~                                        call  l2_640_cls
  22+ 0000 ~                                        call  l2_flip_buffers
  23+ 0000 ~                                    ENDIF
  24+ 0000                                      ENDM
  25+ 0000
  26+ 0000              ErrorEquStepMinusDelta: MACRO   delta_step, delta_value
  27+ 0000 ~                                    ld      hl,(delta_step)
  28+ 0000 ~                                    ld      de,(delta_value)
  29+ 0000 ~                                    ClearCarryFlag
  30+ 0000 ~                                    sbc     hl,de
  31+ 0000 ~                                    ld      (error),hl
  32+ 0000                                      ENDM
  33+ 0000
  34+ 0000              ; we could hold steps and deltas in alternate registers later
  35+ 0000              ErrorPlusStep:          MACRO   delta_step
  36+ 0000 ~                                    ld      hl,(error)
  37+ 0000 ~                                    ld      de,(delta_step)
  38+ 0000 ~                                    add     hl,de
  39+ 0000 ~                                    ld      (error),hl
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              ErrorMinusStep:         MACRO   delta_step
  43+ 0000 ~                                    ld      hl,(error)
  44+ 0000 ~                                    ld      de,(delta_step)
  45+ 0000 ~                                    ClearCarryFlag
  46+ 0000 ~                                    sbc     hl,de
  47+ 0000 ~                                    ld      (error),hl
  48+ 0000                                      ENDM
  49+ 0000
  50+ 0000              SetExitFalse:           MACRO
  51+ 0000 ~                                    xor     a
  52+ 0000 ~                                    ld      (set_exit),a
  53+ 0000                                      ENDM
  54+ 0000
  55+ 0000              ; pulls axis high byte to a, returns nz if negative, z if positive
  56+ 0000              IsAxisLT0:              MACRO   axis
  57+ 0000 ~                                    ld      a,(axis+1)
  58+ 0000 ~                                    and     $80
  59+ 0000                                      ENDM
  60+ 0000
  61+ 0000              ; modifies HL, loaded with register, returns z if >=0, nz if negative
  62+ 0000              IsMemld16GTE0           MACRO   mem
  63+ 0000 ~                                    ld      hl, (mem)
  64+ 0000 ~                                    bit     7,h
  65+ 0000                                      ENDM
  66+ 0000
  67+ 0000              IsMemNegative8JumpFalse:MACRO   mem, target
  68+ 0000 ~                                    ld      a,(mem)
  69+ 0000 ~                                    and     $80
  70+ 0000 ~                                    jp      z, target
  71+ 0000                                      ENDM
  72+ 0000
  73+ 0000              IsMem16GT0JumpFalse:    MACRO   mem, target
  74+ 0000 ~                                    ld      hl, (mem)
  75+ 0000 ~                                    bit     7,h
  76+ 0000 ~                                    jp      nz, target
  77+ 0000 ~                                    ld      a,h
  78+ 0000 ~                                    or      l
  79+ 0000 ~                                    jp      z,  target
  80+ 0000                                      ENDM
  81+ 0000
  82+ 0000              FloorHLdivDETarget:     MACRO   target
  83+ 0000 ~                                    call    l_div                   ;       .  (so we swap and call l_div) HL = DE / HL, DE = DE % HL
  84+ 0000 ~                                    ld      a,d                     ;       .  get bit 7 into carry (set if negative)
  85+ 0000 ~                                    sla     a                       ;
  86+ 0000 ~                                    jr      nc,.FloorIsOK           ;
  87+ 0000 ~            .FloorAdjust:           dec     hl                      ;       .  if remainder >= adjust by 1 for negative
  88+ 0000 ~            .FloorIsOK:             ld      (target),hl             ;       .  now save the msd value
  89+ 0000                                      ENDM
  90+ 0000
# file closed: ./Macros/graphicsMacros.asm
 114  0000                                      INCLUDE "./Macros/callMacros.asm"
# file opened: ./Macros/callMacros.asm
   1+ 0000
   2+ 0000              CallIfAEqNusng:         MACRO   reg,target
   3+ 0000 ~                                    cp      reg
   4+ 0000 ~                                    call	z,target
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              CallIfAGTENusng:        MACRO   reg,target
   8+ 0000 ~                                    cp      reg
   9+ 0000 ~                                    call	nc,target
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              CallIfAGTEMemusng:      MACRO   reg,target
  13+ 0000 ~                                    ld      hl,reg
  14+ 0000 ~                                    cp      (hl)
  15+ 0000 ~                                    call	nc,target
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              CallIfALTMemusng:       MACRO   reg,target
  19+ 0000 ~                                    ld      hl,reg
  20+ 0000 ~                                    cp      (hl)
  21+ 0000 ~                                    call	c,target
  22+ 0000                                      ENDM
  23+ 0000
  24+ 0000              CallIfALTNusng:         MACRO   reg,target
  25+ 0000 ~                                    cp      reg
  26+ 0000 ~                                    call	c,target
  27+ 0000                                      ENDM
  28+ 0000
  29+ 0000              CallIfMemEqMemusng:     MACRO mem, address, target
  30+ 0000 ~                                    ld      a,(mem)
  31+ 0000 ~                                    ld      hl,address
  32+ 0000 ~                                    cp      (hl)
  33+ 0000 ~                                    call    z,target
  34+ 0000                                      ENDM
  35+ 0000
  36+ 0000              CallIfMemEqNusng:       MACRO mem, value, target
  37+ 0000 ~                                    ld      a,(mem)
  38+ 0000 ~                                    cp      value
  39+ 0000 ~                                    call    z,target
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000
  43+ 0000              CallIfMemGTENusng:      MACRO mem, value, target
  44+ 0000 ~                                    ld      a,(mem)
  45+ 0000 ~                                    cp      value
  46+ 0000 ~                                    call    nc,target
  47+ 0000                                      ENDM
  48+ 0000
  49+ 0000              CallIfMemTrue:          MACRO mem, target
  50+ 0000 ~                                    ld      a,(mem)
  51+ 0000 ~                                    and     a
  52+ 0000 ~                                    call    z, target
  53+ 0000                                      ENDM
  54+ 0000
  55+ 0000              CallIfMemFalse:         MACRO mem, target
  56+ 0000 ~                                    ld      a,(mem)
  57+ 0000 ~                                    and     a
  58+ 0000 ~                                    call    nz, target
  59+ 0000                                      ENDM
  60+ 0000
  61+ 0000              CallIfMemZero:          MACRO mem, target
  62+ 0000 ~                                    ld      a,(mem)
  63+ 0000 ~                                    and     a
  64+ 0000 ~                                    call    z, target
  65+ 0000                                      ENDM
  66+ 0000
  67+ 0000              CallIfMemNotZero:       MACRO mem, target
  68+ 0000 ~                                    ld      a,(mem)
  69+ 0000 ~                                    and     a
  70+ 0000 ~                                    call    nz, target
  71+ 0000                                      ENDM
  72+ 0000              CallIfATrue:            MACRO target
  73+ 0000 ~                                    and     a
  74+ 0000 ~                                    call    z, target
  75+ 0000                                      ENDM
  76+ 0000
  77+ 0000              CallIfAFalse:           MACRO target
  78+ 0000 ~                                    and     a
  79+ 0000 ~                                    call    nz, target
  80+ 0000                                      ENDM
  81+ 0000
  82+ 0000              CallIfAZero:            MACRO target
  83+ 0000 ~                                    and     a
  84+ 0000 ~                                    call    z, target
  85+ 0000                                      ENDM
  86+ 0000
  87+ 0000              CallIfANotZero:         MACRO target
  88+ 0000 ~                                    and     a
  89+ 0000 ~                                    call    nz, target
  90+ 0000                                      ENDM
# file closed: ./Macros/callMacros.asm
 115  0000                                      INCLUDE "./Macros/carryFlagMacros.asm"
# file opened: ./Macros/carryFlagMacros.asm
   1+ 0000
   2+ 0000              SetCarryFlag:           MACRO
   3+ 0000 ~                                    scf
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ClearCarryFlag:	        MACRO
   7+ 0000 ~                                    or a
   8+ 0000                                      ENDM
   9+ 0000
  10+ 0000              FlipCarryFlag:          MACRO
  11+ 0000 ~                                    ccf
  12+ 0000                                      ENDM
  13+ 0000
# file closed: ./Macros/carryFlagMacros.asm
 116  0000                                      INCLUDE "./Macros/CopyByteMacros.asm"
# file opened: ./Macros/CopyByteMacros.asm
   1+ 0000              CopyByteAtHLixToA:		MACRO memloc
   2+ 0000 ~            						ex          de,hl                               ; save hl
   3+ 0000 ~            						ld          hl,memloc
   4+ 0000 ~            						add         hl,a
   5+ 0000 ~            						ld          a,(hl)                              ; get XX2[x]
   6+ 0000 ~            						ex          de,hl                               ; get hl back as we need it in loop
   7+ 0000              						ENDM
   8+ 0000
   9+ 0000              ; Increments IYL
  10+ 0000              ; Increments IHL
  11+ 0000              ; Gets value at hl and loads into Parameter 1 address
  12+ 0000
  13+ 0000              CopyByteAtNextHLiyl: 	MACRO memloc
  14+ 0000 ~            						inc         iyl                                 ;
  15+ 0000 ~            						inc         hl                                  ; vertex byte#1
  16+ 0000 ~            						ld          a,(hl)                              ;
  17+ 0000 ~            						ld          (memloc),a                     ; XX15+2 = (V),Y
  18+ 0000              						ENDM
  19+ 0000
  20+ 0000              ;------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              CopyByteAtNextHL:   MACRO targetaddr
  22+ 0000 ~                                inc         hl                                  ; vertex byte#1
  23+ 0000 ~                                ld          a,(hl)                              ;
  24+ 0000 ~                                ld          (targetaddr),a                     ; SunXX15+2 = (V),Y
  25+ 0000                                  ENDM
# file closed: ./Macros/CopyByteMacros.asm
 117  0000                                      INCLUDE "./Macros/ldCopyMacros.asm"
# file opened: ./Macros/ldCopyMacros.asm
   1+ 0000              ZeroA:		            MACRO
   2+ 0000 ~                                    xor a
   3+ 0000                                      ENDM
   4+ 0000
   5+ 0000              SetATrue:               MACRO
   6+ 0000 ~                                    xor     a
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000              SetAFalse:              MACRO
  10+ 0000 ~                                    ld      a,$FF
  11+ 0000                                      ENDM
  12+ 0000
  13+ 0000              SetMemFalse             MACRO   mem
  14+ 0000 ~                                    ld      a,$FF
  15+ 0000 ~                                    ld      (mem),a
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              SetMemTrue              MACRO   mem
  19+ 0000 ~                                    xor     a
  20+ 0000 ~                                    ld      (mem),a
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              SetMemZero:             MACRO   mem
  24+ 0000 ~                                    xor     a
  25+ 0000 ~                                    ld      (mem),a
  26+ 0000                                      ENDM
  27+ 0000
  28+ 0000              SetMemToN:              MACRO   mem,value
  29+ 0000 ~                                    ld      a,value
  30+ 0000 ~                                    ld      (mem),a
  31+ 0000                                      ENDM
  32+ 0000
  33+ 0000              ldCopyStringLen:        MACRO   source, target, strlen
  34+ 0000 ~                                    ld      hl,source
  35+ 0000 ~                                    ld      de, target
  36+ 0000 ~                                    ld      bc, strlen
  37+ 0000 ~                                    ldir
  38+ 0000                                      ENDM
  39+ 0000
  40+ 0000              ldCopyTextAtHLtoDE:     MACRO
  41+ 0000 ~            .CopyLoop:              ld      a,(hl)
  42+ 0000 ~                                    ld      (de),a
  43+ 0000 ~                                    cp      0
  44+ 0000 ~                                    jp      z,.DoneCopy
  45+ 0000 ~                                    inc     hl
  46+ 0000 ~                                    inc     de
  47+ 0000 ~                                    jr      .CopyLoop
  48+ 0000 ~            .DoneCopy:
  49+ 0000                                      ENDM
  50+ 0000
  51+ 0000              ldClearTextLoop:        MACRO   TextSize
  52+ 0000 ~                                    ld      b,a
  53+ 0000 ~                                    ld      a,TextSize
  54+ 0000 ~            .ClearLoop:             ld      (hl),a
  55+ 0000 ~                                    inc     hl
  56+ 0000 ~                                    djnz    .ClearLoop
  57+ 0000                                      ENDM
  58+ 0000
  59+ 0000              ldCopyByte:             MACRO memfrom, memto
  60+ 0000 ~                                    ld       a,(memfrom)
  61+ 0000 ~                                    ld       (memto),a
  62+ 0000                                      ENDM
  63+ 0000
  64+ 0000
  65+ 0000              ldCopyByteABS:          MACRO memfrom, memto
  66+ 0000 ~                                    ld       a,(memfrom)
  67+ 0000 ~                                    and		$7F
  68+ 0000 ~                                    ld       (memto),a
  69+ 0000                                      ENDM
  70+ 0000
  71+ 0000              ldAtHLtoMem:            MACRO   memto
  72+ 0000 ~                                    ld      a,(hl)
  73+ 0000 ~                                    ld      (memto),a
  74+ 0000                                      ENDM
  75+ 0000
  76+ 0000              ldCopyWord:             MACRO memfrom, memto
  77+ 0000 ~                                    ldCopy2Byte memfrom, memto
  78+ 0000                                      ENDM
  79+ 0000
  80+ 0000              ldCopy2Byte:            MACRO  memfrom, memto
  81+ 0000 ~                                    ld       hl,(memfrom)
  82+ 0000 ~                                    ld       (memto),hl
  83+ 0000                                      ENDM
  84+ 0000
  85+ 0000              ldWriteConst            MACRO  memfrom, memto
  86+ 0000 ~                                    ld       a,memfrom
  87+ 0000 ~                                    ld       (memto),a
  88+ 0000                                      ENDM
  89+ 0000
  90+ 0000              ldWriteZero             MACRO  memto
  91+ 0000 ~                                    xor      a
  92+ 0000 ~                                    ld       (memto),a
  93+ 0000                                      ENDM
  94+ 0000
  95+ 0000              ldIXLaFromN:	        MACRO memfrom
  96+ 0000 ~                                    ld		a,(memfrom)
  97+ 0000 ~                                    ld		ixl,a
  98+ 0000                                      ENDM
  99+ 0000
 100+ 0000              ldIXHaFromN:	        MACRO memfrom
 101+ 0000 ~                                    ld		a,(memfrom)
 102+ 0000 ~                                    ld		ixh,a
 103+ 0000                                      ENDM
 104+ 0000
 105+ 0000              ldIYLaFromN:	        MACRO memfrom
 106+ 0000 ~                                    ld		a,(memfrom)
 107+ 0000 ~                                    ld		iyl,a
 108+ 0000                                      ENDM
 109+ 0000
 110+ 0000              ldIYHaFromN:	        MACRO memfrom
 111+ 0000 ~                                    ld		a,(memfrom)
 112+ 0000 ~                                    ld		iyh,a
 113+ 0000                                      ENDM
 114+ 0000
 115+ 0000              ; Read a 32 bit value from address HL into BCDE
 116+ 0000              ldBCDEatHL:             MACRO
 117+ 0000 ~                                    ld      e,(hl)
 118+ 0000 ~                                    inc     hl
 119+ 0000 ~                                    ld      d,(hl)
 120+ 0000 ~                                    inc     hl
 121+ 0000 ~                                    ld      c,(hl)
 122+ 0000 ~                                    inc     hl
 123+ 0000 ~                                    ld      b,(hl)
 124+ 0000 ~                                    inc     hl
 125+ 0000                                      ENDM
 126+ 0000
 127+ 0000              ldBCatHL:               MACRO
 128+ 0000 ~                                    ld      c,(hl)
 129+ 0000 ~                                    inc     hl
 130+ 0000 ~                                    ld      b,(hl)
 131+ 0000 ~                                    inc     hl
 132+ 0000                                      ENDM
 133+ 0000
 134+ 0000              ldhlde:			        MACRO
 135+ 0000 ~                                    ld		h,d
 136+ 0000 ~                                    ld		l,e
 137+ 0000                                      ENDM
 138+ 0000
 139+ 0000              ldhlbc:			        MACRO
 140+ 0000 ~                                    ld		h,b
 141+ 0000 ~                                    ld		l,c
 142+ 0000                                      ENDM
 143+ 0000
 144+ 0000              ldbcde:			        MACRO
 145+ 0000 ~                                    ld		b,d
 146+ 0000 ~                                    ld		c,e
 147+ 0000                                      ENDM
 148+ 0000
 149+ 0000              lddebc:			        MACRO
 150+ 0000 ~                                    ld		d,b
 151+ 0000 ~                                    ld		e,c
 152+ 0000                                      ENDM
 153+ 0000
 154+ 0000              ldbchl:			        MACRO
 155+ 0000 ~                                    ld		b,h
 156+ 0000 ~                                    ld		c,l
 157+ 0000                                      ENDM
 158+ 0000
 159+ 0000              lddeiy:			        MACRO
 160+ 0000 ~                                    ld		d,iyh
 161+ 0000 ~                                    ld		e,iyl
 162+ 0000                                      ENDM
 163+ 0000
 164+ 0000              ldiyde:			        MACRO
 165+ 0000 ~                                    ld		iyh,d
 166+ 0000 ~                                    ld		iyl,e
 167+ 0000                                      ENDM
 168+ 0000
 169+ 0000
 170+ 0000              FourLDIInstrunctions:   MACRO
 171+ 0000 ~                                    ldi
 172+ 0000 ~                                    ldi
 173+ 0000 ~                                    ldi
 174+ 0000 ~                                    ldi
 175+ 0000                                      ENDM
 176+ 0000
 177+ 0000              FiveLDIInstrunctions:   MACRO
 178+ 0000 ~                                    ldi
 179+ 0000 ~                                    ldi
 180+ 0000 ~                                    ldi
 181+ 0000 ~                                    ldi
 182+ 0000 ~                                    ldi
 183+ 0000                                      ENDM
 184+ 0000
 185+ 0000              SixLDIInstrunctions:    MACRO
 186+ 0000 ~                                    ldi
 187+ 0000 ~                                    ldi
 188+ 0000 ~                                    ldi
 189+ 0000 ~                                    ldi
 190+ 0000 ~                                    ldi
 191+ 0000 ~                                    ldi
 192+ 0000                                      ENDM
 193+ 0000
 194+ 0000              EightLDIInstrunctions:  MACRO
 195+ 0000 ~            		                ldi
 196+ 0000 ~            		                ldi
 197+ 0000 ~            		                ldi
 198+ 0000 ~            		                ldi
 199+ 0000 ~            		                ldi
 200+ 0000 ~            		                ldi
 201+ 0000 ~            		                ldi
 202+ 0000 ~            		                ldi
 203+ 0000                                      ENDM
 204+ 0000
 205+ 0000              NineLDIInstrunctions:  MACRO
 206+ 0000 ~            		                ldi
 207+ 0000 ~            		                ldi
 208+ 0000 ~            		                ldi
 209+ 0000 ~            		                ldi
 210+ 0000 ~            		                ldi
 211+ 0000 ~            		                ldi
 212+ 0000 ~            		                ldi
 213+ 0000 ~            		                ldi
 214+ 0000 ~            		                ldi
 215+ 0000                                      ENDM
# file closed: ./Macros/ldCopyMacros.asm
 118  0000                                      INCLUDE "./Macros/ldIndexedMacros.asm"
# file opened: ./Macros/ldIndexedMacros.asm
   1+ 0000              GetByteAInTable:    MACRO table
   2+ 0000 ~                                ld          hl,table
   3+ 0000 ~                                add         hl,a
   4+ 0000 ~                                ld          a,(hl)
   5+ 0000                                  ENDM
   6+ 0000
   7+ 0000              HLWordAInTable:     MACRO table
   8+ 0000 ~                                ld          hl,table
   9+ 0000 ~                                sla         a
  10+ 0000 ~                                add         hl,a
  11+ 0000 ~                                ld          a,(hl)
  12+ 0000 ~                                inc         hl
  13+ 0000 ~                                ld          h,(hl)
  14+ 0000 ~                                ld          l,a
  15+ 0000                                  ENDM
  16+ 0000
  17+ 0000
  18+ 0000              ldAToHLixl:			MACRO value
  19+ 0000 ~            					ld          hl,value
  20+ 0000 ~            					ex          af,af'
  21+ 0000 ~            					ld          a,ixl
  22+ 0000 ~            					add         hl,a
  23+ 0000 ~            					ex          af,af'
  24+ 0000 ~            					ld          (hl),a
  25+ 0000              					ENDM
  26+ 0000
  27+ 0000              ldAToHLiyl:			MACRO value
  28+ 0000 ~            					ld          hl,value
  29+ 0000 ~            					ex          af,af'
  30+ 0000 ~            					ld          a,iyl
  31+ 0000 ~            					add         hl,a
  32+ 0000 ~            					ex          af,af'
  33+ 0000 ~            					ld          (hl),a
  34+ 0000              					ENDM
  35+ 0000
  36+ 0000
  37+ 0000              ldHLixlToA:         MACRO value
  38+ 0000 ~                                ld          hl,value
  39+ 0000 ~                                ex          af,af'
  40+ 0000 ~                                ld          a,ixl
  41+ 0000 ~                                add         hl,a
  42+ 0000 ~                                ld          a,(hl)
  43+ 0000                                  ENDM
  44+ 0000
  45+ 0000              ldHLiylToA:         MACRO value
  46+ 0000 ~                                ld          hl,value
  47+ 0000 ~                                ex          af,af'
  48+ 0000 ~                                ld          a,iyl
  49+ 0000 ~                                add         hl,a
  50+ 0000 ~                                ld          a,(hl)
  51+ 0000                                  ENDM
  52+ 0000
  53+ 0000              ldHLIdxAToA:        MACRO value
  54+ 0000 ~                                ld          hl,value
  55+ 0000 ~                                add         hl,a
  56+ 0000 ~                                ld          a,(hl)
  57+ 0000                                  ENDM
  58+ 0000
  59+ 0000              HLEquAddrAtHLPlusA: MACRO
  60+ 0000 ~                                sla         a
  61+ 0000 ~                                add         hl,a
  62+ 0000 ~                                ld          a,(hl)
  63+ 0000 ~                                inc         hl
  64+ 0000 ~                                ld          h,(hl)
  65+ 0000 ~                                ld          l,a
  66+ 0000                                  ENDM
  67+ 0000
  68+ 0000              ;-- Performs HL = |HL| - 1
  69+ 0000              DecHLABS:           MACRO
  70+ 0000 ~                                bit         7,h
  71+ 0000 ~                                jp          nz,.NegativeDec
  72+ 0000 ~            .IsHLZero:          ld          a,h                 ; if its zero it becomes negative
  73+ 0000 ~                                or          l
  74+ 0000 ~                                jp          z,.HLZero
  75+ 0000 ~            .PositiveDec:       dec         hl
  76+ 0000 ~                                jp          .Done
  77+ 0000 ~            .NegativeDec:       ld          a,h
  78+ 0000 ~                                and         $7F
  79+ 0000 ~                                ld          h,a
  80+ 0000 ~                                dec         hl
  81+ 0000 ~                                set         7,h
  82+ 0000 ~                                jp          .Done
  83+ 0000 ~            .HLZero:            ld          hl,$8001
  84+ 0000 ~            .Done:
  85+ 0000                                  ENDM
  86+ 0000
  87+ 0000              ;-- Performs HL = HL - 1
  88+ 0000              DecHLSigned:        MACRO
  89+ 0000 ~                                bit         7,h
  90+ 0000 ~                                jp          nz,.NegativeDec
  91+ 0000 ~            .IsHLZero:          ld          a,h                 ; if its zero it becomes negative
  92+ 0000 ~                                or          l
  93+ 0000 ~                                jp          z,.HLZero
  94+ 0000 ~            .PositiveDec:       dec         hl
  95+ 0000 ~                                jp          .Done
  96+ 0000 ~            .NegativeDec:       ld          a,h
  97+ 0000 ~                                and         $7F
  98+ 0000 ~                                ld          h,a
  99+ 0000 ~                                inc         hl                  ; if its already negative then add 1 to make it further
 100+ 0000 ~                                set         7,h
 101+ 0000 ~                                jp          .Done
 102+ 0000 ~            .HLZero:            ld          hl,$8001
 103+ 0000 ~            .Done:
 104+ 0000                                  ENDM
 105+ 0000
# file closed: ./Macros/ldIndexedMacros.asm
 119  0000                                      INCLUDE "./Macros/jumpMacros.asm"
# file opened: ./Macros/jumpMacros.asm
   1+ 0000              JumpIfHLNegative:       MACRO target
   2+ 0000 ~                                    bit     7,h
   3+ 0000 ~                                    jp      nz,target
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              JumpIfPositive:	        MACRO target
   7+ 0000 ~                                    jp		p, target
   8+ 0000                                      ENDM
   9+ 0000
  10+ 0000              JumpIfNegative:	        MACRO target
  11+ 0000 ~                                    jp		m, target
  12+ 0000                                      ENDM
  13+ 0000
  14+ 0000
  15+ 0000              JumpIfUnderflow:	    MACRO target
  16+ 0000 ~                                    jp		po, target
  17+ 0000                                      ENDM
  18+ 0000
  19+ 0000              JumpIfOverflow:	        MACRO target
  20+ 0000 ~                                    jp		po, target
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000
  24+ 0000              JumpIfNotZero:	        MACRO target
  25+ 0000 ~                                    jp	nz,target
  26+ 0000                                      ENDM
  27+ 0000
  28+ 0000              JumpIfZero:	            MACRO target
  29+ 0000 ~                                    jp	z,target
  30+ 0000                                      ENDM
  31+ 0000
  32+ 0000              ;.. Bit routines
  33+ 0000              JumpOnLeadSignSet:      MACRO   reg, target
  34+ 0000 ~                                    ld      a,reg
  35+ 0000 ~                                    and     SignOnly8Bit
  36+ 0000 ~                                    jp      nz,target
  37+ 0000                                      ENDM
  38+ 0000
  39+ 0000              JumpOnLeadSignClear:    MACRO   reg, target
  40+ 0000 ~                                    ld      a,reg
  41+ 0000 ~                                    and     SignOnly8Bit
  42+ 0000 ~                                    jp      z,target
  43+ 0000                                      ENDM
  44+ 0000
  45+ 0000              JumpOnLeadSignSetA:     MACRO   target
  46+ 0000 ~                                    and     SignOnly8Bit
  47+ 0000 ~                                    jp      nz,target
  48+ 0000                                      ENDM
  49+ 0000
  50+ 0000              JumpOnLeadSignClearA:   MACRO   target
  51+ 0000 ~                                    and     SignOnly8Bit
  52+ 0000 ~                                    jp      z,target
  53+ 0000                                      ENDM
  54+ 0000
  55+ 0000              JumpOnMemBitSet:        MACRO mem, bitnbr, target
  56+ 0000 ~                                    ld      a,(mem)
  57+ 0000 ~                                    bit 	bitnbr,a
  58+ 0000 ~                                    jp      nz,target
  59+ 0000                                      ENDM
  60+ 0000
  61+ 0000              JumpOnMemBitClear:      MACRO mem, bitnbr, target
  62+ 0000 ~                                    ld      a,(mem)
  63+ 0000 ~                                    bit 	bitnbr,a
  64+ 0000 ~                                    jp      z,target
  65+ 0000                                      ENDM
  66+ 0000
  67+ 0000
  68+ 0000              JumpOnABitSet:          MACRO   bitnbr, target
  69+ 0000 ~                                    bit 	bitnbr, a
  70+ 0000 ~                                    jp      nz,target
  71+ 0000                                      ENDM
  72+ 0000
  73+ 0000              JumpOnABitClear:        MACRO   bitnbr, target
  74+ 0000 ~                                    bit 	bitnbr, a
  75+ 0000 ~                                    jp      z,target
  76+ 0000                                      ENDM
  77+ 0000
  78+ 0000              JumpOnABit5Set:         MACRO   target
  79+ 0000 ~                                    and     Bit5Only
  80+ 0000 ~                                    jp      nz,target
  81+ 0000                                      ENDM
  82+ 0000
  83+ 0000              JumpOnABit5Clear:       MACRO   target
  84+ 0000 ~                                    and     Bit5Only
  85+ 0000 ~                                    jp      z,target
  86+ 0000                                      ENDM
  87+ 0000
  88+ 0000              JumpOnBitMaskSet:       MACRO   bitmask, target
  89+ 0000 ~                                    and     bitmask
  90+ 0000 ~                                    jp      nz,target
  91+ 0000                                      ENDM
  92+ 0000
  93+ 0000              JumpOnBitMaskClear:     MACRO   bitmask, target
  94+ 0000 ~                                    and     bitmask
  95+ 0000 ~                                    jp      z,target
  96+ 0000                                      ENDM
  97+ 0000
  98+ 0000              JumpOnMemBitMaskSet:    MACRO   mem, bitmask, target
  99+ 0000 ~                                    ld      a,(mem)
 100+ 0000 ~                                    and     bitmask
 101+ 0000 ~                                    jp      nz,target
 102+ 0000                                      ENDM
 103+ 0000
 104+ 0000              JumpOnMemBitMaskClear:  MACRO   mem, bitmask, target
 105+ 0000 ~                                    ld      a,(mem)
 106+ 0000 ~                                    and     bitmask
 107+ 0000 ~                                    jp      z,target
 108+ 0000                                      ENDM
 109+ 0000
 110+ 0000              JumpOnBitSet:           MACRO  reg, bitnbr, target
 111+ 0000 ~                                    bit 	bitnbr,reg
 112+ 0000 ~                                    jp      nz,target
 113+ 0000                                      ENDM
 114+ 0000
 115+ 0000              JumpOnBitClear:         MACRO  reg, bitnbr, target
 116+ 0000 ~                                    bit 	bitnbr,reg
 117+ 0000 ~                                    jp      z,target
 118+ 0000                                      ENDM
 119+ 0000
 120+ 0000              ; Comparison Routines
 121+ 0000              JumpIfAGTEusng:         MACRO
 122+ 0000 ~                                    jp		nc,target
 123+ 0000                                      ENDM
 124+ 0000
 125+ 0000              JumpIfAGTENusng:        MACRO reg,target
 126+ 0000 ~                                    cp     reg
 127+ 0000 ~                                    jp		nc,target
 128+ 0000                                      ENDM
 129+ 0000
 130+ 0000              JumpIfAGTEMemusng:      MACRO mem,target
 131+ 0000 ~                                    ld      hl,mem
 132+ 0000 ~                                    cp      (hl)
 133+ 0000 ~                                    jp		nc,target
 134+ 0000                                      ENDM
 135+ 0000
 136+ 0000              JumpIfALTMemusng:       MACRO mem,target
 137+ 0000 ~                                    ld      hl,mem
 138+ 0000 ~                                    cp      (hl)
 139+ 0000 ~                                    jp		c,target
 140+ 0000                                      ENDM
 141+ 0000
 142+ 0000              JumpIfMemGTENusng:      MACRO mem, value, target
 143+ 0000 ~                                    ld     a,(mem)
 144+ 0000 ~                                    cp     value
 145+ 0000 ~                                    jp	  nc,target
 146+ 0000                                      ENDM
 147+ 0000
 148+ 0000              JumpIfMemGTEMemusng:    MACRO mem, address, target
 149+ 0000 ~                                    ld   a,(mem)
 150+ 0000 ~                                    ld   hl,address
 151+ 0000 ~                                    cp   (hl)
 152+ 0000 ~                                    jp	  nc,target
 153+ 0000                                      ENDM
 154+ 0000
 155+ 0000              JumpIfMemEqMemusng:     MACRO mem, address, target
 156+ 0000 ~                                    ld   a,(mem)
 157+ 0000 ~                                    ld   hl,address
 158+ 0000 ~                                    cp   (hl)
 159+ 0000 ~                                    jp	  z,target
 160+ 0000                                      ENDM
 161+ 0000
 162+ 0000              JumpIfMemNeMemusng:     MACRO mem, address, target
 163+ 0000 ~                                    ld   a,(mem)
 164+ 0000 ~                                    ld   hl,address
 165+ 0000 ~                                    cp   (hl)
 166+ 0000 ~                                    jp	  nz,target
 167+ 0000                                      ENDM
 168+ 0000
 169+ 0000              JumpIfMemTrue:          MACRO mem, target
 170+ 0000 ~                                    ld      a,(mem)
 171+ 0000 ~                                    and     a
 172+ 0000 ~                                    jp      z, target
 173+ 0000                                      ENDM
 174+ 0000
 175+ 0000              JumpIfMemFalse:         MACRO mem, target
 176+ 0000 ~                                    ld      a,(mem)
 177+ 0000 ~                                    and     a
 178+ 0000 ~                                    jp      nz, target
 179+ 0000                                      ENDM
 180+ 0000
 181+ 0000              JumpIfATrue:            MACRO target
 182+ 0000 ~                                    and     a
 183+ 0000 ~                                    jp      z, target
 184+ 0000                                      ENDM
 185+ 0000
 186+ 0000              JumpIfAFalse:           MACRO target
 187+ 0000 ~                                    and     a
 188+ 0000 ~                                    jp      nz, target
 189+ 0000                                      ENDM
 190+ 0000
 191+ 0000              JumpIfANotFalse:        MACRO target
 192+ 0000 ~                                    cp      $FF
 193+ 0000 ~                                    jp      nz, target
 194+ 0000                                      ENDM
 195+ 0000
 196+ 0000              JumpIfALTusng:          MACRO target
 197+ 0000 ~                                    jp		c,target
 198+ 0000                                      ENDM
 199+ 0000
 200+ 0000              JumpIfALTNusng:         MACRO value, target
 201+ 0000 ~                                    cp      value
 202+ 0000 ~                                    jp		c, target
 203+ 0000                                      ENDM
 204+ 0000
 205+ 0000              JumpIfMemLTNusng:       MACRO mem, value, target
 206+ 0000 ~                                    ld      a,(mem)
 207+ 0000 ~                                    cp      value
 208+ 0000 ~                                    jp	  c,target
 209+ 0000                                      ENDM
 210+ 0000
 211+ 0000              JumpIfMemLTMemusng:     MACRO mem, value, target
 212+ 0000 ~                                    ld    a,(mem)
 213+ 0000 ~                                    ld    hl,value
 214+ 0000 ~                                    cp    (hl)
 215+ 0000 ~                                    jp	  c,target
 216+ 0000                                      ENDM
 217+ 0000
 218+ 0000              JumpIfMemEqNusng:       MACRO mem,value,target
 219+ 0000 ~                                    ld  a,(mem)
 220+ 0000 ~                                    cp  value
 221+ 0000 ~                                    jp  z,target
 222+ 0000                                      ENDM
 223+ 0000
 224+ 0000              JumpIfMemNeNusng:       MACRO mem,value,target
 225+ 0000 ~                                    ld  a,(mem)
 226+ 0000 ~                                    cp  value
 227+ 0000 ~                                    jp  nz,target
 228+ 0000                                      ENDM
 229+ 0000
 230+ 0000              JumpIfMemZero:          MACRO mem,target
 231+ 0000 ~                                    ld  a,(mem)
 232+ 0000 ~                                    and a
 233+ 0000 ~                                    jp  z,target
 234+ 0000                                      ENDM
 235+ 0000
 236+ 0000              JumpIfMemNotZero:       MACRO mem,target
 237+ 0000 ~                                    ld  a,(mem)
 238+ 0000 ~                                    and a
 239+ 0000 ~                                    jp  nz,target
 240+ 0000                                      ENDM
 241+ 0000
 242+ 0000              JumpIfALTMemHLusng:     MACRO target
 243+ 0000 ~                                    cp    (hl)
 244+ 0000 ~                                    jp	  c,target
 245+ 0000                                      ENDM
 246+ 0000
 247+ 0000              JumpIfANENusng:         MACRO value, target
 248+ 0000 ~                                    cp     value
 249+ 0000 ~                                    jp      nz,target
 250+ 0000                                      ENDM
 251+ 0000
 252+ 0000              JumpIfANEquNusng:       MACRO value, target
 253+ 0000 ~                                    cp     value
 254+ 0000 ~                                    jp     z,target
 255+ 0000                                      ENDM
 256+ 0000
 257+ 0000              JumpIfANEMemusng:       MACRO  value, target
 258+ 0000 ~                                    ld    hl,value
 259+ 0000 ~                                    cp    (hl)
 260+ 0000 ~                                    jp      nz,target
 261+ 0000                                      ENDM
 262+ 0000
 263+ 0000              JumpIfAEqNusng:         MACRO value, target
 264+ 0000 ~                                    cp     value
 265+ 0000 ~                                    jp      z,target
 266+ 0000                                      ENDM
 267+ 0000
 268+ 0000              JumpIfAIsZero:	        MACRO target
 269+ 0000 ~                                    and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 270+ 0000 ~                                    jp	    z, target
 271+ 0000                                      ENDM
 272+ 0000
 273+ 0000              JumpIfRegIsNotZero:     MACRO   reg, target
 274+ 0000 ~                                    ld      a,reg
 275+ 0000 ~                                    and     a
 276+ 0000 ~                                    jp	    nz,target
 277+ 0000                                      ENDM
 278+ 0000
 279+ 0000              JumpIfRegLTE:           MACRO   reg, value, target
 280+ 0000 ~                                    ld      a,reg
 281+ 0000 ~                                    cp      value
 282+ 0000 ~                                    jp	    z,target
 283+ 0000 ~                                    jp		c, target
 284+ 0000                                      ENDM
 285+ 0000
 286+ 0000              JumpIfAIsNotZero:       MACRO target
 287+ 0000 ~                                    and     a
 288+ 0000 ~                                    jp	    nz,target
 289+ 0000                                      ENDM
 290+ 0000
 291+ 0000              JumpIfMemIsNotZero:     MACRO value, target
 292+ 0000 ~                                    ld      a,(value)
 293+ 0000 ~                                    and     a
 294+ 0000 ~                                    jp	    nz,target
 295+ 0000                                      ENDM
 296+ 0000              IfResultZeroGoto:	    MACRO target
 297+ 0000 ~                                    jp	z,target
 298+ 0000                                      ENDM
 299+ 0000
 300+ 0000              IfResultNotZeroGoto:    MACRO target
 301+ 0000 ~                                    jp	nz,target
 302+ 0000                                      ENDM
 303+ 0000
# file closed: ./Macros/jumpMacros.asm
 120  0000                                      INCLUDE "./Macros/MathsMacros.asm"
# file opened: ./Macros/MathsMacros.asm
   1+ 0000              ; sets z flag is HL less than 255 else sets it to nz (note opposite of GT127)
   2+ 0000              IsHLGT255:              MACRO
   3+ 0000 ~                                    bit     7,h
   4+ 0000 ~                                    ret     z
   5+ 0000 ~                                    ld      a,h
   6+ 0000 ~                                    and     a
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000              ; Sets z flat if HL = 255 else sets it to nz
  10+ 0000              IsHLEqu255:             MACRO
  11+ 0000 ~                                    ld      a,h
  12+ 0000 ~                                    and     a               ; if its non zero then it can't be 255
  13+ 0000 ~                                    ret     nz
  14+ 0000 ~                                    ld      a,l
  15+ 0000 ~                                    inc     a               ; if it was 255 the inc will set it to zero
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              ; Sets Z flag if GT 127 else nz
  19+ 0000              IsHLGT127:              MACRO
  20+ 0000 ~                                    bit     7,h             ; -ve?
  21+ 0000 ~                                    jr      nz,.DoneCheck
  22+ 0000 ~                                    ld      a,h             ; +ve > 256?
  23+ 0000 ~                                    and     a
  24+ 0000 ~                                    jr      nz,.DoneCheck
  25+ 0000 ~                                    ld      a,l
  26+ 0000 ~                                    and     $80             ; this will set z to false if bit 7 set and clear lower bits
  27+ 0000 ~                                    cp      $80             ; this will set z to true if bit 7 set
  28+ 0000 ~            .DoneCheck:
  29+ 0000                                      ENDM
  30+ 0000
  31+ 0000              ReturnIfHLGT127:        MACRO
  32+ 0000 ~                                    bit     7,h             ; -ve?
  33+ 0000 ~                                    jr      nz,.DoneCheck   ; forces check complete
  34+ 0000 ~                                    ld      a,h             ; +ve > 256?
  35+ 0000 ~                                    and     a               ;
  36+ 0000 ~                                    ret     nz              ; forces a return
  37+ 0000 ~                                    bit     7,l             ; bit 7 of lower set?
  38+ 0000 ~                                    ret     nz              ; forces a return
  39+ 0000 ~            .DoneCheck:
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              IsDEGT127:              MACRO
  43+ 0000 ~                                    bit     7,d
  44+ 0000 ~                                    jr      nz,.DoneCheck
  45+ 0000 ~                                    ld      a,d
  46+ 0000 ~                                    jr      nz,.DoneCheck
  47+ 0000 ~                                    ld      a,e
  48+ 0000 ~                                    and     $80
  49+ 0000 ~            .DoneCheck:
  50+ 0000                                      ENDM
  51+ 0000
  52+ 0000              ABSa2c:                 MACRO
  53+ 0000 ~                                    bit     7,a
  54+ 0000 ~                                    jp      z,.DoneABSa
  55+ 0000 ~                                    neg
  56+ 0000 ~            .DoneABSa:
  57+ 0000                                      ENDM
  58+ 0000
  59+ 0000              DEEquSquareA:           MACRO
  60+ 0000 ~                                    ld  d,a
  61+ 0000 ~                                    ld  e,a
  62+ 0000 ~                                    mul de
  63+ 0000                                      ENDM
  64+ 0000
  65+ 0000              ApplyMyRollToVector:    MACRO angle, vectorX, vectorY
  66+ 0000 ~                                    ldCopyByte angle,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  67+ 0000 ~                                    ldCopy2Byte vectorY, varR           ; RS =  nosev_y
  68+ 0000 ~                                    ldCopyByte  vectorX, varP           ; set P to nosevX lo (may be redundant)
  69+ 0000 ~                                    ld a,(vectorX+1)                    ; Set A = -nosev_x_hi
  70+ 0000 ~                                    xor $80                             ;
  71+ 0000 ~                                    call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  72+ 0000 ~                                    ld  (vectorY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  73+ 0000 ~                                    ldCopy2Byte vectorX, varR           ; Set (S R) = nosev_x
  74+ 0000 ~                                    ld  a,(vectorY+1)                   ;  Set A = nosev_y_hi
  75+ 0000 ~                                    call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  76+ 0000 ~                                    ld  (vectorX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  77+ 0000                                      ENDM
  78+ 0000
  79+ 0000              SignedHLTo2C:           MACRO
  80+ 0000 ~                                    bit     7,h
  81+ 0000 ~                                    jr      z,.Done2c
  82+ 0000 ~                                    ld      a,h
  83+ 0000 ~                                    and     SignMask8Bit
  84+ 0000 ~                                    ld      h,a
  85+ 0000 ~                                    NegHL
  86+ 0000 ~            .Done2c:
  87+ 0000                                      ENDM
  88+ 0000
  89+ 0000              MemSignedTo2C:          MACRO   memfrom
  90+ 0000 ~                                    ld      hl,(memfrom)
  91+ 0000 ~                                    bit     7,h
  92+ 0000 ~                                    jr      z,.Done2c
  93+ 0000 ~                                    ld      a,h
  94+ 0000 ~                                    and     SignMask8Bit
  95+ 0000 ~                                    ld      h,a
  96+ 0000 ~            .Done2c:                ld      (memfrom),hl
  97+ 0000                                      ENDM
  98+ 0000
  99+ 0000
 100+ 0000                  ;returns result in H
 101+ 0000              EDiv10Inline:           MACRO
 102+ 0000 ~                                    ld      d,0
 103+ 0000 ~                                    ld      hl,de
 104+ 0000 ~                                    add     hl,hl
 105+ 0000 ~                                    add     hl,de
 106+ 0000 ~                                    add     hl,hl
 107+ 0000 ~                                    add     hl,hl
 108+ 0000 ~                                    add     hl,de
 109+ 0000 ~                                    add     hl,hl
 110+ 0000                                      ENDM
 111+ 0000
 112+ 0000              cpHLDE:                 MACRO
 113+ 0000 ~                                    push    hl
 114+ 0000 ~                                    and     a
 115+ 0000 ~                                    sbc     hl,de
 116+ 0000 ~                                    pop     hl
 117+ 0000                                      ENDM
 118+ 0000
 119+ 0000              cpABSDEHL:              MACRO
 120+ 0000 ~                                    push     hl,,de
 121+ 0000 ~                                    ld      a,h
 122+ 0000 ~                                    and     $7F
 123+ 0000 ~                                    ld      h,a
 124+ 0000 ~                                    ld      a,d
 125+ 0000 ~                                    and     $7F
 126+ 0000 ~                                    ld      d,a
 127+ 0000 ~                                    ex      de,hl
 128+ 0000 ~                                    sbc     hl,de
 129+ 0000 ~                                    pop     hl,,de
 130+ 0000                                      ENDM
 131+ 0000
 132+ 0000              ; Simple are they both the same setting z if they are
 133+ 0000              ; tehcicall this works but it measn the final ret z is alwys done
 134+ 0000              ; so jp needs to be to a target
 135+ 0000              cpHLEquDE:              MACRO   passedCheck
 136+ 0000 ~                                    ld      a,h
 137+ 0000 ~                                    cp      d
 138+ 0000 ~                                    jp      nz, passedCheck
 139+ 0000 ~                                    ld      a,l
 140+ 0000 ~                                    cp      e
 141+ 0000 ~            .NoTheSame:
 142+ 0000                                      ENDM
 143+ 0000
 144+ 0000              cpHLEquBC:              MACRO   passedCheck
 145+ 0000 ~                                    ld      a,h
 146+ 0000 ~                                    cp      b
 147+ 0000 ~                                    jp      nz, passedCheck
 148+ 0000 ~                                    ld      a,l
 149+ 0000 ~                                    cp      c
 150+ 0000 ~            .NoTheSame:
 151+ 0000                                      ENDM
 152+ 0000
 153+ 0000              cpDEEquBC:              MACRO   passedCheck
 154+ 0000 ~                                    ld      a,d
 155+ 0000 ~                                    cp      b
 156+ 0000 ~                                    jp      nz, passedCheck
 157+ 0000 ~                                    ld      a,e
 158+ 0000 ~                                    cp      c
 159+ 0000 ~            .NoTheSame:
 160+ 0000                                      ENDM
 161+ 0000              ; Simple version just sets carry if HL < DE reset, does an initial compare for z
 162+ 0000              cpHLDELeadSign:         MACRO
 163+ 0000 ~                                    ld      a,h
 164+ 0000 ~                                    cp      d
 165+ 0000 ~                                    jr      nz,.FullCompare
 166+ 0000 ~                                    ld      a,l
 167+ 0000 ~                                    cp      e
 168+ 0000 ~                                    ret     z
 169+ 0000 ~            .FullCompare:           ld      a,h
 170+ 0000 ~                                    xor     d
 171+ 0000 ~                                    and     $80
 172+ 0000 ~                                    jr      nz,.OppositeSigns   ; If opposite signs is a simple sign test
 173+ 0000 ~                                    ld      a,h                 ; same signs so a little simpler
 174+ 0000 ~                                    and     $80
 175+ 0000 ~                                    jp      z,cpHLDE            ; if h is positive then both are positive by here so just cpHLDE
 176+ 0000 ~                                    jp      cpABSDEHL           ; else we have to do ABScpDEHL
 177+ 0000 ~            .OppositeSigns:         ld      a,h
 178+ 0000 ~                                    and     $80
 179+ 0000 ~                                    and     $80
 180+ 0000 ~                                    jp      z,.HLGTDE
 181+ 0000 ~            .HLLTDE:                SetCarryFlag
 182+ 0000 ~                                    ret
 183+ 0000 ~            .HLGTDE:                ClearCarryFlag
 184+ 0000 ~                                    ret
 185+ 0000                                      ENDM
 186+ 0000
 187+ 0000              ;Unsigned
 188+ 0000              ;If HL == DE, then Z flag is set.
 189+ 0000              ;If HL != DE, then Z flag is reset.
 190+ 0000              ;If HL <  DE, then C flag is set.
 191+ 0000              ;If HL >= DE, then C flag is reset.
 192+ 0000              ;
 193+ 0000              ;Signed
 194+ 0000              ;If HL == DE, then Z flag is set.
 195+ 0000              ;If HL != DE, then Z flag is reset.
 196+ 0000              ;If HL <  DE, then S and P/V are different.
 197+ 0000              ;If HL >= DE, then S and P/V are the same.
 198+ 0000
 199+ 0000
 200+ 0000              N0equN1byN2div256:      MACRO param1,param2,param3
 201+ 0000 ~                                    ld      a,param3                        ;
 202+ 0000 ~                                    ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 203+ 0000 ~                                    ld      a,param2                        ; A = XX16 element
 204+ 0000 ~                                    ld      d,a
 205+ 0000 ~                                    mul
 206+ 0000 ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 207+ 0000 ~                                    ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 208+ 0000                                      ENDM
 209+ 0000
 210+ 0000              AequN1xorN2:            MACRO  param1,param2
 211+ 0000 ~                                    ld      a,(param1)
 212+ 0000 ~                                    xor     param2
 213+ 0000                                      ENDM
 214+ 0000
 215+ 0000              SpeedMulAxis:           MACRO   speedreg, axis
 216+ 0000 ~                                    ld      e,speedreg
 217+ 0000 ~                                    ld      hl,(axis)
 218+ 0000 ~                                    ld      a,h
 219+ 0000 ~                                    ClearSignBitA
 220+ 0000 ~                                    ld      d,a
 221+ 0000 ~                                    mul     de
 222+ 0000 ~                                    ld      a,h
 223+ 0000 ~                                    SignBitOnlyA
 224+ 0000 ~                                    ld      b,a;ld      c,a
 225+ 0000 ~                                    ld      h,d;ld      e,d
 226+ 0000 ~                                    ld      c,0;ld      d,0
 227+ 0000                                      ENDM
 228+ 0000
 229+ 0000
 230+ 0000              AddSpeedToVert:         MACRO   vertex
 231+ 0000 ~                                    ld      de,(vertex+1)
 232+ 0000 ~                                    ld      a,(vertex)
 233+ 0000 ~                                    ld      l,a
 234+ 0000 ~                                    call    AddBCHtoDELsigned               ; DEL = DEL + BCH
 235+ 0000 ~                                    ld      a,l
 236+ 0000 ~                                    ld      (vertex),a
 237+ 0000 ~                                    ld      (vertex+1),de
 238+ 0000                                      ENDM
 239+ 0000
 240+ 0000              MacroAequDxEdiv256usgn:	MACRO
 241+ 0000 ~            						mul
 242+ 0000 ~            						ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
 243+ 0000              						ENDM
 244+ 0000
 245+ 0000
 246+ 0000
 247+ 0000              APPequPosPlusAPP:       MACRO    Position, PositionSign
 248+ 0000 ~                                    push    bc
 249+ 0000 ~                                    ld      c,a                         ; save original value of a into c
 250+ 0000 ~                                    ld      a,(PositionSign)
 251+ 0000 ~                                    ld      b,a
 252+ 0000 ~                                    ld      a,c
 253+ 0000 ~                                    xor     b                           ; a = a xor x postition sign
 254+ 0000 ~                                    jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
 255+ 0000 ~            ; Signs are the same to we just add and take which ever sign
 256+ 0000 ~                                    ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
 257+ 0000 ~                                    ld      hl,(Position)
 258+ 0000 ~                                    add     hl,de
 259+ 0000 ~                                    ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
 260+ 0000 ~                                    ld      a,c                         ; and a = original sign as they were both the same
 261+ 0000 ~                                    pop     bc
 262+ 0000 ~                                    ret
 263+ 0000 ~            ; Signs are opposite so we subtract
 264+ 0000 ~            .MV50:                  ld      de,(varPp1)
 265+ 0000 ~                                    ld      hl,(Position)
 266+ 0000 ~                                    or      a
 267+ 0000 ~                                    sbc     hl,de
 268+ 0000 ~                                    jr      c,.MV51                     ; if the result was negative then negate result
 269+ 0000 ~                                    ld      a,c                         ; get back the original sign
 270+ 0000 ~                                    ld      (varPp1),hl                 ; and save result to P[2][1]
 271+ 0000 ~                                    xor     SignOnly8Bit                ; flip sign and exit A = flip of a
 272+ 0000 ~                                    pop     bc
 273+ 0000 ~                                    ret
 274+ 0000 ~            .MV51:                  NegHL
 275+ 0000 ~                                    ld      (varPp1),hl
 276+ 0000 ~                                    ld      a,c                         ; the original sign will still be good
 277+ 0000 ~                                    pop     bc
 278+ 0000 ~                                    ret
 279+ 0000                                      ENDM
 280+ 0000
 281+ 0000
# file closed: ./Macros/MathsMacros.asm
 121  0000                                      INCLUDE "./Macros/MMUMacros.asm"
# file opened: ./Macros/MMUMacros.asm
   1+ 0000              MMUSelectROM0:       MACRO
   2+ 0000 ~                                 nextreg EXSDOSMMU0,        BankROM
   3+ 0000                                   ENDM
   4+ 0000
   5+ 0000              MMUSelectROMS:       MACRO
   6+ 0000 ~                                 nextreg EXSDOSMMU0,        BankROM
   7+ 0000 ~                                 nextreg EXSDOSMMU1,        BankROM
   8+ 0000                                   ENDM
   9+ 0000
  10+ 0000              MMUSelectMathsTables:MACRO
  11+ 0000 ~                                 nextreg MathsTablesMMU,    BankMathsTables
  12+ 0000                                   ENDM
  13+ 0000
  14+ 0000              MMUSelectKeyboard:   MACRO
  15+ 0000 ~                                 nextreg KeyboardMMU,       BankKeyboard
  16+ 0000                                   ENDM
  17+ 0000
  18+ 0000              MMUSelectMathsBankedFns   MACRO
  19+ 0000 ~                                 nextreg MathsBankedFnsMMU, BankMathsBankedFns
  20+ 0000                                   ENDM
  21+ 0000
  22+ 0000              MMUSelectSpriteBank: MACRO
  23+ 0000 ~            					 nextreg SpritememMMU,	    BankSPRITE
  24+ 0000              					 ENDM
  25+ 0000
  26+ 0000              MMUSelectConsoleBank: MACRO
  27+ 0000 ~            					 nextreg ConsoleImageDataMMU,  BankConsole
  28+ 0000              					 ENDM
  29+ 0000
  30+ 0000              MMUSelectLayer1: 	 MACRO
  31+ 0000 ~            					 nextreg L1memMMU,		    BankLAYER1
  32+ 0000              					 ENDM
  33+ 0000
  34+ 0000              MMUSelectLayer2: 	 MACRO
  35+ 0000 ~            					 nextreg L2memMMU,		    BankLAYER2
  36+ 0000              					 ENDM
  37+ 0000
  38+ 0000              MMUSelectResetUniv:  MACRO
  39+ 0000 ~                                 nextreg ResetUniverseMMU, BankResetUniv
  40+ 0000                                   ENDM
  41+ 0000
  42+ 0000              MMUSelectShipARead:  MACRO
  43+ 0000 ~                                 add    a,BankUNIVDATA0
  44+ 0000 ~                                 nextreg ShipReadMMU,       a
  45+ 0000                                   ENDM
  46+ 0000
  47+ 0000              MMUSelectShipBank1:  MACRO
  48+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels1
  49+ 0000              					 ENDM
  50+ 0000              MMUSelectShipBank2:  MACRO
  51+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels2
  52+ 0000              					 ENDM
  53+ 0000              MMUSelectShipBank3:  MACRO
  54+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels3
  55+ 0000              					 ENDM
  56+ 0000              MMUSelectShipBank4:  MACRO
  57+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels4
  58+ 0000              					 ENDM
  59+ 0000
  60+ 0000              MMUSelectShipBankA   MACRO
  61+ 0000 ~            					 nextreg ShipModelMMU,	    a
  62+ 0000              					 ENDM
  63+ 0000
  64+ 0000              MMUSelectShipBankN:  MACRO value
  65+ 0000 ~            					 nextreg ShipModelMMU,	    value
  66+ 0000              					 ENDM
  67+ 0000
  68+ 0000              MMUSelectCommander:	 MACRO
  69+ 0000 ~                                 nextreg CommanderMMU,       BankCommander
  70+ 0000              					 ENDM
  71+ 0000
  72+ 0000              MMUSelectStockTable: MACRO
  73+ 0000 ~                                 nextreg StockTableMMU,     BankStockTable
  74+ 0000              					 ENDM
  75+ 0000
  76+ 0000              MMUSelectCpySrcA:    MACRO
  77+ 0000 ~                                 nextreg DMACpySourceMMU,	a
  78+ 0000              					 ENDM
  79+ 0000
  80+ 0000              MMUSelectCpySrcN:    MACRO value
  81+ 0000 ~                                 nextreg DMACpySourceMMU,	value
  82+ 0000              					 ENDM
  83+ 0000
  84+ 0000              MMUSelectSun:        MACRO
  85+ 0000 ~                                 nextreg SunMMU,            BankSunData
  86+ 0000                                   ENDM
  87+ 0000
  88+ 0000              MMUSelectPlanet:     MACRO
  89+ 0000 ~                                 nextreg PlanetMMU,         BankPlanetData
  90+ 0000                                   ENDM
  91+ 0000
  92+ 0000              MMUSelectSpaceStation: MACRO
  93+ 0000 ~                                 nextreg SpaceStationMMU,         BankSpaceStationData
  94+ 0000                                   ENDM
  95+ 0000
  96+ 0000              MMUSelectUniverseA:  MACRO
  97+ 0000 ~                                 add    a,BankUNIVDATA0
  98+ 0000 ~                                 nextreg UniverseMMU,       a
  99+ 0000                                   ENDM
 100+ 0000              ;Version that assumes a pre calulated A, used whn optimising many switches
 101+ 0000              MMUSelectUnivBankA:  MACRO
 102+ 0000 ~                                 nextreg UniverseMMU,       a
 103+ 0000                                   ENDM
 104+ 0000
 105+ 0000              MMUSelectUniverseN:  MACRO value
 106+ 0000 ~                                 nextreg UniverseMMU,       BankUNIVDATA0+value
 107+ 0000                                   ENDM
 108+ 0000
 109+ 0000              MMUSelectGalaxyA:    MACRO
 110+ 0000 ~                                 nextreg GalaxyDataMMU,     a
 111+ 0000                                   ENDM
 112+ 0000
 113+ 0000              MMUSelectGalaxyN:    MACRO value
 114+ 0000 ~                                 nextreg GalaxyDataMMU,     BankGalaxyData0+value
 115+ 0000                                   ENDM
 116+ 0000              MMUSelectGalaxyACopy:MACRO
 117+ 0000 ~                                 nextreg UniverseMMU,       a
 118+ 0000                                   ENDM
 119+ 0000
 120+ 0000              MMUSelectUniverseAbs:MACRO value
 121+ 0000 ~                                 nextreg UniverseMMU,       value
 122+ 0000                                   ENDM
 123+ 0000
 124+ 0000              MMUSelectMenuGalCht: MACRO
 125+ 0000 ~                                 nextreg MenuGalChtMMU,		BankMenuGalCht
 126+ 0000              					 ENDM
 127+ 0000
 128+ 0000              MMUSelectMenuShrCht: MACRO
 129+ 0000 ~            					 nextreg MenuShrChtMMU,		BankMenuShrCht
 130+ 0000              					 ENDM
 131+ 0000
 132+ 0000              MMUSelectMenuInvent: MACRO
 133+ 0000 ~                                 nextreg MenuInventMMU,		BankMenuInvent
 134+ 0000              					 ENDM
 135+ 0000
 136+ 0000              MMUSelectMenuSystem: MACRO
 137+ 0000 ~                                 nextreg MenuSystemMMU,		BankMenuSystem
 138+ 0000              					 ENDM
 139+ 0000
 140+ 0000              MMUSelectMenuMarket: MACRO
 141+ 0000 ~                                 nextreg MenuMarketMMU,		BankMenuMarket
 142+ 0000              					 ENDM
 143+ 0000
 144+ 0000              MMUSelectMenuStatus: MACRO
 145+ 0000 ~                                 nextreg MenuStatusMMU,		BankMenuStatus
 146+ 0000              					 ENDM
 147+ 0000
 148+ 0000              MMUSelectViewFront:  MACRO
 149+ 0000 ~                                 nextreg ScreenBankMMU,		BankFrontView
 150+ 0000              					 ENDM
 151+ 0000
 152+ 0000              MMUSelectScreenA:    MACRO
 153+ 0000 ~                                 nextreg ScreenBankMMU,		a
 154+ 0000              					 ENDM
 155+ 0000
 156+ 0000              MMUSelectSound:      MACRO
 157+ 0000 ~                                 nextreg SoundMMU,		    BankSound
 158+ 0000              					 ENDM
# file closed: ./Macros/MMUMacros.asm
 122  0000                                      INCLUDE "./Macros/NegateMacros.asm"
# file opened: ./Macros/NegateMacros.asm
   1+ 0000
   2+ 0000              macronegate16hl:	MACRO
   3+ 0000 ~            					xor 	a
   4+ 0000 ~            					sub 	l
   5+ 0000 ~            					ld 		l,a
   6+ 0000 ~            					sbc 	a,a
   7+ 0000 ~            					sub 	h
   8+ 0000 ~            					ld 		h,a
   9+ 0000              					ENDM
  10+ 0000
  11+ 0000
  12+ 0000              macroAbsHL:         MACRO
  13+ 0000 ~                                bit     7,h
  14+ 0000 ~                                jp      z,.alreadyABS
  15+ 0000 ~            					xor 	a
  16+ 0000 ~            					sub 	l
  17+ 0000 ~            					ld 		l,a
  18+ 0000 ~            					sbc 	a,a
  19+ 0000 ~            					sub 	h
  20+ 0000 ~            					ld 		h,a
  21+ 0000 ~            .alreadyABS:
  22+ 0000                                  ENDM
  23+ 0000
  24+ 0000              macronegate16de:	MACRO
  25+ 0000 ~            					xor 	a
  26+ 0000 ~                                sub 	e
  27+ 0000 ~                                ld 		e,a
  28+ 0000 ~                                sbc 	a,a
  29+ 0000 ~                                sub 	d
  30+ 0000 ~                                ld 		d,a
  31+ 0000              					ENDM
  32+ 0000
  33+ 0000              macronegate16bc:	MACRO
  34+ 0000 ~            					xor 	a
  35+ 0000 ~                                sub 	c
  36+ 0000 ~                                ld 		c,a
  37+ 0000 ~                                sbc 	a,a
  38+ 0000 ~                                sub 	b
  39+ 0000 ~                                ld 		b,a
  40+ 0000              					ENDM
  41+ 0000
  42+ 0000              macronegate16ix:	MACRO
  43+ 0000 ~            					xor 	a
  44+ 0000 ~                                sub 	ixl
  45+ 0000 ~                                ld 		ixl,a
  46+ 0000 ~                                sbc 	a,a
  47+ 0000 ~                                sub 	ixh
  48+ 0000 ~                                ld 		ixh,a
  49+ 0000              					ENDM
  50+ 0000
  51+ 0000
  52+ 0000              NegIY:			    MACRO
  53+ 0000 ~                                xor a
  54+ 0000 ~                                sub iyl
  55+ 0000 ~                                ld iyl,a
  56+ 0000 ~                                sbc a,a
  57+ 0000 ~                                sub iyh
  58+ 0000 ~                                ld iyh,a
  59+ 0000                                  ENDM
  60+ 0000
  61+ 0000              NegHL:			    MACRO
  62+ 0000 ~                                xor a
  63+ 0000 ~                                sub l
  64+ 0000 ~                                ld l,a
  65+ 0000 ~                                sbc a,a
  66+ 0000 ~                                sub h
  67+ 0000 ~                                ld h,a
  68+ 0000                                  ENDM
  69+ 0000
  70+ 0000              NegDE:			    MACRO
  71+ 0000 ~                                xor a
  72+ 0000 ~                                sub e
  73+ 0000 ~                                ld e,a
  74+ 0000 ~                                sbc a,a
  75+ 0000 ~                                sub d
  76+ 0000 ~                                ld d,a
  77+ 0000                                  ENDM
  78+ 0000
  79+ 0000              NegBC:			    MACRO
  80+ 0000 ~                                xor a
  81+ 0000 ~                                sub c
  82+ 0000 ~                                ld c,a
  83+ 0000 ~                                sbc a,a
  84+ 0000 ~                                sub  b
  85+ 0000 ~                                ld b,a
  86+ 0000                                  ENDM
  87+ 0000
  88+ 0000              NegH                MACRO
  89+ 0000 ~                                ld      a,h
  90+ 0000 ~                                neg
  91+ 0000 ~                                ld      h,a
  92+ 0000                                  ENDM
  93+ 0000
  94+ 0000              NegD                MACRO
  95+ 0000 ~                                ld      a,d
  96+ 0000 ~                                neg
  97+ 0000 ~                                ld      d,a
  98+ 0000                                  ENDM
  99+ 0000
 100+ 0000              NegB                MACRO
 101+ 0000 ~                                ld      a,b
 102+ 0000 ~                                neg
 103+ 0000 ~                                ld      b,a
 104+ 0000                                  ENDM
 105+ 0000
# file closed: ./Macros/NegateMacros.asm
 123  0000                                      INCLUDE "./Macros/returnMacros.asm"
# file opened: ./Macros/returnMacros.asm
   1+ 0000              ReturnIfHLNegative:     MACRO   target
   2+ 0000 ~                                    bit     7,h
   3+ 0000 ~                                    ret     nz
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ReturnIfDENegative:     MACRO   target
   7+ 0000 ~                                    bit     7,d
   8+ 0000 ~                                    ret     nz
   9+ 0000                                      ENDM
  10+ 0000
  11+ 0000              ReturnOnBitSet:         MACRO  reg, bitnbr
  12+ 0000 ~                                    bit 	bitnbr,reg
  13+ 0000 ~                                    ret     nz
  14+ 0000                                      ENDM
  15+ 0000
  16+ 0000              ReturnOnMemBitSet:      MACRO mem, bitnbr
  17+ 0000 ~                                    ld   a,(mem)
  18+ 0000 ~                                    bit 	bitnbr,a
  19+ 0000 ~                                    ret     nz
  20+ 0000                                      ENDM
  21+ 0000
  22+ 0000              ReturnOnBitClear:       MACRO reg, bitnbr
  23+ 0000 ~                                    bit 	bitnbr,reg
  24+ 0000 ~                                    ret		z
  25+ 0000                                      ENDM
  26+ 0000
  27+ 0000              ReturnOnMemBitClear:    MACRO mem, bitnbr
  28+ 0000 ~                                    ld     a,(mem)
  29+ 0000 ~                                    bit 	bitnbr,a
  30+ 0000 ~                                    ret		z
  31+ 0000                                      ENDM
  32+ 0000
  33+ 0000              ReturnIfMemFalse:       MACRO   mem
  34+ 0000 ~                                    ld      a,(mem)
  35+ 0000 ~                                    and     a
  36+ 0000 ~                                    ret     nz
  37+ 0000                                      ENDM
  38+ 0000
  39+ 0000              ReturnIfMemTrue:        MACRO   mem
  40+ 0000 ~                                    ld      a,(mem)
  41+ 0000 ~                                    and     a
  42+ 0000 ~                                    ret     z
  43+ 0000                                      ENDM
  44+ 0000
  45+ 0000              ReturnIfAIsZero:        MACRO
  46+ 0000 ~                                    and     a
  47+ 0000 ~                                    ret     z
  48+ 0000                                      ENDM
  49+ 0000
  50+ 0000              ReturnIfMemisZero:      MACRO mem
  51+ 0000 ~                                    ld   a,(mem)
  52+ 0000 ~                                    and a
  53+ 0000 ~                                    ret    z
  54+ 0000                                      ENDM
  55+ 0000
  56+ 0000              ReturnIfMemIsNegative:  MACRO mem
  57+ 0000 ~                                    ld      a,(mem)
  58+ 0000 ~                                    and     $80
  59+ 0000 ~                                    ret     nz
  60+ 0000                                      ENDM
  61+ 0000
  62+ 0000              ReturnIfBitMaskClear    MACRO   bitmask
  63+ 0000 ~                                    and     bitmask
  64+ 0000 ~                                    ret     z
  65+ 0000                                      ENDM
  66+ 0000
  67+ 0000              ReturnIfBitMaskSet      MACRO   bitmask
  68+ 0000 ~                                    and     bitmask
  69+ 0000 ~                                    ret     nz
  70+ 0000                                      ENDM
  71+ 0000
  72+ 0000              ReturnIfMemEquN:        MACRO mem, value
  73+ 0000 ~                                    ld     a,(mem)
  74+ 0000 ~                                    cp     value
  75+ 0000 ~                                    ret    nz
  76+ 0000                                      ENDM
  77+ 0000
  78+ 0000              ReturnIfMemNeNusng:     MACRO mem, value
  79+ 0000 ~                                    ld   a,(mem)
  80+ 0000 ~                                    cp     value
  81+ 0000 ~                                    ret    z
  82+ 0000                                      ENDM
  83+ 0000
  84+ 0000              ReturnIfRegNotZero:     MACRO reg
  85+ 0000 ~                                    ld      a, reg
  86+ 0000 ~                                    and     a
  87+ 0000 ~                                    ret     nz
  88+ 0000                                      ENDM
  89+ 0000
  90+ 0000              ReturnIfANotZero:       MACRO
  91+ 0000 ~                                    and     a
  92+ 0000 ~                                    ret     nz
  93+ 0000                                      ENDM
  94+ 0000
  95+ 0000              ReturnIfNotZero:        MACRO
  96+ 0000 ~                                    ret     nz
  97+ 0000                                      ENDM
  98+ 0000
  99+ 0000              ReturnIfZero:           MACRO
 100+ 0000 ~                                    ret     z
 101+ 0000                                      ENDM
 102+ 0000
 103+ 0000              ReturnIfNegative:       MACRO
 104+ 0000 ~                                    ret     m
 105+ 0000                                      ENDM
 106+ 0000
 107+ 0000
 108+ 0000              ReturnIfMemNotZero:     MACRO mem
 109+ 0000 ~                                    ld     a,(mem)
 110+ 0000 ~                                    and     a
 111+ 0000 ~                                    ret    nz
 112+ 0000                                      ENDM
 113+ 0000
 114+ 0000              ReturnIfAGTEusng:       MACRO value
 115+ 0000 ~                                    cp    value
 116+ 0000 ~                                    ret	 nc
 117+ 0000                                      ENDM
 118+ 0000
 119+ 0000              ReturnIfRegLTNusng:     MACRO reg, value
 120+ 0000 ~                                    ld      a,reg
 121+ 0000 ~                                    cp      value
 122+ 0000 ~                                    ret	    c
 123+ 0000                                      ENDM
 124+ 0000
 125+ 0000              ReturnIfALTNusng:       MACRO value
 126+ 0000 ~                                    cp    value
 127+ 0000 ~                                    ret	 c
 128+ 0000                                      ENDM
 129+ 0000
 130+ 0000              ReturnIfAGTENusng:      MACRO value
 131+ 0000 ~                                    cp    value
 132+ 0000 ~                                    ret	 nc
 133+ 0000                                      ENDM
 134+ 0000
 135+ 0000              ReturnIfAGTEMemusng:    MACRO value
 136+ 0000 ~                                    ld      hl,value
 137+ 0000 ~                                    cp      (hl)
 138+ 0000 ~                                    ret	    nc
 139+ 0000                                      ENDM
 140+ 0000
 141+ 0000              ReturnIfANENusng:       MACRO value
 142+ 0000 ~                                    cp      value
 143+ 0000 ~                                    ret     nz
 144+ 0000                                      ENDM
 145+ 0000
 146+ 0000              ReturnIfAEqNusng:       MACRO value
 147+ 0000 ~                                    cp      value
 148+ 0000 ~                                    ret     z
 149+ 0000                                      ENDM
 150+ 0000
# file closed: ./Macros/returnMacros.asm
 124  0000                                      INCLUDE "./Macros/ShiftMacros.asm"
# file opened: ./Macros/ShiftMacros.asm
   1+ 0000              ShiftIYRight1: MACRO
   2+ 0000 ~            			   ld 	a,iyh
   3+ 0000 ~            			   srl 	a
   4+ 0000 ~            			   ld	iyh,a
   5+ 0000 ~            			   ld 	a,iyl
   6+ 0000 ~            			   rra
   7+ 0000 ~            			   ld	iyl,a
   8+ 0000              			   ENDM
   9+ 0000
  10+ 0000              ShiftIXRight1: MACRO
  11+ 0000 ~            			   ld 	a,ixh
  12+ 0000 ~            			   srl 	a
  13+ 0000 ~            			   ld	ixh,a
  14+ 0000 ~            			   ld 	a,ixl
  15+ 0000 ~            			   rra
  16+ 0000 ~            			   ld	ixl,a
  17+ 0000              			   ENDM
  18+ 0000
  19+ 0000              ShiftHLRight1: MACRO
  20+ 0000 ~            			   srl h
  21+ 0000 ~            			   rr  l
  22+ 0000              			   ENDM
  23+ 0000
  24+ 0000              ShiftDERight1: MACRO
  25+ 0000 ~            			   srl d
  26+ 0000 ~            			   rr  e
  27+ 0000              			   ENDM
  28+ 0000
  29+ 0000              ShiftBCRight1: MACRO
  30+ 0000 ~            			   srl b
  31+ 0000 ~            			   rr  c
  32+ 0000              			   ENDM
  33+ 0000
  34+ 0000
  35+ 0000
  36+ 0000              ShiftHLDiv8:   MACRO
  37+ 0000 ~            			   srl h
  38+ 0000 ~            			   rr  l
  39+ 0000 ~            			   srl h
  40+ 0000 ~            			   rr  l
  41+ 0000 ~            			   srl h
  42+ 0000 ~            			   rr  l
  43+ 0000              			   ENDM
  44+ 0000
  45+ 0000              ShiftHLLeft1:  MACRO    ; 16 T states
  46+ 0000 ~            			   sla l
  47+ 0000 ~            			   rl  h
  48+ 0000              			   ENDM
  49+ 0000
  50+ 0000              ShiftDELeft1:  MACRO    ; 16 T states
  51+ 0000 ~            			   sla e
  52+ 0000 ~            			   rl  d
  53+ 0000              			   ENDM
  54+ 0000
  55+ 0000              BarrelHLLeft3: MACRO
  56+ 0000 ~                           ex       de,hl   ; 4   43 T states vs 32 for doing ShiftHL Twice, so need at least 3 Shifts
  57+ 0000 ~                           push     bc      ; 10
  58+ 0000 ~                           ld       b,3     ; 7
  59+ 0000 ~                           bsrl     de,b    ; 8
  60+ 0000 ~                           pop      bc      ; 10
  61+ 0000 ~                           ex       de,hl   ; 4
  62+ 0000                             ENDM
  63+ 0000
  64+ 0000              BarrelHLRight3: MACRO
  65+ 0000 ~                           ex       de,hl   ; 4   43 T states vs 32 for doing ShiftHL Twice, so need at least 3 Shifts
  66+ 0000 ~                           push     bc      ; 10
  67+ 0000 ~                           ld       b,3     ; 7
  68+ 0000 ~                           bsrl     de,b    ; 8
  69+ 0000 ~                           pop      bc      ; 10
  70+ 0000 ~                           ex       de,hl   ; 4
  71+ 0000                             ENDM
  72+ 0000
  73+ 0000              RollBCLeft1:   MACRO	; 16 T states
  74+ 0000 ~                           rl  c
  75+ 0000 ~                           rl  b
  76+ 0000                             ENDM
  77+ 0000
  78+ 0000              RollDELeft1:   MACRO	; 16 T states
  79+ 0000 ~                           rl  e
  80+ 0000 ~                           rl  d
  81+ 0000                             ENDM
  82+ 0000
  83+ 0000              ShiftBCLeft1:  MACRO    ; 16 T states
  84+ 0000 ~            			   sla c
  85+ 0000 ~            			   rl  b
  86+ 0000              			   ENDM
  87+ 0000
  88+ 0000              ShiftLeftMem:       MACRO   reg
  89+ 0000 ~                                ld      hl,reg
  90+ 0000 ~                                sla     (hl)
  91+ 0000                                  ENDM
  92+ 0000
  93+ 0000
  94+ 0000
  95+ 0000              ShiftMem16Right1:   MACRO memaddr
  96+ 0000 ~                                ld    hl,(memaddr)
  97+ 0000 ~                                srl   h
  98+ 0000 ~                                rr    l
  99+ 0000 ~                                ld    (memaddr),hl
 100+ 0000                                  ENDM
 101+ 0000
 102+ 0000              ShiftMem8Right1:    MACRO memaddr
 103+ 0000 ~                                ld      a,(memaddr)
 104+ 0000 ~                                srl     a
 105+ 0000 ~                                ld      (memaddr),a
 106+ 0000                                  ENDM
 107+ 0000
 108+ 0000
 109+ 0000              ShiftMem8Left1A:    MACRO memaddr
 110+ 0000 ~                                ld      a,(memaddr)
 111+ 0000 ~                                sla     a
 112+ 0000 ~                                ld      (memaddr),a
 113+ 0000                                  ENDM
 114+ 0000
# file closed: ./Macros/ShiftMacros.asm
 125  0000                                      INCLUDE "./Macros/signBitMacros.asm"
# file opened: ./Macros/signBitMacros.asm
   1+ 0000              SetMemBitN              MACRO mem,bitnbr
   2+ 0000 ~                                    ld      hl,mem
   3+ 0000 ~                                    set     bitnbr,(hl)
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ClearMemBitN            MACRO mem,bitnbr
   7+ 0000 ~                                    ld      hl,mem
   8+ 0000 ~                                    res     bitnbr,(hl)
   9+ 0000                                      ENDM
  10+ 0000
  11+ 0000
  12+ 0000              ClearSignBitMem:        MACRO mem
  13+ 0000 ~                                    ld      a,(mem)
  14+ 0000 ~                                    and     SignMask8Bit
  15+ 0000 ~                                    ld      (mem),a
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              SetSignBitMem:          MACRO   mem
  19+ 0000 ~                                    ld      a,(mem)
  20+ 0000 ~                                    or      SignOnly8Bit
  21+ 0000 ~                                    ld      (mem),a
  22+ 0000                                      ENDM
  23+ 0000
  24+ 0000              FlipSignMem:            MACRO mem
  25+ 0000 ~                                    ld  a,(mem)
  26+ 0000 ~                                    xor SignOnly8Bit
  27+ 0000 ~                                    ld  (mem),a
  28+ 0000                                      ENDM
  29+ 0000
  30+ 0000              SignBitOnlyMem:         MACRO mem
  31+ 0000 ~                                    ld      a, (mem)
  32+ 0000 ~                                    and     SignOnly8Bit
  33+ 0000 ~                                    ld      (mem),a
  34+ 0000                                      ENDM
  35+ 0000
  36+ 0000              ClearSignBit:           MACRO reg
  37+ 0000 ~                                    ld      a,reg
  38+ 0000 ~                                    and     SignMask8Bit
  39+ 0000 ~                                    ld      reg,a
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              SetSignBit:             MACRO   reg
  43+ 0000 ~                                    ld      a,reg
  44+ 0000 ~                                    or      SignOnly8Bit
  45+ 0000 ~                                    ld      reg,a
  46+ 0000                                      ENDM
  47+ 0000
  48+ 0000              FlipSignBit:            MACRO   reg
  49+ 0000 ~                                    ld      a, reg
  50+ 0000 ~                                    xor     SignOnly8Bit
  51+ 0000 ~                                    ld      reg,a
  52+ 0000                                      ENDM
  53+ 0000
  54+ 0000              SignBitOnly:            MACRO   reg
  55+ 0000 ~                                    ld      a, reg
  56+ 0000 ~                                    and     SignOnly8Bit
  57+ 0000 ~                                    ld      reg,a
  58+ 0000                                      ENDM
  59+ 0000
  60+ 0000              ClearSignBitA:          MACRO
  61+ 0000 ~                                    and     SignMask8Bit
  62+ 0000                                      ENDM
  63+ 0000
  64+ 0000              SetSignBitA:            MACRO
  65+ 0000 ~                                    or      SignOnly8Bit
  66+ 0000                                      ENDM
  67+ 0000
  68+ 0000              FlipSignBitA:           MACRO
  69+ 0000 ~                                    xor     SignOnly8Bit
  70+ 0000                                      ENDM
  71+ 0000
  72+ 0000              SignBitOnlyA:           MACRO
  73+ 0000 ~                                    and     SignOnly8Bit
  74+ 0000                                      ENDM
# file closed: ./Macros/signBitMacros.asm
 126  0000                                      INCLUDE "./Macros/KeyboardMacros.asm"
# file opened: ./Macros/KeyboardMacros.asm
   1+ 0000              MacroIsKeyPressed:      MACRO C_Pressed_keycode
   2+ 0000 ~                                    ld      a,C_Pressed_keycode
   3+ 0000 ~                                    MMUSelectKeyboard
   4+ 0000 ~                                    call    is_key_pressed
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              MacroInitkeyboard:      MACRO
   8+ 0000 ~                                    MMUSelectKeyboard
   9+ 0000 ~                                    call    init_keyboard
  10+ 0000                                      ENDM
  11+ 0000
# file closed: ./Macros/KeyboardMacros.asm
 127  0000                                      INCLUDE "./Universe/UniverseMacros/asm_linedraw.asm"
# file opened: ./Universe/UniverseMacros/asm_linedraw.asm
   1+ 0000              ClippingVarsMacro:   MACRO   p?
   2+ 0000 ~            ;-- Clipping code for universe objects -------------------------------------------
   3+ 0000 ~            p?_XX13        DB 0
   4+ 0000 ~
   5+ 0000 ~
   6+ 0000 ~            p?_varK3		 DS	4				; D2
   7+ 0000 ~            p?_centreX     equ p?_varK3
   8+ 0000 ~            p?_varK3p2	 DB	0				; 42
   9+ 0000 ~            p?_varK3p3	 DB	0				; 43
  10+ 0000 ~            p?_varK3p1	 equ p?_varK3+1			; D3
  11+ 0000 ~            p?_varK4		 DS	4				; E0
  12+ 0000 ~            p?_centreY     equ p?_varK4
  13+ 0000 ~            p?_varK4p1	 equ p?_varK4+1			; D3
  14+ 0000 ~            p?_varK5       DS  6
  15+ 0000 ~            p?_varK5p2     equ p?_varK5+2
  16+ 0000 ~            p?_varK6       DS  6
  17+ 0000 ~            p?_varK6p2     equ p?_varK6+2
  18+ 0000 ~
  19+ 0000 ~            p?_XX12p2      DB 0    ; The line's gradient * 256 (so 1.0 = 256)
  20+ 0000 ~            p?_XX12p3      DB 0    ; The direction of slope ; + LT to BR; - TR to BL
  21+ 0000 ~            p?_XX12p4      DB 0
  22+ 0000 ~            p?_XX12p5      DB 0
  23+ 0000 ~            p?_Delta_x     EQU p?_XX12p2
  24+ 0000 ~            p?_Delta_y     EQU p?_XX12p4
  25+ 0000 ~            p?_Tvar        DB 0    ; The gradient of slope ; 0 if it's a shallow slope (DX > DY) ; &FF if it's a steep slope (DY > DX) Returns:  XX15        m         x1 as an 8-bit coordinate XX15+2               y1 as an 8-bit coordinate
  26+ 0000 ~            p?_Qvar        DB 0
  27+ 0000 ~            p?_Rvar        DB 0    ; general purpose for calcs  Paired with S must be done this way round for SUBHeightFromY1 etc to work
  28+ 0000 ~            p?_Svar        DB 0    ; sign variable
  29+ 0000 ~            p?_SRvarPair   EQU p?_Rvar
  30+ 0000 ~            p?_Xreg        DB 0
  31+ 0000 ~            p?_Yreg        DB 0
  32+ 0000 ~            p?_YXregPair   EQU p?_Xreg
  33+ 0000                                   ENDM
  34+ 0000
  35+ 0000              ;-- Name: LL28 Calculate R = 256 * A / Q
  36+ 0000              ;-- LL28+4              Skips the A >= Q check and always returns with C flag cleared, so this can be called if we know the division will work
  37+ 0000              ;-- LL31                Skips the A >= Q check and does not set the R counter, so this can be used for jumping straight into the division loop if R is already set to 254 and we know the division will work
  38+ 0000              ;   Reg mapping 6502  Z80
  39+ 0000              ;               a     a
  40+ 0000              ;               b     x
  41+ 0000              ;               c     q
  42+ 0000              ;               d     r
  43+ 0000              ;
  44+ 0000              ClippingCodeLL28Macro:      MACRO   p?
  45+ 0000 ~            p?_LL28_6502:         ld      hl,Qvar                 ; CMP Q                  \ If A >= Q, then the answer will not fit in one byte,
  46+ 0000 ~                                        ld      c,(hl)                  ; using c as Q var
  47+ 0000 ~                                        cp      c
  48+ 0000 ~                                        FlipCarryFlag
  49+ 0000 ~                                        jp      c, p?_LL2_6502    ; BCS LL2                \ so jump to LL2 to return 255
  50+ 0000 ~                                        ld      b,$FE                   ; LDX #%11111110         \ Set R to have bits 1-7 set, so we can rotate through 7 loop iterations, getting a 1 each time, and then we use b as Rvar
  51+ 0000 ~            p?_LL31_6502:          sla     a                       ; ASL A                  \ Shift A to the left
  52+ 0000 ~                                        jp      c, p?_LL29_6502             ; BCS LL29               \ If bit 7 of A was set, then jump straight to the subtraction
  53+ 0000 ~                                        FlipCarryFlag                   ;                          If A < N, then C flag is set.
  54+ 0000 ~                                        JumpIfALTNusng c, p?_LL31_SKIPSUB_6502 ; CMP Q              \ If A < Q, skip the following subtraction
  55+ 0000 ~                                                                            ; BCC P%+4
  56+ 0000 ~                                        sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  57+ 0000 ~                                        ClearCarryFlag
  58+ 0000 ~            p?_LL31_SKIPSUB_6502:  FlipCarryFlag
  59+ 0000 ~                                        rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  60+ 0000 ~                                        jp      c, p?_LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  61+ 0000 ~                                        ld      a,b
  62+ 0000 ~                                        ld      (Rvar),a
  63+ 0000 ~                                        ret                             ; RTS                    \ R left with remainder of division
  64+ 0000 ~            p?_LL29_6502:          sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  65+ 0000 ~                                        SetCarryFlag                    ; SEC                    \ Set the C flag to rotate into the result in R
  66+ 0000 ~                                        rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  67+ 0000 ~                                        jp      c, p?_LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  68+ 0000 ~                                        ld      a,b                     ; RTS                    \ Return from the subroutine with R containing the
  69+ 0000 ~                                        ld      (Rvar),a                ; .
  70+ 0000 ~                                        ret                             ; .                      \ remainder of the division
  71+ 0000 ~            p?_LL2_6502:          ld      a,$FF                   ; LDA #255               \ The division is very close to 1, so return the closest
  72+ 0000 ~                                        ld      (Rvar),a                ; STA R                  \ possible answer to 256, i.e. R = 255
  73+ 0000 ~                                        SetCarryFlag                    ; we failed so need carry flag set
  74+ 0000 ~                                        ret                             ; RTS                    \ Return from the subroutine
  75+ 0000 ~
  76+ 0000 ~            p?_ADDXRegtoY1:       ld      a,(Xreg)                ; Set y1 = y1 + (Y X)
  77+ 0000 ~                                        ld      c,a
  78+ 0000 ~                                        ld      b,0
  79+ 0000 ~                                        ld      hl,(p?_XX1532)
  80+ 0000 ~                                        ClearCarryFlag
  81+ 0000 ~                                        adc     hl,bc
  82+ 0000 ~                                        ld      (p?_XX1532),hl
  83+ 0000 ~                                        ret
  84+ 0000 ~
  85+ 0000 ~            p?_ADDYXRegtoY1:      ld      bc,(YXregPair)          ; Set y1 = y1 + (Y X)
  86+ 0000 ~                                        ld      hl,(p?_XX1532)
  87+ 0000 ~                                        ClearCarryFlag
  88+ 0000 ~                                        adc     hl,bc
  89+ 0000 ~                                        ld      (p?_XX1532),hl
  90+ 0000 ~                                        ret
  91+ 0000 ~
  92+ 0000 ~            p?_ADDYXRegtoX1:      ld      bc,(YXregPair)          ; Set x1 = x1 + (Y X)
  93+ 0000 ~                                        ld      hl,(p?_XX1510)
  94+ 0000 ~                                        ClearCarryFlag
  95+ 0000 ~                                        adc     hl,bc
  96+ 0000 ~                                        ld      (p?_XX1510),hl
  97+ 0000 ~                                        ret
  98+ 0000 ~
  99+ 0000 ~            p?_SUBBCFromY1:       ld      hl,(p?_XX1532)             ; Set (S R) = (y1_hi y1_lo) - BC where BC can be say screen height
 100+ 0000 ~                                        ClearCarryFlag
 101+ 0000 ~                                        sbc     hl,bc
 102+ 0000 ~                                        ld      (SRvarPair),hl
 103+ 0000 ~                                        ret
 104+ 0000 ~
 105+ 0000 ~            p?_AddSRToYX:         ld      hl,(YXregPair)
 106+ 0000 ~                                        ld      de,(SRvarPair)
 107+ 0000 ~                                        ClearCarryFlag
 108+ 0000 ~                                        adc     hl,de
 109+ 0000 ~                                        ld      (YXregPair),hl
 110+ 0000 ~                                        ret
 111+ 0000 ~
 112+ 0000 ~            p?_ClampX:            ld      a,h
 113+ 0000 ~                                        and     a
 114+ 0000 ~                                        ld      a,l
 115+ 0000 ~                                        ret     z
 116+ 0000 ~                                        jp      p,.Max255
 117+ 0000 ~            .ClampXMin0:                ZeroA
 118+ 0000 ~                                        ret
 119+ 0000 ~            .Max255:                    ld      a,$FF
 120+ 0000 ~                                        ret
 121+ 0000 ~
 122+ 0000 ~            p?_ClampY:            ld      a,h
 123+ 0000 ~                                        and     a
 124+ 0000 ~                                        jp      z,.ClampYlo
 125+ 0000 ~                                        jp      p,.Max127
 126+ 0000 ~            .ClampYMin0:                ZeroA
 127+ 0000 ~                                        ret
 128+ 0000 ~            .Max127:                    ld      a,127
 129+ 0000 ~                                        ret
 130+ 0000 ~            .ClampYlo:                  ld      a,l
 131+ 0000 ~                                        and     a
 132+ 0000 ~                                        ret     p
 133+ 0000 ~                                        ld      a,127
 134+ 0000 ~                                        ret
 135+ 0000                                          ENDM
 136+ 0000              ;-- Rountes to code:
 137+ 0000              ;-- LL118
 138+ 0000              ;-- LL120   Done
 139+ 0000              ;-- LL129   Done
 140+ 0000              ;-- LL123   Done
 141+ 0000                             ; NOTE DOES ABS ONLY
 142+ 0000
 143+ 0000
 144+ 0000                              ;--- LL118 Move along a point until on screen
 145+ 0000              ; In XX1510 x1 as a 16-bit coordinate (x1_hi x1_lo)
 146+ 0000              ;    XX1532 y1 as a 16-bit coordinate (y1_hi y1_lo)
 147+ 0000              ;    XX12p2 The line's gradient * 256 (so 1.0 = 256)
 148+ 0000              ;    XX12p3 The direction of slope: * Positive = top left to bottom right * Negative (bit 7 set) = top right to bottom left
 149+ 0000              ;    T      The gradient of slope:* 0 if it's a shallow slope * &FF if it's a steep slope
 150+ 0000              ;  Out  XX150               x1 as an 8-bit coordinate
 151+ 0000              ;       XX152               y1 as an 8-bit coordinate
 152+ 0000              ;----------------------------------------------------------------------------------------------------------------
 153+ 0000
 154+ 0000
 155+ 0000              ;---------------------------------------------------------------------------------------------------------------------
 156+ 0000              ;--  Calculate the following:
 157+ 0000              ;--   * If T = 0, this is a shallow slope, so calculate (Y X) = (S x1_lo) * XX12+2
 158+ 0000              ;--   * If T <> 0, this is a steep slope, so calculate (Y X) = (S x1_lo) / XX12+2
 159+ 0000              ;-- giving (Y X) the opposite sign to the slope direction in XX12+3.
 160+ 0000              ;---------------------------------------------------------------------------------------------------------------------
 161+ 0000              ClippingCodeLL120Macro:     MACRO   p?
 162+ 0000 ~            p?_LL120_6502:        ld      a,(p?_XX1510)              ;LDA XX15               \ Set R = x1_lo
 163+ 0000 ~                                        ld      (Rvar),a                ;STA R
 164+ 0000 ~                                        call    p?_LL129_6502              ;JSR LL129              \ Call LL129 to do the following:  Q = XX12+2 = line gradient, A = S EOR XX12+3 = S EOR slope direction  (S R) = |S R|
 165+ 0000 ~                                        push    af                      ;PHA                    \ Store A on the stack so we can use it later
 166+ 0000 ~            ; DONT NEED PLUS MESSES UP FLAGS                    push    af                      ;LDX T                  \ If T is non-zero, then it's a steep slope, so jump
 167+ 0000 ~                                        ld      a,(Tvar)                ; .
 168+ 0000 ~                                        ld      (Xreg),a                ;. REDUNDANT REMOVE IN OPTIMISATION
 169+ 0000 ~                                        and     a                       ;BNE LL121              \ down to LL121 to calculate this instead (Y X) = (S R) / Q
 170+ 0000 ~            ; DONT NEED PLUS MESSES UP FLAGS                    pop     af                      ;.                      (recover teh saved A before the cp)
 171+ 0000 ~                                        jr      nz,p?_LL121_6502           ;.
 172+ 0000 ~            ;..   (Y X) = (S R) * Q - must be ABS, sign determined by opposite of the sign of the value on top of stack
 173+ 0000 ~            p?_LL122_6502:         ZeroA                           ;LDA #0                 \ Set A = 0
 174+ 0000 ~
 175+ 0000 ~                                        IFDEF DEBUG_LL122_DIRECT"
 176+ 0000 ~                                              DISPLAY "DIRECT CALL TO LL122 so dummy push a to stack with 0"
 177+ 0000 ~                                              push    af
 178+ 0000 ~                                        ENDIF
 179+ 0000 ~                                        ld      (Xreg),a                ;TAX                    \ Set (Y X) = 0 so we can start building the answer here
 180+ 0000 ~                                        ld      (Yreg),a                ;TAY
 181+ 0000 ~                                        ld      hl,Svar
 182+ 0000 ~                                        ld      bc,(SRvarPair)          ;LSR S                  \ Shift (S R) to the right, so we extract bit 0 of (S R)
 183+ 0000 ~                                        ShiftBCRight1                   ;ROR R                  \ into the C flag
 184+ 0000 ~                                        ld      (SRvarPair),bc
 185+ 0000 ~                                        ld      hl, Qvar                ;ASL Q                  \ Shift Q to the left, catching bit 7 in the C flag
 186+ 0000 ~                                        sla     (hl)                    ;.
 187+ 0000 ~                                        jr      nc, p?_LL126_6502          ;BCC LL126              \ If C (i.e. the next bit from Q) is clear, do not do
 188+ 0000 ~            ; the addition for this bit of Q, and instead skip to LL126 to just do the shifts
 189+ 0000 ~            p?_LL125_6502:        call    AddSRToYX               ;TXA                    \ Set (Y X) = (Y X) + (S R)  starting with the low bytes And then doing the high bytes
 190+ 0000 ~            p?_LL126_6502:        ld      bc,(SRvarPair)          ;LSR S                  \ Shift (S R) to the right
 191+ 0000 ~                                        ShiftBCRight1                   ;ROR R
 192+ 0000 ~                                        ld      (SRvarPair),bc          ;.
 193+ 0000 ~                                        ld      hl, Qvar                ;ASL Q                  \ Shift Q to the left, catching bit 7 in the C flag
 194+ 0000 ~                                        sla     (hl)                    ;.
 195+ 0000 ~                                        jr      c,p?_LL125_6502            ;BCS LL125              \ If C (i.e. the next bit from Q) is set, loop back to LL125 to do the addition for this bit of Q
 196+ 0000 ~                                        jr      nz,p?_LL126_6502           ;BNE LL126              \ If Q has not yet run out of set bits, loop back to LL126 to do the \"shift\" part of shift-and-add until we have done additions for all the set bits in Q, to give us our multiplication result
 197+ 0000 ~                                        pop     af                      ;PLA                    \ Restore A, which we calculated above, from the stack
 198+ 0000 ~                                        and     a                       ;BPL LL133              \ If A is positive jump to LL133 to negate (Y X) and
 199+ 0000 ~                                        jp      p,p?_LL133_6502            ;.
 200+ 0000 ~                                        ;.. return from the subroutine using a tail call
 201+ 0000 ~                                        ret                             ;RTS                    \ Return from the subroutine
 202+ 0000                                  ENDM
 203+ 0000              ;----------------------------------------------------------------------------------------------------------------------------
 204+ 0000              ;-- Calculate the following:
 205+ 0000              ;--         * If T = 0, this is a shallow slope, so calculate (Y X) = (S R) / XX12+2 (does not use X1lo but directly SR)
 206+ 0000              ;--         * If T <> 0, this is a steep slope, so calculate (Y X) = (S R) * XX12+2  (does not use X1lo but directly SR)
 207+ 0000              ;--             giving (Y X) the opposite sign to the slope direction in XX12+3.
 208+ 0000              ClippingCodeLL122Macro:      MACRO   p?
 209+ 0000 ~            p?_LL123_6502:         call    p?_LL129_6502              ;JSR LL129              \ Call LL129 to do the following   Q = XX12+2   = line gradient
 210+ 0000 ~                                         push    af                      ;PHA                    \ Store A on the stack so we can use it later
 211+ 0000 ~            ; DONT NEED PLUS MESSES UP FLAGS                    push    af                      ;LDX T                  \ If T is non-zero, then it's a steep slope, so jump up
 212+ 0000 ~                                         ld      a,(Tvar)                ; .
 213+ 0000 ~                                         ld      (Xreg),a                ;BNE LL122              \ to LL122 to calculate this instead:
 214+ 0000 ~                                         and     a                       ;.
 215+ 0000 ~            ;  DONT NEED PLUS MESSES UP FLAGS                    pop     af                      ;.
 216+ 0000 ~                                         jr      nz,p?_LL122_6502           ;.
 217+ 0000 ~            ;--  The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2
 218+ 0000 ~            p?_LL121_6502:         ld      a,$FF                   ;LDA #%11111111         \ Set Y = %11111111
 219+ 0000 ~                                         ld      (Yreg),a                ;TAY
 220+ 0000 ~                                         sla     a                       ;ASL A                  \ Set X = %11111110
 221+ 0000 ~                                         ld      (Xreg),a                ;TAX
 222+ 0000 ~            ;--  This sets (Y X) = %1111111111111110, so we can rotate through 15 loop iterations, getting a 1 each time, and then getting a 0 on the 16th iteration... and we can also use it to catch our result bits into bit 0 each time
 223+ 0000 ~            p?_LL130_6502:         ld      bc,(SRvarPair)          ;ASL R                  \ Shift (S R) to the left
 224+ 0000 ~                                        ShiftBCLeft1                    ;.
 225+ 0000 ~                                        ld      (SRvarPair),bc          ;ROL S
 226+ 0000 ~                                        ld      a,(Svar)                ;LDA S                  \ Set A = S
 227+ 0000 ~                                        jr      c, p?_LL131_6502           ;BCS LL131              \ If bit 7 of S was set, then jump straight to the subtraction
 228+ 0000 ~                                        ld      hl,Qvar                 ;CMP Q                  \ If A < Q (i.e. S < Q), skip the following subtractions
 229+ 0000 ~                                        cp      (hl)
 230+ 0000 ~                                        FlipCarryFlag                   ; note flip carry flag here to simulate 6502 operation
 231+ 0000 ~                                        jr      nc,p?_LL132A_6502          ;BCC LL132  (NOTE Carry flag reversed in Z80 for CP)
 232+ 0000 ~            p?_LL131_6502:         FlipCarryFlag                   ;flip carry to make it act like a 6502 borrow
 233+ 0000 ~                                        sbc     (hl)                    ;SBC Q                  \ A >= Q (i.e. S >= Q) so set:
 234+ 0000 ~                                        ld      (Svar),a                ;STA S
 235+ 0000 ~                                        ld      a,(Rvar)                ;LDA R                  \ And then doing the high bytes
 236+ 0000 ~                                        ClearCarryFlag                  ;\   S = (A R) - Q  = (S R) - Q starting with the low bytes (we know the C flag is set so the subtraction will be correct)
 237+ 0000 ~                                        sbc     0                       ;SBC #0
 238+ 0000 ~                                        ld      (Rvar),a                ;STA R
 239+ 0000 ~                                        SetCarryFlag                    ;SEC                    \ Set the C flag to rotate into the result in (Y X)
 240+ 0000 ~                                        jp      p?_LL132_6502              ;added so that we can do a 6502 style carry above
 241+ 0000 ~            p?_LL132A_6502:        nop; FlipCarryFlag
 242+ 0000 ~            p?_LL132_6502:         ld      bc,(YXregPair)          ; Rotate the counter in (Y X) to the left, and catch the
 243+ 0000 ~                                        RollBCLeft1                     ; ROL A                  \ result bit into bit 0 (which will be a 0 if we didn't
 244+ 0000 ~                                        ld      (YXregPair),bc          ; TAX                    \ do the subtraction, or 1 if we did)
 245+ 0000 ~                                        jr      c, p?_LL130_6502           ; BCS LL130              \ If we still have set bits in (Y X), loop back to LL130 to do the next iteration of 15, until we have done the whole division
 246+ 0000 ~                    IFDEF DEBUG_LL121_DIRECT
 247+ 0000 ~                          DISPLAY "DIRECT CALL TO LL121 so dummy push"
 248+ 0000 ~                                        push    af
 249+ 0000 ~                    ENDIF
 250+ 0000 ~                                        pop     af                      ; PLA                    \ Restore A, which we calculated above, from the stack
 251+ 0000 ~                                        and     a                       ; BMI LL128              \ If A is negative jump to LL128 to return from the
 252+ 0000 ~                                        jp      m, p?_LL128_6502           ; .                      \ subroutine with (Y X) as is
 253+ 0000 ~            p?_LL133_6502:          ld      bc,(YXregPair)          ; TXA                    \ Otherwise negate (Y X) using two's complement by first
 254+ 0000 ~                                        macronegate16bc                 ; EOR #%11111111         \ setting the low byte to ~X + 1
 255+ 0000 ~                                        ld      (YXregPair),bc          ; ADC #1                 \ The addition works as we know the C flag is clear from\ when we passed through the BCS above
 256+ 0000 ~            p?_LL128_6502:          ret                             ; RTS                    \ Return from the subroutine
 257+ 0000 ~            ;-------------------------------------------------------------------------------------------------------
 258+ 0000 ~            ;..  Do the following, in this order: Q = XX12+2 A = S EOR XX12+3 (S R) = |S R|
 259+ 0000 ~            ;..  This sets up the variables required above to calculate (S R) / XX12+2 and give the result the opposite sign to XX13+3.
 260+ 0000 ~            p?_LL129_6502:        push    af                      ;LDX XX12+2             \ Set Q = XX12+2
 261+ 0000 ~                                        ld      a,(p?_XX12p2)              ;.
 262+ 0000 ~                                        ld      (Xreg),a                ;.
 263+ 0000 ~                                        ld      (Qvar),a                ;STX Q
 264+ 0000 ~                                        pop     af                      ;.
 265+ 0000 ~                                        ld      a,(Svar)                ;LDA S                  \ If S is positive, jump to LL127
 266+ 0000 ~                                        and     a                       ;BPL LL127
 267+ 0000 ~                                        jp      p,p?_LL127_6502            ;.
 268+ 0000 ~                                        ZeroA                           ;.LDA #0                \ Otherwise set R = -R
 269+ 0000 ~                                        ClearCarryFlag                  ;SEC
 270+ 0000 ~                                        ld      hl, Rvar                ;SBC R
 271+ 0000 ~                                        sbc     (hl)                    ;.
 272+ 0000 ~                                        ld      (Rvar),a                ;STA R
 273+ 0000 ~                                        ld      a,(Svar)                ;LDA S                  \ Push S onto the stack
 274+ 0000 ~                                        push    af                      ;PHA
 275+ 0000 ~                                        xor     $FF                     ;EOR #%11111111         \ Set S = ~S + 1 + C  ?? is this all just doing |Svar|?
 276+ 0000 ~                                        adc     0                       ;ADC #0
 277+ 0000 ~                                        ld      (Svar),a                ;STA S
 278+ 0000 ~                                        pop     af                      ;PLA                    \ Pull the original, negative S from the stack into A
 279+ 0000 ~            p?_LL127_6502:        ld      hl,p?_XX12p3               ;EOR XX12+3             \ Set A = original argument S EOR'd with XX12+3
 280+ 0000 ~                                        xor     (hl)                    ;.
 281+ 0000 ~                                        ret                             ;RTS                    \ Return from the subroutine
 282+ 0000 ~            ;----------------------------------------------------------------------------------------------------------------
 283+ 0000 ~            ;--- LL118 Move along a point until on screen
 284+ 0000 ~            ; In XX1510 x1 as a 16-bit coordinate (x1_hi x1_lo)
 285+ 0000 ~            ;    XX1532 y1 as a 16-bit coordinate (y1_hi y1_lo)
 286+ 0000 ~            ;    XX12p2 The line's gradient * 256 (so 1.0 = 256)
 287+ 0000 ~            ;    XX12p3 The direction of slope: * Positive = top left to bottom right * Negative (bit 7 set) = top right to bottom left
 288+ 0000 ~            ;    T      The gradient of slope:* 0 if it's a shallow slope * &FF if it's a steep slope
 289+ 0000 ~            ;  Out  XX150               x1 as an 8-bit coordinate
 290+ 0000 ~            ;       XX152               y1 as an 8-bit coordinate
 291+ 0000 ~            ;----------------------------------------------------------------------------------------------------------------
 292+ 0000 ~
 293+ 0000 ~            p?_LL118_6502:         ld      a,(p?_XX1510+1)            ; LDA XX15+1             \ If x1_hi is positive, jump down to LL119 to skip the
 294+ 0000 ~                                        and     a                       ; BPL LL119              \ .
 295+ 0000 ~                                        jp      p, p?_LL119_6502           ;                        \ following
 296+ 0000 ~            .X1Negative:                ld      (Svar),a                ; STA S                  \ Otherwise x1_hi is negative, i.e. off the left of the screen, so set S = x1_hi
 297+ 0000 ~                                        call    p?_LL120_6502              ; Call LL120 to calculate:  (Y X) = (S x1_lo) * XX12+2      if T = 0   = x1 * gradient
 298+ 0000 ~                                                                ;                            (Y X) = (S x1_lo) / XX12+2      if T <> 0  = x1 / gradient
 299+ 0000 ~                                                                ; with the sign of (Y X) set to the opposite of the line's direction of slope
 300+ 0000 ~                                        call    ADDYXRegtoY1             ; Set y1 = y1 + (Y X)
 301+ 0000 ~                                        ld      (p?_XX1532),hl             ; .
 302+ 0000 ~                                        ld      hl,0                    ; Set x1 = 0
 303+ 0000 ~                                        ld      (p?_XX1510),hl             ; .
 304+ 0000 ~                                        ld      a,0                     ; set 0 up for replacemetn of the TAX and BEQ bit
 305+ 0000 ~                                        ld      (Xreg),a                ; TAX                    \ Set X = 0 so the next BEQ becomes a jmp but we will do it anyway in next line
 306+ 0000 ~                                        jp      p?_LL134_6502              ; just do the jump to LL134 rather than setting to equal flag and then jumping
 307+ 0000 ~            ;-- Entering LL119 a will always be the value of X1 Hi byte
 308+ 0000 ~            p?_LL119_6502:         jp      z,p?_LL134_6502            ; BEQ LL134              \ x1_hi = 0 then jump down to LL134 to skip the following, as the x-coordinate is already on-screen
 309+ 0000 ~                                                                        ;                        \ (as 0 <= (x_hi x_lo) <= 255)
 310+ 0000 ~                                        ld      (Svar),a                ; STA S                  \ Otherwise x1_hi is positive, i.e. x1 >= 256 and off
 311+ 0000 ~                                        dec     a                       ; DEC S                  \ the right side of the screen, so set S = x1_hi - 1
 312+ 0000 ~                                        ld      (Svar),a                ;
 313+ 0000 ~                                        call    p?_LL120_6502              ; JSR LL120              \ Call LL120 to calculate:  (Y X) = (S x1_lo) * XX12+2      if T = 0   = (x1 - 256) * gradient
 314+ 0000 ~                                                                        ;                        \                           (Y X) = (S x1_lo) / XX12+2      if T <> 0 = (x1 - 256) / gradient
 315+ 0000 ~                                                                        ;                        \ with the sign of (Y X) set to the opposite of the line's direction of slope
 316+ 0000 ~                                        call    ADDYXRegtoY1             ; TXA                    \ Set y1 = y1 + (Y X)
 317+ 0000 ~                                        ld      hl,255                  ; LDX #255               \ Set x1 = 255
 318+ 0000 ~                                        ld      ( p?_XX1510 ),hl             ; STX XX15 ;INX; STX XX15+1
 319+ 0000 ~            ;--  We have moved the point so the x-coordinate is on  screen (i.e. in the range 0-255), so now for the  y-coordinate
 320+ 0000 ~            p?_LL134_6502:        ld      a,(p?_XX1532+1)            ; LDA XX15+3             \ If y1_hi is positive, jump down to LL119 to skip
 321+ 0000 ~                                        and     a                       ; BPL LL135              \ the following
 322+ 0000 ~                                        jp      p, p?_LL135_6502           ; .
 323+ 0000 ~                                        ld      (Svar),a                ; STA S                  \ Otherwise y1_hi is negative, i.e. off the top of the screen, so set S = y1_hi
 324+ 0000 ~                                        ld      a, ( p?_XX1532)             ; LDA XX15+2             \ Set R = y1_lo
 325+ 0000 ~                                        ld      (Rvar),a                ; STA R
 326+ 0000 ~                                        call    p?_LL123_6502              ; JSR LL123              \ Call LL123 to calculate:  (Y X) = (S R) / XX12+2      if T = 0 = y1 / gradient
 327+ 0000 ~                                                                        ;                        \                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 328+ 0000 ~                                                                        ;                         with the sign of (Y X) set to the opposite of the line's direction of slope
 329+ 0000 ~                                        call    ADDYXRegtoX1            ; TXA                    \ Set x1 = x1 + (Y X)
 330+ 0000 ~                                        ld      hl,0                    ; LDA #0                 \ Set y1 = 0
 331+ 0000 ~                                        ld      ( p?_XX1532),hl             ; STA XX15+2, XX15+3
 332+ 0000 ~            p?_LL135_6502:         ld      bc,128                  ; LDA XX15+2             \ Set (S R) = (y1_hi y1_lo) - screen height
 333+ 0000 ~                                        call    SUBBCFromY1             ; .                      \ .
 334+ 0000 ~                                        jr      c, p?_LL136_6502           ; BCC LL136              \ If the subtraction underflowed, i.e. if y1 < screen height, then y1 is already on-screen, so jump to LL136
 335+ 0000 ~                                                                ;                        \ to return from the subroutine, as we are done
 336+ 0000 ~            ;;-   If we get here then y1 >= screen height, i.e. off the bottom of the screen
 337+ 0000 ~            p?_LL139_6502:         call    p?_LL123_6502              ; JSR LL123              \ Call LL123 to calculate:   (Y X) = (S R) / XX12+2      if T = 0  = (y1 - screen height) / gradient
 338+ 0000 ~            ;                        \                            (Y X) = (S R) * XX12+2      if T <> 0 = (y1 - screen height) * gradient
 339+ 0000 ~            ;                          with the sign of (Y X) set to the opposite of the line's direction of slope
 340+ 0000 ~                                        call    ADDYXRegtoX1            ; TXA                    \ Set x1 = x1 + (Y X)
 341+ 0000 ~                                        ld      hl, 127                 ; LDA #Y*2-1             \ Set y1 = 2 * #Y - 1. The constant #Y is 96, the y-coordinate of the mid-point of the space view (or in our case 127)
 342+ 0000 ~                                        ld      (p?_XX1532),hl             ; STA XX15+3             \ pixel row of the space view
 343+ 0000 ~            p?_LL136_6502:         ret                             ; RTS                    \ Return from the subroutine
 344+ 0000 ~            ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 345+ 0000 ~            ;-- LL145 LINE CLIP
 346+ 0000 ~            ;-- OPTISIATIONS - VERTICAL HORZONTAL POINT |DX| = |DY| (and all the veriants for +/-)
 347+ 0000 ~            ;-- This routine clips the line from (x1, y1) to (x2, y2) so it fits on-screen, or returns an error if it can't be clipped to fit. The arguments are 16-bit coordinates, and the clipped line is returned using 8-bit screen coordinates.
 348+ 0000 ~            ;-- This part sets XX13 to reflect which of the two points are on-screen and off-screen.
 349+ 0000 ~            ;-- IN  : XX15(1 0) x1 XX15(3 2) y1 XX15(5 4) x2 XX12(1 0) y2
 350+ 0000 ~            ;-- OUT : (X1, Y1), (X2, Y2) Screen coordinate C flag  Clear if the clipped line fits on-screen, set if itdoesn't
 351+ 0000 ~            ;         XX13 The state of the original coordinates on-screen:* 0   = (x2, y2) on-screen* 95(64)  = (x1, y1) on-screen,  (x2, y2) off-screen* 191(128) = (x1, y1) off-screen, (x2, y2) off-screen
 352+ 0000 ~            ;              So XX13 is non-zero if the end of the line was clipped,meaning the next line sent to BLINE can't join onto the end but has to start a new segment
 353+ 0000 ~            ;         SWAP The swap status of the returned coordinates:* &FF if we swapped the values of (x1, y1) and(x2, y2) as part of the clipping process* 0 if the coordinates are still in the same order
 354+ 0000 ~            ; TODO treat horizonal/vert and single pixel as special cases
 355+ 0000                                  ENDM
 356+ 0000
 357+ 0000              ClippingCodeLL145Macro:     MACRO   p?
 358+ 0000 ~            p?_LL145_6502:        ZeroA                           ; LDA #0                 \ Set SWAP = 0
 359+ 0000 ~                                        ld      (SWAP),a                ; STA SWAP
 360+ 0000 ~                                        ld      a,(p?_XX15X2hi)            ; LDA XX15+5             \ Set A = x2_hi (use b as a substibute for a)
 361+ 0000 ~                                        ld      b,a                     ; .
 362+ 0000 ~            ; Note that as we are interested in the sign of XX113 then this needs to be >= 128 or < 128 or 0, we will use 191 as per bbc for now
 363+ 0000 ~            ; for the screen coord we will use 127 though, we use c as a temporay X register
 364+ 0000 ~            p?_LL147_6502:        ld      a,191                   ; LDX #Y*2-1             \ Set X = #Y * 2 - 1. The constant #Y is 96, the y-coordinate of the mid-point of the space view, so this sets Y2 to 191, the y-coordinate of the bottom pixel row of the space view
 365+ 0000 ~                                        ld      (Xreg),a                ; .
 366+ 0000 ~            ;                    ld      a,127
 367+ 0000 ~            ;                    ld      c,a
 368+ 0000 ~            .CheckX2Y2High:             ld      a,b                     ; ORA XX12+1             \ If one or both of x2_hi and y2_hi are non-zero, jump
 369+ 0000 ~                                        ld      hl,p?_XX15Y2hi    ; .
 370+ 0000 ~                                        or      (hl)                    ; .
 371+ 0000 ~                                        jp      nz,p?_LL107_6502  ; BNE LL107              \ to LL107 to skip the following, leaving X at 191
 372+ 0000 ~            .CheckY2Lo:                 ld      a,127 ;,c               ; get back the temporary x reg from c
 373+ 0000 ~                                        ld      hl,p?_XX15Y2lo    ; CPX XX12               \ If y2_lo > the y-coordinate of the bottom of screen (a is being used as X at this point still)
 374+ 0000 ~                                        cp      (hl)                    ; .
 375+ 0000 ~                                        jp      c,p?_LL107_6502   ; BCC LL107              \ then (x2, y2) is off the bottom of the screen, so skip the following instruction, leaving X at 127
 376+ 0000 ~                                        ZeroA                           ; LDX #0                 \ Set X = 0
 377+ 0000 ~                                        ld      (Xreg),a
 378+ 0000 ~            p?_LL107_6502:        ld      a,(Xreg)                ; STX XX13               \ Set XX13 = X, so we have * XX13 = 0 if x2_hi = y2_hi = 0, y2_lo is on-screen* XX13 = 191 if x2_hi or y2_hi are non-zero or y2_lois off the bottom of the screen
 379+ 0000 ~                                        ld      ( p?_XX13),a      ; now c is released as a temporary x reg
 380+ 0000 ~                                        ld      a,(p?_XX15X1hi)   ; LDA XX15+1             \ If one or both of x1_hi and y1_hi are non-zero, jump
 381+ 0000 ~                                        ld      hl,p?_XX15Y1hi    ; ORA XX15+3             \ to LL83
 382+ 0000 ~                                        or      (hl)                    ; .
 383+ 0000 ~                                        jp      nz,p?_LL83_6502            ; BNE LL83
 384+ 0000 ~            ; DEBUG SIMPLIFIED CODE, now we just compare y1 lo > 127
 385+ 0000 ~                                        ld      a,(XX1532)              ; If y1_lo > the y-coordinate of the bottom of screen (If A >= N, then C flag is reset.) ;ld      a,127                   ; LDA #Y*2-1             \ If y1_lo > the y-coordinate of the bottom of screen (If A >= N, then C flag is reset.)
 386+ 0000 ~                                        ld      h,127                   ; then (x1, y1) is off the bottom of the screen, so jump                                 ;ld      hl,XX1532               ; CMP XX15+2             \ then (x1, y1) is off the bottom of the screen, so jump
 387+ 0000 ~                                        cp      h                       ; to LL83                                                                                ;cp      (hl)                    ; .                      \ to LL83
 388+ 0000 ~                                        jp      nc, p?_LL83_6502         ; BCC LL83               \ . (y1 > 127 jump, i.e. 127 <= y1 )
 389+ 0000 ~                                        ld      a,( p?_XX13)                ; LDA XX13               \ If we get here, (x1, y1) is on-screen. If XX13 is non-zero, i.e. (x2, y2) is off-screen, jump
 390+ 0000 ~                                        and     a                       ; BNE LL108              \ to LL108 to halve it before continuing at LL83
 391+ 0000 ~                                        jp      nz,p?_LL108_6502
 392+ 0000 ~            ; If we get here, the high bytes are all zero, which means the x-coordinates are < 256 and therefore fit on screen, and neither coordinate is off the bottom of the screen. That means both coordinates are already on
 393+ 0000 ~            ; screen, so we don't need to do any clipping, all weneed to do is move the low bytes into (X1, Y1) and X2, Y2) and return
 394+ 0000 ~            ; X1 = XX15 (10)  Y1 = XX15+1 X2 = XX15+2 Y2 = XX15+3
 395+ 0000 ~            p?_LL146_6502:        ld      hl,(p?_XX15X1lo)           ;  Save X1 to XX1510
 396+ 0000 ~                                        call    p?_ClampX
 397+ 0000 ~                                        ld      (p?_XX15X1lo),a
 398+ 0000 ~                                        ld      hl,(p?_XX15Y1lo)           ;  hl = y1
 399+ 0000 ~                                        call    p?_ClampY
 400+ 0000 ~                                        ld      (p?_XX1510+1),a            ;  XX1510... = [X1][Y1]
 401+ 0000 ~
 402+ 0000 ~                                        ld      hl,(p?_XX15X2lo)           ;  de = x2
 403+ 0000 ~                                        call    p?_ClampX
 404+ 0000 ~                                        ld      (p?_XX1510+2),a            ;  XX1510... = [X1][Y1][X2]
 405+ 0000 ~
 406+ 0000 ~                                        ld      hl,(p?_XX15Y2lo)           ;  bc = y2
 407+ 0000 ~                                        call    p?_ClampY
 408+ 0000 ~                                        ld      (p?_XX1510+3),a            ;  XX1510... = [X1][Y1][X2][Y2]
 409+ 0000 ~                                        ClearCarryFlag                  ; CLC                    \ Clear the C flag as the clipped line fits on-screen
 410+ 0000 ~                                        ret                             ; RTS                    \ Return from the subroutine
 411+ 0000 ~            p?_LL109_6502:        SetCarryFlag                    ; SEC                    \ Set the C flag to indicate the clipped line does not fit on-screen
 412+ 0000 ~                                        ret                             ; RTS                    \ Return from the subroutine
 413+ 0000 ~            p?_LL108_6502:        ld      hl, p?_XX13                 ; LSR XX13               \ If we get here then (x2, y2) is off-screen and XX13 is
 414+ 0000 ~                                        srl     (hl)                    ;                        \ 191, (128)  so shift XX13 right to halve it to 95 (64)
 415+ 0000 ~            ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 416+ 0000 ~            ;-- LL145 (Part 2 of 4)
 417+ 0000 ~            p?_LL83_6502:         ld      a,( p?_XX13)               ; LDA XX13               \ If XX13 < 128 then only one of the points is on-screen
 418+ 0000 ~                                        and     a                                ; BPL LL115              \ so jump down to LL115 to skip the checks of whether
 419+ 0000 ~                                        jp      p,p?_LL115_6502            ;                        \ both points are in the strips to the right or bottom of the screen
 420+ 0000 ~            ;-- If we get here, both points are off-screen
 421+ 0000 ~                                        ld      a,(p?_XX15X1hi)            ; LDA XX15+1             \ If both x1_hi and x2_hi have bit 7 set, jump to LL109
 422+ 0000 ~                                        ld      hl,p?_XX15X2hi             ; AND XX15+5             \ to return from the subroutine with the C flag set, as
 423+ 0000 ~                                        and     (hl)
 424+ 0000 ~                                        jp      m, p?_LL109_6502           ; BMI LL109              \ the entire line is above the top of the screen
 425+ 0000 ~                                        ld      a,(p?_XX15Y1hi)            ; LDA XX15+3             \ If both y1_hi and y2_hi have bit 7 set, jump to LL109
 426+ 0000 ~                                        ld      hl,p?_XX15Y2hi             ; AND XX12+1             \ to return from the subroutine with the C flag set, as
 427+ 0000 ~                                        and     (hl)                             ; BMI LL109              \ the entire line is to the left of the screen
 428+ 0000 ~                                        jp      m,p?_LL109_6502            ; .
 429+ 0000 ~                                        ld      a,(p?_XX15X1hi)            ; LDX XX15+1             \ Set A = X = x1_hi - 1
 430+ 0000 ~                                        dec     a                                ; DEX
 431+ 0000 ~                                        ld      (Xreg),a                         ; TXA
 432+ 0000 ~                                        push    af                               ; LDX XX15+5     SP+1    \ Set XX12+2 = x2_hi - 1, we need to save a register first
 433+ 0000 ~                                        ld      a,(p?_XX15X2hi)            ; .
 434+ 0000 ~                                        dec     a                                ; DEX
 435+ 0000 ~                                        ld      (Xreg),a                         ; STX XX12+2
 436+ 0000 ~                                        pop     af                               ; .              SP+0    restore a register
 437+ 0000 ~                                        ld      hl,p?_XX15Y2hi             ; ORA XX12+2             \ If neither (x1_hi - 1) or (x2_hi - 1) have bit 7 set,
 438+ 0000 ~                                        or      (hl)                             ; .
 439+ 0000 ~                                        jp      p, p?_LL109_6502           ; BPL LL109              \ jump to LL109 to return from the subroutine with the C flag set, as the line doesn't fit on-screen
 440+ 0000 ~            ; for this bit, while z80 uses carry the opposite way to 6502, 6502 uses borrow, in effect inverting the flip
 441+ 0000 ~            ;NOTEFOUND A PATH WHERE IT DOES NOT DO THIS CHECK e.g. 90 B2 8D A2
 442+ 0000 ~            p?_LL83_DEBUG:          ld      a,(p?_XX1532)              ; LDA XX15+2             \ If y1_lo < y-coordinate of screen bottom, clear the C
 443+ 0000 ~                                        cp      128                     ; CMP #Y*2               \ flag, otherwise set it (NOTE FLIPPED IN z80)
 444+ 0000 ~                                        ld      a,(p?_XX1532+1)            ; LDA XX15+3             \ Set XX12+2 = y1_hi - (1 - C), so:
 445+ 0000 ~                                        sbc     0                       ; SBC #0                 \ .
 446+ 0000 ~                                        ld      (p?_XX12p2),a              ; STA XX12+2             \  * Set XX12+2 = y1_hi - 1 if y1_lo is on-screen * Set XX12+2 = y1_hi  otherwise We do this subtraction because we are only interested
 447+ 0000 ~                                        ld      a,(p?_XX1576)              ; LDA XX12               \ If y2_lo < y-coordinate of screen bottom, clear the C
 448+ 0000 ~                                        cp      128                     ; CMP #Y*2               \ flag, otherwise set it
 449+ 0000 ~                                        ld      a,(p?_XX1576+1)            ; LDA XX12+1             \ Set XX12+2 = y2_hi - (1 - C), so:
 450+ 0000 ~                                        sbc     0                       ; SBC #0                   * Set XX12+1 = y2_hi - 1 if y2_lo is on-screen  * Set XX12+1 = y2_hi     otherwise
 451+ 0000 ~                                        ld      hl,p?_XX12p2               ; ORA XX12+2             \ If neither XX12+1 or XX12+2 have bit 7 set, jump to
 452+ 0000 ~                                        or      (hl)                    ; .
 453+ 0000 ~                                        jp      p,p?_LL109_6502            ; BPL LL109              \ LL109 to return from the subroutine with the C flag set, as the line doesn't fit on-screen
 454+ 0000 ~            ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 455+ 0000 ~            ;-- LL145 (Part 3 of 4) Summary: Clip line: Calculate the line's gradient
 456+ 0000 ~            p?_LL115_6502:        ld      a,(Yreg)                ; TYA                    \ Store Y on the stack so we can preserve it through the call to this routine
 457+ 0000 ~                                        push    af                      ; PHA            SP+1    \ call to this subroutine
 458+ 0000 ~                                        ld      hl,(p?_XX15X2lo)             ; LDA XX15+4             \ Set XX12+2 = x2_lo - x1_lo
 459+ 0000 ~                                        ld      de,(p?_XX15X1lo)             ; LDA XX15+5             \ Set XX12+3 = x2_hi - x1_hi
 460+ 0000 ~                                        ClearCarryFlag                  ; SBC XX15+1
 461+ 0000 ~                                        sbc     hl,de                   ; .
 462+ 0000 ~                                        ld      (delta_x),hl            ; .
 463+ 0000 ~                                        ld      hl,(p?_XX15Y2lo)             ; LDA XX12               \ Set XX12+4 = y2_lo - y1_lo
 464+ 0000 ~                                        ld      de,(p?_XX15Y1lo)             ;
 465+ 0000 ~                                        ClearCarryFlag                  ; SBC XX15+2
 466+ 0000 ~                                        sbc     hl,de                   ; .
 467+ 0000 ~                                        ld      (delta_y),hl            ; .
 468+ 0000 ~            ; So we now have:  delta_x in XX12(3 2)  delta_y in XX12(5 4) where the delta is (x1, y1) - (x2, y2))
 469+ 0000 ~                                        ld      a,(delta_y+1)           ; EOR XX12+3             \ Set S = the sign of delta_x * the sign of delta_y, so
 470+ 0000 ~                                        ld      hl,delta_x+1
 471+ 0000 ~                                        xor     (hl)
 472+ 0000 ~                                        ld      (Svar),a                ; STA S                  \ if bit 7 of S is set, the deltas have different signs (perhaps we should do bit 7 mask ?????????
 473+ 0000 ~                                        ld      hl,(delta_y)            ; LDA XX12+5             \ If delta_y_hi is positive, jump down to LL110 to skip
 474+ 0000 ~                                        ld      a,h
 475+ 0000 ~                                        and     a
 476+ 0000 ~                                        jp      p, p?_LL110_6502  ; BPL LL110              \ the following
 477+ 0000 ~                                        NegHL                           ; LDA #0                 \ Otherwise flip the sign of delta_y to make it
 478+ 0000 ~                                        ld      (delta_y),hl            ; positive, starting with the low bytes
 479+ 0000 ~            p?_LL110_6502:        ld      hl,(delta_x)            ; LDA XX12+3             \ If delta_x_hi is positive, jump down to LL111 to skip
 480+ 0000 ~                                        ld      a,h                     ; BPL LL111              \ the following
 481+ 0000 ~                                        and     a                       ; .
 482+ 0000 ~                                        jp      p,p?_LL111_6502            ; .
 483+ 0000 ~                                        NegHL                           ; SEC                    \ Otherwise flip the sign of delta_x to make it
 484+ 0000 ~                                        ld      (delta_x),hl            ; LDA #0                 \ positive, starting with the low bytes
 485+ 0000 ~            ;--  We now keep halving |delta_x| and |delta_y| until both of them have zero in their high bytes
 486+ 0000 ~            p?_LL111_6502:        ld      hl,(delta_x)
 487+ 0000 ~                                        ld      de,(delta_y)
 488+ 0000 ~                                        ld      a,h                     ; TAX                    \ If |delta_x_hi| is non-zero, skip the following
 489+ 0000 ~                                        or      d                       ; BNE LL112
 490+ 0000 ~                                        jp      z,p?_LL113_6502            ; LDX XX12+5             \ If |delta_y_hi| = 0, jump down to LL113 (as both |delta_x_hi| and |delta_y_hi| are 0)
 491+ 0000 ~            p?_LL112_6502:        ShiftHLRight1                   ; LSR A                  \ Halve the value of delta_x in (A XX12+2)
 492+ 0000 ~                                        ShiftDERight1                   ; LSR XX12+5             \ Halve the value of delta_y XX12(5 4)
 493+ 0000 ~                                        ld      (delta_x),hl
 494+ 0000 ~                                        ld      (delta_y),de            ; write them back so we don't end up in an infinite loop
 495+ 0000 ~                                        jp       p?_LL111_6502                  ; JMP LL111              \ Loop back to LL111
 496+ 0000 ~            ;-- By now, the high bytes of both |delta_x| and |delta_y| are zero
 497+ 0000 ~            p?_LL113_6502:        ZeroA                           ; STX T                  \ We know that X = 0 as that's what we tested with a BEQ  above, so this sets T = 0
 498+ 0000 ~                                        ld      (Tvar),a
 499+ 0000 ~                                        ld      a,(delta_x)             ; LDA XX12+2             \ If delta_x_lo < delta_y_lo, so our line is more
 500+ 0000 ~                                        ld      hl,delta_y              ; CMP XX12+4             \ vertical than horizontal, jump to LL114
 501+ 0000 ~                                        cp      (hl)
 502+ 0000 ~                                        jp      c, p?_LL114_6502  ; BCC LL114              ; if delta y > delta x then its a steep slope so we do 256*dy/dx
 503+ 0000 ~            ;-- If we get here then our line is more horizontal than vertical, so it is a shallow slope
 504+ 0000 ~                                        ld      a,(delta_x)             ; STA Q                  \ Set Q = delta_x_lo
 505+ 0000 ~                                        ld      (Qvar),a                ; .
 506+ 0000 ~                                        ld      a,(delta_y)             ; LDA XX12+4             \ Set A = delta_y_lo
 507+ 0000 ~                                        call    p?_LL28_6502      ; JSR LL28               \ Call LL28 to calculate: R = 256 * A / Q = 256 * delta_y_lo / delta_x_lo
 508+ 0000 ~                                        jp      p?_LL116_6502     ; JMP LL116              \ Jump to LL116, as we now have the line's gradient in R
 509+ 0000 ~            ;-- If we get here then our line is more vertical than horizontal, so it is a steep slope
 510+ 0000 ~            p?_LL114_6502:        ld      a,(delta_y)             ; LDA XX12+4             \ Set Q = delta_y_lo
 511+ 0000 ~                                        ld      (Qvar),a                ; STA Q
 512+ 0000 ~                                        ld      a,(delta_x)             ; LDA XX12+2             \ Set A = delta_x_lo
 513+ 0000 ~                                        call    p?_LL28_6502               ; JSR LL28               \ Call LL28 to calculate: R = 256 * A / Q = 256 * delta_x_lo / delta_y_lo
 514+ 0000 ~                                        ld      a,$FF                   ; DEC T                  \ T was set to 0 above, so this sets T = &FF when our
 515+ 0000 ~                                        ld      (Tvar),a                ;                        \ line is steep
 516+ 0000 ~            ;----------------------------------------------------------------------------------------------------------------
 517+ 0000 ~            ;--- LL116 This part sets things up to call the routine in LL188, which does the actual clipping.
 518+ 0000 ~            ;--  If we get here, then R has been set to the gradient of the line (x1, y1) to(x2, y2), with T indicating the gradient of slope: * 0   = shallow slope (more horizontal than vertical)
 519+ 0000 ~            ;--                                                                                                                                * &FF = steep slope (more vertical than horizontal)
 520+ 0000 ~            ;-- XX13 has been set as follows: * 0   = (x1, y1) off-screen, (x2, y2) on-screen * 95(64)  = (x1, y1) on-screen,  (x2, y2) off-screen * 191(128) = (x1, y1) off-screen, (x2, y2) off-screen
 521+ 0000 ~            p?_LL116_6502:        ld      a,(Rvar)                ; LDA R                  \ Store the gradient in XX12+2
 522+ 0000 ~                                        ld      (p?_XX12p2),a     ; STA XX12+2
 523+ 0000 ~                                        ld      a,(Svar)                ; LDA S                  \ Store the type of slope in XX12+3, bit 7 clear means
 524+ 0000 ~                                        ld      (p?_XX12p3),a              ; STA XX12+3             \ top left to bottom right, bit 7 set means top right to bottom left
 525+ 0000 ~                                        ld      a,( p?_XX13)                ; LDA XX13               \ If XX13 = 0, skip the following instruction
 526+ 0000 ~                                        cp      0                       ; BEQ LL138
 527+ 0000 ~                                        jp      z,p?_LL138_6502            ; .
 528+ 0000 ~                                        jp      p, p?_LLX117_6502          ; If XX13 is positive, it must be 95 (64) as 128 would be negative). This means (x1, y1) is on-screen but (x2, y2) isn't, so we jump
 529+ 0000 ~            ;-- If we get here, XX13 = 0 or 191, so (x1, y1) is off-screen and needs clipping
 530+ 0000 ~            p?_LL138_6502:          call    p?_LL118_6502              ; JSR LL118              \ Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 531+ 0000 ~                                        ld      a,( p?_XX13)                ; LDA XX13               \ If XX13 = 0, i.e. (x2, y2) is on-screen, jump down to
 532+ 0000 ~                                        and     a
 533+ 0000 ~                                        jp      p,p?_LL124_6502            ; BPL LL124              \ LL124 to return with a successfully clipped line
 534+ 0000 ~            ;-- If we get here, XX13 = 191 (128) (both coordinates areoff-screen)
 535+ 0000 ~            p?_LL117_6502:          ld      a,(p?_XX1510+1)            ; LDA XX15+1             \ If either of x1_hi or y1_hi are non-zero, jump to
 536+ 0000 ~                                        ld      hl,p?_XX1532+1             ; ORA XX15+3             \ LL137 to return from the subroutine with the C flag
 537+ 0000 ~                                        or      (hl)
 538+ 0000 ~                                        jp      nz, p?_LL137_6502          ; BNE LL137              \ set, as the line doesn't fit on-screen
 539+ 0000 ~                                        ld      a,(p?_XX1532)              ; LDA XX15+2             \ If y1_lo > y-coordinate of the bottom of the screen
 540+ 0000 ~                                        cp      128                     ; CMP #Y*2               \ jump to LL137 to return from the subroutine with the
 541+ 0000 ~                                        jp      nc, p?_LL137_6502          ; BCS LL137              \ C flag set, as the line doesn't fit on-screen
 542+ 0000 ~            ;-- If we get here, XX13 = 95 or 191, and in both cases (x2, y2) is off-screen, so we now need to swap the (x1, y1) and (x2, y2) coordinates around before doing the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 543+ 0000 ~            p?_LLX117_6502:         ld      hl,( p?_XX1510)             ; LDX XX15               \ Swap x1_lo = x2_lo
 544+ 0000 ~                                        ld      de,( p?_XX1554)
 545+ 0000 ~                                        ld      ( p?_XX1510),de
 546+ 0000 ~                                        ld      ( p?_XX1554),hl
 547+ 0000 ~                                        ld      hl,( p?_XX1532)             ; LDX XX15+2             \ Swap y1_lo = y2_lo
 548+ 0000 ~                                        ld      de,( p?_XX1576)
 549+ 0000 ~                                        ld      ( p?_XX1532),de
 550+ 0000 ~                                        ld      ( p?_XX1576),hl
 551+ 0000 ~                                        call    p?_LL118_6502              ; JSR LL118              \ Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 552+ 0000 ~                                        ld      hl,SWAP
 553+ 0000 ~                                        dec     (hl)                    ; DEC SWAP               \ Set SWAP = &FF to indicate that we just clipped the line at the (x2, y2) end by swapping the coordinates (the DEC does this as we set SWAP to 0 at the start of this subroutine)
 554+ 0000 ~            p?_LL124_6502:          pop     af                      ; PLA            SP+0    \ Restore Y from the stack so it gets preserved through
 555+ 0000 ~                                        ld      (Yreg),a                ; TAY                    \ the call to this subroutine
 556+ 0000 ~                                        call    p?_LL146_6502              ; JMP LL146              \ Jump up to LL146 to move the low bytes of (x1, y1) and (x2, y2) into (X1, Y1) and (X2, Y2), and return from the subroutine with a successfully clipped line
 557+ 0000 ~                                        ret                             ; then exit so we don't pop it twice
 558+ 0000 ~            p?_LL137_6502:          pop     af                      ; PLA            SP+0    \ Restore Y from the stack so it gets preserved through
 559+ 0000 ~                                        ld      (Yreg),a                ; TAY                    \ the call to this subroutine
 560+ 0000 ~                                        SetCarryFlag                    ; SEC                    \ Set the C flag to indicate the clipped line does not fit on-screen
 561+ 0000 ~                                        ret                             ; RTS                    \ Return from the subroutine
 562+ 0000 ~
 563+ 0000 ~
 564+ 0000 ~            p?_l2_draw_6502_line:   ld      hl,x1                           ; copy from currnet position to 6502 variables
 565+ 0000 ~                                        ld      de, p?_XX1510
 566+ 0000 ~                                        ld      bc,4*2
 567+ 0000 ~                                        ldir
 568+ 0000 ~                                        call    p?_LL145_6502                      ; perform 6502 version
 569+ 0000 ~                                        ret     c                               ; returns if carry is set as its a no draw
 570+ 0000 ~            .CopyBackResults:           ld      hl,0
 571+ 0000 ~                                        ld      (x1),hl
 572+ 0000 ~                                        ld      (y1),hl
 573+ 0000 ~                                        ld      (x2),hl
 574+ 0000 ~                                        ld      (y2),hl
 575+ 0000 ~                                        ld      a,( p?_XX1510)
 576+ 0000 ~                                        ld      (x1),a
 577+ 0000 ~                                        ld      c,a
 578+ 0000 ~                                        ld      a,( p?_XX1510+1)
 579+ 0000 ~                                        ld      (y1),a
 580+ 0000 ~                                        ld      b,a
 581+ 0000 ~                                        ld      a,( p?_XX1510+2)
 582+ 0000 ~                                        ld      (x2),a
 583+ 0000 ~                                        ld      e,a
 584+ 0000 ~                                        ld      a,( p?_XX1510+3)
 585+ 0000 ~                                        ld      (y2),a
 586+ 0000 ~                                        ld      d,a
 587+ 0000 ~                                        ld      a,$FF
 588+ 0000 ~                                        ClearCarryFlag
 589+ 0000 ~                                        ret
 590+ 0000                      ENDM
# file closed: ./Universe/UniverseMacros/asm_linedraw.asm
 128  0000                                      INCLUDE "./Universe/UniverseMacros/UniverseVarsDefineMacro.asm"
# file opened: ./Universe/UniverseMacros/UniverseVarsDefineMacro.asm
   1+ 0000              ; -- AI Core data
   2+ 0000              UnivCoreAIVarsMacro:        MACRO  p?
   3+ 0000 ~            p?_BnkShipType                DB  0
   4+ 0000 ~            ; Used to make 16 bit reads a little cleaner in source code
   5+ 0000 ~            p?_BnkzPoint                  DS  3
   6+ 0000 ~            p?_BnkzPointLo                equ p?_BnkzPoint
   7+ 0000 ~            p?_BnkzPointHi                equ p?_BnkzPoint+1
   8+ 0000 ~            p?_BnkzPointSign              equ p?_BnkzPoint+2
   9+ 0000 ~
  10+ 0000 ~            ; Used for medridan drawing routines
  11+ 0000 ~            p?_BnkCx                      DW  0
  12+ 0000 ~            p?_BnkCxSign                  EQU p?_BnkCx+1
  13+ 0000 ~            p?_BnkCy                      DW  0
  14+ 0000 ~            p?_BnkCySign                  EQU p?_BnkCy+1
  15+ 0000 ~            p?_BnkUx                      DW  0
  16+ 0000 ~            p?_BnkUxSign                  EQU p?_BnkUx+1
  17+ 0000 ~            p?_BnkUy                      DW  0
  18+ 0000 ~            p?_BnkUySign                  EQU p?_BnkUy+1
  19+ 0000 ~            p?_BnkVx                      DW  0
  20+ 0000 ~            p?_BnkVxSign                  EQU p?_BnkVx+1
  21+ 0000 ~            p?_BnkVy                      DW  0
  22+ 0000 ~            p?_BnkVySign                  EQU p?_BnkVy+1
  23+ 0000 ~            p?_BnkSinCNT2                 DB  0
  24+ 0000 ~            p?_BnkSinCNT2Sign             DB  0
  25+ 0000 ~            p?_BnkCosCNT2                 DB  0
  26+ 0000 ~            p?_BnkCosCNT2Sign             DB  0
  27+ 0000 ~            p?_BnkUxCos                   DB  0
  28+ 0000 ~            p?_BnkUxCosSign               DB  0
  29+ 0000 ~            p?_BnkUyCos                   DB  0
  30+ 0000 ~            p?_BnkUyCosSign               DB  0
  31+ 0000 ~            p?_BnkVxSin                   DB  0
  32+ 0000 ~            p?_BnkVxSinSign               DB  0
  33+ 0000 ~            p?_BnkVySin                   DB  0
  34+ 0000 ~            p?_BnkVySinSign               DB  0
  35+ 0000 ~            p?_BnkVxVySinSign             DB  0
  36+ 0000 ~            p?_BnkUxUyCosSign             DB  0
  37+ 0000 ~            p?_BnkUxCosAddVxSin           DW  0
  38+ 0000 ~            p?_BnkUyCosSubVySin           DW  0
  39+ 0000 ~            p?_BnkAngle                   DB  0
  40+ 0000 ~
  41+ 0000 ~            ; General local variables used in universe object
  42+ 0000 ~            p?_BnkTGT                     DB  0
  43+ 0000 ~            p?_BnkSTP                     DB  0
  44+ 0000 ~            p?_BnkLSP                     DS  50              ; move to planet or L2 code ?
  45+ 0000 ~            p?_BnkCNT                     DB  0               ; 93
  46+ 0000 ~            p?_BnkCNT2                    DB  0               ; 93
  47+ 0000 ~            ; Replaced LSX2 and LSY2 with plot heaps of 64 x 2 bytes each + 1 pair for initial point
  48+ 0000 ~                IFDEF MERIDANLINEDEBUG
  49+ 0000 ~            p?_BnkPlotXHeap               DS  $82			   ; &0EC0	    \ LSX2 bline buffer size?
  50+ 0000 ~            p?_BnkPlotYHeap               DS  $82            ; &0F0E	    \ LSY2
  51+ 0000 ~                ENDIF
  52+ 0000 ~            p?_BnkPlotIndex               DB  0
  53+ 0000 ~                DISPLAY "TODO can we remove this and just use BnKCNT = 0 as the same thing?"
  54+ 0000 ~            p?_BnkFlag					DB  0
  55+ 0000 ~
  56+ 0000 ~            ; Post clipping the results are now 8 bit
  57+ 0000 ~            p?_BnkVisibility              DB  0               ; replaces general purpose xx4 in renderingW
  58+ 0000 ~            p?_BnkProjectedY              DB  0
  59+ 0000 ~            p?_BnkProjectedX              DB  0
  60+ 0000 ~            p?_BnkProjected               equ p?_BnkProjectedY  ; resultant projected position
  61+ 0000 ~            p?_XX15Save                   DS  8
  62+ 0000 ~            p?_XX15Save2                  DS  8
  63+ 0000 ~            p?_Radius                     DB  0
  64+ 0000 ~            ; Used when drawing curves for the end value from previous calls to BLINE
  65+ 0000 ~            ; held as 16 bit values pre clipping
  66+ 0000 ~            p?_PrevXPos                   DW 0
  67+ 0000 ~            p?_PrevYPos                   DW 0
  68+ 0000 ~            p?_NewXPos                    DW 0
  69+ 0000 ~            p?_NewYPos                    DW 0
  70+ 0000 ~
  71+ 0000 ~            ; Colouration
  72+ 0000 ~            ; For planets, Colour 1 is main colour, Colour 2 is outer rim
  73+ 0000 ~            ; if we are going to do outer rim then may have colour thickeness as number of pixels to simulat atmosphere
  74+ 0000 ~            p?_Colour1                    DB 0
  75+ 0000 ~            p?_Colour2                    DB 0
  76+ 0000 ~            p?_Colour2Thickness           DB 0
  77+ 0000 ~            ;        -- _pl(prf .. "Radius                     DW  0
  78+ 0000 ~            ;        -- _pl(prf .. "RadiusHigh                 equ p?_Radius+1
  79+ 0000                                           ENDM
  80+ 0000
  81+ 0000              UnivPosVarsMacro:            MACRO  p?
  82+ 0000 ~            p?_Bnkxlo                     DB  0                       ; INWK+0
  83+ 0000 ~            p?_Bnkxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
  84+ 0000 ~            p?_Bnkxsgn                    DB  0                       ; INWK+2
  85+ 0000 ~            p?_Bnkylo                     DB  0                       ; INWK+3 \ ylo
  86+ 0000 ~            p?_Bnkyhi                     DB  0                       ; INWK+4 \ yHi
  87+ 0000 ~            p?_Bnkysgn                    DB  0                       ; INWK +5
  88+ 0000 ~            p?_Bnkzlo                     DB  0                       ; INWK +6
  89+ 0000 ~            p?_Bnkzhi                     DB  0                       ; INWK +7
  90+ 0000 ~            p?_Bnkzsgn                    DB  0                       ; INWK +8
  91+ 0000 ~            p?_CompassX                   DW  0
  92+ 0000 ~            p?_CompassY                   DW  0
  93+ 0000 ~            p?_BnkElipseCenterX           DW  0
  94+ 0000 ~            p?_BnkElipseCenterY           DW  0
  95+ 0000 ~            p?_BnkElipseRadiusU           DW  0
  96+ 0000 ~            p?_BnkElipseRadiusV           DW  0
  97+ 0000                                          ENDM
  98+ 0000
  99+ 0000              UnivModelVarsMacro:         MACRO p?
 100+ 0000 ~            p?_BnkFaceVisArray            DS FaceArraySize            ; XX2 Up to 16 faces this may be normal list, each entry is controlled by bit 7, 1 visible, 0 hidden
 101+ 0000 ~            ; Node array holds the projected to screen position regardless of if its clipped or not
 102+ 0000 ~            ; When we use traingles we can cheat a bit on clipping as all lines will be horizontal so clipping is much simplified
 103+ 0000 ~            p?_BnkNodeArray               DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
 104+ 0000 ~            p?_BnkNodeArray2              DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
 105+ 0000 ~            p?_BnkLineArray               DS LineArraySize * 8        ; XX19 Holds the clipped line details
 106+ 0000 ~            ; ONLY IF TESTING SOLID FILL p?_BnkTriangleOverspill       DS TraingleArraySize * 4    ; jsut a padding for testing
 107+ 0000 ~            p?_BnkLinesHeapMax            EQU $ - p?_BnkLineArray
 108+ 0000 ~            p?_BnkTraingleArray           EQU p?_BnkLineArray           ; We can use the line array as we draw lines or traingles
 109+ 0000 ~            p?_BnkEdgeProcessedList DS EdgeHeapSize
 110+ 0000 ~            ; Array current Lengths
 111+ 0000 ~            p?_BnkFaceVisArrayLen         DS 1
 112+ 0000 ~            p?_BnkNodeArrayLen            DS 1
 113+ 0000 ~            p?_BnkLineArrayLen            DS 1                        ; total number of lines loaded to array
 114+ 0000 ~            p?_BnkLineArrayBytes          DS 1                        ; total number of bytes loaded to array  = array len * 4
 115+ 0000 ~            p?_XX20                       equ p?_BnkLineArrayLen
 116+ 0000 ~            p?_varXX20                    equ p?_BnkLineArrayLen
 117+ 0000 ~
 118+ 0000 ~            p?_BnkEdgeHeapSize            DS 1
 119+ 0000 ~            p?_BnkEdgeHeapBytes           DS 1
 120+ 0000 ~            p?_BnkLinesHeapLen            DS 1
 121+ 0000 ~            p?_BnkEdgeHeapCounter         DS 1
 122+ 0000 ~            p?_BnkEdgeRadius              DS 1
 123+ 0000 ~            p?_BnkEdgeShipType            DS 1
 124+ 0000 ~            p?_BnkEdgeExplosionType       DS 1
 125+ 0000 ~
 126+ 0000 ~            ; Lines
 127+ 0000 ~            p?_BnkXX19                    DS  3
 128+ 0000                                          ENDM
 129+ 0000
 130+ 0000
 131+ 0000              ShipDataMacro:              MACRO p?
 132+ 0000 ~            p?_BnkHullCopy                DS  ShipDataLength
 133+ 0000 ~            p?_ScoopDebrisAddr            equ p?_BnkHullCopy + ScoopDebrisOffset
 134+ 0000 ~            p?_MissileLockLoAddr          equ p?_BnkHullCopy + MissileLockLoOffset
 135+ 0000 ~            p?_MissileLockHiAddr          equ p?_BnkHullCopy + MissileLockHiOffset
 136+ 0000 ~            p?_EdgeAddyAddr               equ p?_BnkHullCopy + EdgeAddyOffset
 137+ 0000 ~            p?_LineX4Addr                 equ p?_BnkHullCopy + LineX4Offset
 138+ 0000 ~            p?_GunVertexAddr              equ p?_BnkHullCopy + GunVertexOffset
 139+ 0000 ~            p?_ExplosionCtAddr            equ p?_BnkHullCopy + ExplosionCtOffset
 140+ 0000 ~            p?_VertexCountAddr            equ p?_BnkHullCopy + VertexCountOffset
 141+ 0000 ~            p?_VertexCtX6Addr             equ p?_BnkHullCopy + VertexCtX6Offset
 142+ 0000 ~            p?_EdgeCountAddr              equ p?_BnkHullCopy + EdgeCountOffset
 143+ 0000 ~            p?_BountyLoAddr               equ p?_BnkHullCopy + BountyLoOffset
 144+ 0000 ~            p?_BountyHiAddr               equ p?_BnkHullCopy + BountyHiOffset
 145+ 0000 ~            p?_FaceCtX4Addr               equ p?_BnkHullCopy + FaceCtX4Offset
 146+ 0000 ~            p?_DotAddr                    equ p?_BnkHullCopy + DotOffset
 147+ 0000 ~            p?_EnergyAddr                 equ p?_BnkHullCopy + EnergyOffset
 148+ 0000 ~            p?_SpeedAddr                  equ p?_BnkHullCopy + SpeedOffset
 149+ 0000 ~            p?_FaceAddyAddr               equ p?_BnkHullCopy + FaceAddyOffset
 150+ 0000 ~            p?_QAddr                      equ p?_BnkHullCopy + QOffset
 151+ 0000 ~            p?_LaserAddr                  equ p?_BnkHullCopy + LaserOffset
 152+ 0000 ~            p?_VerticesAddyAddr           equ p?_BnkHullCopy + VerticiesAddyOffset
 153+ 0000 ~            p?_ShipTypeAddr               equ p?_BnkHullCopy + ShipTypeOffset
 154+ 0000 ~            p?_ShipNewBitsAddr            equ p?_BnkHullCopy + ShipNewBitsOffset
 155+ 0000 ~            p?_ShipAIFlagsAddr            equ p?_BnkHullCopy + ShipAIFlagsOffset
 156+ 0000 ~            p?_ShipECMFittedChanceAddr    equ p?_BnkHullCopy + ShipECMFittedChanceOffset
 157+ 0000 ~            p?_ShipSolidFlagAddr          equ p?_BnkHullCopy + ShipSolidFlagOffset
 158+ 0000 ~            p?_ShipSolidFillAddr          equ p?_BnkHullCopy + ShipSolidFillOffset
 159+ 0000 ~            p?_ShipSolidLenAddr           equ p?_BnkHullCopy + ShipSolidLenOffset
 160+ 0000                                      ENDM
 161+ 0000
 162+ 0000              ; Now this will mean some special coding for the copy from model to univ bank
 163+ 0000              ShipModelDataMacro:         MACRO p?
 164+ 0000 ~            p?_BnkHullVerticies           DS  40 * 6              ; largetst is trasnport type 10 at 37 vericies so alows for 40 * 6 Bytes  =
 165+ 0000 ~            p?_BnkHullEdges               DS  50 * 4              ; ype 10 is 46 edges so allow 50
 166+ 0000 ~            p?_BnkHullNormals             DS  20 * 4              ; type 10 is 14 edges so 20 to be safe
 167+ 0000 ~                IFDEF SOLIDHULLTEST
 168+ 0000 ~            p?_BnkHullSolid               DS  100 * 4             ; Up to 100 triangles (May optimise so only loads non hidden faces later
 169+ 0000 ~                ENDIF
 170+ 0000 ~            p?_OrthagCountdown             DB  12
 171+ 0000 ~            p?_BnkShipCopy                equ p?_BnkHullVerticies               ; Buffer for copy of ship data, for speed will copy to a local memory block, Cobra is around 400 bytes on creation of a new ship so should be plenty
 172+ 0000                                          ENDM
 173+ 0000
 174+ 0000
 175+ 0000              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
 176+ 0000              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
 177+ 0000              ;-Rotation Matrix of Universe Object-----------------------------------------------------------------------------------------------
 178+ 0000              UnivRotationVarsMacro:      MACRO p?
 179+ 0000 ~            p?_BnkrotmatSidevX            DW  0                       ; INWK +21
 180+ 0000 ~            p?_BnkrotmatSidev             equ p?_BnkrotmatSidevX
 181+ 0000 ~            p?_BnkrotmatSidevY            DW  0                       ; INWK +23
 182+ 0000 ~            p?_BnkrotmatSidevZ            DW  0                       ; INWK +25
 183+ 0000 ~            p?_BnkrotmatRoofvX            DW  0                       ; INWK +15
 184+ 0000 ~            p?_BnkrotmatRoofv             equ p?_BnkrotmatRoofvX
 185+ 0000 ~            p?_BnkrotmatRoofvY            DW  0                       ; INWK +17
 186+ 0000 ~            p?_BnkrotmatRoofvZ            DW  0                       ; INWK +19
 187+ 0000 ~            p?_BnkrotmatNosevX            DW  0                       ; INWK +9
 188+ 0000 ~            p?_BnkrotmatNosev             EQU p?_BnkrotmatNosevX
 189+ 0000 ~            p?_BnkrotmatNosevY            DW  0                       ; INWK +11
 190+ 0000 ~            p?_BnkrotmatNosevZ            DW  0                       ; INWK +13
 191+ 0000                                          ENDM
 192+ 0000
 193+ 0000
 194+ 0000
 195+ 0000
 196+ 0000              CopyPosToXX15Macro: MACRO   p?
 197+ 0000 ~
 198+ 0000 ~            p?_CopyPosToXX15:    ld hl,p?_Bnkxhi
 199+ 0000 ~                                       ld de,p?_BnkXScaled
 200+ 0000 ~                                       ldi
 201+ 0000 ~                                       ldi
 202+ 0000 ~                                       inc hl ; skip to y high
 203+ 0000 ~                                       ldi
 204+ 0000 ~                                       ldi
 205+ 0000 ~                                       inc hl ; skip to z hig
 206+ 0000 ~                                       ldi
 207+ 0000 ~                                       ldi
 208+ 0000 ~                                       ret
 209+ 0000                                  ENDM
 210+ 0000
 211+ 0000
 212+ 0000
 213+ 0000
 214+ 0000              InitialiseUniverseObjMacro: MACRO   p?
 215+ 0000 ~            p?_InitRotMat:    ld      hl, 0
 216+ 0000 ~                                    ld      (p?_BnkrotmatSidevY),hl       ; set the zeroes
 217+ 0000 ~                                    ld      (p?_BnkrotmatSidevZ),hl       ; set the zeroes
 218+ 0000 ~                                    ld      (p?_BnkrotmatRoofvX),hl       ; set the zeroes
 219+ 0000 ~                                    ld      (p?_BnkrotmatRoofvZ),hl       ; set the zeroes
 220+ 0000 ~                                    ld      (p?_BnkrotmatNosevX),hl       ; set the zeroes
 221+ 0000 ~                                    ld      (p?_BnkrotmatNosevY),hl       ; set the zeroes
 222+ 0000 ~            ; Optimised as already have 0 in l
 223+ 0000 ~                                    ld      h, $60	             				; 96 in hi byte
 224+ 0000 ~                                    ;ld      hl,1
 225+ 0000 ~                                    ld      (p?_BnkrotmatSidevX),hl
 226+ 0000 ~                                    ld      (p?_BnkrotmatRoofvY),hl
 227+ 0000 ~            ; Optimised as already have 0 in l
 228+ 0000 ~                                    ld      h, $E0					            ; -96 in hi byte which is +96 with hl bit 7 set
 229+ 0000 ~                                    ld      (p?_BnkrotmatNosevZ),hl
 230+ 0000 ~                                    ret
 231+ 0000                                          ENDM
 232+ 0000
 233+ 0000              ZeroPitchAndRollMacro:  MACRO   p?
 234+ 0000 ~            p?_ZeroPitchAndRoll:
 235+ 0000 ~                                    xor     a
 236+ 0000 ~                                    ld      (p?_BnkRotXCounter),a
 237+ 0000 ~                                    ld      (p?_BnkRotZCounter),a
 238+ 0000                                      ENDM
 239+ 0000
 240+ 0000              MaxPitchAndRollMacro:   MACRO   p?
 241+ 0000 ~            p?_MaxPitchAndRoll:
 242+ 0000 ~                                    ld      a,127
 243+ 0000 ~                                    ld      (p?_BnkRotXCounter),a
 244+ 0000 ~                                    ld      (p?_BnkRotZCounter),a
 245+ 0000                                      ENDM
 246+ 0000
 247+ 0000              RandomPitchAndRollMacro: MACRO  p?
 248+ 0000 ~            p?_RandomPitchAndRoll:
 249+ 0000 ~                                    call    doRandom
 250+ 0000 ~                                    or      %01101111
 251+ 0000 ~                                    ld      (p?_BnkRotXCounter),a
 252+ 0000 ~                                    call    doRandom
 253+ 0000 ~                                    or      %01101111
 254+ 0000 ~                                    ld      (p?_BnkRotZCounter),a
 255+ 0000                                      ENDM
 256+ 0000
 257+ 0000              RandomSpeedMacro:       MACRO   p?
 258+ 0000 ~            p?_RandomSpeed:
 259+ 0000 ~                                    call    doRandom
 260+ 0000 ~                                    and     31
 261+ 0000 ~                                    ld      (p?_BnkSpeed),a
 262+ 0000                                      ENDM
 263+ 0000
 264+ 0000              MaxSpeedMacro:          MACRO   p?
 265+ 0000 ~            p?_MaxSpeed:      ld      a,31
 266+ 0000 ~                                    ld      (p?_BnkSpeed),a
 267+ 0000                                      ENDM
 268+ 0000
 269+ 0000              ZeroAccellerationMacro: MACRO   p?
 270+ 0000 ~            p?_ZeroAccelleration:
 271+ 0000 ~                                    xor     a
 272+ 0000 ~                                    ld      (p?_BnkAccel),a
 273+ 0000                                      ENDM
 274+ 0000
 275+ 0000
 276+ 0000              SetShipHostileMacro:    MACRO   p?
 277+ 0000 ~            p?_SetShipHostile ld      a,(p?_ShipNewBitsAddr)
 278+ 0000 ~                                    or      ShipIsHostile
 279+ 0000 ~                                    ld      (p?_ShipNewBitsAddr),a
 280+ 0000 ~                                    ret
 281+ 0000                                      ENDM
 282+ 0000
 283+ 0000              ClearShipHostileMacro:  MACRO    p?
 284+ 0000 ~            p?_ClearShipHostile:    ld      a,(p?_ShipNewBitsAddr)
 285+ 0000 ~                                    and     ShipNotHostile
 286+ 0000 ~                                    ld      (p?_ShipNewBitsAddr),a
 287+ 0000 ~                                    ret
 288+ 0000                                      ENDM
 289+ 0000
 290+ 0000              ResetBankDataMacro:     MACRO   p?
 291+ 0000 ~            p?_ResetBnKData:        ld      hl,p?_StartOfUniv
 292+ 0000 ~                                    ld      de,p?_Bnk_Data_len
 293+ 0000 ~                                    xor     a
 294+ 0000 ~                                    call    memfill_dma
 295+ 0000 ~                                    ret
 296+ 0000                                      ENDM
 297+ 0000
 298+ 0000              ResetBnKPositionMacro:  MACRO   p?
 299+ 0000 ~            p?_ResetBnKPosition:
 300+ 0000 ~                                    ld      hl,p?_Bnkxlo
 301+ 0000 ~                                    ld      b, 3*3
 302+ 0000 ~                                    xor     a
 303+ 0000 ~            .zeroLoop:              ld      (hl),a
 304+ 0000 ~                                    inc     hl
 305+ 0000 ~                                    djnz    .zeroLoop
 306+ 0000 ~                                    ret
 307+ 0000                                      ENDM
 308+ 0000
 309+ 0000              FireEMCMacro:           MACRO   p?
 310+ 0000 ~            p?_FireECM:       ld      a,ECMCounterMax                 ; set ECM time
 311+ 0000 ~                                    ld      (p?_BnkECMCountDown),a            ;
 312+ 0000 ~                                    ld      a,(ECMCountDown)
 313+ 0000 ~                                    ReturnIfALTNusng ECMCounterMax
 314+ 0000 ~                                    ld      a,ECMCounterMax
 315+ 0000 ~                                    ld      (ECMCountDown),a
 316+ 0000 ~                                    ret
 317+ 0000                                      ENDM
 318+ 0000
 319+ 0000
 320+ 0000              RechargeEnergyMacro:    MACRO   p?
 321+ 0000 ~            p?_RechargeEnergy:ld      a,(p?_BnkEnergy)
 322+ 0000 ~                                    ReturnIfAGTEMemusng EnergyAddr
 323+ 0000 ~                                    inc     a
 324+ 0000 ~                                    ld      (p?_BnkEnergy),a
 325+ 0000 ~                                    ret
 326+ 0000                                      ENDM
 327+ 0000
 328+ 0000
 329+ 0000              UpdateECMMacro:         MACRO   p?
 330+ 0000 ~            p?_UpdateECM:     ld      a,(p?_BnkECMCountDown)
 331+ 0000 ~                                    ReturnIfAIsZero
 332+ 0000 ~                                    dec     a
 333+ 0000 ~                                    ld      (p?_BnkECMCountDown),a
 334+ 0000 ~                                    ld      hl,p?_BnkEnergy
 335+ 0000 ~                                    dec     (hl)
 336+ 0000 ~                                    ret     p
 337+ 0000 ~            .ExhaustedEnergy:       call    p?_ExplodeShip      ; if it ran out of energy it was as it was also shot or collided as it checks in advance. Main ECM loop will continue as a compromise as multiple ships can fire ECM simultaneously
 338+ 0000 ~                                    ret
 339+ 0000                                      ENDM
 340+ 0000
 341+ 0000               ;-- This takes an Axis and subtracts 1, handles leading sign and boundary of 0 going negative
 342+ 0000              JumpOffSetMacro:        MACRO   p?, Axis
 343+ 0000 ~            p?_JumpOffSet:    ld      hl,(Axis)
 344+ 0000 ~                                    ld      a,h
 345+ 0000 ~                                    and     SignOnly8Bit
 346+ 0000 ~                                    jr      nz,.NegativeAxis
 347+ 0000 ~            .PositiveAxis:          dec     l
 348+ 0000 ~                                    jp      m,.MovingNegative
 349+ 0000 ~                                    jp      .Done
 350+ 0000 ~            .NegativeAxis:          inc     l                               ; negative means increment the z
 351+ 0000 ~                                    jp      .Done
 352+ 0000 ~            .MovingNegative:        ld      hl,$8001                        ; -1
 353+ 0000 ~            .Done                   ld      (Axis),hl
 354+ 0000                                      ENDM
 355+ 0000
 356+ 0000
 357+ 0000              WarpOffSetMacro:        MACRO   p?
 358+ 0000 ~            p?_WarpOffset:    ld      hl,(p?_Bnkzhi)
 359+ 0000 ~                                    ld      a,h
 360+ 0000 ~                                    and     SignOnly8Bit
 361+ 0000 ~                                    jr      nz,.NegativeAxis
 362+ 0000 ~            .PositiveAxis:          dec     l
 363+ 0000 ~                                    jp      m,.MovingNegative
 364+ 0000 ~                                    jp      .Done
 365+ 0000 ~            .NegativeAxis:          inc     l                               ; negative means increment the z
 366+ 0000 ~                                    jp      .Done
 367+ 0000 ~            .MovingNegative:        ld      hl,$8001                        ; -1
 368+ 0000 ~            .Done                   ld      (p?_Bnkzhi),hl
 369+ 0000 ~                                    ret
 370+ 0000                                      ENDM
 371+ 0000
 372+ 0000
 373+ 0000              ; --------------------------------------------------------------
 374+ 0000              ; This sets the ship as a shower of explosiondwd
 375+ 0000              ExplodeShipMacro:       MACRO   p?
 376+ 0000 ~            p?_ExplodeShip:   ld      a,(p?_Bnkaiatkecm)
 377+ 0000 ~                                    or      ShipExploding | ShipKilled      ; Set Exlpoding flag and mark as just been killed
 378+ 0000 ~                                    and     Bit7Clear                       ; Remove AI
 379+ 0000 ~                                    ld      (p?_Bnkaiatkecm),a
 380+ 0000 ~                                    xor     a
 381+ 0000 ~                                    ld      (p?_BnkEnergy),a
 382+ 0000 ~                                    ;TODO
 383+ 0000 ~                                    ret
 384+ 0000                                      ENDM
# file closed: ./Universe/UniverseMacros/UniverseVarsDefineMacro.asm
 129  0000                                      INCLUDE "./Universe/UniverseMacros/AIRuntimeDataMacro.asm"
# file opened: ./Universe/UniverseMacros/AIRuntimeDataMacro.asm
   1+ 0000              MissileRuntimeDataMacro:            MACRO  p?
   2+ 0000 ~            ; -- Note these must be here for initialise blast as it does a 12 byte ldir
   3+ 0000 ~            ; . Note missile explosion will have to have logic to cause linger if a blast is to be enqued
   4+ 0000 ~            p?_BnkMissileBlastRange:      DB  0                       ; copied in when setting up a missile
   5+ 0000 ~            p?_BnkMissileBlastDamage:     DB  0                       ; copied in when setting up a missile
   6+ 0000 ~            p?_BnkMissileDetonateRange:   DB  0                       ; copied in when setting up a missile, allows for proximity missiles
   7+ 0000 ~            p?_BnkMissileDetonateDamage:  DB  0                       ; copied in when setting up a missile
   8+ 0000                                                  ENDM
   9+ 0000              ; -- Metadata for ship to help with bank managment
  10+ 0000              CoreRuntimeDataMacro:               MACRO   p?
  11+ 0000 ~            p?_BnkStartOfRuntimeData:
  12+ 0000 ~            p?_BnkSlotNumber              DB  0
  13+ 0000 ~            p?_BnkShipUnivBankNbr         DB  0                       ; Present ship universe bank number
  14+ 0000 ~            p?_BnkShipModelBank           DB  0                       ; Bank nbr ship was from
  15+ 0000 ~            p?_BnkShipModelNbr            DB  0                       ; Ship Id with in the bank
  16+ 0000 ~            p?_BnkShipModelId             DB  0                       ; Absolute ship id
  17+ 0000 ~            ; -- Ship AI data
  18+ 0000 ~            p?_BnkMissleHitToProcess      DB  0                       ; This is used for enquing missle blasts as we can only do one missile at a time, could make it multi but neeed to smooth CPU usage
  19+ 0000 ~            p?_BnkMissileTarget           DB  0                       ; This is the ship slot number for the target from 0 to n if the missile is not hostile to us, if the target is $FF then its us
  20+ 0000 ~            p?_BnkSpeed                   DB  0                       ; INWK +27
  21+ 0000 ~            p?_BnkAccel                   DB  0                       ; INWK +28
  22+ 0000 ~            p?_BnkRotXCounter             DB  0                       ; INWK +29
  23+ 0000 ~            p?_BnkRotZCounter             DB  0                       ; INWK +30
  24+ 0000 ~            p?_BnkRAT                     DB  0                       ; temporary for rotation magnitude or roll counter, for debugging state
  25+ 0000 ~            p?_BnkRAT2                    DB  0                       ; temporary for rotation threshold
  26+ 0000 ~            p?_RAT                        DB  0               ; 99
  27+ 0000 ~            p?_RAT2                       DB  0               ; 9A
  28+ 0000 ~            p?_RAT2Val                    DB  0               ; 9A
  29+ 0000 ~            p?_ALPHA                      DB  0
  30+ 0000 ~            p?_ALP1                       DB  0
  31+ 0000 ~            p?_ALP2                       DB  0
  32+ 0000 ~            p?_ALP2FLIP                   DB  0
  33+ 0000 ~            p?_BETA                       DB  0
  34+ 0000 ~            p?_BET1                       DB  0
  35+ 0000 ~            p?_BET2                       DB  0
  36+ 0000 ~            p?_DELTA                      DB  0
  37+ 0000 ~            p?_BnkexplDsp                 DB  0                       ; INWK +31 clear exploding/display state|missiles
  38+ 0000 ~            p?_BnkDrawAllFaces            DB  0
  39+ 0000 ~            p?_BnkShipAggression          DB  0                       ; calculated agression factor
  40+ 0000 ~            p?_Bnkaiatkecm                DB  0                       ; INWK +32 ai_attack_univ_ecm i.e. AI type
  41+ 0000 ~            p?_BnkSpawnObject             DB  0
  42+ 0000 ~            p?_BnkCam0yLo                 DB  0                       ; INWK +33 ????
  43+ 0000 ~            p?_BnkCam0yHi                 DB  0                       ; INWK +34?????
  44+ 0000 ~            p?_BnkEnergy                  DB  0                       ; INWK +35
  45+ 0000 ~            p?_BnkECMCountDown            DB  0                       ; counts down ECM usage if activated reducing energy too in update loop
  46+ 0000 ~            p?_BnkECMFitted               DB  0                       ; Does ship have ECM, true false
  47+ 0000 ~            p?_BnkLaserPower              DB  0                       ; Type of laser fitted
  48+ 0000 ~            p?_BnkMissilesLeft            DB  0
  49+ 0000 ~            p?_BnkFighterShipId           DB  0                       ; computed ship Id for any carriers
  50+ 0000 ~            p?_BnkFightersLeft            DB  0                       ; the number of ships left in hanger, 255 = infinite
  51+ 0000 ~            p?_BnkCloudCounter            DB  0                       ; cloud pixels
  52+ 0000 ~            p?_BnkCloudRadius             DB  0                       ; cloud pixels
  53+ 0000 ~            p?_BnkRuntimeSize             EQU $-p?_BnkStartOfRuntimeData
  54+ 0000                                                  ENDM
  55+ 0000              ;Flags work as follows:
  56+ 0000              ; UBnkSpawnObject - signals on death to spawn cargo items
  57+ 0000              ; 0 -                   Spawn Cargo 1
  58+ 0000              ; 1 -                   Spawn Cargo 2
  59+ 0000              ; 2 -                   Spawn Cargo 3
  60+ 0000              ; 3 -                   Spawn Cargo 4
  61+ 0000              ; 4 -                   Spawn Alloy 1
  62+ 0000              ; 5 -                   Spawn Alloy 2
  63+ 0000              ; 6 -                   Spawn Alloy 3
  64+ 0000              ; 7 -                   Spawn Alloy 4
  65+ 0000
  66+ 0000              ; UBnkaiatkecm
  67+ 0000              ; Bit	                Description
  68+ 0000              ; 7 -                   AI Enabled Flag
  69+ 0000              ; 6 -                   Ship Visible = ShipOnScreen/NotCloaked (cleared or set by check visible or cloaking override)
  70+ 0000              ; 5 -                   Ship is exploding if set, note if its a missile and one already equeued this will have to linger
  71+ 0000              ;                       linger can be done by not erasing ship unit missile equeue handled
  72+ 0000              ; 4 -                   Ship marked as exploded, cleared once aknowledged then bit 5 takes over and UBnkCloudCounter
  73+ 0000              ; 3 -                   Display state - Plot as a Dot
  74+ 0000              ; 2 -                   Nbr of Missiles bit 2
  75+ 0000              ; 1 -                   Nbr of Missiles bit 1
  76+ 0000              ; 0 -                   ECM present flag
  77+ 0000              ; ShipNewBitsAddr (in blueprint)
  78+ 0000              ;Bit	                Description
  79+ 0000              ;#0	Trader flag         * 0 = not a trader  * 1 = trader
  80+ 0000              ;                       80% of traders are peaceful and mind their own business plying their trade between the planet and space station, but 20% of them moonlight as bounty hunters (see bit #1)
  81+ 0000              ;                       Ships that are traders: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
  82+ 0000              ;#1 Bounty hunter flag  * 0 = not a bounty hunter* 1 = bounty hunter
  83+ 0000              ;                       If we are a fugitive or a serious offender and we bump into a bounty hunter, they will become hostile and attack us (see bit #2)
  84+ 0000              ;                       Ships that are bounty hunters: Viper, Fer-de-lance
  85+ 0000              ;#2	Hostile flag        * 0 = not hostile  * 1 = hostile
  86+ 0000              ;                       Hostile ships will attack us on sight; there are quite a few of them
  87+ 0000              ;                       Ships that are hostile: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Worm, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid, Thargon, Constrictor
  88+ 0000              ;#3	Pirate flag         * 0 = not a pirate * 1 = pirate
  89+ 0000              ;                       Hostile pirates will attack us on sight, but once we get inside the space station safe zone, they will stop
  90+ 0000              ;                       Ships that are pirates: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid
  91+ 0000              ;#4	Docking flag        * 0 = not docking * 1 = docking
  92+ 0000              ;                       Traders with their docking flag set fly towards the space station to try to dock, otherwise they aim for the planet
  93+ 0000              ;                       This flag is randomly set for traders when they are spawned
  94+ 0000              ;                       Ships that can be docking: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
  95+ 0000              ;#5	Innocent bystander  * 0 = normal * 1 = innocent bystander
  96+ 0000              ;                       If we attack an innocent ship within the space station safe zone, then the station will get angry with us and start spawning cops
  97+ 0000              ;                       Ships that are innocent bystanders: Shuttle, Transporter, Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Cougar
  98+ 0000              ;#6	Cop flag            * 0 = not a cop * 1 = cop
  99+ 0000              ;                       If we destroy a cop, then we instantly become a fugitive (the Transporter isn't actually a cop, but it's clearly under police protection)
 100+ 0000              ;                       Ships that are cops: Viper, Transporter
 101+ 0000              ;#7	Scooped, docked, escape pod flag
 102+ 0000              ;                       For spawned ships, this flag indicates that the ship been scooped or has docked (bit 7 is always clear on spawning)
 103+ 0000              ;                       For blueprints, this flag indicates whether the ship type has an escape pod fitted, so it can launch it when in dire straits
 104+ 0000              ;                       Ships that have escape pods: Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Viper, Mamba, Krait, Adder, Cobra Mk I, Cobra Mk III (pirate), Asp Mk II, Python (pirate), Fer-de-lance
 105+ 0000
# file closed: ./Universe/UniverseMacros/AIRuntimeDataMacro.asm
 130  0000                                      INCLUDE "./Tables/message_queue_macros.asm"
# file opened: ./Tables/message_queue_macros.asm
   1+ 0000
   2+ 0000              AnyMessagesMacro:       MACRO   NoMessageTarget
   3+ 0000 ~                                    ld      a, (MessageCount)
   4+ 0000 ~                                    and     a
   5+ 0000 ~                                    jr      z, NoMessageTarget
   6+ 0000                                      ENDM
   7+ 0000
   8+ 0000              AnyHyperSpaceMacro:     MACRO   NoMessageText
   9+ 0000 ~                                    ld      hl,(InnerHyperCount)
  10+ 0000 ~                                    ld      a,h
  11+ 0000 ~                                    or      l
  12+ 0000 ~                                    jr      z, NoMessageText
  13+ 0000                                      ENDM
  14+ 0000
# file closed: ./Tables/message_queue_macros.asm
 131  0000                                      INCLUDE "./Variables/general_variables_macros.asm"
# file opened: ./Variables/general_variables_macros.asm
   1+ 0000              ; limited to 255 character length
   2+ 0000              CountLengthHL:          MACRO   Limiter
   3+ 0000 ~                                    ld      de,hl
   4+ 0000 ~                                    ld      bc,Limiter
   5+ 0000 ~                                    xor     a
   6+ 0000 ~                                    cpir
   7+ 0000 ~                                    ClearCarryFlag
   8+ 0000 ~                                    sbc     hl,de
   9+ 0000 ~                                    ld      a,l
  10+ 0000 ~                                    ret
  11+ 0000                                      ENDM
  12+ 0000
  13+ 0000              IncMemMaxN:             MACRO   mem, maxvalue
  14+ 0000 ~                                    ld      a,(mem)
  15+ 0000 ~                                    cp      maxvalue
  16+ 0000 ~                                    jr      c,.IncMaxed
  17+ 0000 ~                                    inc     a
  18+ 0000 ~                                    ld      (mem),a
  19+ 0000 ~            .IncMaxed:
  20+ 0000                                      ENDM
  21+ 0000
  22+ 0000              IncMemMaxNCycle:        MACRO   mem, cyclevalue
  23+ 0000 ~                                    ld      a,(mem)
  24+ 0000 ~                                    inc     a
  25+ 0000 ~                                    cp      cyclevalue
  26+ 0000 ~                                    jr      c,.IncMaxed
  27+ 0000 ~                                    xor     a
  28+ 0000 ~            .IncMaxed:              ld      (mem),a
  29+ 0000                                      ENDM
  30+ 0000
  31+ 0000
  32+ 0000              HalfLengthHL:           MACRO
  33+ 0000 ~                                    ld      b,0
  34+ 0000 ~            .CountLenLoop:          ld      a,(hl)
  35+ 0000 ~                                    cp      0
  36+ 0000 ~                                    jr      z,.DoneCount
  37+ 0000 ~                                    inc     b
  38+ 0000 ~                                    inc     hl
  39+ 0000 ~                                    jr      .CountLenLoop
  40+ 0000 ~            .DoneCount:             ld      a,32
  41+ 0000 ~                                    sub     b
  42+ 0000 ~                                    sra     a
  43+ 0000                                      ENDM
  44+ 0000
  45+ 0000              MakeInnocentMacro:		MACRO
  46+ 0000 ~            						xor		a
  47+ 0000 ~            						ld		(FugitiveInnocentStatus),a
  48+ 0000              						ENDM
  49+ 0000
  50+ 0000              NoEscapePodMacro:		MACRO
  51+ 0000 ~            						xor		a
  52+ 0000 ~            						ld		(EscapePod),a
  53+ 0000              						ENDM
  54+ 0000
  55+ 0000              MaxFuelLevel            EQU     70              ; 7.0 light years max
  56+ 0000              MaxFuelMacro:			MACRO
  57+ 0000 ~            						ld		a,MaxFuelLevel
  58+ 0000 ~            						ld		(Fuel),a
  59+ 0000              						ENDM
  60+ 0000
  61+ 0000              MaxThrottle:            MACRO
  62+ 0000 ~                                    ld      a,(SHIPMAXSPEED)
  63+ 0000 ~                                    ld      (DELTA),a
  64+ 0000 ~                                    ld      d,a
  65+ 0000 ~                                    ld      e,4
  66+ 0000 ~                                    mul
  67+ 0000 ~                                    ld      (DELT4Lo),de
  68+ 0000                                      ENDM
  69+ 0000
  70+ 0000              ZeroThrottle:           MACRO
  71+ 0000 ~                                    xor     a
  72+ 0000 ~                                    ld      (DELTA),a
  73+ 0000 ~                                    ld      (DELT4Lo),a
  74+ 0000 ~                                    ld      (DELT4Lo+1),a
  75+ 0000                                      ENDM
  76+ 0000
  77+ 0000              ZeroPitch:              MACRO
  78+ 0000 ~                                    xor     a
  79+ 0000 ~                                    ld      (BET2),a
  80+ 0000 ~                                    ld      (BET2FLIP),a
  81+ 0000 ~                                    ld      (JSTY),a
  82+ 0000 ~                                    ld      (BETA),a
  83+ 0000                                      ENDM
  84+ 0000
  85+ 0000              ZeroRoll:               MACRO
  86+ 0000 ~                                    xor     a                              ; zero roll and climb
  87+ 0000 ~                                    ld      (ALP2),a
  88+ 0000 ~                                    ld      (ALP2FLIP),a
  89+ 0000 ~                                    ld      (JSTX),a
  90+ 0000 ~                                    ld      (ALPHA),a
  91+ 0000                                      ENDM
  92+ 0000
  93+ 0000              CorrectPostJumpFuel:    MACRO
  94+ 0000 ~                                    ld      a,(Fuel)
  95+ 0000 ~                                    ld      hl,Distance
  96+ 0000 ~                                    sub     a,(hl)
  97+ 0000 ~                                    ld      (Fuel),a
  98+ 0000                                      ENDM
  99+ 0000
 100+ 0000              AnyMissilesLeft:        MACRO
 101+ 0000 ~                                    ld      a,(NbrMissiles)
 102+ 0000 ~                                    and     a
 103+ 0000                                      ENDM
 104+ 0000
 105+ 0000              SetMissileTargetA:      MACRO
 106+ 0000 ~                                    ld      (MissileTargettingFlag),a   ; Set to slot number clearing bit 7
 107+ 0000                                      ENDM
 108+ 0000
 109+ 0000              IsMissileLaunchFlagged: MACRO
 110+ 0000 ~                                    ld      a,(MissileTargettingFlag)
 111+ 0000 ~                                    and     $80
 112+ 0000                                      ENDM
 113+ 0000
 114+ 0000              SetMissileTargetting:   MACRO
 115+ 0000 ~                                    ld      a,StageMissileTargeting
 116+ 0000 ~                                    ld      (MissileTargettingFlag),a
 117+ 0000                                      ENDM
 118+ 0000
 119+ 0000              ClearMissileTargetting: MACRO
 120+ 0000 ~                                    ld      a,StageMissileNotTargeting
 121+ 0000 ~                                    ld      (MissileTargettingFlag),a
 122+ 0000                                      ENDM
 123+ 0000
 124+ 0000
 125+ 0000              ; Clear targetting bits which signals launch if lower nibble has selected target
 126+ 0000              SetMissileLaunch:       MACRO
 127+ 0000 ~                                    ld      a,(MissileTargettingFlag)
 128+ 0000 ~                                    and     $0F
 129+ 0000 ~                                    ld      (MissileTargettingFlag),a
 130+ 0000                                      ENDM
 131+ 0000
 132+ 0000              LockMissileToA:         MACRO
 133+ 0000 ~                                    or      $80
 134+ 0000 ~                                    ld      (MissileTargettingFlag),a
 135+ 0000                                      ENDM
 136+ 0000
 137+ 0000              ClearECM:               MACRO
 138+ 0000 ~                                    xor     a
 139+ 0000 ~                                    ld      (ECMCountDown),a
 140+ 0000                                      ENDM
 141+ 0000
 142+ 0000
 143+ 0000              ; Will check to see if bit 2 is set, if it is clear, then friendly hence z is set
 144+ 0000              ;                                    if hit is set then hostile hence z is not set
 145+ 0000              IsShipHostile:          MACRO
 146+ 0000 ~                                    ld      a,(ShipNewBitsAddr)
 147+ 0000 ~                                    and     ShipIsHostile
 148+ 0000                                      ENDM
 149+ 0000
 150+ 0000              ; Will check to see if bit 2 is set, if it is clear, then friendly hence z is set
 151+ 0000              ;                                    if hit is set then hostile hence z is not set
 152+ 0000              IsShipFriendly:         MACRO
 153+ 0000 ~                                    ld      a,(ShipNewBitsAddr)
 154+ 0000 ~                                    and     ShipNotHostile                  ; mask so we only have hostile bit
 155+ 0000                                      ENDM
 156+ 0000
 157+ 0000              ; Will check to see if bit 5 is set, if clear, then not exploding z clear
 158+ 0000              ;                                    if set    then exploding     z set
 159+ 0000              IsShipExploding:        MACRO
 160+ 0000 ~                                    ld      a,(UBnkaiatkecm)
 161+ 0000 ~                                    and     ShipExploding
 162+ 0000                                      ENDM
 163+ 0000
 164+ 0000              UpdateLaserOnCounter:   MACRO
 165+ 0000 ~                                    ld      a,(CurrLaserPulseOnCount)
 166+ 0000 ~                                    and     a
 167+ 0000 ~                                    jr      z,.LaserOnIsDone
 168+ 0000 ~                                    dec     a
 169+ 0000 ~                                    ld      (CurrLaserPulseOnCount),a
 170+ 0000 ~                                    jr      z,.LaserOnIsDone
 171+ 0000 ~                                    ldCopyByte CurrLaserPulseOffTime, CurrLaserPulseOffCount
 172+ 0000 ~            .LaserOnIsDone:
 173+ 0000                                      ENDM
 174+ 0000
 175+ 0000              UpdateLaserOffCounter:  MACRO
 176+ 0000 ~                                    ld      a,(CurrLaserPulseOffTime)
 177+ 0000 ~                                    and     a
 178+ 0000 ~                                    jr      z,.LaserOffIsDone
 179+ 0000 ~                                    dec     a
 180+ 0000 ~                                    ld      (CurrLaserPulseOffTime),a
 181+ 0000 ~                                    jr      z,.LaserOffIsDone
 182+ 0000 ~                                    ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount
 183+ 0000 ~            .LaserOffIsDone:
 184+ 0000                                      ENDM
 185+ 0000
 186+ 0000              UpdateLaserRestCounter: MACRO
 187+ 0000 ~                                    ld      a,(CurrLaserPulseRestCount)
 188+ 0000 ~                                    and     a
 189+ 0000 ~                                    jr      z,.LaserRestIsDone
 190+ 0000 ~                                    dec     a
 191+ 0000 ~                                    ld      (CurrLaserPulseRestCount),a
 192+ 0000 ~                                    jr      z,.LaserRestIsDone
 193+ 0000 ~                                    ZeroA                                                                           ;    then pulse rate count = 0
 194+ 0000 ~                                    ld      (CurrLaserPulseRateCount),a                                             ;    .
 195+ 0000 ~            .LaserRestIsDone
 196+ 0000                                      ENDM
 197+ 0000
 198+ 0000              ChargeEnergyAndShields: MACRO
 199+ 0000 ~                                    ld      a,$FF
 200+ 0000 ~                                    ld      (PlayerEnergy),a
 201+ 0000 ~                                    ld      (ForeShield),a
 202+ 0000 ~                                    ld      (AftShield),a
 203+ 0000                                      ENDM
 204+ 0000
 205+ 0000              CopyPresentSystemToTarget: MACRO
 206+ 0000 ~                                    ld      hl,(PresentSystemX)
 207+ 0000 ~                                    ld      (TargetSystemX),hl
 208+ 0000                                      ENDM
 209+ 0000
 210+ 0000              CopyTargetSystemToPresent: MACRO
 211+ 0000 ~                                    ld      hl,(TargetSystemX)
 212+ 0000 ~                                    ld      (PresentSystemX),hl
 213+ 0000                                      ENDM
 214+ 0000
 215+ 0000              HalveFugitiveStatus:    MACRO
 216+ 0000 ~                                    ld      hl,FugitiveInnocentStatus
 217+ 0000 ~                                    srl     (hl)
 218+ 0000                                      ENDM
 219+ 0000
 220+ 0000              ClearForceTransition    MACRO
 221+ 0000 ~                                    ld      a,$FF
 222+ 0000 ~                                    ld      (ScreenTransitionForced),a
 223+ 0000                                      ENDM
 224+ 0000
 225+ 0000              ForceTransition:        MACRO newScreen
 226+ 0000 ~                                    ld      a,newScreen
 227+ 0000 ~                                    ld      (ScreenTransitionForced), a
 228+ 0000                                      ENDM
 229+ 0000
 230+ 0000              IsSpaceStationPresent:  MACRO
 231+ 0000 ~                                    ld      a,(SpaceStationSafeZone)
 232+ 0000 ~                                    and     a
 233+ 0000                                      ENDM
 234+ 0000
 235+ 0000              SetSafeZone:            MACRO
 236+ 0000 ~                                    xor     a
 237+ 0000 ~                                    ld      (SpaceStationSafeZone),a
 238+ 0000                                      ENDM
 239+ 0000
 240+ 0000              ClearSafeZone:          MACRO
 241+ 0000 ~                                    ld      a,$FF
 242+ 0000 ~                                    ld      (SpaceStationSafeZone),a
 243+ 0000                                      ENDM
 244+ 0000
 245+ 0000              ClearTemperatures:      MACRO
 246+ 0000 ~                                    xor     a
 247+ 0000 ~                                    ld      (CabinTemperature),a
 248+ 0000 ~                                    ld      (GunTemperature),a
 249+ 0000                                      ENDM
 250+ 0000
 251+ 0000              ClearWarpPressed:       MACRO
 252+ 0000 ~                                    SetMemFalse WarpPressed
 253+ 0000                                      ENDM
 254+ 0000
 255+ 0000              CoolCabin:              MACRO
 256+ 0000 ~                                    ld      a,(CabinTemperature)
 257+ 0000 ~                                    and     a
 258+ 0000 ~                                    jr      z,.AlreadyCool
 259+ 0000 ~                                    dec     a
 260+ 0000 ~                                    ld      (CabinTemperature),a
 261+ 0000 ~            .AlreadyCool:
 262+ 0000                                      ENDM
 263+ 0000
 264+ 0000              CoolLasers:             MACRO
 265+ 0000 ~                                    ld      a,(GunTemperature)
 266+ 0000 ~                                    and     a
 267+ 0000 ~                                    jr      z,.AlreadyCool
 268+ 0000 ~                                    dec     a
 269+ 0000 ~                                    ld      (GunTemperature),a
 270+ 0000 ~            .AlreadyCool:
 271+ 0000                                      ENDM
 272+ 0000
 273+ 0000              ; type 255 is "not fitted"
 274+ 0000
 275+ 0000
 276+ 0000              InitEventCounter:       MACRO
 277+ 0000 ~                                    xor     a
 278+ 0000 ~                                    ld      (EventCounter),a
 279+ 0000                                      ENDM
 280+ 0000
 281+ 0000              ClearMissJump:          MACRO
 282+ 0000 ~                                    ld      a,$FF
 283+ 0000 ~                                    ld      (MissJumpFlag),a
 284+ 0000                                      ENDM
 285+ 0000
 286+ 0000
 287+ 0000              DrainSystem:            MACRO   SystemMem, DrainMem
 288+ 0000 ~                                    ld      a,(DrainMem)
 289+ 0000 ~                                    ld      b,a
 290+ 0000 ~                                    ld      a,(SystemMem)
 291+ 0000 ~                                    sub     a,b
 292+ 0000 ~                                    ld      (SystemMem),a
 293+ 0000 ~                                    jr      c,.ZeroSystem
 294+ 0000 ~                                    jp      .ExitPoint
 295+ 0000 ~            .ZeroSystem:            ZeroA
 296+ 0000 ~                                    ld      (SystemMem),a
 297+ 0000 ~            .ExitPoint
 298+ 0000                                      ENDM
 299+ 0000
 300+ 0000              BoostSystem:            MACRO   SystemMem, BoostMem
 301+ 0000 ~                                    ld      a,(BoostMem)
 302+ 0000 ~                                    ld      b,a
 303+ 0000 ~                                    ld      a,(SystemMem)
 304+ 0000 ~                                    add     b
 305+ 0000 ~                                    ld      (SystemMem),a
 306+ 0000 ~                                    jr      c, .MaxSystem
 307+ 0000 ~                                    jp      .ExitPoint
 308+ 0000 ~            .MaxSystem:             ld      a,255
 309+ 0000 ~                                    ld      (SystemMem),a
 310+ 0000 ~            .ExitPoint
 311+ 0000                                      ENDM
 312+ 0000
 313+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER HasEngineSoundChanged:  MACRO
 314+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ld      a,(EngineSoundChanged)
 315+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         and     a
 316+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ENDM
 317+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER
 318+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER ClearEngineSoundChanged:MACRO
 319+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         xor      a
 320+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ld      (EngineSoundChanged),a
 321+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ENDM
 322+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER
 323+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER SetEngineSoundChanged:  MACRO
 324+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ld      a,$FF
 325+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ld      (EngineSoundChanged),a
 326+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ENDM
 327+ 0000
# file closed: ./Variables/general_variables_macros.asm
 132  0000                                      INCLUDE "./Variables/UniverseSlot_macros.asm"
# file opened: ./Variables/UniverseSlot_macros.asm
   1+ 0000
   2+ 0000              AddJunkCount:           MACRO
   3+ 0000 ~                                    ld      hl,JunkCount
   4+ 0000 ~                                    inc     (hl)
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              SubJunkCount:           MACRO
   8+ 0000 ~                                    ld      hl,JunkCount
   9+ 0000 ~                                    dec     (hl)
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              ClearJunkCount:         MACRO
  13+ 0000 ~                                    ZeroA
  14+ 0000 ~                                    ld      (JunkCount),a
  15+ 0000                                      ENDM
  16+ 0000
  17+ 0000              AddCop:                 MACRO
  18+ 0000 ~                                    ld      hl,CopCount
  19+ 0000 ~                                    inc     (hl)
  20+ 0000                                      ENDM
  21+ 0000
  22+ 0000              SubCop:                 MACRO
  23+ 0000 ~                                    ld      hl,CopCount
  24+ 0000 ~                                    dec     (hl)
  25+ 0000                                      ENDM
  26+ 0000
  27+ 0000              AddPirateCount:         MACRO
  28+ 0000 ~                                    ld      hl,PirateCount
  29+ 0000 ~                                    inc     (hl)
  30+ 0000                                      ENDM
  31+ 0000
  32+ 0000              SubPirateCount:         MACRO
  33+ 0000 ~                                    ld      hl,PirateCount
  34+ 0000 ~                                    inc     (hl)
  35+ 0000                                      ENDM
  36+ 0000
  37+ 0000              AreCopsPresent:         MACRO
  38+ 0000 ~                                    ld      a,(CopCount)
  39+ 0000 ~                                    and     a
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              ; Class == shiptype
  43+ 0000              SetSlotAToUnivClass:    MACRO
  44+ 0000 ~                                    ex      af,af'
  45+ 0000 ~                                    ld      a,(ShipTypeAddr)
  46+ 0000 ~                                    ld      b,a
  47+ 0000 ~                                    ex      af,af'
  48+ 0000 ~                                    call    SetSlotAToClassB
  49+ 0000                                      ENDM
  50+ 0000
  51+ 0000              TestRoomForJunk:        MACRO   Target
  52+ 0000 ~                                    ld      a,3
  53+ 0000 ~                                    JumpIfMemTrue  SpaceStationSafeZone, .DoTest
  54+ 0000 ~                                    add     a,2
  55+ 0000 ~            .DoTest                 JumpIfALTMemusng    JunkCount, Target
  56+ 0000                                      ENDM
  57+ 0000
  58+ 0000              JumpIfSpaceStation:     MACRO   Target
  59+ 0000 ~                                    ld      hl,UniverseSlotType
  60+ 0000 ~                                    ld      a,(hl)
  61+ 0000 ~                                    cp      ShipTypeStation
  62+ 0000                                      ENDM
  63+ 0000
  64+ 0000              ClearSlotMem:           MACRO   mem
  65+ 0000 ~                                    ld      a,(mem)
  66+ 0000 ~                                    call    ClearSlotA
  67+ 0000                                      ENDM
  68+ 0000
  69+ 0000              IsSlotEmpty:            MACRO
  70+ 0000 ~                                    ld      hl,UniverseSlotList
  71+ 0000 ~                                    add     hl,a
  72+ 0000 ~                                    ld      a,(hl)
  73+ 0000 ~                                    cp      0
  74+ 0000                                      ENDM
  75+ 0000
  76+ 0000              IsSlotMissile:          MACRO
  77+ 0000 ~                                    ld      hl,UniverseSlotType
  78+ 0000 ~                                    add     hl,a
  79+ 0000 ~                                    ld      a,(hl)
  80+ 0000 ~                                    cp      ShipTypeMissile
  81+ 0000                                      ENDM
  82+ 0000
  83+ 0000
  84+ 0000              ; Checks if slot is empty else A = ship type
  85+ 0000              ReturnIfSlotAEmpty:     MACRO
  86+ 0000 ~                                    ld      hl,UniverseSlotList
  87+ 0000 ~                                    add     hl,a
  88+ 0000 ~                                    ld      a,(hl)
  89+ 0000 ~                                    inc     a
  90+ 0000 ~                                    ret     z           ; if slot was ff inc would make it 0
  91+ 0000 ~                                    dec     a           ; get original value back for later
  92+ 0000                                      ENDM
  93+ 0000
  94+ 0000              JumpIfSlotAEmpty:       MACRO   Target
  95+ 0000 ~                                    ld      hl,UniverseSlotList
  96+ 0000 ~                                    add     hl,a
  97+ 0000 ~                                    ld      a,(hl)
  98+ 0000 ~                                    inc     a
  99+ 0000 ~                                    jp      z,Target    ; if slot was ff inc would make it 0
 100+ 0000 ~                                    dec     a           ; get original value back for later
 101+ 0000                                      ENDM
 102+ 0000
 103+ 0000              JumpIfSlotHLEmpty:      MACRO   Target
 104+ 0000 ~                                    ld      a,(hl)
 105+ 0000 ~                                    and     a
 106+ 0000 ~                                    jr      nz,Target
 107+ 0000                                      ENDM
# file closed: ./Variables/UniverseSlot_macros.asm
 133  0000                                      include "./Universe/UniverseMacros/FaceVisibility.asm"
# file opened: ./Universe/UniverseMacros/FaceVisibility.asm
   1+ 0000
   2+ 0000              SetFaceAVisibleMacro:   MACRO p?
   3+ 0000 ~            p?_SetFaceAVisible:ld      hl,p?_BnkFaceVisArray
   4+ 0000 ~                                    add     hl,a
   5+ 0000 ~                                    ld      a,$FF
   6+ 0000 ~                                    ld      (hl),a
   7+ 0000 ~                                    ret
   8+ 0000                                      ENDM
   9+ 0000              ;--------------------------------------------------------------------------------------------------------
  10+ 0000              SetFaceAHiddenMacro:        MACRO p?
  11+ 0000 ~            p?_SetFaceAHidden:    ld      hl,p?_BnkFaceVisArray
  12+ 0000 ~                                        add     hl,a
  13+ 0000 ~                                        xor     a
  14+ 0000 ~                                        ld      (hl),a
  15+ 0000 ~                                        ret
  16+ 0000                                          ENDM
  17+ 0000              ;--------------------------------------------------------------------------------------------------------
  18+ 0000              SetAllFacesVisibleMacro:MACRO p?
  19+ 0000 ~            p?_SetAllFacesVisible:     ld      a,(p?_FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or SS_BnkHullCopy+FaceCtX4Addr                                 ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
  20+ 0000 ~                                    srl     a                           ; else do explosion needs all vertices                                                  ;;;
  21+ 0000 ~                                    srl     a                           ;  /=4  TODO add this into blueprint data for speed                                                           ;;; For loop = 15 to 0
  22+ 0000 ~                                    ld      b,a                         ; b = Xreg = number of normals, faces
  23+ 0000 ~                                    ld      hl,p?_BnkFaceVisArray
  24+ 0000 ~                                    ld      a,$FF
  25+ 0000 ~            .SetAllFacesVisibleLoop:ld      (hl),a
  26+ 0000 ~                                    inc     hl
  27+ 0000 ~                                    djnz    .SetAllFacesVisibleLoop
  28+ 0000 ~                                    ret
  29+ 0000                                      ENDM
  30+ 0000              ;--------------------------------------------------------------------------------------------------------
  31+ 0000              SetAllFacesHiddenMacro: MACRO p?
  32+ 0000 ~            p?_SetAllFacesHidden:
  33+ 0000 ~                                    ld      a,(p?_FaceCtX4Addr)   ; (XX0),Y which is XX0[0C] or SS_BnkHullCopy+ShipHullFacesCount                           ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
  34+ 0000 ~                                    srl     a                           ; else do explosion needs all vertices                                                  ;;;
  35+ 0000 ~                                    srl     a                           ;  /=4                                                                                  ;;; For loop = 15 to 0
  36+ 0000 ~                                    ld      b,a                         ; b = Xreg = number of normals, faces
  37+ 0000 ~                                    ld      b,16
  38+ 0000 ~                                    ld      hl,p?_BnkFaceVisArray
  39+ 0000 ~                                    ld      a,$00
  40+ 0000 ~            .SetAllFacesHiddenLoop: ld      (hl),a
  41+ 0000 ~                                    inc     hl
  42+ 0000 ~                                    djnz    .SetAllFacesHiddenLoop
  43+ 0000 ~                                    ret
  44+ 0000                                      ENDM
  45+ 0000
# file closed: ./Universe/UniverseMacros/FaceVisibility.asm
 134  0000                                      include "./Universe/UniverseMacros/NormaliseTransMatMacro.asm"
# file opened: ./Universe/UniverseMacros/NormaliseTransMatMacro.asm
   1+ 0000              ;divdide by 16 using undocumented instrunctions
   2+ 0000              Norm256mulAdivQMacro:           MACRO p?
   3+ 0000 ~            p?_Norm256mulAdivQ:       ld      b,a
   4+ 0000 ~                                            ld      c,0
   5+ 0000 ~                                            ld      d,0
   6+ 0000 ~                                            ld      a,(varQ)
   7+ 0000 ~                                            ld      e,a
   8+ 0000 ~            ;Input: BC = Dividend, DE = Divisor, HL = 0
   9+ 0000 ~            ;Output: BC = Quotient, HL = Remainder
  10+ 0000 ~            p?_NormDIV16UNDOC:        ld      hl,0
  11+ 0000 ~                                            ld      a,b
  12+ 0000 ~                                            ld      b,16
  13+ 0000 ~            p?_NormDIV16UNDOCLOOP:    sll	    c		; unroll 16 times
  14+ 0000 ~                                            rla	    		; ...
  15+ 0000 ~                                            adc	    hl,hl		; ...
  16+ 0000 ~                                            sbc	    hl,de		; ...
  17+ 0000 ~                                            jr	    nc,p?_NormDIV16UNDOCSKIP		; ...
  18+ 0000 ~                                            add	    hl,de		; ...
  19+ 0000 ~                                            dec	    c		; ...
  20+ 0000 ~            p?_NormDIV16UNDOCSKIP:    djnz    p?_NormDIV16UNDOCLOOP
  21+ 0000 ~                                            ld      a,c
  22+ 0000 ~                                            ld      (varR),a
  23+ 0000 ~                                            ret
  24+ 0000 ~            p?_Norm256mulAdivQSignA:  ld      iyh,a
  25+ 0000 ~                                            ClearSignBitA
  26+ 0000 ~                                            call    p?_Norm256mulAdivQ              ; do 15 bit unsigned
  27+ 0000 ~                                            ld      a,iyh                       ; now correct R reg
  28+ 0000 ~                                            SignBitOnlyA
  29+ 0000 ~                                            or      c
  30+ 0000 ~                                            ld      (varR),a
  31+ 0000 ~                                            ret
  32+ 0000                                              ENDM
  33+ 0000
  34+ 0000              NormaliseTransMatMacro:         MACRO p?
  35+ 0000 ~            p?_NormaliseTransMat:     IFDEF LOGMATHS
  36+ 0000 ~                                                ld      hl,p?_BnkTransmatNosevZ+1     ; initialise loop
  37+ 0000 ~                                                ld      b,9                         ; total of 9 elements to transform
  38+ 0000 ~                                                MMUSelectMathsTables
  39+ 0000 ~            .LL21Loop:                          ld      d,(hl)
  40+ 0000 ~                                                dec     hl
  41+ 0000 ~                                                ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
  42+ 0000 ~                                                ShiftDELeft1                        ; De = DE * 2
  43+ 0000 ~                                                ld      a,d                         ; a = hi byte after shifting
  44+ 0000 ~                                                push	hl
  45+ 0000 ~                                                push	bc
  46+ 0000 ~                                                call    AEquAmul256Div197Log        ; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
  47+ 0000 ~                                                ;ld      a,c                         ; BFRDIV returns R also in l reg
  48+ 0000 ~                                                pop		bc
  49+ 0000 ~                                                pop		hl							; bc gets wrecked by BFRDIV
  50+ 0000 ~                                                ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
  51+ 0000 ~                                                dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
  52+ 0000 ~                                                djnz    .LL21Loop                   ; loop from 2zLo through to 0xLo
  53+ 0000 ~                                                MMUSelectROM0
  54+ 0000 ~                                                ret
  55+ 0000 ~                                            ELSE
  56+ 0000 ~                                                ld      hl,p?_BnkTransmatNosevZ+1         ; initialise loop
  57+ 0000 ~                                                ld      c,ConstNorm                 ; c = Q = norm = 197
  58+ 0000 ~                                                ld      a,c
  59+ 0000 ~                                                ld      (varQ),a                    ; set up varQ
  60+ 0000 ~                                                ld      b,9                         ; total of 9 elements to transform
  61+ 0000 ~            .LL21Loop:                          ld      d,(hl)
  62+ 0000 ~                                                dec     hl
  63+ 0000 ~                                                ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
  64+ 0000 ~                                                ShiftDELeft1                        ; De = DE * 2
  65+ 0000 ~                                                ld      a,d                         ; a = hi byte after shifting
  66+ 0000 ~                                                push	hl
  67+ 0000 ~                                                push	bc
  68+ 0000 ~                                                call    p?_Norm256mulAdivQ
  69+ 0000 ~                                                ;===call    RequAmul256divC				; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
  70+ 0000 ~                                                ld      a,c                         ; BFRDIV returns R also in l reg
  71+ 0000 ~                                                pop		bc
  72+ 0000 ~                                                pop		hl							; bc gets wrecked by BFRDIV
  73+ 0000 ~                                                ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
  74+ 0000 ~                                                dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
  75+ 0000 ~                                                djnz    .LL21Loop                   ; loop from 2zLo through to 0xLo
  76+ 0000 ~                                                ret
  77+ 0000 ~                                            ENDIF
  78+ 0000                                              ENDM
# file closed: ./Universe/UniverseMacros/NormaliseTransMatMacro.asm
 135  0000                                      include "./Universe/UniverseMacros/ScaleObjectDistanceMacro.asm"
# file opened: ./Universe/UniverseMacros/ScaleObjectDistanceMacro.asm
   1+ 0000              ScaleObjectDistanceMacro:               MACRO  p?
   2+ 0000 ~            ; ">ScaleObjectDistance, scales camera location and returns c = scaling factor (equiv of X reg)"
   3+ 0000 ~            p?_ScaleObjectDistance:           ld      a,(p?_QAddr)          ; Hull byte #18 normals scaled by 2^Q% DtProd^XX2  their comment   Dot product gives  normals' visibility in XX2
   4+ 0000 ~                                                    ld      c,a                         ; c = Q factor for scaling of normals
   5+ 0000 ~            ; scaling object distance
   6+ 0000 ~            .LL90:                                  ld      a,(p?_BnkDrawCam0zHi)         ; z_hi
   7+ 0000 ~                                                    ld      b,a                         ; z_hi (yReg)
   8+ 0000 ~                                                    ReturnIfAIsZero                     ; if zHi 0 test ifis object close/small, i.e. zhi already zero then we are done
   9+ 0000 ~            ; Loop dividing camera by 2 until zhi is 0 and updating scale factor
  10+ 0000 ~            .LL90Loop:                              inc     c                           ; LL90+3 \ repeat INWK z brought closer, take Qscale X up
  11+ 0000 ~                                                    ShiftMem16Right1 p?_BnkDrawCam0yLo    ; cam Y /= 2
  12+ 0000 ~                                                    ShiftMem16Right1 p?_BnkDrawCam0xLo    ; cam X /= 2
  13+ 0000 ~                                                    ShiftMem16Right1 p?_BnkDrawCam0zLo    ; cam Z /= 2
  14+ 0000 ~                                                    ld      a,h                         ; last shift will result in zhi adjusted into h reg.
  15+ 0000 ~                                                    JumpIfAIsNotZero .LL90Loop           ; loop until z hi = 0 this gives scalinging in c
  16+ 0000 ~                                                    ret
  17+ 0000                                                      ENDM
  18+ 0000
  19+ 0000
# file closed: ./Universe/UniverseMacros/ScaleObjectDistanceMacro.asm
 136  0000                                      INCLUDE "./Universe/UniverseMacros/XX12DefineMacro.asm"
# file opened: ./Universe/UniverseMacros/XX12DefineMacro.asm
   1+ 0000
   2+ 0000              XX12DefineMacro:    MACRO   p?
   3+ 0000 ~
   4+ 0000 ~            ;p?_XX1576                     DW  0
   5+ 0000 ~            p?_XX1210                     EQU p?_XX1576
   6+ 0000 ~            p?_XX12p1                     EQU p?_XX1210+1
   7+ 0000 ~            ;p?_XX12                       EQU p?_XX1210
   8+ 0000 ~
   9+ 0000 ~            ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------")
  10+ 0000 ~            ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines")
  11+ 0000 ~            p?_BnkXX12xLo                 DB  0               ; XX12+0
  12+ 0000 ~            p?_BnkXX12xSign               DB  0               ; XX12+1
  13+ 0000 ~            p?_BnkXX12yLo                 DB  0               ; XX12+2
  14+ 0000 ~            p?_BnkXX12ySign               DB  0               ; XX12+3
  15+ 0000 ~            p?_BnkXX12zLo                 DB  0               ; XX12+4
  16+ 0000 ~            p?_BnkXX12zSign               DB  0               ; XX12+5
  17+ 0000 ~            p?_XX12Save                   DS  6
  18+ 0000 ~            p?_XX12Save2                  DS  6
  19+ 0000 ~            p?_XX12                       equ p?_BnkXX12xLo
  20+ 0000 ~            p?_varXX12                    equ p?_BnkXX12xLo
  21+ 0000 ~            ; Repurposed XX12 when plotting lines")
  22+ 0000 ~            p?_BnkY2                      equ p?_XX12+0
  23+ 0000 ~            p?_Bnky2Lo                    equ p?_XX12+0
  24+ 0000 ~            p?_BnkY2Hi                    equ p?_XX12+1
  25+ 0000 ~            p?_BnkDeltaXLo                equ p?_XX12+2
  26+ 0000 ~            p?_BnkDeltaXHi                equ p?_XX12+3
  27+ 0000 ~            p?_BnkDeltaYLo                equ p?_XX12+4
  28+ 0000 ~            p?_BnkDeltaYHi                equ p?_XX12+5
  29+ 0000 ~            p?_BnkGradient                equ p?_XX12+2
  30+ 0000 ~            p?_BnkTemp1                   equ p?_XX12+2
  31+ 0000 ~            p?_BnkTemp1Lo                 equ p?_XX12+2
  32+ 0000 ~            p?_BnkTemp1Hi                 equ p?_XX12+3
  33+ 0000 ~            p?_BnkTemp2                   equ p?_XX12+3
  34+ 0000 ~            p?_BnkTemp2Lo                 equ p?_XX12+3
  35+ 0000 ~            p?_BnkTemp2Hi                 equ p?_XX12+4
  36+ 0000                                                  ENDM
  37+ 0000
  38+ 0000              XX12DotOneRowMacro:                 MACRO p?
  39+ 0000 ~            p?_XX12DotOneRow:
  40+ 0000 ~            p?_XX12CalcX:                 N0equN1byN2div256 varT, (hl), (p?_BnkXScaled)        ; T = (hl) * regXX15fx /256
  41+ 0000 ~                                                inc     hl                                                  ; move to sign byte
  42+ 0000 ~            .XX12CalcXSign:                     AequN1xorN2 p?_BnkXScaledSign,(hl)           ;
  43+ 0000 ~                                                ld      (varS),a                                            ; Set S to the sign of x_sign * sidev_x
  44+ 0000 ~                                                inc     hl
  45+ 0000 ~            .XX12CalcY:                         N0equN1byN2div256 varQ, (hl),(p?_BnkYScaled)          ; Q = XX16 * XX15 /256 using varQ to hold regXX15fx
  46+ 0000 ~                                                ldCopyByte varT,varR                                        ; R = T =  |sidev_x| * x_lo / 256
  47+ 0000 ~                                                inc     hl
  48+ 0000 ~                                                AequN1xorN2 p?_BnkYScaledSign,(hl)                          ; Set A to the sign of y_sign * sidev_y
  49+ 0000 ~            ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
  50+ 0000 ~            .STequSRplusAQ                       push    hl
  51+ 0000 ~                                                call    baddll38                                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
  52+ 0000 ~                                                pop     hl
  53+ 0000 ~                                                ld      (varT),a                                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
  54+ 0000 ~                                                inc     hl
  55+ 0000 ~            .XX12CalcZ:                         N0equN1byN2div256 varQ,(hl),(p?_BnkZScaled)           ; Q = |sidev_z| * z_lo / 256
  56+ 0000 ~                                                ldCopyByte varT,varR                                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
  57+ 0000 ~                                                inc     hl
  58+ 0000 ~                                                AequN1xorN2 p?_BnkZScaledSign,(hl)                    ; A = sign of z_sign * sidev_z
  59+ 0000 ~            ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
  60+ 0000 ~                                                call    baddll38                                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
  61+ 0000 ~            ; Now we exit with A = result S = Sign
  62+ 0000 ~                                                ret
  63+ 0000                                                  ENDM
  64+ 0000
  65+ 0000
  66+ 0000              CopyXX12ScaledToXX18Macro:      MACRO    p?
  67+ 0000 ~            p?_CopyXX12ScaledToXX18:
  68+ 0000 ~            p?_CopyResultToDrawCam:       ld      hl, p?_XX12
  69+ 0000 ~                                                ld      de, p?_XX18
  70+ 0000 ~                                                ldi    ; X12+0 => XX18+0  Set XX18(2 0) = dot_sidev
  71+ 0000 ~                                                inc de ; skip to XX18+2 as it will be on XX18+1
  72+ 0000 ~                                                ldi    ; XX12+1 => XX18+2
  73+ 0000 ~                                                ldi    ; XX12+2 => XX18+3 Set XX12+1 => XX18+2
  74+ 0000 ~                                                inc de ; skip to XX18+5 as it will be on XX18+4
  75+ 0000 ~                                                ldi    ; XX12+3 => XX18+5
  76+ 0000 ~                                                ldi    ; XX12+4 => XX18+6 Set XX18(8 6) = dot_nosev
  77+ 0000 ~                                                inc de ; skip to XX18+8 as it will be on XX18+7
  78+ 0000 ~                                                ldi    ; XX12+5 => XX18+8
  79+ 0000 ~                                                ret
  80+ 0000                                              ENDM
  81+ 0000
  82+ 0000              ;OLD VERSION?CopyXX12ScaledToXX18Macro:          MACRO p?
  83+ 0000              ;OLD VERSION?p?_CopyXX12ScaledToXX18:
  84+ 0000              ;OLD VERSION?p?_CopyResultToDrawCam:
  85+ 0000              ;OLD VERSION?                                    ldCopyByte p?_XX12         ,p?_XX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
  86+ 0000              ;OLD VERSION?                                    ldCopyByte p?_XX12+1       ,p?_XX18+2           ; XX12+1 => XX18+2
  87+ 0000              ;OLD VERSION?                                    ldCopyByte p?_XX12+2       ,p?_XX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
  88+ 0000              ;OLD VERSION?                                    ldCopyByte p?_XX12+3       ,p?_XX18+5           ; XX12+3 => XX18+5
  89+ 0000              ;OLD VERSION?                                    ldCopyByte p?_XX12+4       ,p?_XX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
  90+ 0000              ;OLD VERSION?                                    ldCopyByte p?_XX12+5       ,p?_XX18+8           ; XX12+5 => XX18+8
  91+ 0000              ;OLD VERSION?                                    ret
  92+ 0000              ;OLD VERSION?                                    ENDM
  93+ 0000
  94+ 0000              XX12EquXX15DotProductXX16Macro:     MACRO p?
  95+ 0000 ~            p?_XX12EquXX15DotProductXX16: ld      bc,0                                ; LDX, LDY 0
  96+ 0000 ~                                                ld      hl,p?_BnkTransmatSidevX
  97+ 0000 ~                                                call    p?_XX12DotOneRow
  98+ 0000 ~                                                ld      (p?_BnkXX12xLo),a
  99+ 0000 ~                                                ld      a,(varS)
 100+ 0000 ~                                                ld      (p?_BnkXX12xSign),a
 101+ 0000 ~                                                ld      hl,p?_BnkTransmatRoofvX
 102+ 0000 ~                                                call    p?_XX12DotOneRow
 103+ 0000 ~                                                ld      (p?_BnkXX12yLo),a
 104+ 0000 ~                                                ld      a,(varS)
 105+ 0000 ~                                                ld      (p?_BnkXX12ySign),a
 106+ 0000 ~                                                ld      hl,p?_BnkTransmatNosevX
 107+ 0000 ~                                                call    p?_XX12DotOneRow
 108+ 0000 ~                                                ld      (p?_BnkXX12zLo),a
 109+ 0000 ~                                                ld      a,(varS)
 110+ 0000 ~                                                ld      (p?_BnkXX12zSign),a
 111+ 0000 ~                                                ret
 112+ 0000                                                  ENDM
 113+ 0000
 114+ 0000              CopyXX12toXX15Macro:                MACRO p?
 115+ 0000 ~            p?_CopyXX12toXX15:            ldCopyByte  p?_BnkXX12xLo     ,p?_BnkXScaled        ; xlo
 116+ 0000 ~                                                ldCopyByte  p?_BnkXX12xSign   ,p?_BnkXScaledSign    ; xsg
 117+ 0000 ~                                                ldCopyByte  p?_BnkXX12yLo     ,p?_BnkYScaled        ; xlo
 118+ 0000 ~                                                ldCopyByte  p?_BnkXX12ySign   ,p?_BnkYScaledSign    ; xsg
 119+ 0000 ~                                                ldCopyByte  p?_BnkXX12zLo     ,p?_BnkZScaled        ; xlo
 120+ 0000 ~                                                ldCopyByte  p?_BnkXX12zSign   ,p?_BnkZScaledSign    ; xsg
 121+ 0000 ~                                                ret
 122+ 0000                                                  ENDM
 123+ 0000
 124+ 0000
 125+ 0000              CopyXX12ToScaledMacro:              MACRO p?
 126+ 0000 ~            p?_CopyXX12ToScaled:
 127+ 0000 ~            p?_CopyResultToScaled:        ldCopyByte  p?_XX12+0,p?_BnkXScaled      ; xnormal lo
 128+ 0000 ~                                                ldCopyByte  p?_XX12+2,p?_BnkYScaled      ; ynormal lo
 129+ 0000 ~                                                ldCopyByte  p?_XX12+4,p?_BnkZScaled      ; znormal lo and leaves a holding zscaled normal
 130+ 0000 ~                                                ret
 131+ 0000                                                  ENDM
 132+ 0000
 133+ 0000              CopyFaceToXX12Macro:                MACRO p?
 134+ 0000 ~            p?_CopyFaceToXX12:            ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
 135+ 0000 ~                                                ld      b,a                         ; save sign bits to b
 136+ 0000 ~                                                and     SignOnly8Bit
 137+ 0000 ~                                                ld      (p?_BnkXX12xSign),a           ; write Sign bits to x sign                                                            ;;;
 138+ 0000 ~                                                ld      a,b
 139+ 0000 ~                                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
 140+ 0000 ~                                                ld      b,a
 141+ 0000 ~                                                and     SignOnly8Bit
 142+ 0000 ~                                                ld      (p?_BnkXX12ySign),a           ;                                                                                      ;;;
 143+ 0000 ~                                                ld      a,b
 144+ 0000 ~                                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
 145+ 0000 ~                                                and     SignOnly8Bit
 146+ 0000 ~                                                ld      (p?_BnkXX12zSign),a           ;                                                                                      ;;;
 147+ 0000 ~                                                inc     hl                          ; move to X ccord
 148+ 0000 ~                                                ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
 149+ 0000 ~                                                ld      (p?_BnkXX12xLo),a                                                                                                    ;;;
 150+ 0000 ~                                                inc     hl                                                                                                                 ;;;
 151+ 0000 ~                                                ld      a,(hl)                      ;                                                                                      ;;;
 152+ 0000 ~                                                ld      (p?_BnkXX12yLo),a                                                                                                    ;;;
 153+ 0000 ~                                                inc     hl                                                                                                                 ;;;
 154+ 0000 ~                                                ld      a,(hl)                      ;                                                                                      ;;;
 155+ 0000 ~                                                ld      (p?_BnkXX12zLo),a
 156+ 0000 ~                                                ret
 157+ 0000                                                  ENDM
 158+ 0000
 159+ 0000              CopyXX12toXX18Macro:                MACRO    p?
 160+ 0000 ~            p?_CopyXX12toXX18:            ld      hl, p?_BnkXX12xLo
 161+ 0000 ~                                                ld      de, p?_XX18
 162+ 0000 ~                                                ldi      ; xlo
 163+ 0000 ~                                                ldi      ; xsg
 164+ 0000 ~                                                ldi      ; xlo
 165+ 0000 ~                                                ldi      ; xsg
 166+ 0000 ~                                                ldi      ; xlo
 167+ 0000 ~                                                ldi      ; xsg
 168+ 0000 ~                                                ret
 169+ 0000                                                  ENDM
 170+ 0000
 171+ 0000              DotProductXX12XX15Macro:            MACRO  p?
 172+ 0000 ~            p?_DotProductXX12XX15:        ld          a,(p?_BnkXX12xLo)         ; Use e as var Q for xnormal lo
 173+ 0000 ~                                                JumpIfAIsZero .dotxskipzero
 174+ 0000 ~                                                ld          e,a
 175+ 0000 ~                                                ld          a,(p?_BnkXScaled)         ; use d as XX12 world xform x, e = norm x
 176+ 0000 ~                                                ld          d,a                     ; de = xx12 x signed
 177+ 0000 ~                                                JumpIfAIsZero .dotxskipzero
 178+ 0000 ~                                                mul
 179+ 0000 ~                                                ld          b,d                     ; b = result
 180+ 0000 ~                                                ld          a,(p?_BnkXX12xSign)
 181+ 0000 ~                                                ld          hl,p?_BnkXScaledSign
 182+ 0000 ~                                                xor         (hl)
 183+ 0000 ~                                                and         $80                     ; so sign bit only
 184+ 0000 ~                                                ld          iyh ,a                   ; we actually need to preserve sign in iyh here
 185+ 0000 ~                                                jp          .dotmuly
 186+ 0000 ~            .dotxskipzero:                      xor         a
 187+ 0000 ~                                                ld          b,a
 188+ 0000 ~                                                ld          iyh,a
 189+ 0000 ~            ; now we have b = XX12 x &d  norm x signed
 190+ 0000 ~            .dotmuly:                           ld          a,(p?_BnkXX12yLo)
 191+ 0000 ~                                                JumpIfAIsZero .dotyskipzero
 192+ 0000 ~                                                ld          e,a
 193+ 0000 ~                                                ld          a,(p?_BnkYScaled)         ; XX15+2
 194+ 0000 ~                                                JumpIfAIsZero .dotyskipzero
 195+ 0000 ~                                                ld          d,a                     ; de = xx12 x signed
 196+ 0000 ~                                                mul
 197+ 0000 ~                                                ld          c,d                     ; c = result
 198+ 0000 ~                                                ld          ixl,c
 199+ 0000 ~                                                ld          a,(p?_BnkXX12ySign)       ; A = ysg
 200+ 0000 ~                                                ld          hl, p?_BnkYScaledSign     ; a= y sign XOR Y scaled sign
 201+ 0000 ~                                                xor         (hl)                    ; XX15+3
 202+ 0000 ~                                                and         $80                     ; do b = x mul c = y mul, iyh = sign for b and a = sign for c
 203+ 0000 ~                                                ld          ixh,a
 204+ 0000 ~                                                jp          .dotaddxy
 205+ 0000 ~            .dotyskipzero:                      xor         a
 206+ 0000 ~                                                ld          c,a
 207+ 0000 ~                                                ld          ixh,a
 208+ 0000 ~            ; Optimise later as this is 16 bit
 209+ 0000 ~            .dotaddxy:                          ld          h,0                     ;
 210+ 0000 ~                                                ld          l,b                     ; hl = xlo + x scaled
 211+ 0000 ~                                                ld          d,0                     ;
 212+ 0000 ~                                                ld          e,c                     ; de = ylo + yscaled
 213+ 0000 ~                                                ld          b,iyh                   ; b = sign of xlo + xscaled
 214+ 0000 ~                                                ld          c,a                     ; c = sign of ylo + yscaled
 215+ 0000 ~                                                MMUSelectMathsBankedFns
 216+ 0000 ~                                                call ADDHLDESignBC                  ; so now hl = result so will push sign to h
 217+ 0000 ~                                                ld          b,a                     ; b = resultant sign , hl = add so far
 218+ 0000 ~                                                ld          a,(p?_BnkXX12zLo)         ;
 219+ 0000 ~                                                JumpIfAIsZero .dotzskipzero
 220+ 0000 ~                                                ld          e,a                     ;
 221+ 0000 ~                                                ld          a,(p?_BnkZScaled)         ;
 222+ 0000 ~                                                JumpIfAIsZero .dotzskipzero
 223+ 0000 ~                                                ld          d,a
 224+ 0000 ~                                                mul
 225+ 0000 ~                                                push        hl                      ; save prev result
 226+ 0000 ~                                                ld          a,(p?_BnkZScaledSign)
 227+ 0000 ~                                                ld          hl, p?_BnkXX12zSign       ; XX15+5
 228+ 0000 ~                                                xor         (hl)                    ; hi sign
 229+ 0000 ~                                                and         $80                     ; a = sign of multiply
 230+ 0000 ~                                                ld          c,a                     ; c = sign of z lo & z scaled
 231+ 0000 ~                                                pop         hl
 232+ 0000 ~                                                ld          e,d
 233+ 0000 ~                                                ld          d,0
 234+ 0000 ~                                                MMUSelectMathsBankedFns
 235+ 0000 ~                                                call ADDHLDESignBC
 236+ 0000 ~                                                ld          (varS),a
 237+ 0000 ~                                                ld          a,l
 238+ 0000 ~                                                ret                                 ; returns with A = value, varS = sign
 239+ 0000 ~            ; if we got here then z was zero so no component so just tidy up from last add
 240+ 0000 ~            .dotzskipzero:                      ld          a,b
 241+ 0000 ~                                                ld          (varS),a
 242+ 0000 ~                                                ld          a,l
 243+ 0000 ~                                                ret
 244+ 0000                                                  ENDM
 245+ 0000
 246+ 0000              TransposeXX12ByShipToXX15Macro:     MACRO       p?
 247+ 0000 ~            p?_TransposeXX12ByShipToXX15: ld  hl,(p?_BnkXX12xLo)					; get X into HL
 248+ 0000 ~                                                ld		a,h			                        ; get XX12 Sign
 249+ 0000 ~                                                and		$80									; check sign bit on high byte
 250+ 0000 ~                                                ld		b,a									; and put it in of 12xlo in b
 251+ 0000 ~                                                ;110921 debugld      h,0
 252+ 0000 ~                                                ld      a,h
 253+ 0000 ~                                                and     $7F
 254+ 0000 ~                                                ld      h,a
 255+ 0000 ~                                                ;110921 debugld      h,0
 256+ 0000 ~                                                ld		de,(p?_Bnkxlo)						;
 257+ 0000 ~                                                ld		a,(p?_Bnkxsgn)						; get Ship Pos (low,high,sign)
 258+ 0000 ~                                                and		$80									; make sure we only have bit 7
 259+ 0000 ~                                                ld		c,a									; and put sign of unkxsgn c
 260+ 0000 ~                                                MMUSelectMathsBankedFns
 261+ 0000 ~                                                call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
 262+ 0000 ~                                                or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
 263+ 0000 ~                                                ld		h,a
 264+ 0000 ~                                                ld		(p?_BnkXScaled),hl					; now write it out to XX15 X pos
 265+ 0000 ~            ; ..................................
 266+ 0000 ~                                                ld		hl,(p?_BnkXX12yLo)					; Repeat above for Y coordinate
 267+ 0000 ~                                                ld		a,h
 268+ 0000 ~                                                and		$80
 269+ 0000 ~                                                ld		b,a
 270+ 0000 ~                                                ;110921 debugld      h,0
 271+ 0000 ~                                                ld      a,h
 272+ 0000 ~                                                and     $7F
 273+ 0000 ~                                                ld      h,a
 274+ 0000 ~                                                ;110921 debugld      h,0
 275+ 0000 ~                                                ld		de,(p?_Bnkylo)
 276+ 0000 ~                                                ld		a,(p?_Bnkysgn)
 277+ 0000 ~                                                and		$80									; make sure we only have bit 7
 278+ 0000 ~                                                ld		c,a
 279+ 0000 ~                                                MMUSelectMathsBankedFns
 280+ 0000 ~                                                call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
 281+ 0000 ~                                                or		h									; combine sign in A with H
 282+ 0000 ~                                                ld		h,a
 283+ 0000 ~                                                ld		(p?_BnkYScaled),hl
 284+ 0000 ~            ; ..................................
 285+ 0000 ~                                                ld		hl,(p?_BnkXX12zLo)					; and now repeat for Z cooord
 286+ 0000 ~                                                ld		a,h
 287+ 0000 ~                                                and		$80
 288+ 0000 ~                                                ld		b,a
 289+ 0000 ~                                                ;110921 debugld      h,0
 290+ 0000 ~                                                ld      a,h
 291+ 0000 ~                                                and     $7F
 292+ 0000 ~                                                ld      h,a
 293+ 0000 ~                                                ;110921 debugld      h,0
 294+ 0000 ~                                                ld		de,(p?_Bnkzlo)
 295+ 0000 ~                                                ld		a,(p?_Bnkzsgn)
 296+ 0000 ~                                                and		$80									; make sure we only have bit 7
 297+ 0000 ~                                                ld		c,a
 298+ 0000 ~                                                MMUSelectMathsBankedFns
 299+ 0000 ~                                                call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
 300+ 0000 ~                                                or		h									; combine sign in A with H
 301+ 0000 ~                                                ld		h,a
 302+ 0000 ~                                                bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
 303+ 0000 ~                                                jr		nz,.ClampZto4                        ; result was negative so we need to clamp to 4
 304+ 0000 ~                                                and     $7F                                 ; a = value unsigned
 305+ 0000 ~                                                jr      nz,.NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
 306+ 0000 ~                                                ld      a,l                                 ; get low byte now
 307+ 0000 ~                                                JumpIfALTNusng 4,.ClampZto4					; if its < 4 then fix at 4
 308+ 0000 ~            .NoClampZto4:                       ld		(p?_BnkZScaled),hl					; hl = signed calculation and > 4
 309+ 0000 ~                                                ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
 310+ 0000 ~                                                ld      (varT),a
 311+ 0000 ~                                                ld		a,h
 312+ 0000 ~                                                ld      (varU),a
 313+ 0000 ~                                                ret
 314+ 0000 ~            ; This is where we limit 4 to a minimum of 4
 315+ 0000 ~            .ClampZto4:		         		    ld		hl,4
 316+ 0000 ~                                                ld		(p?_BnkZScaled),hl; BODGE FOR NOW
 317+ 0000 ~                                                ld		a,l
 318+ 0000 ~                                                ld      (varT),a                            ;                                                                           ;;;
 319+ 0000 ~                                                ld		a,h
 320+ 0000 ~                                                ld      (varU),a 						; compatibility for now
 321+ 0000 ~                                                ret
 322+ 0000                                                  ENDM
 323+ 0000
 324+ 0000              TransposeXX12NodeToXX15Macro        MACRO p?
 325+ 0000 ~            p?_TransposeXX12NodeToXX15:   ldCopyByte  p?_Bnkxsgn,p?_BnkXPointSign           ; p?_BnkXSgn => XX15+2 x sign
 326+ 0000 ~                                                ld          bc,(p?_BnkXX12xLo)                   ; c = lo, b = sign   XX12XLoSign
 327+ 0000 ~                                                xor         b                                   ; a = p?_BnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 328+ 0000 ~                                                jp          m,.NodeNegativeX                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 329+ 0000 ~            ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 330+ 0000 ~            .NodeXPositiveX:                    ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
 331+ 0000 ~                                                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
 332+ 0000 ~                                                ld          hl,(p?_Bnkxlo)                       ; hl = XX1 p?_BnkxLo
 333+ 0000 ~                                                ld          h,0                                 ; but we don;t want the sign
 334+ 0000 ~                                                add         hl,bc                               ; its a 16 bit add
 335+ 0000 ~                                                ld          (p?_BnkXPoint),hl                    ; And written to XX15 0,1
 336+ 0000 ~                                                xor         a                                   ; we want to write 0 as sign bit (not in original code)
 337+ 0000 ~                                                ld          (p?_BnkXPointSign),a
 338+ 0000 ~                                                jp          .FinishedThisNodeX
 339+ 0000 ~            ; If we get here then _sign and vertv_ have different signs so do subtract
 340+ 0000 ~            .NodeNegativeX:
 341+ 0000 ~            .LL52X:                             ld          hl,(p?_Bnkxlo)                       ; Coord
 342+ 0000 ~                                                ld          bc,(p?_BnkXX12xLo)                   ; XX12
 343+ 0000 ~                                                ld          b,0                                 ; XX12 lo byte only
 344+ 0000 ~                                                sbc         hl,bc                               ; hl = p?_Bnkx - p?_BnkXX12xLo
 345+ 0000 ~                                                jp          p,.SetAndMopX                       ; if result is positive skip to write back
 346+ 0000 ~            ; If we get here the result is 2'c compliment so we reverse it and flip sign
 347+ 0000 ~            .NodeXNegSignChangeX:               call        negate16hl                          ; Convert back to positive and flip sign
 348+ 0000 ~                                                ld          a,(p?_BnkXPointSign)                 ; XX15+2
 349+ 0000 ~                                                xor         $80                                 ; Flip bit 7
 350+ 0000 ~                                                ld          (p?_BnkXPointSign),a                 ; XX15+2
 351+ 0000 ~            .SetAndMopX:                        ld          (p?_Bnkxlo),hl                       ; XX15+0
 352+ 0000 ~            .FinishedThisNodeX:
 353+ 0000 ~            .LL53:                              ldCopyByte  p?_Bnkysgn,p?_BnkYPointSign           ; p?_BnkXSgn => XX15+2 x sign
 354+ 0000 ~                                                ld          bc,(p?_BnkXX12yLo)                   ; c = lo, b = sign   XX12XLoSign
 355+ 0000 ~                                                xor         b                                   ; a = p?_BnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 356+ 0000 ~                                                jp          m,.NodeNegativeY                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 357+ 0000 ~            ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 358+ 0000 ~            .NodeXPositiveY:                    ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
 359+ 0000 ~                                                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
 360+ 0000 ~                                                ld          hl,(p?_Bnkylo)                       ; hl = XX1 p?_BnkxLo
 361+ 0000 ~                                                ld          h,0                                 ; but we don;t want the sign
 362+ 0000 ~                                                add         hl,bc                               ; its a 16 bit add
 363+ 0000 ~                                                ld          (p?_BnkYPoint),hl                    ; And written to XX15 0,1
 364+ 0000 ~                                                xor         a                                   ; we want to write 0 as sign bit (not in original code)
 365+ 0000 ~                                                ld          (p?_BnkXPointSign),a
 366+ 0000 ~                                                jp          .FinishedThisNodeY
 367+ 0000 ~            ; If we get here then _sign and vertv_ have different signs so do subtract
 368+ 0000 ~            .NodeNegativeY:
 369+ 0000 ~            .LL52Y:                             ld          hl,(p?_Bnkylo)                       ; Coord
 370+ 0000 ~                                                ld          bc,(p?_BnkXX12yLo)                   ; XX12
 371+ 0000 ~                                                ld          b,0                                 ; XX12 lo byte only
 372+ 0000 ~                                                sbc         hl,bc                               ; hl = p?_Bnkx - p?_BnkXX12xLo
 373+ 0000 ~                                                jp          p,.SetAndMopY                       ; if result is positive skip to write back
 374+ 0000 ~            ; If we get here the result is 2'c compliment so we reverse it and flip sign
 375+ 0000 ~            .NodeXNegSignChangeY:               call        negate16hl                          ; Convert back to positive and flip sign
 376+ 0000 ~                                                ld          a,(p?_BnkYPointSign)                 ; XX15+2
 377+ 0000 ~                                                xor         $80                                 ; Flip bit 7
 378+ 0000 ~                                                ld          (p?_BnkYPointSign),a                 ; XX15+2
 379+ 0000 ~            .SetAndMopY:                        ld          (p?_Bnkylo),hl                       ; XX15+0
 380+ 0000 ~            .FinishedThisNodeY:
 381+ 0000 ~            .TransposeZ:                                             ; Both y signs arrive here, Onto z                                          ;;;
 382+ 0000 ~            .LL55:                              ld          a,(p?_BnkXX12zSign)                   ; XX12+5    \ rotated znode hi                                              ;;;
 383+ 0000 ~                                                JumpOnBitSet a,7,.NegativeNodeZ                    ; LL56 -ve Z node                                                           ;;;
 384+ 0000 ~                                                ld          a,(p?_BnkXX12zLo)                     ; XX12+4 \ rotated znode lo                                                 ;;;
 385+ 0000 ~                                                ld          hl,(p?_Bnkzlo)                        ; INWK+6    \ zorg lo                                                       ;;;
 386+ 0000 ~                                                add         hl,a                                ; hl = INWKZ + XX12z                                                        ;;;
 387+ 0000 ~                                                ld          a,l
 388+ 0000 ~                                                ld          (varT),a                            ;                                                                           ;;;
 389+ 0000 ~                                                ld          a,h
 390+ 0000 ~                                                ld          (varU),a                            ; now z = hl or U(hi).T(lo)                                                 ;;;
 391+ 0000 ~                                                ret                                             ; LL57  \ Node additions done, z = U.T                                      ;;;
 392+ 0000 ~            ; Doing additions and scalings for each visible node around here                                                                    ;;;
 393+ 0000 ~            .NegativeNodeZ:                                          ; Enter XX12+5 -ve Z node case  from above                                  ;;;
 394+ 0000 ~            .LL56:                              ld          hl,(p?_Bnkzlo)                        ; INWK+6 \ z org lo                                                         ;;;
 395+ 0000 ~                                                ld          bc,(p?_BnkXX12zLo)                    ; XX12+4    \ rotated z node lo                                                 ......................................................
 396+ 0000 ~                                                ld          b,0                                 ; upper byte will be garbage
 397+ 0000 ~                                                ClearCarryFlag
 398+ 0000 ~                                                sbc         hl,bc                               ; 6502 used carry flag compliment
 399+ 0000 ~                                                ld          a,l
 400+ 0000 ~                                                ld          (varT),a                            ; t = result low
 401+ 0000 ~                                                ld          a,h
 402+ 0000 ~                                                ld          (varU),a                            ; u = result high
 403+ 0000 ~                                                jp          po,.MakeNodeClose                   ; no overflow to parity would be clear
 404+ 0000 ~            .LL56Overflow:                      cp          0                                   ; is varU 0?
 405+ 0000 ~                                                ret          nz; was jp nz which woudl have left stack with ret address,.NodeAdditionsDone               ; Enter Node additions done, UT=z
 406+ 0000 ~                                                ld          a,(varT)                            ; T \ restore z lo
 407+ 0000 ~                                                ReturnIfAGTENusng 4                              ; >= 4 ? zlo big enough, Enter Node additions done.
 408+ 0000 ~            .MakeNodeClose: ; else make node close
 409+ 0000 ~            .LL140:                             xor         a                                   ; hi This needs tuning to use a 16 bit variable
 410+ 0000 ~                                                ld          (varU),a                            ; U
 411+ 0000 ~                                                ld          a,4                                 ; lo
 412+ 0000 ~                                                ld          (varT),a                            ; T
 413+ 0000 ~                                                ret
 414+ 0000                                                  ENDM
 415+ 0000
 416+ 0000
 417+ 0000
 418+ 0000                                                  ; We enter here with hl pointing at XX16 and bc = XX15 value
 419+ 0000              ; so xx12 = XX15 * XX16 row
 420+ 0000              XX12NodeDotOrientationMacro:        MACRO       p?
 421+ 0000 ~
 422+ 0000 ~            p?_XX12ProcessOneRow:
 423+ 0000 ~            p?_XX12CalcXCell:             ld		bc,(p?_BnkXScaled)
 424+ 0000 ~                                                ld		e,(hl)								    ; get orientation ZX
 425+ 0000 ~                                                inc		hl
 426+ 0000 ~                                                ld		d,(hl)                                  ; so now e = xx16 value d = xx16 sign
 427+ 0000 ~                                                ld		a,d
 428+ 0000 ~                                                xor     b
 429+ 0000 ~                                                and		SignOnly8Bit                            ; a = XX 16 sign
 430+ 0000 ~                                                ld		ixh,a								    ; orientation sign to ixh
 431+ 0000 ~                                                ld		a,b                                     ; now make bc abs bc
 432+ 0000 ~                                                and		SignMask8Bit
 433+ 0000 ~                                                ld		b,a                                     ; bc = abs(bc) now
 434+ 0000 ~                                                push	hl
 435+ 0000 ~                                                ld      d,0                                     ; d = value
 436+ 0000 ~                                                ld		h,b
 437+ 0000 ~                                                ld		l,c
 438+ 0000 ~                                                call	mulDEbyHL							    ; hl = |orientation| * |x pos)
 439+ 0000 ~                                                ld		(XX12PVarResult1),hl				    ; T = 16 bit result, we only want to use high byte later
 440+ 0000 ~                                                ld		a,ixh
 441+ 0000 ~                                                ld		(XX12PVarSign1),a					    ; S = sign  not sign 1 and 2 are reversed in memory so that fetchign back will put 1 in high byte 2 in low byte
 442+ 0000 ~                                                pop		hl
 443+ 0000 ~            .XX12CalcYCell:                     ld		bc,(p?_BnkYScaled)
 444+ 0000 ~                                                inc		hl
 445+ 0000 ~                                                ld		e,(hl)							    	; get orientation ZX
 446+ 0000 ~                                                inc		hl
 447+ 0000 ~                                                ld		d,(hl)
 448+ 0000 ~                                                ld		a,d
 449+ 0000 ~                                                xor     b
 450+ 0000 ~                                                and		SignOnly8Bit
 451+ 0000 ~                                                ld		ixh,a								    ; XX16 orientation sign to ixh
 452+ 0000 ~                                                ld		a,b                                     ; now make bc abs bc
 453+ 0000 ~                                                and		SignMask8Bit
 454+ 0000 ~                                                ld		b,a                                     ; bc = abs(bc) now
 455+ 0000 ~                                                push	hl
 456+ 0000 ~                                                ld      d,0                                     ; d = value
 457+ 0000 ~                                                ld		h,b
 458+ 0000 ~                                                ld		l,c
 459+ 0000 ~                                                call	mulDEbyHL							    ; hl = |orientation| * |x pos)
 460+ 0000 ~                                                ld		(XX12PVarResult2),hl				    ; T = 16 bit result
 461+ 0000 ~                                                ld		a,ixh
 462+ 0000 ~                                                ld		(XX12PVarSign2),a					    ; S = sign
 463+ 0000 ~                                                pop		hl
 464+ 0000 ~            .XX12CalcZCell:                     ld		bc,(p?_BnkZScaled)
 465+ 0000 ~                                                inc		hl
 466+ 0000 ~                                                ld		e,(hl)								    ; get orientation ZX
 467+ 0000 ~                                                inc		hl
 468+ 0000 ~                                                ld		d,(hl)
 469+ 0000 ~                                                ld		a,d
 470+ 0000 ~                                                xor     b
 471+ 0000 ~                                                and		SignOnly8Bit
 472+ 0000 ~                                                ld		ixh,a								    ; orientation sign to ixh
 473+ 0000 ~                                                ld		a,b                                     ; now make bc abs bc
 474+ 0000 ~                                                and		SignMask8Bit
 475+ 0000 ~                                                ld		b,a                                     ; bc = abs(bc) now
 476+ 0000 ~                                                ld      d,0                                     ; d = value
 477+ 0000 ~                                                ld		h,b
 478+ 0000 ~                                                ld		l,c
 479+ 0000 ~                                                call	mulDEbyHL							    ; hl = |orientation| * |x pos)
 480+ 0000 ~                                                ld		(XX12PVarResult3),hl				    ; T = 16 bit result
 481+ 0000 ~                                                ld		a,ixh
 482+ 0000 ~                                                ld		(XX12PVarSign3),a					    ; S = sign
 483+ 0000 ~            .XX12CalcCellResult:                ld		hl,(XX12PVarResult1)				    ; X Cell Result
 484+ 0000 ~                                                ld		de,(XX12PVarResult2)				    ; Y Cell Result
 485+ 0000 ~                                                ld		bc,(XX12PVarSign2)					    ; b = var 1 result sign c = var 2 result signs
 486+ 0000 ~            .XX12MSBOnly:                       ld		l,h									    ; now move results into lower byte so / 256
 487+ 0000 ~                                                ld		e,d									    ; for both results
 488+ 0000 ~                                                xor		a									    ;
 489+ 0000 ~                                                ld		h,a									    ;
 490+ 0000 ~                                                ld		d,a									    ; so set high byte to 0
 491+ 0000 ~                                                MMUSelectMathsBankedFns
 492+ 0000 ~                                                call	ADDHLDESignBC                           ;  XX12ProcessCalcHLPlusDESignBC		; returns with HL = result1 + result 2 signed in a
 493+ 0000 ~                                                ld		b,a									    ; move sign into b ready for next calc
 494+ 0000 ~                                                ld		a,(XX12PVarSign3)					    ; result of the calcZ cell
 495+ 0000 ~                                                ld		c,a									    ; goes into c to align with DE
 496+ 0000 ~                                                ld		de,(XX12PVarResult3)				    ; now add result to Result 3
 497+ 0000 ~                                                ld		e,d                                     ; d = result /256
 498+ 0000 ~                                                ld		d,0									    ; and only us high byte
 499+ 0000 ~                                                MMUSelectMathsBankedFns
 500+ 0000 ~                                                call	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; returns with HL = result and a = sign
 501+ 0000 ~                                                ret											    ; hl = result, a = sign
 502+ 0000 ~            								    ; hl = result, a = sign
 503+ 0000 ~
 504+ 0000 ~            ; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 505+ 0000 ~            ;...X cell
 506+ 0000 ~            p?_XX12EquNodeDotTransMat:    ld		hl,p?_BnkTransInvRow0x0     			; process orientation matrix row 0
 507+ 0000 ~                                                call    XX12ProcessOneRow                   ; hl = result, a = sign
 508+ 0000 ~                                                ld		b,a                                 ; b = sign
 509+ 0000 ~                                                ld		a,h                                 ; a = high byte
 510+ 0000 ~                                                or		b
 511+ 0000 ~                                                ld		(p?_BnkXX12xSign),a					; a = result with sign in bit 7
 512+ 0000 ~                                                ld		a,l                                 ; the result will be in the lower byte now
 513+ 0000 ~                                                ld      (p?_BnkXX12xLo),a						; that is result done for
 514+ 0000 ~            ;...Y cell
 515+ 0000 ~                                                ld		hl,p?_BnkTransInvRow1y0     			; process orientation matrix row 1
 516+ 0000 ~                                                call    XX12ProcessOneRow
 517+ 0000 ~                                                ld		b,a
 518+ 0000 ~                                                ld		a,h
 519+ 0000 ~            ;		ld		a,l
 520+ 0000 ~                                                or		b
 521+ 0000 ~                                                ld		(p?_BnkXX12ySign),a					; a = result with sign in bit 7
 522+ 0000 ~                                                ld		a,l                                 ; the result will be in the lower byte now
 523+ 0000 ~                                                ld      (p?_BnkXX12yLo),a						; that is result done for
 524+ 0000 ~            ;...Z cell
 525+ 0000 ~                                                ld		hl,p?_BnkTransInvRow2z0     			; process orientation matrix row 1
 526+ 0000 ~                                                call    XX12ProcessOneRow
 527+ 0000 ~                                                ld		b,a
 528+ 0000 ~                                                ld		a,h
 529+ 0000 ~            ;		ld		a,l
 530+ 0000 ~                                                or		b
 531+ 0000 ~                                                ld		(p?_BnkXX12zSign),a					; a = result with sign in bit 7
 532+ 0000 ~                                                ld		a,l                                 ; the result will be in the lower byte now
 533+ 0000 ~                                                ld      (p?_BnkXX12zLo),a						; that is result done for
 534+ 0000 ~                                                ret
 535+ 0000 ~
 536+ 0000 ~            ; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 537+ 0000 ~            p?_XX12EquNodeDotOrientation: ld		hl,p?_BnkTransInvRow0x0     			; process orientation matrix row 0
 538+ 0000 ~            ;...X cell
 539+ 0000 ~                                                call    p?_XX12ProcessOneRow                   ; hl = result, a = sign
 540+ 0000 ~                                                ld		b,a                                 ; b = sign
 541+ 0000 ~                                                ld		a,h                                 ; a = high byte
 542+ 0000 ~                                                or		b
 543+ 0000 ~                                                ld		(p?_BnkXX12xSign),a					; a = result with sign in bit 7
 544+ 0000 ~                                                ld		a,l                                 ; the result will be in the lower byte now
 545+ 0000 ~                                                ld      (p?_BnkXX12xLo),a						; that is result done for
 546+ 0000 ~            ;...Y cell
 547+ 0000 ~                                                ld		hl,p?_BnkTransInvRow1y0     			; process orientation matrix row 1
 548+ 0000 ~                                                call    p?_XX12ProcessOneRow
 549+ 0000 ~                                                ld		b,a
 550+ 0000 ~                                                ld		a,h
 551+ 0000 ~                                    ;		ld		a,l
 552+ 0000 ~                                                or		b
 553+ 0000 ~                                                ld		(p?_BnkXX12ySign),a					; a = result with sign in bit 7
 554+ 0000 ~                                                ld		a,l                                 ; the result will be in the lower byte now
 555+ 0000 ~                                                ld      (p?_BnkXX12yLo),a						; that is result done for
 556+ 0000 ~                                    ;...Z cell
 557+ 0000 ~                                                ld		hl,p?_BnkTransInvRow2z0     			; process orientation matrix row 1
 558+ 0000 ~                                                call    p?_XX12ProcessOneRow
 559+ 0000 ~                                                ld		b,a
 560+ 0000 ~                                                ld		a,h
 561+ 0000 ~                                    ;		ld		a,l
 562+ 0000 ~                                                or		b
 563+ 0000 ~                                                ld		(p?_BnkXX12zSign),a					; a = result with sign in bit 7
 564+ 0000 ~                                                ld		a,l                                 ; the result will be in the lower byte now
 565+ 0000 ~                                                ld      (p?_BnkXX12zLo),a						; that is result done for
 566+ 0000 ~                                                ret
 567+ 0000 ~
 568+ 0000 ~            ; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 569+ 0000 ~            p?_XX12EquNodeDotXX16:
 570+ 0000 ~            ;...X cell
 571+ 0000 ~                                                ld		hl,p?_BnkTransmatSidevX     			; process orientation matrix row 0
 572+ 0000 ~                                                call    p?_XX12ProcessOneRow                   ; hl = result, a = sign
 573+ 0000 ~                                                ld		b,a                                 ; b = sign
 574+ 0000 ~                                                ld		a,h                                 ; a = high byte
 575+ 0000 ~                                                or		b
 576+ 0000 ~                                                ld		(p?_BnkXX12xSign),a					; a = result with sign in bit 7
 577+ 0000 ~                                                ld		a,l                                 ; the result will be in the lower byte now
 578+ 0000 ~                                                ld      (p?_BnkXX12xLo),a						; that is result done for
 579+ 0000 ~            ;...Y cell
 580+ 0000 ~                                                ld		hl,p?_BnkTransmatRoofvX     			; process orientation matrix row 1
 581+ 0000 ~                                                call    p?_XX12ProcessOneRow
 582+ 0000 ~                                                ld		b,a
 583+ 0000 ~                                                ld		a,h
 584+ 0000 ~            ;		ld		a,l
 585+ 0000 ~                                                or		b
 586+ 0000 ~                                                ld		(p?_BnkXX12ySign),a					; a = result with sign in bit 7
 587+ 0000 ~                                                ld		a,l                                 ; the result will be in the lower byte now
 588+ 0000 ~                                                ld      (p?_BnkXX12yLo),a						; that is result done for
 589+ 0000 ~            ;...Z cell
 590+ 0000 ~                                                ld		hl,p?_BnkTransmatNosevX     			; process orientation matrix row 1
 591+ 0000 ~                                                call    p?_XX12ProcessOneRow
 592+ 0000 ~                                                ld		b,a
 593+ 0000 ~                                                ld		a,h
 594+ 0000 ~            ;		ld		a,l
 595+ 0000 ~                                                or		b
 596+ 0000 ~                                                ld		(p?_BnkXX12zSign),a					; a = result with sign in bit 7
 597+ 0000 ~                                                ld		a,l                                 ; the result will be in the lower byte now
 598+ 0000 ~                                                ld      (p?_BnkXX12zLo),a						; that is result done for
 599+ 0000 ~                                                ret
 600+ 0000                                                  ENDM
 601+ 0000
# file closed: ./Universe/UniverseMacros/XX12DefineMacro.asm
 137  0000                                      INCLUDE "./Universe/UniverseMacros/XX15DefineMacro.asm"
# file opened: ./Universe/UniverseMacros/XX15DefineMacro.asm
   1+ 0000
   2+ 0000              XX15DefineMacro: MACRO   p?
   3+ 0000 ~
   4+ 0000 ~            p?_BnkXScaled                  DB  0               ; XX15+0Xscaled
   5+ 0000 ~            p?_BnkXScaledSign              DB  0               ; XX15+1xsign
   6+ 0000 ~            p?_BnkYScaled                  DB  0               ; XX15+2yscaled
   7+ 0000 ~            p?_BnkYScaledSign              DB  0               ; XX15+3ysign
   8+ 0000 ~            p?_BnkZScaled                  DB  0               ; XX15+4zscaled
   9+ 0000 ~            p?_BnkZScaledSign              DB  0               ; XX15+5zsign
  10+ 0000 ~            p?_XX1576                      DW  0    ; y2
  11+ 0000 ~
  12+ 0000 ~            p?_XX15:                       equ p?_BnkXScaled
  13+ 0000 ~            p?_XX15VecX:                   equ p?_XX15
  14+ 0000 ~            p?_XX15VecY:                   equ p?_XX15+1
  15+ 0000 ~            p?_XX15VecZ:                   equ p?_XX15+2
  16+ 0000 ~            p?_BnkXPoint:                  equ p?_XX15
  17+ 0000 ~            p?_BnkXPointLo:                equ p?_XX15+0
  18+ 0000 ~            p?_BnkXPointHi:                equ p?_XX15+1
  19+ 0000 ~            p?_BnkXPointSign:              equ p?_XX15+2
  20+ 0000 ~            p?_BnkYPoint:                  equ p?_XX15+3
  21+ 0000 ~            p?_BnkYPointLo:                equ p?_XX15+3
  22+ 0000 ~            p?_BnkYPointHi:                equ p?_XX15+4
  23+ 0000 ~            p?_BnkYPointSign:              equ p?_XX15+5
  24+ 0000 ~
  25+ 0000 ~            p?_XX1510                      EQU p?_BnkXScaled    ; x1 as a 16-bit coordinate (x1_hi x1_lo)
  26+ 0000 ~            p?_XX1532                      EQU p?_BnkYScaled   ; y1 as a 16-bit coordinate (y1_hi y1_lo)
  27+ 0000 ~            p?_XX1554                      EQU p?_BnkZScaled   ; x2
  28+ 0000 ~            p?_XX1554p1                    EQU p?_XX1554+1
  29+ 0000 ~            p?_XX15X1lo                    EQU p?_XX1510
  30+ 0000 ~            p?_XX15X1hi                    EQU p?_XX1510+1
  31+ 0000 ~            p?_XX15Y1lo                    EQU p?_XX1532
  32+ 0000 ~            p?_XX15Y1hi                    EQU p?_XX1532+1
  33+ 0000 ~            p?_XX15X2lo                    EQU p?_XX1554
  34+ 0000 ~            p?_XX15X2hi                    EQU p?_XX1554+1
  35+ 0000 ~            p?_XX15Y2lo                    EQU p?_XX1210
  36+ 0000 ~            p?_XX15Y2hi                    EQU p?_XX1210+1
  37+ 0000 ~            p?_XX15PlotX1                  EQU p?_XX15
  38+ 0000 ~            p?_XX15PlotY1                  EQU p?_XX15+1
  39+ 0000 ~            p?_XX15PlotX2                  EQU p?_XX15+2
  40+ 0000 ~            p?_XX15PlotY2                  EQU p?_XX15+3
  41+ 0000 ~
  42+ 0000 ~            p?_BnkX1                       equ p?_XX15
  43+ 0000 ~            p?_Bnkx1Lo                     equ p?_XX15
  44+ 0000 ~            p?_Bnkx1Hi                     equ p?_XX15+1
  45+ 0000 ~            p?_BnkY1                       equ p?_XX15+2
  46+ 0000 ~            p?_Bnky1Lo                     equ p?_XX15+2
  47+ 0000 ~            p?_BnkY1Hi                     equ p?_XX15+3
  48+ 0000 ~            p?_BnkX2                       equ p?_XX15+4
  49+ 0000 ~            p?_BnkX2Lo                     equ p?_XX15+4
  50+ 0000 ~            p?_BnkX2Hi                     equ p?_XX15+5
  51+ 0000 ~
  52+ 0000 ~            ; Repurposed XX15 pre clip plines
  53+ 0000 ~            p?_BnkPreClipX1               equ p?_XX15+0
  54+ 0000 ~            p?_BnkPreClipY1               equ p?_XX15+2
  55+ 0000 ~            p?_BnkPreClipX2               equ p?_XX15+4
  56+ 0000 ~            p?_BnkPreClipY2               equ p?_XX15+6
  57+ 0000 ~            ; Repurposed XX15 post clip lines
  58+ 0000 ~            p?_BnkNewX1                   equ p?_XX15+0
  59+ 0000 ~            p?_BnkNewY1                   equ p?_XX15+1
  60+ 0000 ~            p?_BnkNewX2                   equ p?_XX15+2
  61+ 0000 ~            p?_BnkNewY2                   equ p?_XX15+3
  62+ 0000 ~
  63+ 0000                                          ENDM
  64+ 0000              ; Backface cull
  65+ 0000              ; is the angle between the ship -> camera vector and the normal of the face as long as both are unit vectors soo we can check that normal z > 0
  66+ 0000              ; normal vector = cross product of ship ccordinates
  67+ 0000              ;
  68+ 0000
  69+ 0000              CopyFaceToXX15Macro     MACRO p?
  70+ 0000 ~            p?_CopyFaceToXX15:ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
  71+ 0000 ~                                    ld      b,a                                                    ;;;
  72+ 0000 ~                                    and     SignOnly8Bit
  73+ 0000 ~                                    ld      (p?_BnkXScaledSign),a           ; write Sign bits to x sign                                                            ;;;
  74+ 0000 ~                                    ld      a,b
  75+ 0000 ~                                    sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  76+ 0000 ~                                    ld      b,a
  77+ 0000 ~                                    and     SignOnly8Bit
  78+ 0000 ~                                    ld      (p?_BnkYScaledSign),a           ;                                                                                      ;;;
  79+ 0000 ~                                    ld      a,b
  80+ 0000 ~                                    sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  81+ 0000 ~                                    and     SignOnly8Bit
  82+ 0000 ~                                    ld      (p?_BnkZScaledSign),a           ;                                                                                      ;;;
  83+ 0000 ~                                    inc     hl                          ; move to X ccord
  84+ 0000 ~                                    ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  85+ 0000 ~                                    ld      (p?_BnkXScaled),a                                                                                                    ;;;
  86+ 0000 ~                                    inc     hl                                                                                                                 ;;;
  87+ 0000 ~                                    ld      a,(hl)                      ;                                                                                      ;;;
  88+ 0000 ~                                    ld      (p?_BnkYScaled),a                                                                                                    ;;;
  89+ 0000 ~                                    inc     hl                                                                                                                 ;;;
  90+ 0000 ~                                    ld      a,(hl)                      ;                                                                                      ;;;
  91+ 0000 ~                                    ld      (p?_BnkZScaled),a
  92+ 0000 ~                                    ret
  93+ 0000                                      ENDM
  94+ 0000
  95+ 0000
  96+ 0000              ;;;     Byte 0 = X magnitide with origin at middle of ship
  97+ 0000              ;;;     Byte 1 = Y magnitide with origin at middle of ship
  98+ 0000              ;;;     Byte 2 = Z magnitide with origin at middle of ship
  99+ 0000              ;;;     Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
 100+ 0000              CopyNodeToXX15Macro:    MACRO p?
 101+ 0000 ~            p?_CopyNodeToXX15:
 102+ 0000 ~                                    ldCopyByte  hl, p?_BnkXScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
 103+ 0000 ~                                    inc         hl
 104+ 0000 ~                                    ldCopyByte  hl, p?_BnkYScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
 105+ 0000 ~                                    inc         hl
 106+ 0000 ~                                    ldCopyByte  hl, p?_BnkZScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
 107+ 0000 ~                                    inc         hl
 108+ 0000 ~            p?_PopulateXX15SignBits:
 109+ 0000 ~            ; Simplfied for debugging, needs optimising back to original DEBUG TODO
 110+ 0000 ~                                    ld          a,(hl)
 111+ 0000 ~                                    ld          c,a                                 ; copy sign and visibility to c
 112+ 0000 ~                                    ld          b,a
 113+ 0000 ~                                    and         $80                                 ; keep high 3 bits
 114+ 0000 ~                                    ld          (p?_BnkXScaledSign),a                 ; Copy Sign Bits                                                            ;;;
 115+ 0000 ~                                    ld          a,b
 116+ 0000 ~                                    and         $40
 117+ 0000 ~                                    sla         a                                   ; Copy Sign Bits                                                            ;;;
 118+ 0000 ~                                    ld          (p?_BnkYScaledSign),a                 ; Copy Sign Bits                                                            ;;;
 119+ 0000 ~                                    ld          a,b
 120+ 0000 ~                                    and         $20
 121+ 0000 ~                                    sla         a                                   ; Copy Sign Bits                                                            ;;;
 122+ 0000 ~                                    sla         a                                   ; Copy Sign Bits                                                            ;;;
 123+ 0000 ~                                    ld          (p?_BnkZScaledSign),a                 ; Copy Sign Bits                                                            ;;;
 124+ 0000 ~                                    ld          a,c                                 ; returns a with visibility sign byte
 125+ 0000 ~                                    and         $1F                                 ; visibility is held in bits 0 to 4                                                              ;;;     A = XX15 Signs AND &1F (to get lower 5 visibility)
 126+ 0000 ~                                    ld          (varT),a                            ; and store in varT as its needed later
 127+ 0000 ~                                    ret
 128+ 0000                                      ENDM
 129+ 0000
# file closed: ./Universe/UniverseMacros/XX15DefineMacro.asm
 138  0000                                      INCLUDE "./Universe/UniverseMacros/XX16DefineMacro.asm"
# file opened: ./Universe/UniverseMacros/XX16DefineMacro.asm
   1+ 0000
   2+ 0000              XX16DefineMacro:            MACRO   p?
   3+ 0000 ~            ;-- XX16 --------------------------------------------------------------------------------------------------------------------------")
   4+ 0000 ~            p?_BnkTransmatSidevX          DW  0               ; XX16+0
   5+ 0000 ~            p?_BnkTransmatSidev           EQU p?_BnkTransmatSidevX
   6+ 0000 ~            p?_BnkTransmatSidevY          DW 0                ; XX16+2
   7+ 0000 ~            p?_BnkTransmatSidevZ          DW 0                ; XX16+2
   8+ 0000 ~            p?_BnkTransmatRoofvX          DW 0
   9+ 0000 ~            p?_BnkTransmatRoofv           EQU p?_BnkTransmatRoofvX
  10+ 0000 ~            p?_BnkTransmatRoofvY          DW 0                ; XX16+2
  11+ 0000 ~            p?_BnkTransmatRoofvZ          DW 0                ; XX16+2
  12+ 0000 ~            p?_BnkTransmatNosevX          DW 0
  13+ 0000 ~            p?_BnkTransmatNosev           EQU p?_BnkTransmatNosevX
  14+ 0000 ~            p?_BnkTransmatNosevY          DW 0                ; XX16+2
  15+ 0000 ~            p?_BnkTransmatNosevZ          DW 0                ; XX16+2
  16+ 0000 ~            p?_BnkTransmatTransX          DW 0
  17+ 0000 ~            p?_BnkTransmatTransY          DW 0
  18+ 0000 ~            p?_BnkTransmatTransZ          DW 0
  19+ 0000 ~            p?_XX16                       equ p?_BnkTransmatSidev
  20+ 0000 ~            ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  21+ 0000 ~            p?_BnkTransInvRow0x0          DW 0
  22+ 0000 ~            p?_BnkTransInvRow0x1          DW 0
  23+ 0000 ~            p?_BnkTransInvRow0x2          DW 0
  24+ 0000 ~            p?_BnkTransInvRow0x3          DW 0
  25+ 0000 ~            p?_BnkTransInvRow1y0          DW 0
  26+ 0000 ~            p?_BnkTransInvRow1y1          DW 0
  27+ 0000 ~            p?_BnkTransInvRow1y2          DW 0
  28+ 0000 ~            p?_BnkTransInvRow1y3          DW 0
  29+ 0000 ~            p?_BnkTransInvRow2z0          DW 0
  30+ 0000 ~            p?_BnkTransInvRow2z1          DW 0
  31+ 0000 ~            p?_BnkTransInvRow2z2          DW 0
  32+ 0000 ~            p?_BnkTransInvRow2z3          DW 0
  33+ 0000 ~            p?_XX16Inv                    equ p?_BnkTransInvRow0x0
  34+ 0000                                          ENDM
  35+ 0000
  36+ 0000              InverseXX16Macro:               MACRO p?
  37+ 0000 ~            ; lead routine into .LL42	\ ->  &4B04 \ DO nodeX-Ycoords their comment  \  TrnspMat
  38+ 0000 ~            p?_InverseXX16:
  39+ 0000 ~            ; we coudl combine this with move to transmat later as an optimisation
  40+ 0000 ~            ; INPUT - All Scaled
  41+ 0000 ~            ;  They transmat has already been put into side, roof nose order
  42+ 0000 ~            ;  XX16   = |sidev_x| |sidev_y| |sidev_z|  1  0  3  2  5  4 note each bytepair is Scaled value in low and high byte just for sign
  43+ 0000 ~            ;  XX16   = |roofv_x| |roofv_y| |roofv_z|  7  6  8  9 11 10
  44+ 0000 ~            ;  XX16   = |nosev_x| |nosev_y| |nosev_z| 13 12 15 14 17 16
  45+ 0000 ~            ; OUTPUT
  46+ 0000 ~            ;  XX16(1 0)   ( 3 2) ( 5 4 ) =  sidev_x roofv_x nosev_x
  47+ 0000 ~            ;  XX16(7 6)   ( 8 9) (11 10) =  sidev_y roofv_y nosev_y
  48+ 0000 ~            ;  XX16(13 12) (15 14)(17 16) =  sidev_z roofv_z nosev_z
  49+ 0000 ~            ; First all side values become compoment 0 of each vector
  50+ 0000 ~                                            ld      hl,(p?_BnkTransmatSidevX)     ;
  51+ 0000 ~                                            ld      de,(p?_BnkTransmatRoofvX)     ;
  52+ 0000 ~                                            ld      bc,(p?_BnkTransmatNosevX)     ;
  53+ 0000 ~                                            ld      (p?_BnkTransInvRow0x0),hl     ;
  54+ 0000 ~                                            ld      (p?_BnkTransInvRow0x1),de     ;
  55+ 0000 ~                                            ld      (p?_BnkTransInvRow0x2),bc     ;
  56+ 0000 ~                                            ld      hl,(p?_BnkTransmatSidevY)     ;
  57+ 0000 ~                                            ld      de,(p?_BnkTransmatRoofvY)     ;
  58+ 0000 ~                                            ld      bc,(p?_BnkTransmatNosevY)     ;
  59+ 0000 ~                                            ld      (p?_BnkTransInvRow1y0),hl     ;
  60+ 0000 ~                                            ld      (p?_BnkTransInvRow1y1),de     ;
  61+ 0000 ~                                            ld      (p?_BnkTransInvRow1y2),bc     ;
  62+ 0000 ~                                            ld      hl,(p?_BnkTransmatSidevZ)     ;
  63+ 0000 ~                                            ld      de,(p?_BnkTransmatRoofvZ)     ;
  64+ 0000 ~                                            ld      bc,(p?_BnkTransmatNosevZ)     ;
  65+ 0000 ~                                            ld      (p?_BnkTransInvRow2z0),hl     ;
  66+ 0000 ~                                            ld      (p?_BnkTransInvRow2z1),de     ;
  67+ 0000 ~                                            ld      (p?_BnkTransInvRow2z2),bc     ;
  68+ 0000 ~                                            ret
  69+ 0000                                              ENDM
  70+ 0000
  71+ 0000
  72+ 0000              ScaleXX16Matrix197Macro:        MACRO p?
  73+ 0000 ~            p?_ScaleXX16Matrix197:
  74+ 0000 ~                                    IFDEF LOGMATHS
  75+ 0000 ~                                            ld		b,9                 ; Interate though all 9 matrix elements
  76+ 0000 ~                                            ld		hl,p?_BnkTransmatSidev ; within XX16 (transmat)
  77+ 0000 ~                                            MMUSelectMathsTables
  78+ 0000 ~            .ScaleXX16Loop:                 ld		e,(hl)              ; set DE = matrix value              ;
  79+ 0000 ~                                            inc		hl                  ;
  80+ 0000 ~                                            ld		a,(hl)              ;
  81+ 0000 ~                                            ld		d,a                 ;
  82+ 0000 ~                                            and     SignOnly8Bit        ; A holds high still to we can strip out sign bit
  83+ 0000 ~                                            ld		ixl,a				; retain for sign bit
  84+ 0000 ~                                            ShiftDELeft1				; carry now holds sign bit and DE = De * 2, this will in effect strip off the sign bit automatically
  85+ 0000 ~                                            ld      a,d                 ; a = high byte after x 2
  86+ 0000 ~                                            push	bc                  ; save BC  counter and constant 197
  87+ 0000 ~                                            push	hl                  ; save HL
  88+ 0000 ~                                            call    AEquAmul256Div197Log;
  89+ 0000 ~                                            pop		hl
  90+ 0000 ~                                            dec     hl                  ; move back to low byte
  91+ 0000 ~                                            ld      (hl),a              ; save result in low byte as we want to preserve high byte sign
  92+ 0000 ~                                            inc     hl                  ; move back to high byte
  93+ 0000 ~                                            ld      a,ixl
  94+ 0000 ~                                            ld      (hl),a              ; write back just sign bit
  95+ 0000 ~                                            pop		bc                  ; retrieve both counter and constant 197
  96+ 0000 ~                                            inc     hl                  ; no to next vertex value
  97+ 0000 ~                                            djnz	.ScaleXX16Loop
  98+ 0000 ~                                            MMUSelectROM0
  99+ 0000 ~                                            ret
 100+ 0000 ~                                    ELSE
 101+ 0000 ~                                            ld		b,9                 ; Interate though all 9 matrix elements
 102+ 0000 ~                                            ld		c,ConstNorm         ; c = 197
 103+ 0000 ~                                            ld		hl,p?_BnkTransmatSidev ; within XX16 (transmat)
 104+ 0000 ~            .ScaleXX16Loop:                 ld		a,(hl)              ; set DE = matrix value
 105+ 0000 ~                                            ld		e,a                 ;
 106+ 0000 ~                                            inc		hl                  ;
 107+ 0000 ~                                            ld		a,(hl)              ;
 108+ 0000 ~                                            ld		d,a                 ;
 109+ 0000 ~                                            and     SignOnly8Bit        ; A holds high still to we can strip out sign bit
 110+ 0000 ~                                            ld		ixl,a				; retain for sign bit
 111+ 0000 ~                                            ShiftDELeft1				; carry now holds sign bit and DE = De * 2, this will in effect strip off the sign bit automatically
 112+ 0000 ~                                            ld      a,d                 ; a = high byte after x 2
 113+ 0000 ~                                            push	bc                  ; save BC  counter and constant 197
 114+ 0000 ~                                            push	hl                  ; save HL
 115+ 0000 ~                                            call	DIV16Amul256dCUNDOC; AEquAmul256DivD; DIV16Amul256dCUNDOC	; result in BC = A*256 / 197 or D *512 / 197 = 2.6 * vector element, effectivley the result will always be in c
 116+ 0000 ~                                            pop		hl
 117+ 0000 ~                                            dec     hl                  ; move back to low byte
 118+ 0000 ~                                            ld      (hl),c              ; save result in low byte as we want to preserve high byte sign
 119+ 0000 ~                                            inc     hl                  ; move back to high byte
 120+ 0000 ~                                ;            ld      a,(hl)
 121+ 0000 ~                                ;            and     $80
 122+ 0000 ~                                            ld      a,ixl
 123+ 0000 ~                                            ld      (hl),a              ; write back just sign bit
 124+ 0000 ~                                            pop		bc                  ; retrieve both counter and constant 197
 125+ 0000 ~                                            inc     hl                  ; no to next vertex value
 126+ 0000 ~                                            djnz	.ScaleXX16Loop
 127+ 0000 ~                                            ret
 128+ 0000 ~                                    ENDIF
 129+ 0000                                      ENDM
# file closed: ./Universe/UniverseMacros/XX16DefineMacro.asm
 139  0000                                      INCLUDE "./Universe/UniverseMacros/XX18DefineMacro.asm"
# file opened: ./Universe/UniverseMacros/XX18DefineMacro.asm
   1+ 0000              XX18DefineMacro:                MACRO p?
   2+ 0000 ~            ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   3+ 0000 ~            p?_BnkDrawCam0xLo         DB  0               ; XX18+0
   4+ 0000 ~            p?_BnkDrawCam0xHi         DB  0               ; XX18+1
   5+ 0000 ~            p?_BnkDrawCam0xSgn        DB  0               ; XX18+2
   6+ 0000 ~            p?_BnkDrawCam0x           equ p?_BnkDrawCam0xLo
   7+ 0000 ~            p?_BnkDrawCam0yLo         DB  0               ; XX18+3
   8+ 0000 ~            p?_BnkDrawCam0yHi         DB  0               ; XX18+4
   9+ 0000 ~            p?_BnkDrawCam0ySgn        DB  0               ; XX18+5
  10+ 0000 ~            p?_BnkDrawCam0y           equ p?_BnkDrawCam0yLo
  11+ 0000 ~            p?_BnkDrawCam0zLo         DB  0               ; XX18+6
  12+ 0000 ~            p?_BnkDrawCam0zHi         DB  0               ; XX18+7
  13+ 0000 ~            p?_BnkDrawCam0zSgn        DB  0               ; XX18+8
  14+ 0000 ~            p?_BnkDrawCam0z           equ p?_BnkDrawCam0zLo
  15+ 0000 ~            p?_XX18                   equ p?_BnkDrawCam0xLo
  16+ 0000                                              ENDM
  17+ 0000
  18+ 0000              CopyXX18toXX15Macro:            MACRO p?
  19+ 0000 ~            p?_CopyXX18toXX15:
  20+ 0000 ~            p?_CopyDrawCamToScaled:   ldCopyByte  p?_BnkDrawCam0xLo ,p?_BnkXScaled        ; xlo
  21+ 0000 ~                                            ldCopyByte  p?_BnkDrawCam0xSgn,p?_BnkXScaledSign    ; xsg
  22+ 0000 ~                                            ldCopyByte  p?_BnkDrawCam0yLo ,p?_BnkYScaled        ; xlo
  23+ 0000 ~                                            ldCopyByte  p?_BnkDrawCam0ySgn,p?_BnkYScaledSign    ; xsg
  24+ 0000 ~                                            ldCopyByte  p?_BnkDrawCam0zLo ,p?_BnkZScaled        ; xlo
  25+ 0000 ~                                            ldCopyByte  p?_BnkDrawCam0zSgn,p?_BnkZScaledSign    ; xsg
  26+ 0000 ~                                            ret
  27+ 0000              				                ENDM
  28+ 0000
  29+ 0000              LoadCraftToCameraMacro:         MACRO p?
  30+ 0000 ~            p?_LoadCraftToCamera:     ld      hl,(p?_Bnkxlo)            ; BnKxlo, BnKxhi
  31+ 0000 ~                                            ld      de,(p?_Bnkxsgn)           ; BnKxsgn, BnKylo
  32+ 0000 ~                                            ld      bc,(p?_Bnkyhi)            ; BnKyhi, BnKysgn
  33+ 0000 ~                                            ld      (p?_BnkDrawCam0xLo),hl    ; BnKDrawCam0xLo, BnKDrawCam0xHi
  34+ 0000 ~                                            ld      (p?_BnkDrawCam0xSgn),de   ; BnKDrawCam0xSgn,BnKDrawCam0yLo
  35+ 0000 ~                                            ld      (p?_BnkDrawCam0yHi),bc    ; BnKDrawCam0yHi, BnKDrawCam0ySgn
  36+ 0000 ~                                            ld      hl,(p?_Bnkzlo)            ; BnKzlo, BnKzhi
  37+ 0000 ~                                            ld      a,(p?_Bnkzsgn)            ; BnKzlo
  38+ 0000 ~                                            ld      (p?_BnkDrawCam0zLo),hl     ; BnKDrawCam0zLo, BnKDrawCam0zHi
  39+ 0000 ~                                            ld      (p?_BnkDrawCam0zSgn),a     ; BnKDrawCam0zSgn
  40+ 0000 ~                                            ret
  41+ 0000                                              ENDM
  42+ 0000
  43+ 0000              CopyCameraToXX15SignedMacro:    MACRO p?
  44+ 0000 ~            p?_CopyCameraToXX15Signed:ld  hl,(p?_BnkDrawCam0xLo)
  45+ 0000 ~                                            ld  a,(p?_BnkDrawCam0xSgn)
  46+ 0000 ~                                            or  h
  47+ 0000 ~                                            ld  h,a
  48+ 0000 ~                                            ld  (p?_BnkXScaled),hl
  49+ 0000 ~                                            ld  hl,(p?_BnkDrawCam0yLo)
  50+ 0000 ~                                            ld  a,(p?_BnkDrawCam0ySgn)
  51+ 0000 ~                                            or  h
  52+ 0000 ~                                            ld  h,a
  53+ 0000 ~                                            ld  (p?_BnkYScaled),hl
  54+ 0000 ~                                            ld  hl,(p?_BnkDrawCam0zLo)
  55+ 0000 ~                                            ld  a,(p?_BnkDrawCam0zSgn)
  56+ 0000 ~                                            or  h
  57+ 0000 ~                                            ld  h,a
  58+ 0000 ~                                            ld  (p?_BnkZScaled),hl
  59+ 0000 ~                                            ret
  60+ 0000                                              ENDM
  61+ 0000
  62+ 0000              XX15EquXX15AddXX18Macro:        MACRO p?
  63+ 0000 ~            p?_X15EquXX15AddXX18:
  64+ 0000 ~            .LL94Z:                         ld      h,0                            ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  65+ 0000 ~                                            ld      d,0                            ;
  66+ 0000 ~                                            ld      a,(p?_BnkZScaled)        ;
  67+ 0000 ~                                            ld      l,a                            ;
  68+ 0000 ~                                            ld      a,(p?_BnkZScaledSign)    ;
  69+ 0000 ~                                            ld      b,a                            ;
  70+ 0000 ~                                            ld      a,(p?_BnkDrawCam0zLo)    ;
  71+ 0000 ~                                            ld      e,a                            ;
  72+ 0000 ~                                            ld      a,(p?_BnkDrawCam0zSgn)   ;
  73+ 0000 ~                                            ld      c,a                            ;
  74+ 0000 ~                                            MMUSelectMathsBankedFns
  75+ 0000 ~                                            call    ADDHLDESignBC                  ;
  76+ 0000 ~                                            ld      b,a                            ;
  77+ 0000 ~                                            ld      a,h                            ;
  78+ 0000 ~                                            ld      a,b                            ;           else  Scaled (XX15) Z = AddZ
  79+ 0000 ~                                            ld      (p?_BnkZScaledSign),a            ;
  80+ 0000 ~                                            ld      a,l                            ;
  81+ 0000 ~                                            ld      (p?_BnkZScaled),a                ;           endif
  82+ 0000 ~            .LL94X:                         ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  83+ 0000 ~                                            ld      d,0                                                     ;
  84+ 0000 ~                                            ld      a,(p?_BnkXScaled)                                         ;
  85+ 0000 ~                                            ld      l,a                                                     ;
  86+ 0000 ~                                            ld      a,(p?_BnkXScaledSign)                                     ;
  87+ 0000 ~                                            ld      b,a                                                     ;
  88+ 0000 ~                                            ld      a,(p?_BnkDrawCam0xLo)                                     ;
  89+ 0000 ~                                            ld      e,a                                                     ;
  90+ 0000 ~                                            ld      a,(p?_BnkDrawCam0xSgn)                                    ;
  91+ 0000 ~                                            ld      c,a                                                     ;
  92+ 0000 ~                                            MMUSelectMathsBankedFns
  93+ 0000 ~                                            call    ADDHLDESignBC                                           ;
  94+ 0000 ~                                            ld      b,a                                                     ;
  95+ 0000 ~                                            ld      a,h                                                     ;
  96+ 0000 ~                                            ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  97+ 0000 ~                                            ld      (p?_BnkXScaledSign),a                                     ;
  98+ 0000 ~                                            ld      a,l                                                     ;
  99+ 0000 ~                                            ld      (p?_BnkXScaled),a                                         ;           endif
 100+ 0000 ~            .LL94Y:                         ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
 101+ 0000 ~                                            ld      d,0                                                     ;
 102+ 0000 ~                                            ld      a,(p?_BnkYScaled)                                         ;
 103+ 0000 ~                                            ld      l,a                                                     ;
 104+ 0000 ~                                            ld      a,(p?_BnkYScaledSign)                                     ;
 105+ 0000 ~                                            ld      b,a                                                     ;
 106+ 0000 ~                                            ld      a,(p?_BnkDrawCam0yLo)                                     ;
 107+ 0000 ~                                            ld      e,a                                                     ;
 108+ 0000 ~                                            ld      a,(p?_BnkDrawCam0ySgn)                                    ;
 109+ 0000 ~                                            ld      c,a                                                     ;
 110+ 0000 ~                                            MMUSelectMathsBankedFns
 111+ 0000 ~                                            call    ADDHLDESignBC                                           ;
 112+ 0000 ~                                            ld      b,a                                                     ;
 113+ 0000 ~                                            ld      a,h                                                     ;
 114+ 0000 ~                                            ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
 115+ 0000 ~                                            ld      (p?_BnkYScaledSign),a                                     ;
 116+ 0000 ~                                            ld      a,l                                                     ;
 117+ 0000 ~                                            ld      (p?_BnkYScaled),a                                         ;
 118+ 0000 ~                                            ret
 119+ 0000                                              ENDM
 120+ 0000
# file closed: ./Universe/UniverseMacros/XX18DefineMacro.asm
 140  0000                                      INCLUDE "./Universe/UniverseMacros/XX25DefineMacro.asm"
# file opened: ./Universe/UniverseMacros/XX25DefineMacro.asm
   1+ 0000
   2+ 0000
   3+ 0000              XX25DefineMacro: MACRO   p?
   4+ 0000 ~            ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   5+ 0000 ~            p?_BnkProjxLo                 DB  0
   6+ 0000 ~            p?_BnkProjxHi                 DB  0
   7+ 0000 ~            p?_BnkProjxSgn                DB  0
   8+ 0000 ~            p?_BnkProjx                   EQU p?_BnkProjxLo
   9+ 0000 ~            p?_BnkProjyLo                 DB  0
  10+ 0000 ~            p?_BnkProjyHi                 DB  0
  11+ 0000 ~            p?_BnkProjySgn                DB  0
  12+ 0000 ~            p?_BnkProjy                   EQU p?_BnkProjyLo
  13+ 0000 ~            p?_BnkProjzLo                 DB  0
  14+ 0000 ~            p?_BnkProjzHi                 DB  0
  15+ 0000 ~            p?_BnkProjzSgn                DB  0
  16+ 0000 ~            p?_BnkProjz                   EQU p?_BnkProjzLo
  17+ 0000 ~            p?_XX25                       EQU p?_BnkProjxLo
  18+ 0000                                          ENDM
# file closed: ./Universe/UniverseMacros/XX25DefineMacro.asm
 141  0000                                      include "./Universe/UniverseMacros/InitialiseOrientationMacro.asm"
# file opened: ./Universe/UniverseMacros/InitialiseOrientationMacro.asm
   1+ 0000              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
   2+ 0000              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
   3+ 0000              ;  nosev = (0,  0, -1)  nosev = (0, 0, &E000)   E000 = SignBit[96]
   4+ 0000              InitialiseOrientationMacro      MACRO p?
   5+ 0000 ~            p?_InitialiseOrientation: ld      hl, 0
   6+ 0000 ~                                            ld      (p?_BnkrotmatSidevY),hl                ; set the zeroes
   7+ 0000 ~                                            ld      (p?_BnkrotmatSidevZ),hl                ; set the zeroes
   8+ 0000 ~                                            ld      (p?_BnkrotmatRoofvX),hl                ; set the zeroes
   9+ 0000 ~                                            ld      (p?_BnkrotmatRoofvZ),hl                ; set the zeroes
  10+ 0000 ~                                            ld      (p?_BnkrotmatNosevX),hl                ; set the zeroes
  11+ 0000 ~                                            ld      (p?_BnkrotmatNosevY),hl                ; set the zeroes
  12+ 0000 ~            ; Optimised as already have 0 in l
  13+ 0000 ~                                            ld      h, $60	             				; 96 in hi byte
  14+ 0000 ~                                    ;ld      hl,1
  15+ 0000 ~                                            ld      (p?_BnkrotmatSidevX),hl
  16+ 0000 ~                                            ld      (p?_BnkrotmatRoofvY),hl
  17+ 0000 ~            ; Optimised as already have 0 in l
  18+ 0000 ~                                            ld      h, $E0					            ; -96 in hi byte which is +96 with hl bit 7 set
  19+ 0000 ~                                            ld      (p?_BnkrotmatNosevZ),hl
  20+ 0000 ~                                            ret
  21+ 0000                                              ENDM
  22+ 0000
  23+ 0000              InitialisePlayerMissileOrientationMacro: MACRO p?
  24+ 0000 ~            p?_InitialisePlayerMissileOrientation:
  25+ 0000 ~                                            call    p?_InitialiseOrientation
  26+ 0000 ~                                            ld      hl,$6000
  27+ 0000 ~                                            ld      (p?_BnkrotmatNosevZ),hl           ; mius
  28+ 0000 ~                                            ret
  29+ 0000                                              ENDM
  30+ 0000
  31+ 0000              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
  32+ 0000              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
  33+ 0000              ;  nosev = (-0,  -0, 1) nosev = (0, 0, &6000)
  34+ 0000              LaunchedOrientationMacro:       MACRO p?
  35+ 0000 ~            p?_LaunchedOrientation:   call    p?_InitialiseOrientation
  36+ 0000 ~                                            FlipSignMem p?_BnkrotmatNosevX+1;  as its 0 flipping will make no difference
  37+ 0000 ~                                            FlipSignMem p?_BnkrotmatNosevY+1;  as its 0 flipping will make no difference
  38+ 0000 ~                                            FlipSignMem p?_BnkrotmatNosevZ+1
  39+ 0000 ~                                            ret
  40+ 0000                                              ENDM
  41+ 0000
# file closed: ./Universe/UniverseMacros/InitialiseOrientationMacro.asm
 142  0000                                      include "./Universe/UniverseMacros/CopyRotmatToTransMatMacro.asm"
# file opened: ./Universe/UniverseMacros/CopyRotmatToTransMatMacro.asm
   1+ 0000              ; Set TransMatTo
   2+ 0000              ; XX16(1 0)   (3 2)   (5 4)   = sidev_x sidev_y sidev_z XX16(13,12) (15 14) (17 16)
   3+ 0000              ; XX16(7 6)   (9 8)   (11 10) = roofv_x roofv_y roofv_z XX16(7 6)   (9 8)   (11 10)
   4+ 0000              ; XX16(13 12) (15 14) (17 16) = nosev_x nosev_y nosev_z XX16(1 0)   (3 2)   (5 4)
   5+ 0000              ; This moves Side XYZ to position 0, Roof XYZ to position 1 annd nose XYZ to position 2 as a copy of each batch of 6 bytes
   6+ 0000              ; 18 byte fast copy
   7+ 0000
   8+ 0000              CopyRotmatToTransMatMacro:      MACRO p?
   9+ 0000 ~            ; Fast copy using the stack                                                         ; T states
  10+ 0000 ~            p?_CopyRotmatToTransMat:  ld      ix,0                                                ; 14
  11+ 0000 ~                                            add     ix,sp                                               ; 15
  12+ 0000 ~                                            ld      sp,p?_BnkrotmatSidevX ; Source                        ; 10
  13+ 0000 ~                                            pop     hl                  ; p?_BnkrotmatSidevX              ; 10
  14+ 0000 ~                                            pop     de                  ; p?_BnkrotmatSidevY              ; 10
  15+ 0000 ~                                            pop     bc                  ; p?_BnkrotmatSidevZ              ; 10
  16+ 0000 ~                                            exx                                                         ; 4
  17+ 0000 ~                                            pop     hl                  ; p?_BnkrotmatRoofvX              ; 10
  18+ 0000 ~                                            pop     de                  ; p?_BnkrotmatRoofvY              ; 10
  19+ 0000 ~                                            pop     bc                  ; p?_BnkrotmatRoofvZ              ; 10
  20+ 0000 ~                                            ld      sp,p?_BnkTransmatRoofvZ+2 ; Target + 2 reversed       ; 10
  21+ 0000 ~                                            push    bc                                                  ; 10
  22+ 0000 ~                                            push    de                                                  ; 10
  23+ 0000 ~                                            push    hl                                                  ; 10
  24+ 0000 ~                                            exx                                                         ; 4
  25+ 0000 ~                                            push    bc                                                  ; 10
  26+ 0000 ~                                            push    de                                                  ; 10
  27+ 0000 ~                                            push    hl                                                  ; 10
  28+ 0000 ~                                            ld      sp,p?_BnkrotmatNosevX ; Source                        ; 10
  29+ 0000 ~                                            pop     hl                  ; p?_BnkrotmatSidevX              ; 10
  30+ 0000 ~                                            pop     de                  ; p?_BnkrotmatSidevY              ; 10
  31+ 0000 ~                                            pop     bc                  ; p?_BnkrotmatSidevZ              ; 10
  32+ 0000 ~                                            ld      sp,p?_BnkTransmatNosevZ+2                             ; 10
  33+ 0000 ~                                            push    bc                                                  ; 10
  34+ 0000 ~                                            push    de                                                  ; 10
  35+ 0000 ~                                            push    hl                                                  ; 10
  36+ 0000 ~                                            ld      sp,ix               ; restore stack                 ; 10
  37+ 0000 ~                                            ret                                                         ; 10 Total 267 (LDI version is 318)
  38+ 0000                                              ENDM
  39+ 0000
  40+ 0000
  41+ 0000              ;                        ret
  42+ 0000
# file closed: ./Universe/UniverseMacros/CopyRotmatToTransMatMacro.asm
 143  0000                                      include "./Universe/UniverseMacros/ScaleNodeTo8BitMacro.asm"
# file opened: ./Universe/UniverseMacros/ScaleNodeTo8BitMacro.asm
   1+ 0000              ScaleNodeTo8BitMacro:       MACRO p?
   2+ 0000 ~            p?_ScaleNodeTo8Bit:   ld			bc,(SS_BnkZScaled)
   3+ 0000 ~                                        ld			hl,(SS_BnkXScaled)
   4+ 0000 ~                                        ld			de,(SS_BnkYScaled)
   5+ 0000 ~            .SetABSbc:                  ld			a,b
   6+ 0000 ~                                        ld			ixh,a
   7+ 0000 ~
   8+ 0000 ~                                        and			SignMask8Bit
   9+ 0000 ~                                        ld			b,a									; bc = ABS bc
  10+ 0000 ~            .SetABShl:                  ld			a,h
  11+ 0000 ~                                        ld			ixl,a
  12+ 0000 ~                                        and			SignMask8Bit
  13+ 0000 ~                                        ld			h,a									; hl = ABS hl
  14+ 0000 ~            .SetABSde:                  ld			a,d
  15+ 0000 ~                                        ld			iyh,a
  16+ 0000 ~                                        and			SignMask8Bit
  17+ 0000 ~                                        ld			d,a									; de = ABS de
  18+ 0000 ~            .ScaleNodeTo8BitLoop:       ld          a,b		                            ; U	\ z hi
  19+ 0000 ~                                        or			h                                   ; XX15+1	\ x hi
  20+ 0000 ~                                        or			d                                   ; XX15+4	\ y hi
  21+ 0000 ~                                        jr          z,.ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
  22+ 0000 ~                                        ShiftHLRight1
  23+ 0000 ~                                        ShiftDERight1
  24+ 0000 ~                                        ShiftBCRight1
  25+ 0000 ~                                        jp          .ScaleNodeTo8BitLoop
  26+ 0000 ~            ; now we have scaled values we have to deal with sign
  27+ 0000 ~            .ScaleNodeDone:             ld			a,ixh								; get sign bit and or with b
  28+ 0000 ~                                        and			SignOnly8Bit
  29+ 0000 ~                                        or			b
  30+ 0000 ~                                        ld			b,a
  31+ 0000 ~            .SignforHL:                 ld			a,ixl								; get sign bit and or with b
  32+ 0000 ~                                        and			SignOnly8Bit
  33+ 0000 ~                                        or			h
  34+ 0000 ~                                        ld			h,a
  35+ 0000 ~            .SignforDE:                 ld			a,iyh								; get sign bit and or with b
  36+ 0000 ~                                        and			SignOnly8Bit
  37+ 0000 ~                                        or			d
  38+ 0000 ~                                        ld			d,a
  39+ 0000 ~            .SignsDoneSaveResult:	    ld			(SS_BnkZScaled),bc
  40+ 0000 ~                                        ld			(SS_BnkXScaled),hl
  41+ 0000 ~                                        ld			(SS_BnkYScaled),de
  42+ 0000 ~                                        ld			a,b
  43+ 0000 ~                                        ld			(varU),a
  44+ 0000 ~                                        ld			a,c
  45+ 0000 ~                                        ld			(varT),a
  46+ 0000 ~                                        ret
  47+ 0000                                          ENDM
  48+ 0000
# file closed: ./Universe/UniverseMacros/ScaleNodeTo8BitMacro.asm
 144  0000                                      include "./Universe/UniverseMacros/ScaleNormalMacro.asm"
# file opened: ./Universe/UniverseMacros/ScaleNormalMacro.asm
   1+ 0000              ScaleNormalMacro:                            MACRO  p?
   2+ 0000 ~            ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
   3+ 0000 ~            ; returns with XX15 scaled by Q but also z scaled in a register
   4+ 0000 ~            p?_ScaleNormal:
   5+ 0000 ~            .LL93:                                      ld      a,(XX17)                    ; scale--
   6+ 0000 ~                                                        ld		ixl,a
   7+ 0000 ~                                                        ld		a,(p?_BnkZScaled)				; needs to be in a just in case we abort early
   8+ 0000 ~                                                        dec		ixl
   9+ 0000 ~                                                        ret		m							; return if q was 0, i.e. no scaling
  10+ 0000 ~            .ScaleLoop:
  11+ 0000 ~            .LL933:                                     ld      hl,p?_XX15
  12+ 0000 ~                                                        srl     (hl)                        ; XX15	\ xnormal lo/2 \ LL93+3 \ counter X
  13+ 0000 ~                                                        inc     hl							; looking at XX15 x sign now
  14+ 0000 ~                                                        inc     hl							; looking at XX15 y Lo now
  15+ 0000 ~                                                        srl     (hl)                        ; XX15+2	\ ynormal lo/2
  16+ 0000 ~                                                        inc		hl							; looking at XX15 y sign now
  17+ 0000 ~                                                        inc		hl							; looking at XX15 z Lo now
  18+ 0000 ~                                                        srl		(hl)
  19+ 0000 ~                                                        ld		a,(hl)						; znormal lo/2 also into a it came in at the end of LL92
  20+ 0000 ~                                                        dec     ixl                         ; reduce scale
  21+ 0000 ~                                                        jp      p,.ScaleLoop                 ; LL93-3 loop to lsr xx15
  22+ 0000 ~                                                        ret
  23+ 0000                                                          ENDM
  24+ 0000
# file closed: ./Universe/UniverseMacros/ScaleNormalMacro.asm
 145  0000                                      INCLUDE "./Universe/UniverseMacros/BackfaceCullMacro.asm"
# file opened: ./Universe/UniverseMacros/BackfaceCullMacro.asm
   1+ 0000              ;    DEFINE DEBUGDRAWDISTANCE 1
   2+ 0000              ;    DEFINE CHECKDOTSHIPDATA  1
   3+ 0000               ;   DEFINE DEBUGFORCEFACEDRAW 1
   4+ 0000              ; SomeFacesVisible:
   5+ 0000              ; EE29:
   6+ 0000
   7+ 0000              ;   Backface cull logic  line of sight vector . face normal vector
   8+ 0000              ;       line of sight vector . face normal vector
   9+ 0000              ;       => line of sight vector = [x y z] + face normal vector
  10+ 0000              ;       Where [x y z] =
  11+ 0000              ;                                               [ [x y z] . sidev ]
  12+ 0000              ;                    projected [x y z] vector = [ [x y z] . roofv ]
  13+ 0000              ;                                               [ [x y z] . nosev ]
  14+ 0000              ;
  15+ 0000              ;   so project the [x y z] vector into the face's normal space
  16+ 0000              ;  line of sight vector = projected [x y z] vector + face normal vector
  17+ 0000              ;                         [ [x y z] . sidev ]   [ normal_x ]
  18+ 0000              ;                       = [ [x y z] . roofv ] + [ normal_y ]
  19+ 0000              ;                         [ [x y z] . nosev ]   [ normal_z ]
  20+ 0000              ;
  21+ 0000              ;                         [ [x y z] . sidev + normal_x ]
  22+ 0000              ;                       = [ [x y z] . roofv + normal_y ]
  23+ 0000              ;                         [ [x y z] . nosev + normal_z ]
  24+ 0000              ;
  25+ 0000              ; so
  26+ 0000              ;              visibility = [ [x y z] . sidev + normal_x ]   [ normal_x ]
  27+ 0000              ;                            [ [x y z] . roofv + normal_y ] . [ normal_y ]
  28+ 0000              ;                           [ [x y z] . nosev + normal_z ]   [ normal_z ]
  29+ 0000              ;
  30+ 0000              ; where face is visible if visibility < 0
  31+ 0000              ;
  32+ 0000              ;   so we set XX15 to [x y z] . sidev
  33+ 0000              ;                     [x y z] . roofv
  34+ 0000              ;                     [x y z] . nosev
  35+ 0000              ;
  36+ 0000
  37+ 0000
  38+ 0000              ScaleDrawcamMacro:      MACRO p?
  39+ 0000 ~            p?_CurrentNormIdx  DB 0
  40+ 0000 ~
  41+ 0000 ~            p?_ScaleDrawcam:  ld      a,(p?_BnkDrawCam0zHi)         ; if z hi is 0 then we have scaled XX18
  42+ 0000 ~                                    JumpIfAIsZero .ScaleDone            ;
  43+ 0000 ~                                    ld      hl,(p?_BnkDrawCam0xLo)        ; pull postition into registers
  44+ 0000 ~                                    ld      de,(p?_BnkDrawCam0yLo)        ; we only pull in if needed to save fetches
  45+ 0000 ~                                    ld      bc,(p?_BnkDrawCam0zLo)        ;
  46+ 0000 ~            .ScaleNormalLoop:       inc     iyl                         ; Q goes up by one
  47+ 0000 ~                                    ShiftHLRight1                       ; divide cam position by 2
  48+ 0000 ~                                    ShiftDERight1                       ;
  49+ 0000 ~                                    ShiftBCRight1                       ;
  50+ 0000 ~                                    ld      a,b                         ; loop if not scaled down
  51+ 0000 ~                                    JumpIfAIsNotZero .ScaleNormalLoop     ;
  52+ 0000 ~                                    ld      (p?_BnkDrawCam0xLo),hl        ; save position back to XX18
  53+ 0000 ~                                    ld      (p?_BnkDrawCam0yLo),de        ;
  54+ 0000 ~                                    ld      (p?_BnkDrawCam0zLo),bc        ;
  55+ 0000 ~            .ScaleDone:             ld      a,iyl
  56+ 0000 ~                                    ld      (varXX17),a                  ; XX17 = normal scale factor for current ship adjusted for camera
  57+ 0000 ~                                    ret
  58+ 0000                                      ENDM
  59+ 0000
  60+ 0000              CheckVisibleMacro:      MACRO p?
  61+ 0000 ~            p?_CheckVisible:  ld      a,(p?_Bnkzsgn)                 ; Is the ship behind us
  62+ 0000 ~            .CheckBehind:           and     SignOnly8Bit                 ; which means z sign is negative
  63+ 0000 ~                                    jr      nz,.ShipNoDraw               ; .
  64+ 0000 ~            .CheckViewPort:         ld      hl,(p?_Bnkzlo)                 ; now check to see if its within 90 degree arc
  65+ 0000 ~                                    ld      a,h
  66+ 0000 ~                                    JumpIfAGTENusng ShipMaxDistance, .ShipNoDraw
  67+ 0000 ~            .CheckXAxis:            ld      de,(p?_Bnkxlo)                 ; if abs x > abx z then its out side of view port
  68+ 0000 ~                                    call    compare16HLDE
  69+ 0000 ~                                    jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
  70+ 0000 ~            .CheckYAxis:            ld      de,(p?_Bnkylo)                ; if abs y > abx z then its out side of view port
  71+ 0000 ~                                    call    compare16HLDE
  72+ 0000 ~                                    jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
  73+ 0000 ~            .CheckDotV2:            ld      a,(DotAddr)
  74+ 0000 ~                                    JumpIfAGTENusng h, .DrawFull
  75+ 0000 ~                                    jp      .ShipIsADot
  76+ 0000 ~            .DrawFull:              ld      a,(p?_Bnkaiatkecm)            ; its visible but a dot
  77+ 0000 ~                                    or      ShipIsVisible               ; Visible and not a dot
  78+ 0000 ~                                    and     ShipIsNotDot                ;
  79+ 0000 ~                                    ld      (p?_Bnkaiatkecm),a            ;
  80+ 0000 ~                                    ClearCarryFlag
  81+ 0000 ~                                    ret
  82+ 0000 ~            .ShipNoDraw:            ClearMemBitN  p?_Bnkaiatkecm  , ShipIsVisibleBitNbr ; Assume its hidden
  83+ 0000 ~                                    ret
  84+ 0000 ~            .ShipIsADot:            ld      a,(p?_Bnkaiatkecm)            ; its visible but a dot
  85+ 0000 ~                                    or      ShipIsVisible | ShipIsDot   ;
  86+ 0000 ~                                    ld      (p?_Bnkaiatkecm),a            ;
  87+ 0000 ~                                    ret
  88+ 0000                                      ENDM
  89+ 0000
  90+ 0000                                                  DISPLAY "TODO:remove all teh processing of rotmat to load craft to camera as its already been done"
  91+ 0000              CullV2Macro:            MACRO p?
  92+ 0000 ~            p?_CullV2:        break
  93+ 0000 ~                                    ReturnIfMemisZero p?_FaceCtX4Addr      ;
  94+ 0000 ~                                   ; break
  95+ 0000 ~                                    call    p?_CopyRotmatToTransMat        ; XX16 = p?_BnkRotMat
  96+ 0000 ~                                    call    p?_ScaleXX16Matrix197          ; scale rotation matrix in XX16
  97+ 0000 ~                                    call    p?_LoadCraftToCamera           ; XX18 = camera
  98+ 0000 ~                                    ;call    CopyCameraToXX15Signed      ; Copy the camera to XX15 as signed 15 bit
  99+ 0000 ~            .BackfaceLoop:          ld      a,(QAddr)                   ;
 100+ 0000 ~                                    ld      iyl,a                       ; iyl = scale factor
 101+ 0000 ~            ; By this point XX18 = scaled draw cam and iyl = scale factor
 102+ 0000 ~                                    call    p?_ScaleDrawcam                ; XX18 = scaled camera XX17 = scale
 103+ 0000 ~                                    call    p?_CopyCameraToXX15Signed      ; Xx18 -> xx15 sign + 15 bit
 104+ 0000 ~            .LL91:                  call    p?_XX12EquNodeDotXX16          ; xx12 = Scaled Camera . Rotation matrix (Note Xx16 no Xx16 inv)
 105+ 0000 ~                                    call    p?_CopyXX12ScaledToXX18        ; now xx18 = XX12 = xx15.xx16
 106+ 0000 ~            .PrepNormals:           ld      hl,p?_BnkHullNormals                                                                                                 ;;; V = address of Normal start
 107+ 0000 ~                                    ld      (varV),hl
 108+ 0000 ~                                    ld      a,(p?_FaceCtX4Addr)                                        ; For each face
 109+ 0000 ~                                    srl     a                                              ;
 110+ 0000 ~                                    srl     a                                              ;
 111+ 0000 ~                                    ld      b,a                                            ;
 112+ 0000 ~                                    xor     a
 113+ 0000 ~                                    ld      (p?_CurrentNormIdx),a                                          ; used to increment up face incdex as b decrements
 114+ 0000 ~            .ProcessNormalsLoop:    push    hl
 115+ 0000 ~                                    push    bc
 116+ 0000 ~            .LL86:                  ld      a,(hl)                                         ; Get Face sign and visibility distance byte
 117+ 0000 ~                                    and     $1F                                            ; if normal visibility range  < XX4
 118+ 0000 ~                                    push    hl
 119+ 0000 ~                                    ld      hl,p?_BnkDrawAllFaces
 120+ 0000 ~                                    cp      (hl)
 121+ 0000 ~                                    pop     hl
 122+ 0000 ~                                    jp      c,.FaceVisible              ; then we always draw
 123+ 0000 ~            ; This bit needs to be added to force face visible
 124+ 0000 ~            .LL87:                  call    p?_CopyFaceToXX12              ; XX12 = normal (repolaced scale version) as a working copy
 125+ 0000 ~                                    ld      a,(XX17)                    ; a = q scale XX17 cauclated by the call to ScaleDrawcam
 126+ 0000 ~                                    ld      b,a
 127+ 0000 ~                                    JumpIfALTNusng 4,.ScaleNormByXX17   ; if q >= 4 then is so big we don;t factor in + normal for dot product
 128+ 0000 ~            .LL143:                 call    p?_CopyXX18toXX15              ; and we just set XX15 = scaled Camera dot rotation matrix
 129+ 0000 ~                                    jp      .DoneScalingIntoXX15        ; Now Process XX12 normal
 130+ 0000 ~            .Ovflw:                 ld      a,(p?_BnkDrawCam0xLo)         ; divide camera by 2 if overflow
 131+ 0000 ~                                    srl     a                           ; which is held in XX18
 132+ 0000 ~                                    ld      (p?_BnkDrawCam0xLo),a         ; .
 133+ 0000 ~                                    ld      a,(p?_BnkDrawCam0zLo)         ; .
 134+ 0000 ~                                    srl     a                           ; .
 135+ 0000 ~                                    ld      (p?_BnkDrawCam0zLo),a         ; .
 136+ 0000 ~                                    ld      a,(p?_BnkDrawCam0yLo)         ; .
 137+ 0000 ~                                    srl     a                           ; .
 138+ 0000 ~                                    ld      (p?_BnkDrawCam0yLo),a        ; .
 139+ 0000 ~            .ScaleXScaledAgain:     ld      b,1                         ; set scale to 1 so we divide original normal by 2 into face and try again and hope we didn't scaled down XX12 earlier so if we did then we must be in the do doo as the object was obscenely large and very close
 140+ 0000 ~                                    ShiftMem8Right1 p?_BnkXScaled         ; Divide XX15 by 2^B
 141+ 0000 ~                                    ShiftMem8Right1 p?_BnkYScaled         ;
 142+ 0000 ~                                    ShiftMem8Right1 p?_BnkZScaled         ;
 143+ 0000 ~            ; if we jumped to here scale factor < 4 so we copy in normal to XX15 (scaled) LL92
 144+ 0000 ~            .ScaleNormByXX17:       ;ld      b,a
 145+ 0000 ~                                    call    p?_CopyXX12toXX15
 146+ 0000 ~            .LL93                   dec     b
 147+ 0000 ~                                    jp      m, .ScaledNorm
 148+ 0000 ~            .LL93Loop:              ShiftMem8Right1 p?_BnkXScaled        ; Divide XX15 by 2^B, I think this should be really XX12 and is a bug in the original code
 149+ 0000 ~                                    ShiftMem8Right1 p?_BnkYScaled        ;
 150+ 0000 ~                                    ShiftMem8Right1 p?_BnkZScaled        ;
 151+ 0000 ~                                    dec     b                          ;
 152+ 0000 ~                                    jp      p,.LL93Loop                ; Now we have XX15 as scaled Normal, XX15 as camera, don;t really knwo why as cals work on XX12 and XX18
 153+ 0000 ~            .ScaledNorm:            ;ORIG CODE DOES NOT HAVE THIS call    CopyXX15ToXX12 ; DEBUG as XX15 shoudl be a sacled nromal
 154+ 0000 ~            ; Add normal to XX15
 155+ 0000 ~            ; if we jumped here direct from LL143 then XX15 = drawcam scaled by Q, XX12 = face normal unscaled, XX18 = drawcam scaled also
 156+ 0000 ~            ; if we jumped here via scaling       then XX15 = normal scaled by Q,  XX12 = face normal unscaled, XX16 = drawcam scaled
 157+ 0000 ~            ; if we hit an overflow               then XX15 = drawcam scaled by Q  XX12 = face normal unscaled, XX18 = (drawcam scaled / 2 ) / 2^ nbr overflows (if we cam in vai scaling then its a mess?
 158+ 0000 ~            ; So LL94 is wrong as it shoud be operating on XX12 not XX15
 159+ 0000 ~            .LL94:                  ldCopyByte p?_BnkZScaled, varR        ; ldCopyByte  p?_BnkZScaled,     varR  ; if we jumped direct XX15 = drawcam scaled, Xx12 = normal xx18 = drawcam
 160+ 0000 ~                                    ldCopyByte p?_BnkXX12zSign, varS      ; ldCopyByte  p?_BnkYScaled,     varS  ; if we did scaling then xx15 = norm scaled XX18 = drawcam
 161+ 0000 ~                                    ldCopyByte  p?_BnkDrawCam0zLo, varQ   ; AQ = drawcam Z signed
 162+ 0000 ~                                    ld      a,(p?_BnkDrawCam0zSgn)        ; .
 163+ 0000 ~                                    call    SAEquSRPlusAQ               ; SA = drawcam Z dot + z
 164+ 0000 ~                                    jp      c,.Ovflw
 165+ 0000 ~                                    ld      (p?_BnkZScaled),a             ; XX15Z = SA
 166+ 0000 ~                                    ldCopyByte  varS, p?_BnkZScaledSign   ;
 167+ 0000 ~                                    ldCopyByte  p?_BnkXScaled,     varR   ; SR = normal X
 168+ 0000 ~                                    ldCopyByte  p?_BnkXX12xSign,   varS   ; .
 169+ 0000 ~                                    ldCopyByte  p?_BnkDrawCam0xLo, varQ   ; AQ = drawcam x dot
 170+ 0000 ~                                    ld      a,(p?_BnkDrawCam0xSgn)        ; .
 171+ 0000 ~                                    call    SAEquSRPlusAQ               ; SA = normal x + drawcam x dot
 172+ 0000 ~                                    jp      c,.Ovflw
 173+ 0000 ~                                    ld      (p?_BnkXScaled),a             ; XX15Z = SA
 174+ 0000 ~                                    ldCopyByte  varS, p?_BnkXScaledSign   ; .
 175+ 0000 ~                                    ldCopyByte  p?_BnkYScaled, varR       ; SR = normal Y
 176+ 0000 ~                                    ldCopyByte  p?_BnkXX12ySign, varS     ; .
 177+ 0000 ~                                    ldCopyByte  p?_BnkDrawCam0yLo, varQ   ; AQ = drawcam y dot
 178+ 0000 ~                                    ld      a,(p?_BnkDrawCam0ySgn)        ; .
 179+ 0000 ~                                    call    SAEquSRPlusAQ               ; SA = normal y + drawcam y dot
 180+ 0000 ~                                    jp      c,.Ovflw                    ; .
 181+ 0000 ~                                    ld      (p?_BnkYScaled),a             ; XX15 Y = SA
 182+ 0000 ~                                    ldCopyByte   varS, p?_BnkYScaledSign  ; .
 183+ 0000 ~            ; calculate dot product LL89
 184+ 0000 ~            .DoneScalingIntoXX15:   ldCopyByte  p?_BnkXX12xLo, varQ       ; Q = norm X XX12
 185+ 0000 ~                                    ld      a,(p?_BnkXScaled)             ; A = XX15 X
 186+ 0000 ~                                    call    AequAmulQdiv256             ; A = XX15 X * XX 12 X
 187+ 0000 ~                                    ld      (varT),a                    ; T = XX15 X * XX 12 X
 188+ 0000 ~                                    ld      a,(p?_BnkXX12xSign)           ; S = sign of XX15 X * XX12 X
 189+ 0000 ~                                    ld      hl,p?_BnkXScaledSign          ; .
 190+ 0000 ~                                    xor     (hl)                        ; .
 191+ 0000 ~                                    ld      (varS),a                    ; .
 192+ 0000 ~                                    ldCopyByte  p?_BnkXX12yLo, varQ       ; Q = norm Y XX12
 193+ 0000 ~                                    ld      a,(p?_BnkYScaled)             ; A = XX15 Y
 194+ 0000 ~                                    call    AequAmulQdiv256             ; A = XX15 Y * XX 12 Y
 195+ 0000 ~                                    ld      (varQ),a                    ; Q = XX15 Y * XX 12 Y
 196+ 0000 ~                                    ldCopyByte  varT,varR               ; R = XX15 X * XX 12 X
 197+ 0000 ~                                    ld      a,  (p?_BnkXX12ySign)         ; A = sign of XX15 Y * XX 12 Y
 198+ 0000 ~                                    ld      hl, p?_BnkYScaledSign         ; .
 199+ 0000 ~                                    xor     (hl)                        ; .
 200+ 0000 ~                                    call    SAEquSRPlusAQ               ; SA = SR+AQ = (X calc) + (Y calc)
 201+ 0000 ~                                    ld      (varT),a                    ; T = usigned (X calc) + (Y calc)
 202+ 0000 ~                                    ldCopyByte  p?_BnkXX12zLo, varQ       ; Q = XX12 Z
 203+ 0000 ~                                    ld      a,  (p?_BnkZScaled)           ; A = XX15 Z
 204+ 0000 ~                                    call    AequAmulQdiv256             ; A = XX12 Z * XX15 Z
 205+ 0000 ~                                    ld      (varQ),a                    ; Q = XX12 Z * XX15 Z
 206+ 0000 ~                                    ldCopyByte  varT, varR              ; R = usigned (X calc) + (Y calc)
 207+ 0000 ~                                    ld      a,  (p?_BnkZScaledSign)       ; A = sign of XX12 Z * XX15 Z
 208+ 0000 ~                                    ld      hl, p?_BnkXX12zSign           ; .
 209+ 0000 ~                                    xor     (hl)                        ; .
 210+ 0000 ~                                    call    SAEquSRPlusAQ               ; SA = ((X+Y signed)) (Z signed)
 211+ 0000 ~                                    cp      0                           ; was the result 0, if so then there are scenarios where SAEquSRPlusAQ can return -ve 0
 212+ 0000 ~                                    jr      z,.FaceNotVisible           ; in which case face is not visible
 213+ 0000 ~                                    ld      a,(varS)                    ; if the cacl was a negative number then its visible
 214+ 0000 ~                                    test    $80                         ; this should test S not A
 215+ 0000 ~                                    jr      nz,.FaceVisible                                      ;        if dot product < 0 set face visible
 216+ 0000 ~            .FaceNotVisible:        ld      a,(p?_CurrentNormIdx)
 217+ 0000 ~                                    call    p?_SetFaceAHidden                                      ;           set face invisible
 218+ 0000 ~                                    jp      .ProcessNormalLoopEnd                                ;        end if
 219+ 0000 ~            .FaceVisible:           ld      a,(p?_CurrentNormIdx)
 220+ 0000 ~                                    call    p?_SetFaceAVisible
 221+ 0000 ~            .ProcessNormalLoopEnd:  ld      hl, p?_CurrentNormIdx
 222+ 0000 ~                                    inc     (hl)                    ; move index pointer up by one
 223+ 0000 ~                                    pop     bc
 224+ 0000 ~                                    pop     hl                      ; get normal data pointer back
 225+ 0000 ~                                    ld      a,4
 226+ 0000 ~                                    add     hl,a                    ; move to next normal entry
 227+ 0000 ~                                    ld      (varV),hl               ; save as we need it again
 228+ 0000 ~                                    dec     b
 229+ 0000 ~                                    jp      nz,.ProcessNormalsLoop
 230+ 0000 ~                                    ret
 231+ 0000                                      ENDM
 232+ 0000
# file closed: ./Universe/UniverseMacros/BackfaceCullMacro.asm
 146  0000                                      INCLUDE "./Universe/UniverseMacros/DrawLinesMacros.asm"
# file opened: ./Universe/UniverseMacros/DrawLinesMacros.asm
   1+ 0000
   2+ 0000
   3+ 0000              ; ---------------------------------------------------------------------------------------------------------------------------------
   4+ 0000              DrawLinesLateClippingMacro:         MACRO p?
   5+ 0000 ~            p?_DrawLinesLateClipping:     ld	    a,$65 ; DEBUG
   6+ 0000 ~                                                ld      iyl,a					      ; set ixl to colour (assuming we come in here with a = colour to draw)
   7+ 0000 ~                                                ld	    a,(p?_BnkLineArrayLen)			; get number of lines
   8+ 0000 ~                                                ReturnIfAIsZero   				; No lines then bail out.
   9+ 0000 ~                                                ld	    iyh,a			                  ; number of lines still to draw
  10+ 0000 ~                                                ld	    hl,p?_BnkLineArray
  11+ 0000 ~                                                MMUSelectLayer2
  12+ 0000 ~                                                ld      a,$BF
  13+ 0000 ~                                                ld      (line_gfx_colour),a
  14+ 0000 ~            .LateDrawLinesLoop:                 ld      de,x1
  15+ 0000 ~                                                FourLDIInstrunctions
  16+ 0000 ~                                                FourLDIInstrunctions
  17+ 0000 ~                                                push  hl,,iy
  18+ 0000 ~                                                call    l2_draw_6502_line
  19+ 0000 ~                                                jp      c,.LateNoLineToDraw
  20+ 0000 ~            .PreLate:                           push    hl,,bc,,de,,iy
  21+ 0000 ~                                                ld      a,(x1)
  22+ 0000 ~                                                ld      c,a
  23+ 0000 ~                                                ld      a,(y1)
  24+ 0000 ~                                                ld      b,a
  25+ 0000 ~                                                ld      a,(x2)
  26+ 0000 ~                                                ld      e,a
  27+ 0000 ~                                                ld      a,(y2)
  28+ 0000 ~                                                ld      d,a
  29+ 0000 ~                                                ; bc = y0,x0 de=y1,x1,a=color)
  30+ 0000 ~                                                ld	    a, $D5 ; colour
  31+ 0000 ~                                                MMUSelectLayer2
  32+ 0000 ~            .LateLine:                          call    l2_draw_elite_line; l2_draw_diagonal
  33+ 0000 ~                                                pop     hl,,bc,,de,,iy
  34+ 0000 ~            .LateNoLineToDraw:                  pop   hl,,iy
  35+ 0000 ~                                                dec   iyh
  36+ 0000 ~                                                jr	nz, .LateDrawLinesLoop
  37+ 0000 ~                                                ret                                     ; --- Wireframe end  \ LL118-1
  38+ 0000                                                  ENDM
  39+ 0000
# file closed: ./Universe/UniverseMacros/DrawLinesMacros.asm
 147  0000                                      INCLUDE "./Universe/UniverseMacros/PrepLinesMacros.asm"
# file opened: ./Universe/UniverseMacros/PrepLinesMacros.asm
   1+ 0000
   2+ 0000              ;--------------------------------------------------------------------------------------------------------
   3+ 0000              getVertexNodeAtAToDEMacro:      MACRO p?
   4+ 0000 ~            p?_getVertexNodeAtAToDE:  ld          hl,p?_BnkNodeArray                    ; hl = edgelist  current pointer
   5+ 0000 ~                                            add         hl,a                                ; hl = address of Node
   6+ 0000 ~                                            ld          a,(hl)                              ; get edge list nbr 1 edge
   7+ 0000 ~                                            ldi                                             ; x1 lo
   8+ 0000 ~                                            ldi                                             ; x1 hi
   9+ 0000 ~                                            ldi                                             ; y1 lo
  10+ 0000 ~                                            ldi                                             ; y1 hi
  11+ 0000 ~                                            ret
  12+ 0000                                              ENDM
  13+ 0000
  14+ 0000              GetFaceAtAMacro:                MACRO p?
  15+ 0000 ~            p?_GetFaceAtA:            ld          hl,p?_BnkFaceVisArray
  16+ 0000 ~                                            add         hl,a
  17+ 0000 ~                                            ld          a,(hl)                              ; get face visibility
  18+ 0000 ~                                            ret
  19+ 0000                                              ENDM
  20+ 0000
  21+ 0000
  22+ 0000              ;--------------------------------------------------------------------------------------------------------
  23+ 0000              ;--------------------------------------------------------------------------------------------------------
  24+ 0000              ; LL72 Goes through each edge in to determine if they are on a visible face, if so load start and end to line array as clipped lines
  25+ 0000               ;   DEFINE NOBACKFACECULL 1
  26+ 0000              PrepLinesMacro:                 MACRO p?
  27+ 0000 ~
  28+ 0000 ~            p?_PLEDGECTR              DB          0
  29+ 0000 ~            p?_PrepLines:
  30+ 0000 ~            ; FOR NOW BRUTE FORCE IF OFF SCREEN
  31+ 0000 ~
  32+ 0000 ~            ; TODO add in onced DOEXP is finished
  33+ 0000 ~            ;        ld          a,(p?_BnkexplDsp)                     ; INWK+31  \ display/exploding state|missiles
  34+ 0000 ~            ;        JumpOnBitClear  a,5,EE31                        ; bit5 of mask, if zero no explosion
  35+ 0000 ~            ;        or          8
  36+ 0000 ~            ;        ld          (p?_BnkexplDsp),a                     ; else else set bit3 to erase old line
  37+ 0000 ~            ;        jp          DOEXP                               ; erase using Do Explosion and use implicit return
  38+ 0000 ~            ;EE31:                                                   ; no explosion
  39+ 0000 ~            ;        JumpOnBitClear  a,3,LL74                        ; clear is hop to do New lines
  40+ 0000 ~            ;        call        ClearLine                           ; LL155    \ else erase lines in XX19 heap at LINEstr down
  41+ 0000 ~            ;        ld          a, $08                              ; set bit 3 of a and fall into LL74
  42+ 0000 ~            ;
  43+ 0000 ~            ;--------------------------------------------------------------------------------------------------------
  44+ 0000 ~            .InitialiseLineRead:            break
  45+ 0000 ~                                            ldWriteZero p?_BnkLineArrayLen                    ; current line array index = 0
  46+ 0000 ~                                            ld          (p?_BnkLineArrayBytes),a              ; p?_BnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
  47+ 0000 ~                                            ld          (p?_PLEDGECTR),a
  48+ 0000 ~                                            ld          a,(p?_EdgeCountAddr)
  49+ 0000 ~                                            ld          ixh,a                               ; ixh = XX17 = Total number of edges to traverse
  50+ 0000 ~                                            ld          iyl,0                               ; ixl = current edge index
  51+ 0000 ~                                            ld          hl,p?_BnkLineArray                    ; head of array
  52+ 0000 ~                                            ld          (varU16),hl                         ; store current line array pointer un varU16
  53+ 0000 ~                                            ldCopyByte  p?_EdgeCountAddr, XX17        ; XX17  = total number of edges to traverse edge counter
  54+ 0000 ~                                            ld          a,(p?_BnkexplDsp)                     ; get explosion status
  55+ 0000 ~                                            JumpOnBitClear a,6,.CalculateNewLines            ; LL170 bit6 of display state clear (laser not firing) \ Calculate new lines
  56+ 0000 ~                                            and         $BF                                 ; else laser is firing, clear bit6.
  57+ 0000 ~                                            ld          (p?_BnkexplDsp),a                     ; INWK+31
  58+ 0000 ~            ;   TODO commentedout as teh subroutine is a mess   call        AddLaserBeamLine                    ; add laser beam line to draw list
  59+ 0000 ~            ; NOw we can calculate hull after including laser line
  60+ 0000 ~            .CalculateNewLines:
  61+ 0000 ~            .LL170:                                                  ;(laser not firing) \ Calculate new lines   \ their comment
  62+ 0000 ~            .CheckEdgesForVisibility:        ld          hl,p?_BnkHullEdges
  63+ 0000 ~                    ; TODO change heap to 3 separate arrays and break them down during copy of ship hull data
  64+ 0000 ~                                            ld          (varV),hl                           ; V \ is pointer to where edges data start
  65+ 0000 ~                                            ld          a,(p?_LineX4Addr)
  66+ 0000 ~                                            ld          b,a                                 ; nbr of bytes of edge data
  67+ 0000 ~            .LL75Loop:                                               ; count Visible edges
  68+ 0000 ~            .IsEdgeInVisibilityRange:       ld          hl,(varV)
  69+ 0000 ~                                            push        hl
  70+ 0000 ~                                            pop         iy
  71+ 0000 ~                                            ld          a,(LastNormalVisible)               ; XX4 is visibility range
  72+ 0000 ~                                            ld          d,a                                 ; d holds copy of XX4
  73+ 0000 ~            ; Get Edge Byte 0
  74+ 0000 ~                                            ld          a,(IY+0)                            ; edge data byte#0 is visibility distance
  75+ 0000 ~                                            JumpIfALTNusng d,.LL78EdgeNotVisible             ; XX4   \ visibility LLx78 edge not visible
  76+ 0000 ~            ; Get Edge Byte 1
  77+ 0000 ~            .EdgeMayBeVisibile:
  78+ 0000 ~            ; edges have 2 faces to test
  79+ 0000 ~            .IsFace1Visibile:               ld          a,(IY+1)                            ; (V),Y \ edge data byte#1 bits 0 to 3 face 1 4 to 7 face 2
  80+ 0000 ~                                            ld          c,a                                 ;  c = a copy of byte 1
  81+ 0000 ~                                            and         $0F                                 ;
  82+ 0000 ~                                            call        p?_GetFaceAtA
  83+ 0000 ~            ;       jp  VisibileEdge; DEBUG BODGE TEST TODO
  84+ 0000 ~                                            JumpIfAIsNotZero .VisibileEdge                     ; LL70 visible edge
  85+ 0000 ~            .IsFace2Visibile:               ld          a,c                                 ; restore byte 1 from c register
  86+ 0000 ~                                            swapnib                                         ;
  87+ 0000 ~                                            and         $0F                                 ; swap high byte into low byte
  88+ 0000 ~                                            push        hl
  89+ 0000 ~                                            call        p?_GetFaceAtA
  90+ 0000 ~                                            pop         hl
  91+ 0000 ~                                            JumpIfAIsZero .LL78EdgeNotVisible                ; edge not visible
  92+ 0000 ~            ;LL79--Visible edge--------------------------------------
  93+ 0000 ~            ; Get Edge Byte 2
  94+ 0000 ~            ; Now we need to node id from bytes 2 - start and 3 - end
  95+ 0000 ~            .VisibileEdge:                  ld          a,(IY+2)                            ; get Node id
  96+ 0000 ~                                            ld          de,p?_BnkX1
  97+ 0000 ~                                            call        p?_getVertexNodeAtAToDE; getVertexNodeAtAToX1Y1              ; get the points X1Y1 from node
  98+ 0000 ~                                            ld          a,(IY+3)
  99+ 0000 ~                                            ld          de,p?_BnkX2
 100+ 0000 ~                                            call        p?_getVertexNodeAtAToDE; getVertexNodeAtAToX2Y2              ; get the points X2Y2 from node
 101+ 0000 ~                                     ; ll80 \ Shove visible edge onto XX19 ship lines heap counter U
 102+ 0000 ~            .LL80:
 103+ 0000 ~                                            ld          de,(varU16)                         ; clipped edges heap address
 104+ 0000 ~                                            ld          hl,p?_BnkPreClipX1
 105+ 0000 ~                                            FourLDIInstrunctions
 106+ 0000 ~                                            FourLDIInstrunctions
 107+ 0000 ~                                            ld          (varU16),de                         ; update U16 with current address
 108+ 0000 ~                                            ld          hl,p?_BnkLineArrayLen                 ; we have loaded one line
 109+ 0000 ~                                            inc         (hl)
 110+ 0000 ~                                            ld          a,(hl)
 111+ 0000 ~                                            JumpIfAGTENusng LineArraySize,.CompletedLineGeneration   ; have we hit max lines for a model hop over jmp to Exit edge data loop
 112+ 0000 ~            ; If we hit here we skip the write of line arryay u16
 113+ 0000 ~            .LL78EdgeNotVisible:                                     ; also arrive here if Edge not visible, loop next data edge.
 114+ 0000 ~            .LL78:                          ld          hl,(varV)                           ; varV is current edge address
 115+ 0000 ~                                            ld          a,4
 116+ 0000 ~                                            add         hl,a
 117+ 0000 ~                                            ld          (varV),hl
 118+ 0000 ~                                            ld          hl,p?_PLEDGECTR                        ;
 119+ 0000 ~                                            inc         (hl)                                ;
 120+ 0000 ~                                            ld          a,(hl)                              ; current edge index ++
 121+ 0000 ~                                            JumpIfANEMemusng XX17,.LL75Loop                 ; compare with total number of edges
 122+ 0000 ~            .CompletedLineGeneration:
 123+ 0000 ~            .LL81:
 124+ 0000 ~            ; SHPPT ship is a point arrives here with Acc=2, bottom entry in heap
 125+ 0000 ~            .LL81SHPPT:                     ld          a,(p?_BnkLineArrayLen)                ; p?_BnkLineArrayLen = nbr of lines loaded
 126+ 0000 ~                                            sla         a
 127+ 0000 ~                                            sla         a                                   ; multiple by 4 to equal number of bytes
 128+ 0000 ~                                            sla         a                           ; multiple by 8 to equal number of bytes
 129+ 0000 ~                                            ld          (p?_BnkLineArrayBytes),a              ; p?_BnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
 130+ 0000 ~            .ExitEdgeDataLoop:              ret
 131+ 0000                                              ENDM
 132+ 0000
# file closed: ./Universe/UniverseMacros/PrepLinesMacros.asm
 148  0000                                      INCLUDE "./Data/ShipIdEquates.asm"
# file opened: ./Data/ShipIdEquates.asm
   1+ 0000
   2+ 0000
   3+ 0000
   4+ 0000              ShipID_Adder            EQU 00
   5+ 0000              ShipID_Anaconda         EQU 01
   6+ 0000              ShipID_Asp_Mk_2         EQU 02
   7+ 0000              ShipID_Boa              EQU 03
   8+ 0000              ShipID_CargoType5       EQU 04
   9+ 0000              ShipID_Boulder          EQU 05
  10+ 0000              ShipID_Asteroid         EQU 06
  11+ 0000              ShipID_Bushmaster       EQU 07
  12+ 0000              ShipID_Chameleon        EQU 08
  13+ 0000              ShipID_CobraMk3         EQU 09
  14+ 0000              ShipID_Cobra_Mk_1       EQU 10
  15+ 0000              ShipID_Cobra_Mk_3_P     EQU 11
  16+ 0000              ShipID_Constrictor      EQU 12
  17+ 0000              ShipID_Coriolis         EQU 13
  18+ 0000              ShipID_Cougar           EQU 14
  19+ 0000              ShipID_Dodo             EQU 15
  20+ 0000              ShipID_Dragon           EQU 16
  21+ 0000              ShipID_Escape_Pod       EQU 17
  22+ 0000              ShipID_Fer_De_Lance     EQU 18
  23+ 0000              ShipID_Gecko            EQU 19
  24+ 0000              ShipID_Ghavial          EQU 20
  25+ 0000              ShipID_Iguana           EQU 21
  26+ 0000              ShipID_Krait            EQU 22
  27+ 0000              ShipID_Logo             EQU 23
  28+ 0000              ShipID_Mamba            EQU 24
  29+ 0000              ShipID_Missile          EQU 25
  30+ 0000              ShipID_Monitor          EQU 26
  31+ 0000              ShipID_Moray            EQU 27
  32+ 0000              ShipID_Ophidian         EQU 28
  33+ 0000              ShipID_Plate            EQU 29
  34+ 0000              ShipID_Python           EQU 30
  35+ 0000              ShipID_Python_P         EQU 31
  36+ 0000              ShipID_Rock_Hermit      EQU 32
  37+ 0000              ShipID_ShuttleType9     EQU 33
  38+ 0000              ShipID_Shuttle_Mk_2     EQU 34
  39+ 0000              ShipID_Sidewinder       EQU 35
  40+ 0000              ShipID_Splinter         EQU 36
  41+ 0000              ShipID_TestVector       EQU 37
  42+ 0000              ShipID_Thargoid         EQU 38
  43+ 0000              ShipID_Thargon          EQU 39
  44+ 0000              ShipID_TransportType10  EQU 40
  45+ 0000              ShipID_Viper            EQU 41
  46+ 0000              ShipID_Worm             EQU 42
  47+ 0000              ShipID_Rattler          EQU 43
  48+ 0000
# file closed: ./Data/ShipIdEquates.asm
 149  0000
 150  0000
 151  0000                  IFNDEF  LASER_V2
 152  0000 ~            UpdateLaserCountersold: MACRO
 153  0000 ~                                    JumpIfMemZero CurrLaserPulseOnCount,   .SkipPulseOn     ; if beam on count > 0 then beam on count --
 154  0000 ~                                    dec     a                                               ; .
 155  0000 ~                                    ld      (CurrLaserPulseOnCount),a                       ; .
 156  0000 ~            .SkipPulseOn:           JumpIfAIsNotZero  .SkipRestCounter                      ;    if beam on = 0 then
 157  0000 ~                                    ld      a,(CurrLaserPulseOffCount)                      ;       if beam off > 0 then  beam off --
 158  0000 ~                                    JumpIfMemZero CurrLaserPulseOffCount, .SkipPulseOff     ;       .
 159  0000 ~                                    dec     a                                               ;       .
 160  0000 ~                                    ld      (CurrLaserPulseOffCount),a                      ;       .
 161  0000 ~            .SkipPulseOff:          JumpIfAIsNotZero  .SkipRestCounter                      ;       if beam off = 0
 162  0000 ~                                    JumpIfMemZero CurrLaserPulseRestCount, .ZeroRateCounter ;
 163  0000 ~                                    dec     a
 164  0000 ~                                    ld      (CurrLaserPulseRestCount),a
 165  0000 ~                                    jr      nz,.SkipRestCounter
 166  0000 ~            .ZeroRateCounter:       ld      (CurrLaserPulseRateCount),a
 167  0000 ~            .SkipRestCounter:
 168  0000 ~                                    ENDM
 169  0000                  ENDIF
 170  0000              MessageAt:              MACRO   x,y,message
 171  0000 ~                                    MMUSelectLayer1
 172  0000 ~                                    ld      d,y
 173  0000 ~                                    ld      e,x
 174  0000 ~                                    ld      hl,message
 175  0000 ~                                    call    l1_print_at_wrap
 176  0000                                      ENDM
 177  0000
 178  0000              SetBorder:              MACRO   value
 179  0000 ~                                    MMUSelectLayer1
 180  0000 ~                                    ld          a,value
 181  0000 ~                                    call        l1_set_border
 182  0000                                      ENDM
 183  0000
 184  0000              charactersetaddr		equ 15360
 185  0000              STEPDEBUG               equ 1
 186  0000              ;-- STACK MEMORY AREA -------------------------------------------------------------------------------------------------
 187  0000              TopOfStack              equ $5CCB ;$6100
 188  0000              ;-- CODE STARTS HERE  -------------------------------------------------------------------------------------------------
 189  0000                                      ORG $5DCB;      $6200
 190  5DCB F3           EliteNextStartup:       di
 191  5DCC              ;-- INITIALISE BASICS OF HARDWARE -------------------------------------------------------------------------------------
 192  5DCC CD DE AB     .InitiliseFileIO:       call        GetDefaultDrive
 193  5DCF ED 91 07 03  .InitialiseClockSpeed:  nextreg     TURBO_MODE_REGISTER,Speed_28MHZ
 194  5DD3              .InitialiseLayerOrder:
 195  5DD3                                      DISPLAY "Starting Assembly At ", EliteNextStartup
 196  5DD3                                      ; "STARTUP"
 197  5DD3                                      ; Make sure  rom is in page 0 during load
 198  5DD3                                      MMUSelectSpriteBank
 198  5DD3 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 199  5DD7 CD 94 E5                             call		init_sprites
 200  5DDA                                      MMUSelectLayer2
 200  5DDA ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 201  5DDE CD 0F E0                             call        asm_disable_l2_readwrite
 202  5DE1                                      MMUSelectROMS
 202  5DE1 ED 91 50 FF >                     nextreg EXSDOSMMU0,        BankROM
 202  5DE5 ED 91 51 FF >                     nextreg EXSDOSMMU1,        BankROM
 203  5DE9 ED 91 06 01  .InitialisePeripherals: nextreg     PERIPHERAL_2_REGISTER, AUDIO_CHIPMODE_AY ; Enable Turbo Sound
 204  5DED ED 91 08 52                          nextreg     PERIPHERAL_3_REGISTER, DISABLE_RAM_IO_CONTENTION | ENABLE_TURBO_SOUND | INTERNAL_SPEAKER_ENABLE
 205  5DF1 ED 91 09 00                          nextreg     PERIPHERAL_4_REGISTER, %00000000
 206  5DF5 ED 91 68 10                          nextreg     ULA_CONTROL_REGISTER,  %00010000                ; set up ULA CONRTROL may need to change bit 0 at least, but bit 4 is separate extended keys from main matrix
 207  5DF9                                      MMUSelectSound
 207  5DF9 ED 91 57 64 >                     nextreg SoundMMU,		    BankSound
 208  5DFD CD 4B E0                             call        InitAudio
 209  5E00 3E B0        .InitialiseInterrupts:  ld	        a,VectorTable>>8
 210  5E02 ED 47                                ld	        i,a						                        ; im2 table will be at address 0xa000
 211  5E04 ED 91 22 06                          nextreg     LINE_INTERRUPT_CONTROL_REGISTER,%00000110       ; Video interrup on
 212  5E08 ED 91 23 00                          nextreg     LINE_INTERRUPT_VALUE_LSB_REGISTER,0   ; lasta line..
 213  5E0C ED 5E                                im	2
 214  5E0E              ;-- INITIALISE COMMANDER DEFAULTS -------------------------------------------------------------------------------------
 215  5E0E              .GenerateDefaultCmdr:   MMUSelectCommander
 215  5E0E ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
 216  5E12 CD 52 E2                             call		defaultCommander
 217  5E15 CD 18 E2                             call        saveCommander
 218  5E18                                      MMUSelectLayer1
 218  5E18 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 219  5E1C CD 8F E0                             call		l1_cls
 220  5E1F 3E 07                                ld			a,7
 221  5E21 CD AA E0                             call		l1_attr_cls_to_a
 222  5E24                                      SetBorder   $FF
 222  5E24             >                        MMUSelectLayer1
 222  5E24 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 222  5E28 3E FF       >                        ld          a,$FF
 222  5E2A CD B4 E0    >                        call        l1_set_border
 223  5E2D              ;-- INITIALISE LAYER 2 GRAPHICS ---------------------------------------------------------------------------------------
 224  5E2D              .InitialiseL2:          MMUSelectLayer2
 224  5E2D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 225  5E31 CD 45 E2                             call 		l2_initialise
 226  5E34              ;-- INITIALISE MESSAGING QUEUE ----------------------------------------------------------------------------------------
 227  5E34              .InitialisingMessage:   MessageAt   0,0,InitialiseMessage
 227  5E34             >                        MMUSelectLayer1
 227  5E34 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 227  5E38 16 00       >                        ld      d,0
 227  5E3A 1E 00       >                        ld      e,0
 227  5E3C 21 7A 67    >                        ld      hl,InitialiseMessage
 227  5E3F CD 24 E1    >                        call    l1_print_at_wrap
 228  5E42                                      SetBorder   $01
 228  5E42             >                        MMUSelectLayer1
 228  5E42 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 228  5E46 3E 01       >                        ld          a,$01
 228  5E48 CD B4 E0    >                        call        l1_set_border
 229  5E4B                                      MessageAt   0,8,LoadingSpritesMessage
 229  5E4B             >                        MMUSelectLayer1
 229  5E4B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 229  5E4F 16 08       >                        ld      d,8
 229  5E51 1E 00       >                        ld      e,0
 229  5E53 21 86 67    >                        ld      hl,LoadingSpritesMessage
 229  5E56 CD 24 E1    >                        call    l1_print_at_wrap
 230  5E59                                      ZeroA
 230  5E59 AF          >                        xor a
 231  5E5A 32 AA 67                             ld          (LoadCounter),a
 232  5E5D              ;-- INITIALISE SPRITE DATA --------------------------------------------------------------------------------------------
 233  5E5D              .StreamSpriteData:      MMUSelectSpriteBank
 233  5E5D ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 234  5E61 CD 20 E6                             call        load_pattern_files
 235  5E64                                      MMUSelectKeyboard
 235  5E64 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 236  5E68 CD F7 E0                             call        init_keyboard
 237  5E6B              ;-- SPRITE VERIFICATION AND WAIT FOR KEYPRESS -------------------------------------------------------------------------
 238  5E6B              .PostDiag:              ClearForceTransition
 238  5E6B 3E FF       >                        ld      a,$FF
 238  5E6D 32 8C 6A    >                        ld      (ScreenTransitionForced),a
 239  5E70                                      SetBorder   $04
 239  5E70             >                        MMUSelectLayer1
 239  5E70 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 239  5E74 3E 04       >                        ld          a,$04
 239  5E76 CD B4 E0    >                        call        l1_set_border
 240  5E79                                      MMUSelectSpriteBank
 240  5E79 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 241  5E7D CD AF E5                             call        sprite_diagnostic
 242  5E80                                      SetBorder   $05
 242  5E80             >                        MMUSelectLayer1
 242  5E80 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 242  5E84 3E 05       >                        ld          a,$05
 242  5E86 CD B4 E0    >                        call        l1_set_border
 243  5E89              .PostDiag2:             MMUSelectKeyboard
 243  5E89 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 244  5E8D CD F7 E1                             call        WaitForAnyKey
 245  5E90                                      MMUSelectSpriteBank
 245  5E90 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 246  5E94 CD 9F E5                             call        sprite_diagnostic_clear
 247  5E97              ;-- INITIALISE TIDY NORMALS COUNTER -----------------------------------------------------------------------------------
 248  5E97 3E 10        TidyInitialise:         ld          a,16
 249  5E99 32 2A 69                             ld          (TidyCounter),a
 250  5E9C AF           InitJoyStick            xor			a
 251  5E9D 32 88 7E                             ld      (JSTX),a
 252  5EA0              DEBUGCODE:              ClearSafeZone ; just set in open space so compas treacks su n
 252  5EA0 3E FF       >                        ld      a,$FF
 252  5EA2 32 19 80    >                        ld      (SpaceStationSafeZone),a
 253  5EA5                                      SetBorder   $06
 253  5EA5             >                        MMUSelectLayer1
 253  5EA5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 253  5EA9 3E 06       >                        ld          a,$06
 253  5EAB CD B4 E0    >                        call        l1_set_border
 254  5EAE                                      MMUSelectUniverseN  0
 254  5EAE ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 255  5EB2                                      MMUSelectLayer2
 255  5EB2 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 256  5EB6              ;.ClearLayer2Buffers:    DoubleBufferIfPossible
 257  5EB6              ;                        DoubleBufferIfPossible
 258  5EB6              ; Set up all 8 galaxies, 7later this will be pre built and loaded into memory from files
 259  5EB6                                      SetBorder   $07
 259  5EB6             >                        MMUSelectLayer1
 259  5EB6 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 259  5EBA 3E 07       >                        ld          a,$07
 259  5EBC CD B4 E0    >                        call        l1_set_border
 260  5EBF              InitialiseGalaxies:     MessageAt   0,24,InitialisingGalaxies
 260  5EBF             >                        MMUSelectLayer1
 260  5EBF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 260  5EC3 16 18       >                        ld      d,24
 260  5EC5 1E 00       >                        ld      e,0
 260  5EC7 21 95 67    >                        ld      hl,InitialisingGalaxies
 260  5ECA CD 24 E1    >                        call    l1_print_at_wrap
 261  5ECD CD 8D 6A                             call		ResetUniv                       ; Reset ship data
 262  5ED0 CD B5 6A                             call        ResetGalaxy                     ; Reset each galaxy copying in code
 263  5ED3 CD DE 6A                             call        SeedAllGalaxies
 264  5ED6                                      MMUSelectSpriteBank
 264  5ED6 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 265  5EDA CD 8A E5                             call        sprite_cls_all
 266  5EDD                                      MMUSelectLayer1
 266  5EDD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 267  5EE1 CD 8F E0                             call		l1_cls
 268  5EE4                                      SetBorder   $00
 268  5EE4             >                        MMUSelectLayer1
 268  5EE4 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 268  5EE8 3E 00       >                        ld          a,$00
 268  5EEA CD B4 E0    >                        call        l1_set_border
 269  5EED                              IFDEF SKIPATTRACT
 270  5EED ~                                    DISPLAY "INITGALAXIES SKIP ATTRACT"
 271  5EED ~                                    jp DefaultCommander
 272  5EED                              ELSE
 273  5EED                                      DISPLAY "INITGALAXIES ATTRACT ENABLED"
 274  5EED F3           StartAttractMode:       di                                          ; we are changing interrupts
 275  5EEE                                      MMUSelectSound
 275  5EEE ED 91 57 64 >                     nextreg SoundMMU,		    BankSound
 276  5EF2 CD B7 E0                             call        InitAudioMusic
 277  5EF5 21 0D B2                             ld          hl,AttractInterrrupt
 278  5EF8 22 C4 B1                             ld          (IM2SoundHandler+1),hl
 279  5EFB CD 4A 78                             call        AttractModeInit
 280  5EFE FB                                   ei
 281  5EFF CD 9F 78                             call        AttractModeMain                 ; now drive attact mode keyboard scan
 282  5F02 F3                                   di                                          ; set up for main
 283  5F03 21 D7 B1                             ld          hl,SoundInterrupt               ; sound handler
 284  5F06 22 C4 B1                             ld          (IM2SoundHandler+1),hl
 285  5F09                                      MMUSelectSound
 285  5F09 ED 91 57 64 >                     nextreg SoundMMU,		    BankSound
 286  5F0D CD 4B E0                             call        InitAudio                       ; jsut re-init all audio for now rather than sound off
 287  5F10                                      IFDEF MAIN_INTERRUPTENABLE
 288  5F10                                          DISPLAY "Main Interrupt Enabled"
 289  5F10 FB                                       ei
 290  5F11                                      ELSE
 291  5F11 ~                                        DISPLAY "Main Interrupt Disabled"
 292  5F11                                      ENDIF
 293  5F11                                      JumpIfAIsZero  SkipDefaultCommander
 293  5F11 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 293  5F12 CA 1F 5F    >                        jp	    z, SkipDefaultCommander
 294  5F15                              ENDIF
 295  5F15              DefaultCommander:       MMUSelectCommander
 295  5F15 ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
 296  5F19 CD 52 E2                             call		defaultCommander
 297  5F1C C3 1F 5F                             jp          InitialiseMainLoop
 297  5F1F
 298  5F1F              SkipDefaultCommander:
 299  5F1F              ;                        call    FindNextFreeSlotInA
 300  5F1F              ;                        ld      b,a
 301  5F1F              ;                        ld      a,13 ;Coriolis station
 302  5F1F              ;                        call    InitialiseShipAUnivB
 303  5F1F              ;                        xor     a
 304  5F1F CD 3C 83     InitialiseMainLoop:     call    InitMainLoop
 305  5F22              ;..MAIN GAME LOOP..................................................................................................................
 306  5F22              ; MACRO BLOCKS.....................................................................................................................
 307  5F22              ;.. Check if keyboard scanning is allowed by screen. If this is set then skip all keyboard and AI..................................
 308  5F22
 309  5F22
 310  5F22
 311  5F22              ; if beam on count > 0
 312  5F22              ;    then beam on count --
 313  5F22              ;         if beam on count = 0
 314  5F22              ;            then beam off count = beam off
 315  5F22              ; if beam off > 0
 316  5F22              ;    then beam off --
 317  5F22              ;         if beam off = 0 and pulse rate count = max count
 318  5F22              ;            then pulse rest count = pulse rest
 319  5F22              ; if pulse rest > 0 then pulse rest --
 320  5F22              ;    if pulse rest = 0
 321  5F22              ;       then pulse rate count = 0
 322  5F22
 323  5F22
 324  5F22              ; counter logic
 325  5F22              ;    if beam on count > 0 then beam on count --
 326  5F22              ;    if beam on = 0 then
 327  5F22              ;       if beam off count >0 then beam off count --
 328  5F22              ;       if beam off count = 0 them
 329  5F22              ;          if pulse rest count > 0 then pulse rest count --
 330  5F22              ;             if reset count = 0 then pulse rate count = 0
 331  5F22              ; shoting logic
 332  5F22              ;    if pulse on count is 0 and pulse off count is 0 and rest count is 0
 333  5F22              ;       then  if fire pressed is OK
 334  5F22              ;                if not beam type
 335  5F22              ;                   then pulse rate count ++
 336  5F22              ;                        if pulse rate count < pulse max count
 337  5F22              ;                           then pulse on count = pulse on time
 338  5F22              ;                                pulse off count = pulse off time
 339  5F22              ;                                pulse rest count = pulse rest time
 340  5F22              ;                           else pulse rest count = pulse rest time
 341  5F22              ;                                pulse rate count, pulse on count, pulse off count = 0
 342  5F22              ;                   else pulse on count = $FF
 343  5F22              ;                        pulse off time , rest time = 0
 344  5F22
 345  5F22              ;..................................................................................................................................
 346  5F22                                      INCLUDE "./GameEngine/MainLoop.asm"
# file opened: ./GameEngine/MainLoop.asm
   1+ 5F22
   2+ 5F22
   3+ 5F22              ;.................................................................................................................................
   4+ 5F22 CD 0A 85     MainLoop:	        call    doRandom                                                ; redo the seeds every frame
   5+ 5F25                              IFDEF LASER_V2
   6+ 5F25 CD FE 61                             call    LaserBeamV2
   7+ 5F28                              ELSE
   8+ 5F28 ~                                    UpdateLaserOnCounter
   9+ 5F28 ~                                    UpdateLaserOffCounter
  10+ 5F28 ~                                    UpdateLaserRestCounter
  11+ 5F28 ~                                    CoolLasers
  12+ 5F28                              ENDIF
  13+ 5F28                              IFDEF MAINLOOP_ECM
  14+ 5F28                                      INCLUDE "./GameEngine/MainLoop_ECM.asm"
# file opened: ././GameEngine/MainLoop_ECM.asm
   1++5F28 3A 21 80     .ReducePlayerECM:       ld      a,(PlayerECMActiveCount)
   2++5F2B A7                                   and     a
   3++5F2C CA 3E 5F                             jp      z, .DonePlayerECM
   4++5F2F 3D                                   dec     a
   5++5F30 32 21 80                             ld      (PlayerECMActiveCount),a
   6++5F33 3A F4 81                             ld      a,(PlayerEnergy)
   7++5F36 A7                                   and     a
   8++5F37 CA 3E 5F                             jp      z, .DonePlayerECM
   9++5F3A 3D                                   dec     a
  10++5F3B 32 F4 81                             ld      (PlayerEnergy),a
  11++5F3E              .DonePlayerECM:
  12++5F3E 3A 86 7E     .ReduceCommonECM:       ld      a,(ECMCountDown)
  13++5F41 A7                                   and     a
  14++5F42 CA 49 5F                             jp      z, .DoneCommonECM
  15++5F45 3D                                   dec     a
  16++5F46 32 86 7E                             ld      (ECMCountDown),a
  17++5F49              .DoneCommonECM:
  18++5F49
# file closed: ././GameEngine/MainLoop_ECM.asm
  15+ 5F49                              ENDIF
  16+ 5F49                              IFDEF MAINLOOP_WARP_ENABLED
  17+ 5F49 3A 3B 81                             ld      a,(WarpCooldown)
  18+ 5F4C A7                                   and     a
  19+ 5F4D CA 54 5F                             jp      z,.AlreadyCool
  20+ 5F50 3D                                   dec     a
  21+ 5F51 32 3B 81                             ld      (WarpCooldown),a
  22+ 5F54              .AlreadyCool
  23+ 5F54                              ENDIF
  24+ 5F54                              IFDEF MAINLOOP_KEYBOARDSCAN
  25+ 5F54                                      MMUSelectKeyboard
  25+ 5F54 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
  26+ 5F58 CD 03 E1                             call    scan_keyboard                                           ; perform the physical input scan
  27+ 5F5B                              ENDIF
  28+ 5F5B              ;.. This bit allows cycling of ships on universe 0 in demo.........................................................................
  29+ 5F5B                              IFDEF MAINLOOP_DEMOSHIPS
  30+ 5F5B ~            DemoOfShipsDEBUG:       call    TestForNextShip
  31+ 5F5B                              ENDIF
  32+ 5F5B              ;.. Check if keyboard scanning is allowed by screen. If this is set then skip all keyboard and AI..................................
  33+ 5F5B 3E 00        InputBlockerCheck:      ld      a,$0
  34+ 5F5D                              IFDEF MAINLOOP_INPUTHANDLER
  35+ 5F5D                                      JumpIfAEqNusng $01, SkipInputHandlers                           ; as we are in a transition the whole update AI is skipped
  35+ 5F5D FE 01       >                        cp     $01
  35+ 5F5F CA 8D 5F    >                        jp      z,SkipInputHandlers
  36+ 5F62                                      JumpIfMemTrue TextInputMode, SkipInputHandlers                  ; in input mode all keys are processed by input
  36+ 5F62 3A 5F 81    >                        ld      a,(TextInputMode)
  36+ 5F65 A7          >                        and     a
  36+ 5F66 CA 8D 5F    >                        jp      z, SkipInputHandlers
  37+ 5F69 CD 87 6B                             call    ViewKeyTest
  38+ 5F6C CD 8D 68                             call    TestPauseMode
  39+ 5F6F 3A 34 81                             ld      a,(GamePaused)
  40+ 5F72 FE 00                                cp      0
  41+ 5F74 C2 22 5F                             jp      nz,MainLoop
  42+ 5F77                                      MMUSelectKeyboard
  42+ 5F77 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
  43+ 5F7B CD 53 E3                             call    MovementKeyTest
  44+ 5F7E              ;.. Process cursor keys for respective screen if the address is 0 then we skill just skip movement.................................
  45+ 5F7E                              ENDIF
  46+ 5F7E 3A 8C 5F     HandleMovement:         ld      a,(CallCursorRoutine+2)
  47+ 5F81                                      JumpIfAIsZero     TestAreWeDocked
  47+ 5F81 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  47+ 5F82 CA 8D 5F    >                        jp	    z, TestAreWeDocked
  48+ 5F85              ;.. Handle displaying correct screen ..............................................................................................
  49+ 5F85 3E 00        HandleBankSelect:       ld      a,$00
  50+ 5F87                                      MMUSelectScreenA
  50+ 5F87 ED 92 56    >                     nextreg ScreenBankMMU,		a
  51+ 5F8A CD 00 00     CallCursorRoutine:      call    $0000
  52+ 5F8D              ;.. Check to see if we are docked as if we are (or are docking.launching then no AI/Ship updates occur.............................
  53+ 5F8D              ;.. Also end up here if we have the screen input blocker set
  54+ 5F8D              ;DEFUNCT?EngineSounds:       ;HasEngineSoundChanged
  55+ 5F8D              ;DEFUNCT?                    ;call    nz,UpdateEngineSound
  56+ 5F8D              SkipInputHandlers:
  57+ 5F8D              ;.. For Docked flag its - 0 = in free space, FF = Docked, FE transition, FD = Setup open space and transition to not docked
  58+ 5F8D              TestAreWeDocked:        JumpIfMemNeNusng DockedFlag, StateNormal, UpdateLoop            ; if if we are in free space do universe updateelse we skip it. As we are also in dock/transition then no models should be updated so we dont; need to draw
  58+ 5F8D 3A 33 81    >                        ld  a,(DockedFlag)
  58+ 5F90 FE 00       >                        cp  StateNormal
  58+ 5F92 C2 EB 60    >                        jp  nz,UpdateLoop
  59+ 5F95                              IFDEF MAINLOOP_EVENTHANDLER
  60+ 5F95 ~            .UpdateEventCounter:    ld      hl,EventCounter                                         ; evnery 256 cycles we do a trigger test
  61+ 5F95 ~                                    dec     (hl)
  62+ 5F95 ~            .ProcessEvent:          call    z,LoopEventTriggered
  63+ 5F95                              ENDIF
  64+ 5F95                              IFDEF MAINLOOP_RECHARGE
  65+ 5F95 3A 3C 81     .ProcessRecharge:       ld      a,(EventCounter)
  66+ 5F98 E6 07                                and     7
  67+ 5F9A CC AC 83                             call    z, RechargeShip
  68+ 5F9D                              ENDIF
  69+ 5F9D                              IFDEF MAINLOOP_LAUNCHMISSILE
  70+ 5F9D ~            .PlayerMissileLaunch:   AnyMissilesLeft
  71+ 5F9D ~                                    jr      z,.NoMissiles                                           ; just in case last one gets destroyed
  72+ 5F9D ~                                    IsMissileLaunchFlagged
  73+ 5F9D ~                                    call    z,  LaunchPlayerMissile
  74+ 5F9D ~            .NoMissiles
  75+ 5F9D                              ENDIF
  76+ 5F9D              ;.. If we get here then we are in game running mode regardless of which screen we are on, so update AI.............................
  77+ 5F9D              ;.. we do one universe slot each loop update ......................................................................................
  78+ 5F9D              ;.. First update Sun...............................................................................................................
  79+ 5F9D                          INCLUDE "./GameEngine/ShipWarp.asm"
# file opened: ././GameEngine/ShipWarp.asm
   1++5F9D                              IFDEF MAINLOOP_WARP_ENABLED
   2++5F9D              ;... Warp or in system jump thsi moves everything by 1 on the high (sign) byte away or towards ship based on their z axis only
   3++5F9D              ;... its not a true move in the right direction, more a z axis warp
   4++5F9D              ProcessWarp:            JumpIfMemFalse  WarpPressed, .NoWarp
   4++5F9D 3A 62 81    >                        ld      a,(WarpPressed)
   4++5FA0 A7          >                        and     a
   4++5FA1 C2 59 60    >                        jp      nz, .NoWarp
   5++5FA4              .WarpIsPressed:         SetMemFalse     WarpPressed                               ; clear and acknowlege
   5++5FA4 3E FF       >                        ld      a,$FF
   5++5FA6 32 62 81    >                        ld      (WarpPressed),a
   6++5FA9                                      JumpIfMemZero   WarpCooldown, .WarpDriveCool
   6++5FA9 3A 3B 81    >                        ld  a,(WarpCooldown)
   6++5FAC A7          >                        and a
   6++5FAD CA B3 5F    >                        jp  z,.WarpDriveCool
   7++5FB0                                      DISPLAY "TODO Need logic for in system jump drive malfunction"
   8++5FB0              .JumpDriveHot:          DISPLAY "TODO call bong jump drive hot"
   9++5FB0                                      DISPLAY "TODO flash jump drive status icon"
  10++5FB0 C3 59 60                             jp      .NoWarp
  11++5FB3              .WarpDriveCool:         JumpIfMemFalse    SpaceStationSafeZone, .NotInSpaceStationRange
  11++5FB3 3A 19 80    >                        ld      a,(SpaceStationSafeZone)
  11++5FB6 A7          >                        and     a
  11++5FB7 C2 BD 5F    >                        jp      nz, .NotInSpaceStationRange
  12++5FBA              .MassLocked:            DISPLAY "TODO Mass locked by object call bong"
  13++5FBA                                      DISPLAY "TODO message mass locked"
  14++5FBA                                      DISPLAY "TODO make space station a body just like planet and sun"
  15++5FBA C3 59 60                             jp      .NoWarp
  16++5FBD CD 91 84     .NotInSpaceStationRange:call    AreShipsPresent
  17++5FC0 30 F8                                jr      nc,     .MassLocked
  18++5FC2              .IsPlanetMassLocking:   MMUSelectPlanet                 ; is planet within 256 then mass locked
  18++5FC2 ED 91 56 55 >                     nextreg PlanetMMU,         BankPlanetData
  19++5FC6 ED 4B 17 C0                          ld      bc,(P_Bnkzhi)
  20++5FCA 78                                   ld      a,b                     ; if z sign is == 0 then mass locked
  21++5FCB E6 7F                                and     $7F                     ; h = abs zsign
  22++5FCD B5                                   or      l                       ; to get to here a must be zero to or with l will give a quick result
  23++5FCE CA BA 5F                             jp      z,     .MassLocked
  24++5FD1              .IsSunMassLocking:      MMUSelectSun
  24++5FD1 ED 91 56 54 >                     nextreg SunMMU,            BankSunData
  25++5FD5 2A 17 C0                             ld      hl,(SBnKzhi)
  26++5FD8 7C                                   ld      a,h                     ; if z sign is == 0 then mass locked
  27++5FD9 E6 7F                                and     $7F                     ; h = abs zsign
  28++5FDB B5                                   or      l                       ; to get to here a must be zero to or with l will give a quick result
  29++5FDC CA BA 5F                             jp      z,     .MassLocked
  30++5FDF              .IsStationMassLocking:  MMUSelectSpaceStation
  30++5FDF ED 91 56 46 >                     nextreg SpaceStationMMU,         BankSpaceStationData
  31++5FE3                                      IFDEF SPACESTATIONUNIQUECODE
  32++5FE3 ~                                    ld      de,(SS_Bnkzhi)          ; if z hi or sign == 0 then mass locked, needs to be at least 256 away
  33++5FE3                                      ELSE
  34++5FE3 ED 5B 27 C0                          ld      de,(UBnkzhi)
  35++5FE7                                      ENDIF
  36++5FE7 7A                                   ld      a,d
  37++5FE8 E6 7F                                and     $7F
  38++5FEA B3                                   or      e
  39++5FEB CA BA 5F                             jp      z,      .MassLocked
  40++5FEE                          IFDEF SIMPLEWARP
  41++5FEE              ;-- when we get here bc = [planet sign, high] hl = [sun sign, high]
  42++5FEE 78           .MassiveJumpCheck:      ld      a,b                     ; if range is 7000 to 1000 do a $1000 jump
  43++5FEF B4                                   or      h
  44++5FF0 E6 70                                and     $70
  45++5FF2 11 00 90                             ld      de,$9000
  46++5FF5 C2 0F 60                             jp      nz,.PerformJumpPlanet
  47++5FF8 78           .LargeJumpCheck:        ld      a,b                     ; now if sign byte has a value then we do
  48++5FF9 B4                                   or      h                       ; a jump of $0100
  49++5FFA E6 7F                                and     $7F
  50++5FFC 11 00 81                             ld      de,$8100
  51++5FFF C2 0F 60                             jp      nz,.PerformJumpPlanet
  52++6002              ;-- now see if we are doing a $0010 jump
  53++6002 79           .MediumJumpCheck:       ld      a,c                     ; if the distance is in the range
  54++6003 B5                                   or      l                       ; 00F0 to 0010 then its a $0010 jump
  55++6004 E6 F0                                and     $F0
  56++6006 11 10 80                             ld      de,$8010
  57++6009 C2 0F 60                             jp      nz,.PerformJumpPlanet
  58++600C 11 01 00     .SmallJump:             ld      de,$0001
  59++600F              ; When jumping distance is based on planet or sun not station, as station is near a planet then its not an issue
  60++600F              .PerformJumpPlanet:     MMUSelectPlanet
  60++600F ED 91 56 55 >                     nextreg PlanetMMU,         BankPlanetData
  61++6013 2A 17 C0                             ld      hl,(P_Bnkzhi)
  62++6016                                      MMUSelectMathsBankedFns
  62++6016 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
  63++601A CD 00 00                             call    AddDEtoHLSigned
  64++601D 22 17 C0                             ld      (P_Bnkzhi),hl
  65++6020              .PerformJumpStation:    MMUSelectSpaceStation
  65++6020 ED 91 56 46 >                     nextreg SpaceStationMMU,         BankSpaceStationData
  66++6024                                      IFDEF SPACESTATIONUNIQUECODE
  67++6024 ~                                    ld      de,(SS_Bnkzhi)
  68++6024                                      ELSE
  69++6024 ED 5B 27 C0                          ld      de,(UBnkzhi)
  70++6028                                      ENDIF
  71++6028                                      MMUSelectMathsBankedFns
  71++6028 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
  72++602C CD 00 00                             call    AddDEtoHLSigned
  73++602F                                      IFDEF SPACESTATIONUNIQUECODE
  74++602F ~                                    ld      de,(SS_Bnkzhi)
  75++602F                                      ELSE
  76++602F ED 5B 27 C0                          ld      de,(UBnkzhi)
  77++6033                                      ENDIF
  78++6033              .PerformJumpSun:        MMUSelectSun
  78++6033 ED 91 56 54 >                     nextreg SunMMU,            BankSunData
  79++6037 22 17 C0                             ld      (SBnKzhi),hl
  80++603A                                      MMUSelectMathsBankedFns
  80++603A ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
  81++603E CD 00 00                             call    AddDEtoHLSigned
  82++6041 22 17 C0                             ld      (SBnKzhi),hl
  83++6044 C3 47 60                             jp      .MoveJunk
  84++6047                          ELSE
  85++6047 ~            .NotCorrectFacing:      ;       call bong, align with body
  86++6047 ~                                    jp      .NoWarp
  87++6047 ~            .JumpToPlanetCheck:     ld      a,(P_Bnkzhi)
  88++6047 ~                                    JumpIfAGTENusng  2, .PlanetRangeOK
  89++6047 ~                                    ld      a,(P_Bnkyhi)
  90++6047 ~                                    JumpIfAGTENusng  2, .PlanetRangeOK
  91++6047 ~                                    ld      a,(P_Bnkxhi)
  92++6047 ~                                    JumpIfAGTENusng  2, .PlanetRangeOK
  93++6047 ~                                    jp      .MassLocked
  94++6047 ~            .PlanetRangeOK:         call    WarpPlanetCloser
  95++6047 ~                                    MMUSelectSun
  96++6047 ~                                    call    WarpSunFurther
  97++6047 ~                                    jp      .MoveJunk
  98++6047 ~            .JumpToSunCheck:        ld      a,(SBnKzsgn)
  99++6047 ~                                    ld      hl,SBnKxsgn
 100++6047 ~                                    or      (hl)
 101++6047 ~                                    ld      hl,SBnKysgn
 102++6047 ~                                    or      (hl)
 103++6047 ~                                    and     SignMask8Bit
 104++6047 ~                                    JumpIfAGTENusng  2, .SunRangeOK
 105++6047 ~                                    jp      .MassLocked
 106++6047 ~            .SunRangeOK:            call    WarpSunCloser
 107++6047 ~                                    MMUSelectPlanet
 108++6047 ~                                    call    WarpPlanetFurther
 109++6047                          ENDIF
 110++6047 CD 4C 84     .MoveJunk:              call    ClearJunk;  call    WarpJunk - as it will move sign bit hi then all junk will be lost
 111++604A 3E 5A                                ld      a,WarpCoolDownPeriod
 112++604C 32 3B 81                             ld      (WarpCooldown),a
 113++604F              .WarpSFX:               MMUSelectLayer1
 113++604F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 114++6053                                      DISPLAY "TODO: Add Warp Sound"
 115++6053 CD 9A 62                             call    WarpSFX             ; Do the visual SFX based on facing
 116++6056 C3 5D 60                             jp      .DoneWarp
 117++6059              .NoWarp:                MMUSelectLayer1
 117++6059 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 118++605D              .DoneWarp:
 119++605D                              ENDIF
# file closed: ././GameEngine/ShipWarp.asm
  80+ 605D              ; NOte UpdateShipsControl + 1 is self modifying to determine if they get updated
  81+ 605D 3E 00        UpdateShipsControl:     ld      a,0
  82+ 605F A7                                   and     a
  83+ 6060                                      IFDEF MAINLOOP_UPDATEUNIVERSE
  84+ 6060                                          DISPLAY "FYI: Now includes slot 13, space station"
  85+ 6060 CC 00 65     .UpdateShips:               call    z, UpdateUniverseObjects
  86+ 6063                                      ENDIF
  87+ 6063                                      JumpIfMemNeNusng ScreenTransitionForced, $FF, BruteForceChange  ; if we docked then a transition would have been forced
  87+ 6063 3A 8C 6A    >                        ld  a,(ScreenTransitionForced)
  87+ 6066 FE FF       >                        cp  $FF
  87+ 6068 C2 9F 63    >                        jp  nz,BruteForceChange
  88+ 606B 3E 00        CheckIfViewUpdate:      ld      a,$00                                                   ; if this is set to a view number then we process a view
  89+ 606D                                      JumpIfAIsZero  UpdateLoop                                       ; This will change as more screens are added TODO
  89+ 606D A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  89+ 606E CA EB 60    >                        jp	    z, UpdateLoop
  90+ 6071              ;..Processing a view...............................................................................................................
  91+ 6071              ;..Display any message ............................................................................................................
  92+ 6071              .CheckHyperspaceMessage:AnyHyperSpaceMacro .HandleMessages
  92+ 6071 2A 39 81    >                        ld      hl,(InnerHyperCount)
  92+ 6074 7C          >                        ld      a,h
  92+ 6075 B5          >                        or      l
  92+ 6076 28 03       >                        jr      z, .HandleMessages
  93+ 6078 CD 0E 76                             call    HyperSpaceMessage
  94+ 607B              .HandleMessages:        AnyMessagesMacro  .NoMessages
  94+ 607B 3A 90 7E    >                        ld      a, (MessageCount)
  94+ 607E A7          >                        and     a
  94+ 607F 28 06       >                        jr      z, .NoMessages
  95+ 6081 CD F0 75                             call    DisplayCurrentMessage
  96+ 6084 CD CF 75                             call    UpdateMessageTimer
  97+ 6087
  98+ 6087              .NoMessages:            MMUSelectLayer2
  98+ 6087 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  99+ 608B 21 5D 81     CheckConsoleReDraw:     ld      hl,ConsoleRefreshCounter
 100+ 608E 35                                   dec     (hl)
 101+ 608F CA 9F 60                             jp      z,.ConsoleDrawBuffer1                                   ; when it hits 0 then frame 1 of console is drawm
 102+ 6092 FA 9D 60                             jp      m,.ConsoleDrawBuffer2                                   ; need top also do next frame for double buffering
 103+ 6095              .ConsoleNotDraw:        SetMemFalse ConsoleRedrawFlag
 103+ 6095 3E FF       >                        ld      a,$FF
 103+ 6097 32 5E 81    >                        ld      (ConsoleRedrawFlag),a
 104+ 609A C3 A9 60                             jp      .JustViewPortCLS
 105+ 609D 36 05        .ConsoleDrawBuffer2:    ld      (hl),ConsoleRefreshInterval
 106+ 609F              .ConsoleDrawBuffer1:    SetMemTrue ConsoleRedrawFlag
 106+ 609F AF          >                        xor     a
 106+ 60A0 32 5E 81    >                        ld      (ConsoleRedrawFlag),a
 107+ 60A3 CD 0E E2                             call    l2_cls                                                  ; Clear layer 2 for graphics
 108+ 60A6 C3 AC 60                             jp      .ViewPortCLSDone
 109+ 60A9 CD 8E E1     .JustViewPortCLS:       call   l2_cls_upper_two_thirds
 110+ 60AC              .ViewPortCLSDone:
 111+ 60AC                                      MMUSelectLayer1
 111+ 60AC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 112+ 60B0              .UpdateSun:             IFDEF   MAINLOOP_SUN_RENDER
 113+ 60B0                                          MMUSelectSun
 113+ 60B0 ED 91 56 54 >                     nextreg SunMMU,            BankSunData
 114+ 60B4 CD A0 C7                                 call    SunUpdateAndRender
 115+ 60B7                                      ENDIF
 116+ 60B7              .UpdatePlanet:          IFDEF   MAINLOOP_PLANET_RENDER
 117+ 60B7                                          MMUSelectPlanet
 117+ 60B7 ED 91 56 55 >                     nextreg PlanetMMU,         BankPlanetData
 118+ 60BB CD 0F CB                                 call    PlanetUpdateAndRender
 119+ 60BE                                      ENDIF
 120+ 60BE              ;.UpdateSpaceStation:    MMUSelectSpaceStation
 121+ 60BE              ;                        IFDEF SPACESTATIONUNIQUECODE
 122+ 60BE              ;                            call    SpaceStationUpdateAndRender
 123+ 60BE              ;                        ELSE
 124+ 60BE              ;                            call    ProcessShip
 125+ 60BE              ;                        ENDIF
 126+ 60BE              ;..Later this will be done via self modifying code to load correct stars routine for view..........................................
 127+ 60BE 3E DF        DrawDustForwards:       ld     a,$DF
 128+ 60C0 32 B5 E2                             ld     (line_gfx_colour),a
 129+ 60C3              DustUpdateBank:         MMUSelectViewFront                                              ; This needs to be self modifying
 129+ 60C3 ED 91 56 3E >                     nextreg ScreenBankMMU,		BankFrontView
 130+ 60C7                                      IFDEF   MAINLOOP_DUST_RENDER
 131+ 60C7 CD FF 7B     DustUpdateRoutine:          call   DustForward                                              ; This needs to be self modifying
 132+ 60CA                                      ENDIF
 133+ 60CA                                    ;  jp      SKIPBODIESDEBUG
 134+ 60CA              ;ProcessSun:             call    DrawForwardSun
 135+ 60CA                                      IFDEF   LASER_V2
 136+ 60CA              ProcessLaser:               MMUSelectSpriteBank
 136+ 60CA ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 137+ 60CE                                          JumpIfMemFalse LaserBeamOn, .NoLaser
 137+ 60CE 3A 0F 82    >                        ld      a,(LaserBeamOn)
 137+ 60D1 A7          >                        and     a
 137+ 60D2 C2 DE 60    >                        jp      nz, .NoLaser
 138+ 60D5 CD 3E E3     .FireLaser:                 call    sprite_laser_show
 139+ 60D8 CD 70 82                                 call    LaserDrainSystems
 140+ 60DB C3 E1 60                                 jp      ProcessPlanet
 141+ 60DE CD DC E4     .NoLaser:                   call    sprite_laser_hide
 142+ 60E1                                      ELSE
 143+ 60E1 ~            ProcessLaser:               ld      a,(CurrLaserPulseRate)
 144+ 60E1 ~                                        JumpIfAIsNotZero .CheckForPulse
 145+ 60E1 ~                                        JumpIfMemFalse FireLaserPressed, .NoLaser
 146+ 60E1 ~                                        jp      .FireLaser
 147+ 60E1 ~            .CheckForPulse:             JumpIfMemZero CurrLaserPulseOnCount, .NoLaser
 148+ 60E1 ~            .FireLaser:                 MMUSelectSpriteBank
 149+ 60E1 ~                                        call    sprite_laser_show
 150+ 60E1 ~                                        call    LaserDrainSystems
 151+ 60E1 ~                                        jp      ProcessPlanet
 152+ 60E1 ~            .NoLaser:                   MMUSelectSpriteBank
 153+ 60E1 ~                                        call    sprite_laser_hide
 154+ 60E1                                      ENDIF
 155+ 60E1              ProcessPlanet:
 156+ 60E1                                      IFDEF   MAINLOOP_MODEL_RENDER
 157+ 60E1 CD F8 66     ProcessShipModels:          call   DrawForwardShips                                     ; Draw all ships (this may need to be self modifying)
 158+ 60E4                                      ENDIF
 159+ 60E4                                      ; add in loop so we only update every 4 frames, need to change CLS logic too,
 160+ 60E4                                      ; every 4 frames needs to do 2 updates so updates both copies of buffer
 161+ 60E4                                      ; now will CLS bottom thrid
 162+ 60E4                                      CallIfMemTrue ConsoleRedrawFlag, UpdateConsole
 162+ 60E4 3A 5E 81    >                        ld      a,(ConsoleRedrawFlag)
 162+ 60E7 A7          >                        and     a
 162+ 60E8 CC E9 6D    >                        call    z, UpdateConsole
 163+ 60EB              ;..If we were not in views then we were in display screens/menus...................................................................
 164+ 60EB              SKIPBODIESDEBUG:
 165+ 60EB              UpdateLoop:             JumpIfMemZero ScreenLoopJP+1,LoopRepeatPoint
 165+ 60EB 3A F8 60    >                        ld  a,(ScreenLoopJP+1)
 165+ 60EE A7          >                        and a
 165+ 60EF CA FA 60    >                        jp  z,LoopRepeatPoint
 166+ 60F2              ;..This is the screen update routine for menus.....................................................................................
 167+ 60F2              ;.. Also used by transition routines
 168+ 60F2 3E 00        ScreenLoopBank:         ld      a,$0
 169+ 60F4                                      MMUSelectScreenA
 169+ 60F4 ED 92 56    >                     nextreg ScreenBankMMU,		a
 170+ 60F7 CD 00 00     ScreenLoopJP:           call    $0000
 171+ 60FA 3A 33 81     LoopRepeatPoint:        ld      a,(DockedFlag)
 172+ 60FD              HandleLaunched:         JumpIfAEqNusng  StateCompletedLaunch,   WeHaveCompletedLaunch
 172+ 60FD FE FD       >                        cp     StateCompletedLaunch
 172+ 60FF CA B9 61    >                        jp      z,WeHaveCompletedLaunch
 173+ 6102                                      JumpIfAEqNusng  StateInTransition,      WeAreInTransition
 173+ 6102 FE FE       >                        cp     StateInTransition
 173+ 6104 CA 84 63    >                        jp      z,WeAreInTransition
 174+ 6107                                      JumpIfAEqNusng  StateHJumping,          WeAreHJumping
 174+ 6107 FE FC       >                        cp     StateHJumping
 174+ 6109 CA C4 61    >                        jp      z,WeAreHJumping
 175+ 610C                                      JumpIfAEqNusng  StateHEntering,         WeAreHEntering
 175+ 610C FE FB       >                        cp     StateHEntering
 175+ 610E CA D2 61    >                        jp      z,WeAreHEntering
 176+ 6111                                      JumpIfAEqNusng  StateCompletedHJump,    WeHaveCompletedHJump
 176+ 6111 FE FA       >                        cp     StateCompletedHJump
 176+ 6113 CA 8A 62    >                        jp      z,WeHaveCompletedHJump
 177+ 6116
 178+ 6116 C3 84 63                             jp      DoubleBufferCheck
 179+ 6119              ;-----------------------------------------------------------------------------
 180+ 6119              ; Initialise local universe bubble based on a hyperspace Jump
 181+ 6119 CD 58 62     IntitaliseBubble:       call    InitialiseLocalUniverse         ; Sets up galaxy twist for local universe
 182+ 611C                                      ;call    GetDigramGalaxySeed            ; .
 183+ 611C                                      MMUSelectStockTable                     ; .
 183+ 611C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 184+ 6120 CD AA E0                             call    generate_stock_market           ; generate new prices
 185+ 6123 CD 02 84                             call    ClearUnivSlotList               ; clear out any ships
 186+ 6126 CD 9A 82                             call    ResetPlayerShip
 187+ 6129                                      HalveFugitiveStatus                     ; halves status and brings bit into carry
 187+ 6129 21 22 80    >                        ld      hl,FugitiveInnocentStatus
 187+ 612C CB 3E       >                        srl     (hl)
 188+ 612E              .CreateSun:             MMUSelectSun
 188+ 612E ED 91 56 54 >                     nextreg SunMMU,            BankSunData
 189+ 6132 CD CB C2                             call    CreateSun                       ; create the local sun and set absloute bubble position based on seed and hyperspace jump
 190+ 6135              .CreatePlanet:          MMUSelectPlanet
 190+ 6135 ED 91 56 55 >                     nextreg PlanetMMU,         BankPlanetData
 191+ 6139 CD 12 C6                             call    CreatePlanet                    ; create planet and set absolute bubble position and hyperspace jump
 192+ 613C 21 10 C0     .CopyPlanetXYZtoGlobal: ld      hl,P_Bnkxlo                     ; Copy parent planet to work out space station bubble absolute position
 193+ 613F 11 39 80                             ld      de,ParentPlanetX
 194+ 6142 01 09 00                             ld      bc,3*3
 195+ 6145 ED B0                                ldir
 196+ 6147                                      MMUSelectSpaceStation                   ; when creating Space station it is offset from planet to an absolute position
 196+ 6147 ED 91 56 46 >                     nextreg SpaceStationMMU,         BankSpaceStationData
 197+ 614B CD BC 63     .CreateSpaceStation:    call    SpawnSpaceStation               ; so we spawn it
 198+ 614E CD 69 C8                             call    UnivSpawnSpaceStation           ; and set up bubble position based on ParentPlanet
 199+ 6151 C9                                   ret
 200+ 6152
 201+ 6152
 202+ 6152              ;----------------------------------------------------------------------------------------------------------------------------------
 203+ 6152              LaunchedFromStation:
 204+ 6152                                      DISPLAY "TODO: Need to create launched relative to where they would"
 205+ 6152                                      DISPLAY "be when jumping in but considering that the space station is"
 206+ 6152                                      DISPLAY "offset to planet and behind ship, so need to consider that"
 207+ 6152                                      DISPLAY "TODO: Check Z of space station is zsign 01"
 208+ 6152                                      DISPLAY "TODO: Check spaace station z pos -1 sign"
 209+ 6152              ; Now we copy space station position to ParentPlanetX temporary vars
 210+ 6152              .CorrectPositions:      MMUSelectSpaceStation
 210+ 6152 ED 91 56 46 >                     nextreg SpaceStationMMU,         BankSpaceStationData
 211+ 6156 21 20 C0     .CopyStationXYZtoGlobal:ld      hl,UBnkxlo                      ; Copy planet position to Parent
 212+ 6159 11 39 80                             ld      de,ParentPlanetX                ; .
 213+ 615C 01 09 00                             ld      bc,3*3                          ; .
 214+ 615F ED B0                                ldir                                    ; .
 215+ 6161 01 00 81     .AdjustPosForPlayer:    ld      bc,$8100                        ; now work out offset for player being at space station + 00000,00000,00001 (i.e subtract 00001 from space station z position)
 216+ 6164 26 00                                ld      h,0                             ; so its planet Z + -10000
 217+ 6166 ED 5B 40 80                          ld      de,(ParentPlanetZ+1)            ; .
 218+ 616A 3A 3F 80                             ld      a,(ParentPlanetZ)               ; .
 219+ 616D 6F                                   ld      l,a                             ; .
 220+ 616E                                      MMUSelectMathsBankedFns                 ; .
 220+ 616E ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 221+ 6172 CD AF 00                             call    AddBCHtoDELsigned               ; .
 222+ 6175 ED 53 40 80                          ld      (ParentPlanetZ+1),de            ; .
 223+ 6179 7D                                   ld      a,l                             ; .
 224+ 617A 32 3F 80                             ld      (ParentPlanetZ),a               ; .
 225+ 617D 3A 3B 80     .FlipSignsforSubtract:  ld      a,(ParentPlanetX+2)             ; now we flip all the signs for subtract
 226+ 6180 EE 80                                xor     $80                             ; so we have a value to move the universe
 227+ 6182 32 39 80                             ld      (ParentPlanetX),a               ; relative to player
 228+ 6185 3A 3E 80                             ld      a,(ParentPlanetY+2)             ; .
 229+ 6188 EE 80                                xor     $80                             ; .
 230+ 618A 32 3C 80                             ld      (ParentPlanetY),a               ; .
 231+ 618D 3A 41 80                             ld      a,(ParentPlanetZ+2)             ; .
 232+ 6190 EE 80                                xor     $80                             ; .
 233+ 6192 32 3F 80                             ld      (ParentPlanetZ),a               ; .
 234+ 6195 CD 50 C8     .AdjustSpaceStation:    call    SpaceStationLaunchPositon       ; Space station is now 00000,00000,-10000
 235+ 6198              .AdjustPlanet:          MMUSelectPlanet                         ; Calculate planet position relative to player
 235+ 6198 ED 91 56 55 >                     nextreg PlanetMMU,         BankPlanetData
 236+ 619C CD EC C5                             call    CalculatePlanetLaunchedPosition ; .
 237+ 619F              .AdjustSun:             MMUSelectSun                            ; Calculate sun position relative to player
 237+ 619F ED 91 56 54 >                     nextreg SunMMU,            BankSunData
 238+ 61A3 CD A5 C2                             call    CalculateSunLaunchedPosition    ; .
 239+ 61A6              ; Now we have the corrected bodies and space station positions
 240+ 61A6 3E 00        .NowInFlight:           ld      a,StateNormal                   ; now we are in Normal flying state on
 241+ 61A8 32 33 81                             ld      (DockedFlag),a                  ; front view port
 242+ 61AB                                      ForceTransition ScreenFront             ; .
 242+ 61AB 3E 09       >                        ld      a,ScreenFront
 242+ 61AD 32 8C 6A    >                        ld      (ScreenTransitionForced), a
 243+ 61B0 3E FF                                ld      a,$FF
 244+ 61B2 32 06 B1                             ld      (LAST_DELTA),a                  ; force sound update in interrupt
 245+ 61B5 CD 9A 82                             call    ResetPlayerShip
 246+ 61B8 C9                                   ret
 247+ 61B9
 248+ 61B9              ;-----------------------------------------------------------------------------
 249+ 61B9              ; Essentially its just the same as a hyperspace jump except we then adjust
 250+ 61B9              ; the sun, planet and space station relative based on the player spat out the space
 251+ 61B9              ; station at z - 50
 252+ 61B9 DD 01        WeHaveCompletedLaunch:  break
 253+ 61BB CD 19 61                             call    IntitaliseBubble    ; Seed local galaxy, markets, remove ships, create sun, planet , copy planet to interface, spawn space station, COPY POS TO PLANET INTERFACE, RESET TO  at 0,0,-00001
 254+ 61BE CD 52 61                             call    LaunchedFromStation
 255+ 61C1 C3 84 63                             jp      DoubleBufferCheck
 256+ 61C4 CD 4D C2     WeAreHJumping:          call    hyperspace_Lightning
 257+ 61C7 DA 84 63                             jp      c,DoubleBufferCheck
 258+ 61CA 3E FB                                ld      a,StateHEntering
 259+ 61CC 32 33 81                             ld      (DockedFlag),a
 260+ 61CF C3 84 63                             jp      DoubleBufferCheck
 261+ 61D2 3E FA        WeAreHEntering:         ld      a,StateCompletedHJump
 262+ 61D4 32 33 81                             ld      (DockedFlag),a
 263+ 61D7 C3 84 63                             jp      DoubleBufferCheck
 264+ 61DA
 265+ 61DA              ; On lanch completion
 266+ 61DA              ;   intialise bubble
 267+ 61DA              ;       InitialiseLocalUniverse
 268+ 61DA              ;               Seed Galaxy
 269+ 61DA              ;       Generte stock marked
 270+ 61DA              ;       ClearUnivSlotList              ; clear out any ships
 271+ 61DA              ;       ceate sun and planet
 272+ 61DA              ;       copy planet to interface
 273+ 61DA              ;       spawn space station
 274+ 61DA              ;       call UnivSpawnSpaceStationLaunched
 275+ 61DA              ;   Launched from Station
 276+ 61DA              ;                       Set XYZ to 0 (not needed now)
 277+ 61DA              ;                       adjust pos for player on planet
 278+ 61DA              ;                       Adjust space station for launch
 279+ 61DA              ;                       adjust planet fo rlaunch
 280+ 61DA              ;                       adjust sun for launch
MainLoop.asm(281): error: Label not found: CalculateSpaceStationLaunchPositon
 281+ 61DA CD 00 00     .AdjustSpaceStation:    call    CalculateSpaceStationLaunchPositon
 282+ 61DD              .AdjustPlanet:          MMUSelectPlanet
 282+ 61DD ED 91 56 55 >                     nextreg PlanetMMU,         BankPlanetData
 283+ 61E1 CD EC C5                             call    CalculatePlanetLaunchedPosition
 284+ 61E4              .AdjustSun:             MMUSelectSun
 284+ 61E4 ED 91 56 54 >                     nextreg SunMMU,            BankSunData
 285+ 61E8 CD A5 C2                             call    CalculateSunLaunchedPosition
 286+ 61EB              ; Now we have the corrected bodies and space station positions
 287+ 61EB 3E 00        .NowInFlight:           ld      a,StateNormal
 288+ 61ED 32 33 81                             ld      (DockedFlag),a
 289+ 61F0                                      ForceTransition ScreenFront
 289+ 61F0 3E 09       >                        ld      a,ScreenFront
 289+ 61F2 32 8C 6A    >                        ld      (ScreenTransitionForced), a
 290+ 61F5 3E FF                                ld      a,$FF
 291+ 61F7 32 06 B1                             ld      (LAST_DELTA),a              ; force sound update in interrupt
 292+ 61FA CD 9A 82                             call    ResetPlayerShip
 293+ 61FD C9                                   ret
 294+ 61FE
 295+ 61FE
 296+ 61FE
 297+ 61FE              ; On hyperspace into a system
 298+ 61FE
 299+ 61FE              ; Space Station   = x y z of planet
 300+ 61FE              ;                 x = x + (seed.a & 2 (if a is even * -1 ) << 8
 301+ 61FE              ;                 y = y + (seed.c & 2 (if a is even * -1 ) << 8
 302+ 61FE              ;                 z = z + (seed.c & 2 (if a is even * -1 ) << 8
 303+ 61FE
 304+ 61FE              ; on launch from space station then the above has to be back calculated as if space staion = player z - 50
 305+ 61FE              ; so caclualte as normal then transpose all bodies to reflect new positon
 306+ 61FE              ; so planet position = planet x,y,z - space station x,y,z z = z + 50 for offset
 307+ 61FE              ;    sun    position = sun    x,y,z - space station x,y,z z = z + 50 for offset
 308+ 61FE
 309+ 61FE              ; laser duration goign below 0 for some reason
 310+ 61FE              ; if laser is on
 311+ 61FE              ;    if laser duration = master duration - do sfx
 312+ 61FE              ;    laser duration ---
 313+ 61FE              ;    if laser duration = 0
 314+ 61FE              ;          **should set beam off***
 315+ 61FE              ;       curr burst count --
 316+ 61FE              ;       if busrt count = 0
 317+ 61FE              ;          set cooldown to post pulserests
 318+ 61FE              ;       else
 319+ 61FE              ;          set cooldown to 0
 320+ 61FE              ;          pause = pulse off time
 321+ 61FE              ;    else
 322+ 61FE              ;       return
 323+ 61FE              ;  else
 324+ 61FE              ;     if burst count <> 0
 325+ 61FE              ;        current burst pause --
 326+ 61FE              ;        return if not zero
 327+ 61FE              ;        set laser beam on
 328+ 61FE              ;        return
 329+ 61FE              ;      else
 330+ 61FE              ;         cooldown-- if not zero
 331+ 61FE
 332+ 61FE              LaserBeamV2:            JumpIfMemFalse LaserBeamOn, .LaserIsOff                          ; If laser is not on then skip
 332+ 61FE 3A 0F 82    >                        ld      a,(LaserBeamOn)
 332+ 6201 A7          >                        and     a
 332+ 6202 C2 34 62    >                        jp      nz, .LaserIsOff
 333+ 6205 21 0C 82     .LaserIsOn:             ld          hl,CurrLaserPulseOnTime
 334+ 6208 3A 10 82                             ld          a,(CurrLaserDuration)
 335+ 620B BE                                   cp          (hl)                                                ; if duration just started
 336+ 620C                                      ;call        z, SoundLaserFiring                                ; queue sound
 337+ 620C 3D                                   dec         a
 338+ 620D 32 10 82                             ld          (CurrLaserDuration),a                               ; if duration is 0
 339+ 6210                                      ReturnIfANotZero                                                ; the do the end of pulse
 339+ 6210 A7          >                        and     a
 339+ 6211 C0          >                        ret     nz
 340+ 6212              .EndOfPulse:            SetMemFalse LaserBeamOn
 340+ 6212 3E FF       >                        ld      a,$FF
 340+ 6214 32 0F 82    >                        ld      (LaserBeamOn),a
 341+ 6217 3A 14 82                             ld          a,(CurrLaserBurstCount)
 342+ 621A 3D                                   dec         a
 343+ 621B 32 14 82                             ld          (CurrLaserBurstCount),a                             ; if we have run out of
 344+ 621E                                      JumpIfAIsNotZero    .SkipBurstEnd                               ; pulses then
 344+ 621E A7          >                        and     a
 344+ 621F C2 29 62    >                        jp	    nz,.SkipBurstEnd
 345+ 6222              .EndOfBurst:            ldCopyByte  CurrLaserPulseRest,  CurrentCooldown                ; main cool down
 345+ 6222 3A 0E 82    >                        ld       a,(CurrLaserPulseRest)
 345+ 6225 32 12 82    >                        ld       (CurrentCooldown),a
 346+ 6228 C9                                   ret
 347+ 6229              .SkipBurstEnd:          SetMemZero  CurrentCooldown                                     ; else its just pulse
 347+ 6229 AF          >                        xor     a
 347+ 622A 32 12 82    >                        ld      (CurrentCooldown),a
 348+ 622D                                      ldCopyByte  CurrLaserPulseOffTime,  CurrentBurstPause           ; cooldown
 348+ 622D 3A 0D 82    >                        ld       a,(CurrLaserPulseOffTime)
 348+ 6230 32 11 82    >                        ld       (CurrentBurstPause),a
 349+ 6233 C9           .SkipPulseEnd:          ret
 350+ 6234 3A 14 82     .LaserIsOff:            ld          a,(CurrLaserBurstCount)
 351+ 6237                                      JumpIfAIsZero .FullCool
 351+ 6237 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 351+ 6238 CA 4E 62    >                        jp	    z, .FullCool
 352+ 623B 3A 11 82     .BurstCool:             ld          a,(CurrentBurstPause)
 353+ 623E 3D                                   dec         a
 354+ 623F 32 11 82                             ld          (CurrentBurstPause),a
 355+ 6242 C0                                   ret         nz
 356+ 6243                                      SetMemTrue  LaserBeamOn
 356+ 6243 AF          >                        xor     a
 356+ 6244 32 0F 82    >                        ld      (LaserBeamOn),a
 357+ 6247                                      ldCopyByte  CurrLaserPulseOnTime, CurrLaserDuration
 357+ 6247 3A 0C 82    >                        ld       a,(CurrLaserPulseOnTime)
 357+ 624A 32 10 82    >                        ld       (CurrLaserDuration),a
 358+ 624D C9                                   ret
 359+ 624E 3A 12 82     .FullCool:              ld          a,(CurrentCooldown)
 360+ 6251                                      ReturnIfAIsZero
 360+ 6251 A7          >                        and     a
 360+ 6252 C8          >                        ret     z
 361+ 6253 3D                                   dec         a
 362+ 6254 32 12 82                             ld          (CurrentCooldown),a
 363+ 6257 C9                                   ret
 364+ 6258
 365+ 6258              ;;called from LaunchedFromStation  & WeHaveCompletedHJump to re-seed the system
 366+ 6258
 367+ 6258 3A 00 80     InitialiseLocalUniverse:ld      a,(Galaxy)                      ; DEBUG as galaxy n is not working
 368+ 625B                                      MMUSelectGalaxyA
 368+ 625B ED 92 57    >                     nextreg GalaxyDataMMU,     a
 369+ 625E 2A 15 80                             ld      hl,(TargetSystemX)
 370+ 6261 22 13 80                             ld      (PresentSystemX),hl
 371+ 6264 44                                   ld      b,h
 372+ 6265 4D                                   ld      c,l
 373+ 6266                                      CorrectPostJumpFuel
 373+ 6266 3A D3 84    >                        ld      a,(Fuel)
 373+ 6269 21 35 80    >                        ld      hl,Distance
 373+ 626C 96          >                        sub     a,(hl)
 373+ 626D 32 D3 84    >                        ld      (Fuel),a
 374+ 6270                                      ForceTransition ScreenFront            ; This will also trigger stars
 374+ 6270 3E 09       >                        ld      a,ScreenFront
 374+ 6272 32 8C 6A    >                        ld      (ScreenTransitionForced), a
 375+ 6275 3E 00                                ld      a,$00
 376+ 6277 32 1A 80                             ld      (ExtraVesselsCounter),a
 377+ 627A 32 33 81                             ld      (DockedFlag),a
 378+ 627D CD 6F F8                             call    GalaxyGenerateDesc             ; bc  holds new system to generate system
 379+ 6280 CD 88 85                             call    copy_working_to_system         ; and propogate copies of seeds
 380+ 6283 CD 80 85                             call    copy_working_to_galaxy         ; .
 381+ 6286 CD 6E 86                             call    get_planet_data_working_seed   ; sort out system data
 382+ 6289 C9                                   ret
 383+ 628A
 384+ 628A
 385+ 628A              ; to create planet position
 386+ 628A              ;       take seed 2 AND %00000011 + 3 + carry and store in z sign
 387+ 628A              ;       take result and divide by 2 then store in x and y sign
 388+ 628A              ;
 389+ 628A              ;       take seed 4 AND %00000111 OR %10000001 and store in z sign
 390+ 628A              ;       take seed 6 AND %00000011 and store in x sign and y sign
 391+ 628A              ;       set pitch and roll to 0
 392+ 628A              ;
 393+ 628A              ;
 394+ 628A              ;
 395+ 628A              ; --- At the end of a hyperspace jump we have to reset compass, market universe sun and planets etc
 396+ 628A CD 19 61     WeHaveCompletedHJump:   call    IntitaliseBubble
 397+ 628D                          DISPLAY "TODO:  GENEATE SUB AND PLANET POS"
 398+ 628D                                      SetMemFalse DockedFlag
 398+ 628D 3E FF       >                        ld      a,$FF
 398+ 628F 32 33 81    >                        ld      (DockedFlag),a
 399+ 6292 3E FF        .TriggerEngineSound:    ld      a,$FF
 400+ 6294 32 06 B1                             ld      (LAST_DELTA),a              ; force sound update in interrupt
 401+ 6297 C3 84 63                             jp  DoubleBufferCheck
 402+ 629A
 403+ 629A
 404+ 629A 3A A5 62     WarpSFX:                ld      a,(WarpRoutineAddr+1)
 405+ 629D A7                                   and     a
 406+ 629E C8                                   ret     z
 407+ 629F 3E 00        WarpMMUBank:            ld      a,$00
 408+ 62A1                                      MMUSelectScreenA
 408+ 62A1 ED 92 56    >                     nextreg ScreenBankMMU,		a
 409+ 62A4 CD 00 00     WarpRoutineAddr:        call    0000
 410+ 62A7 C9                                   ret
 411+ 62A8
 412+ 62A8              ;--- From here is the new simplified logic. This uses the current spawn table
 413+ 62A8              ;--- Events such as jumping to a system, ending up in which space,
 414+ 62A8              ;--- special mission events
 415+ 62A8              ;--- We will need actually two tables, 1 for in station range 1 for not else flipping tables on the Z boundary
 416+ 62A8              ;--- Would be difficult
 417+ 62A8              ;--- load the table to work from. This then leaves all teh logic configurable
 418+ 62A8              LoopEventTriggered:     ; for now just do spawn
 419+ 62A8 C3 AB 62                             jp      SpawnEvent
 420+ 62AB                                      ; implicit ret from jp
 421+ 62AB
 422+ 62AB                  DEFINE  SPAWN_TABLE_SELECT   1
 423+ 62AB                  DEFINE  SPAWN_GENERATE_COUNT 1
 424+ 62AB                  DEFINE  SPAWN_LOOP           1
 425+ 62AB              ;    DEFINE  SPAWN_IGNORE         1
 426+ 62AB
 427+ 62AB
 428+ 62AB              SpawnEvent:             IFDEF   SPAWN_IGNORE
 429+ 62AB ~                                        ret
 430+ 62AB                                      ENDIF
 431+ 62AB CD B1 84                             call    FindNextFreeSlotInC                 ; c= slot number, if we cant find a slot
 432+ 62AE D8                                   ret     c                                   ; then may as well just skip routine
 433+ 62AF                                      IFDEF   MAINLOOP_SPAWN_ALWAYS_OUTSIDE_SAFEZONE
 434+ 62AF                                          SetMemFalse SpaceStationSafeZone
 434+ 62AF 3E FF       >                        ld      a,$FF
 434+ 62B1 32 19 80    >                        ld      (SpaceStationSafeZone),a
 435+ 62B4                                      ENDIF
 436+ 62B4 FD 61        .SpawnIsPossible:       ld      iyh,c                               ; save slot free in iyh
 437+ 62B6 CD 3D 64                             call    SelectSpawnTable                    ; ix = correct row in spawn table
 438+ 62B9 CD 25 64     .GetSpawnDetails:       call    SelectSpawnTableData                ; get table data,
 439+ 62BC 78           .CheckIfInvalid:        ld      a,b                                 ; if b was 0
 440+ 62BD B7                                   or      a                                   ; then its an invalid
 441+ 62BE C8                                   ret     z                                   ; ship or just not to spawn
 442+ 62BF E5 C5        .SetNbrToSpawn:         push    hl,,bc                              ; b will be set to the
 443+ 62C1 CD 0A 85                             call    doRandom                            ; actual number to spawn
 444+ 62C4 C1                                   pop     bc                                  ; a is not really needed now as de and hl hold
 445+ 62C5 A0                                   and     b                                   ; addresses for table and handler code
 446+ 62C6 F6 01                                or      1                                   ; at least 1
 447+ 62C8 47                                   ld      b,a                                 ; so b = the number to spawn
 448+ 62C9 E1                                   pop     hl                                  ; get back address of spawn handler
 449+ 62CA              ; b = nbr to spawn, hl = handler for spawn, de = lookup table of ship type to spawn
 450+ 62CA C5 D5 E5     .SpawnLoop:             push    bc,,de,,hl                          ; save loop counter lookup table and handler
 451+ 62CD EB                                   ex      de,hl                               ; hl = lookup spawn type table, de = handler for spawn
 452+ 62CE CD 5C 64                             call    SelectSpawnType                     ; a = shipId to Spawn
 453+ 62D1 CD DA 62                             call    .SpawnAShipTypeA                    ; if we get a carry then stop spawning
 454+ 62D4 E1 D1 C1                             pop     bc,,de,,hl                          ; get back values
 455+ 62D7 10 F1                                djnz    .SpawnLoop                          ; repeat until B = 0
 456+ 62D9 C9                                   ret                                         ; we are done
 457+ 62DA EB           .SpawnAShipTypeA        ex      de,hl                               ; hl= handler to spawn, a = ship to spawn
 458+ 62DB E9                                   jp      hl                                  ; we call this so we can do a dynamic jp
 459+ 62DC                                      ; implicit ret from jp                      ; SpawnShipTypeA handles free slot tests etc
 460+ 62DC
 461+ 62DC
 462+ 62DC
 463+ 62DC 00           EnemyShipBank:          DS 1
 464+ 62DD 00 00 00...  EnemyMissileLaunchPos:  DS 3 * 3
 465+ 62E6 00 00 00...  EnemyMissileLaunchMat:  DS 2 * 3
 466+ 62EC
 467+ 62EC
 468+ 62EC 3A 40 C0     LaunchEnemyMissile:     ld      a,(UBnkShipUnivBankNbr)             ; save current bank number
 469+ 62EF 32 DC 62                             ld      (EnemyShipBank),a                   ;
 470+ 62F2 3E 05                                ld      a,5
 471+ 62F4 CD D5 A6                             call    CalcLaunchOffset
 472+ 62F7 3E 00                                ld      a,0                                 ; TODO For now only 1 missile type
 473+ 62F9                                      GetByteAInTable ShipMissileTable            ; swap in missile data
 473+ 62F9 21 DB 77    >                    ld          hl,ShipMissileTable
 473+ 62FC ED 31       >                    add         hl,a
 473+ 62FE 7E          >                    ld          a,(hl)
 474+ 62FF CD 42 63                             call    SpawnShipTypeA                      ; spawn the ship
 475+ 6302 D8                                   ret     c                                   ; return if failed
 476+ 6303 CD B0 C6                             call    UnivSetEnemyMissile                 ; as per player but sets as angry
 477+ 6306 3E FF                                ld      a,$FF
 478+ 6308 32 45 C0                             ld      (UBnkMissileTarget),a               ; set as definte player as target
 479+ 630B 3A DC 62                             ld      a,(EnemyShipBank)                   ; Direct restore current bank
 480+ 630E                                      MMUSelectUnivBankA                          ;
 480+ 630E ED 92 56    >                     nextreg UniverseMMU,       a
 481+ 6311 21 5D C0                             ld      hl, UBnkMissilesLeft                ; reduce enemy missile count
 482+ 6314 35                                   dec     (hl)
 483+ 6315 C9                                   ret
 484+ 6316
 485+ 6316 3E 0A        LaunchEnemyFighter:     ld      a,10
 486+ 6318                                      ;break;call    CopyUBnktoLaunchParameters
 487+ 6318                                      ;copymatrix,rot and speed
 488+ 6318 C9                                   ret
 489+ 6319
 490+ 6319 CD B1 84     LaunchPlayerMissile:    call    FindNextFreeSlotInC                 ; Check if we have a slot free
 491+ 631C 38 1E                                jr      c,.MissileMissFire                  ; give a miss fire indicator as we have no slots
 492+ 631E                          DISPLAY "TODO: FOR NOW ONLY 1 MISSILE TYPE"
 493+ 631E 3E 00        .LaunchGood:            ld      a,0                                 ; TODO For now only 1 missile type
 494+ 6320                                      GetByteAInTable ShipMissileTable            ; swap in missile data
 494+ 6320 21 DB 77    >                    ld          hl,ShipMissileTable
 494+ 6323 ED 31       >                    add         hl,a
 494+ 6325 7E          >                    ld          a,(hl)
 495+ 6326 CD 42 63                             call    SpawnShipTypeA                      ; spawn the ship
 496+ 6329 3A F7 81                             ld      a,(MissileTargettingFlag)           ; Get target from computer
 497+ 632C 32 45 C0                             ld      (UBnkMissileTarget),a               ; load target Data
 498+ 632F CD F8 C6                             call    UnivSetPlayerMissile                ; .
 499+ 6332                                      ClearMissileTargetting                      ; reset targetting
 499+ 6332 3E FF       >                        ld      a,StageMissileNotTargeting
 499+ 6334 32 F7 81    >                        ld      (MissileTargettingFlag),a
 500+ 6337 21 20 80                             ld      hl, NbrMissiles
 501+ 633A 35                                   dec     (hl)
 502+ 633B                          DISPLAY "TODO: handle removal of missile from inventory and console"
 503+ 633B C9                                   ret
 504+ 633C              .MissileMissFire:       ClearMissileTargetting
 504+ 633C 3E FF       >                        ld      a,StageMissileNotTargeting
 504+ 633E 32 F7 81    >                        ld      (MissileTargettingFlag),a
 505+ 6341 C9                                   ret ; TODO bing bong noise misfire message
 506+ 6342
 507+ 6342                                      include "./SpawnShipTypeA.asm"
# file opened: ./GameEngine/./SpawnShipTypeA.asm
   1++6342              ;.. SpawnShipTypeA
   2++6342              ; IN
   3++6342              ;  a = ship type to create (equates to the ship model)
   4++6342              ; OUT
   5++6342              ;  b = ship class
   6++6342              ;  a = iyh = slot number
   7++6342              SpawnShipTypeA:         ;break
   8++6342 FD 6F                                ld      iyl,a                               ; save ship type in iyl
   9++6344 CD B1 84                             call    FindNextFreeSlotInC                 ; c = slot number to use
  10++6347 D8                                   ret     c                                   ; if carry flag was set then no spare slots
  11++6348 FD 61        SpawnShipTypeASlotC:    ld      iyh,c                               ; preserve slot number for now
  12++634A                                      MMUSelectShipBank1                          ; select bank 1
  12++634A ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
  13++634E FD 7C                                ld      a,iyh                               ; A = slot number
  14++6350 FD 45                                ld      b,iyl                               ; b = ship type
  15++6352 CD 19 84                             call    SetSlotAToTypeB                     ; Allocate slot as used
  16++6355                                      MMUSelectUniverseA                          ; .
  16++6355 C6 46       >                     add    a,BankUNIVDATA0
  16++6357 ED 92 56    >                     nextreg UniverseMMU,       a
  17++635A FD 7C        .MarkUnivDiags:         ld      a,iyh                               ; mark diagnostics for bank number in memory
  18++635C C6 41                                add     "A"                                 ; so fix Universe PB<x> to correct letter
  19++635E 32 0B C0                             ld      (StartOfUnivN),a                    ; to help debugging
  20++6361 FD 7D                                ld      a,iyl                               ; get ship model type
  21++6363 32 0E C0                             ld      (StartOfUnivM),a                    ; set debugging for model
  22++6366 CD 0F E0     .CopyOverShipData:      call    GetShipBankId                       ; find actual memory location of ship model data
  23++6369                                      MMUSelectShipBankA                          ; by paging in bank a then looking up computed bank for model a
  23++6369 ED 92 57    >					 nextreg ShipModelMMU,	    a
  24++636C 78                                   ld      a,b                                 ; b = computed ship id for bank
  25++636D CD 6A E0                             call    CopyShipToUniverse                  ; copy all the ship data in to the paged in bank
  26++6370 CD 95 C8                             call    UnivSetSpawnPosition                ; set initial spawn position
  27++6373 CD 1B C9                             call    UnivInitRuntime                     ; Clear runtime data before startup, iy h and l are already set up
  28++6376 3A 0E C4                             ld      a,(ShipTypeAddr)                    ; get ship type
  29++6379 32 0F C0                             ld      (StartOfUnivT),a                    ; to help debugging we store type too
  30++637C 47                                   ld      b,a                                 ; and set the type into slot table
  31++637D FD 7C                                ld      a,iyh                               ;
  32++637F CD 20 84                             call    SetSlotAToClassB                    ;
  33++6382                                      ClearCarryFlag                              ; no carry on success
  33++6382 B7          >                        or a
  34++6383 C9                                   ret
  35++6384
  36++6384
  37++6384              ; iyh = 0 then its a hyperspace entry, if its $FF them its from a space station launch
  38++6384              ; for a hyperspace entry ParentPlanetX.. must be populated else its back populated
  39++6384              ;SpawnSpaceStation:      MMUSelectSpaceStation                       ; Get Space station bank in
  40++6384              ;                        call    SelectSpaceStationType              ; Use algorithim there to determine station type based on galaxy algorithm
  41++6384              ;                        ld      iyl,a                               ; iyl = station type
  42++6384              ;                        MMUSelectShipBank1
  43++6384              ;                        ld      a,<SpaceStationBank>
  44++6384              ;                        ls      a,iyl                               ; a = station type
  45++6384              ;.CopyOverShipData:      call    GetShipBankId
  46++6384              ;                        MMUSeelctShipBankA                          ; b = computed ship id for station type and bank
  47++6384              ;                        ld      a,b                                 ;
  48++6384              ;                        call    CopyShipToSpaceStation
  49++6384              ;                        call
  50++6384
# file closed: ./GameEngine/./SpawnShipTypeA.asm
 508+ 6384
 509+ 6384                                      ; reset main loop counters
 510+ 6384                                      ; from BBC TT18 jump code
 511+ 6384                                      ; need to set system corrodinates, flush out univere ships etc
 512+ 6384                                      ; set up new star system and landing location in system
 513+ 6384                                      ; reset ship speed etc (RES2)
 514+ 6384                                      ; update legal status, missle indicatrions, planet data block, sun data block (SOLAR)
 515+ 6384                                      ;   put planet into data blokc 1 of FRIN
 516+ 6384                                      ;   put sun inot data block (NWWSHIP)
 517+ 6384                                      ; need to look at in system warp code (WARP) - note we need to -reorg all to code for teh station as that will never be in slot 0
 518+ 6384
 519+ 6384              WeAreInTransition:
 520+ 6384 3E 00        DoubleBufferCheck:      ld      a,00
 521+ 6386                                      IFDEF DOUBLEBUFFER
 522+ 6386 FE 00                                    cp      0
 523+ 6388 CA 97 63                                 jp      z,TestTransition
 524+ 638B                                          MMUSelectLayer2
 524+ 638B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 525+ 638F 3A 02 E0                                 ld     a,(varL2_BUFFER_MODE)
 526+ 6392 FE 00                                    cp     0
 527+ 6394 C4 97 E2                                 call   nz,l2_flip_buffers
 528+ 6397                                      ENDIF
 529+ 6397 3A 8C 6A     TestTransition:         ld      a,(ScreenTransitionForced)          ; was there a bruite force screen change in any update loop
 530+ 639A FE FF                                cp      $FF
 531+ 639C CA 22 5F                             jp      z,MainLoop
 532+ 639F CD FE 6A     BruteForceChange:       call    SetScreenA
 533+ 63A2 C3 22 5F                             jp MainLoop
 534+ 63A5
 535+ 63A5
 536+ 63A5              ;......................................................................
 537+ 63A5              ; Sound Code
 538+ 63A5
 539+ 63A5
 540+ 63A5
 541+ 63A5              ;As speed goes up so does pitch
 542+ 63A5
# file closed: ./GameEngine/MainLoop.asm
 347  63A5                                      INCLUDE "./GameEngine/SpawnObject.asm"
# file opened: ./GameEngine/SpawnObject.asm
   1+ 63A5              ; --------------------------------------------------------------
   2+ 63A5              ; generate space station type based on seed values
   3+ 63A5 3A 2E 80     SelectSpaceStationType:         ld      a,(DisplayEcononmy)
   4+ 63A8 2A 2F 80                                     ld      hl,(DisplayGovernment)          ; h = TekLevel, l = Government
   5+ 63AB ED 5B 31 80                                  ld      de,(DisplayPopulation)          ; d = productivity e = Population
   6+ 63AF                                              ; so its economdy + government - TekLevel + productivity - population %00000001
   7+ 63AF 85                                           add     a,l
   8+ 63B0 9C                                           sbc     a,h
   9+ 63B1 82                                           add     a,d
  10+ 63B2 9B                                           sbc     a,e
  11+ 63B3 E6 01                                        and     $01
  12+ 63B5 21 D9 77                                     ld      hl,MasterStations               ; in main memory
  13+ 63B8 ED 31                                        add     hl,a
  14+ 63BA 7E                                           ld      a,(hl)
  15+ 63BB C9                                           ret
  16+ 63BC
  17+ 63BC CD A5 63     SpawnSpaceStation:              call    SelectSpaceStationType
  18+ 63BF FD 6F                                        ld      iyl,a
  19+ 63C1 0E 00                                        ld      c,BankUNIVDATA0 - BankSpaceStationData
  20+ 63C3 C3 48 63                                     jp      SpawnShipTypeASlotC
  21+ 63C6                                              ; implicit return from jp
  22+ 63C6
  23+ 63C6 CD 42 63     SpawnStationHandler:            call    SpawnShipTypeA
  24+ 63C9 D8                                           ret     c                                   ; abort if failed
  25+ 63CA C9                                           ret
  26+ 63CB
  27+ 63CB
  28+ 63CB CD 42 63     SpawnHermitHandler:             call    SpawnShipTypeA
  29+ 63CE D8                                           ret     c                                   ; abort if failed
  30+ 63CF C9                                           ret
  31+ 63D0
  32+ 63D0 CD 42 63     SpawnAsteroidHandler:           call    SpawnShipTypeA
  33+ 63D3 D8                                           ret     c                                   ; abort if failed
  34+ 63D4                                              ;Set random position and vector
  35+ 63D4                                              ; if its a hermit jump to that to so special
  36+ 63D4
  37+ 63D4 C9                                           ret
  38+ 63D5
  39+ 63D5 F5           SpawnTypeJunkHandler:           push    af
  40+ 63D6                                              TestRoomForJunk .CanAddJunk
  40+ 63D6 3E 03       >                        ld      a,3
  40+ 63D8             >                        JumpIfMemTrue  SpaceStationSafeZone, .DoTest
  40+ 63D8 3A 19 80    >                        ld      a,(SpaceStationSafeZone)
  40+ 63DB A7          >                        and     a
  40+ 63DC CA E1 63    >                        jp      z, .DoTest
  40+ 63DF C6 02       >                        add     a,2
  40+ 63E1             >.DoTest                 JumpIfALTMemusng    JunkCount, .CanAddJunk
  40+ 63E1 21 1B 80    >                        ld      hl,JunkCount
  40+ 63E4 BE          >                        cp      (hl)
  40+ 63E5 DA E9 63    >                        jp		c,.CanAddJunk
  41+ 63E8 C9                                           ret
  42+ 63E9 F1           .CanAddJunk:                    pop     af
  43+ 63EA CD 42 63                                     call    SpawnShipTypeA
  44+ 63ED                                              AddJunkCount
  44+ 63ED 21 1B 80    >                        ld      hl,JunkCount
  44+ 63F0 34          >                        inc     (hl)
  45+ 63F1 D8                                           ret     c                                   ; abort if failed
  46+ 63F2 C9                                           ret
  47+ 63F3
  48+ 63F3 CD 42 63     SpawnTypeCopHandler:            call    SpawnShipTypeA
  49+ 63F6 D8                                           ret     c                                   ; abort if failed
  50+ 63F7                                              ; Cops will be non hostile if there are no other ones in area
  51+ 63F7                                              ; if there are, then check out cargo and fist to evalutate
  52+ 63F7                                              ; if not hostile and in space station area, then patrol orbiting station
  53+ 63F7                                              ; if not in space station area even split on orbiting a random point in space at distance random
  54+ 63F7                                              ;                                            travelling to station
  55+ 63F7                                              ;                                            travelling to sun
  56+ 63F7 C9                                           ret
  57+ 63F8 CD 42 63     SpawnTypeTraderHandler:         call    SpawnShipTypeA
  58+ 63FB D8                                           ret     c                                   ; abort if failed
  59+ 63FC                                              ; 50/50 goign to planet or sun
  60+ 63FC                                              ;                main loop AI determines if our FIST status will force a jump
  61+ 63FC C9                                           ret
  62+ 63FD CD 42 63     SpawnTypeNonTraderHandler:      call    SpawnShipTypeA
  63+ 6400 D8                                           ret     c                                   ; abort if failed
  64+ 6401                                              ; 50/50 goign to planet or sun
  65+ 6401                                              ; if FIST is high then 10% chance will auto go hostile
  66+ 6401 C9                                           ret
  67+ 6402 CD 42 63     SpawnTypePirateHandler:         call    SpawnShipTypeA
  68+ 6405 D8                                           ret     c                                   ; abort if failed
  69+ 6406                                              ; set random position
  70+ 6406                                              ; 50/50 going to station or sun
  71+ 6406                                              ; if in safe zone, then not hostile
  72+ 6406                                              ; work out value of our cargo then go auto hostile (e.g. gems/gold, special carry nuke mission has cargo so valueable it auto sets hostile)
  73+ 6406                                              AddPirateCount                              ; another pirate has been spawned
  73+ 6406 21 1F 80    >                        ld      hl,PirateCount
  73+ 6409 34          >                        inc     (hl)
  74+ 640A C9                                           ret
  75+ 640B CD 42 63     SpawnTypeHunterHandler:         call    SpawnShipTypeA
  76+ 640E D8                                           ret     c                                   ; abort if failed
  77+ 640F                                              ; initially hunters will be non hostile and by default going to station
  78+ 640F                                              ; set random position
  79+ 640F                                              ; 50/50 going to station or sun
  80+ 640F                                              ; Check out FIST status, if very high auto hostile
  81+ 640F                                              ; else its checked on ship event loop
  82+ 640F C9                                           ret
  83+ 6410 CD 42 63     SpawnTypeThargoidHandler:       call    SpawnShipTypeA
  84+ 6413 D8                                           ret     c                                   ; abort if failed
  85+ 6414                                              ; initially non hostile, main AI does logic (ie.. they will go hostile always after a random time or if shot at)
  86+ 6414                                              ; start in random position
  87+ 6414 C9                                           ret
  88+ 6415 C9           SpawnTypeMissionHandler:        ret
  89+ 6416
  90+ 6416 CD 42 63     SpawnTypeStationDebrisHandler: call    SpawnShipTypeA
  91+ 6419 D8                                           ret     c                                   ; abort if failed
  92+ 641A                                              ;Set random position and vector
  93+ 641A C9                                           ret
  94+ 641B              SpawnTypeMissionEventHandler:
  95+ 641B C9           SpawnTypeDoNotSpawnHandler:    ret
  96+ 641C
  97+ 641C
  98+ 641C
  99+ 641C 3E 29        SpawnHostileCop:        ld      a,ShipID_Viper
 100+ 641E CD 42 63                             call    SpawnShipTypeA                      ; call rather than jump
 101+ 6421 CD 1B C6                             call    SetShipHostile                      ; as we have correct universe banked in now
 102+ 6424 C9                                   ret
 103+ 6425                          DISPLAY "TODO: SPAWN TRADER"
 104+ 6425              SpawnTrader:       ; TODO
 105+ 6425
 106+ 6425              ; DEFUNCT?SpawnAHostileHunter:    ld      hl, ExtraVesselsCounter             ; prevent the next spawning
 107+ 6425              ; DEFUNCT?                        inc     (hl)                                ;
 108+ 6425              ; DEFUNCT?                        and     3                                   ; a = random 0..3
 109+ 6425              ; DEFUNCT?                        MMUSelectShipBank1
 110+ 6425              ; DEFUNCT?                        GetByteAInTable ShipHunterTable             ; get hunter ship type
 111+ 6425              ; DEFUNCT?                        call    SpawnShipTypeA
 112+ 6425              ; DEFUNCT?                        call    SetShipHostile
 113+ 6425              ; DEFUNCT?                        ret
 114+ 6425
 115+ 6425
 116+ 6425
 117+ 6425              ; input IX = table for spawn data
 118+ 6425              ; output A  = table type
 119+ 6425              ;        b = maximum to spawn
 120+ 6425              ;        de = spawn table address
 121+ 6425              ;        hl = spawn handler address
 122+ 6425 DD 7E 08     SelectSpawnTableData:   ld      a,(ix+1*SpawnTableSize)             ; Table Type
 123+ 6428 21 D1 64                             ld      hl,SpawnTypeHandlers                ; hl = the location in spawn table for the call address for setting up a spawn
 124+ 642B ED 31                                add     hl,a                                ; of type A
 125+ 642D ED 31                                add     hl,a                                ;
 126+ 642F 7E                                   ld      a,(hl)
 127+ 6430 23                                   inc     hl
 128+ 6431 66                                   ld      h,(hl)
 129+ 6432 6F                                   ld      l,a                                 ; hl now is proper address
 130+ 6433 DD 46 10                             ld      b,(ix+2*SpawnTableSize)             ; Nbr to Spawn
 131+ 6436 DD 5E 18                             ld      e,(ix+3*SpawnTableSize)             ; Spawn Table Addr Low
 132+ 6439 DD 56 20                             ld      d,(ix+4*SpawnTableSize)             ; Spawn Table Addr Hi
 133+ 643C C9                                   ret
 134+ 643D
 135+ 643D              ; Output IX = pointer to correct row in table
 136+ 643D              ; its up to the caller if DE is right table and it it needs to load into
 137+ 643D              ; it is up to the main loop code to maintain SpaceStationSafeZone
 138+ 643D              SelectSpawnTable:
 139+ 643D              .SelectCorrectTable:    JumpIfMemTrue SpaceStationSafeZone, .SelectSpaceStationTable
 139+ 643D 3A 19 80    >                        ld      a,(SpaceStationSafeZone)
 139+ 6440 A7          >                        and     a
 139+ 6441 CA 4B 64    >                        jp      z, .SelectSpaceStationTable
 140+ 6444 DD 21 81 64                          ld      ix,FreeSpaceSpawnTableLow
 141+ 6448 C3 4F 64                             jp      .RandomShip
 142+ 644B DD 21 A9 64  .SelectSpaceStationTable:ld      ix,StationSpawnTableLow
 143+ 644F CD 0A 85     .RandomShip:            call    doRandom
 144+ 6452 DD BE 00     .SelectLoop:            cp      (ix+0)                              ; Compare high value
 145+ 6455 D8                                   ret     c                                   ; if random <= high threshold jump to match, we cant just do jr c as 255 would never compare
 146+ 6456 C8                                   ret     z                                   ; if random <= high threshold jump to match, result is, last values must be 255
 147+ 6457 DD 23                                inc     ix                                  ; move to next row
 148+ 6459 C3 52 64                             jp      .SelectLoop                         ; we have a 255 marker to stop infinite loop
 149+ 645C
 150+ 645C              ; Returns with carry set if no ship to spawn
 151+ 645C              ; In = hl = address of first byte of table
 152+ 645C 06 03        SelectSpawnType:        ld      b,3                                 ; maxium of 3 goes
 153+ 645E E5 FD E1                             ld      iy,hl                               ; save hl as we may need it if the spawn is too high rank
 154+ 6461 CD 0A 85     .SelectSpawnType:       call    doRandom
 155+ 6464 E6 0F                                and     %00001111                           ; random 1 to 15
 156+ 6466 CB 27                                sla     a                                   ; * 2 as its 2 bytes per row
 157+ 6468 ED 31                                add     hl,a
 158+ 646A 7E                                   ld      a,(hl)
 159+ 646B 47                                   ld      b,a
 160+ 646C 3A 25 80                             ld      a,(CurrentRank)                     ; are we experienced enough to face this ship
 161+ 646F                                      JumpIfAGTENusng b, .GoodToSpawn             ; if current rank >= table rank, we are good
 161+ 646F B8          >                        cp     b
 161+ 6470 D2 7A 64    >                        jp		nc,.GoodToSpawn
 162+ 6473 FD E5 E1     .TooLowRank:            ld      hl,iy
 163+ 6476 10 E9                                djnz    .SelectSpawnType                    ; 3 goes then fail out
 164+ 6478              .NoSpawn:               SetCarryFlag
 164+ 6478 37          >                        scf
 165+ 6479 C9                                   ret
 166+ 647A 3E 08        .GoodToSpawn:           ld      a,8                                 ; so we shift by 8
 167+ 647C ED 31                                add     hl,a                                ; to get to the ship id
 168+ 647E 7E                                   ld      a,(hl)                              ; and fetch it in a
 169+ 647F                                      ClearCarryFlag
 169+ 647F B7          >                        or a
 170+ 6480 C9                                   ret
 171+ 6481
 172+ 6481              ; Spawn table is in two halves. if we are within range X of space station we use the second table
 173+ 6481              ; thsi means we coudl in theory drag a hunter / pirate or thargoid say into a space station zone
 174+ 6481              ; Probability high
 175+ 6481              ; Class of table,       0=Station,
 176+ 6481              ; Table to pick from (this is then based on ranking )
 177+ 6481
 178+ 6481              ; Its prefilled to 8 options in the table to allocate space. though the table can only accomodate 8. ther eis a 9th as a marker, value of table = 0 means no spawn
 179+ 6481 54 9F FA FF  FreeSpaceSpawnTableLow:    DB 84,                       159,                            250,                            255,                        255,                 255,                 255,                 255
 179+ 6485 FF FF FF FF
 180+ 6489 03 04 05 06  FreeSpaceSpawnTableType:   DB SpawnTypeCop,             SpawnTypeTrader,                SpawnTypeNonTrader,             SpawnTypePirate,            SpawnTypeDoNotSpawn, SpawnTypeDoNotSpawn, SpawnTypeDoNotSpawn, SpawnTypeDoNotSpawn
 180+ 648D 0C 0C 0C 0C
 181+ 6491 01 01 01 02  FreeSpaceSpawnTableCount:  DB 1,                        1,                              1,                              2,                          0,                   0,                   0,                   0
 181+ 6495 00 00 00 00
 182+ 6499 89 79 79 49  FreeSpaceSpawnTableAddrLo: DB low(ShipCopTableARank),   low(ShipNonTraderTableARank),   low(ShipNonTraderTableARank),   low(ShipPirateTableARank),  low(0),              low(0),              low(0),              low(0)
 182+ 649D 00 00 00 00
 183+ 64A1 77 77 77 77  FreeSpaceSpawnTableAddrHi: DB high(ShipCopTableARank),  high(ShipNonTraderTableARank),  high(ShipNonTraderTableARank),  high(ShipPirateTableARank), high(0),             high(0),             high(0),             high(0)
 183+ 64A5 00 00 00 00
 184+ 64A9
 185+ 64A9 54 9F FA FF  StationSpawnTableLow:      DB 84,                       159,                            250,                            255,                        255,                 255,                 255,                 255
 185+ 64AD FF FF FF FF
 186+ 64B1 03 04 05 06  StationSpawnTableType:     DB SpawnTypeCop,             SpawnTypeTrader,                SpawnTypeNonTrader,             SpawnTypePirate,            SpawnTypeDoNotSpawn, SpawnTypeDoNotSpawn, SpawnTypeDoNotSpawn, SpawnTypeDoNotSpawn
 186+ 64B5 0C 0C 0C 0C
 187+ 64B9 01 01 01 03  StationSpawnTableCount:    DB 1,                        1,                              1,                              3,                          0,                   0,                   0,                   0
 187+ 64BD 00 00 00 00
 188+ 64C1 89 79 79 49  StationSpawnTableAddrLo:   DB low(ShipCopTableARank),   low(ShipNonTraderTableARank),   low(ShipNonTraderTableARank),   low(ShipPirateTableARank),  low(0),              low(0),              low(0),              low(0)
 188+ 64C5 00 00 00 00
 189+ 64C9 77 77 77 77  StationSpawnTableAddrHi:   DB high(ShipCopTableARank),  high(ShipNonTraderTableARank),  high(ShipNonTraderTableARank),  high(ShipPirateTableARank), high(0),             high(0),             high(0),             high(0)
 189+ 64CD 00 00 00 00
 190+ 64D1
 191+ 64D1              SpawnTableSize             EQU  FreeSpaceSpawnTableType - FreeSpaceSpawnTableLow
 192+ 64D1
 193+ 64D1              ; Looko in constant equates, Spawntype equates for the values for this jump table
 194+ 64D1              ; note at minium it must itmust point to SpawnTypeDoNotSpawnHandlers which just does a ret
 195+ 64D1 C6 63 D0 63  SpawnTypeHandlers:         DW SpawnStationHandler,       SpawnAsteroidHandler,      SpawnTypeJunkHandler,          SpawnTypeCopHandler
 195+ 64D5 D5 63 F3 63
 196+ 64D9 F8 63 FD 63                             DW SpawnTypeTraderHandler,    SpawnTypeNonTraderHandler, SpawnTypePirateHandler,        SpawnTypeHunterHandler
 196+ 64DD 02 64 0B 64
 197+ 64E1 10 64 15 64                             DW SpawnTypeThargoidHandler,  SpawnTypeMissionHandler,   SpawnTypeStationDebrisHandler, SpawnTypeMissionEventHandler
 197+ 64E5 16 64 1B 64
 198+ 64E9 1B 64                                   DW SpawnTypeDoNotSpawnHandler
# file closed: ./GameEngine/SpawnObject.asm
 348  64EB              ;..................................................................................................................................
 349  64EB              ;..Process A ship..................................................................................................................
 350  64EB              ; Apply Damage b to ship based on shield value of a
 351  64EB              ; returns a with new shield value
 352  64EB                                      INCLUDE "./GameEngine/DamagePlayer.asm"
# file opened: ./GameEngine/DamagePlayer.asm
   1+ 64EB              ;..Process A ship..................................................................................................................
   2+ 64EB              ; Apply Damage b to ship based on shield value of a
   3+ 64EB              ; returns a with new shield value
   4+ 64EB              ApplyDamage:            ClearCarryFlag
   4+ 64EB B7          >                        or a
   5+ 64EC 98                                   sbc     b
   6+ 64ED D0                                   ret     nc                  ; no carry so was not negative
   7+ 64EE ED 44        .KilledShield:          neg                         ; over hit shield
   8+ 64F0 4F                                   ld      c,a                 ; save overhit in c
   9+ 64F1 3A F4 81                             ld      a,(PlayerEnergy)    ; and apply it to player energy
  10+ 64F4                                      ClearCarryFlag
  10+ 64F4 B7          >                        or a
  11+ 64F5 99                                   sbc     c
  12+ 64F6 F2 FA 64                             jp      p,.DoneDamage       ; if result was 0 or more then completed damage
  13+ 64F9 AF           .KilledPlayer:          xor     a
  14+ 64FA 32 F4 81     .DoneDamage:            ld      (PlayerEnergy),a
  15+ 64FD AF                                   xor     a                   ; shield is gone
  16+ 64FE C9                                   ret
  17+ 64FF
# file closed: ./GameEngine/DamagePlayer.asm
 353  64FF              ;..Update Universe Objects.........................................................................................................
 354  64FF                                      INCLUDE "./GameEngine/UpdateUniverseObjects.asm"
# file opened: ./GameEngine/UpdateUniverseObjects.asm
   1+ 64FF              ;..................................................................................................................................
   2+ 64FF              ;                           DEFINE ROTATIONDEBUG 1
   3+ 64FF              ;                           DEFINE CLIPDEBUG 1
   4+ 64FF 00           CurrentShipUniv:        DB      0
   5+ 6500              ;..................................................................................................................................
   6+ 6500              ; if ship is destroyed or exploding then z flag is clear, else z flag is set
   7+ 6500              IsShipDestroyedOrExploding: MACRO
   8+ 6500 ~                                        ld      a,(UBnkexplDsp)                                 ; is it destroyed
   9+ 6500 ~                                        and     %10100000                                       ; or exploding
  10+ 6500                                          ENDM
  11+ 6500
  12+ 6500              JumpIfShipNotClose:         MACRO   NotCloseTarget
  13+ 6500 ~            .CheckIfClose:              ld      hl,(UBnkxlo)                                    ; chigh byte check or just too far away
  14+ 6500 ~                                        ld      de,(UBnkylo)                                    ; .
  15+ 6500 ~                                        ld      bc,(UBnkzlo)                                    ; .
  16+ 6500 ~                                        or      h                                               ; .
  17+ 6500 ~                                        or      d                                               ; .
  18+ 6500 ~                                        or      b                                               ; .
  19+ 6500 ~                                        jp      nz,NotCloseTarget                               ; .
  20+ 6500 ~            .CheckLowBit7Close:         or      l                                               ; if bit 7 of low is set then still too far
  21+ 6500 ~                                        or      e                                               ; .
  22+ 6500 ~                                        or      c                                               ; .
  23+ 6500 ~                                        ld      iyh,a                                           ; save it in case we need to check bit 6 in collision check
  24+ 6500 ~                                        and     $80                                             ; .
  25+ 6500 ~                                        jp      nz,NotCloseTarget                              ; .
  26+ 6500                                          ENDM
  27+ 6500
  28+ 6500              VeryCloseCheck:             MACRO
  29+ 6500 ~                                        ld      a,iyh                                           ; bit 6 is still too far
  30+ 6500 ~                                        and     %11000000
  31+ 6500                                          ENDM
  32+ 6500
  33+ 6500              JumpIfNotDockingCheck:      MACRO   NotDocking
  34+ 6500 ~            .CheckIfDockable:           ld      a,(ShipTypeAddr)                                ; Now we have the correct bank
  35+ 6500 ~                                        JumpIfANENusng  ShipTypeStation, NotDocking             ; if its not a station so we don't test docking
  36+ 6500 ~            .IsDockableHostoleCheck:    JumpOnMemBitSet ShipNewBitsAddr, ShipHostileNewBitNbr, NotDocking ; if it is angry then we dont test docking
  37+ 6500 ~            .CheckHighNoseZ:            JumpIfMemLTNusng  UBnkrotmatNosevZ+1 , 214, NotDocking  ; get get high byte of rotmat this is the magic angle to be within 26 degrees +/-
  38+ 6500 ~            .GetStationVector:          call    GetStationVectorToWork                          ; Normalise position into XX15 as in effect its a vector from out ship to it given we are always 0,0,0, returns with A holding vector z
  39+ 6500 ~                                        JumpIfALTNusng  89, NotDocking                          ; if the z axis <89 the we are not in the 22 degree angle,m if its negative then unsigned comparison will cater for this
  40+ 6500 ~            .CheckAbsRoofXHi:           ld      a,(UBnkrotmatRoofvX+1)                          ; get abs roof vector high
  41+ 6500 ~                                        and     SignMask8Bit                                    ; .
  42+ 6500 ~                                        JumpIfALTNusng 80, NotDocking                           ; note 80 decimal for 36.6 degrees horizontal
  43+ 6500                                          ENDM
  44+ 6500
  45+ 6500              ;..................................................................................................................................
  46+ 6500 AF           UpdateUniverseObjects:  xor     a
  47+ 6501 32 36 81                             ld      (SelectedUniverseSlot),a
  48+ 6504                                      ;break
  49+ 6504 57           .UpdateUniverseLoop:    ld      d,a                                             ; d is unaffected by GetTypeInSlotA
  50+ 6505              ;.. If the slot is empty (FF) then skip this slot..................................................................................
  51+ 6505 CD AA 84                             call    GetTypeAtSlotA
  52+ 6508 FE FF                                cp      $FF                                             ; we don't process empty slots
  53+ 650A CA 5A 66                             jp      z,.UniverseSlotIsEmpty                          ; .
  54+ 650D FD 6F                                ld      iyl,a                                           ; save type into iyl for later
  55+ 650F 7A           .UniverseObjectFound:   ld      a,d                                             ; Get back Universe slot as we want it
  56+ 6510                                      MMUSelectUniverseA                                      ; and we apply roll and pitch
  56+ 6510 C6 46       >                     add    a,BankUNIVDATA0
  56+ 6512 ED 92 56    >                     nextreg UniverseMMU,       a
  57+ 6515                      IFDEF   CLIPDEBUG
  58+ 6515 ~            .DEBUG:                     ld      a,(SelectedUniverseSlot)
  59+ 6515 ~                                        cp      0
  60+ 6515 ~                                        jr      nz,.ProperUpdate
  61+ 6515                      ENDIF
  62+ 6515                      IFDEF   DEBUG_SHIP_MOVEMENT
  63+ 6515 ~            .DebugUpdate:               call    FixStationPos
  64+ 6515                      ENDIF
  65+ 6515                      IFDEF   CLIPDEBUG
  66+ 6515 ~                                        jp      .CheckExploding
  67+ 6515                      ENDIF
  68+ 6515                                          DISPLAY "TODO: Make all 4 of these 1 call"
  69+ 6515 CD 6E D6     .ProperUpdate:          call    ApplyMyRollAndPitch                             ; todo , make all 4 of these 1 call
  70+ 6518 3A 4A C0                             ld      a,(UBnkRotZCounter)
  71+ 651B FE 00                                cp      0
  72+ 651D CD 4E D8                             call    ApplyShipRollAndPitch
  73+ 6520 CD 98 D9                             call    ApplyShipSpeed
  74+ 6523 CD 8D C6                             call    UpdateSpeedAndPitch                             ; update based on rates of speed roll and pitch accelleration/decelleration
  75+ 6526              ;.. apply ships movement
  76+ 6526              ;.. If its a space station then see if we are ready to dock........................................................................
  77+ 6526              .CheckExploding:        IsShipDestroyedOrExploding                              ; fi its destroyed or exploding z flag will be clear
  77+ 6526 3A 52 C0    >                            ld      a,(UBnkexplDsp)                                 ; is it destroyed
  77+ 6529 E6 A0       >                            and     %10100000                                       ; or exploding
  78+ 652B C2 42 66                             jp      nz,.ProcessedUniverseSlot                       ; then no action
  79+ 652E              ;.. we can't collide with missiles, they collide with us as part of tactics
  80+ 652E              .CheckIfMissile:        JumpIfMemEqNusng ShipTypeAddr, ShipTypeMissile, .CollisionDone ; Missiles don't have ECM and do collision checks on their tactics phase
  80+ 652E 3A 0E C4    >                        ld  a,(ShipTypeAddr)
  80+ 6531 FE 01       >                        cp  ShipTypeMissile
  80+ 6533 CA 07 66    >                        jp  z,.CollisionDone
  81+ 6536 CD 61 C6     .ProcessECM:            call    UpdateECM                                       ; Update ECM Counters
  82+ 6539              .CheckIfClose:          JumpIfShipNotClose .PostCollisionTest
  82+ 6539 2A 20 C0    >.CheckIfClose:              ld      hl,(UBnkxlo)                                    ; chigh byte check or just too far away
  82+ 653C ED 5B 23 C0 >                            ld      de,(UBnkylo)                                    ; .
  82+ 6540 ED 4B 26 C0 >                            ld      bc,(UBnkzlo)                                    ; .
  82+ 6544 B4          >                            or      h                                               ; .
  82+ 6545 B2          >                            or      d                                               ; .
  82+ 6546 B0          >                            or      b                                               ; .
  82+ 6547 C2 07 66    >                            jp      nz,.PostCollisionTest                               ; .
  82+ 654A B5          >.CheckLowBit7Close:         or      l                                               ; if bit 7 of low is set then still too far
  82+ 654B B3          >                            or      e                                               ; .
  82+ 654C B1          >                            or      c                                               ; .
  82+ 654D FD 67       >                            ld      iyh,a                                           ; save it in case we need to check bit 6 in collision check
  82+ 654F E6 80       >                            and     $80                                             ; .
  82+ 6551 C2 07 66    >                            jp      nz,.PostCollisionTest                              ; .
  83+ 6554              .CheckIfDockable:       JumpIfNotDockingCheck .CollisionCheck                   ; check if we are docking or colliding
  83+ 6554 3A 0E C4    >.CheckIfDockable:           ld      a,(ShipTypeAddr)                                ; Now we have the correct bank
  83+ 6557             >                            JumpIfANENusng  ShipTypeStation, .CollisionCheck             ; if its not a station so we don't test docking
  83+ 6557 FE 02       >                        cp     ShipTypeStation
  83+ 6559 C2 8D 65    >                        jp      nz,.CollisionCheck
  83+ 655C             >.IsDockableHostoleCheck:    JumpOnMemBitSet ShipNewBitsAddr, ShipHostileNewBitNbr, .CollisionCheck ; if it is angry then we dont test docking
  83+ 655C 3A 0F C4    >                        ld      a,(ShipNewBitsAddr)
  83+ 655F CB 57       >                        bit 	ShipHostileNewBitNbr,a
  83+ 6561 C2 8D 65    >                        jp      nz,.CollisionCheck
  83+ 6564             >.CheckHighNoseZ:            JumpIfMemLTNusng  UBnkrotmatNosevZ+1 , 214, .CollisionCheck  ; get get high byte of rotmat this is the magic angle to be within 26 degrees +/-
  83+ 6564 3A 3A C0    >                        ld      a,(UBnkrotmatNosevZ+1)
  83+ 6567 FE D6       >                        cp      214
  83+ 6569 DA 8D 65    >                        jp	  c,.CollisionCheck
  83+ 656C CD C4 68    >.GetStationVector:          call    GetStationVectorToWork                          ; Normalise position into XX15 as in effect its a vector from out ship to it given we are always 0,0,0, returns with A holding vector z
  83+ 656F             >                            JumpIfALTNusng  89, .CollisionCheck                          ; if the z axis <89 the we are not in the 22 degree angle,m if its negative then unsigned comparison will cater for this
  83+ 656F FE 59       >                        cp      89
  83+ 6571 DA 8D 65    >                        jp		c, .CollisionCheck
  83+ 6574 3A 30 C0    >.CheckAbsRoofXHi:           ld      a,(UBnkrotmatRoofvX+1)                          ; get abs roof vector high
  83+ 6577 E6 7F       >                            and     SignMask8Bit                                    ; .
  83+ 6579             >                            JumpIfALTNusng 80, .CollisionCheck                           ; note 80 decimal for 36.6 degrees horizontal
  83+ 6579 FE 50       >                        cp      80
  83+ 657B DA 8D 65    >                        jp		c, .CollisionCheck
  84+ 657E              ;.. Its passed all validation and we are docking...................................................................................
  85+ 657E              .WeAreDocking:          MMUSelectLayer1
  85+ 657E ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  86+ 6582 3E 06                                ld        a,$6
  87+ 6584 CD B4 E0                             call      l1_set_border
  88+ 6587              .EnterDockingBay:       ForceTransition ScreenDocking                           ;  Force transition
  88+ 6587 3E 0D       >                        ld      a,ScreenDocking
  88+ 6589 32 8C 6A    >                        ld      (ScreenTransitionForced), a
  89+ 658C C9                                   ret                                                     ;  don't bother with other objects
  90+ 658D                                      ; So it is a candiate to test docking. Now we do the position and angle checks
  91+ 658D              ;.. else we are just colliding and have to handle that
  92+ 658D FD 7D        .CollisionCheck:        ld      a,iyl
  93+ 658F                                      JumpIfAEqNusng ShipTypeStation, .HaveCollided           ; stations dont check bit 6
  93+ 658F FE 02       >                        cp     ShipTypeStation
  93+ 6591 CA CA 65    >                        jp      z,.HaveCollided
  94+ 6594                                      JumpIfAEqNusng ShipTypeMissile, .PostCollisionTest      ; Missile collisions are done in the tactics code
  94+ 6594 FE 01       >                        cp     ShipTypeMissile
  94+ 6596 CA 07 66    >                        jp      z,.PostCollisionTest
  95+ 6599              .VeryCloseCheck:        VeryCloseCheck                                          ; bit 6 is still too far
  95+ 6599 FD 7C       >                            ld      a,iyh                                           ; bit 6 is still too far
  95+ 659B E6 C0       >                            and     %11000000
  96+ 659D 20 68                                jr      nz,.PostCollisionTest                            ; .
  97+ 659F FD 7D        .ScoopableCheck:        ld      a,iyl                                           ; so if its not scoopable
  98+ 65A1                                      JumpIfANENusng  ShipTypeScoopable, .HaveCollided        ; then its a collision
  98+ 65A1 FE 04       >                        cp     ShipTypeScoopable
  98+ 65A3 C2 CA 65    >                        jp      nz,.HaveCollided
  99+ 65A6 3A F2 84     .ScoopsEquiped:         ld      a,(FuelScoop)                                   ; if there is no scoop then impact
 100+ 65A9                                      JumpIfANENusng  EquipmentItemFitted, .HaveCollided      ; .
 100+ 65A9 FE FF       >                        cp     EquipmentItemFitted
 100+ 65AB C2 CA 65    >                        jp      nz,.HaveCollided
 101+ 65AE 3A 25 C0     .ScoopRegion:           ld      a,(UBnkysgn)                                    ; if the y axis is negative then we are OK
 102+ 65B1                                      JumpIfAIsZero   .HaveCollided                           ; else its a collision
 102+ 65B1 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 102+ 65B2 CA CA 65    >                        jp	    z, .HaveCollided
 103+ 65B5 CD E9 C8     .CollectedCargo:        call    ShipCargoType
 104+ 65B8 57           .DoWeHaveCapacity:      ld      d,a                                             ; save cargotype
 105+ 65B9 CD F7 82                             call    CanWeScoopCargoD
 106+ 65BC 38 03                                jr      c, .NoRoom
 107+ 65BE CD EF 82     .CanScoop:              call    AddCargoTypeD
 108+ 65C1              .NoRoom:                ClearSlotMem    SelectedUniverseSlot                    ; we only need to clear slot list as univ ship is now junk
 108+ 65C1 3A 36 81    >                        ld      a,(SelectedUniverseSlot)
 108+ 65C4 CD 3B 84    >                        call    ClearSlotA
 109+ 65C7 C3 07 66                             jp      .PostCollisionTest
 110+ 65CA              ; ... Generic collision
 111+ 65CA              .HaveCollided:          JumpIfMemLTNusng DELTA, 5, .SmallBump
 111+ 65CA 3A 6B 7F    >                        ld      a,(DELTA)
 111+ 65CD FE 05       >                        cp      5
 111+ 65CF DA DE 65    >                        jp	  c,.SmallBump
 112+ 65D2 3A 59 C0     .BigBump:               ld      a,(UBnkEnergy)                                  ; get energy level which gives us an approximate to size and health
 113+ 65D5                                      SetCarryFlag
 113+ 65D5 37          >                        scf
 114+ 65D6 17                                   rla                                                     ; divide by 2 but also bring in carry so its 128 + energy / 2
 115+ 65D7 47                                   ld      b,a
 116+ 65D8 CD AE DC                             call    KillShip                                        ; mark ship as dead (if possible)
 117+ 65DB C3 E8 65                             jp      .ApplyDamage
 118+ 65DE 3A 6B 7F     .SmallBump:             ld      a,(DELTA)                                       ; if out ship speed < 5 then set damage to
 119+ 65E1 47                                   ld      b,a
 120+ 65E2                                                  DISPLAY "TODO: det target too"
 121+ 65E2 CD D0 DC                             call    DamageShip                                      ; dent target too  TODO make damge totally proportional to speed
 122+ 65E5 C3 E8 65                             jp      .ApplyDamage
 123+ 65E8 CD A1 83     .ApplyDamage:           call    SetSpeedZero
 124+ 65EB 3A 28 C0                             ld      a,(UBnkzsgn)                                    ; front or back
 125+ 65EE E6 80                                and     $80
 126+ 65F0 20 0C                                jr      nz,.HitRear
 127+ 65F2 3A F2 81                             ld      a,(ForeShield)
 128+ 65F5 CD EB 64                             call    ApplyDamage
 129+ 65F8 32 F2 81                             ld      (ForeShield),a
 130+ 65FB C3 07 66                             jp      .CollisionDone
 131+ 65FE 3A F3 81     .HitRear:               ld      a,(AftShield)
 132+ 6601 CD EB 64                             call    ApplyDamage
 133+ 6604 32 F3 81                             ld      (AftShield),a
 134+ 6607              .CollisionDone:
 135+ 6607              ;.. Now check laser to see if the ship is being shot in sights
 136+ 6607 CD 1E 6C     .PostCollisionTest:     call    ShipInSights
 137+ 660A 30 36                                jr      nc,.ProcessedUniverseSlot                        ; for laser and missile we can check once
 138+ 660C 3A 0B 82                             ld      a,(CurrLaserPulseRate)
 139+ 660F                                      JumpIfAIsNotZero .CheckForPulse
 139+ 660F A7          >                        and     a
 139+ 6610 C2 1D 66    >                        jp	    nz,.CheckForPulse
 140+ 6613                                      JumpIfMemFalse FireLaserPressed,     .NoLaser
 140+ 6613 3A 61 81    >                        ld      a,(FireLaserPressed)
 140+ 6616 A7          >                        and     a
 140+ 6617 C2 32 66    >                        jp      nz, .NoLaser
 141+ 661A C3 24 66                             jp      .LaserDamage
 142+ 661D              .CheckForPulse:         JumpIfMemZero CurrLaserPulseOnCount, .NoLaser
 142+ 661D 3A 1A 82    >                        ld  a,(CurrLaserPulseOnCount)
 142+ 6620 A7          >                        and a
 142+ 6621 CA 32 66    >                        jp  z,.NoLaser
 143+ 6624 3A 15 82     .LaserDamage:           ld      a,(CurrLaserDamageOutput)
 144+ 6627 CD D0 DC                             call    DamageShip
 145+ 662A 3A 52 C0                             ld      a,(UBnkexplDsp)                                 ; is it destroyed
 146+ 662D E6 A0                                and     %10100000
 147+ 662F C2 42 66                             jp      nz,.ProcessedUniverseSlot                       ; can't lock on debris
 148+ 6632              .NoLaser:
 149+ 6632              ; Now check missile lock
 150+ 6632              .PlayerMissileLock:     JumpIfMemNeNusng MissileTargettingFlag, StageMissileTargeting, .ProcessedUniverseSlot
 150+ 6632 3A F7 81    >                        ld  a,(MissileTargettingFlag)
 150+ 6635 FE FE       >                        cp  StageMissileTargeting
 150+ 6637 C2 42 66    >                        jp  nz,.ProcessedUniverseSlot
 151+ 663A 3A 36 81     .LockPlayerMissile:     ld      a,(SelectedUniverseSlot)                        ; set to locked and nto launchedd
 152+ 663D                                      LockMissileToA                                          ; .
 152+ 663D F6 80       >                        or      $80
 152+ 663F 32 F7 81    >                        ld      (MissileTargettingFlag),a
 153+ 6642              .ProcessedUniverseSlot:
 154+ 6642              ;...Tactics Section................................................................................................................
 155+ 6642 3A 36 81     .AreWeReadyForAI:       ld      a,(SelectedUniverseSlot)                        ; get back current slot number
 156+ 6645                                      IsSlotMissile                                           ; Missiles update every iteration
 156+ 6645 21 51 81    >                        ld      hl,UniverseSlotType
 156+ 6648 ED 31       >                        add     hl,a
 156+ 664A 7E          >                        ld      a,(hl)
 156+ 664B FE 01       >                        cp      ShipTypeMissile
 157+ 664D CA 8D 66                             jp      z,.UpdateMissile                                ; so we bypass the logic check
 158+ 6650              .CheckIfSlotAITurn:     CallIfMemEqMemusng SelectedUniverseSlot, CurrentUniverseAI, UpdateShip
 158+ 6650 3A 36 81    >                        ld      a,(SelectedUniverseSlot)
 158+ 6653 21 35 81    >                        ld      hl,CurrentUniverseAI
 158+ 6656 BE          >                        cp      (hl)
 158+ 6657 CC C0 A1    >                        call    z,UpdateShip
 159+ 665A              .UniverseSlotIsEmpty:
 160+ 665A 3A 36 81     .DoneAICheck:           ld      a,(SelectedUniverseSlot)                        ; Move to next ship in loop
 161+ 665D 3C                                   inc     a                                               ; .
 162+ 665E                                      JumpIfAGTENusng   UniverseSlotListSize, .UpdateAICounter; if we are beyond the loop then update the mast AI counter and we are done
 162+ 665E FE 0C       >                        cp     UniverseSlotListSize
 162+ 6660 D2 69 66    >                        jp		nc,.UpdateAICounter
 163+ 6663 32 36 81                             ld      (SelectedUniverseSlot),a                        ; else update loop pointer
 164+ 6666 C3 04 65                             jp      .UpdateUniverseLoop                             ; if there are more to go we continue
 165+ 6669              .UpdateAICounter:       IncMemMaxNCycle CurrentUniverseAI , UniverseSlotListSize
 165+ 6669 3A 35 81    >                        ld      a,(CurrentUniverseAI)
 165+ 666C 3C          >                        inc     a
 165+ 666D FE 0C       >                        cp      UniverseSlotListSize
 165+ 666F 38 01       >                        jr      c,.IncMaxed
 165+ 6671 AF          >                        xor     a
 165+ 6672 32 35 81    >.IncMaxed:              ld      (CurrentUniverseAI),a
 166+ 6675              .CheckIfStationHostile: ReturnIfMemFalse  SetStationHostileFlag                ; we coudl move this to pre loop so its only done once
 166+ 6675 3A 37 81    >                        ld      a,(SetStationHostileFlag)
 166+ 6678 A7          >                        and     a
 166+ 6679 C0          >                        ret     nz
 167+ 667A              .CheckSetStationHostile:ReturnIfMemNeNusng UniverseSlotList, ShipTypeStation
 167+ 667A 3A 45 81    >                        ld   a,(UniverseSlotList)
 167+ 667D FE 02       >                        cp     ShipTypeStation
 167+ 667F C8          >                        ret    z
 168+ 6680                                      MMUSelectSpaceStation; UniverseN 0
 168+ 6680 ED 91 56 46 >                     nextreg SpaceStationMMU,         BankSpaceStationData
 169+ 6684 CD 1B C6                             call    SetShipHostile
 170+ 6687                                      SetMemFalse    SetStationHostileFlag
 170+ 6687 3E FF       >                        ld      a,$FF
 170+ 6689 32 37 81    >                        ld      (SetStationHostileFlag),a
 171+ 668C C9                                   ret
 172+ 668D              .UpdateMissile:         ;break
 173+ 668D CD C0 A1                             call    UpdateShip                                      ; we do it this way top avoid double calling
 174+ 6690 C3 5A 66                             jp      .DoneAICheck                                    ; ai if the ai slot to process = missile type
 175+ 6693              ;..................................................................................................................................
 176+ 6693
 177+ 6693 00 00 00...  SaveUBnk:               DS 3*3
 178+ 669C
 179+ 669C E5 D5 C5 F5  SavePosition:           push    hl,,de,,bc,,af
 180+ 66A0 3A FF 64                             ld      a,(CurrentShipUniv)
 181+ 66A3 FE 02                                cp      2
 182+ 66A5 20 31                                jr      nz,.DoneSave
 183+ 66A7                                      ;break
 184+ 66A7 21 20 C0                             ld      hl, UBnkxlo
 185+ 66AA 11 93 66                             ld      de, SaveUBnk
 186+ 66AD 01 09 00                             ld      bc, 3*3
 187+ 66B0 ED B0                                ldir
 188+ 66B2 3E 00                                ld      a,0
 189+ 66B4 32 24 C0                             ld      (UBnkyhi)  ,a
 190+ 66B7 32 21 C0                             ld      (UBnkxhi)  ,a
 191+ 66BA 32 27 C0                             ld      (UBnkzhi)  ,a
 192+ 66BD 32 22 C0                             ld      (UBnkxsgn) ,a
 193+ 66C0 32 25 C0                             ld      (UBnkysgn) ,a
 194+ 66C3 32 27 C0                             ld      (UBnkzhi)  ,a
 195+ 66C6 32 28 C0                             ld      (UBnkzsgn) ,a
 196+ 66C9 3E 05                                ld      a, $5
 197+ 66CB 32 23 C0                             ld      (UBnkylo)  ,a
 198+ 66CE 3E 05                                ld      a, $5
 199+ 66D0 32 20 C0                             ld      (UBnkxlo)  ,a
 200+ 66D3 3E 6E                                ld      a, $6E
 201+ 66D5 32 26 C0                             ld      (UBnkzlo)  ,a
 202+ 66D8 F1 C1 D1 E1  .DoneSave:              pop     hl,,de,,bc,,af
 203+ 66DC C9                                   ret
 204+ 66DD
 205+ 66DD E5 D5 C5 F5  RestorePosition:        push    hl,,de,,bc,,af
 206+ 66E1 3A FF 64                             ld      a,(CurrentShipUniv)
 207+ 66E4 FE 02                                cp      2
 208+ 66E6 20 0B                                jr      nz,.DoneSave
 209+ 66E8                                      ;break
 210+ 66E8 21 93 66                             ld      hl, SaveUBnk
 211+ 66EB 11 20 C0                             ld      de, UBnkxlo
 212+ 66EE 01 09 00                             ld      bc, 3*3
 213+ 66F1 ED B0                                ldir
 214+ 66F3 F1 C1 D1 E1  .DoneSave:              pop     hl,,de,,bc,,af
 215+ 66F7 C9                                   ret
 216+ 66F8
 217+ 66F8
 218+ 66F8 AF           DrawForwardShips:       xor     a
 219+ 66F9 32 FF 64     .DrawShipLoop:          ld      (CurrentShipUniv),a
 220+ 66FC CD AA 84                             call    GetTypeAtSlotA
 221+ 66FF FE FF                                cp      $FF
 222+ 6701 28 12                                jr      z,.ProcessedDrawShip
 223+ 6703                                      ; Add in a fast check for ship behind to process nodes and if behind jump to processed Draw ship
 224+ 6703 3A FF 64     .SelectShipToDraw:       ld      a,(CurrentShipUniv)
 225+ 6706                                      MMUSelectUniverseA
 225+ 6706 C6 46       >                     add    a,BankUNIVDATA0
 225+ 6708 ED 92 56    >                     nextreg UniverseMMU,       a
 226+ 670B                                      IFDEF ROTATIONDEBUG
 227+ 670B ~                                        call    SavePosition
 228+ 670B                                      ENDIF
 229+ 670B                                                  DISPLAY "TODO: Tune this"
 230+ 670B CD 62 DB     .ProcessUnivShip:       call    ProcessShip          ; The whole explosion logic is now encapsulated in process ship ;TODO TUNE THIS   ;; call    ProcessUnivShip
 231+ 670E              ; Debris still appears on radar
 232+ 670E                                      IFDEF ROTATIONDEBUG
 233+ 670E ~                                        call    RestorePosition
 234+ 670E                                      ENDIF
 235+ 670E              .UpdateRadar:
 236+ 670E              ;;;Does nothing                       ld      a,BankFrontView
 237+ 670E              ;;;Does nothing                       MMUSelectScreenA
 238+ 670E              ;;;Does nothing         ld      a,(CurrentShipUniv)
 239+ 670E              ;;;Does nothing         MMUSelectUniverseA
 240+ 670E
 241+ 670E                                      CallIfMemTrue ConsoleRedrawFlag,UpdateScannerShip ; Always update ship positions
 241+ 670E 3A 5E 81    >                        ld      a,(ConsoleRedrawFlag)
 241+ 6711 A7          >                        and     a
 241+ 6712 CC A8 74    >                        call    z, UpdateScannerShip
 242+ 6715 3A FF 64     .ProcessedDrawShip:     ld      a,(CurrentShipUniv)
 243+ 6718 3C                                   inc     a
 244+ 6719                                      ;   DEBUGGING SHIPS RENDERING
 245+ 6719                                      ;   JumpIfALTNusng   UniverseSlotListSize, .DrawShipLoop
 246+ 6719              .DrawSunCompass:        MMUSelectSun
 246+ 6719 ED 91 56 54 >                     nextreg SunMMU,            BankSunData
 247+ 671D CD C1 70                             call    UpdateCompassSun                ; Always update the sun position
 248+ 6720 CD 26 73                             call    UpdateScannerSun                ; Always attempt to put the sun on the scanner
 249+ 6723              .CheckPlanetCompass:    ;JumpIfMemFalse SpaceStationSafeZone, .DrawStationCompass
 250+ 6723              .DrawPlanetCompass:     MMUSelectPlanet
 250+ 6723 ED 91 56 55 >                     nextreg PlanetMMU,         BankPlanetData
 251+ 6727 CD 42 71                             call    UpdateCompassPlanet
 252+ 672A CD E7 73                             call    UpdateScannerPlanet
 253+ 672D C9                                   ret
 254+ 672E              .DrawStationCompass:
 255+ 672E
 256+ 672E C9                                   ret
 257+ 672F
 258+ 672F
 259+ 672F              ;..................................................................................................................................
 260+ 672F
 261+ 672F              TestForNextShip:        MacroIsKeyPressed c_Pressed_Quit
 261+ 672F 3E 46       >                        ld      a,c_Pressed_Quit
 261+ 6731             >                        MMUSelectKeyboard
 261+ 6731 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 261+ 6735 CD A2 E1    >                        call    is_key_pressed
 262+ 6738 C0                                   ret     nz
 263+ 6739 3A C3 68                             ld      a,(currentDemoShip)
 264+ 673C 3C                                   inc     a
 265+ 673D FE 2C                                cp      44
 266+ 673F 20 01                                jr      nz,.TestOK
 267+ 6741 AF                                   xor     a
 268+ 6742 32 C3 68     .TestOK:                ld      (currentDemoShip),a
 269+ 6745 CD 02 84                             call    ClearUnivSlotList
 270+ 6748 3A C3 68                             ld      a,(currentDemoShip)
 271+ 674B 47                                   ld      b,a
 272+ 674C AF                                   xor     a
 273+ 674D CD 19 84                             call    SetSlotAToTypeB
 274+ 6750 F5                                   push    af
 275+ 6751                                      MMUSelectUniverseN 2
 275+ 6751 ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
 276+ 6755                                      SetSlotAToUnivClass
 276+ 6755 08          >                        ex      af,af'
 276+ 6756 3A 0E C4    >                        ld      a,(ShipTypeAddr)
 276+ 6759 47          >                        ld      b,a
 276+ 675A 08          >                        ex      af,af'
 276+ 675B CD 20 84    >                        call    SetSlotAToClassB
 277+ 675E F1                                   pop     af
 278+ 675F CD 2D C6                             call    ResetUBnkData                         ; call the routine in the paged in bank, each universe bank will hold a code copy local to it
 279+ 6762 3A C3 68                             ld      a,(currentDemoShip)
 280+ 6765                                      MMUSelectShipBank1
 280+ 6765 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 281+ 6769 CD 0F E0                             call    GetShipBankId
 282+ 676C                                      MMUSelectShipBankA
 282+ 676C ED 92 57    >					 nextreg ShipModelMMU,	    a
 283+ 676F 78                                   ld      a,b
 284+ 6770 CD 6A E0                             call    CopyShipToUniverse
 285+ 6773 CD F3 6B                             call    SetInitialShipPosition
 286+ 6776 CD 2B 69                             call    DEBUGSETNODES
 287+ 6779 C9                                   ret
 288+ 677A
# file closed: ./GameEngine/UpdateUniverseObjects.asm
 355  677A              ;..................................................................................................................................
 356  677A              ;; TODODrawForwardSun:         MMUSelectSun
 357  677A              ;; TODO                        ld      a,(SunKShipType)
 358  677A              ;; TODO.ProcessBody:           cp      129
 359  677A              ;; TODO                        jr      nz,.ProcessPlanet
 360  677A              ;; TODO.ProcessSun:            call    ProcessSun
 361  677A              ;; TODO
 362  677A              ;; TODOProcessSun:             call    CheckSunDistance
 363  677A              ;; TODO
 364  677A              ;; TODO                        ret
 365  677A              ;; TODO.ProcessPlanet:         call    ProcessPlanet
 366  677A              ;; TODO                        ret
 367  677A              ;..................................................................................................................................
 368  677A
 369  677A
 370  677A              ;;;ProcessUnivShip:        call    CheckVisible               ; Will check for negative Z and skip (how do we deal with read and side views? perhaps minsky transformation handles that?)
 371  677A              ;;;                        ret     c
 372  677A              ;;;                        ld      a,(UBnkDrawAsDot)
 373  677A              ;;;                        and     a
 374  677A              ;;;                        jr      z,.CarryOnWithDraw
 375  677A              ;;;.itsJustADot:           ld      bc,(UBnkNodeArray)          ; if its at dot range
 376  677A              ;;;                        ld      a,$FF                       ; just draw a pixel
 377  677A              ;;;                        MMUSelectLayer2                     ; then go to update radar
 378  677A              ;;;                        call    l2_plot_pixel               ;
 379  677A              ;;;                        ClearCarryFlag
 380  677A              ;;;                        ret
 381  677A              ;;;.ProcessShipNodes:      call    ProcessShip
 382  677A              ;;;
 383  677A              ;;;call    ProcessNodes ; it hink here we need the star and planet special cases
 384  677A              ;;;.DrawShip:              call    CullV2				        ; culling but over aggressive backface assumes all 0 up front TOFIX
 385  677A              ;;;                        call    PrepLines                   ; LL72, process lines and clip, ciorrectly processing face visibility now
 386  677A              ;;;                        ld      a,(CurrentShipUniv)
 387  677A              ;;;                        MMUSelectUniverseA
 388  677A              ;;;                        call   DrawLines
 389  677A              ;;;                        ClearCarryFlag
 390  677A              ;;;                        ret
 391  677A
 392  677A              ;----------------------------------------------------------------------------------------------------------------------------------
 393  677A 49 6E 74 69  InitialiseMessage       DB "Intialising",0
 393  677E 61 6C 69 73
 393  6782 69 6E 67 00
 394  6786 4C 6F 61 64  LoadingSpritesMessage   DB "LoadingSprites",0
 394  678A 69 6E 67 53
 394  678E 70 72 69 74
 394  6792 65 73 00
 395  6795 49 6E 74 69  InitialisingGalaxies    DB "IntiailisingGalaxies",0
 395  6799 61 69 6C 69
 395  679D 73 69 6E 67
 395  67A1 47 61 6C 61
 395  67A5 78 69 65 73
 395  67A9 00
 396  67AA 00           LoadCounter             DB 0
 397  67AB 2A 00        SpriteProgress          DB "*",0
 398  67AD              ;----------------------------------------------------------------------------------------------------------------------------------
 399  67AD
 400  67AD              NeedAMessageQueue:
 401  67AD
 402  67AD              ;..................................................................................................................................
 403  67AD                                      INCLUDE "./GameEngine/HyperSpaceTimers.asm"
# file opened: ./GameEngine/HyperSpaceTimers.asm
   1+ 67AD              ;----------------------------------------------------------------------------------------------------------------------------------
   2+ 67AD 3A 3A 81     UpdateCountdownNumber:  ld		a,(OuterHyperCount)
   3+ 67B0 11 07 68                             ld		de,Hyp_counter
   4+ 67B3 0E 9C                                ld	c, -100
   5+ 67B5 CD BF 67                             call	.Num1
   6+ 67B8 0E F6                                ld	c,-10
   7+ 67BA CD BF 67                             call	.Num1
   8+ 67BD 0E FF                                ld	c,-1
   9+ 67BF 06 2F        .Num1:	                ld	b,'0'-1
  10+ 67C1 04           .Num2:	                inc		b
  11+ 67C2 81                                   add		a,c
  12+ 67C3 38 FC                                jr		c,.Num2
  13+ 67C5 91                                   sub 	c
  14+ 67C6 C5                                   push	bc
  15+ 67C7 F5                                   push	af
  16+ 67C8 79                                   ld		a,c
  17+ 67C9 FE FF                                cp		-1
  18+ 67CB 78                                   ld		a,b
  19+ 67CC 12                                   ld		(de),a
  20+ 67CD 13                                   inc		de
  21+ 67CE F1                                   pop		af
  22+ 67CF C1                                   pop		bc
  23+ 67D0 C9                                   ret
  24+ 67D1
  25+ 67D1              ;----------------------------------------------------------------------------------------------------------------------------------
  26+ 67D1 54 6F 3A     Hyp_message             DB "To:"
  27+ 67D4 00 00 00...  Hyp_to                  DS 32
  28+ 67F4 20           Hyp_space1              DB " "
  29+ 67F5 30 2E 30     Hyp_dist_amount         DB "0.0"
  30+ 67F8 2E           Hyp_decimal             DB "."
  31+ 67F9 30           Hyp_fraction            DB "0"
  32+ 67FA 20 4C 59 00  Hyp_dis_ly              DB " LY",0
  33+ 67FE 43 68 61 72  Hyp_charging            DB "Charging:"
  33+ 6802 67 69 6E 67
  33+ 6806 3A
  34+ 6807 30 30 30 00  Hyp_counter             DB "000",0
  35+ 680B 00 00 00...  Hyp_centeredTarget      DS 32
  36+ 682B 00           Hyp_centeredEol         DB 0
  37+ 682C 00 00 00...  Hyp_bufferpadding       DS 32   ; just in case we get a buffer ovverun. shoudl never get beyond 32 chars
  38+ 684C 00 00 00...  Hyp_centeredCharging    DS 32
  39+ 686C 00           Hyp_centeredEol2        DB 0
  40+ 686D 00 00 00...  Hyp_bufferpadding2      DS 32   ; just in case we get a buffer ovverun. shoudl never get beyond 32 chars
  41+ 688D
  42+ 688D
# file closed: ./GameEngine/HyperSpaceTimers.asm
 404  688D
 405  688D
 406  688D
 407  688D              ;DisplayTargetAndRange
 408  688D              ;DisplayCountDownNumber
 409  688D              ;----------------------------------------------------------------------------------------------------------------------------------
 410  688D 3A 34 81     TestPauseMode:          ld      a,(GamePaused)
 411  6890                              IFDEF LOGDIVIDEDEBUG
 412  6890 ~                                    DISPLAY "DEBUG: SKIPPING PAUSE MODE TO SAVE MEMORY FOR LOG DIVIDE DEBUG TEST"
 413  6890 ~                                    ret
 414  6890                              ELSE
 415  6890
 416  6890 FE 00                                cp      0
 417  6892 20 16                                jr      nz,.TestForResume
 418  6894 3A 7A 7F     .CheckViewMode:         ld      a,(ScreenIndex)                     ; we can only pause if not on screen view
 419  6897                                      ReturnIfAGTENusng       ScreenFront
 419  6897 FE 09       >                        cp    ScreenFront
 419  6899 D0          >                        ret	 nc
 420  689A              .CheckPauseKey:         MacroIsKeyPressed c_Pressed_Freeze
 420  689A 3E 40       >                        ld      a,c_Pressed_Freeze
 420  689C             >                        MMUSelectKeyboard
 420  689C ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 420  68A0 CD A2 E1    >                        call    is_key_pressed
 421  68A3 C0                                   ret     nz
 422  68A4              .PausePressed:          SetAFalse                                  ; doesn't really matter if we were in pause already as resume is a different key
 422  68A4 3E FF       >                        ld      a,$FF
 423  68A6 32 34 81                             ld      (GamePaused),a
 424  68A9 C9                                   ret
 425  68AA              .TestForResume:         MacroIsKeyPressed c_Pressed_Resume                  ; In pause loop so we can check for resume key
 425  68AA 3E 42       >                        ld      a,c_Pressed_Resume
 425  68AC             >                        MMUSelectKeyboard
 425  68AC ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 425  68B0 CD A2 E1    >                        call    is_key_pressed
 426  68B3 C0                                   ret     nz
 427  68B4 AF           .ResumePressed:         xor     a
 428  68B5 32 34 81                             ld      (GamePaused),a                      ; Resume pressed to reset pause state
 429  68B8 C9                                   ret
 430  68B9                              ENDIF
 431  68B9              TestQuit:               MacroIsKeyPressed c_Pressed_Quit
 431  68B9 3E 46       >                        ld      a,c_Pressed_Quit
 431  68BB             >                        MMUSelectKeyboard
 431  68BB ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 431  68BF CD A2 E1    >                        call    is_key_pressed
 432  68C2 C9                                   ret
 433  68C3 0D           currentDemoShip:        DB      13;$12 ; 13 - corirollis
 434  68C4
 435  68C4
 436  68C4 21 20 C0     GetStationVectorToWork: ld      hl,UBnkxlo
 437  68C7 11 8F 7F                             ld      de,varVector9ByteWork
 438  68CA                              IFDEF LOGDIVIDEDEBUG
 439  68CA ~                                    DISPLAY "DEBUG: SKIPPING GetStationVectorToWork TO SAVE MEMORY FOR LOG DIVIDE DEBUG TEST"
 440  68CA ~                                    ret
 441  68CA                              ELSE
 442  68CA ED A0                                ldi
 443  68CC ED A0                                ldi
 444  68CE ED A0                                ldi
 445  68D0 ED A0                                ldi
 446  68D2 ED A0                                ldi
 447  68D4 ED A0                                ldi
 448  68D6 ED A0                                ldi
 449  68D8 ED A0                                ldi
 450  68DA ED A0                                ldi
 451  68DC 2A 8F 7F     .CalcNormalToXX15:      ld      hl, (varVector9ByteWork)  ; X
 452  68DF ED 5B 92 7F                          ld      de, (varVector9ByteWork+3); Y
 453  68E3 ED 4B 95 7F                          ld      bc, (varVector9ByteWork+6); Z
 454  68E7 7D                                   ld      a,l
 455  68E8 B3                                   or      e
 456  68E9 B1                                   or      c
 457  68EA F6 01                                or      1
 458  68EC DD 6F                                ld      ixl,a                   ; or all bytes and with 1 so we have at least a 1
 459  68EE 7C                                   ld      a,h
 460  68EF B2                                   or      d
 461  68F0 B0                                   or      b                       ; or all high bytes but don't worry about 1 as its sorted on low bytes
 462  68F1 C5           .MulBy2Loop:            push    bc
 463  68F2 DD 45                                ld      b,ixl
 464  68F4 CB 20                                sla     b                       ; Shift ixl left
 465  68F6 DD 68                                ld      ixl,b
 466  68F8 C1                                   pop     bc
 467  68F9 CB 17                                rl      a                       ; roll into a
 468  68FB 38 0E                                jr      c,.TA2                  ; if bit rolled out of rl a then we can't shift any more to the left
 469  68FD                                      ShiftHLLeft1                    ; Shift Left X
 469  68FD CB 25       >			   sla l
 469  68FF CB 14       >			   rl  h
 470  6901                                      ShiftDELeft1                    ; Shift Left Y
 470  6901 CB 23       >			   sla e
 470  6903 CB 12       >			   rl  d
 471  6905                                      ShiftBCLeft1                    ; Shift Left Z
 471  6905 CB 21       >			   sla c
 471  6907 CB 10       >			   rl  b
 472  6909 18 E6                                jr      .MulBy2Loop              ; no need to do jr nc as the first check looks for high bits across all X Y and Z
 473  690B 3A 91 7F     .TA2:                   ld      a,(varVector9ByteWork+2); x sign
 474  690E CB 3C                                srl     h
 475  6910 B4                                   or      h
 476  6911 32 A7 C0                             ld      (XX15VecX),a         ; note this is now a signed highbyte
 477  6914 3A 94 7F                             ld      a,(varVector9ByteWork+5); y sign
 478  6917 CB 3A                                srl     d
 479  6919 B2                                   or      d
 480  691A 32 A8 C0                             ld      (XX15VecY),a         ; note this is now a signed highbyte
 481  691D 3A 97 7F                             ld      a,(varVector9ByteWork+8); y sign
 482  6920 CB 38                                srl     b
 483  6922 B0                                   or      b
 484  6923 32 A9 C0                             ld      (XX15VecZ),a         ; note this is now a signed highbyte
 485  6926 CD CC 99                             call    normaliseXX1596S7
 486  6929 C9                                   ret                          ; will return with a holding Vector Z
 487  692A                              ENDIF
 488  692A
 489  692A 00           TidyCounter             DB  0
 490  692B
 491  692B                          INCLUDE "./debugMatrices.asm"
# file opened: ./debugMatrices.asm
   1+ 692B
   2+ 692B
   3+ 692B 21 4E 69     DEBUGSETNODES:          ld      hl,DEBUGUBnkDATA
   4+ 692E 11 20 C0                             ld      de,UBnkxlo
   5+ 6931 01 09 00                             ld      bc,9
   6+ 6934 ED B0                                ldir
   7+ 6936 21 57 69                             ld      hl,DEBUGROTMATDATA
   8+ 6939 11 29 C0                             ld      de,UBnkrotmatSidevX
   9+ 693C 01 12 00                             ld      bc,6*3
  10+ 693F ED B0                                ldir
  11+ 6941 C9                                   ret
  12+ 6942
  13+ 6942 21 4E 69     DEBUGSETPOS:            ld      hl,DEBUGUBnkDATA
  14+ 6945 11 20 C0                             ld      de,UBnkxlo
  15+ 6948 01 06 00                             ld      bc,9 - 3
  16+ 694B ED B0                                ldir
  17+ 694D C9                                   ret
  18+ 694E
  19+ 694E              ; culltest
  20+ 694E              ;DEBUGUBnkDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$31,	$03,	$00
  21+ 694E 00 00 00 00  DEBUGUBnkDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$5C,	$07,	$00
  21+ 6952 00 00 5C 07
  21+ 6956 00
  22+ 6957 00 60 00 00  DEBUGROTMATDATA:        db      $00,	$60,	$00,	$00,	$00,	$00
  22+ 695B 00 00
  23+ 695D 00 00 00 60                          db      $00,	$00,	$00,	$60,	$00,	$00
  23+ 6961 00 00
  24+ 6963 00 00 00 00                          db      $00,	$00,	$00,	$00,	$00,	$E0
  24+ 6967 00 E0
  25+ 6969
  26+ 6969              ; FAILS due to sharp angle, OK now
  27+ 6969              ;DEBUGUBnkDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$EF,	$03,	$00
  28+ 6969              ;DEBUGROTMATDATA:        db      $01,	$2F,	$B2,	$CC,	$4C,	$27
  29+ 6969              ;                        db      $17,	$46,	$87,	$3C,	$95,	$20
  30+ 6969              ;                        db      $E2,	$32,	$31,	$8C,	$EF,	$D1
  31+ 6969              ; TOP RIGHT CORNER Passes as python and cobra
  32+ 6969              ;DEBUGUBnkDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$5B,	$04,	$00
  33+ 6969              ;DEBUGROTMATDATA:        db      $E2,	$03,	$3A,	$16,	$F5,	$60
  34+ 6969              ;                        db      $D3,	$CE,	$F3,	$BA,	$4E,	$0F
  35+ 6969              ;                        db      $03,	$BE,	$4A,	$4B,	$DB,	$8C
  36+ 6969              ; Looks OK
  37+ 6969              ;DEBUGUBnkDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $EE,    $02,    $00
  38+ 6969              ;DEBUGROTMATDATA:        db      $35,    $d8,    $98,    $9f,    $b0,    $1a
  39+ 6969              ;                        db      $4B,    $26,    $CE,    $d6,    $60,    $16
  40+ 6969              ;                        db      $89,    $90,    $c4,    $9f,    $dd,    $d9
  41+ 6969              ;
  42+ 6969              ; Massive horizontal line
  43+ 6969              ; 15th line (or line 14 has corrodinates 05,00 to D8,00) which looks wrong
  44+ 6969              ; node array looks OK, looks liek its sorted as it was both -ve Y off screen fix added
  45+ 6969              ;DEBUGUBnkDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $BD,    $03,    $00
  46+ 6969              ;DEBUGROTMATDATA:        db      $59,    $CF,    $06,    $B6,    $61,    $8D
  47+ 6969              ;                        db      $AD,    $B1,    $97,    $4F,    $C9,    $98
  48+ 6969              ;                        db      $61,    $99,    $E0,    $0D,    $11,    $5C
  49+ 6969              ; Line lost in clipping
  50+ 6969              ;DEBUGUBnkDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $8B,    $04,    $00
  51+ 6969              ;DEBUGROTMATDATA:        db      $A3,    $4D,    $A9,    $28,    $F8,    $AF
  52+ 6969              ;                        db      $FB,    $97,    $8C,    $B5,    $FB,    $D0
  53+ 6969              ;                        db      $DB,    $3A,    $29,    $CA,    $29,    $1C
  54+ 6969              ;DEBUGUBnkDATA:          db      $5E,    $02,    $00,    $FE,    $00,    $FE,    $E5,    $09,    $00
  55+ 6969              ;DEBUGROTMATDATA:        db      $A6,    $88,    $89,    $BB,    $53,    $4D
  56+ 6969              ;                        db      $6D,    $D9,    $F0,    $99,    $BA,    $9E
  57+ 6969              ;                        db      $4A,    $A8,    $89,    $47,    $DF,    $33
  58+ 6969              ;
  59+ 6969              ;DEBUGUBnkDATA:          db      $ED,    $05,    $00,    $FE,    $00,    $FE,    $F1,    $0A,    $00
  60+ 6969              ;DEBUGROTMATDATA:        db      $1B,    $33,    $DE,    $B4,    $ED,    $C5
  61+ 6969              ;                        db      $73,    $C4,    $BC,    $1E,    $96,    $C4
  62+ 6969              ;                        db      $55,    $B9,    $35,    $D1,    $80,    $0F
  63+ 6969              ; top left off right issue
  64+ 6969              ;DEBUGUBnkDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $2F,    $03,    $00
  65+ 6969              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  66+ 6969              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  67+ 6969              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  68+ 6969              ; test middle of screen
  69+ 6969              ;DEBUGUBnkDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
  70+ 6969              ;
  71+ 6969              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  72+ 6969              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  73+ 6969              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  74+ 6969              ; test middle of screen futher away
  75+ 6969              ;DEBUGUBnkDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $02,    $00
  76+ 6969              ;
  77+ 6969              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  78+ 6969              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  79+ 6969              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  80+ 6969
  81+ 6969              ; Test left center clip still warping
  82+ 6969              ;DEBUGUBnkDATA:          db      $80,    $00,    $80,    $00,    $00,    $00,    $20,    $01,    $00
  83+ 6969              ;
  84+ 6969              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  85+ 6969              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  86+ 6969              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  87+ 6969              ; Test right center clip - seems to be warping values towards bottom of screen on clip
  88+ 6969              ;DEBUGUBnkDATA:          db      $80,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
  89+ 6969              ;
  90+ 6969              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  91+ 6969              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  92+ 6969              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  93+ 6969              ; Test top center clip test 1 - good test many ships fail
  94+ 6969              ;DEBUGUBnkDATA:          db      $19,    $00,    $00,    $50,    $00,    $00,    $20,    $01,    $00
  95+ 6969              ;
  96+ 6969              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  97+ 6969              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  98+ 6969              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  99+ 6969              ; Test top center clip test 2 - Poss 2nd ship has an issue with a small line
 100+ 6969              ;DEBUGUBnkDATA:          db      $19,    $00,    $00,    $60,    $00,    $00,    $2F,    $01,    $00
 101+ 6969              ;
 102+ 6969              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 103+ 6969              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 104+ 6969              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 105+ 6969              ; Test bottom center clip ; complet shambles as if its forcing cip to below 128
 106+ 6969              ; looks better now may have some clipping issues maybe ship data
 107+ 6969              ;DEBUGUBnkDATA:          db      $19,    $00,    $00,    $50,    $00,    $80,    $20,    $01,    $00
 108+ 6969              ;
 109+ 6969              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 110+ 6969              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 111+ 6969 E6 01 81 AD                          db      $E6,    $01,    $81,    $AD,    $B0,    $55
 111+ 696D B0 55
 112+ 696F              ; Test left top center clip
 113+ 696F
 114+ 696F              ; Test right top center clip
 115+ 696F              ; Test left bottom center clip
 116+ 696F              ; Test right bottom center clip
 117+ 696F
 118+ 696F              ; Tests with no clip
 119+ 696F              ;DEBUGUBnkDATA:          db      $39,    $00,    $00,    $43,    $00,    $00,    $2F,    $04,    $00
 120+ 696F              ;
 121+ 696F              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 122+ 696F              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 123+ 696F              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 124+ 696F              ;
 125+ 696F              ;DEBUGUBnkDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $1F,    $00,    $00
 126+ 696F              ;
 127+ 696F              ; UBnkPOs example 39,01,00,43,01,00,f4,03,00
 128+ 696F              ; rotmat  example b1, 83,ae,5d,b0,1a,5e,de,82,8a,69,16,70,99,52,19,dd,d9
 129+ 696F
# file closed: ./debugMatrices.asm
 492  696F
 493  696F
 494  696F                          DISPLAY "TODO: Optimisation"
 495  696F              ; Need this table to handle differnet events
 496  696F              ; 1-main loop update - just general updates specfic to that screen that are not galaxy or stars, e.g. update heat, console
 497  696F              ; cursor key, joystick press
 498  696F              ; cursor key, joystick press
 499  696F              ; non cursor keys presses
 500  696F              ;
 501  696F                                      INCLUDE "./Tables/ScreenControlTable.asm"
# file opened: ./Tables/ScreenControlTable.asm
   1+ 696F              ; First byte is now docked flag
   2+ 696F              ;
   3+ 696F              ; Padded to 8 bytes to allow a * 8 for addressing
   4+ 696F              ; Byte 0   - Docked flag  : 0 = not applicable (always read), 1 = only whilst docked, 2 = only when not docked, 3 = No keypress allowed
   5+ 696F              ; Byte 1   - Screen Id
   6+ 696F              ; Byte 2,3 - address of keypress table
   7+ 696F              ; Byte 4   - Bank with Display code
   8+ 696F              ; Byte 5,6 - Function for display
   9+ 696F              ; Byte 7,8 - Main loop update routine
  10+ 696F              ; Byte 9   - Draw stars Y/N ; also are we in an external view that can have guns?
  11+ 696F              ; byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
  12+ 696F              ; byte 11  - Double Buffering 0 = no, 1 = yes
  13+ 696F              ; byte 12,13  - cursor key input routine
  14+ 696F              ; byte 14  - HyperspaceBlock - can not select this screen if in hyperpace - 00 can , 01 can not
  15+ 696F              ; byte 15    padding at the momnent (should add in an "AI enabled flag" for optimistation, hold previous value and on change create ships
  16+ 696F              ; byte 16  - block update ship
  17+ 696F              ; byte 17,18 Function for drawing system Jump (or 0)
  18+ 696F              ; later will add a routine for drawing
  19+ 696F              ;                          0    1                 2                              3                               4                    5                            6                              7                     8                       9   10  11  12                          13                          14  15  16   17               18
  20+ 696F 00 00 7D E0  ScreenKeyMap:           DB 0,   ScreenLocal     , low addr_Pressed_LocalChart,   high addr_Pressed_LocalChart,   BankMenuShrCht,      low draw_local_chart_menu,   high draw_local_chart_menu,    $00,                  $00,                    $00,$00,$00,low local_chart_cursors,    high local_chart_cursors,   $01,$00,$00, $00,             $00
  20+ 6973 32 FC C3 00
  20+ 6977 00 00 00 00
  20+ 697B 5A C4 01 00
  20+ 697F 00 00 00
  21+ 6982 00 01 7B E0  ScreenKeyGalactic:      DB 0,   ScreenGalactic  , low addr_Pressed_GalacticChrt, high addr_Pressed_GalacticChrt, BankMenuGalCht,      low draw_galactic_chart_menu,high draw_galactic_chart_menu, low loop_gc_menu,     high loop_gc_menu,      $00,$00,$00,low galctic_chart_cursors,  high galctic_chart_cursors, $01,$00,$00, $00,             $00
  21+ 6986 33 48 C1 7C
  21+ 698A C2 00 00 00
  21+ 698E 10 C3 01 00
  21+ 6992 00 00 00
  22+ 6995 01 02 7F E0                          DB 1,   ScreenMarket    , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  low loop_market_menu, high loop_market_menu,  $00,$00,$00,$00,                        $00,                        $01,$00,$00, $00,             $00
  22+ 6999 36 43 C3 FA
  22+ 699D C3 00 00 00
  22+ 69A1 00 00 01 00
  22+ 69A5 00 00 00
  23+ 69A8 02 03 7F E0                          DB 2,   ScreenMarketDsp , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00,$00, $00,             $00
  23+ 69AC 36 43 C3 00
  23+ 69B0 00 00 00 00
  23+ 69B4 00 00 01 00
  23+ 69B8 00 00 00
  24+ 69BB 00 04 81 E0  ScreenCmdr:             DB 0,   ScreenStatus    , low addr_Pressed_Status,       high addr_Pressed_Status,       BankMenuStatus,      low draw_status_menu,        high draw_status_menu,         low loop_STAT_menu,  high loop_STAT_menu,     $00,$00,$00,$00,                        $00,                        $01,$00,$00, $00,             $00
  24+ 69BF 3F 02 D0 4B
  24+ 69C3 D0 00 00 00
  24+ 69C7 00 00 01 00
  24+ 69CB 00 00 00
  25+ 69CE 00 05 83 E0                          DB 0,   ScreenInvent    , low addr_Pressed_Inventory,    high addr_Pressed_Inventory,    BankMenuInvent,      low draw_inventory_menu,     high draw_inventory_menu,      $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00,$00, $00,             $00
  25+ 69D2 34 F5 C1 00
  25+ 69D6 00 00 00 00
  25+ 69DA 00 00 01 00
  25+ 69DE 00 00 00
  26+ 69E1 00 06 91 E0                          DB 0,   ScreenPlanet    , low addr_Pressed_PlanetData,   high addr_Pressed_PlanetData,   BankMenuSystem,      low draw_system_data_menu,   high draw_system_data_menu,    $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00,$00, $00,             $00
  26+ 69E5 35 F0 C2 00
  26+ 69E9 00 00 00 00
  26+ 69ED 00 00 01 00
  26+ 69F1 00 00 00
  27+ 69F4 01 07 79 E0                          DB 1,   ScreenEquip     , low addr_Pressed_Equip,        high addr_Pressed_Equip,        BankMenuEquipS,      low draw_eqshp_menu,         high draw_eqshp_menu,          low loop_eqshp_menu,  high loop_eqshp_menu,   $00,$00,$00,$00,                        $00,                        $01,$00,$00, $00,             $00
  27+ 69F8 40 EA D3 86
  27+ 69FC D4 00 00 00
  27+ 6A00 00 00 01 00
  27+ 6A04 00 00 00
  28+ 6A07 01 08 73 E0                          DB 1,   ScreenLaunch    , low addr_Pressed_Launch,       high addr_Pressed_Launch,       BankLaunchShip,      low draw_launch_ship,        high draw_launch_ship,         low loop_launch_ship, high loop_launch_ship,  $00,$01,$01,$00,                        $00,                        $01,$00,$FF, $00,             $00
  28+ 6A0B 41 79 C1 65
  28+ 6A0F C2 00 01 01
  28+ 6A13 00 00 01 00
  28+ 6A17 FF 00 00
  29+ 6A1A 02 09 49 E0  ScreenKeyFront:         DB 2,   ScreenFront     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          low update_front_view,high update_front_view, $01,$00,$01,low input_front_view,       high input_front_view,      $00,$00,$00, low front_warp,  high front_warp
  29+ 6A1E 3E 6A C0 D2
  29+ 6A22 C0 01 00 01
  29+ 6A26 F6 C2 00 00
  29+ 6A2A 00 E2 C2
  30+ 6A2D 02 0A 49 E0                          DB 2,   ScreenAft       , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,       high input_front_view,      $00,$00,$00, low front_warp,  high front_warp
  30+ 6A31 3E 6A C0 00
  30+ 6A35 00 01 00 01
  30+ 6A39 F6 C2 00 00
  30+ 6A3D 00 E2 C2
  31+ 6A40 02 0B 49 E0                          DB 2,   ScreenLeft      , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,       high input_front_view,      $00,$00,$00, low front_warp,  high front_warp
  31+ 6A44 3E 6A C0 00
  31+ 6A48 00 01 00 01
  31+ 6A4C F6 C2 00 00
  31+ 6A50 00 E2 C2
  32+ 6A53 02 0C 49 E0                          DB 2,   ScreenRight     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,       high input_front_view,      $00,$00,$00, low front_warp,  high front_warp
  32+ 6A57 3E 6A C0 00
  32+ 6A5B 00 01 00 01
  32+ 6A5F F6 C2 00 00
  32+ 6A63 00 E2 C2
  33+ 6A66 03 0D FF FF                          DB 3,   ScreenDocking   , $FF,                           $FF,                            BankLaunchShip,      low draw_docking_ship,       high draw_docking_ship,        low loop_docking_ship,high loop_docking_ship, $00,$01,$01,$00,                        $00,                        $01,$00,$FF, $00,             $00
  33+ 6A6A 41 F5 C1 9A
  33+ 6A6E C2 00 01 01
  33+ 6A72 00 00 01 00
  33+ 6A76 FF 00 00
  34+ 6A79 01 0E FF FF                          DB 1,   ScreenHyperspace, $FF,                           $FF,                            BankFrontView,       low draw_hyperspace,         high draw_hyperspace,          low loop_hyperspace,  high loop_hyperspace,   $00,$01,$01,$00,                        $00,                        $01,$00,$FF, $00,             $00
  34+ 6A7D 3E 9C C2 F3
  34+ 6A81 C2 00 01 01
  34+ 6A85 00 00 01 00
  34+ 6A89 FF 00 00
  35+ 6A8C
  36+ 6A8C              ;               DB low addr_Pressed_Aft,          high addr_Pressed_Aft,          BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  37+ 6A8C              ;               DB low addr_Pressed_Left,         high addr_Pressed_Left,         BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  38+ 6A8C              ;               DB low addr_Pressed_Right,        high addr_Pressed_Right,        BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  39+ 6A8C              ScreenMapRow        EQU ScreenKeyGalactic - ScreenKeyMap
  40+ 6A8C              ScreenMapLen        EQU ($ - ScreenKeyMap) / ScreenMapRow
  41+ 6A8C              ScreenViewsStart    EQU (ScreenKeyFront - ScreenKeyMap)/ScreenMapRow
  42+ 6A8C              ScreenCount         EQU 15
  43+ 6A8C
# file closed: ./Tables/ScreenControlTable.asm
 502  6A8C
 503  6A8C FF           ScreenTransitionForced  DB $FF
 504  6A8D                  INCLUDE "./GameEngine/resetUniverse.asm"
# file opened: ./GameEngine/resetUniverse.asm
   1+ 6A8D              ; Use bank 0 as source and bank 7 as write target
   2+ 6A8D              ResetUniv:              MMUSelectCpySrcN BankUNIVDATA0	         ; master universe def in bank 0
   2+ 6A8D ED 91 50 46 >                     nextreg DMACpySourceMMU,	BankUNIVDATA0
   3+ 6A91 3E 01                                ld		a,1             				 ; we can read bank 0 as if it was rom
   4+ 6A93 06 0C                                ld		b,TotalUniverseBanks
   5+ 6A95 C5 F5        .ResetCopyLoop:         push	bc,,af
   6+ 6A97                                      MMUSelectUniverseA			             ; copy from bank 0 to 71 to 12
   6+ 6A97 C6 46       >                     add    a,BankUNIVDATA0
   6+ 6A99 ED 92 56    >                     nextreg UniverseMMU,       a
   7+ 6A9C 21 00 C0                             ld		hl,UniverseBankAddr
   8+ 6A9F 11 00 00                             ld		de,dmaCopySrcAddr
   9+ 6AA2 01 17 1E                             ld		bc,UnivBankSize
  10+ 6AA5 CD 2A 7E                             call	memcopy_dma
  11+ 6AA8 F1 C1                                pop		bc,,af
  12+ 6AAA 57                                   ld      d,a
  13+ 6AAB C6 41                                add     "A"
  14+ 6AAD 32 0B C0                             ld      (StartOfUnivN),a
  15+ 6AB0 7A                                   ld      a,d
  16+ 6AB1 3C                                   inc		a
  17+ 6AB2 10 E1                                djnz	.ResetCopyLoop
  18+ 6AB4 C9                                   ret
  19+ 6AB5
  20+ 6AB5              ; Use bank 0 as source and bank 7 as write target
  21+ 6AB5              ResetGalaxy:            MMUSelectCpySrcN BankGalaxyData0	     ; master universe def in bank 0 we can read bank 0 as if it was rom
  21+ 6AB5 ED 91 50 5B >                     nextreg DMACpySourceMMU,	BankGalaxyData0
  22+ 6AB9 3E 5C                                ld		a,BankGalaxyData1 			   	 ; and write to real location for galaxy data
  23+ 6ABB 06 07                                ld		b,7                              ; 8 galaxies but we start with galaxy 0
  24+ 6ABD 0E 01                                ld      c,1                              ;
  25+ 6ABF F5           .ResetCopyLoop:         push	af                               ;
  26+ 6AC0 C5                                   push	bc                               ;
  27+ 6AC1                                      MMUSelectGalaxyA    	                 ; copy from bank 0 to galaxy 1 to 7
  27+ 6AC1 ED 92 57    >                     nextreg GalaxyDataMMU,     a
  28+ 6AC4 21 00 E0                             ld		hl,GalaxyDataAddr                ; using dma transfer
  29+ 6AC7 11 00 00                             ld		de,dmaCopySrcAddr                ; .
  30+ 6ACA 01 DC 1C                             ld		bc,GalaxyBankSize                ; .
  31+ 6ACD CD 2A 7E                             call	memcopy_dma                      ; .
  32+ 6AD0 C1                                   pop		bc                               ; .
  33+ 6AD1 21 0F E0                             ld      hl, galaxy_pg_cnt                ; write out the galaxy page nbr to the page so we can diagnose page swapping
  34+ 6AD4 79                                   ld      a,c                              ;
  35+ 6AD5 C6 30                                add     a, $30                           ; add $30 (48) to get ascii of galaxy nbr
  36+ 6AD7 77                                   ld      (hl),a                           ; .
  37+ 6AD8 0C                                   inc     c                                ; Do next bank
  38+ 6AD9 F1                                   pop     af                               ; .
  39+ 6ADA 3C                                   inc		a                                ; .
  40+ 6ADB 10 E2                                djnz	.ResetCopyLoop                    ; .
  41+ 6ADD C9                                   ret
  42+ 6ADE
  43+ 6ADE 06 08        SeedAllGalaxies:        ld          b,8
  44+ 6AE0 0E 5B                                ld          c,BankGalaxyData0
  45+ 6AE2 C5           .SeedAllGalaxiesLoop:   push        bc
  46+ 6AE3 79                                   ld          a,c
  47+ 6AE4                                      MMUSelectGalaxyA
  47+ 6AE4 ED 92 57    >                     nextreg GalaxyDataMMU,     a
  48+ 6AE7 CD 9F FC                             call        SeedGalaxy
  49+ 6AEA C1                                   pop         bc
  50+ 6AEB 0C                                   inc         c
  51+ 6AEC 10 F4                                djnz        .SeedAllGalaxiesLoop
  52+ 6AEE C9                                   ret
# file closed: ./GameEngine/resetUniverse.asm
 505  6AEF
 506  6AEF
 507  6AEF
 508  6AEF 3A BC 69     InitialiseCommander:    ld      a,(ScreenCmdr+1)
 509  6AF2 C3 FE 6A                             jp      SetScreenA
 510  6AF5
 511  6AF5 3A 1B 6A     InitialiseFrontView:    ld      a,(ScreenKeyFront+1)
 512  6AF8 C3 FE 6A                             jp      SetScreenA
 513  6AFB              ; false ret here as we get it free from jp
 514  6AFB              ;----------------------------------------------------------------------------------------------------------------------------------
 515  6AFB                                      INCLUDE "./GameEngine/SetScreenA.asm"
# file opened: ./GameEngine/SetScreenA.asm
   1+ 6AFB              ; SetScreenA.asm
   2+ 6AFB              ;----------------------------------------------------------------------------------------------------------------------------------
   3+ 6AFB C3 FB 6A     InvalidScreenBlock:     jp     InvalidScreenBlock
   4+ 6AFE              SetScreenA:             JumpIfAGTENusng ScreenCount, InvalidScreenBlock
   4+ 6AFE FE 0F       >                        cp     ScreenCount
   4+ 6B00 D2 FB 6A    >                        jp		nc,InvalidScreenBlock
   5+ 6B03 32 7A 7F     .SetUpIndex:            ld      (ScreenIndex),a                 ; Set screen index to a
   6+ 6B06 57           .SetUpIX:               ld      d,a
   7+ 6B07 1E 13                                ld      e,ScreenMapRow
   8+ 6B09 ED 30                                mul
   9+ 6B0B DD 21 6F 69                          ld      ix,ScreenKeyMap
  10+ 6B0F DD 19                                add     ix,de
  11+ 6B11 DD 22 7B 7F                          ld      (ScreenIndexTablePointer),ix    ; optimises later fetches
  12+ 6B15                                      ClearForceTransition                    ; In case it was called by a brute force change in an update loop
  12+ 6B15 3E FF       >                        ld      a,$FF
  12+ 6B17 32 8C 6A    >                        ld      (ScreenTransitionForced),a
  13+ 6B1A 32 79 7F                             ld      (ScreenChanged),a               ; Set screen changed to FF
  14+ 6B1D DD 7E 09     .IsItAViewPort:         ld      a,(ix+9)                        ; Screen Map Byte 9  - Draw stars Y/N and also guns present
  15+ 6B20 32 6C 60                             ld      (CheckIfViewUpdate+1),a         ; Set flag to determine if we are on an exterior view
  16+ 6B23                                      JumpIfAIsZero .NotViewPort              ;
  16+ 6B23 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  16+ 6B24 CA 33 6B    >                        jp	    z, .NotViewPort
  17+ 6B27 DD 7E 01                             ld      a,(ix+1)                        ; get screen view number
  18+ 6B2A D6 09                                sub     ScreenFront                     ; Now a = screen number 0 = front, 1 = aft, 2 = left 3 = right
  19+ 6B2C                                      MMUSelectCommander                      ; Load view laser to current
  19+ 6B2C ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
  20+ 6B30 CD 0E E3                             call    LoadLaserToCurrent              ;
  21+ 6B33 DD 7E 04     .NotViewPort:           ld      a,(ix+4)                        ; Screen Map Byte 4   - Bank with Display code
  22+ 6B36 32 F3 60                             ld      (ScreenLoopBank+1),a            ; setup loop
  23+ 6B39 32 86 5F                             ld      (HandleBankSelect+1),a          ; setup cursor keys
  24+ 6B3C 32 A0 62                             ld      (WarpMMUBank+1),a               ; WarpSFXHandler
  25+ 6B3F                                      MMUSelectScreenA
  25+ 6B3F ED 92 56    >                     nextreg ScreenBankMMU,		a
  26+ 6B42 DD 7E 05                             ld      a,(ix+5)                        ; Screen Map Byte 5 & 6 - Function for display initialisation
  27+ 6B45 32 85 6B                             ld      (ScreenUpdateAddr+1),a          ; .
  28+ 6B48 DD 7E 06                             ld      a,(ix+6)                        ; .
  29+ 6B4B 32 86 6B                             ld      (ScreenUpdateAddr+2),a          ; .
  30+ 6B4E DD 7E 07                             ld      a,(ix+7)                        ; Screen Map Byte 7 & 8 - Main loop update routine
  31+ 6B51 32 F8 60                             ld      (ScreenLoopJP+1),a              ; .
  32+ 6B54 DD 7E 08                             ld      a,(ix+8)                        ; .
  33+ 6B57 32 F9 60                             ld      (ScreenLoopJP+2),a              ; .
  34+ 6B5A DD 7E 0A                             ld      a,(ix+10)                       ; Screen Map Byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
  35+ 6B5D 32 5C 5F                             ld      (InputBlockerCheck+1),a          ; Set flag to block transitions as needed e.g. launch screen
  36+ 6B60 DD 7E 0B                             ld      a,(ix+11)                       ; Screen Map Byte 11  - Double Buffering 0 = no, 1 = yes
  37+ 6B63 32 85 63                             ld      (DoubleBufferCheck+1),a
  38+ 6B66 DD 7E 0C                             ld      a,(ix+12)
  39+ 6B69 32 8B 5F                             ld      (CallCursorRoutine+1),a
  40+ 6B6C DD 7E 0D                             ld      a,(ix+13)
  41+ 6B6F 32 8C 5F                             ld      (CallCursorRoutine+2),a
  42+ 6B72 DD 7E 10                             ld      a,(ix+16)
  43+ 6B75 32 5E 60                             ld      (UpdateShipsControl+1),a       ; determin if we call update universe objects in this screen
  44+ 6B78 DD 7E 11                             ld      a,(ix+17)
  45+ 6B7B 32 A5 62                             ld      (WarpRoutineAddr+1),a
  46+ 6B7E DD 7E 12                             ld      a,(ix+18)
  47+ 6B81 32 A6 62                             ld      (WarpRoutineAddr+2),a
  48+ 6B84 C3 00 00     ScreenUpdateAddr:       jp      $0000                          ; We can just drop out now and also get a free ret from caller
  49+ 6B87
# file closed: ./GameEngine/SetScreenA.asm
 516  6B87                                      INCLUDE "./GameEngine/ViewKeyTest.asm"
# file opened: ./GameEngine/ViewKeyTest.asm
   1+ 6B87 3A 7A 7F     ViewKeyTest:            ld      a,(ScreenIndex)
   2+ 6B8A 4F                                   ld      c,a
   3+ 6B8B 06 0F                                ld      b,ScreenMapLen                  ; For now until add screens are added
   4+ 6B8D DD 21 6F 69                          ld      ix,ScreenKeyMap                 ; IX = table head for scanning
   5+ 6B91 2A 39 81                             ld      hl,(InnerHyperCount)
   6+ 6B94 7C                                   ld      a,h
   7+ 6B95 B5                                   or      l
   8+ 6B96 FD 67                                ld      iyh,a
   9+ 6B98 FD 7C        ViewScanLoop:           ld      a,iyh
  10+ 6B9A A7           .HyperspaceCountdown:   and     a
  11+ 6B9B 28 08                                jr      z,.CheckDockedFlag
  12+ 6B9D DD 7E 0E                             ld      a,(ix+14)
  13+ 6BA0 FE 01                                cp      1
  14+ 6BA2 CA EB 6B                             jp      z,NotReadNextKey
  15+ 6BA5 DD 7E 00     .CheckDockedFlag:       ld      a,(ix+0)                        ; Screen Map Byte 0 Docked keyboard read flag
  16+ 6BA8              ; 0 = not applicable (always read), 1 = only whilst docked, 2 = only when not docked, 3 = No keypress allowed
  17+ 6BA8                                      JumpIfAEqNusng 3, NotReadNextKey        ; No keypress allowed at all (e.g. in hyperspace)
  17+ 6BA8 FE 03       >                        cp     3
  17+ 6BAA CA EB 6B    >                        jp      z,NotReadNextKey
  18+ 6BAD                                      JumpIfAIsZero    .CanReadKey            ; if its the skip check for docking status
  18+ 6BAD A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  18+ 6BAE CA C8 6B    >                        jp	    z, .CanReadKey
  19+ 6BB1 57           .DocCheck:              ld      d,a                             ; save ix+0 value
  20+ 6BB2                                      JumpIfMemEqNusng DockedFlag, StateNormal, .NotDockedCheck ; if we are not in a docked state the we ar egood
  20+ 6BB2 3A 33 81    >                        ld  a,(DockedFlag)
  20+ 6BB5 FE 00       >                        cp  StateNormal
  20+ 6BB7 CA C2 6B    >                        jp  z,.NotDockedCheck
  21+ 6BBA 7A           .DockedCheck:           ld      a,d                             ; we are docked so only ix+0 value of 1 is allowed
  22+ 6BBB                                      JumpIfANENusng 1, NotReadNextKey        ; if we are docked and its not 1 then don't read
  22+ 6BBB FE 01       >                        cp     1
  22+ 6BBD C2 EB 6B    >                        jp      nz,NotReadNextKey
  23+ 6BC0 18 06                                jr      .CanReadKey                     ; we can now scan as normal  as its 2 and docked
  24+ 6BC2 7A           .NotDockedCheck:        ld      a,d                             ; if we are not docked then code 2 is not keyscan allowed
  25+ 6BC3                                      JumpIfANENusng 2,NotReadNextKey
  25+ 6BC3 FE 02       >                        cp     2
  25+ 6BC5 C2 EB 6B    >                        jp      nz,NotReadNextKey
  26+ 6BC8 DD 7E 01     .CanReadKey:            ld      a,(ix+1)                        ; Screen Map Byte 1 Screen Id
  27+ 6BCB B9                                   cp      c                               ; is the index the current screen, if so skip the scan
  28+ 6BCC 5F                                   ld      e,a
  29+ 6BCD 28 1C                                jr      z,NotReadNextKey                ; we cant transition to current screen
  30+ 6BCF DD 7E 03                             ld      a,(ix+3)                        ; Screen Map Byte 3 - address of keypress table
  31+ 6BD2 FE FF                                cp      $FF                             ; if upper byte is FF then we do not respond
  32+ 6BD4 28 15                                jr      z,NotReadNextKey
  33+ 6BD6 32 E1 6B                             ld      (ReadKeyAddr+2),a               ; Poke address into the ld hl,(....) below
  34+ 6BD9 DD 7E 02                             ld      a,(ix+2)                        ; Screen Map Byte 2 - address of keypress table
  35+ 6BDC 32 E0 6B                             ld      (ReadKeyAddr+1),a
  36+ 6BDF 2A 00 00     ReadKeyAddr:            ld      hl,($0000)                      ; address is entry in the pointer table to the actual keypress
  37+ 6BE2 7E                                   ld      a,(hl)                          ; now fetch the actual keypress
  38+ 6BE3                                      JumpIfAIsZero NotReadNextKey
  38+ 6BE3 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  38+ 6BE4 CA EB 6B    >                        jp	    z, NotReadNextKey
  39+ 6BE7 7B           .ValidScreenChange:     ld      a,e                             ; entering here e= current screen search number
  40+ 6BE8 C3 FE 6A                             jp      SetScreenA
  41+ 6BEB              ;--- CODE WILL NOT FALL TO HERE ---
  42+ 6BEB 11 13 00     NotReadNextKey:         ld      de,ScreenMapRow
  43+ 6BEE DD 19                                add     ix,de                           ; we have only processed 3 of 8 bytes at here
  44+ 6BF0 10 A6                                djnz    ViewScanLoop
  45+ 6BF2 C9                                   ret
  46+ 6BF3
# file closed: ./GameEngine/ViewKeyTest.asm
 517  6BF3              ;----------------------------------------------------------------------------------------------------------------------------------
 518  6BF3 21 00 00     SetInitialShipPosition: ld      hl,$0000
 519  6BF6 22 20 C0                             ld      (UBnkxlo),hl
 520  6BF9 21 00 00                             ld      hl,$0000
 521  6BFC 22 23 C0                             ld      (UBnkylo),hl
 522  6BFF 21 B4 03                             ld      hl,$03B4
 523  6C02 22 26 C0                             ld      (UBnkzlo),hl
 524  6C05 AF                                   xor     a
 525  6C06 32 22 C0                             ld      (UBnkxsgn),a
 526  6C09 32 25 C0                             ld      (UBnkysgn),a
 527  6C0C 32 28 C0                             ld      (UBnkzsgn),a
 528  6C0F                          DISPLAY "TODO:  call    Reset TODO"
 529  6C0F CD 99 C9                             call	InitialiseOrientation            ;#00;
 530  6C12 3E 01                                ld      a,1
 531  6C14 32 6B 7F                             ld      (DELTA),a
 532  6C17 21 04 00                             ld      hl,4
 533  6C1A 22 6C 7F                             ld      (DELTA4),hl
 534  6C1D C9                                   ret
 535  6C1E
 536  6C1E              ; Checks to see if current ship swapped in is in our sights
 537  6C1E              ; we don;t need to deal with planets or sun as they have their own memory bank
 538  6C1E              ShipInSights:           ClearCarryFlag                          ; Carry clear no hit
 538  6C1E B7          >                        or a
 539  6C1F                                      ReturnIfMemIsNegative UBnkzsgn
 539  6C1F 3A 28 C0    >                        ld      a,(UBnkzsgn)
 539  6C22 E6 80       >                        and     $80
 539  6C24 C0          >                        ret     nz
 540  6C25 3A 52 C0                             ld      a,(UBnkexplDsp)                 ; get exploding flag and or with x and y high
 541  6C28 2A 20 C0                             ld      hl,(UBnkxlo)                    ; do 16 bit fetch as we will often need both bytes
 542  6C2B ED 4B 23 C0                          ld      bc,(UBnkylo)                    ; .
 543  6C2F B4                                   or      h
 544  6C30 B0                                   or      b
 545  6C31 C0                                   ret     nz                              ; if exploding or x hi or y hi are set then its nto targetable
 546  6C32 7D                                   ld      a,l                             ; hl =xlo ^ 2
 547  6C33                                      DEEquSquareA                            ; .
 547  6C33 57          >                        ld  d,a
 547  6C34 5F          >                        ld  e,a
 547  6C35 ED 30       >                        mul de
 548  6C37 62 6B                                ld      hl,de                           ; .
 549  6C39 79                                   ld      a,c                             ; de = de = ylo ^ 2
 550  6C3A                                      DEEquSquareA                            ; .
 550  6C3A 57          >                        ld  d,a
 550  6C3B 5F          >                        ld  e,a
 550  6C3C ED 30       >                        mul de
 551  6C3E 19                                   add     hl,de                           ; hl = xlo ^ 2 + ylo ^ 2
 552  6C3F D8                                   ret     c                               ; if there was a carry then out of line of sight
 553  6C40 ED 5B F8 C3                          ld      de,(MissileLockLoAddr)          ; get targettable area ^ 2 from blueprint copy
 554  6C44                                      cpHLDE                                  ; now compare x^2 + y^2 to target area
 554  6C44 E5          >                        push    hl
 554  6C45 A7          >                        and     a
 554  6C46 ED 52       >                        sbc     hl,de
 554  6C48 E1          >                        pop     hl
 555  6C49 28 01                                jr      z,.EdgeHit                      ; if its an edge hit then we need to set carry
 556  6C4B C9                                   ret                                     ; if its < area then its a hit and carry is set, we will not work on =
 557  6C4C              .EdgeHit:               SetCarryFlag                            ; its an edge hit then we need to set carry
 557  6C4C 37          >                        scf
 558  6C4D C9                                   ret
 559  6C4E
 560  6C4E
 561  6C4E                          INCLUDE "./Views/ConsoleDrawing.asm"
# file opened: ./Views/ConsoleDrawing.asm
   1+ 6C4E              ; bc = start position, d = length, e = colour
   2+ 6C4E              ;                        DEFINE MISSILEDIAGNOSTICS 1
   3+ 6C4E 1E 10        Draw3LineBar:           ld      e,16
   4+ 6C50 C5 D5                                push    bc,,de
   5+ 6C52                                      MMUSelectLayer2
   5+ 6C52 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   6+ 6C56 CD 84 E4                             call    l2_draw_horz_line
   7+ 6C59 D1 C1                                pop     bc,,de
   8+ 6C5B 05                                   dec     b
   9+ 6C5C C5 D5                                push    bc,,de
  10+ 6C5E 1E 14                                ld      e,20
  11+ 6C60                                      MMUSelectLayer2
  11+ 6C60 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  12+ 6C64 CD 84 E4                             call    l2_draw_horz_line
  13+ 6C67 D1 C1                                pop     bc,,de
  14+ 6C69 05                                   dec     b
  15+ 6C6A                                      MMUSelectLayer2
  15+ 6C6A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  16+ 6C6E CD 84 E4                             call    l2_draw_horz_line
  17+ 6C71 C9                                   ret
  18+ 6C72
  19+ 6C72 1E 7C        DrawColourCodedBar:     ld      e,124
  20+ 6C74 FE 28                                cp      40
  21+ 6C76 30 18                                jr      nc,DrawColourEBar
  22+ 6C78 1E 54                                ld      e,84
  23+ 6C7A FE 1E                                cp      30
  24+ 6C7C 30 12                                jr      nc,DrawColourEBar
  25+ 6C7E 1E D8                                ld      e,216
  26+ 6C80 FE 14                                cp      20
  27+ 6C82 1E EC                                ld      e,236
  28+ 6C84 FE 0A                                cp      10
  29+ 6C86 30 08                                jr      nc,DrawColourEBar
  30+ 6C88 1E E1                                ld      e,225
  31+ 6C8A FE 05                                cp      5
  32+ 6C8C 30 02                                jr      nc,DrawColourEBar
  33+ 6C8E 1E E0                                ld      e,224
  34+ 6C90 C5 D5        DrawColourEBar:         push    bc,,de
  35+ 6C92                                      MMUSelectLayer2
  35+ 6C92 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  36+ 6C96 CD 84 E4                             call    l2_draw_horz_line
  37+ 6C99 D1 C1                                pop     bc,,de
  38+ 6C9B 05                                   dec     b
  39+ 6C9C C5 D5                                push    bc,,de
  40+ 6C9E                                      MMUSelectLayer2
  40+ 6C9E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  41+ 6CA2 CD 84 E4                             call    l2_draw_horz_line
  42+ 6CA5 D1 C1                                pop     bc,,de
  43+ 6CA7 05                                   dec     b
  44+ 6CA8                                      MMUSelectLayer2
  44+ 6CA8 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  45+ 6CAC CD 84 E4                             call    l2_draw_horz_line
  46+ 6CAF C9                                   ret
  47+ 6CB0
  48+ 6CB0                                      ; no ret needed as jp handles it
  49+ 6CB0
  50+ 6CB0 16 50        MissileDiagPositive:    ld      d,"P"
  51+ 6CB2 CD 13 E3                             call    l2_print_chr_at
  52+ 6CB5 C9                                   ret
  53+ 6CB6
  54+ 6CB6 16 4E        MissileDiagNegative:    ld      d,"N"
  55+ 6CB8 CD 13 E3                             call    l2_print_chr_at
  56+ 6CBB C9                                   ret
  57+ 6CBC
  58+ 6CBC 16 5A        MissileDiagZero:        ld      d,"Z"
  59+ 6CBE CD 13 E3                             call    l2_print_chr_at
  60+ 6CC1 C9                                   ret
  61+ 6CC2
  62+ 6CC2 1E FF        MissileValue:           ld      e,$FF
  63+ 6CC4 FE 00                                cp      0
  64+ 6CC6 F5                                   push    af
  65+ 6CC7 CC BC 6C                             call    z,MissileDiagZero
  66+ 6CCA F1                                   pop     af
  67+ 6CCB C8                                   ret     z
  68+ 6CCC CB 7F                                bit     7,a
  69+ 6CCE F5                                   push    af
  70+ 6CCF CC B6 6C                             call    z,MissileDiagNegative
  71+ 6CD2 F1                                   pop     af
  72+ 6CD3 C8                                   ret     z
  73+ 6CD4 C4 B0 6C                             call    nz,MissileDiagPositive
  74+ 6CD7 C9                                   ret
  75+ 6CD8
  76+ 6CD8 30 31 32 33  Hex2Char:       DB "0123456789ABCDEF"
  76+ 6CDC 34 35 36 37
  76+ 6CE0 38 39 41 42
  76+ 6CE4 43 44 45 46
  77+ 6CE8
  78+ 6CE8 F5 E5 C5 D5  MissileHexDigit:        push    af,,hl,,bc,,de
  79+ 6CEC E6 0F                                and     $0F
  80+ 6CEE 21 D8 6C                             ld      hl, Hex2Char
  81+ 6CF1 ED 31                                add     hl,a
  82+ 6CF3 56                                   ld      d,(hl)
  83+ 6CF4 CD 13 E3                             call    l2_print_chr_at
  84+ 6CF7 D1 C1 E1 F1                          pop     af,,hl,,bc,,de
  85+ 6CFB C9                                   ret
  86+ 6CFC
  87+ 6CFC ED 23        MissileHexToChar:       swapnib
  88+ 6CFE E6 0F                                and     $0F
  89+ 6D00 1E FF                                ld      e,$FF
  90+ 6D02                                      JumpIfALTNusng 8,.SkipNeg
  90+ 6D02 FE 08       >                        cp      8
  90+ 6D04 DA 0B 6D    >                        jp		c, .SkipNeg
  91+ 6D07 1E 68                                ld      e,$68
  92+ 6D09 D6 08                                sub     8
  93+ 6D0B CD E8 6C     .SkipNeg:               call    MissileHexDigit
  94+ 6D0E ED 23                                swapnib
  95+ 6D10 F5                                   push    af
  96+ 6D11 79                                   ld      a,c
  97+ 6D12 C6 08                                add     8
  98+ 6D14 4F                                   ld      c,a
  99+ 6D15 F1                                   pop     af
 100+ 6D16 E6 0F                                and     $0F
 101+ 6D18 CD E8 6C                             call    MissileHexDigit
 102+ 6D1B C9                                   ret
 103+ 6D1C
 104+ 6D1C 1E FF        MissileValue2Byte:      ld      e,$FF
 105+ 6D1E 7E                                   ld      a,(hl)
 106+ 6D1F 23                                   inc     hl
 107+ 6D20 B6                                   or      (hl)
 108+ 6D21 FE 00                                cp      0
 109+ 6D23 F5                                   push    af
 110+ 6D24 CC BC 6C                             call    z,MissileDiagZero
 111+ 6D27 F1                                   pop     af
 112+ 6D28 C8                                   ret     z
 113+ 6D29 7E                                   ld      a,(hl)
 114+ 6D2A CB 7F                                bit     7,a
 115+ 6D2C F5                                   push    af
 116+ 6D2D CC B6 6C                             call    z,MissileDiagNegative
 117+ 6D30 F1                                   pop     af
 118+ 6D31 C8                                   ret     z
 119+ 6D32 C4 B0 6C                             call    nz,MissileDiagPositive
 120+ 6D35 C9                                   ret
 121+ 6D36
 122+ 6D36 16 78        MissileDiagPrintBoiler: ld      d,"x"
 123+ 6D38 1E 30                                ld      e, $30
 124+ 6D3A 01 88 80                             ld      bc,$8088
 125+ 6D3D CD 13 E3                             call    l2_print_chr_at
 126+ 6D40 01 88 88                             ld      bc,$8888
 127+ 6D43 16 7A                                ld      d,"z"
 128+ 6D45 1E 30                                ld      e, $30
 129+ 6D47 CD 13 E3                             call    l2_print_chr_at
 130+ 6D4A 01 88 90                             ld      bc,$9088
 131+ 6D4D 16 73                                ld      d,"s"
 132+ 6D4F 1E 30                                ld      e, $30
 133+ 6D51 CD 13 E3                             call    l2_print_chr_at
 134+ 6D54 01 48 90                             ld      bc,$9048
 135+ 6D57 16 6E                                ld      d,"n"
 136+ 6D59 1E 30                                ld      e, $30
 137+ 6D5B CD 13 E3                             call    l2_print_chr_at
 138+ 6D5E 01 48 80                             ld      bc,$8048
 139+ 6D61 16 73                                ld      d,"s"
 140+ 6D63 1E 30                                ld      e, $30
 141+ 6D65 CD 13 E3                             call    l2_print_chr_at
 142+ 6D68 01 48 88                             ld      bc,$8848
 143+ 6D6B 16 72                                ld      d,"r"
 144+ 6D6D 1E 30                                ld      e, $30
 145+ 6D6F CD 13 E3                             call    l2_print_chr_at
 146+ 6D72 C9                                   ret
 147+ 6D73
 148+ 6D73              MissileDiagnotics:      MMUSelectLayer2
 148+ 6D73 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 149+ 6D77 CD 36 6D                             call    MissileDiagPrintBoiler
 150+ 6D7A 1E FF                                ld      e,$FF
 151+ 6D7C 01 90 80                             ld      bc,$8090
 152+ 6D7F 3A 27 A4                             ld      a,(TacticsRotX)
 153+ 6D82 CD FC 6C                             call    MissileHexToChar; MissileValue
 154+ 6D85 01 90 88                             ld      bc,$8890
 155+ 6D88 3A 29 A4                             ld      a,(TacticsRotZ)
 156+ 6D8B CD FC 6C                             call    MissileHexToChar; MissileValue
 157+ 6D8E 01 90 90                             ld      bc,$9090
 158+ 6D91 3A 2B A4                             ld      a,(TacticsSpeed)
 159+ 6D94 CD FC 6C                             call    MissileHexToChar; MissileValue
 160+ 6D97 01 50 80     .VectorSideX:           ld      bc,$8050
 161+ 6D9A 3A F7 A3                             ld      a,(TacticsSideX+1)
 162+ 6D9D CD FC 6C                             call    MissileHexToChar;issileValue2Byte
 163+ 6DA0 01 62 80                             ld      bc,$8062
 164+ 6DA3 3A FB A3                             ld      a,(TacticsSideY+1)
 165+ 6DA6 CD FC 6C                             call    MissileHexToChar
 166+ 6DA9 01 74 80                             ld      bc,$8074
 167+ 6DAC 3A FF A3                             ld      a,(TacticsSideZ+1)
 168+ 6DAF CD FC 6C                             call    MissileHexToChar
 169+ 6DB2 01 50 88     .VectorRoofX:           ld      bc,$8850
 170+ 6DB5 3A 07 A4                             ld      a,(TacticsRoofX+1)
 171+ 6DB8 CD FC 6C                             call    MissileHexToChar
 172+ 6DBB 01 62 88                             ld      bc,$8862
 173+ 6DBE 3A 0B A4                             ld      a,(TacticsRoofY+1)
 174+ 6DC1 CD FC 6C                             call    MissileHexToChar
 175+ 6DC4 01 74 88                             ld      bc,$8874
 176+ 6DC7 3A 0F A4                             ld      a,(TacticsRoofZ+1)
 177+ 6DCA CD FC 6C                             call    MissileHexToChar
 178+ 6DCD 01 50 90     .VectorNoseX:           ld      bc,$9050
 179+ 6DD0 3A 17 A4                             ld      a,(TacticsNoseX+1)
 180+ 6DD3 CD FC 6C                             call    MissileHexToChar
 181+ 6DD6 01 62 90                             ld      bc,$9062
 182+ 6DD9 3A 1B A4                             ld      a,(TacticsNoseY+1)
 183+ 6DDC CD FC 6C                             call    MissileHexToChar
 184+ 6DDF 01 74 90                             ld      bc,$9074
 185+ 6DE2 3A 0F A4                             ld      a,(TacticsRoofZ+1)
 186+ 6DE5 CD FC 6C                             call    MissileHexToChar
 187+ 6DE8 C9                                   ret
 188+ 6DE9
 189+ 6DE9              UpdateConsole:          IFDEF   MISSILEDIAGNOSTICS
 190+ 6DE9 ~                                            call    MissileDiagnotics
 191+ 6DE9                                      ENDIF
 192+ 6DE9 3A 6B 7F                             ld      a,(DELTA)
 193+ 6DEC FE 00                                cp      0                           ; don't draw if there is nothing to draw
 194+ 6DEE 28 0C                                jr      z,.UpdateRoll
 195+ 6DF0 01 D1 84                             ld      bc,SpeedoStart
 196+ 6DF3 21 47 82                             ld      hl,SpeedoMapping
 197+ 6DF6 ED 31                                add     hl,a
 198+ 6DF8 56                                   ld      d,(hl)
 199+ 6DF9 CD 4E 6C                             call    Draw3LineBar
 200+ 6DFC 3A 8B 7E     .UpdateRoll:            ld      a,(ALP1)
 201+ 6DFF FE 00                                cp      0
 202+ 6E01 CA 35 6E                             jp      z,.UpdatePitch
 203+ 6E04 21 E0 8C                             ld      hl,RollMiddle
 204+ 6E07 3A 8C 7E                             ld      a,(ALP2)
 205+ 6E0A FE 00                                cp      0
 206+ 6E0C CA 27 6E                             jp     z,.PosRoll
 207+ 6E0F 16 00        .NegRoll:               ld      d,0
 208+ 6E11 3A 8B 7E                             ld      a,(ALP1)
 209+ 6E14 CB 27                                sla     a
 210+ 6E16 5F                                   ld      e,a
 211+ 6E17 B7                                   or      a
 212+ 6E18 ED 52                                sbc     hl,de
 213+ 6E1A 44 4D                                ld      bc,hl
 214+ 6E1C 3E E1                                ld      a,DialMiddleXPos
 215+ 6E1E 91                                   sub     c
 216+ 6E1F 57                                   ld      d,a
 217+ 6E20 1E FF                                ld      e,$FF
 218+ 6E22 CD 4E 6C                             call    Draw3LineBar
 219+ 6E25 18 0E                                jr      .UpdatePitch
 220+ 6E27 01 E0 8C     .PosRoll:               ld      bc,RollMiddle
 221+ 6E2A 3A 8B 7E                             ld      a,(ALP1)
 222+ 6E2D CB 27                                sla     a
 223+ 6E2F 57                                   ld      d,a
 224+ 6E30 1E FF                                ld      e,$FF
 225+ 6E32 CD 4E 6C                             call    Draw3LineBar
 226+ 6E35 3A 76 7E     .UpdatePitch:           ld      a,(BET1)
 227+ 6E38 FE 00                                cp      0
 228+ 6E3A CA 6F 6E                             jp      z,.Fuel
 229+ 6E3D 21 E0 94                             ld      hl,PitchMiddle
 230+ 6E40 3A 77 7E                             ld      a,(BET2)
 231+ 6E43 FE 00                                cp      0
 232+ 6E45 CA 61 6E                             jp      z,.PosPitch
 233+ 6E48 16 00        .NegPitch:              ld      d,0
 234+ 6E4A 3A 76 7E                             ld      a,(BET1)
 235+ 6E4D CB 27                                sla     a
 236+ 6E4F 5F                                   ld      e,a
 237+ 6E50 B7                                   or      a
 238+ 6E51 ED 52                                sbc     hl,de
 239+ 6E53 44 4D                                ld      bc,hl
 240+ 6E55 3E E1                                ld      a,DialMiddleXPos
 241+ 6E57 91                                   sub     c
 242+ 6E58 57                                   ld      d,a
 243+ 6E59 1E FF                                ld      e,$FF
 244+ 6E5B CD 4E 6C                             call    Draw3LineBar
 245+ 6E5E C3 6F 6E                             jp      .Fuel
 246+ 6E61 01 E0 94     .PosPitch:              ld      bc,PitchMiddle
 247+ 6E64 3A 76 7E                             ld      a,(BET1)
 248+ 6E67 CB 27                                sla     a
 249+ 6E69 57                                   ld      d,a
 250+ 6E6A 1E FF                                ld      e,$FF
 251+ 6E6C CD 4E 6C                             call    Draw3LineBar
 252+ 6E6F 3A D3 84     .Fuel:                  ld      a,(Fuel)
 253+ 6E72 CB 3F                                srl     a               ; divide by 4 to get range on screen
 254+ 6E74 21 22 82                             ld      hl,FuelMapping
 255+ 6E77 ED 31                                add     hl,a
 256+ 6E79 7E                                   ld      a,(hl)
 257+ 6E7A 01 10 94                             ld      bc,FuelStart
 258+ 6E7D 57                                   ld      d,a
 259+ 6E7E CD 72 6C                             call    DrawColourCodedBar
 260+ 6E81 3A F2 81     .FrontShield:           ld      a,(ForeShield)
 261+ 6E84 CB 3F                                srl     a
 262+ 6E86 CB 3F                                srl     a
 263+ 6E88 CB 3F                                srl     a
 264+ 6E8A 01 10 84                             ld      bc,FShieldStart
 265+ 6E8D 57                                   ld      d,a
 266+ 6E8E CD 72 6C                             call    DrawColourCodedBar
 267+ 6E91 3A F3 81     .AftShield:             ld      a,(AftShield)
 268+ 6E94 CB 3F                                srl     a
 269+ 6E96 CB 3F                                srl     a
 270+ 6E98 CB 3F                                srl     a
 271+ 6E9A 01 10 8D                             ld      bc,AShieldStart
 272+ 6E9D 57                                   ld      d,a
 273+ 6E9E CD 72 6C                             call    DrawColourCodedBar
 274+ 6EA1              .SpriteDraw:            MMUSelectSpriteBank
 274+ 6EA1 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 275+ 6EA5 3A 86 7E     .DrawECM:               ld      a,(ECMCountDown)
 276+ 6EA8                                      JumpIfAIsZero   .HideECM
 276+ 6EA8 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 276+ 6EA9 CA B2 6E    >                        jp	    z, .HideECM
 277+ 6EAC CD CF E1     .ShowECM:               call    show_ecm_sprite
 278+ 6EAF C3 B5 6E                             jp      .ProcessedECM
 279+ 6EB2 CD 18 E4     .HideECM:               call    sprite_ecm_hide
 280+ 6EB5              .ProcessedECM:
 281+ 6EB5 3A 20 80     .DrawMissiles:          ld      a,(NbrMissiles)
 282+ 6EB8 FD 6F                                ld      iyl,a
 283+ 6EBA                                      JumpIfAIsZero   .HideAllMissiles                    ; First off do we have any missiles
 283+ 6EBA A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 283+ 6EBB CA F9 6E    >                        jp	    z, .HideAllMissiles
 284+ 6EBE 3A F7 81     .DrawMissile_1:         ld      a,(MissileTargettingFlag)                   ; have we the targetting flag
 285+ 6EC1                                      JumpIfAEqNusng  StageMissileNotTargeting,.MissileReady
 285+ 6EC1 FE FF       >                        cp     StageMissileNotTargeting
 285+ 6EC3 CA D1 6E    >                        jp      z,.MissileReady
 286+ 6EC6                                      JumpIfAEqNusng  StageMissileTargeting,   .MissileArmed
 286+ 6EC6 FE FE       >                        cp     StageMissileTargeting
 286+ 6EC8 CA D7 6E    >                        jp      z,.MissileArmed
 287+ 6ECB CD 11 E2     .Missile1Locked:        call    show_missile_1_locked
 288+ 6ECE C3 DA 6E                             jp      .DrawMissile_2
 289+ 6ED1 CD DA E1     .MissileReady:          call    show_missile_1_ready
 290+ 6ED4 C3 DA 6E                             jp      .DrawMissile_2
 291+ 6ED7 CD 06 E2     .MissileArmed:          call    show_missile_1_armed
 292+ 6EDA FD 7D        .DrawMissile_2:         ld      a,iyl
 293+ 6EDC                                      JumpIfALTNusng 2, .Only1Missile
 293+ 6EDC FE 02       >                        cp      2
 293+ 6EDE DA FC 6E    >                        jp		c, .Only1Missile
 294+ 6EE1 CD E5 E1                             call    show_missile_2_ready
 295+ 6EE4 FD 7D        .DrawMissile_3:         ld      a,iyl
 296+ 6EE6                                      JumpIfALTNusng 3, .Only2Missiles
 296+ 6EE6 FE 03       >                        cp      3
 296+ 6EE8 DA FF 6E    >                        jp		c, .Only2Missiles
 297+ 6EEB CD F0 E1                             call    show_missile_3_ready
 298+ 6EEE FD 7D        .DrawMissile_4:         ld      a,iyl
 299+ 6EF0                                      JumpIfALTNusng 4, .Only2Missiles
 299+ 6EF0 FE 04       >                        cp      4
 299+ 6EF2 DA FF 6E    >                        jp		c, .Only2Missiles
 300+ 6EF5 CD FB E1                             call    show_missile_4_ready
 301+ 6EF8 C9                                   ret
 302+ 6EF9 CD 21 E4     .HideAllMissiles:       call    sprite_missile_1_hide
 303+ 6EFC CD 2A E4     .Only1Missile:          call    sprite_missile_2_hide
 304+ 6EFF CD 33 E4     .Only2Missiles:         call    sprite_missile_3_hide
 305+ 6F02 CD 3C E4     .Only3Missiles:         call    sprite_missile_4_hide
 306+ 6F05              ;PlayerEnergy
 307+ 6F05              ; BNEED LASER temp
 308+ 6F05              ; NEED CABIN TEMP
 309+ 6F05              ;NEED ALTITUDE
 310+ 6F05              ; Draw compas - if in range draw station, else do planet
 311+ 6F05 3A F4 81     .EnergyBars:            ld      a,(PlayerEnergy)
 312+ 6F08 CB 3F                                srl     a                   ; energy = energy / 2 so 31 per bar
 313+ 6F0A                                      JumpIfALTNusng  31 + 1,     Draw1EnergyBar
 313+ 6F0A FE 20       >                        cp      31 + 1
 313+ 6F0C DA 1C 6F    >                        jp		c, Draw1EnergyBar
 314+ 6F0F                                      JumpIfALTNusng  (31*2) + 1, Draw2EnergyBars
 314+ 6F0F FE 3F       >                        cp      (31*2) + 1
 314+ 6F11 DA 26 6F    >                        jp		c, Draw2EnergyBars
 315+ 6F14                                      JumpIfALTNusng  (31*3) + 1, Draw3EnergyBars
 315+ 6F14 FE 5E       >                        cp      (31*3) + 1
 315+ 6F16 DA 3C 6F    >                        jp		c, Draw3EnergyBars
 316+ 6F19 C3 5E 6F                             jp      Draw4EnergyBars
 317+ 6F1C
 318+ 6F1C 1E E0        Draw1EnergyBar:         ld      e,224
 319+ 6F1E 57                                   ld      d,a
 320+ 6F1F 01 D5 BD                             ld      bc,EnergyBar1Start
 321+ 6F22 CD 90 6C                             call    DrawColourEBar
 322+ 6F25 C9                                   ret
 323+ 6F26 1E D8        Draw2EnergyBars:        ld      e,216
 324+ 6F28 D6 1F                                sub     31
 325+ 6F2A 57                                   ld      d,a
 326+ 6F2B 01 D5 B5                             ld      bc,EnergyBar2Start
 327+ 6F2E CD 90 6C                             call    DrawColourEBar
 328+ 6F31 16 1F                                ld      d,31
 329+ 6F33 1E D8                                ld      e,216
 330+ 6F35 01 D5 BD                             ld      bc,EnergyBar1Start
 331+ 6F38 CD 90 6C                             call    DrawColourEBar
 332+ 6F3B C9                                   ret
 333+ 6F3C 1E 14        Draw3EnergyBars:        ld      e,20
 334+ 6F3E D6 3E                                sub     31*2
 335+ 6F40 57                                   ld      d,a
 336+ 6F41 1E 14                                ld      e,20
 337+ 6F43 01 D5 AD                             ld      bc,EnergyBar3Start
 338+ 6F46 CD 90 6C                             call    DrawColourEBar
 339+ 6F49 16 1F                                ld      d,31
 340+ 6F4B 1E 14                                ld      e,20
 341+ 6F4D 01 D5 B5                             ld      bc,EnergyBar2Start
 342+ 6F50 CD 90 6C                             call    DrawColourEBar
 343+ 6F53 16 1F                                ld      d,31
 344+ 6F55 1E 14                                ld      e,20
 345+ 6F57 01 D5 BD                             ld      bc,EnergyBar1Start
 346+ 6F5A CD 90 6C                             call    DrawColourEBar
 347+ 6F5D C9                                   ret
 348+ 6F5E 1E 18        Draw4EnergyBars:        ld      e,24
 349+ 6F60 D6 5D                                sub     31*3
 350+ 6F62                                      JumpIfALTNusng 31,.NoMax
 350+ 6F62 FE 1F       >                        cp      31
 350+ 6F64 DA 69 6F    >                        jp		c, .NoMax
 351+ 6F67 3E 1F        .Max                    ld      a,31
 352+ 6F69 57           .NoMax:                 ld      d,a
 353+ 6F6A 01 D5 A5                             ld      bc,EnergyBar4Start
 354+ 6F6D CD 90 6C                             call    DrawColourEBar
 355+ 6F70 16 1F                                ld      d,31
 356+ 6F72 1E 18                                ld      e,24
 357+ 6F74 01 D5 AD                             ld      bc,EnergyBar3Start
 358+ 6F77 CD 90 6C                             call    DrawColourEBar
 359+ 6F7A 16 1F                                ld      d,31
 360+ 6F7C 1E 18                                ld      e,24
 361+ 6F7E 01 D5 B5                             ld      bc,EnergyBar2Start
 362+ 6F81 CD 90 6C                             call    DrawColourEBar
 363+ 6F84 16 1F                                ld      d,31
 364+ 6F86 1E 18                                ld      e,24
 365+ 6F88 01 D5 BD                             ld      bc,EnergyBar1Start
 366+ 6F8B CD 90 6C                             call    DrawColourEBar
 367+ 6F8E C9                                   ret
 368+ 6F8F
 369+ 6F8F              ScannerBottom           equ 190
 370+ 6F8F              ScannerTypeMissle       equ 2
 371+ 6F8F              ScannerXRangeOffset     equ $35
 372+ 6F8F              ScannerCenter           equ 127
 373+ 6F8F
 374+ 6F8F              ScannerDefault          equ 0
 375+ 6F8F              ScannerMissile          equ 2
 376+ 6F8F              ScannerStation          equ 4
 377+ 6F8F              ScannerEnemy            equ 6
 378+ 6F8F
 379+ 6F8F
 380+ 6F8F 00           SunXScaled              DB  0
 381+ 6F90 00           SunYScaled              DB  0
 382+ 6F91 00           SunZScaled              DB  0
 383+ 6F92
 384+ 6F92                                      ;   ShipTypeNormal
 385+ 6F92 18 1C 90 FC  ScannerColourTable:       DB  L2ColourGREEN_2,    L2ColourGREEN_1, L2ColourYELLOW_4,  L2ColourYELLOW_1,   L2ColourCYAN_2, L2ColourCYAN_1, L2ColourRED_4,  L2ColourPINK_4
 385+ 6F96 12 1F 80 E0
 386+ 6F9A C0 E0 C0 E0  ScannerColourTableHostile:DB  L2ColourRED_2,      L2ColourRED_1,   L2ColourRED_2,     L2ColourRED_1,      L2ColourRED_2,  L2ColourRED_1,  L2ColourRED_2,  L2ColourRED_1; just a place holder for now
 386+ 6F9E C0 E0 C0 E0
 387+ 6FA2
 388+ 6FA2              GetShipColor:           MACRO
 389+ 6FA2 ~                                    ld      hl,ScannerColourTable
 390+ 6FA2 ~                                    ld      a,(ShipTypeAddr)         ; for now to bypass hostile missile
 391+ 6FA2 ~                                    cp      1                        ; for now to bypass hostile missile
 392+ 6FA2 ~                                    jr      z,.UsingColourTable    ; for now to bypass hostile missile
 393+ 6FA2 ~                                    ld      a,(ShipNewBitsAddr)
 394+ 6FA2 ~                                    and     ShipIsHostile
 395+ 6FA2 ~                                    jr      z,.UsingColourTable
 396+ 6FA2 ~            .UsingHostileColour:    ld      hl,ScannerColourTableHostile
 397+ 6FA2 ~            .UsingColourTable:      ld      a,(ShipTypeAddr)
 398+ 6FA2 ~                                    sla     a                            ; as its byte pairs * 2
 399+ 6FA2 ~                                    add     hl,a
 400+ 6FA2 ~                                    ld      a,(hl)
 401+ 6FA2                                      ENDM
 402+ 6FA2              GetShipColorBright:     MACRO
 403+ 6FA2 ~                                    ld      hl,ScannerColourTable
 404+ 6FA2 ~                                    ld      a,(ShipTypeAddr)         ; for now to bypass hostile missile
 405+ 6FA2 ~                                    cp      1                        ; for now to bypass hostile missile
 406+ 6FA2 ~                                    jr      z,.UsingColourTable    ; for now to bypass hostile missile
 407+ 6FA2 ~                                    ld      a,(ShipNewBitsAddr)
 408+ 6FA2 ~                                    and     ShipIsHostile
 409+ 6FA2 ~                                    jr      z,.UsingColourTable
 410+ 6FA2 ~            .UsingHostileColour:    ld      hl,ScannerColourTableHostile
 411+ 6FA2 ~            .UsingColourTable:      ld      a,(ShipTypeAddr)
 412+ 6FA2 ~                                    sla     a                            ; as its byte pairs * 2
 413+ 6FA2 ~                                    inc     a
 414+ 6FA2 ~                                    add     hl,a
 415+ 6FA2 ~                                    ld      a,(hl)
 416+ 6FA2                                      ENDM
 417+ 6FA2
 418+ 6FA2              Shift24BitScan:         MACRO   regHi, reglo
 419+ 6FA2 ~                                    ld      hl,(regHi)
 420+ 6FA2 ~                                    ld      b,h
 421+ 6FA2 ~                                    ld      a,h
 422+ 6FA2 ~                                    and     SignMask8Bit
 423+ 6FA2 ~                                    ld      h,a
 424+ 6FA2 ~                                    ld      a,(reglo)
 425+ 6FA2 ~                                    sla     a
 426+ 6FA2 ~                                    rl      l
 427+ 6FA2 ~                                    rl      h
 428+ 6FA2 ~                                    sla     a
 429+ 6FA2 ~                                    rl      l
 430+ 6FA2 ~                                    rl      h
 431+ 6FA2 ~                                    sla     a
 432+ 6FA2 ~                                    rl      l
 433+ 6FA2 ~                                    rl      h
 434+ 6FA2 ~                                    sla     a
 435+ 6FA2 ~                                    rl      l
 436+ 6FA2 ~                                    rl      h
 437+ 6FA2 ~                                    sla     a
 438+ 6FA2 ~                                    rl      l
 439+ 6FA2 ~                                    rl      h
 440+ 6FA2 ~                                    sla     a
 441+ 6FA2 ~                                    rl      l
 442+ 6FA2 ~                                    rl      h
 443+ 6FA2                                      ENDM
 444+ 6FA2
 445+ 6FA2              SunShiftRight           MACRO   reglo, reghi, regsgn
 446+ 6FA2 ~                                    ld      a,regsgn
 447+ 6FA2 ~                                    srl     a
 448+ 6FA2 ~                                    rr      reghi
 449+ 6FA2 ~                                    rr      reglo
 450+ 6FA2 ~                                    ld      regsgn,a
 451+ 6FA2                                      ENDM
 452+ 6FA2
 453+ 6FA2              ;SunShiftPosTo15Bit:     ld      de,(SBnKzlo)
 454+ 6FA2              ;                        ld      a,(SBnKzsgn)
 455+ 6FA2              ;                        push    af
 456+ 6FA2              ;                        and     SignMask8Bit
 457+ 6FA2              ;                        ld      iyl,a
 458+ 6FA2              ;                        ld      hl,(SBnKxlo)
 459+ 6FA2              ;                        ld      a,(SBnKxsgn)
 460+ 6FA2              ;                        push    af
 461+ 6FA2              ;                        and     SignMask8Bit
 462+ 6FA2              ;                        ld      ixl,a
 463+ 6FA2              ;                        ld      bc,(SBnKylo)
 464+ 6FA2              ;                        ld      a,(SBnKysgn)
 465+ 6FA2              ;                        and     SignMask8Bit
 466+ 6FA2              ;                        push    af
 467+ 6FA2              ;                        ld      iyh,a
 468+ 6FA2              ;.ShiftLoop:             ld      a,iyh
 469+ 6FA2              ;                        or      iyl
 470+ 6FA2              ;                        or      ixl
 471+ 6FA2              ;                        jr      z,.ShiftBit15
 472+ 6FA2              ;.ShiftZ:                SunShiftRight iyl, d, e
 473+ 6FA2              ;.ShiftX:                SunShiftRight ixl, h, l
 474+ 6FA2              ;.ShiftY:                SunShiftRight ixh, b, c
 475+ 6FA2              ;                        jr      .ShipLoop
 476+ 6FA2              ;.ShiftBit15:            ld      a,iyh
 477+ 6FA2              ;                        or      iyl
 478+ 6FA2              ;                        or      ixl
 479+ 6FA2              ;                        jr      z,.CompletedShift
 480+ 6FA2              ;.ShiftZ:                SunShiftRight iyl, d, e
 481+ 6FA2              ;.ShiftX:                SunShiftRight ixl, h, l
 482+ 6FA2              ;.ShiftY:                SunShiftRight ixh, b, c             ; finally shift to 15 bits so we can get the sign back
 483+ 6FA2              ;.CompletedShift:        pop     af                          ; get ysgn
 484+ 6FA2              ;                        and     SignOnly8Bit
 485+ 6FA2              ;                        or      b
 486+ 6FA2              ;                        ld      b,a
 487+ 6FA2              ;                        pop     af                          ; get xsgn
 488+ 6FA2              ;                        and     SignOnly8Bit
 489+ 6FA2              ;                        or      h
 490+ 6FA2              ;                        ld      h,a
 491+ 6FA2              ;                        pop     af                          ; get zsgn
 492+ 6FA2              ;                        and     SignOnly8Bit
 493+ 6FA2              ;                        or      d
 494+ 6FA2              ;                        ld      d,a
 495+ 6FA2              ;                        ret
 496+ 6FA2              ;
 497+ 6FA2 ED 5B 17 C0  ScalePlanetPos:         ld      de,(P_Bnkzhi)               ; de = abs z & save sign on stack
 498+ 6FA6 7A                                   ld      a,d                         ; .
 499+ 6FA7 F5                                   push    af                          ; .
 500+ 6FA8 E6 7F                                and     SignMask8Bit                ; .
 501+ 6FAA 57                                   ld      d,a                         ; .
 502+ 6FAB 2A 11 C0                             ld      hl,(P_Bnkxhi)               ; hl = abs x & save sign on stack
 503+ 6FAE 7C                                   ld      a,h                         ; .
 504+ 6FAF F5                                   push    af                          ; .
 505+ 6FB0 E6 7F                                and     SignMask8Bit                ; .
 506+ 6FB2 67                                   ld      h,a                         ; .
 507+ 6FB3 ED 4B 14 C0                          ld      bc,(P_Bnkyhi)                ; bc = abs y & save sign on stack
 508+ 6FB7 78                                   ld      a,b                         ; .
 509+ 6FB8 F5                                   push    af                          ; .
 510+ 6FB9 E6 7F                                and     SignMask8Bit                ; .
 511+ 6FBB 47                                   ld      b,a                         ; .
 512+ 6FBC 78           .ShiftLoop:             ld      a,b                         ; Scale down to an 8 bit value
 513+ 6FBD B2                                   or      d                           ; .
 514+ 6FBE B4                                   or      h                           ; .
 515+ 6FBF 28 0E                                jr      z,.Shifted                  ; .
 516+ 6FC1                                      ShiftBCRight1                       ; .
 516+ 6FC1 CB 38       >			   srl b
 516+ 6FC3 CB 19       >			   rr  c
 517+ 6FC5                                      ShiftHLRight1                       ; .
 517+ 6FC5 CB 3C       >			   srl h
 517+ 6FC7 CB 1D       >			   rr  l
 518+ 6FC9                                      ShiftDERight1                       ; .
 518+ 6FC9 CB 3A       >			   srl d
 518+ 6FCB CB 1B       >			   rr  e
 519+ 6FCD 18 ED                                jr      .ShiftLoop
 520+ 6FCF 79           .Shifted:               ld      a,c                         ; See if we already have 7 bit
 521+ 6FD0 B5                                   or      l                           ;
 522+ 6FD1 B3                                   or      e                           ;
 523+ 6FD2 E6 80                                and     $80                         ;
 524+ 6FD4 28 0C                                jr      z,.NoAdditionalShift        ;
 525+ 6FD6                                      ShiftBCRight1                       ; we want 7 bit
 525+ 6FD6 CB 38       >			   srl b
 525+ 6FD8 CB 19       >			   rr  c
 526+ 6FDA                                      ShiftHLRight1                       ; to acommodate the sign
 526+ 6FDA CB 3C       >			   srl h
 526+ 6FDC CB 1D       >			   rr  l
 527+ 6FDE                                      ShiftDERight1                       ; .
 527+ 6FDE CB 3A       >			   srl d
 527+ 6FE0 CB 1B       >			   rr  e
 528+ 6FE2 F1           .NoAdditionalShift:     pop     af                          ; get ysgn
 529+ 6FE3 E6 80                                and     SignOnly8Bit                ;
 530+ 6FE5 47                                   ld      b,a                         ; bc = shifted signed Y
 531+ 6FE6 F1                                   pop     af                          ; get xsgn
 532+ 6FE7 E6 80                                and     SignOnly8Bit                ;
 533+ 6FE9 67                                   ld      h,a                         ; hl = shifted signed X
 534+ 6FEA F1                                   pop     af                          ; get zsgn
 535+ 6FEB E6 80                                and     SignOnly8Bit                ;
 536+ 6FED 57                                   ld      d,a                         ; de = shifted signed Z
 537+ 6FEE C9                                   ret
 538+ 6FEF
 539+ 6FEF ED 5B 17 C0  ScaleSunPos:            ld      de,(SBnKzhi)                ; de = abs z & save sign on stack
 540+ 6FF3 7A                                   ld      a,d                         ; .
 541+ 6FF4 F5                                   push    af                          ; .
 542+ 6FF5 E6 7F                                and     SignMask8Bit                ; .
 543+ 6FF7 57                                   ld      d,a                         ; .
 544+ 6FF8 2A 11 C0                             ld      hl,(SBnKxhi)                ; hl = abs x & save sign on stack
 545+ 6FFB 7C                                   ld      a,h                         ; .
 546+ 6FFC F5                                   push    af                          ; .
 547+ 6FFD E6 7F                                and     SignMask8Bit                ; .
 548+ 6FFF 67                                   ld      h,a                         ; .
 549+ 7000 ED 4B 14 C0                          ld      bc,(SBnKyhi)                ; bc = abs y & save sign on stack
 550+ 7004 78                                   ld      a,b                         ; .
 551+ 7005 F5                                   push    af                          ; .
 552+ 7006 E6 7F                                and     SignMask8Bit                ; .
 553+ 7008 47                                   ld      b,a                         ; .
 554+ 7009 78           .ShiftLoop:             ld      a,b                         ; Scale down to an 8 bit value
 555+ 700A B2                                   or      d                           ; .
 556+ 700B B4                                   or      h                           ; .
 557+ 700C 28 0E                                jr      z,.Shifted                  ; .
 558+ 700E                                      ShiftBCRight1                       ; .
 558+ 700E CB 38       >			   srl b
 558+ 7010 CB 19       >			   rr  c
 559+ 7012                                      ShiftHLRight1                       ; .
 559+ 7012 CB 3C       >			   srl h
 559+ 7014 CB 1D       >			   rr  l
 560+ 7016                                      ShiftDERight1                       ; .
 560+ 7016 CB 3A       >			   srl d
 560+ 7018 CB 1B       >			   rr  e
 561+ 701A 18 ED                                jr      .ShiftLoop
 562+ 701C 79           .Shifted:               ld      a,c                         ; See if we already have 7 bit
 563+ 701D B5                                   or      l                           ;
 564+ 701E B3                                   or      e                           ;
 565+ 701F E6 80                                and     $80                         ;
 566+ 7021 28 0C                                jr      z,.NoAdditionalShift        ;
 567+ 7023                                      ShiftBCRight1                       ; we want 7 bit
 567+ 7023 CB 38       >			   srl b
 567+ 7025 CB 19       >			   rr  c
 568+ 7027                                      ShiftHLRight1                       ; to acommodate the sign
 568+ 7027 CB 3C       >			   srl h
 568+ 7029 CB 1D       >			   rr  l
 569+ 702B                                      ShiftDERight1                       ; .
 569+ 702B CB 3A       >			   srl d
 569+ 702D CB 1B       >			   rr  e
 570+ 702F F1           .NoAdditionalShift:     pop     af                          ; get ysgn
 571+ 7030 E6 80                                and     SignOnly8Bit                ;
 572+ 7032 47                                   ld      b,a                         ; bc = shifted signed Y
 573+ 7033 F1                                   pop     af                          ; get xsgn
 574+ 7034 E6 80                                and     SignOnly8Bit                ;
 575+ 7036 67                                   ld      h,a                         ; hl = shifted signed X
 576+ 7037 F1                                   pop     af                          ; get zsgn
 577+ 7038 E6 80                                and     SignOnly8Bit                ;
 578+ 703A 57                                   ld      d,a                         ; de = shifted signed Z
 579+ 703B C9                                   ret
 580+ 703C
 581+ 703C              ;compass sun
 582+ 703C              ;            if value is still 24 bit
 583+ 703C              ;                copy xhi/xsgn y and z to xxx15 ([2 1 0 ] [ 5 4 3] [ 8 7 6 ]
 584+ 703C              ;                normalise vector (note this assumes sun is just sign byte+ 2 bytes)
 585+ 703C              ;                tempk39 = OR 3 low bytes
 586+ 703C              ;                tempkA = OR 3 high bytes
 587+ 703C              ;                 TAL2:    repeat
 588+ 703C              ;                             asl tempka tempk39
 589+ 703C              ;                             exit if carry set
 590+ 703C              ;                             x coord << 1
 591+ 703C              ;                             y corrd << 1
 592+ 703C              ;                             z coord << 1
 593+ 703C              ;                          until carry clear
 594+ 703C              ;                 TA2:     shift x y and z right one and put sign bit in from sign bytes
 595+ 703C              ;                          now XX15 holds sign + 7 bit bytes maximused for coords
 596+ 703C              ;                          RQ = AP = X ^ 2
 597+ 703C              ;                          TP = AP = Y ^ 2
 598+ 703C              ;                          RQ = RQ + TP
 599+ 703C              ;                          TP = AP = Z ^ 2
 600+ 703C              ;                          RQ = RQ + TP
 601+ 703C              ;                          Q = SQRT (RQ)
 602+ 703C              ;                          for each coord - A = A/Q * 3/ 8
 603+ 703C              ;
 604+ 703C              ;
 605+ 703C
 606+ 703C ED 5B 17 C0  UpscaleSunPosition:     ld      de,(SBnKzhi)                ; de = abs z & save sign on stack
 607+ 7040 2A 11 C0                             ld      hl,(SBnKxhi)                ; hl = abs x & save sign on stack
 608+ 7043 ED 4B 14 C0                          ld      bc,(SBnKyhi)                ; bc = abs y & save sign on stack
 609+ 7047 7A                                   ld      a,d
 610+ 7048 E6 80                                and     SignOnly8Bit
 611+ 704A CB 3F                                srl     a
 612+ 704C FD 6F                                ld      iyl,a
 613+ 704E 7C                                   ld      a,h
 614+ 704F E6 80                                and     SignOnly8Bit
 615+ 7051 FD B5                                or      iyl
 616+ 7053 CB 3F                                srl     a
 617+ 7055 78                                   ld      a,b
 618+ 7056 E6 80                                and     SignOnly8Bit
 619+ 7058 FD B5                                or      iyl
 620+ 705A FD 6F                                ld      iyl,a                       ; IYL now equals YXH00000 where letters = sign bits
 621+ 705C                                      ClearSignBit d
 621+ 705C 7A          >                        ld      a,d
 621+ 705D E6 7F       >                        and     SignMask8Bit
 621+ 705F 57          >                        ld      d,a
 622+ 7060                                      ClearSignBit h
 622+ 7060 7C          >                        ld      a,h
 622+ 7061 E6 7F       >                        and     SignMask8Bit
 622+ 7063 67          >                        ld      h,a
 623+ 7064                                      ClearSignBit b
 623+ 7064 78          >                        ld      a,b
 623+ 7065 E6 7F       >                        and     SignMask8Bit
 623+ 7067 47          >                        ld      b,a
 624+ 7068 78                                   ld      a,b
 625+ 7069 B3                                   or      e
 626+ 706A B4                                   or      h
 627+ 706B B5                                   or      l
 628+ 706C B0                                   or      b
 629+ 706D B1                                   or      c
 630+ 706E 28 41                                jr      z, .Setto1                 ; to prevent and infinite loop in upscale if all zero
 631+ 7070 7A                                   ld      a,d
 632+ 7071 B3                                   or      e
 633+ 7072 B4                                   or      h
 634+ 7073 CB 27                                sla     a
 635+ 7075 38 15                                jr      c,.DoneCalc
 636+ 7077 28 13                                jr      z,.DoneCalc
 637+ 7079              .UpscaleLoop:           ShiftDELeft1
 637+ 7079 CB 23       >			   sla e
 637+ 707B CB 12       >			   rl  d
 638+ 707D                                      ShiftHLLeft1
 638+ 707D CB 25       >			   sla l
 638+ 707F CB 14       >			   rl  h
 639+ 7081                                      ShiftBCLeft1
 639+ 7081 CB 21       >			   sla c
 639+ 7083 CB 10       >			   rl  b
 640+ 7085 CB 27                                sla     a
 641+ 7087 38 03                                jr      c,.DoneCalc
 642+ 7089 C3 79 70                             jp      .UpscaleLoop
 643+ 708C              .DoneCalc               ShiftDERight1
 643+ 708C CB 3A       >			   srl d
 643+ 708E CB 1B       >			   rr  e
 644+ 7090                                      ShiftHLRight1
 644+ 7090 CB 3C       >			   srl h
 644+ 7092 CB 1D       >			   rr  l
 645+ 7094                                      ShiftBCRight1
 645+ 7094 CB 38       >			   srl b
 645+ 7096 CB 19       >			   rr  c
 646+ 7098 5A           .NowSetResultInLowByte: ld      e,d
 647+ 7099 6C                                   ld      l,h
 648+ 709A 48                                   ld      c,b
 649+ 709B FD 7D                                ld      a,iyl
 650+ 709D E6 80                                and     SignOnly8Bit
 651+ 709F 47                                   ld      b,a
 652+ 70A0 FD 7D                                ld      a,iyl
 653+ 70A2 CB 27                                sla     a
 654+ 70A4 FD 6F                                ld      iyl,a
 655+ 70A6 E6 80                                and     SignOnly8Bit
 656+ 70A8 67                                   ld      h,a
 657+ 70A9 FD 7D                                ld      a,iyl
 658+ 70AB CB 27                                sla     a
 659+ 70AD E6 80                                and     SignOnly8Bit
 660+ 70AF 57                                   ld      d,a
 661+ 70B0 C9                                   ret
 662+ 70B1 3E 01        .Setto1:                ld      a,1
 663+ 70B3 4F                                   ld      c,a
 664+ 70B4 5F                                   ld      e,a
 665+ 70B5 6F                                   ld      l,a
 666+ 70B6 FD 7D                                ld      a,iyl
 667+ 70B8 CB 27                                sla     a
 668+ 70BA CB 27                                sla     a
 669+ 70BC E6 80                                and     SignOnly8Bit
 670+ 70BE B3                                   or      e
 671+ 70BF 5F                                   ld      e,a
 672+ 70C0 C9                                   ret
 673+ 70C1
 674+ 70C1
 675+ 70C1              UpdateCompassSun:       MMUSelectSun
 675+ 70C1 ED 91 56 54 >                     nextreg SunMMU,            BankSunData
 676+ 70C5 CD EF 6F                             call    ScaleSunPos                 ; get as 7 bit signed
 677+ 70C8 C5 E5 D5                             push    bc,,hl,,de                  ; +3 save to stack Y, X and Z scaled and signed hihg = sign, low = 7 bit value
 678+ 70CB 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 679+ 70CC 59                                   ld      e,c                         ; .
 680+ 70CD ED 30                                mul                                 ; .
 681+ 70CF 42 4B                                ld      bc,de                       ; .
 682+ 70D1 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 683+ 70D2 5D                                   ld      e,l                         ; .
 684+ 70D3 ED 30                                mul                                 ; .
 685+ 70D5 EB                                   ex      de,hl                       ; .
 686+ 70D6 D1           .normaliseZSqr:         pop     de                          ; +2 get Z saved from stack so now stack contains Y Z X
 687+ 70D7 53                                   ld      d,e                         ; de = z ^
 688+ 70D8 ED 30                                mul                                 ; .
 689+ 70DA 19           .normaliseSqrt:         add     hl,de                       ; de = x^2 + y^2 + z^2
 690+ 70DB 09                                   add     hl,bc                       ; .
 691+ 70DC EB                                   ex      de,hl                       ; .
 692+ 70DD CD 95 92                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 693+ 70E0                                      ; if h <> 0 then more difficult
 694+ 70E0 55                                   ld      d,l                         ; iyl = q
 695+ 70E1 FD 6A                                ld      iyl,d                       ; .
 696+ 70E3 E1           .NormaliseX:            pop     hl                          ; +1 get back hl x scaled
 697+ 70E4 7C                                   ld      a,h                         ; c = sign
 698+ 70E5 E6 80                                and     SignOnly8Bit                ; .
 699+ 70E7 4F                                   ld      c,a                         ; .
 700+ 70E8 C5                                   push    bc                          ; +2 save bc temporarily as it will get altered
 701+ 70E9 7D                                   ld      a,l                         ; a = 8 bit abs z
 702+ 70EA CD 5A 9B                             call    AequAdivQmul96ABS           ; e = a /q * 96 (d was already loaded with q)
 703+ 70ED 5F                                   ld      e,a                         ; .
 704+ 70EE                                      EDiv10Inline                        ; a = e / 10
 704+ 70EE 16 00       >                        ld      d,0
 704+ 70F0 62 6B       >                        ld      hl,de
 704+ 70F2 29          >                        add     hl,hl
 704+ 70F3 19          >                        add     hl,de
 704+ 70F4 29          >                        add     hl,hl
 704+ 70F5 29          >                        add     hl,hl
 704+ 70F6 19          >                        add     hl,de
 704+ 70F7 29          >                        add     hl,hl
 705+ 70F8 7C                                   ld      a,h                         ; .
 706+ 70F9 C1                                   pop     bc                          ; +1 retrieve bc
 707+ 70FA FE 00                                cp      0                           ; if result in h was 0 then done
 708+ 70FC 28 06                                jr      z,.DoneNormX                ; in case we end up with - 0
 709+ 70FE CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 710+ 7100 28 02                                jr      z,.DoneNormX
 711+ 7102 ED 44                                neg
 712+ 7104 DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 713+ 7106 FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 714+ 7108 E1                                   pop     hl                          ; +0 hl y scaled
 715+ 7109 7C                                   ld      a,h                         ; c = sign
 716+ 710A E6 80                                and     SignOnly8Bit                ; .
 717+ 710C 4F                                   ld      c,a                         ; .
 718+ 710D C5                                   push    bc                          ; +1 save sign to stack
 719+ 710E 7D                                   ld      a,l                         ; a = 8 bit signed z
 720+ 710F CD 5A 9B                             call    AequAdivQmul96ABS           ; .
 721+ 7112 5F                                   ld      e,a                         ; a = e / 10
 722+ 7113                                      EDiv10Inline                        ; .
 722+ 7113 16 00       >                        ld      d,0
 722+ 7115 62 6B       >                        ld      hl,de
 722+ 7117 29          >                        add     hl,hl
 722+ 7118 19          >                        add     hl,de
 722+ 7119 29          >                        add     hl,hl
 722+ 711A 29          >                        add     hl,hl
 722+ 711B 19          >                        add     hl,de
 722+ 711C 29          >                        add     hl,hl
 723+ 711D 7C                                   ld      a,h                         ; retrieve sign
 724+ 711E C1                                   pop     bc                          ; +1 retrieve sign
 725+ 711F FE 00                                cp      0
 726+ 7121 28 06                                jr      z,.DoneNormY                ; in case we end up with - 0
 727+ 7123 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 728+ 7125 28 02                                jr      z,.DoneNormY
 729+ 7127 ED 44                                neg                                 ;
 730+ 7129 47           .DoneNormY:             ld      b,a                         ; result from Y
 731+ 712A DD 4C                                ld      c,ixh                       ; x = saved X
 732+ 712C              .SetSprite:             MMUSelectSpriteBank
 732+ 712C ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 733+ 7130 CD 05 E1                             call    compass_sun_move
 734+ 7133 3A 18 C0                             ld      a,(SBnKzsgn)
 735+ 7136 CB 7F                                bit     7,a
 736+ 7138 20 04                                jr      nz,.SunBehind
 737+ 713A CD 1C E2     .SunInfront:            call    show_compass_sun_infront
 738+ 713D C9                                   ret
 739+ 713E CD 27 E2     .SunBehind:             call    show_compass_sun_behind
 740+ 7141 C9                                   ret
 741+ 7142
 742+ 7142
 743+ 7142              UpdateCompassPlanet:    MMUSelectPlanet
 743+ 7142 ED 91 56 55 >                     nextreg PlanetMMU,         BankPlanetData
 744+ 7146 CD A2 6F                             call    ScalePlanetPos              ; get as 7 bit signed
 745+ 7149 C5 E5 D5                             push    bc,,hl,,de                  ; save to stack Y, Z, X and copy of X scaled and signed hihg = sign, low = 7 bit value
 746+ 714C 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 747+ 714D 59                                   ld      e,c                         ; .
 748+ 714E ED 30                                mul                                 ; .
 749+ 7150 42 4B                                ld      bc,de                       ; .
 750+ 7152 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 751+ 7153 5D                                   ld      e,l                         ; .
 752+ 7154 ED 30                                mul                                 ; .
 753+ 7156 EB                                   ex      de,hl                       ; .
 754+ 7157 D1           .normaliseZSqr:         pop     de                          ; get saved from stack 2
 755+ 7158 53                                   ld      d,e                         ; de = z ^
 756+ 7159 ED 30                                mul                                 ; .
 757+ 715B 19           .normaliseSqrt:         add     hl,de                       ; hl = x^2 + y^2 + z^2
 758+ 715C 09                                   add     hl,bc
 759+ 715D EB                                   ex      de,hl
 760+ 715E CD 95 92                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 761+ 7161                                      ; if h <> 0 then more difficult
 762+ 7161 55                                   ld      d,l                         ; iyl = q
 763+ 7162 FD 6A                                ld      iyl,d                       ; .
 764+ 7164 E1           .NormaliseX:            pop     hl                          ; hl x scaled
 765+ 7165 7C                                   ld      a,h                         ; c = sign
 766+ 7166 E6 80                                and     SignOnly8Bit                ; .
 767+ 7168 4F                                   ld      c,a                         ; .
 768+ 7169 C5                                   push    bc                          ; save sign to stack
 769+ 716A 7D                                   ld      a,l                         ; a = 8 bit abs z
 770+ 716B CD 5A 9B                             call    AequAdivQmul96ABS              ; e = a /q * 96 (d was already loaded with q)
 771+ 716E 5F                                   ld      e,a                         ; .
 772+ 716F                                      EDiv10Inline                        ; a = e / 10
 772+ 716F 16 00       >                        ld      d,0
 772+ 7171 62 6B       >                        ld      hl,de
 772+ 7173 29          >                        add     hl,hl
 772+ 7174 19          >                        add     hl,de
 772+ 7175 29          >                        add     hl,hl
 772+ 7176 29          >                        add     hl,hl
 772+ 7177 19          >                        add     hl,de
 772+ 7178 29          >                        add     hl,hl
 773+ 7179 7C                                   ld      a,h                         ; .
 774+ 717A C1                                   pop     bc                          ; retrieve sign
 775+ 717B FE 00                                cp      0
 776+ 717D 28 06                                jr      z,.DoneNormX                ; in case we end up with - 0
 777+ 717F CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 778+ 7181 28 02                                jr      z,.DoneNormX
 779+ 7183 ED 44                                neg
 780+ 7185 DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 781+ 7187 FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 782+ 7189 E1                                   pop     hl                          ; hl y scaled
 783+ 718A 7C                                   ld      a,h                         ; c = sign
 784+ 718B E6 80                                and     SignOnly8Bit                ; .
 785+ 718D 4F                                   ld      c,a                         ; .
 786+ 718E C5                                   push    bc                          ; save sign to stack
 787+ 718F 7D                                   ld      a,l                         ; a = 8 bit signed z
 788+ 7190 CD 5A 9B                             call    AequAdivQmul96ABS           ; .
 789+ 7193 5F                                   ld      e,a                         ; a = e / 10
 790+ 7194                                      EDiv10Inline                        ; .
 790+ 7194 16 00       >                        ld      d,0
 790+ 7196 62 6B       >                        ld      hl,de
 790+ 7198 29          >                        add     hl,hl
 790+ 7199 19          >                        add     hl,de
 790+ 719A 29          >                        add     hl,hl
 790+ 719B 29          >                        add     hl,hl
 790+ 719C 19          >                        add     hl,de
 790+ 719D 29          >                        add     hl,hl
 791+ 719E 7C                                   ld      a,h                         ; retrieve sign
 792+ 719F C1                                   pop     bc                          ; retrieve sign
 793+ 71A0 FE 00                                cp      0
 794+ 71A2 28 06                                jr      z,.DoneNormY                 ; in case we end up with - 0
 795+ 71A4 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 796+ 71A6 28 02                                jr      z,.DoneNormY
 797+ 71A8 ED 44                                neg                                 ;
 798+ 71AA 47           .DoneNormY:             ld      b,a                         ; result from Y
 799+ 71AB DD 4C                                ld      c,ixh                       ; x = saved X
 800+ 71AD              .SetSprite:             MMUSelectSpriteBank
 800+ 71AD ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 801+ 71B1 CD 17 E1                             call    compass_station_move
 802+ 71B4 3A 18 C0                             ld      a,(P_Bnkzsgn)
 803+ 71B7 CB 7F                                bit     7,a
 804+ 71B9 20 04                                jr      nz,.PlanetBehind
 805+ 71BB CD 32 E2     .PlanetInfront:         call    show_compass_station_infront
 806+ 71BE C9                                   ret
 807+ 71BF CD 3D E2     .PlanetBehind:          call    show_compass_station_behind
 808+ 71C2 C9                                   ret
 809+ 71C3
 810+ 71C3              UpdatePlanetSun:        MMUSelectPlanet
 810+ 71C3 ED 91 56 55 >                     nextreg PlanetMMU,         BankPlanetData
 811+ 71C7                                      Shift24BitScan  P_Bnkyhi, P_Bnkylo
 811+ 71C7 2A 14 C0    >                        ld      hl,(P_Bnkyhi)
 811+ 71CA 44          >                        ld      b,h
 811+ 71CB 7C          >                        ld      a,h
 811+ 71CC E6 7F       >                        and     SignMask8Bit
 811+ 71CE 67          >                        ld      h,a
 811+ 71CF 3A 13 C0    >                        ld      a,(P_Bnkylo)
 811+ 71D2 CB 27       >                        sla     a
 811+ 71D4 CB 15       >                        rl      l
 811+ 71D6 CB 14       >                        rl      h
 811+ 71D8 CB 27       >                        sla     a
 811+ 71DA CB 15       >                        rl      l
 811+ 71DC CB 14       >                        rl      h
 811+ 71DE CB 27       >                        sla     a
 811+ 71E0 CB 15       >                        rl      l
 811+ 71E2 CB 14       >                        rl      h
 811+ 71E4 CB 27       >                        sla     a
 811+ 71E6 CB 15       >                        rl      l
 811+ 71E8 CB 14       >                        rl      h
 811+ 71EA CB 27       >                        sla     a
 811+ 71EC CB 15       >                        rl      l
 811+ 71EE CB 14       >                        rl      h
 811+ 71F0 CB 27       >                        sla     a
 811+ 71F2 CB 15       >                        rl      l
 811+ 71F4 CB 14       >                        rl      h
 812+ 71F6 3A 12 C0     .IsItInRange:           ld      a,(P_Bnkxsgn)                ; if the high byte is not
 813+ 71F9 21 15 C0                             ld      hl,P_Bnkysgn                 ; a sign only
 814+ 71FC B6                                   or      (hl)                        ; then its too far away
 815+ 71FD 21 18 C0                             ld      hl,P_Bnkzsgn                 ; for the scanner to draw
 816+ 7200 B6                                   or      (hl)                        ; so rely on the compass
 817+ 7201 E6 7F                                and     SignMask8Bit                ;
 818+ 7203 C0                                   ret     nz                          ;
 819+ 7204 2A 16 C0     .ItsInRange:            ld      hl,(P_Bnkzlo)                ; we will get unsigned values
 820+ 7207 ED 5B 10 C0                          ld      de,(P_Bnkxlo)
 821+ 720B ED 4B 13 C0                          ld      bc,(P_Bnkylo)
 822+ 720F 7C                                   ld      a,h
 823+ 7210 B2                                   or      d
 824+ 7211 B0                                   or      b
 825+ 7212 E6 C0                                and     %11000000
 826+ 7214 C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 827+ 7215 3A 12 C0     .MakeX2Compliment:      ld      a,(P_Bnkxsgn)
 828+ 7218 CB 7F                                bit     7,a
 829+ 721A 28 04                                jr      z,.absXHi
 830+ 721C                                      NegD
 830+ 721C 7A          >                    ld      a,d
 830+ 721D ED 44       >                    neg
 830+ 721F 57          >                    ld      d,a
 831+ 7220 7A           .absXHi:                ld      a,d
 832+ 7221 C6 80                                add     ScannerX
 833+ 7223 DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 834+ 7225 CB 3C        .ProcessZCoord:         srl     h
 835+ 7227 CB 3C                                srl     h
 836+ 7229 3A 18 C0     .MakeZ2Compliment:      ld      a,(P_Bnkzsgn)
 837+ 722C CB 7F                                bit     7,a
 838+ 722E 28 04                                jr      z,.absZHi
 839+ 7230                                      NegH
 839+ 7230 7C          >                    ld      a,h
 839+ 7231 ED 44       >                    neg
 839+ 7233 67          >                    ld      h,a
 840+ 7234 3E AB        .absZHi:                ld      a,ScannerY
 841+ 7236 94                                   sub     h
 842+ 7237 FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 843+ 7239 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 844+ 723B 20 0B                                jr      nz,.StickHasLength
 845+ 723D FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 846+ 723F FD 6F                                ld      iyl,a
 847+ 7241                                      MMUSelectLayer2
 847+ 7241 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 848+ 7245 C3 70 72                             jp      .NoStick
 849+ 7248 3A 15 C0     .StickHasLength:        ld      a,(P_Bnkysgn)                ; if b  =  0 then no line
 850+ 724B CB 7F                                bit     7,a
 851+ 724D 28 04                                jr      z,.absYHi
 852+ 724F                                      NegB
 852+ 724F 78          >                    ld      a,b
 852+ 7250 ED 44       >                    neg
 852+ 7252 47          >                    ld      b,a
 853+ 7253 FD 7C        .absYHi:                ld      a,iyh
 854+ 7255 90           .SetStickPos:           sub     b
 855+ 7256                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
 855+ 7256 FE BE       >                        cp      ScannerBottom
 855+ 7258 DA 5D 72    >                        jp		c, .StickOnScreen
 856+ 725B 3E BE                                ld      a,ScannerBottom
 857+ 725D FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
 858+ 725F DD 6F                                ld      ixl,a
 859+ 7261 FD 44                                ld      b,iyh                       ; from row
 860+ 7263 DD 4C                                ld      c,ixh                       ; from col
 861+ 7265 FD 55                                ld      d,iyl                       ; to row
 862+ 7267 1E B4                                ld      e,L2SunScanner
 863+ 7269                                      MMUSelectLayer2
 863+ 7269 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 864+ 726D CD 55 E5                             call    l2_draw_vert_line_to
 865+ 7270 FD 45        .NoStick:               ld      b,iyl                       ; row
 866+ 7272 DD 4C                                ld      c,ixh                       ; col
 867+ 7274 3E FC                                ld      a,L2SunScannerBright
 868+ 7276 CD B6 E2                             call    l2_plot_pixel
 869+ 7279 FD 45                                ld      b,iyl
 870+ 727B DD 4C                                ld      c,ixh
 871+ 727D 0C                                   inc     c
 872+ 727E 3E FC                                ld      a,L2SunScannerBright
 873+ 7280 CD B6 E2                             call    l2_plot_pixel
 874+ 7283 C9                                   ret
 875+ 7284
 876+ 7284              UpdateCompassStation:   MMUSelectShipBankN 0
 876+ 7284 ED 91 57 00 >					 nextreg ShipModelMMU,	    0
 877+ 7288
 878+ 7288 CD EF 6F                             call    ScaleSunPos                 ; get as 7 bit signed
 879+ 728B C5 D5 E5 D5                          push    bc,,de,,hl,,de              ; save to stack Y, Z, X and copy of X scaled and signed hihg = sign, low = 7 bit value
 880+ 728F 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 881+ 7290 59                                   ld      e,c                         ; .
 882+ 7291 ED 30                                mul                                 ; .
 883+ 7293 42 4B                                ld      bc,de                       ; .
 884+ 7295 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 885+ 7296 5D                                   ld      e,l                         ; .
 886+ 7297 ED 30                                mul                                 ; .
 887+ 7299 EB                                   ex      de,hl                       ; .
 888+ 729A D1           .normaliseZSqr:         pop     de                          ; get saved from stack 2
 889+ 729B 53                                   ld      d,e                         ; de = z ^
 890+ 729C ED 30                                mul                                 ; .
 891+ 729E 19           .normaliseSqrt:         add     hl,de                       ; hl = x^2 + y^2 + x^2
 892+ 729F 09                                   add     hl,bc
 893+ 72A0 EB                                   ex      de,hl
 894+ 72A1 CD 95 92                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 895+ 72A4                                      ; if h <> 0 then more difficult
 896+ 72A4 55                                   ld      d,l                         ; iyl = q
 897+ 72A5 FD 6A                                ld      iyl,d                       ; .
 898+ 72A7 E1           .NormaliseX:            pop     hl                          ; hl x scaled
 899+ 72A8 7C                                   ld      a,h                         ; c = sign
 900+ 72A9 E6 80                                and     SignOnly8Bit                ; .
 901+ 72AB 4F                                   ld      c,a                         ; .
 902+ 72AC C5                                   push    bc                          ; save sign to stack
 903+ 72AD 7D                                   ld      a,l                         ; a = 8 bit abs z
 904+ 72AE CD 5A 9B                             call    AequAdivQmul96ABS              ; e = a /q * 96 (d was already loaded with q)
 905+ 72B1 5F                                   ld      e,a                         ; .
 906+ 72B2                                      EDiv10Inline                        ; a = e / 10
 906+ 72B2 16 00       >                        ld      d,0
 906+ 72B4 62 6B       >                        ld      hl,de
 906+ 72B6 29          >                        add     hl,hl
 906+ 72B7 19          >                        add     hl,de
 906+ 72B8 29          >                        add     hl,hl
 906+ 72B9 29          >                        add     hl,hl
 906+ 72BA 19          >                        add     hl,de
 906+ 72BB 29          >                        add     hl,hl
 907+ 72BC 7C                                   ld      a,h                         ; .
 908+ 72BD C1                                   pop     bc                          ; retrieve sign
 909+ 72BE FE 00                                cp      0
 910+ 72C0 28 06                                jr      z,.DoneNormX                 ; in case we end up with - 0
 911+ 72C2 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 912+ 72C4 28 02                                jr      z,.DoneNormX
 913+ 72C6 ED 44                                neg
 914+ 72C8 DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 915+ 72CA FD 55        .NormaliseZ:            ld      d,iyl                       ; d = q
 916+ 72CC E1                                   pop     hl                          ; hl z scaled
 917+ 72CD 7C                                   ld      a,h                         ; c = sign
 918+ 72CE E6 80                                and     SignOnly8Bit                ; .
 919+ 72D0 4F                                   ld      c,a                         ; .
 920+ 72D1 C5                                   push    bc                          ; save sign to stack
 921+ 72D2 7D                                   ld      a,l                         ; e = a /q * 96
 922+ 72D3 CD 5A 9B                             call    AequAdivQmul96ABS              ; .
 923+ 72D6 5F                                   ld      e,a                         ; a = e / 10
 924+ 72D7                                      EDiv10Inline                        ; .
 924+ 72D7 16 00       >                        ld      d,0
 924+ 72D9 62 6B       >                        ld      hl,de
 924+ 72DB 29          >                        add     hl,hl
 924+ 72DC 19          >                        add     hl,de
 924+ 72DD 29          >                        add     hl,hl
 924+ 72DE 29          >                        add     hl,hl
 924+ 72DF 19          >                        add     hl,de
 924+ 72E0 29          >                        add     hl,hl
 925+ 72E1 7C                                   ld      a,h                         ; retrieve sign
 926+ 72E2 C1                                   pop     bc                          ; retrieve sign
 927+ 72E3 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 928+ 72E5 28 02                                jr      z,.DoneNormZ
 929+ 72E7 ED 44                                neg
 930+ 72E9 DD 6F        .DoneNormZ:             ld      ixl,a                       ; .
 931+ 72EB FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 932+ 72ED E1                                   pop     hl                          ; hl y scaled
 933+ 72EE 7C                                   ld      a,h                         ; c = sign
 934+ 72EF E6 80                                and     SignOnly8Bit                ; .
 935+ 72F1 4F                                   ld      c,a                         ; .
 936+ 72F2 C5                                   push    bc                          ; save sign to stack
 937+ 72F3 7D                                   ld      a,l                         ; a = 8 bit signed z
 938+ 72F4 CD 5A 9B                             call    AequAdivQmul96ABS              ; .
 939+ 72F7 5F                                   ld      e,a                         ; a = e / 10
 940+ 72F8                                      EDiv10Inline                        ; .
 940+ 72F8 16 00       >                        ld      d,0
 940+ 72FA 62 6B       >                        ld      hl,de
 940+ 72FC 29          >                        add     hl,hl
 940+ 72FD 19          >                        add     hl,de
 940+ 72FE 29          >                        add     hl,hl
 940+ 72FF 29          >                        add     hl,hl
 940+ 7300 19          >                        add     hl,de
 940+ 7301 29          >                        add     hl,hl
 941+ 7302 7C                                   ld      a,h                         ; retrieve sign
 942+ 7303 C1                                   pop     bc                          ; retrieve sign
 943+ 7304 FE 00                                cp      0
 944+ 7306 28 06                                jr      z,.DoneNormY                ; in case we end up with - 0
 945+ 7308 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 946+ 730A 28 02                                jr      z,.DoneNormY
 947+ 730C ED 44                                neg
 948+ 730E 47           .DoneNormY:             ld      b,a                         ; .
 949+ 730F DD 4C                                ld      c,ixh
 950+ 7311              .SetSprite:             MMUSelectSpriteBank
 950+ 7311 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 951+ 7315 CD 05 E1                             call    compass_sun_move
 952+ 7318 DD 7D                                ld      a,ixl
 953+ 731A CB 7F                                bit     7,a
 954+ 731C 20 04                                jr      nz,.SunBehind
 955+ 731E CD 1C E2     .SunInfront:            call    show_compass_sun_infront
 956+ 7321 C9                                   ret
 957+ 7322 CD 27 E2     .SunBehind:             call    show_compass_sun_behind
 958+ 7325 C9                                   ret
 959+ 7326
 960+ 7326
 961+ 7326              UpdateScannerSun:       MMUSelectSun
 961+ 7326 ED 91 56 54 >                     nextreg SunMMU,            BankSunData
 962+ 732A                                      Shift24BitScan  SBnKyhi, SBnKylo
 962+ 732A 2A 14 C0    >                        ld      hl,(SBnKyhi)
 962+ 732D 44          >                        ld      b,h
 962+ 732E 7C          >                        ld      a,h
 962+ 732F E6 7F       >                        and     SignMask8Bit
 962+ 7331 67          >                        ld      h,a
 962+ 7332 3A 13 C0    >                        ld      a,(SBnKylo)
 962+ 7335 CB 27       >                        sla     a
 962+ 7337 CB 15       >                        rl      l
 962+ 7339 CB 14       >                        rl      h
 962+ 733B CB 27       >                        sla     a
 962+ 733D CB 15       >                        rl      l
 962+ 733F CB 14       >                        rl      h
 962+ 7341 CB 27       >                        sla     a
 962+ 7343 CB 15       >                        rl      l
 962+ 7345 CB 14       >                        rl      h
 962+ 7347 CB 27       >                        sla     a
 962+ 7349 CB 15       >                        rl      l
 962+ 734B CB 14       >                        rl      h
 962+ 734D CB 27       >                        sla     a
 962+ 734F CB 15       >                        rl      l
 962+ 7351 CB 14       >                        rl      h
 962+ 7353 CB 27       >                        sla     a
 962+ 7355 CB 15       >                        rl      l
 962+ 7357 CB 14       >                        rl      h
 963+ 7359 3A 12 C0     .IsItInRange:           ld      a,(SBnKxsgn)                ; if the high byte is not
 964+ 735C 21 15 C0                             ld      hl,SBnKysgn                 ; a sign only
 965+ 735F B6                                   or      (hl)                        ; then its too far away
 966+ 7360 21 18 C0                             ld      hl,SBnKzsgn                 ; for the scanner to draw
 967+ 7363 B6                                   or      (hl)                        ; so rely on the compass
 968+ 7364 E6 7F                                and     SignMask8Bit                ;
 969+ 7366 C0                                   ret     nz                          ;
 970+ 7367 2A 16 C0     .ItsInRange:            ld      hl,(SBnKzlo)                ; we will get unsigned values
 971+ 736A ED 5B 10 C0                          ld      de,(SBnKxlo)
 972+ 736E ED 4B 13 C0                          ld      bc,(SBnKylo)
 973+ 7372 7C                                   ld      a,h
 974+ 7373 B2                                   or      d
 975+ 7374 B0                                   or      b
 976+ 7375 E6 C0                                and     %11000000
 977+ 7377 C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 978+ 7378 3A 12 C0     .MakeX2Compliment:      ld      a,(SBnKxsgn)
 979+ 737B CB 7F                                bit     7,a
 980+ 737D 28 04                                jr      z,.absXHi
 981+ 737F                                      NegD
 981+ 737F 7A          >                    ld      a,d
 981+ 7380 ED 44       >                    neg
 981+ 7382 57          >                    ld      d,a
 982+ 7383 7A           .absXHi:                ld      a,d
 983+ 7384 C6 80                                add     ScannerX
 984+ 7386 DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 985+ 7388 CB 3C        .ProcessZCoord:         srl     h
 986+ 738A CB 3C                                srl     h
 987+ 738C 3A 18 C0     .MakeZ2Compliment:      ld      a,(SBnKzsgn)
 988+ 738F CB 7F                                bit     7,a
 989+ 7391 28 04                                jr      z,.absZHi
 990+ 7393                                      NegH
 990+ 7393 7C          >                    ld      a,h
 990+ 7394 ED 44       >                    neg
 990+ 7396 67          >                    ld      h,a
 991+ 7397 3E AB        .absZHi:                ld      a,ScannerY
 992+ 7399 94                                   sub     h
 993+ 739A FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 994+ 739C CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 995+ 739E 20 0B                                jr      nz,.StickHasLength
 996+ 73A0 FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 997+ 73A2 FD 6F                                ld      iyl,a
 998+ 73A4                                      MMUSelectLayer2
 998+ 73A4 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 999+ 73A8 C3 D3 73                             jp      .NoStick
1000+ 73AB 3A 15 C0     .StickHasLength:        ld      a,(SBnKysgn)                ; if b  =  0 then no line
1001+ 73AE CB 7F                                bit     7,a
1002+ 73B0 28 04                                jr      z,.absYHi
1003+ 73B2                                      NegB
1003+ 73B2 78          >                    ld      a,b
1003+ 73B3 ED 44       >                    neg
1003+ 73B5 47          >                    ld      b,a
1004+ 73B6 FD 7C        .absYHi:                ld      a,iyh
1005+ 73B8 90           .SetStickPos:           sub     b
1006+ 73B9                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
1006+ 73B9 FE BE       >                        cp      ScannerBottom
1006+ 73BB DA C0 73    >                        jp		c, .StickOnScreen
1007+ 73BE 3E BE                                ld      a,ScannerBottom
1008+ 73C0 FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
1009+ 73C2 DD 6F                                ld      ixl,a
1010+ 73C4 FD 44                                ld      b,iyh                       ; from row
1011+ 73C6 DD 4C                                ld      c,ixh                       ; from col
1012+ 73C8 FD 55                                ld      d,iyl                       ; to row
1013+ 73CA 1E B4                                ld      e,L2SunScanner
1014+ 73CC                                      MMUSelectLayer2
1014+ 73CC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1015+ 73D0 CD 55 E5                             call    l2_draw_vert_line_to
1016+ 73D3 FD 45        .NoStick:               ld      b,iyl                       ; row
1017+ 73D5 DD 4C                                ld      c,ixh                       ; col
1018+ 73D7 3E FC                                ld      a,L2SunScannerBright
1019+ 73D9 CD B6 E2                             call    l2_plot_pixel
1020+ 73DC FD 45                                ld      b,iyl
1021+ 73DE DD 4C                                ld      c,ixh
1022+ 73E0 0C                                   inc     c
1023+ 73E1 3E FC                                ld      a,L2SunScannerBright
1024+ 73E3 CD B6 E2                             call    l2_plot_pixel
1025+ 73E6 C9                                   ret
1026+ 73E7
1027+ 73E7              ; This will do a planet update if we are not in space station range
1028+ 73E7              UpdateScannerPlanet:    MMUSelectPlanet
1028+ 73E7 ED 91 56 55 >                     nextreg PlanetMMU,         BankPlanetData
1029+ 73EB                                      Shift24BitScan  P_Bnkyhi, P_Bnkylo
1029+ 73EB 2A 14 C0    >                        ld      hl,(P_Bnkyhi)
1029+ 73EE 44          >                        ld      b,h
1029+ 73EF 7C          >                        ld      a,h
1029+ 73F0 E6 7F       >                        and     SignMask8Bit
1029+ 73F2 67          >                        ld      h,a
1029+ 73F3 3A 13 C0    >                        ld      a,(P_Bnkylo)
1029+ 73F6 CB 27       >                        sla     a
1029+ 73F8 CB 15       >                        rl      l
1029+ 73FA CB 14       >                        rl      h
1029+ 73FC CB 27       >                        sla     a
1029+ 73FE CB 15       >                        rl      l
1029+ 7400 CB 14       >                        rl      h
1029+ 7402 CB 27       >                        sla     a
1029+ 7404 CB 15       >                        rl      l
1029+ 7406 CB 14       >                        rl      h
1029+ 7408 CB 27       >                        sla     a
1029+ 740A CB 15       >                        rl      l
1029+ 740C CB 14       >                        rl      h
1029+ 740E CB 27       >                        sla     a
1029+ 7410 CB 15       >                        rl      l
1029+ 7412 CB 14       >                        rl      h
1029+ 7414 CB 27       >                        sla     a
1029+ 7416 CB 15       >                        rl      l
1029+ 7418 CB 14       >                        rl      h
1030+ 741A 3A 12 C0     .IsItInRange:           ld      a,(P_Bnkxsgn)                ; if the high byte is not
1031+ 741D 21 15 C0                             ld      hl,P_Bnkysgn                 ; a sign only
1032+ 7420 B6                                   or      (hl)                        ; then its too far away
1033+ 7421 21 18 C0                             ld      hl,P_Bnkzsgn                 ; for the scanner to draw
1034+ 7424 B6                                   or      (hl)                        ; so rely on the compass
1035+ 7425 E6 7F                                and     SignMask8Bit                ;
1036+ 7427 C0                                   ret     nz                          ;
1037+ 7428 2A 16 C0     .ItsInRange:            ld      hl,(P_Bnkzlo)                ; we will get unsigned values
1038+ 742B ED 5B 10 C0                          ld      de,(P_Bnkxlo)
1039+ 742F ED 4B 13 C0                          ld      bc,(P_Bnkylo)
1040+ 7433 7C                                   ld      a,h
1041+ 7434 B2                                   or      d
1042+ 7435 B0                                   or      b
1043+ 7436 E6 C0                                and     %11000000
1044+ 7438 C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
1045+ 7439 3A 12 C0     .MakeX2Compliment:      ld      a,(P_Bnkxsgn)
1046+ 743C CB 7F                                bit     7,a
1047+ 743E 28 04                                jr      z,.absXHi
1048+ 7440                                      NegD
1048+ 7440 7A          >                    ld      a,d
1048+ 7441 ED 44       >                    neg
1048+ 7443 57          >                    ld      d,a
1049+ 7444 7A           .absXHi:                ld      a,d
1050+ 7445 C6 80                                add     ScannerX
1051+ 7447 DD 67                                ld      ixh,a                       ; store adjusted X in ixh
1052+ 7449 CB 3C        .ProcessZCoord:         srl     h
1053+ 744B CB 3C                                srl     h
1054+ 744D 3A 18 C0     .MakeZ2Compliment:      ld      a,(P_Bnkzsgn)
1055+ 7450 CB 7F                                bit     7,a
1056+ 7452 28 04                                jr      z,.absZHi
1057+ 7454                                      NegH
1057+ 7454 7C          >                    ld      a,h
1057+ 7455 ED 44       >                    neg
1057+ 7457 67          >                    ld      h,a
1058+ 7458 3E AB        .absZHi:                ld      a,ScannerY
1059+ 745A 94                                   sub     h
1060+ 745B FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
1061+ 745D CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
1062+ 745F 20 0B                                jr      nz,.StickHasLength
1063+ 7461 FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
1064+ 7463 FD 6F                                ld      iyl,a
1065+ 7465                                      MMUSelectLayer2
1065+ 7465 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1066+ 7469 C3 94 74                             jp      .NoStick
1067+ 746C 3A 15 C0     .StickHasLength:        ld      a,(P_Bnkysgn)                ; if b  =  0 then no line
1068+ 746F CB 7F                                bit     7,a
1069+ 7471 28 04                                jr      z,.absYHi
1070+ 7473                                      NegB
1070+ 7473 78          >                    ld      a,b
1070+ 7474 ED 44       >                    neg
1070+ 7476 47          >                    ld      b,a
1071+ 7477 FD 7C        .absYHi:                ld      a,iyh
1072+ 7479 90           .SetStickPos:           sub     b
1073+ 747A                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
1073+ 747A FE BE       >                        cp      ScannerBottom
1073+ 747C DA 81 74    >                        jp		c, .StickOnScreen
1074+ 747F 3E BE                                ld      a,ScannerBottom
1075+ 7481 FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
1076+ 7483 DD 6F                                ld      ixl,a
1077+ 7485 FD 44                                ld      b,iyh                       ; from row
1078+ 7487 DD 4C                                ld      c,ixh                       ; from col
1079+ 7489 FD 55                                ld      d,iyl                       ; to row
1080+ 748B 1E B4                                ld      e,L2SunScanner
1081+ 748D                                      MMUSelectLayer2
1081+ 748D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1082+ 7491 CD 55 E5                             call    l2_draw_vert_line_to
1083+ 7494 FD 45        .NoStick:               ld      b,iyl                       ; row
1084+ 7496 DD 4C                                ld      c,ixh                       ; col
1085+ 7498 3E FC                                ld      a,L2SunScannerBright
1086+ 749A CD B6 E2                             call    l2_plot_pixel
1087+ 749D FD 45                                ld      b,iyl
1088+ 749F DD 4C                                ld      c,ixh
1089+ 74A1 0C                                   inc     c
1090+ 74A2 3E FC                                ld      a,L2SunScannerBright
1091+ 74A4 CD B6 E2                             call    l2_plot_pixel
1092+ 74A7 C9                                   ret
1093+ 74A8
1094+ 74A8
1095+ 74A8              ; As the space station is always ship 0 then we can just use the scanner
1096+ 74A8
1097+ 74A8              ; This will go though all the universe ship data banks and plot, for now we will just work on one bank
1098+ 74A8 3A 52 C0     UpdateScannerShip:      ld      a,(UBnkexplDsp)             ; if bit 4 is clear then ship should not be drawn
1099+ 74AB CB 67                                bit     4,a                         ; .
1100+ 74AD                                      ;DEBUG ret     z                           ; .
1101+ 74AD 3A 0E C4                             ld      a,(ShipTypeAddr)            ; if its a planet or sun, do not display
1102+ 74B0 CB 7F                                bit     7,a
1103+ 74B2 C0                                   ret     nz
1104+ 74B3              ; DEBUG Add in station types later
1105+ 74B3 2A 26 C0     .NotMissile:            ld      hl,(UBnkzlo)
1106+ 74B6 ED 5B 20 C0                          ld      de,(UBnkxlo)
1107+ 74BA ED 4B 23 C0                          ld      bc,(UBnkylo)
1108+ 74BE 7C                                   ld      a,h
1109+ 74BF B2                                   or      d
1110+ 74C0 B0                                   or      b
1111+ 74C1 E6 C0                                and     %11000000
1112+ 74C3 C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
1113+ 74C4 3A 22 C0     .MakeX2Compliment:      ld      a,(UBnkxsgn)
1114+ 74C7 CB 7F                                bit     7,a
1115+ 74C9 28 04                                jr      z,.absXHi
1116+ 74CB                                      NegD
1116+ 74CB 7A          >                    ld      a,d
1116+ 74CC ED 44       >                    neg
1116+ 74CE 57          >                    ld      d,a
1117+ 74CF 7A           .absXHi:                ld      a,d
1118+ 74D0 C6 80                                add     ScannerX
1119+ 74D2 DD 67                                ld      ixh,a                       ; store adjusted X in ixh
1120+ 74D4 CB 3C        .ProcessZCoord:         srl     h
1121+ 74D6 CB 3C                                srl     h
1122+ 74D8 3A 28 C0     .MakeZ2Compliment:      ld      a,(UBnkzsgn)
1123+ 74DB CB 7F                                bit     7,a
1124+ 74DD 28 04                                jr      z,.absZHi
1125+ 74DF                                      NegH
1125+ 74DF 7C          >                    ld      a,h
1125+ 74E0 ED 44       >                    neg
1125+ 74E2 67          >                    ld      h,a
1126+ 74E3 3E AB        .absZHi:                ld      a,ScannerY
1127+ 74E5 94                                   sub     h
1128+ 74E6 FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
1129+ 74E8 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
1130+ 74EA 20 2A                                jr      nz,.StickHasLength
1131+ 74EC FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
1132+ 74EE FD 6F                                ld      iyl,a
1133+ 74F0 DD 7D                                ld      a,ixl
1134+ 74F2                                      GetShipColorBright
1134+ 74F2 21 92 6F    >                        ld      hl,ScannerColourTable
1134+ 74F5 3A 0E C4    >                        ld      a,(ShipTypeAddr)         ; for now to bypass hostile missile
1134+ 74F8 FE 01       >                        cp      1                        ; for now to bypass hostile missile
1134+ 74FA 28 0A       >                        jr      z,.UsingColourTable    ; for now to bypass hostile missile
1134+ 74FC 3A 0F C4    >                        ld      a,(ShipNewBitsAddr)
1134+ 74FF E6 04       >                        and     ShipIsHostile
1134+ 7501 28 03       >                        jr      z,.UsingColourTable
1134+ 7503 21 9A 6F    >.UsingHostileColour:    ld      hl,ScannerColourTableHostile
1134+ 7506 3A 0E C4    >.UsingColourTable:      ld      a,(ShipTypeAddr)
1134+ 7509 CB 27       >                        sla     a                            ; as its byte pairs * 2
1134+ 750B 3C          >                        inc     a
1134+ 750C ED 31       >                        add     hl,a
1134+ 750E 7E          >                        ld      a,(hl)
1135+ 750F                                      MMUSelectLayer2
1135+ 750F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1136+ 7513 C3 5E 75                             jp      .NoStick
1137+ 7516 3A 25 C0     .StickHasLength:        ld      a,(UBnkysgn)                ; if b  =  0 then no line
1138+ 7519 CB 7F                                bit     7,a
1139+ 751B 28 04                                jr      z,.absYHi
1140+ 751D                                      NegB
1140+ 751D 78          >                    ld      a,b
1140+ 751E ED 44       >                    neg
1140+ 7520 47          >                    ld      b,a
1141+ 7521 FD 7C        .absYHi:                ld      a,iyh
1142+ 7523 90           .SetStickPos:           sub     b
1143+ 7524                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
1143+ 7524 FE BE       >                        cp      ScannerBottom
1143+ 7526 DA 2B 75    >                        jp		c, .StickOnScreen
1144+ 7529 3E BE                                ld      a,ScannerBottom
1145+ 752B FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
1146+ 752D                                      GetShipColor
1146+ 752D 21 92 6F    >                        ld      hl,ScannerColourTable
1146+ 7530 3A 0E C4    >                        ld      a,(ShipTypeAddr)         ; for now to bypass hostile missile
1146+ 7533 FE 01       >                        cp      1                        ; for now to bypass hostile missile
1146+ 7535 28 0A       >                        jr      z,.UsingColourTable    ; for now to bypass hostile missile
1146+ 7537 3A 0F C4    >                        ld      a,(ShipNewBitsAddr)
1146+ 753A E6 04       >                        and     ShipIsHostile
1146+ 753C 28 03       >                        jr      z,.UsingColourTable
1146+ 753E 21 9A 6F    >.UsingHostileColour:    ld      hl,ScannerColourTableHostile
1146+ 7541 3A 0E C4    >.UsingColourTable:      ld      a,(ShipTypeAddr)
1146+ 7544 CB 27       >                        sla     a                            ; as its byte pairs * 2
1146+ 7546 ED 31       >                        add     hl,a
1146+ 7548 7E          >                        ld      a,(hl)
1147+ 7549 DD 6F                                ld      ixl,a
1148+ 754B FD 44                                ld      b,iyh                       ; from row
1149+ 754D DD 4C                                ld      c,ixh                       ; from col
1150+ 754F FD 55                                ld      d,iyl                       ; to row
1151+ 7551 DD 5D                                ld      e,ixl                       ; colur will only be green or yellow for now
1152+ 7553 E5                                   push    hl
1153+ 7554                                      MMUSelectLayer2
1153+ 7554 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1154+ 7558 CD 55 E5                             call    l2_draw_vert_line_to
1155+ 755B E1                                   pop     hl
1156+ 755C 23                                   inc     hl
1157+ 755D 7E                                   ld      a,(hl)
1158+ 755E FD 45        .NoStick:               ld      b,iyl                       ; row
1159+ 7560 DD 4C                                ld      c,ixh                       ; col
1160+ 7562 F5                                   push    af
1161+ 7563 CD B6 E2                             call    l2_plot_pixel
1162+ 7566 F1                                   pop     af
1163+ 7567 FD 45                                ld      b,iyl
1164+ 7569 DD 4C                                ld      c,ixh
1165+ 756B 0C                                   inc     c
1166+ 756C CD B6 E2                             call    l2_plot_pixel
1167+ 756F C9                                   ret
1168+ 7570
1169+ 7570
# file closed: ./Views/ConsoleDrawing.asm
 562  7570                          INCLUDE "./Tables/message_queue.asm"
# file opened: ./Tables/message_queue.asm
   1+ 7570
   2+ 7570
   3+ 7570              ResetMessageQueue:      ZeroA
   3+ 7570 AF          >                        xor a
   4+ 7571 32 90 7E                             ld      (MessageCount),a
   5+ 7574 32 91 7E                             ld      (MessageCurrent),a
   6+ 7577 21 94 7E                             ld      hl,MessageQueue
   7+ 757A 11 92 7E                             ld      de,MessageIndex
   8+ 757D 06 05                                ld      b,5
   9+ 757F 7D           .ClearMessageIndexs:    ld      a,l                                 ; Wipe out the indexes to all the data
  10+ 7580 12                                   ld      (de),a                              ;
  11+ 7581 13                                   inc     de                                  ;
  12+ 7582 7C                                   ld      a,h                                 ;
  13+ 7583 12                                   ld      (de),a                              ;
  14+ 7584 13                                   inc     de                                  ;
  15+ 7585 3E 21                                ld      a,MESSAGESIZE                       ;
  16+ 7587 ED 31                                add     hl,a                                ;
  17+ 7589 10 F4                                djnz    .ClearMessageIndexs                 ;
  18+ 758B 21 94 7E     .ClearText:             ld      hl,MessageQueue
  19+ 758E 11 AA 00                             ld      de,(MAXMESSAGES * MESSAGESIZE) + MAXMESSAGES    ; MessageQueue + MessageTimeout
  20+ 7591 3E 00                                ld      a,0
  21+ 7593 CD 04 7E                             call	memfill_dma
  22+ 7596 C9                                   ret
  23+ 7597
  24+ 7597              ; Message to enqeue is a string held at DE that must be terminated in \0
  25+ 7597              ;                                       IYH = timer for message
  26+ 7597 3A 90 7E     EnqueMessage:           ld      a,(MessageCount)                    ; Maximum message count check
  27+ 759A                                      ReturnIfAGTENusng    MAXMESSAGES            ; we do not enque if queue is full
  27+ 759A FE 05       >                        cp    MAXMESSAGES
  27+ 759C D0          >                        ret	 nc
  28+ 759D 3C                                   inc     a
  29+ 759E 32 90 7E                             ld      (MessageCount),a                    ; get ready for next message
  30+ 75A1 4F           .AddMessage:            ld      c,a
  31+ 75A2 3A 91 7E                             ld      a,(MessageCurrent)                  ; a = current message id + count + 1
  32+ 75A5 81                                   add     c                                   ;
  33+ 75A6                                      JumpIfALTNusng MAXMESSAGES, .ReadyToAdd     ; a = a modulus 5 (note we can only hit 5 messages
  33+ 75A6 FE 05       >                        cp      MAXMESSAGES
  33+ 75A8 DA AD 75    >                        jp		c, .ReadyToAdd
  34+ 75AB D6 05        .CircularQueue:         sub     MAXMESSAGES                         ; so only need 1 cycle of modulus
  35+ 75AD 21 39 7F     .ReadyToAdd:            ld      hl,MessageTimeout                   ; write out message display time
  36+ 75B0 ED 31                                add     hl,a                                ; as some may be brief messages
  37+ 75B2 4F                                   ld      c,a                                 ;
  38+ 75B3 FD 7C                                ld      a,iyh                               ;
  39+ 75B5 77                                   ld      (hl),a                              ;
  40+ 75B6 79                                   ld      a,c                                 ; get back index
  41+ 75B7 21 92 7E                             ld      hl,MessageIndex
  42+ 75BA                                      HLEquAddrAtHLPlusA                          ; hl = target location for message
  42+ 75BA CB 27       >                    sla         a
  42+ 75BC ED 31       >                    add         hl,a
  42+ 75BE 7E          >                    ld          a,(hl)
  42+ 75BF 23          >                    inc         hl
  42+ 75C0 66          >                    ld          h,(hl)
  42+ 75C1 6F          >                    ld          l,a
  43+ 75C2 EB                                   ex      de,hl                               ; de = destination, hl = message
  44+ 75C3                                      ldCopyTextAtHLtoDE                          ; copy over text as we have done the rest
  44+ 75C3 7E          >.CopyLoop:              ld      a,(hl)
  44+ 75C4 12          >                        ld      (de),a
  44+ 75C5 FE 00       >                        cp      0
  44+ 75C7 CA CE 75    >                        jp      z,.DoneCopy
  44+ 75CA 23          >                        inc     hl
  44+ 75CB 13          >                        inc     de
  44+ 75CC 18 F5       >                        jr      .CopyLoop
  44+ 75CE             >.DoneCopy:
  45+ 75CE C9                                   ret
  46+ 75CF
  47+ 75CF 3A 91 7E     UpdateMessageTimer:     ld      a,(MessageCurrent)
  48+ 75D2 21 39 7F                             ld      hl,MessageTimeout
  49+ 75D5 ED 31                                add     hl,a
  50+ 75D7 7E                                   ld      a,(hl)
  51+ 75D8 3D                                   dec     a
  52+ 75D9 28 02                                jr      z,.UpdateQueue
  53+ 75DB 77           .UpdateTimer            ld      (hl),a
  54+ 75DC C9                                   ret
  55+ 75DD 77           .UpdateQueue:           ld      (hl),a
  56+ 75DE 21 90 7E                             ld      hl,MessageCount
  57+ 75E1 35                                   dec     (hl)
  58+ 75E2 3A 91 7E                             ld      a,(MessageCurrent)
  59+ 75E5 23                                   inc     hl
  60+ 75E6                                      JumpIfALTNusng MAXMESSAGES, .ReadyToUpdate
  60+ 75E6 FE 05       >                        cp      MAXMESSAGES
  60+ 75E8 DA EC 75    >                        jp		c, .ReadyToUpdate
  61+ 75EB              .CircularQueue:         ZeroA
  61+ 75EB AF          >                        xor a
  62+ 75EC 32 91 7E     .ReadyToUpdate          ld      (MessageCurrent),a
  63+ 75EF C9                                   ret
  64+ 75F0
  65+ 75F0 3A 90 7E     DisplayCurrentMessage:  ld      a,(MessageCount)
  66+ 75F3                                      ReturnIfAIsZero
  66+ 75F3 A7          >                        and     a
  66+ 75F4 C8          >                        ret     z
  67+ 75F5 3A 91 7E                             ld      a,(MessageCurrent)
  68+ 75F8 21 92 7E                             ld      hl,MessageIndex
  69+ 75FB                                      HLEquAddrAtHLPlusA
  69+ 75FB CB 27       >                    sla         a
  69+ 75FD ED 31       >                    add         hl,a
  69+ 75FF 7E          >                    ld          a,(hl)
  69+ 7600 23          >                    inc         hl
  69+ 7601 66          >                    ld          h,(hl)
  69+ 7602 6F          >                    ld          l,a
  70+ 7603                                      MMUSelectLayer1
  70+ 7603 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  71+ 7607 11 01 00                             ld      de,MESSAGELINE
  72+ 760A CD 24 E1                             call    l1_print_at_wrap
  73+ 760D C9                                   ret
  74+ 760E
  75+ 760E              HyperSpaceMessage:      MMUSelectLayer1
  75+ 760E ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  76+ 7612 11 D4 67     .DisplayHyperCountDown: ld      de,Hyp_to
  77+ 7615 21 7C 8F                             ld      hl,name_expanded
  78+ 7618                                      ldCopyTextAtHLtoDE
  78+ 7618 7E          >.CopyLoop:              ld      a,(hl)
  78+ 7619 12          >                        ld      (de),a
  78+ 761A FE 00       >                        cp      0
  78+ 761C CA 23 76    >                        jp      z,.DoneCopy
  78+ 761F 23          >                        inc     hl
  78+ 7620 13          >                        inc     de
  78+ 7621 18 F5       >                        jr      .CopyLoop
  78+ 7623             >.DoneCopy:
  79+ 7623 AF           .DoneName:              xor     a
  80+ 7624 12                                   ld      (de),a
  81+ 7625 32 F0 67                             ld      (Hyp_message+31),a      ; max out at 32 characters
  82+ 7628 21 D1 67     .CentreJustify:         ld      hl,Hyp_message
  83+ 762B                                      HalfLengthHL
  83+ 762B 06 00       >                        ld      b,0
  83+ 762D 7E          >.CountLenLoop:          ld      a,(hl)
  83+ 762E FE 00       >                        cp      0
  83+ 7630 28 04       >                        jr      z,.DoneCount
  83+ 7632 04          >                        inc     b
  83+ 7633 23          >                        inc     hl
  83+ 7634 18 F7       >                        jr      .CountLenLoop
  83+ 7636 3E 20       >.DoneCount:             ld      a,32
  83+ 7638 90          >                        sub     b
  83+ 7639 CB 2F       >                        sra     a
  84+ 763B 21 0B 68                             ld      hl,Hyp_centeredTarget
  85+ 763E                                      ldClearTextLoop 32
  85+ 763E 47          >                        ld      b,a
  85+ 763F 3E 20       >                        ld      a,32
  85+ 7641 77          >.ClearLoop:             ld      (hl),a
  85+ 7642 23          >                        inc     hl
  85+ 7643 10 FC       >                        djnz    .ClearLoop
  86+ 7645 EB                                   ex      de,hl
  87+ 7646 21 D1 67                             ld      hl,Hyp_message
  88+ 7649                                      ldCopyTextAtHLtoDE
  88+ 7649 7E          >.CopyLoop:              ld      a,(hl)
  88+ 764A 12          >                        ld      (de),a
  88+ 764B FE 00       >                        cp      0
  88+ 764D CA 54 76    >                        jp      z,.DoneCopy
  88+ 7650 23          >                        inc     hl
  88+ 7651 13          >                        inc     de
  88+ 7652 18 F5       >                        jr      .CopyLoop
  88+ 7654             >.DoneCopy:
  89+ 7654                                      ZeroA
  89+ 7654 AF          >                        xor a
  90+ 7655 32 2B 68                             ld      (Hyp_centeredEol),a
  91+ 7658 21 07 68                             ld      hl,Hyp_counter           ; clear counter digits
  92+ 765B 3E 20                                ld      a,32                     ; clear counter digits
  93+ 765D 77                                   ld      (hl),a                   ; clear counter digits
  94+ 765E 23                                   inc     hl                       ; clear counter digits
  95+ 765F 77                                   ld      (hl),a                   ; clear counter digits
  96+ 7660 23                                   inc     hl                       ; clear counter digits
  97+ 7661 77                                   ld      (hl),a                   ; clear counter digits
  98+ 7662 CD AD 67                             call    UpdateCountdownNumber
  99+ 7665 21 FE 67                             ld      hl,Hyp_charging
 100+ 7668                                      HalfLengthHL
 100+ 7668 06 00       >                        ld      b,0
 100+ 766A 7E          >.CountLenLoop:          ld      a,(hl)
 100+ 766B FE 00       >                        cp      0
 100+ 766D 28 04       >                        jr      z,.DoneCount
 100+ 766F 04          >                        inc     b
 100+ 7670 23          >                        inc     hl
 100+ 7671 18 F7       >                        jr      .CountLenLoop
 100+ 7673 3E 20       >.DoneCount:             ld      a,32
 100+ 7675 90          >                        sub     b
 100+ 7676 CB 2F       >                        sra     a
 101+ 7678 21 4C 68                             ld      hl,Hyp_centeredCharging
 102+ 767B                                      ldClearTextLoop 32
 102+ 767B 47          >                        ld      b,a
 102+ 767C 3E 20       >                        ld      a,32
 102+ 767E 77          >.ClearLoop:             ld      (hl),a
 102+ 767F 23          >                        inc     hl
 102+ 7680 10 FC       >                        djnz    .ClearLoop
 103+ 7682 EB                                   ex      de,hl
 104+ 7683 21 FE 67                             ld      hl,Hyp_charging
 105+ 7686                                      ldCopyTextAtHLtoDE
 105+ 7686 7E          >.CopyLoop:              ld      a,(hl)
 105+ 7687 12          >                        ld      (de),a
 105+ 7688 FE 00       >                        cp      0
 105+ 768A CA 91 76    >                        jp      z,.DoneCopy
 105+ 768D 23          >                        inc     hl
 105+ 768E 13          >                        inc     de
 105+ 768F 18 F5       >                        jr      .CopyLoop
 105+ 7691             >.DoneCopy:
 106+ 7691 AF                                   xor     a
 107+ 7692 32 6C 68                             ld      (Hyp_centeredEol2),a
 108+ 7695 2A 39 81     .UpdateHyperCountdown:  ld      hl,(InnerHyperCount)
 109+ 7698 2D                                   dec     l
 110+ 7699 20 26                                jr      nz,.decHyperInnerOnly
 111+ 769B 25                                   dec     h
 112+ 769C FA C5 76                             jp      m,.HyperCountDone
 113+ 769F 2E 0B        .resetHyperInner:       ld      l,$0B
 114+ 76A1 E5                                   push    hl
 115+ 76A2 16 0C                                ld      d,12
 116+ 76A4 3E 06                                ld      a,L1ColourPaperBlack | L1ColourInkYellow
 117+ 76A6 CD 9A E0                             call    l1_attr_cls_2DlinesA
 118+ 76A9 16 60                                ld      d,12 * 8
 119+ 76AB CD 83 E0                             call    l1_cls_2_lines_d
 120+ 76AE 11 00 60                             ld      de,$6000
 121+ 76B1 21 0B 68                             ld      hl,Hyp_centeredTarget
 122+ 76B4 CD D7 E0                             call    l1_print_at
 123+ 76B7 11 00 68                             ld      de,$6800
 124+ 76BA 21 4C 68                             ld      hl,Hyp_centeredCharging
 125+ 76BD CD D7 E0                             call    l1_print_at
 126+ 76C0 E1                                   pop     hl
 127+ 76C1 22 39 81     .decHyperInnerOnly:     ld      (InnerHyperCount),hl
 128+ 76C4 C9                                   ret
 129+ 76C5 21 00 00     .HyperCountDone:        ld      hl,0
 130+ 76C8 22 39 81                             ld      (InnerHyperCount),hl
 131+ 76CB 16 0C                                ld      d,12
 132+ 76CD 3E 00                                ld      a,L1ColourPaperBlack | L1ColourInkBlack
 133+ 76CF CD 9A E0                             call    l1_attr_cls_2DlinesA
 134+ 76D2 16 60                                ld      d,12 * 8
 135+ 76D4 CD 83 E0                             call    l1_cls_2_lines_d
 136+ 76D7                                      ForceTransition ScreenHyperspace                            ; transition to hyperspace
 136+ 76D7 3E 0E       >                        ld      a,ScreenHyperspace
 136+ 76D9 32 8C 6A    >                        ld      (ScreenTransitionForced), a
 137+ 76DC C9                                   ret
 138+ 76DD
# file closed: ./Tables/message_queue.asm
 563  76DD                          INCLUDE "./Tables/LaserStatsTable.asm"
# file opened: ./Tables/LaserStatsTable.asm
   1+ 76DD              ; LaserTypeTable
   2+ 76DD              ; laser type = id of laser
   3+ 76DD              ; laser pulse pause = time before next pulse
   4+ 76DD              ; laser pulse duration = time laser is on per shot
   5+ 76DD              ; laser damage output
   6+ 76DD              ;
   7+ 76DD              ; LaserType
   8+ 76DD              ; LaserPulseRate                          ; how many pulses can be fired before long pause
   9+ 76DD              ; LaserPulseOnTime                        ; cycles laser is on for
  10+ 76DD              ; LaserPulseOffTime                       ; cycles laser is off for
  11+ 76DD              ; LaserPulseRest                          ; time before pulse count resets to 0 (i.e cooldown)
  12+ 76DD              ; LaserDamageOutput                       ; amount of damage for a laser hit
  13+ 76DD              ; LaserEnergyDrain                        ; amount of energy drained by cycle
  14+ 76DD              ; LaserHeat                               ; amount of heat generated
  15+ 76DD              ; LaserDurability                         ; probabability out of 255 that a hit on unshielded will add random amount of damage
  16+ 76DD              ; LaserDurabilityAmount                   ; max amount of damagage can be sustained in one damage hit
  17+ 76DD              ; LaserInMarkets                          ; can this laser be purchased 0 = yes 1 = no
  18+ 76DD              ; LaserTechLevel                          ; minimum tech level system to buy from
  19+ 76DD              ;
  20+ 76DD              LaserStatsTableWidth    EQU 12
  21+ 76DD              ;                           0    1    2    3    4    5    6    7    8    9   10   11
  22+ 76DD              ;                          Typ  Rate On   Off  Rst  Dam  Drn  Het  Dur  DAt  Mrk  Tek
  23+ 76DD 00 02 05 20  LaserStatsTable:        DB $00, $02, $05, $20, $40, $03, $10, $02, $20 ,$10 ,$00, $00; basic laser
  23+ 76E1 40 03 10 02
  23+ 76E5 20 10 00 00
  24+ 76E9 01 01 08 08                          DB $01, $01, $08, $08, $20, $03, $10, $08, $20 ,$10 ,$00, $01; pulse laser
  24+ 76ED 20 03 10 08
  24+ 76F1 20 10 00 01
  25+ 76F5 02 03 06 06                          DB $02, $03, $06, $06, $3A, $03, $05, $02, $20 ,$10 ,$00, $02; burst laser TODO THIS ONE IS ODD
  25+ 76F9 3A 03 05 02
  25+ 76FD 20 10 00 02
  26+ 7701 03 01 05 05                          DB $03, $01, $05, $05, $01, $02, $04, $05, $30 ,$10 ,$00, $03; Gatling laser
  26+ 7705 01 02 04 05
  26+ 7709 30 10 00 03
  27+ 770D 04 01 01 00                          DB $04, $01, $01, $00, $00, $03, $03, $10, $20 ,$10 ,$00, $04; beam ; DOES NOT WORK
  27+ 7711 00 03 03 10
  27+ 7715 20 10 00 04
  28+ 7719 05 01 20 30                          DB $05, $01, $20, $30, $60, $03, $02, $02, $20 ,$10 ,$00, $05; mining
  28+ 771D 60 03 02 02
  28+ 7721 20 10 00 05
  29+ 7725 06 00 01 00                          DB $06, $00, $01, $00, $06, $05, $05, $05, $10 ,$10 ,$00, $08; military beam DOES NOT WORK
  29+ 7729 06 05 05 05
  29+ 772D 10 10 00 08
  30+ 7731 07 01 01 02                          DB $07, $01, $01, $02, $20, $22, $01, $30, $30 ,$11 ,$01, $10; thargoid
  30+ 7735 20 22 01 30
  30+ 7739 30 11 01 10
  31+ 773D 08 01 05 10                          DB $08, $01, $05, $10, $80, $70, $02, $03, $60 ,$11 ,$01, $10; Starkiller
  31+ 7741 80 70 02 03
  31+ 7745 60 11 01 10
  32+ 7749
  33+ 7749
  34+ 7749
  35+ 7749
  36+ 7749
  37+ 7749
  38+ 7749
# file closed: ./Tables/LaserStatsTable.asm
 564  7749                          INCLUDE "./Tables/ShipClassTable.asm"
# file opened: ./Tables/ShipClassTable.asm
   1+ 7749                      DISPLAY "TODO : Can we move all tables into MMU Zero?"
   2+ 7749              ; Note when selecting its skewed by rank which ads a filter so bigger ships should be later in the table
   3+ 7749              ; More optimal will be to order all the ships and then have an entry point and length of tablea
   4+ 7749
   5+ 7749              ; Each ship type table is constructed as follows
   6+ 7749              ; Header - nbr of ships
   7+ 7749              ; table of min rank
   8+ 7749              ; table of ship ids
   9+ 7749              ; note unless "SelectSpawnType" is changed we can't put this in location $0000 as it doesn't check L in HL for speed (thsi could be done though)
  10+ 7749
  11+ 7749              ; we may nneed to rebuidl these tables for cp instruction so its max rank not min
  12+ 7749              ; Coding limit for simplicity, each table has 15 ships in it
  13+ 7749 00 00 01 01  ShipPirateTableARank:    DB RankingEQHarmless, RankingEQHarmless, RankingEQMostly,   RankingEQMostly,     RankingEQPoor,     RankingEQAverage,   RankingEQDeadly,    RankingEQDeadly
  13+ 774D 02 03 07 07
  14+ 7751 23 00 02 0B  ShipPirateTableA:        DB ShipID_Sidewinder, ShipID_Adder,      ShipID_Asp_Mk_2,   ShipID_Cobra_Mk_3_P, ShipID_Boulder,    ShipID_Bushmaster,  ShipID_Python_P,    ShipID_Anaconda
  14+ 7755 05 07 1F 01
  15+ 7759
  16+ 7759 00 01 03 07  ShipPirateTableBRank:    DB RankingEQHarmless, RankingEQMostly,   RankingEQAverage,  RankingEQDeadly,     RankingEQDeadly,   RankingEQAbove,     RankingEQCompetent, RankingEQCompetent
  16+ 775D 07 04 05 05
  17+ 7761 08 2A 2B 1F  ShipPirateTableB:        DB ShipID_Chameleon,  ShipID_Worm,       ShipID_Rattler,    ShipID_Python_P,     ShipID_Anaconda,   ShipID_Bushmaster,  ShipID_Python_P,    ShipID_Anaconda
  17+ 7765 01 07 1F 01
  18+ 7769
  19+ 7769 00 00 00 00  ShipBodiesTableARank:    DB RankingEQHarmless, RankingEQHarmless, RankingEQHarmless, RankingEQHarmless,   RankingEQHarmless, RankingEQHarmless,  RankingEQHarmless,  RankingEQDangerous
  19+ 776D 00 00 00 06
  20+ 7771 06 06 06 06  ShipBodiesTableA:        DB ShipID_Asteroid,   ShipID_Asteroid,   ShipID_Asteroid,   ShipID_Asteroid,     ShipID_Asteroid,   ShipID_Asteroid,    ShipID_Asteroid,    ShipID_Rock_Hermit
  20+ 7775 06 06 06 20
  21+ 7779
  22+ 7779 00 00 00 01  ShipNonTraderTableARank: DB RankingEQHarmless, RankingEQHarmless, RankingEQHarmless, RankingEQMostly,     RankingEQPoor,     RankingEQAverage,   RankingEQAverage,   RankingEQCompetent
  22+ 777D 02 03 03 05
  23+ 7781 00 23 00 18  ShipNonTraderTableA:     DB ShipID_Adder,      ShipID_Sidewinder, ShipID_Adder,      ShipID_Mamba,        ShipID_Krait,      ShipID_Gecko,       ShipID_Python,      ShipID_Anaconda
  23+ 7785 16 13 1E 01
  24+ 7789
  25+ 7789 00 00 00 00  ShipCopTableARank:       DB RankingEQHarmless, RankingEQHarmless, RankingEQHarmless, RankingEQHarmless,   RankingEQHarmless, RankingEQHarmless,  RankingEQAverage,   RankingEQCompetent
  25+ 778D 00 00 03 05
  26+ 7791 29 29 29 29  ShipCopTableA:           DB ShipID_Viper,      ShipID_Viper,      ShipID_Viper,      ShipID_Viper,        ShipID_Viper,      ShipID_Viper,       ShipID_Python,      ShipID_Anaconda
  26+ 7795 29 29 1E 01
  27+ 7799
  28+ 7799 00 01 02 03  ShipHunterTableRank:     DB RankingEQHarmless, RankingEQMostly,   RankingEQPoor,     RankingEQAverage,    RankingEQAbove,    RankingEQCompetent, RankingEQCompetent, RankingEQCompetent
  28+ 779D 04 05 05 05
  29+ 77A1 23 00 03 1E  ShipHunterTableA:        DB ShipID_Sidewinder, ShipID_Adder,      ShipID_Boa,        ShipID_Python,       ShipID_Krait,      ShipID_Fer_De_Lance,ShipID_Mamba,       ShipID_Cougar
  29+ 77A5 16 12 18 0E
  30+ 77A9
  31+ 77A9 00 05 05 06  ShipHunterTableBRank:    DB RankingEQHarmless, RankingEQCompetent,RankingEQCompetent,RankingEQDangerous,  RankingEQDangerous,RankingEQDangerous, RankingEQDeadly,    RankingEQDeadly
  31+ 77AD 06 06 07 07
  32+ 77B1 23 00 15 1E  ShipHunterTableB:        DB ShipID_Sidewinder, ShipID_Adder,      ShipID_Iguana,     ShipID_Python,       ShipID_Dragon,     ShipID_Gecko,       ShipID_Mamba,       ShipID_Anaconda
  32+ 77B5 10 13 18 01
  33+ 77B9
  34+ 77B9 00 05 06 06  ShipHunterTableCRank:    DB RankingEQHarmless, RankingEQCompetent,RankingEQDangerous,RankingEQDangerous,  RankingEQDeadly,   RankingEQElite,     RankingEQSkollob,   RankingEQNutter
  34+ 77BD 07 08 09 0A
  35+ 77C1 00 1A 1B 10  ShipHunterTableC:        DB ShipID_Adder,      ShipID_Monitor,    ShipID_Moray,      ShipID_Dragon,       ShipID_Gecko,      ShipID_Ghavial,     ShipID_Ophidian,    ShipID_Thargoid
  35+ 77C5 13 14 1C 26
  36+ 77C9
  37+ 77C9 00 00 00 00  ShipJunkTableRankA:      DB RankingEQHarmless, RankingEQHarmless, RankingEQHarmless, RankingEQHarmless,   RankingEQHarmless, RankingEQAverage,   RankingEQAbove,     RankingEQCompetent
  37+ 77CD 00 03 04 05
  38+ 77D1 06 06 06 1D  ShipJunkTableA:          DB ShipID_Asteroid,   ShipID_Asteroid,   ShipID_Asteroid,   ShipID_Plate,        ShipID_CargoType5, ShipID_Splinter,    ShipID_Escape_Pod,  ShipID_Rock_Hermit
  38+ 77D5 04 24 11 20
  39+ 77D9
  40+ 77D9              ShipSuperstructureTableA
  41+ 77D9
  42+ 77D9
  43+ 77D9              ; This is determined by system algorithm so there is no rank factor
  44+ 77D9 0D           MasterStations:         DB ShipID_Coriolis
  45+ 77DA 0F                                   DB ShipID_Dodo
  46+ 77DB
  47+ 77DB 19           ShipMissileTable        DB  ShipID_Missile
  48+ 77DC              ShipMissileTableSize    EQU $ - ShipMissileTable
  49+ 77DC
  50+ 77DC
  51+ 77DC
  52+ 77DC              ;; clean up below or delte
  53+ 77DC              ;ShipPirateTable:
  54+ 77DC              ;ShipPackList:           DB  ShipID_Sidewinder, ShipID_Mamba, ShipID_Krait, ShipID_Adder, ShipID_Gecko, ShipID_Cobra_Mk_1, ShipID_Worm, ShipID_Cobra_Mk_3_P
  55+ 77DC              ;ShipPackTableSize       EQU $ - ShipPackList
  56+ 77DC              ;ShipHunterTable         DB  ShipID_Cobra_Mk_3_P, ShipID_Asp_Mk_2, ShipID_Python_P, ShipID_Fer_De_Lance
  57+ 77DC              ;ShipHunterTableSize     EQU $ - ShipHunterTable
  58+ 77DC              ;
  59+ 77DC              ;MasterShipTable:
  60+ 77DC              ;MasterStations:         DB ShipID_Coriolis
  61+ 77DC              ;                        DB ShipID_Dodo
  62+ 77DC              ;
  63+ 77DC              ;
  64+ 77DC              ;
  65+ 77DC              ;MasterJunk:             DB ShipID_Asteroid
  66+ 77DC              ;                        DB ShipID_Plate
  67+ 77DC              ;                        DB ShipID_CargoType5
  68+ 77DC              ;                        DB ShipID_Splinter
  69+ 77DC              ;                        DB ShipID_Escape_Pod
  70+ 77DC              ;                        DB ShipID_Rock_Hermit
  71+ 77DC              ;MasterSuperstructure:
  72+ 77DC              ;MasterMissile:          DB ShipID_Missile
  73+ 77DC
  74+ 77DC
  75+ 77DC
  76+ 77DC
  77+ 77DC
  78+ 77DC 26           MasterThargoid:         DB ShipID_Thargoid
  79+ 77DD 27                                   DB ShipID_Thargon
  80+ 77DE
  81+ 77DE 0C           MasterMission:          DB ShipID_Constrictor
  82+ 77DF
  83+ 77DF
  84+ 77DF
  85+ 77DF
  86+ 77DF
  87+ 77DF 17                                   DB ShipID_Logo
  88+ 77E0 25                                   DB ShipID_TestVector
  89+ 77E1
# file closed: ./Tables/ShipClassTable.asm
 565  77E1
 566  77E1 AF           SeedGalaxy0:            xor     a
 567  77E2                                      MMUSelectGalaxyA
 567  77E2 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 568  77E5 DD 21 16 E0                          ld      ix,galaxy_data
 569  77E9 AF                                   xor		a
 570  77EA 32 76 7F                             ld		(XSAV),a
 571  77ED CD 5D 85                             call    copy_galaxy_to_system
 572  77F0 DD E5        SeedGalaxy0Loop:        push    ix
 573  77F2 D1                                   pop     de
 574  77F3 21 E9 7F                             ld      hl,SystemSeed
 575  77F6 CD 63 85                             call    copy_seed
 576  77F9 DD E5                                push    ix
 577  77FB E1                                   pop     hl
 578  77FC ED 34 08 00                          add     hl,8
 579  7800 E5                                   push    hl
 580  7801 DD E1                                pop     ix
 581  7803 CD 98 85                             call    next_system_seed
 582  7806 3A 76 7F                             ld		a,(XSAV)
 583  7809 3D                                   dec		a
 584  780A FE 00                                cp		0
 585  780C C8                                   ret		z
 586  780D 32 76 7F                             ld		(XSAV),a
 587  7810 20 DE                                jr      nz,SeedGalaxy0Loop
 588  7812 C9                                   ret
 589  7813
 590  7813
 591  7813
 592  7813
 593  7813                  ;include "./ModelRender/testdrawing.asm"
 594  7813                  IFDEF SKIPATTRACT
 595  7813 ~                    DISPLAY "NOT LOADING ATTRACT MODE CODE"
 596  7813                  ELSE
 597  7813                      include "./Menus/AttractMode.asm"
# file opened: ./Menus/AttractMode.asm
   1+ 7813              AttractDuration            EQU $00F0
   2+ 7813              AttractCounterStart        EQU $80
   3+ 7813 F0 00        AttractTimer:              DW      AttractDuration
   4+ 7815 80           AttractCounter:            DB      AttractCounterStart
   5+ 7816
   6+ 7816 3D 08        Attract_boiler_text		DW $083D
   7+ 7818
   8+ 7818
   9+ 7818 4C 6F 61 64  ATTR_LoadCommander      DB "Load Commander (Y/N)",0
   9+ 781C 20 43 6F 6D
   9+ 7820 6D 61 6E 64
   9+ 7824 65 72 20 28
   9+ 7828 59 2F 4E 29
   9+ 782C 00
  10+ 782D
  11+ 782D FF           LocalXCounter           DB $FF
  12+ 782E FF           LocalZCounter           DB $FF
  13+ 782F 00           LastInterrupt           DB 0
  14+ 7830
  15+ 7830 CD 0A 85     RandomXCounter:         call    doRandom
  16+ 7833 C0                                   ret     nz
  17+ 7834 3A 2D 78                             ld      a,(LocalXCounter)
  18+ 7837 EE 80                                xor     $80
  19+ 7839 32 2D 78                             ld      (LocalXCounter),a
  20+ 783C C9                                   ret
  21+ 783D
  22+ 783D CD 0A 85     RandomYCounter:         call    doRandom
  23+ 7840 C0                                   ret     nz
  24+ 7841                                      ;ReturnIfALTNusng 254
  25+ 7841 3A 2E 78                             ld      a,(LocalZCounter)
  26+ 7844 EE 80                                xor     $80
  27+ 7846 32 2E 78                             ld      (LocalZCounter),a
  28+ 7849 C9                                   ret
  29+ 784A
  30+ 784A
  31+ 784A              AttractModeInit:        MMUSelectLayer1
  31+ 784A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  32+ 784E CD 8F E0                             call	l1_cls
  33+ 7851 3E 07                                ld		a,7
  34+ 7853 CD AA E0                             call	l1_attr_cls_to_a
  35+ 7856 1E FF                                ld      e,$FF
  36+ 7858 ED 5B 16 78                          ld      de,(Attract_boiler_text)
  37+ 785C 21 18 78                             ld      hl,ATTR_LoadCommander
  38+ 785F CD D7 E0                             call    l1_print_at
  39+ 7862                                      MMUSelectSpriteBank
  39+ 7862 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  40+ 7866 CD 6E E5                             call        sprite_cls_cursors
  41+ 7869              .ClearLayer2:           MMUSelectLayer2
  41+ 7869 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  42+ 786D CD 04 E0                             call    asm_l2_double_buffer_on
  43+ 7870 CD 0E E2                             call    l2_cls
  44+ 7873 CD 97 E2                             call    l2_flip_buffers
  45+ 7876 CD 0E E2                             call    l2_cls
  46+ 7879                                      MMUSelectConsoleBank
  46+ 7879 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
  47+ 787D 21 00 50     .LoadConsole:           ld          hl,ScreenL1Bottom       ; now the pointers are in UBnk its easy to read
  48+ 7880 11 00 E0                             ld          de,ConsoleImageData
  49+ 7883 01 00 08                             ld          bc, ScreenL1BottomLen
  50+ 7886 CD 2A 7E                             call        memcopy_dma
  51+ 7889 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in UBnk its easy to read
  52+ 788C 11 00 E8                             ld          de,ConsoleAttributes
  53+ 788F 01 00 01                             ld          bc, ScreenL1AttrBtmLen
  54+ 7892 CD 2A 7E                             call        memcopy_dma
  55+ 7895 3A 6F 7F                             ld          a,(InterruptCounter)
  56+ 7898 32 2F 78                             ld          (LastInterrupt),a
  57+ 789B CD 50 79                             call        SelectARandomShip
  58+ 789E C9                                   ret
  59+ 789F
  60+ 789F
  61+ 789F              ;.StartShip:             ld          a,(InterruptCounter)
  62+ 789F              ;                        ld          hl,LastInterrupt
  63+ 789F              ;                        cp          (hl)
  64+ 789F              ;                        jp          z,.StartShip            ; we only refresh once per interupt
  65+ 789F              ;                        ld          (hl),a
  66+ 789F
  67+ 789F              AttractModeMain:        MMUSelectKeyboard
  67+ 789F ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
  68+ 78A3 CD 03 E1                             call    scan_keyboard
  69+ 78A6 3E 50                                ld      a,c_Pressed_Yes
  70+ 78A8                                      MMUSelectKeyboard
  70+ 78A8 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
  71+ 78AC CD 95 E1                             call    is_key_up_state
  72+ 78AF 20 0E                                jr      nz,.YPressed
  73+ 78B1 3E 52                                ld      a,c_Pressed_No
  74+ 78B3                                      MMUSelectKeyboard
  74+ 78B3 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
  75+ 78B7 CD 95 E1                             call    is_key_up_state
  76+ 78BA 20 06                                jr      nz,.NPressed
  77+ 78BC C3 9F 78                             jp      AttractModeMain
  78+ 78BF 3E 00        .YPressed:              ld      a,0
  79+ 78C1 C9                                   ret
  80+ 78C2 3E FF        .NPressed:              ld      a,$FF
  81+ 78C4 C9                                   ret
  82+ 78C5
  83+ 78C5              ; alternate interrupts, one clears back buffer, one processes ship, one draws ship
  84+ 78C5 00           AttractStep             DB      0
  85+ 78C6
  86+ 78C6 2A 13 78     AttractModeUpdate:      ld      hl,(AttractTimer)
  87+ 78C9 2B                                   dec     hl
  88+ 78CA 22 13 78                             ld      (AttractTimer),hl
  89+ 78CD 7C                                   ld      a,h
  90+ 78CE B5                                   or      l
  91+ 78CF C2 D6 78                             jp      nz,.DrawShip
  92+ 78D2 CD 50 79                             call    SelectARandomShip
  93+ 78D5 C9                                   ret
  94+ 78D6              .DrawShip:              ;BREAK
  95+ 78D6 CD 0A 85     .RandomRotateShip:      call    doRandom
  96+ 78D9                                      MMUSelectUniverseN  1
  96+ 78D9 ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
  97+ 78DD 3A C5 78                             ld      a,(AttractStep)
  98+ 78E0 A7                                   and     a       ; 0
  99+ 78E1 CA EB 78                             jp      z,.ApplyShipRollAndPitch
 100+ 78E4 3D                                   dec     a       ; 1
 101+ 78E5 CA 0A 79                             jp      z,.ProcessNodes
 102+ 78E8 C3 13 79                             jp      .PrepLines ; 2
 103+ 78EB
 104+ 78EB CD 4E D8     .ApplyShipRollAndPitch: call    ApplyShipRollAndPitch
 105+ 78EE CD 30 78                             call    RandomXCounter
 106+ 78F1 CD 3D 78                             call    RandomYCounter
 107+ 78F4 3A 2D 78                             ld      a,(LocalXCounter)
 108+ 78F7 32 48 C0                             ld      (UBnkRotXCounter),a
 109+ 78FA 3A 2E 78                             ld      a,(LocalZCounter)
 110+ 78FD 32 4A C0                             ld      (UBnkRotZCounter),a
 111+ 7900              .ClearScreen:           MMUSelectLayer2
 111+ 7900 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 112+ 7904 CD 8E E1                             call    l2_cls_upper_two_thirds
 113+ 7907 C3 41 79                             jp      .DoneIM2
 114+ 790A CD 13 DB     .ProcessNodes:          call    ProcessNodes
 115+ 790D CD B5 D1     .CullV2:                call    CullV2
 116+ 7910 C3 41 79                             jp      .DoneIM2
 117+ 7913 CD 56 DD     .PrepLines:             call    PrepLines
 118+ 7916                                      ;break
 119+ 7916                      IFDEF LATECLIPPING
 120+ 7916 CD 40 DA     .DrawLines:             call    DrawLinesLateClipping
 121+ 7919                                      ;break
 122+ 7919                      ELSE
 123+ 7919 ~            .DrawLines:             call    DrawLines
 124+ 7919                      ENDIF
 125+ 7919 01 01 01     .Drawbox:               ld		bc,$0101
 126+ 791C 11 FD 7F                             ld		de,$7FFD
 127+ 791F 3E C0                                ld		a,$C0
 128+ 7921                                      ;break
 129+ 7921                                      MMUSelectLayer2
 129+ 7921 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 130+ 7925 CD F9 E3                             call	l2_draw_box
 131+ 7928 CD 97 E2     .DoubleBuffer:          call    l2_flip_buffers
 132+ 792B 3A 15 78     .UpdateZPosIfReady:     ld      a,(AttractCounter)
 133+ 792E                                      ;break
 134+ 792E A7                                   and     a
 135+ 792F CA 41 79                             jp      z,.DoneIM2
 136+ 7932 3D                                   dec     a
 137+ 7933 32 15 78                             ld      (AttractCounter),a
 138+ 7936 2A 26 C0                             ld      hl, (UBnkzlo)
 139+ 7939 11 08 00     .UpdatePos:             ld      de, $0008
 140+ 793C ED 52                                sbc     hl,de
 141+ 793E 22 26 C0                             ld      (UBnkzlo),hl
 142+ 7941 3A C5 78     .DoneIM2:               ld      a,(AttractStep)
 143+ 7944 3C                                   inc     a
 144+ 7945 FE 03                                cp      3
 145+ 7947 32 C5 78                             ld      (AttractStep),a
 146+ 794A C0                                   ret     nz
 147+ 794B                                      ZeroA
 147+ 794B AF          >                        xor a
 148+ 794C 32 C5 78                             ld      (AttractStep),a
 149+ 794F                                      ;break
 150+ 794F C9                                   ret
 151+ 7950
 152+ 7950
 153+ 7950
 154+ 7950 06 01        SelectARandomShip:      ld      b,1                             ; Demo screen uses slot 1
 155+ 7952                                      MMUSelectUniverseN  1
 155+ 7952 ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
 156+ 7956                                      MMUSelectShipBank1
 156+ 7956 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 157+ 795A FD 26 01                             ld      iyh, 1
 158+ 795D CD 0A 85     .SelectRandom:          call    doRandom
 159+ 7960 3E 0D                                ld      a,$0D
 160+ 7962                                      JumpIfAGTENusng ShipID_Rattler+1, .SelectRandom
 160+ 7962 FE 2C       >                        cp     ShipID_Rattler+1
 160+ 7964 D2 5D 79    >                        jp		nc,.SelectRandom
 161+ 7967 FD 6F                                ld      iyl,a
 162+ 7969 CD 0F E0                             call    GetShipBankId                       ; find actual memory location of data
 163+ 796C                                      MMUSelectShipBankA
 163+ 796C ED 92 57    >					 nextreg ShipModelMMU,	    a
 164+ 796F 78                                   ld      a,b
 165+ 7970 CD 6A E0                             call    CopyShipToUniverse
 166+ 7973 3A 0E C4                             ld      a,(ShipTypeAddr)
 167+ 7976 CB 7F                                bit     7,a                                 ; is it a type we don't want in attract mode
 168+ 7978 20 E3                                jr      nz,.SelectRandom
 169+ 797A 3E 01                                ld      a,1                                 ; slot 1, iyh and iyl already set
 170+ 797C CD 1B C9                             call    UnivInitRuntime
 171+ 797F CD 57 C7                             call    UnivSetDemoPostion
 172+ 7982 21 E0 01                             ld      hl,AttractDuration*2
 173+ 7985 22 13 78                             ld      (AttractTimer),hl
 174+ 7988 3E 80                                ld      a, AttractCounterStart
 175+ 798A 32 15 78                             ld      (AttractCounter),a
 176+ 798D                                      ZeroA
 176+ 798D AF          >                        xor a
 177+ 798E 32 C5 78                             ld      (AttractStep),a
 178+ 7991 C9                                   ret
 179+ 7992
 180+ 7992
 181+ 7992
# file closed: ./Menus/AttractMode.asm
 598  7992                  ENDIF
 599  7992
 600  7992                  include "./Maths/Utilities/XX12EquNodeDotOrientation.asm"
# file opened: ./Maths/Utilities/XX12EquNodeDotOrientation.asm
   1+ 7992              ; We enter here with hl pointing at XX16 and bc = XX15 value
   2+ 7992              ; so xx12 = XX15 * XX16 row
   3+ 7992              XX12ProcessOneRow:
   4+ 7992              XX12CalcXCell:
   5+ 7992 ED 4B A7 C0          ld		bc,(UBnkXScaled)
   6+ 7996 5E           		ld		e,(hl)								    ; get orientation ZX
   7+ 7997 23           		inc		hl
   8+ 7998 56           		ld		d,(hl)                                  ; so now e = xx16 value d = xx16 sign
   9+ 7999 7A           		ld		a,d
  10+ 799A A8                   xor     b
  11+ 799B E6 80        		and		SignOnly8Bit                            ; a = XX 16 sign
  12+ 799D DD 67        		ld		ixh,a								    ; orientation sign to ixh
  13+ 799F 78           		ld		a,b                                     ; now make bc abs bc
  14+ 79A0 E6 7F        		and		SignMask8Bit
  15+ 79A2 47           		ld		b,a                                     ; bc = abs(bc) now
  16+ 79A3 E5           		push	hl
  17+ 79A4 16 00                ld      d,0                                     ; d = value
  18+ 79A6 60           		ld		h,b
  19+ 79A7 69           		ld		l,c
  20+ 79A8 CD 98 91     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  21+ 79AB 22 55 7E     		ld		(XX12PVarResult1),hl				    ; T = 16 bit result, we only want to use high byte later
  22+ 79AE DD 7C        		ld		a,ixh
  23+ 79B0 32 5C 7E     		ld		(XX12PVarSign1),a					    ; S = sign  not sign 1 and 2 are reversed in memory so that fetchign back will put 1 in high byte 2 in low byte
  24+ 79B3 E1           		pop		hl
  25+ 79B4              XX12CalcYCell:
  26+ 79B4 ED 4B A9 C0          ld		bc,(UBnkYScaled)
  27+ 79B8 23           		inc		hl
  28+ 79B9 5E           		ld		e,(hl)							    	; get orientation ZX
  29+ 79BA 23           		inc		hl
  30+ 79BB 56           		ld		d,(hl)
  31+ 79BC 7A           		ld		a,d
  32+ 79BD A8                   xor     b
  33+ 79BE E6 80        		and		SignOnly8Bit
  34+ 79C0 DD 67        		ld		ixh,a								    ; XX16 orientation sign to ixh
  35+ 79C2 78           		ld		a,b                                     ; now make bc abs bc
  36+ 79C3 E6 7F        		and		SignMask8Bit
  37+ 79C5 47           		ld		b,a                                     ; bc = abs(bc) now
  38+ 79C6 E5           		push	hl
  39+ 79C7 16 00                ld      d,0                                     ; d = value
  40+ 79C9 60           		ld		h,b
  41+ 79CA 69           		ld		l,c
  42+ 79CB CD 98 91     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  43+ 79CE 22 57 7E     		ld		(XX12PVarResult2),hl				    ; T = 16 bit result
  44+ 79D1 DD 7C        		ld		a,ixh
  45+ 79D3 32 5B 7E     		ld		(XX12PVarSign2),a					    ; S = sign
  46+ 79D6 E1           		pop		hl
  47+ 79D7              XX12CalcZCell:
  48+ 79D7 ED 4B AB C0          ld		bc,(UBnkZScaled)
  49+ 79DB 23           		inc		hl
  50+ 79DC 5E           		ld		e,(hl)								    ; get orientation ZX
  51+ 79DD 23           		inc		hl
  52+ 79DE 56           		ld		d,(hl)
  53+ 79DF 7A           		ld		a,d
  54+ 79E0 A8                   xor     b
  55+ 79E1 E6 80        		and		SignOnly8Bit
  56+ 79E3 DD 67        		ld		ixh,a								    ; orientation sign to ixh
  57+ 79E5 78           		ld		a,b                                     ; now make bc abs bc
  58+ 79E6 E6 7F        		and		SignMask8Bit
  59+ 79E8 47           		ld		b,a                                     ; bc = abs(bc) now
  60+ 79E9 16 00                ld      d,0                                     ; d = value
  61+ 79EB 60           		ld		h,b
  62+ 79EC 69           		ld		l,c
  63+ 79ED CD 98 91     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  64+ 79F0 22 59 7E     		ld		(XX12PVarResult3),hl				    ; T = 16 bit result
  65+ 79F3 DD 7C        		ld		a,ixh
  66+ 79F5 32 5D 7E     		ld		(XX12PVarSign3),a					    ; S = sign
  67+ 79F8              XX12CalcCellResult:
  68+ 79F8 2A 55 7E     		ld		hl,(XX12PVarResult1)				    ; X Cell Result
  69+ 79FB ED 5B 57 7E  		ld		de,(XX12PVarResult2)				    ; Y Cell Result
  70+ 79FF ED 4B 5B 7E  		ld		bc,(XX12PVarSign2)					    ; b = var 1 result sign c = var 2 result signs
  71+ 7A03              XX12MSBOnly:
  72+ 7A03 6C           		ld		l,h									    ; now move results into lower byte so / 256
  73+ 7A04 5A           		ld		e,d									    ; for both results
  74+ 7A05 AF           		xor		a									    ;
  75+ 7A06 67           		ld		h,a									    ;
  76+ 7A07 57           		ld		d,a									    ; so set high byte to 0
  77+ 7A08              		MMUSelectMathsBankedFns
  77+ 7A08 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
  78+ 7A0C CD 2F 00             call	ADDHLDESignBC                           ;  XX12ProcessCalcHLPlusDESignBC		; returns with HL = result1 + result 2 signed in a
  79+ 7A0F 47           		ld		b,a									    ; move sign into b ready for next calc
  80+ 7A10 3A 5D 7E     		ld		a,(XX12PVarSign3)					    ; result of the calcZ cell
  81+ 7A13 4F           		ld		c,a									    ; goes into c to align with DE
  82+ 7A14 ED 5B 59 7E  		ld		de,(XX12PVarResult3)				    ; now add result to Result 3
  83+ 7A18 5A           		ld		e,d                                     ; d = result /256
  84+ 7A19 16 00        		ld		d,0									    ; and only us high byte
  85+ 7A1B              		MMUSelectMathsBankedFns
  85+ 7A1B ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
  86+ 7A1F CD 2F 00             call	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; returns with HL = result and a = sign
  87+ 7A22 C9           		ret											    ; hl = result, a = sign
  88+ 7A23              								    ; hl = result, a = sign
  89+ 7A23
  90+ 7A23              XX12EquNodeDotTransMat:							    ; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
  91+ 7A23              ;...X cell
  92+ 7A23 21 7A C0     		ld		hl,UBnkTransInvRow0x0     			; process orientation matrix row 0
  93+ 7A26 CD 92 79             call    XX12ProcessOneRow                   ; hl = result, a = sign
  94+ 7A29 47           		ld		b,a                                 ; b = sign
  95+ 7A2A 7C           		ld		a,h                                 ; a = high byte
  96+ 7A2B B0           		or		b
  97+ 7A2C 32 AE C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
  98+ 7A2F 7D           		ld		a,l                                 ; the result will be in the lower byte now
  99+ 7A30 32 AD C0             ld      (UBnkXX12xLo),a						; that is result done for
 100+ 7A33              ;...Y cell
 101+ 7A33 21 82 C0     		ld		hl,UBnkTransInvRow1y0     			; process orientation matrix row 1
 102+ 7A36 CD 92 79             call    XX12ProcessOneRow
 103+ 7A39 47           		ld		b,a
 104+ 7A3A 7C           		ld		a,h
 105+ 7A3B              ;		ld		a,l
 106+ 7A3B B0           		or		b
 107+ 7A3C 32 B0 C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 108+ 7A3F 7D           		ld		a,l                                 ; the result will be in the lower byte now
 109+ 7A40 32 AF C0             ld      (UBnkXX12yLo),a						; that is result done for
 110+ 7A43              ;...Z cell
 111+ 7A43 21 8A C0     		ld		hl,UBnkTransInvRow2z0     			; process orientation matrix row 1
 112+ 7A46 CD 92 79             call    XX12ProcessOneRow
 113+ 7A49 47           		ld		b,a
 114+ 7A4A 7C                   ld		a,h
 115+ 7A4B              ;		ld		a,l
 116+ 7A4B B0           		or		b
 117+ 7A4C 32 B2 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 118+ 7A4F 7D           		ld		a,l                                 ; the result will be in the lower byte now
 119+ 7A50 32 B1 C0             ld      (UBnkXX12zLo),a						; that is result done for
 120+ 7A53 C9                   ret
 121+ 7A54
 122+ 7A54              XX12EquNodeDotOrientation:							; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 123+ 7A54              ;...X cell
 124+ 7A54 21 7A C0     		ld		hl,UBnkTransInvRow0x0     			; process orientation matrix row 0
 125+ 7A57 CD 92 79             call    XX12ProcessOneRow                   ; hl = result, a = sign
 126+ 7A5A 47           		ld		b,a                                 ; b = sign
 127+ 7A5B 7C           		ld		a,h                                 ; a = high byte
 128+ 7A5C B0           		or		b
 129+ 7A5D 32 AE C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 130+ 7A60 7D           		ld		a,l                                 ; the result will be in the lower byte now
 131+ 7A61 32 AD C0             ld      (UBnkXX12xLo),a						; that is result done for
 132+ 7A64              ;...Y cell
 133+ 7A64 21 82 C0     		ld		hl,UBnkTransInvRow1y0     			; process orientation matrix row 1
 134+ 7A67 CD 92 79             call    XX12ProcessOneRow
 135+ 7A6A 47           		ld		b,a
 136+ 7A6B 7C           		ld		a,h
 137+ 7A6C              ;		ld		a,l
 138+ 7A6C B0           		or		b
 139+ 7A6D 32 B0 C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 140+ 7A70 7D           		ld		a,l                                 ; the result will be in the lower byte now
 141+ 7A71 32 AF C0             ld      (UBnkXX12yLo),a						; that is result done for
 142+ 7A74              ;...Z cell
 143+ 7A74 21 8A C0     		ld		hl,UBnkTransInvRow2z0     			; process orientation matrix row 1
 144+ 7A77 CD 92 79             call    XX12ProcessOneRow
 145+ 7A7A 47           		ld		b,a
 146+ 7A7B 7C                   ld		a,h
 147+ 7A7C              ;		ld		a,l
 148+ 7A7C B0           		or		b
 149+ 7A7D 32 B2 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 150+ 7A80 7D           		ld		a,l                                 ; the result will be in the lower byte now
 151+ 7A81 32 B1 C0             ld      (UBnkXX12zLo),a						; that is result done for
 152+ 7A84 C9                   ret
 153+ 7A85
 154+ 7A85              XX12EquNodeDotXX16:					         		; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 155+ 7A85              ;...X cell
 156+ 7A85 21 62 C0     		ld		hl,UBnkTransmatSidevX     			; process orientation matrix row 0
 157+ 7A88 CD 92 79             call    XX12ProcessOneRow                   ; hl = result, a = sign
 158+ 7A8B 47           		ld		b,a                                 ; b = sign
 159+ 7A8C 7C           		ld		a,h                                 ; a = high byte
 160+ 7A8D B0           		or		b
 161+ 7A8E 32 AE C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 162+ 7A91 7D           		ld		a,l                                 ; the result will be in the lower byte now
 163+ 7A92 32 AD C0             ld      (UBnkXX12xLo),a						; that is result done for
 164+ 7A95              ;...Y cell
 165+ 7A95 21 68 C0     		ld		hl,UBnkTransmatRoofvX     			; process orientation matrix row 1
 166+ 7A98 CD 92 79             call    XX12ProcessOneRow
 167+ 7A9B 47           		ld		b,a
 168+ 7A9C 7C           		ld		a,h
 169+ 7A9D              ;		ld		a,l
 170+ 7A9D B0           		or		b
 171+ 7A9E 32 B0 C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 172+ 7AA1 7D           		ld		a,l                                 ; the result will be in the lower byte now
 173+ 7AA2 32 AF C0             ld      (UBnkXX12yLo),a						; that is result done for
 174+ 7AA5              ;...Z cell
 175+ 7AA5 21 6E C0     		ld		hl,UBnkTransmatNosevX     			; process orientation matrix row 1
 176+ 7AA8 CD 92 79             call    XX12ProcessOneRow
 177+ 7AAB 47           		ld		b,a
 178+ 7AAC 7C                   ld		a,h
 179+ 7AAD              ;		ld		a,l
 180+ 7AAD B0           		or		b
 181+ 7AAE 32 B2 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 182+ 7AB1 7D           		ld		a,l                                 ; the result will be in the lower byte now
 183+ 7AB2 32 B1 C0             ld      (UBnkXX12zLo),a						; that is result done for
 184+ 7AB5 C9                   ret
# file closed: ./Maths/Utilities/XX12EquNodeDotOrientation.asm
 601  7AB6                  include "./ModelRender/CopyXX12ToXX15.asm"
# file opened: ./ModelRender/CopyXX12ToXX15.asm
   1+ 7AB6 21 AD C0     CopyXX12ToXX15:         ld      hl,XX12
   2+ 7AB9 11 A7 C0                             ld      de,XX15
   3+ 7ABC 01 06 00                             ld      bc,6
   4+ 7ABF ED B0                                ldir
   5+ 7AC1 C9                                   ret
   6+ 7AC2
   7+ 7AC2 21 AD C0     CopyXX12ToXX12Save:     ld      hl,XX12
   8+ 7AC5 11 B3 C0                             ld      de,XX12Save
   9+ 7AC8 01 06 00                             ld      bc,6
  10+ 7ACB ED B0                                ldir
  11+ 7ACD C9                                   ret
  12+ 7ACE
  13+ 7ACE 21 B3 C0     CopyXX12SaveToXX12:     ld      hl,XX12Save
  14+ 7AD1 11 AD C0                             ld      de,XX12
  15+ 7AD4 01 06 00                             ld      bc,6
  16+ 7AD7 ED B0                                ldir
  17+ 7AD9 C9                                   ret
  18+ 7ADA
  19+ 7ADA 21 AD C0     CopyXX12ToXX12Save2:    ld      hl,XX12
  20+ 7ADD 11 B9 C0                             ld      de,XX12Save2
  21+ 7AE0 01 06 00                             ld      bc,6
  22+ 7AE3 ED B0                                ldir
  23+ 7AE5 C9                                   ret
  24+ 7AE6
  25+ 7AE6 21 B9 C0     CopyXX12Save2ToXX12:    ld      hl,XX12Save2
  26+ 7AE9 11 AD C0                             ld      de,XX12
  27+ 7AEC 01 06 00                             ld      bc,6
  28+ 7AEF ED B0                                ldir
  29+ 7AF1 C9                                   ret
  30+ 7AF2
# file closed: ./ModelRender/CopyXX12ToXX15.asm
 602  7AF2                  ;;DEFUNCTinclude "./ModelRender/CopyXX15ToXX12.asm"
 603  7AF2                  include "./Maths/Utilities/ScaleXX16Matrix197.asm"
# file opened: ./Maths/Utilities/ScaleXX16Matrix197.asm
   1+ 7AF2              ScaleXX16Matrix197:
   2+ 7AF2                      IFDEF LOGMATHS
   3+ 7AF2 ~                                    ld		b,9                 ; Interate though all 9 matrix elements
   4+ 7AF2 ~                                    ld		hl,UBnkTransmatSidev ; within XX16 (transmat)
   5+ 7AF2 ~                                    MMUSelectMathsTables
   6+ 7AF2 ~            .ScaleXX16Loop:         ld		e,(hl)              ; set DE = matrix value              ;
   7+ 7AF2 ~                                    inc		hl                  ;
   8+ 7AF2 ~                                    ld		a,(hl)              ;
   9+ 7AF2 ~                                    ld		d,a                 ;
  10+ 7AF2 ~                                    and     SignOnly8Bit        ; A holds high still to we can strip out sign bit
  11+ 7AF2 ~                                    ld		ixl,a				; retain for sign bit
  12+ 7AF2 ~                                    ShiftDELeft1				; carry now holds sign bit and DE = De * 2, this will in effect strip off the sign bit automatically
  13+ 7AF2 ~                                    ld      a,d                 ; a = high byte after x 2
  14+ 7AF2 ~                                    push	bc                  ; save BC  counter and constant 197
  15+ 7AF2 ~                                    push	hl                  ; save HL
  16+ 7AF2 ~                                    call    AEquAmul256Div197Log;
  17+ 7AF2 ~                                    pop		hl
  18+ 7AF2 ~                                    dec     hl                  ; move back to low byte
  19+ 7AF2 ~                                    ld      (hl),a              ; save result in low byte as we want to preserve high byte sign
  20+ 7AF2 ~                                    inc     hl                  ; move back to high byte
  21+ 7AF2 ~                                    ld      a,ixl
  22+ 7AF2 ~                                    ld      (hl),a              ; write back just sign bit
  23+ 7AF2 ~                                    pop		bc                  ; retrieve both counter and constant 197
  24+ 7AF2 ~                                    inc     hl                  ; no to next vertex value
  25+ 7AF2 ~                                    djnz	.ScaleXX16Loop
  26+ 7AF2 ~                                    MMUSelectROM0
  27+ 7AF2 ~                                    ret
  28+ 7AF2                      ELSE
  29+ 7AF2 06 09                                ld		b,9                 ; Interate though all 9 matrix elements
  30+ 7AF4 0E C5                                ld		c,ConstNorm         ; c = 197
  31+ 7AF6 21 62 C0                             ld		hl,UBnkTransmatSidev ; within XX16 (transmat)
  32+ 7AF9 7E           .ScaleXX16Loop:         ld		a,(hl)              ; set DE = matrix value
  33+ 7AFA 5F                                   ld		e,a                 ;
  34+ 7AFB 23                                   inc		hl                  ;
  35+ 7AFC 7E                                   ld		a,(hl)              ;
  36+ 7AFD 57                                   ld		d,a                 ;
  37+ 7AFE E6 80                                and     SignOnly8Bit        ; A holds high still to we can strip out sign bit
  38+ 7B00 DD 6F                                ld		ixl,a				; retain for sign bit
  39+ 7B02                                      ShiftDELeft1				; carry now holds sign bit and DE = De * 2, this will in effect strip off the sign bit automatically
  39+ 7B02 CB 23       >			   sla e
  39+ 7B04 CB 12       >			   rl  d
  40+ 7B06 7A                                   ld      a,d                 ; a = high byte after x 2
  41+ 7B07 C5                                   push	bc                  ; save BC  counter and constant 197
  42+ 7B08 E5                                   push	hl                  ; save HL
  43+ 7B09 CD E0 95                             call	DIV16Amul256dCUNDOC; AEquAmul256DivD; DIV16Amul256dCUNDOC	; result in BC = A*256 / 197 or D *512 / 197 = 2.6 * vector element, effectivley the result will always be in c
  44+ 7B0C E1                                   pop		hl
  45+ 7B0D 2B                                   dec     hl                  ; move back to low byte
  46+ 7B0E 71                                   ld      (hl),c              ; save result in low byte as we want to preserve high byte sign
  47+ 7B0F 23                                   inc     hl                  ; move back to high byte
  48+ 7B10                                  ;    ld      a,(hl)
  49+ 7B10                                  ;    and     $80
  50+ 7B10 DD 7D                                ld      a,ixl
  51+ 7B12 77                                   ld      (hl),a              ; write back just sign bit
  52+ 7B13 C1                                   pop		bc                  ; retrieve both counter and constant 197
  53+ 7B14 23                                   inc     hl                  ; no to next vertex value
  54+ 7B15 10 E2                                djnz	.ScaleXX16Loop
  55+ 7B17 C9                                   ret
  56+ 7B18                      ENDIF
# file closed: ./Maths/Utilities/ScaleXX16Matrix197.asm
 604  7B18
 605  7B18                  include "./Universe/StarDust/StarRoutines.asm"
# file opened: ./Universe/StarDust/StarRoutines.asm
   1+ 7B18              ;note: DIV16Amul256dCUNDOC as per
   2+ 7B18              ;                                   BC = A0
   3+ 7B18              ;                                   DE = 0C
   4+ 7B18              ;                                   so BC = a * 256 / C
   5+ 7B18
   6+ 7B18              ; We can cheat here, Speed is always 0 or positive
   7+ 7B18              ; z postion will always be positive if we can see it
   8+ 7B18
   9+ 7B18 EB           InitStarAtHL:           ex      de,hl               ; preserving hl
  10+ 7B19 CD 0A 85                             call    doRND               ; a = random OR bit 5
  11+ 7B1C EB                                   ex      de,hl               ; .
  12+ 7B1D F6 08                                or      8                   ; .
  13+ 7B1F 77                                   ld      (hl),a              ; save to x pos
  14+ 7B20 E6 7F                                and     $7F                 ; a = abs a
  15+ 7B22 23                                   inc     hl                  ;
  16+ 7B23 77                                   ld      (hl),a              ;
  17+ 7B24 EB                                   ex      de,hl               ; preserving hl
  18+ 7B25 CD 0A 85                             call    doRND               ; a = -ve (random / 2)
  19+ 7B28 EB                                   ex      de,hl               ; .
  20+ 7B29 0F                                   rrca                        ; .
  21+ 7B2A E6 80                                and     $80                 ; .
  22+ 7B2C B6                                   or      (hl)                ; or with
  23+ 7B2D 77                                   ld      (hl),a
  24+ 7B2E 23                                   inc     hl
  25+ 7B2F EB                                   ex      de,hl
  26+ 7B30 CD 0A 85                             call    doRND
  27+ 7B33 EB                                   ex      de,hl
  28+ 7B34 F6 04                                or      4
  29+ 7B36 77                                   ld      (hl),a
  30+ 7B37 23                                   inc     hl
  31+ 7B38 E6 7F                                and     $7F
  32+ 7B3A 77                                   ld      (hl),a
  33+ 7B3B EB                                   ex      de,hl
  34+ 7B3C CD 0A 85                             call    doRND
  35+ 7B3F EB                                   ex      de,hl
  36+ 7B40 0F                                   rrca
  37+ 7B41 E6 80                                and     $80
  38+ 7B43 B6                                   or      (hl)
  39+ 7B44 77                                   ld      (hl),a
  40+ 7B45 23                                   inc     hl
  41+ 7B46 EB                                   ex      de,hl
  42+ 7B47 CD 0A 85                             call    doRND
  43+ 7B4A EB                                   ex      de,hl
  44+ 7B4B F6 90                                or      144
  45+ 7B4D 77                                   ld      (hl),a
  46+ 7B4E 23                                   inc     hl
  47+ 7B4F F6 70                                or      %01110000
  48+ 7B51 E6 7F                                and     $7f     ; bodge
  49+ 7B53 77                                   ld      (hl),a
  50+ 7B54 23                                   inc     hl
  51+ 7B55 C9                                   ret
  52+ 7B56
  53+ 7B56 EB           InitHyperStarAtHL:      ex      de,hl
  54+ 7B57 CD 0A 85                             call    doRND
  55+ 7B5A CB 27                                sla     a
  56+ 7B5C CB 27                                sla     a                ; so its * 4 as we have a blank spot
  57+ 7B5E EB                                   ex      de,hl
  58+ 7B5F E6 F8                                and     %11111000
  59+ 7B61 77                                   ld      (hl),a
  60+ 7B62 E6 7F                                and     $7F
  61+ 7B64 23                                   inc     hl
  62+ 7B65 77                                   ld      (hl),a
  63+ 7B66 EB                                   ex      de,hl
  64+ 7B67 CD 0A 85                             call    doRND
  65+ 7B6A EB                                   ex      de,hl
  66+ 7B6B 0F                                   rrca
  67+ 7B6C E6 80                                and     $80
  68+ 7B6E B6                                   or      (hl)
  69+ 7B6F 77                                   ld      (hl),a
  70+ 7B70 23                                   inc     hl
  71+ 7B71 EB                                   ex      de,hl
  72+ 7B72 CD 0A 85                             call    doRND
  73+ 7B75 CB 27                                sla     a
  74+ 7B77 CB 27                                sla     a               ; so its * 4 as we have a blank spot
  75+ 7B79 EB                                   ex      de,hl
  76+ 7B7A E6 F8                                and     %11111000
  77+ 7B7C 77                                   ld      (hl),a
  78+ 7B7D 23                                   inc     hl
  79+ 7B7E E6 7F                                and     $7F
  80+ 7B80 77                                   ld      (hl),a
  81+ 7B81 EB                                   ex      de,hl
  82+ 7B82 CD 0A 85                             call    doRND
  83+ 7B85 EB                                   ex      de,hl
  84+ 7B86 0F                                   rrca
  85+ 7B87 E6 80                                and     $80
  86+ 7B89 B6                                   or      (hl)
  87+ 7B8A 77                                   ld      (hl),a
  88+ 7B8B 23                                   inc     hl
  89+ 7B8C EB                                   ex      de,hl
  90+ 7B8D CD 0A 85                             call    doRND
  91+ 7B90 EB                                   ex      de,hl
  92+ 7B91 F6 5F                                or      95
  93+ 7B93 77                                   ld      (hl),a
  94+ 7B94 23                                   inc     hl
  95+ 7B95 F6 70                                or      %01110000
  96+ 7B97 E6 7F                                and     $7f     ; bodge
  97+ 7B99 77                                   ld      (hl),a
  98+ 7B9A 23                                   inc     hl
  99+ 7B9B C9                                   ret
 100+ 7B9C
 101+ 7B9C              ;----------------------------------------------------------------------------------------------------------------------------------
 102+ 7B9C 06 0B        InitialiseStars:        ld      b,MaxNumberOfStars
 103+ 7B9E 21 97 80                             ld      hl,varDust
 104+ 7BA1 CD 18 7B     .InitStarsLoop:         call    InitStarAtHL
 105+ 7BA4 10 FB                                djnz    .InitStarsLoop
 106+ 7BA6 C9                                   ret
 107+ 7BA7              ;----------------------------------------------------------------------------------------------------------------------------------
 108+ 7BA7 06 0B        InitialiseHyperStars:   ld      b,MaxNumberOfStars
 109+ 7BA9 21 97 80                             ld      hl,varDust
 110+ 7BAC CD 56 7B     .InitStarsLoop:         call    InitHyperStarAtHL
 111+ 7BAF 10 FB                                djnz    .InitStarsLoop
 112+ 7BB1 C9                                   ret
 113+ 7BB2              ;----------------------------------------------------------------------------------------------------------------------------------
 114+ 7BB2 FD 21 97 80  SaveCurrentDust:        ld          iy,varDust
 115+ 7BB6 DD 21 81 80                          ld          ix,varDustWarpRender
 116+ 7BBA 06 0B                                ld          b, MaxNumberOfStars
 117+ 7BBC FD 7E 01     .SaveLoop               ld          a,(iy+1)
 118+ 7BBF 6F                                   ld          l,a
 119+ 7BC0 E6 7F                                and         $7F
 120+ 7BC2                                      JumpOnBitSet l,7,.StarNegXPt
 120+ 7BC2 CB 7D       >                        bit 	7,l
 120+ 7BC4 C2 CD 7B    >                        jp      nz,.StarNegXPt
 121+ 7BC7 C6 80                                add         a,$80
 122+ 7BC9 5F                                   ld          e,a
 123+ 7BCA C3 D2 7B                             jp          .StarDoneX
 124+ 7BCD 57           .StarNegXPt:            ld          d,a
 125+ 7BCE 3E 80                                ld          a,$80
 126+ 7BD0 92                                   sub         d
 127+ 7BD1 5F                                   ld          e,a
 128+ 7BD2 FD 7E 03     .StarDoneX:             ld          a,(iy+3)
 129+ 7BD5 6F                                   ld          l,a
 130+ 7BD6 E6 7F                                and         $7F
 131+ 7BD8                                      JumpOnBitSet l,7,.StarNegYPt
 131+ 7BD8 CB 7D       >                        bit 	7,l
 131+ 7BDA C2 E3 7B    >                        jp      nz,.StarNegYPt
 132+ 7BDD C6 60                                add         a,$60
 133+ 7BDF 57                                   ld          d,a
 134+ 7BE0 C3 E8 7B                             jp          .StarDoneY
 135+ 7BE3 57           .StarNegYPt:            ld          d,a
 136+ 7BE4 3E 60                                ld          a,$60
 137+ 7BE6 92                                   sub         d
 138+ 7BE7 57                                   ld          d,a
 139+ 7BE8 DD 73 00     .StarDoneY:             ld          (ix+0),e
 140+ 7BEB DD 72 01                             ld          (ix+1),d
 141+ 7BEE DD 23                                inc         ix
 142+ 7BF0 DD 23                                inc         ix
 143+ 7BF2 FD E5 E1                             ld          hl,iy
 144+ 7BF5 3E 06                                ld          a,6
 145+ 7BF7 ED 31                                add         hl,a
 146+ 7BF9 E5 FD E1                             ld          iy,hl
 147+ 7BFC 10 BE                                djnz        .SaveLoop
 148+ 7BFE C9                                   ret
 149+ 7BFF
 150+ 7BFF              ;----------------------------------------------------------------------------------------------------------------------------------
 151+ 7BFF 06 0B        DustForward:            ld      b,MaxNumberOfStars                  ; get the number of stars to process
 152+ 7C01 FD 21 97 80                          ld      iy,varDust                          ; hl is now a pointer to the dust array
 153+ 7C05 C5           StarProcessLoop:        push    bc                                  ; save counter +1
 154+ 7C06 FD 7E 05     .Qequ64XSpeedDivZHi:    ld      a,(iy+5)                            ; e  = z high
 155+ 7C09 5F                                   ld      e,a                                 ; d = 0
 156+ 7C0A 16 00                                ld      d,0                                 ; de = zhi/256
 157+ 7C0C 3A 6B 7F                             ld      a,(DELTA)                           ; a = speed
 158+ 7C0F                                      JumpIfAIsNotZero .NormalSpeed               ; if we are stationary set speed
 158+ 7C0F A7          >                        and     a
 158+ 7C10 C2 14 7C    >                        jp	    nz,.NormalSpeed
 159+ 7C13 3C                                   inc     a                                   ; so it is at least some dust movement
 160+ 7C14 47           .NormalSpeed:           ld      b,a                                 ;
 161+ 7C15 0E 00                                ld      c,0                                 ; bc = delta * 256
 162+ 7C17 CD 6C 96                             call    BC_Div_DE                           ; BC = Speed/Z , HL = remainder
 163+ 7C1A                                      ShiftHLRight1
 163+ 7C1A CB 3C       >			   srl h
 163+ 7C1C CB 1D       >			   rr  l
 164+ 7C1E                                      ShiftHLRight1                               ; hl = remainder/2 so now 64 * speed / zhi
 164+ 7C1E CB 3C       >			   srl h
 164+ 7C20 CB 1D       >			   rr  l
 165+ 7C22 7D                                   ld      a,l                                 ;
 166+ 7C23 F6 01                                or      1                                   ; so ensure A is at least 1 for ambient movement
 167+ 7C25 DD 6F                                ld      ixl,a                               ; preserve A which is also VarQ = 64 * speed / zhi
 168+ 7C27 FD 6E 04 FD  .ZequZMinusSpeedX64:    ld      hl,(iy+4)                           ; hl = z
 168+ 7C2B 66 05
 169+ 7C2D ED 5B 6C 7F                          ld      de, (DELTA4)                         ; de = delta4 i.e. speed * 64 pre computed
 170+ 7C31 CD BE 8F                             call    subHLDES15
 171+ 7C34                                      JumpOnBitSet h,7,ResetStar                  ; if z ended up negative then reset the star
 171+ 7C34 CB 7C       >                        bit 	7,h
 171+ 7C36 C2 9B 7D    >                        jp      nz,ResetStar
 172+ 7C39 FD 75 04 FD                          ld      (iy+4),hl                           ; save new z pos
 172+ 7C3D 74 05
 173+ 7C3F FD 6E 00 FD  .XEquXPlusXhiMulQ       ld      hl,(iy+0)                           ; hl  = x
 173+ 7C43 66 01
 174+ 7C45 7C                                   ld      a,h                                 ;
 175+ 7C46 E6 7F                                and     $7F                                 ;
 176+ 7C48 57                                   ld      d,a                                 ; d = abs(x hi)
 177+ 7C49 DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 178+ 7C4B ED 30                                mul                                         ; de =  abs(x hi) * Q
 179+ 7C4D 7C                                   ld      a,h                                 ;
 180+ 7C4E E6 80                                and     $80                                 ;
 181+ 7C50 B2                                   or      d                                   ; set sign bit in d
 182+ 7C51 57                                   ld      d,a                                 ;
 183+ 7C52                                      MMUSelectMathsBankedFns
 183+ 7C52 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 184+ 7C56 CD 52 00                             call    ADDHLDESignedV4                  ; x = x + (x hi/256 * Q)
 185+ 7C59 7C                                   ld      a,h
 186+ 7C5A E6 7F                                and     $7F
 187+ 7C5C                                      JumpIfAGTENusng $70, ResetStar
 187+ 7C5C FE 70       >                        cp     $70
 187+ 7C5E D2 9B 7D    >                        jp		nc,ResetStar
 188+ 7C61 FD 75 00 FD                          ld      (iy+0),hl                           ;
 188+ 7C65 74 01
 189+ 7C67 FD 6E 02 FD  .YEquYPlusYhiMulQ       ld      hl,(iy+2)                           ; hl  = y
 189+ 7C6B 66 03
 190+ 7C6D 7C                                   ld      a,h                                 ;
 191+ 7C6E E6 7F                                and     $7F                                 ;
 192+ 7C70 57                                   ld      d,a                                 ; d = abs(y hi)
 193+ 7C71 DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 194+ 7C73 ED 30                                mul                                         ; de =  abs(y hi) * Q
 195+ 7C75 7C                                   ld      a,h                                 ;
 196+ 7C76 E6 80                                and     $80                                 ;
 197+ 7C78 B2                                   or      d                                   ; set sign bit in d
 198+ 7C79 57                                   ld      d,a                                 ;
 199+ 7C7A                                      MMUSelectMathsBankedFns
 199+ 7C7A ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 200+ 7C7E CD 52 00                             call    ADDHLDESignedV4                  ; y = y + (x hi/256 * Q)
 201+ 7C81 7C                                   ld      a,h
 202+ 7C82 E6 7F                                and     $7F
 203+ 7C84                                      JumpIfAGTENusng $60, ResetStar
 203+ 7C84 FE 60       >                        cp     $60
 203+ 7C86 D2 9B 7D    >                        jp		nc,ResetStar
 204+ 7C89 7C                                   ld      a,h
 205+ 7C8A E6 80                                and     $80
 206+ 7C8C 20 06                                jr      nz,.NoSecondCheck
 207+ 7C8E 7C                                   ld      a,h
 208+ 7C8F                                      JumpIfAGTENusng $20, ResetStar
 208+ 7C8F FE 20       >                        cp     $20
 208+ 7C91 D2 9B 7D    >                        jp		nc,ResetStar
 209+ 7C94 FD 75 02 FD  .NoSecondCheck:         ld      (iy+2),hl                           ;
 209+ 7C98 74 03
 210+ 7C9A              ; Now roll
 211+ 7C9A              ;  6. x = x - alpha * y / 256
 212+ 7C9A 3A 8B 7E     .XRoll:                 ld      a,(ALP1)                           ; h = sign, l = magnitude
 213+ 7C9D FE 00                                cp      0
 214+ 7C9F 28 51                                jr      z,.NoRoll                           ; don;t roll if magnitude is 0
 215+ 7CA1                                   ;   break
 216+ 7CA1 6F                                   ld      l,a                                 ; roll magnitude
 217+ 7CA2 3A 8D 7E                             ld      a,(ALP2FLIP)                        ; inverted roll sign
 218+ 7CA5 E6 80                                and     SignOnly8Bit                        ; sanitise sign bit
 219+ 7CA7 67                                   ld      h,a                                 ; h = roll sign
 220+ 7CA8 E5                                   push    hl                                  ; save on the stack
 221+ 7CA9 4F           .rxSaveAlphaSign:       ld      c,a                                 ; save alpha sign in c
 222+ 7CAA 55           .rxDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 223+ 7CAB FD 7E 03                             ld      a,(iy+3)                            ; get high byte from x coord
 224+ 7CAE 5F                                   ld      e,a                                 ; save signed byte
 225+ 7CAF E6 80                                and     SignOnly8Bit                        ; a = sign only
 226+ 7CB1 47           .rxBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 227+ 7CB2 7B           .rxEEquABSignX:         ld      a,e                                 ; e = abs byte
 228+ 7CB3 E6 7F                                and     SignMask8Bit
 229+ 7CB5 5F                                   ld      e,a                                 ; save abs x hi in e
 230+ 7CB6 ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 231+ 7CB8 79                                   ld      a,c                                 ; get back sign from roll
 232+ 7CB9 A8                                   xor     b                                   ; handle muliple sign bits
 233+ 7CBA B2                                   or      d
 234+ 7CBB 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 235+ 7CBC FD 6E 00 FD                          ld      hl,(iy+0)                           ; h = iy+1, l = iy+0
 235+ 7CC0 66 01
 236+ 7CC2 CD BE 8F                             call    subHLDES15                       ; we are usign add, so may need to fip sign?
 237+ 7CC5 FD 75 00 FD                          ld      (iy+0),hl
 237+ 7CC9 74 01
 238+ 7CCB              ;  5. y = y + alpha * x / 256
 239+ 7CCB              .YRoll:                 ;break
 240+ 7CCB E1                                   pop     hl                                  ; h = sign, l = magnitude
 241+ 7CCC 4C           .rySaveAlphaSign:       ld      c,h                                 ; save alpha sign in c
 242+ 7CCD 55           .ryDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 243+ 7CCE FD 7E 01                             ld      a,(iy+1)                            ; get high byte from x coord
 244+ 7CD1 5F                                   ld      e,a
 245+ 7CD2 E6 80                                and     SignOnly8Bit
 246+ 7CD4 47           .ryBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 247+ 7CD5 7B           .ryEEquABSignX:         ld      a,e
 248+ 7CD6 E6 7F                                and     SignMask8Bit
 249+ 7CD8 5F                                   ld      e,a                                 ; save abs x hi in e
 250+ 7CD9 ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 251+ 7CDB 79                                   ld      a,c
 252+ 7CDC A8                                   xor     b                                   ; handle muliple sign bits
 253+ 7CDD B2                                   or      d
 254+ 7CDE 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 255+ 7CDF FD 6E 02 FD                          ld      hl,(iy+2)                           ; h = iy+1, l = iy+0
 255+ 7CE3 66 03
 256+ 7CE5                                      MMUSelectMathsBankedFns
 256+ 7CE5 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 257+ 7CE9 CD 52 00                             call    ADDHLDESignedV4                  ; we are usign add, so may need to fip sign?
 258+ 7CEC FD 75 02 FD                          ld      (iy+2),hl
 258+ 7CF0 74 03
 259+ 7CF2 3A 76 7E     .NoRoll:                ld      a,(BET1)
 260+ 7CF5 FE 00                                cp      0
 261+ 7CF7 28 26                                jr      z,.NoPitch
 262+ 7CF9              ;  8. y = y - beta * 256
 263+ 7CF9 57           .YPitch:                ld      d,a                                 ; d = BET1
 264+ 7CFA FD 7E 02                             ld      a,(iy+2)
 265+ 7CFD 5F                                   ld      e,a                                 ; e = Y HI
 266+ 7CFE ED 30                                mul                                         ; de = BET1 * YHi so now D = BETA & YHI / 256
 267+ 7D00 5F                                   ld      e,a
 268+ 7D01 ED 30                                mul                                         ; so now de = (BETA & Yhi) ^ 2
 269+ 7D03                                      ShiftDELeft1                                ; de = 2 * ((BETA & Yhi) ^ 2)
 269+ 7D03 CB 23       >			   sla e
 269+ 7D05 CB 12       >			   rl  d
 270+ 7D07 3A 77 7E                             ld      a,(BET2)                            ; get inverted Sign
 271+ 7D0A B2                                   or      d
 272+ 7D0B 57                                   ld      d,a                                 ; de = - (2 * ((BETA & Yhi) ^ 2))
 273+ 7D0C FD 6E 02 FD                          ld      hl,(iy+2)
 273+ 7D10 66 03
 274+ 7D12                                      MMUSelectMathsBankedFns
 274+ 7D12 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 275+ 7D16 CD 52 00                             call    ADDHLDESignedV4
 276+ 7D19 FD 75 02 FD                          ld      (iy+2),hl
 276+ 7D1D 74 03
 277+ 7D1F              ; now work out screen pos
 278+ 7D1F              ; Note two optimistations, write to layer 2 - we get a free removal via double buffer cls
 279+ 7D1F              ; read z dept than determine hw many pixesl to plot, e.g. 1,2,3,4
 280+ 7D1F              ;        pop     de
 281+ 7D1F               ;       call    ProjectStarXToScreen
 282+ 7D1F                                      ;pop     de
 283+ 7D1F              .NoPitch:
 284+ 7D1F FD 7E 01     .ProjectStar:           ld      a,(iy+1)
 285+ 7D22 6F                                   ld      l,a
 286+ 7D23 E6 7F                                and     $7F
 287+ 7D25                                      JumpOnBitSet l,7,StarNegXPt
 287+ 7D25 CB 7D       >                        bit 	7,l
 287+ 7D27 C2 30 7D    >                        jp      nz,StarNegXPt
 288+ 7D2A C6 80                                add     a,$80
 289+ 7D2C 4F                                   ld      c,a
 290+ 7D2D C3 35 7D                             jp      StarDoneX
 291+ 7D30 47           StarNegXPt:             ld      b,a
 292+ 7D31 3E 80                                ld      a,$80
 293+ 7D33 90                                   sub     b
 294+ 7D34 4F                                   ld      c,a
 295+ 7D35 FD 7E 03     StarDoneX:              ld      a,(iy+3)
 296+ 7D38 6F                                   ld      l,a
 297+ 7D39 E6 7F                                and     $7F
 298+ 7D3B                                      JumpOnBitSet l,7,StarNegYPt
 298+ 7D3B CB 7D       >                        bit 	7,l
 298+ 7D3D C2 46 7D    >                        jp      nz,StarNegYPt
 299+ 7D40 C6 60                                add     a,$60
 300+ 7D42 47                                   ld      b,a
 301+ 7D43 C3 4B 7D                             jp      StarDoneY
 302+ 7D46 47           StarNegYPt:             ld      b,a
 303+ 7D47 3E 60                                ld      a,$60
 304+ 7D49 90                                   sub     b
 305+ 7D4A 47                                   ld      b,a
 306+ 7D4B 3E 92        StarDoneY:              ld      a,L2DustColour
 307+ 7D4D C5                                   push    bc
 308+ 7D4E              .DrawStar:              MMUSelectLayer2
 308+ 7D4E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 309+ 7D52 CD B6 E2                             call    l2_plot_pixel
 310+ 7D55 FD 7E 05                             ld      a,(iy+5)
 311+ 7D58 C1                                   pop    bc
 312+ 7D59                                      JumpIfAGTENusng $60,EndofStarsLoop
 312+ 7D59 FE 60       >                        cp     $60
 312+ 7D5B D2 8B 7D    >                        jp		nc,EndofStarsLoop
 313+ 7D5E 3E 92                                ld      a,L2DustColour
 314+ 7D60 0C                                   inc     c
 315+ 7D61 C5                                   push    bc
 316+ 7D62                                      MMUSelectLayer2
 316+ 7D62 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 317+ 7D66 CD B6 E2                             call    l2_plot_pixel
 318+ 7D69 FD 7E 05                             ld      a,(iy+5)
 319+ 7D6C C1                                   pop    bc
 320+ 7D6D                                      JumpIfAGTENusng $37,EndofStarsLoop
 320+ 7D6D FE 37       >                        cp     $37
 320+ 7D6F D2 8B 7D    >                        jp		nc,EndofStarsLoop
 321+ 7D72 3E 92                                ld      a,L2DustColour
 322+ 7D74 04                                   inc     b
 323+ 7D75 C5                                   push    bc
 324+ 7D76                                      MMUSelectLayer2
 324+ 7D76 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 325+ 7D7A CD B6 E2                             call    l2_plot_pixel
 326+ 7D7D FD 7E 05                             ld      a,(iy+5)
 327+ 7D80 C1                                   pop    bc
 328+ 7D81 3E 92                                ld      a,L2DustColour
 329+ 7D83 0D                                   dec     c
 330+ 7D84                                      MMUSelectLayer2
 330+ 7D84 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 331+ 7D88 CD B6 E2                             call    l2_plot_pixel
 332+ 7D8B C1           EndofStarsLoop:         pop     bc                                      ;  0
 333+ 7D8C FD E5        NextStarLoop3:          push    iy                                      ; +1
 334+ 7D8E E1                                   pop     hl                                      ;  0
 335+ 7D8F ED 34 06 00                          add     hl,6
 336+ 7D93 E5           NextStarLoop2:          push    hl                                      ; +1
 337+ 7D94 FD E1                                pop     iy                                      ;  0
 338+ 7D96 05                                   dec     b
 339+ 7D97 C2 05 7C                             jp      nz,StarProcessLoop
 340+ 7D9A C9                                   ret
 341+ 7D9B C1           ResetStar:              pop     bc                                      ; 0
 342+ 7D9C FD E5                                push    iy                                      ; +1 (current star)
 343+ 7D9E E1                                   pop     hl                                      ; 0
 344+ 7D9F CD 18 7B                             call    InitStarAtHL
 345+ 7DA2 C3 8C 7D                             jp      NextStarLoop3
 346+ 7DA5              ;----------------------------------------------------------------------------------------------------------------------------------
 347+ 7DA5 FD 4E 00     ProjectStarXToScreen:   ld      c,(iy+0)
 348+ 7DA8 FD 7E 01                             ld      a,(iy+1)
 349+ 7DAB 6F                                   ld      l,a
 350+ 7DAC E6 7F                                and     $7F
 351+ 7DAE 47                                   ld      b,a
 352+ 7DAF CD F7 95                             call    DIV16BCDivDEUNDOC
 353+ 7DB2 7D                                   ld      a,l
 354+ 7DB3                                      JumpOnBitSet a,7,StarXNegativePoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 354+ 7DB3 CB 7F       >                        bit 	7,a
 354+ 7DB5 C2 C0 7D    >                        jp      nz,StarXNegativePoint
 355+ 7DB8              ;StarXPositivePoint:									; x was positive result
 356+ 7DB8 2E 80                                ld          l,ScreenCenterX						;
 357+ 7DBA 26 00                                ld          h,0
 358+ 7DBC 09                                   add         hl,bc								; hl = Screen Centre + X
 359+ 7DBD C3 C7 7D                             jp          StarStoreXPoint
 360+ 7DC0              StarXNegativePoint:                                 ; x < 0 so need to subtract from the screen centre position
 361+ 7DC0 2E 80                                ld          l,ScreenCenterX
 362+ 7DC2 26 00                                ld          h,0
 363+ 7DC4                                      ClearCarryFlag
 363+ 7DC4 B7          >                        or a
 364+ 7DC5 ED 42                                sbc         hl,bc                               ; hl = Screen Centre - X
 365+ 7DC7              StarStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 366+ 7DC7 7D                                   ld          a,l
 367+ 7DC8 32 EF 80                             ld          (varStarX),a
 368+ 7DCB C9                                   ret
 369+ 7DCC
 370+ 7DCC FD 46 02     ProjectStarYToScreen:   ld          b,(iy+2)
 371+ 7DCF FD 7E 03                             ld          a,(iy+3)
 372+ 7DD2 6F                                   ld          l,a
 373+ 7DD3 E6 7F                                and         $7F
 374+ 7DD5 47                                   ld          b,a
 375+ 7DD6 CD F7 95                             call        DIV16BCDivDEUNDOC
 376+ 7DD9 7D                                   ld          a,l                                 ; XX15+2 \ sign of X dist
 377+ 7DDA                                      JumpOnBitSet a,7,StarNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
 377+ 7DDA CB 7F       >                        bit 	7,a
 377+ 7DDC C2 E7 7D    >                        jp      nz,StarNegativeYPoint
 378+ 7DDF                                  ;StarPositiveYPoint:									; Y is positive so above the centre line
 379+ 7DDF 2E 60                               ld          l,ScreenCenterY
 380+ 7DE1                                      ClearCarryFlag
 380+ 7DE1 B7          >                        or a
 381+ 7DE2 ED 42                                sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
 382+ 7DE4 C3 EC 7D                             jp          StarStoreYPoint
 383+ 7DE7              StarNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
 384+ 7DE7 2E 60                                ld          l,ScreenCenterY
 385+ 7DE9 26 00                                ld          h,0
 386+ 7DEB 09                                   add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
 387+ 7DEC              StarStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 388+ 7DEC 7D                                   ld          a,l
 389+ 7DED 32 F0 80                             ld          (varStarY),a
 390+ 7DF0 C9                                   ret
 391+ 7DF1
 392+ 7DF1
# file closed: ./Universe/StarDust/StarRoutines.asm
 606  7DF1              ;    include "Universe/move_object-MVEIT.asm"
 607  7DF1              ;    include "./ModelRender/draw_object.asm"
 608  7DF1              ;    include "./ModelRender/draw_ship_point.asm"
 609  7DF1              ;    include "./ModelRender/drawforwards-LL17.asm"
 610  7DF1              ;    include "./ModelRender/drawforwards-LL17.asm"
 611  7DF1
 612  7DF1                  INCLUDE	"./Hardware/memfill_dma.asm"
# file opened: ./Hardware/memfill_dma.asm
   1+ 7DF1
   2+ 7DF1 00           memfillvalue		DB 0
   3+ 7DF2 83 C3 C7 CB  memfill        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   3+ 7DF6 7D
   4+ 7DF7 F1 7D        memfill_astrt  		DW memfillvalue
   5+ 7DF9 00 40        memfill_length 		DB $00,$40
   6+ 7DFB 24 10 AD     					DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   7+ 7DFE 00 00        memfill_bstrt  		DB $00,$00
   8+ 7E00 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   9+ 7E04              memfill_cmd_len	  	EQU $ - memfill
  10+ 7E04
  11+ 7E04              memfill_dma:
  12+ 7E04              ; "memfill_dma, hl = address to fill, a = value, de = length"
  13+ 7E04              .set_fill_value:
  14+ 7E04 32 F1 7D     	ld 		(memfillvalue),a
  15+ 7E07              .set_target:
  16+ 7E07 22 FE 7D     	ld		(memfill_bstrt),hl
  17+ 7E0A              .set_length:
  18+ 7E0A ED 53 F9 7D  	ld		(memfill_length),de
  19+ 7E0E              .write_dma:
  20+ 7E0E 21 F2 7D     	ld 		hl, memfill
  21+ 7E11 06 12        	ld 		b, memfill_cmd_len
  22+ 7E13 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  23+ 7E15 ED B3        	otir
  24+ 7E17 C9           	ret
  25+ 7E18
# file closed: ./Hardware/memfill_dma.asm
 613  7E18                  INCLUDE	"./Hardware/memcopy_dma.asm"
# file opened: ./Hardware/memcopy_dma.asm
   1+ 7E18
   2+ 7E18 83 C3 C7 CB  memcopy        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   2+ 7E1C 7D
   3+ 7E1D 00 00        memcopy_astrt  		DB $00,$00
   4+ 7E1F 00 40        memcopy_length 		DB $00,$40
   5+ 7E21 14 10 CD     					DB DMA_WR1_P1INC_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_BURST_MODE;DMA_WR4_CONT_MODE
   6+ 7E24 00 00        memcopy_bstrt  		DB $00,$00
   7+ 7E26 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   8+ 7E2A              memcopy_cmd_len	  	equ $ - memcopy
   9+ 7E2A
  10+ 7E2A              memcopy_dma:
  11+ 7E2A              ; "memcopy_dma, hl = target address de = source address to copy, bc = length"
  12+ 7E2A              .set_target:
  13+ 7E2A 22 24 7E     	ld		(memcopy_bstrt),hl
  14+ 7E2D              .set_source:
  15+ 7E2D ED 53 1D 7E  	ld		(memcopy_astrt),de
  16+ 7E31              .set_length:
  17+ 7E31 ED 43 1F 7E  	ld		(memcopy_length),bc
  18+ 7E35              .write_dma:
  19+ 7E35 21 18 7E     	ld 		hl, memcopy
  20+ 7E38 06 12        	ld 		b, memcopy_cmd_len
  21+ 7E3A 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  22+ 7E3C ED B3        	otir
  23+ 7E3E C9           	ret
  24+ 7E3F
# file closed: ./Hardware/memcopy_dma.asm
 614  7E3F                  INCLUDE "./Variables/constant_equates.asm"
# file opened: ./Variables/constant_equates.asm
   1+ 7E3F              ; Rendering and Models
   2+ 7E3F              FaceArraySize               equ 30
   3+ 7E3F              EdgeHeapSize                equ 40
   4+ 7E3F              NodeArraySize               equ 40
   5+ 7E3F              LineArraySize               equ 50; incerased for max of 28 lines, of 4 points of 16 bits each
   6+ 7E3F
   7+ 7E3F              ;Contants
   8+ 7E3F
   9+ 7E3F              SignMask8Bit		    equ %01111111
  10+ 7E3F              SignMask16Bit		    equ %0111111111111111
  11+ 7E3F              SignOnly8Bit		    equ $80
  12+ 7E3F              SignOnly16Bit		    equ $8000
  13+ 7E3F
  14+ 7E3F
  15+ 7E3F
  16+ 7E3F              Bit7Only                equ %10000000
  17+ 7E3F              Bit6Only                equ %01000000
  18+ 7E3F              Bit5Only                equ %00100000
  19+ 7E3F              Bit4Only                equ %00010000
  20+ 7E3F              Bit3Only                equ %00001000
  21+ 7E3F              Bit2Only                equ %00000100
  22+ 7E3F              Bit1Only                equ %00000010
  23+ 7E3F              Bit0Only                equ %00000001
  24+ 7E3F              Bit7Clear               equ %01111111
  25+ 7E3F              Bit6Clear               equ %10111111
  26+ 7E3F              Bit5Clear               equ %11011111
  27+ 7E3F              Bit4Clear               equ %11101111
  28+ 7E3F              Bit3Clear               equ %11110111
  29+ 7E3F              Bit2Clear               equ %11111011
  30+ 7E3F              Bit1Clear               equ %11111101
  31+ 7E3F              Bit0Clear               equ %11111110
  32+ 7E3F              ConstPi				    equ $80
  33+ 7E3F              ConstNorm               equ 197
  34+ 7E3F              ;OpCodes
  35+ 7E3F              OpCodeSCF               equ $37
  36+ 7E3F              OpCodeCCF               equ $3F
  37+ 7E3F              OpCodeAndA              equ $A7
  38+ 7E3F              OpCodeClearCarryFlag    equ OpCodeAndA
  39+ 7E3F
  40+ 7E3F              ;Text Tokens
  41+ 7E3F              EliteToken			    equ $1E			; Token ID for text messsage ---- E L I T E ----
  42+ 7E3F              BrabenBellToken 	    equ $0D
  43+ 7E3F              AcorToken			    equ $0C
  44+ 7E3F              ; Cursor Bits
  45+ 7E3F              CursorClimb             equ %10000000
  46+ 7E3F              CursorDive              equ %01000000
  47+ 7E3F              CursorLeft              equ %00100000
  48+ 7E3F              CursorRight             equ %00010000
  49+ 7E3F              CursorHome              equ %00001000
  50+ 7E3F              CursorRecenter          equ %00000100
  51+ 7E3F
  52+ 7E3F              ; Intro Screen
  53+ 7E3F              TitleShip			    equ	$8C
  54+ 7E3F              RotationUnity		    equ $60
  55+ 7E3F              DBCheckCode			    equ $DB
  56+ 7E3F              MaxVisibility		    equ $1F
  57+ 7E3F              FarInFront			    equ $C0
  58+ 7E3F              ; Equipment Flags
  59+ 7E3F              EquipmentItemFitted     equ $FF
  60+ 7E3F              EquipmentItemNotFitted  equ 0
  61+ 7E3F              ; Universe Managment
  62+ 7E3F              PlanetTypeMeridian      equ 128
  63+ 7E3F              PlanetMinRadius         equ 6
  64+ 7E3F              UniverseBanks           equ 12
  65+ 7E3F              SpaceStationBanks       equ 1
  66+ 7E3F              TotalUniverseBanks      equ UniverseBanks
  67+ 7E3F              UniverseSlotListSize    equ	UniverseBanks
  68+ 7E3F
  69+ 7E3F
  70+ 7E3F              ShipTotalModelCount     equ 44
  71+ 7E3F              ShipTypeScoopable       equ 4         ; a sub set of junk
  72+ 7E3F              ShipTypeJunk            equ 3
  73+ 7E3F              ShipTypeStation         equ 2
  74+ 7E3F              ShipTypeMissile         equ 1
  75+ 7E3F              ShipTypeNormal          equ 0
  76+ 7E3F              ShipTypeText            equ 253
  77+ 7E3F              ShipTypeDebug           equ 254
  78+ 7E3F              ShipTypeEmpty           equ 255
  79+ 7E3F
  80+ 7E3F              SpawnTypeStation        EQU 0
  81+ 7E3F              SpawnTypeAsteroid       EQU SpawnTypeStation        + 1
  82+ 7E3F              SpawnTypeJunk           EQU SpawnTypeAsteroid       + 1
  83+ 7E3F              SpawnTypeCop            EQU SpawnTypeJunk           + 1
  84+ 7E3F              SpawnTypeTrader         EQU SpawnTypeCop            + 1
  85+ 7E3F              SpawnTypeNonTrader      EQU SpawnTypeTrader         + 1
  86+ 7E3F              SpawnTypePirate         EQU SpawnTypeNonTrader      + 1
  87+ 7E3F              SpawnTypeHunter         EQU SpawnTypePirate         + 1
  88+ 7E3F              SpawnTypeThargoid       EQU SpawnTypeHunter         + 1
  89+ 7E3F              SpawnTypeMission        EQU SpawnTypeThargoid       + 1
  90+ 7E3F              SpawnTypeStationDebris  EQU SpawnTypeMission        + 1
  91+ 7E3F              SpawnTypeMissionEvent   EQU SpawnTypeStationDebris  + 1
  92+ 7E3F              SpawnTypeDoNotSpawn     EQU SpawnTypeMissionEvent   + 1
  93+ 7E3F
  94+ 7E3F
  95+ 7E3F              ; Laser and Missile Settings
  96+ 7E3F              ; Laser and Missile
  97+ 7E3F              ShipLaserPower          equ %11110000
  98+ 7E3F              ShipMissileCount        equ %00001111
  99+ 7E3F              ShipMissiles1           equ %00000001
 100+ 7E3F              ShipMissiles2           equ %00000010
 101+ 7E3F              ShipMissiles3           equ %00000011
 102+ 7E3F              ShipMissiles4           equ %00000100
 103+ 7E3F              ShipMissiles5           equ %00000101
 104+ 7E3F              ShipMissiles6           equ %00000110
 105+ 7E3F              ShipMissiles7           equ %00000111
 106+ 7E3F              ShipMissiles8           equ %00001000
 107+ 7E3F              ShipMissiles9           equ %00001001
 108+ 7E3F              ShipMissiles10          equ %00001010
 109+ 7E3F              ShipMissiles11          equ %00001011
 110+ 7E3F              ShipMissiles12          equ %00001100
 111+ 7E3F              ShipMissiles13          equ %00001101
 112+ 7E3F              ShipMissiles14          equ %00001110
 113+ 7E3F              ShipMissiles15          equ %00001111
 114+ 7E3F              ; AI Flags  UniverseAIControl
 115+ 7E3F              ShipCanAnger            equ %10000000   ; Yes or no
 116+ 7E3F              ShipFighterBaySize      equ %01110000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 117+ 7E3F              ShipFighterBaySize1     equ %00010000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 118+ 7E3F              ShipFighterBaySize2     equ %00100000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 119+ 7E3F              ShipFighterBaySize3     equ %00110000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 120+ 7E3F              ShipFighterBaySize4     equ %01000000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 121+ 7E3F              ShipFighterBaySize5     equ %01010000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 122+ 7E3F              ShipFighterBaySizeInf   equ %01110000   ; Infinite fighters (well 255 as thats enough)
 123+ 7E3F              ShipFighterType         equ %00001100   ; 4 types 0 = Worm, 1 = Sidewinder, 2 = Viper, 3 = Thargon
 124+ 7E3F              ShipFighterWorm         equ %00000000
 125+ 7E3F              ShipFighterSidewinder   equ %00000100
 126+ 7E3F              ShipFighterViper        equ %00001000
 127+ 7E3F              ShipFighterThargon      equ %00001100
 128+ 7E3F              ShipUltraHostile        equ %00000010   ; If ultra hostile, will never back down so behaves like a missile
 129+ 7E3F              ShipFree                equ $00000011   ; Unused bits at present for later
 130+ 7E3F              ; NewBTactics
 131+ 7E3F              ShipIsTrader            equ Bit0Only   ; Trader flag  80% are peaceful 20% also have Bounty Hunter flag
 132+ 7E3F              ShipIsBountyHunter      equ Bit1Only   ;
 133+ 7E3F              ShipIsHostile           equ Bit2Only   ; Also used as Angry flag now
 134+ 7E3F              ShipIsPirate            equ Bit3Only   ;
 135+ 7E3F              ShipIsDocking           equ Bit4Only   ;
 136+ 7E3F              ShipIsBystander         equ Bit5Only   ;
 137+ 7E3F              ShipIsCop               equ Bit6Only   ;
 138+ 7E3F              ShipHasEscapePod        equ Bit7Only   ;
 139+ 7E3F              ShipHostileNewBitNbr    equ 2
 140+ 7E3F
 141+ 7E3F              ; UBnkaiatkecm
 142+ 7E3F              ;Unused                 equ Bit0Only
 143+ 7E3F              ;Unused                 equ Bit1Only
 144+ 7E3F              ;Unused                 equ Bit2Only
 145+ 7E3F              ShipIsDot               equ Bit3Only
 146+ 7E3F              ShipKilled              equ Bit4Only    ; Ship has just been marked as killed so initiate cloud of debris
 147+ 7E3F              ShipExploding           equ Bit5Only
 148+ 7E3F              ShipIsVisible           equ Bit6Only
 149+ 7E3F              ShipAIEnabled           equ Bit7Only   ;
 150+ 7E3F
 151+ 7E3F
 152+ 7E3F              ; UBnkaiakecm 2
 153+ 7E3F              ;ShipAngryNewBitNbr      equ 4
 154+ 7E3F              ShipExplosionDuration   equ 75         ; amount of frames an explosion lasts for
 155+ 7E3F              ShipNotHostile          equ Bit2Clear   ;
 156+ 7E3F              ShipIsNotDot            equ Bit3Clear
 157+ 7E3F              ShipIsDotBitNbr         equ 3
 158+ 7E3F              ShipKilledBitNbr        equ 4
 159+ 7E3F              ShipIsVisibleBitNbr     equ 6
 160+ 7E3F              ShipIsScoopDockEsc      equ Bit7Only   ;
 161+ 7E3F              ShipAIDisabled          equ Bit7Clear
 162+ 7E3F              ShipAIEnabledBitNbr     equ 7
 163+ 7E3F              ShipExplodingBitNbr     equ 5
 164+ 7E3F              ; Equipment Defaults
 165+ 7E3F              ECMCounterMax           equ $80
 166+ 7E3F              ; Main Loop State
 167+ 7E3F              StatePlayerDocked       equ $FF
 168+ 7E3F              StateCompletedLaunch    equ $FD
 169+ 7E3F              StateInTransition       equ $FE
 170+ 7E3F              StateHJumping           equ $FC
 171+ 7E3F              StateHEntering          equ $FB
 172+ 7E3F              StateCompletedHJump     equ $FA
 173+ 7E3F              StateNormal             equ 0
 174+ 7E3F              ; Missile Stage flags , $8x = locked to ship id x, $0x = fire at ship id x requested
 175+ 7E3F              StageMissileNotTargeting equ $FF
 176+ 7E3F              StageMissileTargeting   equ $FE
 177+ 7E3F
 178+ 7E3F
 179+ 7E3F              ShipMaxDistance         equ 192
 180+ 7E3F              HyperSpaceTimers        equ $0B0B
 181+ 7E3F
 182+ 7E3F              ; -- game limts
 183+ 7E3F              MaxNumberOfStars	    equ 11
 184+ 7E3F              ConsoleRefreshInterval  equ 5
 185+ 7E3F              MaxJunkStation          equ 3
 186+ 7E3F              MaxJunkFreeSpace        equ 5
 187+ 7E3F              WarpCoolDownPeriod      equ 90
 188+ 7E3F
 189+ 7E3F              ShipTypeSize		    equ	32 			;??????? just a guess for now
 190+ 7E3F              ShipSST				    equ 4			; its a space station
 191+ 7E3F              UniverseBasePage 	    equ 70			; Base memory bank for universe Item #0
 192+ 7E3F              ShipDataBasePage	    equ	90			; Needs 2mb upgrade but what the heck
 193+ 7E3F              ShipCountMax		    equ	2			; For now just 2 ships to debug
 194+ 7E3F              LineLimitPerShip	    equ 70			; Max lines per ship
 195+ 7E3F              FaceLimitPerShip	    equ	70			; Same as line limit to simplify some logic
 196+ 7E3F              ; "NEED TO DEFINE SHIPTYPESIZE TODO"
 197+ 7E3F
 198+ 7E3F              ; Memory page managment	(Refers to a memory slot as a place to access data)
 199+ 7E3F              ShipDataSlot		    equ	6			; this may move into rom swap out space later
 200+ 7E3F              UniverseObjectSlot	    equ	7
 201+ 7E3F
 202+ 7E3F              KeyForwardsView		    equ	$20
 203+ 7E3F              ; Game specific equates
 204+ 7E3F              MissileDropHeight       equ 5           ; how far the missile is ejected on launch in y axis
 205+ 7E3F              WarpSequenceCount       equ 50
 206+ 7E3F
 207+ 7E3F              ;...Game Colour Mapping
 208+ 7E3F              L2DustColour            equ L2ColourGREY_1
 209+ 7E3F              L2SunScannerBright      equ 252
 210+ 7E3F              L2SunScanner            equ 180
 211+ 7E3F              L2DebrisColour          equ L2ColourYELLOW_1
 212+ 7E3F              L2PlanetScannerBright   equ 20
 213+ 7E3F              L2PlanetScanner         equ 16
 214+ 7E3F
 215+ 7E3F
 216+ 7E3F              ; Ship Data
 217+ 7E3F              ;;;;	.XX21	\ -> &5600 \ Table of pointers to ships' data given to XX0
 218+ 7E3F              ;;;;00 7F			 EQUW &7F00 \ type  1 is #MSL  Missile data on page off bottom of screen
 219+ 7E3F              ;;;;00 00			 EQUW 0     \ type  2 is #SST  Space Station, Coriolis or Dodo.
 220+ 7E3F              ;;;;00 00			 EQUW 0     \ type  3 is #ESC  Escape capsule
 221+ 7E3F              ;;;;00 00			 EQUW 0     \ type  4 is #PLT  Plate, alloys
 222+ 7E3F              ;;;;00 00			 EQUW 0     \ type  5 is #OIL  Cargo cannister
 223+ 7E3F              ;;;;00 00			 EQUW 0     \ type  6 is       Boulder
 224+ 7E3F              ;;;;00 00			 EQUW 0     \ type  7 is #AST  Asteroid
 225+ 7E3F              ;;;;00 00			 EQUW 0     \ type  8 is #SPL  Splinter, rock.
 226+ 7E3F              ;;;;00 00			 EQUW 0     \ type  9 is #SHU  Shuttle
 227+ 7E3F              ;;;;00 00			 EQUW 0     \ type 10 is       Transporter
 228+ 7E3F              ;;;;00 00			 EQUW 0     \ type 11 is #CYL  Cobra Mk III,  Boa
 229+ 7E3F              ;;;;00 00			 EQUW 0     \ type 12 is       Python
 230+ 7E3F              ;;;;00 00			 EQUW 0     \ type 13 is       Last of three traders
 231+ 7E3F              ;;;;00 00			 EQUW 0     \ type 14 is #ANA  Anaconda
 232+ 7E3F              ;;;;00 00			 EQUW 0     \ type 15 is #WRM  Worm with Anaconda
 233+ 7E3F              ;;;;00 00			 EQUW 0     \ type 16 is #COP  Viper
 234+ 7E3F              ;;;;00 00			 EQUW 0     \ type 17 is       First pirate
 235+ 7E3F              ;;;;00 00			 EQUW 0     \ type 18 is
 236+ 7E3F              ;;;;00 00			 EQUW 0     \ type 19 is #KRA  Krait small pirate
 237+ 7E3F              ;;;;00 00			 EQUW 0     \ type 20 is #ADA  Adder
 238+ 7E3F              ;;;;00 00			 EQUW 0     \ type 21 is
 239+ 7E3F              ;;;;00 00			 EQUW 0     \ type 22 is
 240+ 7E3F              ;;;;00 00			 EQUW 0     \ type 23 is
 241+ 7E3F              ;;;;00 00			 EQUW 0     \ type 24 is #CYL2 Last strong pirate
 242+ 7E3F              ;;;;00 00			 EQUW 0     \ type 25 is #ASP  Asp Mk II
 243+ 7E3F              ;;;;00 00			 EQUW 0     \ type 26 is #FER  Fer de Lance
 244+ 7E3F              ;;;;00 00			 EQUW 0     \ type 27 is
 245+ 7E3F              ;;;;00 00			 EQUW 0     \ type 28 is	Last of three bounty hunters
 246+ 7E3F              ;;;;00 00			 EQUW 0     \ type 29 is #THG  Thargoid
 247+ 7E3F              ;;;;00 00			 EQUW 0     \ type 30 is #TGL  Thargon
 248+ 7E3F              ;;;;00 00			 EQUW 0     \ type 31 is #CON  Constrictor
 249+ 7E3F              ;;;;	.E%	\ -> &563E \ Hull NEWB bits are escpod, cop, inno, ?, pirate, angry, hunter, trader.
 250+ 7E3F              ;;;;			\ NEWB examples
 251+ 7E3F              ;;;;\ 21			EQUB &21    \ 0010 0001    9 Shuttle has no escape pod, inno, trader.
 252+ 7E3F              ;;;;\ 61			EQUB &61    \ 0110 0001   10 Tansporter no escape pod, Cop, inno, trader.
 253+ 7E3F              ;;;;\ A0			EQUB &A0    \ 1010 0000   11 Cobra has Escape pod, inno, not a trader.
 254+ 7E3F              ;;;;\ C2			EQUB &C2    \ 1100 0010   16 Viper has Escape pod, Cop, hunter.
 255+ 7E3F              ;;;;\ 8C			EQUB &8C    \ 1000 1100   19 Krait pirate has escape pod, is pirate and angry.
 256+ 7E3F
# file closed: ./Variables/constant_equates.asm
 615  7E3F                  INCLUDE "./Variables/general_variables.asm"
# file opened: ./Variables/general_variables.asm
   1+ 7E3F                  IFNDEF LASER_V2
   2+ 7E3F ~                DEFINE  LASER_V2    1
   3+ 7E3F                  ENDIF
   4+ 7E3F
   5+ 7E3F 00 00        varAxis1	DW 	0				; address of first axis in a rotation action
   6+ 7E41 00 00        varAxis2	DW	0				; address of 2nd axis in a roation action
   7+ 7E43              ; Variables to simulate 6502 registers until code fixed
   8+ 7E43              ; These must be here in this order as reading Y and X can then be a 16 bit read
   9+ 7E43 00           regX		DB	0               ; using 16 bit read into BC this would go into C
  10+ 7E44 00           regY		DB	0               ; using 16 bit read into BC this would go into B
  11+ 7E45 00           regA		DB	0
  12+ 7E46
  13+ 7E46
  14+ 7E46 00           varGPLoopA	DB	0				; General Purpose innermost loop variable
  15+ 7E47 00 00        INF			DW	0				; page 0 &20 Used to get address from UNIV array
  16+ 7E49 00 00        INF28		DW	0				; page 0 &20 Used to get address from UNIV array
  17+ 7E4B
  18+ 7E4B
  19+ 7E4B
  20+ 7E4B              ;XX16		DS	16				; 16 byte Matrix
  21+ 7E4B
  22+ 7E4B              P0INWK							; page 0 & 46
  23+ 7E4B              p0INWK31						; page 0 & 65
  24+ 7E4B              P0INWK36						; PAGE 0 &6A
  25+ 7E4B
  26+ 7E4B 00           XX4			DB	0				; XX4 page 0 &96 last Normal Found to be visible
  27+ 7E4C              LastNormalVisible	equ	XX4
  28+ 7E4C              varXX4              equ XX4
  29+ 7E4C
  30+ 7E4C
  31+ 7E4C
  32+ 7E4C 00           PATG		DB	0				; 6502 &03C9
  33+ 7E4D 00 00        SLSP 		DW	0				; &03B0 \ SLSP \ ship lines pointer
  34+ 7E4F
  35+ 7E4F
  36+ 7E4F              ;UNIV		DS FreeListSize*2	; Array of Universe Pointers
  37+ 7E4F              ;HULLINDEX	DS ShipTypeSize*2	; hull index for table at XX21= &F XX21-1,Y
  38+ 7E4F
  39+ 7E4F              ; These should go into banks really
  40+ 7E4F 00 00        XX12PVarQ			DW 0
  41+ 7E51 00 00        XX12PVarR			DW 0
  42+ 7E53 00 00        XX12PVarS			DW 0
  43+ 7E55 00 00        XX12PVarResult1		DW 0
  44+ 7E57 00 00        XX12PVarResult2		DW 0
  45+ 7E59 00 00        XX12PVarResult3		DW 0
  46+ 7E5B 00           XX12PVarSign2		DB 0
  47+ 7E5C 00           XX12PVarSign1		DB 0								; Note reversed so BC can do a little endian fetch
  48+ 7E5D 00           XX12PVarSign3		DB 0
  49+ 7E5E
  50+ 7E5E              ; Present System Variables
  51+ 7E5E
  52+ 7E5E 2B           RandomSeed				DB	43			    ; 00 DEBUG JUST SOME START VALUES
  53+ 7E5F 20           RandomSeed1				DB	32	            ; 01
  54+ 7E60 0C           RandomSeed2				DB	12			    ; 02
  55+ 7E61 42           RandomSeed3				DB	66			    ; 03
  56+ 7E62 00 00 00 00  RandomSeedSave          DS  4               ; used in explosion routine to save randoms
  57+ 7E66 00           varT1					DB	0				; 06
  58+ 7E67 00           SClo					DB 0				; 07
  59+ 7E68 00           SChi					DB 0				; 08
  60+ 7E69 00           varP					DB 0 				; 10	XX16+7
  61+ 7E6A 00           varPhi					DB 0 				; 11	XX16+8
  62+ 7E6B 00           varPhi2					DB 0 				; 12	XX16+9
  63+ 7E6C              varPp1                  equ varPhi
  64+ 7E6C              varPp2                  equ varPhi2
  65+ 7E6C 00           UnivPointerLo			DB	0				; 20		INF                 XX0+2
  66+ 7E6D 00           UnivPointerHi			DB	0				; 21      INF+1               XX0+3
  67+ 7E6E              UnivPointer				equ	UnivPointerLo
  68+ 7E6E 00           varV					DB 0				; 22                          XX0+4
  69+ 7E6F 00           varVHi					DB 0				; 23                          XX0+5
  70+ 7E70 00           varXXlo                 DB 0                ; 24
  71+ 7E71 00           varXXHi                 DB 0                ; 25
  72+ 7E72              varXX					equ	varXXlo
  73+ 7E72 00           YYlo                    DB 0                ; 26
  74+ 7E73 00           YYHi                    DB 0                ; 27
  75+ 7E74              varYY					equ	YYlo
  76+ 7E74                                                          ;	28
  77+ 7E74              											;	29
  78+ 7E74              ;PlayerShipPositionData - Must be contiguous for setup
  79+ 7E74 00           BETA 					DB	0               ; 2A        (pitch done)
  80+ 7E75 00           JSTY                    DB  0               ; Joystick analog
  81+ 7E76 00           BET1 					DB	0               ; 2B        lower7 magnitude
  82+ 7E77 00           BET2                    DB  0               ;            climb sign
  83+ 7E78 00           BET2FLIP				DB	0				; 7C		BET 2 pitch Sign negated
  84+ 7E79 1F           BET1MAXC                DB  31              ; max climb
  85+ 7E7A E1           BET1MAXD                DB  -31             ; max dive
  86+ 7E7B 00           XC						DB	0               ; 2C
  87+ 7E7C 00           YC						DB 	0               ; 2D
  88+ 7E7D              ; This is used when passing data between space station to ship offset, sun and planet to correct positions
  89+ 7E7D 00 00 00     LaunchedX               DS  3
  90+ 7E80 00 00 00     LaunchedY               DS  3
  91+ 7E83 00 00 00     LaunchedZ               DS  3
  92+ 7E86
  93+ 7E86              ;... ECM logic. If another ship adds ECM then we just set the loop A and B to starting values so they overlap
  94+ 7E86 00           ECMCountDown            DB  0
  95+ 7E87 00           ECMLoopB                DB  0
  96+ 7E88 00 00        JSTX                    DW  0               ;           Joystick analog value
  97+ 7E8A 00           ALPHA					DB	0				; 8D        Alpha with bit 7 sign
  98+ 7E8B 00           ALP1					DB 	0				; 31		ALP1	Roll magnitude Also Apha
  99+ 7E8C 00           ALP2					DB  0				; 32		ALP2	Roll Sign
 100+ 7E8D 00           ALP2FLIP				DB  0				; 33		ALP2	negated roll sign
 101+ 7E8E 1F           ALP1MAXR                DB  31               ;   Maximum roll, added becuase we may allow different ship types
 102+ 7E8F E1           ALP1MAXL                DB  -31             ;   Maximum roll, added becuase we may allow different ship types
 103+ 7E90
 104+ 7E90
 105+ 7E90              ;-- Message handler -----------------------------------------------------------------------------------------------------------------
 106+ 7E90              MAXMESSAGES             EQU 5
 107+ 7E90              MESSAGETIMELIMIT        EQU 20
 108+ 7E90              MESSAGESIZE             EQU 33
 109+ 7E90              MESSAGELINE             EQU $0001
 110+ 7E90
 111+ 7E90 00           MessageCount            DB  0                ; used for enquing messages later
 112+ 7E91 00           MessageCurrent          DB  0
 113+ 7E92 05 00        MessageIndex            DW  MAXMESSAGES
 114+ 7E94 00 00 00...  MessageQueue            DS  MAXMESSAGES * MESSAGESIZE
 115+ 7F39 05           MessageTimeout          DB  MAXMESSAGES
 116+ 7F3A 00 00 00...  IndexedWork				DS	37				; General purpose work space when doing temp arrays
 117+ 7F5F
 118+ 7F5F              ; MOVED TO Universe XX19					DB	0				; page 0 &67
 119+ 7F5F              ; MOVED TO Universe XX20					DB	0				; page 0 &67 also used as XX19+1 for XX19 being a word
 120+ 7F5F              ;DEFUNCT EQUATE NormalCountCopyBy4		equ	XX20			; Also used for normal * 4 holding variable
 121+ 7F5F 00           XX21					DB  0				; this may be part of XX20/xx21 accordign to spawn new shipXX21		DW	0				; Ah XX21 is hull pointer  hull pointer lo as it can;t hold HULLINDX as 16bit array
 122+ 7F60              ;XX21 is the pointer table to the pages for ship types. this will be repalaced by paging so just need an equate for first page
 123+ 7F60
 124+ 7F60
 125+ 7F60 00           QQ17					DB	0				;   72
 126+ 7F61 00           XX18xlo                 DB  0               ;	72		XX18   xlo
 127+ 7F62 00           XX18xhi                 DB  0               ;	73		XX18+1 xhi
 128+ 7F63 00           XX18xsg                 DB  0               ;	74		XX18+2 xsgn
 129+ 7F64 00           XX18ylo                 DB  0               ;	75		XX18   ylo
 130+ 7F65 00           XX18yhi                 DB  0               ;	76		XX18+1 yhi
 131+ 7F66 00           XX18ysg                 DB  0               ;	77		XX18+2 ysgn
 132+ 7F67 00           XX18zlo                 DB  0               ;	78		XX18   zlo
 133+ 7F68 00           XX18zhi                 DB  0               ;	79		XX18+1 zhi
 134+ 7F69 00           XX18zsg                 DB  0               ;	7A		XX18+2 zsgn
 135+ 7F6A
 136+ 7F6A 28           SHIPMAXSPEED            DB  40              ; variable to facilitate ship editing later
 137+ 7F6B 00           DELTA					DB 	0				; 7D 		DELTA  \ bpl -2 inserted here to stall from title code if byte check fails
 138+ 7F6C 00           DELT4Lo					DB 	0				; 7E
 139+ 7F6D 00           DELT4Hi					DB 	0				; 7F
 140+ 7F6E              DELTA4                  equ                 DELT4Lo
 141+ 7F6E
 142+ 7F6E              ; SoundFX Variables -------------------------------------------------------------------------------------------
 143+ 7F6E              ;DEFUNCT, uses DELTA/ LAST_DELTAEngineSoundChanged:     DB  0
 144+ 7F6E FF           SoundFxToEnqueue        DB  $FF             ; $FF No sound to enque,if it is $FF then next sound will not get enqued
 145+ 7F6F 00           InterruptCounter        DB 0                ; simple marker updated once per IM2 event
 146+ 7F70
 147+ 7F70
 148+ 7F70              ; Not thise must be in this order else 16 bit fetches will fail
 149+ 7F70 00           varU                    DB  0               ;   80
 150+ 7F71 00           varQ					DB  0 				;	81
 151+ 7F72 00           varR					DB  0 				;	82
 152+ 7F73 00           varS					DB  0 				;	83
 153+ 7F74              varRS                   equ varR
 154+ 7F74
 155+ 7F74 00 00        varU16                  DW  0               ; 16 bit variant on varU as I can't use above for this
 156+ 7F76
 157+ 7F76 00           XSAV					DB	0				; 84	   XSAV usef for nearby ship count outer
 158+ 7F77 00           YSAV                    DB  0               ; 85
 159+ 7F78 00           XX17					DB	0				; 86
 160+ 7F79              RequiredScale			equ  XX17			; use to hold calculated scale in drawing ship
 161+ 7F79              varXX17                 equ  XX17
 162+ 7F79 00           ScreenChanged           DB  0
 163+ 7F7A 00           ScreenIndex             DB  0
 164+ 7F7B 00 00        ScreenIndexTablePointer DW  0
 165+ 7F7D 00           InvertedYAxis           DB  0
 166+ 7F7E 00           MenuIdMax				DB	0				;	87		MenuIdMax		QQ11
 167+ 7F7F              											; Bit 7 Set  ShortRangeChart    $80
 168+ 7F7F              											; Bit 6 Set  Galactic Chart     $40
 169+ 7F7F              											; Bit 5 Set  Market Place       $20
 170+ 7F7F              											; Bit 4 Set  Status Screen      $10
 171+ 7F7F              											; Bit 3 Set  Display Inventory  $08
 172+ 7F7F                                                          ; Bit 2 Set  Planet Data        $04
 173+ 7F7F                                                          ; View bit combinations if the ones above not matched
 174+ 7F7F                                                          ; bits 1 0
 175+ 7F7F                                                          ;      1 1  Front view , i.e. $03
 176+ 7F7F                                                          ;      1 0  Aft View          $02
 177+ 7F7F                                                          ;      0 1  Left View         $01
 178+ 7F7F                                                          ;      0 0  Right view        $00
 179+ 7F7F              											; Bit 0 Set  Data On System
 180+ 7F7F              											; 0  Space View (Not a menu)
 181+ 7F7F 00           ZZDust					DB	0				;	88		ZZDust (Poss 16 bit need to check)
 182+ 7F80 00           XX13                    DB  0               ;   89
 183+ 7F81 00           TYPE					DB	0				; 8C used for ship type in drawing
 184+ 7F82              ;Docked flag = 00 = in free space
 185+ 7F82              ;              FF = Docked
 186+ 7F82              ;              FE = transition
 187+ 7F82              ;              FD = Setup open space and transition to not docked
 188+ 7F82              ;              FC = Hyperspace manimation
 189+ 7F82              ;              FB = Hyperspace complete
 190+ 7F82 00           varSWAP                 DB  0               ; 90 , general purpose swap variable
 191+ 7F83 00           varCNT                  DB  0               ; 93
 192+ 7F84
 193+ 7F84 00           varK					DB	0				; 40
 194+ 7F85 00           varKp1					DB	0				; 41
 195+ 7F86 00           varKp2					DB	0				; 42
 196+ 7F87 00           varKp3					DB	0				; 43
 197+ 7F88
 198+ 7F88 00           varK2                   DB  0               ; 9B
 199+ 7F89 00           varK2p1                 DB  0               ; 9C K2 plus 1
 200+ 7F8A 00           varK2p2                 DB  0               ; 9D K2 plus 2
 201+ 7F8B 00           varK2p3                 DB  0               ; 9E K2 plus 3
 202+ 7F8C
 203+ 7F8C 00           Point                   DB  0               ; 9F      POINT
 204+ 7F8D
 205+ 7F8D 00           varT					DB	0				; D1
 206+ 7F8E 00           varTSign                DB  0               ; for teh odd need for a 16 bit varT
 207+ 7F8F
 208+ 7F8F 00 00 00...  varVector9ByteWork      DS  9
 209+ 7F98
 210+ 7F98 00 00 00 00  varK3					DS	4				; D2
 211+ 7F9C 00           varK3p2					DB	0				; 42
 212+ 7F9D 00           varK3p3					DB	0				; 43
 213+ 7F9E              varK3p1					equ varK3+1			; D3
 214+ 7F9E 00 00 00 00  varK4					DS	4				; E0
 215+ 7FA2              varK4p1					equ varK4+1			; D3
 216+ 7FA2 00 00 00...  varK5                   DS  6
 217+ 7FA8              varK5p2                 equ varK5+2
 218+ 7FA8 00 00 00...  varK6                   DS  6
 219+ 7FAE              varK6p2                 equ varK6+2
 220+ 7FAE              ;Heap
 221+ 7FAE
 222+ 7FAE 00 00        HeapStart				DS	2				; &0100 XX3 50 bytes for now
 223+ 7FB0 00 00 00...  HeapData				DS	50
 224+ 7FE2              ; Contains 				X 16 bit, Y ;MissileArmedStatus		DB	0				; 0344 MSAR   using MissileTarget, if missile is not armed tehn target is FF
 225+ 7FE2              ; TODO will need an read for a list of missiles, who they are targeting an the target current vector for AI persuit
 226+ 7FE2              ; i.e. a list of programmed missiles in universe slot list code
 227+ 7FE2 00 00 00...  DampingKeys				DS  7				; 0387 - 038D
 228+ 7FE9              ;  #&6 Does K toggle keyboard/joystick control -  03CD certainly makes keyboard not work anymore.
 229+ 7FE9              ;  #&5 Does J reverse both joystick channels
 230+ 7FE9              ;  #&4 Does Y reverse joystick Y channel			03CB
 231+ 7FE9              ;  #&2 Does X toggle startup message display ? PATG?	03C9
 232+ 7FE9              ;  #&3 Does F toggle flashing information			03CA
 233+ 7FE9              ;  #&1 Does A toggle keyboard auto-recentering ?
 234+ 7FE9              ;  #&0 Caps-lock toggles keyboard flight damping
 235+ 7FE9
 236+ 7FE9              ;-- Galaxy and Universe Variables ----------------------------------------------------------------------------------------------------
 237+ 7FE9 00 00 00...  SystemSeed				DS  5				;	6C		QQ15	Current Galaxy Seed
 238+ 7FEE 00 00 00...  StockAvaliabiliy		DS 	16				; 038D - 039C Stock inventory in station
 239+ 7FFE 00           AlienItemsAvaliability  DB	0				; 039D
 240+ 7FFF 00           RandomMarketSeed		DB	0				; 039E   \ QQ26	\ random byte for each system vist (for market)
 241+ 8000 00           Galaxy      			DB	0				; 0367 Galaxy (incremented with galactiv drive
 242+ 8001 00 00 00...  WorkingSeeds			DS	6
 243+ 8007 00 00 00...  PresentSystemSeeds		DS	6				; 03B2 - 03B7
 244+ 800D 00 00 00...  GalaxySeeds				DS	6				; 035B - 0360 QQ21
 245+ 8013 00           PresentSystemX			DB	0				; System we are currently in
 246+ 8014 00           PresentSystemY			DB  0				; System we are currently in
 247+ 8015 00           TargetSystemX			DB	0				; System we are targeting for jump
 248+ 8016 00           TargetSystemY			DB	0				; System we are targeting for jump
 249+ 8017              ; --- Current System Data ------------------------------------------------------------------------------------------------------------
 250+ 8017 00           GovPresentSystem		DB	0				; 03AE Govenment
 251+ 8018 00           TekPresentSystem		DB	0				; 03AF Technology
 252+ 8019 00           SpaceStationSafeZone    DB  0               ; Flag to determine if we are in safe zone
 253+ 801A 00           ExtraVesselsCounter     DB  0
 254+ 801B 00           JunkCount				DB  0				; $033E
 255+ 801C 00           AsteroidCount           DB  0               ; Not used as yet
 256+ 801D 00           TransporterCount        DB  0
 257+ 801E 00           CopCount                DB  0
 258+ 801F 00           PirateCount             DB  0
 259+ 8020              ;- commander and ship state variables ------------------------------------------------------------------------------------------------
 260+ 8020 00           NbrMissiles				DB	0				; 038B	Does this clash with Dampingkeys?
 261+ 8021 00           PlayerECMActiveCount    DB  0               ; Countdown for player ECM
 262+ 8022 00           FugitiveInnocentStatus	DB	0				; 038C	FIST
 263+ 8023 00 00        KillTally  				DW	0				; 039F - 03A0 \ TALLY   \ kills lo hi
 264+ 8025 00           CurrentRank             DB  0   			;
 265+ 8026 00           MarketPrice				DB	0				; 03AA QQ24
 266+ 8027 00           MaxStockAvaliable		DB  0				; 03AB   \ QQ25     \ max available
 267+ 8028 00           SystemEconomy			DB  0				; 03AC \ QQ28   \ the economy byte of present system (0 is Rich Ind.)
 268+ 8029 00           CargoItem				DB	0				; 03AD (I think its item type just scooped) QQ29
 269+ 802A 00 00        ShipLineStackPointer	DW	0				; 03B0 & 03B1 ship Lines pointer reset to top LS% = &0CFF (make DW for z80 and direct hl pointer)
 270+ 802C              											; this is ship lines stack pointer so may be redundant with paging
 271+ 802C              											; LS = line stack so we will have one for now to remove later
 272+ 802C              ; - no longer used, holding here intil its safe to delte
 273+ 802C 00           MCH						DB	0				; 03A4  \ MCH  \ old message to erase
 274+ 802D 00           COMP     				DB	0				; 03A1 2nd competion byte used for save integrity checks?
 275+ 802E              ; not needed as we don't do security on file COK						DB	0				; 0366 Competition Byte what ? Does some file check and accelleration check
 276+ 802E              ; - no longer used, holding here intil its safe to delte
 277+ 802E
 278+ 802E 00           DisplayEcononmy			DB	0				; 03B8
 279+ 802F 00           DisplayGovernment		DB  0				; 03B9 Is it target? 03B9 \ QQ4	 \ Government, 0 is Anarchy.
 280+ 8030 00           DisplayTekLevel			DB	0				; 03BA   \ QQ5	\ Tech
 281+ 8031 00 00        DisplayPopulation		DW	0				; 03BB \ QQ6  \ population*10
 282+ 8033 00 00        DisplayProductivity		DW	0				; 03BD \ QQ7   \ productivity*10
 283+ 8035 00 00        Distance          		DW	0				; 03BE \ QQ8 distince in 0.1LY units
 284+ 8037 00 00        DisplayRadius			DW	0
 285+ 8039 00 00 00     ParentPlanetX           DS  3               ; used when spawining space station to determine origin
 286+ 803C 00 00 00     ParentPlanetY           DS  3               ;
 287+ 803F 00 00 00     ParentPlanetZ           DS  3               ;
 288+ 8042              ; --- Used in creation of sun and planet ------------------------------------------------------------------------------------------------
 289+ 8042 00           PlanetXPos              DS  1
 290+ 8043 00           PlanetYPos              DS  1
 291+ 8044 00           PlanetZPos              DS  1
 292+ 8045 00           PlanetType              DS  1
 293+ 8046 00           SunXPos                 DS  1
 294+ 8047 00           SunYPos                 DS  1
 295+ 8048 00           SunZPos                 DS  1
 296+ 8049              ; -- Current Missile Runbtime data ------------------------------------------------------------------------------------------------
 297+ 8049 00           CurrentMissileBank:     DB      0                                   ; used by missile logic as local copy of missile bank number
 298+ 804A 00 00        MissileXPos             DW      0
 299+ 804C 00           MissileXSgn             DB      0
 300+ 804D 00 00        MissileYPos             DW      0
 301+ 804F 00           MissileYSgn             DB      0
 302+ 8050 00 00        MissileZPos             DW      0
 303+ 8052 00           MissileZSgn             DB      0
 304+ 8053 00 00        CurrentTargetXpos       DS      2
 305+ 8055 00 00        CurrentTargetXsgn       DS      2
 306+ 8057 00 00        CurrentTargetYpos       DS      2
 307+ 8059 00 00        CurrentTargetYsgn       DS      2
 308+ 805B 00 00        CurrentTargetZpos       DS      2
 309+ 805D 00 00        CurrentTargetZsgn       DS      2
 310+ 805F 00 00        TargetVectorXpos        DS      2
 311+ 8061 00 00        TargetVectorXsgn        DS      2
 312+ 8063 00 00        TargetVectorYpos        DS      2
 313+ 8065 00 00        TargetVectorYsgn        DS      2
 314+ 8067 00 00        TargetVectorZpos        DS      2
 315+ 8069 00 00        TargetVectorZsgn        DS      2
 316+ 806B 00           CurrentMissileBlastRange:      DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 317+ 806C 00           CurrentMissileBlastDamage:     DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 318+ 806D 00           CurrentMissileDetonateRange:   DB  0                       ; TODO Initi for runtime copied in when setting up a missile, allows for proximity missiles
 319+ 806E 00           CurrentMissileDetonateDamage:  DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 320+ 806F              ; --- Spawn Probability Table ---------------------------------------------------------------------------------------------------
 321+ 806F 00 00 00...  SpawnLowVssalue         DS 6                                ; Maxium of 6 entries in table
 322+ 8075 00 00 00...  SpawnHighvalue          DS 6                                ; Maxium of 6 entries in table
 323+ 807B 00 00 00...  ShipClassId             DS 6
 324+ 8081              ; --- Space dust ----------------------------------------------------------------------------------------------------------------
 325+ 8081 00 00 00...  varDustWarpRender       DS MaxNumberOfStars * 2 ; Copy of base positions for warp
 326+ 8097 00 00 00...  varDust                 DS MaxNumberOfStars * 6
 327+ 80D9 00 00 00...  varDustSceen            DS MaxNumberOfStars * 2 ; To optimise star list to wipe from screen
 328+ 80EF 00           varStarX                DB 0
 329+ 80F0 00           varStarY                DB 0
 330+ 80F1 00 00 00...  varDustX                DS MaxNumberOfStars *2
 331+ 8107 00 00 00...  varDustY                DS MaxNumberOfStars *2
 332+ 811D 00 00 00...  varDustZ                DS MaxNumberOfStars *2
 333+ 8133              ; --- Main Loop Data -------------------------------------------------------------------------------------------------------------
 334+ 8133 00           DockedFlag				DB	0				; 8E -
 335+ 8134 00           GamePaused              DB  0
 336+ 8135 00           CurrentUniverseAI       DB  0               ; current ship unviverse slot due an AI update
 337+ 8136 00           SelectedUniverseSlot    DB  0
 338+ 8137 00           SetStationHostileFlag   DB  0               ; used to semaphore angry space station
 339+ 8138 00           ShipBlastCheckCounter   DB  0
 340+ 8139 00           InnerHyperCount			DB 	0				; 2F QQ22+1 (will move to a CTC timer later)
 341+ 813A 00           OuterHyperCount			DB 	0				; 2E QQ22
 342+ 813B 00           WarpCooldown            DB  0
 343+ 813C 00           EventCounter            DB  0
 344+ 813D 00           HyperCircle             DB  0
 345+ 813E 00           MissJumpFlag            DB  0
 346+ 813F 00           PlayerMisJump			DB	0				; $0341 witchspace misjump
 347+ 8140 00           HyperSpaceFX			DB	0				; 0348 HFX (probabyl BBC specific
 348+ 8141 00           ExtraVessels			DB	0				; 0349 EV Use d by cops, extra vessels still to spawn?
 349+ 8142 00           Delay					DB	0				; 034A Delay general purpose eg. spawing EV or when printign messages
 350+ 8143 00           CurrentMissileCheck:    DB  0               ; if > Universe Slot list then free for next missile
 351+ 8144 00           MessageForDestroyed		DB	0				; 034B Message flag for item + destroyed
 352+ 8145 00 00 00...  UniverseSlotList        DS  UniverseSlotListSize
 353+ 8151 00 00 00...  UniverseSlotType        DS  UniverseSlotListSize ; base type, e.g. missile, cargo etc,
 354+ 815D              ; Probably not needed UniverseTypeCount       DS  UniverseSlotListSize
 355+ 815D 05           ConsoleRefreshCounter   DB  ConsoleRefreshInterval ; Every 4 interations the console will update twice (once for primary and once for seconday buffer)
 356+ 815E 00           ConsoleRedrawFlag       DB  0
 357+ 815F 00           TextInputMode           DB  0
 358+ 8160 00           CursorKeysPressed       DB  0               ; mapping of the current key presses
 359+ 8161                                                          ; 7    6    5    4     3    2        1    0
 360+ 8161                                                          ; Up   Down Left Right Home Recentre
 361+ 8161 00           FireLaserPressed        DB  0
 362+ 8162 00           WarpPressed             DB  0
 363+ 8163 00           CompassColor			DB	0				; 03C5
 364+ 8164 00           SoundToggle				DB	0				; 03C6
 365+ 8165 00           KeyboardRecenterToggle	DB	0				; 03C8
 366+ 8166 00           PATGMask				DB	0				; &03C9    \ PATG	\ Mask to scan keyboard X-key, for misjump
 367+ 8167 00           FlashToggle				DB  0				; 03CA \ FLH \ flash toggle
 368+ 8168 00           ReverseJoystick			DB	0				; 03CB \ JSTGY \ Y reverse joystick Y channel
 369+ 8169 00           JoystickToggle			DB	0				; 03CD  \ JSTK    \ K toggle keyboard/joystick
 370+ 816A 00           DigitalJoystick			DB	0				; 03CE \ JDB   \ . = toggle between keyboard and bitpaddle
 371+ 816B 00           DiskReadFailFlag		DB	0				; 03CF \ CATF \ Disk catalog fail flag
 372+ 816C
 373+ 816C              ; Working Data
 374+ 816C
 375+ 816C              ;UniverseTable			DS	26				; 1741  \ address pointers for 13 ships INF on pages &9. 37 bytes each.
 376+ 816C              ; $0900 =	EQUW page9+37* 0 \ copied to inner worskpace INWK on zero-page when needed
 377+ 816C              ; $0925 =	EQUW page9+37* 1
 378+ 816C              ; $094A =	EQUW page9+37* 2
 379+ 816C              ; $096F =	EQUW page9+37* 3
 380+ 816C              ; $0994 =	EQUW page9+37* 4
 381+ 816C              ; $09B9 =	EQUW page9+37* 5
 382+ 816C              ; $09DE =	EQUW page9+37* 6
 383+ 816C              ; $0A03 =	EQUW page9+37* 7
 384+ 816C              ; $0A28 =	EQUW page9+37* 8
 385+ 816C              ; $0A4D =	EQUW page9+37* 9
 386+ 816C              ; $0A72 =	EQUW page9+37*10
 387+ 816C              ; $0A97 =	EQUW page9+37*11
 388+ 816C              ; $0ABC =	EQUW page9+37*12 \ allwk up to &0ABC while heap for edges working down from &CFF.
 389+ 816C
 390+ 816C
 391+ 816C
 392+ 816C              ; 0b00 is start address of data to save
 393+ 816C              ; Now MissionData VarTP					DB	0				; 0358 TP? The Plan  \ mission uses lower 4 bits
 394+ 816C              											; Bit mask XXXX10XX - Thargoid plan mission
 395+ 816C
 396+ 816C 00           MissionData				DB	0				; &0B00	  \ look at data, first byte is TP mission bits
 397+ 816D
 398+ 816D 00 00        FileNameStringPointer	DW	0				;0C00	   \ pointer to filename string
 399+ 816F 00 00        CommanderLoadAddress	DW	0				;0C03
 400+ 8171 00 00        LengthOfFile			DW	0				;0C0B
 401+ 8173 00 00        SaveDataEndAddress		DW	0				;&0C0F	      \ &0C00 is end address of data to save
 402+ 8175
 403+ 8175 00 00 00...  EdgesBuffer				DS 50
 404+ 81A7              EdgesBufferSP			equ	$				; Was $0CFF			; Heap pointer for edges buffer
 405+ 81A7              ShipLinesBufferSP		equ EdgesBufferSP	; was $0CFF
 406+ 81A7
 407+ 81A7 00 00 00...  ShipLineStack			DS  70			; For now but will be in the page later
 408+ 81ED              ShipLineStackTop		equ $ - ShipLineStack
 409+ 81ED
 410+ 81ED              ; No longer needed
 411+ 81ED              ;LSO						DS 	$C0				;0E00 Line Buffer Solar of 192 lines (may be 191 in reality)
 412+ 81ED              ; LSX vector overlaps with LSO
 413+ 81ED              ;LSX2					DS	$C0				; &0EC0	    \ LSX2 bline buffer size?
 414+ 81ED              ;LSY2					DS  $C)	           	; &0F0E	    \ LSY2
 415+ 81ED
 416+ 81ED              ; -- Player Runtime Data
 417+ 81ED 00           GunTemperature          DB  0
 418+ 81EE 00           CabinTemperature        DB  0
 419+ 81EF 00           PlayerForwardSheild0	DB	0 ; ?????
 420+ 81F0 00           PlayerForwardSheild1    DB	0
 421+ 81F1 00           PlayerForwardSheild2    DB	0
 422+ 81F2 00           ForeShield				DB	0				; These three must be contiguous
 423+ 81F3 00           AftShield				DB	0				; .
 424+ 81F4 00           PlayerEnergy			DB	0				; and in this order
 425+ 81F5 00           CompassX				DB	0				; 03A8
 426+ 81F6 00           CompassY				DB	0				; 03A9
 427+ 81F7              ; Simplification of missile targetting
 428+ 81F7              ; $FF no missile targettting enabled
 429+ 81F7              ; $FE missile targetting, no target selected
 430+ 81F7              ; bit 7 set then tagetting and lower nibble holds missile target and launching
 431+ 81F7              ; bit 7 clear launch at selected target in lower nibble
 432+ 81F7 00           MissileTargettingFlag   DB  0
 433+ 81F8              ;;MissileTarget			DB  0				; 45
 434+ 81F8              ;;MissileLaunchFlag       DB  0
 435+ 81F8 00 00 00...  CommanderName           DS  15
 436+ 8207 00           CommanderName0			DB	0				; Sneaky little 0 to allow use of print name directly
 437+ 8208 00           BadnessStatus           DB  0
 438+ 8209              ;note rapidly changing views could reset these so need to consider it in an array
 439+ 8209              ; LaserType
 440+ 8209              ; LaserPulseRate                          ; how many pulses can be fired before long pause
 441+ 8209              ; LaserPulsePause                         ; time before next pulse - 0 = beam
 442+ 8209              ; LaserPulseRest                          ; time before pulse count resets to 0
 443+ 8209              ; LaserDamageOutput                       ; amount of damage for a laser hit
 444+ 8209              ; LaserEnergyDrain                        ; amount of energy drained by cycle
 445+ 8209              ; LaserHeat                               ; amount of heat generated
 446+ 8209              ; LaserDurability                         ; probabability out of 255 that a hit on unshielded will add random amount of damage
 447+ 8209              ; LaserDurabilityAmount                   ; max amount of damagage can be sustained in one damage hit
 448+ 8209              ; LaserInMarkets                          ; can this laser be purchased 0 = yes 1 = no
 449+ 8209              ; LaserTechLevel                          ; minimum tech level system to buy from
 450+ 8209              ; need to add copy table routines
 451+ 8209 00           CurrLaserType           DB  0               ; current view laser type, copied in from LaserType array
 452+ 820A 00           CurrLaserDamage         DB  0               ; copied in from LaserDamagedFlag array
 453+ 820B 00           CurrLaserPulseRate      DB  0               ; current view laser amount of pulses
 454+ 820C 00           CurrLaserPulseOnTime    DB  0               ; how many cycles the laser is on
 455+ 820D 00           CurrLaserPulseOffTime   DB  0               ; how many cycles the laser is on
 456+ 820E 00           CurrLaserPulseRest      DB  0               ; current view laser delay setup between pulses
 457+ 820F
 458+ 820F                  IFDEF LASER_V2
 459+ 820F 00           LaserBeamOn             DB  0
 460+ 8210 00           CurrLaserDuration       DB  0   ; == CurrLaserPulseOnTime
 461+ 8211 00           CurrentBurstPause       DB  0   ; == CurrLaserPulseOffTime
 462+ 8212 00           CurrentCooldown         DB  0   ; == CurrLaserPulseRest
 463+ 8213                  ENDIF
 464+ 8213 00           CurrLaserBurstRate      DB  0
 465+ 8214 00           CurrLaserBurstCount     DB  0   ; == LaserPulseRate
 466+ 8215 00           CurrLaserDamageOutput   DB  0
 467+ 8216 00           CurrLaserEnergyDrain    DB  0
 468+ 8217 00           CurrLaserHeat           DB  0
 469+ 8218 00           CurrLaserDurability     DB  0
 470+ 8219 00           CurrLaserDurabilityAmount DB  0
 471+ 821A
 472+ 821A              ; Count down timers must be aligned like this to work
 473+ 821A 00           CurrLaserPulseOnCount   DB  0               ; how many cycles the laser is on timer
 474+ 821B 00           CurrLaserPulseOffCount  DB  0               ; how many cycles the laser is on timer
 475+ 821C 00           CurrLaserPulseRestCount DB  0               ; countdown after shooting for next shot
 476+ 821D 00           CurrLaserPulseRateCount DB  0               ; current view laser current pulses fired
 477+ 821E
 478+ 821E              ; -- Input variables
 479+ 821E 00           JoystickX				DB	0				; 034C JSTX
 480+ 821F 00           JoystickY				DB	0				; 034D JSTY
 481+ 8220 00           XSAV2 					DB	0				; 034E used to temporary save 6502 X reg
 482+ 8221 00           YSAV2 					DB	0				; 034F used to temporary save 6502 Y reg
 483+ 8222
 484+ 8222              ; -- Console drawing data
 485+ 8222              FShieldStart            equ $8410
 486+ 8222              AShieldStart            equ $8D10
 487+ 8222              FuelStart               equ $9410
 488+ 8222
 489+ 8222              EnergyBar4Start         equ $A5D5
 490+ 8222              EnergyBar3Start         equ $ADD5
 491+ 8222              EnergyBar2Start         equ $B5D5
 492+ 8222              EnergyBar1Start         equ $BDD5
 493+ 8222              ; 70 /2 = 35 values
 494+ 8222              ;                            0                             1                             2                             3
 495+ 8222              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6
 496+ 8222 01 02 02 03  FuelMapping             DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,19,20,21,21,22,23,24,25,26,27,28,30,31,31
 496+ 8226 04 04 05 06
 496+ 822A 06 07 08 09
 496+ 822E 0A 0A 0B 0C
 496+ 8232 0D 0E 0E 0F
 496+ 8236 10 10 11 13
 496+ 823A 14 15 15 16
 496+ 823E 17 18 19 1A
 496+ 8242 1B 1C 1E 1F
 496+ 8246 1F
 497+ 8247              SpeedoStart             equ $84D1
 498+ 8247              ;                            0                             1                             2                             3                             4
 499+ 8247              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0
 500+ 8247 01 02 02 03  SpeedoMapping           DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,18,19,20,20,21,22,23,24,24,25,26,26,27,28,28,29,30,31
 500+ 824B 04 04 05 06
 500+ 824F 06 07 08 09
 500+ 8253 0A 0A 0B 0C
 500+ 8257 0D 0E 0E 0F
 500+ 825B 10 10 11 12
 500+ 825F 13 14 14 15
 500+ 8263 16 17 18 18
 500+ 8267 19 1A 1A 1B
 500+ 826B 1C 1C 1D 1E
 500+ 826F 1F
 501+ 8270
 502+ 8270              DialMiddleXPos          equ $E1
 503+ 8270              RollMiddle              equ $8CE0
 504+ 8270              PitchMiddle             equ $94E0
 505+ 8270
 506+ 8270
 507+ 8270
 508+ 8270
 509+ 8270
# file closed: ./Variables/general_variables.asm
 616  8270                  INCLUDE "./Variables/general_variablesRoutines.asm"
# file opened: ./Variables/general_variablesRoutines.asm
   1+ 8270              LaserDrainSystems:      DrainSystem PlayerEnergy, CurrLaserEnergyDrain
   1+ 8270 3A 16 82    >                        ld      a,(CurrLaserEnergyDrain)
   1+ 8273 47          >                        ld      b,a
   1+ 8274 3A F4 81    >                        ld      a,(PlayerEnergy)
   1+ 8277 90          >                        sub     a,b
   1+ 8278 32 F4 81    >                        ld      (PlayerEnergy),a
   1+ 827B 38 03       >                        jr      c,.ZeroSystem
   1+ 827D C3 84 82    >                        jp      .ExitPoint
   1+ 8280             >.ZeroSystem:            ZeroA
   1+ 8280 AF          >                        xor a
   1+ 8281 32 F4 81    >                        ld      (PlayerEnergy),a
   1+ 8284             >.ExitPoint
   2+ 8284                                      BoostSystem GunTemperature, CurrLaserHeat
   2+ 8284 3A 17 82    >                        ld      a,(CurrLaserHeat)
   2+ 8287 47          >                        ld      b,a
   2+ 8288 3A ED 81    >                        ld      a,(GunTemperature)
   2+ 828B 80          >                        add     b
   2+ 828C 32 ED 81    >                        ld      (GunTemperature),a
   2+ 828F 38 03       >                        jr      c, .MaxSystem
   2+ 8291 C3 99 82    >                        jp      .ExitPoint
   2+ 8294 3E FF       >.MaxSystem:             ld      a,255
   2+ 8296 32 ED 81    >                        ld      (GunTemperature),a
   2+ 8299             >.ExitPoint
   3+ 8299 C9                                   ret
   4+ 829A
   5+ 829A
   6+ 829A              ResetPlayerShip:        ZeroThrottle
   6+ 829A AF          >                        xor     a
   6+ 829B 32 6B 7F    >                        ld      (DELTA),a
   6+ 829E 32 6C 7F    >                        ld      (DELT4Lo),a
   6+ 82A1 32 6D 7F    >                        ld      (DELT4Lo+1),a
   7+ 82A4                                      ZeroPitch
   7+ 82A4 AF          >                        xor     a
   7+ 82A5 32 77 7E    >                        ld      (BET2),a
   7+ 82A8 32 78 7E    >                        ld      (BET2FLIP),a
   7+ 82AB 32 75 7E    >                        ld      (JSTY),a
   7+ 82AE 32 74 7E    >                        ld      (BETA),a
   8+ 82B1                                      ZeroRoll
   8+ 82B1 AF          >                        xor     a                              ; zero roll and climb
   8+ 82B2 32 8C 7E    >                        ld      (ALP2),a
   8+ 82B5 32 8D 7E    >                        ld      (ALP2FLIP),a
   8+ 82B8 32 88 7E    >                        ld      (JSTX),a
   8+ 82BB 32 8A 7E    >                        ld      (ALPHA),a
   9+ 82BE                                      ClearMissileTargetting
   9+ 82BE 3E FF       >                        ld      a,StageMissileNotTargeting
   9+ 82C0 32 F7 81    >                        ld      (MissileTargettingFlag),a
  10+ 82C3                                      ClearECM
  10+ 82C3 AF          >                        xor     a
  10+ 82C4 32 86 7E    >                        ld      (ECMCountDown),a
  11+ 82C7                                      ChargeEnergyAndShields
  11+ 82C7 3E FF       >                        ld      a,$FF
  11+ 82C9 32 F4 81    >                        ld      (PlayerEnergy),a
  11+ 82CC 32 F2 81    >                        ld      (ForeShield),a
  11+ 82CF 32 F3 81    >                        ld      (AftShield),a
  12+ 82D2                                      ClearTemperatures
  12+ 82D2 AF          >                        xor     a
  12+ 82D3 32 EE 81    >                        ld      (CabinTemperature),a
  12+ 82D6 32 ED 81    >                        ld      (GunTemperature),a
  13+ 82D9                                      ClearWarpPressed
  13+ 82D9             >                        SetMemFalse WarpPressed
  13+ 82D9 3E FF       >                        ld      a,$FF
  13+ 82DB 32 62 81    >                        ld      (WarpPressed),a
  14+ 82DE CD 30 83                             call    IsLaserUseable
  15+ 82E1                                      SetMemFalse LaserBeamOn
  15+ 82E1 3E FF       >                        ld      a,$FF
  15+ 82E3 32 0F 82    >                        ld      (LaserBeamOn),a
  16+ 82E6                                      MMUSelectCommander
  16+ 82E6 ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
  17+ 82EA CD 0E E3                             call    LoadLaserToCurrent
  18+ 82ED C8                                   ret     z
  19+ 82EE
  20+ 82EE C9                                   ret
  21+ 82EF
  22+ 82EF 21 D6 84     AddCargoTypeD:          ld      hl,CargoTonnes
  23+ 82F2 57                                   ld      d,a
  24+ 82F3 ED 31                                add     hl,a
  25+ 82F5 34                                   inc     (hl)
  26+ 82F6 C9                                   ret
  27+ 82F7
  28+ 82F7 7A           CanWeScoopCargoD:       ld      a,d
  29+ 82F8                                      JumpIfAGTENusng  GoldIndex, .ItMayNotBeTonnes  ; if its cargo in kgs or gs then jump
  29+ 82F8 FE 0E       >                        cp     GoldIndex
  29+ 82FA D2 1C 83    >                        jp		nc,.ItMayNotBeTonnes
  30+ 82FD 21 D6 84     .ItsTonnes:             ld      hl,CargoTonnes
  31+ 8300 0E 00                                ld      c,0
  32+ 8302 06 0E                                ld      b,MineralsIndex+1           ; Only count to Gold as that is in KG
  33+ 8304 7E           .AddLoop:               ld      a,(hl)
  34+ 8305 81                                   add     c
  35+ 8306 4F                                   ld      c,a                     ; add to counter
  36+ 8307 05                                   dec     b
  37+ 8308 23                                   inc     hl
  38+ 8309 10 F9                                djnz    .AddLoop
  39+ 830B 21 E7 84                             ld      hl,AlienItemsTonnes     ; Finally do alien items
  40+ 830E 7E                                   ld      a,(hl)
  41+ 830F 81                                   add     c
  42+ 8310 4F                                   ld      c,a
  43+ 8311 3A D4 84                             ld      a,(CargoBaySize)        ; Get Bay Size
  44+ 8314                                      JumpIfAEqNusng c, .CargoFull
  44+ 8314 B9          >                        cp     c
  44+ 8315 CA 1A 83    >                        jp      z,.CargoFull
  45+ 8318              .StillRoom:             ClearCarryFlag
  45+ 8318 B7          >                        or a
  46+ 8319 C9                                   ret
  47+ 831A              .CargoFull:             SetCarryFlag
  47+ 831A 37          >                        scf
  48+ 831B C9                                   ret
  49+ 831C              .ItMayNotBeTonnes:      JumpIfAEqNusng  AlienItemsIndex,.ItsTonnes       ;ALienItems are tonnes
  49+ 831C FE 11       >                        cp     AlienItemsIndex
  49+ 831E CA FD 82    >                        jp      z,.ItsTonnes
  50+ 8321 21 D6 84                             ld      hl,CargoTonnes
  51+ 8324 7A                                   ld      a,d
  52+ 8325 ED 31                                add     hl,a
  53+ 8327 7E                                   ld      a,(hl)
  54+ 8328                                      JumpIfAEqNusng  200, .StillRoom
  54+ 8328 FE C8       >                        cp     200
  54+ 832A CA 18 83    >                        jp      z,.StillRoom
  55+ 832D C3 1A 83                             jp      .CargoFull
  56+ 8330              ; END of rountine
  57+ 8330
  58+ 8330 3A 09 82     IsLaserUseable:         ld      a,(CurrLaserType)
  59+ 8333 FE FF                                cp      255
  60+ 8335 C8                                   ret     z
  61+ 8336 3A 0A 82                             ld      a,(CurrLaserDamage)
  62+ 8339 FE FF                                cp      255
  63+ 833B C9                                   ret
  64+ 833C
  65+ 833C CD 02 84     InitMainLoop:           call    ClearUnivSlotList
  66+ 833F AF                                   xor     a
  67+ 8340 32 35 81                             ld      (CurrentUniverseAI),a
  68+ 8343 3E 03                                ld      a,3
  69+ 8345 32 7E 7F                             ld      (MenuIdMax),a
  70+ 8348                                      SetMemFalse SetStationHostileFlag
  70+ 8348 3E FF       >                        ld      a,$FF
  70+ 834A 32 37 81    >                        ld      (SetStationHostileFlag),a
  71+ 834D                                      SetMemFalse DockedFlag
  71+ 834D 3E FF       >                        ld      a,$FF
  71+ 834F 32 33 81    >                        ld      (DockedFlag),a
  72+ 8352              ;                        call    InitialiseFrontView
  73+ 8352 CD EF 6A                             call    InitialiseCommander
  74+ 8355                                      MMUSelectUniverseN 2
  74+ 8355 ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
  75+ 8359 CD F3 6B                             call    SetInitialShipPosition
  76+ 835C              ; Initialist screen refresh
  77+ 835C 3E 05                                ld      a, ConsoleRefreshInterval
  78+ 835E 32 5D 81                             ld      (ConsoleRefreshCounter),a
  79+ 8361                                      SetMemFalse    ConsoleRedrawFlag
  79+ 8361 3E FF       >                        ld      a,$FF
  79+ 8363 32 5E 81    >                        ld      (ConsoleRedrawFlag),a
  80+ 8366                                      MMUSelectStockTable
  80+ 8366 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
  81+ 836A CD AA E0                             call    generate_stock_market
  82+ 836D CD 70 75                             call    ResetMessageQueue
  83+ 8370                                      InitEventCounter
  83+ 8370 AF          >                        xor     a
  83+ 8371 32 3C 81    >                        ld      (EventCounter),a
  84+ 8374                                      ClearMissJump
  84+ 8374 3E FF       >                        ld      a,$FF
  84+ 8376 32 3E 81    >                        ld      (MissJumpFlag),a
  85+ 8379                                      SetMemFalse TextInputMode
  85+ 8379 3E FF       >                        ld      a,$FF
  85+ 837B 32 5F 81    >                        ld      (TextInputMode),a
  86+ 837E C9                                   ret
  87+ 837F
  88+ 837F              ; needs to be called after a kill too
  89+ 837F 2A 23 80     SetPlayerRank:          ld      hl,(KillTally)
  90+ 8382 DD 21 A0 87                          ld      ix,RankingTableLow
  91+ 8386 06 00                                ld      b,0
  92+ 8388 DD 56 01     .CompareLoop:           ld      d,(ix+1)
  93+ 838B DD 5E 00                             ld      e,(ix+0)
  94+ 838E A7                                   and     a             ; compare HL to DE
  95+ 838F ED 52                                sbc     hl,de         ; we can throw away HL now
  96+ 8391 28 09                                jr      z,.FoundRank
  97+ 8393 38 07                                jr      c,.FoundRank
  98+ 8395 DD 23                                inc     ix
  99+ 8397 DD 23                                inc     ix
 100+ 8399 04                                   inc     b
 101+ 839A 18 EC                                jr      .CompareLoop
 102+ 839C 78           .FoundRank:             ld      a,b
 103+ 839D 32 25 80                             ld      (CurrentRank),a
 104+ 83A0 C9                                   ret
 105+ 83A1
 106+ 83A1 3E 00        SetSpeedZero:           ld      a,0
 107+ 83A3 32 6B 7F                             ld      (DELTA),a                                       ;
 108+ 83A6 67                                   ld      h,a                                             ;
 109+ 83A7 6F                                   ld      l,a                                             ;
 110+ 83A8 22 6C 7F                             ld      (DELT4Lo),hl                                    ;
 111+ 83AB C9                                   ret
 112+ 83AC
 113+ 83AC 21 F4 81     RechargeShip:           ld      hl,PlayerEnergy                                 ; if enery >= 128
 114+ 83AF 7E                                   ld      a,(hl)
 115+ 83B0 CB 7F                                bit     7,a                                             ; then we can recharge shields
 116+ 83B2 28 0D                                jr      z,.UpdatePlayerEnergy
 117+ 83B4 21 F2 81     .ShieldCharge:          ld      hl,ForeShield                                   ; charge front shield
 118+ 83B7 34                                   inc     (hl)
 119+ 83B8 20 01                                jr      nz,.DoneForeShield
 120+ 83BA 35           .ForeOverCharge:        dec     (hl)
 121+ 83BB 23           .DoneForeShield:        inc     hl                                              ; point to aft shield
 122+ 83BC 34                                   inc     (hl)
 123+ 83BD 20 01                                jr      nz,.DoneAftShield
 124+ 83BF 35                                   dec     (hl)                                            ; back to 255
 125+ 83C0 23           .DoneAftShield:         inc     hl                                              ; point to energy
 126+ 83C1 34           .UpdatePlayerEnergy:    inc     (hl)
 127+ 83C2 28 0A                                jr      z,.OverflowedEnergy
 128+ 83C4 3A F5 84                             ld      a,(ExtraEnergyUnit)
 129+ 83C7                                      ReturnIfANENusng EquipmentItemFitted                    ; if energy unit fitted an extra step
 129+ 83C7 FE FF       >                        cp      EquipmentItemFitted
 129+ 83C9 C0          >                        ret     nz
 130+ 83CA 34           .EnergyUnitFitted:      inc     (hl)
 131+ 83CB 28 01                                jr      z,.OverflowedEnergy
 132+ 83CD C9                                   ret
 133+ 83CE 35           .OverflowedEnergy:      dec     (hl)                                            ;  restore to 255
 134+ 83CF C9                                   ret
 135+ 83D0 21 F4 81     .SkipShieldCharge:      ld      hl,PlayerEnergy
 136+ 83D3 18 EC                                jr      .UpdatePlayerEnergy
 137+ 83D5
 138+ 83D5              ; sets carry to true if target
 139+ 83D5 3A F7 81     IsMissileLockedOn:      ld      a,(MissileTargettingFlag)
 140+ 83D8 CB 7F                                bit     7,a
 141+ 83DA 28 07                                jr      z, .TargetSelected
 142+ 83DC E6 70                                and     $70                         ; are all upper bits set (we can ignore bit 7)
 143+ 83DE CA E3 83                             jp      z, .TargetSelected           ; if its only bit 7 then we have a lock
 144+ 83E1                                      ClearCarryFlag                      ; if bitsd 6 to 4 were set then it must be unlocked status
 144+ 83E1 B7          >                        or a
 145+ 83E2 C9                                   ret
 146+ 83E3              .TargetSelected:        JumpIfSlotAEmpty .TargetInvalid     ; does slot A have an target
 146+ 83E3 21 45 81    >                        ld      hl,UniverseSlotList
 146+ 83E6 ED 31       >                        add     hl,a
 146+ 83E8 7E          >                        ld      a,(hl)
 146+ 83E9 3C          >                        inc     a
 146+ 83EA CA F0 83    >                        jp      z,.TargetInvalid    ; if slot was ff inc would make it 0
 146+ 83ED 3D          >                        dec     a           ; get original value back for later
 147+ 83EE                                      SetCarryFlag
 147+ 83EE 37          >                        scf
 148+ 83EF C9                                   ret
 149+ 83F0 3E FF        .TargetInvalid:         ld      a, StageMissileNotTargeting     ; housekeep missile status if target gone
 150+ 83F2 32 F7 81                             ld      (MissileTargettingFlag),a
 151+ 83F5 C9                                   ret
 152+ 83F6
# file closed: ./Variables/general_variablesRoutines.asm
 617  83F6                  INCLUDE "./Variables/UniverseSlotRoutines.asm"
# file opened: ./Variables/UniverseSlotRoutines.asm
   1+ 83F6              ; Note this code is core code and can not be in a memory bank unless do explosion code is changed too
   2+ 83F6 AF           ClearSlotCount:         xor     a
   3+ 83F7 21 45 81                             ld      hl,UniverseSlotList
   4+ 83FA 06 0C                                ld      b, UniverseSlotListSize ; prbably not needed + UniverseSlotTypeSize
   5+ 83FC 77           .fillLoop:              ld      (hl),a
   6+ 83FD 23                                   inc     hl
   7+ 83FE 10 FC                                djnz    .fillLoop
   8+ 8400 C9                                   ret
   9+ 8401
  10+ 8401              ; Initialises all types to a count of 1 where there is an occupied universe slot
  11+ 8401              ; this needs expanding to cater for a missing type, find type and increment count (use cpir?)
  12+ 8401              ; DOE NOT WORK CorrectSlotCount:       call    ClearSlotCount
  13+ 8401              ; DOE NOT WORK                         ld      hl,UniverseSlotCount
  14+ 8401              ; DOE NOT WORK                         ld      de,UniverseSlotList
  15+ 8401              ; DOE NOT WORK                         ld      b,UniverseSlotListSize
  16+ 8401              ; DOE NOT WORK .fillLoop:              ld      a,(de)
  17+ 8401              ; DOE NOT WORK                         cp      $FF
  18+ 8401              ; DOE NOT WORK                         jr      z,.SkipSlot
  19+ 8401              ; DOE NOT WORK .CorrectSlot:           ld      (hl),a
  20+ 8401              ; DOE NOT WORK                         inc     hl
  21+ 8401              ; DOE NOT WORK                         ld      (hl),1
  22+ 8401              ; DOE NOT WORK                         inc     hl
  23+ 8401              ; DOE NOT WORK                         inc     hl
  24+ 8401              ; DOE NOT WORK .SkipSlot               inc     de
  25+ 8401              ; DOE NOT WORK                         djnz    .fillLoop
  26+ 8401 C9                                   ret
  27+ 8402              ; Wipe all items
  28+ 8402 3E FF        ClearUnivSlotList:      ld      a,$FF
  29+ 8404 21 45 81                             ld      hl,UniverseSlotList
  30+ 8407 06 18                                ld      b, UniverseSlotListSize * 2
  31+ 8409 77           .fillLoop:              ld      (hl),a
  32+ 840A 23                                   inc     hl
  33+ 840B 10 FC                                djnz    .fillLoop
  34+ 840D C9                                   ret
  35+ 840E
  36+ 840E 21 45 81     SetSlot0ToSpaceStation: ld      hl,UniverseSlotList
  37+ 8411 36 02                                ld      (hl),ShipTypeStation
  38+ 8413 21 51 81                             ld      hl,UniverseSlotType
  39+ 8416 36 02                                ld      (hl),ShipTypeStation
  40+ 8418 C9                                   ret
  41+ 8419
  42+ 8419 21 45 81     SetSlotAToTypeB:        ld      hl,UniverseSlotList
  43+ 841C ED 31                                add     hl,a
  44+ 841E 70                                   ld      (hl),b
  45+ 841F C9                                   ret
  46+ 8420
  47+ 8420 21 51 81     SetSlotAToClassB:       ld      hl,UniverseSlotType
  48+ 8423 ED 31                                add     hl,a
  49+ 8425 70                                   ld      (hl),b
  50+ 8426 C9                                   ret
  51+ 8427
  52+ 8427              ; Clears all except slot A, used when say restarting a space station post launch
  53+ 8427 57           ClearFreeSlotListSaveA: ld      d,a
  54+ 8428 0E 00                                ld      c,0
  55+ 842A 21 45 81                             ld      hl,UniverseSlotList
  56+ 842D 06 18                                ld      b, UniverseSlotListSize * 2
  57+ 842F 79           .fillLoop:              ld      a,c
  58+ 8430 BA                                   cp      d
  59+ 8431 28 03                                jr      z,.SkipSlot
  60+ 8433 3E FF                                ld      a,$FF
  61+ 8435 77                                   ld      (hl),a
  62+ 8436 23           .SkipSlot:              inc     hl
  63+ 8437 23                                   inc     hl
  64+ 8438 10 F5                                djnz    .fillLoop
  65+ 843A C9                                   ret
  66+ 843B
  67+ 843B              ; Clear out slot. if its already FF then just drop out
  68+ 843B FE FF        ClearSlotA:             cp      $FF
  69+ 843D C8                                   ret     z
  70+ 843E 21 45 81                             ld      hl,UniverseSlotList
  71+ 8441 ED 31                                add     hl,a
  72+ 8443 36 FF                                ld      (hl),$FF
  73+ 8445 3E 0C                                ld      a,UniverseSlotListSize  ; move to types
  74+ 8447 ED 31                                add     hl,a
  75+ 8449 36 FF                                ld      (hl),$FF
  76+ 844B C9                                   ret
  77+ 844C
  78+ 844C              ; Space Station will always be slot 0
  79+ 844C 21 52 81     ClearJunk:              ld      hl,UniverseSlotType+1
  80+ 844F 0E 01                                ld      c,1
  81+ 8451 06 0B                                ld      b,UniverseSlotListSize -1      ; ignore space station
  82+ 8453 7E           .NextShip:              ld      a,(hl)
  83+ 8454 FE 03                                cp      ShipTypeJunk
  84+ 8456 CA 67 84                             jp      z,.ProcessJunk
  85+ 8459 FE 04                                cp      ShipTypeScoopable
  86+ 845B CA 67 84                             jp      z,.ProcessJunk
  87+ 845E 23           .DoneIteration:         inc     hl
  88+ 845F 0C                                   inc     c
  89+ 8460 10 F1                                djnz    .NextShip
  90+ 8462                                      ClearJunkCount
  90+ 8462             >                        ZeroA
  90+ 8462 AF          >                        xor a
  90+ 8463 32 1B 80    >                        ld      (JunkCount),a
  91+ 8466 C9                                   ret
  92+ 8467 79           .ProcessJunk:           ld      a,c
  93+ 8468 CD 3B 84                             call    ClearSlotA
  94+ 846B C3 5E 84                             jp      .DoneIteration
  95+ 846E
  96+ 846E
  97+ 846E 21 52 81     WarpJunk:               ld      hl,UniverseSlotType+1
  98+ 8471 0E 01                                ld      c,1
  99+ 8473 06 0B                                ld      b,UniverseSlotListSize -1      ; ignore space station
 100+ 8475 7E           .NextShip:              ld      a,(hl)
 101+ 8476 FE 03                                cp      ShipTypeJunk
 102+ 8478 CA 85 84                             jp      z,.ProcessJunk
 103+ 847B FE 04                                cp      ShipTypeScoopable
 104+ 847D CA 85 84                             jp      z,.ProcessJunk
 105+ 8480 23           .DoneIteration:         inc     hl
 106+ 8481 0C                                   inc     c
 107+ 8482 10 F1                                djnz    .NextShip
 108+ 8484 C9                                   ret
 109+ 8485 79           .ProcessJunk:           ld      a,c
 110+ 8486                                      MMUSelectUniverseA
 110+ 8486 C6 46       >                     add    a,BankUNIVDATA0
 110+ 8488 ED 92 56    >                     nextreg UniverseMMU,       a
 111+ 848B CD 73 C6                             call    WarpOffset
 112+ 848E C3 80 84                             jp      .DoneIteration
 113+ 8491                                      DISPLAY "TODO - This i sprojbabyl fixed but check IM OVERTHINKIGN THIS JUST MAKE SPACE STATION SLOT 0 AGAIN?"
 114+ 8491
 115+ 8491 21 52 81     AreShipsPresent:        ld      hl,UniverseSlotType+1
 116+ 8494 06 0B                                ld      b,UniverseSlotListSize -1      ; ignore space station
 117+ 8496 7E           .NextShip:              ld      a,(hl)
 118+ 8497 FE 00                                cp      ShipTypeNormal
 119+ 8499                                      ClearCarryFlag
 119+ 8499 B7          >                        or a
 120+ 849A C8                                   ret     z
 121+ 849B 23                                   inc     hl
 122+ 849C 10 F8                                djnz    .NextShip
 123+ 849E                                      SetCarryFlag
 123+ 849E 37          >                        scf
 124+ 849F C9                                   ret
 125+ 84A0
 126+ 84A0 21 45 81     IsSpaceStationPresent:  ld      hl,UniverseSlotList
 127+ 84A3                                      ClearCarryFlag
 127+ 84A3 B7          >                        or a
 128+ 84A4 7E           .SearchLoop:            ld      a,(hl)
 129+ 84A5                                      ReturnIfAEqNusng ShipTypeStation
 129+ 84A5 FE 02       >                        cp      ShipTypeStation
 129+ 84A7 C8          >                        ret     z
 130+ 84A8                                      SetCarryFlag
 130+ 84A8 37          >                        scf
 131+ 84A9 C9                                   ret
 132+ 84AA
 133+ 84AA 21 45 81     GetTypeAtSlotA:         ld      hl,UniverseSlotList
 134+ 84AD ED 31                                add     hl,a
 135+ 84AF 7E                                   ld      a,(hl)
 136+ 84B0 C9                                   ret
 137+ 84B1
 138+ 84B1 21 45 81     FindNextFreeSlotInC:    ld      hl,UniverseSlotList
 139+ 84B4 06 0C                                ld      b, UniverseSlotListSize
 140+ 84B6 0E 00                                ld      c, 0
 141+ 84B8 7E           .SearchLoop:            ld      a,(hl)
 142+ 84B9                                      JumpIfAEqNusng $FF, .FoundSlot
 142+ 84B9 FE FF       >                        cp     $FF
 142+ 84BB CA C4 84    >                        jp      z,.FoundSlot
 143+ 84BE 0C                                   inc     c
 144+ 84BF 23                                   inc     hl
 145+ 84C0 10 F6                                djnz    .SearchLoop
 146+ 84C2                                      SetCarryFlag
 146+ 84C2 37          >                        scf
 147+ 84C3 C9                                   ret
 148+ 84C4              .FoundSlot:             ClearCarryFlag
 148+ 84C4 B7          >                        or a
 149+ 84C5 C9                                   ret
 150+ 84C6
 151+ 84C6
 152+ 84C6 CD B1 84     FindNextFreeSlotInA:    call    FindNextFreeSlotInC
 153+ 84C9 79                                   ld      a,c
 154+ 84CA C9                                   ret
 155+ 84CB
# file closed: ./Variables/UniverseSlotRoutines.asm
 618  84CB                  INCLUDE "./Variables/EquipmentVariables.asm"
# file opened: ./Variables/EquipmentVariables.asm
   1+ 84CB 00           AutoDocking				DB	0				; $033F
   2+ 84CC 00           PlayerECM				DB	0				; $0340
   3+ 84CD 00           Laser2					DB	0				; 0343 laser Power? Not sure
   4+ 84CE 00           LaserCount				DB	0				; 0346  LASCT  \ laser count =9 for pulse, cooled off?
   5+ 84CF 00 00 00 00  Cash					DB  0,0,0,0			; 0361 - 0364 Cash now litte endian
   6+ 84D3 19           Fuel					DB	25				; 0365  QQ14
   7+ 84D4 46           CargoBaySize			DB	70				; 036E
   8+ 84D5 00           CargoRunningLoad        DB  0
   9+ 84D6 00 00 00 00  CargoTonnes             DB  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   9+ 84DA 00 00 00 00
   9+ 84DE 00 00 00 00
   9+ 84E2 00 00 00 00
  10+ 84E6              ;CargoTonnes		    DB	16,1,2,3,4,5,6,7,6,9,10,11,12,13,14,15			; 036F - 037F	QQ20
  11+ 84E6              SlaveCargoTonnes		equ CargoTonnes+3
  12+ 84E6              NarcoticsCargoTonnes	equ CargoTonnes+6
  13+ 84E6              FirearmsCargoTonnes		equ CargoTonnes+10
  14+ 84E6              GoldCargoKGs:           equ CargoTonnes+15
  15+ 84E6              AlienItemsTonnes        equ CargoTonnes+17
  16+ 84E6              ; For each view laser a localised copy of the stats
  17+ 84E6              ; TODO - need to add code to maintain on load/save/equipment transactions
  18+ 84E6 00 00 00 00  LaserType               DS  4               ; quick reference to laser type
  19+ 84EA 00 00 00 00  LaserDamagedFlag        DS  4               ; probabiliy out of 255 that it will no fire, 0 = good, 255 = will not fire
  20+ 84EE              ; dont need as static from table LaserPulseRate          DS  4               ; how many pulses can be fired before long pause
  21+ 84EE              ; dont need as static from table LaserPulsePause         DS  4               ; time before next pulse - 0 = beam
  22+ 84EE              ; dont need as static from table LaserPulseRest          DS  4               ; time before pulse count resets to 0
  23+ 84EE              ; dont need as static from table LaserDamageOutput       DS  4               ; amount of damage for a laser hit
  24+ 84EE              ; dont need as static from table LaserEnergyDrain        DS  4               ; amount of energy drained by cycle
  25+ 84EE              ; dont need as static from table LaserHeat               DS  4               ; amount of heat generated
  26+ 84EE              ; dont need as static from table LaserDurability         DS  4               ; probabability out of 255 that a hit on it unshielded will add random amount of damage
  27+ 84EE              ; dont need as static from table LaserDurabilityAmount   DS  4               ; max amount of damagage can be sustained in one damage hit
  28+ 84EE
  29+ 84EE
  30+ 84EE              QQ20                    equ CargoTonnes
  31+ 84EE 00 00 00...  EquipmentFitted         DS  EQ_ITEM_COUNT    ; Series of flags for if each item is fitted
  32+ 8508              ECMPresent				EQU EquipmentFitted + EQ_ECM				; 0380
  33+ 8508              FuelScoop               EQU EquipmentFitted + EQ_FUEL_SCOOPS
  34+ 8508              EnergyBomb				EQU EquipmentFitted + EQ_ENERGY_BOMB		; 0382	Also random hyperspeace in Elite A
  35+ 8508              ExtraEnergyUnit			EQU EquipmentFitted + EQ_ENERGY_UNIT        ; 0383
  36+ 8508              DockingComputer 		EQU EquipmentFitted + EQ_DOCK_COMP    		; 0384
  37+ 8508              GalacticHyperDrive		EQU EquipmentFitted + EQ_GAL_DRIVE   		; 0385
  38+ 8508              EscapePod				EQU EquipmentFitted + EQ_ESCAPE_POD  		; 0386
  39+ 8508 01           FuelScoopsBarrelStatus	DB	1				; 0381
  40+ 8509
# file closed: ./Variables/EquipmentVariables.asm
 619  8509                  INCLUDE "./Variables/random_number.asm"
# file opened: ./Variables/random_number.asm
   1+ 8509              doRandom2:									; .DORND2	\ -> &3F85 \ Restricted for explosion dust.
   2+ 8509              doRND2:
   3+ 8509 A7           	and		a								; fast clear carry  leave bit0 of RAND+2 at 0.
   4+ 850A              doRandom:									;.DORND	\ -> &3F86 \ do random, new A, X.
   5+ 850A              ; "doRandom, Random Seed update, new value in A & C)"
   6+ 850A              ; uses a c h l registers
   7+ 850A              doRND:                  ;exx                                     ; protect bc,de,hl
   8+ 850A 3A 5E 7E                             ld		a,(RandomSeed)					; Get Seed 0
   9+ 850D CB 17                                rl		a								; Rotate L including carry
  10+ 850F 4F                                   ld		c,a								; c =  double lo
  11+ 8510 21 60 7E     .AddSeed2:              ld		hl,RandomSeed2
  12+ 8513 8E                                   adc		a,(hl)							; RAND+2
  13+ 8514 32 5E 7E     .SaveAtoSeed:           ld		(RandomSeed),a					; and save RAND
  14+ 8517 08           .SaveBtoSeed2:          ex		af,af'
  15+ 8518 79                                   ld		a,c
  16+ 8519 32 60 7E                             ld		(RandomSeed2),a
  17+ 851C 08                                   ex		af,af'
  18+ 851D 3A 5F 7E                             ld		a,(RandomSeed1)
  19+ 8520 4F                                   ld		c,a								; C = Seed1
  20+ 8521 21 61 7E     .AddSeed3:              ld		hl,RandomSeed3
  21+ 8524 8E                                   adc		a,(hl)
  22+ 8525 32 5F 7E                             ld		(RandomSeed1),a
  23+ 8528 08                                   ex		af,af'
  24+ 8529 79                                   ld		a,c
  25+ 852A 32 61 7E                             ld		(RandomSeed3),a
  26+ 852D 08                                   ex		af,af'
  27+ 852E                                      ;exx                                     ; get bc,de,hl back
  28+ 852E C9                                   ret
  29+ 852F
  30+ 852F 21 5E 7E     saveRandomSeeds:        ld      hl,RandomSeed
  31+ 8532 11 62 7E                             ld      de,RandomSeedSave
  32+ 8535 01 04 00                             ld      bc,4
  33+ 8538 ED A0                                ldi
  34+ 853A ED A0                                ldi
  35+ 853C ED A0                                ldi
  36+ 853E ED A0                                ldi
  37+ 8540 C9                                   ret
  38+ 8541
  39+ 8541 21 62 7E     restoreRandomSeeds:     ld      hl,RandomSeedSave
  40+ 8544 11 5E 7E                             ld      de,RandomSeed
  41+ 8547 01 04 00                             ld      bc,4
  42+ 854A ED A0                                ldi
  43+ 854C ED A0                                ldi
  44+ 854E ED A0                                ldi
  45+ 8550 ED A0                                ldi
  46+ 8552 C9                                   ret
# file closed: ./Variables/random_number.asm
 620  8553                  INCLUDE "./Variables/galaxy_seed.asm"
# file opened: ./Variables/galaxy_seed.asm
   1+ 8553 47 41 4C 41  GALAXYSEED DB "GALAXYSEED"
   1+ 8557 58 59 53 45
   1+ 855B 45 44
   2+ 855D 21 0D 80     copy_galaxy_to_system:  ld		hl,GalaxySeeds
   3+ 8560 11 E9 7F                             ld		de,SystemSeed
   4+ 8563 ED A0        copy_seed:		        ldi
   5+ 8565 ED A0                                ldi
   6+ 8567 ED A0                                ldi
   7+ 8569 ED A0                                ldi
   8+ 856B ED A0                                ldi
   9+ 856D ED A0                                ldi
  10+ 856F C9                                   ret
  11+ 8570
  12+ 8570 21 E9 7F     copy_system_to_galaxy:  ld		hl,SystemSeed
  13+ 8573 11 0D 80                             ld		de,GalaxySeeds
  14+ 8576 18 EB                                jr		copy_seed
  15+ 8578
  16+ 8578 21 0D 80     copy_galaxy_to_working: ld		hl,GalaxySeeds
  17+ 857B 11 01 80                             ld		de,WorkingSeeds
  18+ 857E 18 E3                                jr		copy_seed
  19+ 8580
  20+ 8580 21 01 80     copy_working_to_galaxy: ld		hl,WorkingSeeds
  21+ 8583 11 0D 80                             ld		de,GalaxySeeds
  22+ 8586 18 DB                                jr		copy_seed
  23+ 8588
  24+ 8588 21 01 80     copy_working_to_system: ld		hl,WorkingSeeds
  25+ 858B 11 E9 7F                             ld		de,SystemSeed
  26+ 858E 18 D3                                jr		copy_seed
  27+ 8590
  28+ 8590 21 E9 7F     copy_system_to_working: ld		hl,SystemSeed
  29+ 8593 11 01 80                             ld		de,WorkingSeeds
  30+ 8596 18 CB                                jr		copy_seed
  31+ 8598
  32+ 8598              next_system_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  33+ 8598 CD 9B 85     		call	.NextStep					; This logic means we hard code x4
  34+ 859B              .NextStep:
  35+ 859B CD 9E 85     		call	process_seed				; This logic means we hard code x2
  36+ 859E              process_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  37+ 859E 3A E9 7F     		ld		a,(SystemSeed)				; QQ15
  38+ 85A1 B7           		or		a							; clear carry flag
  39+ 85A2 21 EB 7F     		ld		hl,SystemSeed+2				; hl -> qq+2
  40+ 85A5 86           		add		a,(hl)						; a= QQ15 + QQ152
  41+ 85A6 47           		ld		b,a							; partial sum lo
  42+ 85A7 3A EA 7F     		ld		a,(SystemSeed+1)
  43+ 85AA 21 EC 7F     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  44+ 85AD 8E           		adc		a,(hl)						; note add with carry
  45+ 85AE 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  46+ 85AF 3A EB 7F     		ld		a,(SystemSeed+2)
  47+ 85B2 32 E9 7F     		ld		(SystemSeed+0),a			; copy qq152 to qq150
  48+ 85B5 3A EC 7F     		ld		a,(SystemSeed+3)
  49+ 85B8 32 EA 7F     		ld		(SystemSeed+1),a			; copy qq153 to qq151
  50+ 85BB 3A EE 7F     		ld		a,(SystemSeed+5)
  51+ 85BE 32 EC 7F     		ld		(SystemSeed+3),a			; copy qq155 to qq153
  52+ 85C1 3A ED 7F     		ld		a,(SystemSeed+4)
  53+ 85C4 32 EB 7F     		ld		(SystemSeed+2),a			; copy qq154 to qq152
  54+ 85C7 B7           		or		a
  55+ 85C8 78           		ld		a,b
  56+ 85C9 21 EB 7F     		ld		hl,SystemSeed+2				; hl -> qq+2
  57+ 85CC 86           		add	    a,(hl)
  58+ 85CD 32 ED 7F     		ld		(SystemSeed+4),a
  59+ 85D0 79           		ld		a,c
  60+ 85D1 21 EC 7F     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  61+ 85D4 8E           		adc		a,(hl)
  62+ 85D5 32 EE 7F     		ld		(SystemSeed+5),a
  63+ 85D8 C9           		ret
  64+ 85D9
  65+ 85D9              next_working_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  66+ 85D9 CD DC 85     		call	.NextStep					; This logic means we hard code x4
  67+ 85DC              .NextStep:
  68+ 85DC CD DF 85     		call	working_seed				; This logic means we hard code x2
  69+ 85DF              working_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  70+ 85DF              ; x = a + c
  71+ 85DF 3A 01 80     		ld		a,(WorkingSeeds)			; QQ15
  72+ 85E2 B7           		or		a							; clear carry flag
  73+ 85E3 21 03 80     		ld		hl,WorkingSeeds+2			; hl -> qq+2 [c]
  74+ 85E6 86           		add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
  75+ 85E7 47           		ld		b,a							; partial sum lo [x]
  76+ 85E8              ; y = b + d	+ carry
  77+ 85E8 3A 02 80     		ld		a,(WorkingSeeds+1)          ; [b]
  78+ 85EB 21 04 80     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
  79+ 85EE 8E           		adc		a,(hl)						; note add with carry
  80+ 85EF 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  81+ 85F0 3A 03 80     		ld		a,(WorkingSeeds+2)
  82+ 85F3 32 01 80     		ld		(WorkingSeeds+0),a			; copy qq152 to qq150 [a] = [c]
  83+ 85F6 3A 04 80     		ld		a,(WorkingSeeds+3)
  84+ 85F9 32 02 80     		ld		(WorkingSeeds+1),a			; copy qq153 to qq151 [b] = [d]
  85+ 85FC 3A 06 80     		ld		a,(WorkingSeeds+5)
  86+ 85FF 32 04 80     		ld		(WorkingSeeds+3),a			; copy qq155 to qq153 [d] = [f]
  87+ 8602 3A 05 80     		ld		a,(WorkingSeeds+4)
  88+ 8605 32 03 80     		ld		(WorkingSeeds+2),a			; copy qq154 to qq152 [c] = [e]
  89+ 8608 B7           		or		a
  90+ 8609 78           		ld		a,b
  91+ 860A 21 03 80     		ld		hl,WorkingSeeds+2		    ; hl -> qq+2
  92+ 860D 86           		add	    a,(hl)
  93+ 860E 32 05 80     		ld		(WorkingSeeds+4),a			; e = x + [c]
  94+ 8611 79           		ld		a,c
  95+ 8612 21 04 80     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 )we don't inc as it affects carry)
  96+ 8615 8E           		adc		a,(hl)
  97+ 8616 32 06 80     		ld		(WorkingSeeds+5),a			; f = y + [d] + carry
  98+ 8619 C9           		ret
  99+ 861A
 100+ 861A 32           working_distX	DB 50
 101+ 861B 32           working_distY	DB 50
 102+ 861C 00           current_distY	DB 0
 103+ 861D
 104+ 861D AF           find_present_system:    xor		a
 105+ 861E 32 76 7F                             ld		(XSAV),a
 106+ 8621 3A EA 7F     .CounterLoop:           ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 107+ 8624 4F                                   ld		c,a
 108+ 8625 3A 14 80     .calcLocaldy:           ld		a,(PresentSystemY)
 109+ 8628 47                                   ld		b,a								; so b holds Y ccord
 110+ 8629 79                                   ld		a,c
 111+ 862A 90                                   sub		b
 112+ 862B CB 7F                                bit		7,a
 113+ 862D 28 02                                jr		z,.positivedy
 114+ 862F ED 44        .negativedy:            neg
 115+ 8631 32 1C 86     .positivedy:            ld		(current_distY),a				; save cuirrent_dist Y as we need it maybe
 116+ 8634 ED 5B 1A 86                          ld		de,(working_distX)
 117+ 8638 BA                                   cp		d
 118+ 8639 30 24                                jr		nc,.toofar
 119+ 863B 3A EC 7F     .calcLocaldx:           ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 120+ 863E 4F                                   ld		c,a
 121+ 863F 3A 13 80                             ld		a,(PresentSystemX)
 122+ 8642 47                                   ld		b,a								; so b holds Y ccord
 123+ 8643 79                                   ld		a,c
 124+ 8644 90                                   sub		b
 125+ 8645 CB 7F                                bit		7,a
 126+ 8647 28 02                                jr		z,.positivedx
 127+ 8649 ED 44        .negativedx:            neg
 128+ 864B 4F           .positivedx:            ld		c,a
 129+ 864C BB                                   cp		e
 130+ 864D 30 10                                jr		nc,.toofar
 131+ 864F 3A 1C 86     .Nearer:			    ld		a,(current_distY) 				; we have a closer system
 132+ 8652 47                                   ld		b,a								; we have c to recall Y into b
 133+ 8653 ED 43 1A 86                          ld		(working_distX),bc
 134+ 8657 C5                                   push	bc
 135+ 8658 CD 90 85                             call 	copy_system_to_working
 136+ 865B C1                                   pop		bc
 137+ 865C 78                                   ld		a,b								;
 138+ 865D B1                                   or		c								;
 139+ 865E C8                                   ret		z								; if we have distance 0 then bang on
 140+ 865F CD 98 85     .toofar:                call	next_system_seed
 141+ 8662 3A 76 7F                             ld		a,(XSAV)
 142+ 8665 3D                                   dec		a
 143+ 8666 FE 00                                cp		0
 144+ 8668 C8                                   ret		z
 145+ 8669 32 76 7F                             ld		(XSAV),a
 146+ 866C 18 B3                                jr		.CounterLoop
 147+ 866E
 148+ 866E              get_planet_data_working_seed:
 149+ 866E 3A 02 80     		ld		a, (WorkingSeeds+1)
 150+ 8671 E6 07        		and		7
 151+ 8673 32 2E 80     		ld		(DisplayEcononmy),a
 152+ 8676 3A 03 80     		ld		a, (WorkingSeeds+2)
 153+ 8679 CB 3F        		srl	a
 154+ 867B CB 3F        		srl	a
 155+ 867D CB 3F        		srl	a
 156+ 867F CB 3F        		srl	a								; c/8
 157+ 8681 E6 07        		and		7
 158+ 8683 32 2F 80     		ld		(DisplayGovernment),a
 159+ 8686 CB 3F        		srl	a
 160+ 8688 FE 00        		cp		0
 161+ 868A 20 08        		jr		nz,.CanBeRich
 162+ 868C              .Fedual:
 163+ 868C 3A 2E 80     		ld		a,(DisplayEcononmy)
 164+ 868F F6 02        		or		2							; Adjust Eco for Anarchy and Feudal, set bit 1.
 165+ 8691 32 2E 80     		ld		(DisplayEcononmy),a
 166+ 8694              .CanBeRich:
 167+ 8694 3A 2E 80     		ld		a,(DisplayEcononmy)
 168+ 8697 EE 07        		xor		7							; flip economy so Rich is now 7
 169+ 8699 32 30 80     		ld		(DisplayTekLevel),a			; Flipped Eco, EcoEOR7, Rich Ind = 7
 170+ 869C 47           		ld		b,a
 171+ 869D 3A 04 80     		ld		a,(WorkingSeeds+3)
 172+ 86A0 E6 03        		and		3
 173+ 86A2 80           		add		a,b
 174+ 86A3 32 30 80     		ld		(DisplayTekLevel),a			; Tek Level += seed d & 3
 175+ 86A6 3A 2F 80     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 176+ 86A9 CB 3F        		srl		a 							; gov/2
 177+ 86AB 47           		ld		b,a
 178+ 86AC 3A 30 80     		ld		a,(DisplayTekLevel)
 179+ 86AF 80           		add		a,b
 180+ 86B0 32 30 80     		ld		(DisplayTekLevel),a			; Tek += gov /2
 181+ 86B3 CB 27        		sla		a
 182+ 86B5 CB 27        		sla		a							; Onto Population (TL-1)*= 4
 183+ 86B7 47           		ld		b,a
 184+ 86B8 3A 2E 80     		ld		a,(DisplayEcononmy)
 185+ 86BB 80           		add		a,b                  		; TechLevel*4 + Eco   7-56
 186+ 86BC 47           		ld		b,a
 187+ 86BD 3A 2F 80     		ld		a,(DisplayGovernment)
 188+ 86C0 3C           		inc		a  							; +Government, 0 is Anarchy + 1
 189+ 86C1 32 31 80     		ld		(DisplayPopulation),a
 190+ 86C4 3A 2E 80     		ld		a,(DisplayEcononmy)
 191+ 86C7 EE 07        		xor		7							; Onto productivity
 192+ 86C9 C6 03        		add		3							;  (Flipped eco +3)
 193+ 86CB 57           		ld		d,a
 194+ 86CC 3A 2F 80     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 195+ 86CF C6 04        		add		4
 196+ 86D1 5F           		ld		e,a
 197+ 86D2 ED 30        		mul									; ; DE = d*e, Productivity part 1. has hsb in A, lsb in P.
 198+ 86D4 3A 31 80     		ld		a,(DisplayPopulation)		; then we use d for radius
 199+ 86D7 57           		ld		d,a
 200+ 86D8 ED 30        		mul
 201+ 86DA CB 23        		sla		e
 202+ 86DC CB 1A        		rr		d
 203+ 86DE CB 23        		sla		e
 204+ 86E0 CB 1A        		rr		d
 205+ 86E2 CB 23        		sla		e
 206+ 86E4 CB 1A        		rr		d							; de * 8
 207+ 86E6 ED 53 33 80  		ld		(DisplayProductivity),de
 208+ 86EA              .DoRadius:
 209+ 86EA 3A 04 80     		ld		a,(WorkingSeeds+3)
 210+ 86ED 4F           		ld		c,a
 211+ 86EE 3A 06 80     		ld		a,(WorkingSeeds+5)
 212+ 86F1 E6 0F        		and		$0F							;  lower 4 bits of w2_h determine planet radius
 213+ 86F3 C6 0B        		add		11							;  radius min = 256*11 = 2816 km
 214+ 86F5 47           		ld		b,a							;
 215+ 86F6 ED 43 37 80  		ld		(DisplayRadius),bc
 216+ 86FA C9           		ret
 217+ 86FB
# file closed: ./Variables/galaxy_seed.asm
 621  86FB                  INCLUDE "./Tables/text_tables.asm"
# file opened: ./Tables/text_tables.asm
   1+ 86FB 50 75 6C 73  StatusLaserName1	DB	"Pulse",0
   1+ 86FF 65 00
   2+ 8701 42 65 61 6D  StatusLaserName2	DB	"Beam",0
   2+ 8705 00
   3+ 8706 4D 69 6C 69  StatusLaserName3    DB  "Military",0
   3+ 870A 74 61 72 79
   3+ 870E 00
   4+ 870F 4D 69 6E 69  StatusLaserName4    DB  "Mining",0
   4+ 8713 6E 67 00
   5+ 8716 43 75 73 74  StatusLaserName5    DB  "Custom",0
   5+ 871A 6F 6D 00
   6+ 871D
   7+ 871D FB 86 01 87  StatusLaserNameIdx	DW	StatusLaserName1,StatusLaserName2,StatusLaserName3,StatusLaserName4,StatusLaserName5
   7+ 8721 06 87 0F 87
   7+ 8725 16 87
   8+ 8727              StatusLaserNameIdxLen EQU $ - StatusLaserNameIdx
   9+ 8727
  10+ 8727 44 6F 63 6B  ConditionName1		DB "Docked",0
  10+ 872B 65 64 00
  11+ 872E 47 72 65 65  ConditionName2		DB "Green",0
  11+ 8732 6E 00
  12+ 8734 59 65 6C 6C  ConditionName3		DB "Yellow",0
  12+ 8738 6F 77 00
  13+ 873B 52 65 64 00  ConditionName4		DB "Red",0
  14+ 873F
  15+ 873F 27 87 2E 87  ConditionNameIdx	DW ConditionName1,ConditionName2,ConditionName3,ConditionName4
  15+ 8743 34 87 3B 87
  16+ 8747              ConditionNameIdxLen EQU $ - ConditionNameIdx
  17+ 8747
  18+ 8747 41 42 4F 55  StatusDiagrams		DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION",0
  18+ 874B 53 45 49 54
  18+ 874F 49 4C 45 54
  18+ 8753 53 54 4F 4E
  18+ 8757 4C 4F 4E 55
  18+ 875B 54 48 4E 4F
  18+ 875F 41 4C 4C 45
  18+ 8763 58 45 47 45
  18+ 8767 5A 41 43 45
  18+ 876B 42 49 53 4F
  18+ 876F 55 53 45 53
  18+ 8773 41 52 4D 41
  18+ 8777 49 4E 44 49
  18+ 877B 52 45 41 3F
  18+ 877F 45 52 41 54
  18+ 8783 45 4E 42 45
  18+ 8787 52 41 4C 41
  18+ 878B 56 45 54 49
  18+ 878F 45 44 4F 52
  18+ 8793 51 55 41 4E
  18+ 8797 54 45 49 53
  18+ 879B 52 49 4F 4E
  18+ 879F 00
  19+ 87A0
  20+ 87A0 00 00 04 00  RankingTableLow		DW	$0000,$0004,$0008,$0010,$0020,$0100,$0200,$0A00,$1900,$C1FF,$FFFF
  20+ 87A4 08 00 10 00
  20+ 87A8 20 00 00 01
  20+ 87AC 00 02 00 0A
  20+ 87B0 00 19 FF C1
  20+ 87B4 FF FF
  21+ 87B6 03 00 07 00  RankingTableHigh	DW	$0003,$0007,$000F,$001F,$00FF,$01FF,$09FF,$18FF,$C0FF,$FEFF,$FFFF
  21+ 87BA 0F 00 1F 00
  21+ 87BE FF 00 FF 01
  21+ 87C2 FF 09 FF 18
  21+ 87C6 FF C0 FF FE
  21+ 87CA FF FF
  22+ 87CC
  23+ 87CC 48 61 72 6D  RankingName1		DB 	"Harmless",0
  23+ 87D0 6C 65 73 73
  23+ 87D4 00
  24+ 87D5 4D 6F 73 74  RankingName2		DB 	"Mostly Harmless",0
  24+ 87D9 6C 79 20 48
  24+ 87DD 61 72 6D 6C
  24+ 87E1 65 73 73 00
  25+ 87E5 50 6F 6F 72  RankingName3		DB 	"Poor",0
  25+ 87E9 00
  26+ 87EA 41 76 65 72  RankingName4		DB 	"Average",0
  26+ 87EE 61 67 65 00
  27+ 87F2 41 62 6F 76  RankingName5		DB 	"Above Average",0
  27+ 87F6 65 20 41 76
  27+ 87FA 65 72 61 67
  27+ 87FE 65 00
  28+ 8800 43 6F 6D 70  RankingName6		DB 	"Competent",0
  28+ 8804 65 74 65 6E
  28+ 8808 74 00
  29+ 880A 44 61 6E 67  RankingName7		DB 	"Dangerous",0
  29+ 880E 65 72 6F 75
  29+ 8812 73 00
  30+ 8814 44 65 61 64  RankingName8		DB 	"Deadly",0
  30+ 8818 6C 79 00
  31+ 881B 2D 2D 2D 2D  RankingName9		DB 	"---- E L I T E ---",0
  31+ 881F 20 45 20 4C
  31+ 8823 20 49 20 54
  31+ 8827 20 45 20 2D
  31+ 882B 2D 2D 00
  32+ 882E 53 6B 6F 6C  RankingName10		DB 	"Skollobsgod",0
  32+ 8832 6C 6F 62 73
  32+ 8836 67 6F 64 00
  33+ 883A 4E 75 74 74  RankingName11		DB 	"Nutter",0
  33+ 883E 65 72 00
  34+ 8841
  35+ 8841              RankingEQHarmless	EQU 0
  36+ 8841              RankingEQMostly		EQU 1
  37+ 8841              RankingEQPoor		EQU 2
  38+ 8841              RankingEQAverage	EQU 3
  39+ 8841              RankingEQAbove		EQU 4
  40+ 8841              RankingEQCompetent  EQU 5
  41+ 8841              RankingEQDangerous	EQU 6
  42+ 8841              RankingEQDeadly		EQU 7
  43+ 8841              RankingEQElite		EQU 8
  44+ 8841              RankingEQSkollob	EQU 9
  45+ 8841              RankingEQNutter		EQU 10
  46+ 8841
  47+ 8841
  48+ 8841
  49+ 8841 CC 87 D5 87  RankingNameIdx		dw RankingName1,RankingName2,RankingName3,RankingName4,RankingName5,RankingName6,RankingName7,RankingName8,RankingName9,RankingName10,RankingName11
  49+ 8845 E5 87 EA 87
  49+ 8849 F2 87 00 88
  49+ 884D 0A 88 14 88
  49+ 8851 1B 88 2E 88
  49+ 8855 3A 88
  50+ 8857              RankingNameIdxLen EQU $ - RankingNameIdx
  51+ 8857
  52+ 8857
  53+ 8857              getTableText:
  54+ 8857              ; ">getTableText, hl = indexlist, a = textnbr, returns with hl = porinter to head of text"
  55+ 8857              ; ">Note for ranking first 2 bytes are target rank"
  56+ 8857 D5           	push	de								; save DE as we will likley need it in caller
  57+ 8858 ED 31        	add		hl,a							; 0 based ref, and its 2 bytes
  58+ 885A ED 31        	add		hl,a
  59+ 885C 5E           	ld		e,(hl)
  60+ 885D 23           	inc		hl
  61+ 885E 56           	ld		d,(hl)							; de = indexed address
  62+ 885F EB           	ex		de,hl							; flip it to hl
  63+ 8860 D1           	pop		de								; retrieve de
  64+ 8861 C9           	ret										; return with hl as start entry
  65+ 8862
  66+ 8862
  67+ 8862              ;               CF      ZF      Result
  68+ 8862              ;               -----------------------------------
  69+ 8862              ;               0       0       HL > DE
  70+ 8862              ;               0       1       HL == DE
  71+ 8862              ;               1       0       HL < DE
  72+ 8862              ;               1       1       Impossible
  73+ 8862              getRankIndex:
  74+ 8862              ; ">getRank, de = kill count, returns a = index,hl destroyed"
  75+ 8862              ; ">Note for ranking first 2 bytes are target rank"
  76+ 8862 7A           	ld		a,d
  77+ 8863 B3           	or		e
  78+ 8864 FE 00        	cp		0
  79+ 8866 C8           	ret		z								; quicks skip for 0 kills
  80+ 8867 AF           	xor 	a
  81+ 8868 21 A0 87     	ld		hl,RankingTableLow
  82+ 886B              .testLoop:
  83+ 886B 4E           	ld		c,(hl)
  84+ 886C 23           	inc		hl
  85+ 886D 46           	ld		b,(hl)							; bc = ranking
  86+ 886E E5           	push	hl
  87+ 886F 60           	ld		h,b
  88+ 8870 69           	ld		l,c
  89+ 8871 CD 56 99     	call	compare16HLDE
  90+ 8874 38 06        	jr		c,.HLLTDE
  91+ 8876              .HLGTEDE									; Found the correct rank
  92+ 8876 E1           	pop		hl
  93+ 8877 23           	inc		hl								; move to next value
  94+ 8878 23           	inc		hl
  95+ 8879 3C           	inc		a								; we canloop forever as if kills was $FFFF then hits nutter rank but also +1 = 0000 as its 16 bit
  96+ 887A 18 EF        	jr		.testLoop
  97+ 887C              .HLLTDE:									; HL < Kills so found correct rank
  98+ 887C E1           	pop		hl
  99+ 887D C9           	ret
 100+ 887E
# file closed: ./Tables/text_tables.asm
 622  887E                  INCLUDE "./Tables/dictionary.asm"
# file opened: ./Tables/dictionary.asm
   1+ 887E              ; Could move this into rom area for access as it will be read only
   2+ 887E 58 00        WordDummy					DB  "X",0
   3+ 8880 46 72 6F 6E  WordFront					DB	"Front",0              ;1
   3+ 8884 74 00
   4+ 8886 52 69 67 68  WordRight					DB	"Right",0              ;2
   4+ 888A 74 00
   5+ 888C 4C 65 66 74  WordLeft 					DB	"Left",0               ;3
   5+ 8890 00
   6+ 8891 52 65 61 72  WordRear   	 				DB	"Rear",0               ;4
   6+ 8895 00
   7+ 8896 4C 61 72 67  WordLarge           		DB  "Large",0              ;5
   7+ 889A 65 00
   8+ 889C 45 73 63 61  WordEscape          		DB  "Escape",0             ;6
   8+ 88A0 70 65 00
   9+ 88A3 50 6F 64 00  WordPod             		DB  "Pod",0                ;7
  10+ 88A7 43 61 72 67  WordCargo           		DB  "Cargo",0              ;8
  10+ 88AB 6F 00
  11+ 88AD 42 61 79 00  WordBay             		DB  "Bay",0                ;9
  12+ 88B1 46 75 65 6C  WordFuel            		DB  "Fuel",0               ;10
  12+ 88B5 00
  13+ 88B6 53 63 6F 6F  WordScoops          		DB  "Scoops",0             ;11
  13+ 88BA 70 73 00
  14+ 88BD 45 2E 43 2E  WordECM             		DB  "E.C.M.",0             ;12
  14+ 88C1 4D 2E 00
  15+ 88C4 53 79 73 74  WordSystem          		DB  "System",0             ;13
  15+ 88C8 65 6D 00
  16+ 88CB 45 6E 65 72  WordEnergy					DB  "Energy",0             ;14
  16+ 88CF 67 79 00
  17+ 88D2 42 6F 6D 62  WordBomb					DB  "Bomb",0               ;15
  17+ 88D6 00
  18+ 88D7 4C 61 73 65  WordLaser					DB  "Laser",0              ;16
  18+ 88DB 72 00
  19+ 88DD 50 75 6C 73  WordPulse           		DB  "Pulse",0              ;17
  19+ 88E1 65 00
  20+ 88E3 42 65 61 6D  WordBeam            		DB  "Beam",0               ;18
  20+ 88E7 00
  21+ 88E8 4D 69 6C 69  WordMiliary         		DB  "Miliary",0            ;19
  21+ 88EC 61 72 79 00
  22+ 88F0 4D 69 6E 69  WordMining          		DB  "Mining",0             ;20
  22+ 88F4 6E 67 00
  23+ 88F7 43 75 73 74  WordCustom          		DB  "Custom",0             ;21
  23+ 88FB 6F 6D 00
  24+ 88FE 55 6E 69 74  WordUnit            		DB  "Unit",0               ;22
  24+ 8902 00
  25+ 8903 53 68 69 65  WordShield          		DB  "Shield",0             ;23
  25+ 8907 6C 64 00
  26+ 890A 44 6F 63 6B  WordDocking         		DB  "Docking",0            ;24
  26+ 890E 69 6E 67 00
  27+ 8912 43 6F 6D 70  WordComputers       		DB  "Computers",0          ;25
  27+ 8916 75 74 65 72
  27+ 891A 73 00
  28+ 891C 48 79 70 65  WordHyperspace      		DB  "Hyperspace",0         ;26
  28+ 8920 72 73 70 61
  28+ 8924 63 65 00
  29+ 8927 47 61 6C 61  WordGalactic        		DB  "Galactic",0           ;27
  29+ 892B 63 74 69 63
  29+ 892F 00
  30+ 8930 45 78 74 72  WordExtra           		DB  "Extra",0              ;28
  30+ 8934 61 00
  31+ 8936 43 6C 65 61  WordClean           		DB  "Clean",0              ;29
  31+ 893A 6E 00
  32+ 893C 4F 66 66 65  WordOffender        		DB  "Offender",0           ;30
  32+ 8940 6E 64 65 72
  32+ 8944 00
  33+ 8945 46 75 67 69  WordFugitive        		DB  "Fugitive",0           ;31
  33+ 8949 74 69 76 65
  33+ 894D 00
  34+ 894E 46 6F 6F 64  WordFood					DB	"Food",0               ;32
  34+ 8952 00
  35+ 8953 54 65 78 74  WordTextiles				DB 	"Textiles",0           ;33
  35+ 8957 69 6C 65 73
  35+ 895B 00
  36+ 895C 52 61 64 69  WordRadioactives			DB  "Radioactives",0       ;34
  36+ 8960 6F 61 63 74
  36+ 8964 69 76 65 73
  36+ 8968 00
  37+ 8969 53 6C 61 76  WordSlaves					DB  "Slaves",0             ;35
  37+ 896D 65 73 00
  38+ 8970 4C 69 71 75  WordLiquorWines     		DB  "Liquor/Wines",0       ;36
  38+ 8974 6F 72 2F 57
  38+ 8978 69 6E 65 73
  38+ 897C 00
  39+ 897D 4C 75 78 75  WordLuxuries  	    		DB  "Luxuries",0	       ;37
  39+ 8981 72 69 65 73
  39+ 8985 00
  40+ 8986 4E 61 72 63  WordNarcotics  	    		DB  "Narcotics",0	       ;38
  40+ 898A 6F 74 69 63
  40+ 898E 73 00
  41+ 8990 4D 61 63 68  WordMachinery  	    		DB  "Machinery",0	       ;39
  41+ 8994 69 6E 65 72
  41+ 8998 79 00
  42+ 899A 41 6C 6C 6F  WordAlloys  				DB  "Alloys",0		       ;40
  42+ 899E 79 73 00
  43+ 89A1 46 69 72 65  WordFirearms  	    		DB  "Firearms",0	       ;41
  43+ 89A5 61 72 6D 73
  43+ 89A9 00
  44+ 89AA 46 75 72 73  WordFurs  		    		DB  "Furs",0	           ;42
  44+ 89AE 00
  45+ 89AF 4D 69 6E 65  WordMinerals  	    		DB  "Minerals",0           ;43
  45+ 89B3 72 61 6C 73
  45+ 89B7 00
  46+ 89B8 47 6F 6C 64  WordGold  		    		DB  "Gold",0	           ;44
  46+ 89BC 00
  47+ 89BD 50 6C 61 74  WordPlatinum  	    		DB  "Platinum",0           ;45
  47+ 89C1 69 6E 75 6D
  47+ 89C5 00
  48+ 89C6 47 65 6D 2D  WordGemStones  				DB  "Gem-Stones",0         ;46
  48+ 89CA 53 74 6F 6E
  48+ 89CE 65 73 00
  49+ 89D1 41 6C 69 65  WordAlienItems      		DB  "Alien Items",0        ;47
  49+ 89D5 6E 20 49 74
  49+ 89D9 65 6D 73 00
  50+ 89DD 54 6F 6E 6E  WordTonnes          		DB  "Tonnes",0             ;48
  50+ 89E1 65 73 00
  51+ 89E4 4B 69 6C 6F  WordKilograms       		DB  "Kilograms",0          ;49
  51+ 89E8 67 72 61 6D
  51+ 89EC 73 00
  52+ 89EE 47 72 61 6D  WordGrams           		DB  "Grams",0			   ;50
  52+ 89F2 73 00
  53+ 89F4 53 68 6F 72  WordShort           		DB  "Short",0			   ;51
  53+ 89F8 74 00
  54+ 89FA 52 61 6E 67  WordRange           		DB  "Range",0			   ;52
  54+ 89FE 65 00
  55+ 8A00 43 68 61 72  WordChart	        		DB  "Chart",0			   ;53
  55+ 8A04 74 00
  56+ 8A06 44 61 74 61  WordData					DB	"Data",0			   ;54
  56+ 8A0A 00
  57+ 8A0B 4F 6E 00     WordOn						DB  "On",0                 ;55
  58+ 8A0E 44 69 73 74  WordDistance        		DB  "Distance",0           ;56
  58+ 8A12 61 6E 63 65
  58+ 8A16 00
  59+ 8A17 45 63 6F 6E  WordEconomy         		DB  "Economy",0            ;57
  59+ 8A1B 6F 6D 79 00
  60+ 8A1F 47 6F 76 65  WordGovernment      		DB  "Government",0         ;58
  60+ 8A23 72 6E 6D 65
  60+ 8A27 6E 74 00
  61+ 8A2A 54 65 63 68  WordTechLevel       		DB  "TechLevel",0          ;59
  61+ 8A2E 4C 65 76 65
  61+ 8A32 6C 00
  62+ 8A34 50 6F 70 75  WordPopulation      		DB  "Population",0         ;60
  62+ 8A38 6C 61 74 69
  62+ 8A3C 6F 6E 00
  63+ 8A3F 4D 69 6C 6C  WordMillion         		DB  "Million",0            ;61
  63+ 8A43 69 6F 6E 00
  64+ 8A47 42 69 6C 6C  WordBillion         		DB  "Billion",0            ;62
  64+ 8A4B 69 6F 6E 00
  65+ 8A4F 47 72 6F 73  WordGross           		DB  "Gross",0              ;63
  65+ 8A53 73 00
  66+ 8A55 50 72 6F 64  WordProductivity    		DB  "Productivity",0       ;64
  66+ 8A59 75 63 74 69
  66+ 8A5D 76 69 74 79
  66+ 8A61 00
  67+ 8A62 41 76 65 72  WordAverage         		DB  "Average",0            ;65
  67+ 8A66 61 67 65 00
  68+ 8A6A 52 61 64 69  WordRadius          		DB  "Radius",0             ;66
  68+ 8A6E 75 73 00
  69+ 8A71 4B 4D 00     WordKM              		DB  "KM",0                 ;67
  70+ 8A74 4D 20 43 52  WordMCR             		DB  "M CR",0               ;68
  70+ 8A78 00
  71+ 8A79 52 69 63 68  WordRich					DB  "Rich",0               ;69
  71+ 8A7D 00
  72+ 8A7E 41 76 67 00  WordAvg         			DB  "Avg",0            	   ;70
  73+ 8A82 4D 61 69 6E  WordMainly          		DB  "Mainly",0             ;71
  73+ 8A86 6C 79 00
  74+ 8A89 50 6F 6F 72  WordPoor            		DB  "Poor",0               ;72
  74+ 8A8D 00
  75+ 8A8E 49 6E 64 75  WordIndustrial      		DB  "Industrial",0         ;73
  75+ 8A92 73 74 72 69
  75+ 8A96 61 6C 00
  76+ 8A99 41 67 72 69  WordAgricultural    		DB  "Agricultural",0       ;74
  76+ 8A9D 63 75 6C 74
  76+ 8AA1 75 72 61 6C
  76+ 8AA5 00
  77+ 8AA6 41 6E 61 72  WordAnarchy                 DB  "Anarchy",0            ;75
  77+ 8AAA 63 68 79 00
  78+ 8AAE 46 65 75 64  WordFeudal                  DB  "Feudal",0             ;76
  78+ 8AB2 61 6C 00
  79+ 8AB5 4D 75 6C 74  WordMultiGovernment         DB  "Multi-Government",0   ;77
  79+ 8AB9 69 2D 47 6F
  79+ 8ABD 76 65 72 6E
  79+ 8AC1 6D 65 6E 74
  79+ 8AC5 00
  80+ 8AC6 44 69 63 74  WordDictatorship            DB  "Dictatorship",0       ;78
  80+ 8ACA 61 74 6F 72
  80+ 8ACE 73 68 69 70
  80+ 8AD2 00
  81+ 8AD3 43 6F 6D 6D  WordCommunist               DB  "Communist",0          ;79
  81+ 8AD7 75 6E 69 73
  81+ 8ADB 74 00
  82+ 8ADD 43 6F 6E 66  WordConfederacy             DB  "Confederacy",0        ;80
  82+ 8AE1 65 64 65 72
  82+ 8AE5 61 63 79 00
  83+ 8AE9 44 65 6D 6F  WordDemocracy               DB  "Democracy",0          ;81
  83+ 8AED 63 72 61 63
  83+ 8AF1 79 00
  84+ 8AF3 43 6F 72 70  WordCorporate               DB  "Corporate State",0    ;82
  84+ 8AF7 6F 72 61 74
  84+ 8AFB 65 20 53 74
  84+ 8AFF 61 74 65 00
  85+ 8B03 53 74 61 74  WordState 					DB  "State",0              ;83
  85+ 8B07 65 00
  86+ 8B09 4C 69 67 68  WordLight 					DB  "Light",0              ;84
  86+ 8B0D 74 00
  87+ 8B0F 59 65 61 72  WordYears 					DB  "Years",0              ;85
  87+ 8B13 73 00
  88+ 8B15 30 00        Word0						DB  "0",0				   ;86
  89+ 8B17 4D 61 72 6B  WordMarket					DB  "Market",0			   ;87
  89+ 8B1B 65 74 00
  90+ 8B1E 50 72 69 63  WordPrices					DB  "Prices",0			   ;88
  90+ 8B22 65 73 00
  91+ 8B25 50 72 6F 64  WordProduct    				DB  "Product",0  		   ;89
  91+ 8B29 75 63 74 00
  92+ 8B2D 55 6F 4D 00  WordUoM						DB  "UoM",0                ;90
  93+ 8B31 50 72 69 63  WordPrice					DB  "Price",0              ;91
  93+ 8B35 65 00
  94+ 8B37 46 6F 72 00  WordFor                     DB  "For",0                ;92
  95+ 8B3B 53 61 6C 65  WordSale                    DB  "Sale",0               ;93
  95+ 8B3F 00
  96+ 8B40 74 00        Wordt						DB  "t",0                  ;94
  97+ 8B42 6B 67 00     Wordkg						DB  "kg",0                 ;95
  98+ 8B45 67 00        Wordg						DB  "g",0                  ;96
  99+ 8B47 51 75 61 6E  WordQuantity				DB  "Quanitity",0		   ;97
  99+ 8B4B 69 74 69 74
  99+ 8B4F 79 00
 100+ 8B51 49 6E 76 00  WordInv                     DB  "Inv",0                ;98
 101+ 8B55 53 74 6F 63  WordStock                   DB  "Stock",0              ;99
 101+ 8B59 6B 00
 102+ 8B5B 45 71 75 69  WordEquip                   DB  "Equip",0              ;100
 102+ 8B5F 70 00
 103+ 8B61 53 68 69 70  WordShip                    DB  "Ship",0               ;101
 103+ 8B65 00
 104+ 8B66              ;WordMissile                 DB  "Missile",0            ;102
 105+ 8B66 48 79 70 65  WordHyperdrive              DB  "Hyperdrive",0
 105+ 8B6A 72 64 72 69
 105+ 8B6E 76 65 00
 106+ 8B71 4D 69 6C 69  WordMilitary                DB  "Military",0
 106+ 8B75 74 61 72 79
 106+ 8B79 00
 107+ 8B7A 41 64 64 65  WordAdder                   DB  "Adder",0
 107+ 8B7E 72 00
 108+ 8B80 41 6E 61 63  WordAnaconda                DB  "Anaconda",0
 108+ 8B84 6F 6E 64 61
 108+ 8B88 00
 109+ 8B89 41 73 70 5F  WordAsp_Mk_2                DB  "Asp_Mk_2",0
 109+ 8B8D 4D 6B 5F 32
 109+ 8B91 00
 110+ 8B92 42 6F 61 00  WordBoa                     DB  "Boa",0
 111+ 8B96 43 61 72 67  WordCargoType5              DB  "CargoType5",0
 111+ 8B9A 6F 54 79 70
 111+ 8B9E 65 35 00
 112+ 8BA1 42 6F 75 6C  WordBoulder                 DB  "Boulder",0
 112+ 8BA5 64 65 72 00
 113+ 8BA9 41 73 74 65  WordAsteroid                DB  "Asteroid",0
 113+ 8BAD 72 6F 69 64
 113+ 8BB1 00
 114+ 8BB2 42 75 73 68  WordBushmaster              DB  "Bushmaster",0
 114+ 8BB6 6D 61 73 74
 114+ 8BBA 65 72 00
 115+ 8BBD 43 68 61 6D  WordChameleon               DB  "Chameleon",0
 115+ 8BC1 65 6C 65 6F
 115+ 8BC5 6E 00
 116+ 8BC7 43 6F 62 72  WordCobraMk3                DB  "CobraMk3",0
 116+ 8BCB 61 4D 6B 33
 116+ 8BCF 00
 117+ 8BD0 43 6F 62 72  WordCobra_Mk_1              DB  "Cobra_Mk_1",0
 117+ 8BD4 61 5F 4D 6B
 117+ 8BD8 5F 31 00
 118+ 8BDB 43 6F 62 72  WordCobra_Mk_3_P            DB  "Cobra_Mk_3_P",0
 118+ 8BDF 61 5F 4D 6B
 118+ 8BE3 5F 33 5F 50
 118+ 8BE7 00
 119+ 8BE8 43 6F 6E 73  WordConstrictor             DB  "Constrictor",0
 119+ 8BEC 74 72 69 63
 119+ 8BF0 74 6F 72 00
 120+ 8BF4 43 6F 72 69  WordCoriolis                DB  "Coriolis",0
 120+ 8BF8 6F 6C 69 73
 120+ 8BFC 00
 121+ 8BFD 43 6F 75 67  WordCougar                  DB  "Cougar",0
 121+ 8C01 61 72 00
 122+ 8C04 44 6F 64 6F  WordDodo                    DB  "Dodo",0
 122+ 8C08 00
 123+ 8C09 44 72 61 67  WordDragon                  DB  "Dragon",0
 123+ 8C0D 6F 6E 00
 124+ 8C10 45 73 63 61  WordEscape_Pod              DB  "Escape_Pod",0
 124+ 8C14 70 65 5F 50
 124+ 8C18 6F 64 00
 125+ 8C1B 46 65 72 5F  WordFer_De_Lance            DB  "Fer_De_Lance",0
 125+ 8C1F 44 65 5F 4C
 125+ 8C23 61 6E 63 65
 125+ 8C27 00
 126+ 8C28 47 65 63 6B  WordGecko                   DB  "Gecko",0
 126+ 8C2C 6F 00
 127+ 8C2E 47 68 61 76  WordGhavial                 DB  "Ghavial",0
 127+ 8C32 69 61 6C 00
 128+ 8C36 49 67 75 61  WordIguana                  DB  "Iguana",0
 128+ 8C3A 6E 61 00
 129+ 8C3D 4B 72 61 69  WordKrait                   DB  "Krait",0
 129+ 8C41 74 00
 130+ 8C43 4C 6F 67 6F  WordLogo                    DB  "Logo",0
 130+ 8C47 00
 131+ 8C48 4D 61 6D 62  WordMamba                   DB  "Mamba",0
 131+ 8C4C 61 00
 132+ 8C4E 4D 69 73 73  WordMissile                 DB  "Missile",0
 132+ 8C52 69 6C 65 00
 133+ 8C56 4D 6F 6E 69  WordMonitor                 DB  "Monitor",0
 133+ 8C5A 74 6F 72 00
 134+ 8C5E 4D 6F 72 61  WordMoray                   DB  "Moray",0
 134+ 8C62 79 00
 135+ 8C64 4F 70 68 69  WordOphidian                DB  "Ophidian",0
 135+ 8C68 64 69 61 6E
 135+ 8C6C 00
 136+ 8C6D 50 6C 61 74  WordPlate                   DB  "Plate",0
 136+ 8C71 65 00
 137+ 8C73 50 79 74 68  WordPython                  DB  "Python",0
 137+ 8C77 6F 6E 00
 138+ 8C7A 50 79 74 68  WordPython_P                DB  "Python_P",0
 138+ 8C7E 6F 6E 5F 50
 138+ 8C82 00
 139+ 8C83 52 6F 63 6B  WordRock_Hermit             DB  "Rock_Hermit",0
 139+ 8C87 5F 48 65 72
 139+ 8C8B 6D 69 74 00
 140+ 8C8F 53 68 75 74  WordShuttleType9            DB  "ShuttleType9",0
 140+ 8C93 74 6C 65 54
 140+ 8C97 79 70 65 39
 140+ 8C9B 00
 141+ 8C9C 53 68 75 74  WordShuttle_Mk_2            DB  "Shuttle_Mk_2",0
 141+ 8CA0 74 6C 65 5F
 141+ 8CA4 4D 6B 5F 32
 141+ 8CA8 00
 142+ 8CA9 53 69 64 65  WordSidewinder              DB  "Sidewinder",0
 142+ 8CAD 77 69 6E 64
 142+ 8CB1 65 72 00
 143+ 8CB4 53 70 6C 69  WordSplinter                DB  "Splinter",0
 143+ 8CB8 6E 74 65 72
 143+ 8CBC 00
 144+ 8CBD 54 65 73 74  WordTestVector              DB  "TestVector",0
 144+ 8CC1 56 65 63 74
 144+ 8CC5 6F 72 00
 145+ 8CC8 54 68 61 72  WordThargoid                DB  "Thargoid",0
 145+ 8CCC 67 6F 69 64
 145+ 8CD0 00
 146+ 8CD1 54 68 61 72  WordThargon                 DB  "Thargon",0
 146+ 8CD5 67 6F 6E 00
 147+ 8CD9 54 72 61 6E  WordTransportType10         DB  "TransportType10",0
 147+ 8CDD 73 70 6F 72
 147+ 8CE1 74 54 79 70
 147+ 8CE5 65 31 30 00
 148+ 8CE9 56 69 70 65  WordViper                   DB  "Viper",0
 148+ 8CED 72 00
 149+ 8CEF 57 6F 72 6D  WordWorm                    DB  "Worm",0
 149+ 8CF3 00
 150+ 8CF4 52 61 74 74  WordRattler                 DB  "Rattler",0
 150+ 8CF8 6C 65 72 00
 151+ 8CFC
 152+ 8CFC 7E 88 80 88  WordIdx				DW  WordDummy,          WordFront,        WordRight,        WordLeft		;0-3
 152+ 8D00 86 88 8C 88
 153+ 8D04 91 88 96 88  					DW  WordRear,           WordLarge,        WordEscape,       WordPod      	;4-7
 153+ 8D08 9C 88 A3 88
 154+ 8D0C A7 88 AD 88  					DW  WordCargo,          WordBay,          WordFuel,         WordScoops   	;8
 154+ 8D10 B1 88 B6 88
 155+ 8D14 BD 88 C4 88  					DW  WordECM,            WordSystem,       WordEnergy,       WordBomb     	;12
 155+ 8D18 CB 88 D2 88
 156+ 8D1C D7 88 DD 88  					DW  WordLaser,          WordPulse,        WordBeam,         WordMiliary  	;16
 156+ 8D20 E3 88 E8 88
 157+ 8D24 F0 88 F7 88  					DW  WordMining,         WordCustom,       WordUnit,         WordShield   	;20
 157+ 8D28 FE 88 03 89
 158+ 8D2C 0A 89 12 89  					DW  WordDocking,        WordComputers,    WordHyperspace,   WordGalactic 	;24
 158+ 8D30 1C 89 27 89
 159+ 8D34 30 89 36 89  					DW  WordExtra,          WordClean,        WordOffender,     WordFugitive	;28
 159+ 8D38 3C 89 45 89
 160+ 8D3C 4E 89 53 89  					DW  WordFood,           WordTextiles,     WordRadioactives, WordSlaves		;32
 160+ 8D40 5C 89 69 89
 161+ 8D44 70 89 7D 89  					DW  WordLiquorWines,    WordLuxuries,     WordNarcotics,    WordMachinery   ;36
 161+ 8D48 86 89 90 89
 162+ 8D4C 9A 89 A1 89  					DW  WordAlloys,         WordFirearms,     WordFurs,         WordMinerals    ;40
 162+ 8D50 AA 89 AF 89
 163+ 8D54 B8 89 BD 89  					DW  WordGold,           WordPlatinum,     WordGemStones,    WordAlienItems  ;44               ;
 163+ 8D58 C6 89 D1 89
 164+ 8D5C DD 89 E4 89  WordIdxUoMFull		DW  WordTonnes,         WordKilograms,    WordGrams,		WordShort		;48
 164+ 8D60 EE 89 F4 89
 165+ 8D64 FA 89 00 8A  					DW	WordRange,		    WordChart,        WordData,         WordOn          ;52
 165+ 8D68 06 8A 0B 8A
 166+ 8D6C 0E 8A 17 8A  					DW  WordDistance,       WordEconomy,      WordGovernment,   WordTechLevel   ;56
 166+ 8D70 1F 8A 2A 8A
 167+ 8D74 34 8A 3F 8A  					DW  WordPopulation,     WordMillion,      WordBillion,      WordGross       ;60
 167+ 8D78 47 8A 4F 8A
 168+ 8D7C 55 8A 62 8A  					DW  WordProductivity,   WordAverage,      WordRadius,       WordKM          ;64
 168+ 8D80 6A 8A 71 8A
 169+ 8D84 74 8A        					DW  WordMCR																	;68
 170+ 8D86 79 8A 7E 8A  WordIdxEconomy		DW  WordRich,           WordAvg,      	  WordMainly,       WordPoor        ;69
 170+ 8D8A 82 8A 89 8A
 171+ 8D8E 8E 8A 99 8A                      DW  WordIndustrial,     WordAgricultural									;73
 172+ 8D92 A6 8A AE 8A  WordIdxGovernment	DW  WordAnarchy,        WordFeudal,       WordMultiGovernment, WordDictatorship ;75
 172+ 8D96 B5 8A C6 8A
 173+ 8D9A D3 8A DD 8A                      DW  WordCommunist,      WordConfederacy,  WordDemocracy,       WordCorporate ;79
 173+ 8D9E E9 8A F3 8A
 174+ 8DA2 03 8B 09 8B  					DW  WordState,          WordLight,        WordYears,           Word0         ; 83
 174+ 8DA6 0F 8B 15 8B
 175+ 8DAA 17 8B 1E 8B  WordIdxMarketmenu	DW  WordMarket,         WordPrices,       WordProduct,         WordUoM	    ;87
 175+ 8DAE 25 8B 2D 8B
 176+ 8DB2 31 8B 37 8B                      DW  WordPrice,          WordFor,          WordSale                          ;91
 176+ 8DB6 3B 8B
 177+ 8DB8 40 8B 42 8B  WordIdxUomAbbrev	DW	Wordt,				Wordkg,           Wordg                 		    ;94
 177+ 8DBC 45 8B
 178+ 8DBE 47 8B 51 8B  					DW  WordQuantity,       WordInv,          WordStock,           WordEquip	;97
 178+ 8DC2 55 8B 5B 8B
 179+ 8DC6 61 8B 4E 8C                      DW  WordShip,           WordMissile       ; 101
 180+ 8DCA 7A 8B 80 8B  WordIdxShipNames:   DW  WordAdder,          WordAnaconda,     WordAsp_Mk_2,        WordBoa
 180+ 8DCE 89 8B 92 8B
 181+ 8DD2 96 8B A1 8B                      DW  WordCargoType5,     WordBoulder,      WordAsteroid,        WordBushmaster
 181+ 8DD6 A9 8B B2 8B
 182+ 8DDA BD 8B C7 8B                      DW  WordChameleon,      WordCobraMk3,     WordCobra_Mk_1,      WordCobra_Mk_3_P
 182+ 8DDE D0 8B DB 8B
 183+ 8DE2 E8 8B F4 8B                      DW  WordConstrictor,    WordCoriolis,     WordCougar,          WordDodo
 183+ 8DE6 FD 8B 04 8C
 184+ 8DEA 09 8C 10 8C                      DW  WordDragon,         WordEscape_Pod,   WordFer_De_Lance,    WordGecko
 184+ 8DEE 1B 8C 28 8C
 185+ 8DF2 2E 8C 36 8C                      DW  WordGhavial,        WordIguana,       WordKrait,           WordLogo
 185+ 8DF6 3D 8C 43 8C
 186+ 8DFA 48 8C 4E 8C                      DW  WordMamba,          WordMissile,      WordMonitor,         WordMoray
 186+ 8DFE 56 8C 5E 8C
 187+ 8E02 64 8C 6D 8C                      DW  WordOphidian,       WordPlate,        WordPython,          WordPython_P
 187+ 8E06 73 8C 7A 8C
 188+ 8E0A 83 8C 8F 8C                      DW  WordRock_Hermit,    WordShuttleType9, WordShuttle_Mk_2,    WordSidewinder
 188+ 8E0E 9C 8C A9 8C
 189+ 8E12 B4 8C BD 8C                      DW  WordSplinter,       WordTestVector,   WordThargoid,        WordThargon
 189+ 8E16 C8 8C D1 8C
 190+ 8E1A D9 8C E9 8C                      DW  WordTransportType10,WordViper,        WordWorm,            WordRattler
 190+ 8E1E EF 8C F4 8C
 191+ 8E22              ; Phrases
 192+ 8E22 05 08 09 00  TextLargeCargoBay			DB 	5,8,9,0          ;0
 193+ 8E26 06 07 00     TextEscapePod				DB	6,7,0            ;1
 194+ 8E29 0A 0B 00     TextFuelScoops				DB	10,11,0          ;2
 195+ 8E2C 0C 0D 00     TextECMSystem				DB	12,13,0          ;3
 196+ 8E2F 0E 0F 00     TextEnergyBomb				DB	14,15,0          ;4
 197+ 8E32 0E 16 00     TextEnergyUnit				DB	14,22,0          ;5
 198+ 8E35 18 19 00     TextDockingComp     		DB  24,25,0          ;6
 199+ 8E38 1B 1A 00     TextGalacticHyper			DB	27,26,0          ;7
 200+ 8E3B 01 12 10 00  TextFrontLaser      		DB  01,18,16,0       ;8
 201+ 8E3F 03 12 10 00  TextLeftLaser       		DB  03,18,16,0       ;9
 202+ 8E43 02 12 10 00  TextRightLaser      		DB  02,18,16,0       ;10
 203+ 8E47 04 12 10 00  TextRearLaser       		DB  04,18,16,0       ;11
 204+ 8E4B 33 34 35 00  TextShortRangeChart 		DB	51,52,53,0       ;12
 205+ 8E4F 1B 35 00     TextGalacticChart   		DB	27,53,0          ;13
 206+ 8E52 36 37 00     TextDataOn					DB	54,55,0          ;14
 207+ 8E55 45 49 00     TextRichIndustrial          DB  69,73,0          ;15
 208+ 8E58 46 49 00     TextAvgIndustrial           DB  70,73,0			 ;16
 209+ 8E5B 47 49 00     TextMainIndustrial          DB  71,73,0          ;17
 210+ 8E5E 48 49 00     TextPoorIndustrial          DB  72,73,0          ;18
 211+ 8E61 45 4A 00     TextRichAgricultural        DB  69,74,0          ;19
 212+ 8E64 46 4A 00     TextAvgAgricultural         DB  70,74,0          ;20
 213+ 8E67 47 4A 00     TextMainAgricultural        DB  71,74,0          ;21
 214+ 8E6A 48 4A 00     TextPoorAgricultural        DB  72,74,0          ;22
 215+ 8E6D 54 55 00     TextLightYears				DB  84,85,0			 ;23
 216+ 8E70 56 54 55 00  Text0LightYears				DB  86,84,85,0		 ;24
 217+ 8E74 57 58 00     TextMarketPrices			DB  87,88,0			 ;25
 218+ 8E77 64 65        TextEquipShip               DB  100,101          ;26
 219+ 8E79
 220+ 8E79 00           TextDummy					DB  0
 221+ 8E7A
 222+ 8E7A 22 8E 26 8E  TextTokens			DW  TextLargeCargoBay, TextEscapePod, TextFuelScoops				; 0 2
 222+ 8E7E 29 8E
 223+ 8E80 2C 8E 2F 8E  					DW  TextECMSystem, TextEnergyBomb, TextEnergyUnit					; 3 5
 223+ 8E84 32 8E
 224+ 8E86 35 8E 38 8E  					DW  TextDockingComp, TextGalacticHyper  							; 6 7
 225+ 8E8A 3B 8E 3F 8E  					DW	TextFrontLaser, TextLeftLaser, TextRightLaser, TextRearLaser	; 8 11
 225+ 8E8E 43 8E 47 8E
 226+ 8E92 4B 8E 4F 8E  					DW  TextShortRangeChart, TextGalacticChart, TextDataOn				; 12 14
 226+ 8E96 52 8E
 227+ 8E98 55 8E 58 8E  TextTokenEconomy	DW  TextRichIndustrial, TextAvgIndustrial, TextPoorIndustrial, TextMainIndustrial, TextMainAgricultural, TextRichAgricultural, TextAvgAgricultural,  TextPoorAgricultural
 227+ 8E9C 5E 8E 5B 8E
 227+ 8EA0 67 8E 61 8E
 227+ 8EA4 64 8E 6A 8E
 228+ 8EA8 6D 8E        					DW  TextLightYears		                                            ; 21 23
 229+ 8EAA 70 8E 74 8E  					DW  Text0LightYears, TextMarketPrices
 230+ 8EAE 79 8E        					DW  TextDummy;  25
 231+ 8EB0 00 00 00...  TextBuffer			DS	33
 232+ 8ED1
 233+ 8ED1              TextEconomyOffset   EQU (TextTokenEconomy - TextTokens)/2
 234+ 8ED1              TextGovOffset       EQU (WordIdxGovernment - WordIdx)/2
 235+ 8ED1
 236+ 8ED1              CapitaliseString:
 237+ 8ED1              ; ">CapitaliseString hl = address"
 238+ 8ED1              .CapLoop:
 239+ 8ED1 23           	inc		hl
 240+ 8ED2 7E           	ld		a,(hl)
 241+ 8ED3 FE 00        	cp		0
 242+ 8ED5 C8           	ret		z
 243+ 8ED6 FE 5B        	cp		'Z'+1
 244+ 8ED8 30 F7        	jr		nc,.CapLoop
 245+ 8EDA FE 41        	cp		'A'
 246+ 8EDC 38 F3        	jr		c,.CapLoop
 247+ 8EDE              .LowerCase:
 248+ 8EDE C6 20        	add		a,'a'-'A'
 249+ 8EE0 77           	ld		(hl),a
 250+ 8EE1 18 EE        	jr		.CapLoop
 251+ 8EE3
 252+ 8EE3 21 CA 8D     ShipIndexToAddress      ld      hl,WordIdxShipNames
 253+ 8EE6 C3 EC 8E                             jp      WordLookup
 254+ 8EE9
 255+ 8EE9 21 FC 8C     WordIndexToAddress:     ld		hl,WordIdx
 256+ 8EEC ED 31        WordLookup:             add		hl,a
 257+ 8EEE ED 31                                add		hl,a
 258+ 8EF0 D5                                   push	de
 259+ 8EF1 5E                                   ld		e,(hl)
 260+ 8EF2 23                                   inc		hl
 261+ 8EF3 56                                   ld		d,(hl)
 262+ 8EF4 EB                                   ex		de,hl
 263+ 8EF5 D1                                   pop		de
 264+ 8EF6 C9                                   ret
 265+ 8EF7
 266+ 8EF7
 267+ 8EF7              expandTokenToString:
 268+ 8EF7              ; ">expandTokenToString a = texttoken"
 269+ 8EF7 21 7A 8E     	ld		hl,TextTokens
 270+ 8EFA CD 57 88     	call	getTableText
 271+ 8EFD 11 B0 8E     	ld		de,TextBuffer
 272+ 8F00              .ReadLoop:
 273+ 8F00 7E           	ld		a,(hl)
 274+ 8F01 FE 00        	cp		0
 275+ 8F03 28 1B        	jr		z,.ReadDone
 276+ 8F05 E5           	push	hl
 277+ 8F06 D5           	push	de
 278+ 8F07 21 FC 8C     	ld		hl,WordIdx
 279+ 8F0A CD 57 88     	call	getTableText
 280+ 8F0D D1           	pop		de
 281+ 8F0E              .WordExpandLoop:
 282+ 8F0E 7E           	ld		a,(hl)
 283+ 8F0F FE 00        	cp		0
 284+ 8F11 28 05        	jr		z,.AddSpace
 285+ 8F13              ;.GetChar:
 286+ 8F13 12           	ld		(de),a
 287+ 8F14 13           	inc		de
 288+ 8F15 23           	inc		hl
 289+ 8F16 18 F6        	jr		.WordExpandLoop
 290+ 8F18              .AddSpace:
 291+ 8F18 3E 20        	ld		a,' '
 292+ 8F1A 12           	ld		(de),a
 293+ 8F1B 13           	inc		de
 294+ 8F1C E1           	pop		hl
 295+ 8F1D 23           	inc		hl
 296+ 8F1E 18 E0        	jr		.ReadLoop
 297+ 8F20              .ReadDone:
 298+ 8F20 1B           	dec		de
 299+ 8F21 AF           	xor		a
 300+ 8F22 12           	ld		(de),a
 301+ 8F23 C9           	ret
 302+ 8F24
# file closed: ./Tables/dictionary.asm
 623  8F24                  INCLUDE "./Tables/name_digrams.asm"
# file opened: ./Tables/name_digrams.asm
   1+ 8F24 41 42 4F 55  name_digrams	DB "ABOUSEITILETSTONLONUTHNO"
   1+ 8F28 53 45 49 54
   1+ 8F2C 49 4C 45 54
   1+ 8F30 53 54 4F 4E
   1+ 8F34 4C 4F 4E 55
   1+ 8F38 54 48 4E 4F
   2+ 8F3C 41 4C 4C     name_digrams2   DB "ALL"
   3+ 8F3F 45 58 45 47  				DB "EXEGEZACEBISOUSESARMAINDIREA"
   3+ 8F43 45 5A 41 43
   3+ 8F47 45 42 49 53
   3+ 8F4B 4F 55 53 45
   3+ 8F4F 53 41 52 4D
   3+ 8F53 41 49 4E 44
   3+ 8F57 49 52 45 41
   4+ 8F5B 3F 45 52 41  				DB "?ERATENBERALAVETIEDORQUANTEISRION"
   4+ 8F5F 54 45 4E 42
   4+ 8F63 45 52 41 4C
   4+ 8F67 41 56 45 54
   4+ 8F6B 49 45 44 4F
   4+ 8F6F 52 51 55 41
   4+ 8F73 4E 54 45 49
   4+ 8F77 53 52 49 4F
   4+ 8F7B 4E
   5+ 8F7C
   6+ 8F7C              ; TODO Moveinto galaxy data module
   7+ 8F7C 00 00 00...  name_expanded	DS 32
   8+ 8F9C 00           				DB 0
   9+ 8F9D
  10+ 8F9D
  11+ 8F9D
  12+ 8F9D              NamingLoop:
  13+ 8F9D 3A 06 80     	ld		a,(WorkingSeeds+5)	; a = first byte of name seed
  14+ 8FA0 E6 1F        	and 	$1F					; Keep bottom 5 bits only
  15+ 8FA2 FE 00        	cp		0					; 0 = skip 2 chars
  16+ 8FA4 28 12        	jr		z,.SkipPhrase
  17+ 8FA6 C6 0C        	add		a,12
  18+ 8FA8 CB 27        	sla		a					; phrase = (a+12)*2
  19+ 8FAA 21 24 8F     	ld		hl,name_digrams
  20+ 8FAD ED 31        	add		hl,a
  21+ 8FAF ED A0        	ldi
  22+ 8FB1 7E           	ld		a,(hl)
  23+ 8FB2 FE 3F        	cp		'?'
  24+ 8FB4 28 02        	jr		z,.SkipPhrase
  25+ 8FB6              .AddExtra:
  26+ 8FB6 ED A0        	ldi
  27+ 8FB8              .SkipPhrase:
  28+ 8FB8 D5           	push	de
  29+ 8FB9 CD DF 85     	call	working_seed
  30+ 8FBC D1           	pop		de
  31+ 8FBD C9           	ret
  32+ 8FBE
  33+ 8FBE              ;GetDigramGalaxySeed:
  34+ 8FBE              ;	call	copy_galaxy_to_working
  35+ 8FBE              ;	jr		GetDigramWorkingSeed
  36+ 8FBE              ;GetDigramSystemSeed:
  37+ 8FBE              ;	call	copy_system_to_working
  38+ 8FBE              ;GetDigramWorkingSeed:
  39+ 8FBE              ;; ">GetDigram a = digram seed"
  40+ 8FBE              ;	ld		de,name_expanded
  41+ 8FBE              ;	ld		b,3
  42+ 8FBE              ;	ld		a,(WorkingSeeds)
  43+ 8FBE              ;	and		$40
  44+ 8FBE              ;	jr		z,.SmallSizeName
  45+ 8FBE              ;.LargeSizeName:
  46+ 8FBE              ;	call	NamingLoop
  47+ 8FBE              ;.SmallSizeName:
  48+ 8FBE              ;	call	NamingLoop
  49+ 8FBE              ;	call	NamingLoop
  50+ 8FBE              ;	call	NamingLoop
  51+ 8FBE              ;.DoneName:
  52+ 8FBE              ;	ex		de,hl
  53+ 8FBE              ;	ld		(hl),0
  54+ 8FBE              ;	ex		de,hl
  55+ 8FBE              ;	ret
  56+ 8FBE
  57+ 8FBE
  58+ 8FBE
  59+ 8FBE              ;GetDigramWorkingSeed:
  60+ 8FBE              ;	MESSAGE ">GetDigram a = digram seed b = length"
  61+ 8FBE              ;	ld		b,5					; working seed
  62+ 8FBE              ;	ld		de,name_expanded
  63+ 8FBE              ;.ExpansionLoop:
  64+ 8FBE              ;	push	bc
  65+ 8FBE              ;	ld		hl,WorkingSeeds
  66+ 8FBE              ;	ld		a,b
  67+ 8FBE              ;	add		hl,a
  68+ 8FBE              ;	ld		a,(hl)	; a = first byte of name seed
  69+ 8FBE              ;	and 	$1F					; Keep bottom 5 bits only
  70+ 8FBE              ;	cp		0					; 0 = skip 2 chars
  71+ 8FBE              ;	jr		z,.SkipPhrase
  72+ 8FBE              ;	or		&80					; set buit 7 high (probabtyl capitalisation)
  73+ 8FBE              ;	call	TT27
  74+ 8FBE              ;.SkipPhrase:
  75+ 8FBE              ;	push	de
  76+ 8FBE              ;	call	next_working_seed
  77+ 8FBE              ;	pop		de
  78+ 8FBE              ;	pop		bc
  79+ 8FBE              ;	djnz	GetDigramWorkingSeed
  80+ 8FBE              ;.DoneName:
  81+ 8FBE              ;	ex		de,hl
  82+ 8FBE              ;	ld		(hl),0
  83+ 8FBE              ;	ex		de,hl
  84+ 8FBE              ;	ret
  85+ 8FBE              ;
  86+ 8FBE              ;ExpandToken:
  87+ 8FBE              ;	DE = target
  88+ 8FBE              ;	a = token
  89+ 8FBE              ;
  90+ 8FBE              ;PlanetDigram:
  91+ 8FBE              ;	cp		&A0							; >- 160
  92+ 8FBE              ;	jr		c,MorePage4
  93+ 8FBE              ;	and		$7F							; 128 to 159 now 0 to 31
  94+ 8FBE              ;	asl		2							; Multiply by 2
  95+ 8FBE              ;	ld		hl, name_digrams2
  96+ 8FBE              ;	add		hl,a
  97+ 8FBE              ;	ld		a,(hl)
  98+ 8FBE              ;	call	ProcessTextToken
  99+ 8FBE              ;	inc		hl
 100+ 8FBE              ;	ld		a,(hl)
 101+ 8FBE              ;	cp		'?'
 102+ 8FBE              ;	ret		z
 103+ 8FBE              ;	call	ProcessTextToken
 104+ 8FBE              ;	ret
 105+ 8FBE              ;MorePage4:
 106+ 8FBE              ;	sub		$A0
 107+ 8FBE              ;ExtraTokenCheck:
 108+ 8FBE              ;	push	de							; save target address
 109+ 8FBE              ;	push	bc
 110+ 8FBE              ;	ld		b,a
 111+ 8FBE              ;	ld		hl,varV
 112+ 8FBE              ;	ld		(VarV),0400
 113+ 8FBE              ;	ld		(varV),a
 114+ 8FBE              ;	ld
 115+ 8FBE              ;
 116+ 8FBE              ;		.TT43	\ Token > 127 page4 token or planet digram.
 117+ 8FBE              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 118+ 8FBE              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 119+ 8FBE              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 120+ 8FBE              ;0A                      ASL A		      \ *= 2
 121+ 8FBE              ;A8                      TAY 		      \ digram index = 0to62
 122+ 8FBE              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 123+ 8FBE              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 124+ 8FBE              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 125+ 8FBE              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 126+ 8FBE              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 127+ 8FBE              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 128+ 8FBE              ;
 129+ 8FBE              ;	.TT47	\ more page4, subtract #160
 130+ 8FBE              ;E9 A0                   SBC #&A0	\ -= 160
 131+ 8FBE              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 132+ 8FBE              ;AA                      TAX 		\ copy of word index
 133+ 8FBE              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 134+ 8FBE              ;85 22                   STA &22		\ V
 135+ 8FBE              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 136+ 8FBE              ;85 23                   STA &23		\ V+1
 137+ 8FBE              ;A0 00                   LDY #0
 138+ 8FBE              ;8A                      TXA 		\ token = word index
 139+ 8FBE              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 140+ 8FBE              ;	.TT51	\ counters Y letter, X token
 141+ 8FBE              ;B1 22                   LDA (&22),Y	\ (V),Y
 142+ 8FBE              ;F0 07                   BEQ TT49	\ exit as word ended
 143+ 8FBE              ;C8                      INY 		\ letter count
 144+ 8FBE              ;D0 F9                   BNE TT51	\ loop Y
 145+ 8FBE              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 146+ 8FBE              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 147+ 8FBE              ;	.TT49	\ word ended
 148+ 8FBE              ;C8                      INY
 149+ 8FBE              ;D0 02                   BNE TT59    	\ next word
 150+ 8FBE              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 151+ 8FBE              ;	.TT59	\ next word
 152+ 8FBE              ;CA                      DEX 		\ token count
 153+ 8FBE              ;D0 ED                   BNE TT51	\ loop X token
 154+ 8FBE              ;	.TT50	\ token X = 0, counter Y offset to word correct
 155+ 8FBE              ;98                      TYA
 156+ 8FBE              ;48                      PHA 		\ store Yindex
 157+ 8FBE              ;A5 23                   LDA &23		\ V+1
 158+ 8FBE              ;48                      PHA 		\ correct pointer hi
 159+ 8FBE              ;B1 22                   LDA (&22),Y 	\ (V),Y
 160+ 8FBE              ;49 23                   EOR #&23	\ decode '#'
 161+ 8FBE              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 162+ 8FBE              ;68                      PLA 		\ restore this depth's Vhi
 163+ 8FBE              ;85 23                   STA &23		\ V+1
 164+ 8FBE              ;68                      PLA
 165+ 8FBE              ;A8                      TAY 		\ restore this depth's Yindex
 166+ 8FBE              ;C8                      INY 		\ next letter
 167+ 8FBE              ;D0 02                   BNE P%+4	\ not zero so skip next page
 168+ 8FBE              ;E6 23                   INC &23		\ V+1
 169+ 8FBE              ;B1 22                   LDA (&22),Y	\ (V),Y
 170+ 8FBE              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 171+ 8FBE              ;	.TT48 	\ rts
 172+ 8FBE              ;60                      RTS 		\ end of flight token printing TT27
 173+ 8FBE              ;
 174+ 8FBE              ;
 175+ 8FBE              ;
 176+ 8FBE              ;
 177+ 8FBE              ;
 178+ 8FBE              ;
 179+ 8FBE              ;		.TT27	\ -> &36E0 \ process flight text Token in Acc
 180+ 8FBE              ;;AA                      TAX		\ copy token to count down
 181+ 8FBE              ;;F0 DE                   BEQ csh		\ Acc = 0, up to Cash
 182+ 8FBE              ;30 74                   BMI TT43	\ if token is >  127 down, page4 token or digram
 183+ 8FBE              ;CA                      DEX
 184+ 8FBE              ;F0 BC                   BEQ tal		\ Acc == 1, up, print Galaxy number.
 185+ 8FBE              ;CA                      DEX
 186+ 8FBE              ;F0 A3                   BEQ ypl		\ Acc == 2, up, present planet in QQ2.
 187+ 8FBE              ;CA                      DEX
 188+ 8FBE              ;D0 03                   BNE P%+5	\ hop over, else X == 0
 189+ 8FBE              ;4C 0A 33                JMP &330A \ cpl \ Acc = 3 print Planet name for seed QQ15
 190+ 8FBE              ;CA                      DEX
 191+ 8FBE              ;F0 8A                   BEQ cmn		\ Acc == 4, up, commander name.
 192+ 8FBE              ;CA                      DEX
 193+ 8FBE              ;F0 B5                   BEQ fwl		\ Acc == 5, up, fuel followed by cash.
 194+ 8FBE              ;CA                      DEX
 195+ 8FBE              ;D0 05                   BNE  P%+7	\ hop over, else X == 0
 196+ 8FBE              ;A9 80                   LDA #&80	\ Acc == 6, set bit 7 TT27m
 197+ 8FBE              ;85 72                   STA &72	 	\ QQ17
 198+ 8FBE              ;60                      RTS
 199+ 8FBE              ;CA                      DEX 		\ skip Acc ==7
 200+ 8FBE              ;CA                      DEX
 201+ 8FBE              ;D0 03                   BNE P%+5	\ hop over to continue Acc 9to127
 202+ 8FBE              ;86 72                   STX &72	 \ QQ17	\ else Acc ==8, QQ17 set to X = 0
 203+ 8FBE              ;60                      RTS
 204+ 8FBE              ;CA                      DEX 		\ continue 9to127 tokens
 205+ 8FBE              ;F0 38                   BEQ crlf	\ Acc == 9, down, colon on right.
 206+ 8FBE              ;C9 60                   CMP #&60	\ discard X, look at Acc = token >= 96
 207+ 8FBE              ;B0 66                   BCS ex   	\ extra >= #&60, far down
 208+ 8FBE              ;C9 0E                   CMP #14		\ < 14 ?
 209+ 8FBE              ;90 04                   BCC P%+6	\ goes to Token < 14 or > 31
 210+ 8FBE              ;C9 20                   CMP #32		\ < 32 ?
 211+ 8FBE              ;90 28                   BCC qw   	\ 14 <= token A < 32 becomes 128to145 page4 digram
 212+ 8FBE              ;		\ Token  < 14 or > 31
 213+ 8FBE              ;A6 72                   LDX &72	 	\ QQ17
 214+ 8FBE              ;F0 3D                   BEQ TT74 	\ if QQ17 = 0 Upper case, jmp TT26, print character.
 215+ 8FBE              ;30 11                   BMI TT41 	\ if bit7 set
 216+ 8FBE              ;24 72                   BIT &72		\ QQ17 has bit6 set too
 217+ 8FBE              ;70 30                   BVS TT46 	\ If only bit6 set, clear bit6 and print as Upper
 218+ 8FBE              ;	.TT42	\ Uppercase to lowercase
 219+ 8FBE              ;C9 41                   CMP #&41	\ < ascii 'A'
 220+ 8FBE              ;90 06                   BCC TT44 	\ jmp TT26, print character
 221+ 8FBE              ;C9 5B                   CMP #&5B	\ >= ascii 'Z'+1
 222+ 8FBE              ;B0 02                   BCS TT44 	\ jmp TT26, print character
 223+ 8FBE              ;69 20                   ADC #&20	\ else Upper to lowercase
 224+ 8FBE              ;	.TT44	\ print character as is with TT26
 225+ 8FBE              ;4C FC 1E                JMP &1EFC \ TT26 \ print character
 226+ 8FBE              ;
 227+ 8FBE              ;	.TT41	\ QQ17 bit7 set
 228+ 8FBE              ;24 72                   BIT &72		\ QQ17
 229+ 8FBE              ;70 17                   BVS TT45	\ bit6 set too, Nothing or lower.
 230+ 8FBE              ;C9 41                   CMP #&41	\ < ascii 'A'
 231+ 8FBE              ;90 22                   BCC TT74 	\ print as is using TT26
 232+ 8FBE              ;48                      PHA 		\ else store token Acc
 233+ 8FBE              ;8A                      TXA 		\ QQ17 copy
 234+ 8FBE              ;09 40                   ORA #&40	\ set bit6 in QQ17 so subsequent ones lower
 235+ 8FBE              ;85 72                   STA &72	 	\ QQ17
 236+ 8FBE              ;68                      PLA 		\ restore token
 237+ 8FBE              ;D0 EC                   BNE TT44	\ guaranteed up, print as Uppercase with TT26.
 238+ 8FBE              ;
 239+ 8FBE              ;	.qw	\ Acc = 14to31 becomes 128to145 page4 digram
 240+ 8FBE              ;69 72                   ADC #&72	\ A+=114 becomes 128to145 page4 digram
 241+ 8FBE              ;D0 32                   BNE ex		\ guaranteed down, extra.
 242+ 8FBE              ;
 243+ 8FBE              ;	.crlf	\ Acc == 9,  colon on right
 244+ 8FBE              ;A9 15                   LDA #21		\ on right
 245+ 8FBE              ;85 2C                   STA &2C		\ XC
 246+ 8FBE              ;D0 97                   BNE TT73	\ guaranteed up, print colon.
 247+ 8FBE              ;
 248+ 8FBE              ;	.TT45	\ QQ17 bits 7,6 set. Nothing or lower.
 249+ 8FBE              ;E0 FF                   CPX #&FF	\ if QQ17 = #&FF
 250+ 8FBE              ;F0 63                   BEQ TT48	\ rts
 251+ 8FBE              ;C9 41                   CMP #&41	\ >= ascii 'A' ?
 252+ 8FBE              ;B0 D0                   BCS TT42	\ Uppercase to lowercase, up.
 253+ 8FBE              ;	.TT46	\ clear bit6 QQ17 and print as is using TT26
 254+ 8FBE              ;48                      PHA 		\ push token
 255+ 8FBE              ;8A                      TXA 		\ QQ17 copy
 256+ 8FBE              ;29 BF                   AND #&BF	\ clear bit6
 257+ 8FBE              ;85 72                   STA &72	 	\ QQ17
 258+ 8FBE              ;68                      PLA 		\ pull token
 259+ 8FBE              ;	.TT74	\ TT26, print character.
 260+ 8FBE              ;4C FC 1E                JMP &1EFC	\ TT26
 261+ 8FBE              ;
 262+ 8FBE              ;	.TT43	\ Token > 127 page4 token or planet digram.
 263+ 8FBE              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 264+ 8FBE              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 265+ 8FBE              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 266+ 8FBE              ;0A                      ASL A		      \ *= 2
 267+ 8FBE              ;A8                      TAY 		      \ digram index = 0to62
 268+ 8FBE              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 269+ 8FBE              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 270+ 8FBE              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 271+ 8FBE              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 272+ 8FBE              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 273+ 8FBE              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 274+ 8FBE              ;
 275+ 8FBE              ;	.TT47	\ more page4, subtract #160
 276+ 8FBE              ;E9 A0                   SBC #&A0	\ -= 160
 277+ 8FBE              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 278+ 8FBE              ;AA                      TAX 		\ copy of word index
 279+ 8FBE              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 280+ 8FBE              ;85 22                   STA &22		\ V
 281+ 8FBE              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 282+ 8FBE              ;85 23                   STA &23		\ V+1
 283+ 8FBE              ;A0 00                   LDY #0
 284+ 8FBE              ;8A                      TXA 		\ token = word index
 285+ 8FBE              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 286+ 8FBE              ;	.TT51	\ counters Y letter, X token
 287+ 8FBE              ;B1 22                   LDA (&22),Y	\ (V),Y
 288+ 8FBE              ;F0 07                   BEQ TT49	\ exit as word ended
 289+ 8FBE              ;C8                      INY 		\ letter count
 290+ 8FBE              ;D0 F9                   BNE TT51	\ loop Y
 291+ 8FBE              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 292+ 8FBE              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 293+ 8FBE              ;	.TT49	\ word ended
 294+ 8FBE              ;C8                      INY
 295+ 8FBE              ;D0 02                   BNE TT59    	\ next word
 296+ 8FBE              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 297+ 8FBE              ;	.TT59	\ next word
 298+ 8FBE              ;CA                      DEX 		\ token count
 299+ 8FBE              ;D0 ED                   BNE TT51	\ loop X token
 300+ 8FBE              ;	.TT50	\ token X = 0, counter Y offset to word correct
 301+ 8FBE              ;98                      TYA
 302+ 8FBE              ;48                      PHA 		\ store Yindex
 303+ 8FBE              ;A5 23                   LDA &23		\ V+1
 304+ 8FBE              ;48                      PHA 		\ correct pointer hi
 305+ 8FBE              ;B1 22                   LDA (&22),Y 	\ (V),Y
 306+ 8FBE              ;49 23                   EOR #&23	\ decode '#'
 307+ 8FBE              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 308+ 8FBE              ;68                      PLA 		\ restore this depth's Vhi
 309+ 8FBE              ;85 23                   STA &23		\ V+1
 310+ 8FBE              ;68                      PLA
 311+ 8FBE              ;A8                      TAY 		\ restore this depth's Yindex
 312+ 8FBE              ;C8                      INY 		\ next letter
 313+ 8FBE              ;D0 02                   BNE P%+4	\ not zero so skip next page
 314+ 8FBE              ;E6 23                   INC &23		\ V+1
 315+ 8FBE              ;B1 22                   LDA (&22),Y	\ (V),Y
 316+ 8FBE              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 317+ 8FBE              ;	.TT48 	\ rts
 318+ 8FBE              ;60                      RTS 		\ end of flight token printing TT27
 319+ 8FBE              ;
 320+ 8FBE              ;
 321+ 8FBE              ;
# file closed: ./Tables/name_digrams.asm
 624  8FBE              ;INCLUDE "Tables/inwk_table.asm" This is no longer needed as we will write to univer object bank
 625  8FBE              ; Include all maths libraries to test assembly
 626  8FBE                  INCLUDE "./Maths/asm_add.asm"
# file opened: ./Maths/asm_add.asm
   1+ 8FBE              ;; calcs BHB + CDE where B and C are signs and may be 24 bit
   2+ 8FBE              ;; result HL with A as sign
   3+ 8FBE              ;; special handling if result is zero forcign sign bit to be zero
   4+ 8FBE
   5+ 8FBE              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLSAHLEquBHLaddCDE:        ld      a,b
   6+ 8FBE              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        xor     c
   7+ 8FBE              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        and     SignOnly8Bit
   8+ 8FBE              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        JumpIfNegative   .OppositeSigns
   9+ 8FBE              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS.SameSigns:             ld      ixh,b                      ; ixh = b
  10+ 8FBE              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ClearSignBit b                     ; b = ABS b
  11+ 8FBE              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        add     hl,de                      ; hl = hl + de
  12+ 8FBE              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      a,b                        ; a = b + c + carry
  13+ 8FBE              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        adc     c                          ;
  14+ 8FBE              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      b,a                        ;
  15+ 8FBE              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      a,ixh                      ;
  16+ 8FBE              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        SignBitOnlyA                       ;
  17+ 8FBE              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        or      b                          ;
  18+ 8FBE              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ret                                ;
  19+ 8FBE              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS.OppositeSigns:         ld      ixh,b                      ; save signed into ixh and ixl
  20+ 8FBE              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      ixl,c                      ; .
  21+ 8FBE              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ClearSignBit c                     ; c = ABS C
  22+ 8FBE              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      a,b                        ; a = abs b
  23+ 8FBE              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ClearSignBitA                      ; .
  24+ 8FBE              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        sbc     c                          ; a = a - c
  25+ 8FBE              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        JumpIfNegative  .OppositeCDEgtBHL  ; if c is positive
  26+ 8FBE              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        push    hl
  27+ 8FBE              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        sbc     hl,de                      ; then subtract de from hl
  28+ 8FBE              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        JumpIfNegative  .HLDEWasNegative   ; if sub was positive
  29+ 8FBE              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        pop     de                         ; at this stage the stack is just junk
  30+ 8FBE              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      b,a                        ; then copy results to AHL
  31+ 8FBE              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      a,ixh                      ; by just handling sign
  32+ 8FBE              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        SignBitOnlyA                       ; .
  33+ 8FBE              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        or      b                          ; .
  34+ 8FBE              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ret                                ; .
  35+ 8FBE              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS.OppositeCDEgtBHL:      ex      de,hl                      ; save hl
  36+ 8FBE              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      c,ixh                      ; swap signs over
  37+ 8FBE              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        ld      b,ixl                      ;
  38+ 8FBE              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        jp      .OppositeSigns             ; and do calc again
  39+ 8FBE              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS.HLDEWasNegative:       pop     hl                         ; get back hl swap values and try again
  40+ 8FBE              ;DOES NOT WORK IF SIGNED RPLACE WITH ADDBCHTODELSIGNED CALLS                        jp      .OppositeCDEgtBHL
  41+ 8FBE              ; example
  42+ 8FBE              ; bhl - 00 00 06 CDE - 80 00 0B so equates to 000006 + (-00000B) or -000005 or 800005
  43+ 8FBE
  44+ 8FBE              ; Adds DE to HL, in form S15 result will also be S15 rather than 2's C
  45+ 8FBE              ;AddDEtoHLSigned:        ld      a,h                         ; extract h sign to b
  46+ 8FBE              ;                        and     $80                         ; hl = abs (hl)
  47+ 8FBE              ;                        ld      b,a
  48+ 8FBE              ;                        ld      a,h
  49+ 8FBE              ;                        and     $7F
  50+ 8FBE              ;                        ld      h,a
  51+ 8FBE              ;                        ld      a,d                         ; extract d sign to c
  52+ 8FBE              ;                        and     $80                         ; de = abs (de)
  53+ 8FBE              ;                        ld      c,a
  54+ 8FBE              ;                        ld      a,d
  55+ 8FBE              ;                        and     $7F
  56+ 8FBE              ;                        ld      d,a
  57+ 8FBE              ;                        ld      a,b
  58+ 8FBE              ;                        xor     c
  59+ 8FBE              ;                        jp      nz,.OppositeSigns
  60+ 8FBE              ;.SameSigns              add     hl,de                       ; same signs so just add
  61+ 8FBE              ;                        ld      a,b                         ; and bring in the sign from b
  62+ 8FBE              ;                        or      h                           ; note this has to be 15 bit result
  63+ 8FBE              ;                        ld      h,a                         ; but we can assume that
  64+ 8FBE              ;                        ret
  65+ 8FBE              ;.OppositeSigns:         ClearCarryFlag
  66+ 8FBE              ;                        sbc     hl,de
  67+ 8FBE              ;                        jr      c,.OppsiteSignInvert
  68+ 8FBE              ;.OppositeSignNoInvert:  ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  69+ 8FBE              ;                        or      h
  70+ 8FBE              ;                        ld      h,a                         ; set the previou sign value
  71+ 8FBE              ;                        ret
  72+ 8FBE              ;.OppsiteSignInvert:     NegHL                              ; we need to flip the sign and 2'c the Hl result
  73+ 8FBE              ;                        ld      a,b
  74+ 8FBE              ;                        xor     SignOnly8Bit               ; flip sign bit
  75+ 8FBE              ;                        or      h
  76+ 8FBE              ;                        ld      h,a                         ; recover sign
  77+ 8FBE              ;                        ret
  78+ 8FBE
  79+ 8FBE              ;ADDHLDESignBC:          ld      a,b
  80+ 8FBE              ;                        and     SignOnly8Bit
  81+ 8FBE              ;                        xor     c                           ;if b sign and c sign were different then bit 7 of a will be 1 which means
  82+ 8FBE              ;                        JumpIfNegative ADDHLDEsBCOppSGN     ;Signs are opposite there fore we can subtract to get difference
  83+ 8FBE              ;ADDHLDEsBCSameSigns:    ld      a,b
  84+ 8FBE              ;                        or      c
  85+ 8FBE              ;                        JumpIfNegative ADDHLDEsBCSameNeg    ; optimisation so we can just do simple add if both positive
  86+ 8FBE              ;                        add     hl,de                       ; both positive so a will already be zero
  87+ 8FBE              ;                        ret
  88+ 8FBE              ;ADDHLDEsBCSameNeg:      add     hl,de
  89+ 8FBE              ;                        ld      a,b
  90+ 8FBE              ;                                            DISPLAY "TODO: don't bother with overflow for now"
  91+ 8FBE              ;                        or      c                           ; now set bit for negative value, we won't bother with overflow for now TODO
  92+ 8FBE              ;                        ret
  93+ 8FBE              ;ADDHLDEsBCOppSGN:       ClearCarryFlag
  94+ 8FBE              ;                        sbc     hl,de
  95+ 8FBE              ;                        jr      c,ADDHLDEsBCOppInvert
  96+ 8FBE              ;ADDHLDEsBCOppSGNNoCarry:ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  97+ 8FBE              ;                        ret
  98+ 8FBE              ;ADDHLDEsBCOppInvert:    NegHL                               ; if result was zero then set sign to zero (which doing h or l will give us for free)
  99+ 8FBE              ;                        ld      a,b
 100+ 8FBE              ;                        xor     SignOnly8Bit                ; flip sign bit
 101+ 8FBE              ;                        ret
 102+ 8FBE
 103+ 8FBE              ;ADDHLDESignedV4:        ld      a,h
 104+ 8FBE              ;                        and     SignOnly8Bit
 105+ 8FBE              ;                        ld      b,a                         ;save sign bit in b
 106+ 8FBE              ;                        xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 107+ 8FBE              ;                        JumpIfNegative .ADDHLDEOppSGN       ;Signs are opposite there fore we can subtract to get difference
 108+ 8FBE              ;.ADDHLDESameSigns:      ld      a,b
 109+ 8FBE              ;                        or      d
 110+ 8FBE              ;                        JumpIfNegative .ADDHLDESameNeg      ; optimisation so we can just do simple add if both positive
 111+ 8FBE              ;                        add     hl,de
 112+ 8FBE              ;                        ret
 113+ 8FBE              ;.ADDHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 114+ 8FBE              ;                        and     SignMask8Bit                ; we could check the value of b for optimisation
 115+ 8FBE              ;                        ld      h,a
 116+ 8FBE              ;                        ld      a,d
 117+ 8FBE              ;                        and     SignMask8Bit
 118+ 8FBE              ;                        ld      d,a
 119+ 8FBE              ;                        add     hl,de
 120+ 8FBE              ;                        ld      a,SignOnly8Bit
 121+ 8FBE              ;                                        DISPLAY "TODO:  dont bother with overflow for now"
 122+ 8FBE              ;                        or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 123+ 8FBE              ;                        ld      h,a
 124+ 8FBE              ;                        ret
 125+ 8FBE              ;.ADDHLDEOppSGN:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 126+ 8FBE              ;                        and     SignMask8Bit                ; we could check the value of b for optimisation
 127+ 8FBE              ;                        ld      h,a
 128+ 8FBE              ;                        ld      a,d
 129+ 8FBE              ;                        and     SignMask8Bit
 130+ 8FBE              ;                        ld      d,a
 131+ 8FBE              ;                        ClearCarryFlag
 132+ 8FBE              ;                        sbc     hl,de
 133+ 8FBE              ;                        jr      c,.ADDHLDEOppInvert
 134+ 8FBE              ;.ADDHLDEOppSGNNoCarry:  ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 135+ 8FBE              ;                        or      h
 136+ 8FBE              ;                        ld      h,a                         ; set the previou sign value
 137+ 8FBE              ;                        ret
 138+ 8FBE              ;.ADDHLDEOppInvert:      NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 139+ 8FBE              ;                        ld      a,b
 140+ 8FBE              ;                        xor     SignOnly8Bit                ; flip sign bit
 141+ 8FBE              ;                        or      h
 142+ 8FBE              ;                        ld      h,a                         ; recover sign
 143+ 8FBE              ;                        ret
 144+ 8FBE
 145+ 8FBE              ;;;NOT USED addhldesigned:          bit     7,h
 146+ 8FBE              ;;;NOT USED                         jr      nz,.noneghl
 147+ 8FBE              ;;;NOT USED                         call    negate16hl
 148+ 8FBE              ;;;NOT USED .noneghl:               bit     7,d
 149+ 8FBE              ;;;NOT USED                         jr      nz,.nonegde
 150+ 8FBE              ;;;NOT USED                         call    negate16de
 151+ 8FBE              ;;;NOT USED .nonegde:               add     hl,de                       ; do 2'd c add
 152+ 8FBE              ;;;NOT USED                         xor     a                           ; assume positive
 153+ 8FBE              ;;;NOT USED                         bit     7,h
 154+ 8FBE              ;;;NOT USED                         ret     z                           ; if not set then can exit early
 155+ 8FBE              ;;;NOT USED                         call    negate16hl
 156+ 8FBE              ;;;NOT USED                         ld      a,$FF
 157+ 8FBE              ;;;NOT USED                         ret
 158+ 8FBE
 159+ 8FBE
 160+ 8FBE              ;; NOT USED MAY WORK ? ; HL(2sc) = HL (signed) + A (unsigned), uses HL, DE, A
 161+ 8FBE              ;; NOT USED MAY WORK ? ; 06 06 2022 not used
 162+ 8FBE              ;; NOT USED MAY WORK ? HL2cEquHLSgnPlusAusgn:  ld      d,0
 163+ 8FBE              ;; NOT USED MAY WORK ?                         ld      e,a                         ; set up DE = A
 164+ 8FBE              ;; NOT USED MAY WORK ?                         ld      a,h
 165+ 8FBE              ;; NOT USED MAY WORK ?                         and     SignMask8Bit
 166+ 8FBE              ;; NOT USED MAY WORK ?                         jr      z,.HLPositive               ; if HL is negative then do HL - A
 167+ 8FBE              ;; NOT USED MAY WORK ? .HLNegative:            ld      h,a                         ; hl = ABS (HL)
 168+ 8FBE              ;; NOT USED MAY WORK ?                         NegHL                               ; hl = - hl
 169+ 8FBE              ;; NOT USED MAY WORK ? .HLPositive:            ClearCarryFlag                      ; now do adc hl,de
 170+ 8FBE              ;; NOT USED MAY WORK ?                         adc     hl,de                       ; aftert his hl will be 2's c
 171+ 8FBE              ;; NOT USED MAY WORK ?                         ret
 172+ 8FBE              ;; NOT USED MAY WORK ? ; 06 06 2022 not used
 173+ 8FBE              ;; NOT USED MAY WORK ? HLEquHLSgnPlusAusgn:    ld      e,a
 174+ 8FBE              ;; NOT USED MAY WORK ?                         ld      a,h
 175+ 8FBE              ;; NOT USED MAY WORK ?                         and     SignMask8Bit
 176+ 8FBE              ;; NOT USED MAY WORK ?                         jr      nz,.HLNegative              ; if HL is negative then do HL - A
 177+ 8FBE              ;; NOT USED MAY WORK ? .HLPositive:            ld      a,e                         ; else its HL + A
 178+ 8FBE              ;; NOT USED MAY WORK ?                         add     hl,a
 179+ 8FBE              ;; NOT USED MAY WORK ?                         ret
 180+ 8FBE              ;; NOT USED MAY WORK ? .HLNegative:            ClearSignBit    h                   ; Clear sign of HL
 181+ 8FBE              ;; NOT USED MAY WORK ?                         NegHL                               ; and convert to 2's C
 182+ 8FBE              ;; NOT USED MAY WORK ?                         ld      d,0
 183+ 8FBE              ;; NOT USED MAY WORK ?                         ClearCarryFlag
 184+ 8FBE              ;; NOT USED MAY WORK ?                         sbc     hl,de                       ; now add a to -ve HL , add does not do 2's c
 185+ 8FBE              ;; NOT USED MAY WORK ?                         jp      m,.FlipResult               ; if it was negative then its really positive
 186+ 8FBE              ;; NOT USED MAY WORK ?                         SetSignBit      h
 187+ 8FBE              ;; NOT USED MAY WORK ?                         ret
 188+ 8FBE              ;; NOT USED MAY WORK ? .FlipResult:            NegHL                               ; so if -hl + A => HL - A => HL - DE is negative then the actual result is +ve
 189+ 8FBE              ;; NOT USED MAY WORK ?                         ret
 190+ 8FBE
 191+ 8FBE
 192+ 8FBE              ; 06 06 2022 not used
 193+ 8FBE              ; HL = HL (signed) + A (unsigned), uses HL, DE, A
 194+ 8FBE                      DISPLAY "TODO: AddAusngToHLsng not used"
 195+ 8FBE              ;;;AddAusngToHLsng:        ld      d,a
 196+ 8FBE              ;;;                        ld      e,h
 197+ 8FBE              ;;;                        ld      a,h
 198+ 8FBE              ;;;                        and     SignMask8Bit
 199+ 8FBE              ;;;                        ld      h,a
 200+ 8FBE              ;;;                        ld      a,d
 201+ 8FBE              ;;;                        add     hl,a
 202+ 8FBE              ;;;                        ld      a,e
 203+ 8FBE              ;;;                        and     SignOnly8Bit
 204+ 8FBE              ;;;                        or      h
 205+ 8FBE              ;;;                        ret
 206+ 8FBE              ; 06 06 2022 not used
 207+ 8FBE              ; HL = A (unsigned) - HL (signed), uses HL, DE, BC, A
 208+ 8FBE                      DISPLAY "TODO: HLEequAusngMinusHLsng not used"
 209+ 8FBE              ;;;HLEequAusngMinusHLsng:  ld      b,h
 210+ 8FBE              ;;;                        ld      c,a
 211+ 8FBE              ;;;                        ld      a,b
 212+ 8FBE              ;;;                        and     SignOnly8Bit
 213+ 8FBE              ;;;                        jr      nz,.DoAdd
 214+ 8FBE              ;;;.DoSubtract:            ex      de,hl               ; move hl into de
 215+ 8FBE              ;;;                        ld      h,0                 ; hl = a
 216+ 8FBE              ;;;                        ld      l,c
 217+ 8FBE              ;;;                        ClearCarryFlag
 218+ 8FBE              ;;;                        sbc     hl,de               ; hl = a - hl
 219+ 8FBE              ;;;                        ret
 220+ 8FBE              ;;;.DoAdd:                 ld      a,c
 221+ 8FBE              ;;;                        add hl,a
 222+ 8FBE              ;;;                        ret
 223+ 8FBE              ;tested mathstestsun2
 224+ 8FBE              ; DEL = DEL + BCH signed, uses BC, DE, HL, IY, A
 225+ 8FBE              ;AddBCHtoDELsigned:      ld      a,b                 ; Are the values both the same sign?
 226+ 8FBE              ;                        xor     d                   ; .
 227+ 8FBE              ;                        and     SignOnly8Bit        ; .
 228+ 8FBE              ;                        jr      nz,.SignDifferent   ; .
 229+ 8FBE              ;.SignSame:              ld      a,b                 ; if they are then we only need 1 signe
 230+ 8FBE              ;                        and     SignOnly8Bit        ; so store it in iyh
 231+ 8FBE              ;                        ld      iyh,a               ;
 232+ 8FBE              ;                        ld      a,b                 ; bch = abs bch
 233+ 8FBE              ;                        and     SignMask8Bit        ; .
 234+ 8FBE              ;                        ld      b,a                 ; .
 235+ 8FBE              ;                        ld      a,d                 ; del = abs del
 236+ 8FBE              ;                        and     SignMask8Bit        ; .
 237+ 8FBE              ;                        ld      d,a                 ; .
 238+ 8FBE              ;                        ld      a,h                 ; l = h + l
 239+ 8FBE              ;                        add     l                   ; .
 240+ 8FBE              ;                        ld      l,a                 ; .
 241+ 8FBE              ;                        ld      a,c                 ; e = e + c + carry
 242+ 8FBE              ;                        adc     e                   ; .
 243+ 8FBE              ;                        ld      e,a                 ; .
 244+ 8FBE              ;                        ld      a,b                 ; d = b + d + carry (signed)
 245+ 8FBE              ;                        adc     d                   ;
 246+ 8FBE              ;                        or      iyh                 ; d = or back in sign bit
 247+ 8FBE              ;                        ld      d,a                 ;
 248+ 8FBE              ;                        ret                         ; done
 249+ 8FBE              ;.SignDifferent:         ld      a,b                 ; bch = abs bch
 250+ 8FBE              ;                        ld      iyh,a               ; iyh = b sign
 251+ 8FBE              ;                        and     SignMask8Bit        ; .
 252+ 8FBE              ;                        ld      b,a                 ; .
 253+ 8FBE              ;                        ld      a,d                 ; del = abs del
 254+ 8FBE              ;                        ld      iyl,a               ; iyl = d sign
 255+ 8FBE              ;                        and     SignMask8Bit        ; .
 256+ 8FBE              ;                        ld      d,a                 ; .
 257+ 8FBE              ;                        push    hl                  ; save hl
 258+ 8FBE              ;                        ld      hl,bc               ; hl = bc - de, if bc < de then there is a carry
 259+ 8FBE              ;                        sbc     hl,de               ;
 260+ 8FBE              ;                        pop     hl                  ;
 261+ 8FBE              ;                        jr      c,.BCHltDEL
 262+ 8FBE              ;                        jr      nz,.DELltBCH        ; if the result was not zero then DEL > BCH
 263+ 8FBE              ;.BCeqDE:                ld      a,h                 ; if the result was zero then check lowest bits
 264+ 8FBE              ;                        JumpIfALTNusng l,.BCHltDEL
 265+ 8FBE              ;                        jr      nz,.DELltBCH
 266+ 8FBE              ;; The same so its just zero
 267+ 8FBE              ;.BCHeqDEL:              xor     a                  ; its just zero
 268+ 8FBE              ;                        ld      d,a                ; .
 269+ 8FBE              ;                        ld      e,a                ; .
 270+ 8FBE              ;                        ld      l,a                ; .
 271+ 8FBE              ;                        ret                        ; .
 272+ 8FBE              ;;BCH is less than DEL so its DEL - BCH the sort out sign
 273+ 8FBE              ;.BCHltDEL:              ld      a,l                ; l = l - h                      ; ex
 274+ 8FBE              ;                        sub     h                  ; .                              ;   01D70F DEL
 275+ 8FBE              ;                        ld      l,a                ; .                              ;  -000028 BCH
 276+ 8FBE              ;                        ld      a,e                ; e = e - c - carry              ;1.
 277+ 8FBE              ;                        sbc     c                  ; .                              ;
 278+ 8FBE              ;                        ld      e,a                ; .                              ;
 279+ 8FBE              ;                        ld      a,d                ; d = d - b - carry              ;
 280+ 8FBE              ;                        sbc     b                  ; .                              ;
 281+ 8FBE              ;                        ld      d,a                ; .                              ;
 282+ 8FBE              ;                        ld      a,iyl              ; as d was larger, take d sign
 283+ 8FBE              ;                        and     SignOnly8Bit       ;
 284+ 8FBE              ;                        or      d                  ;
 285+ 8FBE              ;                        ld      d,a                ;
 286+ 8FBE              ;                        ret
 287+ 8FBE              ;.DELltBCH:              ld      a,h                ; l = h - l
 288+ 8FBE              ;                        sub     l                  ;
 289+ 8FBE              ;                        ld      l,a                ;
 290+ 8FBE              ;                        ld      a,c                ; e = c - e - carry
 291+ 8FBE              ;                        sbc     e                  ;
 292+ 8FBE              ;                        ld      e,a                ;
 293+ 8FBE              ;                        ld      a,b                ; d = b - d - carry
 294+ 8FBE              ;                        sbc     d                  ;
 295+ 8FBE              ;                        ld      d,a                ;
 296+ 8FBE              ;                        ld      a,iyh              ; as b was larger, take b sign into d
 297+ 8FBE              ;                        and     SignOnly8Bit       ;
 298+ 8FBE              ;                        or      d                  ;
 299+ 8FBE              ;                        ld      d,a                ;
 300+ 8FBE              ;                        ret
 301+ 8FBE
 302+ 8FBE              ; 06 06 2022 not used
 303+ 8FBE              ;BHL = AHL + DE where AHL = 16 bit + A sign and DE = 15 bit signed
 304+ 8FBE                      DISPLAY "TODO: AddAHLtoDEsigned not used"
 305+ 8FBE              ;;;AddAHLtoDEsigned:       ld      b,a                     ; B = A , C = D (save sign bytes)
 306+ 8FBE              ;;;                        ld      c,d                     ; .
 307+ 8FBE              ;;;                        xor     c                       ; A = A xor C
 308+ 8FBE              ;;;                        res     7,d                     ; clear sign bit of D
 309+ 8FBE              ;;;                        jr nz,  .OppositeSigns          ; if A xor C is opposite signs job to A0A1
 310+ 8FBE              ;;;                        add     hl,de                   ; HL = HL + DE
 311+ 8FBE              ;;;                        ret                             ; return
 312+ 8FBE              ;;;.OppositeSigns:         sbc     hl,de                   ; HL = HL -DE
 313+ 8FBE              ;;;                        ret     nc                      ; if no carry return
 314+ 8FBE              ;;;                        add     hl,de                   ; else HL = HL + DE
 315+ 8FBE              ;;;                        ex      de,hl                   ;      swap HL and DE
 316+ 8FBE              ;;;                        and     a                       ;      reset carry
 317+ 8FBE              ;;;                        sbc     hl,de                   ;      HL = DE - HL (as they were swapped)
 318+ 8FBE              ;;;                        ld      b,c                     ;      B = sign of C
 319+ 8FBE              ;;;                        ret                             ;      ret
 320+ 8FBE
 321+ 8FBE
 322+ 8FBE              ; 06 06 2022 not used
 323+ 8FBE              ; a = value to add
 324+ 8FBE              ; b = offset (equivalent to regX)
 325+ 8FBE              ; returns INWK [x] set to new value
 326+ 8FBE              ; NOT USED addINWKbasigned:
 327+ 8FBE              ; NOT USED 		ld 		hl,UBnkxlo                  ; hl = INWK 0
 328+ 8FBE              ; NOT USED 		ld      c,a                         ; preserve a
 329+ 8FBE              ; NOT USED 		ld		a,b
 330+ 8FBE              ; NOT USED 		add		hl,a                        ; hl = INWK[x]
 331+ 8FBE              ; NOT USED         ld      a,c                         ; get back a value
 332+ 8FBE              ; NOT USED         and     $80                         ; get sign bit from a
 333+ 8FBE              ; NOT USED         ld      b,a                         ; now b = sign bit of a
 334+ 8FBE              ; NOT USED         ld      a,c                         ; a = original value
 335+ 8FBE              ; NOT USED         and     SignMask8Bit                ; a = unsigned version of original value
 336+ 8FBE              ; 06 06 2022 not used
 337+ 8FBE              ; hl = unsigned version of INWK0[b]
 338+ 8FBE              ; a = value to add, also in c which will optimise later code
 339+ 8FBE              ; b = sign bit of a ( in old code was varT)
 340+ 8FBE              ; NOTUSEDaddhlcsigned:
 341+ 8FBE              ; NOTUSED        ld      e,(hl)                      ; de = INKK value
 342+ 8FBE              ; NOTUSED        inc     hl
 343+ 8FBE              ; NOTUSED        ld      d,(hl)
 344+ 8FBE              ; NOTUSED        inc     hl                          ; now pointing a sign
 345+ 8FBE              ; NOTUSED        ld      a,(hl)                      ; a = sign bit
 346+ 8FBE              ; NOTUSED        ex      de,hl                       ; hl = value now and de = pointer to sign
 347+ 8FBE              ; NOTUSED        xor     b                           ; a = resultant sign
 348+ 8FBE              ; NOTUSED        bit     7,a                         ; is it negative?
 349+ 8FBE              ; NOTUSED        jr      z,.postivecalc
 350+ 8FBE              ; NOTUSED.negativecalc:
 351+ 8FBE              ; NOTUSED        ld      a,h
 352+ 8FBE              ; NOTUSED        and     SignMask8Bit
 353+ 8FBE              ; NOTUSED        ld      h,a                         ; strip high bit
 354+ 8FBE              ; NOTUSED        ld      ixl,b                       ; save sign bit from b into d
 355+ 8FBE              ; NOTUSED        ld      b,0                         ; c = value to subtract so now bc = value to subtract
 356+ 8FBE              ; NOTUSED        sbc     hl,bc
 357+ 8FBE              ; NOTUSED        ld      b,ixl                       ; get sign back
 358+ 8FBE              ; NOTUSED        ex      de,hl                       ; de = value hl = pointer to sign
 359+ 8FBE              ; NOTUSED        ld      a,(hl)                      ;
 360+ 8FBE              ; NOTUSED        and     SignMask8Bit
 361+ 8FBE              ; NOTUSED        sbc     a,0                         ; subtract carry which could flip sign bit
 362+ 8FBE              ; NOTUSED        or      $80                         ; set bit 0
 363+ 8FBE              ; NOTUSED        xor     b                           ; flip bit on sign (var T)
 364+ 8FBE              ; NOTUSED        ld      (hl),a
 365+ 8FBE              ; NOTUSED        dec     hl
 366+ 8FBE              ; NOTUSED        ld      (hl),d
 367+ 8FBE              ; NOTUSED        dec     hl
 368+ 8FBE              ; NOTUSED        ld      (hl),e                      ; write out DE to INKW[x]0,1
 369+ 8FBE              ; NOTUSED        ex      de,hl                       ; hl = value de = pointer to start if INKW[x]
 370+ 8FBE              ; NOTUSED        ret     c                           ; if carry was set then we can exit now
 371+ 8FBE              ; NOTUSED.nocarry:
 372+ 8FBE              ; NOTUSED        NegHL                               ; get hl back to positive, a is still inkw+2
 373+ 8FBE              ; NOTUSED        or      b                           ; b is still varT
 374+ 8FBE              ; NOTUSED        ex      de,hl                       ; de = value hl = pointer to start if INKW[x]
 375+ 8FBE              ; NOTUSED        ld      (hl),e
 376+ 8FBE              ; NOTUSED        inc     hl
 377+ 8FBE              ; NOTUSED        ld      (hl),d
 378+ 8FBE              ; NOTUSED        inc     hl
 379+ 8FBE              ; NOTUSED        ld      (hl),a                      ; set sign bit in INKK[x]+2
 380+ 8FBE              ; NOTUSED        ex      de,hl                       ; hl = value de = pointer to sign
 381+ 8FBE              ; NOTUSED        ret
 382+ 8FBE              ; NOTUSED.postivecalc:
 383+ 8FBE              ; NOTUSED        ld      ixl,b
 384+ 8FBE              ; NOTUSED        ld      b,0
 385+ 8FBE              ; NOTUSED        add     hl,de
 386+ 8FBE              ; NOTUSED        ex      de,hl
 387+ 8FBE              ; NOTUSED        or      ixl                         ; we don;t need to recover b here
 388+ 8FBE              ; NOTUSED        ld      (hl),a                      ; push sign into INWK[x]
 389+ 8FBE              ; NOTUSED        dec     hl
 390+ 8FBE              ; NOTUSED        ld      (hl),d
 391+ 8FBE              ; NOTUSED        dec     hl
 392+ 8FBE              ; NOTUSED        ld      (hl),e
 393+ 8FBE              ; NOTUSED        ret
 394+ 8FBE
 395+ 8FBE              ;a = a AND 80 (i.e. bit 7) =>carry       so value is -
 396+ 8FBE              ;MVT1
 397+ 8FBE              ;    S = bits 6 to 0 of A
 398+ 8FBE              ;    A = sign bit => T
 399+ 8FBE              ;    xor sign bit with ink[x] Sign
 400+ 8FBE              ;    if negative thn its not an add
 401+ 8FBE              ;
 402+ 8FBE              ;        and h, 7F
 403+ 8FBE              ;        b = 0
 404+ 8FBE              ;        c = varS
 405+ 8FBE              ;        subtract INW[X]hilo, bc
 406+ 8FBE              ;        retain carry
 407+ 8FBE              ;        get INKW[x]Sign
 408+ 8FBE              ;        and 7F
 409+ 8FBE              ;        subtract carry (so will go negtive if negative)
 410+ 8FBE              ;        xor bit 7 of h with T to flip bit
 411+ 8FBE              ;        write to INKW[x]Sign
 412+ 8FBE              ;
 413+ 8FBE              ;    else
 414+ 8FBE              ;MV10.
 415+ 8FBE              ;        add INWK[x]hi,lo, varS
 416+ 8FBE              ;        or      sign bit
 417+ 8FBE
 418+ 8FBE
# file closed: ./Maths/asm_add.asm
 627  8FBE                  INCLUDE "./Maths/asm_subtract.asm"
# file opened: ./Maths/asm_subtract.asm
   1+ 8FBE              ;...subtract routines
   2+ 8FBE              ; we could cheat, flip the sign of DE and just add but its not very optimised
   3+ 8FBE 7C           subHLDES15:             ld      a,h
   4+ 8FBF E6 80                                and     SignOnly8Bit
   5+ 8FC1 47                                   ld      b,a                         ;save sign bit in b
   6+ 8FC2 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
   7+ 8FC3                                      JumpIfNegative .SUBHLDEOppSGN        ;Signs are opposite therefore we can add
   7+ 8FC3 FA F1 8F    >                        jp		m, .SUBHLDEOppSGN
   8+ 8FC6 78           .SUBHLDESameSigns:      ld      a,b
   9+ 8FC7 B2                                   or      d
  10+ 8FC8                                      JumpIfNegative .SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
  10+ 8FC8 FA D2 8F    >                        jp		m, .SUBHLDESameNeg
  11+ 8FCB                                      ClearCarryFlag
  11+ 8FCB B7          >                        or a
  12+ 8FCC ED 52                                sbc     hl,de
  13+ 8FCE                                      JumpIfNegative .SUBHLDESameOvrFlw
  13+ 8FCE FA E5 8F    >                        jp		m, .SUBHLDESameOvrFlw
  14+ 8FD1 C9                                   ret
  15+ 8FD2 7C           .SUBHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  16+ 8FD3 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  17+ 8FD5 67                                   ld      h,a
  18+ 8FD6 7A                                   ld      a,d
  19+ 8FD7 E6 7F                                and     SignMask8Bit
  20+ 8FD9 57                                   ld      d,a
  21+ 8FDA                                      ClearCarryFlag
  21+ 8FDA B7          >                        or a
  22+ 8FDB ED 52                                sbc     hl,de
  23+ 8FDD                                      JumpIfNegative .SUBHLDESameOvrFlw
  23+ 8FDD FA E5 8F    >                        jp		m, .SUBHLDESameOvrFlw
  24+ 8FE0                                                          DISPLAY "TODO:  don't bother with overflow for now"
  25+ 8FE0 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
  26+ 8FE1 F6 80                                or      SignOnly8Bit
  27+ 8FE3 67                                   ld      h,a
  28+ 8FE4 C9                                   ret
  29+ 8FE5              .SUBHLDESameOvrFlw:     NegHL
  29+ 8FE5 AF          >                    xor a
  29+ 8FE6 95          >                    sub l
  29+ 8FE7 6F          >                    ld l,a
  29+ 8FE8 9F          >                    sbc a,a
  29+ 8FE9 94          >                    sub h
  29+ 8FEA 67          >                    ld h,a
  30+ 8FEB 78                                   ld      a,b
  31+ 8FEC EE 80                                xor     SignOnly8Bit                ; flip sign bit
  32+ 8FEE B4                                   or      h
  33+ 8FEF 67                                   ld      h,a                         ; recover sign
  34+ 8FF0 C9                                   ret
  35+ 8FF1 B7           .SUBHLDEOppSGN:         or      a
  36+ 8FF2 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  37+ 8FF3 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  38+ 8FF5 67                                   ld      h,a
  39+ 8FF6 7A                                   ld      a,d
  40+ 8FF7 E6 7F                                and     SignMask8Bit
  41+ 8FF9 57                                   ld      d,a
  42+ 8FFA 19                                   add     hl,de
  43+ 8FFB 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  44+ 8FFC B4                                   or      h
  45+ 8FFD 67                                   ld      h,a                         ; set the previou sign value
  46+ 8FFE C9                                   ret
  47+ 8FFF
  48+ 8FFF
# file closed: ./Maths/asm_subtract.asm
 628  8FFF                  INCLUDE "./Maths/Utilities/AddDEToCash.asm"
# file opened: ./Maths/Utilities/AddDEToCash.asm
   1+ 8FFF              ; Note its big endian
   2+ 8FFF 2A CF 84     addDEtoCash:            ld      hl,(Cash)
   3+ 9002 19                                   add     hl,de
   4+ 9003 22 CF 84                             ld      (Cash),hl
   5+ 9006 11 00 00                             ld      de,0
   6+ 9009 2A D1 84                             ld      hl,(Cash+2)
   7+ 900C ED 5A                                adc     hl,de
   8+ 900E 22 D1 84                             ld      (Cash+2),hl
   9+ 9011 C9                                   ret
  10+ 9012
  11+ 9012 2A CF 84     subDEfromCash:          ld      hl,(Cash)
  12+ 9015 7C                                   ld      a,h
  13+ 9016 B5                                   or      l
  14+ 9017 2A D1 84                             ld      hl,(Cash+2)
  15+ 901A B4                                   or      h
  16+ 901B B5                                   or      l
  17+ 901C C8                                   ret     z               ; No cash return
  18+ 901D B7                                   or      a
  19+ 901E 2A CF 84                             ld      hl,(Cash)
  20+ 9021 ED 52                                sbc     hl,de
  21+ 9023 22 CF 84                             ld      (Cash),hl
  22+ 9026 11 00 00                             ld      de,0
  23+ 9029 2A D1 84                             ld      hl,(Cash+2)
  24+ 902C ED 52                                sbc     hl,de
  25+ 902E 22 D1 84                             ld      (Cash+2),hl
  26+ 9031                                      JumpOnBitSet h,7,.ZeroCash
  26+ 9031 CB 7C       >                        bit 	7,h
  26+ 9033 C2 37 90    >                        jp      nz,.ZeroCash
  27+ 9036 C9                                   ret
  28+ 9037 21 00 00     .ZeroCash:              ld      hl,0
  29+ 903A 22 CF 84                             ld      (Cash),hl
  30+ 903D 22 D1 84                             ld      (Cash+2),hl
  31+ 9040 C9                                   ret
  32+ 9041
# file closed: ./Maths/Utilities/AddDEToCash.asm
 629  9041                  INCLUDE "./Maths/DIVD3B2.asm"
# file opened: ./Maths/DIVD3B2.asm
   1+ 9041              ;INPUTS: ahl = dividend cde = divisor
   2+ 9041              ;OUTPUTS: cde = quotient ahl = remainder
   3+ 9041 47           Div24by24:              ld b,a
   4+ 9042 E5                                   push hl
   5+ 9043 DD E1                                pop ix
   6+ 9045 2E 18                                ld l,24
   7+ 9047 E5                                   push hl
   8+ 9048 AF                                   xor a
   9+ 9049 67                                   ld h,a
  10+ 904A 6F                                   ld l,a
  11+ 904B DD 29        .Div24by24loop:         add ix,ix
  12+ 904D CB 10                                rl b
  13+ 904F ED 6A                                adc hl,hl
  14+ 9051 17                                   rla
  15+ 9052 B9                                   cp c
  16+ 9053 38 0C                                jr c,.Div24by24skip
  17+ 9055 20 05                                jr nz,.Div24by24setbit
  18+ 9057 ED 52                                sbc hl,de
  19+ 9059 19                                   add hl,de
  20+ 905A 38 05                                jr c,.Div24by24skip
  21+ 905C ED 52        .Div24by24setbit:       sbc hl,de
  22+ 905E 99                                   sbc a,c
  23+ 905F DD 23                                inc ix
  24+ 9061 E3           .Div24by24skip:         ex (sp),hl
  25+ 9062 2D                                   dec l
  26+ 9063 E3                                   ex (sp),hl
  27+ 9064 20 E5                                jr nz,.Div24by24loop
  28+ 9066 D1                                   pop de
  29+ 9067 48                                   ld c,b
  30+ 9068 DD E5                                push ix
  31+ 906A D1                                   pop de
  32+ 906B C9                                   ret
  33+ 906C
  34+ 906C FD 67        Div24by24ASigned:       ld      iyh,a
  35+ 906E E6 7F                                and     SignMask8Bit
  36+ 9070 CD 41 90                             call    Div24by24
  37+ 9073 F5                                   push    af
  38+ 9074 FD 7C                                ld      a,iyh
  39+ 9076 E6 80                                and     SignOnly8Bit
  40+ 9078 B1                                   or      c
  41+ 9079 4F                                   ld      c,a
  42+ 907A F1                                   pop     af
  43+ 907B C9                                   ret
  44+ 907C
  45+ 907C                                      ; CDE = AHL/CDE, AHL = remainder
  46+ 907C FD 67        Div24by24LeadSign:      ld      iyh,a           ; Preserve signed in IYL
  47+ 907E A9                                   xor     c               ; flip sign if negative
  48+ 907F E6 80                                and     SignOnly8Bit    ; .
  49+ 9081 FD 6F                                ld      iyl,a           ; .
  50+ 9083 79                                   ld      a,c             ; make both values ABS
  51+ 9084 E6 7F                                and     SignMask8Bit    ; .
  52+ 9086 4F                                   ld      c,a             ; .
  53+ 9087 FD 7C                                ld      a,iyh           ; .
  54+ 9089 E6 7F                                and     SignMask8Bit    ; .
  55+ 908B CD 41 90                             call    Div24by24       ; do abs divide
  56+ 908E FD B5                                or      iyl             ; bring in sign bit
  57+ 9090 FD 67                                ld      iyh,a           ; save a
  58+ 9092 79                                   ld      a,c             ; sort sign for c
  59+ 9093 FD B5                                or      iyl             ;
  60+ 9095 4F                                   ld      c,a             ;
  61+ 9096 FD 7C                                ld      a,iyh           ; sort sign of a
  62+ 9098 C9                                   ret
  63+ 9099
  64+ 9099              ; --------------------------------------------------------------
  65+ 9099              ;divdide by 16 using undocumented instrunctions
  66+ 9099              ;Input: BC = Dividend, DE = Divisor, HL = 0
  67+ 9099              ;Output: BC = Quotient, HL = Remainder
  68+ 9099 47           PROJ256mulAdivQ:        ld      b,a
  69+ 909A 0E 00                                ld      c,0
  70+ 909C 16 00                                ld      d,0
  71+ 909E 3A 71 7F                             ld      a,(varQ)
  72+ 90A1 5F                                   ld      e,a
  73+ 90A2 21 00 00     PROJDIV16UNDOC:         ld      hl,0
  74+ 90A5 78                                   ld      a,b
  75+ 90A6 06 10                                ld      b,16
  76+ 90A8 CB 31        PROJDIV16UNDOCLOOP:     sll     c       ; unroll 16 times
  77+ 90AA 17                                   rla             ; ...
  78+ 90AB ED 6A                                adc     hl,hl       ; ...
  79+ 90AD ED 52                                sbc     hl,de       ; ...
  80+ 90AF 30 02                                jr      nc,PROJDIV16UNDOCSKIP       ; ...
  81+ 90B1 19                                   add     hl,de       ; ...
  82+ 90B2 0D                                   dec     c       ; ...
  83+ 90B3 10 F3        PROJDIV16UNDOCSKIP:     djnz    PROJDIV16UNDOCLOOP
  84+ 90B5 79                                   ld      a,c
  85+ 90B6 32 72 7F                             ld      (varR),a
  86+ 90B9 C9                                   ret
  87+ 90BA
  88+ 90BA
  89+ 90BA
  90+ 90BA
# file closed: ./Maths/DIVD3B2.asm
 630  90BA                  INCLUDE "./Maths/multiply.asm"
# file opened: ./Maths/multiply.asm
   1+ 90BA              HLequSRmulQdiv256:      ;X.Y=x1lo.S*M/256  	\ where M/256 is gradient
   2+ 90BA 2A 72 7F                             ld  hl,(varRS)
   3+ 90BD 3A 71 7F                             ld  a,(varQ)
   4+ 90C0 C5 D5        HLeqyHLmulAdiv256:      push    bc,,de
   5+ 90C2 11 00 00                             ld  de,0        ; de = XY
   6+ 90C5 47                                   ld  b,a         ; b = Q
   7+ 90C6                                      ShiftHLRight1
   7+ 90C6 CB 3C       >			   srl h
   7+ 90C8 CB 1D       >			   rr  l
   8+ 90CA CB 20                                sla b
   9+ 90CC 30 03                                jr  nc,.LL126
  10+ 90CE EB           .LL125:                 ex de,hl
  11+ 90CF 19                                   add hl,de
  12+ 90D0 EB                                   ex  de,hl       ; de = de + rs
  13+ 90D1              .LL126:                 ShiftHLRight1
  13+ 90D1 CB 3C       >			   srl h
  13+ 90D3 CB 1D       >			   rr  l
  14+ 90D5 CB 20                                sla b
  15+ 90D7 38 F5                                jr      c,.LL125
  16+ 90D9 20 F6                                jr      nz,.LL126
  17+ 90DB EB                                   ex      de,hl   ; hl = result
  18+ 90DC D1 C1                                pop     bc,,de
  19+ 90DE C9                                   ret
  20+ 90DF
  21+ 90DF              ; FMLTU - A = A * Q / 256
  22+ 90DF 57           AequAmulQdiv256usgn:    ld      d,a
  23+ 90E0 3A 71 7F                             ld      a,(varQ)
  24+ 90E3 5F                                   ld      e,a
  25+ 90E4              asm_defmutl:
  26+ 90E4              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=D*E/256unsg  Fast multiply"
  27+ 90E4 ED 30        AequDmulEdiv256usgn:    mul     de
  28+ 90E6 7A                                   ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
  29+ 90E7 C9                                   ret
  30+ 90E8
  31+ 90E8
  32+ 90E8
  33+ 90E8
  34+ 90E8
  35+ 90E8              MacroDEEquQmulASigned:  MACRO
  36+ 90E8 ~                                    ld      d,a                         ; save a into d
  37+ 90E8 ~                                    ld      a,(varQ)
  38+ 90E8 ~                                    ld      e,a
  39+ 90E8 ~                                    xor     d                           ; a = a xor var Q
  40+ 90E8 ~                                    and     SignOnly8Bit
  41+ 90E8 ~                                    ld      b,a                         ; b = sign of a xor q
  42+ 90E8 ~                                    ld      a,d                         ; d = abs d (or a reg)
  43+ 90E8 ~                                    and     SignMask8Bit
  44+ 90E8 ~                                    ld      d,a
  45+ 90E8 ~                                    ld      a,e                         ; e = abs e (or varQ)
  46+ 90E8 ~                                    and     SignMask8Bit
  47+ 90E8 ~                                    ld      e,a
  48+ 90E8 ~                                    mul                                 ; de = a * Q
  49+ 90E8 ~                                    ld      a,d
  50+ 90E8 ~                                    or      b                           ; de = a * Q leading sign bit
  51+ 90E8 ~                                    ld      d,a
  52+ 90E8                                      ENDM
  53+ 90E8
  54+ 90E8
  55+ 90E8
  56+ 90E8                                 ; .MAD	\ -> &22AD  \ Multiply and Add  (DE also) X.A(Lo.Hi) = Q*A + R.S (Lo.Hi)
  57+ 90E8              madXAequQmulAaddRS:     MacroDEEquQmulASigned
  57+ 90E8 57          >                        ld      d,a                         ; save a into d
  57+ 90E9 3A 71 7F    >                        ld      a,(varQ)
  57+ 90EC 5F          >                        ld      e,a
  57+ 90ED AA          >                        xor     d                           ; a = a xor var Q
  57+ 90EE E6 80       >                        and     SignOnly8Bit
  57+ 90F0 47          >                        ld      b,a                         ; b = sign of a xor q
  57+ 90F1 7A          >                        ld      a,d                         ; d = abs d (or a reg)
  57+ 90F2 E6 7F       >                        and     SignMask8Bit
  57+ 90F4 57          >                        ld      d,a
  57+ 90F5 7B          >                        ld      a,e                         ; e = abs e (or varQ)
  57+ 90F6 E6 7F       >                        and     SignMask8Bit
  57+ 90F8 5F          >                        ld      e,a
  57+ 90F9 ED 30       >                        mul                                 ; de = a * Q
  57+ 90FB 7A          >                        ld      a,d
  57+ 90FC B0          >                        or      b                           ; de = a * Q leading sign bit
  57+ 90FD 57          >                        ld      d,a
  58+ 90FE 2A 72 7F                             ld		hl,(varR)
  59+ 9101 CD 29 91                             call	madXAAddHLDESigned
  60+ 9104 EB                                   ex      de,hl                       ; de = R.S + DE
  61+ 9105                                      ClearCarryFlag
  61+ 9105 B7          >                        or a
  62+ 9106 DD 6B                                ld      ixl,e
  63+ 9108 7A                                   ld      a,d
  64+ 9109 C9                                   ret
  65+ 910A
  66+ 910A              madDEequQmulAaddRS:     MacroDEEquQmulASigned
  66+ 910A 57          >                        ld      d,a                         ; save a into d
  66+ 910B 3A 71 7F    >                        ld      a,(varQ)
  66+ 910E 5F          >                        ld      e,a
  66+ 910F AA          >                        xor     d                           ; a = a xor var Q
  66+ 9110 E6 80       >                        and     SignOnly8Bit
  66+ 9112 47          >                        ld      b,a                         ; b = sign of a xor q
  66+ 9113 7A          >                        ld      a,d                         ; d = abs d (or a reg)
  66+ 9114 E6 7F       >                        and     SignMask8Bit
  66+ 9116 57          >                        ld      d,a
  66+ 9117 7B          >                        ld      a,e                         ; e = abs e (or varQ)
  66+ 9118 E6 7F       >                        and     SignMask8Bit
  66+ 911A 5F          >                        ld      e,a
  66+ 911B ED 30       >                        mul                                 ; de = a * Q
  66+ 911D 7A          >                        ld      a,d
  66+ 911E B0          >                        or      b                           ; de = a * Q leading sign bit
  66+ 911F 57          >                        ld      d,a
  67+ 9120 2A 72 7F                             ld		hl,(varR)
  68+ 9123 CD 29 91                             call	madXAAddHLDESigned
  69+ 9126 EB                                   ex      de,hl                       ; de = R.S + DE
  70+ 9127                                      ClearCarryFlag
  70+ 9127 B7          >                        or a
  71+ 9128 C9                                   ret
  72+ 9129
  73+ 9129 7C           madXAAddHLDESigned:     ld      a,h
  74+ 912A E6 80                                and     SignOnly8Bit
  75+ 912C 47                                   ld      b,a                         ;save sign bit in b
  76+ 912D AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
  77+ 912E                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
  77+ 912E FA 46 91    >                        jp		m, .ADDHLDEOppSGN
  78+ 9131 78           .ADDHLDESameSigns:       ld      a,b
  79+ 9132 B2                                   or      d
  80+ 9133                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
  80+ 9133 FA 38 91    >                        jp		m, .ADDHLDESameNeg
  81+ 9136 19                                   add     hl,de
  82+ 9137 C9                                   ret
  83+ 9138 7C           .ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  84+ 9139 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  85+ 913B 67                                   ld      h,a
  86+ 913C 7A                                   ld      a,d
  87+ 913D E6 7F                                and     SignMask8Bit
  88+ 913F 57                                   ld      d,a
  89+ 9140 19                                   add     hl,de
  90+ 9141 3E 80                                ld      a,SignOnly8Bit
  91+ 9143 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
  92+ 9144 67                                   ld      h,a
  93+ 9145 C9                                   ret
  94+ 9146 7C           .ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
  95+ 9147 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  96+ 9149 67                                   ld      h,a
  97+ 914A 7A                                   ld      a,d
  98+ 914B E6 7F                                and     SignMask8Bit
  99+ 914D 57                                   ld      d,a
 100+ 914E B7                                   or      a
 101+ 914F ED 52                                sbc     hl,de
 102+ 9151 38 04                                jr      c,.ADDHLDEOppInvert
 103+ 9153 78           .ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 104+ 9154 B4                                   or      h
 105+ 9155 67                                   ld      h,a                         ; set the previou sign value
 106+ 9156 C9                                   ret
 107+ 9157              .ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 107+ 9157 AF          >                    xor a
 107+ 9158 95          >                    sub l
 107+ 9159 6F          >                    ld l,a
 107+ 915A 9F          >                    sbc a,a
 107+ 915B 94          >                    sub h
 107+ 915C 67          >                    ld h,a
 108+ 915D 78                                   ld      a,b
 109+ 915E EE 80                                xor     SignOnly8Bit                ; flip sign bit
 110+ 9160 B4                                   or      h
 111+ 9161 67                                   ld      h,a                         ; recover sign
 112+ 9162 C9                                   ret
 113+ 9163
 114+ 9163
 115+ 9163                  ; multiplication of 16-bit number and 8-bit number into a 24-bit product
 116+ 9163                  ;
 117+ 9163                  ; enter : hl = 16-bit multiplier   = x
 118+ 9163                  ;          e =  8-bit multiplicand = y
 119+ 9163                  ;
 120+ 9163                  ; exit  : ahl = 24-bit product
 121+ 9163                  ;         carry reset
 122+ 9163                  ;
 123+ 9163                  ; uses  : af, de, hl
 124+ 9163 54           AHLequHLmulE:           ld d,h                      ; xh
 125+ 9164 63                                   ld h,e                      ; yl
 126+ 9165 ED 30                                mul de                      ; xh*yl
 127+ 9167 EB                                   ex de,hl
 128+ 9168 ED 30                                mul de                      ; yl*xl, hl = xh*yl
 129+ 916A
 130+ 916A 7A                                   ld  a,d                     ; sum products
 131+ 916B 85                                   add a,l
 132+ 916C 57                                   ld  d,a
 133+ 916D EB                                   ex de,hl
 134+ 916E
 135+ 916E 7A                                   ld  a,d
 136+ 916F CE 00                                adc a,0
 137+ 9171 C9                                   ret
 138+ 9172
 139+ 9172 54           HLE0quH0mulE:           ld      d,h                 ; .
 140+ 9173 63                                   ld      h,e                 ; .
 141+ 9174 ED 30                                mul     de                  ; de = xh * yl
 142+ 9176 EB                                   ex      de,hl
 143+ 9177 C9                                   ret
 144+ 9178
 145+ 9178                 ; multiplication of two 16-bit numbers into a 32-bit product
 146+ 9178                 ;
 147+ 9178                 ; enter : de = 16-bit multiplicand = y
 148+ 9178                 ;         hl = 16-bit multiplicand = x
 149+ 9178                 ;
 150+ 9178                 ; exit  : dehl = 32-bit product
 151+ 9178                 ;         carry reset
 152+ 9178                 ;
 153+ 9178                 ; uses  : af, bc, de, hl
 154+ 9178
 155+ 9178
 156+ 9178
 157+ 9178 45           DEHLequDEmulHL:         ld b,l                      ; x0
 158+ 9179 4B                                   ld c,e                      ; y0
 159+ 917A 5D                                   ld e,l                      ; x0
 160+ 917B 6A                                   ld l,d
 161+ 917C E5                                   push hl                     ; x1 y1
 162+ 917D 69                                   ld l,c                      ; y0
 163+ 917E              ; bc = x0 y0, de = y1 x0,  hl = x1 y0,  stack = x1 y1
 164+ 917E ED 30                                mul de                      ; y1*x0
 165+ 9180 EB                                   ex de,hl
 166+ 9181 ED 30                                mul de                      ; x1*y0
 167+ 9183
 168+ 9183 AF                                   xor a                       ; zero A
 169+ 9184 19                                   add hl,de                   ; sum cross products p2 p1
 170+ 9185 8F                                   adc a,a                     ; capture carry p3
 171+ 9186
 172+ 9186 59                                   ld e,c                      ; x0
 173+ 9187 50                                   ld d,b                      ; y0
 174+ 9188 ED 30                                mul de                      ; y0*x0
 175+ 918A
 176+ 918A 47                                   ld b,a                      ; carry from cross products
 177+ 918B 4C                                   ld c,h                      ; LSB of MSW from cross products
 178+ 918C
 179+ 918C 7A                                   ld a,d
 180+ 918D 85                                   add a,l
 181+ 918E 67                                   ld h,a
 182+ 918F 6B                                   ld l,e                      ; LSW in HL p1 p0
 183+ 9190
 184+ 9190 D1                                   pop de
 185+ 9191 ED 30                                mul de                      ; x1*y1
 186+ 9193
 187+ 9193 EB                                   ex de,hl
 188+ 9194 ED 4A                                adc hl,bc
 189+ 9196 EB                                   ex de,hl                    ; de = final MSW
 190+ 9197
 191+ 9197 C9                                   ret
 192+ 9198
 193+ 9198              ; multiplication of two 16-bit numbers into a 16-bit product
 194+ 9198              ; enter : de = 16-bit multiplicand
 195+ 9198              ;         hl = 16-bit multiplicand
 196+ 9198              ; exit  : hl = 16-bit product
 197+ 9198              ;         carry reset
 198+ 9198              ; maths is
 199+ 9198              ;        hl = y , de= x
 200+ 9198              ;        hl = xhi,ylo + (yhigh * xlow)
 201+ 9198              ;        hl = yhih & xlo + x
 202+ 9198              ;
 203+ 9198              ;
 204+ 9198              ; uses  : af, bc, de, hl
 205+ 9198 C5           mulDEbyHL:              push    bc
 206+ 9199 7A                                   ld a,d                      ; a = xh
 207+ 919A 54                                   ld d,h                      ; d = yh
 208+ 919B 67                                   ld h,a                      ; h = xh
 209+ 919C 4B                                   ld c,e                      ; c = xl
 210+ 919D 45                                   ld b,l                      ; b = yl
 211+ 919E ED 30                                mul                         ; yh * yl
 212+ 91A0 EB                                   ex de,hl
 213+ 91A1 ED 30                                mul                         ; xh * yl
 214+ 91A3 19                                   add hl,de                   ; add cross products
 215+ 91A4 59                                   ld e,c
 216+ 91A5 50                                   ld d,b
 217+ 91A6 ED 30                                mul                         ; yl * xl
 218+ 91A8 7D                                   ld a,l                      ; cross products lsb
 219+ 91A9 82                                   add a,d                     ; add to msb final
 220+ 91AA 67                                   ld h,a
 221+ 91AB 6B                                   ld l,e                      ; hl = final
 222+ 91AC                                      ; 83 cycles, 19 bytes
 223+ 91AC AF                                   xor a                       ; reset carry
 224+ 91AD C1                                   pop     bc
 225+ 91AE C9                                   ret
 226+ 91AF
 227+ 91AF
 228+ 91AF              ; CHL = multiplicand D = multiplier
 229+ 91AF              ; DCHL = CHL * D
 230+ 91AF 7A           mulCHLbyDSigned:        ld      a,d                 ; get sign from d
 231+ 91B0 AC                                   xor     h                   ; xor with h to get resultant sign
 232+ 91B1 E6 80                                and     SignOnly8Bit        ; .
 233+ 91B3 FD 67                                ld      iyh,a               ; iyh = copy of sign
 234+ 91B5 79                                   ld      a,c                 ; now CHL = ABS (CHL)
 235+ 91B6 E6 7F                                and     SignMask8Bit        ; .
 236+ 91B8 4F                                   ld      c,a                 ; .
 237+ 91B9 7A                                   ld      a,d                 ; d = ABS D
 238+ 91BA E6 7F                                and     SignMask8Bit        ; .
 239+ 91BC              ; At this point CHL = ABS (HLE), A = ABS(D)
 240+ 91BC 57           .mul1:                  ld      d,a                 ; first do D * L
 241+ 91BD 5D                                   ld      e,l                 ; .
 242+ 91BE ED 30                                mul     de                  ; DE = L * D
 243+ 91C0 08                                   ex      af,af'              ; save multiplier
 244+ 91C1 6B                                   ld      l,e                 ; L = p0
 245+ 91C2 7A                                   ld      a,d                 ; carry byte
 246+ 91C3 08                                   ex      af,af'              ; retrieve muliplier and save carry byte along with flags
 247+ 91C4 5C           .mul2:                  ld      e,h                 ; byte 2 of multiplicand
 248+ 91C5 57                                   ld      d,a                 ; and multiplier
 249+ 91C6 ED 30                                mul     de                  ; now its D & L
 250+ 91C8 08                                   ex      af,af'              ; get back carry byte with flags
 251+ 91C9 83           .carrybyte1:            add     a,e                 ; add low byte carry to result and retain carry too through next instructions
 252+ 91CA 67                                   ld      h,a                 ; h = P1
 253+ 91CB 7A                                   ld      a,d                 ; a = carry byte
 254+ 91CC 08                                   ex      af,af'              ; save carry byte and get back multiplier with flags
 255+ 91CD 59           .mul3:                  ld      e,c                 ; byte 3 of multiplicand
 256+ 91CE 57                                   ld      d,a                 ;
 257+ 91CF ED 30                                mul     de                  ;
 258+ 91D1 08                                   ex      af,af'              ; get back carry byte and carry prior to first add
 259+ 91D2 8B                                   adc     a,e                 ;
 260+ 91D3 FD B4                                or      iyh                 ; recover saved resultant sign
 261+ 91D5 4F                                   ld      c,a                 ; c byte 3. Note the value range allowed can never cause a byte 3 carry
 262+ 91D6 C9                                   ret
 263+ 91D7
 264+ 91D7              ;  CHL = 53456 D = 1E
 265+ 91D7              ;  56 * 1E = A14 L = 14 carry = 0A
 266+ 91D7              ;  34 * 1E = 618 H = 18 +A = 22 carry = 6
 267+ 91D7              ;  5  * 1E = 096 C = 96 + 6 = 9C
 268+ 91D7              ;  CHL = 9C2214
 269+ 91D7              ;mult3
 270+ 91D7              ; DELC = HLE * D, uses HL, DE, C , A , IYH
 271+ 91D7              ; HLE = multiplicand D = multiplier
 272+ 91D7              ; tested by mathstestsun.asm all passed
 273+ 91D7              ; Algorithm
 274+ 91D7              ; AC =  E * D   (save carry)         H    L    E
 275+ 91D7              ; DE =  L * D                                  D
 276+ 91D7              ;  L =  A + E + carry                         E*D (lo)
 277+ 91D7              ; DE =  H * D                             L*D+ ^ (hi)
 278+ 91D7              ;  E =  A + E + carry                H*D (lo) + carry
 279+ 91D7              ;
 280+ 91D7              ;
 281+ 91D7 7A           mulHLbyDE2sc:           ld      a,d
 282+ 91D8 AC                                   xor     h
 283+ 91D9 E6 80                                and     SignOnly8Bit
 284+ 91DB FD 67                                ld      iyh,a               ; save sign bit for result
 285+ 91DD 7C                                   ld      a,h
 286+ 91DE E6 80                                and     SignOnly8Bit
 287+ 91E0 28 06                                jr      z,.HLPositive
 288+ 91E2              .HLNegative:            NegHL
 288+ 91E2 AF          >                    xor a
 288+ 91E3 95          >                    sub l
 288+ 91E4 6F          >                    ld l,a
 288+ 91E5 9F          >                    sbc a,a
 288+ 91E6 94          >                    sub h
 288+ 91E7 67          >                    ld h,a
 289+ 91E8 7A           .HLPositive:            ld      a,d
 290+ 91E9 E6 80                                and     SignOnly8Bit
 291+ 91EB 28 06                                jr      z,.DEPositive
 292+ 91ED              .DENegative:            NegDE
 292+ 91ED AF          >                    xor a
 292+ 91EE 93          >                    sub e
 292+ 91EF 5F          >                    ld e,a
 292+ 91F0 9F          >                    sbc a,a
 292+ 91F1 92          >                    sub d
 292+ 91F2 57          >                    ld d,a
 293+ 91F3 CD 98 91     .DEPositive:            call    mulDEbyHL           ; now do calc
 294+ 91F6 FD 7C                                ld      a,iyh
 295+ 91F8 A7                                   and     a                   ; if its 0 then we are good
 296+ 91F9 C8                                   ret     z
 297+ 91FA
 298+ 91FA
 299+ 91FA
 300+ 91FA 7A           mulHLEbyDSigned:        ld      a,d                 ; get sign from d
 301+ 91FB AC                                   xor     h                   ; xor with h to get resultant sign
 302+ 91FC E6 80                                and     SignOnly8Bit        ; .
 303+ 91FE FD 67                                ld      iyh,a               ; iyh = copy of sign
 304+ 9200 7C                                   ld      a,h                 ; now HLE = ABS (HLE)
 305+ 9201 E6 7F                                and     SignMask8Bit        ; .
 306+ 9203 67                                   ld      h,a                 ; .
 307+ 9204 7A                                   ld      a,d                 ; d = ABS D
 308+ 9205 E6 7F                                and     SignMask8Bit        ; .
 309+ 9207 57                                   ld      d,a                 ; .
 310+ 9208 B7           .testEitherSideZero:    or      a
 311+ 9209 28 24                                jr      z,.ResultZero
 312+ 920B 7C                                   ld      a,h
 313+ 920C B5                                   or      l
 314+ 920D B3                                   or      e
 315+ 920E 28 1F                                jr      z,.ResultZero
 316+ 9210              ; At this point HLE = ABS (HLE), A = ABS(D)
 317+ 9210 42                                   ld      b,d                 ; save Quotient
 318+ 9211 ED 30        .mul1:                  mul     de                  ; C = E * D
 319+ 9213 4B                                   ld      c,e                 ; C = p0
 320+ 9214 FD 6A                                ld      iyl,d               ; save carry (p1)
 321+ 9216 5D           .mul2:                  ld      e,l                 ; L = L * D
 322+ 9217 50                                   ld      d,b                 ; .
 323+ 9218 ED 30                                mul     de                  ; .
 324+ 921A FD 7D                                ld      a,iyl               ; get back p1
 325+ 921C 83           .carrybyte1:            add     a,e                 ; L = L + E
 326+ 921D 6F                                   ld      l,a                 ; .
 327+ 921E FD 6A                                ld      iyl,d               ; save new carry byte
 328+ 9220 5C           .mul3:                  ld      e,h                 ; E = H * D
 329+ 9221 50                                   ld      d,b                 ; .
 330+ 9222 ED 30                                mul     de                  ; .
 331+ 9224 FD 7D                                ld      a,iyl
 332+ 9226 8B                                   adc     a,e                 ; .
 333+ 9227 5F                                   ld      e,a                 ; .
 334+ 9228 7A           .ItsNotZero:            ld      a,d                 ;
 335+ 9229 CE 00                                adc     a,0                 ; final carry bit
 336+ 922B FD B4                                or      iyh                 ; bring back sign
 337+ 922D 57                                   ld      d,a                 ; s = sign
 338+ 922E C9                                   ret
 339+ 922F 11 00 00     .ResultZero:            ld      de,0
 340+ 9232                                      ZeroA
 340+ 9232 AF          >                        xor a
 341+ 9233 4F                                   ld      c,a
 342+ 9234 6F                                   ld      l,a
 343+ 9235 C9                                   ret
 344+ 9236
 345+ 9236              ;;;
 346+ 9236              ;;;
 347+ 9236              ;;;mulHLEbyDSigned:        ld      a,d                 ; get sign from d
 348+ 9236              ;;;                        xor     h                   ; xor with h to get resultant sign
 349+ 9236              ;;;                        and     SignOnly8Bit        ; .
 350+ 9236              ;;;                        ld      iyh,a               ; iyh = copy of sign
 351+ 9236              ;;;                        ld      a,h                 ; now HLE = ABS (HLE)
 352+ 9236              ;;;                        and     SignMask8Bit        ; .
 353+ 9236              ;;;                        ld      h,a                 ; .
 354+ 9236              ;;;                        ld      a,d                 ; d = ABS D
 355+ 9236              ;;;                        and     SignMask8Bit        ; .
 356+ 9236              ;;;                        ld      d,a                 ; .
 357+ 9236              ;;;.testEitherSideZero:    or      a
 358+ 9236              ;;;                        jr      z,.ResultZero
 359+ 9236              ;;;                        ld      a,h
 360+ 9236              ;;;                        or      l
 361+ 9236              ;;;                        or      e
 362+ 9236              ;;;                        jr      z,.ResultZero
 363+ 9236              ;;;; At this point HLE = ABS (HLE), A = ABS(D)
 364+ 9236              ;;;.mul1:                  mul     de                  ; C = E * D
 365+ 9236              ;;;                        ex      af,af'              ; save mulitplier
 366+ 9236              ;;;                        ld      c,e                 ; C = p0
 367+ 9236              ;;;                        ld      a,d                 ; save carry (p1)
 368+ 9236              ;;;                        ex      af,af'              ; .
 369+ 9236              ;;;.mul2:                  ld      e,l                 ; L = L * D
 370+ 9236              ;;;                        ld      d,a                 ; .
 371+ 9236              ;;;                        mul     de                  ; .
 372+ 9236              ;;;                        ex      af,af'              ; .
 373+ 9236              ;;;.carrybyte1:            add     a,e                 ; L = L + E
 374+ 9236              ;;;                        ld      l,a                 ; .
 375+ 9236              ;;;                        ld      a,d
 376+ 9236              ;;;                        ex      af,af'              ; save new carry byte
 377+ 9236              ;;;.mul3:                  ld      e,h                 ; E = H * D
 378+ 9236              ;;;                        ld      d,a                 ; .
 379+ 9236              ;;;                        mul     de                  ; .
 380+ 9236              ;;;                        ex      af,af'              ; .
 381+ 9236              ;;;                        adc     a,e                 ; .
 382+ 9236              ;;;                        ld      e,a                 ; .
 383+ 9236              ;;;.ItsNotZero:            ld      a,d                 ;
 384+ 9236              ;;;                        adc     a,0                 ; final carry bit
 385+ 9236              ;;;                        or      iyh                 ; bring back sign
 386+ 9236              ;;;                        ld      d,a                 ; s = sign
 387+ 9236              ;;;                        ret
 388+ 9236              ;;;.ResultZero:            ld      de,0
 389+ 9236              ;;;                        ZeroA
 390+ 9236              ;;;                        ld      c,a
 391+ 9236              ;;;                        ld      l,a
 392+ 9236              ;;;                        ret
 393+ 9236
 394+ 9236              ; multiplication of two S156-bit numbers into a 16-bit 2'd compliment product
 395+ 9236              ; enter : de = 16-bit multiplicand
 396+ 9236              ;         hl = 16-bit multiplicand
 397+ 9236              ; exit  : hl = 16-bit product
 398+ 9236              ;         carry reset
 399+ 9236              ;
 400+ 9236              ; uses  : af, bc, de, hl
 401+ 9236 00           mulDEbyHLSignByte       DB      0
 402+ 9237 AF           mulDEbyHLSgnTo2c:       xor     a
 403+ 9238 32 36 92                             ld      (mulDEbyHLSignByte),a
 404+ 923B 7A           .SignDE:                ld      a,d
 405+ 923C ED 27 80                             test    $80
 406+ 923F 28 08                                jr      z,.SignHL
 407+ 9241 E6 7F        .NegativeDE:            and     $7F
 408+ 9243 57                                   ld      d,a
 409+ 9244 3E 80                                ld      a,$80
 410+ 9246 32 36 92                             ld      (mulDEbyHLSignByte),a
 411+ 9249 7C           .SignHL:                ld      a,h
 412+ 924A ED 27 80                             test    $80
 413+ 924D 28 0B                                jr      z,.AbsoluteMultiply
 414+ 924F E6 7F        .NegativeHL:            and     $7F
 415+ 9251 67                                   ld      h,a
 416+ 9252 3A 36 92                             ld      a,(mulDEbyHLSignByte)
 417+ 9255 EE 80                                xor     $80
 418+ 9257 32 36 92                             ld      (mulDEbyHLSignByte),a
 419+ 925A CD 98 91     .AbsoluteMultiply:      call    mulDEbyHL
 420+ 925D 3A 36 92     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 421+ 9260 ED 27 80                             test    $80
 422+ 9263 C8                                   ret     z
 423+ 9264 AF           .Negateghl: 			xor 	a
 424+ 9265 95                                   sub 	l
 425+ 9266 6F                                   ld 		l,a
 426+ 9267 9F                                   sbc 	a,a
 427+ 9268 94                                   sub 	h
 428+ 9269 67                                   ld 		h,a
 429+ 926A C9                                   ret
 430+ 926B
 431+ 926B AF           mulDESgnbyHLUnsgnTo2c:  xor     a
 432+ 926C 32 36 92                             ld      (mulDEbyHLSignByte),a
 433+ 926F 7A           .SignDE:                ld      a,d
 434+ 9270 ED 27 80                             test    $80
 435+ 9273 28 08                                jr      z,.AbsoluteMultiply
 436+ 9275 E6 7F        .NegativeDE:            and     $7F
 437+ 9277 57                                   ld      d,a
 438+ 9278 3E 80                                ld      a,$80
 439+ 927A 32 36 92                             ld      (mulDEbyHLSignByte),a
 440+ 927D CD 98 91     .AbsoluteMultiply:      call    mulDEbyHL
 441+ 9280 3A 36 92     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 442+ 9283 ED 27 80                             test    $80
 443+ 9286 C8                                   ret     z
 444+ 9287 AF           .Negateghl:             xor 	a
 445+ 9288 95                                   sub 	l
 446+ 9289 6F                                   ld 		l,a
 447+ 928A 9F                                   sbc 	a,a
 448+ 928B 94                                   sub 	h
 449+ 928C 67                                   ld 		h,a
 450+ 928D C9                                   ret
 451+ 928E
 452+ 928E
# file closed: ./Maths/multiply.asm
 631  928E                  INCLUDE "./Maths/asm_square.asm"
# file opened: ./Maths/asm_square.asm
   1+ 928E              ; "ASM_SQUA : TESTGOOD"
   2+ 928E              ; "AP = A^2 A = low,P = hi"
   3+ 928E
   4+ 928E              inline_squde: MACRO
   5+ 928E ~            			ld	e,a
   6+ 928E ~            			ld  d,a
   7+ 928E ~            			mul
   8+ 928E              			ENDM
   9+ 928E
  10+ 928E              inline_squa: MACRO
  11+ 928E ~            			ld	e,a
  12+ 928E ~            			ld  d,a
  13+ 928E ~            			mul
  14+ 928E ~            			ld	a,e
  15+ 928E              			ENDM
  16+ 928E
# file closed: ./Maths/asm_square.asm
 632  928E                  INCLUDE "./Maths/asm_sine.asm"
# file opened: ./Maths/asm_sine.asm
   1+ 928E              ;- MACROS
   2+ 928E              LookupSineAMacro:       MACRO
   3+ 928E ~                                    ld      hl,SNE                      ; Set Q = sin(X)  = sin(CNT2 mod 32) = |sin(CNT2)|
   4+ 928E ~                                    add     hl, a
   5+ 928E ~                                    ld      a,(hl)
   6+ 928E                                      ENDM
   7+ 928E
   8+ 928E              ; Gets the sine of A from the lookup table into A
   9+ 928E              LookupSineA:            LookupSineAMacro
   9+ 928E 21 37 93    >                        ld      hl,SNE                      ; Set Q = sin(X)  = sin(CNT2 mod 32) = |sin(CNT2)|
   9+ 9291 ED 31       >                        add     hl, a
   9+ 9293 7E          >                        ld      a,(hl)
  10+ 9294 C9                                   ret
  11+ 9295
# file closed: ./Maths/asm_sine.asm
 633  9295                  INCLUDE "./Maths/asm_sqrt.asm"
# file opened: ./Maths/asm_sqrt.asm
   1+ 9295              ; "ASM SQRT : TESTGOOD"
   2+ 9295              ; "16-bit integer square root"
   3+ 9295              ; "call with de = number to square root"
   4+ 9295              ; "returns   hl = square root"
   5+ 9295              ; "corrupts  bc, de"
   6+ 9295              asm_sqrt:
   7+ 9295 01 00 80     	ld bc,$8000
   8+ 9298 61           	ld h,c
   9+ 9299 69           	ld l,c
  10+ 929A              .sqrloop:
  11+ 929A CB 38        	srl b
  12+ 929C CB 19        	rr c
  13+ 929E 09           	add hl,bc
  14+ 929F EB           	ex de,hl
  15+ 92A0 ED 52        	sbc hl,de
  16+ 92A2 38 04        	jr c,.sqrbit
  17+ 92A4 EB           	ex de,hl
  18+ 92A5 09           	add hl,bc
  19+ 92A6 18 05        	jr .sqrfi
  20+ 92A8              .sqrbit:
  21+ 92A8 19           	add hl,de
  22+ 92A9 EB           	ex de,hl
  23+ 92AA B7           	or a
  24+ 92AB ED 42        	sbc hl,bc
  25+ 92AD              .sqrfi:
  26+ 92AD CB 3C        	srl h
  27+ 92AF CB 1D        	rr l
  28+ 92B1 CB 38        	srl b
  29+ 92B3 CB 19        	rr c
  30+ 92B5 30 E3        	jr nc,.sqrloop
  31+ 92B7 C9           	ret
  32+ 92B8
  33+ 92B8
  34+ 92B8              sqrtQR:					; Q = SQR(Qlo.Rhi) Q <~127
  35+ 92B8 3A 71 7F     	ld		a,(varQ)
  36+ 92BB 5F           	ld		e,a
  37+ 92BC 3A 72 7F     	ld		a,(varR)
  38+ 92BF 57           	ld		d,a
  39+ 92C0 CD 95 92     	call	asm_sqrt
  40+ 92C3 7D               ld      a,l
  41+ 92C4 32 71 7F     	ld		(varQ),a
  42+ 92C7 C9           	ret
  43+ 92C8
# file closed: ./Maths/asm_sqrt.asm
 634  92C8                  INCLUDE "./Maths/asm_arctan.asm"
# file opened: ./Maths/asm_arctan.asm
   1+ 92C8              ;Calculate A = arctan(P / Q)
   2+ 92C8              ; This finds the angle in the right-angled triangle where the opposite side to angle A is length P and the adjacent side to angle A has
   3+ 92C8              ; length Q, so:  tan(A) = P / Q
   4+ 92C8              ;
   5+ 92C8              ; The result in A is an integer representing the angle in radians. The routine returns values in the range 0 to 128,  (or 0 to PI radians).
   6+ 92C8 3A 69 7E     ARCTAN:                 ld      a,(varP)                    ; LDA P                  \ Set T1 = P EOR Q, which will have the sign of P * Q
   7+ 92CB 21 71 7F                             ld      hl,varQ                     ; EOR Q
   8+ 92CE AE                                   xor     (hl)                        ; .
   9+ 92CF 32 66 7E                             ld      (varT1),a                   ; STA T1
  10+ 92D2 3A 71 7F                             ld      a,(varQ)                    ; LDA Q                  \ If Q = 0, jump to AR2 to return a right angle
  11+ 92D5 A7                                   and     a                           ; BEQ AR2
  12+ 92D6 CA 18 93                             jp      z, .AR2                     ; .
  13+ 92D9 CB 27                                sla     a                           ; ASL A                  \ Set Q = |Q| * 2 (this is a quick way of clearing the
  14+ 92DB 32 71 7F                             ld      (varQ),a                    ; STA Q                  \ sign bit, and we don't need to shift right again as we only ever use this value in the division with |P| * 2, which we set next)
  15+ 92DE 3A 69 7E                             ld      a,(varP)                    ; LDA P                  \ Set A = |P| * 2
  16+ 92E1 CB 27                                sla     a                           ; ASL A
  17+ 92E3 32 69 7E                             ld      (varP),a
  18+ 92E6 21 71 7F                             ld      hl,varQ
  19+ 92E9 BE                                   cp      (hl)                        ; CMP Q                  \ If A >= Q, i.e. |P| > |Q|, jump to AR1 to swap P
  20+ 92EA D2 FC 92                             jp      nc, .AR1                    ; BCS AR1                \ and Q around, so we can still use the lookup table
  21+ 92ED CD 24 93                             call    ARS1                        ; JSR ARS1               \ Call ARS1 to set the following from the lookup table:  A = arctan(A / Q)  = arctan(|P / Q|)
  22+ 92F0                                      ClearCarryFlag                      ; SEC                    \ Set the C flag so the SBC instruction in AR3 will be correct, should we jump there
  22+ 92F0 B7          >                        or a
  23+ 92F1 4F           .AR4:                   ld      c,a                         ; as we have to use a we use c as a temp, we can't push af as we would loose flags on pop
  24+ 92F2 3A 66 7E                             ld      a,(varT1)                   ; LDX T1                 \ If T1 is negative, i.e. P and Q have different signs,
  25+ 92F5 47                                   ld      b,a                         ; .
  26+ 92F6 A7                                   and     a                           ; BMI AR3                \ jump down to AR3 to return arctan(-|P / Q|)
  27+ 92F7 79                                   ld      a,c                         ; .                      \ we need to get a back before jump
  28+ 92F8 FA 1B 93                             jp      m, .AR3                     ; .
  29+ 92FB C9                                   ret                                 ; RTS                    \ Otherwise P and Q have the same sign, so our result is correct and we can return from the subroutine
  30+ 92FC              ; We want to calculate arctan(t) where |t| > 1, so we can use the calculation described in the documentation for the ACT table, i.e. 64 - arctan(1 / t)
  31+ 92FC              ; In the 6502 verion it works with A already being P but we will fetch it
  32+ 92FC 3A 71 7F     .AR1:                   ld      a,(varQ)                    ; LDX Q                  \ Swap the values in Q and P, using the fact that we
  33+ 92FF 47                                   ld      b,a                         ; .
  34+ 9300 3A 69 7E                             ld      a,(varP)                    ; STA Q                  \ called AR1 with A = P
  35+ 9303 32 71 7F                             ld      (varQ),a                    ; .
  36+ 9306 78                                   ld      a,b                         ; TXA                    \ This also sets A = P (which now contains the original argument |Q|)
  37+ 9307 32 69 7E                             ld      (varP),a                    ; STX P                  \
  38+ 930A CD 24 93                             call    ARS1                        ; JSR ARS1               \ Call ARS1 to set the following from the lookup table: A = arctan(A / Q) = arctan(|Q / P|) = arctan(1 / |P / Q|)
  39+ 930D 32 8D 7F                             ld      (varT),a                    ; STA T                  \ Set T = 64 - T, we use B as T (its not really that)
  40+ 9310 47                                   ld      b,a                         ; its actually t = a, a = 64-a
  41+ 9311 3E 40                                ld      a,64                        ; LDA #64 What is going on here is t = result
  42+ 9313                                      ClearCarryFlag                      ; SBC T                            a = 64- result
  42+ 9313 B7          >                        or a
  43+ 9314 98                                   sbc     a,b                         ; .
  44+ 9315 C3 F1 92                             jp      .AR4                        ; BCS AR4                \ Jump to AR4 to continue the calculation (this BCS is effectively a JMP as the subtraction will never underflow, as ARS1 returns values in the range 0-31)
  45+ 9318              ; If we get here then Q = 0, so tan(A) = infinity and A is a right angle, or 0.25 of a circle. We allocate 255 to a full circle, so we should return 63 for a right angle
  46+ 9318 3E 3F        .AR2:                   ld      a,63                        ; LDA #63                \ Set A to 63, to represent a right angle
  47+ 931A C9                                   ret                                 ; RTS                    \ Return from the subroutine
  48+ 931B              ; A contains arctan(|P / Q|) but P and Q have different signs, so we need to return arctan(-|P / Q|), using the calculation described in the documentation for the ACT table, i.e. 128 - A
  49+ 931B 32 8D 7F     .AR3:                   ld      (varT),a
  50+ 931E 47                                   ld      b,a                         ; STA T                  \ Set A = 128 - A, we use b as T
  51+ 931F 3E 80                                ld      a,128                       ; LDA #128               \
  52+ 9321                                      ClearCarryFlag                      ; SBC T                  \ The subtraction will work because we did a SEC before calling AR3
  52+ 9321 B7          >                        or a
  53+ 9322 98                                   sbc     a,b
  54+ 9323 C9                                   ret                                 ; RTS                    \ Return from the subroutine
  55+ 9324              ; This routine fetches arctan(A / Q) from the ACT table, so A will be set to an integer in the range 0 to 31 that represents an angle from 0 to 45 degrees (or 0 to \ PI / 4 radians)
  56+ 9324 CD 4D A1     ARS1:                   call    LL28Amul256DivQ_6502        ; JSR LL28               \ Call LL28 to calculate: R = 256 * A / Q
  57+ 9327 3A 72 7F                             ld      a,(varR)                    ; LDA R                  \ Set X = R / 8
  58+ 932A CB 3F                                srl     a                           ; LSR A                  \       = 32 * A / Q
  59+ 932C CB 3F                                srl     a                           ; LSR A                  \
  60+ 932E CB 3F                                srl     a                           ; LSR A                  \ so X has the value t * 32 where t = A / Q, which is
  61+ 9330 21 57 93                             ld      hl,ACT                      ; TAX                    \ what we need to look up values in the ACT table
  62+ 9333 ED 31                                add     hl,a                        ; LDA ACT,X              \ Fetch ACT+X from the ACT table into A, so now:
  63+ 9335 7E                                   ld      a,(hl)                      ;                        \   A = value in ACT + X = value in ACT + (32 * A / Q)= arctan(A / Q)
  64+ 9336 C9                                   ret                                 ; RTS                    \ Return from the subroutine
  65+ 9337
  66+ 9337              ;;;arctan:										; .ARCTAN	\ -> &2A3C  \ A=TAN-1(P/Q) \ A=arctan (P/Q)  called from block E
  67+ 9337              ;;;		ld		a,(varP)					; a = var P
  68+ 9337              ;;;		ld		hl,varQ
  69+ 9337              ;;;		xor		(hl)						; a = var p XOR varQ
  70+ 9337              ;;;		ld		a,(varT1)					; \ T1	 \ quadrant info
  71+ 9337              ;;;		ld		c,a							; c = copy of T1
  72+ 9337              ;;;		ld		a,(hl)						; Q
  73+ 9337              ;;;		cp		0
  74+ 9337              ;;;		jr		z,.AR2						;  Q=0 so set angle to 63, pi/2
  75+ 9337              ;;;		ld		(varQ),a					; Q move to reg B?
  76+ 9337              ;;;		ld		d,a							; copy to reg d
  77+ 9337              ;;;		sla		a							; drop sign
  78+ 9337              ;;;		ld		a,(varP)					; P
  79+ 9337              ;;;		ld		e,a							; copy to reg e
  80+ 9337              ;;;		sla		a							; drop sign
  81+ 9337              ;;;		cp		d							; compare with b (unsigned varQ * 2)
  82+ 9337              ;;;		jr		nc, .ars1					; if q >  p then adjust  swop A and Q as A >= Q
  83+ 9337              ;;;		call	ars1						; \ ARS1 \ get Angle for A*32/Q from table.
  84+ 9337              ;;;		scf									; set carry flag
  85+ 9337              ;;;.ar4:										; sub o.k
  86+ 9337              ;;;		bit 	7,c							; is T1 (also in c) negative?
  87+ 9337              ;;;		jr		nz,.ar3						;  -ve quadrant
  88+ 9337              ;;;		ret
  89+ 9337              ;;;.ar1:										; swop A and Q entering here d = q and e = P
  90+ 9337              ;;;		ld		a,d							; a = varQ
  91+ 9337              ;;;		ld		d,e							; varQ = varP
  92+ 9337              ;;;		ld		e,a							; swap D and E around
  93+ 9337              ;;;		ld		(varP),a					; write to actual variables
  94+ 9337              ;;;		ld		a,d
  95+ 9337              ;;;		ld		(varQ),a					; write to actual variables
  96+ 9337              ;;;		call	.ars1
  97+ 9337              ;;;		ld		(varT),b
  98+ 9337              ;;;		ld		b,a							; B = T = angle
  99+ 9337              ;;;		ld		a,64						; next range of angle, pi/4 to pi/2
 100+ 9337              ;;;		sub		a,b							; a = 64 - T (or b)
 101+ 9337              ;;;		jr		nc,.ar4						;  sub o.k
 102+ 9337              ;;;.ar2:										; .AR2	\ set angle to 90 degrees
 103+ 9337              ;;;		ld 		a,&3F						;  #63
 104+ 9337              ;;;		ret
 105+ 9337              ;;;.ar3:										;.AR3	\ -ve quadrant
 106+ 9337              ;;;		ld		b,a							; b = T	= \ angle
 107+ 9337              ;;;		ld		a,ConstPi					; a = Pi
 108+ 9337              ;;;		sub		b,a							; A = 128-T, so now covering range pi/2 to pi correctly
 109+ 9337              ;;;		ret
 110+ 9337              ;;;.ars1:										; .ARS1	\ -> &2A75  \ get Angle for A*32/Q from table.
 111+ 9337              ;;;		call	RequAmul256divQ				;  LL28 \ BFRDIV R=A*256/Q
 112+ 9337              ;;;		ld		a,(regA)
 113+ 9337              ;;;		srl		a
 114+ 9337              ;;;		srl		a
 115+ 9337              ;;;		srl		a							;  31 max.
 116+ 9337              ;;;		ld		hl, ArcTanTable				; root of index into table at end of words data
 117+ 9337              ;;;		add		hl,a						; now at real data
 118+ 9337              ;;;		ld		a,(hl)						; a =  ACT[a]
 119+ 9337              ;;;.arsr:										; rts used by laser lines below (will not in later code)
 120+ 9337              ;;;		ret
 121+ 9337
 122+ 9337
 123+ 9337
# file closed: ./Maths/asm_arctan.asm
 635  9337                  INCLUDE "./Maths/SineTable.asm"
# file opened: ./Maths/SineTable.asm
   1+ 9337              ;; PRINT "SIN TABLE"
   2+ 9337              ;; FOR I% =  0 TO  31
   3+ 9337              ;; N = ABS(SIN((I%/64)*2*PI))
   4+ 9337              ;; IF N >= 1 THEN B% = 255  ELSE B% = INT(256 * N + 0.5)
   5+ 9337              ;; PRINT B%
   6+ 9337              ;; NEXT I%
   7+ 9337
   8+ 9337
   9+ 9337 00 19 32 4A  SNE:            DB 000, 025, 050, 074, 098, 121, 142, 162
   9+ 933B 62 79 8E A2
  10+ 933F B5 C6 D5 E2                  DB 181, 198, 213, 226, 237, 245, 251, 255
  10+ 9343 ED F5 FB FF
  11+ 9347 FF FF FB F5                  DB 255, 255, 251, 245, 237, 226, 213, 198
  11+ 934B ED E2 D5 C6
  12+ 934F B5 A2 8E 79                  DB 181, 162, 142, 121, 098, 074, 050, 025
  12+ 9353 62 4A 32 19
# file closed: ./Maths/SineTable.asm
 636  9357                  INCLUDE "./Maths/ArcTanTable.asm"
# file opened: ./Maths/ArcTanTable.asm
   1+ 9357              ;PRINT "ARCTAN TABLE"
   2+ 9357              ;FOR I% = 0 TO 31
   3+ 9357              ;    PRINT INT((128/PI) * ATN(I%/32)+0.5)
   4+ 9357              ;NEXT I%
   5+ 9357
   6+ 9357 00 01 03 04  ACT:            DB 000, 001, 003, 004, 005, 006, 008, 009
   6+ 935B 05 06 08 09
   7+ 935F 0A 0B 0C 0D                  DB 010, 011, 012, 013, 015, 016, 017, 018
   7+ 9363 0F 10 11 12
   8+ 9367 13 14 15 16                  DB 019, 020, 021, 022, 023, 024, 025, 025
   8+ 936B 17 18 19 19
   9+ 936F 1A 1B 1C 1D                  DB 026, 027, 028, 029, 030, 031, 031, 031
   9+ 9373 1E 1F 1F 1F
  10+ 9377
# file closed: ./Maths/ArcTanTable.asm
 637  9377                  INCLUDE "./Maths/negate16.asm"
# file opened: ./Maths/negate16.asm
   1+ 9377              ;;----------------------------------------------------------------------------------------------------------------------
   2+ 9377              ;; 16-bit negate
   3+ 9377                      ; Input:
   4+ 9377                      ;       HL = value
   5+ 9377                      ; Output:
   6+ 9377                      ;       HL = -value
   7+ 9377                      ; Destroys:
   8+ 9377                      ;       AF
   9+ 9377                      ;
  10+ 9377              negate16:
  11+ 9377 AF           negate16hl:         xor 	a
  12+ 9378 95                               sub 	l
  13+ 9379 6F                               ld 		l,a
  14+ 937A 9F                               sbc 	a,a
  15+ 937B 94                               sub 	h
  16+ 937C 67                               ld 		h,a
  17+ 937D C9                               ret
  18+ 937E
  19+ 937E AF           negate16de:         xor 	a
  20+ 937F 93                               sub 	e
  21+ 9380 5F                               ld 		e,a
  22+ 9381 9F                               sbc 	a,a
  23+ 9382 92                               sub 	d
  24+ 9383 57                               ld 		d,a
  25+ 9384 C9                               ret
  26+ 9385
  27+ 9385 AF           negate16bc:         xor 	a
  28+ 9386 91                               sub 	c
  29+ 9387 4F                               ld 		c,a
  30+ 9388 9F                               sbc 	a,a
  31+ 9389 90                               sub 	b
  32+ 938A 47                               ld 		b,a
  33+ 938B C9                               ret
  34+ 938C
# file closed: ./Maths/negate16.asm
 638  938C                  INCLUDE "./Maths/asm_divide.asm"
# file opened: ./Maths/asm_divide.asm
   1+ 938C              ;   K(3 2 1 0)           The result of the division
   2+ 938C              ;   X                    X is preserved
   3+ 938C
   4+ 938C              ; Calculate K(3 2 1 0) = (A P+1 P) / (z_sign z_hi z_lo) where zsign hi lo is in DE with zsign leading hi
   5+ 938C 00 00 00 00  varQRS                 DS      4
   6+ 9390 00 00 00     varAPP                  DS     3
   7+ 9393
   8+ 9393                                  DISPLAY "TODO:  neds rewrite of whoel DIDV3B2"
   9+ 9393              ;; NEEDS REWRITE TODO OF WHOLE DIVD3B2
  10+ 9393              ;; NEEDS REWRITE TODO
  11+ 9393
  12+ 9393              ; b = varR, c= varQ
  13+ 9393              Requ256mulAdivQ_6502:
  14+ 9393 CB 27        .LL31_6502:             sla     a                       ; ASL A                   \ Shift A to the left
  15+ 9395 DA AA 93                             jp      c,.LL29_6502             ; BCS LL29               \ If bit 7 of A was set, then jump straight to the subtraction
  16+ 9398                                      FlipCarryFlag                   ;                          If A < N, then C flag is set.
  16+ 9398 3F          >                        ccf
  17+ 9399                                      JumpIfALTNusng c, .LL31_SKIPSUB_6502 ; CMP Q              \ If A < Q, skip the following subtraction
  17+ 9399 B9          >                        cp      c
  17+ 939A DA 9F 93    >                        jp		c, .LL31_SKIPSUB_6502
  18+ 939D                                                                      ; BCC P%+4
  19+ 939D 91                                   sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  20+ 939E                                      ClearCarryFlag
  20+ 939E B7          >                        or a
  21+ 939F              .LL31_SKIPSUB_6502:     FlipCarryFlag
  21+ 939F 3F          >                        ccf
  22+ 93A0 CB 10                                rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  23+ 93A2 DA 93 93                             jp      c, .LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  24+ 93A5 78                                   ld      a,b
  25+ 93A6 32 B7 F1                             ld      (Rvar),a
  26+ 93A9 C9                                   ret                             ; RTS                    \ R left with remainder of division
  27+ 93AA 91           .LL29_6502:             sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  28+ 93AB                                      SetCarryFlag                    ; SEC                    \ Set the C flag to rotate into the result in R
  28+ 93AB 37          >                        scf
  29+ 93AC CB 10                                rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  30+ 93AE DA 93 93                             jp      c, .LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  31+ 93B1 78                                   ld      a,b                     ; RTS                    \ Return from the subroutine with R containing the
  32+ 93B2 32 B7 F1                             ld      (Rvar),a                ; .
  33+ 93B5 C9                                   ret                             ; .                      \ remainder of the division
  34+ 93B6 3E FF        .LL2_6502:              ld      a,$FF                   ; LDA #255               \ The division is very close to 1, so return the closest
  35+ 93B8 32 72 7F                             ld      (varR),a                ; STA R                  \ possible answer to 256, i.e. R = 255
  36+ 93BB 47                                   ld      b,a                     ; as we are using b as varR
  37+ 93BC                                      SetCarryFlag                    ; we failed so need carry flag set
  37+ 93BC 37          >                        scf
  38+ 93BD C9                                   ret                             ; RTS                    \ Return from the subroutine
  39+ 93BE
  40+ 93BE
  41+ 93BE 00           DIVD3B_SHIFT_REG:       DB      0
  42+ 93BF
  43+ 93BF 7B           DIV3B2DE:               ld      a,e                         ; load QRS with Z sign hi lo
  44+ 93C0 32 8E 93                             ld      (varQRS+2),a
  45+ 93C3 7A                                   ld      a,d
  46+ 93C4 E6 7F                                and     $7F
  47+ 93C6 32 8D 93                             ld      (varQRS+1),a
  48+ 93C9 7A                                   ld      a,d
  49+ 93CA E6 80                                and     $80
  50+ 93CC 32 8C 93                             ld      (varQRS),a
  51+ 93CF C3 D5 93                             jp      DVID3B
  52+ 93D2              ; Calculate K(3 2 1 0) = (A P+1 P) / (z_sign z_hi z_lo) = A P[1 0 ] / (SRQ)
  53+ 93D2              ; We don't use zlo and assume its already loaded into SRQ
  54+ 93D2 32 6B 7E     DVID3B2:                ld      (varP+2),a                  ;STA P+2                \ Set P+2 = A
  55+ 93D5                                                                          ; LDA INWK+6             \ Set Q = z_lo
  56+ 93D5                                                                          ; STA Q
  57+ 93D5                                                                          ; LDA INWK+7             \ Set R = z_hi
  58+ 93D5                                                                          ; STA R
  59+ 93D5                                                                          ; LDA INWK+8             \ Set S = z_sign
  60+ 93D5                                                                          ; STA S
  61+ 93D5              ;  Given the above assignments, we now want to calculate K(3 2 1 0) = P(2 1 0) / (S R Q)
  62+ 93D5 3A 69 7E     DVID3B:                 ld      a,(varP)                    ; LDA P                 \ Make sure P(2 1 0) is at least 1
  63+ 93D8 F6 01                                or      1                           ; ORA #1
  64+ 93DA 32 69 7E                             ld      (varP),a                    ; STA P
  65+ 93DD              ;--- t = sign of P2 xor S (i.e. sign of result) ------------;
  66+ 93DD 3A 6B 7E                             ld      a,(varP+2)                  ; LDA P+2                \ Set T to the sign of P+2 * S (i.e. the sign of the
  67+ 93E0 21 73 7F                             ld      hl, varS                    ; EOR S                  \ result) and store it in T
  68+ 93E3 AE                                   xor     (hl)
  69+ 93E4 E6 80                                and     $80                         ; AND #%10000000
  70+ 93E6 32 8D 7F                             ld      (varT),a                    ; STA T
  71+ 93E9              ;--- New bit added to aviod a divde by 0 -------------------;
  72+ 93E9 3A 71 7F     .CheckQRSAtLeast1:      ld      a,(varQ)                    ;
  73+ 93EC 21 72 7F                             ld      hl,varR                     ;
  74+ 93EF B6                                   or      (hl)                        ;
  75+ 93F0 C2 F8 93                             jp      nz,.DVL9Prep                ;
  76+ 93F3 3E 01                                ld      a,1                         ;
  77+ 93F5 32 71 7F                             ld      (varQ),a                    ;
  78+ 93F8              ; A P(1) P(0) = ABS P(2 1 0)
  79+ 93F8 06 00        .DVL9Prep:              ld      b,0                         ; LDY #0                 \ Set Y = 0 to store the scale factor (use b as Y)
  80+ 93FA 3A 6B 7E                             ld      a,(varP+2)                  ; LDA P+2                \ Clear the sign bit of P+2, so the division can be done
  81+ 93FD E6 7F                                and     $7F                         ; AND #%01111111         \ with positive numbers and we'll set the correct sign below, once all the maths is done
  82+ 93FF              ; We now shift (A P+1 P) left until A >= 64, counting the number of shifts in Y. This makes the top part of the division as large as possible, thus retaining as
  83+ 93FF              ; much accuracy as we can.  When we come to return the final result, we shift the result by the number of places in Y, and in the correct direction
  84+ 93FF                                      DISPLAY "TODO DVL9 and DVL6 move P and QRS into registers for faster shift"
  85+ 93FF              ;-- while A < 64 shift A P(1) P(0) -------------------------;
  86+ 93FF FE 40        .DVL9:                  cp      64                          ; CMP #64                \ If A >= 64, jump down to DV14
  87+ 9401 D2 12 94                             jp      nc, .DV14                   ; BCS DV14
  88+ 9404 21 69 7E                             ld      hl,varP                     ; ASL P                  \ Shift (A P+1 P) to the left
  89+ 9407 CB 26                                sla     (hl)
  90+ 9409 23                                   inc     hl                          ; ROL P+1
  91+ 940A CB 16                                rl      (hl)
  92+ 940C CB 17                                rl      a                           ; ROL A
  93+ 940E 04                                   inc     b                           ; INY                    \ Increment the scale factor in Y
  94+ 940F C3 FF 93                             jp      .DVL9                       ; BNE DVL9               \ Loop up to DVL9 (this BNE is effectively a JMP, as Y will never be zero)
  95+ 9412              ; If we get here, A >= 64 and contains the highest byte of the numerator, scaled up by the number of left shifts in Y (b in our code)
  96+ 9412 32 6B 7E     .DV14:                  ld      (varP+2),a                  ; Store A in P+2, so we now have the scaled value of the numerator in P(2 1 0)
  97+ 9415 3A 73 7F                             ld      a,(varS)                    ; LDA S                  \ Set A = |S|
  98+ 9418 E6 7F                                and     $7F                         ; AND #%01111111
  99+ 941A                                      ;nop                                ;  BMI DV9               \ If bit 7 of A is set, jump down to DV9 (which can never happen)
 100+ 941A              ; We now shift (S R Q) left until bit 7 of S is set, reducing Y by the number of shifts. This makes the bottom part of the division as large as possible, thus
 101+ 941A              ; retaining as much accuracy as we can. When we come to return the final result, we shift the result by the total number of places in Y, and in the correct
 102+ 941A              ; direction, to give us the correct result
 103+ 941A              ; We set A to |S| above, so the following actually shifts (A R Q)
 104+ 941A 05           .DVL6:                  dec     b                           ; DEY                    \ Decrement the scale factor in Y (b)
 105+ 941B 21 71 7F                             ld      hl,varQ                     ; ASL Q                  \ Shift (A R Q) to the left
 106+ 941E CB 26                                sla     (hl)                        ; .
 107+ 9420 21 72 7F                             ld      hl,varR                     ; ROL R
 108+ 9423 CB 16                                rl      (hl)                        ; .
 109+ 9425 CB 17                                rl      a                           ; ROL A
 110+ 9427 F2 1A 94                             jp      p,.DVL6                     ; BPL DVL6               \ Loop up to DVL6 to do another shift, until bit 7 of A is set and we can't shift left any further
 111+ 942A              ; We have now shifted both the numerator and denominator left as far as they will go, keeping a tally of the overall scale factor of the various shifts in Y. We
 112+ 942A              ; can now divide just the two highest bytes to get our result
 113+ 942A 32 71 7F     .DV9:                   ld      (varQ),a                    ; STA Q                  \ Set Q = A, the highest byte of the denominator
 114+ 942D 4F                                   ld      c,a                         ; for Requ256mulAdivQ_6502 as it uses c as Q
 115+ 942E 78                                   ld      a,b                         ; preserve shift register in DEVD3B_SHIFT_REG
 116+ 942F 32 BE 93                             ld      (DIVD3B_SHIFT_REG),a
 117+ 9432              ; Note in Requ256mulAdivQ_6502 we use B as R Var for shift register
 118+ 9432 06 FE                                ld      b,254                       ; LDA #254               \ Set R to have bits 1-7 set, so we can pass this to
 119+ 9434 32 72 7F                             ld      (varR),a                    ; STA R                  \ LL31 to act as the bit counter in the division
 120+ 9437 3A 6B 7E                             ld      a,(varP+2)                  ; LDA P+2                \ Set A to the highest byte of the numerator
 121+ 943A CD 93 93                             call    Requ256mulAdivQ_6502        ; JSR LL31               \ Call LL31 to calculate: R = 256 * A / Q which means result is in b
 122+ 943D              ; The result of our division is now in R, so we just need to shift it back by the scale factor in Y
 123+ 943D                                      ZeroA                               ; LDA #0                \ Set K(3 2 1) = 0 to hold the result (we populate K)
 123+ 943D AF          >                        xor a
 124+ 943E 32 85 7F                             ld      (varK+1),a                  ; STA K+1               \ next)
 125+ 9441 32 86 7F                             ld      (varK+2),a                  ; STA K+2
 126+ 9444 32 87 7F                             ld      (varK+3),a                  ; STA K+3
 127+ 9447 3A BE 93                             ld      a,(DIVD3B_SHIFT_REG)        ; TYA                   \ If Y (shift counter in b) is positive, jump to DV12
 128+ 944A B7                                   or      a                           ; .                      we want to check the sign or if its zero
 129+ 944B CA 76 94                             jp      z,.DV13                     ; Optimisation to save a second jump from DV12 to DV13
 130+ 944E F2 81 94                             jp      p,.DV12                     ; BPL DV12
 131+ 9451              ; If we get here then Y is negative, so we need to shift the result R to the left by Y places, and then set the correct sign for the result
 132+ 9451                                      DISPLAY "TODO check oprimisation here for var r  in b"
 133+ 9451 48                                   ld      c,b
 134+ 9452 3A BE 93                             ld      a,(DIVD3B_SHIFT_REG)
 135+ 9455 47                                   ld      b,a
 136+ 9456 79                                   ld      a,c
 137+ 9457                                      ; OPTIM ld      a,(varR)                    ; LDA R                  \ Set A = R
 138+ 9457 CB 27        .DVL8:                  sla     a                           ; ASL A                  \ Shift (K+3 K+2 K+1 A) left
 139+ 9459 21 85 7F                             ld      hl,varK+1                   ; ROL K+1
 140+ 945C CB 16                                rl      (hl)                        ; .
 141+ 945E 23                                   inc     hl                          ; ROL K+2
 142+ 945F CB 16                                rl      (hl)                        ; .
 143+ 9461 23                                   inc     hl                          ; ROL K+3
 144+ 9462 CB 16                                rl      (hl)                        ; .
 145+ 9464 04                                   inc     b                           ; INY                    \ Increment the scale factor in Y
 146+ 9465 C2 57 94                             jp      nz,.DVL8                    ; BNE DVL8               \ Loop back to DVL8 until we have shifted left by Y places
 147+ 9468 32 84 7F                             ld      (varK),a                    ; STA K                  \ Store A in K so the result is now in K(3 2 1 0)
 148+ 946B 3A 87 7F                             ld      a,(varK+3)                  ; LDA K+3                \ Set K+3 to the sign in T, which we set above to the
 149+ 946E 21 8D 7F                             ld      hl,varT                     ; ORA T                  \ correct sign for the result
 150+ 9471 B6                                   or      (hl)                        ; .
 151+ 9472 32 87 7F                             ld      (varK+3),a                  ; STA K+3
 152+ 9475 C9                                   ret                                 ; RTS                    \ Return from the subroutine
 153+ 9476              ; If we get here then Y is zero, so we don't need to shift the result R, we just need to set the correct sign for the result
 154+ 9476 78           .DV13:                  ld      a,b; varR)                  ; LDA R                  \ Store R in K so the result is now in K(3 2 1 0)
 155+ 9477 32 84 7F                             ld      (varK),a                    ; STA K
 156+ 947A 3A 8D 7F                             ld      a,(varT)                    ; LDA T                  \ Set K+3 to the sign in T, which we set above to the
 157+ 947D 32 87 7F                             ld      (varK+3),a                  ; STA K+3                \ correct sign for the result
 158+ 9480 C9                                   ret                                 ; RTS                    \ Return from the subroutine
 159+ 9481              ; if we get here U is positive but still could be zero, now this is handled in DV9
 160+ 9481              .DV12:                  ; nop                               ; BEQ DV13               \ We jumped here having set A to the scale factor in Y, so this jumps up to DV13 if Y = 0
 161+ 9481              ; If we get here then Y is positive and non-zero, so we need to shift the result R to the right by Y places and then set the correct sign for the result. We also
 162+ 9481              ; know that K(3 2 1) will stay 0, as we are shifting the lowest byte to the right, so no set bits will make their way into the top three bytes
 163+ 9481                                      ;ld      a,(varR)                    ; LDA R                  \ Set A = R
 164+ 9481 48                                   ld      c,b
 165+ 9482 3A BE 93                             ld      a,(DIVD3B_SHIFT_REG)
 166+ 9485 47                                   ld      b,a
 167+ 9486 79                                   ld      a,c
 168+ 9487 CB 3F        .DVL10:                 srl     a                           ; LSR A                  \ Shift A right
 169+ 9489 05                                   dec     b                           ; DEY                    \ Decrement the scale factor in Y
 170+ 948A C2 87 94                             jp      nz,.DVL10                   ; BNE DVL10              \ Loop back to DVL10 until we have shifted right by Y places
 171+ 948D 32 84 7F                             ld      (varK),a                    ; STA K                  \ Store the shifted A in K so the result is now in K(3 2 1 0)
 172+ 9490 3A 8D 7F                             ld      a,(varT)                    ; LDA T                  \ Set K+3 to the sign in T, which we set above to the
 173+ 9493 32 87 7F                             ld      (varK+3),a                  ; STA K+3                \ correct sign for the result
 174+ 9496 C9                                   ret                                 ; RTS                    \ Return from the subroutine
 175+ 9497              ;
 176+ 9497              ;   Set flags E to 11111110
 177+ 9497              ;   Loop:   A << 2
 178+ 9497              ;           if carry was 0
 179+ 9497              ;               if a >= D
 180+ 9497              ;                   A = A - D
 181+ 9497              ;                   clear carry (probably irrelevant really)
 182+ 9497              ;           else
 183+ 9497
 184+ 9497              ;               sla flags << bringing in carry of 1
 185+ 9497              ;               if bit 7 of flag was set then loop
 186+ 9497              ;                                        elase a = e and exit
 187+ 9497              ;
 188+ 9497              ; ">BC_Div_DE: BC = BC / DE. HL = remainder fast divide with unrolled loop BC/DE ==> BC, remainder in HL
 189+ 9497              ;
 190+ 9497              ;INPUTS: hl = dividend dbc = divisor
 191+ 9497              ;OUTPUTS: hl/de -> AHL = quotient CDE = remainder, Carryflag set if divide by 0
 192+ 9497
 193+ 9497 57           DVIDT:                  ld      d,a                     ; D = var P+1
 194+ 9498 3A 71 7F                             ld      a,(varQ)
 195+ 949B 4F                                   ld      c,a                     ; C = var Q
 196+ 949C 3A 69 7E                             ld      a,(varP)
 197+ 949F 5F                                   ld      e,a                     ; E = var P
 198+ 94A0                                      ; Need fast exists on ABS values
 199+ 94A0 7A           BAequDEdivC:            ld      a,d                     ; Fast exit is value is 0
 200+ 94A1 B3                                   or      e                       ; .
 201+ 94A2 28 2A                                jr      z,.ResultIsZero         ; .
 202+ 94A4 79                                   ld      a,c                     ; Fast exit is divide by 0
 203+ 94A5 A7                                   and     a                       ;
 204+ 94A6 28 29                                jr      z,.ResultIsFFFF         ;
 205+ 94A8 7A           .SavSign:               ld      a,d                     ; preserve sign of result in var T
 206+ 94A9 A9                                   xor     c                       ;
 207+ 94AA E6 80                                and     $80
 208+ 94AC 6F                                   ld      l,a                     ; l = var T
 209+ 94AD 3E 00                                ld      a,0
 210+ 94AF 06 10                                ld      b,16
 211+ 94B1                                      ShiftDELeft1
 211+ 94B1 CB 23       >			   sla e
 211+ 94B3 CB 12       >			   rl  d
 212+ 94B5 CB 21                                sla     c                       ; c = abs c
 213+ 94B7 CB 39                                srl     c
 214+ 94B9 CB 17        .DivideLoop:            rl      a
 215+ 94BB                                      JumpIfALTNusng c, .SkipSubtract
 215+ 94BB B9          >                        cp      c
 215+ 94BC DA C2 94    >                        jp		c, .SkipSubtract
 216+ 94BF                                      ClearCarryFlag
 216+ 94BF B7          >                        or a
 217+ 94C0 99                                   sbc     c
 218+ 94C1                                      ClearCarryFlag
 218+ 94C1 B7          >                        or a
 219+ 94C2 3F           .SkipSubtract:          ccf
 220+ 94C3 CB 13                                rl      e
 221+ 94C5 CB 12                                rl      d
 222+ 94C7 05                                   dec     b
 223+ 94C8 20 EF                                jr      nz,.DivideLoop
 224+ 94CA 7B                                   ld      a,e
 225+ 94CB B5                                   or      l
 226+ 94CC 42                                   ld      b,d
 227+ 94CD C9                                   ret
 228+ 94CE              .ResultIsZero:          ZeroA
 228+ 94CE AF          >                        xor a
 229+ 94CF 47                                   ld      b,a
 230+ 94D0 C9                                   ret
 231+ 94D1 3E FF        .ResultIsFFFF:          ld      a,$FF
 232+ 94D3 47                                   ld      b,a
 233+ 94D4 C9                                   ret
 234+ 94D5
 235+ 94D5 57           DIV96:                  ld      d,a                     ; D = var P+1
 236+ 94D6 3A 71 7F                             ld      a,(varQ)
 237+ 94D9 0E 60                                ld      c,96                    ; C = var Q
 238+ 94DB 3A 69 7E                             ld      a,(varP)
 239+ 94DE 5F                                   ld      e,a                     ; E = var P
 240+ 94DF                                      ; Need fast exists on ABS values
 241+ 94DF 7A           BAequDEdiv96            ld      a,d                     ; Fast exit is value is 0
 242+ 94E0 B3                                   or      e                       ; .
 243+ 94E1 28 26                                jr      z,.ResultIsZero         ; .
 244+ 94E3 7A           .SavSign:               ld      a,d                     ; preserve sign of result in var T
 245+ 94E4 A9                                   xor     c                       ;
 246+ 94E5 E6 80                                and     $80
 247+ 94E7 6F                                   ld      l,a                     ; l = var T
 248+ 94E8 3E 00                                ld      a,0
 249+ 94EA 06 10                                ld      b,16
 250+ 94EC                                      ShiftDELeft1
 250+ 94EC CB 23       >			   sla e
 250+ 94EE CB 12       >			   rl  d
 251+ 94F0 CB 21                                sla     c                       ; c = abs c
 252+ 94F2 CB 39                                srl     c
 253+ 94F4 CB 17        .DivideLoop:            rl      a
 254+ 94F6                                      JumpIfALTNusng c, .SkipSubtract
 254+ 94F6 B9          >                        cp      c
 254+ 94F7 DA FD 94    >                        jp		c, .SkipSubtract
 255+ 94FA                                      ClearCarryFlag
 255+ 94FA B7          >                        or a
 256+ 94FB 99                                   sbc     c
 257+ 94FC                                      ClearCarryFlag
 257+ 94FC B7          >                        or a
 258+ 94FD 3F           .SkipSubtract:          ccf
 259+ 94FE CB 13                                rl      e
 260+ 9500 CB 12                                rl      d
 261+ 9502 05                                   dec     b
 262+ 9503 20 EF                                jr      nz,.DivideLoop
 263+ 9505 7B                                   ld      a,e
 264+ 9506 B5                                   or      l
 265+ 9507 42                                   ld      b,d
 266+ 9508 C9                                   ret
 267+ 9509              .ResultIsZero:          ZeroA
 267+ 9509 AF          >                        xor a
 268+ 950A 47                                   ld      b,a
 269+ 950B C9                                   ret
 270+ 950C
 271+ 950C 14           Div16by24usgn:          inc     d                           ; can we fast retu
 272+ 950D 15                                   dec     d
 273+ 950E 20 13                                jr      nz,.ResultZero
 274+ 9510 50 59                                ld      de,bc                       ; so prep for bc/de
 275+ 9512 44 4D                                ld      bc,hl
 276+ 9514 7A           .div16by16usng:         ld      a,d
 277+ 9515 B3                                   or      e
 278+ 9516 28 10                                jr      z,.DivideByZero
 279+ 9518 14                                   inc     d
 280+ 9519 15                                   dec     d
 281+ 951A CD 6C 96                             call    BC_Div_DE
 282+ 951D                                      ZeroA
 282+ 951D AF          >                        xor a
 283+ 951E EB                                   ex      de,hl                       ; de = remainder (need to fix c after hl = nothing of worth)
 284+ 951F 60 69                                ld      hl,bc                       ; hl = result (a is zero from above)
 285+ 9521 4F                                   ld      c,a                         ; now fix c
 286+ 9522 C9                                   ret
 287+ 9523 AF           .ResultZero:            xor     a                           ; set AHL to 0 as d was 0 so h is zero
 288+ 9524 4F                                   ld      c,a                         ; c = 0
 289+ 9525 67                                   ld      h,a
 290+ 9526 6F                                   ld      l,a
 291+ 9527 C9                                   ret
 292+ 9528 3E FF        .DivideByZero:          ld      a,$FF
 293+ 952A 67                                   ld      h,a
 294+ 952B 6F                                   ld      l,a
 295+ 952C                                      SetCarryFlag
 295+ 952C 37          >                        scf
 296+ 952D C9                                   ret
 297+ 952E
 298+ 952E              ;DIVD4 P-R=A/Qunsg  \P.R = A/Q unsigned called by Hall
 299+ 952E                          IFDEF HLEquAmul256DivD_Used
 300+ 952E ~            HLEquAmul256DivD:       ld		b,8							; counter
 301+ 952E ~                                    sla		a							;
 302+ 952E ~                                    ld		h,a							; r a * 2 we will build result in hl
 303+ 952E ~            .DivideLoop:            rl		a							; a = a * 2
 304+ 952E ~                                    jr      c,.StraightToSubtraction    ; jump on carry to subtraction
 305+ 952E ~                                    cp      d                           ; what was var Q
 306+ 952E ~                                    jr		c,.SkipSubtraction	        ; if a < d skip subtraction, note this will come to skip subtraction with carry the wrong way round
 307+ 952E ~            .StraightToSubtraction: ClearCarryFlag                      ; in 6502 the borrow flag is inverted carry, z80 just uses carry so we need to clear it
 308+ 952E ~                                    sbc     a,d                         ; a = a - q
 309+ 952E ~                                    ClearCarryFlag                      ; set carry so it gets shifted into bit 0 of b. we do this as we have to flip carry due to jr c from earlier cp d
 310+ 952E ~            .SkipSubtraction:       ccf                                 ; we need to do this as 6502 does opposite on carry, i.e. if we jumped direct here then carry would be set in z80
 311+ 952E ~                                    rl      h                           ; roll d left bringing in carry if there was an sbc performed
 312+ 952E ~                                    djnz    .DivideLoop                 ; 8 cycles
 313+ 952E ~            .CalculateRemainder:    cp      d                           ; calulate 256 * a / d if q >= q then answer will not fit in one byte d is still set, a holds remainder to be subtracted
 314+ 952E ~                                    jr      nc, .RemainderTooBig
 315+ 952E ~                                    ClearCarryFlag                      ; remove carry as the previous cp will have set it and mess up the sla in the remainder loop
 316+ 952E ~            .InitRemainderLoop:     ld      b,%11111110                 ; loop for bits 1 to 7
 317+ 952E ~                                    ld      l,b                         ; and set l to capture result bits (R)
 318+ 952E ~            .RemainderLoop:         sla     a                           ; shift a left
 319+ 952E ~                                    jr      c, .RemainderSubtraction    ; if there was a carry go to subtraction
 320+ 952E ~                                    cp      d                           ; if a < d then skip subtraction
 321+ 952E ~                                    jr      c,.RemainderSkipSubtract    ; .
 322+ 952E ~                                    sbc     d                           ; a > q so a = a - q, carry will be clear here
 323+ 952E ~            .RemainderSkipSubtract: ccf                                 ; as the jr used z80 we need to flip the carry to behave like 6502
 324+ 952E ~                                    rl      l                           ; rotate counter to the left
 325+ 952E ~                                    jr      c, .RemainderLoop           ; if there was a bit pushed to carry then loop
 326+ 952E ~                                    ret
 327+ 952E ~            .RemainderSubtraction:  sbc     d                           ; as the carry came from an sla we want to retain it
 328+ 952E ~                                    SetCarryFlag                        ; roll in a carry bit to result
 329+ 952E ~                                    rl      l                           ;
 330+ 952E ~                                    jr      c, .RemainderLoop           ; and loop if there was a carry bit that came out
 331+ 952E ~                                    ret
 332+ 952E ~            .RemainderTooBig:       ld      l,$FF                       ; now hl = result
 333+ 952E ~                                    ret
 334+ 952E                          ENDIF
 335+ 952E
 336+ 952E BA           AEquAmul256DivD:        cp      d
 337+ 952F 28 1D                                jr      z,.BothSame
 338+ 9531 30 1E                                jr      nc,.DgtA
 339+ 9533 1E FE                                ld      e,%11111110                 ; Set R to have bits 1-7 set, so we can rotate through 7
 340+ 9535 CB 27        .DivideLoop:            sla     a
 341+ 9537 38 0D                                jr      c,.LL29
 342+ 9539                                      JumpIfALTNusng  d, .SkipSub         ; will jump if carry set, so we need to reset on the rol
 342+ 9539 BA          >                        cp      d
 342+ 953A DA 3F 95    >                        jp		c, .SkipSub
 343+ 953D 92                                   sub     d
 344+ 953E                                      ClearCarryFlag                      ; reset clarry as it will be complimented for rotate as 6502 does carry flags inverted
 344+ 953E B7          >                        or a
 345+ 953F              .SkipSub:               FlipCarryFlag                       ; if we did the subtract the carry will be clear so we need to invert to roll in.
 345+ 953F 3F          >                        ccf
 346+ 9540 CB 13                                rl      e
 347+ 9542 38 F1                                jr      c,.DivideLoop
 348+ 9544 7B                                   ld      a,e
 349+ 9545 C9                                   ret
 350+ 9546 92           .LL29:                  sub     d                           ; A >= Q, so set A = A - Q
 351+ 9547                                      SetCarryFlag                        ; Set the C flag to rotate into the result in R
 351+ 9547 37          >                        scf
 352+ 9548 CB 13                                rl      e                           ; rotate counter e left
 353+ 954A 38 E9                                jr      c,.DivideLoop               ; if a bit was spat off teh end then loop
 354+ 954C 7B                                   ld      a,e                         ; stick result in a
 355+ 954D C9                                   ret
 356+ 954E 3E 01        .BothSame:              ld  a,1
 357+ 9550 C9                                   ret
 358+ 9551 3E FF        .DgtA:                  ld  a,255                           ; Fail with FF as result
 359+ 9553 C9                                   ret
 360+ 9554
 361+ 9554              ; Divide 8-bit values
 362+ 9554              ; In: Divide E by divider C
 363+ 9554              ; Out: A = result, B = rest
 364+ 9554              ;
 365+ 9554              ;;;Div8:
 366+ 9554              ;;;    xor a
 367+ 9554              ;;;    ld b,8
 368+ 9554              ;;;Div8_Loop:
 369+ 9554              ;;;    rl e
 370+ 9554              ;;;    rla
 371+ 9554              ;;;    sub c
 372+ 9554              ;;;    jr nc,Div8_NoAdd
 373+ 9554              ;;;    add a,c
 374+ 9554              ;;;Div8_NoAdd:
 375+ 9554              ;;;    djnz Div8_Loop
 376+ 9554              ;;;    ld b,a0
 377+ 9554              ;;;    ld a,e
 378+ 9554              ;;;    rla
 379+ 9554              ;;;    cpl
 380+ 9554              ;;;    ret
 381+ 9554
 382+ 9554              ;;Inputs: DE is the numerator, BC is the divisor
 383+ 9554              ;;Outputs: DE is the result
 384+ 9554              ;;         A is a copy of E
 385+ 9554              ;;         HL is the remainder
 386+ 9554              ;;         BC is not changed
 387+ 9554              ;; so DE = DE /BC
 388+ 9554              ;140 bytes
 389+ 9554              ;145cc
 390+ 9554
 391+ 9554              MacroDEDivBC:       MACRO
 392+ 9554 ~                                rla
 393+ 9554 ~                                adc     hl,hl
 394+ 9554 ~                                sbc     hl,bc
 395+ 9554 ~                                jr      nc,$+3
 396+ 9554 ~                                add     hl,bc
 397+ 9554                                  ENDM
 398+ 9554
 399+ 9554 AF           DEequDEDivBC:       xor a
 400+ 9555 ED 62                            sbc hl,hl
 401+ 9557 7A                               ld a,d
 402+ 9558                                  MacroDEDivBC
 402+ 9558 17          >                    rla
 402+ 9559 ED 6A       >                    adc     hl,hl
 402+ 955B ED 42       >                    sbc     hl,bc
 402+ 955D 30 01       >                    jr      nc,$+3
 402+ 955F 09          >                    add     hl,bc
 403+ 9560                                  MacroDEDivBC
 403+ 9560 17          >                    rla
 403+ 9561 ED 6A       >                    adc     hl,hl
 403+ 9563 ED 42       >                    sbc     hl,bc
 403+ 9565 30 01       >                    jr      nc,$+3
 403+ 9567 09          >                    add     hl,bc
 404+ 9568                                  MacroDEDivBC
 404+ 9568 17          >                    rla
 404+ 9569 ED 6A       >                    adc     hl,hl
 404+ 956B ED 42       >                    sbc     hl,bc
 404+ 956D 30 01       >                    jr      nc,$+3
 404+ 956F 09          >                    add     hl,bc
 405+ 9570                                  MacroDEDivBC
 405+ 9570 17          >                    rla
 405+ 9571 ED 6A       >                    adc     hl,hl
 405+ 9573 ED 42       >                    sbc     hl,bc
 405+ 9575 30 01       >                    jr      nc,$+3
 405+ 9577 09          >                    add     hl,bc
 406+ 9578                                  MacroDEDivBC
 406+ 9578 17          >                    rla
 406+ 9579 ED 6A       >                    adc     hl,hl
 406+ 957B ED 42       >                    sbc     hl,bc
 406+ 957D 30 01       >                    jr      nc,$+3
 406+ 957F 09          >                    add     hl,bc
 407+ 9580                                  MacroDEDivBC
 407+ 9580 17          >                    rla
 407+ 9581 ED 6A       >                    adc     hl,hl
 407+ 9583 ED 42       >                    sbc     hl,bc
 407+ 9585 30 01       >                    jr      nc,$+3
 407+ 9587 09          >                    add     hl,bc
 408+ 9588                                  MacroDEDivBC
 408+ 9588 17          >                    rla
 408+ 9589 ED 6A       >                    adc     hl,hl
 408+ 958B ED 42       >                    sbc     hl,bc
 408+ 958D 30 01       >                    jr      nc,$+3
 408+ 958F 09          >                    add     hl,bc
 409+ 9590                                  MacroDEDivBC
 409+ 9590 17          >                    rla
 409+ 9591 ED 6A       >                    adc     hl,hl
 409+ 9593 ED 42       >                    sbc     hl,bc
 409+ 9595 30 01       >                    jr      nc,$+3
 409+ 9597 09          >                    add     hl,bc
 410+ 9598 17                               rla
 411+ 9599 2F                               cpl
 412+ 959A 57                               ld d,a
 413+ 959B
 414+ 959B 7B                               ld a,e
 415+ 959C                                  MacroDEDivBC
 415+ 959C 17          >                    rla
 415+ 959D ED 6A       >                    adc     hl,hl
 415+ 959F ED 42       >                    sbc     hl,bc
 415+ 95A1 30 01       >                    jr      nc,$+3
 415+ 95A3 09          >                    add     hl,bc
 416+ 95A4                                  MacroDEDivBC
 416+ 95A4 17          >                    rla
 416+ 95A5 ED 6A       >                    adc     hl,hl
 416+ 95A7 ED 42       >                    sbc     hl,bc
 416+ 95A9 30 01       >                    jr      nc,$+3
 416+ 95AB 09          >                    add     hl,bc
 417+ 95AC                                  MacroDEDivBC
 417+ 95AC 17          >                    rla
 417+ 95AD ED 6A       >                    adc     hl,hl
 417+ 95AF ED 42       >                    sbc     hl,bc
 417+ 95B1 30 01       >                    jr      nc,$+3
 417+ 95B3 09          >                    add     hl,bc
 418+ 95B4                                  MacroDEDivBC
 418+ 95B4 17          >                    rla
 418+ 95B5 ED 6A       >                    adc     hl,hl
 418+ 95B7 ED 42       >                    sbc     hl,bc
 418+ 95B9 30 01       >                    jr      nc,$+3
 418+ 95BB 09          >                    add     hl,bc
 419+ 95BC                                  MacroDEDivBC
 419+ 95BC 17          >                    rla
 419+ 95BD ED 6A       >                    adc     hl,hl
 419+ 95BF ED 42       >                    sbc     hl,bc
 419+ 95C1 30 01       >                    jr      nc,$+3
 419+ 95C3 09          >                    add     hl,bc
 420+ 95C4                                  MacroDEDivBC
 420+ 95C4 17          >                    rla
 420+ 95C5 ED 6A       >                    adc     hl,hl
 420+ 95C7 ED 42       >                    sbc     hl,bc
 420+ 95C9 30 01       >                    jr      nc,$+3
 420+ 95CB 09          >                    add     hl,bc
 421+ 95CC                                  MacroDEDivBC
 421+ 95CC 17          >                    rla
 421+ 95CD ED 6A       >                    adc     hl,hl
 421+ 95CF ED 42       >                    sbc     hl,bc
 421+ 95D1 30 01       >                    jr      nc,$+3
 421+ 95D3 09          >                    add     hl,bc
 422+ 95D4                                  MacroDEDivBC
 422+ 95D4 17          >                    rla
 422+ 95D5 ED 6A       >                    adc     hl,hl
 422+ 95D7 ED 42       >                    sbc     hl,bc
 422+ 95D9 30 01       >                    jr      nc,$+3
 422+ 95DB 09          >                    add     hl,bc
 423+ 95DC 17                               rla
 424+ 95DD 2F                               cpl
 425+ 95DE 5F                               ld e,a
 426+ 95DF C9                               ret
 427+ 95E0              ;divdide by 16 using undocumented instrunctions
 428+ 95E0              ;Input: BC = Dividend, DE = Divisor, HL = 0
 429+ 95E0              ;Output: BC = Quotient, HL = Remainder
 430+ 95E0              ; Our use
 431+ 95E0              ; BC = A0
 432+ 95E0              ; DE = 0C
 433+ 95E0              ; so BC = a * 256 / C
 434+ 95E0              DIV16Amul256dCUNDOC:    JumpIfAGTENusng	  c,DEV16ATooLarge                                          ; first off if a > c ten return 255
 434+ 95E0 B9          >                        cp     c
 434+ 95E1 D2 0C 96    >                        jp		nc,DEV16ATooLarge
 435+ 95E4 47                                   ld      b,a
 436+ 95E5 59                                   ld      e,c
 437+ 95E6 0E 00                                ld      c,0
 438+ 95E8 16 00                                ld      d,0
 439+ 95EA C3 F7 95                             jp      DIV16UNDOC
 440+ 95ED 47           DIV16Amul256dQUNDOC:    ld      b,a
 441+ 95EE 0E 00                                ld      c,0
 442+ 95F0 21 71 7F                             ld      hl,varQ
 443+ 95F3 7E                                   ld      a,(hl)
 444+ 95F4 16 00                                ld      d,0
 445+ 95F6 5F                                   ld      e,a
 446+ 95F7              DIV16BCDivDEUNDOC:
 447+ 95F7 21 00 00     DIV16UNDOC:             ld      hl,0
 448+ 95FA 78                                   ld      a,b
 449+ 95FB 06 10                                ld      b,16
 450+ 95FD CB 31        DIV16UNDOCLOOP:         sll	c		; unroll 16 times
 451+ 95FF 17                                   rla			; ...
 452+ 9600 ED 6A                                adc	hl,hl		; ...
 453+ 9602 ED 52                                sbc	hl,de		; ...
 454+ 9604 30 02                                jr	nc,DIV16UNDOCSKIP		; ...
 455+ 9606 19                                   add	hl,de		; ...
 456+ 9607 0D                                   dec	c		; ...
 457+ 9608 10 F3        DIV16UNDOCSKIP:         djnz DIV16UNDOCLOOP
 458+ 960A 47                                   ld   b,a
 459+ 960B C9                                   ret
 460+ 960C 01 FF 00     DEV16ATooLarge:         ld     bc,$00FF
 461+ 960F C9                                   ret
 462+ 9610              ; switch to logarithm version
 463+ 9610              ; "> asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
 464+ 9610 06 08        asm_div8:               ld b,8
 465+ 9612 AF                                   xor a
 466+ 9613 CB 21        .div8_loop:	            sla c
 467+ 9615 17                                   rla
 468+ 9616 BA                                   cp d
 469+ 9617 38 02                                jr c,.div8_skip
 469+ 9619
 470+ 9619 0C                                   inc c
 471+ 961A 92                                   sub d
 472+ 961B 10 F6        .div8_skip:	            djnz .div8_loop
 473+ 961D C9                                   ret
 474+ 961E              ; ">asm_div16: HL_Div_C: HL is the numerator,  C is the denominator, output A is the remainder, B is 0, C,DE is not changedHL is the quotient"
 475+ 961E 06 10        asm_div16:              ld b,16
 476+ 9620 AF                                   xor a
 477+ 9621 CB 25        div16_loop:	            sla l
 478+ 9623 CB 14                                rl	h
 479+ 9625              ;    add hl,hl
 480+ 9625 17                                   rla
 481+ 9626 B9                                   cp c
 482+ 9627 38 02                                jr c,div16_skip
 483+ 9629 2C                                   inc l
 484+ 962A 91                                   sub c
 485+ 962B 10 F4        div16_skip:		        djnz div16_loop
 486+ 962D C9                                   ret
 487+ 962E              ;
 488+ 962E              ; Divide 16-bit values (with 16-bit result)
 489+ 962E              ; In: Divide BC by divider DE
 490+ 962E              ; Out: BC = result, HL = rest
 491+ 962E              ;
 492+ 962E              HLDivC_Iteration: 	    MACRO
 493+ 962E ~                                    add	hl,hl		; unroll 16 times
 494+ 962E ~                                    rla				; ...
 495+ 962E ~                                    cp	c			; ...
 496+ 962E ~                                    jr	1F
 497+ 962E ~                                    sub	c			; ...
 498+ 962E ~            1:
 499+ 962E ~                                    inc	l			; ...
 500+ 962E                                      ENDM
 501+ 962E
 502+ 962E              EDivC_Iteration:        MACRO
 503+ 962E ~                                    rl  e
 504+ 962E ~                                    rla
 505+ 962E ~                                    sub c
 506+ 962E ~                                    jr  nc,.Div8_NoAdd
 507+ 962E ~                                    add a,c
 508+ 962E ~            .Div8_NoAdd:
 509+ 962E                                      ENDM
 510+ 962E
 511+ 962E              ; Switch to a logarithm version
 512+ 962E              ; Divide E by divider C Out: A = result, B = rest
 513+ 962E              E_Div_C:                ZeroA
 513+ 962E AF          >                        xor a
 514+ 962F                                      EDivC_Iteration
 514+ 962F CB 13       >                        rl  e
 514+ 9631 17          >                        rla
 514+ 9632 91          >                        sub c
 514+ 9633 30 01       >                        jr  nc,.Div8_NoAdd
 514+ 9635 81          >                        add a,c
 514+ 9636             >.Div8_NoAdd:
 515+ 9636                                      EDivC_Iteration
 515+ 9636 CB 13       >                        rl  e
 515+ 9638 17          >                        rla
 515+ 9639 91          >                        sub c
 515+ 963A 30 01       >                        jr  nc,.Div8_NoAdd
 515+ 963C 81          >                        add a,c
 515+ 963D             >.Div8_NoAdd:
 516+ 963D                                      EDivC_Iteration
 516+ 963D CB 13       >                        rl  e
 516+ 963F 17          >                        rla
 516+ 9640 91          >                        sub c
 516+ 9641 30 01       >                        jr  nc,.Div8_NoAdd
 516+ 9643 81          >                        add a,c
 516+ 9644             >.Div8_NoAdd:
 517+ 9644                                      EDivC_Iteration
 517+ 9644 CB 13       >                        rl  e
 517+ 9646 17          >                        rla
 517+ 9647 91          >                        sub c
 517+ 9648 30 01       >                        jr  nc,.Div8_NoAdd
 517+ 964A 81          >                        add a,c
 517+ 964B             >.Div8_NoAdd:
 518+ 964B                                      EDivC_Iteration
 518+ 964B CB 13       >                        rl  e
 518+ 964D 17          >                        rla
 518+ 964E 91          >                        sub c
 518+ 964F 30 01       >                        jr  nc,.Div8_NoAdd
 518+ 9651 81          >                        add a,c
 518+ 9652             >.Div8_NoAdd:
 519+ 9652                                      EDivC_Iteration
 519+ 9652 CB 13       >                        rl  e
 519+ 9654 17          >                        rla
 519+ 9655 91          >                        sub c
 519+ 9656 30 01       >                        jr  nc,.Div8_NoAdd
 519+ 9658 81          >                        add a,c
 519+ 9659             >.Div8_NoAdd:
 520+ 9659                                      EDivC_Iteration
 520+ 9659 CB 13       >                        rl  e
 520+ 965B 17          >                        rla
 520+ 965C 91          >                        sub c
 520+ 965D 30 01       >                        jr  nc,.Div8_NoAdd
 520+ 965F 81          >                        add a,c
 520+ 9660             >.Div8_NoAdd:
 521+ 9660                                      EDivC_Iteration
 521+ 9660 CB 13       >                        rl  e
 521+ 9662 17          >                        rla
 521+ 9663 91          >                        sub c
 521+ 9664 30 01       >                        jr  nc,.Div8_NoAdd
 521+ 9666 81          >                        add a,c
 521+ 9667             >.Div8_NoAdd:
 522+ 9667 47                                   ld      b,a
 523+ 9668 7B                                   ld      a,e
 524+ 9669 17                                   rla
 525+ 966A 2F                                   cpl
 526+ 966B C9                                   ret
 527+ 966C
 528+ 966C
 529+ 966C              BCDIVDE_Iteration:      MACRO
 530+ 966C ~                                    rla
 531+ 966C ~                                    adc	    hl,hl
 532+ 966C ~                                    add	    hl,de
 533+ 966C ~                                    jr	    c,1F
 534+ 966C ~                                    sbc	    hl,de
 535+ 966C ~            1:
 536+ 966C                                      ENDM
 537+ 966C
 538+ 966C
 539+ 966C              ; ">BC_Div_DE: BC = BC / DE. HL = remainder fast divide with unrolled loop"
 540+ 966C              ;BC/DE ==> BC, remainder in HL
 541+ 966C              ;NOTE: BC/0 returns 0 as the quotient.
 542+ 966C              ;min: 738cc
 543+ 966C              ;max: 898cc
 544+ 966C              ;avg: 818cc
 545+ 966C              ;144 bytes
 546+ 966C AF           BC_Div_DE:              xor a
 547+ 966D 67                                   ld h,a
 548+ 966E 6F                                   ld l,a
 549+ 966F 93                                   sub e
 550+ 9670 5F                                   ld e,a
 551+ 9671 9F                                   sbc a,a
 552+ 9672 92                                   sub d
 553+ 9673 57                                   ld d,a
 554+ 9674 78                                   ld a,b
 555+ 9675                                      BCDIVDE_Iteration
 555+ 9675 17          >                        rla
 555+ 9676 ED 6A       >                        adc	    hl,hl
 555+ 9678 19          >                        add	    hl,de
 555+ 9679 38 02       >                        jr	    c,1F
 555+ 967B ED 52       >                        sbc	    hl,de
 555+ 967D             >1:
 556+ 967D                                      BCDIVDE_Iteration
 556+ 967D 17          >                        rla
 556+ 967E ED 6A       >                        adc	    hl,hl
 556+ 9680 19          >                        add	    hl,de
 556+ 9681 38 02       >                        jr	    c,1F
 556+ 9683 ED 52       >                        sbc	    hl,de
 556+ 9685             >1:
 557+ 9685                                      BCDIVDE_Iteration
 557+ 9685 17          >                        rla
 557+ 9686 ED 6A       >                        adc	    hl,hl
 557+ 9688 19          >                        add	    hl,de
 557+ 9689 38 02       >                        jr	    c,1F
 557+ 968B ED 52       >                        sbc	    hl,de
 557+ 968D             >1:
 558+ 968D                                      BCDIVDE_Iteration
 558+ 968D 17          >                        rla
 558+ 968E ED 6A       >                        adc	    hl,hl
 558+ 9690 19          >                        add	    hl,de
 558+ 9691 38 02       >                        jr	    c,1F
 558+ 9693 ED 52       >                        sbc	    hl,de
 558+ 9695             >1:
 559+ 9695                                      BCDIVDE_Iteration
 559+ 9695 17          >                        rla
 559+ 9696 ED 6A       >                        adc	    hl,hl
 559+ 9698 19          >                        add	    hl,de
 559+ 9699 38 02       >                        jr	    c,1F
 559+ 969B ED 52       >                        sbc	    hl,de
 559+ 969D             >1:
 560+ 969D                                      BCDIVDE_Iteration
 560+ 969D 17          >                        rla
 560+ 969E ED 6A       >                        adc	    hl,hl
 560+ 96A0 19          >                        add	    hl,de
 560+ 96A1 38 02       >                        jr	    c,1F
 560+ 96A3 ED 52       >                        sbc	    hl,de
 560+ 96A5             >1:
 561+ 96A5                                      BCDIVDE_Iteration
 561+ 96A5 17          >                        rla
 561+ 96A6 ED 6A       >                        adc	    hl,hl
 561+ 96A8 19          >                        add	    hl,de
 561+ 96A9 38 02       >                        jr	    c,1F
 561+ 96AB ED 52       >                        sbc	    hl,de
 561+ 96AD             >1:
 562+ 96AD                                      BCDIVDE_Iteration
 562+ 96AD 17          >                        rla
 562+ 96AE ED 6A       >                        adc	    hl,hl
 562+ 96B0 19          >                        add	    hl,de
 562+ 96B1 38 02       >                        jr	    c,1F
 562+ 96B3 ED 52       >                        sbc	    hl,de
 562+ 96B5             >1:
 563+ 96B5 17                                   rla
 564+ 96B6 47                                   ld b,a
 565+ 96B7 79                                   ld a,c
 566+ 96B8                                      BCDIVDE_Iteration
 566+ 96B8 17          >                        rla
 566+ 96B9 ED 6A       >                        adc	    hl,hl
 566+ 96BB 19          >                        add	    hl,de
 566+ 96BC 38 02       >                        jr	    c,1F
 566+ 96BE ED 52       >                        sbc	    hl,de
 566+ 96C0             >1:
 567+ 96C0                                      BCDIVDE_Iteration
 567+ 96C0 17          >                        rla
 567+ 96C1 ED 6A       >                        adc	    hl,hl
 567+ 96C3 19          >                        add	    hl,de
 567+ 96C4 38 02       >                        jr	    c,1F
 567+ 96C6 ED 52       >                        sbc	    hl,de
 567+ 96C8             >1:
 568+ 96C8                                      BCDIVDE_Iteration
 568+ 96C8 17          >                        rla
 568+ 96C9 ED 6A       >                        adc	    hl,hl
 568+ 96CB 19          >                        add	    hl,de
 568+ 96CC 38 02       >                        jr	    c,1F
 568+ 96CE ED 52       >                        sbc	    hl,de
 568+ 96D0             >1:
 569+ 96D0                                      BCDIVDE_Iteration
 569+ 96D0 17          >                        rla
 569+ 96D1 ED 6A       >                        adc	    hl,hl
 569+ 96D3 19          >                        add	    hl,de
 569+ 96D4 38 02       >                        jr	    c,1F
 569+ 96D6 ED 52       >                        sbc	    hl,de
 569+ 96D8             >1:
 570+ 96D8                                      BCDIVDE_Iteration
 570+ 96D8 17          >                        rla
 570+ 96D9 ED 6A       >                        adc	    hl,hl
 570+ 96DB 19          >                        add	    hl,de
 570+ 96DC 38 02       >                        jr	    c,1F
 570+ 96DE ED 52       >                        sbc	    hl,de
 570+ 96E0             >1:
 571+ 96E0                                      BCDIVDE_Iteration
 571+ 96E0 17          >                        rla
 571+ 96E1 ED 6A       >                        adc	    hl,hl
 571+ 96E3 19          >                        add	    hl,de
 571+ 96E4 38 02       >                        jr	    c,1F
 571+ 96E6 ED 52       >                        sbc	    hl,de
 571+ 96E8             >1:
 572+ 96E8                                      BCDIVDE_Iteration
 572+ 96E8 17          >                        rla
 572+ 96E9 ED 6A       >                        adc	    hl,hl
 572+ 96EB 19          >                        add	    hl,de
 572+ 96EC 38 02       >                        jr	    c,1F
 572+ 96EE ED 52       >                        sbc	    hl,de
 572+ 96F0             >1:
 573+ 96F0                                      BCDIVDE_Iteration
 573+ 96F0 17          >                        rla
 573+ 96F1 ED 6A       >                        adc	    hl,hl
 573+ 96F3 19          >                        add	    hl,de
 573+ 96F4 38 02       >                        jr	    c,1F
 573+ 96F6 ED 52       >                        sbc	    hl,de
 573+ 96F8             >1:
 574+ 96F8 17                                   rla
 575+ 96F9 4F                                   ld c,a
 576+ 96FA C9                                   ret
 577+ 96FB              ; BC = BC / DE
 578+ 96FB              ; HL = BC % DE
 579+ 96FB              ; if HL > 0 BC -= 1
 580+ 96FB 7A           Floor_DivQ:             ld      a,d
 581+ 96FC B3                                   or      e
 582+ 96FD 28 22                                jr      z, .divideBy0
 583+ 96FF D5                                   push    de
 584+ 9700 CD 6C 96     .DoDivide:              call    BC_Div_DE       ; bc(q0) = bc / de , hl(r0) = bc %de
 585+ 9703 D1                                   pop     de              ; get divisor back to test
 586+ 9704 CB 7A                                bit     7,d             ; if divisor <0 or = 0 goto else branch
 587+ 9706 C2 16 97                             jp      nz,.deLTE0
 588+ 9709 7A                                   ld      a,d
 589+ 970A B3                                   or      e
 590+ 970B CA 16 97                             jp      z,.deLTE0
 591+ 970E CB 7C        .deGT0:                 bit     7,h             ; if remainder >=0 return with no adjustment
 592+ 9710 C8                                   ret     z               ; if remainder was not negative then all done
 593+ 9711 0B                                   dec     bc              ; else q --
 594+ 9712                                      ClearCarryFlag          ;      r += b
 594+ 9712 B7          >                        or a
 595+ 9713 ED 5A                                adc     hl,de           ;      .
 596+ 9715 C9                                   ret
 597+ 9716 CB 7C        .deLTE0:                bit     7,h             ; if remainder <= 0 retun with no adjustment
 598+ 9718 C8                                   ret     z               ; (return if negative)
 599+ 9719 7C                                   ld      a,h
 600+ 971A B5                                   or      l               ; (return if zero)
 601+ 971B C8                                   ret     z
 602+ 971C 0B                                   dec     bc              ; else q --
 603+ 971D                                      ClearCarryFlag          ;      r += b
 603+ 971D B7          >                        or a
 604+ 971E ED 5A                                adc     hl,de           ;      .
 605+ 9720 C9                                   ret
 606+ 9721
 607+ 9721
 608+ 9721 21 00 00     .divideBy0:             ld      hl,0
 609+ 9724 01 01 00                             ld      bc,1
 610+ 9727 C9                                   ret
 611+ 9728
 612+ 9728
 613+ 9728              L_DIV_0_ITERATION:      MACRO
 614+ 9728 ~                                    rl      de              ;left shift dividend + quotient carry
 615+ 9728 ~                                    ex      de,hl
 616+ 9728 ~                                    rl      de              ;left shift remainder + dividend carry
 617+ 9728 ~                                    ex      de,hl
 618+ 9728 ~                                    sub     hl,bc           ;substract divisor from remainder
 619+ 9728 ~                                    jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 620+ 9728 ~                                    add     hl,bc           ;revert subtraction of divisor
 621+ 9728 ~            .skip_revert0:          ccf                     ;complement carry
 622+ 9728 ~                                    rl      de              ;left shift dividend + quotient carry
 623+ 9728 ~                                    ex      de,hl
 624+ 9728 ~                                    rl      de              ;left shift remainder + dividend carry
 625+ 9728 ~                                    ex      de,hl
 626+ 9728 ~                                    sub     hl,bc           ;substract divisor from remainder
 627+ 9728 ~                                    jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 628+ 9728 ~                                    add     hl,bc           ;revert subtraction of divisor
 629+ 9728 ~            .skip_revert1:          ccf                     ;complement carry
 630+ 9728                                      ENDM
 631+ 9728
 632+ 9728              ; HL = DE / BC, DE = DE % BC
 633+ 9728 21 00 00     l_div_0:                ld      hl,0            ;clear remainder
 634+ 972B                                      L_DIV_0_ITERATION
 634+ 972B CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 634+ 972F EB          >                        ex      de,hl
 634+ 9730 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 634+ 9734 EB          >                        ex      de,hl
 634+ 9735 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 634+ 9738 D2 3C 97    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 634+ 973B 09          >                        add     hl,bc           ;revert subtraction of divisor
 634+ 973C 3F          >.skip_revert0:          ccf                     ;complement carry
 634+ 973D CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 634+ 9741 EB          >                        ex      de,hl
 634+ 9742 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 634+ 9746 EB          >                        ex      de,hl
 634+ 9747 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 634+ 974A D2 4E 97    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 634+ 974D 09          >                        add     hl,bc           ;revert subtraction of divisor
 634+ 974E 3F          >.skip_revert1:          ccf                     ;complement carry
 635+ 974F                                      L_DIV_0_ITERATION
 635+ 974F CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 635+ 9753 EB          >                        ex      de,hl
 635+ 9754 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 635+ 9758 EB          >                        ex      de,hl
 635+ 9759 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 635+ 975C D2 60 97    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 635+ 975F 09          >                        add     hl,bc           ;revert subtraction of divisor
 635+ 9760 3F          >.skip_revert0:          ccf                     ;complement carry
 635+ 9761 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 635+ 9765 EB          >                        ex      de,hl
 635+ 9766 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 635+ 976A EB          >                        ex      de,hl
 635+ 976B B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 635+ 976E D2 72 97    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 635+ 9771 09          >                        add     hl,bc           ;revert subtraction of divisor
 635+ 9772 3F          >.skip_revert1:          ccf                     ;complement carry
 636+ 9773                                      L_DIV_0_ITERATION
 636+ 9773 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 636+ 9777 EB          >                        ex      de,hl
 636+ 9778 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 636+ 977C EB          >                        ex      de,hl
 636+ 977D B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 636+ 9780 D2 84 97    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 636+ 9783 09          >                        add     hl,bc           ;revert subtraction of divisor
 636+ 9784 3F          >.skip_revert0:          ccf                     ;complement carry
 636+ 9785 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 636+ 9789 EB          >                        ex      de,hl
 636+ 978A CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 636+ 978E EB          >                        ex      de,hl
 636+ 978F B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 636+ 9792 D2 96 97    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 636+ 9795 09          >                        add     hl,bc           ;revert subtraction of divisor
 636+ 9796 3F          >.skip_revert1:          ccf                     ;complement carry
 637+ 9797                                      L_DIV_0_ITERATION
 637+ 9797 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 637+ 979B EB          >                        ex      de,hl
 637+ 979C CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 637+ 97A0 EB          >                        ex      de,hl
 637+ 97A1 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 637+ 97A4 D2 A8 97    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 637+ 97A7 09          >                        add     hl,bc           ;revert subtraction of divisor
 637+ 97A8 3F          >.skip_revert0:          ccf                     ;complement carry
 637+ 97A9 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 637+ 97AD EB          >                        ex      de,hl
 637+ 97AE CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 637+ 97B2 EB          >                        ex      de,hl
 637+ 97B3 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 637+ 97B6 D2 BA 97    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 637+ 97B9 09          >                        add     hl,bc           ;revert subtraction of divisor
 637+ 97BA 3F          >.skip_revert1:          ccf                     ;complement carry
 638+ 97BB                                      L_DIV_0_ITERATION
 638+ 97BB CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 638+ 97BF EB          >                        ex      de,hl
 638+ 97C0 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 638+ 97C4 EB          >                        ex      de,hl
 638+ 97C5 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 638+ 97C8 D2 CC 97    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 638+ 97CB 09          >                        add     hl,bc           ;revert subtraction of divisor
 638+ 97CC 3F          >.skip_revert0:          ccf                     ;complement carry
 638+ 97CD CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 638+ 97D1 EB          >                        ex      de,hl
 638+ 97D2 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 638+ 97D6 EB          >                        ex      de,hl
 638+ 97D7 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 638+ 97DA D2 DE 97    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 638+ 97DD 09          >                        add     hl,bc           ;revert subtraction of divisor
 638+ 97DE 3F          >.skip_revert1:          ccf                     ;complement carry
 639+ 97DF                                      L_DIV_0_ITERATION
 639+ 97DF CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 639+ 97E3 EB          >                        ex      de,hl
 639+ 97E4 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 639+ 97E8 EB          >                        ex      de,hl
 639+ 97E9 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 639+ 97EC D2 F0 97    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 639+ 97EF 09          >                        add     hl,bc           ;revert subtraction of divisor
 639+ 97F0 3F          >.skip_revert0:          ccf                     ;complement carry
 639+ 97F1 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 639+ 97F5 EB          >                        ex      de,hl
 639+ 97F6 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 639+ 97FA EB          >                        ex      de,hl
 639+ 97FB B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 639+ 97FE D2 02 98    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 639+ 9801 09          >                        add     hl,bc           ;revert subtraction of divisor
 639+ 9802 3F          >.skip_revert1:          ccf                     ;complement carry
 640+ 9803                                      L_DIV_0_ITERATION
 640+ 9803 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 640+ 9807 EB          >                        ex      de,hl
 640+ 9808 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 640+ 980C EB          >                        ex      de,hl
 640+ 980D B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 640+ 9810 D2 14 98    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 640+ 9813 09          >                        add     hl,bc           ;revert subtraction of divisor
 640+ 9814 3F          >.skip_revert0:          ccf                     ;complement carry
 640+ 9815 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 640+ 9819 EB          >                        ex      de,hl
 640+ 981A CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 640+ 981E EB          >                        ex      de,hl
 640+ 981F B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 640+ 9822 D2 26 98    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 640+ 9825 09          >                        add     hl,bc           ;revert subtraction of divisor
 640+ 9826 3F          >.skip_revert1:          ccf                     ;complement carry
 641+ 9827                                      L_DIV_0_ITERATION
 641+ 9827 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 641+ 982B EB          >                        ex      de,hl
 641+ 982C CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 641+ 9830 EB          >                        ex      de,hl
 641+ 9831 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 641+ 9834 D2 38 98    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 641+ 9837 09          >                        add     hl,bc           ;revert subtraction of divisor
 641+ 9838 3F          >.skip_revert0:          ccf                     ;complement carry
 641+ 9839 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 641+ 983D EB          >                        ex      de,hl
 641+ 983E CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 641+ 9842 EB          >                        ex      de,hl
 641+ 9843 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 641+ 9846 D2 4A 98    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 641+ 9849 09          >                        add     hl,bc           ;revert subtraction of divisor
 641+ 984A 3F          >.skip_revert1:          ccf                     ;complement carry
 642+ 984B CB 13 CB 12                          rl      de              ;left shift dividend + quotient carry
 643+ 984F EB                                   ex      de,hl           ;dividend<>remainder
 644+ 9850 C9                                   ret
 645+ 9851
 646+ 9851
 647+ 9851
 648+ 9851 11 FE FF     LLHLdivC:               ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 649+ 9854              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 649+ 9854 CB 25       >			   sla l
 649+ 9856 CB 14       >			   rl  h
 650+ 9858 7C                                   ld      a,h
 651+ 9859 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 652+ 985B                                      JumpIfALTNusng c, .LL132            ; if S <  Q = 256/gradient skip subtractions
 652+ 985B B9          >                        cp      c
 652+ 985C DA 67 98    >                        jp		c, .LL132
 653+ 985F 3F           .LL131:                 ccf                                 ; compliment carry
 654+ 9860 99                                   sbc     a,c                         ; q
 655+ 9861 67                                   ld      h,a                         ; h (s)
 656+ 9862 7D                                   ld      a,l                         ; r
 657+ 9863 DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 658+ 9865 37                                   scf                                 ; set carry for next rolls
 659+ 9866 3F                                   ccf
 660+ 9867              .LL132:                 RollDELeft1                         ; Rotate de bits left
 660+ 9867 CB 13       >               rl  e
 660+ 9869 CB 12       >               rl  d
 661+ 986B 38 E7                                jr      c,.LL130                    ;
 662+ 986D EB                                   ex      de,hl                       ; hl = result
 663+ 986E C9                                   ret
 664+ 986F
 665+ 986F
 666+ 986F AF           div_hl_c:               xor	a
 667+ 9870 06 10                                ld	b, 16
 668+ 9872 29           .loop:                  add	hl, hl
 669+ 9873 17                                   rla
 670+ 9874 38 03                                jr	c, $+5
 671+ 9876 B9                                   cp	c
 672+ 9877 38 02                                jr	c, $+4
 673+ 9879 91                                   sub	c
 674+ 987A 2C                                   inc	l
 675+ 987B 10 F5                                djnz	.loop
 676+ 987D C9                                   ret
 677+ 987E              ;l_div, signed division
 678+ 987E              ; comes in with DE and HL
 679+ 987E              ; HL = DE / HL, DE = DE % HL
 680+ 987E 4A           l_div:                  ld      c,d             ;sign of dividend
 681+ 987F 44                                   ld      b,h             ;sign of divisor
 682+ 9880 C5                                   push    bc              ;save signs
 683+ 9881 4D                                   ld      c,l             ;divisor to bc
 684+ 9882 7A                                   ld      a,d
 685+ 9883 B7                                   or      a
 686+ 9884 F2 8D 98                             jp      p,.NotDENeg
 687+ 9887              .DeNegate:              macronegate16de
 687+ 9887 AF          >					xor 	a
 687+ 9888 93          >                    sub 	e
 687+ 9889 5F          >                    ld 		e,a
 687+ 988A 9F          >                    sbc 	a,a
 687+ 988B 92          >                    sub 	d
 687+ 988C 57          >                    ld 		d,a
 688+ 988D 78           .NotDENeg:              ld      a,b
 689+ 988E B7                                   or      a
 690+ 988F F2 98 98                             jp      p,.NotBCNeg     ; if signs are opposite them flip
 691+ 9892                                      macronegate16bc
 691+ 9892 AF          >					xor 	a
 691+ 9893 91          >                    sub 	c
 691+ 9894 4F          >                    ld 		c,a
 691+ 9895 9F          >                    sbc 	a,a
 691+ 9896 90          >                    sub 	b
 691+ 9897 47          >                    ld 		b,a
 692+ 9898 CD 28 97     .NotBCNeg:              call    l_div_0         ;unsigned HL = DE / BC, DE = DE % BC
 693+ 989B                                      ; C standard requires that the result of division satisfy a = (a/b)*b + a%b emainder takes sign of the dividend
 694+ 989B C1                                   pop     bc              ;restore sign info
 695+ 989C 78                                   ld      a,b
 696+ 989D A9                                   xor     c               ;quotient, sign of dividend^divisor
 697+ 989E F2 A7 98                             jp      p,.NotHLNeg
 698+ 98A1                                      macronegate16hl
 698+ 98A1 AF          >					xor 	a
 698+ 98A2 95          >					sub 	l
 698+ 98A3 6F          >					ld 		l,a
 698+ 98A4 9F          >					sbc 	a,a
 698+ 98A5 94          >					sub 	h
 698+ 98A6 67          >					ld 		h,a
 699+ 98A7 79           .NotHLNeg:              ld      a,c
 700+ 98A8 B7                                   or      a,a             ;remainder, sign of dividend
 701+ 98A9 F0                                   ret     p
 702+ 98AA                                      macronegate16de
 702+ 98AA AF          >					xor 	a
 702+ 98AB 93          >                    sub 	e
 702+ 98AC 5F          >                    ld 		e,a
 702+ 98AD 9F          >                    sbc 	a,a
 702+ 98AE 92          >                    sub 	d
 702+ 98AF 57          >                    ld 		d,a
 703+ 98B0 C9                                   ret
 704+ 98B1
# file closed: ./Maths/asm_divide.asm
 639  98B1                  INCLUDE "./Maths/asm_unitvector.asm"
# file opened: ./Maths/asm_unitvector.asm
   1+ 98B1              asm_tis2:
   2+ 98B1              ; ">TIS2 A = (A / Q * 96) so A = -96 ---- 96  range "
   3+ 98B1              ; ">DOES NOT DO SIGNED YET"
   4+ 98B1 F5           	push af
   5+ 98B2 E6 7F            and SignMask8Bit
   6+ 98B4 57           	ld d,a				;; d = A
   7+ 98B5 3A 71 7F     	ld a,(varQ)
   8+ 98B8 5F           	ld e,a
   9+ 98B9 7A           	ld a,d
  10+ 98BA BB           	cp e
  11+ 98BB 30 11        	jr nc, .tis2_set96	;; jump if a >= Q
  12+ 98BD 1E 60        	ld e, 96
  13+ 98BF ED 30        	mul				; de = d * 96 (also a * 96 )
  14+ 98C1 EB           	ex de,hl
  15+ 98C2 3A 71 7F     	ld a,(varQ)
  16+ 98C5 4F           	ld c,a
  17+ 98C6 CD 1E 96     	call asm_div16
  18+ 98C9 F1           	pop af
  19+ 98CA E6 80        	and $80
  20+ 98CC B5           	or l
  21+ 98CD C9           	ret
  22+ 98CE              .tis2_set96:
  23+ 98CE F1           	pop af
  24+ 98CF E6 80        	and $80
  25+ 98D1 F6 96        	or $96
  26+ 98D3 C9           	ret
  27+ 98D4
  28+ 98D4
  29+ 98D4              asm_unit_vector:
  30+ 98D4              squareregfx:
  31+ 98D4 3A A7 C0     	ld a,(UBnkXScaled)
  32+ 98D7 57           	ld d,a
  33+ 98D8 5F           	ld e,a
  34+ 98D9 ED 30        	mul
  35+ 98DB EB           	ex de,hl
  36+ 98DC              squareregfy:
  37+ 98DC 3A A9 C0     	ld a, (UBnkYScaled)
  38+ 98DF 57           	ld d,a
  39+ 98E0 5F           	ld e,a
  40+ 98E1 ED 30        	mul
  41+ 98E3 19           	add hl,de
  42+ 98E4              squareregfz:
  43+ 98E4 3A AB C0     	ld a, (UBnkZScaled)
  44+ 98E7 57           	ld d,a
  45+ 98E8 5F           	ld e,a
  46+ 98E9 ED 30        	mul
  47+ 98EB 19           	add hl,de
  48+ 98EC EB           	ex de,hl			; de de to number to root
  49+ 98ED              hlequsquareroot:
  50+ 98ED CD 95 92     	call asm_sqrt		; hl = sqrt (fx^2 + fy^2 + fx^2)
  51+ 98F0 E5           	push hl				; save it for work 3 copies
  52+ 98F1 E5           	push hl				; save it for work
  53+ 98F2 E5           	push hl				; save it for work
  54+ 98F3              normfx:
  55+ 98F3 3A A7 C0     	ld a,(UBnkXScaled)
  56+ 98F6 E1           	pop hl				; get copy #1
  57+ 98F7 7D           	ld a,l				; we assume only l had worthwhile data but could spill into h
  58+ 98F8 4F           	ld c,a
  59+ 98F9 CD B1 98     	call asm_tis2
  60+ 98FC 32 A7 C0     	ld (UBnkXScaled),a
  61+ 98FF              normfy:
  62+ 98FF 3A A9 C0     	ld a,(UBnkYScaled)
  63+ 9902 E1           	pop hl				; get copy #2
  64+ 9903 7D           	ld a,l
  65+ 9904 4F           	ld c,a
  66+ 9905 CD B1 98     	call asm_tis2
  67+ 9908 32 A9 C0     	ld (UBnkYScaled),a
  68+ 990B              normfz:
  69+ 990B 3A AB C0     	ld a,(UBnkZScaled)
  70+ 990E E1           	pop hl				; get copy #2
  71+ 990F 7D           	ld a,l
  72+ 9910 4F           	ld c,a
  73+ 9911 CD B1 98     	call asm_tis2
  74+ 9914 32 AB C0     	ld (UBnkZScaled),a
  75+ 9917              asm_unit_vector_end:
  76+ 9917 C9           	ret
  77+ 9918
# file closed: ./Maths/asm_unitvector.asm
 640  9918                  INCLUDE "./Maths/compare16.asm"
# file opened: ./Maths/compare16.asm
   1+ 9918              ; Input:
   2+ 9918              ;       HL = 1st value
   3+ 9918              ;       DE = 2nd value
   4+ 9918              ; Output:
   5+ 9918              ;       CF, ZF = results of comparison:
   6+ 9918              ;
   7+ 9918              ;               CF      ZF      Result
   8+ 9918              ;               -----------------------------------
   9+ 9918              ;               0       0       HL > DE
  10+ 9918              ;               0       1       HL == DE
  11+ 9918              ;               1       0       HL < DE
  12+ 9918              ;               1       1       Impossible
  13+ 9918              ;
  14+ 9918
  15+ 9918
  16+ 9918 E5           CompareBCDESigned:  push    hl
  17+ 9919 A7                               and     a
  18+ 991A 60 69                            ld      hl,bc
  19+ 991C ED 52                            sbc     hl,de
  20+ 991E E1                               pop     hl
  21+ 991F C9                               ret
  22+ 9920
  23+ 9920 E5           CompareDEBCSigned:  push    hl
  24+ 9921 A7                               and     a
  25+ 9922 62 6B                            ld      hl,de
  26+ 9924 ED 42                            sbc     hl,bc
  27+ 9926 E1                               pop     hl
  28+ 9927 C9                               ret
  29+ 9928
  30+ 9928
  31+ 9928              ;### CMPGTE -> test if A>=B
  32+ 9928              ;### Input      HL=A, DE=B if hl=> de no carry else de > hl and set carry
  33+ 9928 7C           CompareHLDESgn:     ld a,h
  34+ 9929 AA                               xor d
  35+ 992A FA 34 99                         jp m, .cmpgte2
  36+ 992D ED 52                            sbc hl,de
  37+ 992F 30 09                            jr nc, .cmpgte3
  38+ 9931 19           .cmpgte1            add hl,de
  39+ 9932                                  SetCarryFlag
  39+ 9932 37          >                        scf
  40+ 9933 C9                               ret
  41+ 9934 CB 7A        .cmpgte2            bit 7,d
  42+ 9936 28 05                            jr z,.cmpgte4
  43+ 9938              .cmpgte5:           ClearCarryFlag
  43+ 9938 B7          >                        or a
  44+ 9939 C9                               ret
  45+ 993A 19           .cmpgte3            add hl,de
  46+ 993B                                  ClearCarryFlag
  46+ 993B B7          >                        or a
  47+ 993C C9                               ret
  48+ 993D              .cmpgte4:           SetCarryFlag
  48+ 993D 37          >                        scf
  49+ 993E C9                               ret
  50+ 993F
  51+ 993F              ; Compares HL and DE sets z flag if same, else nz
  52+ 993F 7C           CompareHLDESame:    ld  a,h
  53+ 9940 BA                               cp  d
  54+ 9941 C0                               ret nz
  55+ 9942 7D                               ld  a,l
  56+ 9943 BB                               cp  e
  57+ 9944 C9                               ret
  58+ 9945
  59+ 9945
  60+ 9945
  61+ 9945 7C           CompareHLBCSgn:     ld a,h
  62+ 9946 A8                               xor b
  63+ 9947 FA 50 99                         jp m, .cmpgte2
  64+ 994A ED 42                            sbc hl,bc
  65+ 994C 30 06                            jr nc, .cmpgte3
  66+ 994E              .cmpgte1            SetCarryFlag
  66+ 994E 37          >                        scf
  67+ 994F C9                               ret
  68+ 9950 CB 78        .cmpgte2            bit 7,b
  69+ 9952 28 FA                            jr z,.cmpgte1
  70+ 9954              .cmpgte3            ClearCarryFlag
  70+ 9954 B7          >                        or a
  71+ 9955 C9                               ret
  72+ 9956
  73+ 9956              CompareHLDESigned:
  74+ 9956 E5           compare16HLDE:      push    hl
  75+ 9957 A7                               and     a
  76+ 9958 ED 52                            sbc     hl,de
  77+ 995A E1                               pop     hl
  78+ 995B C9                               ret
  79+ 995C              CompareHLBCSigned:
  80+ 995C E5           CompareHLBC:        push    hl
  81+ 995D A7                               and     a
  82+ 995E ED 42                            sbc     hl,bc
  83+ 9960 E1                               pop     hl
  84+ 9961 C9                               ret
  85+ 9962
  86+ 9962              ; With compare signed we do ABS comparison
  87+ 9962              ; this is used for view ports as we just want to know if its +/- out side of 90 degrees
  88+ 9962
  89+ 9962 E5 D5        compare16HLDEABS:   push    hl,,de
  90+ 9964 7C                               ld      a,h                                     ; Quick pass see of both the same sign
  91+ 9965 E6 7F                            and     SignMask8Bit
  92+ 9967 67                               ld      h,a
  93+ 9968 7A                               ld      a,d                                     ; Quick pass see of both the same sign
  94+ 9969 E6 7F                            and     SignMask8Bit
  95+ 996B 57                               ld      d,a
  96+ 996C A7                               and     a
  97+ 996D ED 52                            sbc     hl,de
  98+ 996F D1 E1                            pop     hl,,de
  99+ 9971 C9                               ret
 100+ 9972
 101+ 9972
# file closed: ./Maths/compare16.asm
 641  9972                  INCLUDE "./Maths/normalise96.asm"
# file opened: ./Maths/normalise96.asm
   1+ 9972              ; a equal a / d * 96
   2+ 9972
   3+ 9972
   4+ 9972 DD 7E 00     NormaliseIXVector:      ld		a,(ix+0)	        ; XX15+0
   5+ 9975 E6 7F                                and		SignMask8Bit        ; a = unsigned version
   6+ 9977              .n96SQX:	            inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
   6+ 9977 5F          >			ld	e,a
   6+ 9978 57          >			ld  d,a
   6+ 9979 ED 30       >			mul
   7+ 997B 62 6B                                ld		hl,de		 		; h == varR d = varO e= varA
   8+ 997D DD 7E 01     .n96SQY:                ld		a,(ix+1)
   9+ 9980 E6 7F                                and		SignMask8Bit        ; = abs
  10+ 9982                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[y]^2
  10+ 9982 5F          >			ld	e,a
  10+ 9983 57          >			ld  d,a
  10+ 9984 ED 30       >			mul
  11+ 9986 19                                   add		hl,de				; hl = XX15[x]^2 + XX15[y]^2
  12+ 9987 DD 7E 02     .n96SQZ:                ld		a,(ix+2)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
  13+ 998A E6 7F                                and		SignMask8Bit        ; unsigned
  14+ 998C                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[z]^2
  14+ 998C 5F          >			ld	e,a
  14+ 998D 57          >			ld  d,a
  14+ 998E ED 30       >			mul
  15+ 9990 19           .n96SQADD:              add		hl,de				; hl = XX15[x]^2 + XX15[y]^2 + XX15[z]^2
  16+ 9991 EB                                   ex		de,hl				; hl => de ready for square root
  17+ 9992 CD 95 92     .n96SQRT:               call	asm_sqrt			; hl = de = sqrt(XX15[x]^2 + XX15[y]^2 + XX15[z]^2), we just are interested in l which is the new Q
  18+ 9995 DD 7E 00     .n96NORMX:              ld		a,(ix+0)
  19+ 9998 4F                                   ld		c,a                 ; save copy into c
  20+ 9999 E6 7F                                and		SignMask8Bit
  21+ 999B 55                                   ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  22+ 999C CD 8F 9B                             call	AequAdivDmul967Bit	; does not use HL so we can retain it
  23+ 999F 47                                   ld		b,a				    ;++SGN
  24+ 99A0 79                                   ld      a,c
  25+ 99A1 E6 80                                and     SignOnly8Bit			    ;++SGN
  26+ 99A3 B0                                   or		b				    ;++SGN
  27+ 99A4 DD 77 00                             ld		(ix+0),a
  28+ 99A7 DD 7E 01     .n96NORMY:              ld		a,(ix+1)
  29+ 99AA 4F                                   ld		c,a                 ; save copy into c
  30+ 99AB E6 7F                                and		SignMask8Bit
  31+ 99AD 55                                   ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  32+ 99AE CD 8F 9B                             call	AequAdivDmul967Bit	; does not use HL so we can retain it
  33+ 99B1 47                                   ld		b,a				    ;++SGN
  34+ 99B2 79                                   ld      a,c
  35+ 99B3 E6 80                                and     SignOnly8Bit			    ;++SGN
  36+ 99B5 B0                                   or		b				    ;++SGN
  37+ 99B6 DD 77 01                             ld		(ix+1),a
  38+ 99B9 DD 7E 02     .n96NORMZ:              ld		a,(ix+2)
  39+ 99BC 4F                                   ld		c,a                 ; save copy into c
  40+ 99BD E6 7F                                and		SignMask8Bit
  41+ 99BF 55                                   ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  42+ 99C0 CD 8F 9B                             call	AequAdivDmul967Bit	; does not use HL so we can retain it
  43+ 99C3 47                                   ld		b,a				    ;++SGN
  44+ 99C4 79                                   ld      a,c
  45+ 99C5 E6 80                                and     SignOnly8Bit			    ;++SGN
  46+ 99C7 B0                                   or		b				    ;++SGN
  47+ 99C8 DD 77 02                             ld		(ix+2),a
  48+ 99CB C9                                   ret
  49+ 99CC
  50+ 99CC              ; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
  51+ 99CC 3A A7 C0     normaliseXX1596S7:      ld		a,(XX15VecX)	    ; XX15+0
  52+ 99CF DD 67                                ld		ixh,a               ; ixh = signed x component
  53+ 99D1 E6 7F                                and		SignMask8Bit        ; a = unsigned version
  54+ 99D3              .n96SQX:	            inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  54+ 99D3 5F          >			ld	e,a
  54+ 99D4 57          >			ld  d,a
  54+ 99D5 ED 30       >			mul
  55+ 99D7 62                                   ld		h,d					; h == varR d = varO e= varA
  56+ 99D8 6B                                   ld		l,e					; l == varQ  															:: so HL = XX15[x]^2
  57+ 99D9 3A A8 C0     .n96SQY:                ld		a,(XX15VecY)
  58+ 99DC DD 6F                                ld		ixl,a               ; ixl = signed y componet
  59+ 99DE E6 7F                                and		SignMask8Bit                 ; = abs
  60+ 99E0                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[y]^2
  60+ 99E0 5F          >			ld	e,a
  60+ 99E1 57          >			ld  d,a
  60+ 99E2 ED 30       >			mul
  61+ 99E4 19                                   add		hl,de				; hl = XX15[x]^2 + XX15[y]^2
  62+ 99E5 3A A9 C0     .n96SQZ:                ld		a,(XX15VecZ)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
  63+ 99E8 FD 67                                ld		iyh,a               ; iyh = signed
  64+ 99EA E6 7F                                and		SignMask8Bit                 ; unsigned
  65+ 99EC                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[z]^2
  65+ 99EC 5F          >			ld	e,a
  65+ 99ED 57          >			ld  d,a
  65+ 99EE ED 30       >			mul
  66+ 99F0 19           .n96SQADD:              add		hl,de				; hl = XX15[x]^2 + XX15[y]^2 + XX15[z]^2
  67+ 99F1 EB                                   ex		de,hl				; hl => de ready for square root
  68+ 99F2 CD 95 92     .n96SQRT:               call	asm_sqrt			; hl = de = sqrt(XX15[x]^2 + XX15[y]^2 + XX15[z]^2), we just are interested in l which is the new Q
  69+ 99F5 3A A7 C0     .n96NORMX:              ld		a,(XX15VecX)
  70+ 99F8 E6 7F                                and		SignMask8Bit
  71+ 99FA 4F                                   ld		c,a
  72+ 99FB 55                                   ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  73+ 99FC CD 8F 9B                             call	AequAdivDmul967Bit	; does not use HL so we can retain it
  74+ 99FF 47                                   ld		b,a				    ;++SGN
  75+ 9A00 DD 7C                                ld		a,ixh			    ;++SGN
  76+ 9A02 E6 80                                and		$80				    ;++SGN
  77+ 9A04 B0                                   or		b				    ;++SGN
  78+ 9A05 32 A7 C0                             ld		(XX15VecX),a
  79+ 9A08 3A A8 C0     .n96NORMY:              ld		a,(XX15VecY)
  80+ 9A0B E6 7F                                and		SignMask8Bit
  81+ 9A0D 4F                                   ld		c,a
  82+ 9A0E 55                                   ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  83+ 9A0F CD 8F 9B                             call	AequAdivDmul967Bit     	; does not use HL so we can retain it
  84+ 9A12 47                                   ld		b,a				    ;++SGN
  85+ 9A13 DD 7D                                ld		a,ixl			    ;++SGN
  86+ 9A15 E6 80                                and		$80				    ;++SGN
  87+ 9A17 B0                                   or		b				    ;++SGN
  88+ 9A18 32 A8 C0                             ld		(XX15VecY),a
  89+ 9A1B 3A A9 C0     .n96NORMZ:              ld		a,(XX15VecZ)
  90+ 9A1E E6 7F                                and		SignMask8Bit
  91+ 9A20 4F                                   ld		c,a
  92+ 9A21 55                                   ld		d,l				; Q(i.e. l) => D, later we can just pop into de
  93+ 9A22 CD 8F 9B                             call	AequAdivDmul967Bit;AequAdivDmul96	; does not use HL so we can retain it
  94+ 9A25 47                                   ld		b,a				    ;++SGN
  95+ 9A26 FD 7C                                ld		a,iyh			    ;++SGN
  96+ 9A28 E6 80                                and		$80				    ;++SGN
  97+ 9A2A B0                                   or		b				    ;++SGN
  98+ 9A2B 32 A9 C0                             ld		(XX15VecZ),a
  99+ 9A2E C9                                   ret
 100+ 9A2F
 101+ 9A2F              ; Normalise vector
 102+ 9A2F              ; scale Q = Sqrt (X^2 + Y^2 + Z^2)
 103+ 9A2F              ; X = X / Q with 96 = 1 , i.e X = X / Q * 3/8
 104+ 9A2F              ; Y = Y / Q with 96 = 1 , i.e Y = Y / Q * 3/8
 105+ 9A2F              ; Z = Z / Q with 96 = 1 , i.e Z = Z / Q * 3/8
 106+ 9A2F
# file closed: ./Maths/normalise96.asm
 642  9A2F                  INCLUDE "./Maths/binary_to_decimal.asm"
# file opened: ./Maths/binary_to_decimal.asm
   1+ 9A2F              ;Number in hl to decimal ASCII
   2+ 9A2F              ;Thanks to z80 Bits
   3+ 9A2F              ;inputs:	hl = number to ASCII
   4+ 9A2F              ;example: hl=300 outputs '00300'
   5+ 9A2F              ;destroys: af, bc, hl, de used
   6+ 9A2F              DispHLtoDE:
   7+ 9A2F              ; "DispHL, writes HL to DE address"
   8+ 9A2F 01 F0 D8     	ld	bc,-10000
   9+ 9A32 CD 48 9A     	call	Num1
  10+ 9A35 01 18 FC     	ld	bc,-1000
  11+ 9A38 CD 48 9A     	call	Num1
  12+ 9A3B 01 9C FF     	ld	bc,-100
  13+ 9A3E CD 48 9A     	call	Num1
  14+ 9A41 0E F6        	ld	c,-10
  15+ 9A43 CD 48 9A     	call	Num1
  16+ 9A46 0E FF        	ld	c,-1
  17+ 9A48              Num1:
  18+ 9A48 3E 2F        	ld	a,'0'-1
  19+ 9A4A              .Num2:
  20+ 9A4A 3C           	inc	a
  21+ 9A4B 09           	add	hl,bc
  22+ 9A4C 38 FC        	jr	c,.Num2
  23+ 9A4E ED 42        	sbc	hl,bc
  24+ 9A50 12           	ld	(de),a
  25+ 9A51 13           	inc	de
  26+ 9A52 C9           	ret
  27+ 9A53
  28+ 9A53              DispAtoDE:
  29+ 9A53 26 00        	ld h,0
  30+ 9A55 6F           	ld l,a
  31+ 9A56 C3 2F 9A     	jp DispHLtoDE
  32+ 9A59
  33+ 9A59              DispPriceAtoDE:
  34+ 9A59 26 00        	ld h,0
  35+ 9A5B 6F           	ld l,a
  36+ 9A5C 01 9C FF     	ld	bc,-100
  37+ 9A5F CD 6F 9A     	call	.NumLeadBlank1
  38+ 9A62 0E F6        	ld	c,-10
  39+ 9A64 CD 48 9A     	call	Num1
  40+ 9A67 3E 2E        	ld		a,'.'					; we could assume preformat but
  41+ 9A69                                  DISPLAY "TODO:  optimise "
  42+ 9A69 12           	ld		(de),a					; we can optimse that later TODO
  43+ 9A6A 13           	inc		de						; with just an inc De
  44+ 9A6B 0E FF        	ld	c,-1
  45+ 9A6D 18 D9        	jr		Num1
  46+ 9A6F              .NumLeadBlank1:
  47+ 9A6F 3E 2F        	ld	a,'0'-1
  48+ 9A71              .NumLeadBlank2:
  49+ 9A71 3C           	inc	a
  50+ 9A72 09           	add	hl,bc
  51+ 9A73 38 FC        	jr	c,.NumLeadBlank2
  52+ 9A75 FE 30        	cp	'0'
  53+ 9A77 20 02        	jr	nz,.DontBlank
  54+ 9A79              .Blank:
  55+ 9A79 3E 20        	ld	a,' '
  56+ 9A7B              .DontBlank:
  57+ 9A7B ED 42        	sbc	hl,bc
  58+ 9A7D 12           	ld	(de),a
  59+ 9A7E 13           	inc	de
  60+ 9A7F C9           	ret
  61+ 9A80
  62+ 9A80              DispQtyAtoDE:
  63+ 9A80 FE 00        	cp	0
  64+ 9A82 28 23        	jr	z,.NoStock
  65+ 9A84 26 00        	ld h,0
  66+ 9A86 6F           	ld l,a
  67+ 9A87 01 9C FF     	ld	bc,-100
  68+ 9A8A CD 96 9A     	call	.NumLeadBlank1
  69+ 9A8D 0E F6        	ld	c,-10
  70+ 9A8F CD 96 9A     	call	.NumLeadBlank1
  71+ 9A92 0E FF        	ld	c,-1
  72+ 9A94 18 B2        	jr		Num1
  73+ 9A96              .NumLeadBlank1:
  74+ 9A96 3E 2F        	ld	a,'0'-1
  75+ 9A98              .NumLeadBlank2:
  76+ 9A98 3C           	inc	a
  77+ 9A99 09           	add	hl,bc
  78+ 9A9A 38 FC        	jr	c,.NumLeadBlank2
  79+ 9A9C FE 30        	cp	'0'
  80+ 9A9E 20 02        	jr	nz,.DontBlank
  81+ 9AA0              .Blank:
  82+ 9AA0 3E 20        	ld	a,' '
  83+ 9AA2              .DontBlank:
  84+ 9AA2 ED 42        	sbc	hl,bc
  85+ 9AA4 12           	ld	(de),a
  86+ 9AA5 13           	inc	de
  87+ 9AA6 C9           	ret
  88+ 9AA7              .NoStock:
  89+ 9AA7 3E 20        	ld	a,' '
  90+ 9AA9 12           	ld	(de),a
  91+ 9AAA 13           	inc	de
  92+ 9AAB 12           	ld	(de),a
  93+ 9AAC 13           	inc	de
  94+ 9AAD 3E 2D        	ld	a,'-'
  95+ 9AAF 12           	ld	(de),a
  96+ 9AB0 13           	inc de
  97+ 9AB1 C9           	ret
  98+ 9AB2
  99+ 9AB2
 100+ 9AB2              ;### CLCN32 -> Converts 32Bit-Value in ASCII-String (terminated by 0)
 101+ 9AB2              ;### Input      DE,IX=32bit value, IY=destination address
 102+ 9AB2              ;### Output     IY=last char in destination string
 103+ 9AB2              ;### Destroyed AF,BC,DE,HL,IX
 104+ 9AB2 01 00 00 00  clcn32t dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 104+ 9AB6 0A 00 00 00
 104+ 9ABA 64 00 00 00
 104+ 9ABE E8 03 00 00
 104+ 9AC2 10 27 00 00
 105+ 9AC6 A0 86 01 00          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 105+ 9ACA 40 42 0F 00
 105+ 9ACE 80 96 98 00
 105+ 9AD2 00 E1 F5 05
 105+ 9AD6 00 CA 9A 3B
 106+ 9ADA 00 00 00 00  clcn32z ds 4
 107+ 9ADE
 108+ 9ADE              ; As per display but shifts final digit by 1 and puts in "." for 1 decimal place
 109+ 9ADE CD ED 9A     DispDEIXtoIY1DP:        call    DispDEIXtoIY
 110+ 9AE1 FD 7E 00                             ld      a,(IY+0)
 111+ 9AE4 FD 77 01                             ld      (IY+1),a
 112+ 9AE7 3E 2E                                ld      a,"."
 113+ 9AE9 FD 77 00                             ld      (IY+0),a
 114+ 9AEC C9                                   ret
 115+ 9AED
 116+ 9AED DD 22 DA 9A  DispDEIXtoIY:           ld (clcn32z),ix
 117+ 9AF1 ED 53 DC 9A                          ld (clcn32z+2),de
 118+ 9AF5 DD 21 D6 9A                          ld ix,clcn32t+36
 119+ 9AF9 06 09                                ld b,9
 120+ 9AFB 0E 00                                ld c,0
 121+ 9AFD 3E 30        .clcn321:               ld a,'0'
 122+ 9AFF B7                                   or a
 123+ 9B00 DD 5E 00     .clcn322:               ld e,(ix+0)
 124+ 9B03 DD 56 01                             ld d,(ix+1)
 125+ 9B06 2A DA 9A                             ld hl,(clcn32z)
 126+ 9B09 ED 52                                sbc hl,de
 127+ 9B0B 22 DA 9A                             ld (clcn32z),hl
 128+ 9B0E DD 5E 02                             ld e,(ix+2)
 129+ 9B11 DD 56 03                             ld d,(ix+3)
 130+ 9B14 2A DC 9A                             ld hl,(clcn32z+2)
 131+ 9B17 ED 52                                sbc hl,de
 132+ 9B19 22 DC 9A                             ld (clcn32z+2),hl
 133+ 9B1C 38 04                                jr c,.clcn325
 134+ 9B1E 0C                                   inc c
 135+ 9B1F 3C                                   inc a
 136+ 9B20 18 DE                                jr .clcn322
 137+ 9B22 DD 5E 00     .clcn325:               ld e,(ix+0)
 138+ 9B25 DD 56 01                             ld d,(ix+1)
 139+ 9B28 2A DA 9A                             ld hl,(clcn32z)
 140+ 9B2B 19                                   add hl,de
 141+ 9B2C 22 DA 9A                             ld (clcn32z),hl
 142+ 9B2F DD 5E 02                             ld e,(ix+2)
 143+ 9B32 DD 56 03                             ld d,(ix+3)
 144+ 9B35 2A DC 9A                             ld hl,(clcn32z+2)
 145+ 9B38 ED 5A                                adc hl,de
 146+ 9B3A 22 DC 9A                             ld (clcn32z+2),hl
 147+ 9B3D 11 FC FF                             ld de,-4
 148+ 9B40 DD 19                                add ix,de
 149+ 9B42 0C                                   inc c
 150+ 9B43 0D                                   dec c
 151+ 9B44 28 05                                jr z,.clcn323
 152+ 9B46 FD 77 00                             ld (iy+0),a
 153+ 9B49 FD 23                                inc iy
 154+ 9B4B 10 B0        .clcn323:               djnz .clcn321
 155+ 9B4D 3A DA 9A                             ld a,(clcn32z)
 156+ 9B50 C6 30                                add A,'0'
 157+ 9B52 FD 77 00                             ld (iy+0),a
 158+ 9B55 FD 36 01 00                          ld (iy+1),0
 159+ 9B59 C9                                   ret
 160+ 9B5A
# file closed: ./Maths/binary_to_decimal.asm
 643  9B5A                  INCLUDE "./Maths/Utilities/AequAdivQmul96-TIS2.asm"
# file opened: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
   1+ 9B5A              AequAdivQmul96ABS:      JumpIfAGTENusng d, .TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
   1+ 9B5A BA          >                        cp     d
   1+ 9B5B D2 76 9B    >                        jp		nc,.TIS2AccGTEQ
   2+ 9B5E 06 FE                                ld			b,$FE						; division roll (replaced varT)
   3+ 9B60 CB 27        .TIS2RollTLoop:			sla			a
   4+ 9B62                                      JumpIfALTNusng d,.TIS2SkipSub           ; a < d so don;t subtract
   4+ 9B62 BA          >                        cp      d
   4+ 9B63 DA 79 9B    >                        jp		c, .TIS2SkipSub
   5+ 9B66 9A                                   sbc			a,d							; do subtraction with carry
   6+ 9B67 37                                   scf
   7+ 9B68 CB 10                                rl			b							; T rolled left to push bit out the end
   8+ 9B6A 38 F4                                jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
   9+ 9B6C 78           .TIS2SKIPCont:	        ld			a,b							; T
  10+ 9B6D CB 3F                                srl			a							; result / 2
  11+ 9B6F CB 3F                                srl			a							; result / 4
  12+ 9B71 47                                   ld			b,a							; t = t /4
  13+ 9B72 CB 3F                                srl			a							; result / 8
  14+ 9B74 80                                   add			a,b							; result /8 + result /4
  15+ 9B75 C9                                   ret
  16+ 9B76 3E 60        .TIS2AccGTEQ:           ld			a,$60							; unity
  17+ 9B78 C9                                   ret
  18+ 9B79 B7           .TIS2SkipSub:           or			a
  19+ 9B7A CB 10                                rl			b							; T rolled left to push bit out the end
  20+ 9B7C 38 E2                                jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
  21+ 9B7E C3 6C 9B                             jp			.TIS2SKIPCont
  22+ 9B81
  23+ 9B81
  24+ 9B81              ; USES 			A DE BC
  25+ 9B81              ; DOES NOT USE 	HL
  26+ 9B81              TIS2962C:		; two's compliment entry point, exits not 2's compliment
  27+ 9B81 CB 7F        	bit			7,a
  28+ 9B83 28 04        	jr			z,AequAdivQmul96
  29+ 9B85 ED 44        	neg										; revers 2s'c and just set neg bit
  30+ 9B87 CB FF        	set			7,a
  31+ 9B89              ; Note negative numbers are bit 7 set not 2's compliment
  32+ 9B89              AequAdivQmul96:								; TIS296:			; .tis2 A = A /Q *96 (or A = A * 3/8 * Q) Reduce Acc in NORM routine i.e. *96/Q clamps at +- 96
  33+ 9B89              TIS2:
  34+ 9B89 4F           	ld			c,a							; copy of Acc
  35+ 9B8A 3A 71 7F     	ld			a,(varQ)
  36+ 9B8D 57           	ld			d,a							; d = varQ
  37+ 9B8E 79           	ld			a,c							; recover a
  38+ 9B8F              AequAdivDmul967Bit:
  39+ 9B8F 4F               ld          c,a
  40+ 9B90 7A               ld          a,d
  41+ 9B91 CB 27            sla         a
  42+ 9B93 30 10            jr          nc, .OKToDivide
  43+ 9B95              .ScaleDown:
  44+ 9B95 B7               or          a
  45+ 9B96 CB 3A            srl         d
  46+ 9B98
  47+ 9B98 79               ld          a,c
  48+ 9B99 E6 7F            and         SignMask8Bit
  49+ 9B9B CB 3F            srl         a
  50+ 9B9D 47               ld          b,a
  51+ 9B9E 79               ld          a,c
  52+ 9B9F E6 80            and         $80
  53+ 9BA1 B0               or          b
  54+ 9BA2 C3 A6 9B         jp          AequAdivDmul96
  55+ 9BA5              .OKToDivide:
  56+ 9BA5 79               ld          a,c
  57+ 9BA6              AequAdivDmul96:
  58+ 9BA6 4F           	ld			c,a							; copy of Acc as we need the sign, alternate entry point assuming D preloaded, wastes an "ld c,a" but simplifies code
  59+ 9BA7 E6 7F        	and			SignMask8Bit				; ignore sign
  60+ 9BA9              	JumpIfAGTENusng d, .TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
  60+ 9BA9 BA          >                        cp     d
  60+ 9BAA D2 CA 9B    >                        jp		nc,.TIS2AccGTEQ
  61+ 9BAD 06 FE        	ld			b,$FE						; division roll (replaced varT)
  62+ 9BAF              .TIS2RollTLoop:									; .TIL2	; roll T
  63+ 9BAF CB 27        	sla			a
  64+ 9BB1              	JumpIfALTNusng d,.TIS2SkipSub           ; a < d so don;t subtract
  64+ 9BB1 BA          >                        cp      d
  64+ 9BB2 DA D0 9B    >                        jp		c, .TIS2SkipSub
  65+ 9BB5 9A           	sbc			a,d							; do subtraction with carry
  66+ 9BB6 37           	scf                                     ; set carrry to roll into b
  67+ 9BB7 CB 10        	rl			b							; T rolled left to push bit out the end
  68+ 9BB9 38 F4        	jr			c,.TIS2RollTLoop			; if we still have not hit the empty marker continue
  69+ 9BBB              .TIS2SKIPCont:
  70+ 9BBB 78           	ld			a,b							; A = T = 4 / 4
  71+ 9BBC CB 3F        	srl			a							; .
  72+ 9BBE CB 3F        	srl			a							; .
  73+ 9BC0 47           	ld			b,a							; .
  74+ 9BC1 CB 3F        	srl			a							; A = A / 2 (i.e. T /8)
  75+ 9BC3 80           	add			a,b							; A = T/8 + T/4 (3T/8)
  76+ 9BC4 47           	ld			b,a							; b = 3/8*Acc (max = 96)
  77+ 9BC5 79           	ld			a,c							; copy of Acc to look at sign bit
  78+ 9BC6 E6 80        	and			$80							; recover sign only
  79+ 9BC8 B0           	or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
  80+ 9BC9 C9           	ret
  81+ 9BCA              .TIS2AccGTEQ:
  82+ 9BCA              ;TI4:										;\ clean to +/- unity
  83+ 9BCA 79           	ld			a,c
  84+ 9BCB E6 80        	and			$80							; copy of Acc
  85+ 9BCD F6 60        	or			$60							; unity
  86+ 9BCF C9           	ret
  87+ 9BD0              .TIS2SkipSub:
  88+ 9BD0              	ClearCarryFlag                          ; Clear carry as it needs to be empty to roll in 0
  88+ 9BD0 B7          >                        or a
  89+ 9BD1 CB 10        	rl			b							; T rolled left to push bit out the end
  90+ 9BD3 38 DA        	jr			c,.TIS2RollTLoop			; if we still have not hit the empty marker continue
  91+ 9BD5 C3 BB 9B     	jp			.TIS2SKIPCont
  92+ 9BD8
# file closed: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
 644  9BD8                  INCLUDE "./Maths/Utilities/AequAmulQdiv256-FMLTU.asm"
# file opened: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
   1+ 9BD8              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=A*Q/256unsg  Fast multiply"
   2+ 9BD8              fmltu:
   3+ 9BD8 57           AequAmulQdiv256:        ld	d,a
   4+ 9BD9 3A 71 7F                             ld	a,(varQ)
   5+ 9BDC 5F                                   ld	e,a
   6+ 9BDD ED 30                                mul
   7+ 9BDF 7A                                   ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   8+ 9BE0 C9                                   ret
   9+ 9BE1
  10+ 9BE1 5F           AequAmulDdiv256:        ld  e,a
  11+ 9BE2 ED 30                                mul
  12+ 9BE4 7A                                   ld  a,d
  13+ 9BE5 C9                                   ret
  14+ 9BE6
# file closed: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
 645  9BE6                  INCLUDE "./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm"
# file opened: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
   1+ 9BE6              ; "DV42,DV42IYH DE = P.R, c = R"
   2+ 9BE6              DV42IYH:									; as per DV42 but using iyl for Y reg
   3+ 9BE6 21 1D 81     		ld		hl,varDustZ
   4+ 9BE9 FD 7D        		ld		a,iyl
   5+ 9BEB ED 31        		add		hl,a
   6+ 9BED 7E           		ld		a,(hl)
   7+ 9BEE C3 FA 9B     		jp		DV41
   8+ 9BF1              DV42:										; travel step of dust particle front/rear
   9+ 9BF1 21 1D 81     		ld		hl,varDustZ
  10+ 9BF4 3A 44 7E     		ld		a,(regY)
  11+ 9BF7 ED 31        		add		hl,a
  12+ 9BF9 7E           		ld		a,(hl)						; a = SZ[y]
  13+ 9BFA              DV41:										; P.R = speed/ (ZZ/8) dust left/right
  14+ 9BFA 5F           		ld		e,a							; using E as Q var replacement
  15+ 9BFB 3A 6B 7F     		ld		a,(DELTA)					; DELTA \ speed, how far has dust moved based on its z-coord.
  16+ 9BFE              DVID4:										; P-R=A/Qunsg  \P.R = A/Q unsigned called by Hall
  17+ 9BFE 06 08        		ld		b,8							; counter
  18+ 9C00 CB 27        		sla		a							;
  19+ 9C02 57           		ld		d,a							; use d for - p = delta * 2
  20+ 9C03 AF           		xor		a
  21+ 9C04              DVL4:										; counter x loop (b reg)
  22+ 9C04 CB 17        		rl		a							; a = a * 2
  23+ 9C06 38 03        		jr		c,DV8						; jump on carry
  24+ 9C08 BB           		cp		e							; var Q
  25+ 9C09 38 02        		jr		c,DV5						; skip subtraction
  26+ 9C0B              DV8:
  27+ 9C0B 9B           		sbc		a,e							; a = a - q (with carry)
  28+ 9C0C 37           		scf									;  carry gets set
  29+ 9C0D              DV5:										; skipped subtraction
  30+ 9C0D CB 12        		rl		d							; d (P hi)
  31+ 9C0F 10 F3        		djnz	DVL4						; dec b and loop loop X, hi left in P.
  32+ 9C11              .CalcRemainder:								; BFRDIV R=A*256/Q
  33+ 9C11              ; Note we are not going to call LL28+4 but inline code here:
  34+ 9C11 06 FE        		ld		b,$FE						; remainder R for AofQ *256/Q
  35+ 9C13 4F           		ld		c,a							; use c as R var
  36+ 9C14              .RollRemainder:
  37+ 9C14 CB 27        		sla		a
  38+ 9C16 38 11        		jr		c,.Reduce					; if a >> generates carry reduce
  39+ 9C18 B8           		cp		b							; a < q?
  40+ 9C19 30 01        		jr		nc,.DontSBC
  41+ 9C1B              .DoSBC:										; a is < q
  42+ 9C1B 98           		sbc		a,b							; 	a -= q
  43+ 9C1C              .DontSBC:
  44+ 9C1C CB 11        		rl		c							; r << 1
  45+ 9C1E 38 F4        		jr		c, .RollRemainder			; if rol generated a carry, continue
  46+ 9C20 79           		ld		a,c
  47+ 9C21 32 72 7F     		ld		(varR),a					; for backwards compat
  48+ 9C24 7A           		ld		a,d
  49+ 9C25 32 69 7E     		ld		(varP),a
  50+ 9C28 C9           		ret									; R (c) left with remainder
  51+ 9C29              .Reduce:									; a geneated a carry
  52+ 9C29 98           		sbc		a,b							; a = a - (q +1)
  53+ 9C2A 37           		scf									; set carry flag for rl
  54+ 9C2B CB 11        		rl		c							; r << 1 briging in carry
  55+ 9C2D 38 E5        		jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  56+ 9C2F 79           		ld		a,c
  57+ 9C30 32 72 7F     		ld		(varR),a					; for backwards compat
  58+ 9C33 7A           		ld		a,d
  59+ 9C34 32 69 7E     		ld		(varP),a
  60+ 9C37 C9           		ret
  61+ 9C38              .AnswerTooBig:
  62+ 9C38 0E FF        		ld		c,$FF						; arse its too big
  63+ 9C3A 79           		ld		a,c
  64+ 9C3B 32 72 7F     		ld		(varR),a					; for backwards compat
  65+ 9C3E 7A           		ld		a,d
  66+ 9C3F 32 69 7E     		ld		(varP),a
  67+ 9C42 C9           		ret
  68+ 9C43
# file closed: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
 646  9C43              ;    INCLUDE "./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm" Moved to general multiply code
 647  9C43
 648  9C43                  INCLUDE "./Maths/Utilities/APequQmulA-MULT1.asm"
# file opened: ./Maths/Utilities/APequQmulA-MULT1.asm
   1+ 9C43              APequQmulA:
   2+ 9C43              asm_mult1:
   3+ 9C43              ; "ASM_MULT1 (DE) A(hi).P(lo) = Q * A first part of MAD, multiply and add. Visited Quite often. A=hi P = lo also returns result in DE"
   4+ 9C43 FE 00        	cp	0
   5+ 9C45 28 1F        	jr	z,.mul0			; quick exit if its Q * 0
   6+ 9C47 5F           	ld	e,a
   7+ 9C48 3A 71 7F     	ld	a,(varQ)
   8+ 9C4B 57           	ld	d,a
   9+ 9C4C FE 00        	cp	0				; compare a
  10+ 9C4E 28 16        	jr	z,.mul0			; quick exit if its 0 * a
  11+ 9C50 AB           	xor	e				; -- = + +- = - -+ = - ++ = +
  12+ 9C51 E6 80        	and $80				; get the resultant sign and save into b
  13+ 9C53 47           	ld	b,a
  14+ 9C54 7A           	ld	a,d
  15+ 9C55 E6 7F        	and	SignMask8Bit	; now strip off sign bits
  16+ 9C57 57           	ld	d,a
  17+ 9C58 7B           	ld	a,e
  18+ 9C59 E6 7F        	and SignMask8Bit
  19+ 9C5B 5F           	ld	e,a
  20+ 9C5C ED 30        	mul					; zxn de = d * e
  21+ 9C5E 7B           	ld	a,e
  22+ 9C5F 32 69 7E     	ld	(varP),a		; p = lo
  23+ 9C62 7A           	ld	a,d				; a = hi
  24+ 9C63 B0           	or	b				; de goes to a and varP also re-do sign bit
  25+ 9C64 57           	ld	d,a				; we will work with de having result as we may bin vars later
  26+ 9C65 C9           	ret
  27+ 9C66              .mul0:
  28+ 9C66 AF           	xor	a
  29+ 9C67 32 69 7E     	ld	(varP),a
  30+ 9C6A 57           	ld	d,a
  31+ 9C6B 5F           	ld  e,a
  32+ 9C6C C9           	ret
  33+ 9C6D
# file closed: ./Maths/Utilities/APequQmulA-MULT1.asm
 649  9C6D                  INCLUDE "./Maths/Utilities/badd_ll38.asm"
# file opened: ./Maths/Utilities/badd_ll38.asm
   1+ 9C6D              baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
   2+ 9C6D              SAEquSRPlusAQ:
   3+ 9C6D              ; Calculate the following between sign-magnitude numbers:
   4+ 9C6D              ;   (S A) = (S R) + (A Q)
   5+ 9C6D              ; where the sign bytes only contain the sign bits, not magnitudes.
   6+ 9C6D              ; note goes wrong at <-127 >128 so need 16 bit version
   7+ 9C6D              ; so need to fix the issue with carry flag not returning a fault correctly
   8+ 9C6D              LL38:
   9+ 9C6D              ;	ld		d,a
  10+ 9C6D              ;	ld		a,(varQ)
  11+ 9C6D              ;	ld		e,a
  12+ 9C6D              ;	ld		a,(varS)
  13+ 9C6D              ;	ld		h,a
  14+ 9C6D              ;	ld		a,(varR)
  15+ 9C6D              ;	ld		l,a
  16+ 9C6D              ;	call	ADDHLDESignedv3
  17+ 9C6D              ;	ld		a,h
  18+ 9C6D              ;	ld		(varS),a
  19+ 9C6D              ;	ld		a,l
  20+ 9C6D              ;	ret
  21+ 9C6D              ; calculation table
  22+ 9C6D              ;   R     Q    Op            Sign calc
  23+ 9C6D              ;	10    5    Add           +    sign same add R sign
  24+ 9C6D              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  25+ 9C6D              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  26+ 9C6D              ;	-10  -5    ABS Add       -    sign same add R sign
  27+ 9C6D              ;   5    10    Add           +    sign same add R sign
  28+ 9C6D              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  29+ 9C6D              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  30+ 9C6D              ;   -5   -10   ABS  add      -    sign same add R sign
  31+ 9C6D
  32+ 9C6D              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  33+ 9C6D              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  34+ 9C6D              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  35+ 9C6D              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  36+ 9C6D
  37+ 9C6D
  38+ 9C6D              ; Calculate sign for Q from A and varS
  39+ 9C6D 21 73 7F     	ld		hl,varS							;
  40+ 9C70 AE           	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  41+ 9C71 FA 7C 9C     	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  42+ 9C74 3A 71 7F     	ld		a,(varQ)						; Q	\ else addition, S already correct
  43+ 9C77 21 72 7F     	ld		hl,varR
  44+ 9C7A 86           	add		a,(hl)							; a = Q + R
  45+ 9C7B C9           	ret										; Done carry set if overflow
  46+ 9C7C              .LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
  47+ 9C7C 3A 72 7F     	ld		a,(varR)						; a = R
  48+ 9C7F 21 71 7F     	ld		hl,varQ                         ; Q
  49+ 9C82              ;--	JumpIfALTMemHLusng LL39SwapSubtraction	; if a < (hl) then do LL39SwapSubtraction
  50+ 9C82              	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
  50+ 9C82 B7          >                        or a
  51+ 9C83 9E           	sbc		a,(hl)							; A = R - Q which as R >= Q will always be a positive result
  52+ 9C84 38 01            jr      c,.LL39SignCorrection
  53+ 9C86              ;--    jr      a,.LL39ResultZero
  54+ 9C86              ;--   JumpIfNegative LL39SignCorrection		; if there was underflow we have to correct sign
  55+ 9C86              ;--	or		a								; Clear carry flag to say result is correct
  56+ 9C86 C9           	ret
  57+ 9C87              .LL39SignCorrection:
  58+ 9C87 FE 00            cp      0                               ; if its 0 then neg will affect flag so we just zero result to save compute
  59+ 9C89 28 0E            jr      z,.LL39ResultZero
  60+ 9C8B ED 44            neg                                     ; flip A 2'c value to positive
  61+ 9C8D 08           	ex		af,af'							; save A temporarily
  62+ 9C8E 3A 73 7F     	ld		a,(varS)						; Flip Sign bit in varS
  63+ 9C91 EE 80        	xor		$80							    ;
  64+ 9C93 32 73 7F     	ld		(varS),a                        ; flip sign bit of a
  65+ 9C96 08           	ex		af,af'                          ; get back a which is the result
  66+ 9C97                  ClearCarryFlag                          ; clear carry as NEG instrunction sets it for non zero
  66+ 9C97 B7          >                        or a
  67+ 9C98 C9           	ret
  68+ 9C99              .LL39ResultZero:
  69+ 9C99 32 73 7F         ld      (varS),a                        ; a is zero at this stage so set sign as well
  70+ 9C9C                  ClearCarryFlag                          ; clear carry
  70+ 9C9C B7          >                        or a
  71+ 9C9D C9               ret
  72+ 9C9E              ;--LL39SwapSubtraction:
  73+ 9C9E              ;--	push	bc
  74+ 9C9E              ;--	ld		b,a
  75+ 9C9E              ;--	ld		a,(hl)
  76+ 9C9E              ;--	sub		b
  77+ 9C9E              ;--	pop		bc
  78+ 9C9E              ;--	ex		af,af'							; do we flip here or negate. i think its flip as its overflowed unsigned
  79+ 9C9E              ;--	ld		a,(varS)
  80+ 9C9E              ;--	xor		$80
  81+ 9C9E              ;--	ld		(varS),a
  82+ 9C9E              ;--	ex		af,af'
  83+ 9C9E              ;--	ret
  84+ 9C9E
  85+ 9C9E              ;;;;	baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
  86+ 9C9E              ;;;;; Calculate the following between sign-magnitude numbers:
  87+ 9C9E              ;;;;;   (S A) = (S R) + (A Q)
  88+ 9C9E              ;;;;; where the sign bytes only contain the sign bits, not magnitudes.
  89+ 9C9E              ;;;;; note goes wrong at <-127 >128 so need 16 bit version
  90+ 9C9E              ;;;;LL38:
  91+ 9C9E              ;;;;; Calculate sign for Q from A and varS
  92+ 9C9E              ;;;;	ld		hl,varS							;
  93+ 9C9E              ;;;;	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  94+ 9C9E              ;;;;	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  95+ 9C9E              ;;;;	ld		a,(varQ)						; Q	\ else addition, S already correct
  96+ 9C9E              ;;;;	ld		hl,varR
  97+ 9C9E              ;;;;	add		a,(hl)							; a = Q + R
  98+ 9C9E              ;;;;	ret										; Done
  99+ 9C9E              ;;;;.LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
 100+ 9C9E              ;;;;	ld		hl,varQ                         ;
 101+ 9C9E              ;;;;	ld		a,(hl)
 102+ 9C9E              ;;;;	JumpIfAGTENusng 128,LL39Sub16bit		; does this need to be 16 bit
 103+ 9C9E              ;;;;	ld		a,(varR)						;
 104+ 9C9E              ;;;;	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
 105+ 9C9E              ;;;;	sbc		a,(hl)							; A = R - Q
 106+ 9C9E              ;;;;	jr		c,.SignCorrection				; if there was underflow we have to correct sign
 107+ 9C9E              ;;;;	or		a								; Clear carry flag to say result is correct
 108+ 9C9E              ;;;;	ret
 109+ 9C9E              ;;;;.SignCorrection:
 110+ 9C9E              ;;;;    neg                                     ; flip A 2'c value to positive
 111+ 9C9E              ;;;;	ex		af,af'							; save A temporarily
 112+ 9C9E              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 113+ 9C9E              ;;;;	xor		$80							    ;
 114+ 9C9E              ;;;;	ld		(varS),a                        ; flip sign bit of a
 115+ 9C9E              ;;;;	ex		af,af'                          ; get back a which is the result
 116+ 9C9E              ;;;;	ret
 117+ 9C9E              ;;;;LL39Sub16Bit:
 118+ 9C9E              ;;;;	ld		e,a
 119+ 9C9E              ;;;;	ld		d,0
 120+ 9C9E              ;;;;	ld		a,(varR)
 121+ 9C9E              ;;;;	ld		l,a
 122+ 9C9E              ;;;;	ld		h,0
 123+ 9C9E              ;;;;	ClearCarryFlag
 124+ 9C9E              ;;;;	sbc		hl,de
 125+ 9C9E              ;;;;	jr		c,.SignCorrection16bit
 126+ 9C9E              ;;;;	bit		7,h
 127+ 9C9E              ;;;;	jr		z,.GoodToReturn
 128+ 9C9E              ;;;;.Needtonegate:
 129+ 9C9E              ;;;;	macronegate16hl
 130+ 9C9E              ;;;;.GoodToReturn
 131+ 9C9E              ;;;;	ld		a,l
 132+ 9C9E              ;;;;	or		a
 133+ 9C9E              ;;;;	ret
 134+ 9C9E              ;;;;.SignCorrection16bit:
 135+ 9C9E              ;;;;	macronegate16hl
 136+ 9C9E              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 137+ 9C9E              ;;;;	xor		$80							    ;
 138+ 9C9E              ;;;;	ld		(varS),a                        ; flip sign bit of a
 139+ 9C9E              ;;;;	ld		a,l
 140+ 9C9E              ;;;;	ret
 141+ 9C9E
 142+ 9C9E
# file closed: ./Maths/Utilities/badd_ll38.asm
 650  9C9E              ;;DEFUNCT    INCLUDE "./Maths/Utilities/moveship4-MVS4.asm"
 651  9C9E
 652  9C9E                  INCLUDE "./Maths/Utilities/RequAmul256divQ-BFRDIV.asm"
# file opened: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
   1+ 9C9E              ;;;LL28:
   2+ 9C9E              ;;;    ld      c,a                         ;
   3+ 9C9E              ;;;    ld      a,(varQ)                    ;
   4+ 9C9E              ;;;    ld      b,a                         ;
   5+ 9C9E              ;;;    ld      a,c                         ; Get varQ into b and retain c
   6+ 9C9E              ;;;RequAmul256divB:                        ;
   7+ 9C9E              ;;;LL28Breg:
   8+ 9C9E              ;;;; "BFRDIV R = (A * 256 / Q)  byte from remainder of division, not signed a = a, b = q, c = r"
   9+ 9C9E              ;;;	cp		b							; Check A >= Q
  10+ 9C9E              ;;;	jr		nc, .AnswerTooBig			; A >= Q? yes too big
  11+ 9C9E              ;;;.CalcRemainder:
  12+ 9C9E              ;;;	ld		c, 	$FE						; set R to $FE
  13+ 9C9E              ;;;.RollRemainder:
  14+ 9C9E              ;;;	sla		a
  15+ 9C9E              ;;;	jr		c,.Reduce					; if a >> generates carry reduce
  16+ 9C9E              ;;;	cp		b							; a < q?
  17+ 9C9E              ;;;	jr		nc,.DontSBC
  18+ 9C9E              ;;;.DoSBC:									; a is < q
  19+ 9C9E              ;;;	sbc		a,b							; 	a -= q
  20+ 9C9E              ;;;.DontSBC:
  21+ 9C9E              ;;;	rl		c							; r << 1
  22+ 9C9E              ;;;	jr		c, .RollRemainder			; if rol generated a carry, continue
  23+ 9C9E              ;;;    ld      a,c
  24+ 9C9E              ;;;    ld      (varR),a
  25+ 9C9E              ;;;	ret									; R (c) left with remainder
  26+ 9C9E              ;;;.Reduce:								; a geneated a carry
  27+ 9C9E              ;;;	sbc		a,b							; a = a - (q +1)
  28+ 9C9E              ;;;	scf									; set carry flag for rl
  29+ 9C9E              ;;;	rl		c							; r << 1 briging in carry
  30+ 9C9E              ;;;	jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  31+ 9C9E              ;;;    ld      a,c
  32+ 9C9E              ;;;    ld      (varR),a
  33+ 9C9E              ;;;	ret
  34+ 9C9E              ;;;.AnswerTooBig:
  35+ 9C9E              ;;;	ld	    c,$FF							; arse its too big
  36+ 9C9E              ;;;    ld      a,c
  37+ 9C9E              ;;;    ld      (varR),a
  38+ 9C9E              ;;;	ret
  39+ 9C9E
  40+ 9C9E              BCequAmul256DivC:
  41+ 9C9E 59             ld    e,c
  42+ 9C9F 67             ld    h,a
  43+ 9CA0 2E 00          ld    l,0
  44+ 9CA2              AdivEDivide:                             ; this routine performs the operation BC=HL/E
  45+ 9CA2 7B             ld a,e                                 ; checking the divisor; returning if it is zero
  46+ 9CA3 B7             or a                                   ; from this time on the carry is cleared
  47+ 9CA4 C8             ret z
  48+ 9CA5 01 FF FF       ld bc,-1                               ; BC is used to accumulate the result
  49+ 9CA8 16 00          ld d,0                                 ; clearing D, so DE holds the divisor
  50+ 9CAA              AdivEDivLoop:                            ; subtracting DE from HL until the first overflow
  51+ 9CAA ED 52          sbc hl,de                              ; since the carry is zero, SBC works as if it was a SUB
  52+ 9CAC 03             inc bc                                 ;  note that this instruction does not alter the flags
  53+ 9CAD 30 FB          jr nc,AdivEDivLoop                     ; no carry means that there was no overflow
  54+ 9CAF C9             ret
  55+ 9CB0
  56+ 9CB0              HL_Div_C:
  57+ 9CB0              ; Integer divides HL by C
  58+ 9CB0              ; Result in HL, remainder in A
  59+ 9CB0              ; Clobbers F, B
  60+ 9CB0 06 10                ld b,16
  61+ 9CB2 AF                   xor a
  62+ 9CB3              HL_Div_C_Loop:
  63+ 9CB3 29                   add hl,hl
  64+ 9CB4 17                   rla
  65+ 9CB5 B9                   cp c
  66+ 9CB6 38 02                jr c,HL_DivC_Skip
  67+ 9CB8 91                   sub c
  68+ 9CB9 2C                   inc l
  69+ 9CBA              HL_DivC_Skip:
  70+ 9CBA 10 F7                djnz HL_Div_C_Loop
  71+ 9CBC 7D                   ld   a,l
  72+ 9CBD 32 72 7F             ld  (varR),a
  73+ 9CC0 C9                   ret
  74+ 9CC1
  75+ 9CC1
  76+ 9CC1
  77+ 9CC1              ; Entry point if varQ is populated with demoninator
  78+ 9CC1              RequAmul256divQ:
  79+ 9CC1              BFRDIV:
  80+ 9CC1 F5           		push	af
  81+ 9CC2 3A 71 7F     		ld		a,(varQ)
  82+ 9CC5 4F           		ld		c,a
  83+ 9CC6 F1           		pop		af
  84+ 9CC7 FE 00        		cp		0
  85+ 9CC9 CA E0 9C     		jp		z, HLDIVC_0_BY	; fast exit if numerator is 0
  86+ 9CCC              RequAmul256divC:
  87+ 9CCC 2E 00        		ld		l,0
  88+ 9CCE 67           		ld		h,a
  89+ 9CCF              HL_Div_Cold:						; fast entry point if C and HL are already set
  90+ 9CCF 06 10        		ld b,16
  91+ 9CD1 AF           		xor a
  92+ 9CD2              LOOPPOINT:
  93+ 9CD2 29           		add hl,hl
  94+ 9CD3 17           		rla
  95+ 9CD4 B9           		cp c
  96+ 9CD5 38 02        		jr c,SKIPINCSUB
  97+ 9CD7 2C           		inc l
  98+ 9CD8 91           		sub c
  99+ 9CD9              SKIPINCSUB:
 100+ 9CD9 10 F7        		djnz LOOPPOINT
 101+ 9CDB 7D           		ld		a,l
 102+ 9CDC 32 72 7F     		ld 		(varR),a
 103+ 9CDF C9           		ret
 104+ 9CE0              HLDIVC_0_BY:
 105+ 9CE0 32 72 7F     		ld		(varR),a
 106+ 9CE3 C9           		ret
 107+ 9CE4              ;	push	af
 108+ 9CE4              ;	ld		a,b
 109+ 9CE4              ;	ld		(varQ),a
 110+ 9CE4              ;	pop		af
 111+ 9CE4              ;RequAmul256divQ:
 112+ 9CE4              ;BFRDIV:									;BFRDIV R=A*256/Q   byte from remainder of division
 113+ 9CE4              ;	ld		hl,varQ
 114+ 9CE4              ;	JumpIfAGTENusng	(hl),LL2			;  is A >=  Q ?, if yes, answer too big for 1 byte, R=#&FF
 115+ 9CE4              ;	ld		b,$FE						; b = X
 116+ 9CE4              ;	ld		c,a							; c = R	div roll counter
 117+ 9CE4              ;LL31:									; roll R
 118+ 9CE4              ;	sla		a
 119+ 9CE4              ;	jr		c,LL29						; hop to Reduce
 120+ 9CE4              ;	JumpIfALTNusng (hl)					; Q skip sbc if a < Q
 121+ 9CE4              ;	sbc		a,(hl)						; a = a - Q
 122+ 9CE4              ;	rl		c							; rotate R left
 123+ 9CE4              ;	jr		c,LL31						; loop if R poped out a carry bit
 124+ 9CE4              ;	jr		LL2Good
 125+ 9CE4              ;LL29:									; Reduce
 126+ 9CE4              ;	sbc		a,(hl)
 127+ 9CE4              ;	scf
 128+ 9CE4              ;	rl		c							; roll a carry flag into R
 129+ 9CE4              ;	jr		c,LL31						;  loop R
 130+ 9CE4              ;	jr		LL2Good
 131+ 9CE4              ;LL2:
 132+ 9CE4              ;	ld		c,$FF
 133+ 9CE4              ;LL2Good:
 134+ 9CE4              ;	ld		a,c
 135+ 9CE4              ;	ld		(varR),a
 136+ 9CE4              ;	ret
 137+ 9CE4
# file closed: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
 653  9CE4                  INCLUDE "./Maths/Utilities/RequAdivQ-LL61.asm"
# file opened: ./Maths/Utilities/RequAdivQ-LL61.asm
   1+ 9CE4              RequAdivQ:
   2+ 9CE4              	; R = A/Q, U = remainder, code looked a little odd as if R is reminader and U = result
   3+ 9CE4              LL61:										; Handling division R=A/Q for case further down
   4+ 9CE4 4F           	ld		c,a								; c = A
   5+ 9CE5 3A 71 7F     	ld		a,(varQ)						; test for divide by 0
   6+ 9CE8 FE 00        	cp		0
   7+ 9CEA 28 16        	jr		z,LL84							; divide by zero error
   8+ 9CEC 57           	ld		d,a								; now we can do C/D
   9+ 9CED 06 08            ld b,8
  10+ 9CEF AF               xor a
  11+ 9CF0              LL63:										; roll divide loop
  12+ 9CF0 CB 21            sla c
  13+ 9CF2 17               rla
  14+ 9CF3 BA               cp d
  15+ 9CF4 38 02            jr c,LL64
  16+ 9CF6 0C               inc c
  17+ 9CF7 92               sub d
  18+ 9CF8              LL64:
  19+ 9CF8 10 F6            djnz LL63
  20+ 9CFA 32 70 7F     	ld	(varU),a							; store remainder in U
  21+ 9CFD 79           	ld	a,c
  22+ 9CFE 32 72 7F     	ld	(varR),a							; store remainder in R
  23+ 9D01 C9               ret
  24+ 9D02              LL84:										; div error  R=U=#5
  25+ 9D02 3E 32        	ld		a,50
  26+ 9D04 32 72 7F     	ld		(varR),a
  27+ 9D07 32 70 7F     	ld		(varU),a
  28+ 9D0A C9           	ret
  29+ 9D0B
# file closed: ./Maths/Utilities/RequAdivQ-LL61.asm
 654  9D0B                  INCLUDE "./Maths/Utilities/RSequQmulA-MULT12.asm"
# file opened: ./Maths/Utilities/RSequQmulA-MULT12.asm
   1+ 9D0B              asm_mult12:
   2+ 9D0B              RSequQmulA:
   3+ 9D0B              ; "asm_ult12  R.S = Q * A \ visited quite often S = hi, R = lo, odd that its opposite to mult1"
   4+ 9D0B CD 43 9C     	call APequQmulA
   5+ 9D0E 08           	ex 	af,af'
   6+ 9D0F 7A           	ld	a,d
   7+ 9D10 32 73 7F     	ld	(varS),a
   8+ 9D13 7B           	ld	a,e
   9+ 9D14 32 72 7F     	ld	(varR),a
  10+ 9D17 08           	ex 	af,af'
  11+ 9D18 C9           	ret
  12+ 9D19
# file closed: ./Maths/Utilities/RSequQmulA-MULT12.asm
 655  9D19
 656  9D19                  include "./Universe/Ships/CopyRotMattoXX15.asm"
# file opened: ./Universe/Ships/CopyRotMattoXX15.asm
   1+ 9D19              CopyRotMatNoseVtoXX15:
   2+ 9D19                      ldCopyByte  UBnkrotmatNosevX+1 ,XX15VecX
   2+ 9D19 3A 36 C0    >                        ld       a,(UBnkrotmatNosevX+1)
   2+ 9D1C 32 A7 C0    >                        ld       (XX15VecX),a
   3+ 9D1F                      ldCopyByte  UBnkrotmatNosevY+1, XX15VecY
   3+ 9D1F 3A 38 C0    >                        ld       a,(UBnkrotmatNosevY+1)
   3+ 9D22 32 A8 C0    >                        ld       (XX15VecY),a
   4+ 9D25                      ldCopyByte  UBnkrotmatNosevZ+1 ,XX15VecZ
   4+ 9D25 3A 3A C0    >                        ld       a,(UBnkrotmatNosevZ+1)
   4+ 9D28 32 A9 C0    >                        ld       (XX15VecZ),a
   5+ 9D2B C9                   ret
   6+ 9D2C
   7+ 9D2C              CopyRotMatRoofVtoXX15:
   8+ 9D2C                      ldCopyByte  UBnkrotmatRoofvX+1 ,XX15VecX
   8+ 9D2C 3A 30 C0    >                        ld       a,(UBnkrotmatRoofvX+1)
   8+ 9D2F 32 A7 C0    >                        ld       (XX15VecX),a
   9+ 9D32                      ldCopyByte  UBnkrotmatRoofvY+1, XX15VecY
   9+ 9D32 3A 32 C0    >                        ld       a,(UBnkrotmatRoofvY+1)
   9+ 9D35 32 A8 C0    >                        ld       (XX15VecY),a
  10+ 9D38                      ldCopyByte  UBnkrotmatRoofvZ+1 ,XX15VecZ
  10+ 9D38 3A 34 C0    >                        ld       a,(UBnkrotmatRoofvZ+1)
  10+ 9D3B 32 A9 C0    >                        ld       (XX15VecZ),a
  11+ 9D3E C9                   ret
  12+ 9D3F
  13+ 9D3F              CopyRotMatSideVtoXX15:
  14+ 9D3F                      ldCopyByte  UBnkrotmatSidevX+1 ,XX15VecX
  14+ 9D3F 3A 2A C0    >                        ld       a,(UBnkrotmatSidevX+1)
  14+ 9D42 32 A7 C0    >                        ld       (XX15VecX),a
  15+ 9D45                      ldCopyByte  UBnkrotmatSidevY+1, XX15VecY
  15+ 9D45 3A 2C C0    >                        ld       a,(UBnkrotmatSidevY+1)
  15+ 9D48 32 A8 C0    >                        ld       (XX15VecY),a
  16+ 9D4B                      ldCopyByte  UBnkrotmatSidevZ+1 ,XX15VecZ
  16+ 9D4B 3A 2E C0    >                        ld       a,(UBnkrotmatSidevZ+1)
  16+ 9D4E 32 A9 C0    >                        ld       (XX15VecZ),a
  17+ 9D51 C9                   ret
  18+ 9D52
# file closed: ./Universe/Ships/CopyRotMattoXX15.asm
 657  9D52                  include "./Universe/Ships/CopyXX15toRotMat.asm"
# file opened: ./Universe/Ships/CopyXX15toRotMat.asm
   1+ 9D52              CopyXX15toRotMatNoseV:
   2+ 9D52                      ldCopyByte  XX15VecX, UBnkrotmatNosevX+1
   2+ 9D52 3A A7 C0    >                        ld       a,(XX15VecX)
   2+ 9D55 32 36 C0    >                        ld       (UBnkrotmatNosevX+1),a
   3+ 9D58                      ldCopyByte  XX15VecY, UBnkrotmatNosevY+1
   3+ 9D58 3A A8 C0    >                        ld       a,(XX15VecY)
   3+ 9D5B 32 38 C0    >                        ld       (UBnkrotmatNosevY+1),a
   4+ 9D5E                      ldCopyByte  XX15VecZ, UBnkrotmatNosevZ+1
   4+ 9D5E 3A A9 C0    >                        ld       a,(XX15VecZ)
   4+ 9D61 32 3A C0    >                        ld       (UBnkrotmatNosevZ+1),a
   5+ 9D64                      ZeroA
   5+ 9D64 AF          >                        xor a
   6+ 9D65 32 35 C0             ld  (UBnkrotmatNosevX),a
   7+ 9D68 32 37 C0             ld  (UBnkrotmatNosevY),a
   8+ 9D6B 32 39 C0             ld  (UBnkrotmatNosevZ),a
   9+ 9D6E C9                   ret
  10+ 9D6F
  11+ 9D6F              CopyXX15toRotMatRoofV:
  12+ 9D6F                      ldCopyByte  XX15VecX, UBnkrotmatRoofvX+1
  12+ 9D6F 3A A7 C0    >                        ld       a,(XX15VecX)
  12+ 9D72 32 30 C0    >                        ld       (UBnkrotmatRoofvX+1),a
  13+ 9D75                      ldCopyByte  XX15VecY, UBnkrotmatRoofvY+1
  13+ 9D75 3A A8 C0    >                        ld       a,(XX15VecY)
  13+ 9D78 32 32 C0    >                        ld       (UBnkrotmatRoofvY+1),a
  14+ 9D7B                      ldCopyByte  XX15VecZ, UBnkrotmatRoofvZ+1
  14+ 9D7B 3A A9 C0    >                        ld       a,(XX15VecZ)
  14+ 9D7E 32 34 C0    >                        ld       (UBnkrotmatRoofvZ+1),a
  15+ 9D81                      ZeroA
  15+ 9D81 AF          >                        xor a
  16+ 9D82 32 2F C0             ld  (UBnkrotmatRoofvX),a
  17+ 9D85 32 31 C0             ld  (UBnkrotmatRoofvY),a
  18+ 9D88 32 33 C0             ld  (UBnkrotmatRoofvZ),a
  19+ 9D8B C9                   ret
  20+ 9D8C
  21+ 9D8C              CopyXX15toRotMatSideV:
  22+ 9D8C                      ldCopyByte  XX15VecX, UBnkrotmatSidevX+1
  22+ 9D8C 3A A7 C0    >                        ld       a,(XX15VecX)
  22+ 9D8F 32 2A C0    >                        ld       (UBnkrotmatSidevX+1),a
  23+ 9D92                      ldCopyByte  XX15VecY, UBnkrotmatSidevY+1
  23+ 9D92 3A A8 C0    >                        ld       a,(XX15VecY)
  23+ 9D95 32 2C C0    >                        ld       (UBnkrotmatSidevY+1),a
  24+ 9D98                      ldCopyByte  XX15VecZ, UBnkrotmatSidevZ+1
  24+ 9D98 3A A9 C0    >                        ld       a,(XX15VecZ)
  24+ 9D9B 32 2E C0    >                        ld       (UBnkrotmatSidevZ+1),a
  25+ 9D9E                      ZeroA
  25+ 9D9E AF          >                        xor a
  26+ 9D9F 32 29 C0             ld  (UBnkrotmatSidevX),a
  27+ 9DA2 32 2B C0             ld  (UBnkrotmatSidevY),a
  28+ 9DA5 32 2D C0             ld  (UBnkrotmatSidevZ),a
  29+ 9DA8 C9                   ret
  30+ 9DA9
# file closed: ./Universe/Ships/CopyXX15toRotMat.asm
 658  9DA9                  INCLUDE "./Maths/Utilities/tidy.asm"
# file opened: ./Maths/Utilities/tidy.asm
   1+ 9DA9              ;rotmap0xLo: DB	0				; INWK +9
   2+ 9DA9              ;rotmap0xHi: DB	0				; INWK +10
   3+ 9DA9              ;rotmat0yLo: DB	0				; INWK +11
   4+ 9DA9              ;rotmat0yHi: DB	0				; INWK +12
   5+ 9DA9              ;rotmat0zLo:	DB 	0				; INWK +13
   6+ 9DA9              ;rotmat0zHi:	DB 	0				; INWK +14
   7+ 9DA9              ;rotmap1xLo: DB	0				; INWK +15
   8+ 9DA9              ;rotmap1xHi:	DB	0				; INWK +16
   9+ 9DA9              ;rotmat1yLo:	DB	0				; INWK +17
  10+ 9DA9              ;rotmat1yHi:	DB	0				; INWK +18
  11+ 9DA9              ;rotmat1zLo:	DB	0				; INWK +19
  12+ 9DA9              ;rotmat1zHi:	DB	0				; INWK +20
  13+ 9DA9              ;rotmat2xLo: DB	0				; INWK +21
  14+ 9DA9              ;rotmat2xHi:	DB	0				; INWK +22
  15+ 9DA9              ;rotmat2yLo:	DB	0				; INWK +23
  16+ 9DA9              ;rotmat2yHi:	DB	0				; INWK +24
  17+ 9DA9              ;rotmat2zLo:	DB	0				; INWK +25
  18+ 9DA9              ;rotmat2zHi:	DB	0				; INWK +26
  19+ 9DA9              ;
  20+ 9DA9              ;rotmatFx	equ	rotmat0xHi
  21+ 9DA9              ;rotmatFy	equ	rotmat0yHi
  22+ 9DA9              ;rotmatFz	equ	rotmat0zHi
  23+ 9DA9              ;rotmatUx	equ	rotmat1xHi
  24+ 9DA9              ;rotmatUy	equ	rotmat1yHi
  25+ 9DA9              ;rotmatUz	equ	rotmat1zHi
  26+ 9DA9              ;
  27+ 9DA9              ;inwkarray			equ		INWK+10
  28+ 9DA9
  29+ 9DA9
  30+ 9DA9
  31+ 9DA9
  32+ 9DA9              ; Divide that sets value to FFFF if divide by 0 unless main value is 0, then 0
  33+ 9DA9
  34+ 9DA9              ; (P+1 A) = (A P) / Q
  35+ 9DA9              ;  B A    = (A P) / Q
  36+ 9DA9              ; TESTED OK
  37+ 9DA9
  38+ 9DA9
  39+ 9DA9 2A A7 C0     NormalizeXX15:          ld      hl, (XX15VecX)              ; h= VecX, l = VecY
  40+ 9DAC 3A A9 C0                             ld      a,  (XX15VecZ)              ; a = VecZ, d we don't care
  41+ 9DAF E6 7F        .ABSZ:                  and     SignMask8Bit
  42+ 9DB1 FD 67                                ld      iyh,a                       ; iyh = abs z
  43+ 9DB3 57           .ZSquared:              ld      d,a
  44+ 9DB4 5F                                   ld      e,a
  45+ 9DB5 ED 30                                mul     de
  46+ 9DB7 42 4B                                ld      bc,de                       ; bc = z squared
  47+ 9DB9 7D           .ABSX:                  ld      a,l
  48+ 9DBA E6 7F        .XSquared:              and     SignMask8Bit
  49+ 9DBC DD 67                                ld      ixh,a                       ; ixh = abs x
  50+ 9DBE 57                                   ld      d,a
  51+ 9DBF 5F                                   ld      e,a
  52+ 9DC0 ED 30                                mul     de
  53+ 9DC2 EB                                   ex      de,hl                       ; hl = x squared
  54+ 9DC3 7A           .ABSY:                  ld      a,d                         ; as h was swapped into d
  55+ 9DC4 E6 7F                                and     SignMask8Bit
  56+ 9DC6 DD 6F                                ld      ixl,a                       ; ixl = abs y
  57+ 9DC8 5F           .YSquared:              ld      e,a
  58+ 9DC9 57                                   ld      d,a
  59+ 9DCA ED 30                                mul     de                          ; de = y squared
  60+ 9DCC 19                                   add     hl,de                       ; hl = hl + de + bc
  61+ 9DCD 09                                   add     hl,bc                       ;
  62+ 9DCE EB                                   ex      de,hl
  63+ 9DCF CD 95 92                             call    asm_sqrt                    ; d = iyl =hl = sqrt (de) = sqrt (x ^ 2 + y ^ 2 + z ^ 2)
  64+ 9DD2 55                                   ld      d,l
  65+ 9DD3 FD 6A                                ld      iyl,d
  66+ 9DD5 DD 7C        .NormaliseX:            ld      a,ixh                       ; normalise x
  67+ 9DD7 CD 8F 9B                             call    AequAdivDmul967Bit
  68+ 9DDA 57                                   ld      d,a
  69+ 9DDB 3A A7 C0                             ld      a,(XX15VecX)
  70+ 9DDE E6 80                                and     SignOnly8Bit
  71+ 9DE0 B2                                   or      d
  72+ 9DE1 32 A7 C0                             ld      (XX15VecX),a
  73+ 9DE4 DD 7D        .NormaliseY:            ld      a,ixl                       ; normalise y
  74+ 9DE6 55                                   ld      d,l
  75+ 9DE7 CD 8F 9B                             call    AequAdivDmul967Bit
  76+ 9DEA 57                                   ld      d,a
  77+ 9DEB 3A A8 C0                             ld      a,(XX15VecY)
  78+ 9DEE E6 80                                and     SignOnly8Bit
  79+ 9DF0 B2                                   or      d
  80+ 9DF1 32 A8 C0                             ld      (XX15VecY),a
  81+ 9DF4 FD 7C        .NormaliseZ:            ld      a,iyh                       ; normalise z
  82+ 9DF6 55                                   ld      d,l
  83+ 9DF7 CD 8F 9B                             call    AequAdivDmul967Bit
  84+ 9DFA 57                                   ld      d,a
  85+ 9DFB 3A A9 C0                             ld      a,(XX15VecZ)
  86+ 9DFE E6 80                                and     SignOnly8Bit
  87+ 9E00 B2                                   or      d
  88+ 9E01 32 A9 C0                             ld      (XX15VecZ),a
  89+ 9E04 C9                                   ret
  90+ 9E05
  91+ 9E05              TidyNormaliseNoseV:     MACRO
  92+ 9E05 ~                                    call	CopyRotMatNoseVtoXX15	    ; copy over matrix row 3 (Nosev)
  93+ 9E05 ~                                    call	NormalizeXX15			    ; normalise z hi, its really TIS3 and write back to matrix
  94+ 9E05 ~                                    call	CopyXX15toRotMatNoseV       ; .
  95+ 9E05                                      ENDM
  96+ 9E05              TidyNormaliseRoofV:     MACRO
  97+ 9E05 ~                                    call	CopyRotMatRoofVtoXX15
  98+ 9E05 ~                                    call	NormalizeXX15			; normalise z hi, its really TIS3
  99+ 9E05 ~                                    call	CopyXX15toRotMatRoofV
 100+ 9E05                                      ENDM
 101+ 9E05
 102+ 9E05
 103+ 9E05              TidyUBnk:               ;break
 104+ 9E05                                      TidyNormaliseNoseV
 104+ 9E05 CD 19 9D    >                        call	CopyRotMatNoseVtoXX15	    ; copy over matrix row 3 (Nosev)
 104+ 9E08 CD A9 9D    >                        call	NormalizeXX15			    ; normalise z hi, its really TIS3 and write back to matrix
 104+ 9E0B CD 52 9D    >                        call	CopyXX15toRotMatNoseV       ; .
 105+ 9E0E 3A 36 C0                             ld      a,(UBnkrotmatNosevX+1)      ; Now check and see which vector elemetn we are going to
 106+ 9E11 E6 60                                and     %01100000                   ; if X is not small then we go straigth to roofx
 107+ 9E13 C2 AB 9E                             jp      nz,.ProcessRoofX            ; .
 108+ 9E16 3A 38 C0     .TidyXIsSmall:          ld      a,(UBnkrotmatNosevY+1)      ; Else we test Y on to using
 109+ 9E19 E6 60                                and     %01100000                   ; if Y is not small we process roofz
 110+ 9E1B 20 47                                jr      nz,.ProcessRoofZ            ; .
 111+ 9E1D              ;...roofv_y´ = -(nosev_x´ * roofv_x + nosev_z´ * roofv_z) / nosev_y´
 112+ 9E1D 3A 36 C0     .ProcessRoofY:          ld		a,(UBnkrotmatNosevX+1)
 113+ 9E20 32 71 7F                             ld		(varQ),a					; q = nosev_y
 114+ 9E23 3A 30 C0                             ld		a,(UBnkrotmatRoofvX+1)	    ;roov z
 115+ 9E26 CD 0B 9D                             call	RSequQmulA
 116+ 9E29 3A 3A C0                             ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 117+ 9E2C 32 71 7F                             ld		(varQ),a					; b = regX for now
 118+ 9E2F 3A 34 C0                             ld		a,(UBnkrotmatRoofvZ+1)	    ; roofv y
 119+ 9E32 CD 0A 91                             call	madDEequQmulAaddRS
 120+ 9E35 7A                                   ld      a,d                         ; flip sign bit
 121+ 9E36 EE 80                                xor     SignOnly8Bit
 122+ 9E38 57                                   ld      d,a
 123+ 9E39 3A 38 C0                             ld      a,(UBnkrotmatNosevY+1)
 124+ 9E3C 32 71 7F                             ld      (varQ),a
 125+ 9E3F 7A           .YTest0Div:             ld      a,d
 126+ 9E40 E6 7F                                and     $7F
 127+ 9E42 B3                                   or      e
 128+ 9E43 FE 00                                cp      0
 129+ 9E45 20 0E                                jr      nz,.SkipYZeroTest
 130+ 9E47                                      ZeroA
 130+ 9E47 AF          >                        xor a
 131+ 9E48 C3 A5 9E                             jp      .SetRoofZ
 132+ 9E4B FE 00        .YTestDiv0:             cp      0
 133+ 9E4D 20 06                                jr      nz,.SkipYZeroTest
 134+ 9E4F 3E 60        .YDivideByZero:         ld      a,96
 135+ 9E51 B2                                   or      d
 136+ 9E52 C3 A5 9E                             jp      .SetRoofZ
 137+ 9E55 7B           .SkipYZeroTest:         ld      a,e
 138+ 9E56 32 69 7E                             ld      (varP),a
 139+ 9E59 7A                                   ld      a,d
 140+ 9E5A CD 97 94                             call    DVIDT
 141+ 9E5D 78                                   ld      a,b
 142+ 9E5E 32 32 C0     .SetRoofY:              ld      (UBnkrotmatRoofvY+1),a
 143+ 9E61 C3 EF 9E                             jp      .DoneRoof
 144+ 9E64              ;...roofv_z´ = -(nosev_x´ * roofv_x + nosev_y´ * roofv_y) / nosev_z´
 145+ 9E64 3A 36 C0     .ProcessRoofZ:          ld		a,(UBnkrotmatNosevX+1)      ; Failing that we default to Z
 146+ 9E67 32 71 7F                             ld		(varQ),a				    ; q = nosev_y
 147+ 9E6A 3A 30 C0                             ld		a,(UBnkrotmatRoofvX+1)	    ;roov z
 148+ 9E6D CD 0B 9D                             call	RSequQmulA
 149+ 9E70 3A 38 C0                             ld		a,(UBnkrotmatNosevY+1)	    ; nosev z
 150+ 9E73 32 71 7F                             ld		(varQ),a				    ; b = regX for now
 151+ 9E76 3A 32 C0                             ld		a,(UBnkrotmatRoofvY+1)	    ; roofv y
 152+ 9E79 CD 0A 91                             call	madDEequQmulAaddRS
 153+ 9E7C 7A                                   ld      a,d                         ; flip sign bit
 154+ 9E7D EE 80                                xor     SignOnly8Bit
 155+ 9E7F 57                                   ld      d,a
 156+ 9E80 3A 3A C0                             ld      a,(UBnkrotmatNosevZ+1)
 157+ 9E83 32 71 7F                             ld      (varQ),a
 158+ 9E86 7A           .ZTest0Div:             ld      a,d
 159+ 9E87 E6 7F                                and     $7F
 160+ 9E89 B3                                   or      e
 161+ 9E8A FE 00                                cp      0
 162+ 9E8C 20 0E                                jr      nz,.SkipZZeroTest
 163+ 9E8E                                      ZeroA
 163+ 9E8E AF          >                        xor a
 164+ 9E8F C3 A5 9E                             jp      .SetRoofZ
 165+ 9E92 FE 00        .ZTestDiv0:             cp      0
 166+ 9E94 20 06                                jr      nz,.SkipZZeroTest
 167+ 9E96 3E 60        .ZDivideByZero:         ld      a,96
 168+ 9E98 B2                                   or      d
 169+ 9E99 C3 A5 9E                             jp      .SetRoofZ
 170+ 9E9C 7B           .SkipZZeroTest:         ld      a,e
 171+ 9E9D 32 69 7E                             ld      (varP),a
 172+ 9EA0 7A                                   ld      a,d
 173+ 9EA1 CD 97 94                             call    DVIDT
 174+ 9EA4 78                                   ld      a,b
 175+ 9EA5 32 34 C0     .SetRoofZ:              ld      (UBnkrotmatRoofvZ+1),a
 176+ 9EA8 C3 EF 9E                             jp      .DoneRoof
 177+ 9EAB              ;...roofv_x´ = -(nosev_y´ * roofv_y + nosev_z´ * roofv_z) / nosev_x´
 178+ 9EAB 3A 38 C0     .ProcessRoofX:          ld		a,(UBnkrotmatNosevY+1)      ; so we set Q to Nose Y
 179+ 9EAE 32 71 7F                             ld		(varQ),a					; q = nosev_y
 180+ 9EB1 3A 32 C0                             ld		a,(UBnkrotmatRoofvY+1)	    ; A = roofv Y
 181+ 9EB4 CD 0B 9D                             call	RSequQmulA                  ; RS = NoseY & RoofY
 182+ 9EB7 3A 3A C0                             ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 183+ 9EBA 32 71 7F                             ld		(varQ),a					; b = regX for now
 184+ 9EBD 3A 34 C0                             ld		a,(UBnkrotmatRoofvZ+1)	    ; roofv y
 185+ 9EC0 CD 0A 91                             call	madDEequQmulAaddRS
 186+ 9EC3 7A                                   ld      a,d                         ; flip sign bit
 187+ 9EC4 EE 80                                xor     SignOnly8Bit
 188+ 9EC6 57                                   ld      d,a
 189+ 9EC7 3A 36 C0                             ld      a,(UBnkrotmatNosevX+1)
 190+ 9ECA 32 71 7F                             ld      (varQ),a
 191+ 9ECD 7A           .XTest0Div:             ld      a,d
 192+ 9ECE E6 7F                                and     $7F
 193+ 9ED0 B3                                   or      e
 194+ 9ED1 FE 00                                cp      0
 195+ 9ED3 20 0E                                jr      nz,.SkipXZeroTest
 196+ 9ED5                                      ZeroA
 196+ 9ED5 AF          >                        xor a
 197+ 9ED6 C3 A5 9E                             jp      .SetRoofZ
 198+ 9ED9 FE 00        .XTestDiv0:             cp      0
 199+ 9EDB 20 06                                jr      nz,.SkipXZeroTest
 200+ 9EDD 3E 60        .XDivideByZero:         ld      a,96
 201+ 9EDF B2                                   or      d
 202+ 9EE0 C3 EC 9E                             jp      .SetRoofX
 203+ 9EE3 7B           .SkipXZeroTest:         ld      a,e
 204+ 9EE4 32 69 7E                             ld      (varP),a
 205+ 9EE7 7A                                   ld      a,d
 206+ 9EE8 CD 97 94                             call    DVIDT
 207+ 9EEB 78                                   ld      a,b
 208+ 9EEC 32 30 C0     .SetRoofX:              ld      (UBnkrotmatRoofvX+1),a
 209+ 9EEF              .DoneRoof:              TidyNormaliseRoofV
 209+ 9EEF CD 2C 9D    >                        call	CopyRotMatRoofVtoXX15
 209+ 9EF2 CD A9 9D    >                        call	NormalizeXX15			; normalise z hi, its really TIS3
 209+ 9EF5 CD 6F 9D    >                        call	CopyXX15toRotMatRoofV
 210+ 9EF8              ;...sidex = ((nosez * roofy) - nosey * roofz) / 96
 211+ 9EF8 3A 3A C0     .DoSidevX:              ld		a,(UBnkrotmatNosevZ+1)      ;  -(-nosev_z * roofv_y + nosev_y * roofv_z) / 96
 212+ 9EFB EE 80                                xor     SignOnly8Bit
 213+ 9EFD 32 71 7F                             ld		(varQ),a					; q = nosev_y
 214+ 9F00 3A 32 C0                             ld		a,(UBnkrotmatRoofvY+1)	     ;roov z
 215+ 9F03 CD 0B 9D                             call	RSequQmulA
 216+ 9F06 3A 38 C0                             ld		a,(UBnkrotmatNosevY+1)		; nosev z
 217+ 9F09 32 71 7F                             ld		(varQ),a							; b = regX for now
 218+ 9F0C 3A 34 C0                             ld		a,(UBnkrotmatRoofvZ+1)	    ; roofv y
 219+ 9F0F CD 0A 91                             call	madDEequQmulAaddRS
 220+ 9F12 CD DF 94                             call    BAequDEdiv96
 221+ 9F15 78                                   ld      a,b
 222+ 9F16 32 2A C0                             ld      (UBnkrotmatSidevX+1),a
 223+ 9F19              ;...sidey = ((nosex * roofz) - nosez * roofx) / 96
 224+ 9F19 3A 36 C0     .DoSidevY:              ld		a,(UBnkrotmatNosevX+1)      ; -(-nosev_x * roofv_z - nosev_z * roofv_x) / 96
 225+ 9F1C EE 80                                xor     SignOnly8Bit
 226+ 9F1E 32 71 7F                             ld		(varQ),a					; q = nosev_y
 227+ 9F21 3A 34 C0                             ld		a,(UBnkrotmatRoofvZ+1)	    ; roov z
 228+ 9F24 CD 0B 9D                             call	RSequQmulA                  ; rs = nosex * roofz
 229+ 9F27 3A 3A C0                             ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 230+ 9F2A 32 71 7F                             ld		(varQ),a					; b = regX for now
 231+ 9F2D 3A 34 C0                             ld		a,(UBnkrotmatRoofvZ+1)	    ; roofv y
 232+ 9F30 CD 0A 91                             call	madDEequQmulAaddRS          ; DE = noseyz* roofz +
 233+ 9F33 CD DF 94                             call    BAequDEdiv96
 234+ 9F36 78                                   ld      a,b
 235+ 9F37 32 2C C0                             ld      (UBnkrotmatSidevY+1),a         ;-(-nosev_y * roofv_x + nosev_x * roofv_y) / 96
 236+ 9F3A              ;...sidez = ((nosey * roofx) - nosex * roofy) / 96
 237+ 9F3A 3A 38 C0     .DoSidevZ:              ld		a,(UBnkrotmatNosevY+1)      ;
 238+ 9F3D EE 80                                xor     SignOnly8Bit
 239+ 9F3F 32 71 7F                             ld		(varQ),a					; q = nosev_y
 240+ 9F42 3A 34 C0                             ld		a,(UBnkrotmatRoofvZ+1)	     ;roov z
 241+ 9F45 CD 0B 9D                             call	RSequQmulA
 242+ 9F48 3A 36 C0                             ld		a,(UBnkrotmatNosevX+1)		; nosev z
 243+ 9F4B 32 71 7F                             ld		(varQ),a							; b = regX for now
 244+ 9F4E 3A 32 C0                             ld		a,(UBnkrotmatRoofvY+1)	    ; roofv y
 245+ 9F51 CD 0A 91                             call	madDEequQmulAaddRS
 246+ 9F54 CD DF 94                             call    BAequDEdiv96
 247+ 9F57 78                                   ld      a,b
 248+ 9F58 32 2E C0                             ld      (UBnkrotmatSidevZ+1),a
 249+ 9F5B                                      ZeroA
 249+ 9F5B AF          >                        xor a
 250+ 9F5C 32 29 C0                             ld      (UBnkrotmatSidevX),a
 251+ 9F5F 32 2B C0                             ld      (UBnkrotmatSidevY),a
 252+ 9F62 32 2D C0                             ld      (UBnkrotmatSidevZ),a
 253+ 9F65 C9                                   ret
 254+ 9F66
 255+ 9F66
 256+ 9F66              TidySub1:									;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
 257+ 9F66              		; b = regX on entry
 258+ 9F66              TIS1Prep:									;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
 259+ 9F66 08           		ex		af,af'
 260+ 9F67 78           		ld		a,b
 261+ 9F68 32 71 7F     		ld		(varQ),a
 262+ 9F6B 08           		ex		af,af'
 263+ 9F6C EE 80        		xor		$80							;	 flip sign of Acc
 264+ 9F6E CD E8 90     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
 265+ 9F71              ; USES 				A BC E
 266+ 9F71              ; DOES NOT USE		D HL
 267+ 9F71              Tis1Div96:							   		; .DVID96	\ Their comment A=A/96: answer is A*255/96
 268+ 9F71 4F           		ld		c,a							; Store sign bit in  ct (we use e reg for that)
 269+ 9F72 E6 80        		and		SignOnly8Bit						; ..
 270+ 9F74 5F           		ld		e,a							; ..
 271+ 9F75 79           		ld		a,c							; a = high byte again with sign bit cleared
 272+ 9F76 E6 7F        		and		SignMask8Bit							; ..
 273+ 9F78 06 FE        		ld		b,$FE						; slide counter T1
 274+ 9F7A              TIS1RollTLoop								; roll T1  clamp Acc to #96 for rotation matrix unity
 275+ 9F7A CB 27        		sla		a
 276+ 9F7C              		JumpIfALTNusng $60, TIS1SkipSub
 276+ 9F7C FE 60       >                        cp      $60
 276+ 9F7E DA 8B 9F    >                        jp		c, TIS1SkipSub
 277+ 9F81 DE 60        		sbc		a,$60							; subtract 96
 278+ 9F83 37           		scf
 279+ 9F84 CB 10        		rl		b							;  T1
 280+ 9F86 38 F2        		jr		c,TIS1RollTLoop
 281+ 9F88              TIS1KIPCont:
 282+ 9F88 78           		ld		a,b							;   T1
 283+ 9F89 B3           		or		e							;   restore T sign
 284+ 9F8A C9           		ret
 285+ 9F8B              TIS1SkipSub:
 286+ 9F8B B7           	or			a
 287+ 9F8C CB 10        	rl			b							; T rolled left to push bit out the end
 288+ 9F8E 38 EA        	jr			c,TIS1RollTLoop				; if we still have not hit the empty marker continue
 289+ 9F90 C3 88 9F     	jp			TIS1KIPCont
 290+ 9F93
 291+ 9F93              ;.TIDY	\ -> &4679 \ Orthogonalize rotation matrix that uses 0x60 as unity returns INWK(16,18,20) = INWK(12*18+14*20, 10*16+14*20, 10*16+12*18) / INWK(10,12,14)
 292+ 9F93              ; Ux,Uy,Uz = -(FyUy+FzUz, FxUx+FzUz, FxUx+FyUy)/ Fx,Fy,Fz
 293+ 9F93
 294+ 9F93
 295+ 9F93
 296+ 9F93
 297+ 9F93                          DISPLAY "TODO: look at note on TODO"
 298+ 9F93              TidyRotYSmall:
 299+ 9F93 CD BC A0     		call	CalcRoofvZ
 300+ 9F96 32 34 C0     		ld		(UBnkrotmatRoofvZ+1),a			; set roofvy hi?? Says roofz TODO
 301+ 9F99 C3 CD 9F     		jp		NormaliseRoofV
 302+ 9F9C
 303+ 9F9C              TidyRotXSmall:
 304+ 9F9C AF           		xor		a
 305+ 9F9D 47           		ld		b,a
 306+ 9F9E 3A 38 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev_y
 307+ 9FA1 E6 60        		and		%01100000
 308+ 9FA3 CA 93 9F     		jp		z,TidyRotYSmall
 309+ 9FA6 3A 3A C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
 310+ 9FA9 47           		ld		b,a							; b = regX for now
 311+ 9FAA 3A 32 C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
 312+ 9FAD CD 82 A0     		call	CalcRoofvY					; Set (roofvy= (nosev_x * roofv_x + nosev_z * roofv_z) / nosev_y, Q -= nosev_z
 313+ 9FB0 32 32 C0     		ld		(UBnkrotmatRoofvY+1),a			; set roofvy hi
 314+ 9FB3 C3 CD 9F     		jp		NormaliseRoofV
 315+ 9FB6              ; TIDY is broken
 316+ 9FB6
 317+ 9FB6
 318+ 9FB6              TIDY:
 319+ 9FB6
 320+ 9FB6              ORTHOGALISE:
 321+ 9FB6              ;-- NormaliseNosev
 322+ 9FB6 CD 19 9D     		call	CopyRotMatNoseVtoXX15
 323+ 9FB9 CD CC 99     		call	normaliseXX1596S7			; normalise z hi, its really TIS3
 324+ 9FBC CD 52 9D     		call	CopyXX15toRotMatNoseV
 325+ 9FBF              .CheckNXSmall:
 326+ 9FBF 3A 36 C0     		ld		a,(UBnkrotmatNosevX+1)
 327+ 9FC2 E6 60        		and		%01100000					; check top two magnitude bits
 328+ 9FC4 CA 9C 9F     		jp		z,TidyRotXSmall
 329+ 9FC7              .RotXIsBig:
 330+ 9FC7 CD 48 A0             call	CalcRoofvX
 331+ 9FCA 32 30 C0     		ld		(UBnkrotmatRoofvX+1),a    	; set roofvx hi
 332+ 9FCD              NormaliseRoofV:
 333+ 9FCD CD 2C 9D     		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 334+ 9FD0 CD CC 99     		call	normaliseXX1596S7			; normalise roof
 335+ 9FD3              ;calc sidev x
 336+ 9FD3 CD 6F 9D     		call	CopyXX15toRotMatRoofV		; get back normalised version
 337+ 9FD6 3A 36 C0     		ld		a,(UBnkrotmatNosevX+1)
 338+ 9FD9 32 71 7F     		ld		(varQ),a					; q = nosev_y
 339+ 9FDC 3A 34 C0     		ld		a,(UBnkrotmatRoofvZ+1)	     ;roov z
 340+ 9FDF CD 0B 9D     		call	RSequQmulA
 341+ 9FE2 3A 3A C0     		ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 342+ 9FE5 47           		ld		b,a							; b = regX for now
 343+ 9FE6 3A 32 C0     		ld		a,(UBnkrotmatRoofvY+1)	    ; roofv y
 344+ 9FE9 CD 66 9F     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 345+ 9FEC                      JumpIfAIsZero NormSideXNoNeg
 345+ 9FEC A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 345+ 9FED CA F2 9F    >                        jp	    z, NormSideXNoNeg
 346+ 9FF0 EE 80        		xor		$80							; flip a to get -sidev_x
 347+ 9FF2              NormSideXNoNeg:
 348+ 9FF2 32 2A C0     		ld		(UBnkrotmatSidevX+1),a
 349+ 9FF5              ;calc sidev y
 350+ 9FF5 3A 3A C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
 351+ 9FF8 32 71 7F     		ld		(varQ),a
 352+ 9FFB 3A 30 C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 353+ 9FFE CD 0B 9D     		call	RSequQmulA
 354+ A001 3A 36 C0     		ld		a,(UBnkrotmatNosevX+1)			        ; nosev x
 355+ A004 47           		ld		b,a							; b = regX for now
 356+ A005 3A 34 C0     		ld		a,(UBnkrotmatRoofvZ+1)			; roofv z
 357+ A008 CD 66 9F     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 358+ A00B                      JumpIfAIsZero NormSideYNoNeg
 358+ A00B A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 358+ A00C CA 11 A0    >                        jp	    z, NormSideYNoNeg
 359+ A00F EE 80        		xor		$80							; flip a to get -sidev_y
 360+ A011              NormSideYNoNeg:
 361+ A011 32 38 C0     		ld		(UBnkrotmatNosevY+1),a
 362+ A014              ;calc sidev z
 363+ A014 3A 36 C0     		ld		a,(UBnkrotmatNosevX+1)			; nosev x
 364+ A017 32 71 7F     		ld		(varQ),a
 365+ A01A 3A 32 C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
 366+ A01D CD 0B 9D     		call	RSequQmulA
 367+ A020 3A 38 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev y
 368+ A023 47           		ld		b,a							; b = regX for now
 369+ A024 3A 30 C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 370+ A027 CD 66 9F     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 371+ A02A                      JumpIfAIsZero NormSideZNoNeg
 371+ A02A A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 371+ A02B CA 30 A0    >                        jp	    z, NormSideZNoNeg
 372+ A02E EE 80        		xor		$80							; flip a to get -sidev_y
 373+ A030              NormSideZNoNeg:
 374+ A030 32 2C C0     		ld		(UBnkrotmatSidevY+1),a ;TODO SHoudl this be Y??
 375+ A033              .ClearLoBytes:
 376+ A033 21 35 C0     		ld		hl,UBnkrotmatNosevX
 377+ A036 06 09        		ld		b,9
 378+ A038 AF                   xor     a
 379+ A039              .ClearLoLoop:
 380+ A039 77           		ld		(hl),a						; zero out lo bytes
 381+ A03A 23           		inc		hl
 382+ A03B 23           		inc		hl
 383+ A03C 10 FB        		djnz	.ClearLoLoop
 384+ A03E CD 3F 9D     		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 385+ A041 CD CC 99     		call	normaliseXX1596S7			; normalise roof
 386+ A044              ;calc sidev x
 387+ A044 CD 8C 9D     		call	CopyXX15toRotMatSideV		; get back normalised version
 388+ A047
 389+ A047 C9           		ret
 390+ A048
 391+ A048
 392+ A048              CalcRoofvX:
 393+ A048              Tidy1RX:										; roofv_x´ = -(nosev_y´ * roofv_y + nosev_z´ * roofv_z) / nosev_x´
 394+ A048              		ldCopyByte UBnkrotmatNosevZ+1,varQ
 394+ A048 3A 3A C0    >                        ld       a,(UBnkrotmatNosevZ+1)
 394+ A04B 32 71 7F    >                        ld       (varQ),a
 395+ A04E 3A 34 C0     		ld		a,(UBnkrotmatRoofvZ+1)
 396+ A051 CD 0B 9D     		call	RSequQmulA						; rs = nosez hi * roofz hi
 397+ A054              		ldCopyByte UBnkrotmatNosevY+1,varQ
 397+ A054 3A 38 C0    >                        ld       a,(UBnkrotmatNosevY+1)
 397+ A057 32 71 7F    >                        ld       (varQ),a
 398+ A05A 3A 32 C0     		ld		a,(UBnkrotmatRoofvY+1)
 399+ A05D CD E8 90     		call	madXAequQmulAaddRS				; DE = nosey hi * roofy hi + rs
 400+ A060 7A           		ld		a,d
 401+ A061 E6 80        		and 	$80
 402+ A063 FD 67        		ld		iyh,a
 403+ A065              ;DEBUG		ld		c,a
 404+ A065 3A 36 C0     		ld		a,(UBnkrotmatNosevX+1)					; get nosev x sign
 405+ A068 4F           		ld		c,a								; temp save
 406+ A069 E6 80        		and		$80
 407+ A06B FD AC        		xor		iyh								; flip from saved multiply sign result
 408+ A06D FD 67        		ld		iyh,a							; save nosesev sign to iyh
 409+ A06F 79           		ld		a,c								; recover a
 410+ A070 E6 7F        		and		$7F								; a is unsigned nosev x
 411+ A072 42           		ld		b,d
 412+ A073 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 413+ A074 57           		ld		d,a								; de = nosev x hi
 414+ A075 1E 00        		ld		e,0
 415+ A077 CD 6C 96     		call	BC_Div_DE
 416+ A07A FD 7C        		ld		a,iyh							; get back sign from nosevx
 417+ A07C EE 80        		xor		$80								; flip sign
 418+ A07E E6 80        		and		$80								; keep sign bit only
 419+ A080 B0           		or		b
 420+ A081 C9           		ret
 421+ A082
 422+ A082
 423+ A082              CalcRoofvY:
 424+ A082              Tidy1RY:										; roofv_y´ = -(nosev_x´ * roofv_x + nosev_z´ * roofv_z) / nosev_y´
 425+ A082              		ldCopyByte UBnkrotmatNosevZ+1,varQ				;                  A        Q              RS
 425+ A082 3A 3A C0    >                        ld       a,(UBnkrotmatNosevZ+1)
 425+ A085 32 71 7F    >                        ld       (varQ),a
 426+ A088 3A 34 C0     		ld		a,(UBnkrotmatRoofvZ+1)
 427+ A08B CD 0B 9D     		call	RSequQmulA
 428+ A08E              		ldCopyByte UBnkrotmatNosevX+1,varQ
 428+ A08E 3A 36 C0    >                        ld       a,(UBnkrotmatNosevX+1)
 428+ A091 32 71 7F    >                        ld       (varQ),a
 429+ A094 3A 30 C0     		ld		a,(UBnkrotmatRoofvX+1)
 430+ A097 CD E8 90     		call	madXAequQmulAaddRS
 431+ A09A 7A           		ld		a,d
 432+ A09B E6 80        		and 	$80
 433+ A09D FD 67        		ld		iyh,a
 434+ A09F 3A 38 C0     		ld		a,(UBnkrotmatNosevY+1)					; get nosev x sign
 435+ A0A2 4F           		ld		c,a								; temp save
 436+ A0A3 E6 80        		and		$80
 437+ A0A5 FD AC        		xor		iyh								; flip from saved multiply sign result
 438+ A0A7 FD 67        		ld		iyh,a							; save nosesev sign to iyh
 439+ A0A9 79           		ld		a,c								; recover a
 440+ A0AA E6 7F        		and		$7F								; a is unsigned nosev x
 441+ A0AC 42           		ld		b,d
 442+ A0AD 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 443+ A0AE 57           		ld		d,a								; de = nosev x hi
 444+ A0AF 1E 00        		ld		e,0
 445+ A0B1 CD 6C 96     		call	BC_Div_DE
 446+ A0B4 FD 7C        		ld		a,iyh
 447+ A0B6 EE 80        		xor		$80
 448+ A0B8 E6 80        		and		$80
 449+ A0BA B0           		or		b
 450+ A0BB C9           		ret
 451+ A0BC
 452+ A0BC              CalcRoofvZ:
 453+ A0BC              Tidy1RZ:										; roofv_z´ = -(nosev_x´ * roofv_x + nosev_y´ * roofv_y) / nosev_z´
 454+ A0BC              		ldCopyByte UBnkrotmatNosevY+1,varQ
 454+ A0BC 3A 38 C0    >                        ld       a,(UBnkrotmatNosevY+1)
 454+ A0BF 32 71 7F    >                        ld       (varQ),a
 455+ A0C2 3A 32 C0     		ld		a,(UBnkrotmatRoofvY+1)
 456+ A0C5 CD 0B 9D     		call	RSequQmulA						; rs = NOSEy * ROOFy
 457+ A0C8              		ldCopyByte UBnkrotmatNosevX+1,varQ
 457+ A0C8 3A 36 C0    >                        ld       a,(UBnkrotmatNosevX+1)
 457+ A0CB 32 71 7F    >                        ld       (varQ),a
 458+ A0CE 3A 30 C0     		ld		a,(UBnkrotmatRoofvX+1)
 459+ A0D1 CD E8 90     		call	madXAequQmulAaddRS				; de (A,ixl) = NOSEx * ROOFx + RS
 460+ A0D4 7A           		ld		a,d
 461+ A0D5 E6 80        		and 	$80
 462+ A0D7 FD 67        		ld		iyh,a
 463+ A0D9 3A 3A C0     		ld		a,(UBnkrotmatNosevZ+1)					; get nosev x sign
 464+ A0DC 4F           		ld		c,a								; temp save
 465+ A0DD E6 80        		and		$80
 466+ A0DF FD AC        		xor		iyh								; flip from saved multiply sign result
 467+ A0E1 FD 67        		ld		iyh,a							; save nosesev sign to iyh
 468+ A0E3 79           		ld		a,c								; recover a
 469+ A0E4 E6 7F        		and		$7F								; a is unsigned nosev x
 470+ A0E6 42           		ld		b,d
 471+ A0E7 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 472+ A0E8 57           		ld		d,a								; de = nosev x hi
 473+ A0E9 1E 00        		ld		e,0
 474+ A0EB CD 6C 96     		call	BC_Div_DE
 475+ A0EE FD 7C        		ld		a,iyh
 476+ A0F0 EE 80        		xor		$80
 477+ A0F2 E6 80        		and		$80
 478+ A0F4 B0           		or		b
 479+ A0F5 C9           		ret
 480+ A0F6
# file closed: ./Maths/Utilities/tidy.asm
 659  A0F6                  INCLUDE "./Maths/Utilities/LL28AequAmul256DivD.asm"
# file opened: ./Maths/Utilities/LL28AequAmul256DivD.asm
   1+ A0F6
   2+ A0F6              LL28Amul256DivD:        JumpIfAGTENusng  d, .Ll28Exit255
   2+ A0F6 BA          >                        cp     d
   2+ A0F7 D2 15 A1    >                        jp		nc,.Ll28Exit255
   3+ A0FA 1E FE                                ld      e,%11111110                 ; Set R to have bits 1-7 set, so we can rotate through 7
   4+ A0FC CB 27        .LL31:                  sla     a
   5+ A0FE 38 0D                                jr      c,.LL29
   6+ A100                                      JumpIfALTNusng  d, .SkipSub         ; will jump if carry set, so we need to reset on the rol
   6+ A100 BA          >                        cp      d
   6+ A101 DA 06 A1    >                        jp		c, .SkipSub
   7+ A104 92                                   sub     d
   8+ A105                                      ClearCarryFlag                      ; reset clarry as it will be complimented for rotate as 6502 does carry flags inverted
   8+ A105 B7          >                        or a
   9+ A106 3F           .SkipSub:               ccf                                 ; if we did the subtract the carry will be clear so we need to invert to roll in.
  10+ A107 CB 13                                rl      e
  11+ A109 38 F1                                jr      c,.LL31
  12+ A10B 7B                                   ld      a,e
  13+ A10C C9                                   ret
  14+ A10D 92           .LL29:                  sub     d                           ; A >= Q, so set A = A - Q
  15+ A10E 37                                   scf                                 ; Set the C flag to rotate into the result in R
  16+ A10F CB 13                                rl      e                           ; rotate counter e left
  17+ A111 38 E9                                jr      c,.LL31                     ; if a bit was spat off teh end then loop
  18+ A113 7B                                   ld      a,e                         ; stick result in a
  19+ A114 C9                                   ret
  20+ A115 3E FF        .Ll28Exit255:           ld  a,255                           ; Fail with FF as result
  21+ A117 C9                                   ret
  22+ A118
  23+ A118              ;-- Name: LL28 Calculate R = 256 * A / Q
  24+ A118              ;-- LL28+4              Skips the A >= Q check and always returns with C flag cleared, so this can be called if we know the division will work
  25+ A118              ;-- LL31                Skips the A >= Q check and does not set the R counter, so this can be used for jumping straight into the division loop if R is already set to 254 and we know the division will work
  26+ A118              ;   Reg mapping 6502  Z80
  27+ A118              ;               a     a
  28+ A118              ;               b     x
  29+ A118              ;               c     q
  30+ A118              ;               d     r
  31+ A118              ;
  32+ A118 21 B6 F1     LL28Amul256DivD_6502:   ld      hl,Qvar                 ; CMP Q                  \ If A >= Q, then the answer will not fit in one byte,
  33+ A11B 4E                                   ld      c,(hl)                  ; using c as Q var
  34+ A11C B9                                   cp      c
  35+ A11D                                      FlipCarryFlag
  35+ A11D 3F          >                        ccf
  36+ A11E DA 46 A1                             jp      c, .LL2_6502            ; BCS LL2                \ so jump to LL2 to return 255
  37+ A121 06 FE                                ld      b,$FE                   ; LDX #%11111110         \ Set R to have bits 1-7 set, so we can rotate through 7 loop iterations, getting a 1 each time, and then we use b as Rvar
  38+ A123 CB 27        .LL31_6502:             sla     a                       ; ASL A                  \ Shift A to the left
  39+ A125 DA 3A A1                             jp      c,.LL29_6502            ; BCS LL29               \ If bit 7 of A was set, then jump straight to the subtraction
  40+ A128                                      FlipCarryFlag                   ;                          If A < N, then C flag is set.
  40+ A128 3F          >                        ccf
  41+ A129                                      JumpIfALTNusng c, .LL31_SKIPSUB_6502 ; CMP Q              \ If A < Q, skip the following subtraction
  41+ A129 B9          >                        cp      c
  41+ A12A DA 2F A1    >                        jp		c, .LL31_SKIPSUB_6502
  42+ A12D                                                                      ; BCC P%+4
  43+ A12D 91                                   sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  44+ A12E                                      ClearCarryFlag
  44+ A12E B7          >                        or a
  45+ A12F              .LL31_SKIPSUB_6502:     FlipCarryFlag
  45+ A12F 3F          >                        ccf
  46+ A130 CB 10                                rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  47+ A132 DA 23 A1                             jp      c, .LL31_6502           ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  48+ A135 78                                   ld      a,b
  49+ A136 32 B7 F1                             ld      (Rvar),a
  50+ A139 C9                                   ret                             ; RTS                    \ R left with remainder of division
  51+ A13A 91           .LL29_6502:             sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  52+ A13B                                      SetCarryFlag                    ; SEC                    \ Set the C flag to rotate into the result in R
  52+ A13B 37          >                        scf
  53+ A13C CB 10                                rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  54+ A13E DA 23 A1                             jp      c, .LL31_6502           ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  55+ A141 78                                   ld      a,b                     ; RTS                    \ Return from the subroutine with R containing the
  56+ A142 32 B7 F1                             ld      (Rvar),a                ; .
  57+ A145 C9                                   ret                             ; .                      \ remainder of the division
  58+ A146 3E FF        .LL2_6502:              ld      a,$FF                   ; LDA #255               \ The division is very close to 1, so return the closest
  59+ A148 32 B7 F1                             ld      (Rvar),a                ; STA R                  \ possible answer to 256, i.e. R = 255
  60+ A14B                                      SetCarryFlag                    ; we failed so need carry flag set
  60+ A14B 37          >                        scf
  61+ A14C C9                                   ret                             ; RTS                    \ Return from the subroutine
  62+ A14D
  63+ A14D
  64+ A14D 21 71 7F     LL28Amul256DivQ_6502:   ld      hl,varQ                 ; CMP Q                  \ If A >= Q, then the answer will not fit in one byte,
  65+ A150 4E                                   ld      c,(hl)                  ; using c as Q var
  66+ A151 B9                                   cp      c
  67+ A152                                      FlipCarryFlag
  67+ A152 3F          >                        ccf
  68+ A153 DA 7B A1                             jp      c, .LL2_6502            ; BCS LL2                \ so jump to LL2 to return 255
  69+ A156 06 FE                                ld      b,$FE                   ; LDX #%11111110         \ Set R to have bits 1-7 set, so we can rotate through 7 loop iterations, getting a 1 each time, and then we use b as Rvar
  70+ A158 CB 27        .LL31_6502:             sla     a                       ; ASL A                  \ Shift A to the left
  71+ A15A DA 6F A1                             jp      c,.LL29_6502            ; BCS LL29               \ If bit 7 of A was set, then jump straight to the subtraction
  72+ A15D                                      FlipCarryFlag                   ;                          If A < N, then C flag is set.
  72+ A15D 3F          >                        ccf
  73+ A15E                                      JumpIfALTNusng c, .LL31_SKIPSUB_6502 ; CMP Q              \ If A < Q, skip the following subtraction
  73+ A15E B9          >                        cp      c
  73+ A15F DA 64 A1    >                        jp		c, .LL31_SKIPSUB_6502
  74+ A162                                                                      ; BCC P%+4
  75+ A162 91                                   sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  76+ A163                                      ClearCarryFlag
  76+ A163 B7          >                        or a
  77+ A164              .LL31_SKIPSUB_6502:     FlipCarryFlag
  77+ A164 3F          >                        ccf
  78+ A165 CB 10                                rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  79+ A167 DA 58 A1                             jp      c, .LL31_6502           ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  80+ A16A 78                                   ld      a,b
  81+ A16B 32 72 7F                             ld      (varR),a
  82+ A16E C9                                   ret                             ; RTS                    \ R left with remainder of division
  83+ A16F 91           .LL29_6502:             sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  84+ A170                                      SetCarryFlag                    ; SEC                    \ Set the C flag to rotate into the result in R
  84+ A170 37          >                        scf
  85+ A171 CB 10                                rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  86+ A173 DA 58 A1                             jp      c, .LL31_6502           ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  87+ A176 78                                   ld      a,b                     ; RTS                    \ Return from the subroutine with R containing the
  88+ A177 32 72 7F                             ld      (varR),a                ; .
  89+ A17A C9                                   ret                             ; .                      \ remainder of the division
  90+ A17B 3E FF        .LL2_6502:              ld      a,$FF                   ; LDA #255               \ The division is very close to 1, so return the closest
  91+ A17D 32 72 7F                             ld      (varR),a                ; STA R                  \ possible answer to 256, i.e. R = 255
  92+ A180                                      SetCarryFlag                    ; we failed so need carry flag set
  92+ A180 37          >                        scf
  93+ A181 C9                                   ret                             ; RTS                    \ Return from the subroutine
  94+ A182
# file closed: ./Maths/Utilities/LL28AequAmul256DivD.asm
 660  A182                  INCLUDE "./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm"
# file opened: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
   1+ A182              XAequMinusXAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
   2+ A182              TIS1:
   3+ A182 08           		ex		af,af'
   4+ A183 3A 43 7E     		ld		a,(regX)
   5+ A186 47           		ld		b,a
   6+ A187 08           		ex		af,af'
   7+ A188              BAequMinusBAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
   8+ A188 08           		ex		af,af'
   9+ A189 78           		ld		a,b
  10+ A18A 32 71 7F     		ld		(varQ),a
  11+ A18D 08           		ex		af,af'
  12+ A18E EE 80        		xor		$80							;	 flip sign of Acc
  13+ A190 CD E8 90     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
  14+ A193              ; USES 				A BC E
  15+ A193              ; DOES NOT USE		D HL
  16+ A193              Div96:										; .DVID96	\ Their comment A=A/96: answer is A*255/96
  17+ A193 47           		ld		b,a
  18+ A194 E6 80        		and		$80							;	hi sign
  19+ A196 5F           		ld		e,a							;   e = varT
  20+ A197 78           		ld		a,b
  21+ A198 E6 7F        		and		$7F							;	hi A7
  22+ A19A 06 FE        		ld		b,$FE						;   slide counter
  23+ A19C 48           		ld		c,b							;   c == T1 ::  T1
  24+ A19D              .DVL3:										;   roll T1  clamp Acc to #96 for rotation matrix unity
  25+ A19D CB 27        		sla		a
  26+ A19F FE 60        		cp		$60							; max 96
  27+ A1A1 30 02        		jr		nc,.DV4
  28+ A1A3 DE 60        		sbc		a,$60							;  SBC #&60
  29+ A1A5              .DV4:										; skip subtraction
  30+ A1A5 CB 11        		rl		c							;  T1
  31+ A1A7 38 F4        		jr		c,.DVL3
  32+ A1A9 79           		ld		a,c							;   T1
  33+ A1AA B3           		or		e							;   restore T sign
  34+ A1AB C9           		ret
  35+ A1AC
# file closed: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
 661  A1AC
 662  A1AC                  INCLUDE "./GameEngine/Tactics.asm"
# file opened: ./GameEngine/Tactics.asm
   1+ A1AC
   2+ A1AC                                      DEFINE TACTICSDEBUG 1
   3+ A1AC              ;                       DEFINE ALWAYSANGRY 1
   4+ A1AC              ;                        DEFINE TARGETDEBUG 1
   5+ A1AC              MISSILEMAXPITCH         equ 3
   6+ A1AC              MISSILEMINPITCH         equ -3
   7+ A1AC              MISSILEMAXROLL          equ 3
   8+ A1AC              MISSILEMINROLL          equ -3
   9+ A1AC              ;Ship Tactics
  10+ A1AC              ;ShipTypeNormal          equ 0
  11+ A1AC              ;ShipTypeMissile         equ 1
  12+ A1AC              ;ShipTypeStation         equ 2
  13+ A1AC              ;ShipTypeJunk            equ 3
  14+ A1AC              ;ShipTypeScoopable       equ 4         ; a sub set of junk
  15+ A1AC              ; To be added
  16+ A1AC              ;ShipTypeTargoid
  17+ A1AC              ;ShipTypeHermit
  18+ A1AC              ; Maybe add the followign with ai flags changing in memory shiptype
  19+ A1AC              ;ShipTypePirate
  20+ A1AC              ;ShipTypeBountyHunter
  21+ A1AC              ;ShipTypeTrader
  22+ A1AC              ;ShipType.....
  23+ A1AC              ;ShipTypeMissionTypeA
  24+ A1AC              ;ShipTypeMissionTypeB
  25+ A1AC              ;ShipTypeMissionTypeETC
  26+ A1AC              ;ShipTypeNoAI
  27+ A1AC
  28+ A1AC
  29+ A1AC
  30+ A1AC 61 A7 2D A4  ShipAIJumpTable:      DW    NormalAI,   MissileAIV3,  StationAI,  JunkAI,     ScoopableAI
  30+ A1B0 DF A1 E0 A1
  30+ A1B4 E1 A1
  31+ A1B6 E2 A1 E3 A1                        DW    ThargoidAI, NoAI,       NoAI,       NoAI,       NoAI
  31+ A1BA E3 A1 E3 A1
  31+ A1BE E3 A1
  32+ A1C0              ShipAiJumpTableMax:   EQU ($ - ShipAIJumpTable)/2
  33+ A1C0
  34+ A1C0
  35+ A1C0
  36+ A1C0              ;----------------------------------------------------------------------------------------------------------------------------------
  37+ A1C0              ; Main entry point to tactics. Every time it will do a a tidy and the do AI logic
  38+ A1C0              UpdateShip:             ;  call    DEBUGSETNODES ;       call    DEBUGSETPOS
  39+ A1C0 21 2A 69                            ld      hl,TidyCounter
  40+ A1C3 35                                  dec     (hl)
  41+ A1C4                                     DISPLAY "TODO: SEE IF THIS IS AN ISSUE"
  42+ A1C4 CC 05 9E                            call     z,TidyUBnk  ;TODO SEE IF THIS IS AN ISSUE"
  43+ A1C7                                     ; This shoudl be a call nz to tidy *****ret     nz
  44+ A1C7 3E 10                               ld      a,16
  45+ A1C9 32 2A 69                            ld      (TidyCounter),a
  46+ A1CC                                     ;call    TidyUBnk
  47+ A1CC                                     ; add AI in here too
  48+ A1CC 3A 0E C4                            ld       a,(ShipTypeAddr)
  49+ A1CF                                                 DISPLAY "TODO: capture duff jumps"
  50+ A1CF                                     ReturnIfAGTEusng ShipAiJumpTableMax              ; TODO capture duff jumps whilst debugging in case a new shjip type code is added
  50+ A1CF FE 0A       >                        cp    ShipAiJumpTableMax
  50+ A1D1 D0          >                        ret	 nc
  51+ A1D2 21 AC A1                            ld       hl,ShipAIJumpTable
  52+ A1D5 ED 31                               add      hl,a
  53+ A1D7 ED 31                               add      hl,a
  54+ A1D9 7E                                  ld       a,(hl)                                  ; contrary to the name
  55+ A1DA 23                                  inc      hl                                      ; jp (hl) is really
  56+ A1DB 66                                  ld       h,(hl)                                  ; jp hl
  57+ A1DC 6F                                  ld       l,a                                     ;
  58+ A1DD E9                                  jp       hl                                      ; Follow the AI Jump Table
  59+ A1DE C9                                  ret                                              ; not needed as jp handles this
  60+ A1DF
  61+ A1DF
  62+ A1DF
  63+ A1DF              ; used  when no pre-checks are requrired, e.g. if forcing a space station from main loop
  64+ A1DF
  65+ A1DF
  66+ A1DF C9           StationAI:              ret
  67+ A1E0 C9           JunkAI:                 ret
  68+ A1E1 C9           ScoopableAI:            ret
  69+ A1E2 C9           ThargoidAI:             ret
  70+ A1E3 C9           NoAI:                   ret
  71+ A1E4              ;----------------------------------------------------------------------------------------------------------------------------------
  72+ A1E4              CalculateAgression:     IFDEF   ALWAYSANGRY
  73+ A1E4 ~                                        jp  UltraHostile
  74+ A1E4                                      ENDIF
  75+ A1E4 3A 10 C4                             ld      a,(ShipAIFlagsAddr)
  76+ A1E7 47                                   ld      b,a
  77+ A1E8 E6 02                                and     %00000010
  78+ A1EA 20 20                                jr      nz,.UltraHostile
  79+ A1EC 78                                   ld      a,b
  80+ A1ED E6 F0                                and     %11110000                               ; if it can can anger a fighter bay then generally more hostile as implies its a large ship
  81+ A1EF 21 5D C0                             ld      hl,UBnkMissilesLeft                     ; more missiles more agression
  82+ A1F2 B6                                   or      (hl)
  83+ A1F3 47                                   ld      b,a
  84+ A1F4 3A 0F C4                             ld      a,(ShipNewBitsAddr)
  85+ A1F7 E6 4E                                and     %01001110                               ; We look at if its a bounty hunter, hostile already, pirate and cop
  86+ A1F9 B0                                   or      b
  87+ A1FA 47                                   ld      b,a
  88+ A1FB 3A 54 C0                             ld      a,(UBnkShipAggression)
  89+ A1FE                                      JumpIfALTNusng 64,.NotAlreadyAgressive
  89+ A1FE FE 40       >                        cp      64
  89+ A200 DA 07 A2    >                        jp		c, .NotAlreadyAgressive
  90+ A203 78                                   ld      a,b
  91+ A204 F6 80                                or      %10000000                               ; if its already at least 64 agressive then likley to stay so
  92+ A206 47                                   ld      b,a
  93+ A207 78           .NotAlreadyAgressive:   ld      a,b
  94+ A208 32 54 C0                             ld      (UBnkShipAggression),a
  95+ A20B C9                                   ret
  96+ A20C 3E FF        .UltraHostile:          ld      a,$FF
  97+ A20E 32 54 C0                             ld      (UBnkShipAggression),a
  98+ A211 C9                                   ret
  99+ A212              ;----------------------------------------------------------------------------------------------------------------------------------
 100+ A212              ; set angry if possible, if its an innocent then flag the space station to get angry
 101+ A212 3A 0F C4     MakeHostile:            ld      a,(ShipNewBitsAddr)                     ; Check bit 5 of newb flags
 102+ A215                                      ;break
 103+ A215                                      JumpIfMemEqNusng ShipTypeAddr, ShipTypeStation, .SetNewbHostile
 103+ A215 3A 0E C4    >                        ld  a,(ShipTypeAddr)
 103+ A218 FE 02       >                        cp  ShipTypeStation
 103+ A21A CA 39 A2    >                        jp  z,.SetNewbHostile
 104+ A21D E6 20        .ItsNotAStation:        and     ShipIsBystander                         ; check if space station present if its a bystander
 105+ A21F C4 73 A2                             call    nz, SetStationHostile                   ; Set Space Station if present, Angry
 106+ A222 3A 55 C0                             ld      a,(UBnkaiatkecm)                        ; get AI data
 107+ A225                                      ReturnOnBitClear a, ShipAIEnabledBitNbr         ; if 0 then no AI attached so it can't get angry
 107+ A225 CB 7F       >                        bit 	ShipAIEnabledBitNbr,a
 107+ A227 C8          >                        ret		z
 108+ A228 4F                                   ld      c,a                                     ; Copy to c in case we need it later
 109+ A229                                      SetMemToN UBnkAccel, 2                          ; set accelleration to 2 to speed up
 109+ A229 3E 02       >                        ld      a,2
 109+ A22B 32 47 C0    >                        ld      (UBnkAccel),a
 110+ A22E CB 27                                sla     a                                       ; set pitch to 4
 111+ A230 32 4A C0                             ld      (UBnkRotZCounter),a                     ; .
 112+ A233 3A 10 C4                             ld      a,(ShipAIFlagsAddr)
 113+ A236                                      ReturnIfBitMaskClear ShipCanAnger
 113+ A236 E6 80       >                        and     ShipCanAnger
 113+ A238 C8          >                        ret     z
 114+ A239 CD 1B C6     .SetNewbHostile:        call    SetShipHostile
 115+ A23C C9                                   ret
 116+ A23D
 117+ A23D                          DISPLAY "TODO: Missile Did Hit Us"
 118+ A23D              ;----------------------------------------------------------------------------------------------------------------------------------
 119+ A23D C9           MissileDidHitUs:        ret ; TODO
 120+ A23E
 121+ A23E              ;----------------------------------------------------------------------------------------------------------------------------------
 122+ A23E              PlayerHitByMissile:     MMUSelectLayer1
 122+ A23E ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 123+ A242 3E 05                                ld      a,L1ColourInkCyan
 124+ A244 CD B4 E0                             call    l1_set_border
 125+ A247 3A 3C C0                             ld      a,(UBnkMissileBlastDamage)
 126+ A24A 47                                   ld      b,a                                     ; b = damage
 127+ A24B 3A 28 C0                             ld      a,(UBnkzsgn)
 128+ A24E E6 80                                and     $80
 129+ A250 20 0A                                jr      nz,.HitRear
 130+ A252 3A F2 81     .HitFront:              ld      a,(ForeShield)
 131+ A255 CD EB 64                             call    ApplyDamage
 132+ A258 32 F2 81                             ld      (ForeShield),a
 133+ A25B C9                                   ret
 134+ A25C 3A F3 81     .HitRear:               ld      a,(AftShield)
 135+ A25F CD EB 64                             call    ApplyDamage
 136+ A262 32 F3 81                             ld      (AftShield),a
 137+ A265                                                  DISPLAY "TODO: Set up blast radius"
 138+ A265 C9                                   ret; TODO , do hit set up blast radius etc
 139+ A266              ;----------------------------------------------------------------------------------------------------------------------------------
 140+ A266              MissileHitShipA:        MMUSelectLayer1
 140+ A266 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 141+ A26A 3E 02                                ld      a,L1ColourInkRed
 142+ A26C CD B4 E0                             call    l1_set_border
 143+ A26F CD 46 C7                             call    UnivExplodeShip
 144+ A272                                                  DISPLAY "TODO:  hit ship do explosion"
 145+ A272 C9                                   ret; TODO hit ship do explosion, check for near by and if player is near and missile type logic, e.g. AP or HE
 146+ A273              ;----------------------------------------------------------------------------------------------------------------------------------
 147+ A273 3A 40 C0     SetStationHostile:      ld      a,(UBnkShipUnivBankNbr)                     ; save current bank
 148+ A276 FD 67                                ld      iyh,a
 149+ A278                                      MMUSelectSpaceStation ; UniverseN 0                            ; space station is always 0
 149+ A278 ED 91 56 46 >                     nextreg SpaceStationMMU,         BankSpaceStationData
 150+ A27C CD 1B C6                             call    SetShipHostile
 151+ A27F FD 7C                                ld      a,iyh                                   ; get prev bank back
 152+ A281                                      MMUSelectUniverseA                              ;
 152+ A281 C6 46       >                     add    a,BankUNIVDATA0
 152+ A283 ED 92 56    >                     nextreg UniverseMMU,       a
 153+ A286 C9                                   ret
 154+ A287
 155+ A287              ;----------------------------------------------------------------------------------------------------------------------------------
 156+ A287              CheckMissileBlastInit:  ZeroA
 156+ A287 AF          >                        xor a
 157+ A288 32 43 81                             ld      (CurrentMissileCheck),a
 158+ A28B 21 20 C0                             ld      hl,UBnkxlo                      ; Copy Blast Coordinates
 159+ A28E 01 0C 00                             ld      bc,12                           ; and Damage stats
 160+ A291 11 4A 80                             ld      de,MissileXPos
 161+ A294 ED B0                                ldir
 162+ A296                                      ZeroA                                   ; we have processd enque request
 162+ A296 AF          >                        xor a
 163+ A297 32 44 C0                             ld      (UBnkMissleHitToProcess),a      ;
 164+ A29A CD 57 A3                             call    CheckIfBlastHitUs               ; If we are in Range
 165+ A29D DC 3D A2                             call    c, MissileDidHitUs              ; Then we get hit
 166+ A2A0 C9                                   ret
 167+ A2A1
 168+ A2A1              ;----------------------------------------------------------------------------------------------------------------------------------
 169+ A2A1              CheckPointRange:        MACRO   ShipPos, ShipSign, MissilePos, MissileSign
 170+ A2A1 ~                                    ld      a,(MissilePos)                      ; check X Coord
 171+ A2A1 ~                                    ld      hl,(ShipSign)
 172+ A2A1 ~                                    xor     (hl)
 173+ A2A1 ~                                    and     SignOnly8Bit
 174+ A2A1 ~                                    ld      hl,(ShipPos)
 175+ A2A1 ~                                    ld      de,(MissilePos)
 176+ A2A1 ~                                    jr      z,.SignsDiffernt
 177+ A2A1 ~            .XSame:                 and     a
 178+ A2A1 ~                                    sbc     hl,de                               ; distance = Ship X - Missile X
 179+ A2A1 ~                                    JumpIfPositive      .CheckDiff              ; if result was -ve
 180+ A2A1 ~                                    NegHL
 181+ A2A1 ~                                    jp      .CheckDiff
 182+ A2A1 ~            .SignsDiffernt:         add     hl,de
 183+ A2A1 ~                                    ReturnIfNegative                            ; if we overflowed then return
 184+ A2A1 ~            .CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
 185+ A2A1 ~                                    ReturnIfANotZero
 186+ A2A1 ~                                    ld      a,l
 187+ A2A1 ~                                    and     a
 188+ A2A1 ~                                    ReturnIfAGTEMemusng   CurrentMissileBlastRange
 189+ A2A1                                      ENDM
 190+ A2A1              ;...................................................................
 191+ A2A1              ; We only do one test per loop for spreading the load of work
 192+ A2A1 3A 43 81     CheckMissileBlastLoop:  ld      a,(CurrentMissileCheck)
 193+ A2A4                                      ReturnIfAGTENusng   UniverseSlotListSize
 193+ A2A4 FE 0C       >                        cp    UniverseSlotListSize
 193+ A2A6 D0          >                        ret	 nc
 194+ A2A7 FD 6F                                ld      iyl,a
 195+ A2A9 3C                                   inc     a                                   ; update for next slot so re can fast return on distance checks
 196+ A2AA 32 43 81                             ld      (CurrentMissileCheck),a
 197+ A2AD                                      ReturnIfSlotAEmpty
 197+ A2AD 21 45 81    >                        ld      hl,UniverseSlotList
 197+ A2B0 ED 31       >                        add     hl,a
 197+ A2B2 7E          >                        ld      a,(hl)
 197+ A2B3 3C          >                        inc     a
 197+ A2B4 C8          >                        ret     z           ; if slot was ff inc would make it 0
 197+ A2B5 3D          >                        dec     a           ; get original value back for later
 198+ A2B6 CD A0 84                             call    IsSpaceStationPresent               ; If its a station its imune to missiles
 199+ A2B9 D8                                   ret     c                                   ; if we have a special mission to kill a staion then its type won't be space station for game logic
 200+ A2BA 3A 52 C0                             ld      a,(UBnkexplDsp)                     ; Don't explode a ship twice
 201+ A2BD E6 20                                and     ShipExploding                       ;
 202+ A2BF                                      ReturnIfNotZero                             ;
 202+ A2BF C0          >                        ret     nz
 203+ A2C0 3A 6B 80                             ld      a,(CurrentMissileBlastRange)
 204+ A2C3 FD 67                                ld      iyh,a                               ; iyh = missile blast depending on type
 205+ A2C5 FD 7D        .CheckRange:            ld      a,iyl                               ; now page in universe data
 206+ A2C7                                      MMUSelectUniverseA
 206+ A2C7 C6 46       >                     add    a,BankUNIVDATA0
 206+ A2C9 ED 92 56    >                     nextreg UniverseMMU,       a
 207+ A2CC                                      CheckPointRange UBnkxlo, UBnkxsgn, MissileXPos, MissileXSgn  ; its a square but its good enough
 207+ A2CC 3A 4A 80    >                        ld      a,(MissileXPos)                      ; check X Coord
 207+ A2CF 2A 22 C0    >                        ld      hl,(UBnkxsgn)
 207+ A2D2 AE          >                        xor     (hl)
 207+ A2D3 E6 80       >                        and     SignOnly8Bit
 207+ A2D5 2A 20 C0    >                        ld      hl,(UBnkxlo)
 207+ A2D8 ED 5B 4A 80 >                        ld      de,(MissileXPos)
 207+ A2DC 28 0F       >                        jr      z,.SignsDiffernt
 207+ A2DE A7          >.XSame:                 and     a
 207+ A2DF ED 52       >                        sbc     hl,de                               ; distance = Ship X - Missile X
 207+ A2E1             >                        JumpIfPositive      .CheckDiff              ; if result was -ve
 207+ A2E1 F2 EF A2    >                        jp		p, .CheckDiff
 207+ A2E4             >                        NegHL
 207+ A2E4 AF          >                    xor a
 207+ A2E5 95          >                    sub l
 207+ A2E6 6F          >                    ld l,a
 207+ A2E7 9F          >                    sbc a,a
 207+ A2E8 94          >                    sub h
 207+ A2E9 67          >                    ld h,a
 207+ A2EA C3 EF A2    >                        jp      .CheckDiff
 207+ A2ED 19          >.SignsDiffernt:         add     hl,de
 207+ A2EE             >                        ReturnIfNegative                            ; if we overflowed then return
 207+ A2EE F8          >                        ret     m
 207+ A2EF 7C          >.CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
 207+ A2F0             >                        ReturnIfANotZero
 207+ A2F0 A7          >                        and     a
 207+ A2F1 C0          >                        ret     nz
 207+ A2F2 7D          >                        ld      a,l
 207+ A2F3 A7          >                        and     a
 207+ A2F4             >                        ReturnIfAGTEMemusng   CurrentMissileBlastRange
 207+ A2F4 21 6B 80    >                        ld      hl,CurrentMissileBlastRange
 207+ A2F7 BE          >                        cp      (hl)
 207+ A2F8 D0          >                        ret	    nc
 208+ A2F9                                      CheckPointRange UBnkylo, UBnkysgn, MissileYPos, MissileYSgn
 208+ A2F9 3A 4D 80    >                        ld      a,(MissileYPos)                      ; check X Coord
 208+ A2FC 2A 25 C0    >                        ld      hl,(UBnkysgn)
 208+ A2FF AE          >                        xor     (hl)
 208+ A300 E6 80       >                        and     SignOnly8Bit
 208+ A302 2A 23 C0    >                        ld      hl,(UBnkylo)
 208+ A305 ED 5B 4D 80 >                        ld      de,(MissileYPos)
 208+ A309 28 0F       >                        jr      z,.SignsDiffernt
 208+ A30B A7          >.XSame:                 and     a
 208+ A30C ED 52       >                        sbc     hl,de                               ; distance = Ship X - Missile X
 208+ A30E             >                        JumpIfPositive      .CheckDiff              ; if result was -ve
 208+ A30E F2 1C A3    >                        jp		p, .CheckDiff
 208+ A311             >                        NegHL
 208+ A311 AF          >                    xor a
 208+ A312 95          >                    sub l
 208+ A313 6F          >                    ld l,a
 208+ A314 9F          >                    sbc a,a
 208+ A315 94          >                    sub h
 208+ A316 67          >                    ld h,a
 208+ A317 C3 1C A3    >                        jp      .CheckDiff
 208+ A31A 19          >.SignsDiffernt:         add     hl,de
 208+ A31B             >                        ReturnIfNegative                            ; if we overflowed then return
 208+ A31B F8          >                        ret     m
 208+ A31C 7C          >.CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
 208+ A31D             >                        ReturnIfANotZero
 208+ A31D A7          >                        and     a
 208+ A31E C0          >                        ret     nz
 208+ A31F 7D          >                        ld      a,l
 208+ A320 A7          >                        and     a
 208+ A321             >                        ReturnIfAGTEMemusng   CurrentMissileBlastRange
 208+ A321 21 6B 80    >                        ld      hl,CurrentMissileBlastRange
 208+ A324 BE          >                        cp      (hl)
 208+ A325 D0          >                        ret	    nc
 209+ A326                                      CheckPointRange UBnkzlo, UBnkzsgn, MissileZPos, MissileZSgn
 209+ A326 3A 50 80    >                        ld      a,(MissileZPos)                      ; check X Coord
 209+ A329 2A 28 C0    >                        ld      hl,(UBnkzsgn)
 209+ A32C AE          >                        xor     (hl)
 209+ A32D E6 80       >                        and     SignOnly8Bit
 209+ A32F 2A 26 C0    >                        ld      hl,(UBnkzlo)
 209+ A332 ED 5B 50 80 >                        ld      de,(MissileZPos)
 209+ A336 28 0F       >                        jr      z,.SignsDiffernt
 209+ A338 A7          >.XSame:                 and     a
 209+ A339 ED 52       >                        sbc     hl,de                               ; distance = Ship X - Missile X
 209+ A33B             >                        JumpIfPositive      .CheckDiff              ; if result was -ve
 209+ A33B F2 49 A3    >                        jp		p, .CheckDiff
 209+ A33E             >                        NegHL
 209+ A33E AF          >                    xor a
 209+ A33F 95          >                    sub l
 209+ A340 6F          >                    ld l,a
 209+ A341 9F          >                    sbc a,a
 209+ A342 94          >                    sub h
 209+ A343 67          >                    ld h,a
 209+ A344 C3 49 A3    >                        jp      .CheckDiff
 209+ A347 19          >.SignsDiffernt:         add     hl,de
 209+ A348             >                        ReturnIfNegative                            ; if we overflowed then return
 209+ A348 F8          >                        ret     m
 209+ A349 7C          >.CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
 209+ A34A             >                        ReturnIfANotZero
 209+ A34A A7          >                        and     a
 209+ A34B C0          >                        ret     nz
 209+ A34C 7D          >                        ld      a,l
 209+ A34D A7          >                        and     a
 209+ A34E             >                        ReturnIfAGTEMemusng   CurrentMissileBlastRange
 209+ A34E 21 6B 80    >                        ld      hl,CurrentMissileBlastRange
 209+ A351 BE          >                        cp      (hl)
 209+ A352 D0          >                        ret	    nc
 210+ A353 CD 35 C7                             call    ShipMissileBlast                    ; Ship hit by missile blast
 211+ A356 C9                                   ret                                         ; we are done
 212+ A357              ;...................................................................
 213+ A357 3A 3B C0     CheckIfBlastHitUs:      ld      a,(UBnkMissileBlastRange)
 214+ A35A 4F                                   ld      c,a
 215+ A35B C3 62 A3                             jp      MissileHitUsCheckPos
 216+ A35E              ;...................................................................
 217+ A35E 3A 3D C0     CheckIfMissileHitUs:    ld      a,(UBnkMissileDetonateRange)
 218+ A361 4F                                   ld      c,a
 219+ A362              ;...................................................................
 220+ A362 2A 20 C0     MissileHitUsCheckPos:   ld      hl, (UBnkxlo)
 221+ A365 ED 5B 23 C0                          ld      de, (UBnkylo)
 222+ A369 ED 4B 26 C0                          ld      bc, (UBnkzlo)
 223+ A36D 7C                                   ld      a,h
 224+ A36E B2                                   or      d
 225+ A36F B0                                   or      b
 226+ A370                                      ClearCarryFlag
 226+ A370 B7          >                        or a
 227+ A371                                      ReturnIfNotZero
 227+ A371 C0          >                        ret     nz
 228+ A372                                      SetCarryFlag
 228+ A372 37          >                        scf
 229+ A373 C9                                   ret
 230+ A374
 231+ A374                                      ZeroA
 231+ A374 AF          >                        xor a
 232+ A375 B4                                   or      h
 233+ A376                                      ClearCarryFlag
 233+ A376 B7          >                        or a
 234+ A377                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 234+ A377 C0          >                        ret     nz
 235+ A378 7D                                   ld      a,l
 236+ A379                                      ReturnIfAGTENusng    c                      ; return no carry if x far
 236+ A379 B9          >                        cp    c
 236+ A37A D0          >                        ret	 nc
 237+ A37B 2A 23 C0     .CheckY:                ld      hl,(UBnkylo)
 238+ A37E                                      ZeroA
 238+ A37E AF          >                        xor a
 239+ A37F B5                                   or      l
 240+ A380                                      ClearCarryFlag
 240+ A380 B7          >                        or a
 241+ A381                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 241+ A381 C0          >                        ret     nz
 242+ A382 7D                                   ld      a,l
 243+ A383                                      ReturnIfAGTENusng    c                      ; return no carry if y far
 243+ A383 B9          >                        cp    c
 243+ A384 D0          >                        ret	 nc
 244+ A385 2A 26 C0     .CheckZ:                ld      hl,(UBnkzlo)
 245+ A388                                      ZeroA
 245+ A388 AF          >                        xor a
 246+ A389 B5                                   or      l
 247+ A38A                                      ClearCarryFlag
 247+ A38A B7          >                        or a
 248+ A38B                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 248+ A38B C0          >                        ret     nz
 249+ A38C 7D                                   ld      a,l
 250+ A38D                                      ReturnIfAGTENusng    c                      ; return no carry if z far
 250+ A38D B9          >                        cp    c
 250+ A38E D0          >                        ret	 nc
 251+ A38F              .ItsAHit:               SetCarryFlag                                ; So must have hit
 251+ A38F 37          >                        scf
 252+ A390 C9                                   ret
 253+ A391
 254+ A391              SelectMissileBank:      MACRO
 255+ A391 ~                                    ld      a,iyh
 256+ A391 ~                                    MMUSelectUnivBankA
 257+ A391                                      ENDM
 258+ A391
 259+ A391              SelectTargetBank:       MACRO
 260+ A391 ~                                    ld      a,iyl
 261+ A391 ~                                    MMUSelectUnivBankA
 262+ A391                                      ENDM
 263+ A391
 264+ A391              ;...................................................................
 265+ A391              ; ... Copy of target data for missile calcs etc
 266+ A391                                      INCLUDE "./TacticsWorkingData.asm"
# file opened: ./GameEngine/./TacticsWorkingData.asm
   1++A391 00           TacticsTargetShip       DB 0
   2++A392 20           TacticsPad0A            DB " "
   3++A393 00           TacticsMissileBank      DB 0
   4++A394 00           TacticsTargetBank       DB 0
   5++A395 50 72 64 3E  TacticsPad0B            DB "Prd>"
   6++A399 00 00        TacticsDotProduct1      DS 2
   7++A39B 3E           TacticsPad0C            DB ">"
   8++A39C 00 00        TacticsDotProduct2      DS 2
   9++A39E 3E           TacticsPad0D            DB ">"
  10++A39F 00 00        TacticsDotProduct3      DS 2
  11++A3A1 4D 69 73 6C  TacticsPad1A            DB "MislX"
  11++A3A5 58
  12++A3A6 00 00 00     TacticsMissileX         DS 3
  13++A3A9 59           TacticsPad1B            DB "Y"
  14++A3AA 00 00 00     TacticsMissileY         DS 3
  15++A3AD 5A           TacticsPad1C            DB "Z"
  16++A3AE 00 00 00     TacticsMissileZ         DS 3
  17++A3B1 4D 61 74 20  TcaticsPad2A            DB "Mat X"
  17++A3B5 58
  18++A3B6 20 59        TacticsPad2B            DB " Y"
  19++A3B8 20 5A        TacticsPad2C            DB " Z"
  20++A3BA 00           TacticsRotMatX          DB 0
  21++A3BB 00           TacticsToyMatXSign      DB 0
  22++A3BC 00           TacticsRotMatY          DB 0
  23++A3BD 00           TacticsToyMatYSign      DB 0
  24++A3BE 00           TacticsRotMatZ          DB 0
  25++A3BF 00           TacticsToyMatZSign      DB 0
  26++A3C0 20           TacticsPad2D            DB " "
  27++A3C1 54 61 72 67  TacticsPad3A            DB "Targ="
  27++A3C5 3D
  28++A3C6 00 00 00     TacticsTargetX          DS 3
  29++A3C9 00 00 00     TacticsTargetY          DS 3
  30++A3CC 00 00 00     TacticsTargetZ          DS 3
  31++A3CF 3D 20        TacticsPad3B            DB "= "
  32++A3D1 56 65 63 74  TacticsPad4A            DB "VectX"
  32++A3D5 58
  33++A3D6 00 00 00     TacticsVectorX:         DS 3
  34++A3D9 59           TacticsPad4B            DB "Y"
  35++A3DA 00 00 00     TacticsVectorY:         DS 3
  36++A3DD 5A           TacticsPad4C            DB "Z"
  37++A3DE 00 00 00     TacticsVectorZ:         DS 3
  38++A3E1 4E 6F 72 6D  TacticsPad5A            DB "NormX"
  38++A3E5 58
  39++A3E6 00 00        TacticsNormX:           DS 2
  40++A3E8 20 59        TacticsPad5B            DB " Y"
  41++A3EA 00 00        TacticsNormY:           DS 2
  42++A3EC 20 5A        TacticsPad5C            DB " Z"
  43++A3EE 00 00        TacticsNormZ:           DS 2
  44++A3F0 20           TacticsPad5D            DB " "
  45++A3F1 53 69 64 65  TacticsPad7A            DB "SideX"
  45++A3F5 58
  46++A3F6 00 00        TacticsSideX            DS 2
  47++A3F8 20 59        TacticsPad7B            DB " Y"
  48++A3FA 00 00        TacticsSideY            DS 2
  49++A3FC 20 5A        TacticsPad7C            DB " Z"
  50++A3FE 00 00        TacticsSideZ            DS 2
  51++A400 20 52 6F 6F  TacticsPad8A            DB " RoofX"
  51++A404 66 58
  52++A406 00 00        TacticsRoofX            DS 2
  53++A408 20 59        TacticsPad8B            DB " Y"
  54++A40A 00 00        TacticsRoofY            DS 2
  55++A40C 20 5A        TacticsPad8C            DB " Z"
  56++A40E 00 00        TacticsRoofZ            DS 2
  57++A410 20 4E 6F 73  TacticsPad9A            DB " NoseX"
  57++A414 65 58
  58++A416 00 00        TacticsNoseX            DS 2
  59++A418 20 59        TacticsPad9B            DB " Y"
  60++A41A 00 00        TacticsNoseY            DS 2
  61++A41C 20 5A        TacticsPad9C            DB " Z"
  62++A41E 00 00        TacticsNoseZ            DS 2
  63++A420 20           TacticsPad9D            DB " "
  64++A421 52 45 53 55  TacticsPadAA            DB "RESULT"
  64++A425 4C 54
  65++A427 00           TacticsRotX             DS 1
  66++A428 20           TacticsPadAB            DB " "
  67++A429 00           TacticsRotZ             DS 1
  68++A42A 20           TacticsPadAC            DB " "
  69++A42B 00           TacticsSpeed            DS 1
  70++A42C 20           TacticsPadAD            DB " "
  71++A42D
  72++A42D
# file closed: ./GameEngine/./TacticsWorkingData.asm
 267+ A42D                                      INCLUDE "../GameEngine/MissileAI.asm"
# file opened: ./GameEngine/../GameEngine/MissileAI.asm
   1++A42D                                      DEFINE MISSILEDEBUG 1
   2++A42D                                      DEFINE MISSILEDOHIT 1
   3++A42D
   4++A42D              MISSILEMAXACCEL         equ 3
   5++A42D              MISSILEMAXDECEL         equ -3
   6++A42D                                      ;DEFINE MISSILEBREAK
   7++A42D              ;.. Thsi version uses new kind logic
   8++A42D              ;... Now the tactics if current ship is the missile, when we enter this SelectedUniverseSlot holds slot of missile
   9++A42D              MissileAIV3:            ;ld      a,(ShipAIEnabled)
  10++A42D                                      ;ReturnOnBitClear a, ShipAIEnabledBitNbr
  11++A42D                                      IFDEF MISSILEDOHIT
  12++A42D                                          JumpIfMemTrue UBnkMissleHitToProcess, .ProcessMissileHit
  12++A42D 3A 44 C0    >                        ld      a,(UBnkMissleHitToProcess)
  12++A430 A7          >                        and     a
  12++A431 CA 9F A5    >                        jp      z, .ProcessMissileHit
  13++A434                                      ENDIF
  14++A434              .CheckForECM:           JumpIfMemNotZero ECMCountDown,.ECMIsActive  ; If ECM is running then kill the missile
  14++A434 3A 86 7E    >                        ld  a,(ECMCountDown)
  14++A437 A7          >                        and a
  14++A438 C2 A8 A5    >                        jp  nz,.ECMIsActive
  15++A43B              .IsMissileHostile:      IsShipHostile                               ; is missle attacking us?
  15++A43B 3A 0F C4    >                        ld      a,(ShipNewBitsAddr)
  15++A43E E6 04       >                        and     ShipIsHostile
  16++A440                                      JumpIfZero .MissileTargetingShip            ; Missile is friendly then z is set else targetting us
  16++A440 CA 66 A4    >                        jp	z,.MissileTargetingShip
  17++A443 2A 20 C0     .MissileTargetingPlayer:ld      hl, (UBnkxlo)                       ; check if missile in range of us
  18++A446 3A 3D C0                             ld      a,(UBnkMissileDetonateRange)
  19++A449 4F                                   ld      c,a                                 ; c holds detonation range
  20++A44A CD 62 A3                             call    MissileHitUsCheckPos
  21++A44D D2 56 A4     .MissileNotHitUsYet:    jp      nc, .UpdateTargetingUsPos
  22++A450 CD 3E A2     .MissleHitUs:           call    PlayerHitByMissile
  23++A453 C3 A8 A5                             jp      .ECMIsActive                        ; we use ECM logic to destroy missile which eqneues is
  24++A456 CD 83 AA     .UpdateTargetingUsPos:  call    SetPlayerAsTarget
  25++A459 CD 5E AA                             call    CopyPosToVector
  26++A45C 3A 36 81                             ld      a,(SelectedUniverseSlot)            ; we will use this quite a lot with next bank switching
  27++A45F C6 46                                add     a,BankUNIVDATA0                     ; pre calculate add to optimise
  28++A461 FD 67                                ld      iyh,a
  29++A463 C3 7D A5                             jp      .NormaliseDirection
  30++A466              ;--- Missile is targeting other ship
  31++A466 3A 36 81     .MissileTargetingShip:  ld      a,(SelectedUniverseSlot)            ; we will use this quite a lot with next bank switching
  32++A469 C6 46        .SaveMissileBank:       add     a,BankUNIVDATA0                     ; pre calculate add to optimise
  33++A46B FD 67                                ld      iyh,a
  34++A46D                                      IFDEF MISSILEDEBUG
  35++A46D 32 93 A3                                 ld  (TacticsMissileBank),a
  36++A470                                      ENDIF
  37++A470 3A 45 C0     .SaveTargetBank:        ld      a,(UBnkMissileTarget)               ; target will be used a lot too
  38++A473 C6 46                                add     a,BankUNIVDATA0                     ; pre calculate add to optimise
  39++A475 FD 6F                                ld      iyl,a                               ; save target
  40++A477                                      IFDEF MISSILEDEBUG
  41++A477 32 94 A3                                 ld  (TacticsTargetBank),a
  42++A47A                                      ENDIF
  43++A47A              .IsMissleTargetGone:    JumpIfSlotAEmpty    .ECMIsActive            ; if the target was blown up then detonate
  43++A47A 21 45 81    >                        ld      hl,UniverseSlotList
  43++A47D ED 31       >                        add     hl,a
  43++A47F 7E          >                        ld      a,(hl)
  43++A480 3C          >                        inc     a
  43++A481 CA A8 A5    >                        jp      z,.ECMIsActive    ; if slot was ff inc would make it 0
  43++A484 3D          >                        dec     a           ; get original value back for later
  44++A485              ;... Note we don't have to check for impact as we already have a loop doing that
  45++A485              .SelectTargetShip:      SelectTargetBank
  45++A485 FD 7D       >                        ld      a,iyl
  45++A487             >                        MMUSelectUnivBankA
  45++A487 ED 92 56    >                     nextreg UniverseMMU,       a
  46++A48A 3A 55 C0     .IsShipExploding:       ld      a,(UBnkaiatkecm)                    ; check exploding status
  47++A48D E6 20                                and     ShipExploding                       ; as if exploding then the missile will also explode
  48++A48F 28 08                                jr      z,.UpdateTargetingShipX
  49++A491              .ShipIsExploding:       SelectMissileBank                           ; get missile back into memory
  49++A491 FD 7C       >                        ld      a,iyh
  49++A493             >                        MMUSelectUnivBankA
  49++A493 ED 92 56    >                     nextreg UniverseMMU,       a
  50++A496 C3 A8 A5                             jp      .ECMIsActive
  51++A499              ;--- At this point we already have the target banked in ready for calculating vector
  52++A499              ; Tactics vector = missile - target
  53++A499              .UpdateTargetingShipX:  IFDEF MISSILEBREAK
  54++A499 ~                                        break
  55++A499                                      ENDIF
  56++A499 ED 5B 20 C0                          ld      de,(UBnkxlo)                        ; get target ship X
  57++A49D 3A 22 C0                             ld      a,(UBnkxsgn)                        ; and flip sign so we have missile - target
  58++A4A0                                      IFDEF MISSILEDEBUG
  59++A4A0 ED 53 C6 A3                              ld  (TacticsTargetX),de
  60++A4A4 32 C8 A3                                 ld  (TacticsTargetX+2),a
  61++A4A7                                      ENDIF
  62++A4A7                                      FlipSignBitA
  62++A4A7 EE 80       >                        xor     SignOnly8Bit
  63++A4A9 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
  64++A4AA                                      SelectMissileBank
  64++A4AA FD 7C       >                        ld      a,iyh
  64++A4AC             >                        MMUSelectUnivBankA
  64++A4AC ED 92 56    >                     nextreg UniverseMMU,       a
  65++A4AF 2A 20 C0                             ld      hl,(UBnkxlo)                        ; get missile x
  66++A4B2 3A 22 C0                             ld      a,(UBnkxsgn)                        ; get missile x sign
  67++A4B5                                      IFDEF MISSILEDEBUG
  68++A4B5 22 A6 A3                                 ld  (TacticsMissileX),hl
  69++A4B8 32 A8 A3                                 ld  (TacticsMissileX+2),a
  70++A4BB                                      ENDIF
  71++A4BB 47                                   ld      b,a
  72++A4BC                                      MMUSelectMathsBankedFns
  72++A4BC ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
  73++A4C0 CD 2F 00                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
  74++A4C3 22 D6 A3                             ld      (TacticsVectorX),hl
  75++A4C6 32 D8 A3                             ld      (TacticsVectorX+2),a
  76++A4C9              .UpdateTargetingShipY:  SelectTargetBank
  76++A4C9 FD 7D       >                        ld      a,iyl
  76++A4CB             >                        MMUSelectUnivBankA
  76++A4CB ED 92 56    >                     nextreg UniverseMMU,       a
  77++A4CE ED 5B 23 C0                          ld      de,(UBnkylo)                        ; get target ship X
  78++A4D2 3A 25 C0                             ld      a,(UBnkysgn)
  79++A4D5                                      IFDEF MISSILEDEBUG
  80++A4D5 ED 53 C9 A3                              ld  (TacticsTargetY),de
  81++A4D9 32 CB A3                                 ld  (TacticsTargetY+2),a
  82++A4DC                                      ENDIF
  83++A4DC                                      FlipSignBitA
  83++A4DC EE 80       >                        xor     SignOnly8Bit
  84++A4DE 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
  85++A4DF                                      SelectMissileBank
  85++A4DF FD 7C       >                        ld      a,iyh
  85++A4E1             >                        MMUSelectUnivBankA
  85++A4E1 ED 92 56    >                     nextreg UniverseMMU,       a
  86++A4E4 2A 23 C0                             ld      hl,(UBnkylo)                        ; get missile x
  87++A4E7 3A 25 C0                             ld      a,(UBnkysgn)                        ; get missile x sign
  88++A4EA                                      IFDEF MISSILEDEBUG
  89++A4EA 22 AA A3                                 ld  (TacticsMissileY),hl
  90++A4ED 32 AC A3                                 ld  (TacticsMissileY+2),a
  91++A4F0                                      ENDIF
  92++A4F0 47                                   ld      b,a
  93++A4F1                                      MMUSelectMathsBankedFns
  93++A4F1 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
  94++A4F5 CD 2F 00                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
  95++A4F8 22 DA A3                             ld      (TacticsVectorY),hl
  96++A4FB 32 DC A3                             ld      (TacticsVectorY+2),a
  97++A4FE              .UpdateTargetingShipZ:  SelectTargetBank
  97++A4FE FD 7D       >                        ld      a,iyl
  97++A500             >                        MMUSelectUnivBankA
  97++A500 ED 92 56    >                     nextreg UniverseMMU,       a
  98++A503 ED 5B 26 C0                          ld      de,(UBnkzlo)                        ; get target ship X
  99++A507 3A 28 C0                             ld      a,(UBnkzsgn)
 100++A50A                                      IFDEF MISSILEDEBUG
 101++A50A ED 53 CC A3                              ld  (TacticsTargetZ),de
 102++A50E 32 CE A3                                 ld  (TacticsTargetZ+2),a
 103++A511                                      ENDIF
 104++A511                                      FlipSignBitA
 104++A511 EE 80       >                        xor     SignOnly8Bit
 105++A513 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
 106++A514                                      SelectMissileBank
 106++A514 FD 7C       >                        ld      a,iyh
 106++A516             >                        MMUSelectUnivBankA
 106++A516 ED 92 56    >                     nextreg UniverseMMU,       a
 107++A519 2A 26 C0                             ld      hl,(UBnkzlo)                        ; get missile x
 108++A51C 3A 28 C0                             ld      a,(UBnkzsgn)                        ; get missile x sign
 109++A51F                                      IFDEF MISSILEDEBUG
 110++A51F 22 AE A3                                 ld  (TacticsMissileZ),hl
 111++A522 32 B0 A3                                 ld  (TacticsMissileZ+2),a
 112++A525                                      ENDIF
 113++A525
 114++A525 47                                   ld      b,a
 115++A526                                      MMUSelectMathsBankedFns
 115++A526 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 116++A52A CD 2F 00                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
 117++A52D 22 DE A3                             ld      (TacticsVectorZ),hl
 118++A530 32 E0 A3                             ld      (TacticsVectorZ+2),a
 119++A533              ; by here missile in in memory and TacticsVector now holds distance
 120++A533              ; if or ABS all high bytes is <> 0
 121++A533              .CheckDistance:         IFDEF MISSILEDOHIT
 122++A533 2A D7 A3                                 ld      hl,(TacticsVectorX+1)              ; test if high bytes are set (value is assumed to be 24 bit, though calcs are only 16 so this is uneeded)
 123++A536 7C                                       ld      a,h                                ; .
 124++A537 ED 5B DB A3                              ld      de,(TacticsVectorY+1)              ; .
 125++A53B B2                                       or      d                                  ; .
 126++A53C ED 4B DF A3                              ld      bc,(TacticsVectorZ+1)              ; .
 127++A540 B0                                       or      b                                  ; .
 128++A541                                          ClearSignBitA                              ; .
 128++A541 E6 7F       >                        and     SignMask8Bit
 129++A543                                          JumpIfNotZero       .FarAway               ; .
 129++A543 C2 52 A5    >                        jp	nz,.FarAway
 130++A546 B5                                       or      l                                    ; test for low byte bit 7, i.e high of 16 bit values
 131++A547 B3                                       or      e                                  ; .
 132++A548 B1                                       or      c                                  ; .
 133++A549                                          JumpIfNotZero       .FarAway               ; .
 133++A549 C2 52 A5    >                        jp	nz,.FarAway
 134++A54C                                      ELSE
 135++A54C ~                                        jp                  .FarAway
 136++A54C                                      ENDIF
 137++A54C              ; If we get here its close enough to detonate
 138++A54C 3A 45 C0     .CloseMissileExplode:   ld      a,(UBnkMissileTarget)
 139++A54F C3 66 A2                             jp      MissileHitShipA
 140++A552                          DISPLAY "TODO: far away ** TODO need to set memory read write on page 0"
 141++A552              .FarAway:               SelectTargetBank
 141++A552 FD 7D       >                        ld      a,iyl
 141++A554             >                        MMUSelectUnivBankA
 141++A554 ED 92 56    >                     nextreg UniverseMMU,       a
 142++A557                                      JumpIfMemFalse      UBnkECMFitted, .NoECM                   ; if target has ECM and enough energy to use it
 142++A557 3A 5B C0    >                        ld      a,(UBnkECMFitted)
 142++A55A A7          >                        and     a
 142++A55B C2 78 A5    >                        jp      nz, .NoECM
 143++A55E                                      JumpIfMemLTNusng    UBnkEnergy,    ECMCounterMax, .NoECM    ; .
 143++A55E 3A 59 C0    >                        ld      a,(UBnkEnergy)
 143++A561 FE 80       >                        cp      ECMCounterMax
 143++A563 DA 78 A5    >                        jp	  c,.NoECM
 144++A566                                      JumpIfMemIsNotZero   ECMCountDown, .NoECM                ; . ECM is already active
 144++A566 3A 86 7E    >                        ld      a,(ECMCountDown)
 144++A569 A7          >                        and     a
 144++A56A C2 78 A5    >                        jp	    nz,.NoECM
 145++A56D 3A 60 7E     .TestIfUsingECM:        ld      a,(RandomSeed2)                                             ; if random < 16
 146++A570                                      JumpIfAGTENusng     16, .UpdateMissilePos                           ;   then fire ECM destroying missile
 146++A570 FE 10       >                        cp     16
 146++A572 D2 78 A5    >                        jp		nc,.UpdateMissilePos
 147++A575              ;. If we get here then target is still paged in to fire ECM
 148++A575 C3 43 C6     .ZeroPageFireECM:       jp      FireECM                                             ; with an implicit return
 149++A578              ;                       implicit ret
 150++A578              ;. If we get here then target is still paged in with no ECM
 151++A578              .NoECM:
 152++A578                                    ;;;         ** can do 16 bit maths as we can take teh view that once a object/space station is 24 bit value away then
 153++A578                                    ;;;         ** targeting computer looses track and destructs missiles
 154++A578              ;--- Now we can actually update the missile AI
 155++A578              .UpdateMissilePos:      ;break
 156++A578                                      SelectMissileBank
 156++A578 FD 7C       >                        ld      a,iyh
 156++A57A             >                        MMUSelectUnivBankA
 156++A57A ED 92 56    >                     nextreg UniverseMMU,       a
 157++A57D                                      ;break
 158++A57D                                      ;call    ORTHOGALISE
 159++A57D              .NormaliseDirection:    IFDEF MISSILEBREAK
 160++A57D ~                                        break
 161++A57D                                      ENDIF
 162++A57D CD F0 AA                             call    NormalizeTactics                    ; Normalise vector down to 7 bit + sign byte (.TA19->TAS2)
 163++A580                                      IFDEF TACTICSDEBUG
 164++A580 CD A3 A9                                 call DebugTacticsCopy
 165++A583                                      ENDIF
 166++A583              .NegateDirection:       FlipSignMem TacticsVectorX+2                ; negate vector in XX15 so it points opposite direction
 166++A583 3A D8 A3    >                        ld  a,(TacticsVectorX+2)
 166++A586 EE 80       >                        xor SignOnly8Bit
 166++A588 32 D8 A3    >                        ld  (TacticsVectorX+2),a
 167++A58B                                      FlipSignMem TacticsVectorY+2                ; we have already negated the dot product above
 167++A58B 3A DC A3    >                        ld  a,(TacticsVectorY+2)
 167++A58E EE 80       >                        xor SignOnly8Bit
 167++A590 32 DC A3    >                        ld  (TacticsVectorY+2),a
 168++A593                                      FlipSignMem TacticsVectorZ+2                ; .
 168++A593 3A E0 A3    >                        ld  a,(TacticsVectorZ+2)
 168++A596 EE 80       >                        xor SignOnly8Bit
 168++A598 32 E0 A3    >                        ld  (TacticsVectorZ+2),a
 169++A59B CD B2 A5                             call    SeekingLogic
 170++A59E C9                                   ret
 171++A59F 3A 43 81     .ProcessMissileHit:     ld      a,(CurrentMissileCheck)
 172++A5A2                                      ReturnIfAGTENusng UniverseSlotListSize  ; need to wait another loop
 172++A5A2 FE 0C       >                        cp    UniverseSlotListSize
 172++A5A4 D0          >                        ret	 nc
 173++A5A5 C3 87 A2     .ActivateNewExplosion:  jp  CheckMissileBlastInit               ; initialise
 174++A5A8                                      ; DUMMY RET get a free return by using jp
 175++A5A8 CD 46 C7     .ECMIsActive:           call    UnivExplodeShip                 ; ECM detonates missile
 176++A5AB                                      SetMemTrue  UBnkMissleHitToProcess      ; Enque an explosion
 176++A5AB AF          >                        xor     a
 176++A5AC 32 44 C0    >                        ld      (UBnkMissleHitToProcess),a
 177++A5AF C3 9F A5                             jp      .ProcessMissileHit              ; lets see if we can enqueue now
 178++A5B2                                      ; DUMMY RET get a free return as activenewexplosion does jp to init with a free ret
 179++A5B2
 180++A5B2 CD E8 A9     SeekingLogic:           call    XX12EquTacticsDotNosev              ; SA = nose . XX15                           (     ->TAS3)
 181++A5B5 32 99 A3                             ld      (TacticsDotProduct1),a              ; CNT = A (high byte of dot product)
 182++A5B8 3A 73 7F                             ld      a,(varS)                            ; get sign from dot product
 183++A5BB 32 9D A3                             ld      (TacticsDotProduct2+1),a            ; Note here its direction not dir
 184++A5BE CD 46 AA     .RoofDotProduct:        call    XX12EquTacticsDotRoofv              ; Now tran the roof for rotation
 185++A5C1 32 9C A3                             ld      (TacticsDotProduct2),a              ; so if its +ve then the roof is similar so pull up to head towards it
 186++A5C4 3A 73 7F                             ld      a,(varS)                            ; .
 187++A5C7 32 9D A3                             ld      (TacticsDotProduct2+1),a            ; Note here its direction not dir
 188++A5CA CD D4 A5                             call    SimplifiedShipPitchv3
 189++A5CD CD F8 A5                             call    SimplifiedShipRollv3
 190++A5D0 CD 26 A6                             call    SimplifiedShipSpeedv3
 191++A5D3 C9                                   ret
 192++A5D4
 193++A5D4              SimplifiedShipPitchv3:  ;break
 194++A5D4 2A 9C A3                             ld      hl,(TacticsDotProduct2)            ; pitch counter sign = opposite sign to roofdir sign
 195++A5D7 7C                                   ld      a,h                                ; .
 196++A5D8 EE 80                                xor     $80                                ; .
 197++A5DA E6 80                                and     $80                                ; .
 198++A5DC 67                                   ld      h,a                                ; h  = flipped sign
 199++A5DD 7D                                   ld      a,l                                ; a = value * 2
 200++A5DE CB 27                                sla     a                                  ;
 201++A5E0                                      JumpIfAGTENusng 16, .skipPitchZero         ; if its > 16 then update pitch
 201++A5E0 FE 10       >                        cp     16
 201++A5E2 D2 EE A5    >                        jp		nc,.skipPitchZero
 202++A5E5                                      ZeroA                                      ; else we zero pitch but
 202++A5E5 AF          >                        xor a
 203++A5E6 B4                                   or      h                                  ; we need to retain the sign
 204++A5E7 32 4A C0                             ld      (UBnkRotZCounter),a                ; .
 205++A5EA                                      IFDEF MISSILEDEBUG
 206++A5EA 32 29 A4                                 ld  (TacticsRotZ),a
 207++A5ED                                      ENDIF
 208++A5ED C9                                   ret
 209++A5EE 3E 02        .skipPitchZero:         ld      a,2
 210++A5F0 B4                                   or      h
 211++A5F1 32 4A C0                             ld      (UBnkRotZCounter),a
 212++A5F4                                      IFDEF MISSILEDEBUG
 213++A5F4 32 29 A4                                 ld  (TacticsRotZ),a
 214++A5F7                                      ENDIF
 215++A5F7 C9                                   ret
 216++A5F8
 217++A5F8              ;Direct on dot product nose is $24
 218++A5F8              ; Position                  Pitch   Roll    Speed
 219++A5F8              ; Top left forwards         up      -ve     +
 220++A5F8              ; Top right forwards        up      +ve     +
 221++A5F8              ; Bottom left forwards      down    -ve     +
 222++A5F8              ; Bottom right forwards     down    +ve     +
 223++A5F8              ; Top left rear             up      -ve     -
 224++A5F8              ; Top right rear            up      +ve     -
 225++A5F8              ; Bottom left rear          down    -ve     -
 226++A5F8              ; Bottom right rear         down    +ve     -
 227++A5F8
 228++A5F8
 229++A5F8
 230++A5F8              SimplifiedShipRollv3:  ; ld      a,(UBnkRotXCounter)               ; get current roll
 231++A5F8                                     ; sla     a                                 ; * 2 to also abs
 232++A5F8                                     ; ReturnIfAGTENusng 32                      ; and so if >32 skip
 233++A5F8 CD 4C AA                             call    XX12EquTacticsDotSidev             ; calculate side dot protuct
 234++A5FB 32 9F A3                             ld      (TacticsDotProduct3),a             ; .
 235++A5FE 6F                                   ld      l,a                                ; .
 236++A5FF 3A 73 7F                             ld      a,(varS)                           ; .
 237++A602 32 A0 A3                             ld      (TacticsDotProduct3+1),a           ; .
 238++A605 67                                   ld      h,a                                ; h = sign sidev
 239++A606 3A 9D A3                             ld      a,(TacticsDotProduct2+1)           ; get flipped pitch counter sign
 240++A609                                      ;xor     $80                               ; .
 241++A609                                      ;xor     h                                 ; b = flip against pitch sign
 242++A609                                      ;and     $80                               ; .
 243++A609                                      ;xor $80
 244++A609 47                                   ld      b,a                                ; b = roof product
 245++A60A 7D                                   ld      a,l                                ; a = abs sidev  * 2
 246++A60B CB 27                                sla     a                                  ;
 247++A60D                                      JumpIfAGTENusng 16,.skipRollZero           ;
 247++A60D FE 10       >                        cp     16
 247++A60F D2 1B A6    >                        jp		nc,.skipRollZero
 248++A612                                      ZeroA                                      ; if its zoer then set rotx to zero
 248++A612 AF          >                        xor a
 249++A613 B0                                   or      b
 250++A614 32 48 C0                             ld      (UBnkRotXCounter),a
 251++A617                                      IFDEF MISSILEDEBUG
 252++A617 32 27 A4                                 ld  (TacticsRotX),a
 253++A61A                                      ENDIF
 254++A61A C9                                   ret
 255++A61B 3E 02        .skipRollZero:          ld      a,2
 256++A61D B4                                   or      h
 257++A61E A8                                   xor     b
 258++A61F 32 48 C0                             ld      (UBnkRotXCounter),a
 259++A622                                      IFDEF MISSILEDEBUG
 260++A622 32 27 A4                                 ld  (TacticsRotX),a
 261++A625                                      ENDIF
 262++A625 C9                                   ret
 263++A626
 264++A626 2A 99 A3     SimplifiedShipSpeedv3:  ld      hl,(TacticsDotProduct1)
 265++A629 7C                                   ld      a,h
 266++A62A A7                                   and     a
 267++A62B 20 13                                jr      nz,.SlowDown
 268++A62D ED 5B 9C A3                          ld      de,(TacticsDotProduct2)             ; dot product is +ve so heading at each other
 269++A631 7D                                   ld      a,l
 270++A632                                      JumpIfALTNusng  22,.SlowDown                                  ; nose dot product <
 270++A632 FE 16       >                        cp      22
 270++A634 DA 40 A6    >                        jp		c, .SlowDown
 271++A637 3E 03        .Accelerate:            ld      a,3                                 ; else
 272++A639 32 47 C0                             ld      (UBnkAccel),a                       ;  accelleration = 3
 273++A63C                                      IFDEF MISSILEDEBUG
 274++A63C 32 2B A4                                 ld  (TacticsSpeed),a
 275++A63F                                      ENDIF
 276++A63F C9                                   ret                                         ;  .
 277++A640              .SlowDown:              JumpIfALTNusng 18, .NoSpeedChange
 277++A640 FE 12       >                        cp      18
 277++A642 DA 4E A6    >                        jp		c, .NoSpeedChange
 278++A645 3E FE        .Deccelerate:           ld      a,-2
 279++A647 32 47 C0                             ld      (UBnkAccel),a
 280++A64A                                      IFDEF MISSILEDEBUG
 281++A64A 32 2B A4                                 ld  (TacticsSpeed),a
 282++A64D                                      ENDIF
 283++A64D C9                                   ret
 284++A64E              .NoSpeedChange:         ZeroA                                       ; else no change
 284++A64E AF          >                        xor a
 285++A64F 32 47 C0                             ld      (UBnkAccel),a
 286++A652                                      IFDEF MISSILEDEBUG
 287++A652 32 2B A4                                 ld  (TacticsSpeed),a
 288++A655                                      ENDIF
 289++A655 C9                                   ret
 290++A656
 291++A656
 292++A656 CD 95 A6     SimplifiedShipSpeedv3b:  call    GetDistance                         ;
 293++A659 7C                                   ld      a,h
 294++A65A A7                                   and     a
 295++A65B 06 16                                ld      b,22
 296++A65D 20 08                                jr      nz,.NotSlow
 297++A65F 7D           .CloseSlowTest:         ld      a,l
 298++A660                                      JumpIfAGTENusng 30, .NotSlow
 298++A660 FE 1E       >                        cp     30
 298++A662 D2 67 A6    >                        jp		nc,.NotSlow
 299++A665 06 3C                                ld      b,60
 300++A667 2A 99 A3     .NotSlow:               ld      hl,(TacticsDotProduct1)             ; if nosedir is negative (pointing the wrong way)
 301++A66A 7C                                   ld      a,h                                 ; or nosedir < 22 (very far off)
 302++A66B E6 80                                and     $80                                 ; do decelleration test
 303++A66D C2 7E A6                             jp      nz,.DecelTest                       ; .
 304++A670 7D                                   ld      a,l                                 ; .
 305++A671                                      JumpIfALTNusng b, .DecelTest                ; .
 305++A671 B8          >                        cp      b
 305++A672 DA 7E A6    >                        jp		c, .DecelTest
 306++A675 3E 03        .Accelerate:            ld      a,3                                 ; else
 307++A677 32 47 C0                             ld      (UBnkAccel),a                       ;  accelleration = 3
 308++A67A                                      IFDEF MISSILEDEBUG
 309++A67A 32 2B A4                                 ld  (TacticsSpeed),a
 310++A67D                                      ENDIF
 311++A67D C9                                   ret                                         ;  .
 312++A67E 7D           .DecelTest:             ld      a,l                                 ; if abs acelleration > 18
 313++A67F                                      JumpIfAGTENusng 18 ,.Deccelerate             ;    decelerate by 2
 313++A67F FE 12       >                        cp     18
 313++A681 D2 8C A6    >                        jp		nc,.Deccelerate
 314++A684              .NoSpeedChange:         ZeroA                                       ; else no change
 314++A684 AF          >                        xor a
 315++A685 32 47 C0                             ld      (UBnkAccel),a
 316++A688                                      IFDEF MISSILEDEBUG
 317++A688 32 2B A4                                 ld  (TacticsSpeed),a
 318++A68B                                      ENDIF
 319++A68B C9                                   ret
 320++A68C 3E FE        .Deccelerate:           ld      a,-2
 321++A68E 32 47 C0                             ld      (UBnkAccel),a
 322++A691                                      IFDEF MISSILEDEBUG
 323++A691 32 2B A4                                 ld  (TacticsSpeed),a
 324++A694                                      ENDIF
 325++A694 C9                                   ret
 326++A695
 327++A695 2A D6 A3     GetDistance:            ld      hl,(TacticsVectorX)
 328++A698 ED 5B DA A3                          ld      de,(TacticsVectorY)
 329++A69C ED 4B DE A3                          ld      bc,(TacticsVectorZ)
 330++A6A0 7C                                   ld      a,h
 331++A6A1 E6 7F                                and     $7F
 332++A6A3 67                                   ld      h,a
 333++A6A4 78                                   ld      a,b
 334++A6A5 E6 7F                                and     $7F
 335++A6A7 47                                   ld      b,a
 336++A6A8 7A                                   ld      a,d
 337++A6A9 E6 7F                                and     $7F
 338++A6AB 57                                   ld      d,a
 339++A6AC 09                                   add     hl,bc
 340++A6AD 19                                   add     hl,de
 341++A6AE                                      ShiftHLRight1
 341++A6AE CB 3C       >			   srl h
 341++A6B0 CB 1D       >			   rr  l
 342++A6B2                                      ShiftHLRight1
 342++A6B2 CB 3C       >			   srl h
 342++A6B4 CB 1D       >			   rr  l
 343++A6B6 C9                                   ret
 344++A6B7
 345++A6B7
# file closed: ./GameEngine/../GameEngine/MissileAI.asm
 268+ A6B7                                      INCLUDE "../GameEngine/NormalAI.asm"
# file opened: ./GameEngine/../GameEngine/NormalAI.asm
   1++A6B7               ;                       DEFINE DEBUGFORCEHOSTILE 1
   2++A6B7
   3++A6B7 00 00 00     NewLaunchUBnkX          DS 3
   4++A6BA 00 00 00     NewLaunchUBnkY          DS 3
   5++A6BD 00 00 00     NewLaunchUBnkZ          DS 3
   6++A6C0
   7++A6C0 00 00 00...  NewLaunchMatrix         DS 3*3*2    ; 3x3 matrix of 3 bytes
   8++A6D2 00           NewLaunchSpeed          DS 1
   9++A6D3 00           NewLaunchRotX           DS 1
  10++A6D4 00           NewLaunchRotZ           DS 1
  11++A6D5
  12++A6D5              NewLaunchDataBlockSize  equ (3*3) + (3*3*2)
  13++A6D5              ; ---------------------------------------------------------------------------------------------------------------------------------
  14++A6D5              ; a = y offset negative from center of ship
  15++A6D5 21 20 C0     CalcLaunchOffset:       ld      hl,UBnkxlo
  16++A6D8 11 B7 A6                             ld      de,NewLaunchUBnkX
  17++A6DB 01 1B 00                             ld      bc,NewLaunchDataBlockSize
  18++A6DE ED B0                                ldir
  19++A6E0 CB 27        .ApplyOffset:           sla     a
  20++A6E2 CB 27                                sla     a
  21++A6E4 FD 6F                                ld      iyl,a                          ; save pre calculated speed
  22++A6E6              .ApplyToX:              SpeedMulAxis    a, UBnkrotmatRoofvX     ; e =  ABS (nosev x hi) c = sign
  22++A6E6 5F          >                        ld      e,a
  22++A6E7 2A 2F C0    >                        ld      hl,(UBnkrotmatRoofvX)
  22++A6EA 7C          >                        ld      a,h
  22++A6EB             >                        ClearSignBitA
  22++A6EB E6 7F       >                        and     SignMask8Bit
  22++A6ED 57          >                        ld      d,a
  22++A6EE ED 30       >                        mul     de
  22++A6F0 7C          >                        ld      a,h
  22++A6F1             >                        SignBitOnlyA
  22++A6F1 E6 80       >                        and     SignOnly8Bit
  22++A6F3 47          >                        ld      b,a;ld      c,a
  22++A6F4 62          >                        ld      h,d;ld      e,d
  22++A6F5 0E 00       >                        ld      c,0;ld      d,0
  23++A6F7 78                                   ld      a,b
  24++A6F8 EE 80                                xor     $80
  25++A6FA 47                                   ld      b,a
  26++A6FB              .AddSpeedToX:           AddSpeedToVert NewLaunchUBnkX
  26++A6FB ED 5B B8 A6 >                        ld      de,(NewLaunchUBnkX+1)
  26++A6FF 3A B7 A6    >                        ld      a,(NewLaunchUBnkX)
  26++A702 6F          >                        ld      l,a
  26++A703 CD AF 00    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  26++A706 7D          >                        ld      a,l
  26++A707 32 B7 A6    >                        ld      (NewLaunchUBnkX),a
  26++A70A ED 53 B8 A6 >                        ld      (NewLaunchUBnkX+1),de
  27++A70E              .ApplyToY:              SpeedMulAxis    iyl, UBnkrotmatRoofvY
  27++A70E FD 5D       >                        ld      e,iyl
  27++A710 2A 31 C0    >                        ld      hl,(UBnkrotmatRoofvY)
  27++A713 7C          >                        ld      a,h
  27++A714             >                        ClearSignBitA
  27++A714 E6 7F       >                        and     SignMask8Bit
  27++A716 57          >                        ld      d,a
  27++A717 ED 30       >                        mul     de
  27++A719 7C          >                        ld      a,h
  27++A71A             >                        SignBitOnlyA
  27++A71A E6 80       >                        and     SignOnly8Bit
  27++A71C 47          >                        ld      b,a;ld      c,a
  27++A71D 62          >                        ld      h,d;ld      e,d
  27++A71E 0E 00       >                        ld      c,0;ld      d,0
  28++A720 78                                   ld      a,b
  29++A721 EE 80                                xor     $80
  30++A723 47                                   ld      b,a
  31++A724              .AddSpeedToY:           AddSpeedToVert NewLaunchUBnkY
  31++A724 ED 5B BB A6 >                        ld      de,(NewLaunchUBnkY+1)
  31++A728 3A BA A6    >                        ld      a,(NewLaunchUBnkY)
  31++A72B 6F          >                        ld      l,a
  31++A72C CD AF 00    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  31++A72F 7D          >                        ld      a,l
  31++A730 32 BA A6    >                        ld      (NewLaunchUBnkY),a
  31++A733 ED 53 BB A6 >                        ld      (NewLaunchUBnkY+1),de
  32++A737              .ApplyToZ:              SpeedMulAxis    iyl, UBnkrotmatRoofvZ
  32++A737 FD 5D       >                        ld      e,iyl
  32++A739 2A 33 C0    >                        ld      hl,(UBnkrotmatRoofvZ)
  32++A73C 7C          >                        ld      a,h
  32++A73D             >                        ClearSignBitA
  32++A73D E6 7F       >                        and     SignMask8Bit
  32++A73F 57          >                        ld      d,a
  32++A740 ED 30       >                        mul     de
  32++A742 7C          >                        ld      a,h
  32++A743             >                        SignBitOnlyA
  32++A743 E6 80       >                        and     SignOnly8Bit
  32++A745 47          >                        ld      b,a;ld      c,a
  32++A746 62          >                        ld      h,d;ld      e,d
  32++A747 0E 00       >                        ld      c,0;ld      d,0
  33++A749 78                                   ld      a,b
  34++A74A EE 80                                xor     $80
  35++A74C 47                                   ld      b,a
  36++A74D              .AddSpeedToZ:           AddSpeedToVert NewLaunchUBnkZ
  36++A74D ED 5B BE A6 >                        ld      de,(NewLaunchUBnkZ+1)
  36++A751 3A BD A6    >                        ld      a,(NewLaunchUBnkZ)
  36++A754 6F          >                        ld      l,a
  36++A755 CD AF 00    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  36++A758 7D          >                        ld      a,l
  36++A759 32 BD A6    >                        ld      (NewLaunchUBnkZ),a
  36++A75C ED 53 BE A6 >                        ld      (NewLaunchUBnkZ+1),de
  37++A760 C9                                   ret
  38++A761
  39++A761
  40++A761
  41++A761                                      ;DEFINE MISSILEBREAK
  42++A761              ;.. Thsi version uses new kind logic
  43++A761              ;... Now the tactics if current ship is the missile, when we enter this SelectedUniverseSlot holds slot of missile
  44++A761              NormalAI:               ;ld      a,(ShipAIEnabled)
  45++A761                                      ;ReturnOnBitClear a, ShipAIEnabledBitNbr
  46++A761 CD 54 C6     .GetEnergy:             call    RechargeEnergy                  ; TA13 if enegery <= maxumum value for blueprint then recharge energy by 1
  47++A764 3A 0F C4                             ld      a,(ShipNewBitsAddr)
  48++A767 E6 01        .IsItATrader:           and     ShipIsTrader
  49++A769 20 06                                jr      nz, .NotATrader
  50++A76B CD 0A 85     .ItsATrader:            call    doRandom
  51++A76E                                      ReturnIfALTNusng 100                    ; 61% chance do nothing
  51++A76E FE 64       >                        cp    100
  51++A770 D8          >                        ret	 c
  52++A771                                      IFDEF DEBUGFORCEHOSTILE
  53++A771 ~                                            call SetShipHostile
  54++A771 ~                                            ld      a,(ShipNewBitsAddr)
  55++A771 ~                                            or      ShipIsBountyHunter
  56++A771 ~                                            ld      (ShipNewBitsAddr),a
  57++A771                                      ENDIF
  58++A771              .NotATrader:
  59++A771 3A 0F C4     .IsItBountyHunter:      ld      a,(ShipNewBitsAddr)
  60++A774 E6 02                                and     ShipIsBountyHunter
  61++A776 20 08                                jr      nz, .NotBountyHunter
  62++A778              .CheckFIST:             CallIfMemGTENusng FugitiveInnocentStatus, 40, SetShipHostile ; if our FIST rating >= 40 set ship hostile (bit 2)
  62++A778 3A 22 80    >                        ld      a,(FugitiveInnocentStatus)
  62++A77B FE 28       >                        cp      40
  62++A77D D4 1B C6    >                        call    nc,SetShipHostile
  63++A780              .NotBountyHunter:
  64++A780 3A 0F C4     .CheckHostile:          ld      a,(ShipNewBitsAddr)
  65++A783 E6 04                                and     ShipIsHostile
  66++A785 20 09                                jr      nz,.ItsHostile
  67++A787 3A 0F C4     .ItsNotHostile:         ld      a,(ShipNewBitsAddr)
  68++A78A E6 10                                and     ShipIsDocking                   ; if bit 4 is not clear
  69++A78C 20 01                                jr      nz,.NotDocking
  70++A78E              .ItsDocking:            ;break
  71++A78E                                      ;       do docking algorithm
  72++A78E                                      ;       return
  73++A78E C9                                   ret
  74++A78F              .NotDocking:            ;break
  75++A78F                                      ;       calcuilate vector to planet
  76++A78F                                      ;       move towards planet
  77++A78F                                      ;       return
  78++A78F C9                                   ret
  79++A790 3A 0F C4     .ItsHostile:            ld      a,(ShipNewBitsAddr)
  80++A793 E6 08        .IsItPirate:            and     ShipIsPirate
  81++A795 20 0E                                jr      nz,.NotAPirate
  82++A797              .IsItInSafeZone:        ;      if we are not in space station safe zone
  83++A797 3A 0F C4     .InSafeZone:            ld      a,(ShipNewBitsAddr)
  84++A79A F6 81                                or      Bit7Only | ShipIsTrader
  85++A79C CD 83 AA     .NotSafeZone:           call    SetPlayerAsTarget
  86++A79F CD 5E AA                             call    CopyPosToVector
  87++A7A2 CD F0 AA                             call    NormalizeTactics
  88++A7A5              .NotAPirate:
  89++A7A5 3A 5F C0     .SpawnFighter:          ld      a,(UBnkFightersLeft)
  90++A7A8 A7                                   and     a
  91++A7A9 28 0C                                jr      z,.NoFighters
  92++A7AB CD 0A 85     .CanSpawnFighter:       call    doRandom
  93++A7AE                                      JumpIfALTNusng 200, .NoFighters
  93++A7AE FE C8       >                        cp      200
  93++A7B0 DA B7 A7    >                        jp		c, .NoFighters
  94++A7B3                                      ;break
  95++A7B3                                      ;SPAWN FIGHTER of Type UBnkFighterShipId at Y - 20 z - 20
  96++A7B3 21 5F C0                             ld      hl,UBnkFightersLeft             ;reduced figters left
  97++A7B6 35                                   dec     (hl)
  98++A7B7                                      ;inherits parent's ai angry
  99++A7B7 3A 61 7E     .NoFighters:            ld      a,(RandomSeed3)                 ;if random >= 250
 100++A7BA F6 68                                or      104                             ;set a noticable roll
 101++A7BC 3A 06 C4     .CheckEnergyLevels:     ld      a,(EnergyAddr)
 102++A7BF 47                                   ld      b,a
 103++A7C0 3A 59 C0                             ld      a,(UBnkEnergy)
 104++A7C3 CB 38                                srl     b                               ; max energy / 2
 105++A7C5                                      JumpIfAGTENusng b,.EnergyOverHalf       ; if ship max energy / 2 < current enerhy
 105++A7C5 B8          >                        cp     b
 105++A7C6 D2 E9 A7    >                        jp		nc,.EnergyOverHalf
 106++A7C9 CB 38                                srl     b
 107++A7CB                                      JumpIfAGTENusng b,.EnergyOverQuater     ; if ship max enery / 4 < current energy
 107++A7CB B8          >                        cp     b
 107++A7CC D2 E9 A7    >                        jp		nc,.EnergyOverQuater
 108++A7CF 3A 0F C4                             ld      a,(ShipNewBitsAddr)
 109++A7D2 E6 80                                and     ShipHasEscapePod
 110++A7D4 28 13                                jr      z, .NoEscapePod
 111++A7D6 3A 60 7E                             ld      a,(RandomSeed2)
 112++A7D9                                      JumpIfALTNusng 230,.NoEscapePod         ;if random >= 230
 112++A7D9 FE E6       >                        cp      230
 112++A7DB DA E9 A7    >                        jp		c, .NoEscapePod
 113++A7DE 3A 55 C0                             ld      a,(UBnkaiatkecm)                ;  disable ship AI hostily and ECM
 114++A7E1 E6 7F                                and     ShipAIDisabled                  ;  .
 115++A7E3 32 55 C0                             ld      (UBnkaiatkecm),a                ;  .
 116++A7E6                                      ;ZeroA                                   ;  .
 117++A7E6 32 5B C0                             ld      (UBnkECMFitted),a               ;  .
 118++A7E9              .LaunchEscapePod:       ;break
 119++A7E9                                      ;            goto spawn escape pod
 120++A7E9              .EnergyOverHalf:
 121++A7E9              .EnergyOverQuater:
 122++A7E9 3A 5D C0     .NoEscapePod:           ld      a,(UBnkMissilesLeft)            ;      if missiles > 0
 123++A7EC 47                                   ld      b,a
 124++A7ED                                      JumpIfAIsZero .NoMissileLaunch
 124++A7ED A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 124++A7EE CA 04 A8    >                        jp	    z, .NoMissileLaunch
 125++A7F1 3A 61 7E     .MissileLaunchTest:     ld      a,(RandomSeed3)                 ;         if random and 15 > = nbr missiles
 126++A7F4 E6 0F                                and     15
 127++A7F6                                      JumpIfALTNusng b, .NoMissileLaunch
 127++A7F6 B8          >                        cp      b
 127++A7F7 DA 04 A8    >                        jp		c, .NoMissileLaunch
 128++A7FA 3A 86 7E                             ld      a,(ECMCountDown)
 129++A7FD                                      JumpIfAIsNotZero  .NoMissileLaunch
 129++A7FD A7          >                        and     a
 129++A7FE C2 04 A8    >                        jp	    nz,.NoMissileLaunch
 130++A801 C3 EC 62                             jp    LaunchEnemyMissile                ; jump out and return if firing missile
 131++A804 3A 21 C0     .NoMissileLaunch:       ld      a,(UBnkxhi)
 132++A807 2A 24 C0                             ld      hl,(UBnkyhi)
 133++A80A B6                                   or      (hl)
 134++A80B 2A 27 C0                             ld      hl,(UBnkzhi)
 135++A80E B6                                   or      (hl)
 136++A80F                                      JumpIfAGTENusng 160, .TooFarForLaser   ; if in laser range (all highs order together < 160)
 136++A80F FE A0       >                        cp     160
 136++A811 D2 38 A8    >                        jp		nc,.TooFarForLaser
 137++A814 CD E8 A9                             call    XX12EquTacticsDotNosev
 138++A817 47                                   ld      b,a
 139++A818 3A 73 7F                             ld      a,(varS)
 140++A81B                                      JumpIfAIsNotZero .TooFarForLaser        ;   if dot product of ship < 160 i.e. > -32
 140++A81B A7          >                        and     a
 140++A81C C2 38 A8    >                        jp	    nz,.TooFarForLaser
 141++A81F 78                                   ld      a,b                            ;    .
 142++A820                                      JumpIfALTNusng    32, .DoneLaserShot  ;    .
 142++A820 FE 20       >                        cp      32
 142++A822 DA 33 A8    >                        jp		c, .DoneLaserShot
 143++A825              .FireLaser:             ;break                        ;      do fire laser logic (drain energy, add beam to lines as random line from ship to a random edge of screen)
 144++A825 78                                   ld      a,b ;; need to see if b gets corrupted by laser fire
 145++A826                                      JumpIfAEqNusng      35, .LaserHitPlayer
 145++A826 FE 23       >                        cp     35
 145++A828 CA 33 A8    >                        jp      z,.LaserHitPlayer
 146++A82B                                      JumpIfAEqNusng      36, .LaserHitPlayer
 146++A82B FE 24       >                        cp     36
 146++A82D CA 33 A8    >                        jp      z,.LaserHitPlayer
 147++A830 C3 33 A8     .LaserMissedPlayer:     jp      .DoneLaserShot
 148++A833              .LaserHitPlayer:        ;break ;         do direct hit logic
 149++A833 21 47 C0     .DoneLaserShot:         ld      hl,UBnkAccel                   ;      Half attacking ship's accelleration in byte 28 (dec so must be 0 1 or 2)
 150++A836 CB 26                                sla     (hl)
 151++A838              .TooFarForLaser:
 152++A838              .UpdateShip             ;break
 153++A838 CD E4 A1                             call    CalculateAgression              ; refresh aggression levels
 154++A83B 3A 27 C0                             ld      a,(UBnkzhi)
 155++A83E                                      JumpIfAGTENusng 3, .ShipFarAway
 155++A83E FE 03       >                        cp     3
 155++A840 D2 4E A8    >                        jp		nc,.ShipFarAway
 156++A843 3A 21 C0                             ld      a,(UBnkxhi)
 157++A846 2A 24 C0                             ld      hl,(UBnkyhi)
 158++A849 B6                                   or      (hl)
 159++A84A E6 FE                                and     %11111110
 160++A84C 28 26                                jr      z,.ShipTurnAway
 161++A84E 3A 60 7E     .ShipFarAway:           ld      a,(RandomSeed2)                     ; if random with bit 7 set < ship AI byte 32 flag
 162++A851                                      ;or      %10000000               ; .
 163++A851                                      JumpIfAGTEMemusng UBnkShipAggression, .ShipTurnAway
 163++A851 21 54 C0    >                        ld      hl,UBnkShipAggression
 163++A854 BE          >                        cp      (hl)
 163++A855 D2 74 A8    >                        jp		nc,.ShipTurnAway
 164++A858                                      FlipSignMem TacticsVectorX+2                ; negate vector in XX15 so it points opposite direction
 164++A858 3A D8 A3    >                        ld  a,(TacticsVectorX+2)
 164++A85B EE 80       >                        xor SignOnly8Bit
 164++A85D 32 D8 A3    >                        ld  (TacticsVectorX+2),a
 165++A860                                      FlipSignMem TacticsVectorY+2                ; we have already negated the dot product above
 165++A860 3A DC A3    >                        ld  a,(TacticsVectorY+2)
 165++A863 EE 80       >                        xor SignOnly8Bit
 165++A865 32 DC A3    >                        ld  (TacticsVectorY+2),a
 166++A868                                      FlipSignMem TacticsVectorZ+2                ; .
 166++A868 3A E0 A3    >                        ld  a,(TacticsVectorZ+2)
 166++A86B EE 80       >                        xor SignOnly8Bit
 166++A86D 32 E0 A3    >                        ld  (TacticsVectorZ+2),a
 167++A870 CD 78 A8                             call    ShipSeekingLogic            ;    seek as per missile
 168++A873 C9                                   ret
 169++A874 CD 78 A8     .ShipTurnAway:          call    ShipSeekingLogic            ; move away (ie.. as per missile but dot products not reversed)
 170++A877                                      ;              consider a random roll
 171++A877 C9                                   ret
 172++A878
 173++A878 CD E8 A9     ShipSeekingLogic:       call    XX12EquTacticsDotNosev              ; SA = nose . XX15                           (     ->TAS3)
 174++A87B 32 99 A3                             ld      (TacticsDotProduct1),a              ; CNT = A (high byte of dot product)
 175++A87E 3A 73 7F                             ld      a,(varS)                            ; get sign from dot product
 176++A881 32 9D A3                             ld      (TacticsDotProduct2+1),a            ; Note here its direction not dir
 177++A884 CD 46 AA     .RoofDotProduct:        call    XX12EquTacticsDotRoofv              ; Now tran the roof for rotation
 178++A887 32 9C A3                             ld      (TacticsDotProduct2),a              ; so if its +ve then the roof is similar so pull up to head towards it
 179++A88A 3A 73 7F                             ld      a,(varS)                            ; .
 180++A88D 32 9D A3                             ld      (TacticsDotProduct2+1),a            ; Note here its direction not dir
 181++A890 CD 9A A8                             call    ShipPitchv3
 182++A893 CD BE A8                             call    ShipRollv3
 183++A896 CD EC A8                             call    ShipSpeedv3
 184++A899 C9                                   ret
 185++A89A
 186++A89A 2A 9C A3     ShipPitchv3:            ld      hl,(TacticsDotProduct2)            ; pitch counter sign = opposite sign to roofdir sign
 187++A89D 7C                                   ld      a,h                                ; .
 188++A89E EE 80                                xor     $80                                ; .
 189++A8A0 E6 80                                and     $80                                ; .
 190++A8A2 67                                   ld      h,a                                ; h  = flipped sign
 191++A8A3 7D                                   ld      a,l                                ; a = value * 2
 192++A8A4 CB 27                                sla     a                                  ;
 193++A8A6                                      JumpIfAGTENusng 16, .skipPitchZero         ; if its > 16 then update pitch
 193++A8A6 FE 10       >                        cp     16
 193++A8A8 D2 B4 A8    >                        jp		nc,.skipPitchZero
 194++A8AB                                      ZeroA                                      ; else we zero pitch but
 194++A8AB AF          >                        xor a
 195++A8AC B4                                   or      h                                  ; we need to retain the sign
 196++A8AD 32 4A C0                             ld      (UBnkRotZCounter),a                ; .
 197++A8B0                                      IFDEF MISSILEDEBUG
 198++A8B0 32 29 A4                                 ld  (TacticsRotZ),a
 199++A8B3                                      ENDIF
 200++A8B3 C9                                   ret
 201++A8B4 3E 02        .skipPitchZero:         ld      a,2
 202++A8B6 B4                                   or      h
 203++A8B7 32 4A C0                             ld      (UBnkRotZCounter),a
 204++A8BA                                      IFDEF MISSILEDEBUG
 205++A8BA 32 29 A4                                 ld  (TacticsRotZ),a
 206++A8BD                                      ENDIF
 207++A8BD C9                                   ret
 208++A8BE
 209++A8BE CD 4C AA     ShipRollv3:             call    XX12EquTacticsDotSidev             ; calculate side dot protuct
 210++A8C1 32 9F A3                             ld      (TacticsDotProduct3),a             ; .
 211++A8C4 6F                                   ld      l,a                                ; .
 212++A8C5 3A 73 7F                             ld      a,(varS)                           ; .
 213++A8C8 32 A0 A3                             ld      (TacticsDotProduct3+1),a           ; .
 214++A8CB 67                                   ld      h,a                                ; h = sign sidev
 215++A8CC 3A 9D A3                             ld      a,(TacticsDotProduct2+1)           ; get flipped pitch counter sign
 216++A8CF 47                                   ld      b,a                                ; b = roof product
 217++A8D0 7D                                   ld      a,l                                ; a = abs sidev  * 2
 218++A8D1 CB 27                                sla     a                                  ;
 219++A8D3                                      JumpIfAGTENusng 16,.skipRollZero           ;
 219++A8D3 FE 10       >                        cp     16
 219++A8D5 D2 E1 A8    >                        jp		nc,.skipRollZero
 220++A8D8                                      ZeroA                                      ; if its zoer then set rotx to zero
 220++A8D8 AF          >                        xor a
 221++A8D9 B0                                   or      b
 222++A8DA 32 48 C0                             ld      (UBnkRotXCounter),a
 223++A8DD                                      IFDEF MISSILEDEBUG
 224++A8DD 32 27 A4                                 ld  (TacticsRotX),a
 225++A8E0                                      ENDIF
 226++A8E0 C9                                   ret
 227++A8E1 3E 02        .skipRollZero:          ld      a,2
 228++A8E3 B4                                   or      h
 229++A8E4 A8                                   xor     b
 230++A8E5 32 48 C0                             ld      (UBnkRotXCounter),a
 231++A8E8                                      IFDEF MISSILEDEBUG
 232++A8E8 32 27 A4                                 ld  (TacticsRotX),a
 233++A8EB                                      ENDIF
 234++A8EB C9                                   ret
 235++A8EC
 236++A8EC 2A 99 A3     ShipSpeedv3:            ld      hl,(TacticsDotProduct1)
 237++A8EF 7C                                   ld      a,h
 238++A8F0 A7                                   and     a
 239++A8F1 20 13                                jr      nz,.SlowDown
 240++A8F3 ED 5B 9C A3                          ld      de,(TacticsDotProduct2)             ; dot product is +ve so heading at each other
 241++A8F7 7D                                   ld      a,l
 242++A8F8                                      JumpIfALTNusng  22,.SlowDown                                  ; nose dot product <
 242++A8F8 FE 16       >                        cp      22
 242++A8FA DA 06 A9    >                        jp		c, .SlowDown
 243++A8FD 3E 03        .Accelerate:            ld      a,3                                 ; else
 244++A8FF 32 47 C0                             ld      (UBnkAccel),a                       ;  accelleration = 3
 245++A902                                      IFDEF MISSILEDEBUG
 246++A902 32 2B A4                                 ld  (TacticsSpeed),a
 247++A905                                      ENDIF
 248++A905 C9                                   ret                                         ;  .
 249++A906              .SlowDown:              JumpIfALTNusng 18, .NoSpeedChange
 249++A906 FE 12       >                        cp      18
 249++A908 DA 14 A9    >                        jp		c, .NoSpeedChange
 250++A90B 3E FF        .Deccelerate:           ld      a,-1
 251++A90D 32 47 C0                             ld      (UBnkAccel),a
 252++A910                                      IFDEF MISSILEDEBUG
 253++A910 32 2B A4                                 ld  (TacticsSpeed),a
 254++A913                                      ENDIF
 255++A913 C9                                   ret
 256++A914              .NoSpeedChange:         ZeroA                                       ; else no change
 256++A914 AF          >                        xor a
 257++A915 32 47 C0                             ld      (UBnkAccel),a
 258++A918                                      IFDEF MISSILEDEBUG
 259++A918 32 2B A4                                 ld  (TacticsSpeed),a
 260++A91B                                      ENDIF
 261++A91B C9                                   ret
 262++A91C              ;;;ShipPitchv2:  ;break
 263++A91C              ;;;                        ld      hl,(TacticsDotProduct2)            ; pitch counter sign = opposite sign to roofdir sign
 264++A91C              ;;;                        ld      a,h                                ; .
 265++A91C              ;;;                        xor     $80                                ; .
 266++A91C              ;;;                        and     $80                                ; .
 267++A91C              ;;;                        ld      h,a                                ; h  = flipped sign
 268++A91C              ;;;                        ld      a,l                                ; a = value * 2
 269++A91C              ;;;                        sla     a                                  ;
 270++A91C              ;;;                        JumpIfAGTENusng 16, .skipPitchZero         ; if its > 16 then update pitch
 271++A91C              ;;;                        ZeroA                                      ; else we zero pitch but
 272++A91C              ;;;                        or      h                                  ; we need to retain the sign
 273++A91C              ;;;                        ld      (UBnkRotZCounter),a                ; .
 274++A91C              ;;;                        IFDEF MISSILEDEBUG
 275++A91C              ;;;                            ld  (TacticsRotZ),a
 276++A91C              ;;;                        ENDIF
 277++A91C              ;;;                        ret
 278++A91C              ;;;.skipPitchZero:         ld      a,3
 279++A91C              ;;;                        or      h
 280++A91C              ;;;                        ld      (UBnkRotZCounter),a
 281++A91C              ;;;                        IFDEF MISSILEDEBUG
 282++A91C              ;;;                            ld  (TacticsRotZ),a
 283++A91C              ;;;                        ENDIF
 284++A91C              ;;;                        ret
 285++A91C
 286++A91C
 287++A91C              ;;;ShipRollv2:             ld      a,(UBnkRotXCounter)
 288++A91C              ;;;                        and     $7F
 289++A91C              ;;;                        cp      16
 290++A91C              ;;;                        ret     z
 291++A91C              ;;;                        call    XX12EquTacticsDotSidev             ; calculate side dot protuct
 292++A91C              ;;;                        ld      (TacticsDotProduct3),a             ; .
 293++A91C              ;;;                        ld      l,a                                ; .
 294++A91C              ;;;                        ld      a,(varS)                           ; .
 295++A91C              ;;;                        ld      (TacticsDotProduct3+1),a           ; .
 296++A91C              ;;;                        ld      h,a                                ; h = sign sidev
 297++A91C              ;;;                        ld      a,(TacticsDotProduct2+1)           ; get flipped pitch counter sign
 298++A91C              ;;;                        ld      b,a                                ; b = roof product
 299++A91C              ;;;                        ld      a,l                                ; a = abs sidev  * 2
 300++A91C              ;;;                        sla     a                                  ;
 301++A91C              ;;;                        JumpIfAGTENusng 16,.skipRollZero           ;
 302++A91C              ;;;                        ZeroA                                      ; if its zoer then set rotx to zero
 303++A91C              ;;;                        or      b
 304++A91C              ;;;                        ld      (UBnkRotXCounter),a
 305++A91C              ;;;                        IFDEF MISSILEDEBUG
 306++A91C              ;;;                            ld  (TacticsRotX),a
 307++A91C              ;;;                        ENDIF
 308++A91C              ;;;                        ret
 309++A91C              ;;;.skipRollZero:          ld      a,3
 310++A91C              ;;;                        or      h
 311++A91C              ;;;                        xor     b
 312++A91C              ;;;                        ld      (UBnkRotXCounter),a
 313++A91C              ;;;                        IFDEF MISSILEDEBUG
 314++A91C              ;;;                            ld  (TacticsRotX),a
 315++A91C              ;;;                        ENDIF
 316++A91C              ;;;                        ret
 317++A91C              ;;;
 318++A91C              ;;;ShipSpeedv2:            ld      hl,(TacticsDotProduct1)
 319++A91C              ;;;                        ld      a,h
 320++A91C              ;;;                        and     a
 321++A91C              ;;;                        jr      nz,.SlowDown
 322++A91C              ;;;                        ld      de,(TacticsDotProduct2)             ; dot product is +ve so heading at each other
 323++A91C              ;;;                        ld      a,l
 324++A91C              ;;;                        JumpIfALTNusng  22,.SlowDown                                  ; nose dot product <
 325++A91C              ;;;.Accelerate:            ld      a,2                                 ; else
 326++A91C              ;;;                        ld      (UBnkAccel),a                       ;  accelleration = 3
 327++A91C              ;;;                        IFDEF MISSILEDEBUG
 328++A91C              ;;;                            ld  (TacticsSpeed),a
 329++A91C              ;;;                        ENDIF
 330++A91C              ;;;                        ret                                         ;  .
 331++A91C              ;;;.SlowDown:              JumpIfALTNusng 18, .NoSpeedChange
 332++A91C              ;;;.Deccelerate:           ld      a,-1
 333++A91C              ;;;                        ld      (UBnkAccel),a
 334++A91C              ;;;                        IFDEF MISSILEDEBUG
 335++A91C              ;;;                            ld  (TacticsSpeed),a
 336++A91C              ;;;                        ENDIF
 337++A91C              ;;;                        ret
 338++A91C              ;;;.NoSpeedChange:         ZeroA                                       ; else no change
 339++A91C              ;;;                        ld      (UBnkAccel),a
 340++A91C              ;;;                        IFDEF MISSILEDEBUG
 341++A91C              ;;;                            ld  (TacticsSpeed),a
 342++A91C              ;;;                        ENDIF
 343++A91C              ;;;                        ret
 344++A91C              ;;;
 345++A91C              ;;;
 346++A91C              ;;;
 347++A91C              ;;;RAT2 equ    4           ; roll pitch threshold
 348++A91C              ;;;RAT  equ    3           ; magnitude of counter
 349++A91C              ;;;CNT2 equ    22          ; angle for ship slowdown
 350++A91C              ;;;
 351++A91C              ;;;
 352++A91C              ;;;ShipPitch:              ld      hl,(TacticsDotProduct2)            ; pitch counter sign = opposite sign to roofdir sign
 353++A91C              ;;;                        ld      a,h                                ; .
 354++A91C              ;;;                        xor     $80                                ; .
 355++A91C              ;;;                        and     $80                                ; .
 356++A91C              ;;;                        ld      h,a                                ; h  = flipped sign
 357++A91C              ;;;                        ld      a,l                                ; a = value * 2
 358++A91C              ;;;                        sla     a                                  ;
 359++A91C              ;;;                        JumpIfAGTENusng RAT2, .skipPitchZero         ; if its > 16 then update pitch
 360++A91C              ;;;                        ZeroA                                      ; else we zero pitch but
 361++A91C              ;;;                        or      h                                  ; we need to retain the sign
 362++A91C              ;;;                        ld      (UBnkRotZCounter),a                ; .
 363++A91C              ;;;                        IFDEF MISSILEDEBUG
 364++A91C              ;;;                            ld  (TacticsRotZ),a
 365++A91C              ;;;                        ENDIF
 366++A91C              ;;;                        ret
 367++A91C              ;;;.skipPitchZero:         ld      a,l
 368++A91C              ;;;                        or      h
 369++A91C              ;;;                        ld      (UBnkRotZCounter),a
 370++A91C              ;;;                        IFDEF MISSILEDEBUG
 371++A91C              ;;;                            ld  (TacticsRotZ),a
 372++A91C              ;;;                        ENDIF
 373++A91C              ;;;                        ret
 374++A91C              ;;;
 375++A91C              ;;;
 376++A91C              ;;;                        ;
 377++A91C              ;;;ShipRoll:               call    XX12EquTacticsDotSidev             ; calculate side dot protuct
 378++A91C              ;;;                        ld      (TacticsDotProduct3),a             ; .
 379++A91C              ;;;                        ld      l,a                                ; .
 380++A91C              ;;;                        ld      a,(varS)                           ; .
 381++A91C              ;;;                        ld      (TacticsDotProduct3+1),a           ; .
 382++A91C              ;;;                        ld      h,a                                ; h = sign sidev
 383++A91C              ;;;                        ld      a,(TacticsDotProduct2+1)           ; get flipped pitch counter sign
 384++A91C              ;;;                        ld      b,a                                ; b = roof product
 385++A91C              ;;;                        ld      a,l                                ; a = abs sidev  * 2
 386++A91C              ;;;                        sla     a                                  ;
 387++A91C              ;;;                        JumpIfAGTENusng RAT2,.skipRollZero           ;
 388++A91C              ;;;                        ZeroA                                      ; if its zoer then set rotx to zero
 389++A91C              ;;;                        or      b
 390++A91C              ;;;                        ld      (UBnkRotXCounter),a
 391++A91C              ;;;                        IFDEF MISSILEDEBUG
 392++A91C              ;;;                            ld  (TacticsRotX),a
 393++A91C              ;;;                        ENDIF
 394++A91C              ;;;                        ret
 395++A91C              ;;;.skipRollZero:          ld      a,1
 396++A91C              ;;;                        or      h
 397++A91C              ;;;                        xor     b
 398++A91C              ;;;                        ld      (UBnkRotXCounter),a
 399++A91C              ;;;                        IFDEF MISSILEDEBUG
 400++A91C              ;;;                            ld  (TacticsRotX),a
 401++A91C              ;;;                        ENDIF
 402++A91C              ;;;                        ret
 403++A91C              ;;;
 404++A91C              ;;;ShipSpeed:              ld      hl,(TacticsDotProduct1)
 405++A91C              ;;;                        ld      a,h
 406++A91C              ;;;                        and     a
 407++A91C              ;;;                        jr      nz,.SlowDown
 408++A91C              ;;;                        ld      de,(TacticsDotProduct2)             ; dot product is +ve so heading at each other
 409++A91C              ;;;                        ld      a,l
 410++A91C              ;;;                        JumpIfALTNusng  22,.SlowDown                                  ; nose dot product <
 411++A91C              ;;;.Accelerate:            ld      a,3                                 ; else
 412++A91C              ;;;                        ld      (UBnkAccel),a                       ;  accelleration = 3
 413++A91C              ;;;                        IFDEF MISSILEDEBUG
 414++A91C              ;;;                            ld  (TacticsSpeed),a
 415++A91C              ;;;                        ENDIF
 416++A91C              ;;;                        ret                                         ;  .
 417++A91C              ;;;.SlowDown:              JumpIfALTNusng 18, .NoSpeedChange
 418++A91C              ;;;.Deccelerate:           ld      a,-1
 419++A91C              ;;;                        ld      (UBnkAccel),a
 420++A91C              ;;;                        IFDEF MISSILEDEBUG
 421++A91C              ;;;                            ld  (TacticsSpeed),a
 422++A91C              ;;;                        ENDIF
 423++A91C              ;;;                        ret
 424++A91C              ;;;.NoSpeedChange:         ZeroA                                       ; else no change
 425++A91C              ;;;                        ld      (UBnkAccel),a
 426++A91C              ;;;                        IFDEF MISSILEDEBUG
 427++A91C              ;;;                            ld  (TacticsSpeed),a
 428++A91C              ;;;                        ENDIF
 429++A91C              ;;;                        ret
 430++A91C
# file closed: ./GameEngine/../GameEngine/NormalAI.asm
 269+ A91C
 270+ A91C              ; On Entry A = TacticsDotProduct2 sign (i.e. roof direction)
 271+ A91C              ; on exit a == new roll
 272+ A91C EE 80        calcNPitch:             xor     SignOnly8Bit                    ; c = sign flipped of dot product only
 273+ A91E E6 80                                and     SignOnly8Bit                    ; .
 274+ A920 4F                                   ld      c,a                             ; . (varT in effect)
 275+ A921 F6 03                                or      MISSILEMAXPITCH                 ; a = flipped sign max pitch
 276+ A923 3A 4A C0                             ld      a,(UBnkRotZCounter)             ; b = abs (currentz pitch)
 277+ A926 C9                                   ret
 278+ A927
 279+ A927 E6 7F                                and     SignMask8Bit                    ; . which will initially be 0
 280+ A929 47                                   ld      b,a                             ; .
 281+ A92A 3A 9C A3                             ld      a,(TacticsDotProduct2)          ; a = abs roof dot product
 282+ A92D                                      JumpIfALTNusng MISSILEMAXPITCH+1, .calcNPitch2    ; if a >= roll threshold
 282+ A92D FE 04       >                        cp      MISSILEMAXPITCH+1
 282+ A92F DA 3C A9    >                        jp		c, .calcNPitch2
 283+ A932 78                                   ld      a,b
 284+ A933 E6 80                                and     SignOnly8Bit
 285+ A935                                      ;jr      z,.NPitchPositive
 286+ A935                                     ; ld      a,
 287+ A935 3E 03                                ld      a,MISSILEMAXPITCH                         ;    z rot = z rot * dot product flipped sign
 288+ A937 B1                                   or      c                               ;    i.e. zrot = current magnitude but dot product sign flipped
 289+ A938 32 4A C0                             ld      (UBnkRotZCounter),a             ;    .
 290+ A93B C9                                   ret                                     ; else (a LT current abs z)
 291+ A93C B1           .calcNPitch2:           or      c                               ;     rot z = dot product with sign flipped
 292+ A93D 32 4A C0                             ld      (UBnkRotZCounter),a             ;
 293+ A940 C9                                   ret                                     ;
 294+ A941
 295+ A941 3A 4A C0     calcNRoll:              ld      a,(UBnkRotZCounter)
 296+ A944 E6 80                                and     SignOnly8Bit
 297+ A946 EE 80                                xor     SignOnly8Bit                    ; flip sign of dot product
 298+ A948 F6 05                                or      5
 299+ A94A 32 48 C0                             ld      (UBnkRotXCounter),a
 300+ A94D C9                                   ret
 301+ A94E
 302+ A94E 4F                                   ld      c,a
 303+ A94F F6 03                                or      MISSILEMAXPITCH
 304+ A951 3A 48 C0                             ld      a,(UBnkRotXCounter)
 305+ A954 C9                                   ret
 306+ A955
 307+ A955
 308+ A955
 309+ A955 E6 7F                                and     SignMask8Bit                    ; get ABS value
 310+ A957 47                                   ld      b,a
 311+ A958 3A 9C A3                             ld      a,(TacticsDotProduct2)          ; now we have the dot product abs value
 312+ A95B                                      JumpIfALTNusng MISSILEMAXROLL+1, .calcNRoll2
 312+ A95B FE 04       >                        cp      MISSILEMAXROLL+1
 312+ A95D DA 67 A9    >                        jp		c, .calcNRoll2
 313+ A960 3E 03                                ld      a,MISSILEMAXROLL
 314+ A962 B1                                   or      c
 315+ A963 32 48 C0                             ld      (UBnkRotXCounter),a
 316+ A966 C9                                   ret
 317+ A967 B1           .calcNRoll2:            or      c                               ;     rot z = dot product with sign flipped
 318+ A968 32 48 C0                             ld      (UBnkRotXCounter),a
 319+ A96B C9                                   ret
 320+ A96C
 321+ A96C
 322+ A96C 21 2A C0     CopyRotSideToTacticsMat:ld      hl,UBnkrotmatSidevX+1
 323+ A96F C3 7B A9                             jp      CopyRotmatToTacticsMat
 324+ A972
 325+ A972 21 36 C0     CopyRotNoseToTacticsMat:ld      hl,UBnkrotmatNosevX+1
 326+ A975 C3 7B A9                             jp      CopyRotmatToTacticsMat
 327+ A978
 328+ A978 21 30 C0     CopyRotRoofToTacticsMat:ld      hl,UBnkrotmatRoofvX+1
 329+ A97B              ; Coy rotation matrix high byte to trans rot mat, strip off sign and separate to rotmat byte 2
 330+ A97B 11 BA A3     CopyRotmatToTacticsMat: ld      de,TacticsRotMatX
 331+ A97E 7E                                   ld      a,(hl)              ; matrix high byte of x
 332+ A97F 47                                   ld      b,a
 333+ A980 E6 7F                                and     SignMask8Bit
 334+ A982 12                                   ld      (de),a              ; set rot mat value
 335+ A983 13                                   inc     de
 336+ A984 78                                   ld      a,b
 337+ A985 E6 80                                and     SignOnly8Bit
 338+ A987 12                                   ld      (de),a              ; set rot mat sign
 339+ A988 13                                   inc     de                  ; move to next rot mat element
 340+ A989 23                                   inc     hl
 341+ A98A 23                                   inc     hl                  ; matrix high byte of y
 342+ A98B 7E           .processYElement:       ld      a,(hl)              ; matrix high byte of y
 343+ A98C 47                                   ld      b,a
 344+ A98D E6 7F                                and     SignMask8Bit
 345+ A98F 12                                   ld      (de),a              ; set rot mat value
 346+ A990 13                                   inc     de
 347+ A991 78                                   ld      a,b
 348+ A992 E6 80                                and     SignOnly8Bit
 349+ A994 12                                   ld      (de),a              ; set rot mat sign
 350+ A995 13                                   inc     de                  ; move to next rot mat element
 351+ A996 23                                   inc     hl
 352+ A997 23                                   inc     hl                  ; matrix high byte of z
 353+ A998 7E           .ProcessZElement:       ld      a,(hl)              ; matrix high byte of z
 354+ A999 47                                   ld      b,a
 355+ A99A E6 7F                                and     SignMask8Bit
 356+ A99C 12                                   ld      (de),a              ; set rot mat value
 357+ A99D 13                                   inc     de
 358+ A99E 78                                   ld      a,b
 359+ A99F E6 80                                and     SignOnly8Bit
 360+ A9A1 12                                   ld      (de),a              ; set rot mat sign
 361+ A9A2 C9                                   ret
 362+ A9A3
 363+ A9A3                                      IFDEF TACTICSDEBUG
 364+ A9A3              DebugTacticsCopy:
 365+ A9A3 2A 29 C0                             ld      hl,(UBnkrotmatSidevX)
 366+ A9A6 ED 5B 2B C0                          ld      de,(UBnkrotmatSidevY)
 367+ A9AA ED 4B 2D C0                          ld      bc,(UBnkrotmatSidevZ)
 368+ A9AE 22 F6 A3                             ld      (TacticsSideX),hl
 369+ A9B1 ED 53 FA A3                          ld      (TacticsSideY),de
 370+ A9B5 ED 43 FE A3                          ld      (TacticsSideZ),bc
 371+ A9B9
 372+ A9B9 2A 2F C0                             ld      hl,(UBnkrotmatRoofvX)
 373+ A9BC ED 5B 31 C0                          ld      de,(UBnkrotmatRoofvY)
 374+ A9C0 ED 4B 33 C0                          ld      bc,(UBnkrotmatRoofvZ)
 375+ A9C4 22 06 A4                             ld      (TacticsRoofX),hl
 376+ A9C7 ED 53 0A A4                          ld      (TacticsRoofY),de
 377+ A9CB ED 43 0E A4                          ld      (TacticsRoofZ),bc
 378+ A9CF
 379+ A9CF 2A 35 C0                             ld      hl,(UBnkrotmatNosevX)
 380+ A9D2 ED 5B 37 C0                          ld      de,(UBnkrotmatNosevY)
 381+ A9D6 ED 4B 39 C0                          ld      bc,(UBnkrotmatNosevZ)
 382+ A9DA 22 16 A4                             ld      (TacticsNoseX),hl
 383+ A9DD ED 53 1A A4                          ld      (TacticsNoseY),de
 384+ A9E1 ED 43 1E A4                          ld      (TacticsNoseZ),bc
 385+ A9E5
 386+ A9E5 C9                                   ret
 387+ A9E6                                      ENDIF
 388+ A9E6
 389+ A9E6 00 00        TacticsVarResult        DW 0
 390+ A9E8 CD 72 A9     XX12EquTacticsDotNosev: call    CopyRotNoseToTacticsMat
 391+ A9EB 21 BA A3     XX12EquTacticsDotHL:    ld      hl,TacticsRotMatX; UBnkTransmatNosevX    ; ROTMATX HI
 392+ A9EE 7E           .CalcXValue:            ld      a,(hl)                              ; DE = RotMatX & Vect X
 393+ A9EF 5F                                   ld      e,a                                 ; .
 394+ A9F0 3A D6 A3                             ld      a,(TacticsVectorX)                  ; .
 395+ A9F3 57                                   ld      d,a                                 ; .
 396+ A9F4 ED 30                                mul                                         ; .
 397+ A9F6 7A                                   ld      a,d                                 ; S = A = Hi (RotMatX & Vect X)
 398+ A9F7 32 73 7F                             ld      (varS),a                            ; .
 399+ A9FA 23                                   inc     hl                                  ; move to sign byte
 400+ A9FB 3A D8 A3     .CalcXSign:             ld      a,(TacticsVectorX+2)                ; B  = A = Sign VecX xor sign RotMatX
 401+ A9FE AE                                   xor     (hl)                                ; .
 402+ A9FF 47                                   ld      b,a                                 ; .
 403+ AA00 23           .MoveToY:               inc     hl                                  ; Move on to Y component
 404+ AA01 7E           .CalcYValue:            ld      a,(hl)                              ; D = 0, E = Hi (RotMatY & Vect Y)
 405+ AA02 5F                                   ld      e,a                                 ; .
 406+ AA03 3A DA A3                             ld      a,(TacticsVectorY)                  ; .
 407+ AA06 57                                   ld      d,a                                 ; .
 408+ AA07 ED 30                                mul     de                                  ; .
 409+ AA09 5A                                   ld      e,d                                 ; .
 410+ AA0A 16 00                                ld      d,0                                 ; .
 411+ AA0C 23                                   inc     hl                                  ; move to sign byte
 412+ AA0D 3A DC A3     .CalcYSign:             ld      a,(TacticsVectorY+2)                ; c = sign of y_sign * sidev_y
 413+ AA10 AE                                   xor     (hl)                                ;
 414+ AA11 4F                                   ld      c,a                                 ;
 415+ AA12 23           .MoveToZ:               inc     hl                                  ; Move on to Z component
 416+ AA13 E5           .AddXandY:              push    hl                                  ; but save HL as we need that
 417+ AA14 3A 73 7F                             ld      a,(varS)                            ; hl = Hi (RotMatX & Vect X) b= sign
 418+ AA17 26 00                                ld      h,0                                 ; de = Hi (RotMatY & Vect Y) c= sign
 419+ AA19 6F                                   ld      l,a                                 ;
 420+ AA1A                                      MMUSelectMathsBankedFns
 420+ AA1A ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 421+ AA1E CD 2F 00                             call    ADDHLDESignBC                       ; a(sign) hl = sum
 422+ AA21 47                                   ld      b,a                                 ; b = sign of result
 423+ AA22 22 E6 A9                             ld      (TacticsVarResult),hl               ; save sub in TacticsVarResult
 424+ AA25 E1           .CalcZValue:            pop     hl                                  ; get back to the rotation mat z
 425+ AA26 7E                                   ld      a,(hl)                              ; D = 0, E = Hi (RotMatZ & Vect Z)
 426+ AA27 5F                                   ld      e,a                                 ; .
 427+ AA28 3A DE A3                             ld      a,(TacticsVectorZ)                  ; .
 428+ AA2B 57                                   ld      d,a                                 ; .
 429+ AA2C ED 30                                mul     de                                  ; .
 430+ AA2E 5A                                   ld      e,d                                 ; .
 431+ AA2F 16 00                                ld      d,0                                 ; .
 432+ AA31 23                                   inc     hl                                  ; move to sign byte
 433+ AA32 3A E0 A3     .CalcZSign:             ld      a,(TacticsVectorZ+2)
 434+ AA35 AE                                   xor     (hl)
 435+ AA36 4F                                   ld      c,a                                 ; Set C to the sign of z_sign * sidev_z
 436+ AA37 2A E6 A9                             ld      hl, (TacticsVarResult)              ; CHL = x + y, BDE = z products
 437+ AA3A                                      MMUSelectMathsBankedFns
 437+ AA3A ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 438+ AA3E CD 2F 00                             call    ADDHLDESignBC                       ; so AHL = X y z products
 439+ AA41 32 73 7F                             ld      (varS),a                            ; for backwards compatibility
 440+ AA44 7D                                   ld      a,l                                  ; .
 441+ AA45 C9                                   ret
 442+ AA46
 443+ AA46 CD 78 A9     XX12EquTacticsDotRoofv: call    CopyRotRoofToTacticsMat
 444+ AA49 C3 EB A9                             jp      XX12EquTacticsDotHL
 445+ AA4C
 446+ AA4C CD 6C A9     XX12EquTacticsDotSidev: call    CopyRotSideToTacticsMat
 447+ AA4F C3 EB A9                             jp      XX12EquTacticsDotHL
 448+ AA52
 449+ AA52 21 20 C0     CopyToTargetVector:     ld      hl,UBnkxlo
 450+ AA55 11 C6 A3                             ld      de,TacticsTargetX
 451+ AA58 01 09 00                             ld      bc,9
 452+ AA5B ED B0                                ldir
 453+ AA5D C9                                   ret
 454+ AA5E
 455+ AA5E 2A 20 C0     CopyPosToVector:        ld      hl,(UBnkxlo)
 456+ AA61 3A 22 C0                             ld      a,(UBnkxsgn)
 457+ AA64                                      ;xor     $80
 458+ AA64 22 D6 A3                             ld      (TacticsVectorX),hl
 459+ AA67 32 D8 A3                             ld      (TacticsVectorX+2),a
 460+ AA6A
 461+ AA6A 2A 23 C0                             ld      hl,(UBnkylo)
 462+ AA6D 3A 25 C0                             ld      a,(UBnkysgn)
 463+ AA70                                      ;xor     $80
 464+ AA70 22 DA A3                             ld      (TacticsVectorY),hl
 465+ AA73 32 DC A3                             ld      (TacticsVectorY+2),a
 466+ AA76
 467+ AA76 2A 26 C0                             ld      hl,(UBnkzlo)
 468+ AA79 3A 28 C0                             ld      a,(UBnkzsgn)
 469+ AA7C                                      ;xor     $80
 470+ AA7C 22 DE A3                             ld      (TacticsVectorZ),hl
 471+ AA7F 32 E0 A3                             ld      (TacticsVectorZ+2),a
 472+ AA82 C9                                   ret
 473+ AA83
 474+ AA83              SetPlayerAsTarget:      ZeroA
 474+ AA83 AF          >                        xor a
 475+ AA84 21 C6 A3                             ld      hl,TacticsTargetX
 476+ AA87 06 09                                ld      b, 3*3
 477+ AA89 77           .ZeroLoop:              ld      (hl),a                              ; player is always at 0,0,0
 478+ AA8A 23                                   inc     hl
 479+ AA8B 10 FC                                djnz    .ZeroLoop
 480+ AA8D C9                                   ret
 481+ AA8E
 482+ AA8E CD 83 AA     CalcVectorToMyShip:     call    SetPlayerAsTarget
 483+ AA91 CD 5E AA                             call    CopyPosToVector
 484+ AA94                                      ;call    CopyToTargetVector
 485+ AA94                                      ;FlipSignMem     TacticsTargetX+2
 486+ AA94                                      ;FlipSignMem     TacticsTargetY+2
 487+ AA94                                      ;FlipSignMem     TacticsTargetZ+2
 488+ AA94 C9                                   ret
 489+ AA95
 490+ AA95 ED 5B C6 A3  CalcTargetVector:       ld      de,(TacticsTargetX)                        ; get target ship X
 491+ AA99 3A C8 A3                             ld      a,(TacticsTargetX+2)                       ; and flip sign so we have missile - target
 492+ AA9C                                      FlipSignBitA
 492+ AA9C EE 80       >                        xor     SignOnly8Bit
 493+ AA9E 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
 494+ AA9F 2A 20 C0                             ld      hl,(UBnkxlo)                        ; get missile x
 495+ AAA2 3A 22 C0                             ld      a,(UBnkxsgn)                        ; get missile x sign
 496+ AAA5 47                                   ld      b,a
 497+ AAA6                                      MMUSelectMathsBankedFns
 497+ AAA6 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 498+ AAAA CD 2F 00                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
 499+ AAAD 22 D6 A3                             ld      (TacticsVectorX),hl
 500+ AAB0 32 D8 A3                             ld      (TacticsVectorX+2),a
 501+ AAB3 ED 5B C9 A3  .UpdateTargetingShipY:  ld      de,(TacticsTargetY)
 502+ AAB7 3A CB A3                             ld      a,(TacticsTargetY+2)
 503+ AABA                                      FlipSignBitA
 503+ AABA EE 80       >                        xor     SignOnly8Bit
 504+ AABC 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
 505+ AABD 2A 23 C0                             ld      hl,(UBnkylo)                        ; get missile x
 506+ AAC0 3A 25 C0                             ld      a,(UBnkysgn)                        ; get missile x sign
 507+ AAC3 47                                   ld      b,a
 508+ AAC4                                      MMUSelectMathsBankedFns
 508+ AAC4 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 509+ AAC8 CD 2F 00                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
 510+ AACB 22 DA A3                             ld      (TacticsVectorY),hl
 511+ AACE 32 DC A3                             ld      (TacticsVectorY+2),a
 512+ AAD1 ED 5B CC A3  .UpdateTargetingShipZ:  ld      de,(TacticsTargetZ)
 513+ AAD5 3A CE A3                             ld      a,(TacticsTargetZ+2)
 514+ AAD8                                      FlipSignBitA
 514+ AAD8 EE 80       >                        xor     SignOnly8Bit
 515+ AADA 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
 516+ AADB 2A 26 C0                             ld      hl,(UBnkzlo)                        ; get missile x
 517+ AADE 3A 28 C0                             ld      a,(UBnkzsgn)                        ; get missile x sign
 518+ AAE1 47                                   ld      b,a
 519+ AAE2                                      MMUSelectMathsBankedFns
 519+ AAE2 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 520+ AAE6 CD 2F 00                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
 521+ AAE9 22 DE A3                             ld      (TacticsVectorZ),hl
 522+ AAEC 32 E0 A3                             ld      (TacticsVectorZ+2),a
 523+ AAEF C9                                   ret
 524+ AAF0
 525+ AAF0              ;-- Now its scaled we can normalise
 526+ AAF0              ;-- Scale down so that h d &b are zero, then do once again so l e and c are 7 bit
 527+ AAF0              ;-- use 7 bit mul96 to ensure we don;t get odd maths
 528+ AAF0 2A D6 A3     NormalizeTactics:       ld      hl, (TacticsVectorX)        ; pull XX15 into registers
 529+ AAF3 ED 5B DA A3                          ld      de, (TacticsVectorY)        ; .
 530+ AAF7 ED 4B DE A3                          ld      bc, (TacticsVectorZ)        ; .
 531+ AAFB 7C           .ScaleLoop:             ld      a,h
 532+ AAFC B2                                   or      d
 533+ AAFD B0                                   or      b
 534+ AAFE 28 0F                                jr      z,.DoneScaling
 535+ AB00                                      ShiftHLRight1
 535+ AB00 CB 3C       >			   srl h
 535+ AB02 CB 1D       >			   rr  l
 536+ AB04                                      ShiftDERight1
 536+ AB04 CB 3A       >			   srl d
 536+ AB06 CB 1B       >			   rr  e
 537+ AB08                                      ShiftBCRight1
 537+ AB08 CB 38       >			   srl b
 537+ AB0A CB 19       >			   rr  c
 538+ AB0C C3 FB AA                             jp      .ScaleLoop
 539+ AB0F              .DoneScaling:           ShiftHLRight1                       ; as the values now need to be sign magnitued
 539+ AB0F CB 3C       >			   srl h
 539+ AB11 CB 1D       >			   rr  l
 540+ AB13                                      ShiftDERight1                       ; e.g. S + 7 bit we need an extra shift
 540+ AB13 CB 3A       >			   srl d
 540+ AB15 CB 1B       >			   rr  e
 541+ AB17                                      ShiftBCRight1                       ; now values are in L E C
 541+ AB17 CB 38       >			   srl b
 541+ AB19 CB 19       >			   rr  c
 542+ AB1B E5 D5 C5                             push    hl,,de,,bc                  ; save vecrtor x y and z nwo they are scaled to 1 byte
 543+ AB1E 53                                   ld      d,e                         ; hl = y(e) ^ 2
 544+ AB1F ED 30                                mul     de                          ; .
 545+ AB21 EB                                   ex      de,hl                       ; .
 546+ AB22 53                                   ld      d,e                         ; de = x(l) ^ 2
 547+ AB23 ED 30                                mul     de                          ; .
 548+ AB25 19                                   add     hl,de                       ; hl = hl + de
 549+ AB26 51                                   ld      d,c                         ; de = y(c)^ 2 + x ^ 2
 550+ AB27 59                                   ld      e,c                         ; .
 551+ AB28 ED 30                                mul     de                          ; .
 552+ AB2A 19                                   add     hl,de                       ; hl =  y^ 2 + x ^ 2 + z ^ 2
 553+ AB2B EB                                   ex      de,hl                       ; fix as hl was holding square
 554+ AB2C CD 95 92                             call    asm_sqrt                    ; IYH = A = hl = sqrt (de) = sqrt (x ^ 2 + y ^ 2 + z ^ 2)
 555+ AB2F                                      ; add in logic if h is low then use lower bytes for all
 556+ AB2F 7D                                   ld      a,l                         ;
 557+ AB30 FD 67                                ld      iyh,a                       ;
 558+ AB32 57                                   ld      d,a                         ; D = sqrt
 559+ AB33 C1                                   pop     bc                          ; retrive tacticsvectorz scaled
 560+ AB34 79                                   ld      a,c                         ; a = scaled byte
 561+ AB35 CD 8F 9B                             call    AequAdivDmul967Bit;AequAdivDmul96Unsg          ; This rountine I think is wrong and retuins bad values
 562+ AB38 32 DE A3                             ld      (TacticsVectorZ),a          ; z = normalised z
 563+ AB3B D1                                   pop     de
 564+ AB3C 7B                                   ld      a,e
 565+ AB3D FD 54                                ld      d,iyh
 566+ AB3F CD 8F 9B                             call    AequAdivDmul967Bit;AequAdivDmul96Unsg
 567+ AB42 32 DA A3                             ld      (TacticsVectorY),a
 568+ AB45 E1                                   pop     hl
 569+ AB46 7D                                   ld      a,l
 570+ AB47 FD 54                                ld      d,iyh
 571+ AB49 CD 8F 9B                             call    AequAdivDmul967Bit;AequAdivDmul96Unsg
 572+ AB4C 32 D6 A3                             ld      (TacticsVectorX),a
 573+ AB4F                                      ; BODGE FOR NOW
 574+ AB4F                                     ; BODGE FOR NOW
 575+ AB4F                                      ZeroA                              ;; added to help debugging
 575+ AB4F AF          >                        xor a
 576+ AB50 32 D7 A3                             ld      (TacticsVectorX+1),a       ;; added to help debugging
 577+ AB53 32 DB A3                             ld      (TacticsVectorY+1),a       ;; added to help debugging
 578+ AB56 32 DF A3                             ld      (TacticsVectorZ+1),a       ;; added to help debugging
 579+ AB59                                      SignBitOnlyMem TacticsVectorX+2     ; now upper byte is sign only
 579+ AB59 3A D8 A3    >                        ld      a, (TacticsVectorX+2)
 579+ AB5C E6 80       >                        and     SignOnly8Bit
 579+ AB5E 32 D8 A3    >                        ld      (TacticsVectorX+2),a
 580+ AB61                                      SignBitOnlyMem TacticsVectorY+2     ; (could move it to lower perhaps later if
 580+ AB61 3A DC A3    >                        ld      a, (TacticsVectorY+2)
 580+ AB64 E6 80       >                        and     SignOnly8Bit
 580+ AB66 32 DC A3    >                        ld      (TacticsVectorY+2),a
 581+ AB69                                      SignBitOnlyMem TacticsVectorZ+2     ;  its worth it)
 581+ AB69 3A E0 A3    >                        ld      a, (TacticsVectorZ+2)
 581+ AB6C E6 80       >                        and     SignOnly8Bit
 581+ AB6E 32 E0 A3    >                        ld      (TacticsVectorZ+2),a
 582+ AB71 C9                                   ret
 583+ AB72
 584+ AB72                          DISPLAY "TODO: TactivtsPosMinus Target"
 585+ AB72              ;TODOcall    TacticsPosMinusTarget              ; calculate vector to target
 586+ AB72              ;;TODO                        check range
 587+ AB72              ;;TODO                        if target has ecm then 7% chance it will active, reduce target energy (i.e. damage)
 588+ AB72              ;;TODO                        else
 589+ AB72              ;;TODO                            normalise teh vector for direction
 590+ AB72              ;;TODO                            dot product = missile nosev . normalised vector
 591+ AB72              ;;TODO                            cnt = high byte of dot product, cnf is +ve if facing similar direction
 592+ AB72              ;;TODO                            negate normalised vector so its opposite product
 593+ AB72              ;;TODO                            invert sign of cnt
 594+ AB72              ;;TODO                            AK = roovf . XX15
 595+ AB72              ;;TODO                            Ships pitch = call nroll to caulate teh valu eof ships pitch counter
 596+ AB72              ;;TODO                            if pitch * 2 < 32 then
 597+ AB72              ;;TODO                                ax = sidev . xx15
 598+ AB72              ;;TODO                                    a = x xort current pitch direction
 599+ AB72              ;;TODO                                    shipts roll = nroll
 600+ AB72              ;;TODO                            do accelleration at TA6 (    https://www.bbcelite.com/disc/flight/subroutine/tactics_part_7_of_7.html#ta20
 601+ AB72
 602+ AB72              ;;TODO
 603+ AB72              ;;TODO
 604+ AB72              ;;TODO
 605+ AB72              ;;TODOget the targetted ship inbto bank
 606+ AB72              ;;TODO                        check range as per player
 607+ AB72              ;;TODO                        handle explosion enc
 608+ AB72
 609+ AB72              ;                    else see how close it is to target
 610+ AB72              ;                         if close to target
 611+ AB72              ;                            then explodes destroy missile
 612+ AB72              ;                                 if ship is not station
 613+ AB72              ;                                    then set up signal target ship hit my missile flag
 614+ AB72              ;                                         set blastcheckcounter to slotlist length  (12)
 615+ AB72              ;                                 end if
 616+ AB72              ;                                 if we are in range of missle blast
 617+ AB72              ;                                    cause blast damage to our ship (this will signal death is needed)
 618+ AB72              ;                                 end if
 619+ AB72              ;                                 return
 620+ AB72              ;                         end if
 621+ AB72              ;                 end if
 622+ AB72              ;         end if
 623+ AB72
 624+ AB72
 625+ AB72                          ;            else if ship is angry at us
 626+ AB72              ;
 627+ AB72
 628+ AB72              ; Part 1 - if type is missile and enquing a missile blast and slot free
 629+ AB72              ;             then enqueue missile blast details
 630+ AB72              ;                  mark as exploded
 631+ AB72              ;                  remove missile from universe slot list
 632+ AB72
 633+ AB72              ; TODO, how to we deal with scared ships, e.g. if angry and no guns or missiles then should be considered scared or if hull mass < say 25% of our ship
 634+ AB72              ; also for future ship vs ship combat
 635+ AB72              ;... Tactics........................................................................
 636+ AB72              ;.PART 1
 637+ AB72              ; if shiphitbymissleflag <> false
 638+ AB72              ;    then dec blast check counter
 639+ AB72              ;         if blast check counter = 0
 640+ AB72              ;            then set shiphitbymissileflag to FF
 641+ AB72              ;    else if SetShipHitByMissileFlag = current ship number
 642+ AB72              ;            then cause damage to ship
 643+ AB72              ;         else if ship is in range and ship is not a station
 644+ AB72              ;                  then cause blast damage to ship
 645+ AB72              ;         if destroyed
 646+ AB72              ;            then explode ship
 647+ AB72              ;                 return
 648+ AB72              ; end if
 649+ AB72              ; if ship is a missle (I think we allow missile on missle action)
 650+ AB72              ;    then if ecm is active
 651+ AB72              ;            then destroy missile and return
 652+ AB72              ;            else if ship is angry at us
 653+ AB72              ;                    then if ship is close to us
 654+ AB72              ;                            then explodes causing damage to our ship
 655+ AB72              ;                                 enque missile blast
 656+ AB72              ;                                 destroy missile
 657+ AB72              ;                                 set blastcheckcounter to slotlist length
 658+ AB72              ;                                 set shiphitbymissileflag to FE (general blast)
 659+ AB72              ;                                 return
 660+ AB72              ;                            else jump to part 3 to do updates
 661+ AB72              ;                         end if
 662+ AB72              ;                    else see how close it is to target
 663+ AB72              ;                         if close to target
 664+ AB72              ;                            then
 665+ AB72              ;                                 enque missile blast
 666+ AB72              ;                                 destroy missile
 667+ AB72              ;                                 if ship is not station
 668+ AB72              ;                                    then set up signal target ship hit my missile flag
 669+ AB72              ;                                         set blastcheckcounter to slotlist length  (12)
 670+ AB72              ;                                 end if
 671+ AB72              ;                                 if we are in range of missle blast
 672+ AB72              ;                                    cause blast damage to our ship (this will signal death is needed)
 673+ AB72              ;                                 end if
 674+ AB72              ;                                 return
 675+ AB72              ;                         end if
 676+ AB72              ;                 end if
 677+ AB72              ;         end if
 678+ AB72              ;.PART 2A ** adding in a collision logic
 679+ AB72              ;    else if ship is close to another ship
 680+ AB72              ;            then if docking flag set and other ship is space station or we are space station and other ship has docking flag
 681+ AB72              ;                    then if aligned correctly
 682+ AB72              ;                         then remove ship as docked
 683+ AB72              ;                              return
 684+ AB72              ;         else
 685+ AB72              ;            call collision route and determine daamage based on sizes and bounce vectors
 686+ AB72              ;            return
 687+ AB72              ;.PART 2 ** Need to check if ship has AI flag
 688+ AB72              ;    else if not hostile
 689+ AB72              ;            then if not docking or station not present
 690+ AB72              ;                    then calculate vector to planet
 691+ AB72              ;                         jump to part 7
 692+ AB72              ;                    else calculate verctor to docking slot
 693+ AB72              ;                         call caluclate vector to docking slot (DOCKIT)
 694+ AB72              ;                         jump to part 7
 695+ AB72              ;                 end if
 696+ AB72              ;            else case ship type
 697+ AB72              ;                      >>escape pod>> point at planet and jump to step 7
 698+ AB72              ;                      >>space station>> if hostile
 699+ AB72              ;                                           then if cop counter < 7 and 6.2% chance
 700+ AB72              ;                                                   then spawm hostile cop
 701+ AB72              ;                                                end if
 702+ AB72              ;                                           else
 703+ AB72              ;                                                if 0.8% change and transporter count = 0
 704+ AB72              ;                                                   then if 50% chance
 705+ AB72              ;                                                           then spawn transporter
 706+ AB72              ;                                                           else spawn shuttle
 707+ AB72              ;                                                        end if
 708+ AB72              ;                                                end if
 709+ AB72              ;                                        end if
 710+ AB72              ;                                        return
 711+ AB72              ;                      >>targoid and no mother ship in slot list>> set random drift
 712+ AB72              ;                                                                  return
 713+ AB72              ;                      >>if bounty hunter flag>> if ship not hostile
 714+ AB72              ;                                                   then if trader flag clear or 20% chance
 715+ AB72              ;                                                        then if fugitive or offender
 716+ AB72              ;                                                                then set hosile
 717+ AB72              ;                                                end if
 718+ AB72              ;                      >>Carrier and hanger slots > 0 >> if 22% chance (code to be added later)
 719+ AB72              ;                                         then spawn agressive hosting one of types carried
 720+ AB72              ;                                              reduce ships in hanger by 1
 721+ AB72              ;                                              return
 722+ AB72              ;                      >>rock hermit>> if 22% chance
 723+ AB72              ;                                         then spawn agressive hosting one of Sidewinder, Mamba, Krait, Adder or Gecko
 724+ AB72              ;                                              return
 725+ AB72              ;                      >>pirate and in safe zone>> stop pirate being hostile by removing agressive and hostileflags
 726+ AB72              ;                 end case
 727+ AB72              ;         end if
 728+ AB72              ;         recharge ship energy by recharge factor (TODO as a config item on ship type but by default 1)
 729+ AB72              ; .PART 3
 730+ AB72              ;         calulcate dot product of ship nose to us
 731+ AB72              ; .PART 4
 732+ AB72              ;         2.5% change ship rill roll a noticable amount
 733+ AB72              ;         if ship has > 50% energy jump to part 6
 734+ AB72              ;         if ship > 1/8th energy jump to part 5
 735+ AB72              ;         if random 10% chance (i.e. ship < 1/8 energy and bails out)
 736+ AB72              ;            then launch escape pod
 737+ AB72              ;                 set AI to null
 738+ AB72              ;                 set random pitch and roll
 739+ AB72              ;                 set accelleation to 0
 740+ AB72              ;         end if
 741+ AB72              ; .PART 5
 742+ AB72              ;         if ship does not have any missilesor ECM is firing to part 6
 743+ AB72              ;            then if random > threshold for ship type (TODO as a config item on ship type)
 744+ AB72              ;                    then if tharoid ; note this means thargoids are sensitve to ECM
 745+ AB72              ;                            then launch thargon
 746+ AB72              ;                            else spawn angry missle under ship
 747+ AB72              ;                         end if
 748+ AB72              ;                 end if
 749+ AB72              ;            else return
 750+ AB72              ;         end if
 751+ AB72              ; .PART 6
 752+ AB72              ;         if ship is not pointing at us from dot product ( < 160 , also > -32)
 753+ AB72              ;            then jump to part 7
 754+ AB72              ;            else if ship is pointing directly at us ( < 163 i.e. > -35)
 755+ AB72              ;                    then fire laser at us (which reduces energy)
 756+ AB72              ;                         cause laser damage to our ship (this will signal death is needed)
 757+ AB72              ;                         decellerate by half as ship has lock on
 758+ AB72              ;                         return
 759+ AB72              ;                    else fire laser into space (which reduces energy)
 760+ AB72              ;                 end if
 761+ AB72              ;         end if
 762+ AB72              ; .PART 7#
 763+ AB72              ;        if ship is a msile targetting us
 764+ AB72              ;           then ship turns towards us some more
 765+ AB72              ;           else if z hi > =  3 or ( x hi or y hi > 1) , i.e. ship is far away
 766+ AB72              ;                    then do random wiht bit 7 set
 767+ AB72              ;                         if random < AI flag
 768+ AB72              ;                            then   ship turned towards us
 769+ AB72              ;                            else   ship turns away from us
 770+ AB72              ;                         end if
 771+ AB72              ;                end if
 772+ AB72              ;           end if
 773+ AB72              ;           calculate new roll, pitch and accelleration based on new targe vector
 774+ AB72
 775+ AB72
 776+ AB72              ;        determine ship direction based on agression and type
 777+ AB72              ;        set pitch and roll coutners
 778+ AB72              ;        adjust speed depleding on relationship to us
 779+ AB72              ; .PART 8 - new
 780+ AB72              ;        if ship has ECM, another ECM is not active and missile targeted at it
 781+ AB72              ;           if ship has enery of ECM energey cost + 1/8th total
 782+ AB72              ;              if chance 25%
 783+ AB72              ;                 then fire ECM
 784+ AB72              ;
 785+ AB72
 786+ AB72
 787+ AB72
 788+ AB72
 789+ AB72 2A D6 A3     ReduceTacticVectors:ld      hl, (TacticsVectorX)        ; pull XX15 into registers
 790+ AB75 ED 5B DA A3                      ld      de, (TacticsVectorY)        ; .
 791+ AB79 ED 4B DE A3                      ld      bc, (TacticsVectorZ)        ; .
 792+ AB7D 3A D8 A3                         ld      a,(TacticsVectorX+2)        ; .
 793+ AB80 FD 67                            ld      iyh,a                       ; iyh = X sign
 794+ AB82 3A DC A3                         ld      a,(TacticsVectorY+2)        ; .
 795+ AB85 FD 6F                            ld      iyl,a                       ; iyl = Y sign
 796+ AB87 3A E0 A3                         ld      a,(TacticsVectorZ+2)        ; .
 797+ AB8A DD 67                            ld      ixh,a                       ; ixh = z sign
 798+ AB8C FD B4        .ScaleLoop:         or      iyh                         ; now check if upper has value
 799+ AB8E FD B5                            or      iyl                         ; .
 800+ AB90                                  ClearSignBitA                       ;  exluding sign bit
 800+ AB90 E6 7F       >                        and     SignMask8Bit
 801+ AB92 28 21                            jr      z,.DoneScaling              ; and exit loop if upper byte is only sign component
 802+ AB94 FD 7C        .ScaledDownBy2:     ld      a,iyh
 803+ AB96 CB 2F                            sra     a
 804+ AB98 FD 67                            ld      iyh,a                       ; actually we can keep sign bit so just sr then rr
 805+ AB9A CB 1C                            rr      h                           ; Deal with X
 806+ AB9C CB 1D                            rr      l                           ;
 807+ AB9E FD 7D                            ld      a,iyl
 808+ ABA0 CB 2F                            sra     a                           ; actually we can keep sign bit so just sr then rr
 809+ ABA2 FD 6F                            ld      iyl,a
 810+ ABA4 CB 1A                            rr      d                           ; Deal with Y
 811+ ABA6 CB 1B                            rr      e                           ;
 812+ ABA8 DD 7D                            ld      a, ixl                      ; actually we can keep sign bit so just sr then rr
 813+ ABAA CB 2F                            sra     a
 814+ ABAC DD 6F                            ld      ixl,a
 815+ ABAE CB 18                            rr      b                           ; Deal with Z
 816+ ABB0 CB 19                            rr      c                           ;
 817+ ABB2 C3 8C AB                         jp      .ScaleLoop
 818+ ABB5 7C           .DoneScaling:       ld      a,h
 819+ ABB6 B2                               or      d
 820+ ABB7 B0                               or      b
 821+ ABB8                                  SignBitOnlyA                        ; check if new sign bit has a value rotated in,
 821+ ABB8 E6 80       >                        and     SignOnly8Bit
 822+ ABBA 28 0C                            jr      z,.OKToNormalise
 823+ ABBC              .ShiftTo15Bit:      ShiftHLRight1                       ; one last shift to 15 bit we don't need
 823+ ABBC CB 3C       >			   srl h
 823+ ABBE CB 1D       >			   rr  l
 824+ ABC0                                  ShiftDERight1                       ; to do sign bytes
 824+ ABC0 CB 3A       >			   srl d
 824+ ABC2 CB 1B       >			   rr  e
 825+ ABC4                                  ShiftBCRight1                       ; as value must be 0
 825+ ABC4 CB 38       >			   srl b
 825+ ABC6 CB 19       >			   rr  c
 826+ ABC8 7C           .OKToNormalise:     ld      a,h                         ; iyh now can only hold sign
 827+ ABC9 FD B4                            or      iyh                         ; so by the end of here
 828+ ABCB 67                               ld      h,a                         ;   hl = x
 829+ ABCC 7A                               ld      a,d                         ;   de = y
 830+ ABCD FD B5                            or      iyl                         ;   bc = z
 831+ ABCF 57                               ld      d,a                         ; all scaled to 15 bit + sign
 832+ ABD0 78                               ld      a,b                         ;
 833+ ABD1 DD B4                            or      ixh                         ;
 834+ ABD3 47                               ld      b,a                         ;
 835+ ABD4 22 E6 A3                         ld      (TacticsNormX),hl
 836+ ABD7 22 EA A3                         ld      (TacticsNormY),hl
 837+ ABDA 22 EE A3                         ld      (TacticsNormZ),hl
 838+ ABDD C9                               ret
 839+ ABDE                                 ; ***SIgn bits*** need to be in byte 3
 840+ ABDE
# file closed: ./GameEngine/Tactics.asm
 663  ABDE                  INCLUDE "./Hardware/drive_access.asm"
# file opened: ./Hardware/drive_access.asm
   1+ ABDE              M_GETSETDRV             equ $89
   2+ ABDE              F_OPEN                  equ $9a
   3+ ABDE              F_CLOSE                 equ $9b
   4+ ABDE              F_READ                  equ $9d
   5+ ABDE              F_WRITE                 equ $9e
   6+ ABDE              F_SEEK                  equ $9f
   7+ ABDE
   8+ ABDE              FA_READ                 equ $01
   9+ ABDE              FA_APPEND               equ $06
  10+ ABDE              FA_OVERWRITE            equ $0C
  11+ ABDE              DISK_FILEMAP            equ $85
  12+ ABDE              DISK_STRMSTART          equ $86
  13+ ABDE              DISK_STRMEND            equ $87
  14+ ABDE
  15+ ABDE              ESX_MODE_READ           equ $01
  16+ ABDE              ESX_MODE_OPEN_EXIST     equ $00
  17+ ABDE
  18+ ABDE              FILEMAP_SIZE            equ $20
  19+ ABDE              FILEMAP_BLOCK_SIZE      equ $06
  20+ ABDE
  21+ ABDE              ; Success 1 = default drive, carry reset
  22+ ABDE              ; Failure HL = -1 , carry set, errno set
  23+ ABDE F5 C5 D5 E5  GetDefaultDrive:        push	af,,bc,,de,,hl,,ix
  23+ ABE2 DD E5
  24+ ABE4 AF                                   xor	    a	; a = 0 means get default drive into A
  25+ ABE5 CF                                   rst	    $08
  26+ ABE6 89                                   db	    M_GETSETDRV
  27+ ABE7 32 7C AC                             ld	    (DefaultDrive),a
  28+ ABEA DD E1 E1 D1                          pop		af,,bc,,de,,hl,,ix
  28+ ABEE C1 F1
  29+ ABF0 C9                                   ret
  30+ ABF1
  31+ ABF1
  32+ ABF1              ; Disable NMI Multi face - needed for streaming
  33+ ABF1              ;disable_multiface:      ld      bc,REGISTER_NUMBER_PORT
  34+ ABF1              ;                        ld      a,PERIPHERAL_2_REGISTER
  35+ ABF1              ;                        out     (c),a
  36+ ABF1              ;                        inc     b
  37+ ABF1              ;                        in      a,(c)
  38+ ABF1              ;                        and     %11110111
  39+ ABF1              ;                        out     (c),a
  40+ ABF1              ;                        ret
  41+ ABF1              ;
  42+ ABF1              ;enable_multiface:       ld      bc,REGISTER_NUMBER_PORT
  43+ ABF1              ;                        ld      a,PERIPHERAL_2_REGISTER
  44+ ABF1              ;                        out     (c),a
  45+ ABF1              ;                        inc     b
  46+ ABF1              ;                        in      a,(c)
  47+ ABF1              ;                        or      %00001000
  48+ ABF1              ;                        out     (c),a
  49+ ABF1              ;                        ret
  50+ ABF1              ;
  51+ ABF1              ; *******************************************************************************************************
  52+ ABF1              ;	Function:	Open a file read for reading/writing
  53+ ABF1              ;	In:		ix = filename
  54+ ABF1              ;			b  = Open filemode
  55+ ABF1              ;	ret		a  = handle, 0 on error
  56+ ABF1              ;   fOpen_read_exists takes defaults and sets up default drive
  57+ ABF1              ; *******************************************************************************************************
  58+ ABF1              ;fOpen_read_exists:      ld      b,ESX_MODE_READ | ESX_MODE_OPEN_EXIST
  59+ ABF1              ;                        call    GetDefaultDrive
  60+ ABF1              ;                        call    fOpen
  61+ ABF1              ;                        call    fRefill_map
  62+ ABF1              ;                        jp      c,.RefilMapError
  63+ ABF1              ;                        jp      z,.RefilMapEmpty
  64+ ABF1              ;                        ret
  65+ ABF1              ;.RefilMapError:         jp      .RefilMapError
  66+ ABF1              ;.RefilMapEmpty:         jp      .RefilMapEmpty
  67+ ABF1              ;
  68+ ABF1              ;
  69+ ABF1
  70+ ABF1 3A 7C AC     fOpen:	                ld	    a,(DefaultDrive); default drive must be called before we start
  71+ ABF4 CF                                   rst	    $08
  72+ ABF5 9A                                   db	    F_OPEN
  73+ ABF6 32 7D AC                             ld      (FileHandle),a  ; make a local copy of last file opened
  74+ ABF9 38 01                                jr      c,.FileOpenError
  75+ ABFB C9                                   ret
  76+ ABFC C3 FC AB     .FileOpenError:         jp      .FileOpenError
  77+ ABFF
  78+ ABFF              ; *******************************************************************************************************
  79+ ABFF              ;	Function	refills the buffer map with card addresses for the file
  80+ ABFF              ;	In:		a  = file handle (if calling fRefill_mapA)
  81+ ABFF              ;           ix = address of filemap_buffer (if calling fRefill_mapA)
  82+ ABFF              ;           de = filemap size (which should equal 4 in our case)
  83+ ABFF              ;			bc  = amount to read
  84+ ABFF              ;	ret:		carry set = error
  85+ ABFF              ;               zero set  = no data loaded so still error
  86+ ABFF              ;   you can use fRefill_map to pull default valuess
  87+ ABFF              ; *******************************************************************************************************
  88+ ABFF              ;fRefill_map:            ld      a,(FileHandle)
  89+ ABFF              ;                        ld      ix,FilemapBuffer
  90+ ABFF              ;                        ld      de,FILEMAP_SIZE
  91+ ABFF              ;fRefill_mapA:           rst     $08
  92+ ABFF              ;                        db      DISK_FILEMAP
  93+ ABFF              ;.SetFlags:              ld      (CardFlags),a                   ; set up adressing mode flags  bit 0=card id (0 or 1) bit 1=0 for byte addressing, 1 for block addressing
  94+ ABFF              ;.CheckForEntries:       ld      (FilemapBufferLast),hl          ; save last entry address +2
  95+ ABFF              ;                        ld      de,FilemapBuffer
  96+ ABFF              ;                        sbc     hl,de                           ; hl = number of entries found
  97+ ABFF              ;                        ld      a,$ff
  98+ ABFF              ;                        ret
  99+ ABFF              ;
 100+ ABFF              ;read_stream_block:      ld      hl,(FilemapBufferPointer)
 101+ ABFF              ;                        ldBCDEatHL                              ; load the disk address
 102+ ABFF              ;                        push    bc                              ; into IXDE
 103+ ABFF              ;                        pop     ix                              ; now IXDE = card address
 104+ ABFF              ;                        ldBCatHL                                ; bc = number of blocks to be read
 105+ ABFF              ;                        ld      (FilemapBlockCount),bc
 106+ ABFF              ;                        ret
 107+ ABFF              ; Start up stream of data
 108+ ABFF              ; If successful, the call returns with:
 109+ ABFF              ; B=protocol: 0=SD/MMC, 1=IDE,  C=data port
 110+ ABFF              ; NOTE: On the Next, these values will always be: B=0 C=$EB
 111+ ABFF              ;fStream_start:          ld      hl,FilemapBuffer                ; set to head of filemap
 112+ ABFF              ;                        ld      (FilemapBufferPointer),hl       ; .
 113+ ABFF              ;                        ZeroA
 114+ ABFF              ;                        ld      (FilereadsPerformed),a
 115+ ABFF              ;                        call    read_stream_block
 116+ ABFF              ;                        ld      a,(CardFlags)                   ; get card flags back
 117+ ABFF              ;                        rst     $08
 118+ ABFF              ;                        DB      DISK_STRMSTART                  ; start up stream
 119+ ABFF              ;                        ld      (FileStreamPort),bc             ; save port information (even through it will not change on a next)
 120+ ABFF              ;                        ret
 121+ ABFF
 122+ ABFF              ; *******************************************************************************************************
 123+ ABFF              ;	Function	stream in a block of data to memory
 124+ ABFF              ;	In:		ix  = address to read into
 125+ ABFF              ;			bc  = amount to read
 126+ ABFF              ;	ret:		carry set = error
 127+ ABFF              ; *******************************************************************************************************
 128+ ABFF              ;fStream_block:          ld      ix,FileBuffer
 129+ ABFF              ;                        ld      a,(CardFlags)
 130+ ABFF              ;                        ld      bc,(FileStreamPort)
 131+ ABFF              ;                        ld      hl,FileBuffer
 132+ ABFF              ;                        ld      (FilemapBufferPointer),hl
 133+ ABFF              ;.StreamLoop:            ld      b,0
 134+ ABFF              ;                        ld      a,(TargetSize+1)
 135+ ABFF              ;                        cp      2
 136+ ABFF              ;                        jr      c,.stream_partial_block
 137+ ABFF              ;.StreamFullBlock:       inir                                ; read 256 bytes to hl
 138+ ABFF              ;                        inir                                ; read 256 bytes to hl+256
 139+ ABFF              ;                        dec     b                           ; update byte count
 140+ ABFF              ;                        dec     b                           ; .
 141+ ABFF              ;                        ld      hl,TargetSize               ; 512 bytes read
 142+ ABFF              ;                        ld      de,512
 143+ ABFF              ;                        ClearCarryFlag
 144+ ABFF              ;                        sbc     hl,de
 145+ ABFF              ;                        ld      (TargetSize),hl
 146+ ABFF              ;                        ld      a,(FileStreamPort+1)        ; get the protocol
 147+ ABFF              ;                        and     a
 148+ ABFF              ;                        jr      nz,.protocol_ide            ; we arn't using but for compatibility
 149+ ABFF              ;.protocol_sdmmc:        in      a,(c)                       ; for sd and mmc, read in the 2 byte CRC
 150+ ABFF              ;                        nop                                 ; as the max performance of the interface is
 151+ ABFF              ;                        nop                                 ; 16T per byte, no ops pad out operation
 152+ ABFF              ;                        in      a,(c)
 153+ ABFF              ;                        nop
 154+ ABFF              ;                        nop
 155+ ABFF              ;.wait_for_next_block:   in      a,(c)                       ; if wait token is not FF then we are read
 156+ ABFF              ;                        cp      $FF
 157+ ABFF              ;                        jr      z,.wait_for_next_block
 158+ ABFF              ;                        cp      $FE                         ; if not and its not FE its a fault
 159+ ABFF              ;                        jr      nz,.token_error
 160+ ABFF              ;.protocol_ide:          ld      de,(TargetSize)             ; Any more bytes required
 161+ ABFF              ;                        ld      a,d
 162+ ABFF              ;                        or      e
 163+ ABFF              ;                        jr      z,.streaming_complete
 164+ ABFF              ;                        ret
 165+ ABFF              ;.stream_partial_block:  and     a                           ; is block at least 256 bytes?
 166+ ABFF              ;                        jr      z,.under256_bytes
 167+ ABFF              ;                        inir                                ; get 256 bytes
 168+ ABFF              ;.under256_bytes:        ld      b,e
 169+ ABFF              ;                        inc     b
 170+ ABFF              ;                        dec     b
 171+ ABFF              ;                        jr      z,.streaming_complete
 172+ ABFF              ;                        inir
 173+ ABFF              ;.streaming_complete:    ld      a,(CardFlags)
 174+ ABFF              ;                        rst     $08
 175+ ABFF              ;                        DB      DISK_STRMEND
 176+ ABFF              ;                        ld      a,(FileHandle)
 177+ ABFF              ;                        call    fClose
 178+ ABFF              ;                        ret
 179+ ABFF              ;.token_error:           jp      .token_error
 180+ ABFF              ;
 181+ ABFF              ;
 182+ ABFF              ;fOpenReadFile:          ld      (TargetSize),bc
 183+ ABFF              ;                        call    disable_multiface
 184+ ABFF              ;                        call    fOpen_read_exists
 185+ ABFF              ;.SetupStream:           call    fStream_start
 186+ ABFF              ;                        jr      c,.FileStreamError
 187+ ABFF              ;                        ret
 188+ ABFF              ;
 189+ ABFF              ;.FileStreamError:       jp      .FileStreamError
 190+ ABFF              ;
 191+ ABFF              ; *******************************************************************************************************
 192+ ABFF              ;	Function	Read bytes from the open file
 193+ ABFF              ;	In:		ix  = address to read into
 194+ ABFF              ;			bc  = amount to read
 195+ ABFF              ;	ret:		carry set = error
 196+ ABFF              ; *******************************************************************************************************
 197+ ABFF B7           fRead:                  or   	a             ; is it zero?
 198+ AC00 C8                                   ret  	z             ; if so return
 199+ AC01 E5                                   push    hl
 200+ AC02 DD E5 E1                             ld      hl,ix    	 ; load ix into hl and save hl for later
 201+ AC05 CF                                   rst	    $08
 202+ AC06 9D                                   db	    F_READ
 203+ AC07 E1                                   pop	    hl
 204+ AC08 C9                                   ret
 205+ AC09
 206+ AC09              ; *******************************************************************************************************
 207+ AC09              ;	Function	Write bytes to the open file
 208+ AC09              ;	In:		ix  = address to read from
 209+ AC09              ;			bc  = amount to write
 210+ AC09              ;	ret:		carry set = error
 211+ AC09              ; *******************************************************************************************************
 212+ AC09 B7           fWrite:                 or   	a             ; is it zero?
 213+ AC0A C8                                   ret  	z             ; if so return
 214+ AC0B E5                                   push	hl
 215+ AC0C DD E5 E1                             ld      hl,ix
 216+ AC0F CF                                   rst	    $08
 217+ AC10 9E                                   db	    F_WRITE
 218+ AC11 E1                                   pop	    hl
 219+ AC12 C9                                   ret
 220+ AC13
 221+ AC13              ; *******************************************************************************************************
 222+ AC13              ;	Function:	Close open file
 223+ AC13              ;	In:		a  = handle
 224+ AC13              ;	ret		a  = handle, 0 on error
 225+ AC13              ; *******************************************************************************************************
 226+ AC13 B7           fClose:		            or   	a             ; is it zero?
 227+ AC14 C8                                   ret  	z             ; if so return
 228+ AC15 CF                                   rst	    $08
 229+ AC16 9B                                   db	    F_CLOSE
 230+ AC17 C9                                   ret
 231+ AC18
 232+ AC18              ;fSeekHome:              push    bc,,de,,hl,,ix
 233+ AC18              ;                        ld      bc,0
 234+ AC18              ;                        ld      de,0
 235+ AC18              ;                        ld      l,0
 236+ AC18              ;                        call    fSeek
 237+ AC18              ;                        pop     bc,,de,,hl,,ix
 238+ AC18              ;                        ret
 239+ AC18              ;
 240+ AC18              ;fSeekForward256:        push    bc,,de,,hl,,ix
 241+ AC18              ;                        ld      bc,0
 242+ AC18              ;                        ld      de,256
 243+ AC18              ;                        ld      l,1
 244+ AC18              ;                        call    fSeek
 245+ AC18              ;                        pop     bc,,de,,hl,,ix
 246+ AC18              ;                        ret
 247+ AC18
 248+ AC18              ; *******************************************************************************************************
 249+ AC18              ;	Function	Read bytes from the open file
 250+ AC18              ;	In:		a   = file handle
 251+ AC18              ;			L   = Seek mode (0=start, 1=rel, 2=-rel)
 252+ AC18              ;			BCDE = bytes to seek
 253+ AC18              ;	ret:		BCDE = file pos from start
 254+ AC18              ; *******************************************************************************************************
 255+ AC18 DD E5 E5     fSeek:                  push	ix,,hl
 256+ AC1B CF                                   rst	    $08
 257+ AC1C 9F                                   db	    F_SEEK
 258+ AC1D E1 DD E1                             pop	    ix,,hl
 259+ AC20 C9                                   ret
 260+ AC21
 261+ AC21              ; *******************************************************************************************************
 262+ AC21              ; Init the file system
 263+ AC21              ; *******************************************************************************************************
 264+ AC21 CD DE AB     InitFileSystem:         call    GetDefaultDrive
 265+ AC24 C9                                   ret
 266+ AC25
 267+ AC25              ; *******************************************************************************************************
 268+ AC25              ; Function:	Load a whole file into memory	(confirmed working on real machine)
 269+ AC25              ; In:		hl = file data pointer
 270+ AC25              ;		    ix = address to load to
 271+ AC25              ;           bc = filelength
 272+ AC25              ; *******************************************************************************************************
 273+ AC25 CD DE AB     FileLoad:	            call    GetDefaultDrive
 274+ AC28 C5 D5 F5                             push	bc,,de,,af
 275+ AC2B                                      ; get file size
 276+ AC2B C5 DD E5                             push	bc,,ix			; store size, load address,
 277+ AC2E E5 DD E1                             ld      ix,hl
 278+ AC31 06 01                                ld      b,FA_READ		; mode open for reading
 279+ AC33 CD F1 AB                             call    fOpen
 280+ AC36 38 17                                jr	    c,.error_opening; carry set? so there was an error opening and A=error code
 281+ AC38 FE 00                                cp	    0				; was file handle 0?
 282+ AC3A 28 13                                jr	    z,.error_opening; of so there was an error opening.
 283+ AC3C DD E1 C1                             pop     bc,,ix          ; get load address back and size back
 284+ AC3F F5                                   push	af				; remember handle
 285+ AC40 CD FF AB                             call	fRead			; read data from A to address IX of length BC
 286+ AC43 38 0C                                jr	    c,.error_reading
 287+ AC45 F1                                   pop	    af			    ; get handle back
 288+ AC46 CD 13 AC                             call	fClose			; close file
 289+ AC49 38 07                                jr	    c,.error_closing
 290+ AC4B F1 D1 C1                             pop     bc,,de,,af      ; normal exit
 291+ AC4E C9                                   ret
 292+ AC4F              ;
 293+ AC4F              ; On error, display error code an lock up so we can see it
 294+ AC4F              ;
 295+ AC4F DD E1        .error_opening:         pop	ix
 296+ AC51 C1           .error_reading:		    pop	bc	; don't pop a, need error code
 297+ AC52
 298+ AC52              .error_closing:
 299+ AC52 C1           .NormalError:  	        pop	bc	; don't pop into A, return with error code
 300+ AC53 D1                                   pop	de
 301+ AC54 C1                                   pop	bc
 302+ AC55 C9                                   ret
 303+ AC56
 304+ AC56              ; *******************************************************************************************************
 305+ AC56              ; Function:	Save a whole file into memory	(confirmed working on real machine)
 306+ AC56              ; In:		hl = file name
 307+ AC56              ;		    ix = address to save from
 308+ AC56              ;		    bc = size
 309+ AC56              ; *******************************************************************************************************
 310+ AC56 CD DE AB     FileSave:	            call    GetDefaultDrive		; need to do this each time?!?!?
 311+ AC59 C5 DD E5                             push	bc,,ix   			; store size& save address
 312+ AC5C E5 DD E1                             ld      ix,hl               ; get name into ix
 313+ AC5F 06 0C                                ld      b,FA_OVERWRITE		; mode open for writing
 314+ AC61 CD F1 AB                             call    fOpen
 315+ AC64 38 12                                jr	    c,.error_opening	; carry set? so there was an error opening and A=error code
 316+ AC66 FE 00                                cp	    0			        ; was file handle 0?
 317+ AC68 28 0E                                jr	    z,.error_opening	; of so there was an error opening.
 318+ AC6A DD E1 C1                             pop	    bc,,ix			    ; get lenght and save address back
 319+ AC6D F5                                   push	af			        ; remember handle
 320+ AC6E CD 09 AC                             call	fWrite			    ; read data from A to address IX of length BC
 321+ AC71 38 04                                jr	c,.error
 322+ AC73 F1                                   pop	af			            ; get handle back
 323+ AC74 CD 13 AC                             call	fClose			    ; close file
 324+ AC77 C9           .error:                 ret
 325+ AC78              ;
 326+ AC78              ; On error, display error code an lock up so we can see it
 327+ AC78              ;
 328+ AC78 DD E1 C1     .error_opening:         pop	bc,,ix                  ; don't pop a, need error code
 329+ AC7B C9                                   ret
 330+ AC7C
 331+ AC7C 00           DefaultDrive:	        DB	0
 332+ AC7D 00           FileHandle:             DB  0
 333+ AC7E 00           CardFlags               DB  0
 334+ AC7F 00 00        TargetSize              DW  0
 335+ AC81 00 00        FileStreamPort          DW  0
 336+ AC83 00 00 00...  FileBuffer              DS  512                     ; block of data
 337+ AE83 00           FilereadsPerformed      DB  0
 338+ AE84 00 00        FilemapBlockCount       DW  0
 339+ AE86 00 00        FilemapBufferPointer    DW  0
 340+ AE88 00 00        FilemapBufferLast       DW  0
 341+ AE8A 00 00 00...  FilemapBuffer           DS  FILEMAP_BLOCK_SIZE * FILEMAP_SIZE        ; expecting 60 to be overkill as most should be 1
 342+ AF4A
# file closed: ./Hardware/drive_access.asm
 664  AF4A
 665  AF4A                  INCLUDE "./Menus/common_menu.asm"
# file opened: ./Menus/common_menu.asm
   1+ AF4A 43 4F 4D 4D  txt_commander 			DB "COMMANDER",0
   1+ AF4E 41 4E 44 45
   1+ AF52 52 00
   2+ AF54 49 4E 56 45  txt_inventory 			DB "INVENTORY",0
   2+ AF58 4E 54 4F 52
   2+ AF5C 59 00
   3+ AF5E 50 72 65 73  txt_present_system		DB "Present System   :",0
   3+ AF62 65 6E 74 20
   3+ AF66 53 79 73 74
   3+ AF6A 65 6D 20 20
   3+ AF6E 20 3A 00
   4+ AF71 48 79 70 65  txt_hyperspace_system	DB "Hyperspace System:",0
   4+ AF75 72 73 70 61
   4+ AF79 63 65 20 53
   4+ AF7D 79 73 74 65
   4+ AF81 6D 3A 00
   5+ AF84 43 6F 6E 64  txt_condition			DB "Condition   :",0
   5+ AF88 69 74 69 6F
   5+ AF8C 6E 20 20 20
   5+ AF90 3A 00
   6+ AF92 46 75 65 6C  txt_fuel				DB "Fuel        :",0
   6+ AF96 20 20 20 20
   6+ AF9A 20 20 20 20
   6+ AF9E 3A 00
   7+ AFA0 43 61 73 68  txt_cash				DB "Cash        :",0
   7+ AFA4 20 20 20 20
   7+ AFA8 20 20 20 20
   7+ AFAC 3A 00
   8+ AFAE 4C 65 67 61  txt_legal_status		DB "Legal Status:",0
   8+ AFB2 6C 20 53 74
   8+ AFB6 61 74 75 73
   8+ AFBA 3A 00
   9+ AFBC 52 61 74 69  txt_rating				DB "Rating      :",0
   9+ AFC0 6E 67 20 20
   9+ AFC4 20 20 20 20
   9+ AFC8 3A 00
  10+ AFCA 45 51 55 49  txt_equipment			DB "EQUIPMENT:",0
  10+ AFCE 50 4D 45 4E
  10+ AFD2 54 3A 00
  11+ AFD5
  12+ AFD5 30 30 2E 30  txt_fuel_level			DB "00.0 Light Years",0
  12+ AFD9 20 4C 69 67
  12+ AFDD 68 74 20 59
  12+ AFE1 65 61 72 73
  12+ AFE5 00
  13+ AFE6 58 58 58 58  txt_cash_amount			DB "XXXXXXXXXX",0
  13+ AFEA 58 58 58 58
  13+ AFEE 58 58 00
  14+ AFF1 2E           txt_cash_decimal        DB "."
  15+ AFF2 58 20 43 72  txt_cash_fraction       DB "X Cr",0
  15+ AFF6 00
  16+ AFF7
  17+ AFF7              txt_status_colour		equ $FF
  18+ AFF7
  19+ AFF7              ;;DEFUNCTprint_boiler_text_l2:
  20+ AFF7              ;;DEFUNCT; ">print_boilder_text hl = text structure, b = message count"
  21+ AFF7              ;;DEFUNCTBoilerTextLoop:
  22+ AFF7              ;;DEFUNCT	push		bc			; Save Message Count loop value
  23+ AFF7              ;;DEFUNCT	ld			c,(hl)		; Get Row into b
  24+ AFF7              ;;DEFUNCT	inc			hl
  25+ AFF7              ;;DEFUNCT	ld			b,(hl)		; Get Col into b
  26+ AFF7              ;;DEFUNCT	inc			hl
  27+ AFF7              ;;DEFUNCT	ld			e,(hl)		; Get text address Lo into E
  28+ AFF7              ;;DEFUNCT	inc			hl
  29+ AFF7              ;;DEFUNCT	ld			d,(hl)		; Get text address Hi into E
  30+ AFF7              ;;DEFUNCT	inc			hl
  31+ AFF7              ;;DEFUNCT	push		hl			; Save present HL to stack as this is the address for the next message
  32+ AFF7              ;;DEFUNCT	ex			de,hl		; now hl = address of text data
  33+ AFF7              ;;DEFUNCT	ld			e,txt_status_colour
  34+ AFF7              ;;DEFUNCT    MMUSelectLayer2
  35+ AFF7              ;;DEFUNCT	call		l1_print_at
  36+ AFF7              ;;DEFUNCT	pop			hl
  37+ AFF7              ;;DEFUNCT	pop			bc
  38+ AFF7              ;;DEFUNCT	djnz		BoilerTextLoop
  39+ AFF7              ;;DEFUNCT	ret
  40+ AFF7
  41+ AFF7
  42+ AFF7              ;:DEFUNCT print_boiler_text:
  43+ AFF7              ;:DEFUNCT ; ">print_boilder_text hl = text structure, b = message count"
  44+ AFF7              ;:DEFUNCT .BoilerTextLoop:
  45+ AFF7              ;:DEFUNCT 	push		bc			; Save Message Count loop value
  46+ AFF7              ;:DEFUNCT 	ld			c,(hl)		; Get Row into b
  47+ AFF7              ;:DEFUNCT 	inc			hl
  48+ AFF7              ;:DEFUNCT 	ld			b,(hl)		; Get Col into b
  49+ AFF7              ;:DEFUNCT 	inc			hl
  50+ AFF7              ;:DEFUNCT 	ld			e,(hl)		; Get text address Lo into E
  51+ AFF7              ;:DEFUNCT 	inc			hl
  52+ AFF7              ;:DEFUNCT 	ld			d,(hl)		; Get text address Hi into E
  53+ AFF7              ;:DEFUNCT 	inc			hl
  54+ AFF7              ;:DEFUNCT 	push		hl			; Save present HL to stack as this is the address for the next message
  55+ AFF7              ;:DEFUNCT 	ex			de,hl		; now hl = address of text data
  56+ AFF7              ;:DEFUNCT 	ld			e,txt_status_colour
  57+ AFF7              ;:DEFUNCT 	push		bc
  58+ AFF7              ;:DEFUNCT 	pop			de
  59+ AFF7              ;:DEFUNCT 	call		l1_print_at
  60+ AFF7              ;:DEFUNCT 	pop			hl
  61+ AFF7              ;:DEFUNCT 	pop			bc
  62+ AFF7              ;:DEFUNCT 	djnz		.BoilerTextLoop
  63+ AFF7              ;:DEFUNCT 	ret
  64+ AFF7
  65+ AFF7              ;;DEFUNCTGetFuelLevel:           INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
  66+ AFF7
  67+ AFF7              ;;DEFUNCTGetCash:                ld      hl,(Cash)
  68+ AFF7              ;;DEFUNCT                        ex      de,hl
  69+ AFF7              ;;DEFUNCT                        ld      ix,(Cash+2)
  70+ AFF7              ;;DEFUNCT                        ld		iy,txt_cash_amount
  71+ AFF7              ;;DEFUNCT                        call 	DispDEIXtoIY	; This will write out with 0 termination after last digit
  72+ AFF7              ;;DEFUNCT.ShiftDecimalDigit:     ld		a,(IY+0)				;Push last digit to post decimal
  73+ AFF7              ;;DEFUNCT                        ld		(txt_cash_fraction),a
  74+ AFF7              ;;DEFUNCT.UpdateInteger:         ld		hl,txt_cash_amount+1	; Now was there only 1 digit
  75+ AFF7              ;;DEFUNCT                        ld		a,(hl)					; if so we leave it alone so its "0.0"
  76+ AFF7              ;;DEFUNCT                        cp		0
  77+ AFF7              ;;DEFUNCT                        ret		z
  78+ AFF7              ;;DEFUNCT                        ld		(IY),0					; Else we erase last digit as it went to fraction
  79+ AFF7              ;;DEFUNCT                        ret
  80+ AFF7
# file closed: ./Menus/common_menu.asm
 666  AFF7              MainNonBankedCodeEnd:
 667  AFF7                  DISPLAY "Main Non Banked Code Ends at ",$
 668  AFF7
 669  AFF7                  org $B000
 670  B000                  DISPLAY "Vector Table Starts at ",$
 671  B000              VectorTable:
 672  B000 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
 672  B004 B1 B1 B1 B1
 672  B008 B1 B1 B1 B1
 672  B00C B1 B1 B1 B1
 672  B010 B1 B1 B1 B1
 672  B014 B1 B1 B1 B1
 672  B018 B1 B1 B1 B1
 672  B01C B1 B1 B1 B1
 673  B020 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
 673  B024 B1 B1 B1 B1
 673  B028 B1 B1 B1 B1
 673  B02C B1 B1 B1 B1
 673  B030 B1 B1 B1 B1
 673  B034 B1 B1 B1 B1
 673  B038 B1 B1 B1 B1
 673  B03C B1 B1 B1 B1
 674  B040 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
 674  B044 B1 B1 B1 B1
 674  B048 B1 B1 B1 B1
 674  B04C B1 B1 B1 B1
 674  B050 B1 B1 B1 B1
 674  B054 B1 B1 B1 B1
 674  B058 B1 B1 B1 B1
 674  B05C B1 B1 B1 B1
 675  B060 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
 675  B064 B1 B1 B1 B1
 675  B068 B1 B1 B1 B1
 675  B06C B1 B1 B1 B1
 675  B070 B1 B1 B1 B1
 675  B074 B1 B1 B1 B1
 675  B078 B1 B1 B1 B1
 675  B07C B1 B1 B1 B1
 676  B080 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
 676  B084 B1 B1 B1 B1
 676  B088 B1 B1 B1 B1
 676  B08C B1 B1 B1 B1
 676  B090 B1 B1 B1 B1
 676  B094 B1 B1 B1 B1
 676  B098 B1 B1 B1 B1
 676  B09C B1 B1 B1 B1
 677  B0A0 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
 677  B0A4 B1 B1 B1 B1
 677  B0A8 B1 B1 B1 B1
 677  B0AC B1 B1 B1 B1
 677  B0B0 B1 B1 B1 B1
 677  B0B4 B1 B1 B1 B1
 677  B0B8 B1 B1 B1 B1
 677  B0BC B1 B1 B1 B1
 678  B0C0 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
 678  B0C4 B1 B1 B1 B1
 678  B0C8 B1 B1 B1 B1
 678  B0CC B1 B1 B1 B1
 678  B0D0 B1 B1 B1 B1
 678  B0D4 B1 B1 B1 B1
 678  B0D8 B1 B1 B1 B1
 678  B0DC B1 B1 B1 B1
 679  B0E0 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
 679  B0E4 B1 B1 B1 B1
 679  B0E8 B1 B1 B1 B1
 679  B0EC B1 B1 B1 B1
 679  B0F0 B1 B1 B1 B1
 679  B0F4 B1 B1 B1 B1
 679  B0F8 B1 B1 B1 B1
 679  B0FC B1 B1 B1 B1
 680  B100 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine
 681  B104                              ;(The last DW could just be a DB as it needs to b 257 bytes but its cleaner for source code)
 682  B104
 683  B104 60 00        IR_COUNT        dw  $0060
 684  B106
 685  B106 00           LAST_DELTA      db  0
 686  B107 00           SavedMMU6       db  0
 687  B108 00           SavedMMU7       db  0
 688  B109              SoundInterrupt      EQU IM2Sound
 689  B109              DanubeInterrupt     EQU IM2PlayDanube
 690  B109              AttractInterrrupt   EQU IM2AttractMode
 691  B109
 692  B109
 693  B109              StartOfInterruptHandler:
 694  B109                  DISPLAY "Non Banked Code Ends At", StartOfInterruptHandler
 695  B109
 696  B109                              ; NOTE play then equeue simplifies ligic, more chance slot free
 697  B109                              org $B1B1
 698  B1B1                  DISPLAY "Interrupt Handler Starts at",$
 699  B1B1              ; keeping the handler to a minimal size in order to make best use of
 700  B1B1              ; non pageable memory
 701  B1B1              IM2Routine:             IFDEF INTERRUPT_BLOCKER
 702  B1B1 ~                                            DISPLAY "Interrupt Blocker Enabled"
 703  B1B1 ~                                            ei
 704  B1B1 ~                                            reti
 705  B1B1                                      ELSE
 706  B1B1                                              DISPLAY "Interrupt Blocker Disabled"
 707  B1B1                                      ENDIF
 708  B1B1 F5 C5 D5 E5                          push    af,,bc,,de,,hl,,ix,,iy
 708  B1B5 DD E5 FD E5
 709  B1B9 08                                   ex      af,af'
 710  B1BA D9                                   exx
 711  B1BB F5 C5 D5 E5                          push    af,,bc,,de,,hl
 712  B1BF 21 6F 7F                             ld      hl,InterruptCounter
 713  B1C2 34                                   inc     (hl)                        ; cycles each interrupt
 714  B1C3 CD D7 B1     IM2SoundHandler:        call    IM2Sound                    ; This is a self modifying code address to change the actual sound vector if we are doing special music e.g. intro or docking
 715  B1C6 E1 D1 C1 F1                          pop    af,,bc,,de,,hl
 716  B1CA 08                                   ex      af,af'
 717  B1CB D9                                   exx
 718  B1CC FD E1 DD E1                          pop     af,,bc,,de,,hl,,ix,,iy
 718  B1D0 E1 D1 C1 F1
 719  B1D4 FB           .IMFinishup:            ei
 720  B1D5 ED 4D                                reti
 721  B1D7                  DISPLAY "Interrupt Handler Ends at",$
 722  B1D7              EndOfNonBanked:
 723  B1D7                  DISPLAY "Non Banked Code + Interrupt Handler Ends At", EndOfNonBanked
 724  B1D7
 725  B1D7
 726  B1D7              SaveMMU6:               MACRO
 727  B1D7 ~                                    GetNextReg  MMU_SLOT_6_REGISTER
 728  B1D7 ~                                    ld      (SavedMMU6),a
 729  B1D7                                      ENDM
 730  B1D7
 731  B1D7              RestoreMMU6:            MACRO
 732  B1D7 ~                                    ld      a,(SavedMMU6)               ; now restore up post interrupt
 733  B1D7 ~                                    nextreg MMU_SLOT_6_REGISTER,a       ; Restore MMU7
 734  B1D7                                      ENDM
 735  B1D7
 736  B1D7              SaveMMU7:               MACRO
 737  B1D7 ~                                    GetNextReg  MMU_SLOT_7_REGISTER
 738  B1D7 ~                                    ld      (SavedMMU7),a
 739  B1D7                                      ENDM
 740  B1D7
 741  B1D7              RestoreMMU7:            MACRO
 742  B1D7 ~                                    ld      a,(SavedMMU7)               ; now restore up post interrupt
 743  B1D7 ~                                    nextreg MMU_SLOT_7_REGISTER,a       ; Restore MMU7
 744  B1D7                                      ENDM
 745  B1D7
 746  B1D7              IM2Sound:               SaveMMU7
 746  B1D7             >                        GetNextReg  MMU_SLOT_7_REGISTER
 746  B1D7 01 3B 24    >            ld bc,$243B
 746  B1DA 3E 57       >            ld a,MMU_SLOT_7_REGISTER
 746  B1DC ED 79       >            out (c),a
 746  B1DE 04          >            inc b
 746  B1DF ED 78       >            in a,(c)
 746  B1E1 32 08 B1    >                        ld      (SavedMMU7),a
 747  B1E4                                      MMUSelectSound
 747  B1E4 ED 91 57 64 >                     nextreg SoundMMU,		    BankSound
 748  B1E8                                      ; This is a self modifying code address to change the
 749  B1E8                                      ; actual sound vector if we are doing special music
 750  B1E8                                      ; e.g. intro or docking
 751  B1E8 CD 00 E0     .IM2SoundHandler:       call    SoundInterruptHandler       ; this does the work
 752  B1EB              .DoneInterrupt:         RestoreMMU7
 752  B1EB 3A 08 B1    >                        ld      a,(SavedMMU7)               ; now restore up post interrupt
 752  B1EE ED 92 57    >                        nextreg MMU_SLOT_7_REGISTER,a       ; Restore MMU7
 753  B1F1 C9                                   ret
 754  B1F2
 755  B1F2
 756  B1F2              IM2PlayDanube:          SaveMMU7
 756  B1F2             >                        GetNextReg  MMU_SLOT_7_REGISTER
 756  B1F2 01 3B 24    >            ld bc,$243B
 756  B1F5 3E 57       >            ld a,MMU_SLOT_7_REGISTER
 756  B1F7 ED 79       >            out (c),a
 756  B1F9 04          >            inc b
 756  B1FA ED 78       >            in a,(c)
 756  B1FC 32 08 B1    >                        ld      (SavedMMU7),a
 757  B1FF                                      MMUSelectSound
 757  B1FF ED 91 57 64 >                     nextreg SoundMMU,		    BankSound
 758  B203                                      ; This is a self modifying code address to change the
 759  B203                                      ; actual sound vector if we are doing special music
 760  B203                                      ; e.g. intro or docking
 761  B203 CD 1B E4     .IM2SoundHandler:       call    PlayDanube                  ; this does the work
 762  B206              .DoneInterrupt:         RestoreMMU7
 762  B206 3A 08 B1    >                        ld      a,(SavedMMU7)               ; now restore up post interrupt
 762  B209 ED 92 57    >                        nextreg MMU_SLOT_7_REGISTER,a       ; Restore MMU7
 763  B20C C9                                   ret
 764  B20D
 765  B20D              IM2AttractMode:     IFDEF SKIPATTRACTMUSIC
 766  B20D ~                                    DISPLAY "Attract mode Music disabled"
 767  B20D                                  ELSE
 768  B20D                                      DISPLAY "Attract mode Music enabled"
 769  B20D CD F2 B1                             call    IM2PlayDanube
 770  B210                                  ENDIF
 771  B210                                  IFDEF SKIPATTRACTGRAPHICS
 772  B210 ~                                    DISPLAY "Attract mode graphics disabled"
 773  B210                                  ELSE
 774  B210                                      DISPLAY "Attract mode graphics enabled"
 775  B210                                      SaveMMU6
 775  B210             >                        GetNextReg  MMU_SLOT_6_REGISTER
 775  B210 01 3B 24    >            ld bc,$243B
 775  B213 3E 56       >            ld a,MMU_SLOT_6_REGISTER
 775  B215 ED 79       >            out (c),a
 775  B217 04          >            inc b
 775  B218 ED 78       >            in a,(c)
 775  B21A 32 07 B1    >                        ld      (SavedMMU6),a
 776  B21D                                      SaveMMU7
 776  B21D             >                        GetNextReg  MMU_SLOT_7_REGISTER
 776  B21D 01 3B 24    >            ld bc,$243B
 776  B220 3E 57       >            ld a,MMU_SLOT_7_REGISTER
 776  B222 ED 79       >            out (c),a
 776  B224 04          >            inc b
 776  B225 ED 78       >            in a,(c)
 776  B227 32 08 B1    >                        ld      (SavedMMU7),a
 777  B22A CD C6 78                             call    AttractModeUpdate
 778  B22D                                      RestoreMMU6
 778  B22D 3A 07 B1    >                        ld      a,(SavedMMU6)               ; now restore up post interrupt
 778  B230 ED 92 56    >                        nextreg MMU_SLOT_6_REGISTER,a       ; Restore MMU7
 779  B233                                      RestoreMMU7
 779  B233 3A 08 B1    >                        ld      a,(SavedMMU7)               ; now restore up post interrupt
 779  B236 ED 92 57    >                        nextreg MMU_SLOT_7_REGISTER,a       ; Restore MMU7
 780  B239                                  ENDIF
 781  B239 C9                                   ret
 782  B23A
 783  B23A              ; ARCHIVED INCLUDE "Menus/draw_fuel_and_crosshair.asm"
 784  B23A              ;INCLUDE "./title_page.asm"
 785  B23A
 786  B23A              ; Blocks dependent on variables in Universe Banks
 787  B23A              ; Bank 49
 788  B23A              ;    SEG RESETUNIVSEG
 789  B23A              ;seg     CODE_SEG,       4:              $0000,       $8000                 ; flat address
 790  B23A              ;seg     RESETUNIVSEG,   BankResetUniv:  StartOfBank, ResetUniverseAddr
 791  B23A
 792  B23A
 793  B23A
 794  B23A              ;	ORG ResetUniverseAddr
 795  B23A              ;INCLUDE "./GameEngine/resetUniverse.asm"
 796  B23A              ; Bank 50  ------------------------------------------------------------------------------------------------------------------------
 797  B23A                  SLOT    MenuShrChtAddr
 798  B23A                  PAGE    BankMenuShrCht
 799  B23A              	ORG     MenuShrChtAddr,BankMenuShrCht
 800  C000                  INCLUDE "./Menus/short_range_chart_menu.asm"
# file opened: ./Menus/short_range_chart_menu.asm
   1+ C000
   2+ C000 53 68 6F 72  short_range_page_marker  DB "ShortRange  PG50"
   2+ C004 74 52 61 6E
   2+ C008 67 65 20 20
   2+ C00C 50 47 35 30
   3+ C010
   4+ C010 30 02 B0 8E  short_range_boiler_text	DW $0230,TextBuffer
   5+ C014              short_range_header		equ 12
   6+ C014              src_xy_centre			equ $6080
   7+ C014              src_x_centre			equ $80
   8+ C014              src_y_centre			equ $60
   9+ C014              local_chart_star_colour	equ 216
  10+ C014 00 00        local_dx				dw 0
  11+ C016 00 00        local_dy				dw 0
  12+ C018              local_max_range_x		equ 20
  13+ C018              local_max_range_y		equ $26
  14+ C018 00           local_name_row			db	0
  15+ C019 00           local_name_col			db	0
  16+ C01A              local_label_shift_x		equ	3
  17+ C01A              local_label_shift_y		equ	5
  18+ C01A
  19+ C01A 44 69 73 74  src_distance            DB "Distance: "
  19+ C01E 61 6E 63 65
  19+ C022 3A 20
  20+ C024 30 30 30     src_dist_amount         DB "000"
  21+ C027 2E           src_decimal             DB "."
  22+ C028 30           src_fraction            DB "0"
  23+ C029 20 4C 69 67  src_dis_ly              DB " Light Years",0
  23+ C02D 68 74 20 59
  23+ C031 65 61 72 73
  23+ C035 00
  24+ C036 20 20 30 2E  src_default_dist        DB "  0.0"
  24+ C03A 30
  25+ C03B
  26+ C03B 00 00 00...  src_distance_val        DS  6
  27+ C041              src_fill_buffer_len     EQU 32
  28+ C041              src_fill_buffer_size    EQU 4 * src_fill_buffer_len                          ; up to 32 labels topx topy lengthx spare
  29+ C041                          DISPLAY "TODO: space for occupied cells may mvoe to bit flags"
  30+ C041 00 00 00...  src_printed_text        DS  src_fill_buffer_size                             ; space for occupied cells may move to bit flags later TODO
  31+ C0C1 00           src_buffer_size         DB  0
  32+ C0C2              ;----------------------------------------------------------------------------------------------------------------------------------
  33+ C0C2              SRM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C0C2
   2++C0C2              ;">print_boilder_text hl = text structure, b = message count"
   3++C0C2 C5           .BoilerTextLoop:        push		bc			; Save Message Count loop value
   4++C0C3 4E                                   ld			c,(hl)		; Get Row into b
   5++C0C4 23                                   inc			hl
   6++C0C5 46                                   ld			b,(hl)		; Get Col into b
   7++C0C6 23                                   inc			hl
   8++C0C7 5E                                   ld			e,(hl)		; Get text address Lo into E
   9++C0C8 23                                   inc			hl
  10++C0C9 56                                   ld			d,(hl)		; Get text address Hi into E
  11++C0CA 23                                   inc			hl
  12++C0CB E5                                   push		hl			; Save present HL to stack as this is the address for the next message
  13++C0CC EB                                   ex			de,hl		; now hl = address of text data
  14++C0CD 1E FF                                ld			e,txt_status_colour
  15++C0CF C5                                   push		bc
  16++C0D0 D1                                   pop			de
  17++C0D1                                      MMUSelectLayer1
  17++C0D1 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  18++C0D5 CD D7 E0                             call		l1_print_at
  19++C0D8 E1                                   pop			hl
  20++C0D9 C1                                   pop			bc
  21++C0DA 10 E6                                djnz		.BoilerTextLoop
  22++C0DC C9                                   ret
  23++C0DD
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  34+ C0DD              ;----------------------------------------------------------------------------------------------------------------------------------
  35+ C0DD              SRM_draw_chart_circle_and_crosshair:
  36+ C0DD ED 4B 13 80                          ld		bc,(PresentSystemX)				; bc = present system
  37+ C0E1 01 80 60                             ld		bc,src_xy_centre					; must be ordered x y in data
  38+ C0E4                                      MMUSelectSpriteBank
  38+ C0E4 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  39+ C0E8 CD F5 E0                             call	sprite_local_cursor
  40+ C0EB 3A D3 84                             ld		a,(Fuel)
  41+ C0EE 57                                   ld		d,a
  42+ C0EF 1E FF                                ld		e,$FF
  43+ C0F1                                      MMUSelectLayer2
  43+ C0F1 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  44+ C0F5 CD CA EB                             call	l2_draw_circle
  45+ C0F8 C9                                   ret
  46+ C0F9                                                      DISPLAY "TODO:  move cursor code"
  47+ C0F9              ; TODO MOVE CURSOR CODE
  48+ C0F9              ;----------------------------------------------------------------------------------------------------------------------------------
  49+ C0F9              SRM_draw_hyperspace_cross_hair:
  50+ C0F9 ED 4B 15 80                          ld		bc,(TargetSystemX)              ; bc = selected jump
  51+ C0FD ED 5B 13 80                          ld		de,(PresentSystemX)
  52+ C101 0E 80                                ld		c,src_x_centre
  53+ C103 06 60                                ld		b,src_y_centre
  54+ C105                                      MMUSelectSpriteBank
  54+ C105 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  55+ C109 CD FD E0                             call	sprite_local_hyper_cursor
  56+ C10C C9                                   ret
  57+ C10D              ;----------------------------------------------------------------------------------------------------------------------------------
  58+ C10D 3A 00 80     src_get_name:           ld      a,(Galaxy)
  59+ C110                                      MMUSelectGalaxyA
  59+ C110 ED 92 57    >                     nextreg GalaxyDataMMU,     a
  60+ C113 ED 4B 15 80                          ld      bc,(TargetSystemX)
  61+ C117 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
  62+ C11B CD 64 FC                             call    galaxy_system_under_cursor
  63+ C11E FE 00                                cp      0
  64+ C120 C8                                   ret     z
  65+ C121 CD 82 F6                             call	GetDigramWorkingSeed
  66+ C124 21 7C 8F                             ld		hl,name_expanded
  67+ C127 CD D1 8E                             call	CapitaliseString
  68+ C12A 21 7C 8F                             ld		hl, name_expanded
  69+ C12D 3E FF                                ld      a,$FF
  70+ C12F C9                                   ret
  71+ C130              ;----------------------------------------------------------------------------------------------------------------------------------
  72+ C130              SRM_update_hyperspace_cross_hair:
  73+ C130 ED 4B 15 80                          ld		bc,(TargetSystemX)              ; bc = selected jump
  74+ C134 ED 5B 13 80                          ld		de,(PresentSystemX)
  75+ C138 79                                   ld		a,c                             ; a = target x pos
  76+ C139 93                                   sub		e                               ; a = target x - present x
  77+ C13A F2 4B C1                             jp      p,.NoFlipX                      ; if > 0 skip next bit
  78+ C13D ED 44                                neg                                     ; c = a = abs a * 4
  79+ C13F CB 27                                sla		a                               ; .
  80+ C141 CB 27                                sla		a                               ; .
  81+ C143 4F                                   ld      c,a                             ;  .
  82+ C144 3E 80                                ld      a,src_x_centre                  ; c = a = centre screen - c
  83+ C146 91                                   sub     c                               ; .
  84+ C147 4F                                   ld      c,a                             ; .
  85+ C148 C3 52 C1                             jp      .fixY                           ;. now do Y
  86+ C14B CB 27        .NoFlipX:               sla		a
  87+ C14D CB 27                                sla		a
  88+ C14F C6 80                                add		a,src_x_centre
  89+ C151 4F                                   ld      c,a
  90+ C152 78           .fixY:                  ld		a,b                             ; for Y its * 2
  91+ C153 92                                   sub		d
  92+ C154 F2 63 C1                             jp      p,.NoFlipY
  93+ C157 ED 44                                neg
  94+ C159 CB 27                                sla     a
  95+ C15B 47                                   ld      b,a
  96+ C15C 3E 60                                ld      a,src_y_centre
  97+ C15E 90                                   sub     b
  98+ C15F 47                                   ld      b,a
  99+ C160 C3 68 C1                             jp      .RedrawSprite
 100+ C163 CB 27        .NoFlipY                sla		a
 101+ C165 C6 60                                add		a,src_y_centre
 102+ C167 47                                   ld		b,a
 103+ C168              .RedrawSprite:          MMUSelectSpriteBank
 103+ C168 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 104+ C16C CD D0 E0                             call	sprite_lhc_move
 105+ C16F CD A1 C1                             call    src_name_current
 106+ C172 C9                                   ret
 107+ C173
 108+ C173 26 08        src_clear_name_area:    ld      h,8
 109+ C175 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 110+ C178 01 0A A8                             ld      bc,$A80A
 111+ C17B E5           .ClearLoop:             push    hl
 112+ C17C D5                                   push    de
 113+ C17D C5                                   push    bc
 114+ C17E                                      MMUSelectLayer2
 114+ C17E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 115+ C182 CD 84 E4                             call	l2_draw_horz_line
 116+ C185 C1                                   pop     bc
 117+ C186 D1                                   pop     de
 118+ C187 E1                                   pop     hl
 119+ C188 04                                   inc     b
 120+ C189 25                                   dec     h
 121+ C18A 20 EF                                jr      nz,.ClearLoop
 122+ C18C C9                                   ret
 123+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 124+ C18D 3A 00 80     src_system_undercursor: ld      a,(Galaxy)
 125+ C190                                      MMUSelectGalaxyA
 125+ C190 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 126+ C193 ED 4B 15 80                          ld      bc,(TargetSystemX)
 127+ C197 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 128+ C19B CD 64 FC                             call    galaxy_system_under_cursor
 129+ C19E FE 00                                cp      0
 130+ C1A0 C8                                   ret     z
 131+ C1A1 CD 0D C1     src_name_current:       call    src_get_name
 132+ C1A4 FE 00                                cp      0
 133+ C1A6 C8                                   ret     z
 134+ C1A7 E5                                   push    hl
 135+ C1A8 F5                                   push    af
 136+ C1A9 CD 73 C1                             call    src_clear_name_area
 137+ C1AC F1                                   pop     af
 138+ C1AD E1                                   pop     hl
 139+ C1AE 01 0A A8                             ld      bc,$A80A
 140+ C1B1 1E FF                                ld		e,$FF
 141+ C1B3                                      MMUSelectLayer2
 141+ C1B3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 142+ C1B7 CD BE E3                             call	l2_print_7at
 143+ C1BA CD CD C1                             call    src_calc_distance
 144+ C1BD 21 1A C0                             ld      hl,src_distance
 145+ C1C0 01 0A B0                             ld      bc,$B00A
 146+ C1C3 1E FF                                ld		e,$FF
 147+ C1C5                                      MMUSelectLayer2
 147+ C1C5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 148+ C1C9 CD BE E3                             call	l2_print_7at
 149+ C1CC C9                                   ret
 150+ C1CD              ;----------------------------------------------------------------------------------------------------------------------------------
 151+ C1CD 3A 00 80     src_calc_distance:      ld      a,(Galaxy)                                      ; Default in 0 distance
 152+ C1D0                                      MMUSelectGalaxyA
 152+ C1D0 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 153+ C1D3 11 24 C0                             ld      de,src_dist_amount
 154+ C1D6 21 36 C0                             ld      hl,src_default_dist
 155+ C1D9 ED A0                                ldi
 156+ C1DB ED A0                                ldi
 157+ C1DD ED A0                                ldi
 158+ C1DF ED A0                                ldi
 159+ C1E1 ED A0                                ldi
 160+ C1E3 ED 4B 13 80                          ld      bc,(PresentSystemX)
 161+ C1E7 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 162+ C1EB ED 4B 15 80                          ld      bc,(TargetSystemX)
 163+ C1EF ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 164+ C1F3 CD F7 FB                             call    galaxy_find_distance                            ; get distance into HL
 165+ C1F6 DD 2A 35 80                          ld      ix,(Distance)
 166+ C1FA 11 00 00                             ld      de,0
 167+ C1FD FD 21 3B C0                          ld      iy,src_distance_val
 168+ C201 CD ED 9A                             call    DispDEIXtoIY                                    ; use DEIX as distance and write to string at location IY
 169+ C204 FD E5                                push    iy
 170+ C206 E1                                   pop     hl                                              ; hl = iy
 171+ C207 11 3B C0                             ld      de,src_distance_val
 172+ C20A 7E                                   ld		a,(hl)				                            ;Push last digit to post decimal
 173+ C20B 32 28 C0                             ld		(src_fraction),a
 174+ C20E 2B                                   dec     hl
 175+ C20F CD 56 99                             call    compare16HLDE
 176+ C212 38 18                                jr      c,.done_number
 177+ C214 7E                                   ld      a,(hl)
 178+ C215 32 26 C0                             ld      (src_dist_amount+2),a
 179+ C218 2B                                   dec     hl
 180+ C219 CD 56 99                             call    compare16HLDE
 181+ C21C 38 0E                                jr      c,.done_number
 182+ C21E 7E                                   ld      a,(hl)
 183+ C21F 32 25 C0                             ld      (src_dist_amount+1),a
 184+ C222 2B                                   dec     hl
 185+ C223 CD 56 99                             call    compare16HLDE
 186+ C226 38 04                                jr      c,.done_number
 187+ C228 7E                                   ld      a,(hl)
 188+ C229 32 24 C0                             ld      (src_dist_amount),a
 189+ C22C C9           .done_number:           ret
 190+ C22D
 191+ C22D 00 00        PosScan1                DW      0
 192+ C22F 00 00        PosScan2                DW      0
 193+ C231              ; bc = row col, d = xlength e = y length
 194+ C231              ; Check logic simplies to , if 1 = bc and 2 = de:
 195+ C231              ; 12   X1            X2    OK         2 LT X1
 196+ C231              ; 1    X1  2         X2    FAIL       1 LT X1 && 2 GT X1 && 2 LT X2
 197+ C231              ;      X1  12        X2    FAIL       1 GT X1 && 1 LT X2 && 2 GT X1 && 2 LT X2
 198+ C231              ;      X1  1         X2 2  FAIL       1 GT X1 && 1 LT X2 && 2 GT X2
 199+ C231              ;      X1            X2 12 OK         1 GT X2
 200+ C231 16 07        FreeSlotCheck:          ld      d,7
 201+ C233 ED 30                                mul
 202+ C235 79                                   ld      a,c
 203+ C236 83                                   add     e
 204+ C237 30 02                                jr      nc,.NoOverflow
 205+ C239 3E FF        .Overflow:              ld      a,$FF
 206+ C23B 5F           .NoOverflow:            ld      e,a                     ; e now equals max length in pixels
 207+ C23C 78                                   ld      a,b
 208+ C23D C6 08                                add     8
 209+ C23F 57                                   ld      d,a                     ; e = max height
 210+ C240 ED 43 2D C2                          ld      (PosScan1),bc
 211+ C244 ED 53 2F C2                          ld      (PosScan2),de
 212+ C248 DD 21 41 C0  .CheckBoxes:            ld      ix,src_printed_text
 213+ C24C 3A C1 C0                             ld      a,(src_buffer_size)
 214+ C24F FE 00                                cp      0
 215+ C251 28 3C                                jr      z,.SafeToPrint
 216+ C253 60                                   ld      h,b                     ; h will substite for row b as b is used in dnjz
 217+ C254 47                                   ld      b,a
 218+ C255 DD 7E 02     .CheckBoxLoop:          ld      a,(ix+2)
 219+ C258 FE 00                                cp      0                       ; zerolength, not applicable
 220+ C25A 28 29                                jr      z,.NoBox
 221+ C25C 3A 2D C2     .CheckRow:              ld      a,(PosScan1)
 222+ C25F 3C                                   inc     a
 223+ C260                                      JumpIfAGTENusng (ix+2), .NoBox  ; X1 >= BottomLeftX
 223+ C260 DD BE 02    >                        cp     (ix+2)
 223+ C263 D2 85 C2    >                        jp		nc,.NoBox
 224+ C266 3A 2F C2                             ld      a,(PosScan2)
 225+ C269                                      JumpIfALTNusng (ix+0),  .NoBox   ; X2 <= TopRightX
 225+ C269 DD BE 00    >                        cp      (ix+0)
 225+ C26C DA 85 C2    >                        jp		c, .NoBox
 226+ C26F 3A 2E C2     .SafeToPrintX:          ld      a,(PosScan1+1)
 227+ C272 3C                                   inc     a
 228+ C273                                      JumpIfAGTENusng (ix+3), .NoBox  ; Y1 >= BottomLeftY
 228+ C273 DD BE 03    >                        cp     (ix+3)
 228+ C276 D2 85 C2    >                        jp		nc,.NoBox
 229+ C279 3A 30 C2                             ld      a,(PosScan2+1)
 230+ C27C                                      JumpIfALTNusng (ix+1),  .NoBox  ; Y2 <= TopRightY
 230+ C27C DD BE 01    >                        cp      (ix+1)
 230+ C27F DA 85 C2    >                        jp		c, .NoBox
 231+ C282 3E FF        .MatchedBox:            ld      a,$FF
 232+ C284 C9                                   ret
 233+ C285 DD 23        .NoBox:                 inc     ix
 234+ C287 DD 23                                inc     ix
 235+ C289 DD 23                                inc     ix
 236+ C28B DD 23                                inc     ix
 237+ C28D 10 C6                                djnz    .CheckBoxLoop
 238+ C28F 21 41 C0     .SafeToPrint:           ld      hl,src_printed_text
 239+ C292 3A C1 C0                             ld      a,(src_buffer_size)
 240+ C295 57                                   ld      d,a
 241+ C296 1E 04                                ld      e,4
 242+ C298 ED 30                                mul
 243+ C29A 19                                   add     hl,de
 244+ C29B ED 5B 2D C2                          ld      de,(PosScan1)
 245+ C29F 73 23 72 2B                          ld      (hl),de
 246+ C2A3 23                                   inc     hl
 247+ C2A4 23                                   inc     hl
 248+ C2A5 ED 5B 2F C2                          ld      de,(PosScan2)
 249+ C2A9 73 23 72 2B                          ld      (hl),de
 250+ C2AD 21 C1 C0                             ld      hl,src_buffer_size
 251+ C2B0 34                                   inc     (hl)
 252+ C2B1 AF                                   xor     a
 253+ C2B2 C9                                   ret
 254+ C2B3
 255+ C2B3 CD 90 85     src_label_ssytem:       call	copy_system_to_working
 256+ C2B6 3A 00 80                             ld      a,(Galaxy)
 257+ C2B9                                      MMUSelectGalaxyA
 257+ C2B9 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 258+ C2BC CD 82 F6                             call	GetDigramWorkingSeed
 259+ C2BF 21 7C 8F                             ld		hl,name_expanded
 260+ C2C2 CD D1 8E                             call	CapitaliseString
 261+ C2C5 3A 18 C0                             ld		a,(local_name_row)
 262+ C2C8 D6 05                                sub		local_label_shift_y
 263+ C2CA 47                                   ld		b,a					    ; b = effective pixel row
 264+ C2CB 3A 19 C0                             ld		a,(local_name_col)
 265+ C2CE C6 03                                add		a,local_label_shift_x
 266+ C2D0 4F                                   ld		c,a                     ; c = effective pixel col
 267+ C2D1 1E 00        .GetStringName:         ld      e,0
 268+ C2D3 21 7C 8F                             ld      hl,name_expanded
 269+ C2D6 7E           .getStringLoop:         ld      a,(hl)
 270+ C2D7 23                                   inc     hl
 271+ C2D8 1C                                   inc     e
 272+ C2D9 FE 00                                cp      0                       ; String must have a terminator to work
 273+ C2DB 20 F9                                jr      nz,.getStringLoop
 274+ C2DD 16 08                                ld      d,8
 275+ C2DF C5                                   push    bc
 276+ C2E0 CD 31 C2                             call    FreeSlotCheck           ; first attemps
 277+ C2E3 C1                                   pop     bc
 278+ C2E4 FE 00                                cp      0
 279+ C2E6 28 19                                jr      z,.OKToPrint
 280+ C2E8 78                                   ld      a,b
 281+ C2E9 C6 08                                add     8
 282+ C2EB 47                                   ld      b,a
 283+ C2EC C5                                   push    bc
 284+ C2ED CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 285+ C2F0 C1                                   pop     bc
 286+ C2F1 FE 00                                cp      0
 287+ C2F3 28 0C                                jr      z,.OKToPrint
 288+ C2F5 78                                   ld      a,b
 289+ C2F6 D6 10                                sub     16
 290+ C2F8 47                                   ld      b,a
 291+ C2F9 C5                                   push    bc
 292+ C2FA CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 293+ C2FD C1                                   pop     bc
 294+ C2FE FE 00                                cp      0
 295+ C300 C0                                   ret     nz
 296+ C301 1E FF        .OKToPrint:             ld		e,$FF
 297+ C303 21 7C 8F                             ld		hl,name_expanded
 298+ C306                                      MMUSelectLayer2
 298+ C306 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 299+ C30A CD BE E3                             call	l2_print_7at
 300+ C30D C9                                   ret
 301+ C30E
 302+ C30E              name_if_possible:
 303+ C30E 3A 18 C0     SRCpixelRowToRefRow:    ld		a,(local_name_row)
 304+ C311 D6 05                                sub		local_label_shift_y
 305+ C313 47                                   ld		b,a					; b = effective pixel row
 306+ C314 CB 3F                                srl		a
 307+ C316 CB 3F                                srl		a
 308+ C318 CB 3F                                srl		a					; divide by 8 to get character row
 309+ C31A                                                  DISPLAY "TODO: dont overwrite header"
 310+ C31A                                  ;	sub		2					; don;t write over header TODO tweaks
 311+ C31A 21 3A 7F                             ld		hl,IndexedWork
 312+ C31D ED 31                                add		hl,a
 313+ C31F 7E                                   ld		a,(hl)
 314+ C320 FE 00                                cp		0
 315+ C322                                                  DISPLAY "TODO: need to test +- 1 row"
 316+ C322 20 04                                jr		nz, SRCtryAbove		; if its not empty don't print *(need to test +-1 row TODO)
 317+ C324 36 01                                ld		(hl),1				; flag as in use
 318+ C326 18 12                                jr		SRCFoundRow
 319+ C328 2B           SRCtryAbove:            dec		hl
 320+ C329 7E                                   ld		a,(hl)
 321+ C32A FE 00                                cp		0
 322+ C32C                                                  DISPLAY "TODO: need to test +- 1 row"
 323+ C32C 20 04                                jr		nz, SRCtryBelow		; if its not empty don't print *(need to test +-1 row TODO)
 324+ C32E 36 01                                ld		(hl),1				; flag as in use
 325+ C330 18 08                                jr		SRCFoundRow
 326+ C332 23           SRCtryBelow:            inc		hl
 327+ C333 23                                   inc		hl
 328+ C334 7E                                   ld		a,(hl)
 329+ C335 FE 00                                cp		0
 330+ C337 C8                                   ret		z
 331+ C338 36 01                                ld		(hl),1				; flag as in use
 332+ C33A CD 90 85     SRCFoundRow:            call	copy_system_to_working
 333+ C33D 3A 00 80     SRCSmallSizeName:       ld      a,(Galaxy)
 334+ C340                                      MMUSelectGalaxyA
 334+ C340 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 335+ C343 CD 82 F6                             call	GetDigramWorkingSeed
 336+ C346 21 7C 8F     SRCCapitaliseName:      ld		hl,name_expanded
 337+ C349 CD D1 8E                             call	CapitaliseString
 338+ C34C 21 7C 8F     SRCPrintName:           ld		hl, name_expanded
 339+ C34F 3A 18 C0                             ld		a,(local_name_row)
 340+ C352 D6 05                                sub		local_label_shift_y
 341+ C354 47                                   ld		b,a					; b = effective pixel row
 342+ C355 3A 19 C0                             ld		a,(local_name_col)
 343+ C358 C6 03                                add		a,local_label_shift_x
 344+ C35A 4F                                   ld		c,a
 345+ C35B 1E FF                                ld		e,$FF
 346+ C35D                                      MMUSelectLayer2
 346+ C35D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 347+ C361 CD BE E3                             call	l2_print_7at
 348+ C364 C9                                   ret
 349+ C365
 350+ C365 AF           plot_local_stars:       xor		a
 351+ C366 32 76 7F                             ld		(XSAV),a
 352+ C369 DD 21 16 E0                          ld      ix,galaxy_data
 353+ C36D 32 C1 C0                             ld      (src_buffer_size),a
 354+ C370 21 41 C0     SRCClearNameList:       ld		hl,src_printed_text
 355+ C373 11 80 00                             ld		de,src_fill_buffer_size
 356+ C376 CD 04 7E                             call	memfill_dma
 356+ C379
 357+ C379 AF           SRCCounterLoop:         xor		a
 358+ C37A 3A 00 80                             ld      a,(Galaxy)
 359+ C37D                                      MMUSelectGalaxyA
 359+ C37D ED 92 57    >                     nextreg GalaxyDataMMU,     a
 360+ C380 DD E5                                push    ix
 361+ C382 DD E5                                push    ix
 362+ C384 E1                                   pop     hl
 363+ C385 11 E9 7F                             ld      de,SystemSeed
 364+ C388 CD 63 85                             call    copy_seed
 365+ C38B 3A EA 7F                             ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 366+ C38E 4F                                   ld		c,a
 367+ C38F 3A 14 80     SRCcalcLocaldy:         ld		a,(PresentSystemY)
 368+ C392 47                                   ld		b,a								; so b holds Y ccord
 369+ C393 79                                   ld		a,c
 370+ C394 90                                   sub		b
 371+ C395 CB 7F                                bit		7,a
 372+ C397 28 02                                jr		z,SRCpositivedy
 373+ C399 ED 44        SRCnegativedy:          neg
 374+ C39B FE 26        SRCpositivedy:          cp		local_max_range_y
 375+ C39D 30 48                                jr		nc,SRCtoofar
 376+ C39F 3A EC 7F     SRCcalcLocaldx:         ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 377+ C3A2 4F                                   ld		c,a
 378+ C3A3 3A 13 80                             ld		a,(PresentSystemX)
 379+ C3A6 47                                   ld		b,a								; so b holds Y ccord
 380+ C3A7 79                                   ld		a,c
 381+ C3A8 90                                   sub		b
 382+ C3A9 CB 7F                                bit		7,a
 383+ C3AB 28 02                                jr		z,SRCpositivedx
 384+ C3AD ED 44        SRCnegativedx:          neg
 385+ C3AF FE 14        SRCpositivedx:          cp		local_max_range_x
 386+ C3B1 30 34                                jr		nc,SRCtoofar
 387+ C3B3 3A EA 7F     SRCOKToPlot             ld		a,(SystemSeed+1)
 388+ C3B6 21 14 80                             ld		hl,PresentSystemY
 389+ C3B9 96                                   sub		(hl)
 390+ C3BA CB 27                                sla		a								; * 2
 391+ C3BC C6 60                                add		src_y_centre
 392+ C3BE 32 18 C0                             ld		(local_name_row),a
 393+ C3C1 47                                   ld		b,a
 394+ C3C2 3A EC 7F                             ld		a,(SystemSeed+3)
 395+ C3C5 21 13 80                             ld		hl,PresentSystemX
 396+ C3C8 96                                   sub		(hl)
 397+ C3C9 CB 27                                sla		a
 398+ C3CB CB 27                                sla		a								; * 4
 399+ C3CD C6 80                                add		src_x_centre
 400+ C3CF 32 19 C0                             ld		(local_name_col),a
 401+ C3D2 4F                                   ld		c,a
 402+ C3D3 3A EE 7F                             ld		a,(SystemSeed+5)
 403+ C3D6 E6 01                                and		$01
 404+ C3D8 C6 02                                add		a,2
 405+ C3DA 57                                   ld		d,a
 406+ C3DB 1E D8                                ld		e,local_chart_star_colour
 407+ C3DD                                      MMUSelectLayer2
 407+ C3DD ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 408+ C3E1 CD F4 ED                             call	l2_draw_circle_fill
 409+ C3E4                                     ; call    src_get_name
 410+ C3E4 CD B3 C2                             call	src_label_ssytem
 411+ C3E7 E1           SRCtoofar:              pop     hl
 412+ C3E8 ED 34 08 00                          add     hl,8
 413+ C3EC E5                                   push    hl
 414+ C3ED DD E1                                pop     ix
 415+ C3EF 3A 76 7F                             ld		a,(XSAV)
 416+ C3F2 3D                                   dec		a
 417+ C3F3 FE 00                                cp		0
 418+ C3F5 C8                                   ret		z
 419+ C3F6 32 76 7F                             ld		(XSAV),a
 420+ C3F9 C3 79 C3                             jp		SRCCounterLoop
 421+ C3FC              ;----------------------------------------------------------------------------------------------------------------------------------
 422+ C3FC              draw_local_chart_menu:  InitNoDoubleBuffer
 422+ C3FC             >                            MMUSelectLayer1
 422+ C3FC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 422+ C400 CD 8F E0    >                            call	l1_cls
 422+ C403 3E 07       >                            ld		a,7
 422+ C405 CD AA E0    >                            call	l1_attr_cls_to_a
 422+ C408             >                            MMUSelectLayer2
 422+ C408 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 422+ C40C CD 0A E0    >                            call    asm_l2_double_buffer_off
 422+ C40F CD 0E E2    >                            call	l2_cls	; Get some space
 422+ C412             >                            MMUSelectSpriteBank
 422+ C412 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 422+ C416 CD 6E E5    >                            call    sprite_cls_cursors
 423+ C419 3E 80                                ld      a,$80
 424+ C41B 32 7E 7F                             ld      (MenuIdMax),a
 425+ C41E                                      CopyPresentSystemToTarget               ; for short range we always start at present and cusor on present
 425+ C41E 2A 13 80    >                        ld      hl,(PresentSystemX)
 425+ C421 22 15 80    >                        ld      (TargetSystemX),hl
 426+ C424 01 01 01     SRCDrawbox:             ld		bc,$0101
 427+ C427 11 FD BE                             ld		de,$BEFD
 428+ C42A 3E C0                                ld		a,$C0
 429+ C42C                                      MMUSelectLayer2
 429+ C42C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 430+ C430 CD F9 E3                             call	l2_draw_box
 431+ C433 01 01 0A                             ld		bc,$0A01
 432+ C436 11 C0 FE                             ld		de,$FEC0
 433+ C439                                      MMUSelectLayer2
 433+ C439 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 434+ C43D CD 84 E4                             call	l2_draw_horz_line
 435+ C440 3E 0C        SRCStaticText:          ld		a,short_range_header
 436+ C442 CD F7 8E                             call	expandTokenToString
 437+ C445 06 01                                ld		b,1
 438+ C447 21 10 C0                             ld		hl,short_range_boiler_text
 439+ C44A CD C2 C0                             call	SRM_print_boiler_text
 440+ C44D CD 5D 85     SRCSetUpChart:          call	copy_galaxy_to_system
 441+ C450 CD 65 C3                             call	plot_local_stars
 442+ C453 CD DD C0     .CircleandCrosshair:    call	SRM_draw_chart_circle_and_crosshair
 443+ C456 CD F9 C0                             call	SRM_draw_hyperspace_cross_hair
 444+ C459 C9                                   ret
 445+ C45A              ;----------------------------------------------------------------------------------------------------------------------------------
 446+ C45A 3A 60 81     local_chart_cursors:    ld     a,(CursorKeysPressed)
 447+ C45D                                      ReturnIfAIsZero
 447+ C45D A7          >                        and     a
 447+ C45E C8          >                        ret     z
 448+ C45F 17                                   rla
 449+ C460 DC 78 C4                             call   c,src_UpPressed
 450+ C463 17                                   rla
 451+ C464 DC 95 C4                             call   c,src_DownPressed
 452+ C467 17                                   rla
 453+ C468 DC B4 C4                             call   c,src_LeftPressed
 454+ C46B 17                                   rla
 455+ C46C DC D1 C4                             call   c,src_RightPressed
 456+ C46F 17                                   rla
 457+ C470 DC F0 C4                             call   c,src_HomePressed
 458+ C473 17                                   rla
 459+ C474 DC FA C4                             call   c,src_RecenterPressed
 460+ C477 C9                                   ret
 461+ C478              ;----------------------------------------------------------------------------------------------------------------------------------
 462+ C478 3A 16 80     src_UpPressed:          ld     a,(TargetSystemY)
 463+ C47B                                      JumpIfAIsZero   src_BoundsLimit
 463+ C47B A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 463+ C47C CA 0F C5    >                        jp	    z, src_BoundsLimit
 464+ C47F 47                                   ld      b,a                         ; save target as we will need it
 465+ C480 3A 14 80                             ld      a,(PresentSystemY)
 466+ C483 90                                   sub     b                           ; get the difference between present and target
 467+ C484 FA 8C C4                             jp      m,.SkipBoundsTest           ; if target is right of present, we can go left
 468+ C487                                      JumpIfAGTENusng 40,src_BoundsLimit  ; if no more than 20 then OK
 468+ C487 FE 28       >                        cp     40
 468+ C489 D2 0F C5    >                        jp		nc,src_BoundsLimit
 469+ C48C 78           .SkipBoundsTest:        ld      a,b
 470+ C48D 3D                                   dec     a
 471+ C48E 32 16 80                             ld      (TargetSystemY),a
 472+ C491 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 473+ C494 C9                                   ret
 474+ C495              ;----------------------------------------------------------------------------------------------------------------------------------
 475+ C495 3A 14 80     src_DownPressed:        ld     a,(PresentSystemY)
 476+ C498 47                                   ld      b,a
 477+ C499 3A 16 80                             ld      a,(TargetSystemY)
 478+ C49C 4F                                   ld      c,a
 479+ C49D                                      JumpIfAEqNusng 128,src_BoundsLimit
 479+ C49D FE 80       >                        cp     128
 479+ C49F CA 0F C5    >                        jp      z,src_BoundsLimit
 480+ C4A2 90                                   sub     b
 481+ C4A3 FA AB C4                             jp      m,.SkipBoundsTest
 482+ C4A6                                      JumpIfAGTENusng 40,src_BoundsLimit
 482+ C4A6 FE 28       >                        cp     40
 482+ C4A8 D2 0F C5    >                        jp		nc,src_BoundsLimit
 483+ C4AB 79           .SkipBoundsTest:        ld      a,c
 484+ C4AC 3C                                   inc    a
 485+ C4AD 32 16 80                             ld      (TargetSystemY),a
 486+ C4B0 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 487+ C4B3 C9                                   ret
 488+ C4B4              ;----------------------------------------------------------------------------------------------------------------------------------
 489+ C4B4 3A 15 80     src_LeftPressed:        ld      a,(TargetSystemX)           ; we can't move left if target is zero
 490+ C4B7                                      JumpIfAIsZero   src_BoundsLimit
 490+ C4B7 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 490+ C4B8 CA 0F C5    >                        jp	    z, src_BoundsLimit
 491+ C4BB 47                                   ld      b,a                         ; save target as we will need it
 492+ C4BC 3A 13 80                             ld      a,(PresentSystemX)
 493+ C4BF 90                                   sub     b                           ; get the difference between present and target
 494+ C4C0 FA C8 C4                             jp      m,.SkipBoundsTest           ; if target is right of present, we can go left
 495+ C4C3                                      JumpIfAGTENusng 20,src_BoundsLimit  ; if no more than 20 then OK
 495+ C4C3 FE 14       >                        cp     20
 495+ C4C5 D2 0F C5    >                        jp		nc,src_BoundsLimit
 496+ C4C8 78           .SkipBoundsTest:        ld      a,b
 497+ C4C9 3D                                   dec     a
 498+ C4CA 32 15 80                             ld      (TargetSystemX),a
 499+ C4CD CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 500+ C4D0 C9                                   ret
 501+ C4D1              ;----------------------------------------------------------------------------------------------------------------------------------
 502+ C4D1 3A 13 80     src_RightPressed:       ld      a,(PresentSystemX)
 503+ C4D4 47                                   ld      b,a
 504+ C4D5 3A 15 80                             ld      a,(TargetSystemX)
 505+ C4D8 4F                                   ld      c,a
 506+ C4D9                                      JumpIfAEqNusng 255,src_BoundsLimit
 506+ C4D9 FE FF       >                        cp     255
 506+ C4DB CA 0F C5    >                        jp      z,src_BoundsLimit
 507+ C4DE 90                                   sub     b
 508+ C4DF FA E7 C4                             jp      m,.SkipBoundsTest
 509+ C4E2                                      JumpIfAGTENusng 20,src_BoundsLimit
 509+ C4E2 FE 14       >                        cp     20
 509+ C4E4 D2 0F C5    >                        jp		nc,src_BoundsLimit
 510+ C4E7 79           .SkipBoundsTest:        ld      a,c
 511+ C4E8 3C                                   inc    a
 512+ C4E9 32 15 80                             ld      (TargetSystemX),a
 513+ C4EC CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 514+ C4EF C9                                   ret
 515+ C4F0              ;----------------------------------------------------------------------------------------------------------------------------------
 516+ C4F0 2A 13 80     src_HomePressed:        ld      hl,(PresentSystemX)
 517+ C4F3 22 15 80                             ld      (TargetSystemX),hl
 518+ C4F6 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 519+ C4F9 C9                                   ret
 520+ C4FA              ;----------------------------------------------------------------------------------------------------------------------------------
 521+ C4FA 3A 00 80     src_RecenterPressed:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 522+ C4FD                                      MMUSelectGalaxyA
 522+ C4FD ED 92 57    >                     nextreg GalaxyDataMMU,     a
 523+ C500 ED 4B 15 80                          ld      bc,(TargetSystemX)
 524+ C504 CD 70 FB                             call    find_nearest_to_bc
 525+ C507 ED 43 15 80                          ld      (TargetSystemX),bc
 526+ C50B CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 527+ C50E C9                                   ret
 528+ C50F              ;----------------------------------------------------------------------------------------------------------------------------------
 529+ C50F AF           src_BoundsLimit:        xor     a
 530+ C510 C9                                   ret
 531+ C511
# file closed: ./Menus/short_range_chart_menu.asm
 801  C511                  DISPLAY "Bank ",BankMenuShrCht," - Bytes free ",/D, $2000 - ($-MenuShrChtAddr), " - BankMenuShrCht"
 802  C511              ; Bank 51  ------------------------------------------------------------------------------------------------------------------------
 803  C511                  SLOT    MenuGalChtAddr
 804  C511                  PAGE    BankMenuGalCht
 805  C511              	ORG     MenuGalChtAddr
 806  C000                  INCLUDE "./Menus//galactic_chart_menu.asm"
# file opened: ./Menus//galactic_chart_menu.asm
   1+ C000
   2+ C000 47 61 6C 61  galactic_chart_page_marker  DB "GalacticChrtPG51"
   2+ C004 63 74 69 63
   2+ C008 43 68 72 74
   2+ C00C 50 47 35 31
   3+ C010 40 02 B0 8E  galactic_chart_boiler_text	DW $0240,TextBuffer
   4+ C014              galactic_chart_header		equ 13
   5+ C014              galactic_star_colour		equ 216
   6+ C014              galactic_star_colour2		equ 108
   7+ C014              galactic_chart_y_offset		equ $18
   8+ C014              galactic_chart_hyper_offset equ 4
   9+ C014              galactic_chart_hyper_x_offset equ 32 - 4
  10+ C014              galactic_chart_hyper_y_offset equ 32 - 4 + 24
  11+ C014 44 69 73 74  galactic_chart_distance     DB "Distance: "
  11+ C018 61 6E 63 65
  11+ C01C 3A 20
  12+ C01E 30 30 30     galactic_chart_dist_amount  DB "000"
  13+ C021 2E           galactic_chart_decimal      DB "."
  14+ C022 30           galactic_chart_fraction     DB "0"
  15+ C023 20 4C 69 67  galactic_chart_dis_ly       DB " Light Years",0
  15+ C027 68 74 20 59
  15+ C02B 65 61 72 73
  15+ C02F 00
  16+ C030 20 20 30 2E  galactic_default_dist       DB "  0.0",0
  16+ C034 30 00
  17+ C036
  18+ C036 00 00 00...  galactic_distance           DS  6
  19+ C03C
  20+ C03C              galactic_find_position      equ $B008
  21+ C03C 46 69 6E 64  galactic_find_message       DB "Find: ",0
  21+ C040 3A 20 00
  22+ C043              galactic_find_text          equ $B038
  23+ C043 20 20 20 20  galactic_blank_message      DB  "                    ",0
  23+ C047 20 20 20 20
  23+ C04B 20 20 20 20
  23+ C04F 20 20 20 20
  23+ C053 20 20 20 20
  23+ C057 00
  24+ C058 2A 2A 2D 2D  galactic_find_no_match      DB "**-- System Not Found --**",0
  24+ C05C 20 53 79 73
  24+ C060 74 65 6D 20
  24+ C064 4E 6F 74 20
  24+ C068 46 6F 75 6E
  24+ C06C 64 20 2D 2D
  24+ C070 2A 2A 00
  25+ C073 20 20 2A 2A  galactic_find_match         DB "  **-- System Found --**  ",0
  25+ C077 2D 2D 20 53
  25+ C07B 79 73 74 65
  25+ C07F 6D 20 46 6F
  25+ C083 75 6E 64 20
  25+ C087 2D 2D 2A 2A
  25+ C08B 20 20 00
  26+ C08E
  27+ C08E              GCM_print_boiler_text:
  28+ C08E                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C08E
   2++C08E              ;">print_boilder_text hl = text structure, b = message count"
   3++C08E C5           .BoilerTextLoop:        push		bc			; Save Message Count loop value
   4++C08F 4E                                   ld			c,(hl)		; Get Row into b
   5++C090 23                                   inc			hl
   6++C091 46                                   ld			b,(hl)		; Get Col into b
   7++C092 23                                   inc			hl
   8++C093 5E                                   ld			e,(hl)		; Get text address Lo into E
   9++C094 23                                   inc			hl
  10++C095 56                                   ld			d,(hl)		; Get text address Hi into E
  11++C096 23                                   inc			hl
  12++C097 E5                                   push		hl			; Save present HL to stack as this is the address for the next message
  13++C098 EB                                   ex			de,hl		; now hl = address of text data
  14++C099 1E FF                                ld			e,txt_status_colour
  15++C09B C5                                   push		bc
  16++C09C D1                                   pop			de
  17++C09D                                      MMUSelectLayer1
  17++C09D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  18++C0A1 CD D7 E0                             call		l1_print_at
  19++C0A4 E1                                   pop			hl
  20++C0A5 C1                                   pop			bc
  21++C0A6 10 E6                                djnz		.BoilerTextLoop
  22++C0A8 C9                                   ret
  23++C0A9
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  29+ C0A9              GCM_draw_chart_circle_and_crosshair:
  30+ C0A9 ED 4B 13 80  	ld		bc,(PresentSystemX)				; bc = present system
  31+ C0AD              .OnGalacticChart:
  32+ C0AD CB 38        	srl		b								; but row is row / 2
  33+ C0AF C5           	push  	bc
  34+ C0B0              	MMUSelectSpriteBank
  34+ C0B0 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  35+ C0B4 CD 91 E0     	call	sprite_galactic_cursor
  36+ C0B7 C1           	pop		bc
  37+ C0B8 78           	ld		a,b
  38+ C0B9 C6 18        	add		a,galactic_chart_y_offset
  39+ C0BB 47           	ld		b,a
  40+ C0BC 3A D3 84     	ld		a,(Fuel)
  41+ C0BF CB 3F        	srl		a
  42+ C0C1 CB 3F        	srl		a								; divide range of fuel by 4 for galactic chart
  43+ C0C3 57           	ld		d,a
  44+ C0C4 1E FF        	ld		e,$FF
  45+ C0C6              	MMUSelectLayer2
  45+ C0C6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  46+ C0CA CD CA EB     	call	l2_draw_circle
  47+ C0CD C9           	ret
  48+ C0CE                              DISPLAY "TODO: move cursor code"
  49+ C0CE              ; TODO MOVE CURSOR CODE
  50+ C0CE
  51+ C0CE ED 4B 15 80  GCM_draw_hyperspace_cross_hair: ld		bc,(TargetSystemX)              ; bc = selected jump
  52+ C0D2 C5                                           push    bc
  53+ C0D3 CB 38                                        srl		b								; but row is row / 2
  54+ C0D5                                              MMUSelectSpriteBank
  54+ C0D5 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  55+ C0D9 CD 9D E0                                     call	sprite_galactic_hyper_cursor
  56+ C0DC C1                                           pop     bc
  57+ C0DD CD A9 E0                                     call	sprite_ghc_move
  58+ C0E0 C9                                           ret
  59+ C0E1
  60+ C0E1
  61+ C0E1 AF           plot_gc_stars:          xor		a
  62+ C0E2 32 76 7F                             ld		(XSAV),a
  63+ C0E5 DD 21 16 E0                          ld      ix,galaxy_data
  64+ C0E9 3A 00 80     .CounterLoop:           ld      a,(Galaxy)
  65+ C0EC                                      MMUSelectGalaxyA
  65+ C0EC ED 92 57    >                     nextreg GalaxyDataMMU,     a
  66+ C0EF DD E5                                push    ix
  67+ C0F1 E1                                   pop     hl
  68+ C0F2 11 E9 7F                             ld      de,SystemSeed
  69+ C0F5 CD 63 85                             call    copy_seed
  70+ C0F8 3A EC 7F                             ld		a,(SystemSeed+3)				; QQ15+3 \ seed w1_h is Xcoord of star
  71+ C0FB 4F                                   ld		c,a								; c = X Coord
  72+ C0FC 3A EA 7F                             ld		a,(SystemSeed+1)
  73+ C0FF CB 3F                                srl		a								; Ycoord /2
  74+ C101 C6 18                                add		a,galactic_chart_y_offset		; add offset to Y coord of star
  75+ C103 47                                   ld		b,a								; b = row
  76+ C104 C5                                   push	bc
  77+ C105 3E D8                                ld		a,galactic_star_colour
  78+ C107                                      MMUSelectLayer2
  78+ C107 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  79+ C10B CD B6 E2                             call	l2_plot_pixel
  80+ C10E C1                                   pop		bc
  81+ C10F 3A ED 7F                             ld		a,(SystemSeed+4)
  82+ C112 F6 50                                or		$50								; minimum distance away
  83+ C114 FE 90                                cp		$90
  84+ C116 30 0A                                jr		nc,.NoSecondPixel
  85+ C118 0C           .SecondPixel:           inc		c
  86+ C119 3E 6C                                ld		a,galactic_star_colour2
  87+ C11B                                      MMUSelectLayer2
  87+ C11B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  88+ C11F CD B6 E2                             call	l2_plot_pixel
  89+ C122 DD E5        .NoSecondPixel:         push    ix
  90+ C124 E1                                   pop     hl
  91+ C125 ED 34 08 00                          add     hl,8
  92+ C129 E5                                   push    hl
  93+ C12A DD E1                                pop     ix
  94+ C12C 3A 76 7F                             ld		a,(XSAV)
  95+ C12F 3D                                   dec		a
  96+ C130 FE 00                                cp		0
  97+ C132 C8                                   ret		z
  98+ C133 32 76 7F                             ld		(XSAV),a
  99+ C136 18 B1                                jr		.CounterLoop
 100+ C138
 101+ C138 2A 2A 2A 2A  GALDP       DB "********++++++++"
 101+ C13C 2A 2A 2A 2A
 101+ C140 2B 2B 2B 2B
 101+ C144 2B 2B 2B 2B
 102+ C148              draw_galactic_chart_menu:   InitNoDoubleBuffer
 102+ C148             >                            MMUSelectLayer1
 102+ C148 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 102+ C14C CD 8F E0    >                            call	l1_cls
 102+ C14F 3E 07       >                            ld		a,7
 102+ C151 CD AA E0    >                            call	l1_attr_cls_to_a
 102+ C154             >                            MMUSelectLayer2
 102+ C154 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 102+ C158 CD 0A E0    >                            call    asm_l2_double_buffer_off
 102+ C15B CD 0E E2    >                            call	l2_cls	; Get some space
 102+ C15E             >                            MMUSelectSpriteBank
 102+ C15E ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 102+ C162 CD 6E E5    >                            call    sprite_cls_cursors
 103+ C165 DD 2E DC                                 ld      ixl,$DC
 104+ C168 3E 40                                    ld      a,$40
 105+ C16A 32 7E 7F                                 ld      (MenuIdMax),a
 106+ C16D 2A 13 80                                 ld      hl,(PresentSystemX)
 107+ C170              ;                            ld      (TargetSystemX),hl
 108+ C170 CD 5B C4                                 call    gc_present_system               ; Set up the seed for present system
 109+ C173 01 01 01     .Drawbox:                   ld		bc,$0101
 110+ C176 11 FD BE                                 ld		de,$BEFD
 111+ C179 3E C0                                    ld		a,$C0
 112+ C17B                                          MMUSelectLayer2
 112+ C17B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 113+ C17F CD F9 E3                                 call	l2_draw_box
 114+ C182 01 01 0A                                 ld		bc,$0A01
 115+ C185 11 C0 FE                                 ld		de,$FEC0
 116+ C188 CD 84 E4                                 call	l2_draw_horz_line
 117+ C18B 3E 0D        .StaticText:                ld		a,galactic_chart_header
 118+ C18D CD F7 8E                                 call	expandTokenToString
 119+ C190 06 01                                    ld		b,1
 120+ C192 21 10 C0                                 ld		hl,galactic_chart_boiler_text
 121+ C195 CD 8E C0                                 call	GCM_print_boiler_text
 122+ C198 CD A9 C0     .CircleandCrosshair:        call	GCM_draw_chart_circle_and_crosshair
 123+ C19B CD CE C0                                 call	GCM_draw_hyperspace_cross_hair
 124+ C19E CD E1 C0                                 call	plot_gc_stars
 125+ C1A1 3A 00 80                                 ld      a,(Galaxy)
 126+ C1A4                                          MMUSelectGalaxyA
 126+ C1A4 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 127+ C1A7 ED 4B 15 80                              ld      bc,(TargetSystemX)
 128+ C1AB CD 64 FC                                 call    galaxy_system_under_cursor          ; TODO for some reason this bit
 129+ C1AE FE 00                                    cp      0                                   ; does not reset cursor on a miss
 130+ C1B0 20 11                                    jr      nz,.CurrentTargetIsValid
 131+ C1B2              .CurrentTargetIsInvalid:    CopyPresentSystemToTarget
 131+ C1B2 2A 13 80    >                        ld      hl,(PresentSystemX)
 131+ C1B5 22 15 80    >                        ld      (TargetSystemX),hl
 132+ C1B8 ED 4B 15 80                              ld      bc,(TargetSystemX)
 133+ C1BC                                          MMUSelectSpriteBank
 133+ C1BC ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 134+ C1C0 CD A9 E0                                 call	sprite_ghc_move
 135+ C1C3 3A 00 80     .CurrentTargetIsValid:      ld      a,(Galaxy)
 136+ C1C6                                          MMUSelectGalaxyA
 136+ C1C6 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 137+ C1C9 ED 43 5B E8                              ld      (GalaxyTargetSystem),bc
 138+ C1CD CD 64 FC                                 call    galaxy_system_under_cursor
 139+ C1D0 CD B3 C3                                 call    gc_name_if_possible
 140+ C1D3                                          SetMemFalse TextInputMode
 140+ C1D3 3E FF       >                        ld      a,$FF
 140+ C1D5 32 5F 81    >                        ld      (TextInputMode),a
 141+ C1D8 C9                                       ret
 142+ C1D9
 143+ C1D9              gcDelayVal                  equ $0A
 144+ C1D9              gcBlinkVal                  equ $10
 145+ C1D9
 146+ C1D9
 147+ C1D9 10           gcCursorBlink               DB  gcBlinkVal
 148+ C1DA 20           gcCursorChar                DB  " "
 149+ C1DB 00           gcEndOfString               DB  0
 150+ C1DC 00 00 00...  gcInputText                 DS  31
 151+ C1FB 00 00 00 00                              DB  0,0,0,0,0
 151+ C1FF 00
 152+ C200 00 00 00...  gcBlank                     DS  32
 153+ C220
 154+ C220              ;----------------------------------------------------------------------------------------------------------------------------------
 155+ C220 11 08 B0     gc_display_find_text:   ld		de,galactic_find_position   ; Wipe input area on screen
 156+ C223 21 3C C0                             ld      hl,galactic_find_message
 157+ C226                                      MMUSelectLayer1
 157+ C226 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 158+ C22A CD D7 E0                             call	l1_print_at
 159+ C22D C9                                   ret
 160+ C22E              ;----------------------------------------------------------------------------------------------------------------------------------
 161+ C22E 11 DC C1     gc_display_find_string: ld      de,gcInputText
 162+ C231                                      MMUSelectKeyboard
 162+ C231 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 163+ C235 CD 3D E2                             call    keyboard_copy_input_to_de
 164+ C238 21 DA C1                             ld      hl,gcCursorChar         ; Now just copy cursor char too
 165+ C23B ED A0                                ldi                             ; Copy cursor to local
 166+ C23D 3A 39 E2                             ld      a,(InputCursor)
 167+ C240 3C                                   inc     a
 168+ C241 47                                   ld      b,a
 169+ C242 3E 14                                ld      a,20
 170+ C244 90                                   sub     b
 171+ C245 47                                   ld      b,a
 172+ C246 3E 20                                ld      a," "
 173+ C248 12           .SpacePad:              ld      (de),a
 174+ C249 13                                   inc     de
 175+ C24A 10 FC                                djnz    .SpacePad
 176+ C24C AF                                   xor     a
 177+ C24D 12                                   ld      (de),a
 178+ C24E 11 38 B0                             ld		de,galactic_find_text    ; Display text
 179+ C251 21 DC C1                             ld      hl,gcInputText
 180+ C254                                      MMUSelectLayer1
 180+ C254 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 181+ C258 CD D7 E0                             call	l1_print_at
 182+ C25B C9                                   ret
 183+ C25C
 184+ C25C 3A D9 C1     blink_cursor:           ld      a,(gcCursorBlink)
 185+ C25F 3D                                   dec     a
 186+ C260 32 D9 C1                             ld      (gcCursorBlink),a
 187+ C263 C0                                   ret     nz
 188+ C264 3E 10        .FlashCursor:           ld      a,gcBlinkVal
 189+ C266 32 D9 C1                             ld      (gcCursorBlink),a
 190+ C269 3A DA C1                             ld      a,(gcCursorChar)
 191+ C26C FE 20                                cp      " "
 192+ C26E 28 06                                jr      z,.ChangeToStar
 193+ C270 3E 20                                ld      a," "
 194+ C272 32 DA C1                             ld      (gcCursorChar),a
 195+ C275 C9                                   ret
 196+ C276 3E 2A        .ChangeToStar:          ld      a,"*"
 197+ C278 32 DA C1                             ld      (gcCursorChar),a
 198+ C27B C9                                   ret
 199+ C27C              ;----------------------------------------------------------------------------------------------------------------------------------
 200+ C27C              ; The main loop handles the find key
 201+ C27C              loop_gc_menu:           JumpIfMemTrue TextInputMode,AlreadyInInputMode  ;if we are in input mode then go directly there
 201+ C27C 3A 5F 81    >                        ld      a,(TextInputMode)
 201+ C27F A7          >                        and     a
 201+ C280 CA A1 C2    >                        jp      z, AlreadyInInputMode
 202+ C283              .StartFindCheck:        MacroIsKeyPressed c_Pressed_Find                        ;Is F pressed
 202+ C283 3E 4E       >                        ld      a,c_Pressed_Find
 202+ C285             >                        MMUSelectKeyboard
 202+ C285 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 202+ C289 CD A2 E1    >                        call    is_key_pressed
 203+ C28C C0                                   ret     nz                                      ;the main loop handles find key
 204+ C28D                                      MMUSelectKeyboard
 204+ C28D ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 205+ C291 CD 9C E2                             call    initInputText                           ;Initialise find input
 206+ C294                                      SetMemTrue TextInputMode                        ;Set input mode to true
 206+ C294 AF          >                        xor     a
 206+ C295 32 5F 81    >                        ld      (TextInputMode),a
 207+ C298                                      SetMemToN gcCursorBlink, gcBlinkVal             ; set up blink
 207+ C298 3E 10       >                        ld      a,gcBlinkVal
 207+ C29A 32 D9 C1    >                        ld      (gcCursorBlink),a
 208+ C29D CD 20 C2     .DisplayInputbar:       call    gc_display_find_text                    ; now prep the boiler plate input text
 209+ C2A0 C9                                   ret                                             ; and exit so next interation handles new input as we have to rescan keyboard
 210+ C2A1              ;Already in input mode post pressing find
 211+ C2A1              AlreadyInInputMode:     MMUSelectKeyboard
 211+ C2A1 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 212+ C2A5 CD C3 E2                             call    InputName                               ; Call input routine to parse a key
 213+ C2A8                                      JumpIfMemFalse InputChanged, .blinkNoDelay      ; no key they bypass rest of input
 213+ C2A8 3A 3B E2    >                        ld      a,(InputChanged)
 213+ C2AB A7          >                        and     a
 213+ C2AC C2 B9 C2    >                        jp      nz, .blinkNoDelay
 214+ C2AF              .WasItEnter:            JumpIfMemTrue EnterPressed, .FindEnterPressed   ; if enter was pressed then find
 214+ C2AF 3A 3A E2    >                        ld      a,(EnterPressed)
 214+ C2B2 A7          >                        and     a
 214+ C2B3 CA C5 C2    >                        jp      z, .FindEnterPressed
 215+ C2B6 CD 2E C2                             call    gc_display_find_string                  ; update string
 216+ C2B9 CD 5C C2     .blinkNoDelay:          call    blink_cursor
 217+ C2BC                                      CallIfMemEqNusng    gcCursorBlink, gcBlinkVal, gc_display_find_string ; on blink we get a double update but we can live with that
 217+ C2BC 3A D9 C1    >                        ld      a,(gcCursorBlink)
 217+ C2BF FE 10       >                        cp      gcBlinkVal
 217+ C2C1 CC 2E C2    >                        call    z,gc_display_find_string
 218+ C2C4 C9                                   ret
 219+ C2C5              .FindEnterPressed:      SetMemFalse EnterPressed                        ; reset enter
 219+ C2C5 3E FF       >                        ld      a,$FF
 219+ C2C7 32 3A E2    >                        ld      (EnterPressed),a
 220+ C2CA                                      SetMemFalse TextInputMode                       ; leave input mode
 220+ C2CA 3E FF       >                        ld      a,$FF
 220+ C2CC 32 5F 81    >                        ld      (TextInputMode),a
 221+ C2CF 3A 00 80                             ld      a,(Galaxy)                              ; Fetch correct galaxy seed bank into memory
 222+ C2D2                                      MMUSelectGalaxyA
 222+ C2D2 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 223+ C2D5 21 19 E2                             ld      hl,InputString
 224+ C2D8 11 5E E8                             ld      de,GalaxySearchString
 225+ C2DB CD D0 F6                             call    GalaxyCopyLoop
 226+ C2DE CD 39 FB                             call    find_system_by_name
 227+ C2E1 FE FF                                cp      $FF                                     ; 0 denotes found FF, failure
 228+ C2E3 28 1D                                jr      z,.FindNoMatch
 229+ C2E5 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 230+ C2E8 4F                                   ld      c,a
 231+ C2E9 3A F9 E8                             ld      a,(GalaxyWorkingSeed+1)
 232+ C2EC 47                                   ld      b,a
 233+ C2ED ED 43 15 80                          ld      (TargetSystemX),bc
 234+ C2F1 CD 94 C3                             call    UpdateGalacticCursor
 235+ C2F4 11 08 B0                             ld		de,galactic_find_position               ; Wipe input area on screen
 236+ C2F7 21 73 C0                             ld      hl,galactic_find_match
 237+ C2FA                                      MMUSelectLayer1
 237+ C2FA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 238+ C2FE CD D7 E0                             call	l1_print_at
 239+ C301 C9                                   ret
 240+ C302              .FindNoMatch:           ; if not found display "Not found"
 241+ C302                                      ; move curor if found
 242+ C302 11 08 B0                             ld		de,galactic_find_position   ; Wipe input area on screen
 243+ C305 21 58 C0                             ld      hl,galactic_find_no_match
 244+ C308                                      MMUSelectLayer1
 244+ C308 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 245+ C30C CD D7 E0                             call	l1_print_at
 246+ C30F C9                                   ret; DOSTUFFHERE
 247+ C310              ;----------------------------------------------------------------------------------------------------------------------------------
 248+ C310              galctic_chart_cursors:  ReturnIfMemTrue TextInputMode
 248+ C310 3A 5F 81    >                        ld      a,(TextInputMode)
 248+ C313 A7          >                        and     a
 248+ C314 C8          >                        ret     z
 249+ C315 3A 60 81                             ld      a,(CursorKeysPressed)
 250+ C318                                      ReturnIfAIsZero
 250+ C318 A7          >                        and     a
 250+ C319 C8          >                        ret     z
 251+ C31A 17                                   rla
 252+ C31B DC 33 C3                             call   c,gc_UpPressed
 253+ C31E 17                                   rla
 254+ C31F DC 43 C3                             call   c,gc_DownPressed
 255+ C322 17                                   rla
 256+ C323 DC 53 C3                             call   c,gc_LeftPressed
 257+ C326 17                                   rla
 258+ C327 DC 63 C3                             call   c,gc_RightPressed
 259+ C32A 17                                   rla
 260+ C32B DC 73 C3                             call   c,gc_HomePressed
 261+ C32E 17                                   rla
 262+ C32F DC 7D C3                             call   c,gc_RecenterPressed
 263+ C332 C9                                   ret
 264+ C333              ;----------------------------------------------------------------------------------------------------------------------------------
 265+ C333 3A 16 80     gc_UpPressed:           ld     a,(TargetSystemX+1)
 266+ C336                                      JumpIfAEqNusng 1,gc_BoundsLimit
 266+ C336 FE 01       >                        cp     1
 266+ C338 CA 92 C3    >                        jp      z,gc_BoundsLimit
 267+ C33B 3D                                   dec     a
 268+ C33C 32 16 80                             ld      (TargetSystemX+1),a
 269+ C33F CD 94 C3                             call    UpdateGalacticCursor
 270+ C342 C9                                   ret
 271+ C343              ;----------------------------------------------------------------------------------------------------------------------------------
 272+ C343 3A 16 80     gc_DownPressed:         ld     a,(TargetSystemX+1)
 273+ C346                                      JumpIfAEqNusng 255,gc_BoundsLimit
 273+ C346 FE FF       >                        cp     255
 273+ C348 CA 92 C3    >                        jp      z,gc_BoundsLimit
 274+ C34B 3C                                   inc    a
 275+ C34C 32 16 80                             ld      (TargetSystemX+1),a
 276+ C34F CD 94 C3                             call    UpdateGalacticCursor
 277+ C352 C9                                   ret
 278+ C353              ;----------------------------------------------------------------------------------------------------------------------------------
 279+ C353 3A 15 80     gc_LeftPressed:         ld     a,(TargetSystemX)
 280+ C356                                      JumpIfAEqNusng 2,gc_BoundsLimit
 280+ C356 FE 02       >                        cp     2
 280+ C358 CA 92 C3    >                        jp      z,gc_BoundsLimit
 281+ C35B 3D                                   dec    a
 282+ C35C 32 15 80                             ld      (TargetSystemX),a
 283+ C35F CD 94 C3                             call    UpdateGalacticCursor
 284+ C362 C9                                   ret
 285+ C363              ;----------------------------------------------------------------------------------------------------------------------------------
 286+ C363 3A 15 80     gc_RightPressed:        ld     a,(TargetSystemX)
 287+ C366                                      JumpIfAEqNusng 253,gc_BoundsLimit
 287+ C366 FE FD       >                        cp     253
 287+ C368 CA 92 C3    >                        jp      z,gc_BoundsLimit
 288+ C36B 3C                                   inc    a
 289+ C36C 32 15 80                             ld      (TargetSystemX),a
 290+ C36F CD 94 C3                             call    UpdateGalacticCursor
 291+ C372 C9                                   ret
 292+ C373              ;----------------------------------------------------------------------------------------------------------------------------------
 293+ C373 2A 13 80     gc_HomePressed:         ld      hl,(PresentSystemX)
 294+ C376 22 15 80                             ld      (TargetSystemX),hl
 295+ C379 CD 94 C3                             call    UpdateGalacticCursor
 296+ C37C C9                                   ret
 297+ C37D              ;----------------------------------------------------------------------------------------------------------------------------------
 298+ C37D 3A 00 80     gc_RecenterPressed:     ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 299+ C380                                      MMUSelectGalaxyA
 299+ C380 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 300+ C383 ED 4B 15 80                          ld      bc,(TargetSystemX)
 301+ C387 CD 70 FB                             call    find_nearest_to_bc
 302+ C38A ED 43 15 80                          ld      (TargetSystemX),bc
 303+ C38E CD 94 C3                             call    UpdateGalacticCursor
 304+ C391 C9                                   ret
 305+ C392              ;----------------------------------------------------------------------------------------------------------------------------------
 306+ C392 AF           gc_BoundsLimit          xor     a
 307+ C393 C9                                   ret
 308+ C394
 309+ C394              ;----------------------------------------------------------------------------------------------------------------------------------
 310+ C394 ED 4B 15 80  UpdateGalacticCursor:   ld		bc,(TargetSystemX)              ; bc = selected jump
 311+ C398              OnGalacticChart:        MMUSelectSpriteBank
 311+ C398 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 312+ C39C CD A9 E0                             call	sprite_ghc_move
 313+ C39F 3A 00 80                             ld      a,(Galaxy)
 314+ C3A2                                      MMUSelectGalaxyA
 314+ C3A2 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 315+ C3A5 ED 4B 15 80                          ld      bc,(TargetSystemX)
 316+ C3A9 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 317+ C3AD CD 64 FC                             call    galaxy_system_under_cursor
 318+ C3B0 FE 00                                cp      0
 319+ C3B2 C8                                   ret     z
 320+ C3B3              ; just fall into gc_name_if_possible
 321+ C3B3 CD 82 F6     gc_name_if_possible:    call	GetDigramWorkingSeed
 322+ C3B6 CD E1 C3                             call    gc_clear_name_area
 323+ C3B9 21 7C 8F                             ld		hl,name_expanded
 324+ C3BC CD D1 8E                             call	CapitaliseString
 325+ C3BF 21 7C 8F                             ld		hl, name_expanded
 326+ C3C2 01 0A A0                             ld      bc,$A00A
 327+ C3C5 1E FF                                ld		e,$FF
 328+ C3C7                                      MMUSelectLayer2
 328+ C3C7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 329+ C3CB CD BE E3                             call	l2_print_7at
 330+ C3CE CD FB C3                             call    gc_calc_distance
 331+ C3D1 21 14 C0                             ld      hl,galactic_chart_distance
 332+ C3D4 01 0A A8                             ld      bc,$A80A
 333+ C3D7 1E FF                                ld		e,$FF
 334+ C3D9                                      MMUSelectLayer2
 334+ C3D9 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 335+ C3DD CD BE E3                             call	l2_print_7at
 336+ C3E0 C9                                   ret
 337+ C3E1              ;----------------------------------------------------------------------------------------------------------------------------------
 338+ C3E1 26 08        gc_clear_name_area:     ld      h,8
 339+ C3E3 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 340+ C3E6 01 0A A0                             ld      bc,$A00A
 341+ C3E9 E5           .ClearLoop:             push    hl
 342+ C3EA D5                                   push    de
 343+ C3EB C5                                   push    bc
 344+ C3EC                                      MMUSelectLayer2
 344+ C3EC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 345+ C3F0 CD 84 E4                             call	l2_draw_horz_line
 346+ C3F3 C1                                   pop     bc
 347+ C3F4 D1                                   pop     de
 348+ C3F5 E1                                   pop     hl
 349+ C3F6 04                                   inc     b
 350+ C3F7 25                                   dec     h
 351+ C3F8 20 EF                                jr      nz,.ClearLoop
 352+ C3FA C9                                   ret
 353+ C3FB              ;----------------------------------------------------------------------------------------------------------------------------------
 354+ C3FB 3A 00 80     gc_calc_distance:       ld      a,(Galaxy)
 355+ C3FE                                      MMUSelectGalaxyA
 355+ C3FE ED 92 57    >                     nextreg GalaxyDataMMU,     a
 356+ C401 11 1E C0                             ld      de,galactic_chart_dist_amount
 357+ C404 21 30 C0                             ld      hl,galactic_default_dist
 358+ C407 ED A0                                ldi
 359+ C409 ED A0                                ldi
 360+ C40B ED A0                                ldi
 361+ C40D ED A0                                ldi
 362+ C40F ED A0                                ldi
 363+ C411 ED 4B 13 80                          ld      bc,(PresentSystemX)
 364+ C415 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 365+ C419 ED 4B 15 80                          ld      bc,(TargetSystemX)
 366+ C41D ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 367+ C421 CD F7 FB                             call    galaxy_find_distance            ; get distance into HL
 368+ C424 DD 2A 35 80                          ld      ix,(Distance)
 369+ C428 11 00 00                             ld      de,0
 370+ C42B FD 21 36 C0                          ld      iy,galactic_distance
 371+ C42F CD ED 9A                             call    DispDEIXtoIY
 372+ C432 FD E5                                push    iy
 373+ C434 E1                                   pop     hl
 374+ C435 11 36 C0                             ld      de,galactic_distance
 375+ C438 7E                                   ld		a,(hl)				;Push last digit to post decimal
 376+ C439 32 22 C0                             ld		(galactic_chart_fraction),a
 377+ C43C 2B                                   dec     hl
 378+ C43D CD 56 99                             call    compare16HLDE
 379+ C440 38 18                                jr      c,.done_number
 380+ C442 7E                                   ld      a,(hl)
 381+ C443 32 20 C0                             ld      (galactic_chart_dist_amount+2),a
 382+ C446 2B                                   dec     hl
 383+ C447 CD 56 99                             call    compare16HLDE
 384+ C44A 38 0E                                jr      c,.done_number
 385+ C44C 7E                                   ld      a,(hl)
 386+ C44D 32 1F C0                             ld      (galactic_chart_dist_amount+1),a
 387+ C450 2B                                   dec     hl
 388+ C451 CD 56 99                             call    compare16HLDE
 389+ C454 38 04                                jr      c,.done_number
 390+ C456 7E                                   ld      a,(hl)
 391+ C457 32 1E C0                             ld      (galactic_chart_dist_amount),a
 392+ C45A C9           .done_number:           ret
 393+ C45B              ;----------------------------------------------------------------------------------------------------------------------------------
 394+ C45B AF           gc_present_system:      xor     a
 395+ C45C 32 76 7F                             ld		(XSAV),a
 396+ C45F DD 21 16 E0                          ld      ix,galaxy_data
 397+ C463 3A 00 80     GCCounterLoop:          ld      a,(Galaxy)
 398+ C466                                      MMUSelectGalaxyA
 398+ C466 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 399+ C469 2A 13 80                             ld      hl,(PresentSystemX)
 400+ C46C DD E5                                push    ix
 401+ C46E 7D                                   ld      a,l
 402+ C46F DD BE 03                             cp      (ix+3)                          ; seed x
 403+ C472 20 14                                jr      nz,.ItsNotThisX
 404+ C474 7C                                   ld      a,h
 405+ C475 DD BE 01                             cp      (ix+1)                          ; seed x
 406+ C478 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
 407+ C47A DD E5                                push    ix
 408+ C47C E1                                   pop     hl
 409+ C47D 11 07 80                             ld      de,PresentSystemSeeds
 410+ C480 CD 63 85                             call    copy_seed
 411+ C483 3E FF                                ld      a,$FF
 412+ C485 DD E1                                pop     ix
 413+ C487 C9                                   ret
 414+ C488 E1           .ItsNotThisX:           pop     hl
 415+ C489 ED 34 08 00                          add     hl,8
 416+ C48D E5                                   push    hl
 417+ C48E DD E1                                pop     ix
 418+ C490 3A 76 7F                             ld		a,(XSAV)
 419+ C493 3D                                   dec		a
 420+ C494 32 76 7F                             ld      (XSAV),a
 421+ C497 FE 00                                cp		0
 422+ C499 C8                                   ret		z
 423+ C49A 18 C7                                jr		GCCounterLoop
 424+ C49C
# file closed: ./Menus//galactic_chart_menu.asm
 807  C49C                  DISPLAY "Bank ",BankMenuGalCht," - Bytes free ",/D, $2000 - ($-MenuGalChtAddr), " - BankMenuGalCht"
 808  C49C              ; Bank 52  ------------------------------------------------------------------------------------------------------------------------
 809  C49C                  SLOT    MenuInventAddr
 810  C49C                  PAGE    BankMenuInvent
 811  C49C              	ORG     MenuInventAddr
 812  C000                  INCLUDE "./Menus/inventory_menu.asm"
# file opened: ./Menus/inventory_menu.asm
   1+ C000 49 6E 76 65  ivnentory_page_marker   DB "Inventory   PG52"
   1+ C004 6E 74 6F 72
   1+ C008 79 20 20 20
   1+ C00C 50 47 35 32
   2+ C010 48 02 1C C0  inventory_boiler_text	DW $0248,INM_inventory
   3+ C014 08 0B 26 C0  						DW $0B08,INM_fuel
   4+ C018 08 13 2C C0  						DW $1308,INM_cash
   5+ C01C
   6+ C01C 49 4E 56 45  INM_inventory 			DB "INVENTORY",0
   6+ C020 4E 54 4F 52
   6+ C024 59 00
   7+ C026 46 75 65 6C  INM_fuel				DB "Fuel:",0
   7+ C02A 3A 00
   8+ C02C 43 61 73 68  INM_cash				DB "Cash:",0
   8+ C030 3A 00
   9+ C032
  10+ C032 30 30 30 30  txt_inventory_amount	DB "00000",0
  10+ C036 30 00
  11+ C038 00 00        inventory_cursor		DW $0000
  12+ C03A              inv_fuel_position		equ	$0B30
  13+ C03A              inv_cash_position		equ	$1330
  14+ C03A
  15+ C03A              inventory_position		equ $2008
  16+ C03A              inventory_amount		equ $80
  17+ C03A              inventory_uom			equ	$B0
  18+ C03A 00           inv_selected_row        DB 0
  19+ C03B
  20+ C03B 00 00 00...  INM_cash_amount			DS 10
  21+ C045 20 43 72 00  INM_cash_UoM            DB " Cr",0
  22+ C049
  23+ C049 26 00        INM_DispAtoDE:          ld h,0
  24+ C04B 6F                                   ld l,a
  25+ C04C 01 F0 D8                             ld	bc,-10000
  26+ C04F CD 65 C0                             call	.Num1
  27+ C052 01 18 FC                             ld	bc,-1000
  28+ C055 CD 65 C0                             call	.Num1
  29+ C058 01 9C FF                             ld	bc,-100
  30+ C05B CD 65 C0                             call	.Num1
  31+ C05E 0E F6                                ld	c,-10
  32+ C060 CD 65 C0                             call	.Num1
  33+ C063 0E FF                                ld	c,-1
  34+ C065 3E 2F        .Num1:	                ld	a,'0'-1
  35+ C067 3C           .Num2:	                inc	a
  36+ C068 09                                   add	hl,bc
  37+ C069 38 FC                                jr	c,.Num2
  38+ C06B ED 42                                sbc	hl,bc
  39+ C06D 12                                   ld	(de),a
  40+ C06E 13                                   inc	de
  41+ C06F C9                                   ret
  42+ C070
  43+ C070              INM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C070
   2++C070              ;">print_boilder_text hl = text structure, b = message count"
   3++C070 C5           .BoilerTextLoop:        push		bc			; Save Message Count loop value
   4++C071 4E                                   ld			c,(hl)		; Get Row into b
   5++C072 23                                   inc			hl
   6++C073 46                                   ld			b,(hl)		; Get Col into b
   7++C074 23                                   inc			hl
   8++C075 5E                                   ld			e,(hl)		; Get text address Lo into E
   9++C076 23                                   inc			hl
  10++C077 56                                   ld			d,(hl)		; Get text address Hi into E
  11++C078 23                                   inc			hl
  12++C079 E5                                   push		hl			; Save present HL to stack as this is the address for the next message
  13++C07A EB                                   ex			de,hl		; now hl = address of text data
  14++C07B 1E FF                                ld			e,txt_status_colour
  15++C07D C5                                   push		bc
  16++C07E D1                                   pop			de
  17++C07F                                      MMUSelectLayer1
  17++C07F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  18++C083 CD D7 E0                             call		l1_print_at
  19++C086 E1                                   pop			hl
  20++C087 C1                                   pop			bc
  21++C088 10 E6                                djnz		.BoilerTextLoop
  22++C08A C9                                   ret
  23++C08B
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  44+ C08B
  45+ C08B DD 22 2F C1  INM_DispDEIXtoIY:       ld (.inmclcn32z),ix
  46+ C08F ED 53 31 C1                          ld (.inmclcn32zIX),de
  47+ C093 DD 21 2B C1                          ld ix,.inmclcn32t+36
  48+ C097 06 09                                ld b,9
  49+ C099 0E 00                                ld c,0
  50+ C09B 3E 30        .inmclcn321:            ld a,'0'
  51+ C09D B7                                   or a
  52+ C09E DD 5E 00     .inmclcn322:            ld e,(ix+0)
  53+ C0A1 DD 56 01                             ld d,(ix+1)
  54+ C0A4 2A 2F C1                             ld hl,(.inmclcn32z)
  55+ C0A7 ED 52                                sbc hl,de
  56+ C0A9 22 2F C1                             ld (.inmclcn32z),hl
  57+ C0AC DD 5E 02                             ld e,(ix+2)
  58+ C0AF DD 56 03                             ld d,(ix+3)
  59+ C0B2 2A 31 C1                             ld hl,(.inmclcn32zIX)
  60+ C0B5 ED 52                                sbc hl,de
  61+ C0B7 22 31 C1                             ld (.inmclcn32zIX),hl
  62+ C0BA 38 04                                jr c,.inmclcn325
  63+ C0BC 0C                                   inc c
  64+ C0BD 3C                                   inc a
  65+ C0BE 18 DE                                jr .inmclcn322
  66+ C0C0 DD 5E 00     .inmclcn325:            ld e,(ix+0)
  67+ C0C3 DD 56 01                             ld d,(ix+1)
  68+ C0C6 2A 2F C1                             ld hl,(.inmclcn32z)
  69+ C0C9 19                                   add hl,de
  70+ C0CA 22 2F C1                             ld (.inmclcn32z),hl
  71+ C0CD DD 5E 02                             ld e,(ix+2)
  72+ C0D0 DD 56 03                             ld d,(ix+3)
  73+ C0D3 2A 31 C1                             ld hl,(.inmclcn32zIX)
  74+ C0D6 ED 5A                                adc hl,de
  75+ C0D8 22 31 C1                             ld (.inmclcn32zIX),hl
  76+ C0DB 11 FC FF                             ld de,-4
  77+ C0DE DD 19                                add ix,de
  78+ C0E0 0C                                   inc c
  79+ C0E1 0D                                   dec c
  80+ C0E2 28 05                                jr z,.inmclcn323
  81+ C0E4 FD 77 00                             ld (iy+0),a
  82+ C0E7 FD 23                                inc iy
  83+ C0E9 10 B0        .inmclcn323:            djnz .inmclcn321
  84+ C0EB 3A 2F C1                             ld a,(.inmclcn32z)
  85+ C0EE C6 30                                add A,'0'
  86+ C0F0 FD 77 00                             ld (iy+0),a
  87+ C0F3 FD 36 02 00                          ld (iy+2),0
  88+ C0F7 FD 7E 00                             ld      a,(IY+0)
  89+ C0FA FD 77 01                             ld      (IY+1),a
  90+ C0FD 3E 2E                                ld      a,"."
  91+ C0FF FD 77 00                             ld      (IY+0),a
  92+ C102 FD 23                                inc     IY
  93+ C104 FD 23                                inc     IY
  94+ C106 C9                                   ret
  95+ C107 01 00 00 00  .inmclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  95+ C10B 0A 00 00 00
  95+ C10F 64 00 00 00
  95+ C113 E8 03 00 00
  95+ C117 10 27 00 00
  96+ C11B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
  96+ C11F 40 42 0F 00
  96+ C123 80 96 98 00
  96+ C127 00 E1 F5 05
  96+ C12B 00 CA 9A 3B
  97+ C12F 00 00        .inmclcn32z             ds 2
  98+ C131 00 00        .inmclcn32zIX           ds 2
  99+ C133
 100+ C133              INM_GetFuelLevel:       INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++C133
   2++C133
   3++C133 3A D3 84     	ld		a,(Fuel)
   4++C136 11 D5 AF     	ld		de,txt_fuel_level
   5++C139 0E 9C        	ld	c, -100
   6++C13B CD 45 C1     	call	.Num1
   7++C13E 0E F6        	ld	c,-10
   8++C140 CD 45 C1     	call	.Num1
   9++C143 0E FF        	ld	c,-1
  10++C145              .Num1:
  11++C145 06 2F        	ld	b,'0'-1
  12++C147              .Num2:
  13++C147 04           	inc		b
  14++C148 81           	add		a,c
  15++C149 38 FC        	jr		c,.Num2
  16++C14B 91           	sub 	c
  17++C14C C5           	push	bc
  18++C14D F5           	push	af
  19++C14E 79           	ld		a,c
  20++C14F FE FF        	cp		-1
  21++C151 CC 5A C1     	call	z,.InsertDot
  22++C154 78           	ld		a,b
  23++C155 12           	ld		(de),a
  24++C156 13           	inc		de
  25++C157 F1           	pop		af
  26++C158 C1           	pop		bc
  27++C159 C9           	ret
  28++C15A              .InsertDot:
  29++C15A 3E 2E        	ld		a,'.'
  30++C15C 12           	ld		(de),a
  31++C15D 13           	inc		de
  32++C15E C9           	ret
  33++C15F
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
 101+ C15F
 102+ C15F              ; "A = stock item number"
 103+ C15F              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C15F 47           PrintInvItem:           ld		b,a
 105+ C160 21 D6 84                             ld		hl,CargoTonnes
 106+ C163 ED 31                                add		hl,a
 107+ C165 7E                                   ld		a,(hl)
 108+ C166 4F                                   ld		c,a
 109+ C167 FE 00                                cp		0
 110+ C169 C8                                   ret		z
 111+ C16A 78                                   ld		a,b
 112+ C16B C5                                   push	bc						; push item nbr + quantity
 113+ C16C                                      MMUSelectStockTable
 113+ C16C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 114+ C170 21 88 E0                             ld		hl, StockItemTable
 115+ C173 CD 57 88                             call	getTableText
 116+ C176 7E           .ItemItemName           ld		a,(hl)
 117+ C177 21 FC 8C                             ld		hl, WordIdx
 118+ C17A CD 57 88                             call	getTableText
 119+ C17D ED 5B 38 C0                          ld		de,(inventory_cursor)
 120+ C181                                      MMUSelectLayer1
 120+ C181 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 121+ C185 CD D7 E0                             call	l1_print_at
 122+ C188 C1           .ItemAmount:            pop		bc						; b = item number, c = quantity
 123+ C189 C5                                   push	bc
 124+ C18A 79                                   ld		a,c
 125+ C18B 11 32 C0                             ld		de,txt_inventory_amount
 126+ C18E CD 49 C0                             call	INM_DispAtoDE
 127+ C191 21 32 C0                             ld		hl,txt_inventory_amount
 128+ C194 E5                                   push	hl
 129+ C195 7E           .ZeroLoop:              ld		a,(hl)
 130+ C196 FE 30                                cp		'0'
 131+ C198 20 05                                jr		nz,.NotZero
 132+ C19A 36 20        .ZeroDigit:             ld		(hl),' '
 133+ C19C 23                                   inc		hl
 134+ C19D 18 F6                                jr		.ZeroLoop
 135+ C19F ED 5B 38 C0  .NotZero:               ld		de,(inventory_cursor)
 136+ C1A3 E1                                   pop		hl
 137+ C1A4 1E 80                                ld		e,inventory_amount
 138+ C1A6                                      MMUSelectLayer1
 138+ C1A6 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 139+ C1AA CD D7 E0                             call	l1_print_at
 140+ C1AD              .ItemMeasure:	        MMUSelectStockTable
 140+ C1AD ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 141+ C1B1 21 88 E0                             ld		hl, StockItemTable
 142+ C1B4 C1                                   pop		bc
 143+ C1B5 78                                   ld		a,b
 144+ C1B6 CD 57 88                             call	getTableText
 145+ C1B9 ED 34 07 00                          add		hl,7
 146+ C1BD 7E                                   ld		a,(hl)
 147+ C1BE 21 FC 8C                             ld		hl,WordIdx
 148+ C1C1 CD 57 88                             call	getTableText
 149+ C1C4 ED 5B 38 C0                          ld		de,(inventory_cursor)
 150+ C1C8 1E B0                                ld		e,inventory_uom
 151+ C1CA                                      MMUSelectLayer1
 151+ C1CA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 152+ C1CE CD D7 E0                             call	l1_print_at
 153+ C1D1 3A 39 C0                             ld 		a,(inventory_cursor+1)
 154+ C1D4 C6 08                                add		a,8
 155+ C1D6 32 39 C0                             ld 		(inventory_cursor+1),a
 156+ C1D9 C9                                   ret
 157+ C1DA              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ C1DA 2A D1 84     INM_GetCash:            ld		hl,(Cash+2)
 159+ C1DD EB                                   ex      de,hl
 160+ C1DE DD 2A CF 84                          ld      ix,(Cash)
 161+ C1E2 FD 21 3B C0                          ld		iy,INM_cash_amount
 162+ C1E6 CD 8B C0                             call 	INM_DispDEIXtoIY
 163+ C1E9 FD E5                                push    IY
 164+ C1EB D1                                   pop     de
 165+ C1EC 21 45 C0                             ld      hl,INM_cash_UoM
 166+ C1EF 01 04 00                             ld      bc,4
 167+ C1F2 ED B0                                ldir
 168+ C1F4 C9                                   ret
 169+ C1F5              ;----------------------------------------------------------------------------------------------------------------------------------
 170+ C1F5              draw_inventory_menu:    InitNoDoubleBuffer
 170+ C1F5             >                            MMUSelectLayer1
 170+ C1F5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 170+ C1F9 CD 8F E0    >                            call	l1_cls
 170+ C1FC 3E 07       >                            ld		a,7
 170+ C1FE CD AA E0    >                            call	l1_attr_cls_to_a
 170+ C201             >                            MMUSelectLayer2
 170+ C201 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 170+ C205 CD 0A E0    >                            call    asm_l2_double_buffer_off
 170+ C208 CD 0E E2    >                            call	l2_cls	; Get some space
 170+ C20B             >                            MMUSelectSpriteBank
 170+ C20B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 170+ C20F CD 6E E5    >                            call    sprite_cls_cursors
 171+ C212 3E 08                                ld      a,$08
 172+ C214 32 7E 7F                             ld      (MenuIdMax),a
 173+ C217                                      MMUSelectSpriteBank
 173+ C217 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 174+ C21B CD 6E E5                             call        sprite_cls_cursors
 175+ C21E 01 01 01     .Drawbox:               ld		bc,$0101
 176+ C221 11 FD BE                             ld		de,$BEFD
 177+ C224 3E C0                                ld		a,$C0
 178+ C226                                      MMUSelectLayer2
 178+ C226 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 179+ C22A CD F9 E3                             call	l2_draw_box
 180+ C22D 01 01 0A                             ld		bc,$0A01
 181+ C230 11 C0 FE                             ld		de,$FEC0
 182+ C233 CD 84 E4                             call	l2_draw_horz_line
 183+ C236 06 03        .StaticText:	        ld		b,3
 184+ C238 21 10 C0                             ld		hl,inventory_boiler_text
 185+ C23B CD 70 C0                             call	INM_print_boiler_text
 186+ C23E CD 33 C1     .DisplayFuel:           call	INM_GetFuelLevel
 187+ C241 21 D5 AF                             ld		hl, txt_fuel_level
 188+ C244 7E                                   ld		a,(hl)
 189+ C245 FE 30                                cp		'0'
 190+ C247 20 01                                jr		nz,.PrintFuel
 191+ C249 23           .SkipLeadingZero:	    inc		hl
 192+ C24A 1E FF        .PrintFuel:             ld		e,txt_status_colour
 193+ C24C 01 30 0B                             ld		bc,inv_fuel_position
 194+ C24F                                      MMUSelectLayer2
 194+ C24F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 195+ C253 CD 5E E3                             call	l2_print_at
 196+ C256 CD DA C1     .DisplayCash:           call	INM_GetCash
 197+ C259 21 3B C0                             ld		hl,INM_cash_amount
 198+ C25C 1E FF                                ld		e,txt_status_colour
 199+ C25E 01 30 13                             ld		bc,inv_cash_position
 200+ C261                                      MMUSelectLayer2
 200+ C261 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 201+ C265 CD 5E E3                             call	l2_print_at						; now we have the correct integer
 202+ C268 01 30 13                             ld		bc,inv_cash_position
 203+ C26B 21 3B C0                             ld		hl,INM_cash_amount
 204+ C26E 3E 00        .DisplayInventory:      ld		a,0
 205+ C270 21 08 20                             ld		hl,inventory_position
 206+ C273 22 38 C0                             ld		(inventory_cursor),hl
 207+ C276 F5           .InvLoop:	            push	af
 208+ C277 CD 5F C1                             call	PrintInvItem
 209+ C27A F1                                   pop		af
 210+ C27B 3C                                   inc		a
 211+ C27C FE 11                                cp		17
 212+ C27E 38 F6                                jr		c,.InvLoop
 213+ C280 C9                                   ret
 214+ C281
# file closed: ./Menus/inventory_menu.asm
 813  C281                  DISPLAY "Bank ",BankMenuInvent," - Bytes free ",/D, $2000 - ($-MenuInventAddr), " - BankMenuInvent"
 814  C281              ; Bank 53  ------------------------------------------------------------------------------------------------------------------------
 815  C281                  SLOT    MenuSystemAddr
 816  C281                  PAGE    BankMenuSystem
 817  C281              	ORG     MenuSystemAddr
 818  C000                  INCLUDE "./Menus/system_data_menu.asm"
# file opened: ./Menus/system_data_menu.asm
   1+ C000 53 79 73 74  system_data_page_marker DB "System      PG53"
   1+ C004 65 6D 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 35 33
   2+ C010
   3+ C010 40 02 B0 8E  plant_boiler_text		DW $0240,TextBuffer
   4+ C014 80 02 7C 8F  						DW $0280,name_expanded
   5+ C018 08 0B 0E 8A  						DW $0B08,WordDistance
   6+ C01C 08 13 17 8A  						DW $1308,WordEconomy
   7+ C020 08 1B 1F 8A  						DW $1B08,WordGovernment
   8+ C024 08 23 2A 8A  						DW $2308,WordTechLevel
   9+ C028 08 2B 34 8A  						DW $2B08,WordPopulation
  10+ C02C 08 3B 4F 8A  						DW $3B08,WordGross
  11+ C030 38 3B 55 8A  						DW $3B38,WordProductivity
  12+ C034 08 43 62 8A  						DW $4308,WordAverage
  13+ C038 48 43 6A 8A  						DW $4348,WordRadius
  14+ C03C 60 0B B0 8E  planet_zero_dist		DW $0B60,TextBuffer
  15+ C040 60 13 B0 8E  planet_economy_disp		DW $1360,TextBuffer
  16+ C044 0A 00        techlevel_value			DB 10,0
  17+ C046 00 00 00...  distance_value          DS 20,0
  18+ C05A 20 4C 69 67  distance_uom            DB " Light Years",0
  18+ C05E 68 74 20 59
  18+ C062 65 61 72 73
  18+ C066 00
  19+ C067 00 00 00...  radius_value            DS 20
  20+ C07B 00                                   DB 0
  21+ C07C 20 6B 6D 00  radius_uom              DB " km",0
  22+ C080 00 00 00...  population_value        DS 20
  23+ C094 00                                   DB 0
  24+ C095 20 42 69 6C  population_uom          DB " Billion",0
  24+ C099 6C 69 6F 6E
  24+ C09D 00
  25+ C09E 00 00 00...  productivity_value      DS 20
  26+ C0B2 00                                   DB 0
  27+ C0B3 20 4D 20 43  productivity_uom        DB " M CR",0
  27+ C0B7 52 00
  28+ C0B9
  29+ C0B9              GovernmentIndexOffset	EQU 75
  30+ C0B9              DistanceScreenPos       EQU $0B60
  31+ C0B9              GovernmentScreenPos		EQU $1B60
  32+ C0B9              TechLevelScreenPos		EQU $2360
  33+ C0B9              SpeciesScreenPos        EQU $3308
  34+ C0B9
  35+ C0B9 00           system_present_or_target DB 0
  36+ C0BA 00 00        saved_present			 DW 0
  37+ C0BC
  38+ C0BC
  39+ C0BC 00 00 00...  SD_present_name         DS  30
  40+ C0DA 00                                   DB  0
  41+ C0DB 00 00 00...  SD_target_name          DS  30
  42+ C0F9 00                                   DB  0
  43+ C0FA 00 00 00...  SD_species              DS 30
  44+ C118 00                                   DB 0
  45+ C119 00 00 00...  SD_planet_description   DS 300,0
  46+ C245
  47+ C245 00           SDDisplayGovernment     DB 0
  48+ C246 00           SDDisplayEconomy        DB 0
  49+ C247 00           SDDisplayTekLevel       DB 0
  50+ C248 00           SDDisplayPopulation     DB 0
  51+ C249 00 00        SDDisplayProductivity   DW 0
  52+ C24B 00 00        SDDisplayRadius         DW 0
  53+ C24D              SDDataLength            EQU $ - SDDisplayEconomy
  54+ C24D
  55+ C24D 21 0A E9     SD_copy_system_data:    ld      hl,GalaxyDisplayGovernment
  56+ C250 11 45 C2                             ld      de,SDDisplayGovernment
  57+ C253 01 07 00                             ld      bc,SDDataLength
  58+ C256 ED B0                                ldir
  59+ C258 21 47 C2     .DisplayTechPlus1:      ld     hl,SDDisplayTekLevel
  60+ C25B 34                                   inc    (hl)
  61+ C25C C9                                   ret
  62+ C25D
  63+ C25D 21 7F E8     SD_copy_to_name:        ld      hl,GalaxyExpandedName
  64+ C260 01 1E 00                             ld      bc,30
  65+ C263 ED B0                                ldir
  66+ C265 C9                                   ret
  67+ C266
  68+ C266 21 64 F1     SD_copy_species:        ld      hl,GalaxySpecies
  69+ C269 11 FA C0                             ld      de,SD_species
  70+ C26C 01 1E 00                             ld      bc,30
  71+ C26F ED B0                                ldir
  72+ C271 C9                                   ret
  73+ C272
  74+ C272 21 85 F1     SD_copy_description:    ld      hl,GalaxyPlanetDescription
  75+ C275 11 19 C1                             ld      de,SD_planet_description
  76+ C278 7E           SDCopyLoop:             ld      a,(hl)
  77+ C279 FE 00                                cp      0
  78+ C27B 28 05                                jr      z,.SD_Copy_Done
  79+ C27D ED A0                                ldi
  80+ C27F C3 78 C2                             jp      SDCopyLoop
  81+ C282 12           .SD_Copy_Done:          ld      (de),a
  82+ C283 C9                                   ret
  83+ C284
  84+ C284 26 00        SDM_DispAtoDE:          ld h,0
  85+ C286 6F                                   ld l,a
  86+ C287 01 F0 D8                             ld	bc,-10000
  87+ C28A CD A0 C2                             call	.Num1
  88+ C28D 01 18 FC                             ld	bc,-1000
  89+ C290 CD A0 C2                             call	.Num1
  90+ C293 01 9C FF                             ld	bc,-100
  91+ C296 CD A0 C2                             call	.Num1
  92+ C299 0E F6                                ld	c,-10
  93+ C29B CD A0 C2                             call	.Num1
  94+ C29E 0E FF                                ld	c,-1
  95+ C2A0 3E 2F        .Num1:	                ld	a,'0'-1
  96+ C2A2 3C           .Num2:	                inc	a
  97+ C2A3 09                                   add	hl,bc
  98+ C2A4 38 FC                                jr	c,.Num2
  99+ C2A6 ED 42                                sbc	hl,bc
 100+ C2A8 12                                   ld	(de),a
 101+ C2A9 13                                   inc	de
 102+ C2AA C9                                   ret
 103+ C2AB
 104+ C2AB
 105+ C2AB 3A 00 80     sdm_calc_distance:      ld      a,(Galaxy)
 106+ C2AE                                      MMUSelectGalaxyA
 106+ C2AE ED 92 57    >                     nextreg GalaxyDataMMU,     a
 107+ C2B1 ED 4B 13 80                          ld      bc,(PresentSystemX)
 108+ C2B5 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 109+ C2B9 ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 110+ C2BD ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 111+ C2C1 CD F7 FB                             call    galaxy_find_distance            ; get distance into HL
 112+ C2C4 C9           .done_number:           ret
 113+ C2C5
 114+ C2C5
 115+ C2C5              SDM_print_boiler_text:
 116+ C2C5                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C2C5
   2++C2C5              ;">print_boilder_text hl = text structure, b = message count"
   3++C2C5 C5           .BoilerTextLoop:        push		bc			; Save Message Count loop value
   4++C2C6 4E                                   ld			c,(hl)		; Get Row into b
   5++C2C7 23                                   inc			hl
   6++C2C8 46                                   ld			b,(hl)		; Get Col into b
   7++C2C9 23                                   inc			hl
   8++C2CA 5E                                   ld			e,(hl)		; Get text address Lo into E
   9++C2CB 23                                   inc			hl
  10++C2CC 56                                   ld			d,(hl)		; Get text address Hi into E
  11++C2CD 23                                   inc			hl
  12++C2CE E5                                   push		hl			; Save present HL to stack as this is the address for the next message
  13++C2CF EB                                   ex			de,hl		; now hl = address of text data
  14++C2D0 1E FF                                ld			e,txt_status_colour
  15++C2D2 C5                                   push		bc
  16++C2D3 D1                                   pop			de
  17++C2D4                                      MMUSelectLayer1
  17++C2D4 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  18++C2D8 CD D7 E0                             call		l1_print_at
  19++C2DB E1                                   pop			hl
  20++C2DC C1                                   pop			bc
  21++C2DD 10 E6                                djnz		.BoilerTextLoop
  22++C2DF C9                                   ret
  23++C2E0
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 117+ C2E0
 118+ C2E0 7E           PlanetLeftJustifyLoop:  ld      a,(hl)
 119+ C2E1 FE 30                                cp      "0"
 120+ C2E3 C0                                   ret      nz
 121+ C2E4 23                                   inc     hl
 122+ C2E5 10 F9                                djnz    PlanetLeftJustifyLoop
 123+ C2E7 C9                                   ret
 124+ C2E8
 125+ C2E8 00 00        SD_working_cursor       DW   0
 126+ C2EA
 127+ C2EA 00 00 00...  sd_copy_of_seed         DS 6
 128+ C2F0
 129+ C2F0              draw_system_data_menu:  InitNoDoubleBuffer
 129+ C2F0             >                            MMUSelectLayer1
 129+ C2F0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 129+ C2F4 CD 8F E0    >                            call	l1_cls
 129+ C2F7 3E 07       >                            ld		a,7
 129+ C2F9 CD AA E0    >                            call	l1_attr_cls_to_a
 129+ C2FC             >                            MMUSelectLayer2
 129+ C2FC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 129+ C300 CD 0A E0    >                            call    asm_l2_double_buffer_off
 129+ C303 CD 0E E2    >                            call	l2_cls	; Get some space
 129+ C306             >                            MMUSelectSpriteBank
 129+ C306 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 129+ C30A CD 6E E5    >                            call    sprite_cls_cursors
 130+ C30D                                      ZeroA
 130+ C30D AF          >                        xor a
 131+ C30E 32 B9 C0                             ld      (system_present_or_target),a
 132+ C311 3E 08                                ld		a,8
 133+ C313 32 7E 7F                             ld		(MenuIdMax),a
 134+ C316 3A 00 80     .SelectGalaxy:          ld      a,(Galaxy)
 135+ C319                                      MMUSelectGalaxyA
 135+ C319 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 136+ C31C ED 4B 15 80  .CheckCursorOrHome:     ld      bc,(TargetSystemX)              ; Find out if we have to work on hyperspace or normal cursor
 137+ C320 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 138+ C324 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 139+ C328 CD 64 FC                             call    galaxy_system_under_cursor
 140+ C32B FE FF        .IsCursorOnSystem:      cp      $FF                               ; if a = 0 then failed
 141+ C32D 28 0F                                jr      z,.FoundASystem
 142+ C32F ED 4B 13 80  .UsePresentSystem:      ld      bc,(PresentSystemX)
 143+ C333 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 144+ C337 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 145+ C33B CD 64 FC                             call    galaxy_system_under_cursor
 146+ C33E ED 4B 15 80  .FoundASystem:          ld      bc,(TargetSystemX)
 147+ C342 2A 13 80                             ld      hl,(PresentSystemX)
 148+ C345 78                                   ld      a,b
 149+ C346 BC                                   cp      h
 150+ C347 20 04                                jr      nz,.DiffCoord
 151+ C349 79                                   ld      a,c
 152+ C34A BD                                   cp      l
 153+ C34B 28 05                                jr      z,.SameCoord
 154+ C34D 3E FF        .DiffCoord:             ld      a,$FF
 155+ C34F 32 B9 C0                             ld      (system_present_or_target),a
 156+ C352 21 01 80     .SameCoord:             ld      hl,WorkingSeeds            ; found a system so save it
 157+ C355 11 EA C2                             ld      de,sd_copy_of_seed
 158+ C358 CD 02 FA                             call    galaxy_copy_seed
 159+ C35B CD C5 FA     .GetSystemName:         call    GalaxyDigramWorkings       ; we have galaxy working seed populated now
 160+ C35E 01 01 01     .Drawbox:               ld		bc,$0101
 161+ C361 11 FD BE                             ld		de,$BEFD
 162+ C364 3E C0                                ld		a,$C0
 163+ C366                                      MMUSelectLayer2
 163+ C366 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 164+ C36A CD F9 E3                             call	l2_draw_box
 165+ C36D 01 01 0A                             ld		bc,$0A01
 166+ C370 11 C0 FE                             ld		de,$FEC0
 167+ C373 CD 84 E4                             call	l2_draw_horz_line
 168+ C376 3E 0E        .ExpandStatic:          ld		a,14
 169+ C378 CD F7 8E                             call	expandTokenToString
 170+ C37B 3A 00 80     .TargetSystem:          ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 171+ C37E                                      MMUSelectGalaxyA
 171+ C37E ED 92 57    >                     nextreg GalaxyDataMMU,     a
 172+ C381 ED 4B E8 C2                          ld      bc, (SD_working_cursor)
 173+ C385               ;   call    galaxy_name_at_bc
 174+ C385                ;  cp      $FF               ; if we didn't get a
 175+ C385 21 EA C2                             ld      hl,sd_copy_of_seed
 176+ C388 11 F8 E8                             ld      de,GalaxyWorkingSeed
 177+ C38B CD 02 FA                             call    galaxy_copy_seed
 178+ C38E CD 6D F9                             call    galaxy_planet_data                              ; Geneate galaxy data from working seed
 179+ C391 CD 4D C2                             call    SD_copy_system_data
 180+ C394 11 7C 8F                             ld      de,name_expanded
 181+ C397 CD 5D C2                             call    SD_copy_to_name
 181+ C39A
 182+ C39A 11 98 13                             ld      de,hyperspace_position
 183+ C39D 21 7C 8F                             ld      hl,name_expanded
 184+ C3A0 06 0B        .StaticText:	        ld		b,11
 185+ C3A2 21 10 C0                             ld		hl,plant_boiler_text
 186+ C3A5 CD C5 C2                             call	SDM_print_boiler_text
 187+ C3A8 3A B9 C0     .CalcDistance:          ld		a,(system_present_or_target)
 188+ C3AB FE 00                                cp		0
 189+ C3AD 28 2B                                jr		z,.ZeroDistance
 190+ C3AF CD AB C2     .NotZero:               call    sdm_calc_distance
 191+ C3B2 DD 2A 35 80  .DisplayDistance:       ld      ix,(Distance)
 192+ C3B6 11 00 00                             ld      de,0
 193+ C3B9 FD 21 46 C0                          ld      iy,distance_value
 194+ C3BD CD DE 9A                             call    DispDEIXtoIY1DP
 195+ C3C0 FD E5        .AddDistUo              push    iy
 196+ C3C2 E1                                   pop     hl
 197+ C3C3 23                                   inc     hl
 198+ C3C4 11 5A C0                             ld      de,distance_uom
 199+ C3C7 CD F0 C4                             call    SDTackOnUOMtoHL
 200+ C3CA 11 60 0B                             ld      de,DistanceScreenPos
 201+ C3CD 21 46 C0                             ld      hl,distance_value
 202+ C3D0                                      MMUSelectLayer1
 202+ C3D0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 203+ C3D4 CD D7 E0                             call	l1_print_at
 204+ C3D7 C3 E7 C3                             jp      .DisplayEconomy
 205+ C3DA 3E 18        .ZeroDistance:          ld		a,24						; print literal zero dist
 206+ C3DC CD F7 8E                             call	expandTokenToString
 207+ C3DF 06 01                                ld		b,1
 208+ C3E1 21 3C C0                             ld		hl,planet_zero_dist
 209+ C3E4 CD C5 C2                             call	SDM_print_boiler_text
 210+ C3E7 3A 46 C2     .DisplayEconomy:        ld		a,(SDDisplayEconomy)
 211+ C3EA C6 0F                                add     a,TextEconomyOffset
 212+ C3EC CD F7 8E                             call	expandTokenToString
 213+ C3EF 06 01                                ld		b,1
 214+ C3F1 21 40 C0                             ld		hl,planet_economy_disp
 215+ C3F4 CD C5 C2                             call	SDM_print_boiler_text
 216+ C3F7 3A 45 C2     .DisplayGovernment:     ld		a,(SDDisplayGovernment)
 217+ C3FA C6 4B                                add		a,TextGovOffset
 218+ C3FC CD E9 8E                             call	WordIndexToAddress
 219+ C3FF 11 60 1B                             ld		de,GovernmentScreenPos
 220+ C402                                      MMUSelectLayer1
 220+ C402 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 221+ C406 CD D7 E0                             call	l1_print_at
 222+ C409 3A 47 C2     .DisplayTechLevel:      ld		a,(SDDisplayTekLevel)
 223+ C40C 11 44 C0                             ld		de,techlevel_value
 224+ C40F CD 84 C2                             call    SDM_DispAtoDE
 225+ C412 AF                                   xor     a
 226+ C413 12                                   ld      (de),a
 227+ C414 21 44 C0                             ld      hl,techlevel_value
 228+ C417 06 05                                ld      b,5
 229+ C419 CD E0 C2                             call    PlanetLeftJustifyLoop
 230+ C41C 11 60 23                             ld		de,TechLevelScreenPos
 231+ C41F                                      MMUSelectLayer1
 231+ C41F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 232+ C423 CD D7 E0                             call	l1_print_at
 233+ C426 3A 48 C2     .DisplayPopulation:     ld      a,(SDDisplayPopulation)
 234+ C429 DD 26 00                             ld      ixh,0
 235+ C42C DD 6F                                ld      ixl,a
 236+ C42E 11 00 00                             ld      de,0
 237+ C431 FD 21 80 C0                          ld      iy,population_value
 238+ C435 CD DE 9A                             call    DispDEIXtoIY1DP
 239+ C438 FD E5        .AddUoM:                push    iy
 240+ C43A E1                                   pop     hl
 241+ C43B 23                                   inc     hl
 242+ C43C 11 95 C0                             ld      de,population_uom
 243+ C43F CD F0 C4                             call    SDTackOnUOMtoHL
 244+ C442 11 60 2B                             ld      de,$2B60
 245+ C445 21 80 C0                             ld      hl,population_value
 246+ C448                                      MMUSelectLayer1
 246+ C448 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 247+ C44C CD D7 E0                             call	l1_print_at
 248+ C44F              ;SDDisplayPopulation     DB 0
 249+ C44F 3A 00 80     .DisplayPopulationType: ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 250+ C452                                      MMUSelectGalaxyA
 250+ C452 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 251+ C455 CD DC F6                             call    galaxy_get_species
 252+ C458 CD 66 C2                             call    SD_copy_species
 253+ C45B 21 FA C0                             ld		hl,SD_species
 254+ C45E 11 08 33                             ld		de,SpeciesScreenPos
 255+ C461                                      MMUSelectLayer1
 255+ C461 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 256+ C465 CD D7 E0                             call	l1_print_at
 257+ C468 2A 49 C2     .DisplayProductivity:   ld      hl,(SDDisplayProductivity)
 258+ C46B E5                                   push    hl
 259+ C46C DD E1                                pop     ix
 260+ C46E 11 00 00                             ld      de,0
 261+ C471 FD 21 9E C0                          ld      iy,productivity_value
 262+ C475 CD ED 9A                             call    DispDEIXtoIY
 263+ C478 FD E5        .AddProdUoM:            push    iy
 264+ C47A E1                                   pop     hl
 265+ C47B 23                                   inc     hl
 266+ C47C 11 B3 C0                             ld      de,productivity_uom
 267+ C47F CD F0 C4                             call    SDTackOnUOMtoHL
 268+ C482 11 A0 3B                             ld      de,$3BA0
 269+ C485 21 9E C0                             ld      hl,productivity_value
 270+ C488                                      MMUSelectLayer1
 270+ C488 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 271+ C48C CD D7 E0                             call	l1_print_at
 272+ C48F 3A 00 80     .DisplayRadius:         ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 273+ C492                                      MMUSelectGalaxyA
 273+ C492 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 274+ C495 2A 10 E9                             ld      hl,(GalaxyDisplayRadius)
 275+ C498 E5                                   push    hl
 276+ C499 DD E1                                pop     ix
 277+ C49B 11 00 00                             ld      de,0
 278+ C49E FD 21 67 C0                          ld      iy,radius_value
 279+ C4A2 CD ED 9A                             call    DispDEIXtoIY
 280+ C4A5 FD E5        .AddRadiusUoM:          push    iy
 281+ C4A7 E1                                   pop     hl
 282+ C4A8 23                                   inc     hl
 283+ C4A9 11 7C C0                             ld      de,radius_uom
 284+ C4AC CD F0 C4                             call    SDTackOnUOMtoHL
 285+ C4AF 21 67 C0                             ld      hl,radius_value
 286+ C4B2 11 A0 43                             ld      de,$43A0
 287+ C4B5                                      MMUSelectLayer1
 287+ C4B5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 288+ C4B9 CD D7 E0                             call	l1_print_at
 289+ C4BC 3A 00 80     .DisplayDescription:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 290+ C4BF                                      MMUSelectGalaxyA
 290+ C4BF ED 92 57    >                     nextreg GalaxyDataMMU,     a
 291+ C4C2 11 F8 E8     .CopySaveToGal:         ld      de,GalaxyWorkingSeed
 292+ C4C5 21 EA C2                             ld      hl,sd_copy_of_seed
 293+ C4C8 CD 02 FA                             call    galaxy_copy_seed
 294+ C4CB ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 295+ C4CF CD 6F F8                             call     GalaxyGenerateDesc
 296+ C4D2 CD 72 C2                             call    SD_copy_description
 297+ C4D5 11 08 57                             ld      de,$5708
 298+ C4D8 21 19 C1                             ld      hl,SD_planet_description
 299+ C4DB                                      MMUSelectLayer1
 299+ C4DB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 300+ C4DF CD 24 E1                             call	l1_print_at_wrap
 301+ C4E2 C9                                   ret
 302+ C4E3
 303+ C4E3              ; HL = value to add on
 304+ C4E3              ; de = Unit of Measure
 305+ C4E3 7E           SDAddUoMtoHL:           ld      a,(hl)
 306+ C4E4 FE 00                                cp      0
 307+ C4E6 28 03                                jr      z,.FoundEnd
 308+ C4E8 23                                   inc     hl
 309+ C4E9 18 F8                                jr      SDAddUoMtoHL
 310+ C4EB EB           .FoundEnd:              ex      de,hl
 311+ C4EC CD 78 C2                             call    SDCopyLoop
 312+ C4EF C9                                   ret
 313+ C4F0
 314+ C4F0              ; works on HL already being at end
 315+ C4F0              ; de = Unit of Measure
 316+ C4F0 23           SDTackOnUOMtoHL:        inc     hl
 317+ C4F1 EB                                   ex      hl,de
 318+ C4F2 CD 78 C2                             call    SDCopyLoop
 319+ C4F5 C9                                   ret
 320+ C4F6              ;
 321+ C4F6              ;
 322+ C4F6              ;    SDDisplayEconomy        DB 0
 323+ C4F6              ;SDDisplayGovernment     DB 0
 324+ C4F6              ;SDDisplayEcononmy       DB 0
 325+ C4F6              ;SDDisplayTekLevel       DB 0
 326+ C4F6              ;
 327+ C4F6              ;SDDisplayProductivity   DW 0
 328+ C4F6              ;SDDisplayRadius         DW 0
 329+ C4F6              ;SDDataLength            EQU $ - SDDisplayEconomy
 330+ C4F6              ;
 331+ C4F6
 332+ C4F6
 333+ C4F6
 334+ C4F6
 335+ C4F6
 336+ C4F6              ;; PREsent ssytem
 337+ C4F6              ;; hyperspace systrem
 338+ C4F6              ;.StatusText:
 339+ C4F6              ;	; get closet ssytem to cursor
 340+ C4F6              ;	call	get_cmdr_condition
 341+ C4F6              ;	ld		hl, ConditionNameIdx
 342+ C4F6              ;	call	getTableText
 343+ C4F6              ;	ld		de,condition_position
 344+ C4F6              ;	call	l1_print_at
 345+ C4F6              ;.DisplayFuel:
 346+ C4F6              ;	call	GetFuelLevel
 347+ C4F6              ;	ld		hl, txt_fuel_level
 348+ C4F6              ;	ld		a,(hl)
 349+ C4F6              ;	cp		'0'
 350+ C4F6              ;	jr		nz,.PrintFuel
 351+ C4F6              ;.SkipLeadingZero:
 352+ C4F6              ;	inc		hl
 353+ C4F6              ;.PrintFuel:
 354+ C4F6              ;	ld		de,fuel_position
 355+ C4F6              ;	call	l1_print_at
 356+ C4F6              ;.DisplayCash:
 357+ C4F6              ;	call	GetCash
 358+ C4F6              ;	ld		hl,txt_cash_amount
 359+ C4F6              ;	ld		de,cash_position
 360+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 361+ C4F6              ;	ld		bc,cash_position
 362+ C4F6              ;	ld		hl,txt_cash_amount
 363+ C4F6              ;.CorrectPosition:
 364+ C4F6              ;	ld		a,(hl)
 365+ C4F6              ;	cp		0
 366+ C4F6              ;	jr		z,.DoneCorrection
 367+ C4F6              ;.StillDigits:
 368+ C4F6              ;	ld		a,c
 369+ C4F6              ;	add		a,8								; its 1 character forwards
 370+ C4F6              ;	ld		c,a
 371+ C4F6              ;	inc		hl
 372+ C4F6              ;	jr		.CorrectPosition
 373+ C4F6              ;.DoneCorrection:
 374+ C4F6              ;	ld		hl,txt_cash_decimal
 375+ C4F6              ;	ld		d,b
 376+ C4F6              ;	ld		e,c
 377+ C4F6              ;	call	l1_print_at
 378+ C4F6              ;.PrintLegalStatus:
 379+ C4F6              ;	ld		a,(FugitiveInnocentStatus)
 380+ C4F6              ;	cp		0
 381+ C4F6              ;	jr		nz,.Naughty
 382+ C4F6              ;	ld		hl,WordClean
 383+ C4F6              ;	jr		.DisplayLegalStatus
 384+ C4F6              ;.Naughty:
 385+ C4F6              ;	cp		50
 386+ C4F6              ;	jr		c,.JustOffender
 387+ C4F6              ;.VeryNaughty:
 388+ C4F6              ;	ld		hl,WordFugitive
 389+ C4F6              ;	jr		.DisplayLegalStatus
 390+ C4F6              ;.JustOffender:
 391+ C4F6              ;	ld		hl,WordOffender
 392+ C4F6              ;.DisplayLegalStatus:
 393+ C4F6              ;	ld		de,legal_status_position
 394+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 395+ C4F6              ;
 396+ C4F6 C9           	ret
 397+ C4F7
# file closed: ./Menus/system_data_menu.asm
 819  C4F7                  DISPLAY "Bank ",BankMenuSystem," - Bytes free ",/D, $2000 - ($-MenuSystemAddr), " - BankMenuSystem"
 820  C4F7              ; Bank 54  ------------------------------------------------------------------------------------------------------------------------
 821  C4F7                  SLOT    MenuMarketAddr
 822  C4F7                  PAGE    BankMenuMarket
 823  C4F7                  ORG     MenuMarketAddr
 824  C000                  INCLUDE "./Menus/market_prices_menu.asm"
# file opened: ./Menus/market_prices_menu.asm
   1+ C000 4D 61 72 6B  market_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 B0 8E  market_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 7C 8F  						DW $0220,name_expanded
   4+ C018 80 0B FE 88  						DW $0B80,WordUnit
   5+ C01C B0 0B 47 8B  						DW $0BB0,WordQuantity
   6+ C020 08 13 25 8B  						DW $1308,WordProduct
   7+ C024 60 13 2D 8B  						DW $1360,WordUoM
   8+ C028 80 13 31 8B  						DW $1380,WordPrice
   9+ C02C B0 13 55 8B  						DW $13B0,WordStock
  10+ C030 E0 13 51 8B  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_market_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_market_quantity     DB "999",0
  24+ C03D 39 39 39 00  txt_market_cargo        DB "999",0
  25+ C041 00 00        market_cursor			DW  $0000
  26+ C043              market_position			equ $2008
  27+ C043              market_uom				equ	$68
  28+ C043              market_price 			equ $88
  29+ C043              market_Quantity			equ	$B0
  30+ C043              market_Cargo            equ $E0
  31+ C043              market_UomOffset		equ 46
  32+ C043 20 20 20 20  market_blank_line       DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mkt_hold_level          DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mkt_cash				DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mkt_selected_row        db  0
  36+ C075
  37+ C075              mkt_cash_position       equ $B048
  38+ C075 00 00 00...  mkt_cash_amount			DS 20
  39+ C089 20 43 72 20  mkt_cash_UoM            DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mkt_cargo_position      equ $A848
  41+ C094 00 00 00...  mkt_cargo_amount		DS 20
  42+ C0A8 20 54 6F 6E  mkt_cargo_UoM           DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ C0B3 3A 74 C0     mkt_highlight_row:      ld      a,(mkt_selected_row)
  47+ C0B6 C6 04                                add     a,4
  48+ C0B8 57                                   ld      d,a
  49+ C0B9 1E 56                                ld      e,L1InvHighlight
  50+ C0BB                                      MMUSelectLayer1
  50+ C0BB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ C0BF CD 3F E0                             call    l1_hilight_row
  52+ C0C2 C9                                   ret
  53+ C0C3              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ C0C3 3A 74 C0     mkt_lowlight_row        ld      a,(mkt_selected_row)
  55+ C0C6 C6 04                                add     a,4
  56+ C0C8 57                                   ld      d,a
  57+ C0C9 1E 07                                ld      e,L1InvLowlight
  58+ C0CB                                      MMUSelectLayer1
  58+ C0CB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  59+ C0CF CD 3F E0                             call    l1_hilight_row
  60+ C0D2 C9                                   ret
  61+ C0D3              ;----------------------------------------------------------------------------------------------------------------------------------
  62+ C0D3 CD EA C0     MKT_DispDEIXtoIY1DP:    call    MKT_DispDEIXtoIY
  63+ C0D6 FD 36 02 00                          ld (iy+2),0
  64+ C0DA FD 7E 00                             ld      a,(IY+0)
  65+ C0DD FD 77 01                             ld      (IY+1),a
  66+ C0E0 3E 2E                                ld      a,"."
  67+ C0E2 FD 77 00                             ld      (IY+0),a
  68+ C0E5 FD 23                                inc     IY
  69+ C0E7 FD 23                                inc     IY
  70+ C0E9 C9                                   ret
  71+ C0EA              ;----------------------------------------------------------------------------------------------------------------------------------
  72+ C0EA DD 22 7F C1  MKT_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  73+ C0EE ED 53 81 C1                          ld (.MKTclcn32zIX),de
  74+ C0F2 DD 21 7B C1                          ld ix,.MKTclcn32t+36
  75+ C0F6 06 09                                ld b,9
  76+ C0F8 0E 00                                ld c,0
  77+ C0FA 3E 30        .MKTclcn321:            ld a,'0'
  78+ C0FC B7                                   or a
  79+ C0FD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  80+ C100 DD 56 01                             ld d,(ix+1)
  81+ C103 2A 7F C1                             ld hl,(.MKTclcn32z)
  82+ C106 ED 52                                sbc hl,de
  83+ C108 22 7F C1                             ld (.MKTclcn32z),hl
  84+ C10B DD 5E 02                             ld e,(ix+2)
  85+ C10E DD 56 03                             ld d,(ix+3)
  86+ C111 2A 81 C1                             ld hl,(.MKTclcn32zIX)
  87+ C114 ED 52                                sbc hl,de
  88+ C116 22 81 C1                             ld (.MKTclcn32zIX),hl
  89+ C119 38 04                                jr c,.MKTclcn325
  90+ C11B 0C                                   inc c
  91+ C11C 3C                                   inc a
  92+ C11D 18 DE                                jr .MKTclcn322
  93+ C11F DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  94+ C122 DD 56 01                             ld d,(ix+1)
  95+ C125 2A 7F C1                             ld hl,(.MKTclcn32z)
  96+ C128 19                                   add hl,de
  97+ C129 22 7F C1                             ld (.MKTclcn32z),hl
  98+ C12C DD 5E 02                             ld e,(ix+2)
  99+ C12F DD 56 03                             ld d,(ix+3)
 100+ C132 2A 81 C1                             ld hl,(.MKTclcn32zIX)
 101+ C135 ED 5A                                adc hl,de
 102+ C137 22 81 C1                             ld (.MKTclcn32zIX),hl
 103+ C13A 11 FC FF                             ld de,-4
 104+ C13D DD 19                                add ix,de
 105+ C13F 0C                                   inc c
 106+ C140 0D                                   dec c
 107+ C141 28 05                                jr z,.MKTclcn323
 108+ C143 FD 77 00                             ld (iy+0),a
 109+ C146 FD 23                                inc iy
 110+ C148 10 B0        .MKTclcn323:            djnz .MKTclcn321
 111+ C14A 3A 7F C1                             ld a,(.MKTclcn32z)
 112+ C14D C6 30                                add A,'0'
 113+ C14F FD 77 00                             ld (iy+0),a
 114+ C152 FD 36 01 00                          ld (iy+1),0
 115+ C156 C9                                   ret
 116+ C157 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 116+ C15B 0A 00 00 00
 116+ C15F 64 00 00 00
 116+ C163 E8 03 00 00
 116+ C167 10 27 00 00
 117+ C16B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 117+ C16F 40 42 0F 00
 117+ C173 80 96 98 00
 117+ C177 00 E1 F5 05
 117+ C17B 00 CA 9A 3B
 118+ C17F 00 00        .MKTclcn32z             ds 2
 119+ C181 00 00        .MKTclcn32zIX           ds 2
 120+ C183              ;----------------------------------------------------------------------------------------------------------------------------------
 121+ C183              ; "DispHL, writes HL to DE address"
 122+ C183 01 F0 D8     MPM_DispHLtoDE:         ld	bc,-10000
 123+ C186 CD 9C C1                             call	MPM_Num1
 124+ C189 01 18 FC                             ld	bc,-1000
 125+ C18C CD 9C C1                             call	MPM_Num1
 126+ C18F 01 9C FF                             ld	bc,-100
 127+ C192 CD 9C C1                             call	MPM_Num1
 128+ C195 0E F6                                ld	c,-10
 129+ C197 CD 9C C1                             call	MPM_Num1
 130+ C19A 0E FF                                ld	c,-1
 131+ C19C 3E 2F        MPM_Num1:	            ld	a,'0'-1
 132+ C19E 3C           .Num2:	                inc	a
 133+ C19F 09                                   add	hl,bc
 134+ C1A0 38 FC                                jr	c,.Num2
 135+ C1A2 ED 42                                sbc	hl,bc
 136+ C1A4 12                                   ld	(de),a
 137+ C1A5 13                                   inc	de
 138+ C1A6 C9                                   ret
 139+ C1A7              ;----------------------------------------------------------------------------------------------------------------------------------
 140+ C1A7 26 00        MPM_DispAtoDE:          ld h,0
 141+ C1A9 6F                                   ld l,a
 142+ C1AA C3 83 C1                             jp MPM_DispHLtoDE
 143+ C1AD              ;----------------------------------------------------------------------------------------------------------------------------------
 144+ C1AD 26 00        MPM_DispPriceAtoDE:     ld h,0
 145+ C1AF 6F                                   ld l,a
 146+ C1B0 01 9C FF                             ld	bc,-100
 147+ C1B3 CD C3 C1                             call	.NumLeadBlank1
 148+ C1B6 0E F6                                ld	c,-10
 149+ C1B8 CD 9C C1                             call	MPM_Num1
 150+ C1BB 3E 2E                                ld		a,'.'					; we could assume preformat but
 151+ C1BD                                                  DISPLAY "TODO: optimise"
 152+ C1BD 12                                   ld		(de),a					; we can optimse that later TODO
 153+ C1BE 13                                   inc		de						; with just an inc De
 154+ C1BF 0E FF                                ld	c,-1
 155+ C1C1 18 D9                                jr		MPM_Num1
 156+ C1C3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 157+ C1C5 3C           .NumLeadBlank2:	        inc	a
 158+ C1C6 09                                   add	hl,bc
 159+ C1C7 38 FC                                jr	c,.NumLeadBlank2
 160+ C1C9 FE 30                                cp	'0'
 161+ C1CB 20 02                                jr	nz,.DontBlank
 162+ C1CD 3E 20        .Blank:                 ld	a,' '
 163+ C1CF ED 42        .DontBlank:	            sbc	hl,bc
 164+ C1D1 12                                   ld	(de),a
 165+ C1D2 13                                   inc	de
 166+ C1D3 C9                                   ret
 167+ C1D4              ;----------------------------------------------------------------------------------------------------------------------------------
 168+ C1D4 FE 00        MPM_DispQtyAtoDE:       cp	0
 169+ C1D6 28 30                                jr	z,.NoStock
 170+ C1D8 26 00                                ld h,0
 171+ C1DA 6F                                   ld l,a
 172+ C1DB 01 9C FF                             ld	bc,-100
 173+ C1DE CD F7 C1                             call	.NumLeadBlank1
 174+ C1E1 FE 20        .WasLead0:              cp      ' '
 175+ C1E3 20 09                                jr      nz,.NotHundredsZero
 176+ C1E5 0E F6                                ld	c,-10
 177+ C1E7 CD F7 C1                             call	.NumLeadBlank1
 178+ C1EA 0E FF                                ld	c,-1
 179+ C1EC 18 AE                                jr		MPM_Num1
 180+ C1EE 0E F6        .NotHundredsZero:       ld	c,-10
 181+ C1F0 CD 9C C1                             call	MPM_Num1
 182+ C1F3 0E FF                                ld	c,-1
 183+ C1F5 18 A5                                jr		MPM_Num1
 184+ C1F7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 185+ C1F9 3C           .NumLeadBlank2:	        inc	a
 186+ C1FA 09                                   add	hl,bc
 187+ C1FB 38 FC                                jr	c,.NumLeadBlank2
 188+ C1FD FE 30                                cp	'0'
 189+ C1FF 20 02                                jr	nz,.DontBlank
 190+ C201 3E 20        .Blank:                 ld	a,' '
 191+ C203 ED 42        .DontBlank:	            sbc	hl,bc
 192+ C205 12                                   ld	(de),a
 193+ C206 13                                   inc	de
 194+ C207 C9                                   ret
 195+ C208 3E 20        .NoStock:               ld	a,' '
 196+ C20A 12                                   ld	(de),a
 197+ C20B 13                                   inc	de
 198+ C20C 12                                   ld	(de),a
 199+ C20D 13                                   inc	de
 200+ C20E 3E 2D                                ld	a,'-'
 201+ C210 12                                   ld	(de),a
 202+ C211 13                                   inc de
 203+ C212 C9                                   ret
 204+ C213              ;----------------------------------------------------------------------------------------------------------------------------------
 205+ C213              MPM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C213
   2++C213              ;">print_boilder_text hl = text structure, b = message count"
   3++C213 C5           .BoilerTextLoop:        push		bc			; Save Message Count loop value
   4++C214 4E                                   ld			c,(hl)		; Get Row into b
   5++C215 23                                   inc			hl
   6++C216 46                                   ld			b,(hl)		; Get Col into b
   7++C217 23                                   inc			hl
   8++C218 5E                                   ld			e,(hl)		; Get text address Lo into E
   9++C219 23                                   inc			hl
  10++C21A 56                                   ld			d,(hl)		; Get text address Hi into E
  11++C21B 23                                   inc			hl
  12++C21C E5                                   push		hl			; Save present HL to stack as this is the address for the next message
  13++C21D EB                                   ex			de,hl		; now hl = address of text data
  14++C21E 1E FF                                ld			e,txt_status_colour
  15++C220 C5                                   push		bc
  16++C221 D1                                   pop			de
  17++C222                                      MMUSelectLayer1
  17++C222 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  18++C226 CD D7 E0                             call		l1_print_at
  19++C229 E1                                   pop			hl
  20++C22A C1                                   pop			bc
  21++C22B 10 E6                                djnz		.BoilerTextLoop
  22++C22D C9                                   ret
  23++C22E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 206+ C22E              ;----------------------------------------------------------------------------------------------------------------------------------
 207+ C22E 2A D1 84     MKT_GetCash:            ld		hl,(Cash+2)
 208+ C231 EB                                   ex      de,hl
 209+ C232 DD 2A CF 84                          ld      ix,(Cash)
 210+ C236 FD 21 75 C0                          ld		iy,mkt_cash_amount
 211+ C23A CD D3 C0                             call 	MKT_DispDEIXtoIY1DP
 212+ C23D FD E5                                push    IY
 213+ C23F D1                                   pop     de
 214+ C240 21 89 C0                             ld      hl,mkt_cash_UoM
 215+ C243 01 0B 00                             ld      bc,11
 216+ C246 ED B0                                ldir
 217+ C248 C9                                   ret
 218+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 219+ C249 11 00 00     MKT_GetCargo:   	    ld      de,0
 220+ C24C DD 21 00 00                          ld      ix,0
 221+ C250 3A D5 84                             ld      a,(CargoRunningLoad)
 222+ C253 DD 6F                                ld      ixl,a
 223+ C255 FD 21 94 C0                          ld		iy,mkt_cargo_amount
 224+ C259 CD EA C0                             call 	MKT_DispDEIXtoIY
 225+ C25C FD E5                                push    IY
 226+ C25E D1                                   pop     de
 227+ C25F 13                                   inc     de
 228+ C260 21 A8 C0                             ld      hl,mkt_cargo_UoM
 229+ C263 01 0B 00                             ld      bc,11
 230+ C266 ED B0                                ldir
 231+ C268 C9                                   ret
 232+ C269              ;----------------------------------------------------------------------------------------------------------------------------------
 233+ C269 CD 49 C2     MKT_DisplayCargo:       call	MKT_GetCargo
 234+ C26C 21 94 C0                             ld		hl,mkt_cargo_amount
 235+ C26F 11 48 A8                             ld      de,mkt_cargo_position
 236+ C272                                      MMUSelectLayer1
 236+ C272 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 237+ C276 CD D7 E0                             call	l1_print_at
 238+ C279 C9                                   ret
 239+ C27A              ;----------------------------------------------------------------------------------------------------------------------------------
 240+ C27A CD 2E C2     MKT_DisplayCash:        call	MKT_GetCash
 241+ C27D 21 75 C0                             ld		hl,mkt_cash_amount
 242+ C280 11 48 B0                             ld      de,mkt_cash_position
 243+ C283                                      MMUSelectLayer1
 243+ C283 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 244+ C287 CD D7 E0                             call	l1_print_at
 245+ C28A C9                                   ret
 246+ C28B              ;----------------------------------------------------------------------------------------------------------------------------------
 247+ C28B              ; "A = stock item number"
 248+ C28B F5           PrintMarketItem:        push     af
 249+ C28C 21 08 20                             ld      hl,market_position  ; hl = base cursor position + row number * 8
 250+ C28F 57                                   ld      d,a                 ; .
 251+ C290 1E 08                                ld      e,8                 ; .
 252+ C292 ED 30                                mul                         ; .
 253+ C294 53                                   ld      d,e                 ; .
 254+ C295 1E 00                                ld      e,0                 ; .
 255+ C297 19                                   add     hl,de               ; .
 256+ C298 22 41 C0                             ld      (market_cursor),hl  ; save in market cursor and copy to de
 257+ C29B EB                                   ex      hl,de               ; .
 258+ C29C 21 43 C0                             ld      hl,market_blank_line; hl = blank line text
 259+ C29F                                      MMUSelectLayer1             ; print blank line (hl) and position DE
 259+ C29F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 260+ C2A3 CD D7 E0                             call	l1_print_at         ; .
 261+ C2A6 F1                                   pop     af
 262+ C2A7 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 263+ C2AB FD 21 D6 84                          ld      iy,CargoTonnes
 264+ C2AF 1E 08                                ld		e,8
 265+ C2B1 57                                   ld		d,a
 266+ C2B2 ED 30                                mul
 267+ C2B4 DD 19                                add		ix,de				; Move down a row ix += a * 8
 268+ C2B6 16 00                                ld      d,0
 269+ C2B8 5F                                   ld      e,a
 270+ C2B9 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 271+ C2BB              .GetName:               MMUSelectStockTable
 271+ C2BB ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 272+ C2BF DD 7E 00                             ld		a,(ix+0)
 273+ C2C2 21 FC 8C                             ld		hl,WordIdx
 274+ C2C5 CD 57 88                             call	getTableText
 275+ C2C8 ED 5B 41 C0                          ld		de,(market_cursor)
 276+ C2CC                                      MMUSelectLayer1
 276+ C2CC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 277+ C2D0 CD D7 E0                             call	l1_print_at
 278+ C2D3              .GetUom                 MMUSelectStockTable
 278+ C2D3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 279+ C2D7 DD 7E 07                             ld		a,(ix+7)
 280+ C2DA C6 2E                                add		a,market_UomOffset
 281+ C2DC 21 FC 8C                             ld		hl,WordIdx
 282+ C2DF CD 57 88                             call	getTableText
 283+ C2E2 ED 5B 41 C0                          ld		de,(market_cursor)
 284+ C2E6 1E 68                                ld		e,market_uom
 285+ C2E8                                      MMUSelectLayer1
 285+ C2E8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 286+ C2EC CD D7 E0                             call	l1_print_at
 287+ C2EF              .GetPrice:              MMUSelectStockTable
 287+ C2EF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 288+ C2F3 DD 7E 02                             ld		a,(ix+2)
 289+ C2F6 11 34 C0                             ld		de,txt_market_amount
 290+ C2F9 CD AD C1                             call	MPM_DispPriceAtoDE
 291+ C2FC 21 34 C0                             ld		hl,txt_market_amount
 292+ C2FF ED 5B 41 C0                          ld		de,(market_cursor)
 293+ C303 1E 88                                ld		e,market_price
 294+ C305                                      MMUSelectLayer1
 294+ C305 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 295+ C309 CD D7 E0                             call	l1_print_at
 296+ C30C              .GetQty:                MMUSelectStockTable
 296+ C30C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 297+ C310 DD 7E 01                             ld		a,(ix+1)
 298+ C313 11 39 C0                             ld		de,txt_market_quantity
 299+ C316 CD D4 C1                             call	MPM_DispQtyAtoDE
 300+ C319 21 39 C0                             ld		hl,txt_market_quantity
 301+ C31C ED 5B 41 C0                          ld		de,(market_cursor)
 302+ C320 1E B0                                ld		e,market_Quantity
 303+ C322                                      MMUSelectLayer1
 303+ C322 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 304+ C326 CD D7 E0                             call	l1_print_at
 305+ C329 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 306+ C32C 11 3D C0                             ld      de,txt_market_cargo
 307+ C32F CD D4 C1                             call	MPM_DispQtyAtoDE
 308+ C332 21 3D C0                             ld      hl,txt_market_cargo
 309+ C335 ED 5B 41 C0                          ld      de,(market_cursor)
 310+ C339 1E E0                                ld      e,market_Cargo
 311+ C33B                                      MMUSelectLayer1
 311+ C33B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 312+ C33F CD D7 E0                             call	l1_print_at
 313+ C342 C9                                   ret
 314+ C343
 315+ C343              draw_market_prices_menu:InitNoDoubleBuffer
 315+ C343             >                            MMUSelectLayer1
 315+ C343 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 315+ C347 CD 8F E0    >                            call	l1_cls
 315+ C34A 3E 07       >                            ld		a,7
 315+ C34C CD AA E0    >                            call	l1_attr_cls_to_a
 315+ C34F             >                            MMUSelectLayer2
 315+ C34F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 315+ C353 CD 0A E0    >                            call    asm_l2_double_buffer_off
 315+ C356 CD 0E E2    >                            call	l2_cls	; Get some space
 315+ C359             >                            MMUSelectSpriteBank
 315+ C359 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 315+ C35D CD 6E E5    >                            call    sprite_cls_cursors
 316+ C360 3E 20                                ld      a,$20
 317+ C362 32 7E 7F                             ld      (MenuIdMax),a
 318+ C365 01 01 01     .Drawbox:               ld		bc,$0101
 319+ C368 11 FD BE                             ld		de,$BEFD
 320+ C36B 3E C0                                ld		a,$C0
 321+ C36D                                      MMUSelectLayer2
 321+ C36D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 322+ C371 CD F9 E3                             call	l2_draw_box
 323+ C374 01 01 0A                             ld		bc,$0A01
 324+ C377 11 C0 FE                             ld		de,$FEC0
 325+ C37A CD 84 E4                             call	l2_draw_horz_line
 326+ C37D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 327+ C380 11 C0 50                             ld		de,$50C0
 328+ C383 CD 84 E4                             call	l2_draw_horz_line
 329+ C386 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 330+ C389 11 C0 18                             ld		de,$18C0
 331+ C38C CD 84 E4                             call	l2_draw_horz_line
 332+ C38F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 333+ C392 11 C0 28                             ld		de,$28C0
 334+ C395 CD 84 E4                             call	l2_draw_horz_line
 335+ C398 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 336+ C39B 11 C0 28                             ld		de,$28C0
 337+ C39E CD 84 E4                             call	l2_draw_horz_line
 338+ C3A1 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 339+ C3A4 11 C0 18                             ld		de,$18C0
 340+ C3A7 CD 84 E4                             call	l2_draw_horz_line
 341+ C3AA 3A 00 80     .StaticText:	        ld      a,(Galaxy)
 342+ C3AD                                      MMUSelectGalaxyA
 342+ C3AD ED 92 57    >                     nextreg GalaxyDataMMU,     a
 343+ C3B0 3E 19                                ld		a,25
 344+ C3B2 CD F7 8E                             call	expandTokenToString
 345+ C3B5 CD 7A F6                             call	GetDigramGalaxySeed
 346+ C3B8 06 09                                ld		b,9
 347+ C3BA 21 10 C0                             ld		hl,market_boiler_text
 348+ C3BD CD 13 C2                             call	MPM_print_boiler_text
 349+ C3C0              ; Generate the market list on screen
 350+ C3C0 3E 00        .DisplayPrices:         ld		a,0
 351+ C3C2 21 08 20                             ld		hl,market_position          ; set current cursor position on screen
 352+ C3C5 22 41 C0                             ld		(market_cursor),hl          ; .
 353+ C3C8 F5           MarketLoop:	            push	af
 354+ C3C9 CD 8B C2                             call	PrintMarketItem             ; display a single market item
 355+ C3CC F1                                   pop		af
 356+ C3CD 3C                                   inc		a
 357+ C3CE FE 11                                cp		17
 358+ C3D0 20 F6                                jr		nz,MarketLoop
 359+ C3D2 AF           .InitialHighlight:      xor     a
 360+ C3D3 32 74 C0                             ld      (mkt_selected_row),a        ; assume on row zero
 361+ C3D6 CD B3 C0                             call    mkt_highlight_row
 362+ C3D9 21 64 C0     .DisCargo:              ld      hl,mkt_hold_level
 363+ C3DC 11 10 A8                             ld      de,$A810
 364+ C3DF                                      MMUSelectLayer1
 364+ C3DF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 365+ C3E3 CD D7 E0                             call	l1_print_at
 366+ C3E6 CD 69 C2                             call    MKT_DisplayCargo
 367+ C3E9 21 6C C0     .DisCash:               ld      hl,mkt_cash
 368+ C3EC 11 10 B0                             ld      de,$B010
 369+ C3EF                                      MMUSelectLayer1
 369+ C3EF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 370+ C3F3 CD D7 E0                             call	l1_print_at
 371+ C3F6 CD 7A C2                             call    MKT_DisplayCash
 372+ C3F9 C9                                   ret
 373+ C3FA
 374+ C3FA
 375+ C3FA              ;----------------------------------------------------------------------------------------------------------------------------------
 376+ C3FA              ; Handles all the input whilst in the market menu
 377+ C3FA              loop_market_menu:       MacroIsKeyPressed c_Pressed_CursorUp
 377+ C3FA 3E 4A       >                        ld      a,c_Pressed_CursorUp
 377+ C3FC             >                        MMUSelectKeyboard
 377+ C3FC ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 377+ C400 CD A2 E1    >                        call    is_key_pressed
 378+ C403 CC 2B C4                             call    z,mkt_UpPressed
 379+ C406                                      MacroIsKeyPressed c_Pressed_CursorDown
 379+ C406 3E 4C       >                        ld      a,c_Pressed_CursorDown
 379+ C408             >                        MMUSelectKeyboard
 379+ C408 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 379+ C40C CD A2 E1    >                        call    is_key_pressed
 380+ C40F CC 3C C4                             call    z,mkt_DownPressed
 381+ C412                                      MacroIsKeyPressed c_Pressed_RollLeft
 381+ C412 3E 08       >                        ld      a,c_Pressed_RollLeft
 381+ C414             >                        MMUSelectKeyboard
 381+ C414 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 381+ C418 CD A2 E1    >                        call    is_key_pressed
 382+ C41B CC 5A C4                             call    z,mkt_LeftPressed
 383+ C41E                                      MacroIsKeyPressed c_Pressed_RollRight
 383+ C41E 3E 0A       >                        ld      a,c_Pressed_RollRight
 383+ C420             >                        MMUSelectKeyboard
 383+ C420 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 383+ C424 CD A2 E1    >                        call    is_key_pressed
 384+ C427 CC 9D C4                             call    z,mkt_RightPressed
 385+ C42A C9                                   ret
 386+ C42B
 387+ C42B              ;----------------------------------------------------------------------------------------------------------------------------------
 388+ C42B 3A 74 C0     mkt_UpPressed:          ld      a,(mkt_selected_row)
 389+ C42E FE 00                                cp      0
 390+ C430 C8                                   ret     z
 391+ C431 CD C3 C0                             call    mkt_lowlight_row
 392+ C434 21 74 C0                             ld      hl,mkt_selected_row
 393+ C437 35                                   dec     (hl)
 394+ C438 CD B3 C0                             call    mkt_highlight_row
 395+ C43B C9                                   ret
 396+ C43C              ;----------------------------------------------------------------------------------------------------------------------------------
 397+ C43C 3E 4C        mkt_DownPressed:        ld      a,c_Pressed_CursorDown
 398+ C43E                                      MMUSelectKeyboard
 398+ C43E ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 399+ C442 CD 7D E1                             call    get_key_a_state
 400+ C445 FE 01                                cp      1
 401+ C447 28 00                                jr      z,.ItsOK
 402+ C449 3A 74 C0     .ItsOK:                 ld      a,(mkt_selected_row)
 403+ C44C FE 10                                cp      16
 404+ C44E C8                                   ret     z
 405+ C44F CD C3 C0                             call    mkt_lowlight_row
 406+ C452 21 74 C0                             ld      hl,mkt_selected_row
 407+ C455 34                                   inc     (hl)
 408+ C456 CD B3 C0                             call    mkt_highlight_row
 409+ C459 C9                                   ret
 410+ C45A              ;----------------------------------------------------------------------------------------------------------------------------------
 411+ C45A 3A 74 C0     mkt_LeftPressed:        ld      a,(mkt_selected_row)
 412+ C45D 21 D6 84                             ld      hl,CargoTonnes
 413+ C460 ED 31                                add     hl,a
 414+ C462 7E                                   ld      a,(hl)
 415+ C463 FE 00                                cp      0
 416+ C465 C8                                   ret     z
 417+ C466 35                                   dec     (hl)
 418+ C467 DD 21 00 E0                          ld      ix,StockFood
 419+ C46B 3A 74 C0                             ld      a,(mkt_selected_row)
 420+ C46E 16 08                                ld      d,8
 421+ C470 5F                                   ld      e,a
 422+ C471 ED 30                                mul
 423+ C473 DD 19                                add     ix,de
 424+ C475                                      MMUSelectStockTable
 424+ C475 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 425+ C479 DD 34 01                             inc     (ix+1)
 426+ C47C DD 7E 07                             ld      a,(ix+7)
 427+ C47F FE 30                                cp      48
 428+ C481 20 04                                jr      nz,.UnderATonne
 429+ C483 21 D5 84                             ld      hl,CargoRunningLoad
 430+ C486 35                                   dec     (hl)            ; We need to cosider UoM
 431+ C487 DD 7E 02     .UnderATonne:           ld      a,(ix+2)
 432+ C48A 16 00                                ld      d,0
 433+ C48C 5F                                   ld      e,a
 434+ C48D CD FF 8F                             call    addDEtoCash
 435+ C490                                      ; DO ADD CASH
 436+ C490 3A 74 C0                             ld      a,(mkt_selected_row)
 437+ C493 CD 8B C2                             call    PrintMarketItem
 438+ C496 CD 69 C2                             call    MKT_DisplayCargo
 439+ C499 CD 7A C2                             call    MKT_DisplayCash
 440+ C49C C9                                   ret
 441+ C49D              ;----------------------------------------------------------------------------------------------------------------------------------
 442+ C49D              mkt_RightPressed:       MMUSelectStockTable
 442+ C49D ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 443+ C4A1 DD 21 00 E0                          ld      ix,StockFood
 444+ C4A5 3A 74 C0                             ld      a,(mkt_selected_row)
 445+ C4A8 16 08                                ld      d,8
 446+ C4AA 5F                                   ld      e,a
 447+ C4AB ED 30                                mul
 448+ C4AD DD 19                                add     ix,de
 449+ C4AF 4F                                   ld      c,a
 450+ C4B0 DD 7E 01                             ld      a,(ix+1)
 451+ C4B3 FE 00                                cp      0
 452+ C4B5 C8                                   ret     z
 453+ C4B6 DD 7E 07     .CheckUoM:              ld      a,(ix+7)
 454+ C4B9 FE 30                                cp      48
 455+ C4BB 28 0F                                jr      z,.CheckCargo                       ; cargo is in tonnes
 456+ C4BD 3A 74 C0     .NotTonnage:            ld      a,(mkt_selected_row)
 457+ C4C0 21 D6 84                             ld      hl,CargoTonnes
 458+ C4C3 ED 31                                add     hl,a
 459+ C4C5 7E                                   ld      a,(hl)
 460+ C4C6 FE C8                                cp      200
 461+ C4C8 C8                                   ret     z                                   ; else its a 200 UoM limit
 462+ C4C9 C3 D2 C4                             jp      .CheckCash
 463+ C4CC 2A D4 84     .CheckCargo:            ld      hl,(CargoBaySize)                   ; = h = runningload l = cargo bay size
 464+ C4CF 7C                                   ld      a,h
 465+ C4D0 BD                                   cp      l
 466+ C4D1 C8                                   ret     z                                   ; return if we have already maxed out
 467+ C4D2 2A D1 84     .CheckCash:             ld      hl,(Cash+2)
 468+ C4D5 7C                                   ld      a,h
 469+ C4D6 B5                                   or      l
 470+ C4D7 20 0F                                jr      nz,.MoreThanRequired
 471+ C4D9 2A CF 84                             ld      hl,(Cash)
 472+ C4DC 7C                                   ld      a,h
 473+ C4DD FE 00                                cp      0
 474+ C4DF 20 07                                jr      nz,.MoreThanRequired
 475+ C4E1 DD 7E 02                             ld      a,(ix+2)
 476+ C4E4 BD                                   cp      l
 477+ C4E5 30 01                                jr      nc,.MoreThanRequired
 478+ C4E7 C9                                   ret                         ; Insufficient Funds
 479+ C4E8 19           .MoreThanRequired:      add     hl,de
 480+ C4E9 7C                                   ld      a,h
 481+ C4EA B3                                   or      e
 482+ C4EB                                      ; check cash can we buy, and cargo capacity
 483+ C4EB DD 35 01                             dec     (ix+1)
 484+ C4EE 3A 74 C0                             ld      a,(mkt_selected_row)
 485+ C4F1 21 D6 84                             ld      hl,CargoTonnes
 486+ C4F4 ED 31                                add     hl,a
 487+ C4F6 34                                   inc     (hl)
 488+ C4F7 DD 7E 07                             ld      a,(ix+7)
 489+ C4FA 47                                   ld      b,a
 490+ C4FB FE 30                                cp      48
 491+ C4FD 20 05                                jr      nz,.UnderOneTonne
 492+ C4FF 78                                   ld      a,b
 493+ C500 21 D5 84                             ld      hl,CargoRunningLoad
 494+ C503 34                                   inc     (hl)
 495+ C504 DD 7E 02     .UnderOneTonne:         ld      a,(ix+2)
 496+ C507 16 00                                ld      d,0
 497+ C509 5F                                   ld      e,a
 498+ C50A CD 12 90                             call    subDEfromCash
 499+ C50D 3A 74 C0                             ld      a,(mkt_selected_row)
 500+ C510 CD 8B C2                             call    PrintMarketItem
 501+ C513 CD 69 C2                             call    MKT_DisplayCargo
 502+ C516 CD 7A C2                             call    MKT_DisplayCash
 503+ C519 C9                                   ret
# file closed: ./Menus/market_prices_menu.asm
 825  C51A                  DISPLAY "Bank ",BankMenuMarket," - Bytes free ",/D, $2000 - ($-MenuMarketAddr), " - BankMenuMarket"
 826  C51A              ; Bank 55  ------------------------------------------------------------------------------------------------------------------------
 827  C51A                  SLOT    StockTableAddr
 828  C51A                  PAGE    BankStockTable
 829  C51A                  ORG     StockTableAddr
 830  E000                  INCLUDE "./Tables/stock_table.asm"
# file opened: ./Tables/stock_table.asm
   1+ E000
   2+ E000
   3+ E000              ;                       Can Buy
   4+ E000              ;                       computed row on screen considering what stock is visible
   5+ E000              ;                       Show
   6+ E000              ;                       Tech Level
   7+ E000              ;                       Price
   8+ E000              ;                       Name
   9+ E000              ;                       TypeId
  10+ E000
  11+ E000
  12+ E000              ;char name[16];
  13+ E000              ;current_quantity;
  14+ E000              ;current_price;
  15+ E000              ;base_price;
  16+ E000              ;eco_adjust;
  17+ E000              ;base_quantity;
  18+ E000              ;mask;
  19+ E000              ;units;
  20+ E000
  21+ E000              ;						nam	currr   CR  Ecadj  Qty  Msk  UoM
  22+ E000 20 00 00 13  StockFood			DB  32,  0, 0,  19, -2,      6, $01, 48  ; 01
  22+ E004 FE 06 01 30
  23+ E008 21 00 00 14  StockTextiles		DB	33,  0, 0,  20, -1,     10, $03, 48  ; 02
  23+ E00C FF 0A 03 30
  24+ E010 22 00 00 41  StockRadioactives	DB  34,  0, 0,  65, -3,      2, $07, 48  ; 03
  24+ E014 FD 02 07 30
  25+ E018 23 00 00 28  StockSlaves			DB  35,  0, 0,  40, -5,    226, $1F, 48  ; 04
  25+ E01C FB E2 1F 30
  26+ E020 24 00 00 53  StockLiquorWines	DB  36,  0, 0,  83, -5,    251, $0F, 48  ; 05
  26+ E024 FB FB 0F 30
  27+ E028 25 00 00 C4  StockLuxuries		DB  37,  0, 0, 196,  8,     54, $03, 48  ; 06
  27+ E02C 08 36 03 30
  28+ E030 26 00 00 EB  StockNarcotics		DB  38,  0, 0, 235, 29,      8, $78, 48  ; 07
  28+ E034 1D 08 78 30
  29+ E038 19 00 00 9A  StockComputers		DB  25,  0, 0, 154, 14,     56, $03, 48  ; 08
  29+ E03C 0E 38 03 30
  30+ E040 27 00 00 75  StockMachinery		DB  39,  0, 0, 117,  6,     40, $07, 48  ; 09
  30+ E044 06 28 07 30
  31+ E048 28 00 00 4E  StockAlloys			DB  40,  0, 0,  78,  1,     17, $1F, 48  ; 11
  31+ E04C 01 11 1F 30
  32+ E050 29 00 00 7C  StockFirearms   	DB  41,  0, 0, 124, 13,     29, $07, 48  ; 12
  32+ E054 0D 1D 07 30
  33+ E058 2A 00 00 B0  StockFurs       	DB  42,  0, 0, 176, -9,    220, $3F, 48  ; 13
  33+ E05C F7 DC 3F 30
  34+ E060 2B 00 00 20  StockMinerals   	DB  43,  0, 0,  32, -1,     53, $03, 48  ; 14
  34+ E064 FF 35 03 30
  35+ E068 2C 00 00 61  StockGold       	DB  44,  0, 0,  97, -1,     66, $07, 49  ; 15
  35+ E06C FF 42 07 31
  36+ E070 2D 00 00 AB  StockPlatinum   	DB  45,  0, 0, 171, -2,     55, $1F, 49  ; 16
  36+ E074 FE 37 1F 31
  37+ E078 2E 00 00 2D  StockGemStones 		DB  46,  0, 0,  45, -1,    250, $0F, 50  ; 17
  37+ E07C FF FA 0F 32
  38+ E080 2F 00 00 35  StockAlienItems		DB  47,  0, 0,  53, 15,    192, $07, 48  ; 18
  38+ E084 0F C0 07 30
  39+ E088
  40+ E088
  41+ E088              ;.QQ23	\Prxs -> &3DA6 \  Market prices info
  42+ E088              ;\ base_price, gradient sign+5bits, base_quantity, mask, units 2bits
  43+ E088              ;13 82 06 01			EQUD &01068213 \ Food
  44+ E088              ;14 81 0A 03 		EQUD &030A8114 \ Textiles
  45+ E088              ;41 83 02 07 		EQUD &07028341 \ Radioactives
  46+ E088              ;28 85 E2 1F 		EQUD &1FE28528 \ Slaves
  47+ E088              ;53 85 FB 0F 		EQUD &0FFB8553 \ Liquor/Wines
  48+ E088              ;C4 08 36 03 		EQUD &033608C4 \ Luxuries
  49+ E088              ;EB 1D 08 78 		EQUD &78081DEB \ Narcotics
  50+ E088              ;9A 0E 38 03 		EQUD &03380E9A \ Computers
  51+ E088              ;75 06 28 07 		EQUD &07280675 \ Machinery
  52+ E088              ;4E 01 11 1F 		EQUD &1F11014E \ Alloys
  53+ E088              ;7C 0D 1D 07 		EQUD &071D0D7C \ Firearms
  54+ E088              ;B0 89 DC 3F 		EQUD &3FDC89B0 \ Furs
  55+ E088              ;20 81 35 03 		EQUD &03358120 \ Minerals
  56+ E088              ;61 A1 42 07 		EQUD &0742A161 \ Gold
  57+ E088              ;AB A2 37 1F 		EQUD &1F37A2AB \ Platinum
  58+ E088              ;2D C1 FA 0F 		EQUD &0FFAC12D \ Gem-Stones
  59+ E088              ;35 0F C0 07 		EQUD &07C00F35 \ Alien Items
  60+ E088
  61+ E088
  62+ E088              FoodIndex               EQU 01
  63+ E088              TextilesIndex           EQU 02
  64+ E088              RadioactivesIndex       EQU 03
  65+ E088              SlavesIndex             EQU 04
  66+ E088              LiquorWinesIndex        EQU 05
  67+ E088              LuxuriesIndex           EQU 06
  68+ E088              NarcoticsIndex          EQU 07
  69+ E088              ComputersIndex          EQU 08
  70+ E088              MachineryIndex          EQU 09
  71+ E088              AlloysIndex             EQU 10
  72+ E088              FirearmsIndex           EQU 11
  73+ E088              FursIndex               EQU 12
  74+ E088              MineralsIndex           EQU 13
  75+ E088              GoldIndex               EQU 14
  76+ E088              PlatinumIndex           EQU 15
  77+ E088              GemStonesIndex          EQU 16
  78+ E088              AlienItemsIndex		    equ 17
  79+ E088              StockListLen		    equ	18
  80+ E088
  81+ E088 00 E0 08 E0  StockItemTable		    DW 	StockFood,  StockTextiles,	   StockRadioactives
  81+ E08C 10 E0
  82+ E08E 18 E0 20 E0                          DW 	StockSlaves, StockLiquorWines, StockLuxuries
  82+ E092 28 E0
  83+ E094 30 E0 38 E0                          DW 	StockNarcotics, StockComputers, StockMachinery
  83+ E098 40 E0
  84+ E09A 48 E0 50 E0                          DW	StockAlloys, StockFirearms, StockFurs
  84+ E09E 58 E0
  85+ E0A0 60 E0 68 E0                          DW  StockMinerals, StockGold, StockPlatinum
  85+ E0A4 70 E0
  86+ E0A6 78 E0 80 E0                          DW  StockGemStones, StockAlienItems
  87+ E0AA
  88+ E0AA 06 FF        generate_stock_market:  ld		b,$FF				; so the first iteration puts it at 0
  89+ E0AC CD 5D 85                             call	copy_galaxy_to_system
  90+ E0AF DD 21 F8 DF                          ld		ix,StockFood-8		; start 8 bytes before index as first add will shift
  91+ E0B3 11 08 00     .generate_stock_loop:   ld		de,8
  92+ E0B6 DD 19                                add		ix,de				; Move down a row
  93+ E0B8 04                                   inc		b
  94+ E0B9 DD 4E 03     .CalcPrice:	            ld		c,(ix+3);			; c = base price
  95+ E0BC 3A FF 7F                             ld		a,(RandomMarketSeed)
  96+ E0BF DD A6 06                             and		(ix+6)				; and with market mask
  97+ E0C2 81                                   add		a,c
  98+ E0C3 4F                                   ld		c,a					; c = base + rand & market mask
  99+ E0C4 3A 2E 80                             ld		a,(DisplayEcononmy)	; d= economy
 100+ E0C7 57                                   ld		d,a
 101+ E0C8 DD 7E 04                             ld		a,(ix+4)
 102+ E0CB 5F                                   ld		e,a					; e  = economy adjust
 103+ E0CC CB 7B                                bit		7,e
 104+ E0CE 20 04                                jr		nz,.PosMul			; it could be negative and we onnly want
 105+ E0D0              ;.NegMul:						; e reg from mulitply not a 2'c 16 bit word
 106+ E0D0 7B                                   ld		a,e
 107+ E0D1 ED 44                                neg
 108+ E0D3 5F                                   ld		e,a
 109+ E0D4              .PosMul:
 110+ E0D4 7B                                   ld		a,e
 111+ E0D5 ED 44                                neg
 112+ E0D7 5F                                   ld		e,a
 113+ E0D8 ED 30                                mul
 114+ E0DA 79                                   ld		a,c
 115+ E0DB 83                                   add		a,e
 116+ E0DC CB 27                                sla		a
 117+ E0DE CB 27                                sla		a					; Multply price by 4
 118+ E0E0 DD 77 02                             ld		(ix+2),a			; Now have set price
 119+ E0E3 DD 4E 05     .CalcQty:	            ld		c,(ix+5);			; c = base price
 120+ E0E6 3A FF 7F                             ld		a,(RandomMarketSeed)
 121+ E0E9 DD A6 06                             and		(ix+6)				; and with market mask
 122+ E0EC 81                                   add		a,c
 123+ E0ED 4F                                   ld		c,a					; c = base + rand & market mask
 124+ E0EE 3A 2E 80                             ld		a,(DisplayEcononmy)	; d= economy
 125+ E0F1 57                                   ld		d,a
 126+ E0F2 DD 7E 04                             ld		a,(ix+4)
 127+ E0F5 5F                                   ld		e,a					; e  = economy adjust
 128+ E0F6 CB 7B                                bit		7,e
 129+ E0F8 20 04                                jr		nz,.PosQtyMul			; it could be negative and we onnly want
 130+ E0FA 7B           .NegQtyMul:				ld		a,e		; e reg from mulitply not a 2'c 16 bit word
 131+ E0FB ED 44                                neg
 132+ E0FD 5F                                   ld		e,a
 133+ E0FE 7B           .PosQtyMul:             ld		a,e
 134+ E0FF ED 44                                neg
 135+ E101 5F                                   ld		e,a
 136+ E102 ED 30                                mul
 137+ E104 79                                   ld		a,c
 138+ E105 93                                   sub		e
 139+ E106 DD 77 01                             ld		(ix+1),a			; Now have set quanity
 140+ E109 78                                   ld		a,b
 141+ E10A FE 11                                cp		AlienItemsIndex
 142+ E10C 20 A5                                jr		nz,.generate_stock_loop
 143+ E10E AF                                   xor		a
 144+ E10F DD 77 01                             ld		(ix+1),a			; Now have set quanity of alient items to always 0 in stock
 145+ E112 C9                                   ret
 146+ E113
# file closed: ./Tables/stock_table.asm
 831  E113                  DISPLAY "Bank ",BankStockTable," - Bytes free ",/D, $2000 - ($-StockTableAddr), " - BankStockTable"
 832  E113              ; Bank 56  ------------------------------------------------------------------------------------------------------------------------
 833  E113                  SLOT    CommanderAddr
 834  E113                  PAGE    BankCommander
 835  E113                  ORG     CommanderAddr, BankCommander
 836  E000                  INCLUDE "./Commander/commanderData.asm"
# file opened: ./Commander/commanderData.asm
   1+ E000 43 4F 4D 4D  commanderPage           DB  "COMMANDERPAGE 56"
   1+ E004 41 4E 44 45
   1+ E008 52 50 41 47
   1+ E00C 45 20 35 36
   2+ E010 4A 41 4D 45  defaultName		        DB	"JAMESON",0
   2+ E014 53 4F 4E 00
   3+ E018 10 0F 11 00  defaultStock	        DB $10, $0F, $11, $00, $03, $1C,$0E, $00, $00, $0A, $00, $11,$3A, $07, $09, $08, $00
   3+ E01C 03 1C 0E 00
   3+ E020 00 0A 00 11
   3+ E024 3A 07 09 08
   3+ E028 00
   4+ E029 4A 5A 48 02  defaultSeeds	        DB $4a, $5a, $48, $02, $53, $b7
   4+ E02D 53 B7
   5+ E02F 14           defaultHomeX	        DB $14
   6+ E030 AD           defaultHomeY	        DB $AD
   7+ E031 44 65 66 61  defaultSaveName         DB "Default.SAV",0,0,0,0
   7+ E035 75 6C 74 2E
   7+ E039 53 41 56 00
   7+ E03D 00 00 00
   8+ E040
   9+ E040              ; Gun and cabin temps are not saved as can only be saved in dock
  10+ E040              ; Note Can only save whilst docked
  11+ E040 43 4F 4D 4D  SaveCommanderHeader     DB  "COMMANDERSAVE..."
  11+ E044 41 4E 44 45
  11+ E048 52 53 41 56
  11+ E04C 45 2E 2E 2E
  12+ E050 00 00 00...  SaveFilename            DS  15
  13+ E05F 00 00 00...  SaveCommanderName       DS  15
  14+ E06E 00 00 00...  SaveSeeds               DS  06
  15+ E074 00 00 00...  SaveStockAvaliabiliy    DS  17
  16+ E085 00 00 00...  SaveCargo               DS  16
  17+ E095 00 00 00...  SaveEquipmentFitted     DS  EQ_ITEM_COUNT
  18+ E0AF 00 00 00 00  SaveLaserType           DS  4
  19+ E0B3 00 00 00 00  SaveLaserDamagedFlag    DS  4
  20+ E0B7 00           SavePresentSystemX      DS  1
  21+ E0B8 00           SavePresentSystemY      DS  1
  22+ E0B9 00           SaveTargetSystemX       DS  1
  23+ E0BA 00           SaveTargetSystemY       DS  1
  24+ E0BB 00 00 00 00  SaveCash                DS  4
  25+ E0BF 00           SaveFuel                DS  1
  26+ E0C0 00           SaveFugitiveInnocentStatus DS 1
  27+ E0C1 00 00        SaveKillTally           DS  2
  28+ E0C3 00           SaveOuterHyperCount     DS  1
  29+ E0C4 00           SaveInnerHyperCount     DS  1
  30+ E0C5 00           SaveForeShield          DS  1
  31+ E0C6 00           SaveAftShield           DS  1
  32+ E0C7 00           SavePlayerEnergy        DS  1
  33+ E0C8 00           SaveCargoBaySize        DS  1
  34+ E0C9 00           SaveFuelScoopStatus     DS  1
  35+ E0CA              SaveSize                equ $ - SaveCommanderHeader
  36+ E0CA
  37+ E0CA              copyCommanderToSave:    ldCopyStringLen CommanderName,      SaveCommanderName, 15
  37+ E0CA 21 F8 81    >                        ld      hl,CommanderName
  37+ E0CD 11 5F E0    >                        ld      de, SaveCommanderName
  37+ E0D0 01 0F 00    >                        ld      bc, 15
  37+ E0D3 ED B0       >                        ldir
  38+ E0D5                                      ldCopyStringLen GalaxySeeds,        SaveSeeds, 6
  38+ E0D5 21 0D 80    >                        ld      hl,GalaxySeeds
  38+ E0D8 11 6E E0    >                        ld      de, SaveSeeds
  38+ E0DB 01 06 00    >                        ld      bc, 6
  38+ E0DE ED B0       >                        ldir
  39+ E0E0                                      ldCopyStringLen StockAvaliabiliy,   SaveStockAvaliabiliy, 16
  39+ E0E0 21 EE 7F    >                        ld      hl,StockAvaliabiliy
  39+ E0E3 11 74 E0    >                        ld      de, SaveStockAvaliabiliy
  39+ E0E6 01 10 00    >                        ld      bc, 16
  39+ E0E9 ED B0       >                        ldir
  40+ E0EB                                      ldCopyStringLen CargoTonnes,        SaveCargo, 16
  40+ E0EB 21 D6 84    >                        ld      hl,CargoTonnes
  40+ E0EE 11 85 E0    >                        ld      de, SaveCargo
  40+ E0F1 01 10 00    >                        ld      bc, 16
  40+ E0F4 ED B0       >                        ldir
  41+ E0F6                                      ldCopyStringLen EquipmentFitted,    SaveEquipmentFitted, EQ_ITEM_COUNT
  41+ E0F6 21 EE 84    >                        ld      hl,EquipmentFitted
  41+ E0F9 11 95 E0    >                        ld      de, SaveEquipmentFitted
  41+ E0FC 01 1A 00    >                        ld      bc, EQ_ITEM_COUNT
  41+ E0FF ED B0       >                        ldir
  42+ E101                                      ldCopyStringLen LaserType,          SaveLaserType, 4
  42+ E101 21 E6 84    >                        ld      hl,LaserType
  42+ E104 11 AF E0    >                        ld      de, SaveLaserType
  42+ E107 01 04 00    >                        ld      bc, 4
  42+ E10A ED B0       >                        ldir
  43+ E10C                                      ldCopyStringLen LaserDamagedFlag,   SaveLaserDamagedFlag, 4
  43+ E10C 21 EA 84    >                        ld      hl,LaserDamagedFlag
  43+ E10F 11 B3 E0    >                        ld      de, SaveLaserDamagedFlag
  43+ E112 01 04 00    >                        ld      bc, 4
  43+ E115 ED B0       >                        ldir
  44+ E117                                      ldCopy2Byte     PresentSystemX,     SavePresentSystemX
  44+ E117 2A 13 80    >                        ld       hl,(PresentSystemX)
  44+ E11A 22 B7 E0    >                        ld       (SavePresentSystemX),hl
  45+ E11D                                      ldCopy2Byte     TargetSystemX,      SaveTargetSystemX
  45+ E11D 2A 15 80    >                        ld       hl,(TargetSystemX)
  45+ E120 22 B9 E0    >                        ld       (SaveTargetSystemX),hl
  46+ E123                                      ldCopyStringLen Cash,               SaveCash, 6
  46+ E123 21 CF 84    >                        ld      hl,Cash
  46+ E126 11 BB E0    >                        ld      de, SaveCash
  46+ E129 01 06 00    >                        ld      bc, 6
  46+ E12C ED B0       >                        ldir
  47+ E12E                                      ldCopyByte      Fuel,               SaveFuel
  47+ E12E 3A D3 84    >                        ld       a,(Fuel)
  47+ E131 32 BF E0    >                        ld       (SaveFuel),a
  48+ E134                                      ldCopyByte      FugitiveInnocentStatus,  SaveFugitiveInnocentStatus
  48+ E134 3A 22 80    >                        ld       a,(FugitiveInnocentStatus)
  48+ E137 32 C0 E0    >                        ld       (SaveFugitiveInnocentStatus),a
  49+ E13A                                      ldCopy2Byte     KillTally           ,SaveKillTally
  49+ E13A 2A 23 80    >                        ld       hl,(KillTally)
  49+ E13D 22 C1 E0    >                        ld       (SaveKillTally),hl
  50+ E140                                      ldCopyByte      OuterHyperCount     ,SaveOuterHyperCount
  50+ E140 3A 3A 81    >                        ld       a,(OuterHyperCount)
  50+ E143 32 C3 E0    >                        ld       (SaveOuterHyperCount),a
  51+ E146                                      ldCopyByte      InnerHyperCount     ,SaveInnerHyperCount
  51+ E146 3A 39 81    >                        ld       a,(InnerHyperCount)
  51+ E149 32 C4 E0    >                        ld       (SaveInnerHyperCount),a
  52+ E14C                                      ldCopyByte      ForeShield          ,SaveForeShield
  52+ E14C 3A F2 81    >                        ld       a,(ForeShield)
  52+ E14F 32 C5 E0    >                        ld       (SaveForeShield),a
  53+ E152                                      ldCopyByte      AftShield           ,SaveAftShield
  53+ E152 3A F3 81    >                        ld       a,(AftShield)
  53+ E155 32 C6 E0    >                        ld       (SaveAftShield),a
  54+ E158                                      ldCopyByte      PlayerEnergy        ,SavePlayerEnergy
  54+ E158 3A F4 81    >                        ld       a,(PlayerEnergy)
  54+ E15B 32 C7 E0    >                        ld       (SavePlayerEnergy),a
  55+ E15E                                      ldCopyByte      CargoBaySize        ,SaveCargoBaySize
  55+ E15E 3A D4 84    >                        ld       a,(CargoBaySize)
  55+ E161 32 C8 E0    >                        ld       (SaveCargoBaySize),a
  56+ E164                                      ldCopyByte      FuelScoopsBarrelStatus     ,SaveFuelScoopStatus
  56+ E164 3A 08 85    >                        ld       a,(FuelScoopsBarrelStatus)
  56+ E167 32 C9 E0    >                        ld       (SaveFuelScoopStatus),a
  57+ E16A C9                                   ret
  58+ E16B
  59+ E16B              copyCommanderFromSave:  ldCopyStringLen SaveCommanderName,      CommanderName, 15
  59+ E16B 21 5F E0    >                        ld      hl,SaveCommanderName
  59+ E16E 11 F8 81    >                        ld      de, CommanderName
  59+ E171 01 0F 00    >                        ld      bc, 15
  59+ E174 ED B0       >                        ldir
  60+ E176                                      ldCopyStringLen SaveSeeds,              GalaxySeeds, 6
  60+ E176 21 6E E0    >                        ld      hl,SaveSeeds
  60+ E179 11 0D 80    >                        ld      de, GalaxySeeds
  60+ E17C 01 06 00    >                        ld      bc, 6
  60+ E17F ED B0       >                        ldir
  61+ E181                                      ldCopyStringLen SaveStockAvaliabiliy,   StockAvaliabiliy, 16
  61+ E181 21 74 E0    >                        ld      hl,SaveStockAvaliabiliy
  61+ E184 11 EE 7F    >                        ld      de, StockAvaliabiliy
  61+ E187 01 10 00    >                        ld      bc, 16
  61+ E18A ED B0       >                        ldir
  62+ E18C                                      ldCopyStringLen SaveCargo,              CargoTonnes, 16
  62+ E18C 21 85 E0    >                        ld      hl,SaveCargo
  62+ E18F 11 D6 84    >                        ld      de, CargoTonnes
  62+ E192 01 10 00    >                        ld      bc, 16
  62+ E195 ED B0       >                        ldir
  63+ E197                                      ldCopyStringLen SaveEquipmentFitted,    EquipmentFitted, EQ_ITEM_COUNT
  63+ E197 21 95 E0    >                        ld      hl,SaveEquipmentFitted
  63+ E19A 11 EE 84    >                        ld      de, EquipmentFitted
  63+ E19D 01 1A 00    >                        ld      bc, EQ_ITEM_COUNT
  63+ E1A0 ED B0       >                        ldir
  64+ E1A2                                      ldCopyStringLen SaveLaserType,          LaserType, 4
  64+ E1A2 21 AF E0    >                        ld      hl,SaveLaserType
  64+ E1A5 11 E6 84    >                        ld      de, LaserType
  64+ E1A8 01 04 00    >                        ld      bc, 4
  64+ E1AB ED B0       >                        ldir
  65+ E1AD                                      ldCopyStringLen SaveLaserDamagedFlag,    LaserDamagedFlag, 4
  65+ E1AD 21 B3 E0    >                        ld      hl,SaveLaserDamagedFlag
  65+ E1B0 11 EA 84    >                        ld      de, LaserDamagedFlag
  65+ E1B3 01 04 00    >                        ld      bc, 4
  65+ E1B6 ED B0       >                        ldir
  66+ E1B8                                      ldCopy2Byte     SavePresentSystemX,     PresentSystemX
  66+ E1B8 2A B7 E0    >                        ld       hl,(SavePresentSystemX)
  66+ E1BB 22 13 80    >                        ld       (PresentSystemX),hl
  67+ E1BE                                      ldCopy2Byte     SaveTargetSystemX,      TargetSystemX
  67+ E1BE 2A B9 E0    >                        ld       hl,(SaveTargetSystemX)
  67+ E1C1 22 15 80    >                        ld       (TargetSystemX),hl
  68+ E1C4 21 3A 7F                             ld		hl,IndexedWork              ; not sure yet why thisis done here
  69+ E1C7 CD 5D 85                             call	        copy_galaxy_to_system
  70+ E1CA CD 1D 86                             call	        find_present_system
  71+ E1CD CD 80 85                             call	        copy_working_to_galaxy
  72+ E1D0                                      ldCopyStringLen SaveCash,               Cash, 6
  72+ E1D0 21 BB E0    >                        ld      hl,SaveCash
  72+ E1D3 11 CF 84    >                        ld      de, Cash
  72+ E1D6 01 06 00    >                        ld      bc, 6
  72+ E1D9 ED B0       >                        ldir
  73+ E1DB                                      ldCopyByte      SaveFuel,               Fuel
  73+ E1DB 3A BF E0    >                        ld       a,(SaveFuel)
  73+ E1DE 32 D3 84    >                        ld       (Fuel),a
  74+ E1E1                                      ldCopyByte      SaveFugitiveInnocentStatus,  FugitiveInnocentStatus
  74+ E1E1 3A C0 E0    >                        ld       a,(SaveFugitiveInnocentStatus)
  74+ E1E4 32 22 80    >                        ld       (FugitiveInnocentStatus),a
  75+ E1E7                                      ldCopy2Byte     SaveKillTally           ,KillTally
  75+ E1E7 2A C1 E0    >                        ld       hl,(SaveKillTally)
  75+ E1EA 22 23 80    >                        ld       (KillTally),hl
  76+ E1ED                                      ldCopyByte      SaveOuterHyperCount     ,OuterHyperCount
  76+ E1ED 3A C3 E0    >                        ld       a,(SaveOuterHyperCount)
  76+ E1F0 32 3A 81    >                        ld       (OuterHyperCount),a
  77+ E1F3                                      ldCopyByte      SaveInnerHyperCount     ,InnerHyperCount
  77+ E1F3 3A C4 E0    >                        ld       a,(SaveInnerHyperCount)
  77+ E1F6 32 39 81    >                        ld       (InnerHyperCount),a
  78+ E1F9                                      ldCopyByte      SaveForeShield          ,ForeShield
  78+ E1F9 3A C5 E0    >                        ld       a,(SaveForeShield)
  78+ E1FC 32 F2 81    >                        ld       (ForeShield),a
  79+ E1FF                                      ldCopyByte      SaveAftShield           ,AftShield
  79+ E1FF 3A C6 E0    >                        ld       a,(SaveAftShield)
  79+ E202 32 F3 81    >                        ld       (AftShield),a
  80+ E205                                      ldCopyByte      SavePlayerEnergy        ,PlayerEnergy
  80+ E205 3A C7 E0    >                        ld       a,(SavePlayerEnergy)
  80+ E208 32 F4 81    >                        ld       (PlayerEnergy),a
  81+ E20B                                      ldCopyByte      SaveCargoBaySize        ,CargoBaySize
  81+ E20B 3A C8 E0    >                        ld       a,(SaveCargoBaySize)
  81+ E20E 32 D4 84    >                        ld       (CargoBaySize),a
  82+ E211                                      ldCopyByte      SaveFuelScoopStatus     ,FuelScoopsBarrelStatus
  82+ E211 3A C9 E0    >                        ld       a,(SaveFuelScoopStatus)
  82+ E214 32 08 85    >                        ld       (FuelScoopsBarrelStatus),a
  83+ E217 C9                                   ret
  84+ E218
  85+ E218 CD CA E0     saveCommander:          call    copyCommanderToSave
  86+ E21B                                      ldCopyStringLen defaultSaveName, SaveFilename, 15
  86+ E21B 21 31 E0    >                        ld      hl,defaultSaveName
  86+ E21E 11 50 E0    >                        ld      de, SaveFilename
  86+ E221 01 0F 00    >                        ld      bc, 15
  86+ E224 ED B0       >                        ldir
  87+ E226 21 31 E0                             ld      hl, defaultSaveName             ; default debug name
  88+ E229 DD 21 40 E0                          ld      ix, SaveCommanderHeader
  89+ E22D 01 8A 00                             ld      bc, SaveSize
  90+ E230 CD 56 AC                             call    FileSave
  91+ E233 C9                                   ret
  92+ E234
  93+ E234 21 31 E0     loadCommander:          ld      hl, defaultSaveName             ; default debug name
  94+ E237 DD 21 40 E0                          ld      ix, SaveCommanderHeader
  95+ E23B 01 8A 00                             ld      bc, SaveSize
  96+ E23E CD 25 AC                             call    FileLoad
  97+ E241 CD 6B E1                             call    copyCommanderFromSave
  98+ E244                                      ClearMissileTargetting
  98+ E244 3E FF       >                        ld      a,StageMissileNotTargeting
  98+ E246 32 F7 81    >                        ld      (MissileTargettingFlag),a
  99+ E249 CD 7F 83                             call    SetPlayerRank
 100+ E24C                                      SetMemFalse LaserBeamOn
 100+ E24C 3E FF       >                        ld      a,$FF
 100+ E24E 32 0F 82    >                        ld      (LaserBeamOn),a
 101+ E251 C9                                   ret
 102+ E252
 103+ E252               ; For now hard laod, later correctlt sequence gneeral vars and dma fill with 0 for a start
 104+ E252              defaultCommander:       ldCopyStringLen defaultName, CommanderName, 8
 104+ E252 21 10 E0    >                        ld      hl,defaultName
 104+ E255 11 F8 81    >                        ld      de, CommanderName
 104+ E258 01 08 00    >                        ld      bc, 8
 104+ E25B ED B0       >                        ldir
 105+ E25D                                      ldCopyStringLen defaultSeeds, GalaxySeeds, 6
 105+ E25D 21 29 E0    >                        ld      hl,defaultSeeds
 105+ E260 11 0D 80    >                        ld      de, GalaxySeeds
 105+ E263 01 06 00    >                        ld      bc, 6
 105+ E266 ED B0       >                        ldir
 106+ E268                                      ldCopy2Byte defaultHomeX, PresentSystemX
 106+ E268 2A 2F E0    >                        ld       hl,(defaultHomeX)
 106+ E26B 22 13 80    >                        ld       (PresentSystemX),hl
 107+ E26E                                      ldCopy2Byte defaultHomeX, TargetSystemX
 107+ E26E 2A 2F E0    >                        ld       hl,(defaultHomeX)
 107+ E271 22 15 80    >                        ld       (TargetSystemX),hl
 108+ E274 21 3A 7F                             ld		hl,IndexedWork              ; not sure yet why thisis done here
 109+ E277 CD 5D 85                             call	copy_galaxy_to_system
 110+ E27A CD 1D 86                             call	find_present_system
 111+ E27D CD 80 85                             call	copy_working_to_galaxy
 112+ E280 01 60 EA                             ld      bc,60000
 113+ E283 ED 43 CF 84                          ld      (Cash),bc
 114+ E287 01 00 00                             ld		bc,0
 115+ E28A ED 43 D1 84                          ld		(Cash+2), bc                    ; cash no longer big endian
 116+ E28E 3E 46                                ld		a,MaxFuelLevel
 117+ E290 32 D3 84                             ld		(Fuel),a
 118+ E293 3E 5B                                ld      a,BankGalaxyData0
 119+ E295 32 00 80                             ld		(Galaxy),a
 120+ E298 AF                                   xor		a
 121+ E299 21 EE 84                             ld      hl,EquipmentFitted
 122+ E29C 06 1A                                ld      b, EQ_ITEM_COUNT
 123+ E29E 77           .ClearFittedLooop:      ld      (hl),a
 124+ E29F 23                                   inc     hl
 125+ E2A0 10 FC                                djnz    .ClearFittedLooop
 126+ E2A2                                      SetAFalse
 126+ E2A2 3E FF       >                        ld      a,$FF
 127+ E2A4 32 FC 84                             ld      (EquipmentFitted+EQ_FRONT_BEAM),a
 128+ E2A7 32 6C 81                             ld		(MissionData),a						;The Plan/Mission
 129+ E2AA 3E 03                                ld      a,3                                  ; a = 0 = pulse laser
 130+ E2AC 32 E6 84                             ld		(LaserType),a
 131+ E2AF 3E FF                                ld      a,$FF                                 ; a = 255
 132+ E2B1 32 E7 84                             ld		(LaserType+1),a
 133+ E2B4 32 E8 84                             ld		(LaserType+2),a
 134+ E2B7 32 E9 84                             ld		(LaserType+3),a
 135+ E2BA AF                                   xor     a                                  ; a= 0
 136+ E2BB 32 EA 84                             ld      (LaserDamagedFlag),a
 137+ E2BE 32 EB 84                             ld      (LaserDamagedFlag+1),a
 138+ E2C1 32 EC 84                             ld      (LaserDamagedFlag+2),a
 139+ E2C4 32 ED 84                             ld      (LaserDamagedFlag+3),a
 140+ E2C7              ; REMOVE?             ld      a,EQ_FRONT_PULSE
 141+ E2C7 AF                                   xor     a
 142+ E2C8 32 F1 84                             ld		(ECMPresent),a
 143+ E2CB 32 08 85                             ld		(FuelScoopsBarrelStatus),a
 144+ E2CE 32 F4 84                             ld		(EnergyBomb),a
 145+ E2D1 32 F5 84                             ld		(ExtraEnergyUnit),a
 146+ E2D4 32 F6 84                             ld		(DockingComputer),a
 147+ E2D7 32 F7 84                             ld		(GalacticHyperDrive),a
 148+ E2DA 32 F3 84                             ld		(EscapePod),a
 149+ E2DD 32 22 80                             ld      (FugitiveInnocentStatus),a
 150+ E2E0 32 23 80                             ld		(KillTally),a
 151+ E2E3 32 3A 81                             ld      (OuterHyperCount),a
 152+ E2E6 32 39 81                             ld      (InnerHyperCount),a
 153+ E2E9 3D                                   dec		a								; now a = 255
 154+ E2EA 32 F2 81                             ld		(ForeShield),a
 155+ E2ED 32 F3 81                             ld		(AftShield),a
 156+ E2F0 32 F4 81                             ld		(PlayerEnergy),a
 157+ E2F3 3E 14                                ld		a,20
 158+ E2F5 32 D4 84                             ld		(CargoBaySize),a
 159+ E2F8 CD 78 E3                             call	ZeroCargo						; Clear out cargo
 160+ E2FB 3E 00        .SetLasers:             ld      a,0                             ; we start on Front view
 161+ E2FD CD 0E E3                             call    LoadLaserToCurrent
 162+ E300                                      ClearMissileTargetting
 162+ E300 3E FF       >                        ld      a,StageMissileNotTargeting
 162+ E302 32 F7 81    >                        ld      (MissileTargettingFlag),a
 163+ E305 CD 7F 83                             call    SetPlayerRank
 164+ E308                                      SetMemFalse LaserBeamOn
 164+ E308 3E FF       >                        ld      a,$FF
 164+ E30A 32 0F 82    >                        ld      (LaserBeamOn),a
 165+ E30D C9                                   ret
 166+ E30E
 167+ E30E
 168+ E30E              ; a = current view number
 169+ E30E 21 E6 84     LoadLaserToCurrent:     ld      hl,LaserType                    ; .
 170+ E311 ED 31                                add     hl,a                            ; .
 171+ E313 7E                                   ld      a,(hl)                          ; .
 172+ E314 47                                   ld      b,a                             ; first off is there a laser present in current view
 173+ E315 32 09 82                             ld      (CurrLaserType),a               ; set type
 174+ E318 FE FF                                cp      255                             ; .
 175+ E31A C8                                   ret     z                               ; we can then drop out early if nothing fitted
 176+ E31B 3E 04                                ld      a,4                             ; Damage state is in next variable in memory
 177+ E31D ED 31                                add     hl,a
 178+ E31F 7E                                   ld      a,(hl)
 179+ E320 32 0A 82                             ld      (CurrLaserDamage),a             ; copy over current laser's damage
 180+ E323 50                                   ld      d,b                             ; get table index
 181+ E324 1E 0C                                ld      e,LaserStatsTableWidth          ;
 182+ E326 ED 30                                mul     de                              ;
 183+ E328 21 DD 76                             ld      hl,LaserStatsTable              ;
 184+ E32B 19                                   add     hl,de                           ;
 185+ E32C 23                                   inc     hl                              ; we already have type
 186+ E32D                                      ldAtHLtoMem CurrLaserPulseRate          ; table [1]
 186+ E32D 7E          >                        ld      a,(hl)
 186+ E32E 32 0B 82    >                        ld      (CurrLaserPulseRate),a
 187+ E331 23                                   inc     hl                              ; table [2]
 188+ E332                                      ldAtHLtoMem CurrLaserPulseOnTime
 188+ E332 7E          >                        ld      a,(hl)
 188+ E333 32 0C 82    >                        ld      (CurrLaserPulseOnTime),a
 189+ E336 23                                   inc     hl                              ; table [3]
 190+ E337                                      ldAtHLtoMem CurrLaserPulseOffTime
 190+ E337 7E          >                        ld      a,(hl)
 190+ E338 32 0D 82    >                        ld      (CurrLaserPulseOffTime),a
 191+ E33B 23                                   inc     hl                              ; table [4]
 192+ E33C                                      ldAtHLtoMem CurrLaserPulseRest
 192+ E33C 7E          >                        ld      a,(hl)
 192+ E33D 32 0E 82    >                        ld      (CurrLaserPulseRest),a
 193+ E340 23                                   inc     hl                              ; table [5]
 194+ E341                                      ldAtHLtoMem CurrLaserDamageOutput
 194+ E341 7E          >                        ld      a,(hl)
 194+ E342 32 15 82    >                        ld      (CurrLaserDamageOutput),a
 195+ E345 23                                   inc     hl                              ; table [6]
 196+ E346                                      ldAtHLtoMem CurrLaserEnergyDrain
 196+ E346 7E          >                        ld      a,(hl)
 196+ E347 32 16 82    >                        ld      (CurrLaserEnergyDrain),a
 197+ E34A 23                                   inc     hl                              ; table [7]
 198+ E34B                                      ldAtHLtoMem CurrLaserHeat
 198+ E34B 7E          >                        ld      a,(hl)
 198+ E34C 32 17 82    >                        ld      (CurrLaserHeat),a
 199+ E34F 23                                   inc     hl                              ; table [8]
 200+ E350                                      ldAtHLtoMem CurrLaserDurability
 200+ E350 7E          >                        ld      a,(hl)
 200+ E351 32 18 82    >                        ld      (CurrLaserDurability),a
 201+ E354 23                                   inc     hl                              ; table [9]
 202+ E355                                      ldAtHLtoMem CurrLaserDurabilityAmount   ; we don't need tech level etc for in game run only markets so stop here
 202+ E355 7E          >                        ld      a,(hl)
 202+ E356 32 19 82    >                        ld      (CurrLaserDurabilityAmount),a
 203+ E359 C9                                   ret
 204+ E35A
 205+ E35A              ; Set a = 2 * (slaves + narcotics) + firearms
 206+ E35A 3A D9 84     calculateBadness:       ld      a,(SlaveCargoTonnes)            ; Badness = 2(slaves + narcotics)
 207+ E35D 47                                   ld      b,a                             ; b= slaves
 208+ E35E 3A DC 84                             ld      a,(NarcoticsCargoTonnes)        ; .
 209+ E361 80                                   add     a,b                             ; a = b + narcotics
 210+ E362 CB 27                                sla     a                               ; a *= 2
 211+ E364 47                                   ld      b,a                             ; b = a
 212+ E365 3A E0 84                             ld      a,(FirearmsCargoTonnes)         ; a = firearms tonns
 213+ E368 80                                   add     a,b                             ; a += b so firearms + 2(slaves + narcotics)
 214+ E369 C9                                   ret
 215+ E36A
 216+ E36A CD 6B E1     PlayerDeath:            call    copyCommanderFromSave           ; load last loaded/saved commander
 217+ E36D                                      ZeroA                                   ; set current laser to front
 217+ E36D AF          >                        xor a
 218+ E36E CD 0E E3                             call    LoadLaserToCurrent
 219+ E371 CD 3C 83                             call    InitMainLoop
 220+ E374 CD 9A 82                             call    ResetPlayerShip
 221+ E377 C9                                   ret
 222+ E378                                  ;    clear out all other objects
 223+ E378                                  ;    create debris
 224+ E378                                  ;    if cargo presetn then create a cargo
 225+ E378                                  ;
 226+ E378                                  ;    enqueve message game over
 227+ E378                                  ;    go to load commander page
# file closed: ./Commander/commanderData.asm
 837  E378                  INCLUDE "./Commander/zero_player_cargo.asm"
# file opened: ./Commander/zero_player_cargo.asm
   1+ E378              ZeroCargo:
   2+ E378 AF           		xor		a							;zero-out cargo, including gems.
   3+ E379 06 10        		ld		b,16						;all the way up to alien items
   4+ E37B 21 D6 84     		ld		hl,CargoTonnes   			; cargo levels
   5+ E37E              .ZeroLoop:
   6+ E37E 77                   ld      (hl),a
   7+ E37F 23           		inc		hl
   8+ E380 10 FC        		djnz	.ZeroLoop
   9+ E382 C9           		ret
  10+ E383
# file closed: ./Commander/zero_player_cargo.asm
 838  E383                  DISPLAY "Bank ",BankCommander," - Bytes free ",/D, $2000 - ($-CommanderAddr), " - BankCommander"
 839  E383              ; Bank 57  ------------------------------------------------------------------------------------------------------------------------
 840  E383                  SLOT    LAYER2Addr
 841  E383                  PAGE    BankLAYER2
 842  E383                  ORG     LAYER2Addr
 843  E000
 844  E000                  INCLUDE "./Layer2Graphics/layer2_bank_select.asm"
# file opened: ./Layer2Graphics/layer2_bank_select.asm
   1+ E000
   2+ E000 00           varL2_BANK_SELECTED			 DB	0
   3+ E001 00           varL2_CURRENT_BANK           DB	0
   4+ E002 00           varL2_BUFFER_MODE            DB 0
   5+ E003 00           varL2_ACCESS_MODE            DB 0
   6+ E004
   7+ E004 3E 08        asm_l2_double_buffer_on:    ld      a,8
   8+ E006 32 02 E0                                 ld      (varL2_BUFFER_MODE),a
   9+ E009 C9                                       ret
  10+ E00A
  11+ E00A AF           asm_l2_double_buffer_off:   xor     a
  12+ E00B 32 02 E0                                 ld      (varL2_BUFFER_MODE),a
  13+ E00E C9                                       ret
  14+ E00F
  15+ E00F 01 3B 12     asm_disable_l2_readwrite:   ld      bc, IO_LAYER2_PORT
  16+ E012 ED 70                                    in      (c)
  17+ E014 32 03 E0                                 ld      (varL2_ACCESS_MODE),a
  18+ E017 E6 FA                                    and     LAYER2_DISABLE_MEM_ACCESS
  19+ E019 ED 79                                    out     (c),a
  20+ E01B C9                                       ret
  21+ E01C
  22+ E01C 3A 03 E0     asm_restore_l2_readwrite:   ld      a,(varL2_ACCESS_MODE)
  23+ E01F E6 05                                    and     LAYER2_READ_WRITE_MASK
  24+ E021 57                                       ld      d,a
  25+ E022 01 3B 12                                 ld      bc, IO_LAYER2_PORT
  26+ E025 ED 70                                    in      (c)
  27+ E027 32 03 E0                                 ld      (varL2_ACCESS_MODE),a
  28+ E02A A2                                       and     d
  29+ E02B ED 79                                    out     (c),a
  30+ E02D C9                                       ret
  31+ E02E
  32+ E02E 01 3B 12     asm_enable_l2_readwrite:    ld      bc, IO_LAYER2_PORT
  33+ E031 ED 70                                    in      (c)
  34+ E033 F6 05                                    or      LAYER2_READ_WRITE_MASK
  35+ E035 ED 79                                    out     (c),a
  36+ E037 C9                                       ret
  37+ E038
  38+ E038              ; "asm_l2_bank_select"
  39+ E038              ; " a = sepecific bank mask value to select, does not set varL2_BANK_SELECTED"
  40+ E038 57           asm_l2_bank_select:         ld      d,a
  41+ E039 FE 00                                    cp      0
  42+ E03B 28 08                                    jr      z,.NotBreakDebug
  43+ E03D FE 40                                    cp      $40
  44+ E03F 28 04                                    jr      z,.NotBreakDebug
  45+ E041 FE 80                                    cp      $80
  46+ E043 28 00                                    jr      z,.NotBreakDebug
  47+ E045              .NotBreakDebug:
  48+ E045 3A 02 E0                                 ld      a,(varL2_BUFFER_MODE)
  49+ E048 F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK
  50+ E04A B2                                       or      d; | LAYER2_SHADOW_SCREEN_MASK
  51+ E04B 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  52+ E04E ED 79                                    out 	(c),a
  53+ E050 C9                                       ret
  54+ E051              ;  "asm_l2_bank_select a = sepecific bank number to select, dsets varL2_BANK_SELECTED"
  55+ E051 32 00 E0     asm_l2_bank_n_select:       ld		(varL2_BANK_SELECTED),a
  56+ E054 FE 00                                    cp		0
  57+ E056 20 04                                    jr 		nz,.nottopbank
  58+ E058 3E 00        .topbank:                   ld		a,LAYER2_SHIFTED_SCREEN_TOP
  59+ E05A 18 DC                                    jr		asm_l2_bank_select
  60+ E05C FE 01        .nottopbank:                cp		1
  61+ E05E 20 04                                    jr 		nz,.notmiddlebank
  62+ E060 3E 40        .middlebank:                ld		a,LAYER2_SHIFTED_SCREEN_MIDDLE
  63+ E062 18 D4                                    jr		asm_l2_bank_select
  64+ E064 3E 80        .notmiddlebank:             ld		a,LAYER2_SHIFTED_SCREEN_BOTTOM ; default to bottom
  65+ E066 18 D0                                    jr		asm_l2_bank_select
  66+ E068              		; Note no ret as its handled by above routines
  67+ E068
  68+ E068              asm_l2_bank_0_macro:        MACRO
  69+ E068 ~                                        ld      a,(varL2_BUFFER_MODE)
  70+ E068 ~                                        or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  71+ E068 ~                                        ld 		bc, IO_LAYER2_PORT
  72+ E068 ~                                        out 	(c),a
  73+ E068 ~                                      ;  ld      a,%0001000              ; Bank offset of + 1
  74+ E068 ~                                      ;  out     (c),a
  75+ E068 ~                                        ZeroA						; set a to 0
  76+ E068 ~                                        ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  77+ E068                                          ENDM
  78+ E068
  79+ E068              asm_l2_bank_1_macro:        MACRO
  80+ E068 ~                                        ld      a,(varL2_BUFFER_MODE)
  81+ E068 ~                                        or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  82+ E068 ~                                        ld 		bc, IO_LAYER2_PORT
  83+ E068 ~                                        out 	(c),a
  84+ E068 ~                                       ; ld      a,%0001000              ; Bank offset of + 1
  85+ E068 ~                                      ;  out     (c),a
  86+ E068 ~                                        ld      a,1						; set a to 0
  87+ E068 ~                                        ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  88+ E068                                          ENDM
  89+ E068
  90+ E068              asm_l2_bank_2_macro:        MACRO
  91+ E068 ~                                        ld      a,(varL2_BUFFER_MODE)
  92+ E068 ~                                        or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
  93+ E068 ~                                        ld 		bc, IO_LAYER2_PORT
  94+ E068 ~                                        out 	(c),a
  95+ E068 ~                                      ;  ld      a,%0001000              ; Bank offset of + 1
  96+ E068 ~                                       ; out     (c),a
  97+ E068 ~                                        ld      a,2						; set a to 0
  98+ E068 ~                                        ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  99+ E068                                          ENDM
 100+ E068
 101+ E068              asm_l2_bank_3_macro:        MACRO
 102+ E068 ~                                        ld      a,(varL2_BUFFER_MODE)
 103+ E068 ~                                        or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
 104+ E068 ~                                        or      %0001011
 105+ E068 ~                                        ld 		bc, IO_LAYER2_PORT
 106+ E068 ~                                        out 	(c),a
 107+ E068 ~                                        ld      a,3						; set a to 0
 108+ E068 ~                                        ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 109+ E068                                          ENDM
 110+ E068
 111+ E068              asm_l2_bank_4_macro:        MACRO
 112+ E068 ~                                        ld      a,(varL2_BUFFER_MODE)
 113+ E068 ~                                        or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
 114+ E068 ~                                        ld 		bc, IO_LAYER2_PORT
 115+ E068 ~                                        out 	(c),a
 116+ E068 ~                                        ld      a,4						; set a to 0
 117+ E068 ~                                        ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 118+ E068                                          ENDM
 119+ E068
 120+ E068              ; "asm_l2_row_bank_select"
 121+ E068              ; "A (unsinged) = y row of pixel line from top, sets the bank to top middle or bottom and adjusts a reg to row memory address"
 122+ E068              ; "Could optimise by holding the previous bank but given its only an out statement it may not save T states at all"
 123+ E068              ; "destroys BC call de is safe a = adjusted poke pixel row"
 124+ E068              asm_l2_row_bank_select:     JumpIfAGTENusng 128, .BottomBank
 124+ E068 FE 80       >                        cp     128
 124+ E06A D2 A6 E0    >                        jp		nc,.BottomBank
 125+ E06D                                          JumpIfAGTENusng 64, .MiddleBank
 125+ E06D FE 40       >                        cp     64
 125+ E06F D2 8A E0    >                        jp		nc,.MiddleBank
 126+ E072 08                                       ex      af,af'
 127+ E073                                          JumpIfMemZero varL2_BANK_SELECTED, .NoTopChange
 127+ E073 3A 00 E0    >                        ld  a,(varL2_BANK_SELECTED)
 127+ E076 A7          >                        and a
 127+ E077 CA 88 E0    >                        jp  z,.NoTopChange
 128+ E07A                                          asm_l2_bank_0_macro
 128+ E07A 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 128+ E07D F6 03       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
 128+ E07F 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 128+ E082 ED 79       >                            out 	(c),a
 128+ E084             >                          ;  ld      a,%0001000              ; Bank offset of + 1
 128+ E084             >                          ;  out     (c),a
 128+ E084             >                            ZeroA						; set a to 0
 128+ E084 AF          >                        xor a
 128+ E085 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 129+ E088 08           .NoTopChange:               ex      af,af'
 130+ E089 C9                                       ret
 131+ E08A 08           .MiddleBank:                ex      af,af'
 132+ E08B                                          JumpIfMemEqNusng varL2_BANK_SELECTED, 1, .NoMiddleChange
 132+ E08B 3A 00 E0    >                        ld  a,(varL2_BANK_SELECTED)
 132+ E08E FE 01       >                        cp  1
 132+ E090 CA A2 E0    >                        jp  z,.NoMiddleChange
 133+ E093                                          asm_l2_bank_1_macro
 133+ E093 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 133+ E096 F6 43       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
 133+ E098 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 133+ E09B ED 79       >                            out 	(c),a
 133+ E09D             >                           ; ld      a,%0001000              ; Bank offset of + 1
 133+ E09D             >                          ;  out     (c),a
 133+ E09D 3E 01       >                            ld      a,1						; set a to 0
 133+ E09F 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 134+ E0A2 08           .NoMiddleChange:            ex      af,af'
 135+ E0A3 D6 40                                    sub     64
 136+ E0A5 C9                                       ret
 137+ E0A6 08           .BottomBank:                ex      af,af'
 138+ E0A7                                          JumpIfMemEqNusng varL2_BANK_SELECTED, 2, .NoBottomChange
 138+ E0A7 3A 00 E0    >                        ld  a,(varL2_BANK_SELECTED)
 138+ E0AA FE 02       >                        cp  2
 138+ E0AC CA BE E0    >                        jp  z,.NoBottomChange
 139+ E0AF                                          asm_l2_bank_2_macro
 139+ E0AF 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 139+ E0B2 F6 83       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
 139+ E0B4 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 139+ E0B7 ED 79       >                            out 	(c),a
 139+ E0B9             >                          ;  ld      a,%0001000              ; Bank offset of + 1
 139+ E0B9             >                           ; out     (c),a
 139+ E0B9 3E 02       >                            ld      a,2						; set a to 0
 139+ E0BB 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 140+ E0BE 08           .NoBottomChange:            ex      af,af'
 141+ E0BF D6 80                                    sub     128
 142+ E0C1 C9                                       ret
 143+ E0C2
 144+ E0C2
 145+ E0C2              ; "asm_l2_row_bank_select"
 146+ E0C2              ; "HL (unsinged) = x column of pixel line from left
 147+ E0C2              ; 0-  63
 148+ E0C2              ; 64- 127
 149+ E0C2              ; 128 - 191
 150+ E0C2              ; 192 - 255
 151+ E0C2              ; 256 - 321
 152+ E0C2              ; outputs l with the correct column number
 153+ E0C2 7A           asm_l2_320_col_bank_select: ld      a,d
 154+ E0C3                                          JumpIfAIsNotZero .Bank5             ; 256 - 321
 154+ E0C3 A7          >                        and     a
 154+ E0C4 C2 27 E1    >                        jp	    nz,.Bank5
 155+ E0C7 7B                                       ld      a,e
 156+ E0C8                                          JumpIfAGTENusng 192, .Bank4
 156+ E0C8 FE C0       >                        cp     192
 156+ E0CA D2 10 E1    >                        jp		nc,.Bank4
 157+ E0CD                                          JumpIfAGTENusng 128, .Bank3
 157+ E0CD FE 80       >                        cp     128
 157+ E0CF D2 FB E0    >                        jp		nc,.Bank3
 158+ E0D2                                          JumpIfAGTENusng 64 , .Bank2
 158+ E0D2 FE 40       >                        cp     64
 158+ E0D4 D2 E6 E0    >                        jp		nc,.Bank2
 159+ E0D7              .Bank1:                     asm_l2_bank_0_macro
 159+ E0D7 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 159+ E0DA F6 03       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
 159+ E0DC 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 159+ E0DF ED 79       >                            out 	(c),a
 159+ E0E1             >                          ;  ld      a,%0001000              ; Bank offset of + 1
 159+ E0E1             >                          ;  out     (c),a
 159+ E0E1             >                            ZeroA						; set a to 0
 159+ E0E1 AF          >                        xor a
 159+ E0E2 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 160+ E0E5 C9                                       ret
 161+ E0E6              .Bank2:                     asm_l2_bank_1_macro
 161+ E0E6 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 161+ E0E9 F6 43       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
 161+ E0EB 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 161+ E0EE ED 79       >                            out 	(c),a
 161+ E0F0             >                           ; ld      a,%0001000              ; Bank offset of + 1
 161+ E0F0             >                          ;  out     (c),a
 161+ E0F0 3E 01       >                            ld      a,1						; set a to 0
 161+ E0F2 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 162+ E0F5                                          ClearCarryFlag
 162+ E0F5 B7          >                        or a
 163+ E0F6 7D                                       ld      a,l
 164+ E0F7 E6 BF                                    and     %10111111       ; fast subtract 64, just clear bit
 165+ E0F9 67                                       ld      h,a
 166+ E0FA C9                                       ret
 167+ E0FB              .Bank3:                     asm_l2_bank_2_macro
 167+ E0FB 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 167+ E0FE F6 83       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
 167+ E100 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 167+ E103 ED 79       >                            out 	(c),a
 167+ E105             >                          ;  ld      a,%0001000              ; Bank offset of + 1
 167+ E105             >                           ; out     (c),a
 167+ E105 3E 02       >                            ld      a,2						; set a to 0
 167+ E107 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 168+ E10A                                          ClearCarryFlag
 168+ E10A B7          >                        or a
 169+ E10B 7D                                       ld      a,l
 170+ E10C E6 7F                                    and     %01111111       ; fast subtract 128, just clear bit
 171+ E10E 67                                       ld      h,a
 172+ E10F C9                                       ret
 173+ E110              .Bank4:                     asm_l2_bank_3_macro
 173+ E110 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 173+ E113 F6 03       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
 173+ E115 F6 0B       >                            or      %0001011
 173+ E117 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 173+ E11A ED 79       >                            out 	(c),a
 173+ E11C 3E 03       >                            ld      a,3						; set a to 0
 173+ E11E 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 174+ E121                                          ClearCarryFlag
 174+ E121 B7          >                        or a
 175+ E122 7B                                       ld      a,e
 176+ E123 E6 3F                                    and     %00111111       ; fast subtract 192, just clear bit
 177+ E125 67                                       ld      h,a
 178+ E126 C9                                       ret
 179+ E127              .Bank5:                     asm_l2_bank_4_macro
 179+ E127 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 179+ E12A F6 43       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
 179+ E12C 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 179+ E12F ED 79       >                            out 	(c),a
 179+ E131 3E 04       >                            ld      a,4						; set a to 0
 179+ E133 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 180+ E136 65                                       ld      h,l             ; fast subtract 256, just clear bit
 181+ E137 C9                                       ret
 182+ E138
 183+ E138              ;;;
 184+ E138              ;;;
 185+ E138              ;;;                            cp 		64			; row < 64?
 186+ E138              ;;;                            jr 		nc, .l2rowGTE64
 187+ E138              ;;;.l2rowLT64:                 ex		af,af'
 188+ E138              ;;;                            ;ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP | LAYER2_SHADOW_SCREEN_MASK
 189+ E138              ;;;                            ld      a,(varL2_BUFFER_MODE)
 190+ E138              ;;;                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
 191+ E138              ;;;                            ld 		bc, IO_LAYER2_PORT
 192+ E138              ;;;                            out 	(c),a
 193+ E138              ;;;                            xor		a						; set a to 0
 194+ E138              ;;;                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 195+ E138              ;;;                            ex		af,af'					; return pixel poke unharmed
 196+ E138              ;;;                            ret
 197+ E138              ;;;.l2rowGTE64:                cp 		128
 198+ E138              ;;;                            jr 		nc, .l2rowGTE128
 199+ E138              ;;;.l2row64to127:              ex		af,af'
 200+ E138              ;;;                    ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE | LAYER2_SHADOW_SCREEN_MASK
 201+ E138              ;;;                            ld      a,(varL2_BUFFER_MODE)
 202+ E138              ;;;                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
 203+ E138              ;;;                            ld 		bc, IO_LAYER2_PORT
 204+ E138              ;;;                            out 	(c),a
 205+ E138              ;;;                            ld		a,1						; set a to 1
 206+ E138              ;;;                            ld		(varL2_BANK_SELECTED),a	; save selected bank
 207+ E138              ;;;                            ex		af,af'
 208+ E138              ;;;                            sub		64
 209+ E138              ;;;                            ret
 210+ E138              ;;;.l2rowGTE128:               ex		af,af'
 211+ E138              ;;;                    ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM | LAYER2_SHADOW_SCREEN_MASK
 212+ E138              ;;;                            ld      a,(varL2_BUFFER_MODE)
 213+ E138              ;;;                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
 214+ E138              ;;;
 215+ E138              ;;;                            ld 		bc, IO_LAYER2_PORT
 216+ E138              ;;;                            out 	(c),a
 217+ E138              ;;;                            ld		a,1						; set a to 2
 218+ E138              ;;;                            ld		(varL2_BANK_SELECTED),a	; save selected bank
 219+ E138              ;;;                            ex		af,af'
 220+ E138              ;;;                            sub		128
 221+ E138              ;;;                            ret
 222+ E138
 223+ E138
# file closed: ./Layer2Graphics/layer2_bank_select.asm
 845  E138                  INCLUDE "./Layer2Graphics/layer2_cls.asm"
# file opened: ./Layer2Graphics/layer2_cls.asm
   1+ E138
   2+ E138 00           l2_cls_byte	            DB 0
   3+ E139              ; ">DMA Command BLOCK"
   4+ E139
   5+ E139 83 C3 C7 CB  l2_fill                 DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E13D 7D
   6+ E13E 38 E1        l2_fill_astrt           DW l2_cls_byte
   7+ E140 00 40        l2_fill_length          DB $00,$40
   8+ E142 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   9+ E145 00 00        l2_fill_bstrt           DB $00,$00
  10+ E147 82 CF B3 87                          DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
  11+ E14B              l2_fill_cmd_len	        EQU $ - l2_fill
  12+ E14B
  13+ E14B 83 C3 C7 CB  l2_fill_burst           DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
  13+ E14F 7D
  14+ E150 38 E1        .l2_fill_astrt          DW l2_cls_byte
  15+ E152 00 40        .l2_fill_length         DB $00,$40
  16+ E154 24 10 CD                             DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_BURST_MODE
  17+ E157 00 00        .l2_fill_bstrt          DB $00,$00
  18+ E159 82 CF B3 87                          DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
  19+ E15D              l2_fill_burst_cmd_len   EQU $ - l2_fill_burst
  20+ E15D
  21+ E15D              ; ">l2_cls_dma_bank sets a bank to"
  22+ E15D              l2_cls_dma_bank:
  23+ E15D 32 38 E1     .set_colour:            ld (l2_cls_byte),a
  24+ E160 21 39 E1     .write_dma:             ld hl, l2_fill
  25+ E163 06 12                                ld b, l2_fill_cmd_len
  26+ E165 0E 6B                                ld	c,IO_DATAGEAR_DMA_PORT
  27+ E167 ED B3                                otir
  28+ E169 C9                                   ret
  29+ E16A
  30+ E16A              ; ">l2_cls_dma_bank sets a bank to"
  31+ E16A              l2_cls_dma_bank_burst:
  32+ E16A 32 38 E1     .set_colour:            ld (l2_cls_byte),a
  33+ E16D 21 4B E1     .write_dma:             ld hl, l2_fill_burst
  34+ E170 06 12                                ld b, l2_fill_burst_cmd_len
  35+ E172 0E 6B                                ld	c,IO_DATAGEAR_DMA_PORT
  36+ E174 ED B3                                otir
  37+ E176 C9                                   ret
  38+ E177
  39+ E177 3E 00        l2_set_color_upper2:    ld      a,0
  40+ E179 CD 68 E0                             call asm_l2_row_bank_select
  41+ E17C 3A 38 E1                             ld      a,(l2_cls_byte)
  42+ E17F CD 5D E1                             call l2_cls_dma_bank
  43+ E182 3E 40                                ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  44+ E184 CD 68 E0                             call asm_l2_row_bank_select
  45+ E187 3A 38 E1                             ld      a,(l2_cls_byte)
  46+ E18A CD 5D E1                             call l2_cls_dma_bank
  47+ E18D C9                                   ret
  48+ E18E
  49+ E18E
  50+ E18E              l2_cls_upper_two_thirds:;ld a,0								; pretend we are plotting pixel on row 0 to force top selection
  51+ E18E                                      asm_l2_bank_0_macro ; call asm_l2_row_bank_select
  51+ E18E 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  51+ E191 F6 03       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  51+ E193 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  51+ E196 ED 79       >                            out 	(c),a
  51+ E198             >                          ;  ld      a,%0001000              ; Bank offset of + 1
  51+ E198             >                          ;  out     (c),a
  51+ E198             >                            ZeroA						; set a to 0
  51+ E198 AF          >                        xor a
  51+ E199 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  52+ E19C 3E E3                                ld 	a,COLOUR_TRANSPARENT
  53+ E19E CD 5D E1                             call l2_cls_dma_bank
  54+ E1A1                                      ;ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  55+ E1A1                                      asm_l2_bank_1_macro ;call asm_l2_row_bank_select
  55+ E1A1 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  55+ E1A4 F6 43       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  55+ E1A6 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  55+ E1A9 ED 79       >                            out 	(c),a
  55+ E1AB             >                           ; ld      a,%0001000              ; Bank offset of + 1
  55+ E1AB             >                          ;  out     (c),a
  55+ E1AB 3E 01       >                            ld      a,1						; set a to 0
  55+ E1AD 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  56+ E1B0 3E E3                                ld 	a,COLOUR_TRANSPARENT
  57+ E1B2 CD 5D E1                             call l2_cls_dma_bank
  58+ E1B5 C9                                   ret
  59+ E1B6
  60+ E1B6              l2_cls_upper_two_thirds_burst:;ld a,0								; pretend we are plotting pixel on row 0 to force top selection
  61+ E1B6                                      asm_l2_bank_0_macro ; call asm_l2_row_bank_select
  61+ E1B6 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  61+ E1B9 F6 03       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  61+ E1BB 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  61+ E1BE ED 79       >                            out 	(c),a
  61+ E1C0             >                          ;  ld      a,%0001000              ; Bank offset of + 1
  61+ E1C0             >                          ;  out     (c),a
  61+ E1C0             >                            ZeroA						; set a to 0
  61+ E1C0 AF          >                        xor a
  61+ E1C1 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  62+ E1C4 3E E3                                ld 	a,COLOUR_TRANSPARENT
  63+ E1C6 CD 6A E1                             call l2_cls_dma_bank_burst
  64+ E1C9                                      ;ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  65+ E1C9                                      asm_l2_bank_1_macro ;call asm_l2_row_bank_select
  65+ E1C9 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  65+ E1CC F6 43       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  65+ E1CE 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  65+ E1D1 ED 79       >                            out 	(c),a
  65+ E1D3             >                           ; ld      a,%0001000              ; Bank offset of + 1
  65+ E1D3             >                          ;  out     (c),a
  65+ E1D3 3E 01       >                            ld      a,1						; set a to 0
  65+ E1D5 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  66+ E1D8 3E E3                                ld 	a,COLOUR_TRANSPARENT
  67+ E1DA CD 6A E1                             call l2_cls_dma_bank_burst
  68+ E1DD C9                                   ret
  69+ E1DE
  70+ E1DE              l2_cls_lower_third:     ;ld a,128							; pretend we are plotting pixel on row 64 to force mid selection
  71+ E1DE                                      asm_l2_bank_2_macro; call asm_l2_row_bank_select
  71+ E1DE 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  71+ E1E1 F6 83       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
  71+ E1E3 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  71+ E1E6 ED 79       >                            out 	(c),a
  71+ E1E8             >                          ;  ld      a,%0001000              ; Bank offset of + 1
  71+ E1E8             >                           ; out     (c),a
  71+ E1E8 3E 02       >                            ld      a,2						; set a to 0
  71+ E1EA 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  72+ E1ED 3E E3                                ld 	a,COLOUR_TRANSPARENT
  73+ E1EF CD 5D E1                             call l2_cls_dma_bank
  74+ E1F2 C9                                   ret
  75+ E1F3
  76+ E1F3              l2_cls_lower_third_burst:asm_l2_bank_2_macro; call asm_l2_row_bank_select
  76+ E1F3 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  76+ E1F6 F6 83       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
  76+ E1F8 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  76+ E1FB ED 79       >                            out 	(c),a
  76+ E1FD             >                          ;  ld      a,%0001000              ; Bank offset of + 1
  76+ E1FD             >                           ; out     (c),a
  76+ E1FD 3E 02       >                            ld      a,2						; set a to 0
  76+ E1FF 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  77+ E202 3E E3                                ld 	a,COLOUR_TRANSPARENT
  78+ E204 CD 6A E1                             call l2_cls_dma_bank_burst
  79+ E207 C9                                   ret
  80+ E208
  81+ E208
  82+ E208 CD B6 E1     l2_cls_burst:           call l2_cls_upper_two_thirds_burst
  83+ E20B C3 F3 E1                             jp   l2_cls_lower_third_burst
  84+ E20E
  85+ E20E
  86+ E20E CD 8E E1     l2_cls:                 call l2_cls_upper_two_thirds
  87+ E211 C3 DE E1                             jp   l2_cls_lower_third
  88+ E214
  89+ E214              l2_320_cls:
  90+ E214 CD 8E E1     l2_640_cls:             call l2_cls_upper_two_thirds
  91+ E217 CD DE E1                             call   l2_cls_lower_third
  92+ E21A                                      ; need to clear banks 4 and 5 via normal paging, say into C000 with interrupts disabled
  93+ E21A                                      asm_l2_bank_3_macro
  93+ E21A 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  93+ E21D F6 03       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  93+ E21F F6 0B       >                            or      %0001011
  93+ E221 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  93+ E224 ED 79       >                            out 	(c),a
  93+ E226 3E 03       >                            ld      a,3						; set a to 0
  93+ E228 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  94+ E22B 3E E3                                ld 	a,COLOUR_TRANSPARENT
  95+ E22D CD 5D E1                             call l2_cls_dma_bank
  96+ E230                                      asm_l2_bank_4_macro
  96+ E230 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  96+ E233 F6 43       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  96+ E235 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  96+ E238 ED 79       >                            out 	(c),a
  96+ E23A 3E 04       >                            ld      a,4						; set a to 0
  96+ E23C 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  97+ E23F 3E E3                                ld 	a,COLOUR_TRANSPARENT
  98+ E241 CD 5D E1                             call l2_cls_dma_bank
  99+ E244
 100+ E244 C9                                   ret
 101+ E245
# file closed: ./Layer2Graphics/layer2_cls.asm
 846  E245                  INCLUDE "./Layer2Graphics/layer2_initialise.asm"
# file opened: ./Layer2Graphics/layer2_initialise.asm
   1+ E245
   2+ E245 ED 91 70 00  l2_initialise:          nextreg     LAYER_2_CONTROL_REGISTER,           %00000000               ; 256x192x8bpp
   3+ E249 ED 91 12 08                          nextreg		LAYER2_RAM_PAGE_REGISTER,          	LAYER2_SCREEN_BANK1
   4+ E24D ED 91 13 0D                          nextreg		LAYER2_RAM_SHADOW_REGISTER,     	LAYER2_SHADOW_BANK1
   5+ E251 ED 91 14 E3                          nextreg		TRANSPARENCY_COLOUR_REGISTER, 		COLOUR_TRANSPARENT
   6+ E255                                      ZeroA
   6+ E255 AF          >                        xor a
   7+ E256                                      DoubleBufferIfPossible
   7+ E256             >                        IFDEF DOUBLEBUFFER
   7+ E256             >                            MMUSelectLayer2
   7+ E256 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7+ E25A CD 0E E2    >                            call  l2_cls
   7+ E25D CD 97 E2    >                            call  l2_flip_buffers
   7+ E260             >                        ENDIF
   8+ E260                                      DoubleBufferIfPossible
   8+ E260             >                        IFDEF DOUBLEBUFFER
   8+ E260             >                            MMUSelectLayer2
   8+ E260 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   8+ E264 CD 0E E2    >                            call  l2_cls
   8+ E267 CD 97 E2    >                            call  l2_flip_buffers
   8+ E26A             >                        ENDIF
   9+ E26A CD 68 E0                             call        asm_l2_row_bank_select
  10+ E26D C9                                   ret
  11+ E26E
  12+ E26E ED 91 70 10  l2_320_initialise:      nextreg     LAYER_2_CONTROL_REGISTER,           %00010000               ; 320x256x8bpp
  13+ E272 ED 91 12 08                          nextreg		LAYER2_RAM_PAGE_REGISTER,          	LAYER2_SCREEN_BANK1
  14+ E276 ED 91 13 0D                          nextreg		LAYER2_RAM_SHADOW_REGISTER,     	LAYER2_SHADOW_BANK1
  15+ E27A ED 91 14 E3                          nextreg		TRANSPARENCY_COLOUR_REGISTER, 		COLOUR_TRANSPARENT
  16+ E27E                                      ZeroA
  16+ E27E AF          >                        xor a
  17+ E27F                                      DoubleBuffer320IfPossible
  17+ E27F             >                        IFDEF DOUBLEBUFFER
  17+ E27F             >                            MMUSelectLayer2
  17+ E27F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  17+ E283 CD 14 E2    >                            call  l2_320_cls
  17+ E286 CD 97 E2    >                            call  l2_flip_buffers
  17+ E289             >                        ENDIF
  18+ E289                                      DoubleBuffer320IfPossible
  18+ E289             >                        IFDEF DOUBLEBUFFER
  18+ E289             >                            MMUSelectLayer2
  18+ E289 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  18+ E28D CD 14 E2    >                            call  l2_320_cls
  18+ E290 CD 97 E2    >                            call  l2_flip_buffers
  18+ E293             >                        ENDIF
  19+ E293 CD C2 E0                             call        asm_l2_320_col_bank_select
  20+ E296 C9                                   ret
  21+ E297
  22+ E297              ;l2_640_initialise:      nextreg     LAYER_2_CONTROL_REGISTER,           %00100000               ; 320x256x8bpp
  23+ E297              ;                        nextreg		LAYER2_RAM_PAGE_REGISTER,          	LAYER2_SCREEN_BANK1
  24+ E297              ;                        nextreg		LAYER2_RAM_SHADOW_REGISTER,     	LAYER2_SHADOW_BANK1
  25+ E297              ;                        nextreg		TRANSPARENCY_COLOUR_REGISTER, 		COLOUR_TRANSPARENT
  26+ E297              ;                        ZeroA
  27+ E297              ;                        DoubleBuffer640IfPossible
  28+ E297              ;                        DoubleBuffer640IfPossible
  29+ E297              ;                        call        asm_l2_640_col_bank_select
  30+ E297              ;                        ret
  31+ E297
# file closed: ./Layer2Graphics/layer2_initialise.asm
 847  E297                  INCLUDE "./Layer2Graphics/l2_flip_buffers.asm"
# file opened: ./Layer2Graphics/l2_flip_buffers.asm
   1+ E297              l2_flip_buffers:        GetNextReg LAYER2_RAM_PAGE_REGISTER
   1+ E297 01 3B 24    >            ld bc,$243B
   1+ E29A 3E 12       >            ld a,LAYER2_RAM_PAGE_REGISTER
   1+ E29C ED 79       >            out (c),a
   1+ E29E 04          >            inc b
   1+ E29F ED 78       >            in a,(c)
   2+ E2A1 57                                   ld      d,a
   3+ E2A2                                      GetNextReg LAYER2_RAM_SHADOW_REGISTER
   3+ E2A2 01 3B 24    >            ld bc,$243B
   3+ E2A5 3E 13       >            ld a,LAYER2_RAM_SHADOW_REGISTER
   3+ E2A7 ED 79       >            out (c),a
   3+ E2A9 04          >            inc b
   3+ E2AA ED 78       >            in a,(c)
   4+ E2AC 5F                                   ld      e,a
   5+ E2AD ED 92 12                             nextreg LAYER2_RAM_PAGE_REGISTER, a
   6+ E2B0 7A                                   ld      a,d
   7+ E2B1 ED 92 13                             nextreg LAYER2_RAM_SHADOW_REGISTER, a
   8+ E2B4 C9                                   ret
   9+ E2B5
# file closed: ./Layer2Graphics/l2_flip_buffers.asm
 848  E2B5                  INCLUDE "./Layer2Graphics/layer2_plot_pixel.asm"
# file opened: ./Layer2Graphics/layer2_plot_pixel.asm
   1+ E2B5
   2+ E2B5 DF           line_gfx_colour db $DF
   3+ E2B6
   4+ E2B6              l2_plot_macro:          MACRO
   5+ E2B6 ~                                    ld      a,b
   6+ E2B6 ~                                    JumpIfAGTENusng 192 ,.NoPlot
   7+ E2B6 ~                                    ld      l,c
   8+ E2B6 ~                                    call    asm_l2_row_bank_select
   9+ E2B6 ~                                    ld      h,a
  10+ E2B6 ~                                    ld      a,(line_gfx_colour)
  11+ E2B6 ~                                    ld      (hl),a
  12+ E2B6 ~            .NoPlot:
  13+ E2B6                                      ENDM
  14+ E2B6
  15+ E2B6
  16+ E2B6              ; ">l2_plot_pixel b= row number, c = column number, a = pixel col"
  17+ E2B6 F5           l2_plot_pixel:          push    af
  18+ E2B7 78                                   ld      a,b
  19+ E2B8              l2_pp_row_valid:        JumpIfAGTENusng ScreenHeight,l2_pp_dont_plot
  19+ E2B8 FE C0       >                        cp     ScreenHeight
  19+ E2BA D2 C8 E2    >                        jp		nc,l2_pp_dont_plot
  20+ E2BD C5                                   push    bc								; bank select destroys bc so need to save it
  21+ E2BE                                  ;	ld      a,b
  22+ E2BE CD 68 E0                             call    asm_l2_row_bank_select
  23+ E2C1 C1                                   pop     bc
  24+ E2C2 47                                   ld      b,a
  25+ E2C3 60                                   ld      h,b								; hl now holds ram address after bank select
  26+ E2C4 69                                   ld      l,c
  27+ E2C5 F1                                   pop     af								; a = colour to plott
  28+ E2C6 77                                   ld      (hl),a
  29+ E2C7 C9                                   ret
  30+ E2C8 F1           l2_pp_dont_plot:        pop     af
  31+ E2C9 C9                                   ret
  32+ E2CA
  33+ E2CA              ; ">l2_plot_pixel d= row number, hl = column number, e = pixel col"
  34+ E2CA 7C           l2_plot_pixel_320:      ld      a,h
  35+ E2CB FE 01                                cp      1                               ; if < 256, definite OK
  36+ E2CD 20 05                                jr      nz,.DoneCheck
  37+ E2CF 7D                                   ld      a,l
  38+ E2D0 E6 C0                                and     %11000000                       ; if its 7 or 6 set then > 319
  39+ E2D2 20 06                                jr      nz,.DontPlot
  40+ E2D4 CD C2 E0     .DoneCheck:             call    asm_l2_320_col_bank_select      ; adjust hl for column > h
  41+ E2D7 6A                                   ld      l,d                             ; as they are horizontal now
  42+ E2D8 7B                                   ld      a,e
  43+ E2D9 77                                   ld      (hl),a
  44+ E2DA C9           .DontPlot:              ret
  45+ E2DB
  46+ E2DB CD C2 E0     l2_plot_pixel_320_no_check:   call    asm_l2_320_col_bank_select      ; adjust hl for column > h
  47+ E2DE 6A                                   ld      l,d                             ; as they are horizontal now
  48+ E2DF 7B                                   ld      a,e
  49+ E2E0 77                                   ld      (hl),a
  50+ E2E1 C9                                   ret
  51+ E2E2
  52+ E2E2              ; y aixs bounds check must have been done before calling this
  53+ E2E2 F5           l2_plot_pixel_no_check: push    af
  54+ E2E3 C5                                   push    bc								; bank select destroys bc so need to save it
  55+ E2E4 78                                   ld      a,b                             ; determine target bank
  56+ E2E5 CD 68 E0                             call    asm_l2_row_bank_select
  57+ E2E8 C1                                   pop     bc
  58+ E2E9 47                                   ld      b,a                             ; b now adjusted for bank, c = column
  59+ E2EA 60 69                                ld      hl,bc                           ; hl now holds ram address after bank select
  60+ E2EC F1                                   pop     af								; a = colour to plott
  61+ E2ED 77                                   ld      (hl),a                          ; poke to ram
  62+ E2EE C9                                   ret
  63+ E2EF
  64+ E2EF              ; ">l2_plot_pixel_no_bank b= row number, c = column number, a = pixel col"
  65+ E2EF              ; This version assues pixel is in the same bank as previously plotted ones. optimised for horizontal lines
  66+ E2EF E5           l2_plot_pixel_no_bank:  push 	hl
  67+ E2F0 60                                   ld 		h,b								; hl now holds ram address after bank select
  68+ E2F1 69                                   ld 		l,c
  69+ E2F2 77                                   ld 		(hl),a
  70+ E2F3 E1                                   pop		hl
  71+ E2F4 C9                                   ret
  72+ E2F5
  73+ E2F5              ; ">l2_plot_pixel_no_bank d= row number, h = column number, a = pixel col"
  74+ E2F5              ; This version assues pixel is in the same bank as previously plotted ones. optimised for horizontal lines
  75+ E2F5              l2_plot_pixel_320_no_bank:
  76+ E2F5 6A                                   ld 		l,d
  77+ E2F6 77                                   ld 		(hl),a
  78+ E2F7 C9                                   ret
  79+ E2F8              ; The more simpler h col l row is just ld (hl),a so no need for a function
  80+ E2F8
  81+ E2F8
  82+ E2F8 F5           ShipPixel:              push    af
  83+ E2F9 78                                   ld      a,b
  84+ E2FA FE 7F                                cp      127
  85+ E2FC D0                                   ret     nc
  86+ E2FD F1                                   pop     af
  87+ E2FE 18 E2                                jr      l2_plot_pixel_no_check
  88+ E300                                      ;***Implicit ret due to jr
  89+ E300
  90+ E300              ; in bc = yx iyl = colour
  91+ E300 78           DebrisPixel:            ld      a,b
  92+ E301 FE 7F                                cp      127
  93+ E303 D0                                   ret     nc
  94+ E304 FD 7D                                ld      a, iyl
  95+ E306 18 DA                                jr      l2_plot_pixel_no_check
  96+ E308                                      ;***Implicit ret due to jr
  97+ E308
  98+ E308 F5           l2_plot_pixel_y_test:   push	af
  99+ E309 78                                   ld		a,b
 100+ E30A FE C0                                cp		192
 101+ E30C 30 03                                jr		nc,.clearup
 102+ E30E F1                                   pop		af
 103+ E30F 18 A5                                jr		l2_plot_pixel
 104+ E311 F1           .clearup:               pop		af
 105+ E312 C9                                   ret
 106+ E313
 107+ E313              l2_point_pixel_y_safe:	MACRO
 108+ E313 ~            						push	hl
 109+ E313 ~            						push	bc
 110+ E313 ~            						call	l2_plot_pixel
 111+ E313 ~            						pop		bc
 112+ E313 ~            						pop		hl
 113+ E313              						ENDM
 114+ E313
# file closed: ./Layer2Graphics/layer2_plot_pixel.asm
 849  E313                  INCLUDE "./Layer2Graphics/layer2_print_character.asm"
# file opened: ./Layer2Graphics/layer2_print_character.asm
   1+ E313
   2+ E313              l2_print_chr_at:
   3+ E313              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
   4+ E313              ; "Need a version that also prints absence of character"
   5+ E313 7A           	ld		a,d
   6+ E314 FE 20        	cp		32
   7+ E316 38 3F        	jr		c,.InvalidCharacter		; Must be between 32 and 127
   8+ E318 FE 7F        	cp		127
   9+ E31A 30 3B        	jr		nc,.InvalidCharacter
  10+ E31C              .ValidCharater:
  11+ E31C 26 00        	ld		h,0
  12+ E31E 6A           	ld		l,d
  13+ E31F 29           	add		hl,hl						; * 2
  14+ E320 29           	add		hl,hl						; * 4
  15+ E321 29           	add		hl,hl						; * 8 to get byte address
  16+ E322 ED 34 00 3C  	add		hl,charactersetaddr			; hl = address of rom char
  17+ E326 04           	inc		b							; start + 1 pixel x and y as we only print 7x7
  18+ E327 23           	inc		hl							; skip first byte
  19+ E328 16 07        	ld		d,7
  20+ E32A              .PrintCharLoop:
  21+ E32A D5           	push	de
  22+ E32B 7E           	ld		a,(hl)
  23+ E32C FE 00        	cp		0
  24+ E32E 28 21        	jr		z,.NextRowNoBCPop
  25+ E330              .PrintARow:
  26+ E330 C5           	push	bc							; save row col
  27+ E331 16 07        	ld		d,7							; d is loop row number now
  28+ E333              .PrintPixelLoop:
  29+ E333 0C           	inc		c							; we start at col 1 not 0 so can move inc here
  30+ E334              .PrintTheRow:
  31+ E334 CB 27        	sla		a							; scroll char 1 pixel as we read from bit 7
  32+ E336 F5           	push	af							; save character byte
  33+ E337 CB 7F        	bit		7,a							; If left most pixel set then plot
  34+ E339 20 04        	jr		nz,.PixelToPrint
  35+ E33B              .NoPixelToPrint:
  36+ E33B 3E E3        	ld		a,$E3
  37+ E33D 18 01        	jr		.HaveSetPixelColour
  38+ E33F              .PixelToPrint:
  39+ E33F 7B           	ld		a,e							; Get Colour
  40+ E340              .HaveSetPixelColour
  41+ E340 E5           	push	hl
  42+ E341              ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
  43+ E341              .BankOnFirstOnly:
  44+ E341 F5           	push	af
  45+ E342 7A           	ld		a,d
  46+ E343 FE 07        	cp		7
  47+ E345 28 11        	jr		z,.PlotWithBank
  48+ E347              .PlotNoBank:
  49+ E347 F1           	pop		af
  50+ E348 60           	ld 		h,b								; hl now holds ram address after bank select
  51+ E349 69           	ld 		l,c
  52+ E34A 77           	ld 		(hl),a
  53+ E34B              .IterateLoop:
  54+ E34B              ;	pop		bc
  55+ E34B E1           	pop		hl
  56+ E34C F1           	pop		af							; a= current byte shifted
  57+ E34D 15           	dec		d						 	; do dec after inc as we amy
  58+ E34E 20 E3        	jr		nz,.PrintPixelLoop
  59+ E350              .NextRow:
  60+ E350 C1           	pop		bc							; Current Col Row
  61+ E351              .NextRowNoBCPop:
  62+ E351 D1           	pop		de							; d= row loop
  63+ E352 04           	inc		b							; Down 1 row
  64+ E353 23           	inc		hl							; Next character byte
  65+ E354 15           	dec		d							; 1 done now
  66+ E355 20 D3        	jr		nz,.PrintCharLoop
  67+ E357              .InvalidCharacter:
  68+ E357 C9           	ret
  69+ E358              .PlotWithBank:
  70+ E358 F1           	pop		af
  71+ E359 CD B6 E2     	call	l2_plot_pixel				; This will shift bc to poke row
  72+ E35C 18 ED        	jr		.IterateLoop
  73+ E35E
  74+ E35E              l2_print_at:
  75+ E35E              ; "l2_print_at bc= colrow, hl = addr of message, e = colour"
  76+ E35E              ; "No error trapping, if there is no null is will just cycle on the line"
  77+ E35E 7E           	ld	a,(hl)							; Return if empty string
  78+ E35F FE 00        	cp	0
  79+ E361 C8           	ret	z
  80+ E362 E5           	push	hl
  81+ E363 D5           	push	de
  82+ E364 C5           	push	bc
  83+ E365 57           	ld		d,a							; bc = pos, de = char and colour
  84+ E366 CD 13 E3     	call 	l2_print_chr_at
  85+ E369 C1           	pop		bc
  86+ E36A D1           	pop		de
  87+ E36B E1           	pop		hl
  88+ E36C              .Move8Pixlestoright:
  89+ E36C 08           	ex		af,af'
  90+ E36D 79           	ld		a,c
  91+ E36E C6 08        	add		8
  92+ E370 4F           	ld		c,a
  93+ E371 08           	ex		af,af'
  94+ E372 23           	inc		hl
  95+ E373 18 E9        	jr		l2_print_at					; Just loop until 0 found
  96+ E375
  97+ E375
  98+ E375              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
  99+ E375              ; "Need a version that also prints absence of character"
 100+ E375              ; removed blank line optimisation as we need spaces printed
 101+ E375 7A           l2_print_7chr_at:       ld		a,d
 102+ E376 FE 1F                                cp		31
 103+ E378 38 3D                                jr		c,.InvalidCharacter		; Must be between 32 and 127
 104+ E37A FE 7F                                cp		127
 105+ E37C 30 39                                jr		nc,.InvalidCharacter
 106+ E37E 26 00        .ValidCharater:         ld		h,0
 107+ E380 6A                                   ld		l,d
 108+ E381 29                                   add		hl,hl						; * 2
 109+ E382 29                                   add		hl,hl						; * 4
 110+ E383 29                                   add		hl,hl						; * 8 to get byte address
 111+ E384 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
 112+ E388 04                                   inc		b							; start + 1 pixel x and y as we only print 7x7
 113+ E389 23                                   inc		hl							; skip first byte
 114+ E38A 16 07                                ld		d,7
 115+ E38C D5           .PrintCharLoop:         push	de
 116+ E38D 7E                                   ld		a,(hl)
 117+ E38E                                      ;cp		0
 118+ E38E                                      ;jr		z,.NextRowNoBCPop
 119+ E38E C5           .PrintARow:             push	bc							; save row col
 120+ E38F 16 06                                ld		d,6							; d is loop row number now
 121+ E391 0C           .PrintPixelLoop:        inc		c							; we start at col 1 not 0 so can move inc here
 122+ E392 28 1C                                jr		z,.NextRow
 123+ E394 CB 27                                sla		a							; scroll char 1 pixel as we read from bit 7
 124+ E396 F5                                   push	af							; save character byte
 125+ E397 CB 7F                                bit		7,a							; If left most pixel set then plot
 126+ E399 20 04                                jr		nz,.PixelToPrint
 127+ E39B 3E E3        .NoPixelToPrint:        ld		a,$E3
 128+ E39D 18 01                                jr		.HaveSetPixelColour
 129+ E39F 7B           .PixelToPrint:          ld		a,e							; Get Colour
 130+ E3A0 E5           .HaveSetPixelColour		push	hl
 131+ E3A1                                      ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
 132+ E3A1 F5           .BankOnFirstOnly:       push	af
 133+ E3A2 7A                                   ld		a,d
 134+ E3A3 FE 06                                cp		6
 135+ E3A5 28 11                                jr		z,.PlotWithBank
 136+ E3A7 F1           .PlotNoBank:            pop		af
 137+ E3A8 60                                   ld 		h,b								; hl now holds ram address after bank select
 138+ E3A9 69                                   ld 		l,c
 139+ E3AA 77                                   ld 		(hl),a
 140+ E3AB              .IterateLoop:	        ;	pop		bc
 141+ E3AB E1                                   pop		hl
 142+ E3AC F1                                   pop		af							; a= current byte shifted
 143+ E3AD 15                                   dec		d						 	; do dec after inc as we amy
 144+ E3AE 20 E1                                jr		nz,.PrintPixelLoop
 145+ E3B0 C1           .NextRow:               pop		bc							; Current Col Row
 146+ E3B1 D1           .NextRowNoBCPop:	    pop		de							; d= row loop
 147+ E3B2 04                                   inc		b							; Down 1 row
 148+ E3B3 23                                   inc		hl							; Next character byte
 149+ E3B4 15                                   dec		d							; 1 done now
 150+ E3B5 20 D5                                jr		nz,.PrintCharLoop
 151+ E3B7 C9           .InvalidCharacter:      ret
 152+ E3B8 F1           .PlotWithBank:          pop		af
 153+ E3B9 CD B6 E2                             call	l2_plot_pixel				; This will shift bc to poke row
 154+ E3BC 18 ED                                jr		.IterateLoop
 155+ E3BE
 156+ E3BE              ; "l2_print_7at bc= colrow, hl = addr of message, e = colour"
 157+ E3BE              ; "No error trapping, if there is no null is will just cycle on the line"
 158+ E3BE 7E           l2_print_7at:           ld	a,(hl)							; Return if empty string
 159+ E3BF FE 00                                cp	0
 160+ E3C1 C8                                   ret	z
 161+ E3C2 E5                                   push	hl
 162+ E3C3 D5                                   push	de
 163+ E3C4 C5                                   push	bc
 164+ E3C5 57                                   ld		d,a							; bc = pos, de = char and colour
 165+ E3C6 CD 75 E3                             call 	l2_print_7chr_at
 166+ E3C9 C1                                   pop		bc
 167+ E3CA D1                                   pop		de
 168+ E3CB E1                                   pop		hl
 169+ E3CC 08           .Move7Pixlestoright:	ex		af,af'
 170+ E3CD 79                                   ld		a,c
 171+ E3CE C6 07                                add		7
 172+ E3D0 4F                                   ld		c,a
 173+ E3D1 08                                   ex		af,af'
 174+ E3D2 23                                   inc		hl
 175+ E3D3 18 E9                                jr		l2_print_7at					; Just loop until 0 found
 176+ E3D5
 177+ E3D5
 178+ E3D5              ; "l2_print_7at b= row, hl = col de = addr of message, c = colour"
 179+ E3D5              ; "No error trapping, if there is no null is will just cycle on the line"
 180+ E3D5
 181+ E3D5 1A           l2_print_7at_320:       ld	a,(de)							; Return if empty string
 182+ E3D6 FE 00                                cp	0
 183+ E3D8 C8                                   ret	z
 184+ E3D9 E5 D5 C5                             push	hl,,de,,bc
 185+ E3DC 57                                   ld		d,a							; bc = pos, de = char and colour
 186+ E3DD                                      ;TODOcallcall 	l2_print_7chr_at_320
 187+ E3DD C1 D1 E1                             pop		hl,,de,,bc
 188+ E3E0 08           .Move7Pixlestoright:	ex		af,af'
 189+ E3E1 79                                   ld		a,c
 190+ E3E2 C6 07                                add		7
 191+ E3E4 4F                                   ld		c,a
 192+ E3E5 08                                   ex		af,af'
 193+ E3E6 23                                   inc		hl
 194+ E3E7 18 EC                                jr		l2_print_7at_320		    ; Just loop until 0 found
 195+ E3E9
 196+ E3E9
# file closed: ./Layer2Graphics/layer2_print_character.asm
 850  E3E9                  INCLUDE "./Layer2Graphics/layer2_draw_box.asm"
# file opened: ./Layer2Graphics/layer2_draw_box.asm
   1+ E3E9              ; "l2_draw_thick_box bc=rowcol, de=heightwidth h=color"
   2+ E3E9              ; TODO DMA Optimise
   3+ E3E9                              DISPLAY "TODO: dma optimise"
   4+ E3E9 C5 D5 E5     l2_draw_fill_box:       push    bc,,de,,hl
   5+ E3EC 53                                   ld      d,e
   6+ E3ED 5C                                   ld      e,h
   7+ E3EE CD 84 E4                             call    l2_draw_horz_line           ; "bc = left side row,col, d = length, e = color"
   8+ E3F1 E1 D1 C1                             pop     bc,,de,,hl
   9+ E3F4 04                                   inc     b
  10+ E3F5 15                                   dec     d
  11+ E3F6 C8                                   ret     z
  12+ E3F7 18 F0                                jr      l2_draw_fill_box
  13+ E3F9
  14+ E3F9              ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
  15+ E3F9 C5 D5 F5     l2_draw_box:            push	bc,,de,,af
  16+ E3FC 53                                   ld		d,e
  17+ E3FD 5F                                   ld		e,a
  18+ E3FE 14                                   inc		d
  19+ E3FF CD 84 E4                             call	l2_draw_horz_line
  20+ E402 F1 D1 C1                             pop		bc,,de,,af
  21+ E405 C5 D5 F5     .bottomhorzline:	    push	bc,,de,,af
  22+ E408 67                                   ld		h,a							;save color whilst b = row + height
  23+ E409 78                                   ld		a,b
  24+ E40A 82                                   add		a,d
  25+ E40B 47                                   ld		b,a
  26+ E40C 53                                   ld		d,e							; d = width
  27+ E40D 14                                   inc		d							; Extra pixel for width
  28+ E40E 5C                                   ld		e,h							; e = colour
  29+ E40F CD 84 E4                             call	l2_draw_horz_line
  30+ E412 F1 D1 C1                             pop		bc,,de,,af
  31+ E415 C5 D5 F5     .leftvertline:          push	bc,,de,,af
  32+ E418 04                                   inc		b							; save 2 pixles
  33+ E419 15                                   dec		d
  34+ E41A 5F                                   ld		e,a							; e = color
  35+ E41B CD EF E4                             call	l2_draw_vert_line
  36+ E41E F1 D1 C1                             pop		bc,,de,,af
  37+ E421 04           .rightvertline:         inc		b							; save 2 pixles
  38+ E422 15                                   dec		d
  39+ E423 67                                   ld		h,a							;save color whilst c = col + width
  40+ E424 79                                   ld		a,c
  41+ E425 83                                   add		a,e
  42+ E426 4F                                   ld		c,a
  43+ E427 5C                                   ld		e,h							; e = color
  44+ E428 CD EF E4                             call	l2_draw_vert_line
  45+ E42B C9                                   ret
  46+ E42C
  47+ E42C              ; "b = row, hl = col, c = height, de = width, a = colour"
  48+ E42C C5 D5 E5 F5  l2_draw_box_320:        push    bc,,de,,hl,,af
  49+ E430                                      ;TODOcall    l2_draw_horz_line_320       ; b = row, hl = col, e = width a = colour
  50+ E430 F1 E1 D1 C1                          pop     bc,,de,,hl,,af
  51+ E434 C5 D5 E5 F5                          push    bc,,de,,hl,,af
  52+ E438 08                                   ex      af,af'
  53+ E439 78                                   ld      a,b
  54+ E43A 3D                                   dec     a
  55+ E43B 81                                   add     a,c
  56+ E43C 41                                   ld      b,c
  57+ E43D 08                                   ex      af,af'
  58+ E43E                                      ;TODOcall    l2_draw_horz_line_320       ; b = row, hl = col, e = width a = colour
  59+ E43E F1 E1 D1 C1  .leftVertLine:          pop     bc,,de,,hl,,af
  60+ E442 C5 D5 E5 F5                          push    bc,,de,,hl,,af
  61+ E446                                      ;TODOcall    l2_draw_vert_line_320
  62+ E446 F1 E1 D1 C1                          pop     bc,,de,,hl,,af
  63+ E44A 19                                   add     hl,de
  64+ E44B 2B                                   dec     hl
  65+ E44C                                      ;TODOcall    l2_draw_vert_line_320
  66+ E44C C9                                   ret
  67+ E44D
# file closed: ./Layer2Graphics/layer2_draw_box.asm
 851  E44D                  INCLUDE "./Layer2Graphics/asm_l2_plot_horizontal.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_horizontal.asm
   1+ E44D
   2+ E44D              ;; NOTE DMA is little endian
   3+ E44D 00           l2_horz_pixel           DB 0
   4+ E44E
   5+ E44E 83 C3 C7 CB  l2_horz_line            DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E452 7D
   6+ E453 4D E4        l2_horz_colr            DW l2_horz_pixel
   7+ E455 00           l2_horz_lenlo           DB 0
   8+ E456 00           l2_horz_lenhi           DB 0
   9+ E457 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY, DMA_WR2_P2INC_MEMORY, DMA_WR4_CONT_MODE
  10+ E45A 00 00        l2_horz_target          DB $00, $00
  11+ E45C CF 87                                DB DMA_LOAD, DMA_ENABLE
  12+ E45E              l2_horz_cmd_len	        EQU $ - l2_horz_line
  13+ E45E
  14+ E45E
  15+ E45E              ; "l2_draw_horz_dma"
  16+ E45E              ; "plot at bc for length d colour e using dma, assumes bank already selected"
  17+ E45E 7B           l2_draw_horz_dma:       ld		a,e                                               ; T=4      ;
  18+ E45F 32 4D E4                             ld		(l2_horz_pixel),a                                 ; T=13     ;
  19+ E462 5A                                   ld      e,d ; saved 3 t states ld		a,d                                               ; T=4      ; e=d   4
  20+ E463 16 00                                ld      d,0; saved 3 t states ld 		(l2_horz_lenlo),a                                 ; T=13     ; d = 0  7
  21+ E465 ED 53 55 E4                          ld      (l2_horz_lenlo),de; saved 3 t states xor 	a                                                 ; T=4      ; t 20  31
  22+ E469                                      ; saved 3 t states ld ld 		(l2_horz_lenhi),a                                 ; T=13     ;
  23+ E469                                    ; saved 4 t states  ld		h,b                           ;          ;
  24+ E469                                    ; saved 4 t states  ld		l,c                           ;          ;
  25+ E469 ED 43 5A E4                          ld      (l2_horz_target),bc ; saved 4 t states  was , hl  ; T=20     ;
  26+ E46D 21 4E E4     .write_dma:             ld 		hl, l2_horz_line                                  ;          ;
  27+ E470 06 10                                ld 		b, l2_horz_cmd_len                                ;
  28+ E472 0E 6B                                ld		c,IO_DATAGEAR_DMA_PORT                            ;
  29+ E474 ED B3                                otir                                                      ;
  30+ E476 C9                                   ret
  31+ E477
  32+ E477              ; "bc = left side row,col, d = length, e = color"
  33+ E477 D5           l2_draw_horz_dma_bank:  push 	de							; save length and colour
  34+ E478 C5                                   push 	bc							; save row col
  35+ E479 78                                   ld   	a,b
  36+ E47A CD 68 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  37+ E47D C1                                   pop  	bc
  38+ E47E 47                                   ld	 	b,a	       					; fixed row by the call we can go straight into HL with row col
  39+ E47F D1                                   pop  	de							; get length back
  40+ E480 CD 5E E4                             call    l2_draw_horz_dma
  41+ E483 C9                                   ret
  42+ E484
  43+ E484              ; "l2_draw_horz_line"
  44+ E484              ; "bc = left side row,col, d = length, e = color"
  45+ E484              ; "optimisation if above min pix is will use dma call SCREEN_HOZ_MIN_PIX not implemented yet"
  46+ E484 7A           l2_draw_horz_line:      ld		a,d
  47+ E485 FE 00                                cp 		0							; if its zero length then just return
  48+ E487 C8           .zerolengthexit:        ret		z
  49+ E488 FE 01        .isitlen1:              cp 		1
  50+ E48A CA AC E4                             jp 		z,.l2_draw_horz_line_1
  51+ E48D FE 0A        .longenoughtfordma:     cp  10
  52+ E48F C3 77 E4                             jp  l2_draw_horz_dma_bank
  53+ E492 D5 C5        .plottableline:         push 	de,,bc  					; save length and colour an d row col
  54+ E494 78                                   ld   	a,b
  55+ E495 CD 68 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  56+ E498 C1                                   pop  	bc
  57+ E499 67                                   ld	 	h,a	       					; fixed row by the call we can go straight into HL with row col
  58+ E49A 69                                   ld   	l,c
  59+ E49B D1                                   pop  	de							; get length back
  60+ E49C 79           .cliptest:              ld	 	a,c							; get column + length
  61+ E49D 42                                   ld  	b,d  						; speculate that we don't clip by pre-loading b with length
  62+ E49E 82                                   add  	a,d
  63+ E49F 30 06                                jr   	nc, .l2_draw_horz_plot_loop	; if carry is set c+d > 255
  64+ E4A1 3E FF        .clipat255:             ld   	a,$FF
  65+ E4A3 91                                   sub  	c							; a holds clipped length
  66+ E4A4 47                                   ld 		b, a 						; so now hl holds poke address  b = clipped length e = colour
  67+ E4A5 18 00                                jr		.l2_draw_horz_plot_loop
  68+ E4A7 73           .l2_draw_horz_plot_loop:ld (hl),e							; loop poking hl with e for b pixels
  69+ E4A8 23                                   inc hl
  70+ E4A9 10 FC                                djnz .l2_draw_horz_plot_loop
  71+ E4AB C9                                   ret
  72+ E4AC 7B           .l2_draw_horz_line_1:   ld		a,e
  73+ E4AD                                      l2_plot_macro; jp		l2_plot_pixel				; hijack return
  73+ E4AD 78          >                        ld      a,b
  73+ E4AE             >                        JumpIfAGTENusng 192 ,.NoPlot
  73+ E4AE FE C0       >                        cp     192
  73+ E4B0 D2 BC E4    >                        jp		nc,.NoPlot
  73+ E4B3 69          >                        ld      l,c
  73+ E4B4 CD 68 E0    >                        call    asm_l2_row_bank_select
  73+ E4B7 67          >                        ld      h,a
  73+ E4B8 3A B5 E2    >                        ld      a,(line_gfx_colour)
  73+ E4BB 77          >                        ld      (hl),a
  73+ E4BC             >.NoPlot:
  74+ E4BC C9                                   ret
  75+ E4BD
  76+ E4BD
  77+ E4BD              ; "l2_draw_horz_line_to"
  78+ E4BD              ; "bc = left side row,col, d right pixel, e = color"
  79+ E4BD 7A           l2_draw_horz_line_to:   ld 		a,d
  80+ E4BE B9                                   cp 		c
  81+ E4BF 30 04                                jr		nc, .noswap
  82+ E4C1 28 07                                jr      z, .singlepixel
  83+ E4C3 51           .swap:                  ld		d,c
  84+ E4C4 4F                                   ld		c,a
  85+ E4C5 7A           .noswap:                ld		a,d
  86+ E4C6 91                                   sub		c
  87+ E4C7              ;                        dec		a							; so now its length not offset
  88+ E4C7 57                                   ld		d,a
  89+ E4C8 18 BA                                jr 		l2_draw_horz_line			; hijack routine and return statements
  90+ E4CA 7B           .singlepixel:           ld		a,e
  91+ E4CB                                      l2_plot_macro; jp		l2_plot_pixel				; hijack return
  91+ E4CB 78          >                        ld      a,b
  91+ E4CC             >                        JumpIfAGTENusng 192 ,.NoPlot
  91+ E4CC FE C0       >                        cp     192
  91+ E4CE D2 DA E4    >                        jp		nc,.NoPlot
  91+ E4D1 69          >                        ld      l,c
  91+ E4D2 CD 68 E0    >                        call    asm_l2_row_bank_select
  91+ E4D5 67          >                        ld      h,a
  91+ E4D6 3A B5 E2    >                        ld      a,(line_gfx_colour)
  91+ E4D9 77          >                        ld      (hl),a
  91+ E4DA             >.NoPlot:
  92+ E4DA C9                                   ret
  93+ E4DB
# file closed: ./Layer2Graphics/asm_l2_plot_horizontal.asm
 852  E4DB                  INCLUDE "./Layer2Graphics/asm_l2_plot_vertical.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_vertical.asm
   1+ E4DB              ; ">l2_draw_vert_segment"
   2+ E4DB              ; ">hl = bank adjusted pixel poke address d = length, e = color"
   3+ E4DB              ; ">will always clip once h = 64 even if length > 64 destroys a and hl, d = resudual length not plotted"
   4+ E4DB 7A           l2_draw_vert_segment:   ld		a,d
   5+ E4DC FE 00        .emptylinecheck:	    cp 		0
   6+ E4DE C8                                   ret		z
   7+ E4DF FE 01        .justonepixel	        cp		1
   8+ E4E1 20 02                                jr		nz, .multiplepixelsLoop
   9+ E4E3 73                                   ld		(hl),e
  10+ E4E4 C9                                   ret
  11+ E4E5              .multiplepixelsLoop:
  12+ E4E5 7C           .endofbankcheck:        ld   	a,h
  13+ E4E6 FE 40                                cp   	64
  14+ E4E8 D0                                   ret		nc							; check before we poke data if we have hit a boundary
  15+ E4E9 73           .canplotapixel:         ld   	(hl),e						; set colour
  16+ E4EA 24                                   inc 	h							; we don't check here else we would need a dec d on ret could do for optimisation of loop though
  17+ E4EB 15                                   dec		d
  18+ E4EC C8                                   ret		z
  19+ E4ED 18 F6                                jr		.multiplepixelsLoop
  20+ E4EF
  21+ E4EF              ; ">l2_draw_vert_line"
  22+ E4EF              ; ">bc = row col d = length, e = color"
  23+ E4EF 78           l2_draw_vert_line:      ld 		a,b
  24+ E4F0 FE C0        .offscreencheck:        cp 		SCREEN_HEIGHT
  25+ E4F2 D0                                   ret 	nc							; can't start off the screen
  26+ E4F3 7A           .emptylinecheck:        ld		a,d
  27+ E4F4 FE 00                                cp		0
  28+ E4F6 C8                                   ret		z
  29+ E4F7 FE 01                                cp		1
  30+ E4F9 20 10                                jr		nz,.multiplepixels
  31+ E4FB              .itsonepixel:           l2_plot_macro; call	l2_plot_pixel
  31+ E4FB 78          >                        ld      a,b
  31+ E4FC             >                        JumpIfAGTENusng 192 ,.NoPlot
  31+ E4FC FE C0       >                        cp     192
  31+ E4FE D2 0A E5    >                        jp		nc,.NoPlot
  31+ E501 69          >                        ld      l,c
  31+ E502 CD 68 E0    >                        call    asm_l2_row_bank_select
  31+ E505 67          >                        ld      h,a
  31+ E506 3A B5 E2    >                        ld      a,(line_gfx_colour)
  31+ E509 77          >                        ld      (hl),a
  31+ E50A             >.NoPlot:
  32+ E50A C9                                   ret
  33+ E50B              .multiplepixels:						; so now we have at least 2 pixels to plot
  34+ E50B 7A           .clipto192:             ld		a,d							; get length
  35+ E50C 80                                   add		a,b							; a= row + length
  36+ E50D 38 04                                jr		c,.needtoclip				; if it was > 255 then there is a definite need
  37+ E50F FE C0                                cp		SCREEN_HEIGHT
  38+ E511 38 08                                jr		c, .noclipneeded
  39+ E513 78           .needtoclip             ld		a,b
  40+ E514 82                                   add		a,d
  41+ E515 D6 C0                                sub		SCREEN_HEIGHT
  42+ E517 67                                   ld		h,a							; use h as a temp holding for (row + length) - 192
  43+ E518 7A                                   ld		a,d
  44+ E519 94                                   sub		h
  45+ E51A 57                                   ld		d,a							; d = length - ((row + length) - 192)
  46+ E51B              ; so now BC = row col, d = length clipped, e = color
  47+ E51B 78           .noclipneeded:          ld		a,b
  48+ E51C C5 D5                                push	bc,,de
  49+ E51E CD 68 E0                             call 	asm_l2_row_bank_select
  49+ E521               	 	; we now have poke address and a variable holding current bank number
  50+ E521 D1 C1                                pop		bc,,de
  51+ E523 67                                   ld		h,a							; b now tolds target pixel for first plot
  52+ E524 69                                   ld		l,c  						; and c holds pixel column for plotting
  53+ E525 CD DB E4                             call 	l2_draw_vert_segment		; draw seg, d = pixels remaining
  54+ E528 7A                                   ld		a,d							; a and d = nbr pixels remaining
  55+ E529 FE 00                                cp		0
  56+ E52B 28 27                                jr		z, .doneplotting
  57+ E52D 3A 00 E0     .anotherbank:           ld		a, (varL2_BANK_SELECTED)
  58+ E530 3C                                   inc		a
  59+ E531 06 00                                ld		b,0
  60+ E533 C5 D5                                push	bc,,de
  61+ E535 CD 51 E0                             call 	asm_l2_bank_n_select
  62+ E538 D1 C1                                pop     bc,,de
  63+ E53A 60                                   ld		h,b							; b now tolds target pixel for first plot
  64+ E53B 69                                   ld		l,c  						; and c holds pixel column for plotting
  65+ E53C CD DB E4                             call	l2_draw_vert_segment
  66+ E53F 7A                                   ld		a,d
  67+ E540 FE 00                                cp		0
  68+ E542 28 10                                jr		z,.doneplotting
  69+ E544 3A 00 E0     .yetanotherbank:        ld		a, (varL2_BANK_SELECTED)
  70+ E547 3C                                   inc		a
  71+ E548 06 00                                ld		b,0
  72+ E54A C5 D5                                push	bc,,de
  73+ E54C CD 51 E0                             call 	asm_l2_bank_n_select
  74+ E54F D1                                   pop		de
  75+ E550 E1                                   pop		hl							; hl = bc
  76+ E551 CD DB E4                             call	l2_draw_vert_segment		; we have now hit 192 pixels so done
  77+ E554 C9           .doneplotting:	        ret
  78+ E555
  79+ E555              ; ">l2_draw_vert_line_to"
  80+ E555              ; ">bc = row col d = to position, e = color"
  81+ E555 78           l2_draw_vert_line_to:   ld		a,b
  82+ E556 BA                                   cp		d
  83+ E557 38 02                                jr		c, .noyswap
  84+ E559 42           .yswap:                 ld		b,d			; Swap round row numbers so we are always incrementing
  85+ E55A 57                                   ld		d,a			; now we have a top to bottom to we we can calc length from bc
  86+ E55B 7A           .noyswap:               ld		a,d 		; we still may have d in a but only if it was bottom to top
  87+ E55C 90                                   sub		b
  88+ E55D 3C                                   inc		a			; so now its length not offset
  89+ E55E 57                                   ld		d,a
  90+ E55F 18 8E                                jr		l2_draw_vert_line	; we can hijack its clipping, 0 check and return logic
  91+ E561                                      ; no return needed
  92+ E561
# file closed: ./Layer2Graphics/asm_l2_plot_vertical.asm
 853  E561                  INCLUDE "./Layer2Graphics/layer2_plot_diagonal.asm"
# file opened: ./Layer2Graphics/layer2_plot_diagonal.asm
   1+ E561
   2+ E561              l2_draw_box_to:
   3+ E561              ; ">l2_draw_box_to bc=rowcol, de=torowcol a=color"
   4+ E561              ; ">NOT IMPLEMENTED YET"
   5+ E561 C9           	ret
   6+ E562
   7+ E562              ;; Note l2stepx is done via self modifying code rather than an if for speed
   8+ E562              ;; l2stepx1 and l2stepx2 are the addresses to stick the inc or dec in
   9+ E562              l2incbcstep EQU $03
  10+ E562              l2incbstep	EQU	$04
  11+ E562              l2decbstep	EQU $05
  12+ E562              l2decbcstep EQU $0B
  13+ E562              l2deccstep	EQU $0D
  14+ E562              l2inccstep	EQU	$0C
  15+ E562              l2incdestep EQU $13
  16+ E562              l2decdestep EQU $1B
  17+ E562              l2inchlstep EQU $23
  18+ E562              l2dechlstep EQU $2B
  19+ E562              		; l2 deltas are signed
  20+ E562 00 00        l2deltaY	DW	0
  21+ E564 00 00        l2deltaX	DW	0
  22+ E566 00           l2deltaYsq	db	0
  23+ E567 00           l2deltaXsq	db	0
  24+ E568 00           l2deltaYn	db	0
  25+ E569 00           l2deltaXn	db	0
  26+ E56A 00           l2deltaYsqn	db	0
  27+ E56B 00           l2deltaXsqn	db	0
  28+ E56C 00           l2linecolor	db	0
  29+ E56D 00 00        l2fraction	dw	0
  30+ E56F 00 00        l2e2		dw	0
  31+ E571 00           l2way		db	0
  32+ E572 00 00        l2targetPtr	dw	0
  33+ E574              ;; These arrays should be 192 but if we use 256 then getting array2 value is just inc h rather than indexing again.
  34+ E574 00 00 00...  l2targetArray1 ds	256
  35+ E674 00 00 00...  l2targetArray2 ds	256
  36+ E774              ;; Using Bresenham Algorithm draw a diagonal line top to bottom. First we must sort of course
  37+ E774              ;;plotLine(int x0, int y0, int x1, int y1)
  38+ E774              ;;    dx =  abs(x1-x0);
  39+ E774              ;;    sx = x0<x1 ? 1 : -1;
  40+ E774              ;;    dy = -abs(y1-y0);
  41+ E774              ;;    sy = y0<y1 ? 1 : -1;
  42+ E774              ;;    err = dx+dy;  /* error value e_xy */
  43+ E774              ;;    while (true)   /* loop */
  44+ E774              ;;        plot(x0, y0);
  45+ E774              ;;        if (x0==x1 && y0==y1) break;
  46+ E774              ;;        e2 = 2*err;
  47+ E774              ;;        if (e2 >= dy) /* e_xy+e_x > 0 */
  48+ E774              ;;            err += dy;
  49+ E774              ;;            x0 += sx;
  50+ E774              ;;        end if
  51+ E774              ;;        if (e2 <= dx) /* e_xy+e_y < 0 */
  52+ E774              ;;            err += dx;
  53+ E774              ;;            y0 += sy;
  54+ E774              ;;        end if
  55+ E774              ;;    end while
  56+ E774              ; ">l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
  57+ E774              ; ">hl will be either l2targetArray1 or 2"
  58+ E774              ; For S15 version we can still use the current table as this will hold final fill data
  59+ E774              ; but we have to come in with X1Y1 X2Y2 being 16 bit
  60+ E774              ; if the Y1Y2 are both off same side of screen or X1X2 both off same side them line array is set as empty
  61+ E774              ; so
  62+ E774              ;       for each line from Y1 to Y2
  63+ E774              ;           if calculate as normal
  64+ E774              ;                if off screen we don't write
  65+ E774              ;                if on screen we clip to 0,255  which is easy as a horizontal line
  66+ E774              ;           we will need a special case were a line is not rendered    we have x1=255 and X1 = 0, i.e. they are flipped
  67+ E774              ;              we could also cheat and say view port as 1 pixel edge border so we can count x1 = 0 as no line
  68+ E774
  69+ E774              ; This must be called with  Y1 < Y2 as we won;t do a pre check
  70+ E774              ; Caulates the temp x. IY [01] = X1 [23]=Y1 [45]=X2 [67]=Y2 [89]=midY3
  71+ E774              ; Draw a line from BC to DE, with target Y position in a, all values must be 2's C at this points
  72+ E774              ; calculate deltaX, deltaY for line.
  73+ E774              ; calculate offsetY = TargetY - Y1
  74+ E774              ; calculate XTarget = X1 + (deltaX/deltaY) *  offsetY
  75+ E774              ;;;l2DiagDeltaX    DW 0
  76+ E774              ;;;l2_diagonal_getx:       ld		hl,0                            ;
  77+ E774              ;;;                        ld      ixh,0                           ; flag byte clear
  78+ E774              ;;;                        ld      (target_y),a                    ; save target
  79+ E774              ;;;.calculateDeltaX:       ld      hl,(IY+4)
  80+ E774              ;;;                        ld      de,(IY+0)
  81+ E774              ;;;                        ClearCarryFlag
  82+ E774              ;;;                        sbc     hl,de
  83+ E774              ;;;                        ld      (l2DiagDeltaX),hl
  84+ E774              ;;;.calculateDeltaY:       ld      hl,(IY+6)
  85+ E774              ;;;                        ld      de,(IY+2)
  86+ E774              ;;;                        ClearCarryFlag
  87+ E774              ;;;                        sbc     hl,de
  88+ E774              ;;;                        ld      (l2DiagDeltaY),hl
  89+ E774              ;;;.ABSDx:                 ld      hl,(l2DiagDeltaX)
  90+ E774              ;;;                        ld      a,h
  91+ E774              ;;;                        and     $80
  92+ E774              ;;;                        jr      nz,.DxPositive
  93+ E774              ;;;.DxNegative:            macronegate16hl
  94+ E774              ;;;.DxPositive:            ex      de,hl                               ; de = deltaX
  95+ E774              ;;;                        ld      hl,(l2DiagDeltaY)
  96+ E774              ;;;                        ld      a,h
  97+ E774              ;;;                        and     $80
  98+ E774              ;;;                        jr      nz,.DyPositive
  99+ E774              ;;;.DyNegative:            macronegate16hl
 100+ E774              ;;;.DyPositive:
 101+ E774              ;;;.ScaleLoop:             ld      a,h                                 ; At this point DX and DY are ABS values
 102+ E774              ;;;                        or      d                                   ; .
 103+ E774              ;;;                        jr      z,.ScaleDone                        ; .
 104+ E774              ;;;                        ShiftDERight1                               ; .
 105+ E774              ;;;                        ShiftHLRight1                               ; .
 106+ E774              ;;;                        jr      .ScaleLoop                          ; scaled down Dx and Dy to 8 bit, Dy may have been;;                                                                                               negative
 107+ E774              ;;;.ScaleDone:             ; hl = ABS DY, DE = ABS DX,  bc = Y1, ix = Y2,   note H and D will be zero
 108+ E774              ;;;.CalculateDelta:        ld      a,e                                 ; if DX < DY goto DX/DY
 109+ E774              ;;;                        JumpIfALTNusng l,.DXdivDY                   ; else do DY/DX
 110+ E774              ;;;.DYdivDX:               ld      a,l                                 ;    A = DY
 111+ E774              ;;;                        ld      d,e                                 ;    D = DX
 112+ E774              ;;;                        call    AEquAmul256DivD                     ;    A = R = 256 * DY / DX
 113+ E774              ;;;.SaveGradientDYDX:      ld      (Gradient),a
 114+ E774              ;;;                        ld      a,ixh
 115+ E774              ;;;                        or      16
 116+ E774              ;;;                        ld      ixh,a                               ;
 117+ E774              ;;;                        jp      .ClipP1                             ;
 118+ E774              ;;;.DXdivDY:               ld      a,e                                 ;    A = DX
 119+ E774              ;;;                        ld      d,l                                 ;    D = DY
 120+ E774              ;;;                        call    AEquAmul256DivD                     ;    A = R = 256 * DX / DY
 121+ E774              ;;;.SaveGradientDXDY:      ld      (Gradient),a
 122+ E774              ;;;
 123+ E774              ;;;have X1 -> X
 124+ E774              ;;;need deltaMidY = MidY - Y0
 125+ E774              ;;;                        X0 + (DeltaMY * Gradient) but if the graident is flipped then its X0+(deltaMY / Gradient)
 126+ E774              ;;;
 127+ E774              ;;;
 128+ E774              ;;;.calculateDeltaY:
 129+ E774              ;;;.calcualteDxDyOrDyDx
 130+ E774              ;;;.calculate
 131+ E774              ;;;
 132+ E774              ; Total unoptimised version
 133+ E774              ; use hl, de, bc, af,
 134+ E774              ; no used yet ix iy
 135+ E774              ; can we do an ex for hl' and de' holding x and hl, de holding y?
 136+ E774                                  INCLUDE "./Layer2Graphics/int_bren_save.asm"
# file opened: ././Layer2Graphics/int_bren_save.asm
   1++E774              OPCODE_IncHL            EQU $23
   2++E774              OPCODE_DecHL            EQU $2B
   3++E774              OPCODE_IncHLIndirect    EQU $34
   4++E774              OPCODE_DecHLIndirect    EQU $35
   5++E774              OPCODE_IncDE            EQU $13
   6++E774              OPCODE_DecDE            EQU $1B
   7++E774              OPCODE_JpNCnn           EQU $D2
   8++E774              OPCODE_JpCnn            EQU $DA
   9++E774              LOWEST_SAVE             EQU 0
  10++E774              HIGHEST_SAVE            EQU 1
  11++E774
  12++E774              SetIncrement:           MACRO   Location
  13++E774 ~                                    ld      a,OPCODE_IncDE
  14++E774 ~                                    ld      (Location),a
  15++E774                                      ENDM
  16++E774              SetDecrement:           MACRO   Location
  17++E774 ~                                    ld      a,OPCODE_DecDE
  18++E774 ~                                    ld      (Location),a
  19++E774                                      ENDM
  20++E774
  21++E774              ; So next optimisation
  22++E774              ; we know that we start from row y0 to row Y0
  23++E774              ; so we can just reference that row range and zero it out rather than the whole
  24++E774              ; data set
  25++E774 00           l2_fillValue            DB 0
  26++E775
  27++E775 83 C3 C7 CB  l2_fill_line            DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
  27++E779 7D
  28++E77A 74 E7        l2_fill_colr            DW l2_fillValue
  29++E77C FF           l2_fill_lenlo           DB 255
  30++E77D 00           l2_fill_lenhi           DB 0
  31++E77E 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY, DMA_WR2_P2INC_MEMORY, DMA_WR4_CONT_MODE
  32++E781 00 00        l2_fill_target          DB $00, $00
  33++E783 CF 87                                DB DMA_LOAD, DMA_ENABLE
  34++E785              l2_bren_cmd_len	        EQU $ - l2_fill_line
  35++E785
  36++E785 32 74 E7     l2_fill_dma:            ld		(l2_fillValue),a                                 ; T=13     ;
  37++E788 22 81 E7                             ld      (l2_fill_target),hl
  38++E78B 21 75 E7     .write_dma:             ld 		hl, l2_fill_line                                  ;          ;
  39++E78E 06 10                                ld 		b, l2_bren_cmd_len                                ;
  40++E790 0E 6B                                ld		c,IO_DATAGEAR_DMA_PORT                            ;
  41++E792 ED B3                                otir                                                      ;
  42++E794 C9                                   ret
  43++E795
  44++E795              ; to find a point Y1 along a line X0Y0 to X2Y2
  45++E795              ; DX = X2-X0, DY = Y2-Y0, D = DX/DY, X1 = X0+ ((Y1-Y0)*DX)
  46++E795              ; will need 16.8 24 bit maths for DX DY unless we scale down and do a muliplier up
  47++E795              ; so we could do DX = X2-X0, scale to 8.8  ... Note this will fail for extrmem near vertical or horizontal angles
  48++E795              ;                DY = Y2-Y0, scale to 8.8  ... could we use an octlet lookup table?
  49++E795              ;                D  = DX/DY which would give us an 8.2 proportion
  50++E795              ; a look up table would not work for calc of DX DY but we could use a log table and anti log to simplify to add/subtract
  51++E795              ; need a version of this that counts down to a trigger Y axis + 1, ideallign using DX DY if possible
  52++E795              ; We may be able to use the flat top/flat botttom and pick up a calculated value 0nce it hits Y2?
  53++E795              ; Yes logirithm table will work, need to build as a decimal set optimised
  54++E795              ; logically if the ship is too close it will always be too close to render so we can exclude
  55++E795              ; excessivley large values for X and Y as they will either be too far off side or span the whole screen
  56++E795              ; and just flood fill
  57++E795              ; Thsi means we can do log maths for jsut 0 to 1024
  58++E795              ; 9/11 we assume that large values will either flood fill or be straight lines
  59++E795              ; so we allow a range of -256 to + 512 ,i.e. off screen by a whole additional screen
  60++E795              ; then divide becomes 16 bit div 16 bit to yeild an 8.8 result. This can then be used to work out the new position
  61++E795              ; so                    DE = DX (Ignoring signs for now)
  62++E795              ;                       HL = DY
  63++E795              ; we need L2_DX, L2_DY output is HL
  64++E795              ; After workign out in excel Formulas are:
  65++E795              ; incomming X0, Y0, Y1, DX , DY
  66++E795              ; dY2 = Y1-Y0
  67++E795              ; dXHi = DX/DY*256
  68++E795              ; dxRemainder = DX-dXHi
  69++E795              ; dXRemainder = TRUNC((dxRemainder)/DY)*256
  70++E795              ; Integer component = dY2 * dXHi /256
  71++E795              ; Adj     component = DY2 * dXRemainder /256
  72++E795              ; total = Integer + Adj + X0
  73++E795
  74++E795 00 00        l2_X0                   DW 0
  75++E797 00 00        l2_Y0                   DW 0
  76++E799 00 00        l2_X1                   DW 0
  77++E79B 00 00        l2_Y1                   DW 0
  78++E79D 00 00        ld_YMid                 DW 0
  79++E79F 00 00        l2_DX                   DW 0
  80++E7A1 00 00        l2_DY                   DW 0
  81++E7A3 00 00        l2_Error                DW 0
  82++E7A5 00 00        l2_E2                   DW 0
  83++E7A7 00 00        l2_dY2                  DW 0
  84++E7A9 00 00        ld_dxHi                 DW 0
  85++E7AB 00 00        l2_dxRemainder          DW 0
  86++E7AD 00 00        l2_dxRemainder2         DW 0
  87++E7AF 00 00        l2_dXRemainderAdj       DW 0
  88++E7B1 00 00        l2_integer              DW 0
  89++E7B3 00 00        l2_integer2             DW 0
  90++E7B5
  91++E7B5 2A 9F E7     ScaleDXDY:              ld      hl,(l2_DX)
  92++E7B8 ED 5B A1 E7                          ld      de,(l2_DY)
  93++E7BC 7C           .ScaleLoop:             ld      a,h
  94++E7BD B2                                   or      d
  95++E7BE 28 0B                                jr      z,.ScaleDone
  96++E7C0                                      ShiftHLRight1
  96++E7C0 CB 3C       >			   srl h
  96++E7C2 CB 1D       >			   rr  l
  97++E7C4                                      ShiftDERight1
  97++E7C4 CB 3A       >			   srl d
  97++E7C6 CB 1B       >			   rr  e
  98++E7C8 C3 BC E7                             jp      .ScaleLoop
  99++E7CB 22 9F E7     .ScaleDone:             ld      (l2_DX),hl
 100++E7CE ED 53 A1 E7                          ld      (l2_DY),de
 101++E7D2 C9                                   ret
 102++E7D3
 103++E7D3 2A 99 E7     HLEquMidX:              ld      hl,(l2_X1)
 104++E7D6 ED 5B 95 E7                          ld      de,(l2_X0)
 105++E7DA                                      ClearCarryFlag
 105++E7DA B7          >                        or a
 106++E7DB ED 52                                sbc     hl,de
 107++E7DD 22 9F E7                             ld      (l2_DX),hl
 108++E7E0 2A 9B E7                             ld      hl,(l2_Y1)
 109++E7E3 ED 5B 97 E7                          ld      de,(l2_Y0)
 110++E7E7                                      ClearCarryFlag
 110++E7E7 B7          >                        or a
 111++E7E8 ED 52                                sbc     hl,de
 112++E7EA 22 A1 E7                             ld      (l2_DY),hl
 113++E7ED DD 01                                break
 114++E7EF CD B5 E7                             call    ScaleDXDY
 115++E7F2 2A 9D E7                             ld      hl,(ld_YMid)
 116++E7F5                                      ClearCarryFlag
 116++E7F5 B7          >                        or a
 117++E7F6 ED 52                                sbc     hl,de
 118++E7F8 22 A7 E7                             ld      (l2_dY2),hl
 119++E7FB ED 4B 9F E7                          ld      bc,(l2_DX)          ; dXHi(DE)= DX/DY*256
 120++E7FF ED 5B A1 E7                          ld      de,(l2_DY)          ; .
 121++E803 DD 62 DD 6B                          ld      ix,de               ; .
 122++E807 E5 FD E1                             ld      iy,hl               ; .
 123++E80A              ;                       BC = DX/DY as 8.8           ; .
 124++E80A CD 6C 96                             call    BC_Div_DE; DEequDEDivBC; DE is the result HL is the remainder
 125++E80D 78                                   ld      a,b                 ; if DE is 8 bit only
 126++E80E A7                                   and     a                   ; .
 127++E80F 28 06                                jr      z,.LT255            ; goto LT255
 128++E811 01 FF FF                             ld      bc,$FFFF            ; else set BC to $FFFF
 129++E814 C3 50 E8                             jp      .DoneCalc           ; .
 130++E817 ED 43 A9 E7  .LT255:                 ld      (ld_dxHi),bc        ;
 131++E81B 22 AB E7                             ld      (l2_dxRemainder),hl ; dxRemainder = DX-dXHi
 132++E81E DD 01        .CalcIntegerComponent:  break
 133++E820 2A A7 E7                             ld      hl,(l2_dY2)         ; Integer component = dY2 * dXHi /256
 134++E823 ED 5B A9 E7                          ld      de,(ld_dxHi)        ; .
 135++E827 CD 78 91                             call    DEHLequDEmulHL      ; .
 136++E82A ED 53 B1 E7                          ld      (l2_integer),de     ; .
 137++E82E 22 B3 E7                             ld      (l2_integer2),hl    ; .
 138++E831 ED 4B AB E7  .CalcRemainderFraction: ld      bc,(l2_dxRemainder) ; dXRemainder = TRUNC((dxRemainder)/DY)*256
 139++E835 ED 5B A1 E7                          ld      de,(l2_DY)          ; .
 140++E839 CD 6C 96                             call    BC_Div_DE           ; BC, remainder in HL
 141++E83C ED 43 AF E7                          ld      (l2_dXRemainderAdj),bc
 142++E840 22 AD E7                             ld      (l2_dxRemainder2),hl
 143++E843 2A A7 E7     .CalcAdjustment:        ld      hl,(l2_dY2)         ; Adj component = DY2 * dXRemainder /256
 144++E846 50 59                                ld      de,bc               ;
 145++E848 CD 78 91                             call    DEHLequDEmulHL      ;
 146++E84B 2A B1 E7                             ld      hl,(l2_integer)
 147++E84E 19                                   add     hl,de
 148++E84F C9                                   ret
 149++E850
 150++E850
 151++E850              ;                       HL = (DE * B) /256
 152++E850 C5           .DoneCalc:              push    bc
 153++E851 58                                   ld      e,b
 154++E852 DD E5 E1                             ld      hl,ix
 155++E855 CD 63 91                             call AHLequHLmulE
 156++E858 6C                                   ld l,h
 157++E859 67                                   ld h,a
 158++E85A E5 DD E1                             ld      ix,hl
 159++E85D              ;                       DE = (DE * C) /256          ld e,c call AHLequHLmulE,ld l,h, ld h,a
 160++E85D C1                                   pop     bc
 161++E85E 59                                   ld      e,c
 162++E85F FD E5 E1                             ld      hl,iy
 163++E862 CD 63 91                             call AHLequHLmulE
 164++E865 6C                                   ld l,h
 165++E866 67                                   ld h,a
 166++E867              ;                       HL + = DE
 167++E867 DD 54 DD 5D                          ld      de,ix
 168++E86B 19                                   add     hl,de
 169++E86C              ;                       HL + + X0
 170++E86C ED 5B 95 E7                          ld      de,(l2_X0)
 171++E870 19                                   add     hl,de
 172++E871 C9                                   ret
 173++E872
 174++E872
 175++E872
 176++E872
 177++E872              ;; Need optimisation for vertical line and horizonal
 178++E872              int_bren_save_Array1Low:
 179++E872 3E FF                                ld      a,$FF
 180++E874 21 74 E5                             ld      hl,l2targetArray1   ; L2targetArray2 Population
 181++E877 CD 85 E7                             call    l2_fill_dma
 182++E87A 3E DA                                ld      a,OPCODE_JpCnn
 183++E87C 21 74 E5                             ld      hl,l2targetArray1   ; L2targetArray2 Population
 184++E87F C3 AD E8                             jp      int_bren_save_Array ;
 185++E882              int_bren_save_Array1High:
 186++E882                                      ZeroA
 186++E882 AF          >                        xor a
 187++E883 21 74 E5                             ld      hl,l2targetArray1   ; L2targetArray2 Population
 188++E886 CD 85 E7                             call    l2_fill_dma
 189++E889 3E D2                                ld      a,OPCODE_JpNCnn
 190++E88B 21 74 E5                             ld      hl,l2targetArray1   ; L2targetArray2 Population
 191++E88E C3 AD E8                             jp      int_bren_save_Array ;
 192++E891              int_bren_save_Array2Low:
 193++E891 3E FF                                ld      a,$FF
 194++E893 21 74 E6                             ld      hl,l2targetArray2   ; L2targetArray2 Population
 195++E896 CD 85 E7                             call    l2_fill_dma
 196++E899 3E DA                                ld      a,OPCODE_JpCnn
 197++E89B 21 74 E6                             ld      hl,l2targetArray2   ; L2targetArray2 Population
 198++E89E C3 AD E8                             jp      int_bren_save_Array ;
 199++E8A1              int_bren_save_Array2High:
 200++E8A1                                      ZeroA
 200++E8A1 AF          >                        xor a
 201++E8A2 21 74 E6                             ld      hl,l2targetArray2   ; L2targetArray2 Population
 202++E8A5 CD 85 E7                             call    l2_fill_dma
 203++E8A8 21 74 E6                             ld      hl,l2targetArray2   ; L2targetArray2 Population
 204++E8AB 3E D2                                ld      a,OPCODE_JpNCnn
 205++E8AD              ; Uses HL DE
 206++E8AD              ; Note this works out the last position for each point, not any intermediate
 207++E8AD              ; so we need a version that plots lowest for left line & highest for right line
 208++E8AD 22 39 E9     int_bren_save_Array:    ld      (.TargetArrayAddr+2),hl
 209++E8B0 32 4A E9                             ld      (.TargetJump),a
 210++E8B3 2A 99 E7                             ld      hl,(l2_X1)          ; if X0 < X1
 211++E8B6 ED 5B 95 E7                          ld      de,(l2_X0)          ; calculate SX DX
 212++E8BA              ; --- dx = abs(x1 - x0) & set up SX
 213++E8BA                                      ClearCarryFlag              ;
 213++E8BA B7          >                        or a
 214++E8BB ED 52                                sbc     hl,de               ;
 215++E8BD CB 7C                                bit     7,h                 ;
 216++E8BF 28 0E                                jr      z,.DXPositive       ;
 217++E8C1              .DXNegative:            NegHL                       ;
 217++E8C1 AF          >                    xor a
 217++E8C2 95          >                    sub l
 217++E8C3 6F          >                    ld l,a
 217++E8C4 9F          >                    sbc a,a
 217++E8C5 94          >                    sub h
 217++E8C6 67          >                    ld h,a
 218++E8C7                                      SetDecrement .UpdateX0Operation
 218++E8C7 3E 1B       >                        ld      a,OPCODE_DecDE
 218++E8C9 32 9A E9    >                        ld      (.UpdateX0Operation),a
 219++E8CC C3 D4 E8                             jp      .DoneCalcDx         ;
 220++E8CF              .DXPositive:            SetIncrement .UpdateX0Operation
 220++E8CF 3E 13       >                        ld      a,OPCODE_IncDE
 220++E8D1 32 9A E9    >                        ld      (.UpdateX0Operation),a
 221++E8D4 22 9F E7     .DoneCalcDx:            ld      (l2_DX),hl          ;
 222++E8D7 ED 5B 95 E7                          ld      de,(l2_X0)          ; fetch in X0 so we can exx
 223++E8DB ED 4B 99 E7                          ld      bc,(l2_X1)          ; and also X1
 224++E8DF D9                                   exx                         ; ++now hl' = DX, DE'=X0, BC' = X1
 225++E8E0              ; --- dy = -abs(y1 - y0) & set up SY
 226++E8E0 2A 9B E7     .CalcDY:                ld      hl,(l2_Y1)          ; If Y1 < Y1
 227++E8E3 ED 5B 97 E7                          ld      de,(l2_Y0)          ; calculate SY DY
 228++E8E7                                      ClearCarryFlag              ;
 228++E8E7 B7          >                        or a
 229++E8E8 ED 52                                sbc     hl,de               ;
 230++E8EA CB 7C                                bit     7,h                 ;
 231++E8EC 28 08                                jr      z,.DYPositive       ;
 232++E8EE              .DYNegative:            SetDecrement .UpdateY0Operation
 232++E8EE 3E 1B       >                        ld      a,OPCODE_DecDE
 232++E8F0 32 D1 E9    >                        ld      (.UpdateY0Operation),a
 233++E8F3 C3 D4 E8                             jp      .DoneCalcDx         ;
 234++E8F6              .DYPositive:            NegHL                       ;
 234++E8F6 AF          >                    xor a
 234++E8F7 95          >                    sub l
 234++E8F8 6F          >                    ld l,a
 234++E8F9 9F          >                    sbc a,a
 234++E8FA 94          >                    sub h
 234++E8FB 67          >                    ld h,a
 235++E8FC                                      SetIncrement .UpdateY0Operation
 235++E8FC 3E 13       >                        ld      a,OPCODE_IncDE
 235++E8FE 32 D1 E9    >                        ld      (.UpdateY0Operation),a
 236++E901 22 A1 E7     .DoneCalcDy:            ld      (l2_DY),hl
 237++E904 ED 5B 97 E7                          ld      de,(l2_Y0)          ; fetch in X0
 238++E908 ED 4B 9B E7                          ld      bc,(l2_Y1)          ; now hl = DY, DE=Y0, BC = Y1
 239++E90C              ; ---   error = dx + dy >> at this point hl' = DX, DE'=X0, BC' = X1 and hl = DY, DE=Y0, BC = Y1
 240++E90C E5 FD E1     .CalcError:             ld      iy,hl               ; fetch DY into IY
 241++E90F D9                                   exx                         ; ++now looking at DX data set and DY in alternate
 242++E910 EB                                   ex      de,hl               ; quickly flip over de and to support add instruction
 243++E911 FD 19                                add     iy,de               ; we have set up IY as L2_Error
 244++E913 EB                                   ex      de,hl
 245++E914 FD 22 A3 E7                          ld      (l2_Error),iy
 246++E918              ; --- While True        >> at this point we are looing at DX and need to consider state at iteration loop
 247++E918 D9           .CalcLoop:              exx                         ; ++now looking at DY data set and DX in alternate
 248++E919                                      ;ld      hl,(l2_X0)         ; get X0 and Y0
 249++E919              ; --- PLOT X0, Y0       >> now looking at DY data set and DX in alternate
 250++E919              .CheckYRange:           ;ld      de,(l2_Y0)
 251++E919 7A                                   ld      a,d                 ; if Y0 > 127
 252++E91A A7                                   and     a                   ; or Y0 is negative
 253++E91B 20 35                                jr      nz,.YOutOfRange     ; then we can skip the plot
 254++E91D 7B                                   ld      a,e                 ;
 255++E91E E6 80                                and     $80                 ;
 256++E920 20 30                                jr      nz,.YOutOfRange     ;
 257++E922 D9           .CheckXRange:           exx                         ; ++now looking at DX data set and DY in alternate
 258++E923 7A                                   ld      a,d                 ; if X0 is negative
 259++E924 A7                                   and     a
 260++E925 28 0E                                jr      z,.XOKToPlot
 261++E927 E6 80                                and     $80
 262++E929 28 05                                jr      z,.NotXNegative
 263++E92B 3E 00        .XNegative:             ld      a,0                 ; if X0 <0 > 255 then clamp it
 264++E92D C3 36 E9                             jp      .ClipXDone          ;
 265++E930 3E FF        .NotXNegative:          ld      a,255               ;
 266++E932 C3 36 E9                             jp      .ClipXDone          ;
 267++E935 7B           .XOKToPlot:             ld      a,e                 ; no clip therefore we can just use X0 as is
 268++E936 D9           .ClipXDone:             exx                         ; ++now looking at DY data set and DX in alternate
 269++E937 DD 21 74 E5  .TargetArrayAddr:       ld      ix,l2targetArray1   ; later this will be self modifying
 270++E93B 08                                   ex      af,af'
 271++E93C 7B                                   ld      a,e
 272++E93D 32 48 E9                             ld      (.TargetRead+2),a   ; Write Y0 offset to IX offset
 273++E940 32 50 E9                             ld      (.TargetWrite+2),a  ; Write Y0 offset to IX offset
 274++E943 08                                   ex      af,af'
 275++E944 C5                                   push    bc
 276++E945 47                                   ld      b,a
 277++E946 DD 7E 00     .TargetRead:            ld      a,(IX+0)
 278++E949 B8                                   cp      b
 279++E94A DA 51 E9     .TargetJump:            jp      c,.SkipWrite
 280++E94D 78                                   ld      a,b
 281++E94E DD 77 00     .TargetWrite:           ld      (IX+0),a            ; directly updates l2targetArray1
 282++E951 C1           .SkipWrite:             pop     bc
 283++E952              ; --- if x0 == x1 && y0 == y1 break
 284++E952              .YOutOfRange: ; At this point we have either plotted or its outside array range
 285++E952 D9                                   exx                         ; ++now looking at DX data set and DY in alternate
 286++E953              ;                        ld      bc,(l2_X1)
 287++E953              .CheckEndXY:            cpDEEquBC .CheckEndXYOK     ; de will equal X0 still by here
 287++E953 7A          >                        ld      a,d
 287++E954 B8          >                        cp      b
 287++E955 C2 5D E9    >                        jp      nz, .CheckEndXYOK
 287++E958 7B          >                        ld      a,e
 287++E959 B9          >                        cp      c
 287++E95A             >.NoTheSame:
 288++E95A C2 67 E9                             jp      nz,.x0x1Differ
 289++E95D D9           .CheckEndXYOK:          exx                         ; ++ in this branch in this branchnow looking at DY data set and DX in alternate
 290++E95E              ;                        ld      bc,(l2_Y1)
 291++E95E                                      cpDEEquBC  .x0x1Differ      ; de will equal Y0 still by here
 291++E95E 7A          >                        ld      a,d
 291++E95F B8          >                        cp      b
 291++E960 C2 67 E9    >                        jp      nz, .x0x1Differ
 291++E963 7B          >                        ld      a,e
 291++E964 B9          >                        cp      c
 291++E965             >.NoTheSame:
 292++E965 D9                                   exx                         ; ++ in this branch now looking at DX data set and DY in alternate
 293++E966 C8                                   ret     z                   ; if they are both the same we are done
 294++E967              .x0x1Differ:                                        ; by this point we could be looking at DX on all branches
 295++E967              ; --- e2 = 2 * error
 296++E967 D9           .SetError2:             exx                         ; ++now looking at DY data set and DX in alternate
 297++E968 E5 D5                                push    hl,,de              ; save HL
 298++E96A EB                                   ex      de,hl               ; de = DY; could futher optimise to check DY>E2 and reduce instruction count
 299++E96B FD E5 E1                             ld      hl,iy;(l2_Error)       ; e2 = 2 * error
 300++E96E 29                                   add     hl,hl               ; .
 301++E96F 22 A5 E7                             ld      (l2_E2),hl          ; .
 302++E972                                      ; before here we are looking at DY
 303++E972              ; --- if e2 >= dy
 304++E972 CD 56 99     .CheckE2gteDY:          call    compare16HLDE       ; .
 305++E975 D1 E1                                pop     hl,,de              ; before jumps get HL back
 306++E977 EA 80 E9                             jp      pe, .E2DyParitySet  ; Jump looking at DY
 307++E97A FA 9C E9                             jp      m,  .E2ltDY         ; Jump looking at DY to get here overflow clear, so if m is set then HL<DE
 308++E97D C3 83 E9                             jp      .E2gteDY            ; Jump looking at DY
 309++E980              .E2DyParitySet:         ; entering here looking at DY
 310++E980 F2 9C E9                             jp      p,  .E2ltDY         ; Jump looking at DY if pe is set, then if sign is clear HL<DE
 311++E983              ; --- if x0 == x1 break
 312++E983 D9           .E2gteDY:               exx                         ; ++ in this branch now looking at DX data set and DY in alternate
 313++E984                                      cpDEEquBC .ErrorUpdateDY    ;      if x0 == x1 break
 313++E984 7A          >                        ld      a,d
 313++E985 B8          >                        cp      b
 313++E986 C2 8C E9    >                        jp      nz, .ErrorUpdateDY
 313++E989 7B          >                        ld      a,e
 313++E98A B9          >                        cp      c
 313++E98B             >.NoTheSame:
 314++E98B C8                                   ret     z                   ;      .
 315++E98C              ; --- error = error + dy
 316++E98C D9           .ErrorUpdateDY:         exx                         ; if we get here we are looking at DY data set and DX in alternate
 317++E98D E5 D5                                push    hl,,de              ; save HL
 318++E98F EB                                   ex      de,hl               ; de = DY
 319++E990 FD E5 E1                             ld      hl,iy;(l2_Error)       ;      error = error + dy
 320++E993 19                                   add     hl,de               ;      .
 321++E994 E5 FD E1                             ld      iy,hl;(l2_Error),hl       ;      .
 322++E997 D1 E1                                pop     hl,,de
 323++E999              ; --- x0 = x0 + sx
 324++E999 D9           .UpdateX0:              exx                         ; now back looking at DX data set and DY in alternate
 325++E99A 00           .UpdateX0Operation:     nop                         ;      x0 = x0 +/- sx
 326++E99B D9                                   exx                         ; correction on this brach so we are looking at DY
 327++E99C              .E2ltDY:                ; entering here, looking at DY in all branches
 328++E99C              ; --- if e2 <= dx
 329++E99C D9           .CheckE2lteDX:          exx                         ; we want to look at DX
 330++E99D E5 D5                                push    hl,,de
 331++E99F EB                                   ex      de,hl               ; de = l2_DX
 332++E9A0 2A A5 E7                             ld      hl,(l2_E2)          ; if e2 <= dx
 333++E9A3              ;                        ld      de,(l2_DX)          ; as we can't do skip on e2>dx
 334++E9A3 CD 56 99                             call    compare16HLDE       ; we will jump based on e2 <= dx
 335++E9A6 D1 E1                                pop     hl,,de              ; recover saved HL DE
 336++E9A8 CA BA E9                             jp      z, .E2lteDX         ; Jump looking at DX
 337++E9AB EA B4 E9                             jp      pe, .E2DxParitySet  ; Jump looking at DX
 338++E9AE FA BA E9                             jp      m,  .E2lteDX        ; Jump looking at DX : to get here overflow clear, so if m is set then HL<DE
 339++E9B1 C3 D3 E9                             jp      .E2gteDx            ; Jump looking at DX
 340++E9B4 F2 BA E9     .E2DxParitySet:         jp      p,  .E2lteDX        ; Jump looking at DX
 341++E9B7 C3 D3 E9                             jp      .E2gteDx            ; Jump looking at DX
 342++E9BA              ; ---  if y0 == y1 break
 343++E9BA              .E2lteDX:               ; Entry looking at DX
 344++E9BA D9                                   exx                         ;      in branch looking at DY
 345++E9BB                                      cpDEEquBC .ErrorUpdateDX    ;      .
 345++E9BB 7A          >                        ld      a,d
 345++E9BC B8          >                        cp      b
 345++E9BD C2 C4 E9    >                        jp      nz, .ErrorUpdateDX
 345++E9C0 7B          >                        ld      a,e
 345++E9C1 B9          >                        cp      c
 345++E9C2             >.NoTheSame:
 346++E9C2 D9                                   exx                         ;      in branch looking at DX
 347++E9C3 C8                                   ret     z                   ;      .
 348++E9C4              ; --- error = error + dx
 349++E9C4              .ErrorUpdateDX:         ; at this point will be looking at DX
 350++E9C4 E5 D5                                push    hl,,de
 351++E9C6 EB                                   ex      de,hl               ;      de = DY
 352++E9C7 FD E5 E1                             ld      hl,iy;(l2_Error)       ;      error = error + dx
 353++E9CA 19                                   add     hl,de               ;      .
 354++E9CB E5 FD E1                             ld      iy,hl;(l2_Error),hl       ;      .
 355++E9CE D1 E1                                pop     hl,,de
 356++E9D0              ; --- y0 = y0 + sy
 357++E9D0 D9           .UpdateY0:              exx                         ;      in this branch we are looking at DY
 358++E9D1 00           .UpdateY0Operation:     nop                         ;      y0 = y0 + sy
 359++E9D2 D9                                   exx                         ;      in this branch we are looking at
 360++E9D3              ; --- Loop
 361++E9D3              .E2gteDx:               ; at this point will be looking at DX again
 362++E9D3 C3 18 E9                             jp      .CalcLoop           ; repeat until we have a return
 363++E9D6
# file closed: ././Layer2Graphics/int_bren_save.asm
 137+ E9D6              ;;;l2_X0                   DW 0
 138+ E9D6              ;;;l2_Y0                   DW 0
 139+ E9D6              ;;;l2_X1                   DW 0
 140+ E9D6              ;;;l2_Y1                   DW 0
 141+ E9D6              ;;;l2_DX                   DW 0
 142+ E9D6              ;;;l2_DY                   DW 0
 143+ E9D6              ;;;l2_SX                   DW 0
 144+ E9D6              ;;;l2_SY                   DW 0
 145+ E9D6              ;;;l2_Error                DW 0
 146+ E9D6              ;;;l2_E2                   DW 0
 147+ E9D6              ;;;int_bren_save_Array1:   ld      hl,(l2_X1)          ; if X0 < X1
 148+ E9D6              ;;;                        ld      de,(l2_X0)          ; calculate SX DX
 149+ E9D6              ;;;                        ClearCarryFlag              ;
 150+ E9D6              ;;;                        sbc     hl,de               ;
 151+ E9D6              ;;;                        bit     7,h                 ;
 152+ E9D6              ;;;                        jr      z,.DXPositive       ;
 153+ E9D6              ;;;.DXNegative:            NegHL                       ;
 154+ E9D6              ;;;                        ld      bc,-1               ;
 155+ E9D6              ;;;                        jp      .DoneCalcDx         ;
 156+ E9D6              ;;;.DXPositive:            ld      bc,1                ;
 157+ E9D6              ;;;.DoneCalcDx:            ld      (l2_SX),bc          ;
 158+ E9D6              ;;;                        ld      (l2_DX),hl          ;
 159+ E9D6              ;;;.CalcDY:                ld      hl,(l2_Y1)          ; If Y1 < Y1
 160+ E9D6              ;;;                        ld      de,(l2_Y0)          ; calculate SY DY
 161+ E9D6              ;;;                        ClearCarryFlag              ;
 162+ E9D6              ;;;                        sbc     hl,de               ;
 163+ E9D6              ;;;                        bit     7,h                 ;
 164+ E9D6              ;;;                        jr      z,.DYPositive       ;
 165+ E9D6              ;;;.DYNegative:            ld      bc,-1               ;
 166+ E9D6              ;;;                        jp      .DoneCalcDx         ;
 167+ E9D6              ;;;.DYPositive:            NegHL                       ;
 168+ E9D6              ;;;                        ld      bc,1                ;
 169+ E9D6              ;;;.DoneCalcDy:            ld      (l2_SY),bc          ;
 170+ E9D6              ;;;                        ld      (l2_DY),hl
 171+ E9D6              ;;;.CalcError:             ld      hl,(l2_DX)
 172+ E9D6              ;;;                        ld      de,(l2_DY)
 173+ E9D6              ;;;                        add     hl,de
 174+ E9D6              ;;;                        ld      (l2_Error),hl
 175+ E9D6              ;;;.CalcLoop:              break
 176+ E9D6              ;;;                        ld      hl,(l2_X0)          ; get X0 and Y0
 177+ E9D6              ;;;.CheckYRange:           ld      de,(l2_Y0)
 178+ E9D6              ;;;                        ld      a,d                 ; if Y > 127
 179+ E9D6              ;;;                        and     a                   ; or Y is negative
 180+ E9D6              ;;;                        jr      nz,.YOutOfRange     ; then we can skip the plot
 181+ E9D6              ;;;                        ld      a,e                 ;
 182+ E9D6              ;;;                        and     $80                 ;
 183+ E9D6              ;;;                        jr      nz,.YOutOfRange     ;
 184+ E9D6              ;;;.CheckXRange:           ld      a,h                 ; if X0 is negative
 185+ E9D6              ;;;                        and     a
 186+ E9D6              ;;;                        jr      z,.XOKToPlot
 187+ E9D6              ;;;                        and     $80
 188+ E9D6              ;;;                        jr      z,.NotXNegative
 189+ E9D6              ;;;.XNegative:             ld      a,0
 190+ E9D6              ;;;                        jp      .ClipXDone
 191+ E9D6              ;;;.NotXNegative:          ld      a,255
 192+ E9D6              ;;;                        jp      .ClipXDone
 193+ E9D6              ;;;.XOKToPlot:             ld      a,l                 ; no clip therefore we can just use l
 194+ E9D6              ;;;.ClipXDone:             push    hl
 195+ E9D6              ;;;                        push    af                  ; using the Y coordinate
 196+ E9D6              ;;;                        ld      hl,l2targetArray1   ; plot the X value for this row
 197+ E9D6              ;;;                        ld      a,e
 198+ E9D6              ;;;                        add     hl,a
 199+ E9D6              ;;;                        pop     af
 200+ E9D6              ;;;                        ld      (hl),a
 201+ E9D6              ;;;                        pop     hl
 202+ E9D6              ;;;.YOutOfRange: ; At this point we have either plotted or its outside array range
 203+ E9D6              ;;;                        ld      bc,(l2_X1)
 204+ E9D6              ;;;.CheckEndXY:            cpHLEquBC .CheckEndXYOK     ; hl will equal X0 still by here
 205+ E9D6              ;;;                        jp      nz,.x0x1Differ
 206+ E9D6              ;;;.CheckEndXYOK:          ld      bc,(l2_Y1)
 207+ E9D6              ;;;                        cpDEEquBC  .x0x1Differ      ; de will equal Y0 still by here
 208+ E9D6              ;;;                        ret     z                   ; if they are both the same we are done
 209+ E9D6              ;;;.x0x1Differ:
 210+ E9D6              ;;;.SetError2:             ld      hl,(l2_Error)       ; e2 = 2 * error
 211+ E9D6              ;;;                        add     hl,hl               ; .
 212+ E9D6              ;;;                        ld      (l2_E2),hl          ; .
 213+ E9D6              ;;;.CheckE2gteDY:          ld      de,(l2_DY)          ; if e2 >= dy
 214+ E9D6              ;;;                        call    compare16HLDE       ; .
 215+ E9D6              ;;;                        jp      pe, .E2DyParitySet
 216+ E9D6              ;;;                        jp      m,  .E2ltDY         ; to get here overflow clear, so if m is set then HL<DE
 217+ E9D6              ;;;                        jp      .E2gteDY
 218+ E9D6              ;;;.E2DyParitySet:         jp      p,  .E2ltDY         ; if pe is set, then if sign is clear HL<DE
 219+ E9D6              ;;;.E2gteDY:               ld      hl,(l2_X0)          ;      if x0 == x1 break
 220+ E9D6              ;;;                        ld      de,(l2_X1)          ;      .
 221+ E9D6              ;;;                        cpHLEquDE .ErrorUpdateDY    ;      .
 222+ E9D6              ;;;                        ret     z                   ;      .
 223+ E9D6              ;;;.ErrorUpdateDY:         ld      hl,(l2_Error)       ;      error = error + dy
 224+ E9D6              ;;;                        ld      de,(l2_DY)          ;      .
 225+ E9D6              ;;;                        add     hl,de               ;      .
 226+ E9D6              ;;;                        ld      (l2_Error),hl       ;      .
 227+ E9D6              ;;;.UpdateX0:              ld      hl,(l2_X0)          ;      x0 = x0 + sx
 228+ E9D6              ;;;                        ld      bc,(l2_SX)          ;      .
 229+ E9D6              ;;;                        add     hl,bc               ;      .
 230+ E9D6              ;;;                        ld      (l2_X0),hl          ;      .
 231+ E9D6              ;;;.E2ltDY:
 232+ E9D6              ;;;.CheckE2lteDX:          ld      hl,(l2_E2)          ; if e2 <= dx
 233+ E9D6              ;;;                        ld      de,(l2_DX)          ; as we can't do skip on e2>dx
 234+ E9D6              ;;;                        call    compare16HLDE       ; we will jump based on e2 <= dx
 235+ E9D6              ;;;                        jp      z, .E2lteDX
 236+ E9D6              ;;;                        jp      pe, .E2DxParitySet
 237+ E9D6              ;;;                        jp      m,  .E2lteDX         ; to get here overflow clear, so if m is set then HL<DE
 238+ E9D6              ;;;                        jp      .E2gteDx
 239+ E9D6              ;;;.E2DxParitySet:         jp      p,  .E2lteDX
 240+ E9D6              ;;;                        jp      .E2gteDx
 241+ E9D6              ;;;.E2lteDX:               ld      hl,(l2_Y0)          ;      .
 242+ E9D6              ;;;                        ld      de,(l2_Y1)          ;      .
 243+ E9D6              ;;;                        cpHLEquDE .ErrorUdpateDX    ;      .
 244+ E9D6              ;;;                        ret     z                   ;      .
 245+ E9D6              ;;;.ErrorUdpateDX:         ld      hl,(l2_Error)       ;      error = error + dx
 246+ E9D6              ;;;                        ld      de,(l2_DX)          ;      .
 247+ E9D6              ;;;                        add     hl,de               ;      .
 248+ E9D6              ;;;                        ld      (l2_Error),hl       ;      .
 249+ E9D6              ;;;.UpdateY0:              ld      hl,(l2_Y0)          ;      x0 = x0 + sx
 250+ E9D6              ;;;                        ld      bc,(l2_SY)          ;      .
 251+ E9D6              ;;;                        add     hl,bc              ;      .
 252+ E9D6              ;;;                        ld      (l2_Y0),hl         ;      .
 253+ E9D6              ;;;.E2gteDx:               jp      .CalcLoop           ; repeat until we have a return
 254+ E9D6
 255+ E9D6
 256+ E9D6              ;;;;;;;; for this it myst always be sorted Y0 -> Y2
 257+ E9D6              ;;;;;;;;; note we ca't use this to do x? as it will clip inherently
 258+ E9D6              ;;;;;;;l2_save_diagnonal_signed_1:
 259+ E9D6              ;;;;;;;                        ld		hl,0                            ;
 260+ E9D6              ;;;;;;;                        ld		(l2deltaX),hl                   ;
 261+ E9D6              ;;;;;;;                        ld		(l2deltaY),hl
 262+ E9D6              ;;;;;;;.CheckYOnScreen:        ld      de,(l2_commonTopY)
 263+ E9D6              ;;;;;;;                        ld      hl,(l2_bottomY)
 264+ E9D6              ;;;;;;;                        ld      a,d
 265+ E9D6              ;;;;;;;                        and     h
 266+ E9D6              ;;;;;;;                        and     $80
 267+ E9D6              ;;;;;;;                        jr      nz,.OffScreen
 268+ E9D6              ;;;;;;;;...dy = y1 - y0
 269+ E9D6              ;;;;;;;.CalcDeltaY:            ClearCarryFlag
 270+ E9D6              ;;;;;;;                        sbc     hl,de                           ; now delta is signed, if its negative then something bad as gone wrong
 271+ E9D6              ;;;;;;;                        ld      a,h
 272+ E9D6              ;;;;;;;                        and     $80
 273+ E9D6              ;;;;;;;                        jr      nz,.OffScreen
 274+ E9D6              ;;;;;;;                        ld      (l2deltaY),hl                   ; Delta signed
 275+ E9D6              ;;;;;;;CheckXOnScreen:         ld      de,(l2_leftX)
 276+ E9D6              ;;;;;;;                        ld      hl,(l2_rightX)
 277+ E9D6              ;;;;;;;                        ld      a,d
 278+ E9D6              ;;;;;;;                        and     h
 279+ E9D6              ;;;;;;;                        and     $80
 280+ E9D6              ;;;;;;;                        jr      nz,.OffScreen
 281+ E9D6              ;;;;;;;                        ClearCarryFlag
 282+ E9D6              ;;;;;;;;...dx = x1 - x0
 283+ E9D6              ;;;;;;;.CalcDeltaX:            sbc     hl,de                           ; now delta is signed, could be negative
 284+ E9D6              ;;;;;;;                        ld      (l2deltaX),hl                   ; Delta signed
 285+ E9D6              ;;;;;;;                        ld      a,h
 286+ E9D6              ;;;;;;;                        and     $80
 287+ E9D6              ;;;;;;;                        jr      nz,.LeftToRight
 288+ E9D6              ;;;;;;;.RightToLeft:           set up instrnctin
 289+ E9D6              ;;;;;;;.LeftToRight:           set up instrnctin
 290+ E9D6              ;;;;;;;.setErr:									                    ;  LD H  := (D'-E')/2    round up if +ve or down if -ve
 291+ E9D6              ;;;;;;;,FracDYltDX:            ld		hl,(l2deltaY)					; Fraction = dY - dX
 292+ E9D6              ;;;;;;;                        ld		de,(l2deltaX)
 293+ E9D6              ;;;;;;;                        ClearCarryFlag
 294+ E9D6              ;;;;;;;                        sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
 295+ E9D6              ;;;;;;;                        ex		de,hl
 296+ E9D6              ;;;;;;;                        ld		iyh,d							; we will use IY reg for fractions
 297+ E9D6              ;;;;;;;                        ld		iyl,e
 298+ E9D6              ;;;;;;;                        jp		p,.fracIsPositive
 299+ E9D6              ;;;;;;;
 300+ E9D6              ;;;;;;;plotLine(x0, y0, x1, y1)
 301+ E9D6              ;;;;;;;    dx = x1 - x0
 302+ E9D6              ;;;;;;;    dy = y1 - y0
 303+ E9D6              ;;;;;;;    D = 2*dy - dx
 304+ E9D6              ;;;;;;;    y = y0
 305+ E9D6              ;;;;;;;
 306+ E9D6              ;;;;;;;    for x from x0 to x1
 307+ E9D6              ;;;;;;;        plot(x,y)
 308+ E9D6              ;;;;;;;        if D > 0
 309+ E9D6              ;;;;;;;            y = y + 1
 310+ E9D6              ;;;;;;;            D = D - 2*dx
 311+ E9D6              ;;;;;;;        end if
 312+ E9D6              ;;;;;;;        D = D + 2*dy
 313+ E9D6              ;;;;;;;
 314+ E9D6
 315+ E9D6
 316+ E9D6
 317+ E9D6              ;;;;;.fracIsNegative:        NegIY
 318+ E9D6              ;;;;;                        ShiftIYRight1
 319+ E9D6              ;;;;;                        NegIY
 320+ E9D6              ;;;;;                        jp		.SkipCalcInc					; so we have a negative frac
 321+ E9D6              ;;;;;.fracIsPositive:        ShiftIYRight1
 322+ E9D6              ;;;;;.SkipCalcInc:		                        			    	; As we loop, bc = to plot current XY
 323+ E9D6              ;;;;;.preTargetArray:	    ld		hl,l2targetArray1               ; Assuming row 0
 324+ E9D6              ;;;;;l2S_setTarget:	        ld		(l2targetPtr),hl
 325+ E9D6              ;;;;;                                                                ; set DE to current row
 326+ E9D6              ;;;;;.S_Loop:			    ld		hl,(l2targetPtr)				; Insert into respective array
 327+ E9D6              ;;;;;                                                                ; calculate current row
 328+ E9D6              ;;;;;                                                                ; if current row >= 0
 329+ E9D6              ;;;;;                                                                ; write current X value in DE to (hl)
 330+ E9D6              ;;;;;                        ld		a,b
 331+ E9D6              ;;;;;                        add		hl,a
 332+ E9D6              ;;;;;                        ld		(hl),c
 333+ E9D6              ;;;;;l2S_CheckIfEnd:	        ld		a,ixh
 334+ E9D6              ;;;;;                        JumpIfAGTENusng	  b,l2S_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 335+ E9D6              ;;;;;                        jp		l2S_Continue
 336+ E9D6              ;;;;;l2S_CheckXPos:          ld      a,(l2S_adjustCol)
 337+ E9D6              ;;;;;                        cp      l2inccstep; if we self modified to inc the we can do a cp e else its cp c
 338+ E9D6              ;;;;;                        jr      z,.IncCP
 339+ E9D6              ;;;;;.DecCP:                 ld      a,c
 340+ E9D6              ;;;;;                        ReturnIfALTNusng ixl
 341+ E9D6              ;;;;;                        ReturnIfAEqNusng ixl
 342+ E9D6              ;;;;;                        jp      l2S_Continue
 343+ E9D6              ;;;;;.IncCP:                 ld		a,c
 344+ E9D6              ;;;;;                        ReturnIfAGTENusng ixl					; if X1 has reached or exceeded X2 then we are done
 345+ E9D6              ;;;;;l2S_Continue:
 346+ E9D6              ;;;;;l2S_HNegative:			ld		a,iyh
 347+ E9D6              ;;;;;                        bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 348+ E9D6              ;;;;;                        jr		z,l2S_ErrNotNegative			;
 349+ E9D6              ;;;;;l2S_ErrNegative:		ld		a,(l2deltaY)					; if its a negative error update X
 350+ E9D6              ;;;;;                        ld		d,0
 351+ E9D6              ;;;;;                        ld		e,a
 352+ E9D6              ;;;;;                        add		iy,de							; add deltaY(unsinged) to l2fraction
 353+ E9D6              ;;;;;l2S_adjustCol:          nop										; this is our inc/dec of X
 354+ E9D6              ;;;;;                        jr		l2S_Loop							; repeat loop
 355+ E9D6              ;;;;;l2S_ErrNotNegative:     ld		a,iyh
 356+ E9D6              ;;;;;                        or		iyl
 357+ E9D6              ;;;;;                        JumpIfAIsZero l2S_ErrZero					; if there is no error then goto zeroerror
 358+ E9D6              ;;;;;l2S_ErrPositive:        ld      de,iy;  lddeiy								; if its a positive error then we update Y
 359+ E9D6              ;;;;;                        ex		de,hl
 360+ E9D6              ;;;;;                        ld		d,0
 361+ E9D6              ;;;;;                        ld		a,(l2deltaX)
 362+ E9D6              ;;;;;                        ld		e,a
 363+ E9D6              ;;;;;                        ClearCarryFlag
 364+ E9D6              ;;;;;                        sbc		hl,de
 365+ E9D6              ;;;;;                        ex		de,hl
 366+ E9D6              ;;;;;                        ld      iy,de;ldiyde
 367+ E9D6              ;;;;;l2S_adjustRow:          inc		b								; move Y down by one
 368+ E9D6              ;;;;;                        jr		l2S_Loop
 369+ E9D6              ;;;;;l2S_ErrZero:            ld		hl,(l2deltaX)
 370+ E9D6              ;;;;;                        ex		de,hl
 371+ E9D6              ;;;;;                        ld		hl,(l2deltaY)
 372+ E9D6              ;;;;;                        ClearCarryFlag
 373+ E9D6              ;;;;;                        sbc		hl,de
 374+ E9D6              ;;;;;                        ex		de,hl
 375+ E9D6              ;;;;;                        ld      iy,de; ldiyde
 376+ E9D6              ;;;;;l2S_adjustCol2:         nop										; update X and Y
 377+ E9D6              ;;;;;                        inc		b
 378+ E9D6              ;;;;;                        jr		l2S_Loop
 379+ E9D6              ;;;;;
 380+ E9D6              ;;;;;.OffScreen:             SetCarryFlag
 381+ E9D6              ;;;;;                        ret
 382+ E9D6              ;;;;;
 383+ E9D6              ;;;;;
 384+ E9D6
 385+ E9D6                      IFDEF L2_DIAGONAL_SAVE
 386+ E9D6 ~            l2_draw_diagonal_save:  cp		1
 387+ E9D6 ~                                    jr		z,l2S_ItsArray1
 388+ E9D6 ~                                    ld		hl,l2targetArray2
 389+ E9D6 ~                                    jp		l2S_setTarget
 390+ E9D6 ~            l2S_ItsArray1:	        ld		hl,l2targetArray1
 391+ E9D6 ~            l2S_setTarget:	        ld		(l2targetPtr),hl
 392+ E9D6 ~            ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
 393+ E9D6 ~                                    ld		(l2linecolor),a					;save colour for later
 394+ E9D6 ~                                    ld		hl,0                            ;
 395+ E9D6 ~                                    ld		(l2deltaX),hl                   ;
 396+ E9D6 ~                                    ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
 397+ E9D6 ~            l2S_preSort:            ld		a,b								;
 398+ E9D6 ~                                    JumpIfALTNusng	d,l2S_noYSort			; we must have Y1 < Y2 (if eqyal then verical line picked up earlier
 399+ E9D6 ~            l2S_SortBasedOnY:	    ldhlbc									;
 400+ E9D6 ~                                    ex		de,hl                           ;
 401+ E9D6 ~                                    ldbchl									; swap over bc and de using hl as an intermediate
 402+ E9D6 ~            l2S_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
 403+ E9D6 ~                                    ld		ixl,e							; ixl now holds target X coord post sorting
 404+ E9D6 ~            l2S_setXLen:            ld		a,c                             ;
 405+ E9D6 ~                                    JumpIfALTNusng e,l2S_PosXLen			; if x1 < x2 then we have a positive increment
 406+ E9D6 ~            l2S_NegXLen:            ld		a,c                             ;
 407+ E9D6 ~                                    sub     e                               ;
 408+ E9D6 ~                                    ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
 409+ E9D6 ~                                    ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
 410+ E9D6 ~                                    jr		l2S_XINCDEC
 411+ E9D6 ~            ; we set comparison
 412+ E9D6 ~            l2S_PosXLen:	        ld		a,e                             ;
 413+ E9D6 ~                                    sub		c                               ;
 414+ E9D6 ~                                    ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
 415+ E9D6 ~                                    ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
 416+ E9D6 ~            ; also need to fix the comparison, if its +x then compare with
 417+ E9D6 ~            l2S_XINCDEC:	        ld		(l2S_adjustCol),a				;
 418+ E9D6 ~                                    ld		(l2S_adjustCol2),a				; update self modifying code for X update with inc or dec from above
 419+ E9D6 ~            l2S_setYLen:            ld		a,d							 	; presorted on Y so it is now always positive
 420+ E9D6 ~                                    sub		b
 421+ E9D6 ~                                    ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
 422+ E9D6 ~            l2S_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
 423+ E9D6 ~            ldS_FracDYltDX:         ld		hl,(l2deltaY)					; Fraction = dY - dX
 424+ E9D6 ~                                    ld		de,(l2deltaX)
 425+ E9D6 ~                                    ClearCarryFlag
 426+ E9D6 ~                                    sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
 427+ E9D6 ~                                    ex		de,hl
 428+ E9D6 ~                                    ld		iyh,d							; we will use IY reg for fractions
 429+ E9D6 ~                                    ld		iyl,e
 430+ E9D6 ~                                    jp		p,l2S_fracIsPositive
 431+ E9D6 ~            l2S_fracIsNegative:     NegIY
 432+ E9D6 ~                                    ShiftIYRight1
 433+ E9D6 ~                                    NegIY
 434+ E9D6 ~                                    jp		l2S_SkipCalcInc					; so we have a negative frac
 435+ E9D6 ~            l2S_fracIsPositive:     ShiftIYRight1
 436+ E9D6 ~            l2S_SkipCalcInc:		                        				; As we loop, bc = to plot current XY
 437+ E9D6 ~            l2S_Loop:			    ld		hl,(l2targetPtr)				; Insert into respective array
 438+ E9D6 ~                                    ld		a,b
 439+ E9D6 ~                                    add		hl,a
 440+ E9D6 ~                                    ld		(hl),c
 441+ E9D6 ~            l2S_CheckIfEnd:	        ld		a,ixh
 442+ E9D6 ~                                    JumpIfAGTENusng	  b,l2S_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 443+ E9D6 ~                                    jp		l2S_Continue
 444+ E9D6 ~            l2S_CheckXPos:          ld      a,(l2S_adjustCol)
 445+ E9D6 ~                                    cp      l2inccstep; if we self modified to inc the we can do a cp e else its cp c
 446+ E9D6 ~                                    jr      z,.IncCP
 447+ E9D6 ~            .DecCP:                 ld      a,c
 448+ E9D6 ~                                    ReturnIfALTNusng ixl
 449+ E9D6 ~                                    ReturnIfAEqNusng ixl
 450+ E9D6 ~                                    jp      l2S_Continue
 451+ E9D6 ~            .IncCP:                 ld		a,c
 452+ E9D6 ~                                    ReturnIfAGTENusng ixl					; if X1 has reached or exceeded X2 then we are done
 453+ E9D6 ~            l2S_Continue:
 454+ E9D6 ~            l2S_HNegative:			ld		a,iyh
 455+ E9D6 ~                                    bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 456+ E9D6 ~                                    jr		z,l2S_ErrNotNegative			;
 457+ E9D6 ~            l2S_ErrNegative:		ld		a,(l2deltaY)					; if its a negative error update X
 458+ E9D6 ~                                    ld		d,0
 459+ E9D6 ~                                    ld		e,a
 460+ E9D6 ~                                    add		iy,de							; add deltaY(unsinged) to l2fraction
 461+ E9D6 ~            l2S_adjustCol:          nop										; this is our inc/dec of X
 462+ E9D6 ~                                    jr		l2S_Loop							; repeat loop
 463+ E9D6 ~            l2S_ErrNotNegative:     ld		a,iyh
 464+ E9D6 ~                                    or		iyl
 465+ E9D6 ~                                    JumpIfAIsZero l2S_ErrZero					; if there is no error then goto zeroerror
 466+ E9D6 ~            l2S_ErrPositive:        ld      de,iy;  lddeiy								; if its a positive error then we update Y
 467+ E9D6 ~                                    ex		de,hl
 468+ E9D6 ~                                    ld		d,0
 469+ E9D6 ~                                    ld		a,(l2deltaX)
 470+ E9D6 ~                                    ld		e,a
 471+ E9D6 ~                                    ClearCarryFlag
 472+ E9D6 ~                                    sbc		hl,de
 473+ E9D6 ~                                    ex		de,hl
 474+ E9D6 ~                                    ld      iy,de;ldiyde
 475+ E9D6 ~            l2S_adjustRow:          inc		b								; move Y down by one
 476+ E9D6 ~                                    jr		l2S_Loop
 477+ E9D6 ~            l2S_ErrZero:            ld		hl,(l2deltaX)
 478+ E9D6 ~                                    ex		de,hl
 479+ E9D6 ~                                    ld		hl,(l2deltaY)
 480+ E9D6 ~                                    ClearCarryFlag
 481+ E9D6 ~                                    sbc		hl,de
 482+ E9D6 ~                                    ex		de,hl
 483+ E9D6 ~                                    ld      iy,de; ldiyde
 484+ E9D6 ~            l2S_adjustCol2:         nop										; update X and Y
 485+ E9D6 ~                                    inc		b
 486+ E9D6 ~                                    jr		l2S_Loop
 487+ E9D6                      ENDIF
 488+ E9D6                      DEFINE  L2_DRAW_DIAGONAL 1
 489+ E9D6                      IFDEF L2_DRAW_DIAGONAL
 490+ E9D6              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
 491+ E9D6 32 6C E5     l2_draw_diagonal:       ld		(l2linecolor),a					;save colour for later
 492+ E9D9 21 00 00                             ld		hl,0                            ;
 493+ E9DC 22 64 E5                             ld		(l2deltaX),hl                   ;
 494+ E9DF 22 62 E5                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
 495+ E9E2 78           l2D_preSort:            ld		a,b								;
 496+ E9E3                                      JumpIfALTNusng	d,l2D_noYSort			; we must have Y1 < Y2 (if equal then verical line picked up earlier
 496+ E9E3 BA          >                        cp      d
 496+ E9E4 DA EC E9    >                        jp		c, l2D_noYSort
 497+ E9E7              l2D_SortBasedOnY:	    ldhlbc									;
 497+ E9E7 60          >                        ld		h,b
 497+ E9E8 69          >                        ld		l,c
 498+ E9E9 EB                                   ex		de,hl                           ;
 499+ E9EA                                      ldbchl									; swap over bc and de using hl as an intermediate
 499+ E9EA 44          >                        ld		b,h
 499+ E9EB 4D          >                        ld		c,l
 500+ E9EC DD 62        l2D_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
 501+ E9EE DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
 502+ E9F0 79           l2D_setXLen:            ld		a,c                             ;
 503+ E9F1                                      JumpIfALTNusng e,l2D_PosXLen			; if x1 < x2 then we have a positive increment
 503+ E9F1 BB          >                        cp      e
 503+ E9F2 DA FE E9    >                        jp		c, l2D_PosXLen
 504+ E9F5 79           l2D_NegXLen:            ld		a,c                             ;
 505+ E9F6 93                                   sub     e                               ;
 506+ E9F7 32 64 E5                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
 507+ E9FA 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
 508+ E9FC 18 07                                jr		l2D_XINCDEC
 509+ E9FE 7B           l2D_PosXLen:	        ld		a,e                             ;
 510+ E9FF 91                                   sub		c                               ;
 511+ EA00 32 64 E5                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
 512+ EA03 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
 513+ EA05 32 80 EA     l2D_XINCDEC:	        ld		(l2D_adjustCol),a				;
 514+ EA08 32 B0 EA                             ld		(l2D_adjustCol2),a				; update self modifying code for X update with inc or dec from above
 515+ EA0B 7A           l2D_setYLen				ld		a,d							 	; presorted on Y so it is now always positive
 516+ EA0C 90                                   sub		b
 517+ EA0D 32 62 E5                             ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
 518+ EA10              l2D_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
 519+ EA10 2A 62 E5     ldD_FracDYltDX:			ld		hl,(l2deltaY)					; Fraction = dY - dX
 520+ EA13 ED 5B 64 E5                          ld		de,(l2deltaX)
 521+ EA17                                      ClearCarryFlag
 521+ EA17 B7          >                        or a
 522+ EA18 ED 52                                sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
 523+ EA1A EB                                   ex		de,hl
 524+ EA1B FD 62                                ld		iyh,d							; we will use IY reg for fractions
 525+ EA1D FD 6B                                ld		iyl,e
 526+ EA1F F2 44 EA                             jp		p,l2D_fracIsPositive
 527+ EA22              l2D_fracIsNegative:     NegIY
 527+ EA22 AF          >                    xor a
 527+ EA23 FD 95       >                    sub iyl
 527+ EA25 FD 6F       >                    ld iyl,a
 527+ EA27 9F          >                    sbc a,a
 527+ EA28 FD 94       >                    sub iyh
 527+ EA2A FD 67       >                    ld iyh,a
 528+ EA2C                                      ShiftIYRight1
 528+ EA2C FD 7C       >			   ld 	a,iyh
 528+ EA2E CB 3F       >			   srl 	a
 528+ EA30 FD 67       >			   ld	iyh,a
 528+ EA32 FD 7D       >			   ld 	a,iyl
 528+ EA34 1F          >			   rra
 528+ EA35 FD 6F       >			   ld	iyl,a
 529+ EA37                                      NegIY
 529+ EA37 AF          >                    xor a
 529+ EA38 FD 95       >                    sub iyl
 529+ EA3A FD 6F       >                    ld iyl,a
 529+ EA3C 9F          >                    sbc a,a
 529+ EA3D FD 94       >                    sub iyh
 529+ EA3F FD 67       >                    ld iyh,a
 530+ EA41 C3 4F EA                             jp		l2D_SkipCalcInc					; so we have a negative frac
 531+ EA44              l2D_fracIsPositive:     ShiftIYRight1
 531+ EA44 FD 7C       >			   ld 	a,iyh
 531+ EA46 CB 3F       >			   srl 	a
 531+ EA48 FD 67       >			   ld	iyh,a
 531+ EA4A FD 7D       >			   ld 	a,iyl
 531+ EA4C 1F          >			   rra
 531+ EA4D FD 6F       >			   ld	iyl,a
 532+ EA4F              l2D_SkipCalcInc:
 533+ EA4F C5 D5        l2D_Loop:				push	bc,,de                 			; l2DeltaY and l2DeltaX are set
 534+ EA51 3A 6C E5                             ld		a,(l2linecolor)     			;
 535+ EA54                                      l2_plot_macro;call	l2_plot_pixel       			; Plot Pixel
 535+ EA54 78          >                        ld      a,b
 535+ EA55             >                        JumpIfAGTENusng 192 ,.NoPlot
 535+ EA55 FE C0       >                        cp     192
 535+ EA57 D2 63 EA    >                        jp		nc,.NoPlot
 535+ EA5A 69          >                        ld      l,c
 535+ EA5B CD 68 E0    >                        call    asm_l2_row_bank_select
 535+ EA5E 67          >                        ld      h,a
 535+ EA5F 3A B5 E2    >                        ld      a,(line_gfx_colour)
 535+ EA62 77          >                        ld      (hl),a
 535+ EA63             >.NoPlot:
 536+ EA63 D1 C1                                pop     bc,,de
 537+ EA65 DD 7C        l2D_CheckIfEnd:	        ld		a,ixh
 538+ EA67                                      JumpIfAGTENusng	  b,l2D_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 538+ EA67 B8          >                        cp     b
 538+ EA68 D2 6E EA    >                        jp		nc,l2D_CheckXPos
 539+ EA6B C3 72 EA                             jp		l2D_Continue
 540+ EA6E 79           l2D_CheckXPos:          ld		a,c
 541+ EA6F                                      ReturnIfAEqNusng ixl					; if X1 has reached or exceeded X2 then we are done
 541+ EA6F DD BD       >                        cp      ixl
 541+ EA71 C8          >                        ret     z
 542+ EA72              l2D_Continue:
 543+ EA72 FD 7C        l2D_HNegative:			ld		a,iyh
 544+ EA74 CB 7F                                bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 545+ EA76 28 0B                                jr		z,l2D_ErrNotNegative			;
 546+ EA78 3A 62 E5     l2D_ErrNegative:		ld		a,(l2deltaY)
 547+ EA7B 16 00                                ld		d,0
 548+ EA7D 5F                                   ld		e,a
 549+ EA7E FD 19                                add		iy,de							; add deltaY(unsinged) to l2fraction
 550+ EA80 00           l2D_adjustCol:          nop										; this is our inc/dec of X
 551+ EA81 18 CC                                jr		l2D_Loop							; repeat loop
 552+ EA83 FD 7C        l2D_ErrNotNegative:     ld		a,iyh
 553+ EA85 FD B5                                or		iyl
 554+ EA87                                      JumpIfAIsZero l2D_ErrZero					; if there is no error then goto zeroerror
 554+ EA87 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 554+ EA88 CA A1 EA    >                        jp	    z, l2D_ErrZero
 555+ EA8B FD 54 FD 5D  l2D_ErrPositive:		ld      de,iy;lddeiy
 556+ EA8F EB                                   ex		de,hl
 557+ EA90 16 00                                ld		d,0
 558+ EA92 3A 64 E5                             ld		a,(l2deltaX)
 559+ EA95 5F                                   ld		e,a
 560+ EA96                                      ClearCarryFlag
 560+ EA96 B7          >                        or a
 561+ EA97 ED 52                                sbc		hl,de
 562+ EA99 EB                                   ex		de,hl
 563+ EA9A FD 62 FD 6B                          ld      iy,de;ldiyde
 564+ EA9E 04           l2D_adjustRow:			inc		b
 565+ EA9F 18 AE                                jr		l2D_Loop
 566+ EAA1 2A 64 E5     l2D_ErrZero:            ld		hl,(l2deltaX)
 567+ EAA4 EB                                   ex		de,hl
 568+ EAA5 2A 62 E5                             ld		hl,(l2deltaY)
 569+ EAA8                                      ClearCarryFlag
 569+ EAA8 B7          >                        or a
 570+ EAA9 ED 52                                sbc		hl,de
 571+ EAAB EB                                   ex		de,hl
 572+ EAAC FD 62 FD 6B                          ld      iy,de;ldiyde
 573+ EAB0 00           l2D_adjustCol2:         nop										; update X and Y
 574+ EAB1 04                                   inc		b
 575+ EAB2 18 9B                                jr		l2D_Loop
 576+ EAB4              ;----------------------------------------------------------------------------------------------------------------------------------
 577+ EAB4                      ENDIF
 578+ EAB4
 579+ EAB4
 580+ EAB4
 581+ EAB4              ;Loin:				; BBC version of line draw
 582+ EAB4              ;; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 583+ EAB4              ;	ld		(l2linecolor),a					; save colour as a reg gets used alot, coudl move this into interrupt flag and disable interrups
 584+ EAB4              ;	ld		ixh,0							; ixh = s
 585+ EAB4              ;	ld		iyh,0							; iyh = swap
 586+ EAB4              ;	ld		l,0								; l will hold delta sign flags
 587+ EAB4              ;LoinCalcDeltaX:
 588+ EAB4              ;	ld		a,e
 589+ EAB4              ;	sub		c								; a = deltaX
 590+ EAB4              ;	JumpIfPositive LoinPosDx
 591+ EAB4              ;LoinNegDx:
 592+ EAB4              ;	neg										; carry flag will indicate deltaX was negative
 593+ EAB4              ;	ld		l,$80							; set bit 7 of l for negative
 594+ EAB4              ;LoinPosDx:
 595+ EAB4              ;	ld		ixl,a							; ixl = varP = deltaX
 596+ EAB4              ;LoinCalcDeltaY:
 597+ EAB4              ;	ld		a,d
 598+ EAB4              ;	sub		b								; a= deltaY
 599+ EAB4              ;	JumpIfPositive LoinPosDy
 600+ EAB4              ;LoinNegDy:
 601+ EAB4              ;	neg
 602+ EAB4              ;	set		6,l								; set bit 6 of l for negative deltaY
 603+ EAB4              ;LoinPosDy:
 604+ EAB4              ;	ld		iyl,a							; iyl = varQ = deltaY
 605+ EAB4              ;	JumpIfAGTENusng ixl, LoinSTPy			; if deltaY >= DeltaX then step along Y
 606+ EAB4              ;LoinSTPx:									; step along X
 607+ EAB4              ;	JumpOnBitClear l,7						; if l flags were clear then X2 < X2
 608+ EAB4              ;LoinSTPxSwapCoords:
 609+ EAB4              ;	dec		iyh								; swap flag now becomes FF
 610+ EAB4              ;	ld		a,l								; save l flags
 611+ EAB4              ;	ex		de,hl							; save de to hl
 612+ EAB4              ;	lddebc									; Point2 = point1
 613+ EAB4              ;	ldbchl									; Point1 = point2 that was saved
 614+ EAB4              ;	ld		l,a								; get back l flags
 615+ EAB4              ;LoinSTPxCorrectOrder:
 616+ EAB4              ;	l2_point_pixel_y_safe					; call plot pixel preseving bc hl
 617+ EAB4              ;	ld		a,iyl							; get delta Y back
 618+ EAB4              ;	ld		iy1,$FE							; roll counter
 619+ EAB4              ;LionSTPxRollQ:
 620+ EAB4              ;	sla		a								; highest bit of delta-Y
 621+ EAB4              ;	jp		c,LoinSTPxSteep
 622+ EAB4              ;	cp		ixl								; compare with DeltaX
 623+ EAB4              ;	jp		cs,LoinSTPxShallow
 624+ EAB4              ;LoinSTPxSteep:								;; LI4
 625+ EAB4              ;	sbc		a,ixl							; deltaYwork -= (deltaX+1)
 626+ EAB4              ;	scf										; force carry flag set
 627+ EAB4              ;LoinSTPxShallow:							;; LI5
 628+ EAB4              ;	rl		iyl								; rotate iyl which started as FE
 629+ EAB4              ;	jp		c,LionSTPxRollQ					; so we are doing a 6 bit loop
 630+ EAB4              ;	inc		ihl								; DeltaX += 1
 631+ EAB4              ;LoinSTPxYDirection:							; change this to self modifying code
 632+ EAB4              ;	ld		a,d
 633+ EAB4              ;	JumpIfAGTEn	b,LionDOWN:
 634+ EAB4              ;	ld		a,iyh							; swap flag
 635+ EAB4              ;	JumpIfANotZero	X1Inc  					; if swap flag was not set then no need to update R
 636+ EAB4              ;LoinSTPxX1Dec:
 637+ EAB4              ;	dec		c								; move left 1 pixel as we sawped
 638+ EAB4              ;LoinSTPxXCounter:							;; LIL2
 639+ EAB4              ;	sub		b
 640+ EAB4              ;	if
 641+ EAB4              ;
 642+ EAB4              ;85 82                   STA &82	   \ R	\ mask byte
 643+ EAB4              ;A5 81                   LDA &81	   \ Q	\ delta-Y
 644+ EAB4              ;A2 FE                   LDX #&FE	\ roll counter
 645+ EAB4              ;86 81                   STX &81		\ Q
 646+ EAB4              ;.LIL1	\ roll Q
 647+ EAB4              ;0A                      ASL A		\ highest bit of delta-Y
 648+ EAB4              ;B0 04                   BCS LI4		\ steep
 649+ EAB4              ;C5 1B                   CMP &1B	   \ P	\ delta-X
 650+ EAB4              ;90 03                   BCC LI5		\ shallow
 651+ EAB4              ;.LI4	\ steep
 652+ EAB4              ;E5 1B                   SBC &1B		\ P
 653+ EAB4              ;38                      SEC
 654+ EAB4              ;.LI5	\ shallow
 655+ EAB4              ;26 81                   ROL &81	   \ Q	\ #&FE
 656+ EAB4              ;B0 F2                   BCS LIL1 	\ loop Q, end with some low bits in Q
 657+ EAB4              ;A6 1B                   LDX &1B		\ P
 658+ EAB4              ;E8                      INX 		\ Xreg is width
 659+ EAB4              ;A5 37                   LDA &37		\ Y2
 660+ EAB4              ;E5 35                   SBC &35		\ Y1
 661+ EAB4              ;B0 2C                   BCS DOWN	\ draw line to the right and down
 662+ EAB4              ;A5 90                   LDA &90		\ SWAP
 663+ EAB4              ;D0 07                   BNE LI6		\ else Xreg was correct after all, no need to update R
 664+ EAB4              ;CA                      DEX
 665+ EAB4              ;.LIL2	\ counter X width
 666+ EAB4              ;A5 82                   LDA &82	   \ R	\ mask byte
 667+ EAB4              ;51 07                   EOR (&07),Y	\ (SC),Y
 668+ EAB4              ;91 07                   STA (&07),Y	\ (SC),Y
 669+ EAB4              ;.LI6	\ Xreg correct
 670+ EAB4              ;46 82                   LSR &82	   \ R	\ mask byte
 671+ EAB4              ;90 08                   BCC LI7   	\ else moving to next column to right. Bring carry in back
 672+ EAB4              ;66 82                   ROR &82		\ R
 673+ EAB4              ;A5 07                   LDA &07		\ SC
 674+ EAB4              ;69 08                   ADC #8		\ next column
 675+ EAB4              ;85 07                   STA &07		\ SC
 676+ EAB4              ;.LI7	\ S += Q. this is like an overflow monitor to update Y
 677+ EAB4              ;A5 83                   LDA &83		\ S
 678+ EAB4              ;65 81                   ADC &81	   \ Q	\ some low bits
 679+ EAB4              ;85 83                   STA &83		\ S
 680+ EAB4              ;90 07                   BCC LIC2	\ skip Y adjustment
 681+ EAB4              ;88                      DEY
 682+ EAB4              ;10 04                   BPL LIC2	\ skip Y adjustment
 683+ EAB4              ;C6 08                   DEC &08		\ SC+1
 684+ EAB4              ;A0 07                   LDY #7
 685+ EAB4              ;.LIC2	\ skip Y adjustment
 686+ EAB4              ;CA                      DEX
 687+ EAB4              ;D0 DC                   BNE LIL2	\ loop X width
 688+ EAB4              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 689+ EAB4              ;60                      RTS
 690+ EAB4              ;
 691+ EAB4              ;.DOWN	\ Line is going to the right and down
 692+ EAB4              ;A5 90                   LDA &90		\ SWAP
 693+ EAB4              ;F0 07                   BEQ LI9		\ no swap
 694+ EAB4              ;CA                      DEX
 695+ EAB4              ;.LIL3	\ counter X width
 696+ EAB4              ;A5 82                   LDA &82	    \ R \ mask byte
 697+ EAB4              ;51 07                   EOR (&07),Y	\ (SC),Y
 698+ EAB4              ;91 07                   STA (&07),Y	\ (SC),Y
 699+ EAB4              ;.LI9	\ no swap
 700+ EAB4              ;46 82                   LSR &82		\ R
 701+ EAB4              ;90 08                   BCC LI10	\ still in correct column, hop
 702+ EAB4              ;66 82                   ROR &82		\ R
 703+ EAB4              ;A5 07                   LDA &07		\ SC
 704+ EAB4              ;69 08                   ADC #8		\ next column
 705+ EAB4              ;85 07                   STA &07		\ SC
 706+ EAB4              ;.LI10	\ this is like an overflow monitor to update Y
 707+ EAB4              ;A5 83                   LDA &83		\ S
 708+ EAB4              ;65 81                   ADC &81		\ Q
 709+ EAB4              ;85 83                   STA &83		\ S
 710+ EAB4              ;90 09                   BCC LIC3	\ skip Y adjustment
 711+ EAB4              ;C8                      INY
 712+ EAB4              ;C0 08                   CPY #8
 713+ EAB4              ;D0 04                   BNE LIC3	\ have not reached bottom byte of char, hop
 714+ EAB4              ;E6 08                   INC &08		\ SC+1
 715+ EAB4              ;A0 00                   LDY #0
 716+ EAB4              ;.LIC3	\ skipped Y adjustment
 717+ EAB4              ;CA                      DEX
 718+ EAB4              ;D0 DA                   BNE LIL3	\ loop X width
 719+ EAB4              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 720+ EAB4              ;60                      RTS
 721+ EAB4              ;
 722+ EAB4              ;.STPY	\ -> &1797 \ Step along y for line, goes down and to right
 723+ EAB4              ;A4 35                   LDY &35		\ Y1
 724+ EAB4              ;98                      TYA
 725+ EAB4              ;A6 34                   LDX &34		\ X1
 726+ EAB4              ;C4 37                   CPY &37		\ Y2
 727+ EAB4              ;B0 10                   BCS LI15	\ skip swap if Y1 >= Y2
 728+ EAB4              ;C6 90                   DEC &90		\ SWAP
 729+ EAB4              ;A5 36                   LDA &36		\ X2
 730+ EAB4              ;85 34                   STA &34		\ X1
 731+ EAB4              ;86 36                   STX &36		\ X2
 732+ EAB4              ;AA                      TAX
 733+ EAB4              ;A5 37                   LDA &37		\ Y2
 734+ EAB4              ;85 35                   STA &35		\ Y1
 735+ EAB4              ;84 37                   STY &37		\ Y2
 736+ EAB4              ;A8                      TAY
 737+ EAB4              ;.LI15	\ Y1 Y2 order is now correct
 738+ EAB4              ;4A                      LSR A
 739+ EAB4              ;4A                      LSR A
 740+ EAB4              ;4A                      LSR A
 741+ EAB4              ;09 60                   ORA #&60
 742+ EAB4              ;85 08                   STA &08	 \ SC+1	\ screen hi
 743+ EAB4              ;8A                      TXA 		\ X1
 744+ EAB4              ;29 F8                   AND #&F8
 745+ EAB4              ;85 07                   STA &07	  \ SC	\ screen lo
 746+ EAB4              ;8A                      TXA
 747+ EAB4              ;29 07                   AND #7		\ mask index
 748+ EAB4              ;AA                      TAX
 749+ EAB4              ;BD AF 16                LDA &16AF,X \ TWOS,X \ Mode4 single pixel
 750+ EAB4              ;85 82                   STA &82	    \ R	\ mask
 751+ EAB4              ;A5 35                   LDA &35		\ Y1
 752+ EAB4              ;29 07                   AND #7
 753+ EAB4              ;A8                      TAY
 754+ EAB4              ;A5 1B                   LDA &1B	    \ P	\ delta-X
 755+ EAB4              ;A2 01                   LDX #1		\ roll counter
 756+ EAB4              ;86 1B                   STX &1B	    	\ P
 757+ EAB4              ;.LIL4	\ roll P
 758+ EAB4              ;0A                      ASL A
 759+ EAB4              ;B0 04                   BCS LI13	\ do subtraction
 760+ EAB4              ;C5 81                   CMP &81	    \ Q	\ delta-Y
 761+ EAB4              ;90 03                   BCC LI14	\ less than Q
 762+ EAB4              ;.LI13	\ do subtraction
 763+ EAB4              ;E5 81                   SBC &81		\ Q
 764+ EAB4              ;38                      SEC
 765+ EAB4              ;.LI14	\ less than Q
 766+ EAB4              ;26 1B                   ROL &1B		\ P
 767+ EAB4              ;90 F2                   BCC LIL4	\ loop P, end with some low bits in P
 768+ EAB4              ;A6 81                   LDX &81		\ Q
 769+ EAB4              ;E8                      INX 		\ adjust height
 770+ EAB4              ;A5 36                   LDA &36		\ X2
 771+ EAB4              ;E5 34                   SBC &34		\ X1
 772+ EAB4              ;90 2D                   BCC LFT		\ if C cleared then line moving to the left - hop down
 773+ EAB4              ;18                      CLC
 774+ EAB4              ;A5 90                   LDA &90		\ SWAP
 775+ EAB4              ;F0 07                   BEQ LI17 	\ skip first point
 776+ EAB4              ;CA                      DEX
 777+ EAB4              ;.LIL5	\ skipped first point, counter X
 778+ EAB4              ;A5 82                   LDA &82	    \ R \ mask byte
 779+ EAB4              ;51 07                   EOR (&07),Y	\ (SC),Y
 780+ EAB4              ;91 07                   STA (&07),Y	\ (SC),Y
 781+ EAB4              ;.LI17	\ skipped first point
 782+ EAB4              ;88                      DEY
 783+ EAB4              ;10 04                   BPL LI16	\ skip hi adjust
 784+ EAB4              ;C6 08                   DEC &08		\ SC+1
 785+ EAB4              ;A0 07                   LDY #7		\ new char
 786+ EAB4              ;	.LI16	\ skipped hi adjust
 787+ EAB4              ;A5 83                   LDA &83		\ S
 788+ EAB4              ;65 1B                   ADC &1B		\ P
 789+ EAB4              ;85 83                   STA &83		\ S
 790+ EAB4              ;90 0C                   BCC LIC5	\ skip, still in same column
 791+ EAB4              ;46 82                   LSR &82	  \ R	\ mask
 792+ EAB4              ;90 08                   BCC LIC5  	\ no mask bit hop
 793+ EAB4              ;66 82                   ROR &82   \ R	\ else moved over to next column, reset mask
 794+ EAB4              ;A5 07                   LDA &07	  \ SC  \ screen lo
 795+ EAB4              ;69 08                   ADC #8		\ next char below
 796+ EAB4              ;85 07                   STA &07		\ SC
 797+ EAB4              ;.LIC5	\ same column
 798+ EAB4              ;CA                      DEX
 799+ EAB4              ;D0 DC                   BNE LIL5	\ loop X height
 800+ EAB4              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 801+ EAB4              ;60                      RTS
 802+ EAB4              ;
 803+ EAB4              ;.LFT	\ going left
 804+ EAB4              ;A5 90                   LDA &90		\ SWAP
 805+ EAB4              ;F0 07                   BEQ LI18	\ skip first point
 806+ EAB4              ;CA                      DEX 		\ reduce height
 807+ EAB4              ;.LIL6	\ counter X height
 808+ EAB4              ;A5 82                   LDA &82	   \ R	\ mask byte
 809+ EAB4              ;51 07                   EOR (&07),Y	\ (SC),Y
 810+ EAB4              ;91 07                   STA (&07),Y	\ (SC),Y
 811+ EAB4              ;.LI18
 812+ EAB4              ;88                      DEY
 813+ EAB4              ;10 04                   BPL LI19	\ skip hi adjust
 814+ EAB4              ;C6 08                   DEC &08		\ SC+1
 815+ EAB4              ;A0 07                   LDY #7		\ rest char row
 816+ EAB4              ;.LI19	\ skipped hi adjust
 817+ EAB4              ;A5 83                   LDA &83		\ S
 818+ EAB4              ;65 1B                   ADC &1B	    \ P \ some low bits
 819+ EAB4              ;85 83                   STA &83		\ S
 820+ EAB4              ;90 0D                   BCC LIC6	\ no overflow
 821+ EAB4              ;06 82                   ASL &82	    \ R \ else move byte mask to the left
 822+ EAB4              ;90 09                   BCC LIC6	\ no overflow
 823+ EAB4              ;26 82                   ROL &82		\ R
 824+ EAB4              ;A5 07                   LDA &07		\ SC
 825+ EAB4              ;E9 07                   SBC #7		\ down 1 char
 826+ EAB4              ;85 07                   STA &07		\ SC
 827+ EAB4              ;18                      CLC
 828+ EAB4              ;.LIC6	\ no overflow
 829+ EAB4              ;CA                      DEX 		\ height
 830+ EAB4              ;D0 DB                   BNE LIL6	\ loop X
 831+ EAB4              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 832+ EAB4              ;.HL6
 833+ EAB4              ;60                      RTS 		\ end Line drawing
 834+ EAB4
 835+ EAB4
 836+ EAB4              ;;l2_draw_diagonalopt:
 837+ EAB4                              DISPLAY "TODO: optimisation"
 838+ EAB4              	; ">TODO l2_draw_diagonalopt fast horz vert optmisation"
 839+ EAB4              ;;	push	af
 840+ EAB4              ;;	ld		a,b
 841+ EAB4              ;;	cp		d
 842+ EAB4              ;;	jr		z,.RegularDiagnonal
 843+ EAB4              ;;.CheckHorz:
 844+ EAB4              ;;	ld		a,c
 845+ EAB4              ;;	cp		e
 846+ EAB4              ;;	jr		z,.horizontalLine
 847+ EAB4              ;;.RegularDiagnonal:
 848+ EAB4              ;;	pop		af
 849+ EAB4              ;;	call diag
 850+ EAB4
 851+ EAB4
 852+ EAB4              ;;l2_signed_mul2a:
 853+ EAB4              ;;; ">l2_signed_mul2a - Signed a = a * 2 using shift)"
 854+ EAB4              ;;	TEST	$80
 855+ EAB4              ;;	jr		nz, .negativecalc
 856+ EAB4              ;;.positivecalc:
 857+ EAB4              ;;	ccf
 858+ EAB4              ;;	rla
 859+ EAB4              ;;	ret
 860+ EAB4              ;;.negativecalc:
 861+ EAB4              ;;	neg
 862+ EAB4              ;;	ccf
 863+ EAB4              ;;	rla
 864+ EAB4              ;;	neg
 865+ EAB4              ;;	ret
 866+ EAB4              ;;
 867+ EAB4              ;;l2_signed_mul2atohl:
 868+ EAB4              ;;; ">l2_signed_mul2ahl - Signed hl = a * 2 using shift)"
 869+ EAB4              ;;	TEST	$80
 870+ EAB4              ;;	jr		nz, .negativecalc
 871+ EAB4              ;;.positivecalc:
 872+ EAB4              ;;	ld		hl,0
 873+ EAB4              ;;	ld		l,a
 874+ EAB4              ;;	add		hl,a
 875+ EAB4              ;;	ret
 876+ EAB4              ;;.negativecalc:
 877+ EAB4              ;;	neg
 878+ EAB4              ;;	ld		hl,0
 879+ EAB4              ;;	ld		l,a
 880+ EAB4              ;;	neghl
 881+ EAB4              ;;	ret
 882+ EAB4              ;;
 883+ EAB4              ;;l2_e2fractionby2:
 884+ EAB4              ;;	ld 		hl,(l2fraction)
 885+ EAB4              ;;	push	de
 886+ EAB4              ;;	ld		d,h
 887+ EAB4              ;;	ld		e,l
 888+ EAB4              ;;	add		hl,de
 889+ EAB4              ;;	pop		de
 890+ EAB4              ;;	ld		(l2e2),hl
 891+ EAB4              ;;	ret
 892+ EAB4
 893+ EAB4
 894+ EAB4
 895+ EAB4
 896+ EAB4
 897+ EAB4              ;;//	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 898+ EAB4              ;;//.catchLoop:
 899+ EAB4              ;;//	jp .catchLoop
 900+ EAB4              ;;//.continue:
 901+ EAB4              ;;//    ld      A,D
 902+ EAB4              ;;//    sub     H
 903+ EAB4              ;;//    jr      NC,.DXpositive    ;delta_x > 0
 904+ EAB4              ;;//.DXNegative:
 905+ EAB4              ;;//    neg
 906+ EAB4              ;;//.DXPositive:
 907+ EAB4              ;;//    ld      B,A              ;B <- |delta_x|
 908+ EAB4              ;;//    ld      A,E
 909+ EAB4              ;;//    sub     L
 910+ EAB4              ;;//    jr      NC,.DYpositive    ;delta_y > 0
 911+ EAB4              ;;//.DYNegative:
 912+ EAB4              ;;//    neg
 913+ EAB4              ;;//.DYPositive:
 914+ EAB4              ;;//    sub     B               ;|delta_y|
 915+ EAB4              ;;//	push	af
 916+ EAB4              ;;//	jr		c,.DeltaX
 917+ EAB4              ;;//.DeltaY
 918+ EAB4              ;;//	ld      A,H             			;if |delta_x| < |delta_y| then
 919+ EAB4              ;;//    ld      H,L             			;then values x and y are swapped
 920+ EAB4              ;;//    ld      L,A             			;so the loop will always be performed on the
 921+ EAB4              ;;//    ld      A,D             			;x value. A flag must be set to
 922+ EAB4              ;;//    ld      D,E             			;remind that data must be drawn (y,x)
 923+ EAB4              ;;//    ld      E,A             			;instead of (x,y)
 924+ EAB4              ;;//.DeltaX:
 925+ EAB4              ;;//	ld		a,d
 926+ EAB4              ;;//	sub		h
 927+ EAB4              ;;//	jr		nc,.TestDY					; x1 < x2
 928+ EAB4              ;;//.TestDX:
 929+ EAB4              ;;//	ex		de,hl
 930+ EAB4              ;;//.TestDY:
 931+ EAB4              ;;//	ld		a,e
 932+ EAB4              ;;//	sub		l
 933+ EAB4              ;;//    ld      A,$01
 934+ EAB4              ;;//    jr      NC,.StoreA
 935+ EAB4              ;;//    neg                     ;y1 > y2 : in case2 the 'y' variable
 936+ EAB4              ;;//.StoreA:
 937+ EAB4              ;;//        ld      (l2way),A
 938+ EAB4              ;;//.InitLine:
 939+ EAB4              ;;//        ld      B,H
 940+ EAB4              ;;//        ld      C,L
 941+ EAB4              ;;//        ld      A,E
 942+ EAB4              ;;//        sub     L
 943+ EAB4              ;;//        jr      NC,.EndInit
 944+ EAB4              ;;//        ld      A,L
 945+ EAB4              ;;//        ld      L,E
 946+ EAB4              ;;//        ld      E,A
 947+ EAB4              ;;//.EndInit:
 948+ EAB4              ;;//        ld      A,E
 949+ EAB4              ;;//        sub     L
 950+ EAB4              ;;//        rla
 951+ EAB4              ;;//        ld      L,A             ;value to add in case1 (d < 0)
 952+ EAB4              ;;//        add     A,H
 953+ EAB4              ;;//        sub     D
 954+ EAB4              ;;//        ld      E,A             ;'d' variable is initialised
 955+ EAB4              ;;//        add     A,H
 956+ EAB4              ;;//        sub     D
 957+ EAB4              ;;//        ld      H,A             ;value to add in case2 (d >= 0)
 958+ EAB4              ;;//.Loop:
 959+ EAB4              ;;//        ld      A,B
 960+ EAB4              ;;//        sub     D
 961+ EAB4              ;;//        jr      NC,.EndLine       ;the line is completely drawn.
 962+ EAB4              ;;//        pop     AF
 963+ EAB4              ;;//        bit     7,A
 964+ EAB4              ;;//        push    AF
 965+ EAB4              ;;//        push    AF
 966+ EAB4              ;;//        push    BC
 967+ EAB4              ;;//        jr      Z,.DrawPoint
 968+ EAB4              ;;//        ld      A,B
 969+ EAB4              ;;//        ld      B,C
 970+ EAB4              ;;//        ld      C,A
 971+ EAB4              ;;//.DrawPoint:
 972+ EAB4              ;;//		push	hl
 973+ EAB4              ;;//		pushbcdeaf
 974+ EAB4              ;;//		ld		b,e
 975+ EAB4              ;;//		ld		c,d
 976+ EAB4              ;;//	ld 		a,(l2linecolor)
 977+ EAB4              ;;//	call	l2_plot_pixel
 978+ EAB4              ;;//		popafdebc
 979+ EAB4              ;;//		pop		hl
 980+ EAB4              ;;//        pop     BC
 981+ EAB4              ;;//        pop     AF
 982+ EAB4              ;;//.TestD:
 983+ EAB4              ;;//        bit     7,E
 984+ EAB4              ;;//        jr      NZ,.Case1
 985+ EAB4              ;;//.Case2:                          ;d >= 0
 986+ EAB4              ;;//        ld      A,E
 987+ EAB4              ;;//        add     A,H
 988+ EAB4              ;;//        ld      E,A
 989+ EAB4              ;;//        ld      A,(l2way)
 990+ EAB4              ;;//        add     A,C
 991+ EAB4              ;;//        ld      C,A
 992+ EAB4              ;;//        jr      .EndLoop
 993+ EAB4              ;;//.Case1:                          ;d < 0
 994+ EAB4              ;;//        ld      A,E
 995+ EAB4              ;;//        add     A,L
 996+ EAB4              ;;//        ld      E,A
 997+ EAB4              ;;//.EndLoop:
 998+ EAB4              ;;//        inc     B
 999+ EAB4              ;;//        jr      .Loop
1000+ EAB4              ;;//.EndLine:
1001+ EAB4              ;;//        pop     AF              ;MUST NOT BE REMOVED
1002+ EAB4              ;;//        pop     HL              ;can be removed
1003+ EAB4              ;;//        pop     DE              ;can be removed
1004+ EAB4              ;;//        ret
1005+ EAB4
1006+ EAB4              ;;	ld		(.l2yadjust),a
1007+ EAB4              ;;	call	calcdeltax:
1008+ EAB4              ;;	ld		(.l2xadjust),a
1009+ EAB4              ;;.calcfraction:							; err(or fraction) = dx+dy;
1010+ EAB4              ;;	push	hl
1011+ EAB4              ;;	push	de
1012+ EAB4              ;;	ld		hl,(l2deltaX)
1013+ EAB4              ;;	ld		de,(l2deltaY)
1014+ EAB4              ;;	add		hl,de
1015+ EAB4              ;;	ld		(l2fraction),hl
1016+ EAB4              ;;	pop		de
1017+ EAB4              ;;	pop		hl
1018+ EAB4              ;;.mainloop:
1019+ EAB4              ;;	push	bc
1020+ EAB4              ;;	push	de
1021+ EAB4              ;;	ld 		a,(l2linecolor)
1022+ EAB4              ;;	call	l2_plot_pixel
1023+ EAB4              ;;	pop		de
1024+ EAB4              ;;	pop		bc
1025+ EAB4              ;;.arewefinishedtest
1026+ EAB4              ;;	ld		a,b
1027+ EAB4              ;;	cp		d
1028+ EAB4              ;;	jr		nz,.notthereyet
1029+ EAB4              ;;	ld		a,c
1030+ EAB4              ;;	cp		e
1031+ EAB4              ;;	ret		z
1032+ EAB4              ;;.notthereyet:
1033+ EAB4              ;;	push	de
1034+ EAB4              ;;	call	l2_e2fractionby2			; e2 = 2*err;
1035+ EAB4              ;;	pop		de
1036+ EAB4              ;;.e2dytest:								; if (e2 >= dy) /* e_xy+e_x > 0 */  then S and P/V are the same
1037+ EAB4              ;;	push	de							; so if m & pe  or p & po calc (m = sign set p = 0)
1038+ EAB4              ;;	ld		de,(l2deltaY)				;    if m & po  or p & pe skip  (pe = pv set po = pv 0)
1039+ EAB4              ;;	or		a							;
1040+ EAB4              ;;	sbc		hl,de						;
1041+ EAB4              ;;	pop		de
1042+ EAB4              ;;	jr		z,  .dodycalc				; if equal then calc
1043+ EAB4              ;;	jp		p,	.dodycalc				; sign clear to H>D even with negtives
1044+ EAB4              ;;	jr		.skipdycalc         		; sign = 0     so  skip as pe
1045+ EAB4              ;;.dodycalc:
1046+ EAB4              ;;	ld		hl,(l2fraction)
1047+ EAB4              ;;	push	de
1048+ EAB4              ;;	ld		de,(l2deltaY)
1049+ EAB4              ;;	add		hl,de
1050+ EAB4              ;;	ld		(l2fraction),de
1051+ EAB4              ;;	pop		de
1052+ EAB4              ;;.l2yadjust:
1053+ EAB4              ;;	nop
1054+ EAB4              ;;.skipdycalc:
1055+ EAB4              ;;.e2dxtest:								;  if (e2 <= dx) /* e_xy+e_y < 0 */ then S and P/V are different.
1056+ EAB4              ;;	ld		hl,(l2e2)
1057+ EAB4              ;;	push	de							;
1058+ EAB4              ;;	ld		de,(l2deltaX)				;
1059+ EAB4              ;;	or		a							; clear carry flag
1060+ EAB4              ;;	sbc		hl,de						; hl = hl - de is if de > hl will get pv and signed different?
1061+ EAB4              ;;	pop		de
1062+ EAB4              ;;	jr		z,.dodxcalc					; e2 == dx so do calc
1063+ EAB4              ;;	jp		m,.dodxcalc					; was sign bit set
1064+ EAB4              ;;	jr		.skipdxcalc         	    ; diff so skip ; pvclear = po        pvset = pe
1065+ EAB4              ;;.dodxcalc:
1066+ EAB4              ;;	ld		hl,(l2fraction)
1067+ EAB4              ;;	push	de
1068+ EAB4              ;;	ld		de,(l2deltaX)
1069+ EAB4              ;;	add		hl,de
1070+ EAB4              ;;	ld		(l2fraction),de
1071+ EAB4              ;;	pop		de
1072+ EAB4              ;;.l2xadjust:
1073+ EAB4              ;;	nop
1074+ EAB4              ;;.skipdxcalc:
1075+ EAB4              ;;	jr 		.mainloop
1076+ EAB4
1077+ EAB4
1078+ EAB4              ;;/l2_draw_diagonalold:
1079+ EAB4              ;;/MESSAGE ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
1080+ EAB4              ;;/	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
1081+ EAB4              ;;/.sortycoords:
1082+ EAB4              ;;/	ld		a,b							; Sort to Y0 is always > y1 so we don't have to deal with step y and only step x
1083+ EAB4              ;;/	cp		d
1084+ EAB4              ;;/	jr		nc, .nocoordswap
1085+ EAB4              ;;/.swapcoords:
1086+ EAB4              ;;/	ex		de,hl						; save de to hl ! effective code line 98 after macros
1087+ EAB4              ;;/	lddebc
1088+ EAB4              ;;/	ldbchl
1089+ EAB4              ;;/.nocoordswap:
1090+ EAB4              ;;/	ld		a,d							; l2_dy = -ABS(l2_vy1 - l2_vy0)
1091+ EAB4              ;;/	sub		b							; we have already sorted  so y1 > y0
1092+ EAB4              ;;/	ld		(l2deltaY),a
1093+ EAB4              ;;/	neg									; DEBUG
1094+ EAB4              ;;/	ld		(l2deltaYn),a				; DEBUG
1095+ EAB4              ;;/	neg									; DEBUG
1096+ EAB4              ;;/.deltaxequABSx0Minusx1:						; we need to set l2dx to abs x1-x0 and set
1097+ EAB4              ;;/    ld		a,c
1098+ EAB4              ;;/	cp		e
1099+ EAB4              ;;/	jr		c, .x1GTx0
1100+ EAB4              ;;/.x1LTx0
1101+ EAB4              ;;/	ld		a,c
1102+ EAB4              ;;/	sub		e
1103+ EAB4              ;;/	ld		(l2deltaX),a				; just 8 bit for now should it be 16?
1104+ EAB4              ;;/	neg									; DEBUG
1105+ EAB4              ;;/	ld		(l2deltaXn),a				; DEBUG
1106+ EAB4              ;;/	neg									; DEBUG
1107+ EAB4              ;;/	ld		a,l2incbstep
1108+ EAB4              ;;/	jr		.setlayershift0
1109+ EAB4              ;;/.x1GTx0:
1110+ EAB4              ;;/	ld		a,e
1111+ EAB4              ;;/	sub		c
1112+ EAB4              ;;/	ld		(l2deltaX),a					; just 8 bit for now should it be 16?
1113+ EAB4              ;;/	neg									; DEBUG
1114+ EAB4              ;;/	ld		(l2deltaXn),a				; DEBUG
1115+ EAB4              ;;/	neg									; DEBUG
1116+ EAB4              ;;/	ld		a,l2decbstep
1117+ EAB4              ;;/.setlayershift0:
1118+ EAB4              ;;/	ld		a,0
1119+ EAB4              ;;/	pushbcde
1120+ EAB4              ;;/	call	asm_l2_bank_n_select		; l2_layer_shift = 0 and bank 0 selected
1121+ EAB4              ;;/	popdebc
1122+ EAB4              ;;/; so now we have set inc or dec instruction, l2dy, l2dx and on bank 0,
1123+ EAB4              ;;/.dymuliplyby2:
1124+ EAB4              ;;/	ld		a, (l2deltaY)				; dy *= 2
1125+ EAB4              ;;/	call	l2_signed_mul2a
1126+ EAB4              ;;/	ld		(l2deltaYsq),a
1127+ EAB4              ;;/	neg									; DEBUG
1128+ EAB4              ;;/	ld		(l2deltaYsqn),a				; DEBUG
1129+ EAB4              ;;/	neg									; DEBUG
1130+ EAB4              ;;/.dxmuliplyby2:
1131+ EAB4              ;;/	ld		a, (l2deltaX)				; dx *= 2
1132+ EAB4              ;;/	call	l2_signed_mul2a
1133+ EAB4              ;;/	ld		(l2deltaXsq),a
1134+ EAB4              ;;/	neg									; DEBUG
1135+ EAB4              ;;/	ld		(l2deltaXsqn),a				; DEBUG
1136+ EAB4              ;;/	neg									; DEBUG
1137+ EAB4              ;;/.plotfirstpixel:
1138+ EAB4              ;;/	pushbcde
1139+ EAB4              ;;/	ld a,(l2linecolor)
1140+ EAB4              ;;/	call	l2_plot_pixel
1141+ EAB4              ;;/	popdebc
1142+ EAB4              ;;/.mainloop:								; if (l2_dx > l2_dy) signed
1143+ EAB4              ;;/	ld		a,(l2deltaX)				;If A < N, then S and P/V are different.
1144+ EAB4              ;;/	ld		hl,l2deltaY					;A >= N, then S and P/V are the same
1145+ EAB4              ;;/	cp		(hl)
1146+ EAB4              ;;/	jp		m,	.signset
1147+ EAB4              ;;/.signclear:
1148+ EAB4              ;;/	jp		pe,	.dxLTEdybranch
1149+ EAB4              ;;/	jr		.dxGTdybranch
1150+ EAB4              ;;/.signset:
1151+ EAB4              ;;/	jp		po,	.dxLTEdybranch
1152+ EAB4              ;;/.dxGTdybranch:
1153+ EAB4              ;;/	ld		a,(l2deltaYsq)
1154+ EAB4              ;;/	ld		hl,l2deltaX
1155+ EAB4              ;;/	sub		(hl)
1156+ EAB4              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 dx
1157+ EAB4              ;;/.BranchAwhile							; while (l2_vx0 != l2_vx1)
1158+ EAB4              ;;/	ld		a,c
1159+ EAB4              ;;/	cp		e
1160+ EAB4              ;;/	ret		z							; if x0 = x1 then done
1161+ EAB4              ;;/.BranchAtestfraction:					; if (l2_fraction >= 0)
1162+ EAB4              ;;/	ld		a,(l2fraction)
1163+ EAB4              ;;/	TEST	$80
1164+ EAB4              ;;/	jr		nz,.BranchAskipYstep
1165+ EAB4              ;;/	inc		b							; 		++l2_vy0;
1166+ EAB4              ;;/	ld		hl,l2deltaXsq
1167+ EAB4              ;;/	sub		(hl)						; 		l2_fraction -= l2_dx;
1168+ EAB4              ;;/	ld		(l2fraction),a
1169+ EAB4              ;;/.BranchAskipYstep:
1170+ EAB4              ;;/.l2stepx1:
1171+ EAB4              ;;/	inc		b							; this is self modifying code point 1 l2_vx0 += l2_stepx
1172+ EAB4              ;;/	ld		a,(l2fraction)				; l2_fraction += l2_dy can optimise later as a already has this?
1173+ EAB4              ;;/	ld		hl,l2deltaYsq
1174+ EAB4              ;;/	add		a,(hl)
1175+ EAB4              ;;/	ld		(l2fraction),a
1176+ EAB4              ;;/.BranchAplotBCColA:						; l2_plot_pixel(l2_vx0,l2_vy0,color);
1177+ EAB4              ;;/	pushbcde
1178+ EAB4              ;;/	ld a,(l2linecolor)
1179+ EAB4              ;;/	call	l2_plot_pixel
1180+ EAB4              ;;/	popdebc
1181+ EAB4              ;;/.BranchAloop:
1182+ EAB4              ;;/	jr		.BranchAwhile
1183+ EAB4              ;;/.dxLTEdybranch:
1184+ EAB4              ;;/	ld		a,(l2deltaXsq)				; l2_fraction = l2_dx - (l2_dy >> 1);
1185+ EAB4              ;;/	ld		hl, l2deltaY
1186+ EAB4              ;;/	sub		(hl)
1187+ EAB4              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 d
1188+ EAB4              ;;/.BranchBwhile:							; while (l2_vy0 != l2_vy1)
1189+ EAB4              ;;/	ld		a,b
1190+ EAB4              ;;/	cp		d
1191+ EAB4              ;;/	ret		z							; if x0 = x1 then done
1192+ EAB4              ;;/.BranchBtestfraction:					; if (l2_fraction >= 0)
1193+ EAB4              ;;/	ld		a,(l2fraction)
1194+ EAB4              ;;/	TEST	$80
1195+ EAB4              ;;/	jr		nz,.BranchBskipYstep
1196+ EAB4              ;;/.l2stepx2
1197+ EAB4              ;;/	inc		b							; l2_vx0 += l2_stepx; this is self modifying code point 2
1198+ EAB4              ;;/	ld		a,(l2fraction)				; l2_fraction -= l2_dy
1199+ EAB4              ;;/	ld		hl,l2deltaYsq
1200+ EAB4              ;;/	sub		(hl)
1201+ EAB4              ;;/	ld		(l2fraction),a
1202+ EAB4              ;;/.BranchBskipYstep:
1203+ EAB4              ;;/	ld		hl, l2deltaYsq
1204+ EAB4              ;;/	add		a,(hl)
1205+ EAB4              ;;/	ld		(l2fraction),a
1206+ EAB4              ;;/	inc		b							; ++l2_vy0;
1207+ EAB4              ;;/.BranchBplotBCColA:
1208+ EAB4              ;;/	pushbcde
1209+ EAB4              ;;/	ld a,(l2linecolor)
1210+ EAB4              ;;/	call	l2_plot_pixel
1211+ EAB4              ;;/	popdebc
1212+ EAB4              ;;/.BranchBloop:
1213+ EAB4              ;;/	jr		.BranchBwhile
1214+ EAB4
# file closed: ./Layer2Graphics/layer2_plot_diagonal.asm
 854  EAB4              ;    INCLUDE "./Layer2Graphics/asm_l2_plot_triangle.asm"
 855  EAB4              ;    INCLUDE "./Layer2Graphics/asm_l2_fill_triangle.asm"
 856  EAB4              ;    INCLUDE "./Layer2Graphics/L2_SolidTriangles.asm"
 857  EAB4                  INCLUDE "./Layer2Graphics/layer2_plot_circle.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle.asm
   1+ EAB4
   2+ EAB4 00 00        l2_circle_pos		DW 0
   3+ EAB6 00           l2_circle_colour	DB 0
   4+ EAB7 00           l2_circle_radius	DB 0
   5+ EAB8 00           l2_circle_x			DB 0
   6+ EAB9 00           l2_circle_y			DB 0
   7+ EABA 00           l2_circle_d			DB 0
   8+ EABB
   9+ EABB 00 00 00...  l2_circle_xHeap 	DS 2*66
  10+ EB3F 00 00 00...  l2_circle_yHeap     DS 2*66
  11+ EBC3 00           l2_circle_heap_size DB 0
  12+ EBC4 00 00        l2_circle_clip_y    DW 0
  13+ EBC6 00 00        l2_circle_clip_x    DW 0
  14+ EBC8 00           l2_circle_flag      DB 0
  15+ EBC9 00           l2_circle_counter   DB 0
  16+ EBCA              ;Sine table
  17+ EBCA              ;FOR I%, 0, 31
  18+ EBCA              ;
  19+ EBCA              ; N = ABS(SIN((I% / 64) * 2 * PI))
  20+ EBCA              ;
  21+ EBCA              ; IF N >= 1
  22+ EBCA              ;  EQUB 255
  23+ EBCA              ; ELSE
  24+ EBCA              ;  EQUB INT(256 * N + 0.5)
  25+ EBCA              ; ENDIF
  26+ EBCA              ;
  27+ EBCA              ;NEXT
  28+ EBCA              ;---------------------------------------------------------------------------------------------------------------------------------
  29+ EBCA              ; in HL = xPixelPos, DE = yPixelPos, A = Radius
  30+ EBCA              ;IFDEF   CIRCLE2
  31+ EBCA              ;;;;+l2_circle_clipped:	ld		(l2_circle_radius),a
  32+ EBCA              ;;;;+					ld		(l2_circle_clip_y),de
  33+ EBCA              ;;;;+					ld		(l2_circle_clip_x),hl
  34+ EBCA              ;;;;+					ZeroA
  35+ EBCA              ;;;;+					ld		(l2_circle_heap_size),a
  36+ EBCA              ;;;;+					ld		(l2_circle_counter),a
  37+ EBCA              ;;;;+					dec		a
  38+ EBCA              ;;;;+					ld		(l2_circle_flag),a
  39+ EBCA              ;;;;+.CircleLoop:		call	SinCounter						; a = sin (counter) * 256
  40+ EBCA              ;;;;+					ld		d,a
  41+ EBCA              ;;;;+					ld		a,(l2_circle_radius)
  42+ EBCA              ;;;;+					ld		e,a
  43+ EBCA              ;;;;+					mul										; de = k * sin (counter) so d = k * sin (counter) / 256
  44+ EBCA              ;;;;+					ld		e,d								; using de as TA
  45+ EBCA              ;;;;+					ld		d,0
  46+ EBCA              ;;;;+					ld		a,(l2_circle_counter)
  47+ EBCA              ;;;;+					JumpIfALTNusng 33,.RightHalf
  48+ EBCA              ;;;;+.LeftHalf:			NegateDE								; if >= 33 then DE = de * -1 (2's c)
  49+ EBCA              ;;;;+					K6 = de + l2_circle_clip_x
  50+ EBCA              ;;;;+					call	CosCounter
  51+ EBCA              ;;;;+					ld		d,a
  52+ EBCA              ;;;;+					ld		a,(l2_circla_radius)
  53+ EBCA              ;;;;+					mul		de
  54+ EBCA              ;;;;+					ld		e,d
  55+ EBCA              ;;;;+					ld		d,0
  56+ EBCA              ;;;;+					a 		= l2_counter + 15 mod 64
  57+ EBCA              ;;;;+					JumpIfALTNusng	33, .BottomHalf
  58+ EBCA              ;;;;+.TopHalf:			NegateDE
  59+ EBCA              ;;;;+					K62 = de + l2_circle_clip_y
  60+ EBCA              ;;;;+					ld		a,(l2_circle_flag)
  61+ EBCA              ;;;;+					JumpIfAIsZZero		.SkipFlagUpdate
  62+ EBCA              ;;;;+					inc		a
  63+ EBCA              ;;;;+					ld		(l2_circle_flag),a
  64+ EBCA              ;;;;+.SkipFlagUpdate:
  65+ EBCA              ;;;;+
  66+ EBCA              ;;;;+                X = K * SIN (CNT + 16) (i.e X = K * COS (CNT)
  67+ EBCA              ;;;;+                A = (CNT + 15) mod 64
  68+ EBCA              ;;;;+                if  A >= 33     ; top half of circle
  69+ EBCA              ;;;;+                    X = neg X
  70+ EBCA              ;;;;+                    T = negative
  71+ EBCA              ;;;;+                call    Bline (draw segment)
  72+ EBCA              ;;;;+                        K6(32) = TX + K4(10) = y corrc of center + new point
  73+ EBCA              ;;;;+                        if flag <> 0
  74+ EBCA              ;;;;+                            flag ++ (as flag initially will be $FF so go to 0)
  75+ EBCA              ;;;;+                        BL5:
  76+ EBCA              ;;;;+                        if LSY2[LSP-1] <> $FF and LSY2 [LSP1] <> $FF    (BL5)
  77+ EBCA              ;;;;+                            X15 [0 1] = K5(10)                      (BL1)
  78+ EBCA              ;;;;+                            X15 [2 3] = K5(32)
  79+ EBCA              ;;;;+                            X15 [4 5] = K6(10)
  80+ EBCA              ;;;;+                            X15 [6 7] = K6(32)
  81+ EBCA              ;;;;+                            call clip X1Y1 to X2Y2
  82+ EBCA              ;;;;+                            if Line off scren goto BL5
  83+ EBCA              ;;;;+                            IF swap <> 0
  84+ EBCA              ;;;;+                                swap X1Y1 with X2Y2
  85+ EBCA              ;;;;+                            Y = LAP                                 (BL9)
  86+ EBCA              ;;;;+                            A = LSY2-1 [Y]
  87+ EBCA              ;;;;+                            if A = $FF
  88+ EBCA              ;;;;+                                LSX2[Y] = X1
  89+ EBCA              ;;;;+                                LSY2[Y] = Y1
  90+ EBCA              ;;;;+                                Y++
  91+ EBCA              ;;;;+
  92+ EBCA              ;;;;+                            Store X2 in LSX2(Y)                     (BL8)
  93+ EBCA              ;;;;+                            Store Y2 in lSY2(y)
  94+ EBCA              ;;;;+                            call    DrawLine from (X1 Y1 to X2 Y2)
  95+ EBCA              ;;;;+                            if  XX13 <> 0 goto BL5
  96+ EBCA              ;;;;+                                                                (BL7)
  97+ EBCA              ;;;;+                        Copy data for K6(3210) into K5(3210) for next call (K5(10) = x  K5(32) = y)
  98+ EBCA              ;;;;+                        CNT = CNT + STP
  99+ EBCA              ;;;;+            while CNT < 65
 100+ EBCA              ;ENDIF
 101+ EBCA
 102+ EBCA              ; ix = x Position, iy = y position, d = radius in Leading sign magnitude
 103+ EBCA
 104+ EBCA              ;EliteCheckOnSM:     ld
 105+ EBCA              ;; ix = x Position, iy = y position, d = radius in 2's compliment
 106+ EBCA              ;;EliteCheckOn2c:
 107+ EBCA              ;;.CheckXOffLeft:     ld      hl,ix               ; if x position + radius is < 0 then its off screen
 108+ EBCA              ;;                    ld      c,d                 ; use c as a temporary holding
 109+ EBCA              ;;                    ld      d,0                 ;
 110+ EBCA              ;;                    ld      e,c                 ;
 111+ EBCA              ;;                    ClearCarryFlag              ;
 112+ EBCA              ;;                    adc     hl,de               ;
 113+ EBCA              ;;                    jp      m, .NotOnScreen     ;
 114+ EBCA              ;;.CheckXOffRight:    ld      hl,ix               ; if x position - radius > 255 then its off screen
 115+ EBCA              ;;                    ClearCarryFlag              ;
 116+ EBCA              ;;                    sbc     hl,de               ;
 117+ EBCA              ;;                    ld      a,h                 ;
 118+ EBCA              ;;                    and     a
 119+ EBCA              ;;                    jp      nz,.NotOnScreen
 120+ EBCA              ;;.CheckXOffLeft:     ld      hl,iy               ; if y position + radius is < 0 then its off screen
 121+ EBCA              ;;                    ld      c,d                 ; use c as a temporary holding
 122+ EBCA              ;;                    ld      d,0                 ;
 123+ EBCA              ;;                    ld      e,c                 ;
 124+ EBCA              ;;                    ClearCarryFlag              ;
 125+ EBCA              ;;                    adc     hl,de               ;
 126+ EBCA              ;;                    jp      m, .NotOnScreen     ;
 127+ EBCA              ;;.CheckXOffRight:    ld      hl,iy               ; if y position - radius > 255 then its off screen
 128+ EBCA              ;;                    ClearCarryFlag              ; if y position - radius > 127 then also off screen
 129+ EBCA              ;;                    sbc     hl,de               ;
 130+ EBCA              ;;                    ld      a,h                 ;
 131+ EBCA              ;;                    and     a                   ;
 132+ EBCA              ;;                    jp      nz,.NotOnScreen     ;
 133+ EBCA              ;;                    ld      a,l                 ;
 134+ EBCA              ;;                    and     $80                 ;
 135+ EBCA              ;;                    jp      nz,.NotOnScreen     ;
 136+ EBCA              ;;.OnScreen:          ClearCarryFlag
 137+ EBCA              ;;                    ret
 138+ EBCA              ;;.NotOnScreen:       SetCarryFlag
 139+ EBCA              ;;                    ret
 140+ EBCA
 141+ EBCA
 142+ EBCA              ;;CircleRadius        DB      0
 143+ EBCA              ;;CircleStep          DB      0
 144+ EBCA              ;;CircleFlag          DB      0
 145+ EBCA              ;;CircleCounter       DB      0
 146+ EBCA              ;;; EliteCircle, uses lines as per original elite
 147+ EBCA              ;;; ix = x Position, iy = y position, d = radius, e = colour x and y are 2's compliment not leading sign
 148+ EBCA              ;;EliteCircle:        push    de                      ; save radius
 149+ EBCA              ;;                    call    EliteCheckOn2c          ; if its off screen carry will be set to
 150+ EBCA              ;;                    ret     c                       ;
 151+ EBCA              ;;                    pop     de                      ; set X (or in our case circle radius) to radius
 152+ EBCA              ;;                    ld      a,d                     ;
 153+ EBCA              ;;                    ld      (CircleRadius),a        ;
 154+ EBCA              ;;                    ld      d,8
 155+ EBCA              ;;                    JumpIfALTNusng  d,.DoneRadius   ; If the radius < 8, skip to PL89
 156+ EBCA              ;;                    srl     d                       ; Halve d so d = 4
 157+ EBCA              ;;                    JumpifALTNusng  60,.DoneRadius  ; If the radius < 60, skip to PL89
 158+ EBCA              ;;                    srl     d                       ; Halve d so d = 2
 159+ EBCA              ;;.DoneRadius:        ld      a,d                     ; Now store value in d into step
 160+ EBCA              ;;                    ld      (CircleStep),a
 161+ EBCA              ;;; ix = x Position, iy = y position, CircleRadius = radius, CircleStep = step value based on radius, must be on screen
 162+ EBCA              ;;EliteCircle2:       ld      a,$FF                   ; set flag for first plot
 163+ EBCA              ;;                    ld      (CircleFlag),a
 164+ EBCA              ;;                    inc     a                       ; set counter to 0 (goes to 64)
 165+ EBCA              ;;                    ld      (CircleCounter),a
 166+ EBCA              ;;.CircleLoop:        ld      a,(CircleCounter)       ; Set A = CNT
 167+ EBCA              ;;
 168+ EBCA              ;; JSR FMLTU2             \ Call FMLTU2 to calculate:
 169+ EBCA              ;;                        \
 170+ EBCA              ;;                        \   A = K * sin(A)
 171+ EBCA              ;;                        \     = K * sin(CNT)
 172+ EBCA              ;;
 173+ EBCA              ;; LDX #0                 \ Set T = 0, so we have the following:
 174+ EBCA              ;; STX T                  \
 175+ EBCA              ;;                        \   (T A) = K * sin(CNT)
 176+ EBCA              ;;                        \
 177+ EBCA              ;;                        \ which is the x-coordinate of the circle for this count
 178+ EBCA              ;;
 179+ EBCA              ;; LDX CNT                \ If CNT < 33 then jump to PL37, as this is the right
 180+ EBCA              ;; CPX #33                \ half of the circle and the sign of the x-coordinate is
 181+ EBCA              ;; BCC PL37               \ correct
 182+ EBCA              ;;
 183+ EBCA              ;; EOR #%11111111         \ This is the left half of the circle, so we want to
 184+ EBCA              ;; ADC #0                 \ flip the sign of the x-coordinate in (T A) using two's
 185+ EBCA              ;; TAX                    \ complement, so we start with the low byte and store it
 186+ EBCA              ;;                        \ in X (the ADC adds 1 as we know the C flag is set)
 187+ EBCA              ;;
 188+ EBCA              ;; LDA #&FF               \ And then we flip the high byte in T
 189+ EBCA              ;; ADC #0
 190+ EBCA              ;; STA T
 191+ EBCA              ;;
 192+ EBCA              ;; TXA                    \ Finally, we restore the low byte from X, so we have
 193+ EBCA              ;;                        \ now negated the x-coordinate in (T A)
 194+ EBCA              ;;
 195+ EBCA              ;; CLC                    \ Clear the C flag so we can do some more addition below
 196+ EBCA              ;;
 197+ EBCA              ;;.PL37
 198+ EBCA              ;;
 199+ EBCA              ;; ADC K3                 \ We now calculate the following:
 200+ EBCA              ;; STA K6                 \
 201+ EBCA              ;;                        \   K6(1 0) = (T A) + K3(1 0)
 202+ EBCA              ;;                        \
 203+ EBCA              ;;                        \ to add the coordinates of the centre to our circle
 204+ EBCA              ;;                        \ point, starting with the low bytes
 205+ EBCA              ;;
 206+ EBCA              ;; LDA K3+1               \ And then doing the high bytes, so we now have:
 207+ EBCA              ;; ADC T                  \
 208+ EBCA              ;; STA K6+1               \   K6(1 0) = K * sin(CNT) + K3(1 0)
 209+ EBCA              ;;                        \
 210+ EBCA              ;;                        \ which is the result we want for the x-coordinate
 211+ EBCA              ;;
 212+ EBCA              ;; LDA CNT                \ Set A = CNT + 16
 213+ EBCA              ;; CLC
 214+ EBCA              ;; ADC #16
 215+ EBCA              ;;
 216+ EBCA              ;; JSR FMLTU2             \ Call FMLTU2 to calculate:
 217+ EBCA              ;;                        \
 218+ EBCA              ;;                        \   A = K * sin(A)
 219+ EBCA              ;;                        \     = K * sin(CNT + 16)
 220+ EBCA              ;;                        \     = K * cos(CNT)
 221+ EBCA              ;;
 222+ EBCA              ;; TAX                    \ Set X = A
 223+ EBCA              ;;                        \       = K * cos(CNT)
 224+ EBCA              ;;
 225+ EBCA              ;; LDA #0                 \ Set T = 0, so we have the following:
 226+ EBCA              ;; STA T                  \
 227+ EBCA              ;;                        \   (T X) = K * cos(CNT)
 228+ EBCA              ;;                        \
 229+ EBCA              ;;                        \ which is the y-coordinate of the circle for this count
 230+ EBCA              ;;
 231+ EBCA              ;; LDA CNT                \ Set A = (CNT + 15) mod 64
 232+ EBCA              ;; ADC #15
 233+ EBCA              ;; AND #63
 234+ EBCA              ;;
 235+ EBCA              ;; CMP #33                \ If A < 33 (i.e. CNT is 0-16 or 48-64) then jump to
 236+ EBCA              ;; BCC PL38               \ PL38, as this is the bottom half of the circle and the
 237+ EBCA              ;;                        \ sign of the y-coordinate is correct
 238+ EBCA              ;;
 239+ EBCA              ;; TXA                    \ This is the top half of the circle, so we want to
 240+ EBCA              ;; EOR #%11111111         \ flip the sign of the y-coordinate in (T X) using two's
 241+ EBCA              ;; ADC #0                 \ complement, so we start with the low byte in X (the
 242+ EBCA              ;; TAX                    \ ADC adds 1 as we know the C flag is set)
 243+ EBCA              ;;
 244+ EBCA              ;; LDA #&FF               \ And then we flip the high byte in T, so we have
 245+ EBCA              ;; ADC #0                 \ now negated the y-coordinate in (T X)
 246+ EBCA              ;; STA T
 247+ EBCA              ;;
 248+ EBCA              ;; CLC                    \ Clear the C flag so we can do some more addition below
 249+ EBCA              ;;
 250+ EBCA              ;;.PL38
 251+ EBCA              ;;
 252+ EBCA              ;; JSR BLINE              \ Call BLINE to draw this segment, which also increases
 253+ EBCA              ;;                        \ CNT by STP, the step size
 254+ EBCA              ;;
 255+ EBCA              ;; CMP #65                \ If CNT >= 65 then skip the next instruction
 256+ EBCA              ;; BCS P%+5
 257+ EBCA              ;;
 258+ EBCA              ;; JMP PLL3               \ Jump back for the next segment
 259+ EBCA              ;;
 260+ EBCA              ;; CLC                    \ Clear the C flag to indicate success
 261+ EBCA              ;;
 262+ EBCA              ;; RTS                    \ Return from the subroutine
 263+ EBCA              ;;; ">L2_draw_circle16 bit" ix = x Position, iy = y position, d = radius, e = colour
 264+ EBCA              ;;; draw using minium squared algorithm
 265+ EBCA              ;;;
 266+ EBCA              ;;CircleCurrentX      DB      0
 267+ EBCA              ;;CircleCurrentY      DB      0
 268+ EBCA              ;;CircleCurrentError  DW      0
 269+ EBCA              ;;l2_draw_circle16bit:ld
 270+ EBCA              ;;.ConvertIXto2sC
 271+ EBCA              ;;.ConvertIYto2sC
 272+ EBCA              ;;.ZeroCurrentError
 273+ EBCA              ;;.SetCurrentXRadius:
 274+ EBCA              ;;.ZeroCurrentY
 275+ EBCA              ;;.DrawPixels:
 276+ EBCA              ;;
 277+ EBCA              ;;                    MMUSelectLayer2
 278+ EBCA              ;;.PlotLoop:
 279+ EBCA              ;;.Plot1:
 280+ EBCA              ;;
 281+ EBCA              ;;.Plot2:
 282+ EBCA              ;;
 283+ EBCA              ;;.Plot3:
 284+ EBCA              ;;
 285+ EBCA              ;;.Plot3:
 286+ EBCA              ;;
 287+ EBCA              ;;.Plot5:
 288+ EBCA              ;;
 289+ EBCA              ;;.Plot6:
 290+ EBCA              ;;
 291+ EBCA              ;;.Plot7:
 292+ EBCA              ;;
 293+ EBCA              ;;.Plot8:
 294+ EBCA              ;;
 295+ EBCA              ;;
 296+ EBCA              ;;
 297+ EBCA              ;;
 298+ EBCA              ;;
 299+ EBCA              ;;
 300+ EBCA              ;;
 301+ EBCA              ;;
 302+ EBCA              ;;
 303+ EBCA              ;;                    ld      a,(CurrentX)    ; if x <= y then break loop
 304+ EBCA              ;;                    ld      hl,CurrentY     ; .
 305+ EBCA              ;;                    cp      (hl)            ; .
 306+ EBCA              ;;                    ret     z               ; . X = Y
 307+ EBCA              ;;                    ret     c               ; . X < Y
 308+ EBCA              ;;.UpdateError:       ld      a,(CurrentY)    ; e += 2*y + 1
 309+ EBCA              ;;                    ld      e,a
 310+ EBCA              ;;                    ld      d,0
 311+ EBCA              ;;                    ShiftDELeft1
 312+ EBCA              ;;                    inc     de
 313+ EBCA              ;;                    ld      hl,(CircleCurrentError)
 314+ EBCA              ;;                    ClearCarryFlag
 315+ EBCA              ;;                    adc     hl,de
 316+ EBCA              ;;                    ld      (CircleCurrentError),hl
 317+ EBCA              ;;.NextCurrentY:      ld      hl,CircleCurrentY
 318+ EBCA              ;;                    inc     (hl)
 319+ EBCA              ;;.CheckEgtX:         ld      hl,(CircleCurrentError)
 320+ EBCA              ;;                    ld      a,(CircleCurrentX)
 321+ EBCA              ;;                    ld      d,0
 322+ EBCA              ;;                    ld      e,0
 323+ EBCA              ;;                    cpHLDE
 324+ EBCA              ;;                    jp      z,.AdjustError
 325+ EBCA              ;;                    jp      nc,.PlotLoop
 326+ EBCA              ;;.AdjustError:       ld      a,(CircleCurrentX)
 327+ EBCA              ;;                    ld      d,0
 328+ EBCA              ;;                    ld      e,a
 329+ EBCA              ;;                    ShiftDELeft1
 330+ EBCA              ;;                    ld      hl,(CircleCurrentError)
 331+ EBCA              ;;                    inc     hl
 332+ EBCA              ;;                    ClearCarryFlag
 333+ EBCA              ;;                    sbc     hl,de
 334+ EBCA              ;;                    ld      a,e
 335+ EBCA              ;;                    dec     a
 336+ EBCA              ;;                    ld      (CircleCurrentX),a
 337+ EBCA              ;;                    jp      .PlotLoop
 338+ EBCA              ;;;plot pixel at x = de y = bc
 339+ EBCA              ;;.PlotPixelBCDE:     ld		a,0                     ; This was originally indirect, where as it neeed to be value
 340+ EBCA              ;;                    push	de,,bc,,hl
 341+ EBCA              ;;                    ld      a,d                     ; if d is not zero then it must be -ve or > 255 to skip
 342+ EBCA              ;;                    and     a                       ;
 343+ EBCA              ;;                    ret     nz                      ;
 344+ EBCA              ;;                    ld      a,b                     ; if b is not zero then it must be -ve or > 255 to skip
 345+ EBCA              ;;                    and     a
 346+ EBCA              ;;                    ret     nz
 347+ EBCA              ;;                    ld      a,c                     ; but also check if y > 127 and if so skip
 348+ EBCA              ;;                    and     $80
 349+ EBCA              ;;                    ret     nz
 350+ EBCA              ;;                    ld      a,c                     ; so we can now plot
 351+ EBCA              ;;                    call    asm_l2_row_bank_select
 352+ EBCA              ;;                    ld      h,a
 353+ EBCA              ;;                    ld      l,e
 354+ EBCA              ;;                    ld      a,(line_gfx_colour)
 355+ EBCA              ;;                    ld      (hl),a
 356+ EBCA              ;;                    pop		de,,bc,,hl
 357+ EBCA              ;;                    ret
 358+ EBCA              ;;
 359+ EBCA
 360+ EBCA              ;---------------------------------------------------------------------------------------------------------------------------------
 361+ EBCA              ; ">l2_draw_circle BC = center row col, d = radius, e = colour"
 362+ EBCA 7B           l2_draw_circle:     ld		a,e
 363+ EBCB 32 71 EC                         ld		(.PlotPixel+1),a
 364+ EBCE 7A                               ld		a,d								; get radius
 365+ EBCF A7                               and		a
 366+ EBD0 C8                               ret		z
 367+ EBD1 FE 01                            cp		1
 368+ EBD3 CA 88 EC                         jp		z,CircleSinglepixel
 369+ EBD6 ED 43 00 EC                      ld		(.Plot1+1),bc	        ; save origin into cXcY reg in code
 370+ EBDA DD 67                            ld		ixh,a			        ; ixh =  x = raidus
 371+ EBDC DD 2E 00                         ld		ixl,0			        ; iyh =  y = 0
 372+ EBDF 26 00        .calcd:	            ld		h,0
 373+ EBE1 6F                               ld		l,a
 374+ EBE2 29                               add		hl,hl			        ; hl = r * 2
 375+ EBE3 EB                               ex		de,hl			        ; de = r * 2
 376+ EBE4 21 03 00                         ld		hl,3
 377+ EBE7 A7                               and		a
 378+ EBE8 ED 52                            sbc		hl,de			        ; hl = 3 - (r * 2)
 379+ EBEA 44                               ld		b,h
 380+ EBEB 4D                               ld		c,l				        ; bc = 3 - (r * 2)
 381+ EBEC 21 01 00     .calcdelta:         ld		hl,1
 382+ EBEF 16 00                            ld		d,0
 383+ EBF1 DD 5D                            ld		e,ixl
 384+ EBF3 A7                               and		a
 385+ EBF4 ED 52                            sbc		hl,de
 386+ EBF6 11 01 00     .Setde1:            ld		de,1
 387+ EBF9 DD 7C        .CircleLoop:        ld		a,ixh
 388+ EBFB DD BD                            cp		ixl
 389+ EBFD D8                               ret		c
 390+ EBFE D9           .ProcessLoop:	    exx
 391+ EBFF 11 00 00     .Plot1:             ld		de,0                    ; de = cXcY
 392+ EC02 7B                               ld		a,e                     ; c = cY + error
 393+ EC03 DD 85                            add		a,ixl                   ;
 394+ EC05 4F                               ld		c,a                     ;
 395+ EC06 7A                               ld		a,d                     ; b = xY+radius
 396+ EC07 DD 84                            add		a,ixh                   ;
 397+ EC09 47                               ld		b,a                     ;
 398+ EC0A CD 70 EC                         call	.PlotPixel			    ;CX+X,CY+Y
 399+ EC0D 7B           .Plot2:             ld 		a,e
 400+ EC0E DD 95                            sub 	ixl
 401+ EC10 4F                               ld 		c,a
 402+ EC11 7A                               ld 		a,d
 403+ EC12 DD 84                            add 	a,ixh
 404+ EC14 47                               ld		b,a
 405+ EC15 CD 70 EC                         call	.PlotPixel			    ;CX-X,CY+Y
 406+ EC18 7B           .Plot3:             ld 		a,e
 407+ EC19 DD 85                            add		a,ixl
 408+ EC1B 4F                               ld 		c,a
 409+ EC1C 7A                               ld 		a,d
 410+ EC1D DD 94                            sub 	ixh
 411+ EC1F 47                               ld 		b,a
 412+ EC20 CD 70 EC                         call	.PlotPixel			    ;CX+X,CY-Y
 413+ EC23 7B           .Plot4:             ld 		a,e
 414+ EC24 DD 95                            sub 	ixl
 415+ EC26 4F                               ld 		c,a
 416+ EC27 7A                               ld 		a,d
 417+ EC28 DD 94                            sub 	ixh
 418+ EC2A 47                               ld 		b,a
 419+ EC2B CD 70 EC                         call	.PlotPixel			    ;CX-X,CY-Y
 420+ EC2E 7A           .Plot5:	            ld 		a,d
 421+ EC2F DD 85                            add 	a,ixl
 422+ EC31 47                               ld 		b,a
 423+ EC32 7B                               ld 		a,e
 424+ EC33 DD 84                            add 	a,ixh
 425+ EC35 4F                               ld 		c,a
 426+ EC36 CD 70 EC                         call	.PlotPixel			    ;CY+X,CX+Y
 427+ EC39 7A           .Plot6:	            ld 		a,d
 428+ EC3A DD 95                            sub 	ixl
 429+ EC3C 47                               ld 		b,a
 430+ EC3D 7B                               ld 		a,e
 431+ EC3E DD 84                            add 	a,ixh
 432+ EC40 4F                               ld 		c,a
 433+ EC41 CD 70 EC                         call	.PlotPixel			    ;CY-X,CX+Y
 434+ EC44 7A           .Plot7:	            ld 		a,d
 435+ EC45 DD 85                            add 	a,ixl
 436+ EC47 47                               ld 		b,a
 437+ EC48 7B                               ld 		a,e
 438+ EC49 DD 94                            sub 	ixh
 439+ EC4B 4F                               ld 		c,a
 440+ EC4C CD 70 EC                         call	.PlotPixel			    ;CY+X,CX-Y
 441+ EC4F 7A           .Plot8:	            ld 		a,d
 442+ EC50 DD 95                            sub 	ixl
 443+ EC52 47                               ld		b,a
 444+ EC53 7B                               ld 		a,e
 445+ EC54 DD 94                            sub 	ixh
 446+ EC56 4F                               ld 		c,a
 447+ EC57 CD 70 EC                         call	.PlotPixel			    ;CY-X,CX-Y
 448+ EC5A D9                               exx
 449+ EC5B CB 7C        .IncrementCircle:	bit     7,h				        ; Check for Hl<=0
 450+ EC5D 28 03                            jr z,   .draw_circle_1
 451+ EC5F 19                               add hl,de			            ; Delta=Delta+D1
 452+ EC60 18 05                            jr      .draw_circle_2		;
 453+ EC62 09           .draw_circle_1:		add     hl,bc			        ; Delta=Delta+D2
 454+ EC63 03                               inc     bc
 455+ EC64 03                               inc     bc				        ; D2=D2+2
 456+ EC65 DD 25                            dec     ixh				        ; Y=Y-1
 457+ EC67 03           .draw_circle_2:		inc bc				            ; D2=D2+2
 458+ EC68 03                               inc bc
 459+ EC69 13                               inc de				            ; D1=D1+2
 460+ EC6A 13                               inc de
 461+ EC6B DD 2C                            inc ixl				            ; X=X+1
 462+ EC6D C3 F9 EB                         jp      .CircleLoop
 463+ EC70 3E 00        .PlotPixel:         ld		a,0                     ; This was originally indirect, where as it neeed to be value
 464+ EC72 D5 C5 E5                         push	de,,bc,,hl
 465+ EC75                                  l2_plot_macro; call 	l2_plot_pixel_y_test
 465+ EC75 78          >                        ld      a,b
 465+ EC76             >                        JumpIfAGTENusng 192 ,.NoPlot
 465+ EC76 FE C0       >                        cp     192
 465+ EC78 D2 84 EC    >                        jp		nc,.NoPlot
 465+ EC7B 69          >                        ld      l,c
 465+ EC7C CD 68 E0    >                        call    asm_l2_row_bank_select
 465+ EC7F 67          >                        ld      h,a
 465+ EC80 3A B5 E2    >                        ld      a,(line_gfx_colour)
 465+ EC83 77          >                        ld      (hl),a
 465+ EC84             >.NoPlot:
 466+ EC84 E1 C1 D1                         pop		de,,bc,,hl
 467+ EC87 C9                               ret
 468+ EC88 7B           CircleSinglepixel:  ld		a,e
 469+ EC89                                  l2_plot_macro; call	l2_plot_pixel_y_test
 469+ EC89 78          >                        ld      a,b
 469+ EC8A             >                        JumpIfAGTENusng 192 ,.NoPlot
 469+ EC8A FE C0       >                        cp     192
 469+ EC8C D2 98 EC    >                        jp		nc,.NoPlot
 469+ EC8F 69          >                        ld      l,c
 469+ EC90 CD 68 E0    >                        call    asm_l2_row_bank_select
 469+ EC93 67          >                        ld      h,a
 469+ EC94 3A B5 E2    >                        ld      a,(line_gfx_colour)
 469+ EC97 77          >                        ld      (hl),a
 469+ EC98             >.NoPlot:
 470+ EC98 C9                               ret
 471+ EC99
 472+ EC99              CalcNewPointMacro:  MACRO reg1, oper, reg2
 473+ EC99 ~                                ClearCarryFlag
 474+ EC99 ~                                ld      b,0
 475+ EC99 ~                                ld      c,reg2
 476+ EC99 ~                                oper    hl,bc
 477+ EC99                                  ENDM
 478+ EC99
 479+ EC99              ; ">l2_draw_clipped_circle HL = Center X 2's c, DE = Center Y 2's , c = radius, b = colour"
 480+ EC99              l2_draw_clipped_circle:
 481+ EC99 78                               ld      a,b                     ; save Colour
 482+ EC9A 32 CB ED                         ld		(.PlotColour+1),a
 483+ EC9D 79                               ld		a,c								; get radius
 484+ EC9E                                  ReturnIfAIsZero
 484+ EC9E A7          >                        and     a
 484+ EC9F C8          >                        ret     z
 485+ ECA0                                  JumpIfAEqNusng  1, .circleSinglepixel
 485+ ECA0 FE 01       >                        cp     1
 485+ ECA2 CA E5 ED    >                        jp      z,.circleSinglepixel
 486+ ECA5 ED 53 D2 EC                      ld		(.Plot1Y+1),de					; save origin into DE and HL
 487+ ECA9 22 D5 EC                         ld      (.Plot1X+1),hl                  ; .
 488+ ECAC                                  DISPLAY "TODO : IXH and IXL need to be 16 bit and in IX and IY"
 489+ ECAC DD 67                            ld		ixh,a							; ixh = x = raidus
 490+ ECAE DD 2E 00                         ld		ixl,0						    ; ixl = y = error
 491+ ECB1 26 00        .calcd:	            ld		h,0                             ; hl = radius
 492+ ECB3 6F                               ld		l,a                             ; raidius is still in a at this point
 493+ ECB4 29                               add		hl,hl							; hl = r * 2
 494+ ECB5 EB                               ex		de,hl							; de = r * 2
 495+ ECB6 21 03 00                         ld		hl,3                            ; hl = 3 - (r * 2)
 496+ ECB9                                  ClearCarryFlag                          ; .
 496+ ECB9 B7          >                        or a
 497+ ECBA ED 52                            sbc		hl,de							; .
 498+ ECBC 44 4D                            ld      bc,hl                           ; bc = 3 - (r * 2)
 499+ ECBE 21 01 00     .calcdelta:         ld		hl,1                            ; hl = 1
 500+ ECC1 16 00                            ld		d,0                             ; de = ixl (error)
 501+ ECC3 DD 5D                            ld		e,ixl                           ;
 502+ ECC5                                  ClearCarryFlag                          ;
 502+ ECC5 B7          >                        or a
 503+ ECC6 ED 52                            sbc		hl,de                           ; hl = 1 - error
 504+ ECC8 11 01 00     .Setde1:            ld		de,1                            ; de = 1
 505+ ECCB              .CircleLoop:        ReturnIfRegLTNusng ixh, ixl             ; if radius > ixl counter
 505+ ECCB DD 7C       >                        ld      a,ixh
 505+ ECCD DD BD       >                        cp      ixl
 505+ ECCF D8          >                        ret	    c
 506+ ECD0 D9           .ProcessLoop:	    exx                                     ; save all bc,de,hl registers
 507+ ECD1              ;--- CX+X,CY+Y ---------------------------------------------;
 508+ ECD1 11 00 00     .Plot1Y:            ld		de,0                            ; this is Y coord
 509+ ECD4 21 00 00     .Plot1X:            ld      hl,0                            ; this is x coord
 510+ ECD7 E5 D5                            push    hl,,de
 511+ ECD9                                  CalcNewPointMacro hl, adc, ixh          ;
 511+ ECD9             >                    ClearCarryFlag
 511+ ECD9 B7          >                        or a
 511+ ECDA 06 00       >                    ld      b,0
 511+ ECDC DD 4C       >                    ld      c,ixh
 511+ ECDE ED 4A       >                    adc    hl,bc
 512+ ECE0 EB                               ex      de,hl                           ; de = x coord calculated, hl =y center Y
 513+ ECE1                                  CalcNewPointMacro hl, adc, ixl          ;
 513+ ECE1             >                    ClearCarryFlag
 513+ ECE1 B7          >                        or a
 513+ ECE2 06 00       >                    ld      b,0
 513+ ECE4 DD 4D       >                    ld      c,ixl
 513+ ECE6 ED 4A       >                    adc    hl,bc
 514+ ECE8 CD C0 ED                         call	.PlotPixel	            		; CX+X,CY+Y using DE = x and hl = y *** Note if we order plot 1 to 8 we can selectivley jump past many on elimiation check
 515+ ECEB D1 E1        .Plot1Done:         pop     hl,,de                          ; get de (y) and hl (x) back but reversed as the next plot expected the to be reversed from the ex de,hl above  + 0
 516+ ECED              ;--- CX+X,CY-Y ---------------------------------------------;
 517+ ECED E5 D5        .Plot2:             push    hl,,de                          ; e.g  do all CX + X first, so plot1, plot3 and just one check for cx + x off screen
 518+ ECEF                                  CalcNewPointMacro hl, adc, ixh          ;
 518+ ECEF             >                    ClearCarryFlag
 518+ ECEF B7          >                        or a
 518+ ECF0 06 00       >                    ld      b,0
 518+ ECF2 DD 4C       >                    ld      c,ixh
 518+ ECF4 ED 4A       >                    adc    hl,bc
 519+ ECF6                                  JumpIfRegIsNotZero  h,.Plot2Done        ;
 519+ ECF6 7C          >                        ld      a,h
 519+ ECF7 A7          >                        and     a
 519+ ECF8 C2 06 ED    >                        jp	    nz,.Plot2Done
 520+ ECFB EB                               ex      de,hl                           ; de = calculated x
 521+ ECFC                                  CalcNewPointMacro hl, sbc, ixl          ;
 521+ ECFC             >                    ClearCarryFlag
 521+ ECFC B7          >                        or a
 521+ ECFD 06 00       >                    ld      b,0
 521+ ECFF DD 4D       >                    ld      c,ixl
 521+ ED01 ED 42       >                    sbc    hl,bc
 522+ ED03 CD C0 ED                         call	.PlotPixel	                    ; CX-X,CY+Y
 523+ ED06 D1 E1        .Plot2Done:         pop     hl,,de
 524+ ED08              ;--- CX-X,CY-Y ---------------------------------------------; bollocksC
 525+ ED08 E5 D5        .Plot3:             push    hl,,de
 526+ ED0A                                  CalcNewPointMacro hl, sbc, ixh          ;
 526+ ED0A             >                    ClearCarryFlag
 526+ ED0A B7          >                        or a
 526+ ED0B 06 00       >                    ld      b,0
 526+ ED0D DD 4C       >                    ld      c,ixh
 526+ ED0F ED 42       >                    sbc    hl,bc
 527+ ED11                                  JumpIfRegIsNotZero  h,.Plot3Done        ;
 527+ ED11 7C          >                        ld      a,h
 527+ ED12 A7          >                        and     a
 527+ ED13 C2 21 ED    >                        jp	    nz,.Plot3Done
 528+ ED16 EB                               ex      de,hl                           ; de = calculated x
 529+ ED17                                  CalcNewPointMacro hl, sbc, ixl          ;
 529+ ED17             >                    ClearCarryFlag
 529+ ED17 B7          >                        or a
 529+ ED18 06 00       >                    ld      b,0
 529+ ED1A DD 4D       >                    ld      c,ixl
 529+ ED1C ED 42       >                    sbc    hl,bc
 530+ ED1E CD C0 ED                         call	.PlotPixel	                    ; CX+X,CY-Y
 531+ ED21 D1 E1        .Plot3Done:         pop     hl,,de
 532+ ED23              ;--- CX-X,CY+Y ---------------------------------------------; bollocks
 533+ ED23 E5 D5        .Plot4:             push    hl,,de
 534+ ED25                                  CalcNewPointMacro hl, sbc, ixh          ;
 534+ ED25             >                    ClearCarryFlag
 534+ ED25 B7          >                        or a
 534+ ED26 06 00       >                    ld      b,0
 534+ ED28 DD 4C       >                    ld      c,ixh
 534+ ED2A ED 42       >                    sbc    hl,bc
 535+ ED2C                                  JumpIfRegIsNotZero  h,.Plot4Done
 535+ ED2C 7C          >                        ld      a,h
 535+ ED2D A7          >                        and     a
 535+ ED2E C2 3C ED    >                        jp	    nz,.Plot4Done
 536+ ED31 EB                               ex      de,hl
 537+ ED32                                  CalcNewPointMacro hl, adc, ixl          ;
 537+ ED32             >                    ClearCarryFlag
 537+ ED32 B7          >                        or a
 537+ ED33 06 00       >                    ld      b,0
 537+ ED35 DD 4D       >                    ld      c,ixl
 537+ ED37 ED 4A       >                    adc    hl,bc
 538+ ED39 CD C0 ED                         call	.PlotPixel	                    ; CX-X,CY-Y
 539+ ED3C D1 E1        .Plot4Done:         pop     hl,,de
 540+ ED3E              ;--- CX+Y,CY+X ---------------------------------------------; bollocks
 541+ ED3E E5 D5        .Plot5:             push    hl,,de
 542+ ED40                                  CalcNewPointMacro hl, adc, ixl          ;
 542+ ED40             >                    ClearCarryFlag
 542+ ED40 B7          >                        or a
 542+ ED41 06 00       >                    ld      b,0
 542+ ED43 DD 4D       >                    ld      c,ixl
 542+ ED45 ED 4A       >                    adc    hl,bc
 543+ ED47                                  JumpIfRegIsNotZero  h,.Plot5Done
 543+ ED47 7C          >                        ld      a,h
 543+ ED48 A7          >                        and     a
 543+ ED49 C2 57 ED    >                        jp	    nz,.Plot5Done
 544+ ED4C EB                               ex      de,hl
 545+ ED4D                                  CalcNewPointMacro hl, adc, ixh          ;
 545+ ED4D             >                    ClearCarryFlag
 545+ ED4D B7          >                        or a
 545+ ED4E 06 00       >                    ld      b,0
 545+ ED50 DD 4C       >                    ld      c,ixh
 545+ ED52 ED 4A       >                    adc    hl,bc
 546+ ED54 CD C0 ED                         call	.PlotPixel	                    ;CY+X,CX+Y
 547+ ED57 D1 E1        .Plot5Done:         pop     hl,,de
 548+ ED59              ;--- CX+Y,CX-X ---------------------------------------------;bollocks
 549+ ED59 E5 D5        .Plot6:             push    hl,,de
 550+ ED5B                                  CalcNewPointMacro hl, adc, ixl          ;
 550+ ED5B             >                    ClearCarryFlag
 550+ ED5B B7          >                        or a
 550+ ED5C 06 00       >                    ld      b,0
 550+ ED5E DD 4D       >                    ld      c,ixl
 550+ ED60 ED 4A       >                    adc    hl,bc
 551+ ED62                                  JumpIfRegIsNotZero  h,.Plot6Done
 551+ ED62 7C          >                        ld      a,h
 551+ ED63 A7          >                        and     a
 551+ ED64 C2 72 ED    >                        jp	    nz,.Plot6Done
 552+ ED67 EB                               ex      de,hl
 553+ ED68                                  CalcNewPointMacro hl, sbc, ixh          ;
 553+ ED68             >                    ClearCarryFlag
 553+ ED68 B7          >                        or a
 553+ ED69 06 00       >                    ld      b,0
 553+ ED6B DD 4C       >                    ld      c,ixh
 553+ ED6D ED 42       >                    sbc    hl,bc
 554+ ED6F CD C0 ED                         call	.PlotPixel	                    ; CY-X,CX+Y
 555+ ED72 D1 E1        .Plot6Done:         pop     hl,,de
 556+ ED74              ;--- CX-Y,CY-X ---------------------------------------------;bollocksC
 557+ ED74 E5 D5        .Plot7:             push    hl,,de
 558+ ED76                                  CalcNewPointMacro hl, sbc, ixl          ;
 558+ ED76             >                    ClearCarryFlag
 558+ ED76 B7          >                        or a
 558+ ED77 06 00       >                    ld      b,0
 558+ ED79 DD 4D       >                    ld      c,ixl
 558+ ED7B ED 42       >                    sbc    hl,bc
 559+ ED7D                                  JumpIfRegIsNotZero  h,.Plot7Done
 559+ ED7D 7C          >                        ld      a,h
 559+ ED7E A7          >                        and     a
 559+ ED7F C2 8D ED    >                        jp	    nz,.Plot7Done
 560+ ED82 EB                               ex      de,hl
 561+ ED83                                  CalcNewPointMacro hl, sbc, ixh          ;
 561+ ED83             >                    ClearCarryFlag
 561+ ED83 B7          >                        or a
 561+ ED84 06 00       >                    ld      b,0
 561+ ED86 DD 4C       >                    ld      c,ixh
 561+ ED88 ED 42       >                    sbc    hl,bc
 562+ ED8A CD C0 ED                         call	.PlotPixel	                    ; CY+X,CX-Y
 563+ ED8D D1 E1        .Plot7Done:         pop     hl,,de
 564+ ED8F              ;--- CX-Y,CY+X ---------------------------------------------; bollocks
 565+ ED8F E5 D5        .Plot8:             push    hl,,de
 566+ ED91                                  CalcNewPointMacro hl, sbc, ixl          ;
 566+ ED91             >                    ClearCarryFlag
 566+ ED91 B7          >                        or a
 566+ ED92 06 00       >                    ld      b,0
 566+ ED94 DD 4D       >                    ld      c,ixl
 566+ ED96 ED 42       >                    sbc    hl,bc
 567+ ED98                                  JumpIfRegIsNotZero  h,.Plot8Done
 567+ ED98 7C          >                        ld      a,h
 567+ ED99 A7          >                        and     a
 567+ ED9A C2 A8 ED    >                        jp	    nz,.Plot8Done
 568+ ED9D EB                               ex      de,hl
 569+ ED9E                                  CalcNewPointMacro hl, adc, ixh          ;
 569+ ED9E             >                    ClearCarryFlag
 569+ ED9E B7          >                        or a
 569+ ED9F 06 00       >                    ld      b,0
 569+ EDA1 DD 4C       >                    ld      c,ixh
 569+ EDA3 ED 4A       >                    adc    hl,bc
 570+ EDA5 CD C0 ED                         call	.PlotPixel	                    ; CY-X,CX-Y
 571+ EDA8 D1 E1        .Plot8Done:         pop     hl,,de
 572+ EDAA D9           .PlotDone:          exx
 573+ EDAB CB 7C        .IncrementCircle:	bit     7,h				; Check for Hl<=0
 574+ EDAD 28 03                            jr z,   .draw_circle_1
 575+ EDAF 19                               add hl,de			; Delta=Delta+D1
 576+ EDB0 18 05                            jr      .draw_circle_2		;
 577+ EDB2 09           .draw_circle_1:		add     hl,bc			; Delta=Delta+D2
 578+ EDB3 03                               inc     bc
 579+ EDB4 03                               inc     bc				; D2=D2+2
 580+ EDB5 DD 25                            dec     ixh				; Y=Y-1
 581+ EDB7 03           .draw_circle_2:		inc     bc				; D2=D2+2
 582+ EDB8 03                               inc     bc
 583+ EDB9 13                               inc     de				; D1=D1+2
 584+ EDBA 13                               inc     de
 585+ EDBB DD 2C                            inc     ixl				; X=X+1
 586+ EDBD C3 CB EC                         jp      .CircleLoop
 587+ EDC0 7A           .PlotPixel:         ld      a,d             ; filter x> 256 or negative
 588+ EDC1 A7                               and     a
 589+ EDC2 C0                               ret     nz
 590+ EDC3 7C                               ld      a,h             ; filter y > 256 or negative
 591+ EDC4 A7                               and     a
 592+ EDC5 C0                               ret     nz
 593+ EDC6 7D                               ld      a,l             ; filter y > 127
 594+ EDC7 E6 80                            and     $80
 595+ EDC9 C0                               ret     nz
 596+ EDCA 3E 00        .PlotColour:        ld		a,0             ; This was originally indirect, where as it neeed to be value
 597+ EDCC D5 C5 E5                         push	de,,bc,,hl
 598+ EDCF 45                               ld      b,l             ; At this point de = x and hl = y
 599+ EDD0 4B                               ld      c,e
 600+ EDD1                                  l2_plot_macro; call 	l2_plot_pixel_y_test
 600+ EDD1 78          >                        ld      a,b
 600+ EDD2             >                        JumpIfAGTENusng 192 ,.NoPlot
 600+ EDD2 FE C0       >                        cp     192
 600+ EDD4 D2 E0 ED    >                        jp		nc,.NoPlot
 600+ EDD7 69          >                        ld      l,c
 600+ EDD8 CD 68 E0    >                        call    asm_l2_row_bank_select
 600+ EDDB 67          >                        ld      h,a
 600+ EDDC 3A B5 E2    >                        ld      a,(line_gfx_colour)
 600+ EDDF 77          >                        ld      (hl),a
 600+ EDE0             >.NoPlot:
 601+ EDE0 E1 C1 D1                         pop		de,,bc,,hl
 602+ EDE3                                  ClearCarryFlag
 602+ EDE3 B7          >                        or a
 603+ EDE4 C9                               ret
 604+ EDE5 7C           .circleSinglepixel: ld      a,h             ; as its 1 pixel if h or d are non zero then its off screen
 605+ EDE6 B2                               or      d
 606+ EDE7 C0                               ret     nz
 607+ EDE8 CB 7B                            bit     7,e             ; and if Y is > 127 then off screen , bit is 8 states like ld a,e and a
 608+ EDEA C0                               ret     nz
 609+ EDEB 78                               ld      a,b             ; a = colour
 610+ EDEC 43                               ld      b,e             ; b = y
 611+ EDED 4D                               ld      c,l             ; c = x
 612+ EDEE CD B6 E2                         call    l2_plot_pixel
 613+ EDF1 C9                               ret
# file closed: ./Layer2Graphics/layer2_plot_circle.asm
 858  EDF2                  INCLUDE "./Layer2Graphics/layer2_plot_circle_fill.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle_fill.asm
   1+ EDF2
   2+ EDF2 00           l2_circle_dblx		DB 0
   3+ EDF3 00           l2_circle_dbly		DB 0
   4+ EDF4
   5+ EDF4              ; ">l2_draw_circle_fill BC = center row col, d = radius, e = colour"
   6+ EDF4              ; Note this code currently does not process BC
   7+ EDF4 7B           l2_draw_circle_fill:    ld		a,e
   8+ EDF5 32 8B EE                             ld		(.LineColour+1),a
   9+ EDF8 7A                                   ld		a,d								; get radius
  10+ EDF9 A7                                   and		a
  11+ EDFA C8                                   ret		z
  12+ EDFB FE 01                                cp		1
  13+ EDFD CA 88 EC                             jp		z,CircleSinglepixel
  14+ EE00 ED 43 2A EE                          ld		(.Line1+1),bc					; save origin into DE reg in code
  15+ EE04 DD 67                                ld		ixh,a							; ixh = raidus (x)
  16+ EE06 DD 2E 00                             ld		ixl,0							; ihy = y
  17+ EE09 26 00        .calcd:	                ld		h,0
  18+ EE0B 6F                                   ld		l,a
  19+ EE0C 29                                   add		hl,hl							; hl = r * 2
  20+ EE0D EB                                   ex		de,hl							; de = r * 2
  21+ EE0E 21 03 00                             ld		hl,3
  22+ EE11 A7                                   and		a
  23+ EE12 ED 52                                sbc		hl,de							; hl = 3 - (r * 2)
  24+ EE14 44                                   ld		b,h
  25+ EE15 4D                                   ld		c,l								; bc = 3 - (r * 2)
  26+ EE16 21 01 00     .calcdelta              ld		hl,1
  27+ EE19 16 00                                ld		d,0
  28+ EE1B DD 5D                                ld		e,ixl
  29+ EE1D A7                                   and		a
  30+ EE1E ED 52                                sbc		hl,de
  31+ EE20 11 01 00     .Setde1	                ld		de,1
  32+ EE23 DD 7C        .CircleLoop:            ld		a,ixh
  33+ EE25 DD BD                                cp		ixl
  34+ EE27 D8                                   ret		c
  35+ EE28 D9           .ProcessLoop:	        exx
  36+ EE29 11 00 00     .Line1:                 ld		de,0
  37+ EE2C 7B                                   ld 		a,e
  38+ EE2D DD 95                                sub 	ixl
  39+ EE2F 4F                                   ld 		c,a
  40+ EE30 7A                                   ld 		a,d
  41+ EE31 DD 84                                add 	a,ixh
  42+ EE33 47                                   ld		b,a
  43+ EE34                                                  DISPLAY "TODO: add double x calc"
  44+ EE34                                      ;; TODO ADD DOUBLE X CALC
  45+ EE34 D5                                   push	de
  46+ EE35 DD 55                                ld		d,ixl
  47+ EE37 CB 22                                sla		d
  48+ EE39 CD 86 EE                             call	.PlotLine			;CX-X,CY+Y
  49+ EE3C D1                                   pop		de
  50+ EE3D 7B           .Line2:                 ld 		a,e
  51+ EE3E DD 95                                sub		ixl
  52+ EE40 4F                                   ld 		c,a
  53+ EE41 7A                                   ld 		a,d
  54+ EE42 DD 94                                sub 	ixh
  55+ EE44 47                                   ld 		b,a
  56+ EE45                                      ;; TODO ADD DOUBLE X CALC
  57+ EE45 D5                                   push	de
  58+ EE46 DD 55                                ld		d,ixl
  59+ EE48 CB 22                                sla		d
  60+ EE4A CD 86 EE                             call	.PlotLine			;CX-X,CY-Y
  61+ EE4D D1                                   pop		de
  62+ EE4E 7B           .Line3:	                ld 		a,e
  63+ EE4F DD 94                                sub		ixh
  64+ EE51 4F                                   ld 		c,a
  65+ EE52 7A                                   ld 		a,d
  66+ EE53 DD 85                                add 	a,ixl
  67+ EE55 47                                   ld 		b,a
  68+ EE56                                      ;; TODO ADD DOUBLE Y CALC
  69+ EE56 D5                                   push	de
  70+ EE57 DD 54                                ld		d,ixh
  71+ EE59 CB 22                                sla		d
  72+ EE5B CD 86 EE                             call	.PlotLine			;CX-Y,CY+x
  73+ EE5E D1                                   pop		de
  74+ EE5F 7B           .Line4:	                ld 		a,e
  75+ EE60 DD 94                                sub		ixh
  76+ EE62 4F                                   ld 		c,a
  77+ EE63 7A                                   ld 		a,d
  78+ EE64 DD 95                                sub 	ixl
  79+ EE66 47                                   ld 		b,a
  80+ EE67                                      ;; TODO ADD DOUBLE Y CALC
  81+ EE67 D5                                   push	de
  82+ EE68 DD 54                                ld		d,ixh
  83+ EE6A CB 22                                sla		d
  84+ EE6C CD 86 EE                             call	.PlotLine			;CX-Y,CY+x
  85+ EE6F D1                                   pop		de
  86+ EE70 D9                                   exx
  87+ EE71 CB 7C        .IncrementCircle:	    bit 7,h				; Check for Hl<=0
  88+ EE73 28 03                                jr z,.draw_circle_1
  89+ EE75 19                                   add hl,de			; Delta=Delta+D1
  90+ EE76 18 05                                jr .draw_circle_2		;
  91+ EE78 09           .draw_circle_1:		    add hl,bc			; Delta=Delta+D2
  92+ EE79 03                                   inc bc
  93+ EE7A 03                                   inc bc				; D2=D2+2
  94+ EE7B DD 25                                dec ixh				; Y=Y-1
  95+ EE7D 03           .draw_circle_2:		    inc bc				; D2=D2+2
  96+ EE7E 03                                   inc bc
  97+ EE7F 13                                   inc de				; D1=D1+2
  98+ EE80 13                                   inc de
  99+ EE81 DD 2C                                inc ixl				; X=X+1
 100+ EE83 C3 23 EE                             jp .CircleLoop
 101+ EE86 D5 C5 E5 F5  .PlotLine:              push	de,,bc,,hl,,af
 102+ EE8A 3E 00        .LineColour:	        ld		a,0         ; circle colur
 103+ EE8C 5F                                   ld      e,a
 104+ EE8D CD 84 E4                             call 	l2_draw_horz_line
 105+ EE90 F1 E1 C1 D1                          pop     de,,bc,,hl,,af
 106+ EE94 C9                                   ret
 107+ EE95
 108+ EE95              ; ">l2_draw_clipped_circle HL = Center X 2's c, DE = Center Y 2's , c = radius, b = colour"
 109+ EE95              l2_draw_clipped_circle_filled:
 110+ EE95 78                               ld      a,b                             ; save Colour
 111+ EE96 32 90 EF                         ld		(.PlotColour+1),a
 112+ EE99 79                               ld		a,c								; get radius
 113+ EE9A                                  ReturnIfAIsZero
 113+ EE9A A7          >                        and     a
 113+ EE9B C8          >                        ret     z
 114+ EE9C                                  JumpIfAEqNusng  1, .circleSinglepixel
 114+ EE9C FE 01       >                        cp     1
 114+ EE9E CA 96 EF    >                        jp      z,.circleSinglepixel
 115+ EEA1 ED 53 CE EE                      ld		(.Plot1Y+1),de					; save origin into DE and HL
 116+ EEA5 22 D1 EE                         ld      (.Plot1X+1),hl                  ; .
 117+ EEA8                                  DISPLAY "TODO : IXH and IXL need to be 16 bit and in IX and IY"
 118+ EEA8 DD 67                            ld		ixh,a							; ixh = x = raidus
 119+ EEAA DD 2E 00                         ld		ixl,0						    ; ixl = y = error
 120+ EEAD 26 00        .calcd:	            ld		h,0                             ; hl = radius
 121+ EEAF 6F                               ld		l,a                             ; raidius is still in a at this point
 122+ EEB0 29                               add		hl,hl							; hl = r * 2
 123+ EEB1 EB                               ex		de,hl							; de = r * 2
 124+ EEB2 21 03 00                         ld		hl,3                            ; hl = 3 - (r * 2)
 125+ EEB5                                  ClearCarryFlag                          ; .
 125+ EEB5 B7          >                        or a
 126+ EEB6 ED 52                            sbc		hl,de							; .
 127+ EEB8 44 4D                            ld      bc,hl                           ; bc = 3 - (r * 2)
 128+ EEBA 21 01 00     .calcdelta:         ld		hl,1                            ; hl = 1
 129+ EEBD 16 00                            ld		d,0                             ; de = ixl (error)
 130+ EEBF DD 5D                            ld		e,ixl                           ;
 131+ EEC1                                  ClearCarryFlag                          ;
 131+ EEC1 B7          >                        or a
 132+ EEC2 ED 52                            sbc		hl,de                           ; hl = 1 - error
 133+ EEC4 11 01 00     .Setde1:            ld		de,1                            ; de = 1
 134+ EEC7              .CircleLoop:        ReturnIfRegLTNusng ixh, ixl             ; if radius > ixl counter
 134+ EEC7 DD 7C       >                        ld      a,ixh
 134+ EEC9 DD BD       >                        cp      ixl
 134+ EECB D8          >                        ret	    c
 135+ EECC D9           .ProcessLoop:	    exx                                     ; save all bc,de,hl registers
 136+ EECD              ; For line drawing we can go from left to right in a single call
 137+ EECD              ;--- from CX-X to CX+X, CY+Y -------------------------------;
 138+ EECD 11 00 00     .Plot1Y:            ld		de,0                            ; this is Y coord
 139+ EED0 21 00 00     .Plot1X:            ld      hl,0                            ; this is x coord
 140+ EED3 E5 D5        .Plot1:             push    hl,,de                          ; push X then Y  on top Stack+2
 141+ EED5                                  CalcNewPointMacro hl, sbc, ixh          ; hl = CX - X
 141+ EED5             >                    ClearCarryFlag
 141+ EED5 B7          >                        or a
 141+ EED6 06 00       >                    ld      b,0
 141+ EED8 DD 4C       >                    ld      c,ixh
 141+ EEDA ED 42       >                    sbc    hl,bc
 142+ EEDC EB                               ex      de,hl                           ; de = CX - X
 143+ EEDD ED 53 01 EF                      ld      (.LoadDEXStart1+1),de           ; save it for Plot 2 as well
 144+ EEE1                                  CalcNewPointMacro hl, adc, ixl          ; hl = CY + Y
 144+ EEE1             >                    ClearCarryFlag
 144+ EEE1 B7          >                        or a
 144+ EEE2 06 00       >                    ld      b,0
 144+ EEE4 DD 4D       >                    ld      c,ixl
 144+ EEE6 ED 4A       >                    adc    hl,bc
 145+ EEE8 06 00                            ld      b,0                             ; Now we have calculated D is bc
 146+ EEEA DD 4C                            ld      c,ixh                           ;
 147+ EEEC                                  ShiftBCLeft1                            ;
 147+ EEEC CB 21       >			   sla c
 147+ EEEE CB 10       >			   rl  b
 148+ EEF0 ED 43 04 EF                      ld      (.LoadBCLength1+1),bc            ; self modifying to optimise laod on line 2
 149+ EEF4 CD 55 EF                         call	.PlotLine               		; de = start X, hl= Y line, bc = length
 150+ EEF7 E1           .Plot1Done:         pop     hl                              ; Stack+1 get cy from stack into hl to save an ex as we have pre calculated x positions
 151+ EEF8              ;--- from CX-X to CX+X, CY-Y -------------------------------;
 152+ EEF8 E5           .Plot2:             push    hl                              ; Stack+2 put cy back on stack so it holds cy stack already holds cx
 153+ EEF9                                  CalcNewPointMacro hl, sbc, ixl          ; now we have CY-Y in hl
 153+ EEF9             >                    ClearCarryFlag
 153+ EEF9 B7          >                        or a
 153+ EEFA 06 00       >                    ld      b,0
 153+ EEFC DD 4D       >                    ld      c,ixl
 153+ EEFE ED 42       >                    sbc    hl,bc
 154+ EF00 11 00 00     .LoadDEXStart1:     ld      de,0                            ; de is loaded from above via self modiying code with start X
 155+ EF03 01 00 00     .LoadBCLength1:     ld      bc,0                            ; bc is loaded from above via self modifying code with length
 156+ EF06 CD 55 EF                         call	.PlotLine                       ;
 157+ EF09 D1 E1        .Plot2Done:         pop     hl,,de                          ; Stack+0 now hl = cx, de = cy
 158+ EF0B              ;--- from CX-Y to CX+Y, CY+X -------------------------------;
 159+ EF0B D5           .Plot3:             push    de                              ; Stack + 1 we need cy for final plot calculation
 160+ EF0C                                  CalcNewPointMacro hl, sbc, ixl          ; hl = CX - Y
 160+ EF0C             >                    ClearCarryFlag
 160+ EF0C B7          >                        or a
 160+ EF0D 06 00       >                    ld      b,0
 160+ EF0F DD 4D       >                    ld      c,ixl
 160+ EF11 ED 42       >                    sbc    hl,bc
 161+ EF13 EB                               ex      de,hl                           ; de = CX - Y
 162+ EF14 ED 53 37 EF                      ld      (.LoadDEXStart2+1),de             ; save it for Plot 2 as well
 163+ EF18                                  CalcNewPointMacro hl, adc, ixh          ; hl = CY + X
 163+ EF18             >                    ClearCarryFlag
 163+ EF18 B7          >                        or a
 163+ EF19 06 00       >                    ld      b,0
 163+ EF1B DD 4C       >                    ld      c,ixh
 163+ EF1D ED 4A       >                    adc    hl,bc
 164+ EF1F 06 00                            ld      b,0                             ; Now we have calculated D is bc
 165+ EF21 DD 4D                            ld      c,ixl                           ;
 166+ EF23                                  ShiftBCLeft1                            ;
 166+ EF23 CB 21       >			   sla c
 166+ EF25 CB 10       >			   rl  b
 167+ EF27 ED 43 3A EF                      ld      (.LoadBCLength2+1),bc            ; self modifying to optimise laod on line 2
 168+ EF2B CD 55 EF                         call	.PlotLine               		; de = start X, hl= Y line, bc = length
 169+ EF2E E1           .Plot3Done:         pop     hl                              ; Stack + 0 get cy from stack into hl to save an ex as we have pre calculated x positions
 170+ EF2F              ;--- from CX-X to CX+X, CY-Y -------------------------------;
 171+ EF2F              .Plot4a:            CalcNewPointMacro hl, sbc, ixh          ; now we have CY-X in hl
 171+ EF2F             >                    ClearCarryFlag
 171+ EF2F B7          >                        or a
 171+ EF30 06 00       >                    ld      b,0
 171+ EF32 DD 4C       >                    ld      c,ixh
 171+ EF34 ED 42       >                    sbc    hl,bc
 172+ EF36 11 00 00     .LoadDEXStart2:     ld      de,0                            ; de is loaded from above via self modiying code with start X
 173+ EF39 01 00 00     .LoadBCLength2:     ld      bc,0                            ; bc is loaded from above via self modifying code with length
 174+ EF3C CD 55 EF                         call	.PlotLine                       ;
 175+ EF3F D9           .PlotDone:          exx                                     ; get back data from alternate registers
 176+ EF40 CB 7C        .IncrementCircle:	bit     7,h			                  	; Check for Hl<=0
 177+ EF42 28 03                            jr z,   .draw_circle_1
 178+ EF44 19                               add hl,de			                    ; Delta=Delta+D1
 179+ EF45 18 05                            jr      .draw_circle_2		            ;
 180+ EF47 09           .draw_circle_1:		add     hl,bc		                    ; Delta=Delta+D2
 181+ EF48 03                               inc     bc
 182+ EF49 03                               inc     bc			                    ; D2=D2+2
 183+ EF4A DD 25                            dec     ixh			                    ; Y=Y-1
 184+ EF4C 03           .draw_circle_2:		inc     bc			                    ; D2=D2+2
 185+ EF4D 03                               inc     bc
 186+ EF4E 13                               inc     de			                    ; D1=D1+2
 187+ EF4F 13                               inc     de
 188+ EF50 DD 2C                            inc     ixl			                    ; X=X+1
 189+ EF52 C3 C7 EE                         jp      .CircleLoop
 190+ EF55              ;-- PERFORM THE LINE DRAW ----------------------------------;
 191+ EF55              ; comes in with de = left x , hl = y, bc = length
 192+ EF55              ; Note bc must be +ve < 32768
 193+ EF55              .PlotLine:
 194+ EF55 7C           .IsYOnScreen:       ld      a,h                             ; if y > 255 or < 0 then no line to draw
 195+ EF56 A7                               and     a                               ;
 196+ EF57 C0                               ret     nz                              ;
 197+ EF58 7D                               ld      a,l                             ;
 198+ EF59 A7                               and     a                               ;
 199+ EF5A F8                               ret     m                               ; if m set then y must be > 127
 200+ EF5B              ;-- now check X coordinate, if X < 256 then skip x position clip
 201+ EF5B 7A           .IsXOffRight:       ld      a,d                             ; if x >255
 202+ EF5C A7                               and     a
 203+ EF5D 28 19                            jr      z,.NoLeftClip                   ; if high is not set then no X clip
 204+ EF5F              ;-- if X > 255 then off screen so just skip line
 205+ EF5F F0           .LeftClip:          ret     p                               ; if its > 255 then no line
 206+ EF60              ;-- if its off the left then add distance, if this is < 0 then off screen skip
 207+ EF60 E5           .IsTotallyOffLeft:  push    hl                              ; if X pos + length <0 then no line
 208+ EF61 62 6B                            ld      hl,de                           ; .
 209+ EF63                                  ClearCarryFlag                          ; .
 209+ EF63 B7          >                        or a
 210+ EF64              ;    but also this calculation gives us the line length if x is clipped to 90
 211+ EF64 ED 4A                            adc     hl,bc                           ; .
 212+ EF66 44 4D                            ld      bc,hl                           ; save the result in HL as this is also line length from hl = 0
 213+ EF68 E1                               pop     hl                              ; .
 214+ EF69 F8                               ret     m                               ; if x + distance < 0 then off screen skip
 215+ EF6A              ;-- now as its on screen but clipped x < 0 we can just draw a line from 0 to x+d, maxed at x+d = 255
 216+ EF6A 11 00 00     .ClippedSpanX:      ld      de,0                            ; if off left X = 0, bc already calcualted above in ADC
 217+ EF6D 78                               ld      a,b                             ; if bc < 255 then good
 218+ EF6E A7                               and     a
 219+ EF6F CA 8C EF                         jp      z,.NoPopPlotColour              ;
 220+ EF72 01 FF 00                         ld      bc,255                          ; max length
 221+ EF75 C3 8C EF                         jp      .NoPopPlotColour                ; we can now just draw
 222+ EF78              ;-- No left side clipping needed so we just need to work out if x + d > 255
 223+ EF78 E5           .NoLeftClip:        push    hl                              ; STACK+1 if corrected x + length < 256 then
 224+ EF79 62 6B                            ld      hl,de                           ; just plot
 225+ EF7B 09                               add     hl,bc
 226+ EF7C 7C                               ld      a,h
 227+ EF7D B7                               or      a
 228+ EF7E E1                               pop     hl
 229+ EF7F CA 8C EF                         jp      z,.NoPopPlotColour
 230+ EF82              ;-- x + d > 255 so we plot from x to distance 255 - x
 231+ EF82 E5           .LengthClip:        push    hl
 232+ EF83 21 FF 00                         ld      hl,255
 233+ EF86                                  ClearCarryFlag
 233+ EF86 B7          >                        or a
 234+ EF87 ED 52                            sbc     hl,de                           ; now hl = corrected length
 235+ EF89 44 4D                            ld      bc,hl
 236+ EF8B              ;-- This entry point is if there is hl on the stack
 237+ EF8B E1           .PopHLPlotColour:   pop     hl
 238+ EF8C 51           .NoPopPlotColour:   ld      d,c             ; d = length
 239+ EF8D 4B                               ld      c,e             ; c = start X
 240+ EF8E 45                               ld      b,l             ; b = row Y
 241+ EF8F 1E 00        .PlotColour:        ld		e,0             ; This was originally indirect, where as it neeed to be value
 242+ EF91 CD 77 E4                         call    l2_draw_horz_dma_bank
 243+ EF94                                  ClearCarryFlag
 243+ EF94 B7          >                        or a
 244+ EF95 C9                               ret
 245+ EF96 7C           .circleSinglepixel: ld      a,h             ; as its 1 pixel if h or d are non zero then its off screen
 246+ EF97 B2                               or      d
 247+ EF98 C0                               ret     nz
 248+ EF99 CB 7B                            bit     7,e             ; and if Y is > 127 then off screen , bit is 8 states like ld a,e and a
 249+ EF9B C0                               ret     nz
 250+ EF9C 78                               ld      a,b             ; a = colour
 251+ EF9D 43                               ld      b,e             ; b = y
 252+ EF9E 4D                               ld      c,l             ; c = x
 253+ EF9F CD B6 E2                         call    l2_plot_pixel
 254+ EFA2 C9                               ret
# file closed: ./Layer2Graphics/layer2_plot_circle_fill.asm
 859  EFA3                  INCLUDE "./Layer2Graphics/l2_draw_any_line.asm"
# file opened: ./Layer2Graphics/l2_draw_any_line.asm
   1+ EFA3
   2+ EFA3 FF FF        starty                  DW     $FFFF
   3+ EFA5 FF FF        endy                    DW     $FFFF
   4+ EFA7 CF           traingleColor           DB     $CF
   5+ EFA8 00 00 00...  SaveArrayS1             DS     128*2
   6+ F0A8 00 00 00...  SaveArrayS2             DS     128*2
   7+ F1A8
   8+ F1A8                  INCLUDE "./Layer2Graphics/BBCEliteDirectMappingLL118.asm"
# file opened: ././Layer2Graphics/BBCEliteDirectMappingLL118.asm
   1++F1A8                              IFDEF DEBUG_LL122_DIRECT
   2++F1A8 ~                                    ; (Y X) = (S R) * Q
   3++F1A8 ~                                    ; yxregpair = (20 * 140)/256 = 16d 10h
   4++F1A8 ~            Debug_LL122_6502:       ld      hl, 20
   4++F1A8 ~             ld      (SRvarPair),hl
   5++F1A8 ~                                    ld      a,  140
   5++F1A8 ~             ld      (Qvar),a
   6++F1A8 ~                                    call    LL122_6502  ; -10                               >> PASS
   7++F1A8 ~                                    ;break
   8++F1A8 ~                                    ; yxregpair = 20 * 140 = 17d 11h
   9++F1A8 ~                                    ld      hl, 20
   9++F1A8 ~             ld      (SRvarPair),hl
  10++F1A8 ~                                    ld      a,  230
  10++F1A8 ~             ld      (Qvar),a
  11++F1A8 ~                                    call    LL122_6502  ; -17                               >> PASS
  12++F1A8 ~                                    break
  13++F1A8 ~                                    ret
  14++F1A8                              ENDIF
  15++F1A8
  16++F1A8              ;--  The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2
  17++F1A8
  18++F1A8                              IFDEF DEBUG_LL121_DIRECT
  19++F1A8 ~                                    ; (Y X) = (S R) / Q
  20++F1A8 ~                                    ; yxregpair = 20 / 140 = 20*256 / 140 = 36d, 24h
  21++F1A8 ~            Debug_LL121_6502:       ld      hl, 20
  21++F1A8 ~             ld      (SRvarPair),hl
  22++F1A8 ~                                    ld      a,  140
  22++F1A8 ~             ld      (Qvar),a
  23++F1A8 ~                                    call    LL121_6502  ; -36                               >> PASS
  24++F1A8 ~                                    ;break
  25++F1A8 ~                                    ; yxregpair =  20 / 140 = 20*256 / 230 = 22d, 11h
  26++F1A8 ~                                    ld      hl, 20
  26++F1A8 ~             ld      (SRvarPair),hl
  27++F1A8 ~                                    ld      a,  230
  27++F1A8 ~             ld      (Qvar),a
  28++F1A8 ~                                    call    LL121_6502  ; -22                               >> PASS
  29++F1A8 ~                                    ;break
  30++F1A8 ~                                    ret
  31++F1A8                              ENDIF
  32++F1A8
  33++F1A8                              IFDEF DEBUG_LL129_DIRECT
  34++F1A8 ~            Debug_LL129_6502:       ld      hl,-20
  34++F1A8 ~             ld     (SRvarPair),hl
  35++F1A8 ~                                    ld      a, 0
  35++F1A8 ~             ld     (XX12p3),a
  36++F1A8 ~                                    ld      a, 10
  36++F1A8 ~             ld     (XX12p2),a
  37++F1A8 ~                                    call    LL129_6502  ; expect q = 10, a = $FF SR = 20    >> PASS
  38++F1A8 ~                                    ;break
  39++F1A8 ~                                    ld      hl,20
  39++F1A8 ~             ld     (SRvarPair),hl
  40++F1A8 ~                                    ld      a, 0
  40++F1A8 ~             ld     (XX12p3),a
  41++F1A8 ~                                    ld      a, 40
  41++F1A8 ~             ld     (XX12p2),a
  42++F1A8 ~                                    call    LL129_6502  ; expect q = 40, a = 00 SR = 20     >> PASS
  43++F1A8 ~                                    ;break
  44++F1A8 ~                                    ld      hl,40
  44++F1A8 ~             ld     (SRvarPair),hl
  45++F1A8 ~                                    ld      a, $FF
  45++F1A8 ~             ld     (XX12p3),a
  46++F1A8 ~                                    ld      a, 40
  46++F1A8 ~             ld     (XX12p2),a
  47++F1A8 ~                                    call    LL129_6502  ; expect q = 40, a = $FF SR = 40    >> PASS
  48++F1A8 ~                                    ;break
  49++F1A8 ~                                    ld      hl,-40
  49++F1A8 ~             ld     (SRvarPair),hl
  50++F1A8 ~                                    ld      a, $FF
  50++F1A8 ~             ld     (XX12p3),a
  51++F1A8 ~                                    ld      a, 40
  51++F1A8 ~             ld     (XX12p2),a
  52++F1A8 ~                                    call    LL129_6502  ; expect q = 40, a = 00 SR = 40     >> PASS
  53++F1A8 ~                                    ;break
  54++F1A8 ~                                    ret
  55++F1A8                              ENDIF
  56++F1A8
  57++F1A8                              IFDEF DEBUG_LL120_DIRECT
  58++F1A8 ~            Debug_LL120_6502:       ld      a,0
  58++F1A8 ~             ld      (Tvar),a                  ; SLOPE 0 so calcualte YX = S X1lo * XX12+2
  59++F1A8 ~                                    ld      hl,20
  59++F1A8 ~             ld a,h
  59++F1A8 ~              ld (Svar),a
  59++F1A8 ~              ld a,l
  59++F1A8 ~              ld (XX1510),a  ; S x1lo = 20
  60++F1A8 ~                                    ld      a,140
  60++F1A8 ~             ld      (XX12p2),a                ; XX12+2  140, gradient 0.546875
  61++F1A8 ~                                    ld      a,0
  61++F1A8 ~             ld      (XX12p3),a                ; SLOPE DIRECTION so -ve result
  62++F1A8 ~                                    ; post LL129 Q = 140 a = 00  SR YX = (20 * 140) /256 * -1 = -10
  63++F1A8 ~                                    call    LL120_6502  ; Expect mulitply so (Y X) -10      >> PASS
  64++F1A8 ~                                    ;break
  65++F1A8 ~                                    ld      a,0
  65++F1A8 ~             ld      (Tvar),a                  ; SLOPE 0 so calcualte YX = S X1lo * XX12+2
  66++F1A8 ~                                    ld      hl,20
  66++F1A8 ~             ld a,h
  66++F1A8 ~              ld (Svar),a
  66++F1A8 ~              ld a,l
  66++F1A8 ~              ld (XX1510),a  ; S x1lo = 20
  67++F1A8 ~                                    ld      a,140
  67++F1A8 ~             ld      (XX12p2),a                ; XX12+2 140, gradient 0.546875
  68++F1A8 ~                                    ld      a,$FF
  68++F1A8 ~             ld      (XX12p3),a                ; sLOPE DIRECTION so +ve result
  69++F1A8 ~                                    ; post LL129 Q = 140 a = FF  SR = 20  YX = (20 * 140) /256 = 10
  70++F1A8 ~                                    call    LL120_6502  ; Expect / so (Y X)10                   >> PASS
  71++F1A8 ~                                    ;break
  72++F1A8 ~                                    ld      a,$FF
  72++F1A8 ~             ld      (Tvar),a                  ; SLOPE <> 0 so calcualte YX = S X1lo / XX12+2
  73++F1A8 ~                                    ld      hl,20
  73++F1A8 ~             ld a,h
  73++F1A8 ~              ld (Svar),a
  73++F1A8 ~              ld a,l
  73++F1A8 ~              ld (XX1510),a  ; S x1lo = 20
  74++F1A8 ~                                    ld      a,140
  74++F1A8 ~             ld      (XX12p2),a                ; XX12+2 140, gradient 0.546875
  75++F1A8 ~                                    ld      a,$00
  75++F1A8 ~             ld      (XX12p3),a                ; sLOPE DIRECTION  so -ve result
  76++F1A8 ~                                    ; post LL129 Q = 140 a = 00  SR = 20  YX = (20 *256 / 140) = -36
  77++F1A8 ~                                    call    LL120_6502  ; Expect / so (Y X)-36
  78++F1A8 ~                                    ld      a,$FF
  78++F1A8 ~             ld      (Tvar),a                  ; SLOPE <> 0 so calcualte YX = S X1lo / XX12+2
  79++F1A8 ~                                    ld      hl,20
  79++F1A8 ~             ld a,h
  79++F1A8 ~              ld (Svar),a
  79++F1A8 ~              ld a,l
  79++F1A8 ~              ld (XX1510),a  ; S x1lo = 20
  80++F1A8 ~                                    ld      a,140
  80++F1A8 ~             ld      (XX12p2),a                ; XX12+2 140, gradient 0.546875
  81++F1A8 ~                                    ld      a,$FF
  81++F1A8 ~             ld      (XX12p3),a                ; sLOPE DIRECTION  so +ve result
  82++F1A8 ~                                    ; post LL129 Q = 140 a = 00 SR = 20 YX = (20 *256 / 140) = 36
  83++F1A8 ~                                    call    LL120_6502  ; Expect / so (Y X)  36                   >> PASS
  84++F1A8 ~                                    ret
  85++F1A8                              ENDIF
  86++F1A8              ;----------------------------------------------------------------------------------------------------------------------------
  87++F1A8              ;-- Calculate the following:
  88++F1A8              ;--         * If T = 0, this is a shallow slope, so calculate (Y X) = (S R) / XX12+2
  89++F1A8              ;--         * If T <> 0, this is a steep slope, so calculate (Y X) = (S R) * XX12+2
  90++F1A8              ;--             giving (Y X) the opposite sign to the slope direction in XX12+3.
  91++F1A8                              IFDEF DEBUG_LL123_DIRECT
  92++F1A8 ~            Debug_LL123_6502:       ld      a,$00
  92++F1A8 ~             ld      (Tvar),a                  ; SLOPE 0 (Y X) = (S R) / XX12+2
  93++F1A8 ~                                    ld      hl,20
  93++F1A8 ~             ld      (SRvarPair),hl
  94++F1A8 ~                                    ld      a,140
  94++F1A8 ~             ld      (XX12p2),a                ; XX12+2 gradient 0.546875
  95++F1A8 ~                                    ld      a,0
  95++F1A8 ~             ld      (XX12p3),a                ; sLOPE DIRECTION
  96++F1A8 ~                                    call    LL123_6502  ; Expect * so (Y X)-36 = (20 / 140 ) * 256 * -1 PASS
  97++F1A8 ~                                    ;break
  98++F1A8 ~                                    ld      a,$00
  98++F1A8 ~             ld      (Tvar),a                  ; SLOPE 0 (Y X) = (S R) / XX12+2
  99++F1A8 ~                                    ld      hl,20
  99++F1A8 ~             ld      (SRvarPair),hl
 100++F1A8 ~                                    ld      a,140
 100++F1A8 ~             ld      (XX12p2),a                ; XX12+2 gradient 0.546875
 101++F1A8 ~                                    ld      a,$FF
 101++F1A8 ~             ld      (XX12p3),a                ; sLOPE DIRECTION
 102++F1A8 ~                                    call    LL123_6502  ; Expect * so (Y X)36 = (20 / 140 ) * 256  PASS
 103++F1A8 ~                                    ;break
 104++F1A8 ~                                    ld      a,$FF
 104++F1A8 ~             ld      (Tvar),a                  ; SLOPE <> 0 (Y X) = (S R) * XX12+2
 105++F1A8 ~                                    ld      hl,20
 105++F1A8 ~             ld      (SRvarPair),hl
 106++F1A8 ~                                    ld      a,140
 106++F1A8 ~             ld      (XX12p2),a                ; XX12+2 gradient 0.546875
 107++F1A8 ~                                    ld      a,$00
 107++F1A8 ~             ld      (XX12p3),a                ; sLOPE DIRECTION
 108++F1A8 ~                                    call    LL123_6502  ; Expect / so (Y X)-10 (20 * 140 ) / 256 * -1 PASS
 109++F1A8 ~                                    ld      a,$FF
 109++F1A8 ~             ld      (Tvar),a                  ; SLOPE <> 0 (Y X) = (S R) * XX12+2
 110++F1A8 ~                                    ld      hl,20
 110++F1A8 ~             ld      (SRvarPair),hl
 111++F1A8 ~                                    ld      a,140
 111++F1A8 ~             ld      (XX12p2),a                ; XX12+2 gradient 0.546875
 112++F1A8 ~                                    ld      a,$FF
 112++F1A8 ~             ld      (XX12p3),a                ; sLOPE DIRECTION
 113++F1A8 ~                                    call    LL123_6502  ; Expect / so (Y X) 10 (20 * 140 ) / 256  PASS
 114++F1A8 ~                                    ret
 115++F1A8                              ENDIF
 116++F1A8
 117++F1A8                              IFDEF DEBUG_LL118_DIRECT
 118++F1A8 ~            Debug_LL118_6502:       ld      a,$FF
 118++F1A8 ~             ld      (Tvar),a                  ; SLOPE FF so steep
 119++F1A8 ~                                    ld      hl,-20
 119++F1A8 ~             ld      (XX1510),hl               ; x1 = -20
 120++F1A8 ~                                    ld      hl,-20
 120++F1A8 ~             ld      (XX1532),hl               ; y1 = -20
 121++F1A8 ~                                    ld      a,120
 121++F1A8 ~             ld      (XX12p2),a                ; XX12+2 = 120 (120/256) = 0.46875
 122++F1A8 ~                                    ld      a,0
 122++F1A8 ~             ld      (XX12p3),a                ; Slope Direction so TL to BR
 123++F1A8 ~                                    ; -20, -20 steep TL>BR, gradient 120/256: Dir -1 so
 124++F1A8 ~                                    call    LL118_6502  ; Expect * so x = 0 y =  -20 + (-20/(120/256)) = 22, x1 = 0 so stop there PASS
 125++F1A8 ~                                    ;break
 126++F1A8 ~
 127++F1A8 ~                                    ld      a,$FF
 127++F1A8 ~             ld      (Tvar),a                  ; SLOPE FF so steep
 128++F1A8 ~                                    ld      hl,-30
 128++F1A8 ~             ld      (XX1510),hl               ; x1 = -20
 129++F1A8 ~                                    ld      hl,-20
 129++F1A8 ~             ld      (XX1532),hl               ; y1 = -20
 130++F1A8 ~                                    ld      a,60
 130++F1A8 ~             ld      (XX12p2),a                ; XX12+2 = 120 (120/256) = 0.46875
 131++F1A8 ~                                    ld      a,0
 131++F1A8 ~             ld      (XX12p3),a                ; Slope Direction so TL to BR
 132++F1A8 ~                                    ; -20, -20 steep TL>BR, gradient 120/256: Dir -1 so
 133++F1A8 ~                                    call    LL118_6502  ; Expect * so 108,0  PASS (fixed carry flag issue in LL121 and re-tested LL121)
 134++F1A8 ~                                    ;break
 135++F1A8 ~
 136++F1A8 ~                                    ld      a,$0
 136++F1A8 ~             ld      (Tvar),a                  ; SLOPE FF so steep
 137++F1A8 ~                                    ld      hl,-20
 137++F1A8 ~             ld      (XX1510),hl               ; x1 = -20
 138++F1A8 ~                                    ld      hl,-20
 138++F1A8 ~             ld      (XX1532),hl               ; y1 = -20
 139++F1A8 ~                                    ld      a,60
 139++F1A8 ~             ld      (XX12p2),a                ; XX12+2 = 120 (120/256) = 0.46875
 140++F1A8 ~                                    ld      a,0
 140++F1A8 ~             ld      (XX12p3),a                ; Slope Direction so TL to BR
 141++F1A8 ~                                    ; -20, -20 steep TL>BR, gradient 120/256: Dir -1 so
 142++F1A8 ~                                    call    LL118_6502  ; Expect * so 108,0  PASS (fixed carry flag issue in LL121 and re-tested LL121)
 143++F1A8 ~                                    ;break
 144++F1A8 ~                                    ret
 145++F1A8 ~
 146++F1A8                              ENDIF
 147++F1A8
 148++F1A8                              IFDEF DEBUG_LL28_6502
 149++F1A8 ~            Debug_LL28_6502:        ld      a,27
 149++F1A8 ~             ld     (Qvar),a
 150++F1A8 ~                                    ld      a,76
 151++F1A8 ~                                    call    LL28_6502   ; Expect $FF carry
 152++F1A8 ~                                    ;break
 153++F1A8 ~                                    ld      a,76
 153++F1A8 ~             ld     (Qvar),a
 154++F1A8 ~                                    ld      a,27        ; Expect 2
 155++F1A8 ~                                    call    LL28_6502
 156++F1A8 ~                                    ;break
 157++F1A8 ~                                    ld      a,200
 157++F1A8 ~             ld     (Qvar),a
 158++F1A8 ~                                    ld      a,50
 159++F1A8 ~                                    call    LL28_6502   ; Expect 4
 160++F1A8 ~                                    ;break
 161++F1A8 ~                                    ld      a,97
 161++F1A8 ~             ld     (Qvar),a
 162++F1A8 ~                                    ld      a,76
 163++F1A8 ~                                    call    LL28_6502   ; Expect 1
 164++F1A8 ~                                    ;break
 165++F1A8 ~                                    ld      a,$20
 165++F1A8 ~             ld     (Qvar),a
 166++F1A8 ~                                    ld      a,$10
 167++F1A8 ~                                    call    LL28_6502   ; Expect 1
 168++F1A8 ~                                    ;break
 169++F1A8 ~                                    ld      d,27
 170++F1A8 ~                                    ld      a,76
 171++F1A8 ~                                    call    AEquAmul256DivD
 172++F1A8 ~                                    ;break
 173++F1A8 ~                                    ld      d,76
 174++F1A8 ~                                    ld      a,27
 175++F1A8 ~                                    call    AEquAmul256DivD
 176++F1A8 ~                                    ;break
 177++F1A8 ~                                    ld      d,200
 178++F1A8 ~                                    ld      a,50
 179++F1A8 ~                                    call    AEquAmul256DivD
 180++F1A8 ~                                    ;break
 181++F1A8 ~                                    ld      d,$20
 182++F1A8 ~                                    ld      a,$10
 183++F1A8 ~                                    call    AEquAmul256DivD
 184++F1A8 ~                                    ;break
 185++F1A8 ~                                    ret
 186++F1A8                              ENDIF
 187++F1A8
 188++F1A8
 189++F1A8                              IFDEF DEBUG_LL145_6502
 190++F1A8 ~            Debug_LL145_6502:       ; ld  a,1      : ld  (UBnkLineArrayLen),a
 191++F1A8 ~                                    ; ld  hl,$0116 : ld  (UBnkLineArray),hl
 192++F1A8 ~                                    ; ld  hl,$004B : ld  (UBnkLineArray+2),hl
 193++F1A8 ~                                    ; ld  hl,$00F8 : ld  (UBnkLineArray+4),hl
 194++F1A8 ~                                    ; ld  hl,$002F : ld  (UBnkLineArray+6),hl
 195++F1A8 ~                                    ; call    DrawLinesLateClipping : ;break
 196++F1A8 ~                                    ; ld  a,1      : ld  (UBnkLineArrayLen),a
 197++F1A8 ~                                    ; ld  hl,$0033 : ld  (UBnkLineArray),hl
 198++F1A8 ~                                    ; ld  hl,$0016 : ld  (UBnkLineArray+2),hl
 199++F1A8 ~                                    ; ld  hl,$001D : ld  (UBnkLineArray+4),hl
 200++F1A8 ~                                    ; ld  hl,$FFBE : ld  (UBnkLineArray+6),hl
 201++F1A8 ~                                    ; call    DrawLinesLateClipping : ;break
 202++F1A8 ~                                    ; ld  a,1      : ld  (UBnkLineArrayLen),a
 203++F1A8 ~                                    ; ld  hl,$0055 : ld  (UBnkLineArray),hl
 204++F1A8 ~                                    ; ld  hl,$FF83 : ld  (UBnkLineArray+2),hl
 205++F1A8 ~                                    ; ld  hl,$0033 : ld  (UBnkLineArray+4),hl
 206++F1A8 ~                                    ; ld  hl,$0016 : ld  (UBnkLineArray+6),hl
 207++F1A8 ~                                    ; call    DrawLinesLateClipping :  ;break
 208++F1A8 ~
 209++F1A8 ~                                    ;ld  a,1      : ld  (UBnkLineArrayLen),a
 210++F1A8 ~                                    ;ld  hl,$00B3 : ld  (UBnkLineArray),hl
 211++F1A8 ~                                    ;ld  hl,$0054 : ld  (UBnkLineArray+2),hl
 212++F1A8 ~                                    ;ld  hl,$005d : ld  (UBnkLineArray+4),hl
 213++F1A8 ~                                    ;ld  hl,$ffd5 : ld  (UBnkLineArray+6),hl
 214++F1A8 ~                                    ;call    DrawLinesLateClipping :  ;break
 215++F1A8 ~                                    ;
 216++F1A8 ~                                    ;ld  a,1      : ld  (UBnkLineArrayLen),a
 217++F1A8 ~                                    ;ld  hl,$005d : ld  (UBnkLineArray),hl
 218++F1A8 ~                                    ;ld  hl,$ffd5 : ld  (UBnkLineArray+2),hl
 219++F1A8 ~                                    ;ld  hl,$00b9 : ld  (UBnkLineArray+4),hl
 220++F1A8 ~                                    ;ld  hl,$0028 : ld  (UBnkLineArray+6),hl
 221++F1A8 ~                                    ;call    DrawLinesLateClipping :  ;break
 222++F1A8 ~
 223++F1A8 ~                                    ld  a,1
 223++F1A8 ~              ld  (UBnkLineArrayLen),a
 224++F1A8 ~                                    ld  hl,$ffc7
 224++F1A8 ~              ld  (UBnkLineArray),hl
 225++F1A8 ~                                    ld  hl,$001a
 225++F1A8 ~              ld  (UBnkLineArray+2),hl
 226++F1A8 ~                                    ld  hl,$005d
 226++F1A8 ~              ld  (UBnkLineArray+4),hl
 227++F1A8 ~                                    ld  hl,$ffd5
 227++F1A8 ~              ld  (UBnkLineArray+6),hl
 228++F1A8 ~                                    call    DrawLinesLateClipping
 228++F1A8 ~               ;break
 229++F1A8 ~
 230++F1A8 ~                                    ;ld  a,1      : ld  (UBnkLineArrayLen),a
 231++F1A8 ~                                    ;ld  hl,$0089 : ld  (UBnkLineArray),hl
 232++F1A8 ~                                    ;ld  hl,$00e2 : ld  (UBnkLineArray+2),hl
 233++F1A8 ~                                    ;ld  hl,$fff3 : ld  (UBnkLineArray+4),hl
 234++F1A8 ~                                    ;ld  hl,$00b9 : ld  (UBnkLineArray+6),hl
 235++F1A8 ~                                    ;call    DrawLinesLateClipping :  ;break
 236++F1A8 ~
 237++F1A8 ~                                    ret
 238++F1A8                              ENDIF
 239++F1A8                      DEFINE DEBUG_6502_LINE_CLIPPING
 240++F1A8                      IFDEF DEBUG_6502_LINE_CLIPPING
 241++F1A8
 242++F1A8 00           xX13        DB 0
 243++F1A9 00 00        XX1510      DW 0    ; x1 as a 16-bit coordinate (x1_hi x1_lo)
 244++F1AB 00 00        XX1532      DW 0    ; y1 as a 16-bit coordinate (y1_hi y1_lo)
 245++F1AD 00 00        XX1554      DW 0    ; x2
 246++F1AF              XX1554p1    EQU XX1554+1
 247++F1AF 00 00        XX1576      DW 0    ; y2
 248++F1B1              XX1210      EQU XX1576
 249++F1B1              XX12p1      EQU XX1210+1
 250++F1B1              XX15X1lo    EQU XX1510
 251++F1B1              XX15X1hi    EQU XX1510+1
 252++F1B1              XX15Y1lo    EQU XX1532
 253++F1B1              XX15Y1hi    EQU XX1532+1
 254++F1B1              XX15X2lo    EQU XX1554
 255++F1B1              XX15X2hi    EQU XX1554+1
 256++F1B1              XX15Y2lo    EQU XX1210
 257++F1B1              XX15Y2hi    EQU XX1210+1
 258++F1B1
 259++F1B1 00           XX12p2      DB 0    ; The line's gradient * 256 (so 1.0 = 256)
 260++F1B2 00           XX12p3      DB 0    ; The direction of slope ; + LT to BR; - TR to BL
 261++F1B3 00           XX12p4      DB 0
 262++F1B4 00           XX12p5      DB 0
 263++F1B5              Delta_x     EQU XX12p2
 264++F1B5              Delta_y     EQU XX12p4
 265++F1B5 00           Tvar        DB 0    ; The gradient of slope ; 0 if it's a shallow slope (DX > DY) ; &FF if it's a steep slope (DY > DX)
 266++F1B6                                  ; Returns:  XX15        m         x1 as an 8-bit coordinate XX15+2               y1 as an 8-bit coordinate
 267++F1B6 00           Qvar        DB 0
 268++F1B7 00           Rvar        DB 0    ; general purpose for calcs  Paired with S must be done this way round for SUBHeightFromY1 etc to work
 269++F1B8 00           Svar        DB 0    ; sign variable
 270++F1B9              SRvarPair   EQU Rvar
 271++F1B9 00           Xreg        DB 0
 272++F1BA 00           Yreg        DB 0
 273++F1BB              YXregPair   EQU Xreg
 274++F1BB
 275++F1BB              ;-- Name: LL28 Calculate R = 256 * A / Q
 276++F1BB              ;-- LL28+4              Skips the A >= Q check and always returns with C flag cleared, so this can be called if we know the division will work
 277++F1BB              ;-- LL31                Skips the A >= Q check and does not set the R counter, so this can be used for jumping straight into the division loop if R is already set to 254 and we know the division will work
 278++F1BB              ;   Reg mapping 6502  Z80
 279++F1BB              ;               a     a
 280++F1BB              ;               b     x
 281++F1BB              ;               c     q
 282++F1BB              ;               d     r
 283++F1BB              ;
 284++F1BB 21 B6 F1     LL28_6502:          ld      hl,Qvar                 ; CMP Q                  \ If A >= Q, then the answer will not fit in one byte,
 285++F1BE 4E                               ld      c,(hl)                  ; using c as Q var
 286++F1BF B9                               cp      c
 287++F1C0                                  FlipCarryFlag
 287++F1C0 3F          >                        ccf
 288++F1C1 DA E9 F1                         jp      c, LL2_6502             ; BCS LL2                \ so jump to LL2 to return 255
 289++F1C4 06 FE                            ld      b,$FE                   ; LDX #%11111110         \ Set R to have bits 1-7 set, so we can rotate through 7 loop iterations, getting a 1 each time, and then we use b as Rvar
 290++F1C6 CB 27        LL31_6502:          sla     a                       ; ASL A                  \ Shift A to the left
 291++F1C8 DA DD F1                         jp      c,LL29_6502             ; BCS LL29               \ If bit 7 of A was set, then jump straight to the subtraction
 292++F1CB                                  FlipCarryFlag                   ;                          If A < N, then C flag is set.
 292++F1CB 3F          >                        ccf
 293++F1CC                                  JumpIfALTNusng c, LL31_SKIPSUB_6502 ; CMP Q              \ If A < Q, skip the following subtraction
 293++F1CC B9          >                        cp      c
 293++F1CD DA D2 F1    >                        jp		c, LL31_SKIPSUB_6502
 294++F1D0                                                                  ; BCC P%+4
 295++F1D0 91                               sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
 296++F1D1                                  ClearCarryFlag
 296++F1D1 B7          >                        or a
 297++F1D2              LL31_SKIPSUB_6502:  FlipCarryFlag
 297++F1D2 3F          >                        ccf
 298++F1D3 CB 10                            rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
 299++F1D5 DA C6 F1                         jp      c, LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
 300++F1D8 78                               ld      a,b
 301++F1D9 32 B7 F1                         ld      (Rvar),a
 302++F1DC C9                               ret                             ; RTS                    \ R left with remainder of division
 303++F1DD 91           LL29_6502:          sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
 304++F1DE                                  SetCarryFlag                    ; SEC                    \ Set the C flag to rotate into the result in R
 304++F1DE 37          >                        scf
 305++F1DF CB 10                            rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
 306++F1E1 DA C6 F1                         jp      c, LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
 307++F1E4 78                               ld      a,b                     ; RTS                    \ Return from the subroutine with R containing the
 308++F1E5 32 B7 F1                         ld      (Rvar),a                ; .
 309++F1E8 C9                               ret                             ; .                      \ remainder of the division
 310++F1E9 3E FF        LL2_6502:           ld      a,$FF                   ; LDA #255               \ The division is very close to 1, so return the closest
 311++F1EB 32 B7 F1                         ld      (Rvar),a                ; STA R                  \ possible answer to 256, i.e. R = 255
 312++F1EE                                  SetCarryFlag                    ; we failed so need carry flag set
 312++F1EE 37          >                        scf
 313++F1EF C9                               ret                             ; RTS                    \ Return from the subroutine
 314++F1F0
 315++F1F0 3A B9 F1     ADDXRegtoY1:        ld      a,(Xreg)                ; Set y1 = y1 + (Y X)
 316++F1F3 4F                               ld      c,a
 317++F1F4 06 00                            ld      b,0
 318++F1F6 2A AB F1                         ld      hl,(XX1532)
 319++F1F9                                  ClearCarryFlag
 319++F1F9 B7          >                        or a
 320++F1FA ED 4A                            adc     hl,bc
 321++F1FC 22 AB F1                         ld      (XX1532),hl
 322++F1FF C9                               ret
 323++F200
 324++F200 ED 4B B9 F1  ADDYXRegtoY1:       ld      bc,(YXregPair)          ; Set y1 = y1 + (Y X)
 325++F204 2A AB F1                         ld      hl,(XX1532)
 326++F207                                  ClearCarryFlag
 326++F207 B7          >                        or a
 327++F208 ED 4A                            adc     hl,bc
 328++F20A 22 AB F1                         ld      (XX1532),hl
 329++F20D C9                               ret
 330++F20E
 331++F20E ED 4B B9 F1  ADDYXRegtoX1:       ld      bc,(YXregPair)          ; Set x1 = x1 + (Y X)
 332++F212 2A A9 F1                         ld      hl,(XX1510)
 333++F215                                  ClearCarryFlag
 333++F215 B7          >                        or a
 334++F216 ED 4A                            adc     hl,bc
 335++F218 22 A9 F1                         ld      (XX1510),hl
 336++F21B C9                               ret
 337++F21C
 338++F21C 2A AB F1     SUBBCFromY1:        ld      hl,(XX1532)             ; Set (S R) = (y1_hi y1_lo) - BC where BC can be say screen height
 339++F21F                                  ClearCarryFlag
 339++F21F B7          >                        or a
 340++F220 ED 42                            sbc     hl,bc
 341++F222 22 B7 F1                         ld      (SRvarPair),hl
 342++F225 C9                               ret
 343++F226
 344++F226 2A B9 F1     AddSRToYX:          ld      hl,(YXregPair)
 345++F229 ED 5B B7 F1                      ld      de,(SRvarPair)
 346++F22D                                  ClearCarryFlag
 346++F22D B7          >                        or a
 347++F22E ED 5A                            adc     hl,de
 348++F230 22 B9 F1                         ld      (YXregPair),hl
 349++F233 C9                               ret
 350++F234
 351++F234
 352++F234
 353++F234 7C           ClampX:             ld      a,h
 354++F235 A7                               and     a
 355++F236 7D                               ld      a,l
 356++F237 C8                               ret     z
 357++F238 F2 3D F2                         jp      p,.Max255
 358++F23B              .Min0:              ZeroA
 358++F23B AF          >                        xor a
 359++F23C C9                               ret
 360++F23D 3E FF        .Max255:            ld      a,$FF
 361++F23F C9                               ret
 362++F240
 363++F240 7C           ClampY:             ld      a,h
 364++F241 A7                               and     a
 365++F242 CA 4D F2                         jp      z,.ClampYlo
 366++F245 F2 4A F2                         jp      p,.Max127
 367++F248              .Min0:              ZeroA
 367++F248 AF          >                        xor a
 368++F249 C9                               ret
 369++F24A 3E 7F        .Max127:            ld      a,127
 370++F24C C9                               ret
 371++F24D 7D           .ClampYlo:          ld      a,l
 372++F24E A7                               and     a
 373++F24F F0                               ret     p
 374++F250 3E 7F                            ld      a,127
 375++F252 C9                               ret
 376++F253
 377++F253              ;-- Rountes to code:
 378++F253              ;-- LL118
 379++F253              ;-- LL120   Done
 380++F253              ;-- LL129   Done
 381++F253              ;-- LL123   Done
 382++F253                              ; NOTE DOES ABS ONLY
 383++F253
 384++F253
 385++F253                              ;--- LL118 Move along a point until on screen
 386++F253              ; In XX1510 x1 as a 16-bit coordinate (x1_hi x1_lo)
 387++F253              ;    XX1532 y1 as a 16-bit coordinate (y1_hi y1_lo)
 388++F253              ;    XX12p2 The line's gradient * 256 (so 1.0 = 256)
 389++F253              ;    XX12p3 The direction of slope: * Positive = top left to bottom right * Negative (bit 7 set) = top right to bottom left
 390++F253              ;    T      The gradient of slope:* 0 if it's a shallow slope * &FF if it's a steep slope
 391++F253              ;  Out  XX150               x1 as an 8-bit coordinate
 392++F253              ;       XX152               y1 as an 8-bit coordinate
 393++F253              ;----------------------------------------------------------------------------------------------------------------
 394++F253
 395++F253
 396++F253              ;---------------------------------------------------------------------------------------------------------------------
 397++F253              ;--  Calculate the following:
 398++F253              ;--   * If T = 0, this is a shallow slope, so calculate (Y X) = (S x1_lo) * XX12+2
 399++F253              ;--   * If T <> 0, this is a steep slope, so calculate (Y X) = (S x1_lo) / XX12+2
 400++F253              ;-- giving (Y X) the opposite sign to the slope direction in XX12+3.
 401++F253              ;---------------------------------------------------------------------------------------------------------------------
 402++F253 3A A9 F1     LL120_6502:         ld      a,(XX1510)              ;LDA XX15               \ Set R = x1_lo
 403++F256 32 B7 F1                         ld      (Rvar),a                ;STA R
 404++F259 CD 05 F3                         call    LL129_6502              ;JSR LL129              \ Call LL129 to do the following:  Q = XX12+2 = line gradient, A = S EOR XX12+3 = S EOR slope direction  (S R) = |S R|
 405++F25C F5                               push    af                      ;PHA                    \ Store A on the stack so we can use it later
 406++F25D              ; DONT NEED PLUS MESSES UP FLAGS                    push    af                      ;LDX T                  \ If T is non-zero, then it's a steep slope, so jump
 407++F25D 3A B5 F1                         ld      a,(Tvar)                ; .
 408++F260 32 B9 F1                         ld      (Xreg),a                ;. REDUNDANT REMOVE IN OPTIMISATION
 409++F263 A7                               and     a                       ;BNE LL121              \ down to LL121 to calculate this instead (Y X) = (S R) / Q
 410++F264              ; DONT NEED PLUS MESSES UP FLAGS                    pop     af                      ;.                      (recover teh saved A before the cp)
 411++F264 20 48                            jr      nz,LL121_6502           ;.
 412++F266              ;..   (Y X) = (S R) * Q - must be ABS, sign determined by opposite of the sign of the value on top of stack
 413++F266              LL122_6502:         ZeroA                           ;LDA #0                 \ Set A = 0
 413++F266 AF          >                        xor a
 414++F267                          IFDEF DEBUG_LL122_DIRECT
 415++F267 ~                                DISPLAY "DIRECT CALL TO LL122 so dummy push a to stack with 0"
 416++F267 ~                                push    af
 417++F267                          ENDIF
 418++F267 32 B9 F1                         ld      (Xreg),a                ;TAX                    \ Set (Y X) = 0 so we can start building the answer here
 419++F26A 32 BA F1                         ld      (Yreg),a                ;TAY
 420++F26D 21 B8 F1                         ld      hl,Svar
 421++F270 ED 4B B7 F1                      ld      bc,(SRvarPair)          ;LSR S                  \ Shift (S R) to the right, so we extract bit 0 of (S R)
 422++F274                                  ShiftBCRight1                   ;ROR R                  \ into the C flag
 422++F274 CB 38       >			   srl b
 422++F276 CB 19       >			   rr  c
 423++F278 ED 43 B7 F1                      ld      (SRvarPair),bc
 424++F27C 21 B6 F1                         ld      hl, Qvar                ;ASL Q                  \ Shift Q to the left, catching bit 7 in the C flag
 425++F27F CB 26                            sla     (hl)                    ;.
 426++F281 30 03                            jr      nc, LL126_6502          ;BCC LL126              \ If C (i.e. the next bit from Q) is clear, do not do
 427++F283                                                                  ;                         the addition for this bit of Q, and instead skip to LL126 to just do the shifts
 428++F283 CD 26 F2     LL125_6502:         call    AddSRToYX               ;TXA                    \ Set (Y X) = (Y X) + (S R)  starting with the low bytes And then doing the high bytes
 429++F286 ED 4B B7 F1  LL126_6502:         ld      bc,(SRvarPair)          ;LSR S                  \ Shift (S R) to the right
 430++F28A                                  ShiftBCRight1                   ;ROR R
 430++F28A CB 38       >			   srl b
 430++F28C CB 19       >			   rr  c
 431++F28E ED 43 B7 F1                      ld      (SRvarPair),bc          ;.
 432++F292 21 B6 F1                         ld      hl, Qvar                ;ASL Q                  \ Shift Q to the left, catching bit 7 in the C flag
 433++F295 CB 26                            sla     (hl)                    ;.
 434++F297 38 EA                            jr      c,LL125_6502            ;BCS LL125              \ If C (i.e. the next bit from Q) is set, loop back to LL125 to do the addition for this bit of Q
 435++F299 20 EB                            jr      nz,LL126_6502           ;BNE LL126              \ If Q has not yet run out of set bits, loop back to LL126 to do the "shift" part of shift-and-add until we have done additions for all the set bits in Q, to give us our multiplication result
 436++F29B F1                               pop     af                      ;PLA                    \ Restore A, which we calculated above, from the stack
 437++F29C A7                               and     a                       ;BPL LL133              \ If A is positive jump to LL133 to negate (Y X) and
 438++F29D F2 F6 F2                         jp      p,LL133_6502            ;.
 439++F2A0              ;.. return from the subroutine using a tail call
 440++F2A0 C9                               ret                             ;RTS                    \ Return from the subroutine
 441++F2A1
 442++F2A1              ;----------------------------------------------------------------------------------------------------------------------------
 443++F2A1              ;-- Calculate the following:
 444++F2A1              ;--         * If T = 0, this is a shallow slope, so calculate (Y X) = (S R) / XX12+2 (does not use X1lo but directly SR)
 445++F2A1              ;--         * If T <> 0, this is a steep slope, so calculate (Y X) = (S R) * XX12+2  (does not use X1lo but directly SR)
 446++F2A1              ;--             giving (Y X) the opposite sign to the slope direction in XX12+3.
 447++F2A1 CD 05 F3     LL123_6502:         call    LL129_6502              ;JSR LL129              \ Call LL129 to do the following   Q = XX12+2   = line gradient
 448++F2A4 F5                               push    af                      ;PHA                    \ Store A on the stack so we can use it later
 449++F2A5              ; DONT NEED PLUS MESSES UP FLAGS                    push    af                      ;LDX T                  \ If T is non-zero, then it's a steep slope, so jump up
 450++F2A5 3A B5 F1                         ld      a,(Tvar)                ; .
 451++F2A8 32 B9 F1                         ld      (Xreg),a                ;BNE LL122              \ to LL122 to calculate this instead:
 452++F2AB A7                               and     a                       ;.
 453++F2AC              ;  DONT NEED PLUS MESSES UP FLAGS                    pop     af                      ;.
 454++F2AC 20 B8                            jr      nz,LL122_6502           ;.
 455++F2AE              ;--  The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2
 456++F2AE 3E FF        LL121_6502:         ld      a,$FF                   ;LDA #%11111111         \ Set Y = %11111111
 457++F2B0 32 BA F1                         ld      (Yreg),a                ;TAY
 458++F2B3 CB 27                            sla     a                       ;ASL A                  \ Set X = %11111110
 459++F2B5 32 B9 F1                         ld      (Xreg),a                ;TAX
 460++F2B8              ;--  This sets (Y X) = %1111111111111110, so we can rotate through 15 loop iterations, getting a 1 each time, and then getting a 0 on the 16th iteration... and we can also use it to catch our result bits into bit 0 each time
 461++F2B8 ED 4B B7 F1  LL130_6502:         ld      bc,(SRvarPair)          ;ASL R                  \ Shift (S R) to the left
 462++F2BC                                  ShiftBCLeft1                    ;.
 462++F2BC CB 21       >			   sla c
 462++F2BE CB 10       >			   rl  b
 463++F2C0 ED 43 B7 F1                      ld      (SRvarPair),bc          ;ROL S
 464++F2C4 3A B8 F1                         ld      a,(Svar)                ;LDA S                  \ Set A = S
 465++F2C7 38 07                            jr      c, LL131_6502           ;BCS LL131              \ If bit 7 of S was set, then jump straight to the subtraction
 466++F2C9 21 B6 F1                         ld      hl,Qvar                 ;CMP Q                  \ If A < Q (i.e. S < Q), skip the following subtractions
 467++F2CC BE                               cp      (hl)
 468++F2CD                                  FlipCarryFlag                   ; note flip carry flag here to simulate 6502 operation
 468++F2CD 3F          >                        ccf
 469++F2CE 30 12                            jr      nc,LL132A_6502          ;BCC LL132  (NOTE Carry flag reversed in Z80 for CP)
 470++F2D0              LL131_6502:         FlipCarryFlag                   ;flip carry to make it act like a 6502 borrow
 470++F2D0 3F          >                        ccf
 471++F2D1 9E                               sbc     (hl)                    ;SBC Q                  \ A >= Q (i.e. S >= Q) so set:
 472++F2D2 32 B8 F1                         ld      (Svar),a                ;STA S
 473++F2D5 3A B7 F1                         ld      a,(Rvar)                ;LDA R                  \ And then doing the high bytes
 474++F2D8                                  ClearCarryFlag                  ;\   S = (A R) - Q  = (S R) - Q starting with the low bytes (we know the C flag is set so the subtraction will be correct)
 474++F2D8 B7          >                        or a
 475++F2D9 DE 00                            sbc     0                       ;SBC #0
 476++F2DB 32 B7 F1                         ld      (Rvar),a                ;STA R
 477++F2DE                                  SetCarryFlag                    ;SEC                    \ Set the C flag to rotate into the result in (Y X)
 477++F2DE 37          >                        scf
 478++F2DF C3 E3 F2                         jp      LL132_6502              ;added so that we can do a 6502 style carry above
 479++F2E2 00           LL132A_6502:        nop; FlipCarryFlag
 480++F2E3 ED 4B B9 F1  LL132_6502:         ld      bc,(YXregPair)          ; Rotate the counter in (Y X) to the left, and catch the
 481++F2E7                                  RollBCLeft1                     ; ROL A                  \ result bit into bit 0 (which will be a 0 if we didn't
 481++F2E7 CB 11       >               rl  c
 481++F2E9 CB 10       >               rl  b
 482++F2EB ED 43 B9 F1                      ld      (YXregPair),bc          ; TAX                    \ do the subtraction, or 1 if we did)
 483++F2EF 38 C7                            jr      c, LL130_6502           ; BCS LL130              \ If we still have set bits in (Y X), loop back to LL130 to do the next iteration of 15, until we have done the whole division
 484++F2F1                          IFDEF DEBUG_LL121_DIRECT
 485++F2F1 ~                                DISPLAY "DIRECT CALL TO LL121 so dummy push"
 486++F2F1 ~                                push    af
 487++F2F1                          ENDIF
 488++F2F1 F1                               pop     af                      ; PLA                    \ Restore A, which we calculated above, from the stack
 489++F2F2 A7                               and     a                       ; BMI LL128              \ If A is negative jump to LL128 to return from the
 490++F2F3 FA 04 F3                         jp      m, LL128_6502           ; .                      \ subroutine with (Y X) as is
 491++F2F6 ED 4B B9 F1  LL133_6502:         ld      bc,(YXregPair)          ; TXA                    \ Otherwise negate (Y X) using two's complement by first
 492++F2FA                                  macronegate16bc                 ; EOR #%11111111         \ setting the low byte to ~X + 1
 492++F2FA AF          >					xor 	a
 492++F2FB 91          >                    sub 	c
 492++F2FC 4F          >                    ld 		c,a
 492++F2FD 9F          >                    sbc 	a,a
 492++F2FE 90          >                    sub 	b
 492++F2FF 47          >                    ld 		b,a
 493++F300 ED 43 B9 F1                      ld      (YXregPair),bc          ; ADC #1                 \ The addition works as we know the C flag is clear from\ when we passed through the BCS above
 494++F304 C9           LL128_6502:         ret                             ; RTS                    \ Return from the subroutine
 495++F305              ;-------------------------------------------------------------------------------------------------------
 496++F305              ;..  Do the following, in this order: Q = XX12+2 A = S EOR XX12+3 (S R) = |S R|
 497++F305              ;..  This sets up the variables required above to calculate (S R) / XX12+2 and give the result the opposite sign to XX13+3.
 498++F305 F5           LL129_6502:         push    af                      ;LDX XX12+2             \ Set Q = XX12+2
 499++F306 3A B1 F1                         ld      a,(XX12p2)              ;.
 500++F309 32 B9 F1                         ld      (Xreg),a                ;.
 501++F30C 32 B6 F1                         ld      (Qvar),a                ;STX Q
 502++F30F F1                               pop     af                      ;.
 503++F310 3A B8 F1                         ld      a,(Svar)                ;LDA S                  \ If S is positive, jump to LL127
 504++F313 A7                               and     a                       ;BPL LL127
 505++F314 F2 2C F3                         jp      p,LL127_6502            ;.
 506++F317                                  ZeroA                           ;.LDA #0                \ Otherwise set R = -R
 506++F317 AF          >                        xor a
 507++F318                                  ClearCarryFlag                  ;SEC
 507++F318 B7          >                        or a
 508++F319 21 B7 F1                         ld      hl, Rvar                ;SBC R
 509++F31C 9E                               sbc     (hl)                    ;.
 510++F31D 32 B7 F1                         ld      (Rvar),a                ;STA R
 511++F320 3A B8 F1                         ld      a,(Svar)                ;LDA S                  \ Push S onto the stack
 512++F323 F5                               push    af                      ;PHA
 513++F324 EE FF                            xor     $FF                     ;EOR #%11111111         \ Set S = ~S + 1 + C  ?? is this all just doing |Svar|?
 514++F326 CE 00                            adc     0                       ;ADC #0
 515++F328 32 B8 F1                         ld      (Svar),a                ;STA S
 516++F32B F1                               pop     af                      ;PLA                    \ Pull the original, negative S from the stack into A
 517++F32C 21 B2 F1     LL127_6502:         ld      hl,XX12p3               ;EOR XX12+3             \ Set A = original argument S EOR'd with XX12+3
 518++F32F AE                               xor     (hl)                    ;.
 519++F330 C9                               ret                             ;RTS                    \ Return from the subroutine
 520++F331              ;----------------------------------------------------------------------------------------------------------------
 521++F331              ;--- LL118 Move along a point until on screen
 522++F331              ; In XX1510 x1 as a 16-bit coordinate (x1_hi x1_lo)
 523++F331              ;    XX1532 y1 as a 16-bit coordinate (y1_hi y1_lo)
 524++F331              ;    XX12p2 The line's gradient * 256 (so 1.0 = 256)
 525++F331              ;    XX12p3 The direction of slope: * Positive = top left to bottom right * Negative (bit 7 set) = top right to bottom left
 526++F331              ;    T      The gradient of slope:* 0 if it's a shallow slope * &FF if it's a steep slope
 527++F331              ;  Out  XX150               x1 as an 8-bit coordinate
 528++F331              ;       XX152               y1 as an 8-bit coordinate
 529++F331              ;----------------------------------------------------------------------------------------------------------------
 530++F331
 531++F331 3A AA F1     LL118_6502:         ld      a,(XX1510+1)            ; LDA XX15+1             \ If x1_hi is positive, jump down to LL119 to skip the
 532++F334 A7                               and     a                       ; BPL LL119              \ .
 533++F335 F2 52 F3                         jp      p, LL119_6502           ;                        \ following
 534++F338 32 B8 F1     .X1Negative:        ld      (Svar),a                ; STA S                  \ Otherwise x1_hi is negative, i.e. off the left of the screen, so set S = x1_hi
 535++F33B CD 53 F2                         call    LL120_6502              ; Call LL120 to calculate:  (Y X) = (S x1_lo) * XX12+2      if T = 0   = x1 * gradient
 536++F33E                                                                  ;                            (Y X) = (S x1_lo) / XX12+2      if T <> 0  = x1 / gradient
 537++F33E                                                                  ; with the sign of (Y X) set to the opposite of the line's direction of slope
 538++F33E CD 00 F2                         call    ADDYXRegtoY1             ; Set y1 = y1 + (Y X)
 539++F341 22 AB F1                         ld      (XX1532),hl             ; .
 540++F344 21 00 00                         ld      hl,0                    ; Set x1 = 0
 541++F347 22 A9 F1                         ld      (XX1510),hl             ; .
 542++F34A 3E 00                            ld      a,0                     ; set 0 up for replacemetn of the TAX and BEQ bit
 543++F34C 32 B9 F1                         ld      (Xreg),a                ; TAX                    \ Set X = 0 so the next BEQ becomes a jmp but we will do it anyway in next line
 544++F34F C3 68 F3                         jp      LL134_6502              ; just do the jump to LL134 rather than setting to equal flag and then jumping
 545++F352              ;-- Entering LL119 a will always be the value of X1 Hi byte
 546++F352 CA 68 F3     LL119_6502:         jp      z,LL134_6502            ; BEQ LL134              \ x1_hi = 0 then jump down to LL134 to skip the following, as the x-coordinate is already on-screen
 547++F355                                                                  ;                        \ (as 0 <= (x_hi x_lo) <= 255)
 548++F355 32 B8 F1                         ld      (Svar),a                ; STA S                  \ Otherwise x1_hi is positive, i.e. x1 >= 256 and off
 549++F358 3D                               dec     a                       ; DEC S                  \ the right side of the screen, so set S = x1_hi - 1
 550++F359 32 B8 F1                         ld      (Svar),a                ;
 551++F35C CD 53 F2                         call    LL120_6502              ; JSR LL120              \ Call LL120 to calculate:  (Y X) = (S x1_lo) * XX12+2      if T = 0   = (x1 - 256) * gradient
 552++F35F                                                                  ;                        \                           (Y X) = (S x1_lo) / XX12+2      if T <> 0 = (x1 - 256) / gradient
 553++F35F                                                                  ;                        \ with the sign of (Y X) set to the opposite of the line's direction of slope
 554++F35F CD 00 F2                         call    ADDYXRegtoY1             ; TXA                    \ Set y1 = y1 + (Y X)
 555++F362 21 FF 00                         ld      hl,255                  ; LDX #255               \ Set x1 = 255
 556++F365 22 A9 F1                         ld      (XX1510),hl             ; STX XX15 ;INX; STX XX15+1
 557++F368              ;--  We have moved the point so the x-coordinate is on  screen (i.e. in the range 0-255), so now for the  y-coordinate
 558++F368 3A AC F1     LL134_6502:         ld      a,(XX1532+1)            ; LDA XX15+3             \ If y1_hi is positive, jump down to LL119 to skip
 559++F36B A7                               and     a                       ; BPL LL135              \ the following
 560++F36C F2 84 F3                         jp      p, LL135_6502           ; .
 561++F36F 32 B8 F1                         ld      (Svar),a                ; STA S                  \ Otherwise y1_hi is negative, i.e. off the top of the screen, so set S = y1_hi
 562++F372 3A AB F1                         ld      a, (XX1532)             ; LDA XX15+2             \ Set R = y1_lo
 563++F375 32 B7 F1                         ld      (Rvar),a                ; STA R
 564++F378 CD A1 F2                         call    LL123_6502              ; JSR LL123              \ Call LL123 to calculate:  (Y X) = (S R) / XX12+2      if T = 0 = y1 / gradient
 565++F37B                                                                  ;                        \                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 566++F37B                                                                  ;                         with the sign of (Y X) set to the opposite of the line's direction of slope
 567++F37B CD 0E F2                         call    ADDYXRegtoX1            ; TXA                    \ Set x1 = x1 + (Y X)
 568++F37E 21 00 00                         ld      hl,0                    ; LDA #0                 \ Set y1 = 0
 569++F381 22 AB F1                         ld      (XX1532),hl             ; STA XX15+2, XX15+3
 570++F384 01 80 00     LL135_6502:         ld      bc,128                  ; LDA XX15+2             \ Set (S R) = (y1_hi y1_lo) - screen height
 571++F387 CD 1C F2                         call    SUBBCFromY1             ; .                      \ .
 572++F38A 38 0C                            jr      c, LL136_6502           ; BCC LL136              \ If the subtraction underflowed, i.e. if y1 < screen height, then y1 is already on-screen, so jump to LL136
 573++F38C                                                                  ;                        \ to return from the subroutine, as we are done
 574++F38C              ;;-   If we get here then y1 >= screen height, i.e. off the bottom of the screen
 575++F38C CD A1 F2     LL139_6502:         call    LL123_6502              ; JSR LL123              \ Call LL123 to calculate:   (Y X) = (S R) / XX12+2      if T = 0  = (y1 - screen height) / gradient
 576++F38F                                                                  ;                        \                            (Y X) = (S R) * XX12+2      if T <> 0 = (y1 - screen height) * gradient
 577++F38F                                                                  ;                          with the sign of (Y X) set to the opposite of the line's direction of slope
 578++F38F CD 0E F2                         call    ADDYXRegtoX1            ; TXA                    \ Set x1 = x1 + (Y X)
 579++F392 21 7F 00                         ld      hl, 127                 ; LDA #Y*2-1             \ Set y1 = 2 * #Y - 1. The constant #Y is 96, the y-coordinate of the mid-point of the space view (or in our case 127)
 580++F395 22 AB F1                         ld      (XX1532),hl             ; STA XX15+3             \ pixel row of the space view
 581++F398 C9           LL136_6502:         ret                             ; RTS                    \ Return from the subroutine
 582++F399              ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 583++F399              ;-- LL145 LINE CLIP
 584++F399              ;-- OPTISIATIONS - VERTICAL HORZONTAL POINT |DX| = |DY| (and all the veriants for +/-)
 585++F399              ;-- This routine clips the line from (x1, y1) to (x2, y2) so it fits on-screen, or returns an error if it can't be clipped to fit. The arguments are 16-bit coordinates, and the clipped line is returned using 8-bit screen coordinates.
 586++F399              ;-- This part sets XX13 to reflect which of the two points are on-screen and off-screen.
 587++F399              ;-- IN  : XX15(1 0) x1 XX15(3 2) y1 XX15(5 4) x2 XX12(1 0) y2
 588++F399              ;-- OUT : (X1, Y1), (X2, Y2) Screen coordinate C flag  Clear if the clipped line fits on-screen, set if itdoesn't
 589++F399              ;         XX13 The state of the original coordinates on-screen:* 0   = (x2, y2) on-screen* 95(64)  = (x1, y1) on-screen,  (x2, y2) off-screen* 191(128) = (x1, y1) off-screen, (x2, y2) off-screen
 590++F399              ;              So XX13 is non-zero if the end of the line was clipped,meaning the next line sent to BLINE can't join onto the end but has to start a new segment
 591++F399              ;         SWAP The swap status of the returned coordinates:* &FF if we swapped the values of (x1, y1) and(x2, y2) as part of the clipping process* 0 if the coordinates are still in the same order
 592++F399                                  DISPLAY "TODO: treat horz vert and sigle pixel as special cases"
 593++F399              ; TODO treat horizonal/vert and single pixel as special cases
 594++F399              LL145_6502:         ZeroA                           ; LDA #0                 \ Set SWAP = 0
 594++F399 AF          >                        xor a
 595++F39A 32 EB C9                         ld      (SWAP),a                ; STA SWAP
 596++F39D 3A AE F1                         ld      a,(XX1554+1)            ; LDA XX15+5             \ Set A = x2_hi (use b as a substibute for a)
 597++F3A0 47                               ld      b,a                     ; .
 598++F3A1              ; Note that as we are interested in the sign of XX113 then this needs to be >= 128 or < 128 or 0, we will use 191 as per bbc for now
 599++F3A1              ; for the screen coord we will use 127 though, we use c as a temporay X register
 600++F3A1 3E BF        LL147_6502:         ld      a,191                   ; LDX #Y*2-1             \ Set X = #Y * 2 - 1. The constant #Y is 96, the y-coordinate of the mid-point of the space view, so this sets Y2 to 191, the y-coordinate of the bottom pixel row of the space view
 601++F3A3 32 B9 F1                         ld      (Xreg),a                ; .
 602++F3A6              ;                    ld      a,127
 603++F3A6              ;                    ld      c,a
 604++F3A6 78           .CheckX2Y2High:     ld      a,b                     ; ORA XX12+1             \ If one or both of x2_hi and y2_hi are non-zero, jump
 605++F3A7 21 B0 F1                         ld      hl,XX12p1               ; .
 606++F3AA B6                               or      (hl)                    ; .
 607++F3AB C2 BB F3                         jp      nz,LL107_6502           ; BNE LL107              \ to LL107 to skip the following, leaving X at 191
 608++F3AE 3E 7F        .CheckY2Lo:         ld      a,127 ;,c               ; get back the temporary x reg from c
 609++F3B0 21 AF F1                         ld      hl,XX1210               ; CPX XX12               \ If y2_lo > the y-coordinate of the bottom of screen (a is being used as X at this point still)
 610++F3B3 BE                               cp      (hl)                    ; .
 611++F3B4 DA BB F3                         jp      c,LL107_6502            ; BCC LL107              \ then (x2, y2) is off the bottom of the screen, so skip the following instruction, leaving X at 127
 612++F3B7                                  ZeroA                           ; LDX #0                 \ Set X = 0
 612++F3B7 AF          >                        xor a
 613++F3B8 32 B9 F1                         ld      (Xreg),a
 614++F3BB 3A B9 F1     LL107_6502:         ld      a,(Xreg)                ; STX XX13               \ Set XX13 = X, so we have * XX13 = 0 if x2_hi = y2_hi = 0, y2_lo is on-screen* XX13 = 191 if x2_hi or y2_hi are non-zero or y2_lois off the bottom of the screen
 615++F3BE 32 80 7F                         ld      (XX13),a                ; now c is released as a temporary x reg
 616++F3C1 3A AA F1                         ld      a,(XX1510+1)            ; LDA XX15+1             \ If one or both of x1_hi and y1_hi are non-zero, jump
 617++F3C4 21 AC F1                         ld      hl,XX1532+1             ; ORA XX15+3             \ to LL83
 618++F3C7 B6                               or      (hl)                    ; .
 619++F3C8 C2 08 F4                         jp      nz,LL83_6502            ; BNE LL83
 620++F3CB              ; DEBUG SIMPLIFIED CODE, now we just compare y1 lo > 127
 621++F3CB 3A AB F1                         ld      a,(XX1532)              ; If y1_lo > the y-coordinate of the bottom of screen (If A >= N, then C flag is reset.) ;ld      a,127                   ; LDA #Y*2-1             \ If y1_lo > the y-coordinate of the bottom of screen (If A >= N, then C flag is reset.)
 622++F3CE 26 7F                            ld      h,127                   ; then (x1, y1) is off the bottom of the screen, so jump                                 ;ld      hl,XX1532               ; CMP XX15+2             \ then (x1, y1) is off the bottom of the screen, so jump
 623++F3D0 BC                               cp      h                       ; to LL83                                                                                ;cp      (hl)                    ; .                      \ to LL83
 624++F3D1 D2 08 F4                         jp      nc, LL83_6502         ; BCC LL83               \ . (y1 > 127 jump, i.e. 127 <= y1 )
 625++F3D4 3A 80 7F                         ld      a,(XX13)                ; LDA XX13               \ If we get here, (x1, y1) is on-screen. If XX13 is non-zero, i.e. (x2, y2) is off-screen, jump
 626++F3D7 A7                               and     a                       ; BNE LL108              \ to LL108 to halve it before continuing at LL83
 627++F3D8 C2 03 F4                         jp      nz,LL108_6502
 628++F3DB              ; If we get here, the high bytes are all zero, which means the x-coordinates are < 256 and therefore fit on screen, and neither coordinate is off the bottom of the screen. That means both coordinates are already on
 629++F3DB              ; screen, so we don't need to do any clipping, all weneed to do is move the low bytes into (X1, Y1) and X2, Y2) and return
 630++F3DB              ; X1 = XX15 (10)  Y1 = XX15+1 X2 = XX15+2 Y2 = XX15+3
 631++F3DB                  DEFINE CLAMPINGEXTREMES
 632++F3DB              LL146_6502: IFDEF CLAMPINGEXTREMES
 633++F3DB 2A A9 F1                         ld      hl,(XX1510)             ;  Save X1 to XX1510
 634++F3DE CD 34 F2                         call    ClampX
 635++F3E1 32 A9 F1                         ld      (XX1510),a
 636++F3E4                          ENDIF
 637++F3E4 2A AB F1                         ld      hl,(XX1532)             ;  hl = y1
 638++F3E7 CD 40 F2                         call    ClampY
 639++F3EA 32 AA F1                         ld      (XX1510+1),a            ;  XX1510... = [X1][Y1]
 640++F3ED
 641++F3ED 2A AD F1                         ld      hl,(XX1554)             ;  de = x2
 642++F3F0 CD 34 F2                         call    ClampX
 643++F3F3 32 AB F1                         ld      (XX1510+2),a            ;  XX1510... = [X1][Y1][X2]
 644++F3F6
 645++F3F6 2A AF F1                         ld      hl,(XX1576)             ;  bc = y2
 646++F3F9 CD 40 F2                         call    ClampY
 647++F3FC 32 AC F1                         ld      (XX1510+3),a            ;  XX1510... = [X1][Y1][X2][Y2]
 648++F3FF
 649++F3FF                                  ClearCarryFlag                  ; CLC                    \ Clear the C flag as the clipped line fits on-screen
 649++F3FF B7          >                        or a
 650++F400 C9                               ret                             ; RTS                    \ Return from the subroutine
 651++F401              LL109_6502:         SetCarryFlag                    ; SEC                    \ Set the C flag to indicate the clipped line does not fit on-screen
 651++F401 37          >                        scf
 652++F402 C9                               ret                             ; RTS                    \ Return from the subroutine
 653++F403 21 80 7F     LL108_6502:         ld      hl,XX13                 ; LSR XX13               \ If we get here then (x2, y2) is off-screen and XX13 is
 654++F406 CB 3E                            srl     (hl)                    ;                        \ 191, (128)  so shift XX13 right to halve it to 95 (64)
 655++F408              ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 656++F408              ;-- LL145 (Part 2 of 4)
 657++F408 3A 80 7F     LL83_6502:          ld      a,(XX13)                ; LDA XX13               \ If XX13 < 128 then only one of the points is on-screen
 658++F40B A7                               and     a                       ; BPL LL115              \ so jump down to LL115 to skip the checks of whether
 659++F40C F2 58 F4                         jp      p,LL115_6502            ;                        \ both points are in the strips to the right or bottom of the screen
 660++F40F              ;-- If we get here, both points are off-screen
 661++F40F 3A AA F1                         ld      a,(XX1510+1)            ; LDA XX15+1             \ If both x1_hi and x2_hi have bit 7 set, jump to LL109
 662++F412 21 AE F1                         ld      hl,XX1554+1             ; AND XX15+5             \ to return from the subroutine with the C flag set, as
 663++F415 A6                               and     (hl)
 664++F416 FA 01 F4                         jp      m, LL109_6502           ; BMI LL109              \ the entire line is above the top of the screen
 665++F419 3A AC F1                         ld      a,(XX1532+1)            ; LDA XX15+3             \ If both y1_hi and y2_hi have bit 7 set, jump to LL109
 666++F41C 21 B0 F1                         ld      hl,XX1576+1             ; AND XX12+1             \ to return from the subroutine with the C flag set, as
 667++F41F A6                               and     (hl)                    ; BMI LL109              \ the entire line is to the left of the screen
 668++F420 FA 01 F4                         jp      m,LL109_6502            ; .
 669++F423 3A AA F1                         ld      a,(XX1510+1)            ; LDX XX15+1             \ Set A = X = x1_hi - 1
 670++F426 3D                               dec     a                       ; DEX
 671++F427 32 B9 F1                         ld      (Xreg),a                ; TXA
 672++F42A F5                               push    af                      ; LDX XX15+5     SP+1    \ Set XX12+2 = x2_hi - 1, we need to save a register first
 673++F42B 3A AE F1                         ld      a,(XX1554+1)            ; .
 674++F42E 3D                               dec     a                       ; DEX
 675++F42F 32 B9 F1                         ld      (Xreg),a                ; STX XX12+2
 676++F432 F1                               pop     af                      ; .              SP+0    restore a register
 677++F433 21 B0 F1                         ld      hl,XX1576+1             ; ORA XX12+2             \ If neither (x1_hi - 1) or (x2_hi - 1) have bit 7 set,
 678++F436 B6                               or      (hl)                    ; .
 679++F437 F2 01 F4                         jp      p, LL109_6502           ; BPL LL109              \ jump to LL109 to return from the subroutine with the C flag set, as the line doesn't fit on-screen
 680++F43A              ; for this bit, while z80 uses carry the opposite way to 6502, 6502 uses borrow, in effect inverting the flip
 681++F43A              ;NOTEFOUND A PATH WHERE IT DOES NOT DO THIS CHECK e.g. 90 B2 8D A2
 682++F43A 3A AB F1     LL83_DEBUG:         ld      a,(XX1532)              ; LDA XX15+2             \ If y1_lo < y-coordinate of screen bottom, clear the C
 683++F43D FE 80                            cp      128                     ; CMP #Y*2               \ flag, otherwise set it (NOTE FLIPPED IN z80)
 684++F43F 3A AC F1                         ld      a,(XX1532+1)            ; LDA XX15+3             \ Set XX12+2 = y1_hi - (1 - C), so:
 685++F442              ;                    FlipCarryFlag                   ; as 6502 uses borrow in subtracts we flip for SBC as z80 CP does opposite too, if A < N carry set so flip
 686++F442 DE 00                            sbc     0                       ; SBC #0                 \ .
 687++F444 32 B1 F1                         ld      (XX12p2),a              ; STA XX12+2             \  * Set XX12+2 = y1_hi - 1 if y1_lo is on-screen * Set XX12+2 = y1_hi  otherwise We do this subtraction because we are only interested
 688++F447 3A AF F1                         ld      a,(XX1576)              ; LDA XX12               \ If y2_lo < y-coordinate of screen bottom, clear the C
 689++F44A FE 80                            cp      128                     ; CMP #Y*2               \ flag, otherwise set it
 690++F44C 3A B0 F1                         ld      a,(XX1576+1)            ; LDA XX12+1             \ Set XX12+2 = y2_hi - (1 - C), so:
 691++F44F              ;                    FlipCarryFlag
 692++F44F DE 00                            sbc     0                       ; SBC #0                   * Set XX12+1 = y2_hi - 1 if y2_lo is on-screen  * Set XX12+1 = y2_hi     otherwise
 693++F451 21 B1 F1                         ld      hl,XX12p2               ; ORA XX12+2             \ If neither XX12+1 or XX12+2 have bit 7 set, jump to
 694++F454 B6                               or      (hl)                    ; .
 695++F455 F2 01 F4                         jp      p,LL109_6502            ; BPL LL109              \ LL109 to return from the subroutine with the C flag set, as the line doesn't fit on-screen
 696++F458              ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 697++F458              ;-- LL145 (Part 3 of 4) Summary: Clip line: Calculate the line's gradient
 698++F458 3A BA F1     LL115_6502:         ld      a,(Yreg)                ; TYA                    \ Store Y on the stack so we can preserve it through the call to this routine
 699++F45B F5                               push    af                      ; PHA            SP+1    \ call to this subroutine
 700++F45C 2A AD F1                         ld      hl,(XX1554)             ; LDA XX15+4             \ Set XX12+2 = x2_lo - x1_lo
 701++F45F ED 5B A9 F1                      ld      de,(XX1510)             ; LDA XX15+5             \ Set XX12+3 = x2_hi - x1_hi
 702++F463                                  ClearCarryFlag                  ; SBC XX15+1
 702++F463 B7          >                        or a
 703++F464 ED 52                            sbc     hl,de                   ; .
 704++F466 22 02 F6                         ld      (delta_x),hl            ; .
 705++F469 2A AF F1                         ld      hl,(XX1576)             ; LDA XX12               \ Set XX12+4 = y2_lo - y1_lo
 706++F46C ED 5B AB F1                      ld      de,(XX1532)             ;
 707++F470                                  ClearCarryFlag                  ; SBC XX15+2
 707++F470 B7          >                        or a
 708++F471 ED 52                            sbc     hl,de                   ; .
 709++F473 22 04 F6                         ld      (delta_y),hl            ; .
 710++F476              ; So we now have:  delta_x in XX12(3 2)  delta_y in XX12(5 4) where the delta is (x1, y1) - (x2, y2))
 711++F476 3A 05 F6                         ld      a,(delta_y+1)           ; EOR XX12+3             \ Set S = the sign of delta_x * the sign of delta_y, so
 712++F479 21 03 F6                         ld      hl,delta_x+1
 713++F47C AE                               xor     (hl)
 714++F47D 32 B8 F1                         ld      (Svar),a                ; STA S                  \ if bit 7 of S is set, the deltas have different signs (perhaps we should do bit 7 mask ?????????
 715++F480 2A 04 F6                         ld      hl,(delta_y)            ; LDA XX12+5             \ If delta_y_hi is positive, jump down to LL110 to skip
 716++F483 7C                               ld      a,h
 717++F484 A7                               and     a
 718++F485 F2 91 F4                         jp      p, LL110_6502           ; BPL LL110              \ the following
 719++F488                                  NegHL                           ; LDA #0                 \ Otherwise flip the sign of delta_y to make it
 719++F488 AF          >                    xor a
 719++F489 95          >                    sub l
 719++F48A 6F          >                    ld l,a
 719++F48B 9F          >                    sbc a,a
 719++F48C 94          >                    sub h
 719++F48D 67          >                    ld h,a
 720++F48E 22 04 F6                         ld      (delta_y),hl            ; positive, starting with the low bytes
 721++F491 2A 02 F6     LL110_6502:         ld      hl,(delta_x)            ; LDA XX12+3             \ If delta_x_hi is positive, jump down to LL111 to skip
 722++F494 7C                               ld      a,h                     ; BPL LL111              \ the following
 723++F495 A7                               and     a                       ; .
 724++F496 F2 A2 F4                         jp      p,LL111_6502            ; .
 725++F499                                  NegHL                           ; SEC                    \ Otherwise flip the sign of delta_x to make it
 725++F499 AF          >                    xor a
 725++F49A 95          >                    sub l
 725++F49B 6F          >                    ld l,a
 725++F49C 9F          >                    sbc a,a
 725++F49D 94          >                    sub h
 725++F49E 67          >                    ld h,a
 726++F49F 22 02 F6                         ld      (delta_x),hl            ; LDA #0                 \ positive, starting with the low bytes
 727++F4A2              ;--  We now keep halving |delta_x| and |delta_y| until both of them have zero in their high bytes
 728++F4A2 2A 02 F6     LL111_6502:         ld      hl,(delta_x)
 729++F4A5 ED 5B 04 F6                      ld      de,(delta_y)
 730++F4A9 7C                               ld      a,h                     ; TAX                    \ If |delta_x_hi| is non-zero, skip the following
 731++F4AA B2                               or      d                       ; BNE LL112
 732++F4AB CA C0 F4                         jp      z,LL113_6502            ; LDX XX12+5             \ If |delta_y_hi| = 0, jump down to LL113 (as both |delta_x_hi| and |delta_y_hi| are 0)
 733++F4AE              LL112_6502:         ShiftHLRight1                   ; LSR A                  \ Halve the value of delta_x in (A XX12+2)
 733++F4AE CB 3C       >			   srl h
 733++F4B0 CB 1D       >			   rr  l
 734++F4B2                                  ShiftDERight1                   ; LSR XX12+5             \ Halve the value of delta_y XX12(5 4)
 734++F4B2 CB 3A       >			   srl d
 734++F4B4 CB 1B       >			   rr  e
 735++F4B6 22 02 F6                         ld      (delta_x),hl
 736++F4B9 ED 53 04 F6                      ld      (delta_y),de            ; write them back so we don't end up in an infinite loop
 737++F4BD C3 A2 F4                         jp  LL111_6502                  ; JMP LL111              \ Loop back to LL111
 738++F4C0              ;-- By now, the high bytes of both |delta_x| and |delta_y| are zero
 739++F4C0              LL113_6502:         ZeroA                           ; STX T                  \ We know that X = 0 as that's what we tested with a BEQ  above, so this sets T = 0
 739++F4C0 AF          >                        xor a
 740++F4C1 32 B5 F1                         ld  (Tvar),a
 741++F4C4 3A 02 F6                         ld      a,(delta_x)             ; LDA XX12+2             \ If delta_x_lo < delta_y_lo, so our line is more
 742++F4C7 21 04 F6                         ld      hl,delta_y              ; CMP XX12+4             \ vertical than horizontal, jump to LL114
 743++F4CA BE                               cp      (hl)
 744++F4CB DA DD F4                         jp      c, LL114_6502           ; BCC LL114              ; if delta y > delta x then its a steep slope so we do 256*dy/dx
 745++F4CE              ;-- If we get here then our line is more horizontal than vertical, so it is a shallow slope
 746++F4CE 3A 02 F6                         ld      a,(delta_x)             ; STA Q                  \ Set Q = delta_x_lo
 747++F4D1 32 B6 F1                         ld      (Qvar),a                ; .
 748++F4D4 3A 04 F6                         ld      a,(delta_y)             ; LDA XX12+4             \ Set A = delta_y_lo
 749++F4D7 CD BB F1                         call    LL28_6502               ; JSR LL28               \ Call LL28 to calculate: R = 256 * A / Q = 256 * delta_y_lo / delta_x_lo
 750++F4DA C3 EE F4                         jp      LL116_6502              ; JMP LL116              \ Jump to LL116, as we now have the line's gradient in R
 751++F4DD              ;-- If we get here then our line is more vertical than horizontal, so it is a steep slope
 752++F4DD 3A 04 F6     LL114_6502:         ld      a,(delta_y)             ; LDA XX12+4             \ Set Q = delta_y_lo
 753++F4E0 32 B6 F1                         ld      (Qvar),a                ; STA Q
 754++F4E3 3A 02 F6                         ld      a,(delta_x)             ; LDA XX12+2             \ Set A = delta_x_lo
 755++F4E6 CD BB F1                         call    LL28_6502               ; JSR LL28               \ Call LL28 to calculate: R = 256 * A / Q = 256 * delta_x_lo / delta_y_lo
 756++F4E9 3E FF                            ld      a,$FF                   ; DEC T                  \ T was set to 0 above, so this sets T = &FF when our
 757++F4EB 32 B5 F1                         ld      (Tvar),a                ;                        \ line is steep
 758++F4EE              ;----------------------------------------------------------------------------------------------------------------
 759++F4EE              ;--- LL116 This part sets things up to call the routine in LL188, which does the actual clipping.
 760++F4EE              ;--  If we get here, then R has been set to the gradient of the line (x1, y1) to(x2, y2), with T indicating the gradient of slope: * 0   = shallow slope (more horizontal than vertical)
 761++F4EE              ;--                                                                                                                                * &FF = steep slope (more vertical than horizontal)
 762++F4EE              ;-- XX13 has been set as follows: * 0   = (x1, y1) off-screen, (x2, y2) on-screen * 95(64)  = (x1, y1) on-screen,  (x2, y2) off-screen * 191(128) = (x1, y1) off-screen, (x2, y2) off-screen
 763++F4EE 3A B7 F1     LL116_6502:         ld      a,(Rvar)                ; LDA R                  \ Store the gradient in XX12+2
 764++F4F1 32 B1 F1                         ld      (XX12p2),a              ; STA XX12+2
 765++F4F4 3A B8 F1                         ld      a,(Svar)                ; LDA S                  \ Store the type of slope in XX12+3, bit 7 clear means
 766++F4F7 32 B2 F1                         ld      (XX12p3),a              ; STA XX12+3             \ top left to bottom right, bit 7 set means top right to bottom left
 767++F4FA 3A 80 7F                         ld      a,(XX13)                ; LDA XX13               \ If XX13 = 0, skip the following instruction
 768++F4FD FE 00                            cp      0                       ; BEQ LL138
 769++F4FF CA 05 F5                         jp      z,LL138_6502            ; .
 770++F502 F2 21 F5                         jp      p, LLX117_6502          ; If XX13 is positive, it must be 95 (64) as 128 would be negative). This means (x1, y1) is on-screen but (x2, y2) isn't, so we jump
 771++F505              ;-- If we get here, XX13 = 0 or 191, so (x1, y1) is off-screen and needs clipping
 772++F505 CD 31 F3     LL138_6502:         call    LL118_6502              ; JSR LL118              \ Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 773++F508 3A 80 7F                         ld      a,(XX13)                ; LDA XX13               \ If XX13 = 0, i.e. (x2, y2) is on-screen, jump down to
 774++F50B A7                               and     a
 775++F50C F2 44 F5                         jp      p,LL124_6502            ; BPL LL124              \ LL124 to return with a successfully clipped line
 776++F50F              ;-- If we get here, XX13 = 191 (128) (both coordinates areoff-screen)
 777++F50F 3A AA F1     LL117_6502:         ld      a,(XX1510+1)            ; LDA XX15+1             \ If either of x1_hi or y1_hi are non-zero, jump to
 778++F512 21 AC F1                         ld      hl,XX1532+1             ; ORA XX15+3             \ LL137 to return from the subroutine with the C flag
 779++F515 B6                               or      (hl)
 780++F516 C2 4C F5                         jp      nz, LL137_6502          ; BNE LL137              \ set, as the line doesn't fit on-screen
 781++F519 3A AB F1                         ld      a,(XX1532)              ; LDA XX15+2             \ If y1_lo > y-coordinate of the bottom of the screen
 782++F51C FE 80                            cp      128                     ; CMP #Y*2               \ jump to LL137 to return from the subroutine with the
 783++F51E D2 4C F5                         jp      nc, LL137_6502          ; BCS LL137              \ C flag set, as the line doesn't fit on-screen
 784++F521              ;-- If we get here, XX13 = 95 or 191, and in both cases (x2, y2) is off-screen, so we now need to swap the (x1, y1) and (x2, y2) coordinates around before doing the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 785++F521 2A A9 F1     LLX117_6502:        ld      hl,(XX1510)             ; LDX XX15               \ Swap x1_lo = x2_lo
 786++F524 ED 5B AD F1                      ld      de,(XX1554)
 787++F528 ED 53 A9 F1                      ld      (XX1510),de
 788++F52C 22 AD F1                         ld      (XX1554),hl
 789++F52F 2A AB F1                         ld      hl,(XX1532)             ; LDX XX15+2             \ Swap y1_lo = y2_lo
 790++F532 ED 5B AF F1                      ld      de,(XX1576)
 791++F536 ED 53 AB F1                      ld      (XX1532),de
 792++F53A 22 AF F1                         ld      (XX1576),hl
 793++F53D CD 31 F3                         call    LL118_6502              ; JSR LL118              \ Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 794++F540 21 EB C9                         ld      hl,SWAP
 795++F543 35                               dec     (hl)                    ; DEC SWAP               \ Set SWAP = &FF to indicate that we just clipped the line at the (x2, y2) end by swapping the coordinates (the DEC does this as we set SWAP to 0 at the start of this subroutine)
 796++F544 F1           LL124_6502:         pop     af                      ; PLA            SP+0    \ Restore Y from the stack so it gets preserved through
 797++F545 32 BA F1                         ld      (Yreg),a                ; TAY                    \ the call to this subroutine
 798++F548 CD DB F3                         call    LL146_6502              ; JMP LL146              \ Jump up to LL146 to move the low bytes of (x1, y1) and (x2, y2) into (X1, Y1) and (X2, Y2), and return from the subroutine with a successfully clipped line
 799++F54B C9                               ret                             ; then exit so we don't pop it twice
 800++F54C F1           LL137_6502:         pop     af                      ; PLA            SP+0    \ Restore Y from the stack so it gets preserved through
 801++F54D 32 BA F1                         ld      (Yreg),a                ; TAY                    \ the call to this subroutine
 802++F550                                  SetCarryFlag                    ; SEC                    \ Set the C flag to indicate the clipped line does not fit on-screen
 802++F550 37          >                        scf
 803++F551 C9                               ret                             ; RTS                    \ Return from the subroutine
 804++F552                      ENDIF
# file closed: ././Layer2Graphics/BBCEliteDirectMappingLL118.asm
   9+ F552
  10+ F552                      IFDEF Add_l2_drawHorzClipY
  11+ F552 ~            l2_drawHorzClipY:
  12+ F552 ~            .ClipY:                 ex      de,hl                       ; get X1 into de
  13+ F552 ~            .ClipDE:                bit     7,d
  14+ F552 ~                                    jr      z,.DEPositive
  15+ F552 ~            .DENegative:            ld      de,0
  16+ F552 ~                                    jp      .ClipDEDone
  17+ F552 ~            .DEPositive:            ld      a,d
  18+ F552 ~                                    and     a
  19+ F552 ~                                    jp      z,.ClipDE127
  20+ F552 ~            .ClipDE256:             ld      de,127
  21+ F552 ~                                    jp      .ClipDEDone
  22+ F552 ~            .ClipDE127:             bit     7,e
  23+ F552 ~                                    jp      z,.ClipDEDone
  24+ F552 ~                                    ld      de,127
  25+ F552 ~            .ClipDEDone:
  26+ F552 ~            .AdjustStartY:          ld      hl,(starty)
  27+ F552 ~                                    call    CompareHLDESgn           ; if de < HL
  28+ F552 ~                                    jr      z,.AdjustEndY               ;
  29+ F552 ~                                    jr      c,.AdjustEndY               ;
  30+ F552 ~            .ClipStartY:            ld      (starty),de                 ; .
  31+ F552 ~            .AdjustEndY:            ld      hl,(endy)                   ; is endy still uninitialised
  32+ F552 ~            .InitEndY:              ld      a,h                         ;
  33+ F552 ~                                    and     l                           ;
  34+ F552 ~                                    cp      $FF                         ;
  35+ F552 ~                                    jr      z,.ForceEndYSet
  36+ F552 ~            .CheckEndY:             call    CompareHLDESgn           ; if de < HL
  37+ F552 ~                                    ret     z
  38+ F552 ~                                    ret     nc
  39+ F552 ~            .ForceEndYSet:          ld      (endy),de
  40+ F552 ~                                    ret
  41+ F552                      ENDIF
  42+ F552
  43+ F552
  44+ F552 2A DA F5     l2_drawVertClip:        ld      hl,(y1)
  45+ F555 ED 5B DE F5                          ld      de,(y2)
  46+ F559 CD 28 99                             call    CompareHLDESgn
  47+ F55C 30 01                                jr      nc,.y1ltey2
  48+ F55E EB                                   ex      de,hl
  49+ F55F CB 7C        .y1ltey2:               bit     7,h
  50+ F561 CA 67 F5                             jp      z,.y1Positive
  51+ F564 21 00 00                             ld      hl,0
  52+ F567 7A           .y1Positive             ld      a,d
  53+ F568 A7                                   and     a
  54+ F569 CA 71 F5                             jp      z,.y2lt255
  55+ F56C 1E 7F                                ld      e,127
  56+ F56E C3 78 F5                             jp      .y2Clipped
  57+ F571 CB 7B        .y2lt255:               bit     7,e
  58+ F573 CA 78 F5                             jp      z,.y2Clipped
  59+ F576 1E 7F                                ld      e,127
  60+ F578 ED 4B D8 F5  .y2Clipped:             ld      bc,(x1)
  61+ F57C 45                                   ld      b,l
  62+ F57D 53                                   ld      d,e
  63+ F57E 1E BF                                ld      e,$BF
  64+ F580 C3 55 E5                             jp      l2_draw_vert_line_to                ; ">bc = row col d = to position, e = color"
  65+ F583
  66+ F583
  67+ F583 2A D8 F5     l2_drawHorzClip:        ld      hl,(x1)
  68+ F586 ED 5B DC F5                          ld      de,(x2)
  69+ F58A CD 28 99                             call    CompareHLDESgn
  70+ F58D 30 01                                jr      nc,.x1ltex2
  71+ F58F EB                                   ex      de,hl
  72+ F590 CB 7C        .x1ltex2:               bit     7,h
  73+ F592 CA 98 F5                             jp      z,.x1Positive
  74+ F595 21 00 00                             ld      hl,0
  75+ F598 7A           .x1Positive             ld      a,d
  76+ F599 A7                                   and     a
  77+ F59A CA 9F F5                             jp      z,.x2Clipped
  78+ F59D 1E FF                                ld      e,255
  79+ F59F ED 4B DA F5  .x2Clipped:             ld      bc,(y1)
  80+ F5A3 41                                   ld      b,c
  81+ F5A4 4D                                   ld      c,l
  82+ F5A5 53                                   ld      d,e
  83+ F5A6 1E BF                                ld      e,$BF
  84+ F5A8 C3 BD E4                             jp      l2_draw_horz_line_to                ; "bc = left side row,col, d right pixel, e = color"
  85+ F5AB
  86+ F5AB                      IFDEF Add_l2_drawVertClipY
  87+ F5AB ~            l2_drawVertClipY:       bit     7,d                     ; i = (py1<0?0:py1);
  88+ F5AB ~                                    jr      z,.PYIsOK
  89+ F5AB ~            .SetPYTo0:              ld      de,0
  90+ F5AB ~            .PYIsOK:                ld      hl,(starty)
  91+ F5AB ~                                    IsHLEqu255
  92+ F5AB ~                                    jp      z,.UpdateStartY
  93+ F5AB ~                                    call    CompareHLDESgn       ; or starty > py
  94+ F5AB ~                                    jr      nc,.UpdateStartY        ;
  95+ F5AB ~                                    jp      .PrepareUpdateArray
  96+ F5AB ~            .UpdateStartY:          ld      (starty),de
  97+ F5AB ~            .PrepareUpdateArray:    JumpIfRegLTE c, 127, .UpdateCounters ; we loop from
  98+ F5AB ~                                    ld      c,127
  99+ F5AB ~            .UpdateEndY:            ld      (endy),bc               ; save BC to endy y as its now clamped, thsi frees up BC regsiters
 100+ F5AB ~            .UpdateCounters:        ld      hl,ix                   ; get target array index and set it to
 101+ F5AB ~                                    add     hl,de                   ; targetArray[de]
 102+ F5AB ~                                    add     hl,de                   ; .
 103+ F5AB ~                                    ld      a,c                     ; now set up B as an iterator
 104+ F5AB ~                                    sub     b                       ; for py2 - py1 + 1 entries
 105+ F5AB ~                                    inc     a                       ; .
 106+ F5AB ~                                    ld      b,a                     ; .
 107+ F5AB ~                                    ld      de,ix                   ; we don't need de anymore to move ix for faster instructions
 108+ F5AB ~            .UpdateArray:           ld      (hl),de                 ; use sjasm fake as it does (hl)=e,inc hl, (hl)=d,inc hl
 109+ F5AB ~                                    inc     a                       ; use a as a counter for the end when we update EndY
 110+ F5AB ~                                    djnz    .UpdateArray            ; .
 111+ F5AB ~                                    ret                             ; we are now done
 112+ F5AB                      ENDIF
 113+ F5AB
 114+ F5AB
 115+ F5AB              ; ">l2_draw_any_line, bc = y0,x0 de=y1,x1,a=color: determines if its horizontal, vertical or diagonal then hands off the work"
 116+ F5AB              ; b - y0 c - x0, d - y1 e - x1 a - colour
 117+ F5AB 08           l2_draw_any_line:       ex		af,af'              ; save colour into a'
 118+ F5AC 79                                   ld		a,c                 ; if x and e are the same its horizontal
 119+ F5AD BB                                   cp		e
 120+ F5AE 28 08                                jr		z,.HorizontalLineCheck
 121+ F5B0 78                                   ld		a,b                 ; if b and d are the same its vertica;
 122+ F5B1 BA                                   cp		d
 123+ F5B2 28 0E                                jr		z,.VerticalLine
 124+ F5B4              ; use jp and get a free ret instruction optimisation
 125+ F5B4 08           .DiagonalLine:		    ex		af,af'			     ; get colour back into a
 126+ F5B5 C3 D6 E9                             jp		l2_draw_diagonal
 127+ F5B8
 128+ F5B8 78           .HorizontalLineCheck:   ld      a,b
 129+ F5B9 BA                                   cp      d
 130+ F5BA 28 0B                                jr      z, .SinglePixel
 131+ F5BC 08           .HorizontalLine:        ex		af,af'              ; get colour back into a
 132+ F5BD 53                                   ld		d,e				    ; set d as target right pixel
 133+ F5BE 5F                                   ld		e,a				    ; e holds colour on this call
 134+ F5BF C3 BD E4                             jp		l2_draw_horz_line_to
 135+ F5C2 08           .VerticalLine:          ex		af,af'
 136+ F5C3 5F                                   ld		e,a				    ; e holds colour on this call
 137+ F5C4 C3 55 E5                             jp		l2_draw_vert_line_to
 138+ F5C7 08           .SinglePixel:           ex		af,af'              ; get colour back into a
 139+ F5C8                                      l2_plot_macro; jp      l2_plot_pixel
 139+ F5C8 78          >                        ld      a,b
 139+ F5C9             >                        JumpIfAGTENusng 192 ,.NoPlot
 139+ F5C9 FE C0       >                        cp     192
 139+ F5CB D2 D7 F5    >                        jp		nc,.NoPlot
 139+ F5CE 69          >                        ld      l,c
 139+ F5CF CD 68 E0    >                        call    asm_l2_row_bank_select
 139+ F5D2 67          >                        ld      h,a
 139+ F5D3 3A B5 E2    >                        ld      a,(line_gfx_colour)
 139+ F5D6 77          >                        ld      (hl),a
 139+ F5D7             >.NoPlot:
 140+ F5D7 C9                                   ret
 141+ F5D8              ;-*-*-;......................................................
 142+ F5D8              ;-*-*-; hl'hl = x1y1 de'de = x3y3 , does not save, just plots points
 143+ F5D8              ;-*-*-Layer2_draw_ClipY_Line:
 144+ F5D8              ;-*-*-;                       Eliminte totally off screen first
 145+ F5D8              ;-*-*-.Y1HighTest:            IsHLGT127                       ; if y1 and y2 > 127
 146+ F5D8              ;-*-*-                        jr      nz,.Y1HighLTE127        ; .
 147+ F5D8              ;-*-*-.Y2HighTest:            IsDEGT127                       ; .
 148+ F5D8              ;-*-*-                        ret     nz                       ;   return
 149+ F5D8              ;-*-*-.Y1HighLTE127:
 150+ F5D8              ;-*-*-.Y1LowTest:             bit     7,h                     ; if y1 and y2 < 0
 151+ F5D8              ;-*-*-                        jr      z,.YTestPass            ; .
 152+ F5D8              ;-*-*-                        bit     7,d                     ; .
 153+ F5D8              ;-*-*-                        ret     nz                      ;   return
 154+ F5D8              ;-*-*-.YTestPass:             exx                             ; hl hl' = x1y1 de de' = x2y2
 155+ F5D8              ;-*-*-                        ld      a,h                     ; if x1 and x2 < 0 or > 255
 156+ F5D8              ;-*-*-                        and     a                       ; then in either scenario high
 157+ F5D8              ;-*-*-                        jr      z,.XTestPass            ; byte will not be zero
 158+ F5D8              ;-*-*-                        ld      a,d                     ; .
 159+ F5D8              ;-*-*-                        and     a                       ; .
 160+ F5D8              ;-*-*-                        ret     nz                      ;   return
 161+ F5D8              ;-*-*-.XTestPass:                                             ;
 162+ F5D8              ;-*-*-;                       Check for horizontal and vertical exceptions
 163+ F5D8              ;-*-*-.CheckForVertical:      call    CompareHLDESigned       ; if x1 = x2 then vertical line
 164+ F5D8              ;-*-*-                        jp      z, l2_drawVertClipY     ;    goto vertical and use its ret as a free exit
 165+ F5D8              ;-*-*-.CheckForHorizontal:    exx                             ; hl'hl = x1y1 de'de = x2y2
 166+ F5D8              ;-*-*-                        call    CompareHLDESigned       ; if y1 = y2 then horizonal line
 167+ F5D8              ;-*-*-                        jp      z, l2_drawHorzClipY     ; goto  horizontal and use its ret as a free exit
 168+ F5D8              ;-*-*-                        exx                             ; hl hl' = x1y1 de de' = x2y2
 169+ F5D8              ;-*-*-;                       Now we can draw diagnoal, note we are pre-sorting Y so no need to do sort logic
 170+ F5D8              ;-*-*-;                       Check if X1 > X2 and set sign, X1 x2 and clip accordingly
 171+ F5D8              ;-*-*-.SetupMinMaxX:          call    CompareHLDESigned       ; If x1 > x2
 172+ F5D8              ;-*-*-                        jr      c, .x1LTx2              ; . (else jump to x1 < x2 as we have already handled x1 = x2)
 173+ F5D8              ;-*-*-.x1GTEx2:               ld      a,$FF                   ;   sign_x = -1 (also iyh)
 174+ F5D8              ;-*-*-                        ld      (sign_x),a              ;   .
 175+ F5D8              ;-*-*-                        ld      iyh,a
 176+ F5D8              ;-*-*-                        NegHL                           ;   x1 = - x1
 177+ F5D8              ;-*-*-                        NegDE                           ;   x2 = - x2
 178+ F5D8              ;-*-*-                        xor     a                       ;   xmax = 0
 179+ F5D8              ;-*-*-                        ld      (clip_xmax),a           ;   .
 180+ F5D8              ;-*-*-                        ld      (clip_xmax+1),a         ;   .
 181+ F5D8              ;-*-*-                        inc     a                       ;   xmin = -255 ($FF01)
 182+ F5D8              ;-*-*-                        ld      (clip_xmin),a           ;   .
 183+ F5D8              ;-*-*-                        ld      a,$FF
 184+ F5D8              ;-*-*-                        ld      (clip_xmin+1),a         ;   .
 185+ F5D8              ;-*-*-                        jp      .DoneSignSetup          ; else
 186+ F5D8              ;-*-*-;                       if X1<X2 then set up sign as 1, clip, we don't need to change X1 and X2
 187+ F5D8              ;-*-*-.x1LTx2:                ld      a,1                     ;   sign_x = 1 (also iyh)
 188+ F5D8              ;-*-*-                        ld      (sign_x),a              ;   .
 189+ F5D8              ;-*-*-                        ld      iyh,a                   ;   .
 190+ F5D8              ;-*-*-                        ZeroA                           ;   clip_xmin = 0
 191+ F5D8              ;-*-*-                        ld      (clip_xmin),a           ;   .
 192+ F5D8              ;-*-*-                        ld      (clip_xmin+1),a         ;   .
 193+ F5D8              ;-*-*-                        ld      (clip_xmax+1),a         ;   clip_xmax = 255
 194+ F5D8              ;-*-*-                        dec     a                       ;   .
 195+ F5D8              ;-*-*-                        ld      (clip_xmax),a           ;   .
 196+ F5D8              ;-*-*-.DoneSignSetup:
 197+ F5D8              ;-*-*-;                       Set up Delta x = x2 - x1
 198+ F5D8              ;-*-*-.CalcDeltas:            ex      de,hl                   ; de = x1 hl = x2
 199+ F5D8              ;-*-*-                        push    hl                      ; save x2                       Stack+1
 200+ F5D8              ;-*-*-                        ClearCarryFlag                  ; delta_x = x2 - x1
 201+ F5D8              ;-*-*-                        sbc     hl,de                   ; .
 202+ F5D8              ;-*-*-                        ld      (delta_x),hl            ; .
 203+ F5D8              ;-*-*-;                       Set up Delta X step
 204+ F5D8              ;-*-*-                        ClearCarryFlag                  ; multiply by 2
 205+ F5D8              ;-*-*-                        adc     hl,hl                   ; .
 206+ F5D8              ;-*-*-                        ld      (delta_x_step),hl       ; delta_x_step = delta x * 2
 207+ F5D8              ;-*-*-                        pop     hl                      ; Restore X2                     Stack+0
 208+ F5D8              ;-*-*-                        ; now hl = x2 and de = x1
 209+ F5D8              ;-*-*-;                       Set up Delta y = y2 - y1
 210+ F5D8              ;-*-*-.CalcDeltaY:            exx                             ; hl = y1 de = y2, we don't save hl,de as we will load later
 211+ F5D8              ;-*-*-                        ld      (y1Work),hl             ; y1Work = y1
 212+ F5D8              ;-*-*-                        push    hl                      ; save y1 so that it can be loaded to HL later
 213+ F5D8              ;-*-*-                        ld      (y2Work),de             ; y2Work = y2
 214+ F5D8              ;-*-*-                        ex      de,hl                   ; set de to y2Work and hl to y1Work
 215+ F5D8              ;-*-*-                        ClearCarryFlag                  ; delta_y = y2 - y1
 216+ F5D8              ;-*-*-                        sbc     hl,de                   ; .
 217+ F5D8              ;-*-*-                        ld      (delta_y),hl            ; .
 218+ F5D8              ;-*-*-;                       Set up Delta Y step
 219+ F5D8              ;-*-*-                        ClearCarryFlag                  ; multiply by 2
 220+ F5D8              ;-*-*-                        adc     hl,hl                   ; .
 221+ F5D8              ;-*-*-                        ld      (delta_y_step),hl       ; delta_y_step = delta y * 2
 222+ F5D8              ;-*-*-                        ; now hl = y1 de = y2
 223+ F5D8              ;-*-*-;                       x_pos = x1, y_pos = y1
 224+ F5D8              ;-*-*-.SavePositions:         exx                             ; de = x1 hl = x2
 225+ F5D8              ;-*-*-                        ld      (x1Work),de             ; x1Work = x1
 226+ F5D8              ;-*-*-                        ld      (x2Work),hl             ; x2Work = x2
 227+ F5D8              ;-*-*-                        ;ex      de,hl                   ; hl = x1 de = x2
 228+ F5D8              ;-*-*-                        pop     hl                      ; y_pos = hl = y1   = y_pos     Stack+0
 229+ F5D8              ;-*-*-                        ld      (x_pos),de              ; .
 230+ F5D8              ;-*-*-                        ld      (y_pos),hl              ; .
 231+ F5D8              ;-*-*-;                       Check for Delta X >= Delta Y and do respective code version
 232+ F5D8              ;-*-*-.CheckDeltaXGTEDeltaY:  ld      hl,(delta_x)            ; hl = delta x
 233+ F5D8              ;-*-*-                        ld      de,(delta_y)            ; de = delta y
 234+ F5D8              ;-*-*-                        call    CompareHLDESigned       ; if data x < deltay
 235+ F5D8              ;-*-*-                        jp      c, DeltaXltDeltaY
 236+ F5D8              ;-*-*-;..................................................................................................................................
 237+ F5D8              ;-*-*-;                       this is where dx >= dy
 238+ F5D8              ;-*-*-;--- Delta X >= DeltaY ---------------------------------;    error = delta y_step - delta x
 239+ F5D8              ;-*-*-;                       Error = delta Y Step - Delta X and set Exit false
 240+ F5D8              ;-*-*-L2DeltaXgteDeltaY:      ErrorEquStepMinusDelta delta_y_step, delta_x ; this also sets de to delta x
 241+ F5D8              ;-*-*-                        SetExitFalse                    ;    set exit = false
 242+ F5D8              ;-*-*-;---                    if y < 0 then set y = 0 & save X pos to targetArray[0]..;
 243+ F5D8              ;-*-*-.IsY1TL0:               IsAxisLT0 (y1Work)              ;    if y1 < 0
 244+ F5D8              ;-*-*-                        jp     z,.Y1IsNotLT0           ;    .
 245+ F5D8              ;-*-*-;                       ... temp = 2 * (-y1) -1 * delta X
 246+ F5D8              ;-*-*-.Y1IsLT0:               ex      de,hl                   ;       de = delta x
 247+ F5D8              ;-*-*-                        ld      hl,(y1Work)             ;       temp = (2 * (0 - y1) - 1) * delta_x; Note from entering de = delta_x
 248+ F5D8              ;-*-*-                        NegHL                        ;       .      (0-y1 also equals negate y1)
 249+ F5D8              ;-*-*-                        ClearCarryFlag                  ;       .
 250+ F5D8              ;-*-*-                        adc     hl,hl                   ;       .      (y1 = y1 * 2)
 251+ F5D8              ;-*-*-                        dec     hl                      ;       .      (y1 = y1 -1)
 252+ F5D8              ;-*-*-                        call    mulHLbyDE2sc            ;       .      (multiply by de which is delta x)
 253+ F5D8              ;-*-*-                        ld      (linetemp),hl           ;       .      (and save to linetemp)
 254+ F5D8              ;-*-*-                        ld      de,(delta_y_step)       ;       .  (set BC to divq floor bc/de)
 255+ F5D8              ;-*-*-                        ex      de,hl                   ;       msd = floor_divq (temp, delta_y_step)
 256+ F5D8              ;-*-*-;                       ... msd = floor (temp , delta y step)
 257+ F5D8              ;-*-*-                        FloorHLdivDETarget msd          ;       .
 258+ F5D8              ;-*-*-;                       ... xpos += msd
 259+ F5D8              ;-*-*-                        ex      hl,de                   ;       x pos += msd (move msd to de)
 260+ F5D8              ;-*-*-                        ld      hl,(x_pos)              ;       .            (pull in x1temp and add de)
 261+ F5D8              ;-*-*-                        add     hl,de                   ;       .
 262+ F5D8              ;-*-*-                        ld      (x_pos),hl              ;       .            (store result in x_pos)
 263+ F5D8              ;-*-*-;                       ... if x_pos > clip_xmax then return
 264+ F5D8              ;-*-*-.IsXposGTClipXMax:      ld      de,(clip_xmax)          ;       if x_pos > clip_xmax then return
 265+ F5D8              ;-*-*-                        call    CompareHLDESigned               ;       .
 266+ F5D8              ;-*-*-                        jr      z,.XPosLTEXMax         ;       .
 267+ F5D8              ;-*-*-                        ret     nc                      ;       .
 268+ F5D8              ;-*-*-.XPosLTEXMax:
 269+ F5D8              ;-*-*-;                       ... if x_pos > clip_xmin
 270+ F5D8              ;-*-*-.IsXposGTEClipXmin:     ld      de,(clip_xmin)          ;       if x_pos >= clip_xmin
 271+ F5D8              ;-*-*-                        call    CompareHLDESigned               ;       .
 272+ F5D8              ;-*-*-                        jr      z,.XposLTClipXmin       ;       .
 273+ F5D8              ;-*-*-                        jr      c,.XposLTClipXmin       ;
 274+ F5D8              ;-*-*-;                       ... ... then rem = temp - msd * delta y step
 275+ F5D8              ;-*-*-.XposGTEClipXMin:       ld      hl,(msd)                ;          rem = temp - msd * delta_y_step
 276+ F5D8              ;-*-*-                        ld      de,(delta_y_step)       ;          .     (de =  delta_y_step)
 277+ F5D8              ;-*-*-                        call    mulHLbyDE2sc            ;          .     (hl = msd * delta y step)
 278+ F5D8              ;-*-*-                        ex      de,hl                   ;          .     (de = hl)
 279+ F5D8              ;-*-*-                        ld      hl,(linetemp)           ;          .     (hl = linetemp)
 280+ F5D8              ;-*-*-                        ClearCarryFlag                  ;          .
 281+ F5D8              ;-*-*-                        sbc     hl,de                   ;          .     (hl = hl = de)
 282+ F5D8              ;-*-*-                        ld      (rem),hl                ;          .     (rem = result)
 283+ F5D8              ;-*-*-;                       ... ... y pos = 0
 284+ F5D8              ;-*-*-                        xor     a                       ;          y_pos = 0
 285+ F5D8              ;-*-*-                        ld      (y_pos),a               ;          .
 286+ F5D8              ;-*-*-                        ld      (y_pos+1),a             ;          .
 287+ F5D8              ;-*-*-;                       ... ... error = error - (rem + delta x)
 288+ F5D8              ;-*-*-                        ld      de,(delta_x)            ;          error -= rem + delta_x
 289+ F5D8              ;-*-*-                        add     hl,de                   ;          .      (hl = (rem still) (de = delta x) )
 290+ F5D8              ;-*-*-                        ex      de,hl                   ;          .      (move result into de)
 291+ F5D8              ;-*-*-                        ld      hl,(error)              ;          .      (get error into hl)
 292+ F5D8              ;-*-*-                        ClearCarryFlag                  ;          .      (error - de)
 293+ F5D8              ;-*-*-                        sbc     hl,de                   ;          .
 294+ F5D8              ;-*-*-                        ld      (error),hl              ;          .      (save in hl)
 295+ F5D8              ;-*-*-;                       ... ... if rem > 0
 296+ F5D8              ;-*-*-                        IsMem16GT0JumpFalse rem, .remNotGT0 ;      if (rem > 0)
 297+ F5D8              ;-*-*-;                       ... ... ... xpos ++
 298+ F5D8              ;-*-*-.remGT0:                ld      hl,x_pos                ;              x_pos += 1
 299+ F5D8              ;-*-*-                        inc     (hl)                    ;              .
 300+ F5D8              ;-*-*-;                       ... ... ... error += delta y step
 301+ F5D8              ;-*-*-                        ErrorPlusStep delta_y_step      ;              error += delta_y_step
 302+ F5D8              ;-*-*-;                       ... ... set exit true
 303+ F5D8              ;-*-*-.remNotGT0:             ld      a,$FF                   ;          set_exit = true
 304+ F5D8              ;-*-*-                        ld      (set_exit),a            ;          .
 305+ F5D8              ;-*-*-;                       ... ...  set target array [0] to xpos
 306+ F5D8              ;-*-*-                        ld      hl,(x_pos)              ;          targetArray[0] = x_pos
 307+ F5D8              ;-*-*-                        ld      (ix+0),l                ;          .  (targetArray is pointed to by ix)
 308+ F5D8              ;-*-*-                        ld      (ix+1),h                ;          .
 309+ F5D8              ;-*-*-.Y1IsNotLT0:
 310+ F5D8              ;-*-*-;                       x pos end = x2
 311+ F5D8              ;-*-*-.XposLTClipXmin:        ld      hl,(x2Work)             ;    x_pos_end = x2
 312+ F5D8              ;-*-*-                        ld      (x_pos_end),hl          ;    .
 313+ F5D8              ;-*-*-;                       if y2 > 127
 314+ F5D8              ;-*-*-.IsY2GT127:             ld      hl,(y2Work)             ;    if (y2 > 127)
 315+ F5D8              ;-*-*-                        IsHLGT127                       ;    .
 316+ F5D8              ;-*-*-                        jr      nz,.Y2LTE127            ;    .
 317+ F5D8              ;-*-*-;                       ... temp = delta x step * (127 - y1) + delta x
 318+ F5D8              ;-*-*-.Y2GT127:               ld      de,(y1Work)             ;       temp = delta_x_step * (127 - y1) + delta_x
 319+ F5D8              ;-*-*-                        ld      hl,127                  ;       .      (de = y1work)
 320+ F5D8              ;-*-*-                        ClearCarryFlag                  ;       .      (hl = 127 )
 321+ F5D8              ;-*-*-                        sbc     hl,de                   ;       .      (hl - de)
 322+ F5D8              ;-*-*-                        ld      de,(delta_x_step)       ;       .      (de = delta x step)
 323+ F5D8              ;-*-*-                        call    mulHLbyDE2sc                    ;       .      (hl = hl * de)
 324+ F5D8              ;-*-*-                        ld      de,(delta_x)            ;       .      (de = delta x)
 325+ F5D8              ;-*-*-                        add     hl,de                   ;       .      (hl + de)
 326+ F5D8              ;-*-*-                        ld      (linetemp),hl           ;       .      (and save to line temp)
 327+ F5D8              ;-*-*-                        ld      de,(delta_y_step)       ;       de = delta y step
 328+ F5D8              ;-*-*-                        ex      de,hl                   ;       de = linetemp hl = delta y step
 329+ F5D8              ;-*-*-;                       ... msd = floor_divq (temp, delta y step)
 330+ F5D8              ;-*-*-                        FloorHLdivDETarget msd          ;       msd = floor_divq(temp,delta_y_step); (hl=de/hl)
 331+ F5D8              ;-*-*-                        ld      bc,hl                   ;       save off msd as we will need it again
 332+ F5D8              ;-*-*-                        ld      de,(x1Work)             ;
 333+ F5D8              ;-*-*-;                       ... xpos_end = x1 + msd
 334+ F5D8              ;-*-*-                        add     hl,de                   ;       x_pos_end = x1 + msd;
 335+ F5D8              ;-*-*-                        ld      (x_pos_end),hl          ;
 336+ F5D8              ;-*-*-;                       ... if (temp - msd * delta y step)) == 0
 337+ F5D8              ;-*-*-                        ld      hl,bc                   ;       if ((temp - msd * delta_y_step) == 0) --x_pos_end;
 338+ F5D8              ;-*-*-                        ld      de,(delta_y_step)       ;       .    (hl = msd * delta_y_step)
 339+ F5D8              ;-*-*-                        call    mulHLbyDE2sc            ;       .
 340+ F5D8              ;-*-*-                        ex      hl,de                   ;       .    (hl = linetemp - hl
 341+ F5D8              ;-*-*-                        ld      hl,(linetemp)           ;       .
 342+ F5D8              ;-*-*-                        ClearCarryFlag                  ;       .
 343+ F5D8              ;-*-*-                        sbc     hl,de                   ;       .
 344+ F5D8              ;-*-*-                        jr      nz,.Calc1NotZero        ;       .
 345+ F5D8              ;-*-*-;                       ... ... x pos end minus 1
 346+ F5D8              ;-*-*-                        ld      hl,x_pos_end            ;           then -- x_pos_end
 347+ F5D8              ;-*-*-                        dec     (hl)                    ;           .
 348+ F5D8              ;-*-*-.Calc1NotZero:
 349+ F5D8              ;-*-*-;                       if sign_x == -1
 350+ F5D8              ;-*-*-.Y2LTE127:              break
 351+ F5D8              ;-*-*-                        IsMemNegative8JumpFalse sign_x, .SignXNotNegative ; just check if its negative
 352+ F5D8              ;-*-*-;                       ... xpos = - xpos
 353+ F5D8              ;-*-*-.SignXNegative:         ld      hl,(x_pos)              ;       x_pos = -x_pos
 354+ F5D8              ;-*-*-                        NegHL                           ;       .
 355+ F5D8              ;-*-*-                        ld      (x_pos),hl              ;       .
 356+ F5D8              ;-*-*-;                       ... xpos end = - xpos end
 357+ F5D8              ;-*-*-                        ld      hl,(x_pos_end)          ;       x_pos_end = -x_pos_end
 358+ F5D8              ;-*-*-                        NegHL                           ;       .
 359+ F5D8              ;-*-*-                        ld      (x_pos_end),hl          ;       .
 360+ F5D8              ;-*-*-                        dec     (hl)                    ;       .
 361+ F5D8              ;-*-*-;                       delta x step = delta x step - delta y step
 362+ F5D8              ;-*-*-.SignXNotNegative:      ld      hl,(delta_x_step)       ;    delta_x_step -= delta_y_step
 363+ F5D8              ;-*-*-                        ld      de,(delta_y_step)       ;    .
 364+ F5D8              ;-*-*-                        ClearCarryFlag                  ;    .
 365+ F5D8              ;-*-*-                        sbc     hl,de                   ;    .
 366+ F5D8              ;-*-*-                        ld      (delta_x_step),hl       ;    .
 367+ F5D8              ;-*-*-;..................................................................................................................................
 368+ F5D8              ;-*-*-;--- DxFTEDyNotLongest while loop ----------------------;
 369+ F5D8              ;-*-*-L2DxGTEDy:                ld      bc,(x_pos)              ;    while (x_pos != x_pos_end) loading bc with xppos an de as x_pos_end
 370+ F5D8              ;-*-*-                        ld      de,(x_pos_end)          ;    .
 371+ F5D8              ;-*-*-                        ld      hl,ix                   ;    load hl as target array
 372+ F5D8              ;-*-*-                        ld      a,(y_pos)               ;    by this point y pos must be 8 bit
 373+ F5D8              ;-*-*-                        add     hl,a                    ;    So we are setting up hl as targetArray pointer
 374+ F5D8              ;-*-*-                        add     hl,a                    ;    .
 375+ F5D8              ;-*-*-;..................................................................................................................................
 376+ F5D8              ;-*-*-;--- Version where longest is not saved ----------------;
 377+ F5D8              ;-*-*-                        exx                             ;      switch to alternate registers
 378+ F5D8              ;-*-*-                        ld      hl,(error)              ;      load up stepping into alternate registers
 379+ F5D8              ;-*-*-                        ld      de,(delta_x_step)       ;      .
 380+ F5D8              ;-*-*-                        ld      bc,(delta_y_step)       ;      .
 381+ F5D8              ;-*-*-                        exx                             ;      .
 382+ F5D8              ;-*-*-                        ld      a,(sign_x)              ;      Self modify inc of y_pos
 383+ F5D8              ;-*-*-                        and     $80                     ;
 384+ F5D8              ;-*-*-                        jr      z,.SetWhileInc          ;
 385+ F5D8              ;-*-*-.SetWhileDec:           ld      a,InstrDECBC
 386+ F5D8              ;-*-*-                        ld      (.WhileIncInstuction), a
 387+ F5D8              ;-*-*-                        jp      .WhileLoop
 388+ F5D8              ;-*-*-.SetWhileInc:           ld      a,InstrINCBC
 389+ F5D8              ;-*-*-                        ld      (.WhileIncInstuction), a
 390+ F5D8              ;-*-*-;--- Update Loop ---------------------------------------;
 391+ F5D8              ;-*-*-; In loop hl  = target array pointer bc = x_pos,       de = x_pos_end, (we don't need to reatin Y_pos)
 392+ F5D8              ;-*-*-;         hl' = error                bc'= delta_y_step de'=delta_x_step
 393+ F5D8              ;-*-*-.WhileLoop:             call    CompareBCDESigned       ;      while x_pos != x_pos_end
 394+ F5D8              ;-*-*-                        ret     z                       ;      .
 395+ F5D8              ;-*-*-                        call    L2_plotAtRowLColC       ;        targetArray[y_pos] = x_pos
 396+ F5D8              ;-*-*-                        exx                             ;        if error >= 0
 397+ F5D8              ;-*-*-                        bit     7,h                     ;        .
 398+ F5D8              ;-*-*-                        jr      nz,.ErrorNegative       ;        .
 399+ F5D8              ;-*-*-.ErrorPositive:         ClearCarryFlag                  ;             error -= delta_x_step
 400+ F5D8              ;-*-*-                        sbc     hl,de                   ;             .
 401+ F5D8              ;-*-*-                        exx                             ;             back to main regsters
 402+ F5D8              ;-*-*-                        inc     hl                      ;             y pos for target Array index +2
 403+ F5D8              ;-*-*-                        inc     hl                      ;             as its 16 bit
 404+ F5D8              ;-*-*-                        jp      .WhileIncInstuction     ;             .
 405+ F5D8              ;-*-*-.ErrorNegative:         add     hl,bc                   ;        else error += delta y step
 406+ F5D8              ;-*-*-                        exx                             ;             back to main regsters
 407+ F5D8              ;-*-*-.WhileIncInstuction:    inc     bc                      ;       x_pos += sign_x (doneas self modifying to inc or dec)
 408+ F5D8              ;-*-*-                        jp      .WhileLoop
 409+ F5D8              ;-*-*-;..................................................................................................................................;--- Delta X < DeltaY ----------------------------------;
 410+ F5D8              ;-*-*-;--- ELSE ----------------------------------------------;
 411+ F5D8              ;-*-*-;--- DX < DY -------------------------------------------;
 412+ F5D8              ;-*-*-;..................................................................................................................................;--- Delta X < DeltaY ----------------------------------;
 413+ F5D8              ;-*-*-;                       error = delta x_step - delta y
 414+ F5D8              ;-*-*-L2DeltaXltDeltaY:       ErrorEquStepMinusDelta delta_x_step, delta_y
 415+ F5D8              ;-*-*-;                       set exit false
 416+ F5D8              ;-*-*-                        SetExitFalse                    ; set exit = false
 417+ F5D8              ;-*-*-;                       if x1 < xmin && y pos > 127 then exit early
 418+ F5D8              ;-*-*-.IsY1TL0:               ld      hl,(x1Work)             ; if x1 < clip xmin
 419+ F5D8              ;-*-*-                        ld      de,(clip_xmin)          ; .
 420+ F5D8              ;-*-*-                        call    CompareHLDESigned               ; .
 421+ F5D8              ;-*-*-                        jp      z, .X1gteClipMin        ; .
 422+ F5D8              ;-*-*-                        jp      c, .X1ltClipMin         ; and y_pos > 127
 423+ F5D8              ;-*-*-                        ld      hl,(y1Work)             ;
 424+ F5D8              ;-*-*-.X1gteClipMin:          ReturnIfHLGT127                 ;    then return
 425+ F5D8              ;-*-*-;                       if y1 work < 0
 426+ F5D8              ;-*-*-.X1ltClipMin:           IsAxisLT0 (y1Work)              ; if y1 < 0             ;
 427+ F5D8              ;-*-*-                        jr      z,.Y1IsNotLT0           ; .
 428+ F5D8              ;-*-*-;                       ... temp = delta x step * (-y1)
 429+ F5D8              ;-*-*-.Y1IsLT0:               ld      hl,(y1Work)             ;    temp = (0 - y1) * delta_x_step;
 430+ F5D8              ;-*-*-                        NegHL                        ;    . (0 - y1 also equals negate HL)
 431+ F5D8              ;-*-*-                        ClearCarryFlag                  ;    .
 432+ F5D8              ;-*-*-                        ld      de,(delta_x_step)       ;    .
 433+ F5D8              ;-*-*-                        call    mulHLbyDE2sc            ;    .
 434+ F5D8              ;-*-*-                        ld      (linetemp),hl           ;    .
 435+ F5D8              ;-*-*-;                       ... msd = floor_divq (temp, delta y step)
 436+ F5D8              ;-*-*-                        ld      de,(delta_y_step)       ;    msd = floor_divq (temp, delta_y_step);
 437+ F5D8              ;-*-*-;                       ... rem calculation now done in floor macro above into de
 438+ F5D8              ;-*-*-                        FloorHLdivDETarget msd          ;    .
 439+ F5D8              ;-*-*-                        ld      (rem),de                ;    As DE = reminder we can do rem = temp % delta_y_step; for free
 440+ F5D8              ;-*-*-;                       ... xpos = xpos + msd
 441+ F5D8              ;-*-*-                        ex      hl,de                   ;    x pos += msd (move msd to de)
 442+ F5D8              ;-*-*-                        ld      hl,(x_pos)              ;    .            (pull in x1temp and add de)
 443+ F5D8              ;-*-*-                        add     hl,de                   ;    .
 444+ F5D8              ;-*-*-                        ld      (x_pos),hl              ;    .            (store result in x_pos)
 445+ F5D8              ;-*-*-;                       ... if xpos > xmax
 446+ F5D8              ;-*-*-.IsXposGTClipXMax:      ld      de,(clip_xmax)          ;    if x_pos > clip_xmax then return
 447+ F5D8              ;-*-*-                        call      CompareHLDESigned               ;    .
 448+ F5D8              ;-*-*-;                       ...    or (pos = xmax && rem >= delta y) then return
 449+ F5D8              ;-*-*-                        jr      z,.XPosLTEXMax          ;    .
 450+ F5D8              ;-*-*-                        ret     nc                      ;    .
 451+ F5D8              ;-*-*-.XPosLTEXMax:           ld      de,(clip_xmin)          ;    if x_pos == clip_xmin
 452+ F5D8              ;-*-*-                        call      CompareHLDESigned               ;    .
 453+ F5D8              ;-*-*-                        jr      nz,.XneClipMax          ;    and rem >= deltay
 454+ F5D8              ;-*-*-                        ld      hl,(rem)                ;    .
 455+ F5D8              ;-*-*-                        ld      de,(delta_y)            ;    .
 456+ F5D8              ;-*-*-                        call      CompareHLDESigned               ;    .
 457+ F5D8              ;-*-*-                        ret     c                       ;    then return
 458+ F5D8              ;-*-*-;                       ... save rem and set y pos to 0
 459+ F5D8              ;-*-*-                        ex      de,hl                   ;    save rem
 460+ F5D8              ;-*-*-                        ld      hl,0                    ;    y_pos = 0
 461+ F5D8              ;-*-*-;                       ... error = error + rem
 462+ F5D8              ;-*-*-                        ld      (y_pos),hl              ;    error += rem
 463+ F5D8              ;-*-*-                        ld      hl,(error)              ;    .
 464+ F5D8              ;-*-*-                        add     hl,de                   ;    .
 465+ F5D8              ;-*-*-                        ld      (error),hl              ;    .
 466+ F5D8              ;-*-*-;                       ... if rem >= delta y
 467+ F5D8              ;-*-*-                        ex      de,hl                   ;    if (rem >= delta_y)
 468+ F5D8              ;-*-*-                        ld      de,(delta_y)            ;    .
 469+ F5D8              ;-*-*-                        call      CompareHLDESigned               ;    .
 470+ F5D8              ;-*-*-                        jr      z,.RemGTEDeltaY         ;    .
 471+ F5D8              ;-*-*-                        jr      nc,.RemGTEDeltaY        ;    .
 472+ F5D8              ;-*-*-;                       ... ... x pos = x pos + 1
 473+ F5D8              ;-*-*-                        ld      hl,x_pos                ;       ++x_pos
 474+ F5D8              ;-*-*-                        inc     (hl)                    ;       .
 475+ F5D8              ;-*-*-                        ld      hl,(error)              ;       error += delta_y_step
 476+ F5D8              ;-*-*-                        ld      de,(delta_y_step)       ;       .
 477+ F5D8              ;-*-*-                        add     hl,de                   ;       .
 478+ F5D8              ;-*-*-                        ld      (error),hl              ;       .
 479+ F5D8              ;-*-*-.RemGTEDeltaY:
 480+ F5D8              ;-*-*-.Y1IsNotLT0:
 481+ F5D8              ;-*-*-.XneClipMax:            ld      hl,(y2Work)             ;  y_pos_end = y2
 482+ F5D8              ;-*-*-                        ld      (y_pos_end),hl          ;  .
 483+ F5D8              ;-*-*-                        ld      de,127                  ;  y_pos_end = (y_pos_end < 127)?y_pos_end+1:128
 484+ F5D8              ;-*-*-                        call      CompareHLDESigned               ;  .
 485+ F5D8              ;-*-*-                        jr      nc,.YPosEndlt127        ;  .
 486+ F5D8              ;-*-*-                        ld      hl,128                  ;  .
 487+ F5D8              ;-*-*-                        jp      .DoneXneClipMax         ;  .
 488+ F5D8              ;-*-*-.YPosEndlt127:          inc     hl                      ;  .
 489+ F5D8              ;-*-*-.DoneXneClipMax:        ld      (y_pos_end),hl          ;  .
 490+ F5D8              ;-*-*-                                                        ; if sign_x == -1
 491+ F5D8              ;-*-*-.Y2LTE127:              IsMemNegative8JumpFalse sign_x, .SignXNotNegative
 492+ F5D8              ;-*-*-.SignXNegative:         ld      hl,(x_pos)              ;    x_pos = -x_pos
 493+ F5D8              ;-*-*-                        NegHL                        ;    .
 494+ F5D8              ;-*-*-                        ld      (x_pos),hl              ;    .
 495+ F5D8              ;-*-*-                        ld      hl,(y2Work)             ;    x_pos_end = -x_pos_end
 496+ F5D8              ;-*-*-.SignXNotNegative:      ld      hl,(delta_y_step)       ; delta_y_step -= delta_x_step
 497+ F5D8              ;-*-*-                        ld      de,(delta_x_step)       ; .
 498+ F5D8              ;-*-*-                        ClearCarryFlag                  ; .
 499+ F5D8              ;-*-*-                        sbc     hl,de                   ; .
 500+ F5D8              ;-*-*-                        ld      hl,(delta_x_step)       ; .
 501+ F5D8              ;-*-*-;..................................................................................................................................
 502+ F5D8              ;-*-*-;--- Dx < Dy Longest while loop ------------------------;
 503+ F5D8              ;-*-*-L2DxLTDy:               ld      hl,(y_pos)              ;       starty=y_pos
 504+ F5D8              ;-*-*-                        ld      (starty),hl             ;       .
 505+ F5D8              ;-*-*-;--- Version where longest issaved ---------------------;
 506+ F5D8              ;-*-*-.LoadAlternateRegs:     ld      bc,(y_pos)              ;       we already have IY so just need xpos and end
 507+ F5D8              ;-*-*-                        ld      de,(y_pos_end)
 508+ F5D8              ;-*-*-                        ld      iy,(x_pos)
 509+ F5D8              ;-*-*-                        ld      hl,ix                   ;    load hl as target array
 510+ F5D8              ;-*-*-                        ld      a,c                     ;    by this point y pos must be 8 bit
 511+ F5D8              ;-*-*-                        add     hl,a                    ;    So we are setting up hl as targetArray pointer
 512+ F5D8              ;-*-*-                        add     hl,a
 513+ F5D8              ;-*-*-                        exx                             ;       switch to alternate registers
 514+ F5D8              ;-*-*-                        ld      hl,(error)              ;       load up stepping into alternate registers
 515+ F5D8              ;-*-*-                        ld      de,(delta_x_step)       ;       and error
 516+ F5D8              ;-*-*-                        ld      bc,(delta_y_step)       ;
 517+ F5D8              ;-*-*-                        exx                             ;       and then switch back to main registers
 518+ F5D8              ;-*-*-                        ld      a,(sign_x)              ;       if Sign x is -1
 519+ F5D8              ;-*-*-                        and     $80                     ;       .
 520+ F5D8              ;-*-*-                        jr      z,.SetWhileInc          ;       .
 521+ F5D8              ;-*-*-.SetWhileDec:           ld      a,InstrDECIY
 522+ F5D8              ;-*-*-                        ld      (.WhileIncInstuction+1),a; set self modifying to dec and 2 byte instruction
 523+ F5D8              ;-*-*-                        jp      .WhileLoop:             ;       .
 524+ F5D8              ;-*-*-.SetWhileInc:           ld      a,InstrINCIY
 525+ F5D8              ;-*-*-                        ld      (.WhileIncInstuction+1),a; else set to inc
 526+ F5D8              ;-*-*-;--- Update Loop ---------------------------------------;
 527+ F5D8              ;-*-*-; In loop hl  = target array pointer bc = x_pos,       de = x_pos_end, (we don't need to reatin Y_pos)
 528+ F5D8              ;-*-*-;         hl' = error                bc'= delta_y_step de'=delta_x_step
 529+ F5D8              ;-*-*-;- we coudl optimise by setting bc to y_pos_end - y_pos +1 and just doing djnz
 530+ F5D8              ;-*-*-.WhileLoop:             call    CompareBCDESigned       ;      while y_pos != y_pos_end
 531+ F5D8              ;-*-*-                        ret     z                       ;      .
 532+ F5D8              ;-*-*-                        ld      a,iyl
 533+ F5D8              ;-*-*-                        call    L2_plotAtRowLColA       ; targetArray[y_pos] = x_pos
 534+ F5D8              ;-*-*-                        inc     hl
 535+ F5D8              ;-*-*-                        ld      a,iyh
 536+ F5D8              ;-*-*-                        ld      (hl),a
 537+ F5D8              ;-*-*-                        inc     hl
 538+ F5D8              ;-*-*-                        exx                             ;        if error >= 0
 539+ F5D8              ;-*-*-                        bit     7,h                     ;        .
 540+ F5D8              ;-*-*-                        jr      nz,.ErrorNegative       ;        .
 541+ F5D8              ;-*-*-.WhileIncInstuction:    inc     iy                      ;             x_pos += sign_x (doneas self modifying to inc or dec)
 542+ F5D8              ;-*-*-.ErrorPositive:         ClearCarryFlag                  ;             error -= delta_y_step
 543+ F5D8              ;-*-*-                        sbc     hl,bc                   ;             .
 544+ F5D8              ;-*-*-                        jp      .LoopEnd                ;             .
 545+ F5D8              ;-*-*-.ErrorNegative:         add     hl,de                   ;        else error += delta x step
 546+ F5D8              ;-*-*-.LoopEnd:               exx                             ;             back to main regsters
 547+ F5D8              ;-*-*-                        inc     bc                      ;        ++y_pos
 548+ F5D8              ;-*-*-                        jp      .WhileLoop
 549+ F5D8              ;-*-*-
 550+ F5D8              ;-*-*-
 551+ F5D8              ;-*-*-;---------------------------------
 552+ F5D8              ;-*-*-L2_plotAtRowLColC:      ld      a,c
 553+ F5D8              ;-*-*-L2_plotAtRowLColA:      push    bc,,de,,hl,,af
 554+ F5D8              ;-*-*-                        ex      af,af'
 555+ F5D8              ;-*-*-                        push    af
 556+ F5D8              ;-*-*-                        ex      af,af'
 557+ F5D8              ;-*-*-                        ld      b,l
 558+ F5D8              ;-*-*-                        ld      c,a
 559+ F5D8              ;-*-*-                        ld      a,$FF                   ; white for now
 560+ F5D8              ;-*-*-                        call    l2_plot_pixel
 561+ F5D8              ;-*-*-                        pop     af
 562+ F5D8              ;-*-*-                        ex      af,af'
 563+ F5D8              ;-*-*-                        pop     bc,,de,,hl,,af
 564+ F5D8              ;-*-*-                        ret
 565+ F5D8              ;-*-*-
 566+ F5D8
 567+ F5D8 00 00        x1                      dw 0
 568+ F5DA 00 00        y1                      dw 0
 569+ F5DC 00 00        x2                      dw 0
 570+ F5DE 00 00        y2                      dw 0
 571+ F5E0 00 00        savex1                  dw 0
 572+ F5E2 00 00        savey1                  dw 0
 573+ F5E4 00 00        savex2                  dw 0
 574+ F5E6 00 00        savey2                  dw 0
 575+ F5E8 00 00        temp                    dw 0
 576+ F5EA 00           longest:                DB 0
 577+ F5EB 00 00        x1Work:                 DW 0
 578+ F5ED 00 00        y1Work:                 DW 0
 579+ F5EF 00 00        x2Work:                 DW 0
 580+ F5F1 00 00        y2Work:                 DW 0
 581+ F5F3 00 00        x_pos:                  DW 0
 582+ F5F5 00 00        y_pos:                  DW 0
 583+ F5F7 00 00        x_pos_end:              DW 0
 584+ F5F9 00 00        y_pos_end:              DW 0
 585+ F5FB 00 00        clip_xmax:              DW 0
 586+ F5FD 00 00        clip_xmin:              DW 0
 587+ F5FF 00 00        sign_x                  DW 0
 588+ F601 00           sign_y                  DB 0
 589+ F602 00 00        delta_x                 DW 0
 590+ F604 00 00        delta_y                 DW 0
 591+ F606 00 00        delta_y_x               DW 0 ; holds the compressed version for elite line draw
 592+ F608 00 00        delta_x_step            DW 0
 593+ F60A 00 00        delta_y_step            DW 0
 594+ F60C 00 00        linetemp                DW 0
 595+ F60E 00 00        gradient                DW 0
 596+ F610 00 00        tSlope                  DW 0
 597+ F612 00 00        msd                     DW 0
 598+ F614 00 00        error                   DW 0
 599+ F616 00           set_exit                DB 0
 600+ F617 00 00        rem                     DW 0
 601+ F619              InstrDECBC              equ $0B
 602+ F619              InstrINCBC              equ $03
 603+ F619              InstrDECIY              equ $2B
 604+ F619              InstrINCIY              equ $23
 605+ F619
 606+ F619              MACROAequBMinusC16:     MACRO   pA, pB, pC
 607+ F619 ~                                    ld      hl,(pB)                         ;       error = delta_y_step - delta_x;
 608+ F619 ~                                    ld      de,(pC)                         ; .
 609+ F619 ~                                    ClearCarryFlag                          ; .
 610+ F619 ~                                    sbc     hl,de                           ; .
 611+ F619 ~                                    ld      (pA),hl
 612+ F619                                      ENDM
 613+ F619              ;--- Swaps point 1 and point 2 around (i.e x1 y1 <--> x2 y2)
 614+ F619 2A DA F5     SwapCoords:             ld      hl,(y1)                         ;       then swap point 1 and point 2
 615+ F61C ED 5B DE F5                          ld      de,(y2)                         ;       .
 616+ F620 ED 53 DA F5                          ld      (y1),de                         ;       .
 617+ F624 22 DE F5                             ld      (y2),hl                         ;       .
 618+ F627 2A D8 F5                             ld      hl,(x1)                         ;       .
 619+ F62A ED 5B DC F5                          ld      de,(x2)                         ;       .
 620+ F62E ED 53 D8 F5                          ld      (x1),de                         ;       .
 621+ F632 22 DC F5                             ld      (x2),hl                         ;       .
 622+ F635 C9                                   ret
 623+ F636
 624+ F636                      ; DEFINE SPLITLINE 1
 625+ F636
 626+ F636                      DEFINE CLIPPED_LINEX 1
 627+ F636                      DEFINE SPLITORLINEX  1
 628+ F636                      IFDEF SPLITLINE
 628+ F636 ~
 629+ F636 ~            l2_draw_clipped_line:
 630+ F636                      ENDIF
 631+ F636                      IFDEF CLIPPED_LINEX
 631+ F636
 632+ F636              l2_draw_clipped_lineX:
 633+ F636                      ENDIF
 634+ F636                      IFDEF SPLITORLINEX
 635+ F636 2A DA F5                             ld      hl,(y1)                         ; if (y1 > y2)
 636+ F639 ED 5B DE F5                          ld      de,(y2)                         ; .
 637+ F63D CD 28 99                             call    CompareHLDESgn                  ; .
 638+ F640 DA 46 F6                             jp      c,.NoSwapCoords
 639+ F643 CD 19 F6     .SwapCoords:            call    SwapCoords
 640+ F646              .NoSwapCoords:
 641+ F646 ED 5B DA F5  .CalcDX:                ld      de,(y1)                         ; Calculate |dy|
 642+ F64A 2A DE F5                             ld      hl,(y2)                         ; .
 643+ F64D                                      ClearCarryFlag                          ; .
 643+ F64D B7          >                        or a
 644+ F64E ED 52                                sbc     hl,de                           ; .
 645+ F650 E5 FD E1                             ld      iy,hl                           ; iy = |dy|
 646+ F653 ED 5B D8 F5  .CalcDy:                ld      de,(x1)                         ; Calculate |dx|
 647+ F657 2A DC F5                             ld      hl,(x2)                         ; .
 648+ F65A 06 00                                ld      b,0                             ; assume x1 < x2 and assume no negate needed
 649+ F65C CD 28 99                             call    CompareHLDESgn                  ;
 650+ F65F D2 64 F6                             jp      nc,.DxNoSwap                     ;
 651+ F662 EB           .DxSwap:                ex      de,hl                           ; swap just x over
 652+ F663 04                                   inc     b                               ; and flag that we had to do it
 653+ F664              .DxNoSwap:              ClearCarryFlag                          ;
 653+ F664 B7          >                        or a
 654+ F665 ED 52                                sbc     hl,de                           ;
 655+ F667 E5 DD E1                             ld      ix,hl                           ; ix = |dx|
 656+ F66A DD 7C        .CheckForHuge:          ld      a,ixh                           ; if either dx or dy > 255 then split line
 657+ F66C FD B4                                or      iyh                             ; .
 658+ F66E C2 82 F6                             jp      nz, .BreakNeeded                ; .
 659+ F671 DD 7D        .ChecktGT180:           ld      a,ixl
 660+ F673 FE B4                                cp      180
 661+ F675 D2 82 F6                             jp      nc,.BreakNeeded
 662+ F678 FD 7D                                ld      a,iyl
 663+ F67A FE B4                                cp      180
 664+ F67C D2 82 F6                             jp      nc,.BreakNeeded
 665+ F67F C3 E6 F6                             jp      .noBreakNeeded
 666+ F682              .BreakNeeded:           ldCopy2Byte y1, savey1                  ;       savey1 = y1                     create savey1 (y1) to savey2 (y break)
 666+ F682 2A DA F5    >                        ld       hl,(y1)
 666+ F685 22 E2 F5    >                        ld       (savey1),hl
 667+ F688                                      ShiftIYRight1                           ;       savey2 = y1 + (work_dy/2)
 667+ F688 FD 7C       >			   ld 	a,iyh
 667+ F68A CB 3F       >			   srl 	a
 667+ F68C FD 67       >			   ld	iyh,a
 667+ F68E FD 7D       >			   ld 	a,iyl
 667+ F690 1F          >			   rra
 667+ F691 FD 6F       >			   ld	iyl,a
 668+ F693 2A DA F5                             ld      hl,(y1)                         ;       .
 669+ F696                                      ClearCarryFlag                          ;       .
 669+ F696 B7          >                        or a
 670+ F697 FD 54 FD 5D                          ld      de,iy
 671+ F69B ED 5A                                adc     hl,de                           ;       .
 672+ F69D 22 E6 F5                             ld      (savey2),hl                     ;       .
 673+ F6A0 22 DA F5                             ld      (y1),hl                         ;       y1     = savey2, y2 untouched   create y1 (break) to y2
 674+ F6A3 05                                   dec     b                               ;       if b was 1 then decb would set z flag so we know that x1 > x2
 675+ F6A4 C2 AA F6                             jp      nz,.X1gtX2
 676+ F6A7 CD 19 F6     .X1lteX2:               call    SwapCoords
 677+ F6AA              .X1gtX2:                ldCopy2Byte x1, savex1                  ;       savex1 = x1                     create savex1 (x1) to savex2 (x break)
 677+ F6AA 2A D8 F5    >                        ld       hl,(x1)
 677+ F6AD 22 E0 F5    >                        ld       (savex1),hl
 678+ F6B0                                      ShiftIXRight1                           ;       savex2 = x1 + (work_dx/2)
 678+ F6B0 DD 7C       >			   ld 	a,ixh
 678+ F6B2 CB 3F       >			   srl 	a
 678+ F6B4 DD 67       >			   ld	ixh,a
 678+ F6B6 DD 7D       >			   ld 	a,ixl
 678+ F6B8 1F          >			   rra
 678+ F6B9 DD 6F       >			   ld	ixl,a
 679+ F6BB 2A D8 F5                             ld      hl,(x1)                         ;       .
 680+ F6BE                                      ClearCarryFlag                          ;       .
 680+ F6BE B7          >                        or a
 681+ F6BF DD 54 DD 5D                          ld      de,ix
 682+ F6C3 ED 5A                                adc     hl,de                           ;       .
 683+ F6C5 22 E4 F5                             ld      (savex2),hl                     ;       .
 684+ F6C8 22 D8 F5                             ld      (x1),hl                         ;       x1     = savex1, x2 untouched  create x1 (break to x2)
 685+ F6CB                      ENDIF
 686+ F6CB                      IFDEF SPLITLINE
 687+ F6CB ~                                    call    l2_draw_short_line              ;       drawshortLine
 688+ F6CB                      ENDIF
 689+ F6CB                      IFDEF CLIPPED_LINEX
 690+ F6CB CD E6 F6                             call    l2_draw_clipped_line
 691+ F6CE                      ENDIF
 692+ F6CE                      IFDEF SPLITORLINEX
 693+ F6CE                                      ldCopyWord savex1,x1
 693+ F6CE             >                        ldCopy2Byte savex1, x1
 693+ F6CE 2A E0 F5    >                        ld       hl,(savex1)
 693+ F6D1 22 D8 F5    >                        ld       (x1),hl
 694+ F6D4                                      ldCopyWord savey1,y1
 694+ F6D4             >                        ldCopy2Byte savey1, y1
 694+ F6D4 2A E2 F5    >                        ld       hl,(savey1)
 694+ F6D7 22 DA F5    >                        ld       (y1),hl
 695+ F6DA                                      ldCopyWord savex2,x2
 695+ F6DA             >                        ldCopy2Byte savex2, x2
 695+ F6DA 2A E4 F5    >                        ld       hl,(savex2)
 695+ F6DD 22 DC F5    >                        ld       (x2),hl
 696+ F6E0                                      ldCopyWord savey2,y2
 696+ F6E0             >                        ldCopy2Byte savey2, y2
 696+ F6E0 2A E6 F5    >                        ld       hl,(savey2)
 696+ F6E3 22 DE F5    >                        ld       (y2),hl
 697+ F6E6              .noBreakNeeded:         // Falls straight into l2_draw_short_line
 698+ F6E6                      ENDIF
 699+ F6E6                      IFDEF SPLITLINE
 699+ F6E6 ~
 700+ F6E6 ~            l2_draw_short_line:     ; check out of bounds
 701+ F6E6                      ENDIF
 702+ F6E6                      IFDEF CLIPPED_LINEX
 703+ F6E6              l2_draw_clipped_line:
 704+ F6E6                      ENDIF
 705+ F6E6                      IFDEF SPLITORLINEX
 706+ F6E6 2A D8 F5     CheckForOnScreen:       ld      hl,(x1)
 707+ F6E9 ED 5B DC F5                          ld      de,(x2)
 708+ F6ED CB 7C        .X1X2NegativeCheck:     bit     7,h                             ; if they are both negative then bail out
 709+ F6EF 28 03                                jr      z,.X1X2NotNegative
 710+ F6F1 CB 7A                                bit     7,d
 711+ F6F3 C0           .X1X2IsNegative:        ret     nz
 712+ F6F4 7C           .X1X2NotNegative:       ld      a,h                             ; if they are both not negative then if one is negative that is good
 713+ F6F5 AA                                   xor     d
 714+ F6F6 FA 01 F7                             jp      m,.X1X2SpanScreen
 715+ F6F9 7C           .X1X2BothPositive:      ld      a,h                             ; if x1 or x2 high is zero then at least one pixel is on screen
 716+ F6FA A7                                   and     a
 717+ F6FB CA 01 F7                             jp      z,.X1X2SpanScreen
 718+ F6FE 7A                                   ld      a,d                             ; if x1 was > 255 then if x2 > 255 bail out
 719+ F6FF A7                                   and     a
 720+ F700 C0                                   ret     nz
 721+ F701 2A DA F5     .X1X2SpanScreen:        ld      hl,(y1)
 722+ F704 ED 5B DE F5                          ld      de,(y2)
 723+ F708 CB 7C        .Y1Y2NegativeCheck:     bit     7,h                             ; if they are both negative then bail out
 724+ F70A 28 03                                jr      z,.Y1Y2NotNegative
 725+ F70C CB 7A                                bit     7,d
 726+ F70E C0           .Y1Y2IsNegative:        ret     nz
 727+ F70F 7C           .Y1Y2NotNegative:       ld      a,h                             ; if they are both not negative then if one is negative that is good
 728+ F710 AA                                   xor     d
 729+ F711 FA 23 F7                             jp      m,.Y1Y2SpanScreen
 730+ F714 01 80 00     .Y1Y2BothPositive:      ld      bc,128                          ; if they are both positive and at least one is < 128 then carry on
 731+ F717 CD 5C 99                             call    CompareHLBC
 732+ F71A 38 07                                jr      c,.Y1Y2SpanScreen
 733+ F71C EB                                   ex      de,hl                           ; save y1 into de
 734+ F71D CD 5C 99                             call    CompareHLBC
 735+ F720 38 01                                jr      c,.Y1Y2SpanScreen
 736+ F722 C9                                   ret
 737+ F723              .Y1Y2SpanScreen:
 738+ F723 CD 3F 99     CheckForHorizontal:     call    CompareHLDESame                 ; de = saved y1 , hl = y2
 739+ F726 CA 52 F5                             jp      z, l2_drawVertClip
 740+ F729 2A D8 F5     CheckForVertical:       ld      hl,(x1)
 741+ F72C ED 5B DC F5                          ld      de,(x2)
 742+ F730 CD 3F 99                             call    CompareHLDESame
 743+ F733 CA 83 F5                             jp      z, l2_drawHorzClip
 744+ F736                                      ; Need horizontal and vertical optimisation code in at thispoint
 745+ F736 2A DA F5     CheckForSwap:           ld      hl,(y1)                         ; if (y1 > y2)
 746+ F739 ED 5B DE F5                          ld      de,(y2)                         ; .
 747+ F73D CD 28 99                             call    CompareHLDESgn                  ; .
 748+ F740 DA 46 F7                             jp      c,.NoSwapCoords
 749+ F743 CD 19 F6     .SwapCoords:            call    SwapCoords
 750+ F746                                      ; Default in sign and clip ranges, sign 16 bit for now
 751+ F746 21 00 00     .NoSwapCoords:          ld      hl,0                            ; clip_xmin = 0;
 752+ F749 22 FD F5                             ld      (clip_xmin),hl                  ; .
 753+ F74C 2E FF                                ld      l,255                           ; clip xmax = 255;
 754+ F74E 22 FB F5                             ld      (clip_xmax),hl                  ; .
 755+ F751 21 01 00                             ld      hl,1                            ; sign_x = 1
 756+ F754 22 FF F5                             ld      (sign_x),hl                     ; .
 757+ F757                                      ; if moving right to left then swap signs and clip
 758+ F757 2A D8 F5                             ld      hl,(x1)                         ; if x1 > x2
 759+ F75A ED 5B DC F5                          ld      de,(x2)                         ; .
 760+ F75E CD 28 99                             call    CompareHLDESgn                  ; .
 761+ F761 38 2C                                jr      c,.X1tlX2                       ; .
 762+ F763 21 FF FF     .X1gteX2:               ld      hl, -1                          ;        sign_x = 01
 763+ F766 22 FF F5                             ld      (sign_x),hl                     ;        .
 764+ F769 2A D8 F5                             ld      hl,(x1)                         ;        x1 = -x1;
 765+ F76C                                      macronegate16hl                         ;        .
 765+ F76C AF          >					xor 	a
 765+ F76D 95          >					sub 	l
 765+ F76E 6F          >					ld 		l,a
 765+ F76F 9F          >					sbc 	a,a
 765+ F770 94          >					sub 	h
 765+ F771 67          >					ld 		h,a
 766+ F772 22 D8 F5                             ld      (x1),hl                         ;        .
 767+ F775 ED 5B DC F5                          ld      de,(x2)                         ;        x2 = -x2;
 768+ F779                                      macronegate16de                         ;        .
 768+ F779 AF          >					xor 	a
 768+ F77A 93          >                    sub 	e
 768+ F77B 5F          >                    ld 		e,a
 768+ F77C 9F          >                    sbc 	a,a
 768+ F77D 92          >                    sub 	d
 768+ F77E 57          >                    ld 		d,a
 769+ F77F ED 53 DC F5                          ld      (x2),de                         ;        .
 770+ F783 21 01 FF                             ld      hl,-255                         ;        clip_xmin =-255;
 771+ F786 22 FD F5                             ld      (clip_xmin),hl                  ;        .
 772+ F789 21 00 00                             ld      hl,0                            ;        clip_xmax = 0;
 773+ F78C 22 FB F5                             ld      (clip_xmax),hl                  ;        .
 774+ F78F              .X1tlX2:                                                        ;
 775+ F78F                                      ; calculate deltas
 776+ F78F 2A DC F5     .DxEquX2MinusX1:        ld      hl,(x2)                         ; delta_x = x2 - x1;
 777+ F792 ED 5B D8 F5                          ld      de,(x1)                         ; .
 778+ F796                                      ClearCarryFlag                          ; .
 778+ F796 B7          >                        or a
 779+ F797 ED 52                                sbc     hl,de                           ; .
 780+ F799 22 02 F6                             ld      (delta_x),hl                    ; .
 781+ F79C 2A DE F5     .DyEquY2MinusY1:        ld      hl,(y2)                         ; delta_y = y2 - y1;
 782+ F79F ED 5B DA F5                          ld      de,(y1)                         ; .
 783+ F7A3                                      ClearCarryFlag                          ; .
 783+ F7A3 B7          >                        or a
 784+ F7A4 ED 52                                sbc     hl,de                           ; .
 785+ F7A6 22 04 F6                             ld      (delta_y),hl                    ; .
 786+ F7A9 ED 5B 02 F6  .ScaleDeltaXY:          ld      de,(delta_x)                    ; we already have delta y but x could be negative
 787+ F7AD 06 00                                ld      b,0
 788+ F7AF CB 7A                                bit     7,d
 789+ F7B1 CA BB F7                             jp      z,.DeltaYABSDone                ; de = | de |, b = 1 to denote negative needs resetting
 790+ F7B4 04                                   inc     b
 791+ F7B5                                      macronegate16de
 791+ F7B5 AF          >					xor 	a
 791+ F7B6 93          >                    sub 	e
 791+ F7B7 5F          >                    ld 		e,a
 791+ F7B8 9F          >                    sbc 	a,a
 791+ F7B9 92          >                    sub 	d
 791+ F7BA 57          >                    ld 		d,a
 792+ F7BB              .DeltaYABSDone:
 793+ F7BB ~            /*.ScaleHighLoop:         ld      a,d
 794+ F7BB ~                                    or      h
 795+ F7BB ~                                    jr      z,.HighScaleDone
 796+ F7BB ~                                    ShiftDERight1
 797+ F7BB ~                                    ShiftHLRight1
 798+ F7BB ~                                    jp      .ScaleHighLoop
 799+ F7BB ~            .HighScaleDone:
 800+ F7BB ~            .LowScaleLoop:          ld      a,e
 801+ F7BB ~                                    or      l
 802+ F7BB ~                                    and     $80
 803+ F7BB ~                                    jr      z,.LowScaleDone
 804+ F7BB ~                                    ShiftDERight1
 805+ F7BB ~                                    ShiftHLRight1
 806+ F7BB ~                                    jp      .LowScaleLoop
 807+ F7BB ~            .LowScaleDone:          bit     0,b
 808+ F7BB ~                                    jr      z,.DeltaDone
 809+ F7BB ~            .SortDXSign:            macronegate16de
 810+ F7BB ~            .DeltaDone:             ld      (delta_x),de
 811+ F7BB ~                                    ld      (delta_y),hl*/
 812+ F7BB 2A 02 F6     .DeltaXStepCalc:        ld     hl, (delta_x)
 813+ F7BE                                      ClearCarryFlag                          ; delta_x_step = 2 * delta_x;
 813+ F7BE B7          >                        or a
 814+ F7BF ED 6A                                adc     hl,hl                           ; .
 815+ F7C1 22 08 F6                             ld      (delta_x_step),hl               ; .
 816+ F7C4 2A 04 F6     .DeltaYStepCalc:        ld     hl, (delta_y)
 817+ F7C7                                      ClearCarryFlag                          ; delta_y_step = 2 * delta_y;
 817+ F7C7 B7          >                        or a
 818+ F7C8 ED 6A                                adc     hl,hl                           ; .
 819+ F7CA 22 0A F6                             ld      (delta_y_step),hl               ; .
 820+ F7CD 2A D8 F5                             ld      hl,(x1)                         ; x_pos = x1;
 821+ F7D0 22 F3 F5                             ld      (x_pos),hl                      ; .
 822+ F7D3 ED 5B DA F5                          ld      de,(y1)                         ; y_pos = y1;
 823+ F7D7 ED 53 F5 F5                          ld      (y_pos),de                      ; .
 824+ F7DB                                      ; check if we are workign on dx or dy
 825+ F7DB 2A 02 F6     .CompareDxDy:           ld      hl,(delta_x)                    ; if (delta_x >= delta_y)
 826+ F7DE ED 5B 04 F6                          ld      de,(delta_y)
 827+ F7E2 CD 28 99                             call    CompareHLDESgn
 828+ F7E5 DA 2C FA                             jp      c, LineDrawDxLTDy
 829+ F7E8              ;.......................DxGteDy branch.............................................................................................
 830+ F7E8 2A 0A F6     LineDrawDxGteDy:        ld      hl,(delta_y_step)               ;       error = delta_y_step - delta_x;
 831+ F7EB ED 5B 02 F6                          ld      de,(delta_x)                    ;       .
 832+ F7EF                                      ClearCarryFlag                          ;       .
 832+ F7EF B7          >                        or a
 833+ F7F0 ED 52                                sbc     hl,de                           ;       .
 834+ F7F2 22 14 F6                             ld      (error),hl                      ;       .
 835+ F7F5                                      ZeroA                                   ;       set exit false (0 == false)
 835+ F7F5 AF          >                        xor a
 836+ F7F6 32 16 F6                             ld      (set_exit),a                    ;       .
 837+ F7F9                                      ; clipping of negative y1
 838+ F7F9 2A DA F5                             ld      hl,(y1)                         ;       if (y1 < 0)
 839+ F7FC CB 7C                                bit     7,h                             ;       .
 840+ F7FE CA 96 F8                             jp      z,.y1GTE0                       ;       .
 841+ F801 2A DA F5     .y1LT0:                 ld      hl,(y1)                         ;           temp = (2 * (0 - y1) - 1) * delta_x;
 842+ F804                                      macronegate16hl                         ;               hl = |y1|
 842+ F804 AF          >					xor 	a
 842+ F805 95          >					sub 	l
 842+ F806 6F          >					ld 		l,a
 842+ F807 9F          >					sbc 	a,a
 842+ F808 94          >					sub 	h
 842+ F809 67          >					ld 		h,a
 843+ F80A                                      ClearCarryFlag
 843+ F80A B7          >                        or a
 844+ F80B ED 6A                                adc     hl,hl                           ;               hl = (2 * |y1|)
 845+ F80D 2B                                   dec     hl                              ;               hl = (2 * |y1| - 1)
 846+ F80E ED 5B 02 F6                          ld      de,(delta_x)                    ;               hl = hl * delta_x
 847+ F812 CD D7 91                             call    mulHLbyDE2sc                    ;               .
 848+ F815 22 E8 F5                             ld      (temp),hl                       ;               save to temp
 849+ F818 44 4D                                ld      bc,hl                           ;            msd = temp / delta_y_step
 850+ F81A ED 5B 0A F6                          ld      de,(delta_y_step)               ;               BC = BC / DE, HL = BC % DE
 851+ F81E CD FB 96                             call    Floor_DivQ                      ;               .
 852+ F821 ED 43 12 F6                          ld      (msd),bc                        ;               .
 853+ F825 2A F3 F5                             ld      hl,(x_pos)                      ;            x_pos += msd
 854+ F828                                      ClearCarryFlag
 854+ F828 B7          >                        or a
 855+ F829 ED 4A                                adc     hl,bc                           ;            .
 856+ F82B 22 F3 F5                             ld      (x_pos),hl                      ;            .
 857+ F82E ED 5B FB F5                          ld      de,(clip_xmax)                  ;            if (x_pos >= clip_xmax)
 858+ F832 CD 3F 99                             call    CompareHLDESame                 ;            .
 859+ F835 CA 3C F8                             jp      z,.xposLTEClipxmax              ;            .
 860+ F838 CD 28 99                             call    CompareHLDESgn                  ;            .
 861+ F83B D0                                   ret     nc                              ;               return
 862+ F83C 2A F3 F5     .xposLTEClipxmax:       ld      hl,(x_pos)                      ;            if (x_pos >= clip_xmin)
 863+ F83F ED 5B FD F5                          ld      de,(clip_xmin)                  ;            .
 864+ F843 CD 28 99                             call    CompareHLDESgn                  ;            .
 865+ F846 DA 96 F8                             jp      c,.xposLTxmin                   ;            .
 866+ F849 2A 12 F6     .xposGTExmin:           ld      hl,(msd)                        ;               rem = temp - (msd * delta_y_step) (its really IY from floor_divq)
 867+ F84C ED 5B 0A F6                          ld      de,(delta_y_step)               ;                   de = msd * delta_y_step
 868+ F850 CD D7 91                             call    mulHLbyDE2sc                    ;                   .
 869+ F853 EB                                   ex      de,hl                           ;                   .
 870+ F854 2A E8 F5                             ld      hl,(temp)                       ;                   hl = temp - de
 871+ F857                                      ClearCarryFlag                          ;                   .
 871+ F857 B7          >                        or a
 872+ F858 ED 52                                sbc     hl,de                           ;                   .
 873+ F85A 22 17 F6                             ld      (rem),hl                        ;                   .
 874+ F85D 11 00 00                             ld      de,0                            ;               y_pos = 0
 875+ F860 ED 53 F5 F5                          ld      (y_pos),de                      ;               .
 876+ F864 ED 5B 17 F6                          ld      de,(rem)                        ;               error -= rem + delta_x
 877+ F868                                      ClearCarryFlag
 877+ F868 B7          >                        or a
 878+ F869 ED 5A                                adc     hl,de                           ;                   de = rem+delta_x
 879+ F86B EB                                   ex      de,hl                           ;                   .
 880+ F86C 2A 14 F6                             ld      hl,(error)                      ;                   hl = error - de
 881+ F86F                                      ClearCarryFlag                          ;                   .
 881+ F86F B7          >                        or a
 882+ F870 ED 52                                sbc     hl,de                           ;                   .
 883+ F872 22 14 F6                             ld      (error),hl                      ;                   write to error
 884+ F875 2A 17 F6                             ld      hl,(rem)                        ;               if (rem > 0)
 885+ F878 7C                                   ld      a,h                             ;               .
 886+ F879 B5                                   or      l                               ;               .
 887+ F87A CA 91 F8                             jp      z,.remLte0                      ;               .
 888+ F87D 2A F3 F5     .remGT0:                ld      hl,(x_pos)                      ;                   x_pos += 1;
 889+ F880 23                                   inc     hl                              ;                   .
 890+ F881 22 F3 F5                             ld      (x_pos),hl                      ;                   .
 891+ F884 2A 14 F6                             ld      hl,(error)                      ;                   error += delta_y_step;
 892+ F887 ED 5B 0A F6                          ld      de,(delta_y_step)               ;                   .
 893+ F88B                                      ClearCarryFlag                          ;                   .
 893+ F88B B7          >                        or a
 894+ F88C ED 5A                                adc     hl,de                           ;                   .
 895+ F88E 22 14 F6                             ld      (error),hl                      ;                   .
 896+ F891 3E 01        .remLte0:               ld      a,1                             ;               set exit = true
 897+ F893 32 16 F6                             ld      (set_exit),a                    ;               .
 898+ F896              .xposLTxmin:
 899+ F896 3A 16 F6     .y1GTE0:                ld      a,(set_exit)                    ;           if (!set_exit && x1 < clip_xmin)
 900+ F899 A7                                   and     a                               ;           .
 901+ F89A C2 2A F9                             jp      nz,.exit_false                  ;           .   Exit if set_exit is true
 902+ F89D 2A D8 F5                             ld      hl,(x1)                         ;           .
 903+ F8A0 ED 5B FD F5                          ld      de,(clip_xmin)                  ;           .   Exit if x1 > xmin
 904+ F8A4 CD 28 99                             call    CompareHLDESgn                  ;           .
 905+ F8A7 D2 2A F9                             jp      nc,.exit_false                  ;           .
 906+ F8AA EB                                   ex      de,hl                           ;               temp = delta_y_step * (clip_xmin - x1)
 907+ F8AB ED 5B D8 F5                          ld      de,(x1)                         ;                   (clip_xmin - x1) (already have clip_xmin in de)
 908+ F8AF                                      ClearCarryFlag                          ;                   .
 908+ F8AF B7          >                        or a
 909+ F8B0 ED 52                                sbc     hl,de                           ;                   .
 910+ F8B2 ED 5B 0A F6                          ld      de,(delta_y_step)               ;                   hl = delta_y_step * (clip_xmin - x1)
 911+ F8B6 CD D7 91                             call    mulHLbyDE2sc                    ;                   .
 912+ F8B9 22 E8 F5                             ld      (temp),hl                       ;                   .
 913+ F8BC 44 4D        .msdEQtempDIVdxstep:    ld      bc,hl                           ;               msd = temp / delta_x_step
 914+ F8BE ED 5B 08 F6                          ld      de,(delta_x_step)               ;                  BC = BC / DE, HL = BC % DE
 915+ F8C2 CD FB 96                             call    Floor_DivQ                      ;                  .
 916+ F8C5 ED 43 12 F6                          ld      (msd),bc                        ;                  .
 917+ F8C9 E5 FD E1                             ld      iy,hl                           ;                  save BC%DE into HL (temp % delta x step0
 918+ F8CC 2A F5 F5     .yposPlusmsd:           ld      hl,(y_pos)                      ;               y_pos += msd
 919+ F8CF                                      ClearCarryFlag                          ;                   bc already is msd
 919+ F8CF B7          >                        or a
 920+ F8D0 ED 4A                                adc     hl,bc                           ;                   hl += bc
 921+ F8D2 22 F5 F5                             ld      (y_pos),hl                      ;                   .
 922+ F8D5 FD E5 E1                             ld      hl,iy                           ;               rem = temp % delta_x_step (which is in IY)
 923+ F8D8 22 17 F6                             ld      (rem),hl                        ;               .
 924+ F8DB 2A F5 F5                             ld      hl,(y_pos)                      ;           if ((y_pos > 127) || (y_pos == 127 && rem >= delta_x))
 925+ F8DE 11 7F 00                             ld      de,127                          ;           .
 926+ F8E1 CD 3F 99                             call    CompareHLDESame                 ;           .    if y_pos != clipxmax skip the abort test
 927+ F8E4 20 0B                                jr      nz,.YPosNotClipymax             ;           .
 928+ F8E6 2A 17 F6                             ld      hl,(rem)                        ;           .    if rem < delta_y  skip the abort test
 929+ F8E9 ED 5B 02 F6                          ld      de,(delta_x)                    ;           .
 930+ F8ED CD 28 99                             call    CompareHLDESgn                  ;           .
 931+ F8F0 D8                                   ret     c                               ;           .
 932+ F8F1 EB           .YPosNotClipymax:       ex      de,hl                           ;           .    swap over xpos and max to compare xpos > xmax
 933+ F8F2 CD 28 99                             call    CompareHLDESgn                  ;           .    if xpos > clipxmax then return (i.e clipxmax - xpos had a carry)
 934+ F8F5 D8                                   ret     c
 935+ F8F6 2A FD F5     .yposLT127:             ld      hl,(clip_xmin)                  ;               x_pos = clip_xmin;
 936+ F8F9 22 F3 F5                             ld      (x_pos),hl                      ;               .
 937+ F8FC 2A 14 F6                             ld      hl,(error)                      ;               error += rem
 938+ F8FF ED 5B 17 F6                          ld      de,(rem)                        ;               .
 939+ F903                                      ClearCarryFlag                          ;               .
 939+ F903 B7          >                        or a
 940+ F904 ED 5A                                adc     hl,de                           ;               .
 941+ F906 22 14 F6                             ld      (error),hl                      ;               .
 942+ F909 2A 17 F6                             ld      hl,(rem)                        ;               if (rem >= delta_x)
 943+ F90C ED 5B 02 F6                          ld      de,(delta_x)                    ;               .
 944+ F910 CD 28 99                             call    CompareHLDESgn                  ;               .
 945+ F913 DA 2A F9                             jp      c,.remLTDeltaX                  ;               .
 946+ F916 2A F5 F5     .remGTEDeltaX:          ld      hl,(y_pos)                      ;                   y_pos++
 947+ F919 23                                   inc     hl
 948+ F91A 22 F5 F5                             ld      (y_pos),hl
 949+ F91D 2A 14 F6                             ld      hl,(error)                      ;                    error -= delta_x_step;
 950+ F920 ED 5B 08 F6                          ld      de,(delta_x_step)               ;                    .
 951+ F924                                      ClearCarryFlag                          ;                    .
 951+ F924 B7          >                        or a
 952+ F925 ED 52                                sbc     hl,de                           ;                    .
 953+ F927 22 14 F6                             ld      (error),hl                      ;                    .
 954+ F92A              .remLTDeltaX:
 955+ F92A 2A DC F5     .exit_false:            ld      hl,(x2)                         ;           x_pos_end = x2;
 956+ F92D 22 F7 F5                             ld      (x_pos_end),hl                  ;           .
 957+ F930 2A DE F5                             ld      hl,(y2)                         ;           if (y2 > 127)
 958+ F933 11 7F 00                             ld      de,127                          ;           .
 959+ F936 CD 3F 99                             call    CompareHLDESame                 ;           .   if y2 is zero fails check
 960+ F939 CA 90 F9                             jp      z,.y2LTE127                     ;           .
 961+ F93C CD 28 99                             call    CompareHLDESgn                  ;           .   if y2 < 127 then there is carry so fails check
 962+ F93F DA 90 F9                             jp      c,.y2LTE127                      ;           .
 963+ F942 21 7F 00     .y2GT127:               ld      hl,127                          ;               temp = delta_x_step * (127 - y1) + delta_x;
 964+ F945 ED 5B DA F5                          ld      de,(y1)                         ;                   hl = 127-y1
 965+ F949                                      ClearCarryFlag                          ;
 965+ F949 B7          >                        or a
 966+ F94A ED 52                                sbc     hl,de
 967+ F94C ED 5B 08 F6                          ld      de,(delta_x_step)               ;                   hl = delta_x_step * (127-y1)
 968+ F950 CD D7 91                             call    mulHLbyDE2sc                    ;                   .
 969+ F953 ED 5B 02 F6                          ld      de,(delta_x)                    ;                   hl += delta_x
 970+ F957                                      ClearCarryFlag                          ;                   .
 970+ F957 B7          >                        or a
 971+ F958 ED 5A                                adc     hl,de                           ;                   .
 972+ F95A 22 E8 F5                             ld      (temp),hl
 973+ F95D 44 4D                                ld      bc,hl
 974+ F95F ED 5B 0A F6                          ld      de,(delta_y_step)               ;               msd = temp / delta y step
 975+ F963 CD FB 96                             call    Floor_DivQ                      ;               .
 976+ F966 ED 43 12 F6                          ld      (msd),bc                        ;               .
 977+ F96A 2A D8 F5                             ld      hl,(x1)                         ;               x_pos_end = x1 + msd;
 978+ F96D                                      ClearCarryFlag                          ;               .
 978+ F96D B7          >                        or a
 979+ F96E ED 4A                                adc     hl,bc                           ;               .
 980+ F970 22 F7 F5                             ld      (x_pos_end),hl                  ;               .
 981+ F973 2A 12 F6                             ld      hl,(msd)                        ;               if ((temp - msd * delta_y_step) == 0) --x_pos_end
 982+ F976 ED 5B 0A F6                          ld      de,(delta_y_step)               ;               .
 983+ F97A CD D7 91                             call    mulHLbyDE2sc                    ;               .
 984+ F97D EB                                   ex      de,hl                           ;               .
 985+ F97E 2A E8 F5                             ld      hl,(temp)                       ;               .
 986+ F981                                      ClearCarryFlag                          ;               .
 986+ F981 B7          >                        or a
 987+ F982 ED 52                                sbc     hl,de                           ;               .
 988+ F984 7C                                   ld      a,h                             ;               .
 989+ F985 B5                                   or      l                               ;               .
 990+ F986 C2 90 F9                             jp      nz,.NotTheSame                  ;               .
 991+ F989 2A F7 F5     .IsTheSame:             ld      hl,(x_pos_end)                  ;                   --x_pos_end
 992+ F98C 2B                                   dec     hl                              ;                   .
 993+ F98D 22 F7 F5                             ld      (x_pos_end),hl                  ;                   .
 994+ F990              .NotTheSame:
 995+ F990 2A F7 F5     .y2LTE127:              ld      hl,(x_pos_end)                  ;           x_pos_end = min (x_pos_end,clip_xmax) + 1
 996+ F993 ED 5B FB F5                          ld      de,(clip_xmax)                  ;           .
 997+ F997 CD 28 99                             call    CompareHLDESgn                  ;           .
 998+ F99A D2 A7 F9                             jp      nc,.xposgtexmax                 ;           .
 999+ F99D 2A F7 F5     .xposltxmax:            ld      hl,(x_pos_end)                  ;           .
1000+ F9A0 23                                   inc     hl                              ;               x_pos_end+1
1001+ F9A1 22 F7 F5                             ld      (x_pos_end),hl                  ;               .
1002+ F9A4 C3 AC F9                             jp      .DoneXposAdjust                 ;               .
1003+ F9A7 13           .xposgtexmax:           inc     de                              ;               else
1004+ F9A8 ED 53 F7 F5                          ld      (x_pos_end),de                  ;               clip_xmax+1
1005+ F9AC 3A FF F5     .DoneXposAdjust:        ld      a,(sign_x)                      ;           if (sign_x == -1)
1006+ F9AF 3C                                   inc     a
1007+ F9B0 C2 CB F9                             jp      nz,.SignNotMinus1
1008+ F9B3 2A F3 F5     .SignEquMinus1:         ld      hl,(x_pos)                      ;               x_pos = -x_pos;
1009+ F9B6                                      macronegate16hl
1009+ F9B6 AF          >					xor 	a
1009+ F9B7 95          >					sub 	l
1009+ F9B8 6F          >					ld 		l,a
1009+ F9B9 9F          >					sbc 	a,a
1009+ F9BA 94          >					sub 	h
1009+ F9BB 67          >					ld 		h,a
1010+ F9BC 22 F3 F5                             ld      (x_pos),hl
1011+ F9BF 2A F7 F5                             ld      hl,(x_pos_end)                  ;               x_pos_end = -x_pos_end;
1012+ F9C2                                      macronegate16hl
1012+ F9C2 AF          >					xor 	a
1012+ F9C3 95          >					sub 	l
1012+ F9C4 6F          >					ld 		l,a
1012+ F9C5 9F          >					sbc 	a,a
1012+ F9C6 94          >					sub 	h
1012+ F9C7 67          >					ld 		h,a
1013+ F9C8 22 F7 F5                             ld      (x_pos_end),hl
1014+ F9CB              .y2LTE27:
1015+ F9CB              .SignNotMinus1:
1016+ F9CB ED 5B 0A F6                          ld      de,(delta_y_step)               ;        delta_x_step -= delta_y_step;
1017+ F9CF 2A 08 F6                             ld      hl,(delta_x_step)               ;        .
1018+ F9D2                                      ClearCarryFlag                          ;        .
1018+ F9D2 B7          >                        or a
1019+ F9D3 ED 52                                sbc     hl,de                           ;        .
1020+ F9D5 22 08 F6                             ld      (delta_x_step),hl               ;        .
1021+ F9D8 2A F3 F5     .PlottingLoop:          ld      hl,(x_pos)                      ;        while (x_pos != x_pos_end)
1022+ F9DB ED 5B F7 F5                          ld      de,(x_pos_end)                  ;        .
1023+ F9DF CD 3F 99                             call    CompareHLDESame                 ;        .
1024+ F9E2 C8                                   ret     z                               ;        .
1025+ F9E3 2A F3 F5                             ld      hl,(x_pos)                      ;               drawpixel at xpos, ypos, Colour
1026+ F9E6 4D                                   ld      c,l                             ;               .
1027+ F9E7 2A F5 F5                             ld      hl,(y_pos)                      ;               .
1028+ F9EA 45                                   ld      b,l                             ;               .
1029+ F9EB 3E BF                                ld      a,$BF                           ;               .
1030+ F9ED CD B6 E2     .PlotPixel:             call    l2_plot_pixel                   ;               .
1031+ F9F0 2A 14 F6                             ld      hl,(error)                      ;               if (error >= 0)
1032+ F9F3 CB 7C                                bit     7,h                             ;               .
1033+ F9F5 C2 0F FA                             jp      nz,.errorLT0                    ;               .
1034+ F9F8 2A F5 F5     .errorGTE0:             ld	    hl,(y_pos)                      ;                   ++y_pos;
1035+ F9FB 23                                   inc	    hl                              ;                   .
1036+ F9FC 22 F5 F5                             ld	    (y_pos),hl                      ;                   .
1037+ F9FF 2A 14 F6                             ld	    hl,(error)                      ;                   error -= delta_x_step;
1038+ FA02 ED 5B 08 F6                          ld	    de,(delta_x_step)               ;                   .
1039+ FA06                                      ClearCarryFlag                          ;                   .
1039+ FA06 B7          >                        or a
1040+ FA07 ED 52                                sbc	    hl,de                           ;                   .
1041+ FA09 22 14 F6                             ld	    (error),hl                      ;                   .
1042+ FA0C C3 1C FA                             jp      .DoneErrorAdjust                ;                   .
1043+ FA0F 2A 14 F6     .errorLT0:              ld	    hl,(error)                      ;                   error += delta_y_step;
1044+ FA12 ED 5B 0A F6                          ld	    de,(delta_y_step)
1045+ FA16                                      ClearCarryFlag
1045+ FA16 B7          >                        or a
1046+ FA17 ED 5A                                adc	    hl,de
1047+ FA19 22 14 F6                             ld	    (error),hl
1048+ FA1C ED 5B FF F5  .DoneErrorAdjust:       ld      de,(sign_x)
1049+ FA20 2A F3 F5                             ld      hl,(x_pos)
1050+ FA23                                      ClearCarryFlag
1050+ FA23 B7          >                        or a
1051+ FA24 ED 5A                                adc     hl,de
1052+ FA26 22 F3 F5                             ld      (x_pos),hl
1053+ FA29 C3 D8 F9                             jp      .PlottingLoop
1054+ FA2C              ;.......................DxGltDy branch.............................................................................................
1055+ FA2C              LineDrawDxLTDy:         ;ret
1056+ FA2C 2A 08 F6                             ld      hl,(delta_x_step)               ;       error = delta_x_step - delta_y;
1057+ FA2F ED 5B 04 F6                          ld      de,(delta_y)
1058+ FA33                                      ClearCarryFlag
1058+ FA33 B7          >                        or a
1059+ FA34 ED 52                                sbc     hl,de
1060+ FA36 22 14 F6                             ld      (error),hl
1061+ FA39                                      ZeroA                                   ;        set exit false (0 == false)
1061+ FA39 AF          >                        xor a
1062+ FA3A 32 16 F6                             ld      (set_exit),a
1063+ FA3D 2A D8 F5                             ld      hl,(x1)                         ;        if (x1 < clip_xmin)
1064+ FA40 ED 5B FD F5                          ld      de,(clip_xmin)                  ;        .
1065+ FA44 CD 28 99                             call    CompareHLDESgn                  ;        .
1066+ FA47 D2 DB FA                             jp      nc,.x1GTEClipXmin               ;        .
1067+ FA4A ED 5B D8 F5  .x1LTClipXmin:          ld      de,(x1)                         ;           temp = (2 * (cllp_xmin - x1) - 1) * delta_y;
1068+ FA4E 2A FD F5                             ld      hl,(clip_xmin)                  ;               hl = clip_xmin - x1
1069+ FA51                                      ClearCarryFlag                          ;               .
1069+ FA51 B7          >                        or a
1070+ FA52 ED 52                                sbc     hl,de                           ;               .
1071+ FA54                                      ClearCarryFlag
1071+ FA54 B7          >                        or a
1072+ FA55 ED 6A                                adc     hl,hl                           ;               hl = (2* hl)
1073+ FA57 2B                                   dec     hl                              ;               hl = (2 *  hl - 1)
1074+ FA58 ED 5B 04 F6                          ld      de,(delta_y)                    ;               hl = hl  * delta_y
1075+ FA5C CD D7 91                             call    mulHLbyDE2sc                    ;               .
1076+ FA5F 22 E8 F5                             ld      (temp),hl                       ;               .
1077+ FA62 44 4D                                ld      bc,hl                           ;            msd = temp / delta_x_step
1078+ FA64 ED 5B 08 F6                          ld      de,(delta_x_step)               ;               BC = BC / DE, HL = BC % DE
1079+ FA68 CD FB 96                             call    Floor_DivQ                      ;               .
1080+ FA6B ED 43 12 F6                          ld      (msd),bc                        ;               .
1081+ FA6F 2A F5 F5                             ld      hl,(y_pos)                      ;            y_pos += msd
1082+ FA72                                      ClearCarryFlag
1082+ FA72 B7          >                        or a
1083+ FA73 ED 4A                                adc     hl,bc                           ;            .
1084+ FA75 22 F5 F5                             ld      (y_pos),hl                      ;            .
1085+ FA78 11 7F 00                             ld      de,127                          ;            if (y_pos >= 127)
1086+ FA7B CD 3F 99                             call    CompareHLDESame                 ;            .
1087+ FA7E CA 85 FA                             jp      z,.yposGT127                    ;            .
1088+ FA81 CD 28 99                             call    CompareHLDESgn                  ;            .
1089+ FA84 D0                                   ret     nc                              ;               return
1090+ FA85 2A F5 F5     .yposGT127:             ld      hl,(y_pos)                      ;            if (y_pos >= 0)
1091+ FA88 CB 7C                                bit     7,h
1092+ FA8A C2 DB FA                             jp      nz,.yposLT0
1093+ FA8D 2A 12 F6     .yposGT0:               ld      hl,(msd)                        ;               rem = temp - (msd * delta_x_step)
1094+ FA90 ED 5B 08 F6                          ld      de,(delta_x_step)               ;                   de = msd * delta_x_step
1095+ FA94 CD D7 91                             call    mulHLbyDE2sc                    ;                   .
1096+ FA97 EB                                   ex      de,hl                           ;                   .
1097+ FA98 2A E8 F5                             ld      hl,(temp)                       ;                   hl = temp - de
1098+ FA9B                                      ClearCarryFlag                          ;                   .
1098+ FA9B B7          >                        or a
1099+ FA9C ED 52                                sbc     hl,de                           ;                   .
1100+ FA9E 22 17 F6                             ld      (rem),hl                        ;                   .
1101+ FAA1 ED 5B FD F5                          ld      de,(clip_xmin)                  ;               x_pos = clip_xmin
1102+ FAA5 ED 53 F3 F5                          ld      (x_pos),de                      ;               .
1103+ FAA9 ED 5B 17 F6                          ld      de,(rem)                        ;               error -= rem + delta_y
1104+ FAAD                                      ClearCarryFlag                          ;               .
1104+ FAAD B7          >                        or a
1105+ FAAE ED 5A                                adc     hl,de                           ;                   de = rem+delta_x
1106+ FAB0 EB                                   ex      de,hl                           ;                   .
1107+ FAB1 2A 14 F6                             ld      hl,(error)                      ;                   hl = error - de
1108+ FAB4                                      ClearCarryFlag                          ;                   .
1108+ FAB4 B7          >                        or a
1109+ FAB5 ED 52                                sbc     hl,de                           ;                   .
1110+ FAB7 22 14 F6                             ld      (error),hl                      ;                   .
1111+ FABA 2A 17 F6                             ld      hl,(rem)                        ;               if (rem > 0)
1112+ FABD 7C                                   ld      a,h                             ;               .
1113+ FABE B5                                   or      l                               ;               .
1114+ FABF CA D6 FA                             jp      z,.remLte0                      ;               .
1115+ FAC2 2A F5 F5     .remGT0:                ld      hl,(y_pos)                      ;                   y_pos += 1;
1116+ FAC5 23                                   inc     hl
1117+ FAC6 22 F5 F5                             ld      (y_pos),hl
1118+ FAC9 2A 14 F6                             ld      hl,(error)                      ;                   error += delta_x_step;
1119+ FACC ED 5B 08 F6                          ld      de,(delta_x_step)
1120+ FAD0                                      ClearCarryFlag
1120+ FAD0 B7          >                        or a
1121+ FAD1 ED 5A                                adc     hl,de
1122+ FAD3 22 14 F6                             ld      (error),hl
1123+ FAD6 3E 01        .remLte0:               ld      a,1                             ;               set exit = true
1124+ FAD8 32 16 F6                             ld      (set_exit),a                    ;               .
1125+ FADB
1126+ FADB              .yposLT0:
1127+ FADB 3A 16 F6     .x1GTEClipXmin:         ld      a,(set_exit)                    ;        if (!set_exit && y1 < 0)
1128+ FADE A7                                   and     a                               ;        .
1129+ FADF C2 69 FB                             jp      nz,.exit_false                  ;        .  if exit is 1 then its true so exit branch
1130+ FAE2 2A DA F5                             ld      hl,(y1)                         ;        .  if y1 is positive (including 0) then exit branch
1131+ FAE5 CB 7C                                bit     7,h                             ;        .
1132+ FAE7 CA 69 FB                             jp      z,.exit_false                   ;        .
1133+ FAEA 2A DA F5                             ld      hl,(y1)                         ;           temp = delta_x_step * (0 - y1)
1134+ FAED                                      macronegate16hl                         ;           .
1134+ FAED AF          >					xor 	a
1134+ FAEE 95          >					sub 	l
1134+ FAEF 6F          >					ld 		l,a
1134+ FAF0 9F          >					sbc 	a,a
1134+ FAF1 94          >					sub 	h
1134+ FAF2 67          >					ld 		h,a
1135+ FAF3 ED 5B 08 F6                          ld      de,(delta_x_step)               ;           .       hl = delta_x_step * (- y1)
1136+ FAF7 CD D7 91                             call    mulHLbyDE2sc                    ;           .
1137+ FAFA 22 E8 F5                             ld      (temp),hl                       ;           .
1138+ FAFD 44 4D        .msdEQtempDIVdxstep:    ld      bc,hl                           ;           msd = temp / delta_y_step
1139+ FAFF ED 5B 0A F6                          ld      de,(delta_y_step)               ;               BC = BC / DE, HL = BC % DE
1140+ FB03 CD FB 96                             call    Floor_DivQ                      ;               .
1141+ FB06 ED 43 12 F6                          ld      (msd),bc                        ;               .
1142+ FB0A E5 FD E1                             ld      iy,hl                           ;               same remainders (which is also mod result)
1143+ FB0D 22 17 F6                             ld      (rem),hl                        ;           rem = temp % delta_y_step (swapped from being after x_pos += msd)
1144+ FB10 2A F3 F5     .yposPlusmsd:           ld      hl,(x_pos)                      ;           x_pos += msd
1145+ FB13                                      ClearCarryFlag                          ;           .   bc already is msd
1145+ FB13 B7          >                        or a
1146+ FB14 ED 4A                                adc     hl,bc                           ;           .   hl += bc
1147+ FB16 22 F3 F5                             ld      (x_pos),hl                      ;           .
1148+ FB19 2A F3 F5                             ld      hl,(x_pos)                      ;           if ((x_pos > clip_xmax) || (x_pos == clip_xmax && rem >= delta_y))
1149+ FB1C ED 5B FB F5                          ld      de,(clip_xmax)                  ;           .
1150+ FB20 CD 3F 99                             call    CompareHLDESame                 ;           .    if xpos != clipxmax skip the abort test
1151+ FB23 20 0B                                jr      nz,.XPosNotClipxmax             ;           .
1152+ FB25 2A 17 F6                             ld      hl,(rem)                        ;           .    if rem < delta_y  skip the abort test
1153+ FB28 ED 5B 04 F6                          ld      de,(delta_y)                    ;           .
1154+ FB2C CD 28 99                             call    CompareHLDESgn                  ;           .
1155+ FB2F D8                                   ret     c                               ;           .
1156+ FB30 EB           .XPosNotClipxmax:       ex      de,hl                           ;           .    swap over xpos and max to compare xpos > xmax
1157+ FB31 CD 28 99                             call    CompareHLDESgn                  ;           .    if xpos > clipxmax then return (i.e clipxmax - xpos had a carry)
1158+ FB34 D8                                   ret     c
1159+ FB35 21 00 00     .xposLT127:             ld      hl,0                            ;           y_pos = 0;
1160+ FB38 22 F5 F5                             ld      (y_pos),hl                      ;           .
1161+ FB3B 2A 14 F6                             ld      hl,(error)                      ;           error += rem
1162+ FB3E ED 5B 17 F6                          ld      de,(rem)                        ;           .
1163+ FB42                                      ClearCarryFlag                          ;           .
1163+ FB42 B7          >                        or a
1164+ FB43 ED 5A                                adc     hl,de                           ;           .
1165+ FB45 22 14 F6                             ld      (error),hl                      ;           .
1166+ FB48 2A 17 F6                             ld      hl,(rem)                        ;           if (rem >= delta_y)
1167+ FB4B ED 5B 04 F6                          ld      de,(delta_y)                    ;           .
1168+ FB4F CD 28 99                             call    CompareHLDESgn                  ;           .
1169+ FB52 DA 69 FB                             jp      c,.remLTDeltaY                  ;           .
1170+ FB55 2A F3 F5     .remGTEDeltaY:          ld      hl,(x_pos)                      ;                x_pos++
1171+ FB58 23                                   inc     hl
1172+ FB59 22 F3 F5                             ld      (x_pos),hl
1173+ FB5C 2A 14 F6                             ld      hl,(error)                      ;                error -= delta_y_step;
1174+ FB5F ED 5B 0A F6                          ld      de,(delta_y_step)               ;                .
1175+ FB63                                      ClearCarryFlag                          ;                .
1175+ FB63 B7          >                        or a
1176+ FB64 ED 52                                sbc     hl,de                           ;                .
1177+ FB66 22 14 F6                             ld      (error),hl                      ;                .
1178+ FB69              .remLTDeltaY:
1179+ FB69 2A DE F5     .exit_false:            ld      hl,(y2)                         ;           y_pos_end = y2;
1180+ FB6C 22 F9 F5                             ld      (y_pos_end),hl                  ;           .
1181+ FB6F 2A DC F5                             ld      hl,(x2)                         ;           if (x2 > clip_xmax)
1182+ FB72 ED 5B FB F5                          ld      de,(clip_xmax)                  ;           .
1183+ FB76 CD 3F 99                             call    CompareHLDESame                 ;           .
1184+ FB79 CA D0 FB                             jp      z,.x2LTEclipxmax                ;           .
1185+ FB7C CD 28 99                             call    CompareHLDESgn                  ;           .
1186+ FB7F DA D0 FB                             jp      c,.x2LTEclipxmax                ;           .
1187+ FB82 2A FB F5     .x2GTclipxmax:          ld      hl,(clip_xmax)                  ;               temp = delta_y_step * (clip_xmax - x1) + delta_y;
1188+ FB85 ED 5B D8 F5                          ld      de,(x1)                         ;                   hl = 127-y1
1189+ FB89                                      ClearCarryFlag                          ;
1189+ FB89 B7          >                        or a
1190+ FB8A ED 52                                sbc     hl,de
1191+ FB8C ED 5B 0A F6                          ld      de,(delta_y_step)               ;                   hl = delta_x_step * (clip_xmax - x1)
1192+ FB90 CD D7 91                             call    mulHLbyDE2sc                    ;                   .
1193+ FB93 ED 5B 04 F6                          ld      de,(delta_y)                    ;                   hl += delta_y
1194+ FB97                                      ClearCarryFlag                          ;                   .
1194+ FB97 B7          >                        or a
1195+ FB98 ED 5A                                adc     hl,de                           ;                   .
1196+ FB9A 22 E8 F5                             ld      (temp),hl
1197+ FB9D 44 4D                                ld      bc,hl
1198+ FB9F ED 5B 08 F6                          ld      de,(delta_x_step)               ;               msd = temp / delta x step
1199+ FBA3 CD FB 96                             call    Floor_DivQ                      ;               .
1200+ FBA6 ED 43 12 F6                          ld      (msd),bc                        ;               .
1201+ FBAA 2A DA F5                             ld      hl,(y1)                         ;               y_pos_end = y1 + msd;
1202+ FBAD                                      ClearCarryFlag                          ;               .
1202+ FBAD B7          >                        or a
1203+ FBAE ED 4A                                adc     hl,bc                           ;               .
1204+ FBB0 22 F9 F5                             ld      (y_pos_end),hl                  ;               .
1205+ FBB3 2A 12 F6                             ld      hl,(msd)                        ;               if ((temp - msd * delta_x_step) == 0) --y_pos_end
1206+ FBB6 ED 5B 08 F6                          ld      de,(delta_x_step)               ;               .
1207+ FBBA CD D7 91                             call    mulHLbyDE2sc                    ;               .
1208+ FBBD EB                                   ex      de,hl                           ;               .
1209+ FBBE 2A E8 F5                             ld      hl,(temp)                       ;               .
1210+ FBC1                                      ClearCarryFlag                          ;               .
1210+ FBC1 B7          >                        or a
1211+ FBC2 ED 52                                sbc     hl,de                           ;               .
1212+ FBC4 7C                                   ld      a,h                             ;               .
1213+ FBC5 B5                                   or      l                               ;               .
1214+ FBC6 C2 D0 FB                             jp      nz,.NotTheSame                  ;               .
1215+ FBC9 2A F9 F5     .IsTheSame:             ld      hl,(y_pos_end)                  ;                   --x_pos_end
1216+ FBCC 2B                                   dec     hl                              ;                   .
1217+ FBCD 22 F9 F5                             ld      (y_pos_end),hl                  ;                   .
1218+ FBD0              .NotTheSame:
1219+ FBD0 2A F9 F5     .x2LTEclipxmax:         ld      hl,(y_pos_end)                  ;           y_pos_end = min(y_pos_end, clip_ymax) + 1
1220+ FBD3 11 7F 00                             ld      de,127                          ;           .
1221+ FBD6 CD 28 99                             call    CompareHLDESgn                  ;           .
1222+ FBD9 D2 E6 FB                             jp      nc,.yposgteymax                 ;           .
1223+ FBDC 2A F9 F5     .yposltymax:            ld      hl,(y_pos_end)                  ;           .
1224+ FBDF 23                                   inc     hl                              ;           .
1225+ FBE0 22 F9 F5                             ld      (y_pos_end),hl                  ;           .
1226+ FBE3 C3 EB FB                             jp      .DoneYposAdjust                 ;           .
1227+ FBE6 13           .yposgteymax:           inc     de                              ;           .
1228+ FBE7 ED 53 F9 F5                          ld      (y_pos_end),de                  ;           .
1229+ FBEB 3A FF F5     .DoneYposAdjust:        ld      a,(sign_x)                      ;           if (sign_x == -1)
1230+ FBEE 3C                                   inc     a
1231+ FBEF C2 0A FC                             jp      nz,.SignNotMinus1
1232+ FBF2 2A F3 F5     .SignEquMinus1:         ld      hl,(x_pos)                      ;               x_pos = -x_pos;
1233+ FBF5                                      macronegate16hl
1233+ FBF5 AF          >					xor 	a
1233+ FBF6 95          >					sub 	l
1233+ FBF7 6F          >					ld 		l,a
1233+ FBF8 9F          >					sbc 	a,a
1233+ FBF9 94          >					sub 	h
1233+ FBFA 67          >					ld 		h,a
1234+ FBFB 22 F3 F5                             ld      (x_pos),hl
1235+ FBFE 2A F7 F5                             ld      hl,(x_pos_end)                  ;               x_pos_end = -x_pos_end;
1236+ FC01                                      macronegate16hl
1236+ FC01 AF          >					xor 	a
1236+ FC02 95          >					sub 	l
1236+ FC03 6F          >					ld 		l,a
1236+ FC04 9F          >					sbc 	a,a
1236+ FC05 94          >					sub 	h
1236+ FC06 67          >					ld 		h,a
1237+ FC07 22 F7 F5                             ld      (x_pos_end),hl
1238+ FC0A ED 5B 08 F6  .SignNotMinus1:         ld      de,(delta_x_step)               ;        delta_y_step -= delta_x_step;
1239+ FC0E 2A 0A F6                             ld      hl,(delta_y_step)               ;        .
1240+ FC11                                      ClearCarryFlag                          ;        .
1240+ FC11 B7          >                        or a
1241+ FC12 ED 52                                sbc     hl,de                           ;        .
1242+ FC14 22 0A F6                             ld      (delta_y_step),hl               ;        .
1243+ FC17 2A F5 F5     .PlottingLoop:          ld      hl,(y_pos)                      ;        while (y_pos != y_pos_end)
1244+ FC1A ED 5B F9 F5                          ld      de,(y_pos_end)
1245+ FC1E CD 3F 99                             call    CompareHLDESame
1246+ FC21 C8                                   ret     z
1247+ FC22 2A F3 F5     .PlotPixel:             ld      hl,(x_pos)
1248+ FC25 4D                                   ld      c,l
1249+ FC26 2A F5 F5                             ld      hl,(y_pos)
1250+ FC29 45                                   ld      b,l
1251+ FC2A 3E BF                                ld      a,$BF
1252+ FC2C CD B6 E2                             call    l2_plot_pixel                   ;               drawpixel at xpos, ypos, Colour
1253+ FC2F 2A 14 F6                             ld      hl,(error)                      ;               if (error >= 0)
1254+ FC32 CB 7C                                bit     7,h
1255+ FC34 C2 54 FC                             jp      nz,.errorLT0
1256+ FC37 2A F3 F5     .errorGTE0:             ld	    hl,(x_pos)                      ;                   ++x_pos
1257+ FC3A ED 5B FF F5                          ld      de,(sign_x)
1258+ FC3E                                      ClearCarryFlag
1258+ FC3E B7          >                        or a
1259+ FC3F ED 5A                                adc     hl,de
1260+ FC41 22 F3 F5                             ld	    (x_pos),hl
1261+ FC44 2A 14 F6                             ld	    hl,(error)                      ;                   error -= delta_y_step;
1262+ FC47 ED 5B 0A F6                          ld	    de,(delta_y_step)
1263+ FC4B                                      ClearCarryFlag
1263+ FC4B B7          >                        or a
1264+ FC4C ED 52                                sbc	    hl,de
1265+ FC4E 22 14 F6                             ld	    (error),hl
1266+ FC51 C3 61 FC                             jp      .DoneErrorAdjust
1267+ FC54 2A 14 F6     .errorLT0:              ld	    hl,(error)                      ;                   error += delta_x_step;
1268+ FC57 ED 5B 08 F6                          ld	    de,(delta_x_step)
1269+ FC5B                                      ClearCarryFlag
1269+ FC5B B7          >                        or a
1270+ FC5C ED 5A                                adc	    hl,de
1271+ FC5E 22 14 F6                             ld	    (error),hl
1272+ FC61 2A F5 F5     .DoneErrorAdjust:       ld      hl,(y_pos)
1273+ FC64 23                                   inc     hl
1274+ FC65 22 F5 F5                             ld      (y_pos),hl
1275+ FC68 C3 17 FC                             jp      .PlottingLoop
1276+ FC6B                      ENDIF
1277+ FC6B
1278+ FC6B
1279+ FC6B 21 D8 F5     l2_draw_6502_line:      ld      hl,x1                           ; copy from currnet position to 6502 variables
1280+ FC6E 11 A9 F1                             ld      de,XX1510
1281+ FC71 01 08 00                             ld      bc,4*2
1282+ FC74 ED B0                                ldir
1283+ FC76 CD 99 F3                             call    LL145_6502                      ; perform 6502 version
1284+ FC79 D8                                   ret     c                               ; returns if carry is set as its a no draw
1285+ FC7A 21 00 00     .CopyBackResults:       ld      hl,0
1286+ FC7D 22 D8 F5                             ld      (x1),hl
1287+ FC80 22 DA F5                             ld      (y1),hl
1288+ FC83 22 DC F5                             ld      (x2),hl
1289+ FC86 22 DE F5                             ld      (y2),hl
1290+ FC89 3A A9 F1                             ld      a,(XX1510)
1291+ FC8C 32 D8 F5                             ld      (x1),a
1292+ FC8F 4F                                   ld      c,a
1293+ FC90 3A AA F1                             ld      a,(XX1510+1)
1294+ FC93 32 DA F5                             ld      (y1),a
1295+ FC96 47                                   ld      b,a
1296+ FC97 3A AB F1                             ld      a,(XX1510+2)
1297+ FC9A 32 DC F5                             ld      (x2),a
1298+ FC9D 5F                                   ld      e,a
1299+ FC9E 3A AC F1                             ld      a,(XX1510+3)
1300+ FCA1 32 DE F5                             ld      (y2),a
1301+ FCA4 57                                   ld      d,a
1302+ FCA5 3E FF                                ld      a,$FF
1303+ FCA7                                      ClearCarryFlag
1303+ FCA7 B7          >                        or a
1304+ FCA8 C9                                   ret
1305+ FCA9                                 ;     call    l2_draw_clipped_line
1306+ FCA9              ;                        call    l2_draw_diagonal                ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
1307+ FCA9              ;................................................................
1308+ FCA9 00 00        result                  dw      0
1309+ FCAB              ;    swap = 0;
1310+ FCAB              ;    if (y1 > y2)
1311+ FCAB 2A DA F5     l2_draw_elite_line:     ld      hl,(y1)                         ; if (y1 > y2)
1312+ FCAE ED 5B DE F5                          ld      de,(y2)                         ; .
1313+ FCB2 CD 28 99                             call    CompareHLDESgn                  ; .
1314+ FCB5 DA BB FC                             jp      c,.NoSwapCoords                 ;
1315+ FCB8              ;        swapp1p2();
1316+ FCB8 CD 19 F6     .SwapCoords:            call    SwapCoords                      ;       swap them so y1 <= y2
1317+ FCBB 2A D8 F5     .NoSwapCoords:          ld      hl,(x1)                         ; hl = x1
1318+ FCBE ED 5B DC F5                          ld      de,(x2)                         ; de = x2
1319+ FCC2 ED 4B DA F5                          ld      bc,(y1)                         ; bc = y1
1320+ FCC6 DD 2A DE F5                          ld      ix,(y2)                         ; ix = y2
1321+ FCCA              .CheckForVertical:
1322+ FCCA              .CheckForHorizontal:
1323+ FCCA FD 26 80                             ld      iyh,128                         ; iyh = xx13 = 128
1324+ FCCD              ;    xx13 = 128;
1325+ FCCD              ;    if (x2 >= 0 && x2 <= 255 && y2 >= 0 && y2 <= 127)
1326+ FCCD 7A                                   ld      a,d                             ; if (x2 >= 0 && x2 <= 255 && y2 >= 0 && y2 <= 127)
1327+ FCCE DD B4                                or      ixh                             ; .  [if x2 and y2 > 255 goto point2clip]
1328+ FCD0 20 09                                jr      nz,.Point2Clip                  ; .  .
1329+ FCD2 DD 7D                                ld      a,ixl                           ; .  [if y2 low > 127 goto point2clip]
1330+ FCD4 CB 7F                                bit     7,a                             ; .  .
1331+ FCD6 20 03                                jr      nz,.Point2Clip                  ; .  .
1332+ FCD8              ;        xx13 = 0;
1333+ FCD8 FD 26 00     .Point2NoClip:          ld      iyh,0                           ;       iyh = xx13 = 0
1334+ FCDB              ;    if (x1 >= 0 && x1 <= 255 && y1 >= 0 && y1 <= 127)
1335+ FCDB 7C           .Point2Clip:            ld      a,h                             ; if (x1 >= 0 && x1 <= 255 && y1 >= 0 && y1 <= 127)
1336+ FCDC B0                                   or      b                               ; . [ if x1 or y1 > 255 goto clip needed]
1337+ FCDD C2 EE FC                             jp      nz,.ClipNeeded                  ; .
1338+ FCE0 CB 79                                bit     7,c                             ; . [ if y1 low > 127 goto clip needed]
1339+ FCE2 C2 EE FC                             jp      nz,.ClipNeeded                  ; .
1340+ FCE5              ;        if (xx13 != 0)
1341+ FCE5 FD 7C        .ClipPoint1:            ld      a,iyh                           ;       if (xx13 = 0)
1342+ FCE7 A7                                   and     a                               ;       .
1343+ FCE8 CA E5 FD                             jp      z,.ClipComplete                 ;               clipping not needed so treat as done an ddraw the line
1344+ FCEB FD 26 40                             ld      iyh,64                          ;       else xx13 = 64 (xx13 /2 but if xx13 is 0 it never hits here so can just set to 64)
1345+ FCEE              ;.......................LL138
1346+ FCEE FD 7C        .ClipNeeded:            ld      a,iyh                           ; if (xx13 == 128)
1347+ FCF0 CB 7F                                bit     7,a                             ; . [ jump if bit 7 is not set so <> 128]
1348+ FCF2 CA 2B FD                             jp      z,.xx13Not128                   ; .
1349+ FCF5 7C           .xx13Is128:             ld      a,h                             ;       if (x1 < 0 && x2 < 0)
1350+ FCF6 A2                                   and     d                               ;       . [ x1 and x2 high bits 7 are both set then its off to the left]
1351+ FCF7 F8                                   ret     m                               ;               return
1352+ FCF8 78                                   ld      a,b                             ;       if (y1 < 0 && y2 < 0)
1353+ FCF9 DD A4                                and     ixh                             ;       . [ y1 and y2 high bits 7 are both set then its off the top]
1354+ FCFB F8                                   ret     m                               ;               return
1355+ FCFC 7C                                   ld      a,h                             ;       if (x1 > 255  && x2 > 255)
1356+ FCFD CB 7F                                bit     7,a                             ;       . [test if x1 is negative and if so skip]
1357+ FCFF C2 0E FD                             jp      nz,.x1x2LessThan256             ;       .
1358+ FD02 A7                                   and     a                               ;       . [ if x1 is not negative then if high has any value its > 256]
1359+ FD03 CA 0E FD                             jp      z,.x1x2LessThan256              ;       .
1360+ FD06 7A                                   ld      a,d                             ;       . [test if x2 is negative]
1361+ FD07 CB 7F                                bit     7,a                             ;       .
1362+ FD09 C2 0E FD                             jp      nz,.x1x2LessThan256             ;       . < can simplify with with an xor test to detect if opposite signs first >
1363+ FD0C A7                                   and     a                               ;       . [ if x2 is not negative then if high has any value its > 256]
1364+ FD0D C0                                   ret     nz                              ;               return
1365+ FD0E 78           .x1x2LessThan256:       ld      a,b                             ;       if (y1 > 127  && y2 > 127)
1366+ FD0F CB 7F                                bit     7,a                             ;       . [test if y1 is negative]
1367+ FD11 C2 2B FD                             jp      nz,.y1y2LessThan128             ;       .
1368+ FD14 A7                                   and     a                               ;       . [ if y1 is not negative then if high has any value its > 256]
1369+ FD15 CA 2B FD                             jp      z,.y1y2LessThan128              ;       .
1370+ FD18 CB 79                                bit     7,c                             ;       . [ if y1 low bit 7 is set then its > 127]
1371+ FD1A CA 2B FD                             jp      z,.y1y2LessThan128              ;       .
1372+ FD1D DD 7C                                ld      a,ixh                           ;       . [test if y2 is negative]
1373+ FD1F A7                                   and     a                               ;       .
1374+ FD20 FA 2B FD                             jp      m,.y1y2LessThan128              ;       .
1375+ FD23 A7                                   and     a                               ;       . [ if y2 is not negative then if high has any value its > 256]
1376+ FD24 CA 2B FD                             jp      z,.y1y2LessThan128              ;       .
1377+ FD27 DD 7D                                ld      a,ixl                           ;       .
1378+ FD29 A7                                   and     a                               ;       . [ if y2 low bit 7 is set then its > 127]
1379+ FD2A F8                                   ret     m                               ;               return
1380+ FD2B              ;.......................LL115
1381+ FD2B              .xx13Not128:                        // check right point
1382+ FD2B EB           .y1y2LessThan128:       ex      de,hl                           ; delta_x = x2 - x1;
1383+ FD2C                                      ClearCarryFlag                          ; .
1383+ FD2C B7          >                        or a
1384+ FD2D ED 52                                sbc     hl,de                           ; .
1385+ FD2F 22 02 F6                             ld      (delta_x),hl                    ; redundant as its in DE TODO OPTIMISE
1386+ FD32 EB                                   ex      de,hl                           ; de = delta_x for next bit
1387+ FD33 DD E5 E1     .DyEquY2MinusY1:        ld      hl,ix                           ; delta_y = y2 - y1;
1388+ FD36                                      ClearCarryFlag                          ; .
1388+ FD36 B7          >                        or a
1389+ FD37 ED 42                                sbc     hl,bc                           ; .
1390+ FD39 22 04 F6                             ld      (delta_y),hl                    ; . [ so now de = dx and hl = dy]
1391+ FD3C FD 2E 80                             ld      iyl,128                         ; assuming sign is iyl is positive dx dy
1392+ FD3F CB 7A        .SignDeltaXY:           bit     7,d                             ; if delta x is negative (delta y will always be positive)
1393+ FD41 CA 4D FD                             jp      z,.DeltaXPositive               ; .
1394+ FD44 FD 2E 00     .DeltaXNegative:        ld      iyl,0                           ;       so we set sign to 0
1395+ FD47                                      macronegate16de                         ;       and set delta x to |delta x|
1395+ FD47 AF          >					xor 	a
1395+ FD48 93          >                    sub 	e
1395+ FD49 5F          >                    ld 		e,a
1395+ FD4A 9F          >                    sbc 	a,a
1395+ FD4B 92          >                    sub 	d
1395+ FD4C 57          >                    ld 		d,a
1396+ FD4D ED 53 02 F6  .DeltaXPositive:        ld      (delta_x),de                    ;       .
1397+ FD51              ;.......................Scale down DY and DY to 7 bit
1398+ FD51 7C           .ScaleDXDY:             ld      a,h                             ; scale down so that dx and dx are < 256
1399+ FD52 B2                                   or      d                               ; .
1400+ FD53 CA 61 FD                             jp      z,.ScaleDXDYHighDone            ; .
1401+ FD56                                      ShiftDERight1                           ; .
1401+ FD56 CB 3A       >			   srl d
1401+ FD58 CB 1B       >			   rr  e
1402+ FD5A                                      ShiftHLRight1                           ; .
1402+ FD5A CB 3C       >			   srl h
1402+ FD5C CB 1D       >			   rr  l
1403+ FD5E C3 51 FD                             jp      .ScaleDXDY                      ; .
1404+ FD61 7B           .ScaleDXDYHighDone:     ld      a,e                             ; because of signed maths we will scale down to 7 bits to be safe
1405+ FD62 B5                                   or      l                               ; .
1406+ FD63 F2 6E FD                             jp      p,.LowScaleDone                 ; .
1407+ FD66                                      ShiftDERight1                           ; .
1407+ FD66 CB 3A       >			   srl d
1407+ FD68 CB 1B       >			   rr  e
1408+ FD6A                                      ShiftHLRight1                           ; .
1408+ FD6A CB 3C       >			   srl h
1408+ FD6C CB 1D       >			   rr  l
1409+ FD6E              ;.......................Work out slope and gradient - later on we will work with deltax beign abs
1410+ FD6E ED 53 02 F6  .LowScaleDone:          ld      (delta_x),de                    ; save adjusted dx and dy back
1411+ FD72 22 04 F6                             ld      (delta_y),hl                    ; .
1412+ FD75 55                                   ld      d,l                             ; now d = dy e = dx
1413+ FD76 ED 53 06 F6                          ld      (delta_y_x),de                  ; save for diagnostics
1414+ FD7A              .SetUpTSlope:           ZeroA                                   ; Initialise tSlope to 0
1414+ FD7A AF          >                        xor a
1415+ FD7B 32 10 F6                             ld      (tSlope),a                      ; .
1416+ FD7E 7B                                   ld      a,e                             ; a = dx
1417+ FD7F                                      JumpIfAGTENusng d, .deltaxGTEdeltaY     ; if dx < dy
1417+ FD7F BA          >                        cp     d
1417+ FD80 D2 93 FD    >                        jp		nc,.deltaxGTEdeltaY
1418+ FD83 43           .deltaXLTdeltaY:        ld      b,e                             ;       bc = dx $00
1419+ FD84 0E 00                                ld      c,0                             ;       .
1420+ FD86 5A                                   ld      e,d                             ;       de = $00 dy
1421+ FD87 16 00                                ld      d,0                             ;       .
1422+ FD89 CD FB 96                             call    Floor_DivQ                      ;       bc = bc / de  (dx * 256 / dy)
1423+ FD8C ED 43 0E F6                          ld      (gradient),bc                   ;       in reality this is 8 bit little endian
1424+ FD90 C3 A4 FD                             jp      .donedxdycheck                  ;       .
1425+ FD93                                                                              ; else
1426+ FD93 42           .deltaxGTEdeltaY:       ld      b,d                             ;       bc = dy << 0
1427+ FD94 0E 00                                ld      c,0                             ;       .
1428+ FD96 16 00                                ld      d,0                             ;       de = 0dx
1429+ FD98 CD FB 96                             call    Floor_DivQ                      ;       bc = bc / de (dy * 256 / dx)
1430+ FD9B ED 43 0E F6                          ld      (gradient),bc                   ;       in reality this is 8 bit little endian
1431+ FD9F 3E FF                                ld      a,255                           ;       set tslope to -1
1432+ FDA1 32 10 F6                             ld      (tSlope),a                      ;       .
1433+ FDA4              .donedxdycheck:                 // CHECK CORRECT POINT
1434+ FDA4              ;.......................Clipping point 1
1435+ FDA4                                      ;break
1436+ FDA4 FD 7C                                ld      a,iyh                           ; if xx13 = 0 or xx13 = 128 (values can be 0, 128, 64 later we can optimise to see if its <> 64)
1437+ FDA6 A7                                   and     a                               ; . [xx13 = 0  enter the block]
1438+ FDA7 CA AD FD                             jp      z,.xx13is0or128                 ; .
1439+ FDAA F2 CE FD                             jp      p,.xx13not0or128                ; . [xx13 <> 128 then skip block]
1440+ FDAD CD EB FD     .xx13is0or128:          call    ClipLL118Elite                  ;       clip point 1
1441+ FDB0 FD 7C                                ld      a,iyh                           ;       if xx13 <> 0
1442+ FDB2 A7                                   and     a                               ;       .
1443+ FDB3 CA CA FD                             jp      z,.ImmediateDraw                ;       .
1444+ FDB6 3A D9 F5                             ld      a,(x1+1)                        ;               if (if (x1 <0 || x1 > 255 || y1 <0 || y1 > 127)) return
1445+ FDB9 A7                                   and     a                               ;               .
1446+ FDBA F8                                   ret     m                               ;               . [x1 high is negative then return]
1447+ FDBB C0                                   ret     nz                              ;               . [if x1 high is not zero, x1 > 255 return (above will have sorted negative test on bit 7)]
1448+ FDBC 3A DB F5                             ld      a,(y1+1)                        ;               . [a = x1 high]
1449+ FDBF A7                                   and     a                               ;               .
1450+ FDC0 F8                                   ret     m                               ;               . [if y1 negative return]
1451+ FDC1 C0                                   ret     nz                              ;               . [if y1 > 255 return (above will have sorted negative test on bit 7)]
1452+ FDC2 3A DA F5                             ld      a,(y1)                          ;               . [a = y1 low]
1453+ FDC5 A7                                   and     a                               ;               .
1454+ FDC6 F8                                   ret     m                               ;               . [if y1 > 127 then low byte would appear as negative in bit 7]
1455+ FDC7 C3 CE FD                             jp      .SkipCheckP1OnScreen            ;               else goto SkipCheckP1OnScreen
1456+ FDCA              .ImmediateDraw:         IFDEF SPLITORLINEX
1457+ FDCA CD E6 F6                             call    l2_draw_clipped_line            ;        else if we get here we only needed to clip one point so draw the line
1458+ FDCD                                      ENDIF
1459+ FDCD C9                                   ret                                     ;             and we are done
1460+ FDCE              .xx13not0or128:
1461+ FDCE CD 19 F6     .SkipCheckP1OnScreen:   call    SwapCoords                      ; swap point 1 and point 2 so we can now process P2
1462+ FDD1 CD EB FD                             call    ClipLL118Elite                  ; clip P2
1463+ FDD4 3A D9 F5                             ld      a,(x1+1)                        ; if (x1 <0 || x1 > 255 || y1 <0 || y1 > 127) return
1464+ FDD7 A7                                   and     a                               ; .
1465+ FDD8 F8                                   ret     m                               ; . [if x1 negative return]
1466+ FDD9 C0                                   ret     nz                              ; . [if x1 > 255 return (above will have sorted negative test on bit 7)]
1467+ FDDA 3A DB F5                             ld      a,(y1+1)                        ; . [a = y1 high]
1468+ FDDD A7                                   and     a                               ;
1469+ FDDE F8                                   ret     m                               ; . [if y1 negative return]
1470+ FDDF C0                                   ret     nz                              ; . [if y1 > 255 return (above will have sorted negative test on bit 7)]
1471+ FDE0 3A DA F5                             ld      a,(y1)                          ; . [a = y1 low]
1472+ FDE3 A7                                   and     a                               ; .
1473+ FDE4 F8                                   ret     m                               ; . [if y1 low > 127 then low byte would appear as negative in bit 7]
1474+ FDE5              .ClipComplete:
1475+ FDE5              .xx13is0or128Draw:      IFDEF SPLITORLINEX
1476+ FDE5 CD E6 F6                             call    l2_draw_clipped_line            ; if we get here we only needed to clip one point/have done all slipping needed
1477+ FDE8                                      ENDIF
1478+ FDE8 C9                                   ret
1479+ FDE9              ;................................................................
1480+ FDE9 00 00        ClipSign                dw      0
1481+ FDEB              ClipLL118Elite:        ;break
1482+ FDEB 2A D8 F5     .checkX1IsNegative      ld      hl,(x1)                         ; if x1 is negative
1483+ FDEE CB 7C                                bit     7,h                             ; .
1484+ FDF0 CA 0F FE                             jp      z,.x1GTE0                       ; .
1485+ FDF3 3E FF        .x1LT0:                 ld      a,255                           ;       clip sign = -1
1486+ FDF5 32 E9 FD                             ld      (ClipSign),a                    ;       .
1487+ FDF8 CD 77 FE                             call    CalcLL120                       ;       calc ll120
1488+ FDFB 21 00 00                             ld      hl,0                            ;       x1 = 0
1489+ FDFE 22 D8 F5                             ld      (x1),hl                         ;       .
1490+ FE01 2A DA F5                             ld      hl,(y1)                         ;       y1 = y1 + result
1491+ FE04 ED 5B A9 FC                          ld      de,(result)                     ;       . [and save in hl for optimisation processing y1]
1492+ FE08 19                                   add     hl,de                           ;       .
1493+ FE09 22 DA F5                             ld      (y1),hl                         ;       .
1494+ FE0C C3 2C FE                             jp      .checkY1IsNegative              ;       .
1495+ FE0F 7C           .x1GTE0:                ld      a,h                             ; else
1496+ FE10 A7                                   and     a                               ;       if x1 > 255
1497+ FE11 CA 2C FE                             jp      z,.checkY1IsNegative            ;       .
1498+ FE14                                      ZeroA                                   ;               sign must be 0 for postive adjustment
1498+ FE14 AF          >                        xor a
1499+ FE15 32 E9 FD                             ld      (ClipSign),a                    ;               .
1500+ FE18 CD 77 FE                             call    CalcLL120                       ;               Calc LL120
1501+ FE1B 21 FF 00                             ld      hl,255                          ;               x1 = 255
1502+ FE1E 22 D8 F5                             ld      (x1),hl                         ;               .
1503+ FE21 2A DA F5                             ld      hl,(y1)                         ;               y1 = y1 + result
1504+ FE24 ED 5B A9 FC                          ld      de,(result)                     ;               . [and save in hl for optimisation processing y1]
1505+ FE28 19                                   add     hl,de                           ;               .
1506+ FE29 22 DA F5                             ld      (y1),hl                         ;               .
1507+ FE2C                                                                              ; end if
1508+ FE2C 2A DA F5     .checkY1IsNegative:     ld      hl,(y1)                         ; if (y1 <0) [if we don;t need to clip x1 then we need to load hl with y1 as it never got loaded]
1509+ FE2F CB 7C                                bit     7,h                             ; .
1510+ FE31 CA 4D FE                             jp      z,.checkY1LT128                 ; .
1511+ FE34 3E FF                                ld      a,255                           ;       set sign to -1 for calc
1512+ FE36 32 E9 FD                             ld      (ClipSign),a                    ;       .
1513+ FE39 CD C4 FE                             call    CalcLL123                       ;       calc LL123
1514+ FE3C 2A D8 F5                             ld      hl,(x1)                         ;       x1 = x1 + result
1515+ FE3F ED 5B A9 FC                          ld      de,(result)                     ;       .
1516+ FE43 19                                   add     hl,de                           ;       .
1517+ FE44 22 D8 F5                             ld      (x1),hl                         ;       .
1518+ FE47 21 00 00                             ld      hl,0                            ;       y1 = 0
1519+ FE4A 22 DA F5                             ld      (y1),hl                         ;       .
1520+ FE4D 7C           .checkY1LT128:          ld      a,h                             ; finished if y < 128
1521+ FE4E A7                                   and     a                               ; .
1522+ FE4F C2 55 FE                             jp      nz,.mopUpY1                     ; . [jump to mop up if y1 high <> 0, wehave already dealt with negatvies so don't need to consider that]
1523+ FE52 7D                                   ld      a,l                             ; . [now check y1 low and return if y1 low > 127]
1524+ FE53 A7                                   and     a                               ; .
1525+ FE54 F0                                   ret     p                               ; . [ if y1 low was positive then we are done as it means y1 < 128]
1526+ FE55 11 80 00     .mopUpY1:               ld      de,128                          ; y1 = y1 - 128
1527+ FE58                                      ClearCarryFlag                          ; .
1527+ FE58 B7          >                        or a
1528+ FE59 ED 52                                sbc     hl,de                           ; .
1529+ FE5B 22 DA F5                             ld      (y1),hl                         ; .
1530+ FE5E                                      ZeroA                                   ; set clip sign to 0
1530+ FE5E AF          >                        xor a
1531+ FE5F 32 E9 FD                             ld      (ClipSign),a                    ; to get to here if y1 < 0, y is set to 0, if its < 128 then it never reaches here, so y1 must be > 128 to get here
1532+ FE62 CD C4 FE                             call    CalcLL123                       ; calc LL123
1533+ FE65 2A D8 F5                             ld      hl,(x1)                         ; x1 = x1 + result
1534+ FE68 ED 5B A9 FC                          ld      de,(result)                     ; .
1535+ FE6C 19                                   add     hl,de                           ; .
1536+ FE6D 22 D8 F5                             ld      (x1),hl                         ; .
1537+ FE70 21 7F 00                             ld      hl,127                          ; y1 = 127
1538+ FE73 22 DA F5                             ld      (y1),hl                         ; .
1539+ FE76 C9                                   ret
1540+ FE77
1541+ FE77 2A D8 F5     CalcLL120:              ld      hl,(x1)                         ; x1= |x1|
1542+ FE7A                                      macroAbsHL                              ; .
1542+ FE7A CB 7C       >                    bit     7,h
1542+ FE7C CA 85 FE    >                    jp      z,.alreadyABS
1542+ FE7F AF          >					xor 	a
1542+ FE80 95          >					sub 	l
1542+ FE81 6F          >					ld 		l,a
1542+ FE82 9F          >					sbc 	a,a
1542+ FE83 94          >					sub 	h
1542+ FE84 67          >					ld 		h,a
1542+ FE85             >.alreadyABS:
1543+ FE85 3A 10 F6                             ld      a,(tSlope)                      ; if (tslope == 0)
1544+ FE88 A7                                   and     a                               ; .
1545+ FE89 C2 A8 FE                             jp      nz,.tSlopeNonZero               ; .
1546+ FE8C 55           .tSlopeZero:            ld      d,l                             ;       d = x1 & 255
1547+ FE8D 3A 0E F6                             ld      a,(gradient)                    ;       e = gradient
1548+ FE90 5F                                   ld      e,a                             ;
1549+ FE91 ED 30                                mul     de                              ;       de = x1 & 255 * gradient
1550+ FE93 5A                                   ld      e,d                             ;       de = x1 * gradient /256
1551+ FE94 16 00                                ld      d,0                             ;       .
1552+ FE96 3A E9 FD                             ld      a,(ClipSign)                    ;       if clipsign != 0
1553+ FE99 A7                                   and     a                               ;       .
1554+ FE9A CA A3 FE                             jp      z,.tSlopeZeroDone               ;       .
1555+ FE9D              .tSlopeZeroNegate:      macronegate16de                         ;               result = - result
1555+ FE9D AF          >					xor 	a
1555+ FE9E 93          >                    sub 	e
1555+ FE9F 5F          >                    ld 		e,a
1555+ FEA0 9F          >                    sbc 	a,a
1555+ FEA1 92          >                    sub 	d
1555+ FEA2 57          >                    ld 		d,a
1556+ FEA3 ED 53 A9 FC  .tSlopeZeroDone:        ld      (result),de                     ;
1557+ FEA7 C9                                   ret                                     ;
1558+ FEA8              .tSlopeNonZero:         ;ld      a,(gradient)                    ; else  c = gradient
1559+ FEA8                                      ;ld      c,a                             ;       .
1560+ FEA8                                      ;ld      a,l                             ;       a = x1 & 255
1561+ FEA8                                      ;call    DIV16Amul256dCUNDOC             ;       bc = a * 256/c
1562+ FEA8
1563+ FEA8 ED 5B 0E F6                          ld      de,(gradient)                   ; BC = BC / DE
1564+ FEAC 45                                   ld      b,l
1565+ FEAD 0E 00                                ld      c,0
1566+ FEAF                                      ;; CORRECTED TO LADO INTO B ld      bc,hl                           ; HL = BC % DE
1567+ FEAF CD FB 96                             call    Floor_DivQ
1568+ FEB2
1569+ FEB2 3A E9 FD                             ld      a,(ClipSign)                    ;       if clipsign != 0
1570+ FEB5 A7                                   and     a                               ;       .
1571+ FEB6 CA BF FE                             jp      z,.tSlopeNonZeroDone            ;       .
1572+ FEB9              .tSlopeNonZeroNegate:   macronegate16bc                         ;               result = - result
1572+ FEB9 AF          >					xor 	a
1572+ FEBA 91          >                    sub 	c
1572+ FEBB 4F          >                    ld 		c,a
1572+ FEBC 9F          >                    sbc 	a,a
1572+ FEBD 90          >                    sub 	b
1572+ FEBE 47          >                    ld 		b,a
1573+ FEBF ED 43 A9 FC  .tSlopeNonZeroDone:     ld      (result),bc
1574+ FEC3 C9                                   ret
1575+ FEC4              ;.......................LL123
1576+ FEC4              CalcLL123:              ;break
1577+ FEC4 2A DA F5                             ld      hl,(y1)                         ; hl = |y1|
1578+ FEC7                                      macroAbsHL                              ; .
1578+ FEC7 CB 7C       >                    bit     7,h
1578+ FEC9 CA D2 FE    >                    jp      z,.alreadyABS
1578+ FECC AF          >					xor 	a
1578+ FECD 95          >					sub 	l
1578+ FECE 6F          >					ld 		l,a
1578+ FECF 9F          >					sbc 	a,a
1578+ FED0 94          >					sub 	h
1578+ FED1 67          >					ld 		h,a
1578+ FED2             >.alreadyABS:
1579+ FED2 3A 10 F6                             ld      a,(tSlope)                      ; if tSlope = 0
1580+ FED5 A7                                   and     a                               ; .
1581+ FED6 C2 F4 FE                             jp      nz,.tSlopeNonZero               ; .
1582+ FED9              .tSlopeZero:           ; ld      a,(gradient)                    ;       c = gradient
1583+ FED9              ;                        ld      c,a                             ;       .
1584+ FED9              ;                        ld      a,l                             ;       hl = y1 (which is now abs and < 256)
1585+ FED9              ;                        call    DIV16Amul256dCUNDOC             ;       bc = A * 256 / c
1586+ FED9 ED 5B 0E F6                          ld      de,(gradient)                   ; BC = BC / DE
1587+ FEDD 44 4D                                ld      bc,hl                           ; HL = BC % DE
1588+ FEDF CD FB 96                             call    Floor_DivQ
1589+ FEE2 3A E9 FD                             ld      a,(ClipSign)                    ;       if clipsign != 0
1590+ FEE5 A7                                   and     a                               ;       .
1591+ FEE6 CA EF FE                             jp      z, .tSlopeZeroDone              ;       .
1592+ FEE9              .tSlopeZeroNegate:      macronegate16bc                         ;               result = -result
1592+ FEE9 AF          >					xor 	a
1592+ FEEA 91          >                    sub 	c
1592+ FEEB 4F          >                    ld 		c,a
1592+ FEEC 9F          >                    sbc 	a,a
1592+ FEED 90          >                    sub 	b
1592+ FEEE 47          >                    ld 		b,a
1593+ FEEF ED 43 A9 FC  .tSlopeZeroDone:        ld      (result),bc                     ;       . save result in either case
1594+ FEF3 C9                                   ret                                     ;       .
1595+ FEF4 55           .tSlopeNonZero:         ld      d,l                             ; else  d = |y1| low
1596+ FEF5 3A 0E F6                             ld      a,(gradient)                    ;       e = gradient
1597+ FEF8 5F                                   ld      e,a                             ;       .
1598+ FEF9 ED 30                                mul     de                              ;       de = l * gradient
1599+ FEFB 5A                                   ld      e,d                             ;       de = l * gradient /256
1600+ FEFC 16 00                                ld      d,0                             ;       .
1601+ FEFE 3A E9 FD                             ld      a,(ClipSign)                    ;       if clipsign != 0
1602+ FF01 A7                                   and     a                               ;
1603+ FF02 CA 0B FF                             jp      z,.tSlopeNonZeroDone            ;
1604+ FF05              .tSlopeNonZeroNegate:   macronegate16de                         ;               result = -result
1604+ FF05 AF          >					xor 	a
1604+ FF06 93          >                    sub 	e
1604+ FF07 5F          >                    ld 		e,a
1604+ FF08 9F          >                    sbc 	a,a
1604+ FF09 92          >                    sub 	d
1604+ FF0A 57          >                    ld 		d,a
1605+ FF0B ED 53 A9 FC  .tSlopeNonZeroDone:     ld      (result),de                     ;       . save result in either case
1606+ FF0F C9                                   ret                                     ;       .
1607+ FF10
# file closed: ./Layer2Graphics/l2_draw_any_line.asm
 860  FF10              ;    INCLUDE "./Layer2Graphics/clearLines-LL155.asm"
 861  FF10                  INCLUDE "./Layer2Graphics/l2_draw_line_v2.asm"
# file opened: ./Layer2Graphics/l2_draw_line_v2.asm
   1+ FF10              ; ******************************************************************************
   2+ FF10              ;
   3+ FF10              ;	Draw a pixel line from (x0,y0) defined in (COORDS) - the current plot
   4+ FF10              ;	coordinate, to the relative distance points (x0+x,y0+y).
   5+ FF10              ;
   6+ FF10              ;	Design & programming by Gunther Strube,	Copyright (C) InterLogic 1995
   7+ FF10              ;
   8+ FF10              ;	The (COORDS+0)	pointer contains the current y coordinate, (COORDS+1) the
   9+ FF10              ;	current x coordinate. The main program should reset the (COORDS) variables
  10+ FF10              ;	before using line drawing.
  11+ FF10              ;
  12+ FF10              ;	The routine checks the range of specified coordinates which is the
  13+ FF10              ;	boundaries of the graphics area (256x64	pixels).
  14+ FF10              ;	If a boundary error occurs the routine exits automatically.	This may be
  15+ FF10              ;	useful if you are trying to draw a line longer than allowed. Only the
  16+ FF10              ;	visible part will be drawn.
  17+ FF10              ;
  18+ FF10              ;	The hardware graphics memory is organized as (0,0) in the top left corner.
  19+ FF10              ;
  20+ FF10              ;	The plot routine is	defined by an address pointer	in IX.
  21+ FF10              ;
  22+ FF10              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
  23+ FF10              ;		DE =	move	relative y vertical	points (maximum +/-	255).
  24+ FF10              ;		IX =	pointer to plot routine that uses HL = (x,y)	of plot coordinate.
  25+ FF10              ;
  26+ FF10              ;	OUT:	None.
  27+ FF10              ;
  28+ FF10              ;	Registers	used	by routine:
  29+ FF10              ;		   N	:	B, loop counter
  30+ FF10              ;		   i	:	line	balance variable
  31+ FF10              ;		   x	:	H/L,	horisontal, vertical distance	variables
  32+ FF10              ;		   y	:	H/L,	horisontal, vertical distance	variables
  33+ FF10              ;	  (x0,y0)	:	(h,l)
  34+ FF10              ;	  direc_x	:	d, horisontal step increment
  35+ FF10              ;	  direc_y	:	e, vertical step increment
  36+ FF10              ;		 ddx	:	b, horisontal step increment
  37+ FF10              ;		 ddy	:	c, vertical step increment
  38+ FF10              ;
  39+ FF10              ;		DE, A work registers.
  40+ FF10              ;
  41+ FF10              ; The algorithm in pseudo-code:
  42+ FF10              ;
  43+ FF10              ;	direc_x =	SGN x: direc_y	= SGN y
  44+ FF10              ;	x = ABS x: y =	ABS y
  45+ FF10              ;
  46+ FF10              ;	if x	>= y
  47+ FF10              ;		if x+y=0 then return
  48+ FF10              ;		H = x
  49+ FF10              ;		L = y
  50+ FF10              ;		ddx = direc_x
  51+ FF10              ;		ddy = 0
  52+ FF10              ;	else
  53+ FF10              ;		H = y
  54+ FF10              ;		L = x
  55+ FF10              ;		ddx = 0
  56+ FF10              ;		ddy = direc_y
  57+ FF10              ;	endif
  58+ FF10              ;
  59+ FF10              ;	B = H
  60+ FF10              ;	i = INT(B/2)
  61+ FF10              ;	FOR N=B TO 1 STEP -1
  62+ FF10              ;		i = i + L
  63+ FF10              ;		if i	< H
  64+ FF10              ;			ix =	ddx
  65+ FF10              ;			iy =	ddy
  66+ FF10              ;		else
  67+ FF10              ;			i = i - H
  68+ FF10              ;			ix =	direc_x
  69+ FF10              ;			iy =	direc_y
  70+ FF10              ;		endif
  71+ FF10              ;		x0 =	x0 +	ix
  72+ FF10              ;		y0 =	y0 +	iy
  73+ FF10              ;		plot	(x0,y0)
  74+ FF10              ;	NEXT	N
  75+ FF10              ;
  76+ FF10              ;
  77+ FF10              ;	Registers	changed after return:
  78+ FF10              ;		..BCDEHL/IXIY/af......	same
  79+ FF10              ;		AF....../..../..bcdehl	different
  80+ FF10              ;
  81+ FF10 00 00        line_gfx_coords         dw  0
  82+ FF12
  83+ FF12              LineHLtoDE:
  84+ FF12 7C           TestMaxY:               ld	a,h ; were h = y or l = y?
  85+ FF13 FE C0                                cp	192
  86+ FF15 30 26                                jr	nc, exit_line		; y0	coordinate out	of range
  87+ FF17 7A                                   ld	a,d
  88+ FF18 FE C0                                cp	192
  89+ FF1A 30 21                                jr	nc, exit_line		; y1	coordinate out	of range
  90+ FF1C 22 10 FF                             ld	(line_gfx_coords),hl		; the starting	point is now default
  91+ FF1F E5                                   push	hl
  92+ FF20 D5                                   push	de
  93+ FF21 6C                                   ld	l,h				; L = x0
  94+ FF22 62                                   ld	h,d				; H = x1
  95+ FF23 7C           distanceX:		        ld	a,h
  96+ FF24 95                                   sub	l
  97+ FF25 6F                                   ld	l,a
  98+ FF26 26 00                                ld	h,0
  99+ FF28 30 02                                jr	nc, distanceXDone
 100+ FF2A 26 FF                                ld	h,-1
 101+ FF2C D1           distanceXDone:          pop	de
 102+ FF2D E3                                   ex	(sp),hl			; L = y0
 103+ FF2E 63                                   ld	h,e				; H = y1
 104+ FF2F 7C           distanceY:		        ld	a,h
 105+ FF30 95                                   sub	l
 106+ FF31 6F                                   ld	l,a
 107+ FF32 26 00                                ld	h,0
 108+ FF34 30 02                                jr	nc, distanceYDone
 109+ FF36 26 FF                                ld	h,-1
 110+ FF38 D1           distanceYDone:          pop	de
 111+ FF39 EB                                   ex	de,hl			; h.dist.	= HL, v.dist. = DE
 112+ FF3A CD 3E FF                             call	DrawLineRelative			; draw line...
 113+ FF3D C9           exit_line:              ret
 114+ FF3E
 115+ FF3E              ; ***************************************************************************
 116+ FF3E              ;
 117+ FF3E              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
 118+ FF3E              ;		DE =	move	relative y vertical	points (maximum +/-	255).
 119+ FF3E              ;
 120+ FF3E              ; OUT: h - l distance in	HL
 121+ FF3E              ;
 122+ FF3E
 123+ FF3E D5           DrawLineRelative:       push	de
 124+ FF3F E5                                   push	hl
 125+ FF40 D9                                   exx
 126+ FF41 E1                                   pop	hl					; get relative	horisontal movement
 127+ FF42 CD B9 FF                             call	sgn
 128+ FF45 57                                   ld	d,a					; direc_x	= SGN(x) installed d = +/-1 for horizontal update
 129+ FF46 CD C6 FF                             call	absValue
 130+ FF49 45                                   ld	b,l					; x = ABS(x)
 131+ FF4A E1           DrawLineGetVertRelative:pop	hl					; get relative	vertical movement
 132+ FF4B CD B9 FF                             call	sgn
 133+ FF4E 5F                                   ld	e,a					; direc_y	= SGN(y) installed  = +/-1 for vertical update
 134+ FF4F CD C6 FF                             call	absValue
 135+ FF52 4D                                   ld	c,l					; y = ABS(y) so now bc = dxdy
 136+ FF53              ; so by here BC = dx dy HL in increment/decrement x y
 137+ FF53 C5                                   push	bc
 138+ FF54 D9                                   exx
 139+ FF55 E1                                   pop	hl					; H = absolute	x dist., L = absolute y distance
 140+ FF56 7C                                   ld	a,h
 141+ FF57 BD                                   cp	l
 142+ FF58 38 0A                                jr	c, x_smaller_y		; if	x >=	y
 143+ FF5A B4           areXandYZero:           or	h					;	if x+y = 0
 144+ FF5B 28 5B                                jr	z, exit_draw		;		return
 145+ FF5D D9           y_lessorequal_x:        exx						;	else
 146+ FF5E 42                                   ld	b,d					;		ddx = direc_x
 147+ FF5F 0E 00                                ld	c,0					;		ddy = 0
 148+ FF61 D9                                   exx
 149+ FF62 18 08                                jr	init_drawloop		; else
 150+ FF64 7C           x_smaller_y:	        ld	a,h
 151+ FF65 65                                   ld	h,l					;	H = y
 152+ FF66 6F                                   ld	l,a					;	L = x
 153+ FF67 D9                                   exx
 154+ FF68 06 00                                ld	b,0					;	ddx = 0
 155+ FF6A 4B                                   ld	c,e					;	ddy = direc_y
 156+ FF6B D9                                   exx
 157+ FF6C 44           init_drawloop:	        ld	b,h
 158+ FF6D 4C                                   ld	c,h					; B = H
 159+ FF6E CB 39                                srl	c					; i = INT(B/2)
 160+ FF70              										; FOR N=B	TO 1	STEP	-1
 161+ FF70 79           drawloop:		        ld	a,c
 162+ FF71 85                                   add	a,l
 163+ FF72 38 09                                jr	c, i_greater		;	i + L > 255  (i > H)
 164+ FF74 BC                                   cp	h
 165+ FF75 30 06                                jr	nc, i_greater		;	if i	< H
 166+ FF77 4F                                   ld	c,a					;		i = i + L
 167+ FF78 D9                                   exx
 168+ FF79 C5                                   push	bc				;		ix =	ddx:	iy =	ddy
 169+ FF7A D9                                   exx
 170+ FF7B 18 05                                jr	check_plot			;	else
 171+ FF7D 94           i_greater:		        sub	h					;		i = i - H
 172+ FF7E 4F                                   ld	c,a
 173+ FF7F D9                                   exx
 174+ FF80 D5                                   push	de				;		ix =	direc_x: iy = direc_y
 175+ FF81 D9                                   exx						;	endif
 176+ FF82 E3           check_plot:		        ex	(sp),hl				;	preserve H,L distances on stack
 177+ FF83 EB                                   ex	de,hl				;	D,E = ix,	iy
 178+ FF84 2A 10 FF                             ld	hl,(line_gfx_coords)
 179+ FF87 7D                                   ld	a,l
 180+ FF88 83                                   add	a,e					;
 181+ FF89 6F                                   ld	l,a					;	y0 =	y0 +	iy (y0 is	checked by plot)
 182+ FF8A 7A                                   ld	a,d
 183+ FF8B 3C                                   inc	a
 184+ FF8C 84                                   add	a,h
 185+ FF8D 38 04                                jr	c, check_range		;	check out	of range
 186+ FF8F 28 26                                jr	z, range_error		;	Fz=1	& Fc=0 denotes	x0 <	0
 187+ FF91 18 02                                jr	plot_point
 188+ FF93 20 22        check_range:            jr	nz, range_error	;	Fz=0	& Fc=1 denotes	x0 >	255
 189+ FF95
 190+ FF95 3D           plot_point:             dec	a
 191+ FF96 C5                                   push	bc
 192+ FF97 F5                                   push	af
 193+ FF98 47                                   ld	    b,a					;	x0 =	x0 +	ix
 194+ FF99 4D                                   ld		c,l
 195+ FF9A 3A B5 E2                             ld		a,(line_gfx_colour)
 196+ FF9D ED 43 10 FF                          ld      (line_gfx_coords),bc
 197+ FFA1                                      l2_plot_macro; call	l2_plot_pixel:
 197+ FFA1 78          >                        ld      a,b
 197+ FFA2             >                        JumpIfAGTENusng 192 ,.NoPlot
 197+ FFA2 FE C0       >                        cp     192
 197+ FFA4 D2 B0 FF    >                        jp		nc,.NoPlot
 197+ FFA7 69          >                        ld      l,c
 197+ FFA8 CD 68 E0    >                        call    asm_l2_row_bank_select
 197+ FFAB 67          >                        ld      h,a
 197+ FFAC 3A B5 E2    >                        ld      a,(line_gfx_colour)
 197+ FFAF 77          >                        ld      (hl),a
 197+ FFB0             >.NoPlot:
 198+ FFB0 F1                                   pop		af
 199+ FFB1 C1                                   pop		bc
 200+ FFB2 E1           plot_RET:		        pop	hl					;	restore H,L distances...
 201+ FFB3 10 BB                                djnz	drawloop		; NEXT N
 202+ FFB5 18 01                                jr	exit_draw
 203+ FFB7
 204+ FFB7 E1           range_error:	        pop	hl					; remove H,L distances...
 205+ FFB8 C9           exit_draw:		        ret
 206+ FFB9
 207+ FFB9
 208+ FFB9              ; ******************************************************************************
 209+ FFB9              ;
 210+ FFB9              ;	SGN (Signum value) of 16	bit signed integer.
 211+ FFB9              ;
 212+ FFB9              ;	IN:		HL =	integer
 213+ FFB9              ;	OUT:		A = result: 0,1,-1 (if zero, positive, negative)
 214+ FFB9              ;
 215+ FFB9              ;	Registers	changed after return:
 216+ FFB9              ;	..BCDEHL/IXIY	same
 217+ FFB9              ;	AF....../....	different
 218+ FFB9              ;
 219+ FFB9 7C           sgn:				    ld	a,h
 220+ FFBA B5                                   or	l
 221+ FFBB C8                                   ret	z				; integer	is zero, return 0...
 222+ FFBC CB 7C                                bit	7,h
 223+ FFBE 20 03                                jr	nz, negative_int
 224+ FFC0 3E 01                                ld	a,1
 225+ FFC2 C9                                   ret
 226+ FFC3 3E FF        negative_int:		    ld	a,-1
 227+ FFC5 C9                                   ret
 228+ FFC6
 229+ FFC6
 230+ FFC6              ; ******************************************************************************
 231+ FFC6              ;
 232+ FFC6              ;	ABS (Absolute value) of 16 bit signed integer.
 233+ FFC6              ;
 234+ FFC6              ;	IN:		HL =	integer
 235+ FFC6              ;	OUT:		HL =	converted	integer
 236+ FFC6              ;
 237+ FFC6              ;	Registers	changed after return:
 238+ FFC6              ;	A.BCDE../IXIY	same
 239+ FFC6              ;	.F....HL/....	different
 240+ FFC6              ;
 241+ FFC6 CB 7C        absValue:			    bit	7,h
 242+ FFC8 C8                                   ret	z				; integer	is positive...
 243+ FFC9 D5                                   push	de
 244+ FFCA EB                                   ex	de,hl
 245+ FFCB 21 00 00                             ld	hl,0
 246+ FFCE BF                                   cp	a				; Fc	= 0,	may not be used...
 247+ FFCF ED 52                                sbc	hl,de			; convert	negative integer
 248+ FFD1 D1                                   pop	de
 249+ FFD2 C9                                   ret
 250+ FFD3
# file closed: ./Layer2Graphics/l2_draw_line_v2.asm
 862  FFD3                  DISPLAY "Bank ",BankLAYER2," - Bytes free ",/D, $2000 - ($-LAYER2Addr), " - BankLAYER2"
 863  FFD3              ; Bank 58  ------------------------------------------------------------------------------------------------------------------------
 864  FFD3                  SLOT    LAYER1Addr
 865  FFD3                  PAGE    BankLAYER1
 866  FFD3                  ORG     LAYER1Addr, BankLAYER1
 867  E000 42 61 6E 6B  Layer1Header:  DB "Bank L1 Utils--"
 867  E004 20 4C 31 20
 867  E008 55 74 69 6C
 867  E00C 73 2D 2D
 868  E00F
 869  E00F                  INCLUDE "./Layer1Graphics/layer1_attr_utils.asm"
# file opened: ./Layer1Graphics/layer1_attr_utils.asm
   1+ E00F
   2+ E00F 00 58        L1AttrRow00:            DW $5800                    ;Row 1    */
   3+ E011 20 58        L1AttrRow01:            DW $5820                    ;Row 2    */
   4+ E013 40 58        L1AttrRow02:            DW $5840                    ;Row 3    */
   5+ E015 60 58        L1AttrRow03:            DW $5860                    ;Row 4    */
   6+ E017 80 58        L1AttrRow04:            DW $5880                    ;Row 5    */
   7+ E019 A0 58        L1AttrRow05:            DW $58A0                    ;Row 6    */
   8+ E01B C0 58        L1AttrRow06:            DW $58C0                    ;Row 7    */
   9+ E01D E0 58        L1AttrRow07:            DW $58E0                    ;Row 8    */
  10+ E01F 00 59        L1AttrRow08:            DW $5900                    ;Row 9    */
  11+ E021 20 59        L1AttrRow09:            DW $5920                    ;Row 10   */
  12+ E023 40 59        L1AttrRow10:            DW $5940                    ;Row 11   */
  13+ E025 60 59        L1AttrRow11:            DW $5960                    ;Row 12   */
  14+ E027 80 59        L1AttrRow12:            DW $5980                    ;Row 13   */
  15+ E029 A0 59        L1AttrRow13:            DW $59A0                    ;Row 14   */
  16+ E02B C0 59        L1AttrRow14:            DW $59C0                    ;Row 15   */
  17+ E02D E0 59        L1AttrRow15:            DW $59E0                    ;Row 16   */
  18+ E02F 00 5A        L1AttrRow16:            DW $5A00                    ;Row 17   */
  19+ E031 20 5A        L1AttrRow17:            DW $5A20                    ;Row 18   */
  20+ E033 40 5A        L1AttrRow18:            DW $5A40                    ;Row 19   */
  21+ E035 60 5A        L1AttrRow19:            DW $5A60                    ;Row 20   */
  22+ E037 80 5A        L1AttrRow20:            DW $5A80                    ;Row 21   */
  23+ E039 A0 5A        L1AttrRow21:            DW $5AA0                    ;Row 22   */
  24+ E03B C0 5A        L1AttrRow22:            DW $5AC0                    ;Row 23   */
  25+ E03D E0 5A        L1AttrRow23:            DW $5AE0                    ;Row 23   */
  26+ E03F
  27+ E03F              ; "l2_hilight_row, d = row, e = colour"
  28+ E03F 21 0F E0     l1_hilight_row:         ld      hl, L1AttrRow00
  29+ E042 4B                                   ld      c,e
  30+ E043 7A                                   ld      a,d
  31+ E044 CB 27                                sla     a
  32+ E046 ED 31                                add     hl,a
  33+ E048 7E                                   ld      a,(hl)
  34+ E049 5F                                   ld      e,a
  35+ E04A 23                                   inc     hl
  36+ E04B 7E                                   ld      a,(hl)
  37+ E04C 57                                   ld      d,a
  38+ E04D EB                                   ex      hl,de
  39+ E04E 79                                   ld		a,c
  40+ E04F 11 20 00                             ld		de, 32
  41+ E052 CD 04 7E                             call	memfill_dma
  42+ E055 C9                                   ret
  43+ E056
# file closed: ./Layer1Graphics/layer1_attr_utils.asm
 870  E056                  INCLUDE "./Layer1Graphics/layer1_cls.asm"
# file opened: ./Layer1Graphics/layer1_cls.asm
   1+ E056 AF           l1_cls_top:             xor     a
   2+ E057 21 00 40                             ld      hl, $4000
   3+ E05A 11 00 08                             ld      de, $0800
   4+ E05D CD 04 7E                             call    memfill_dma
   5+ E060 C9                                   ret
   6+ E061
   7+ E061 AF           l1_cls_mid:             xor     a
   8+ E062 21 00 48                             ld      hl, $4800
   9+ E065 11 00 08                             ld      de, $0800
  10+ E068 CD 04 7E                             call    memfill_dma
  11+ E06B C9                                   ret
  12+ E06C
  13+ E06C AF           l1_cls_bottom:          xor     a
  14+ E06D 21 00 50                             ld      hl, $5000
  15+ E070 11 00 08                             ld      de, $0800
  16+ E073 CD 04 7E                             call    memfill_dma
  17+ E076 C9                                   ret
  18+ E077
  19+ E077              ; Designed specifically to clear a whole character aligned line
  20+ E077 1E 00        l1_cls_line_d:          ld      e,0
  21+ E079 ED 94                                pixelad
  22+ E07B 11 00 01                             ld      de,32 * 8
  23+ E07E AF                                   xor     a
  24+ E07F CD 04 7E                             call    memfill_dma
  25+ E082 C9                                   ret
  26+ E083
  27+ E083              ; Designed specifically to clear a whole character aligned 2 lines line, used for say clearing hyperspace message
  28+ E083 1E 00        l1_cls_2_lines_d:       ld      e,0
  29+ E085 ED 94                                pixelad
  30+ E087 11 00 02                             ld      de,32 * 16
  31+ E08A AF                                   xor     a
  32+ E08B CD 04 7E                             call    memfill_dma
  33+ E08E C9                                   ret
  34+ E08F
  35+ E08F AF           l1_cls:                 xor		a
  36+ E090 21 00 40     l1_cls_to_a:            ld		hl,	$4000
  37+ E093 11 00 18                             ld		de, $1800
  38+ E096 CD 04 7E                             call	memfill_dma
  39+ E099 C9                                   ret
  40+ E09A
  41+ E09A 21 00 58     l1_attr_cls_2DlinesA:   ld		hl,	$5800
  42+ E09D 1E 20                                ld      e,32
  43+ E09F ED 30                                mul
  44+ E0A1 19                                   add     hl,de
  45+ E0A2 11 40 00                             ld		de, 32 * 2
  46+ E0A5 CD 04 7E                             call	memfill_dma
  47+ E0A8 C9                                   ret
  48+ E0A9
  49+ E0A9
  50+ E0A9 AF           l1_attr_cls:            xor		a
  51+ E0AA 21 00 58     l1_attr_cls_to_a:       ld		hl,	$5800
  52+ E0AD 11 00 03                             ld		de, $0300
  53+ E0B0 CD 04 7E                             call	memfill_dma
  54+ E0B3 C9                                   ret
  55+ E0B4
  56+ E0B4 01 FE FE     l1_set_border:          ld	    bc, 0xFEFE
  57+ E0B7 ED 79                                out		(c),a
  58+ E0B9 C9                                   ret
# file closed: ./Layer1Graphics/layer1_cls.asm
 871  E0BA                  INCLUDE "./Layer1Graphics/layer1_print_at.asm"
# file opened: ./Layer1Graphics/layer1_print_at.asm
   1+ E0BA              ; "l1 print char a = character, de = Ypixel Xchar of print"
   2+ E0BA D5 E5        l1_print_char:          push	de,,hl
   3+ E0BC ED 94                                pixelad								; hl = address of de
   4+ E0BE E5                                   push	hl							; save hl for loop
   5+ E0BF 26 00                                ld		h,0
   6+ E0C1 6F                                   ld		l,a
   7+ E0C2 29                                   add		hl,hl						; * 2
   8+ E0C3 29                                   add		hl,hl						; * 4
   9+ E0C4 29                                   add		hl,hl						; * 8 to get byte address
  10+ E0C5 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
  11+ E0C9 EB                                   ex		de,hl						; save address into de
  12+ E0CA E1                                   pop		hl							; get back hl for loop
  13+ E0CB 06 08                                ld		b,8							; do 8 rows
  14+ E0CD 1A           .PrintCharLoop:         ld		a,(de)						; row byte
  15+ E0CE 13                                   inc		de							; next byte
  16+ E0CF 77                                   ld		(hl),a						; poke to screen
  17+ E0D0 ED 93                                pixeldn								; Down 1 row
  18+ E0D2 10 F9                                djnz	.PrintCharLoop				; loop for 8 bytes
  19+ E0D4 E1 D1                                pop		de,,hl					    ; restore hl
  20+ E0D6 C9                                   ret
  21+ E0D7
  22+ E0D7              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  23+ E0D7              ; now skips ascii code < 32 but moves on cursor by 1 char
  24+ E0D7              l1_print_at:
  25+ E0D7 7E           .PrintLoop:             ld		a,(hl)
  26+ E0D8 FE 00                                cp		0
  27+ E0DA C8                                   ret		z
  28+ E0DB                                      CallIfAGTENusng " ", l1_print_char
  28+ E0DB FE 20       >                        cp      " "
  28+ E0DD D4 BA E0    >                        call	nc,l1_print_char
  29+ E0E0 23                                   inc		hl							; move 1 message character right
  30+ E0E1 7B                                   ld		a,e
  31+ E0E2 C6 08                                add		a,8
  32+ E0E4 5F                                   ld		e,a							; move 1 screen character right
  33+ E0E5 18 F0                                jr		.PrintLoop
  34+ E0E7                                                      DISPLAY "TODO: looks liek rogue popde"
  35+ E0E7              .Clearstackandfinish:   ;pop		de                      ; TODO LOOOKS TO BE A ROGUE POPDE
  36+ E0E7 C9                                   ret
  37+ E0E8
  38+ E0E8              ;l1_print_at_wrap:
  39+ E0E8              ;; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  40+ E0E8              ;	ld      iyh,e
  41+ E0E8              ;.PrintLoop:
  42+ E0E8              ;	ld		a,(hl)
  43+ E0E8              ;	cp		0
  44+ E0E8              ;	ret		z
  45+ E0E8              ;.CountWordCharLen
  46+ E0E8              ;; Need to change to word wrap, so it will loop through string as before
  47+ E0E8              ;; but read up until a null or space, take the character count * 8 for pixels
  48+ E0E8              ;; if that is > 238 then force a premature line wrap
  49+ E0E8              ;
  50+ E0E8              ;
  51+ E0E8              ;    push    iy
  52+ E0E8              ;    call	l1_print_char
  53+ E0E8              ;    pop     iy
  54+ E0E8              ;	inc		hl							; move 1 message character right
  55+ E0E8              ;	ld		a,e
  56+ E0E8              ;    cp      238
  57+ E0E8              ;    jr      nc,.NextLine
  58+ E0E8              ;	add		a,8
  59+ E0E8              ;	ld		e,a							; move 1 screen character right
  60+ E0E8              ;	jr		.PrintLoop
  61+ E0E8              ;.Clearstackandfinish:
  62+ E0E8              ;	pop		de
  63+ E0E8              ;	ret
  64+ E0E8              ;.NextLine:
  65+ E0E8              ;    ld      a,(hl)
  66+ E0E8              ;    cp      " "
  67+ E0E8              ;    ld      e,iyh
  68+ E0E8              ;    ld      a,d
  69+ E0E8              ;    add     a,8
  70+ E0E8              ;    ld      d,a
  71+ E0E8              ;    jr		.PrintLoop
  72+ E0E8
  73+ E0E8              ; Counts next word at hl, uses e and forces a wrap if it would over flow puts value in c
  74+ E0E8 E5           L1LenWordAtHL:          push    hl
  75+ E0E9 D5                                   push    de
  76+ E0EA 7E           .CountLoop:             ld      a,(hl)
  77+ E0EB FE 00                                cp      0
  78+ E0ED 28 0F                                jr      z,.CountDone
  79+ E0EF FE 20                                cp      32
  80+ E0F1 28 0B                                jr      z,.CountDone
  81+ E0F3 7B                                   ld      a,e
  82+ E0F4 C6 08                                add     a,8
  83+ E0F6 5F                                   ld      e,a
  84+ E0F7 FE EE                                cp      238
  85+ E0F9 30 07                                jr      nc,.TooLong
  86+ E0FB 23                                   inc     hl
  87+ E0FC 18 EC                                jr      .CountLoop
  88+ E0FE D1           .CountDone:             pop     de
  89+ E0FF E1                                   pop     hl
  90+ E100 AF                                   xor     a
  91+ E101 C9                                   ret
  92+ E102 D1           .TooLong                pop     de
  93+ E103 E1                                   pop     hl
  94+ E104 3E FF                                ld      a,$FF
  95+ E106 C9                                   ret
  96+ E107
  97+ E107 7E           L1PrintWordAtHL:        ld      a,(hl)
  98+ E108 FE 00                                cp      0
  99+ E10A C8                                   ret     z
 100+ E10B FE 20                                cp      32
 101+ E10D 28 0F                                jr      z,.ItsASpace
 102+ E10F FD E5                                push    iy
 103+ E111 CD BA E0                             call	l1_print_char
 104+ E114 FD E1                                pop     iy
 105+ E116 7B                                   ld      a,e
 106+ E117 C6 08                                add     a,8
 107+ E119 5F                                   ld      e,a
 108+ E11A 23                                   inc     hl
 109+ E11B C3 07 E1                             jp      L1PrintWordAtHL
 110+ E11E 23           .ItsASpace:             inc     hl      ;  Just a bodge for now
 111+ E11F 7B                                   ld      a,e
 112+ E120 C6 08                                add     a,8
 113+ E122 5F                                   ld      e,a
 114+ E123 C9                                   ret
 115+ E124
 116+ E124
 117+ E124              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 118+ E124              ; Now has full word level wrapping
 119+ E124 FD 63        l1_print_at_wrap:       ld      iyh,e
 120+ E126 7E           .PrintLoop:             ld		a,(hl)
 121+ E127 FE 00                                cp		0
 122+ E129 C8                                   ret		z
 123+ E12A CD E8 E0     .CountWordCharLen:      call    L1LenWordAtHL
 124+ E12D FE FF                                cp      $FF
 125+ E12F 28 06                                jr      z,.WrapNextLine
 126+ E131 CD 07 E1     .NotTooLong:            call    L1PrintWordAtHL
 127+ E134              ; Need to change to word wrap, so it will loop through string as before
 128+ E134              ; but read up until a null or space, take the character count * 8 for pixels
 129+ E134              ; if that is > 238 then force a premature line wrap
 130+ E134 18 F0                                jr		.PrintLoop
 131+ E136              .Clearstackandfinish:   ;op		de
 132+ E136 C9                                   ret
 133+ E137              .WrapNextLine:
 134+ E137 FD 5C        .NextLine:              ld      e,iyh
 135+ E139 7A                                   ld      a,d
 136+ E13A C6 08                                add     a,8
 137+ E13C 57                                   ld      d,a
 138+ E13D 18 E7                                jr		.PrintLoop
 139+ E13F
 140+ E13F
# file closed: ./Layer1Graphics/layer1_print_at.asm
 872  E13F                  DISPLAY "Bank ",BankLAYER1," - Bytes free ",/D, $2000 - ($-LAYER1Addr), " - BankLAYER1"
 873  E13F              ; Bank 59  ------------------------------------------------------------------------------------------------------------------------
 874  E13F              ; In the first copy of the banks the "Non number" labels exist. They will map directly in other banks
 875  E13F              ; as the is aligned and data tables are after that
 876  E13F              ; need to make the ship index tables same size in each to simplify further
 877  E13F                  SLOT    ShipModelsAddr
 878  E13F                  PAGE    BankShipModels1
 879  E13F              	ORG     ShipModelsAddr, BankShipModels1
 880  E000                  INCLUDE "./Data/ShipModelMacros.asm"
# file opened: ./Data/ShipModelMacros.asm
   1+ E000              MShipBankTable          MACRO
   2+ E000 ~                                    DW      BankShipModels1
   3+ E000 ~                                    DW      BankShipModels2
   4+ E000 ~                                    DW      BankShipModels3
   5+ E000 ~                                    DW      BankShipModels4
   6+ E000                                      ENDM
   7+ E000              ; For ship number A fetch
   8+ E000              ;           the adjusted ship number in B , C = original number
   9+ E000              ;           bank number in A for the respective ship based on the ship table
  10+ E000              MGetShipBankId:         MACRO   banktable
  11+ E000 ~                                    ld      b,0
  12+ E000 ~                                    ld      c,a                                 ; c= original ship id
  13+ E000 ~            .ShiftLoop:             srl     a
  14+ E000 ~                                    srl     a
  15+ E000 ~                                    srl     a
  16+ E000 ~                                    srl     a                                   ; divide by 16
  17+ E000 ~                                    ld      b,a                                 ; b = bank nbr
  18+ E000 ~                                    ld      a,c
  19+ E000 ~                                    ld      d,b
  20+ E000 ~                                    ld      e,16
  21+ E000 ~                                    mul                                         ; de = 16 * bank number (max is about 15 banks)
  22+ E000 ~                                    sub     e                                   ; a= actual model id now
  23+ E000 ~            .SelectedBank:          ld      d,b                                 ; save current bank number
  24+ E000 ~                                    ld      b,a                                 ; b = adjusted ship nbr
  25+ E000 ~                                    ld      a,d                                 ; a = bank number
  26+ E000 ~            ;.. Now b = bank and a = adjusted ship nbr
  27+ E000 ~                                    ld      hl,banktable                        ; a= bank index
  28+ E000 ~                                    add     hl,a
  29+ E000 ~                                    add     hl,a
  30+ E000 ~                                    ld      a,(hl)                              ; a = actual bank now
  31+ E000 ~                                    ClearCarryFlag
  32+ E000 ~                                    ret
  33+ E000                                      ENDM
  34+ E000
  35+ E000              McopyVertsToUniverse:   MACRO
  36+ E000 ~                                    ld          hl,(VerticesAddyAddr)       ; now the pointers are in UBnk its easy to read
  37+ E000 ~                                    ld          de,UBnkHullVerticies
  38+ E000 ~                                    ld          b,0
  39+ E000 ~                                    ld			a,(VertexCtX6Addr)
  40+ E000 ~                                    ld          c,a
  41+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  42+ E000 ~                                    call        memcopy_dma
  43+ E000 ~                                    ret
  44+ E000                                      ENDM
  45+ E000
  46+ E000              McopyVertsToSpaceStation:   MACRO
  47+ E000 ~                                    ld          hl,(SS_VerticesAddyAddr)       ; now the pointers are in UBnk its easy to read
  48+ E000 ~                                    ld          de,SS_BnkHullVerticies
  49+ E000 ~                                    ld          b,0
  50+ E000 ~                                    ld			a,(SS_VertexCtX6Addr)
  51+ E000 ~                                    ld          c,a
  52+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  53+ E000 ~                                    call        memcopy_dma
  54+ E000 ~                                    ret
  55+ E000                                      ENDM
  56+ E000
  57+ E000              McopyEdgesToUniverse:   MACRO
  58+ E000 ~                                    ld          hl,(EdgeAddyAddr)          ; now the pointers are in UBnk its easy to read
  59+ E000 ~                                    ld          de,UBnkHullEdges
  60+ E000 ~                                    ld          b,0
  61+ E000 ~                                    ld			a,(LineX4Addr)
  62+ E000 ~                                    ld          c,a
  63+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  64+ E000 ~                                    call        memcopy_dma
  65+ E000 ~                                    ret
  66+ E000                                      ENDM
  67+ E000
  68+ E000              McopyEdgesToSpaceStation: MACRO
  69+ E000 ~                                    ld          hl,(SS_EdgeAddyAddr)          ; now the pointers are in UBnk its easy to read
  70+ E000 ~                                    ld          de,SS_BnkHullEdges
  71+ E000 ~                                    ld          b,0
  72+ E000 ~                                    ld			a,(SS_LineX4Addr)
  73+ E000 ~                                    ld          c,a
  74+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  75+ E000 ~                                    call        memcopy_dma
  76+ E000 ~                                    ret
  77+ E000                                      ENDM
  78+ E000
  79+ E000              McopyNormsToUniverse:   MACRO
  80+ E000 ~                                    ld          hl,(FaceAddyAddr)          ; now the pointers are in UBnk its easy to read
  81+ E000 ~                                    ld          de,UBnkHullNormals
  82+ E000 ~                                    ld          b,0
  83+ E000 ~                                    ld          a,(FaceCtX4Addr)
  84+ E000 ~                                    ld          c,a
  85+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  86+ E000 ~                                    call        memcopy_dma
  87+ E000 ~                                    ret
  88+ E000                                      ENDM
  89+ E000
  90+ E000              McopyNormsToSpaceStation:   MACRO
  91+ E000 ~                                    ld          hl,(SS_FaceAddyAddr)          ; now the pointers are in UBnk its easy to read
  92+ E000 ~                                    ld          de,SS_BnkHullNormals
  93+ E000 ~                                    ld          b,0
  94+ E000 ~                                    ld          a,(SS_FaceCtX4Addr)
  95+ E000 ~                                    ld          c,a
  96+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  97+ E000 ~                                    call        memcopy_dma
  98+ E000 ~                                    ret
  99+ E000                                      ENDM
 100+ E000              ; Passes in ship nbr in A and bank is part of MACRO
 101+ E000              MCopyShipToUniverse:    MACRO       banklabel
 102+ E000 ~                                    ld          hl,UBnkShipModelBank
 103+ E000 ~                                    ld          (hl),banklabel
 104+ E000 ~                                    push        af
 105+ E000 ~                                    ld          a,iyl
 106+ E000 ~                                    ld          (UBnkShipModelId),a
 107+ E000 ~                                    pop         af
 108+ E000 ~                                    ld          (UBnkShipModelNbr),a
 109+ E000 ~            .GetHullDataLength:     ld          hl,ShipModelSizeTable
 110+ E000 ~                                    add         hl,a
 111+ E000 ~                                    add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
 112+ E000 ~                                    ld          c,(hl)
 113+ E000 ~                                    inc         hl
 114+ E000 ~                                    ld          b,(hl)                      ; bc now equals length of data set
 115+ E000 ~            .GetHullDataAddress:    ld          hl,ShipModelTable
 116+ E000 ~                                    add         hl,a
 117+ E000 ~                                    add         hl,a                        ; now hl = address of ship data value
 118+ E000 ~                                    ld          a,(hl)
 119+ E000 ~                                    inc         hl
 120+ E000 ~                                    ld          h,(hl)
 121+ E000 ~                                    ld          l,a                         ; now hl = address of ship hull data
 122+ E000 ~                                    ld          de,UBnkHullCopy             ; Universe bank
 123+ E000 ~                                    ld          bc,ShipDataLength
 124+ E000 ~                                    ldir
 125+ E000 ~                                    call        CopyVertsToUniv
 126+ E000 ~                                    call        CopyEdgesToUniv
 127+ E000 ~                                    call        CopyNormsToUniv
 128+ E000 ~            .ClearName:             ld          hl,StartOfUnivName
 129+ E000 ~                                    ld          a," "
 130+ E000 ~                                    ld          b,16
 131+ E000 ~            .fillLoop:              ld          (hl),a
 132+ E000 ~                                    inc         hl
 133+ E000 ~                                    djnz        .fillLoop
 134+ E000 ~            .SetName:               ld          a,(UBnkShipModelId)
 135+ E000 ~                                    call        ShipIndexToAddress
 136+ E000 ~                                    ld          de,StartOfUnivName
 137+ E000 ~                                    ld          b,16
 138+ E000 ~            .CopyLoop:              ld          a,(hl)
 139+ E000 ~                                    cp          0
 140+ E000 ~                                    jr          z,.CopyDone
 141+ E000 ~                                    ld          (de),a
 142+ E000 ~                                    inc         hl
 143+ E000 ~                                    inc         de
 144+ E000 ~                                    djnz        .CopyLoop
 145+ E000 ~            .CopyDone:              ret
 146+ E000                                      ENDM
 147+ E000
 148+ E000              MCopyShipToSpaceStation:MACRO       banklabel
 149+ E000 ~                                    ld          hl,SS_BnkShipModelBank
 150+ E000 ~                                    ld          (hl),banklabel
 151+ E000 ~                                    push        af
 152+ E000 ~                                    ld          a,iyl
 153+ E000 ~                                    ld          (SS_BnkShipModelId),a
 154+ E000 ~                                    pop         af
 155+ E000 ~                                    ld          (SS_BnkShipModelNbr),a
 156+ E000 ~            .GetHullDataLength:     ld          hl,ShipModelSizeTable
 157+ E000 ~                                    add         hl,a
 158+ E000 ~                                    add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
 159+ E000 ~                                    ld          c,(hl)
 160+ E000 ~                                    inc         hl
 161+ E000 ~                                    ld          b,(hl)                      ; bc now equals length of data set
 162+ E000 ~            .GetHullDataAddress:    ld          hl,ShipModelTable
 163+ E000 ~                                    add         hl,a
 164+ E000 ~                                    add         hl,a                        ; now hl = address of ship data value
 165+ E000 ~                                    ld          a,(hl)
 166+ E000 ~                                    inc         hl
 167+ E000 ~                                    ld          h,(hl)
 168+ E000 ~                                    ld          l,a                         ; now hl = address of ship hull data
 169+ E000 ~                                    ld          de,SS_BnkHullCopy             ; Universe bank
 170+ E000 ~                                    ld          bc,ShipDataLength
 171+ E000 ~                                    ldir
 172+ E000 ~                                    call        CopyVertsToSpaceStation
 173+ E000 ~                                    call        CopyEdgesToSpaceStation
 174+ E000 ~                                    call        CopyNormsToSpaceStation
 175+ E000 ~            .SetName:               ld          a,(SS_BnkShipModelId)
 176+ E000 ~                                    call        ShipIndexToAddress
 177+ E000 ~                                    ld          de,StartOfSpaceStationName
 178+ E000 ~                                    ld          b,16
 179+ E000 ~            .CopyLoop:              ld          a,(hl)
 180+ E000 ~                                    cp          0
 181+ E000 ~                                    jr          z,.CopyDone
 182+ E000 ~                                    ld          (de),a
 183+ E000 ~                                    inc         hl
 184+ E000 ~                                    inc         de
 185+ E000 ~                                    djnz        .CopyLoop
 186+ E000 ~            .CopyDone:              ret
 187+ E000                                      ENDM
 188+ E000
 189+ E000              MCopyBodyToUniverse:    MACRO       copyRoutine
 190+ E000 ~                                    ld          a,13
 191+ E000 ~                                    call        copyRoutine
 192+ E000 ~                                    ret
 193+ E000                                      ENDM
 194+ E000
 195+ E000              MCopyBodyToSpaceStation:MACRO       copyRoutine
 196+ E000 ~                                    ld          a,13
 197+ E000 ~                                    call        copyRoutine
 198+ E000 ~                                    ret
 199+ E000                                      ENDM
 200+ E000
 201+ E000              MCopyShipIdToUniverse:  MACRO
 202+ E000 ~                                    call        GetShipModelId
 203+ E000 ~                                    MMUSelectShipBankA
 204+ E000 ~                                    ld          a,b
 205+ E000 ~                                    jp          CopyShipToUniverse
 206+ E000                                      ENDM
 207+ E000
 208+ E000              MCopyShipIdToSpaceStation:  MACRO
 209+ E000 ~                                    call        GetShipModelId
 210+ E000 ~                                    MMUSelectShipBankA
 211+ E000 ~                                    ld          a,b
 212+ E000 ~                                    jp          CopyShipToSpaceStation
 213+ E000                                      ENDM
# file closed: ./Data/ShipModelMacros.asm
 881  E000                  INCLUDE "./Data/ShipBank1Label.asm"
# file opened: ./Data/ShipBank1Label.asm
   1+ E000 53 68 69 70  ShipBank1Label:         DB  "ShipBank1      "
   1+ E004 42 61 6E 6B
   1+ E008 31 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank1Label.asm
 882  E00F              GetShipBankId:
 883  E00F              GetShipBank1Id:           MGetShipBankId ShipBankTable
 883  E00F 06 00       >                        ld      b,0
 883  E011 4F          >                        ld      c,a                                 ; c= original ship id
 883  E012 CB 3F       >.ShiftLoop:             srl     a
 883  E014 CB 3F       >                        srl     a
 883  E016 CB 3F       >                        srl     a
 883  E018 CB 3F       >                        srl     a                                   ; divide by 16
 883  E01A 47          >                        ld      b,a                                 ; b = bank nbr
 883  E01B 79          >                        ld      a,c
 883  E01C 50          >                        ld      d,b
 883  E01D 1E 10       >                        ld      e,16
 883  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
 883  E021 93          >                        sub     e                                   ; a= actual model id now
 883  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
 883  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
 883  E024 7A          >                        ld      a,d                                 ; a = bank number
 883  E025             >;.. Now b = bank and a = adjusted ship nbr
 883  E025 21 62 E0    >                        ld      hl,ShipBankTable                        ; a= bank index
 883  E028 ED 31       >                        add     hl,a
 883  E02A ED 31       >                        add     hl,a
 883  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
 883  E02D             >                        ClearCarryFlag
 883  E02D B7          >                        or a
 883  E02E C9          >                        ret
 884  E02F              CopyVertsToUniv:
 885  E02F              CopyVertsToUniv1:         McopyVertsToUniverse
 885  E02F 2A 0C C4    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in UBnk its easy to read
 885  E032 11 12 C4    >                        ld          de,UBnkHullVerticies
 885  E035 06 00       >                        ld          b,0
 885  E037 3A 00 C4    >                        ld			a,(VertexCtX6Addr)
 885  E03A 4F          >                        ld          c,a
 885  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 885  E03C CD 2A 7E    >                        call        memcopy_dma
 885  E03F C9          >                        ret
 886  E040              CopyEdgesToUniv:
 887  E040              CopyEdgesToUniv1:         McopyEdgesToUniverse
 887  E040 2A FA C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in UBnk its easy to read
 887  E043 11 02 C5    >                        ld          de,UBnkHullEdges
 887  E046 06 00       >                        ld          b,0
 887  E048 3A FC C3    >                        ld			a,(LineX4Addr)
 887  E04B 4F          >                        ld          c,a
 887  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 887  E04D CD 2A 7E    >                        call        memcopy_dma
 887  E050 C9          >                        ret
 888  E051              CopyNormsToUniv:
 889  E051              CopyNormsToUniv1:         McopyNormsToUniverse
 889  E051 2A 08 C4    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in UBnk its easy to read
 889  E054 11 CA C5    >                        ld          de,UBnkHullNormals
 889  E057 06 00       >                        ld          b,0
 889  E059 3A 04 C4    >                        ld          a,(FaceCtX4Addr)
 889  E05C 4F          >                        ld          c,a
 889  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 889  E05E CD 2A 7E    >                        call        memcopy_dma
 889  E061 C9          >                        ret
 890  E062              ShipBankTable:
 891  E062              ShipBankTable1:           MShipBankTable
 891  E062 3B 00       >                        DW      BankShipModels1
 891  E064 43 00       >                        DW      BankShipModels2
 891  E066 44 00       >                        DW      BankShipModels3
 891  E068 45 00       >                        DW      BankShipModels4
 892  E06A              CopyShipToUniverse:
 893  E06A              CopyShipToUniverse1       MCopyShipToUniverse     BankShipModels1
 893  E06A 21 41 C0    >                        ld          hl,UBnkShipModelBank
 893  E06D 36 3B       >                        ld          (hl),BankShipModels1
 893  E06F F5          >                        push        af
 893  E070 FD 7D       >                        ld          a,iyl
 893  E072 32 43 C0    >                        ld          (UBnkShipModelId),a
 893  E075 F1          >                        pop         af
 893  E076 32 42 C0    >                        ld          (UBnkShipModelNbr),a
 893  E079 21 57 E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
 893  E07C ED 31       >                        add         hl,a
 893  E07E ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
 893  E080 4E          >                        ld          c,(hl)
 893  E081 23          >                        inc         hl
 893  E082 46          >                        ld          b,(hl)                      ; bc now equals length of data set
 893  E083 21 D7 E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
 893  E086 ED 31       >                        add         hl,a
 893  E088 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
 893  E08A 7E          >                        ld          a,(hl)
 893  E08B 23          >                        inc         hl
 893  E08C 66          >                        ld          h,(hl)
 893  E08D 6F          >                        ld          l,a                         ; now hl = address of ship hull data
 893  E08E 11 F7 C3    >                        ld          de,UBnkHullCopy             ; Universe bank
 893  E091 01 1B 00    >                        ld          bc,ShipDataLength
 893  E094 ED B0       >                        ldir
 893  E096 CD 2F E0    >                        call        CopyVertsToUniv
 893  E099 CD 40 E0    >                        call        CopyEdgesToUniv
 893  E09C CD 51 E0    >                        call        CopyNormsToUniv
 893  E09F 21 10 C0    >.ClearName:             ld          hl,StartOfUnivName
 893  E0A2 3E 20       >                        ld          a," "
 893  E0A4 06 10       >                        ld          b,16
 893  E0A6 77          >.fillLoop:              ld          (hl),a
 893  E0A7 23          >                        inc         hl
 893  E0A8 10 FC       >                        djnz        .fillLoop
 893  E0AA 3A 43 C0    >.SetName:               ld          a,(UBnkShipModelId)
 893  E0AD CD E3 8E    >                        call        ShipIndexToAddress
 893  E0B0 11 10 C0    >                        ld          de,StartOfUnivName
 893  E0B3 06 10       >                        ld          b,16
 893  E0B5 7E          >.CopyLoop:              ld          a,(hl)
 893  E0B6 FE 00       >                        cp          0
 893  E0B8 28 05       >                        jr          z,.CopyDone
 893  E0BA 12          >                        ld          (de),a
 893  E0BB 23          >                        inc         hl
 893  E0BC 13          >                        inc         de
 893  E0BD 10 F6       >                        djnz        .CopyLoop
 893  E0BF C9          >.CopyDone:              ret
 894  E0C0              CopyBodyToUniverse:
 895  E0C0              CopyBodyToUniverse1:      MCopyBodyToUniverse     CopyShipToUniverse1
 895  E0C0 3E 0D       >                        ld          a,13
 895  E0C2 CD 6A E0    >                        call        CopyShipToUniverse1
 895  E0C5 C9          >                        ret
 896  E0C6              CopyVertsToUniverse:
 897  E0C6              CopyVertsToUniverse1:     McopyVertsToUniverse
 897  E0C6 2A 0C C4    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in UBnk its easy to read
 897  E0C9 11 12 C4    >                        ld          de,UBnkHullVerticies
 897  E0CC 06 00       >                        ld          b,0
 897  E0CE 3A 00 C4    >                        ld			a,(VertexCtX6Addr)
 897  E0D1 4F          >                        ld          c,a
 897  E0D2 EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 897  E0D3 CD 2A 7E    >                        call        memcopy_dma
 897  E0D6 C9          >                        ret
 898  E0D7                  IFDEF SPACESTATIONUNIQUECODE
 899  E0D7 ~            CopyNormsToSpaceStation:
 900  E0D7 ~            CopyNormsToSpaceStation1: McopyNormsToSpaceStation
 901  E0D7 ~            CopyVertsToSpaceStation:
 902  E0D7 ~            CopyVertsToSpaceStation1: McopyVertsToSpaceStation
 903  E0D7 ~            CopyEdgesToSpaceStation:
 904  E0D7 ~            CopyEdgesToSpaceStation1: McopyEdgesToSpaceStation
 905  E0D7 ~            CopyShipToSpaceStation:
 906  E0D7 ~            CopyShipToSpaceStation1   MCopyShipToSpaceStation  BankShipModels1
 907  E0D7 ~            CopyBodyToSpaceStation:
 908  E0D7 ~            CopyBodyToSpaceStation1:  MCopyBodyToSpaceStation  CopyShipToSpaceStation1
 909  E0D7                  ENDIF
 910  E0D7                  INCLUDE "./Data/ShipModelMetaData1.asm"
# file opened: ./Data/ShipModelMetaData1.asm
   1+ E0D7              ShipModelTable:
   2+ E0D7 77 E1        ShipModelTable1:         DW Adder                                   ;00 $00
   3+ E0D9 B2 E2                                 DW Anaconda                                ;01 $01
   4+ E0DB BF E3                                 DW Asp_Mk_2                                ;02 $02
   5+ E0DD F0 E4                                 DW Boa                                     ;03 $03
   6+ E0DF ED E5                                 DW CargoType5                              ;04 $04
   7+ E0E1 C1 E6                                 DW Boulder                                 ;05 $05
   8+ E0E3 6E E7                                 DW Asteroid                                ;06 $06
   9+ E0E5 4F E8                                 DW Bushmaster                              ;07 $07
  10+ E0E7 26 E9                                 DW Chameleon                               ;08 $08
  11+ E0E9 58 EA                                 DW CobraMk3                                ;09 $09
  12+ E0EB EB EB                                 DW Cobra_Mk_1                              ;10 $0A
  13+ E0ED BC EC                                 DW Cobra_Mk_3_P                            ;11 $0B
  14+ E0EF 4F EE                                 DW Constrictor                             ;12 $0C
  15+ E0F1 5C EF                                 DW Coriolis                                ;13 $0D
  16+ E0F3 83 F0                                 DW Cougar                                  ;14 $0E
  17+ E0F5 90 F1                                 DW Dodo                                    ;15 $0F
  18+ E0F7              ShipVertexTable:
  19+ E0F7 96 E1        ShipVertexTable1:        DW AdderVertices                           ;00 $00
  20+ E0F9 D1 E2                                 DW AnacondaVertices                        ;01 $01
  21+ E0FB DE E3                                 DW Asp_Mk_2Vertices                        ;02 $02
  22+ E0FD 0F E5                                 DW BoaVertices                             ;03 $03
  23+ E0FF 0C E6                                 DW CargoType5Vertices                      ;04 $04
  24+ E101 E0 E6                                 DW BoulderVertices                         ;05 $05
  25+ E103 8D E7                                 DW AsteroidVertices                        ;06 $06
  26+ E105 6E E8                                 DW BushmasterVertices                      ;07 $07
  27+ E107 44 E9                                 DW ChameleonVertices                       ;08 $08
  28+ E109 77 EA                                 DW CobraMk3Vertices                        ;09 $09
  29+ E10B 0A EC                                 DW Cobra_Mk_1Vertices                      ;10 $0A
  30+ E10D DB EC                                 DW Cobra_Mk_3_PVertices                    ;11 $0B
  31+ E10F 6E EE                                 DW ConstrictorVertices                     ;12 $0C
  32+ E111 7B EF                                 DW CoriolisVertices                        ;13 $0D
  33+ E113 A2 F0                                 DW CougarVertices                          ;14 $0E
  34+ E115 AF F1                                 DW DodoVertices                            ;15 $0F
  35+ E117              ShipEdgeTable:
  36+ E117 02 E2        ShipEdgeTable1:          DW AdderEdges                              ;00 $00
  37+ E119 2B E3                                 DW AnacondaEdges                           ;01 $01
  38+ E11B 50 E4                                 DW Asp_Mk_2Edges                           ;02 $02
  39+ E11D 5D E5                                 DW BoaEdges                                ;03 $03
  40+ E11F 48 E6                                 DW CargoType5Edges                         ;04 $04
  41+ E121 0A E7                                 DW BoulderEdges                            ;05 $05
  42+ E123 C3 E7                                 DW AsteroidEdges                           ;06 $06
  43+ E125 B6 E8                                 DW BushmasterEdges                         ;07 $07
  44+ E127 B0 E9                                 DW ChameleonEdges                          ;08 $08
  45+ E129 1F EB                                 DW CobraMk3Edges                           ;09 $09
  46+ E12B 4C EC                                 DW Cobra_Mk_1Edges                         ;10 $0A
  47+ E12D 83 ED                                 DW Cobra_Mk_3_PEdges                       ;11 $0B
  48+ E12F D4 EE                                 DW ConstrictorEdges                        ;12 $0C
  49+ E131 DB EF                                 DW CoriolisEdges                           ;13 $0D
  50+ E133 14 F1                                 DW CougarEdges                             ;14 $0E
  51+ E135 3F F2                                 DW DodoEdges                               ;15 $0F
  52+ E137              ShipNormalTable:
  53+ E137 76 E2        ShipNormalTable1:        DW AdderNormals                            ;00 $00
  54+ E139 8F E3                                 DW AnacondaNormals                         ;01 $01
  55+ E13B C0 E4                                 DW Asp_Mk_2Normals                         ;02 $02
  56+ E13D BD E5                                 DW BoaNormals                              ;03 $03
  57+ E13F 84 E6                                 DW CargoType5Normals                       ;04 $04
  58+ E141 46 E7                                 DW BoulderNormals                          ;05 $05
  59+ E143 17 E8                                 DW AsteroidNormals                         ;06 $06
  60+ E145 02 E9                                 DW BushmasterNormals                       ;07 $07
  61+ E147 24 EA                                 DW ChameleonNormals                        ;08 $08
  62+ E149 B7 EB                                 DW CobraMk3Normals                         ;09 $09
  63+ E14B 94 EC                                 DW Cobra_Mk_1Normals                       ;10 $0A
  64+ E14D 1B EE                                 DW Cobra_Mk_3_PNormals                     ;11 $0B
  65+ E14F 34 EF                                 DW ConstrictorNormals                      ;12 $0C
  66+ E151 4B F0                                 DW CoriolisNormals                         ;13 $0D
  67+ E153 78 F1                                 DW CougarNormals                           ;14 $0E
  68+ E155 C7 F2                                 DW DodoNormals                             ;15 $0F
  69+ E157              ShipModelSizeTable:
  70+ E157 3B 01        ShipModelSizeTable1:     DW AdderLen                                ;00 $00
  71+ E159 0D 01                                 DW AnacondaLen                             ;01 $01
  72+ E15B 31 01                                 DW Asp_Mk_2Len                             ;02 $02
  73+ E15D FD 00                                 DW BoaLen                                  ;03 $03
  74+ E15F B3 00                                 DW CargoType5Len                           ;04 $04
  75+ E161 AD 00                                 DW BoulderLen                              ;05 $05
  76+ E163 E1 00                                 DW AsteroidLen                             ;06 $06
  77+ E165 D7 00                                 DW BushmasterLen                           ;07 $07
  78+ E167 32 01                                 DW ChameleonLen                            ;08 $08
  79+ E169 93 01                                 DW CobraMk3Len                             ;09 $09
  80+ E16B D1 00                                 DW Cobra_Mk_1Len                           ;10 $0A
  81+ E16D 93 01                                 DW Cobra_Mk_3_PLen                         ;11 $0B
  82+ E16F 0D 01                                 DW ConstrictorLen                          ;12 $0C
  83+ E171 27 01                                 DW CoriolisLen                             ;13 $0D
  84+ E173 0D 01                                 DW CougarLen                               ;14 $0E
  85+ E175 67 01                                 DW DodoLen                                 ;15 $0F
  86+ E177
  87+ E177                                      include "Data/ships/Adder.asm"
# file opened: ./Data/ships/Adder.asm
   1++E177 00           Adder:	                DB $00                              ; Number of cargo canisters released when destroyed
   2++E178 C4 09                                DW 50 * 50                          ; Ship's targetable area LoHi
   3++E17A 02 E2                                DW AdderEdges                       ; Edge Data
   4++E17C 74                                   DB AdderEdgesSize                   ; Size of Edge Data
   5++E17D 00                                   DB $00                              ; Gun Vertex Byte offset
   6++E17E 16                                   DB $16                              ; Explosion Count
   7++E17F 12                                   DB AdderVertSize / 6                ; Vertex Count /6
   8++E180 6C                                   DB AdderVertSize                    ; Vertex Count
   9++E181 1D                                   DB AdderEdgesCnt                    ; Edges Count
  10++E182 28 00                                DW $0028                            ; Bounty LoHi
  11++E184 3C                                   DB AdderNormalsSize                 ; Face (Normal) Count
  12++E185 17                                   DB $17                              ; Range when it turns to a dot
  13++E186 48                                   DB $48                              ; Energy Max
  14++E187 18                                   DB $18                              ; Speed Max
  15++E188 76 E2                                DW AdderNormals                     ; Normals
  16++E18A 12                                   DB $12                              ; Q scaling
  17++E18B 21                                   DB $21                              ; Laser power and Nbr Missiles
  18++E18C 96 E1                                DW AdderVertices                    ; Verticles Address
  19++E18E 00                                   DB ShipTypeNormal                   ; Ship Type
  20++E18F 00                                   DB 0                                ; NewB Tactics
  21++E190 80                                   DB ShipCanAnger                     ; AI Flags
  22++E191 80                                   DB $80                              ; chance of ECM module
  23++E192 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E193 00 00                                DW $0000                            ; no solid data
  25++E195 00                                   DB $00                              ; no solid data
  26++E196
  27++E196                                                     ; chance of ECM module
  28++E196 12 00 28 9F  AdderVertices:	        DB $12, $00, $28, $9F, $01, $BC     ;01
  28++E19A 01 BC
  29++E19C 12 00 28 1F                          DB $12, $00, $28, $1F, $01, $23     ;02
  29++E1A0 01 23
  30++E1A2 1E 00 18 3F                          DB $1E, $00, $18, $3F, $23, $45     ;03
  30++E1A6 23 45
  31++E1A8 1E 00 28 3F                          DB $1E, $00, $28, $3F, $45, $66     ;04
  31++E1AC 45 66
  32++E1AE 12 07 28 7F                          DB $12, $07, $28, $7F, $56, $7E     ;05
  32++E1B2 56 7E
  33++E1B4 12 07 28 FF                          DB $12, $07, $28, $FF, $78, $AE     ;06
  33++E1B8 78 AE
  34++E1BA 1E 00 28 BF                          DB $1E, $00, $28, $BF, $89, $AA     ;07
  34++E1BE 89 AA
  35++E1C0 1E 00 18 BF                          DB $1E, $00, $18, $BF, $9A, $BC     ;08
  35++E1C4 9A BC
  36++E1C6 12 07 28 BF                          DB $12, $07, $28, $BF, $78, $9D     ;09
  36++E1CA 78 9D
  37++E1CC 12 07 28 3F                          DB $12, $07, $28, $3F, $46, $7D     ;10
  37++E1D0 46 7D
  38++E1D2 12 07 0D 9F                          DB $12, $07, $0D, $9F, $09, $BD     ;11
  38++E1D6 09 BD
  39++E1D8 12 07 0D 1F                          DB $12, $07, $0D, $1F, $02, $4D     ;12
  39++E1DC 02 4D
  40++E1DE 12 07 0D DF                          DB $12, $07, $0D, $DF, $1A, $CE     ;13
  40++E1E2 1A CE
  41++E1E4 12 07 0D 5F                          DB $12, $07, $0D, $5F, $13, $5E     ;14
  41++E1E8 13 5E
  42++E1EA 0B 03 1D 85                          DB $0B, $03, $1D, $85, $00, $00     ;15
  42++E1EE 00 00
  43++E1F0 0B 03 1D 05                          DB $0B, $03, $1D, $05, $00, $00     ;16
  43++E1F4 00 00
  44++E1F6 0B 04 18 04                          DB $0B, $04, $18, $04, $00, $00     ;17
  44++E1FA 00 00
  45++E1FC 0B 04 18 84                          DB $0B, $04, $18, $84, $00, $00     ;18
  45++E200 00 00
  46++E202              AdderVertSize:          equ $ - AdderVertices
  47++E202 1F 01 00 04  AdderEdges:	            DB $1F, $01, $00, $04               ;01
  48++E206 07 23 04 08                          DB $07, $23, $04, $08               ;02
  49++E20A 1F 45 08 0C                          DB $1F, $45, $08, $0C               ;03
  50++E20E 1F 56 0C 10                          DB $1F, $56, $0C, $10               ;04
  51++E212 1F 7E 10 14                          DB $1F, $7E, $10, $14               ;05
  52++E216 1F 8A 14 18                          DB $1F, $8A, $14, $18               ;06
  53++E21A 1F 9A 18 1C                          DB $1F, $9A, $18, $1C               ;07
  54++E21E 07 BC 1C 00                          DB $07, $BC, $1C, $00               ;08
  55++E222 1F 46 0C 24                          DB $1F, $46, $0C, $24               ;09
  56++E226 1F 7D 24 20                          DB $1F, $7D, $24, $20               ;10
  57++E22A 1F 89 20 18                          DB $1F, $89, $20, $18               ;11
  58++E22E 1F 0B 00 28                          DB $1F, $0B, $00, $28               ;12
  59++E232 1F 9B 1C 28                          DB $1F, $9B, $1C, $28               ;13
  60++E236 1F 02 04 2C                          DB $1F, $02, $04, $2C               ;14
  61++E23A 1F 24 08 2C                          DB $1F, $24, $08, $2C               ;15
  62++E23E 1F 1C 00 30                          DB $1F, $1C, $00, $30               ;16
  63++E242 1F AC 1C 30                          DB $1F, $AC, $1C, $30               ;17
  64++E246 1F 13 04 34                          DB $1F, $13, $04, $34               ;18
  65++E24A 1F 35 08 34                          DB $1F, $35, $08, $34               ;19
  66++E24E 1F 0D 28 2C                          DB $1F, $0D, $28, $2C               ;20
  67++E252 1F 1E 30 34                          DB $1F, $1E, $30, $34               ;21
  68++E256 1F 9D 20 28                          DB $1F, $9D, $20, $28               ;22
  69++E25A 1F 4D 24 2C                          DB $1F, $4D, $24, $2C               ;23
  70++E25E 1F AE 14 30                          DB $1F, $AE, $14, $30               ;24
  71++E262 1F 5E 10 34                          DB $1F, $5E, $10, $34               ;25
  72++E266 05 00 38 3C                          DB $05, $00, $38, $3C               ;26
  73++E26A 03 00 3C 40                          DB $03, $00, $3C, $40               ;27
  74++E26E 04 00 40 44                          DB $04, $00, $40, $44               ;28
  75++E272 03 00 44 38                          DB $03, $00, $44, $38               ;29
  76++E276              AdderEdgesSize:         equ $ - AdderEdges
  77++E276              AdderEdgesCnt:          equ AdderEdgesSize/4
  78++E276 1F 00 27 0A  AdderNormals:	        DB $1F, $00, $27, $0A               ;01
  79++E27A 5F 00 27 0A                          DB $5F, $00, $27, $0A               ;02
  80++E27E 1F 45 32 0D                          DB $1F, $45, $32, $0D               ;03
  81++E282 5F 45 32 0D                          DB $5F, $45, $32, $0D               ;04
  82++E286 1F 1E 34 00                          DB $1F, $1E, $34, $00               ;05
  83++E28A 5F 1E 34 00                          DB $5F, $1E, $34, $00               ;06
  84++E28E 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;07
  85++E292 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;08
  86++E296 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;09
  87++E29A 9F 1E 34 00                          DB $9F, $1E, $34, $00               ;10
  88++E29E DF 1E 34 00                          DB $DF, $1E, $34, $00               ;11
  89++E2A2 9F 45 32 0D                          DB $9F, $45, $32, $0D               ;12
  90++E2A6 DF 45 32 0D                          DB $DF, $45, $32, $0D               ;13
  91++E2AA 1F 00 1C 00                          DB $1F, $00, $1C, $00               ;14
  92++E2AE 5F 00 1C 00                          DB $5F, $00, $1C, $00               ;15
  93++E2B2
  94++E2B2              AdderNormalsSize:       equ $ - AdderNormals
  95++E2B2              AdderLen:                equ $ - Adder
  96++E2B2
  97++E2B2
  98++E2B2
  99++E2B2
 100++E2B2
 101++E2B2
 102++E2B2
 103++E2B2
 104++E2B2
 105++E2B2
 106++E2B2
# file closed: ./Data/ships/Adder.asm
  88+ E2B2                                      include "Data/ships/Anaconda.asm"
# file opened: ./Data/ships/Anaconda.asm
   1++E2B2 07           Anaconda:	            DB $07                                                        ; Number of cargo canisters released when destroyed
   2++E2B3 10 27                                DW 100 * 100                                                  ; Ship's targetable area LoHi
   3++E2B5 2B E3                                DW AnacondaEdges                                              ; Edge Data
   4++E2B7 64                                   DB AnacondaEdgesSize                                          ; Size of Edge Data
   5++E2B8 30                                   DB $30                                                        ; Gun Vertex Byte offset
   6++E2B9 2E                                   DB $2E                                                        ; Explosion Count
   7++E2BA 0F                                   DB AnacondaVertSize / 6                                       ; Vertex Count /6
   8++E2BB 5A                                   DB AnacondaVertSize                                           ; Vertex Count
   9++E2BC 19                                   DB AnacondaEdgesCnt                                           ; Edges Count
  10++E2BD 00 00                                DW $0000                                                      ; Bounty LoHi
  11++E2BF 30                                   DB AnacondaNormalsSize                                        ; Face (Normal) Count
  12++E2C0 24                                   DB $24                                                        ; Range when it turns to a dot
  13++E2C1 FC                                   DB $FC                                                        ; Energy Max
  14++E2C2 0E                                   DB $0E                                                        ; Speed Max
  15++E2C3 8F E3                                DW AnacondaNormals                                            ; Normals
  16++E2C5 11                                   DB $11                                                        ; Q scaling
  17++E2C6 3F                                   DB $3F                                                        ; Laser power and Nbr Missiles
  18++E2C7 D1 E2                                DW AnacondaVertices                                           ; Verticles Address
  19++E2C9 00                                   DB ShipTypeNormal                                             ; Ship Type
  20++E2CA 00                                   DB 0                                                          ; NewB Tactics
  21++E2CB A4                                   DB ShipCanAnger | ShipFighterBaySize2 | ShipFighterSidewinder ; AI Flags
  22++E2CC D0                                   DB $D0                                                        ; chance of ECM module
  23++E2CD FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E2CE 00 00                                DW $0000                            ; no solid data
  25++E2D0 00                                   DB $00                              ; no solid data
  26++E2D1
  27++E2D1 00 07 3A 3E  AnacondaVertices:	    DB $00, $07, $3A, $3E, $01, $55 ;01
  27++E2D5 01 55
  28++E2D7 2B 0D 25 FE                          DB $2B, $0D, $25, $FE, $01, $22 ;02
  28++E2DB 01 22
  29++E2DD 1A 2F 03 FE                          DB $1A, $2F, $03, $FE, $02, $33 ;03
  29++E2E1 02 33
  30++E2E3 1A 2F 03 7E                          DB $1A, $2F, $03, $7E, $03, $44 ;04
  30++E2E7 03 44
  31++E2E9 2B 0D 25 7E                          DB $2B, $0D, $25, $7E, $04, $55 ;05
  31++E2ED 04 55
  32++E2EF 00 30 31 3E                          DB $00, $30, $31, $3E, $15, $66 ;06
  32++E2F3 15 66
  33++E2F5 45 0F 0F BE                          DB $45, $0F, $0F, $BE, $12, $77 ;07
  33++E2F9 12 77
  34++E2FB 2B 27 28 DF                          DB $2B, $27, $28, $DF, $23, $88 ;08
  34++E2FF 23 88
  35++E301 2B 27 28 5F                          DB $2B, $27, $28, $5F, $34, $99 ;09
  35++E305 34 99
  36++E307 45 0F 0F 3E                          DB $45, $0F, $0F, $3E, $45, $AA ;10
  36++E30B 45 AA
  37++E30D 2B 35 17 BF                          DB $2B, $35, $17, $BF, $FF, $FF ;11
  37++E311 FF FF
  38++E313 45 01 20 DF                          DB $45, $01, $20, $DF, $27, $88 ;12
  38++E317 27 88
  39++E319 00 00 FE 1F                          DB $00, $00, $FE, $1F, $FF, $FF ;13
  39++E31D FF FF
  40++E31F 45 01 20 5F                          DB $45, $01, $20, $5F, $49, $AA ;14
  40++E323 49 AA
  41++E325 2B 35 17 3F                          DB $2B, $35, $17, $3F, $FF, $FF ;15
  41++E329 FF FF
  42++E32B              AnacondaVertSize:       equ $ - AnacondaVertices
  43++E32B 1E 01 00 04  AnacondaEdges:	        DB $1E, $01, $00, $04           ;01
  44++E32F 1E 02 04 08                          DB $1E, $02, $04, $08           ;02
  45++E333 1E 03 08 0C                          DB $1E, $03, $08, $0C           ;03
  46++E337 1E 04 0C 10                          DB $1E, $04, $0C, $10           ;04
  47++E33B 1E 05 00 10                          DB $1E, $05, $00, $10           ;05
  48++E33F 1D 15 00 14                          DB $1D, $15, $00, $14           ;06
  49++E343 1D 12 04 18                          DB $1D, $12, $04, $18           ;07
  50++E347 1D 23 08 1C                          DB $1D, $23, $08, $1C           ;08
  51++E34B 1D 34 0C 20                          DB $1D, $34, $0C, $20           ;09
  52++E34F 1D 45 10 24                          DB $1D, $45, $10, $24           ;10
  53++E353 1E 16 14 28                          DB $1E, $16, $14, $28           ;11
  54++E357 1E 17 18 28                          DB $1E, $17, $18, $28           ;12
  55++E35B 1E 27 18 2C                          DB $1E, $27, $18, $2C           ;13
  56++E35F 1E 28 1C 2C                          DB $1E, $28, $1C, $2C           ;14
  57++E363 1F 38 1C 30                          DB $1F, $38, $1C, $30           ;15
  58++E367 1F 39 20 30                          DB $1F, $39, $20, $30           ;16
  59++E36B 1E 49 20 34                          DB $1E, $49, $20, $34           ;17
  60++E36F 1E 4A 24 34                          DB $1E, $4A, $24, $34           ;18
  61++E373 1E 5A 24 38                          DB $1E, $5A, $24, $38
  62++E377 1E 56 14 38                          DB $1E, $56, $14, $38
  63++E37B 1E 6B 28 38                          DB $1E, $6B, $28, $38
  64++E37F 1F 7B 28 30                          DB $1F, $7B, $28, $30
  65++E383 1F 78 2C 30                          DB $1F, $78, $2C, $30
  66++E387 1F 9A 30 34                          DB $1F, $9A, $30, $34
  67++E38B 1F AB 30 38                          DB $1F, $AB, $30, $38
  68++E38F              AnacondaEdgesSize:      equ $ - AnacondaEdges
  69++E38F              AnacondaEdgesCnt:       equ AnacondaEdgesSize/4
  70++E38F 7E 00 33 31  AnacondaNormals:	    DB $7E, $00, $33, $31           ;01
  71++E393 BE 33 12 57                          DB $BE, $33, $12, $57           ;02
  72++E397 FE 4D 39 13                          DB $FE, $4D, $39, $13           ;03
  73++E39B 5F 00 5A 10                          DB $5F, $00, $5A, $10           ;04
  74++E39F 7E 4D 39 13                          DB $7E, $4D, $39, $13           ;05
  75++E3A3 3E 33 12 57                          DB $3E, $33, $12, $57           ;06
  76++E3A7 3E 00 6F 14                          DB $3E, $00, $6F, $14           ;07
  77++E3AB 9F 61 48 18                          DB $9F, $61, $48, $18           ;08
  78++E3AF DF 6C 44 22                          DB $DF, $6C, $44, $22           ;09
  79++E3B3 5F 6C 44 22                          DB $5F, $6C, $44, $22           ;10
  80++E3B7 1F 61 48 18                          DB $1F, $61, $48, $18           ;11
  81++E3BB 1F 00 5E 12                          DB $1F, $00, $5E, $12           ;12
  82++E3BF              AnacondaNormalsSize:    equ $ - AnacondaNormals
  83++E3BF              AnacondaLen:            equ $ - Anaconda
  84++E3BF
  85++E3BF
  86++E3BF
  87++E3BF
# file closed: ./Data/ships/Anaconda.asm
  89+ E3BF                                      include "Data/ships/Asp_Mk_2.asm"
# file opened: ./Data/ships/Asp_Mk_2.asm
   1++E3BF 00           Asp_Mk_2:	            DB $00                          ; Number of cargo canisters released when destroyed
   2++E3C0 10 0E                                DW 60 * 60                      ; Ship's targetable area LoHi
   3++E3C2 50 E4                                DW Asp_Mk_2Edges                ; Edge Data
   4++E3C4 70                                   DB Asp_Mk_2EdgesSize            ; Size of Edge Data
   5++E3C5 20                                   DB $20                          ; Gun Vertex Byte offset
   6++E3C6 1A                                   DB $1A                          ; Explosion Count
   7++E3C7 13                                   DB Asp_Mk_2VertSize /6          ; Vertex Count /6
   8++E3C8 72                                   DB Asp_Mk_2VertSize             ; Vertex Count
   9++E3C9 1C                                   DB Asp_Mk_2EdgesCnt             ; Edges Count
  10++E3CA C8 00                                DW $00C8                        ; Bounty LoHi
  11++E3CC 30                                   DB Asp_Mk_2NormalsSize          ; Face (Normal) Count
  12++E3CD 28                                   DB $28                          ; Range when it turns to a dot
  13++E3CE 96                                   DB $96                          ; Energy Max
  14++E3CF 28                                   DB $28                          ; Speed Max
  15++E3D0 C0 E4                                DW Asp_Mk_2Normals              ; Normals
  16++E3D2 01                                   DB $01                          ; Q scaling
  17++E3D3 29                                   DB $29                          ; Laser power and Nbr Missiles
  18++E3D4 DE E3                                DW Asp_Mk_2Vertices             ; Verticles Address
  19++E3D6 00                                   DB ShipTypeNormal               ; Ship Type
  20++E3D7 00                                   DB 0                            ; NewB Tactics
  21++E3D8 80                                   DB ShipCanAnger                 ; AI Flags
  22++E3D9 80                                   DB $80                          ; chance of ECM module
  23++E3DA FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E3DB 00 00                                DW $0000                            ; no solid data
  25++E3DD 00                                   DB $00                              ; no solid data
  26++E3DE
  27++E3DE 00 12 00 56  Asp_Mk_2Vertices:	    DB $00, $12, $00, $56, $01, $22 ;01
  27++E3E2 01 22
  28++E3E4 00 09 2D 7F                          DB $00, $09, $2D, $7F, $12, $BB ;02
  28++E3E8 12 BB
  29++E3EA 2B 00 2D 3F                          DB $2B, $00, $2D, $3F, $16, $BB ;03
  29++E3EE 16 BB
  30++E3F0 45 03 00 5F                          DB $45, $03, $00, $5F, $16, $79 ;04
  30++E3F4 16 79
  31++E3F6 2B 0E 1C 5F                          DB $2B, $0E, $1C, $5F, $01, $77 ;05
  31++E3FA 01 77
  32++E3FC 2B 00 2D BF                          DB $2B, $00, $2D, $BF, $25, $BB ;06
  32++E400 25 BB
  33++E402 45 03 00 DF                          DB $45, $03, $00, $DF, $25, $8A ;07
  33++E406 25 8A
  34++E408 2B 0E 1C DF                          DB $2B, $0E, $1C, $DF, $02, $88 ;08
  34++E40C 02 88
  35++E40E 1A 07 49 5F                          DB $1A, $07, $49, $5F, $04, $79 ;09
  35++E412 04 79
  36++E414 1A 07 49 DF                          DB $1A, $07, $49, $DF, $04, $8A ;10
  36++E418 04 8A
  37++E41A 2B 0E 1C 1F                          DB $2B, $0E, $1C, $1F, $34, $69 ;11
  37++E41E 34 69
  38++E420 2B 0E 1C 9F                          DB $2B, $0E, $1C, $9F, $34, $5A ;12
  38++E424 34 5A
  39++E426 00 09 2D 3F                          DB $00, $09, $2D, $3F, $35, $6B ;13
  39++E42A 35 6B
  40++E42C 11 00 2D AA                          DB $11, $00, $2D, $AA, $BB, $BB ;14
  40++E430 BB BB
  41++E432 11 00 2D 29                          DB $11, $00, $2D, $29, $BB, $BB ;15
  41++E436 BB BB
  42++E438 00 04 2D 6A                          DB $00, $04, $2D, $6A, $BB, $BB ;16
  42++E43C BB BB
  43++E43E 00 04 2D 28                          DB $00, $04, $2D, $28, $BB, $BB ;17
  43++E442 BB BB
  44++E444 00 07 49 4A                          DB $00, $07, $49, $4A, $04, $04 ;18
  44++E448 04 04
  45++E44A 00 07 53 4A                          DB $00, $07, $53, $4A, $04, $04 ;19
  45++E44E 04 04
  46++E450              Asp_Mk_2VertSize:       equ $ - Asp_Mk_2Vertices
  47++E450 16 12 00 04  Asp_Mk_2Edges:	        DB $16, $12, $00, $04           ;01
  48++E454 16 01 00 10                          DB $16, $01, $00, $10           ;02
  49++E458 16 02 00 1C                          DB $16, $02, $00, $1C           ;03
  50++E45C 1F 1B 04 08                          DB $1F, $1B, $04, $08           ;04
  51++E460 1F 16 08 0C                          DB $1F, $16, $08, $0C           ;05
  52++E464 10 79 0C 20                          DB $10, $79, $0C, $20           ;06
  53++E468 1F 04 20 24                          DB $1F, $04, $20, $24           ;07
  54++E46C 10 8A 18 24                          DB $10, $8A, $18, $24           ;08
  55++E470 1F 25 14 18                          DB $1F, $25, $14, $18           ;09
  56++E474 1F 2B 04 14                          DB $1F, $2B, $04, $14           ;10
  57++E478 1F 17 0C 10                          DB $1F, $17, $0C, $10           ;11
  58++E47C 1F 07 10 20                          DB $1F, $07, $10, $20           ;12
  59++E480 1F 28 18 1C                          DB $1F, $28, $18, $1C           ;13
  60++E484 1F 08 1C 24                          DB $1F, $08, $1C, $24           ;14
  61++E488 1F 6B 08 30                          DB $1F, $6B, $08, $30           ;15
  62++E48C 1F 5B 14 30                          DB $1F, $5B, $14, $30           ;16
  63++E490 16 36 28 30                          DB $16, $36, $28, $30           ;17
  64++E494 16 35 2C 30                          DB $16, $35, $2C, $30           ;18
  65++E498 16 34 28 2C                          DB $16, $34, $28, $2C
  66++E49C 1F 5A 18 2C                          DB $1F, $5A, $18, $2C
  67++E4A0 1F 4A 24 2C                          DB $1F, $4A, $24, $2C
  68++E4A4 1F 69 0C 28                          DB $1F, $69, $0C, $28
  69++E4A8 1F 49 20 28                          DB $1F, $49, $20, $28
  70++E4AC 0A BB 34 3C                          DB $0A, $BB, $34, $3C
  71++E4B0 09 BB 3C 38                          DB $09, $BB, $3C, $38
  72++E4B4 08 BB 38 40                          DB $08, $BB, $38, $40
  73++E4B8 08 BB 40 34                          DB $08, $BB, $40, $34
  74++E4BC 0A 04 48 44                          DB $0A, $04, $48, $44
  75++E4C0              Asp_Mk_2EdgesSize:      equ $ - Asp_Mk_2Edges
  76++E4C0              Asp_Mk_2EdgesCnt:       equ Asp_Mk_2EdgesSize/4
  77++E4C0 5F 00 23 05  Asp_Mk_2Normals:	    DB $5F, $00, $23, $05           ;01
  78++E4C4 7F 08 26 07                          DB $7F, $08, $26, $07           ;02
  79++E4C8 FF 08 26 07                          DB $FF, $08, $26, $07           ;03
  80++E4CC 36 00 18 01                          DB $36, $00, $18, $01           ;04
  81++E4D0 1F 00 2B 13                          DB $1F, $00, $2B, $13           ;05
  82++E4D4 BF 06 1C 02                          DB $BF, $06, $1C, $02           ;06
  83++E4D8 3F 06 1C 02                          DB $3F, $06, $1C, $02           ;07
  84++E4DC 5F 3B 40 1F                          DB $5F, $3B, $40, $1F           ;08
  85++E4E0 DF 3B 40 1F                          DB $DF, $3B, $40, $1F           ;09
  86++E4E4 1F 50 2E 32                          DB $1F, $50, $2E, $32           ;10
  87++E4E8 9F 50 2E 32                          DB $9F, $50, $2E, $32           ;11
  88++E4EC 3F 00 00 5A                          DB $3F, $00, $00, $5A           ;12
  89++E4F0              Asp_Mk_2NormalsSize:    equ $ - Asp_Mk_2Normals
  90++E4F0              Asp_Mk_2Len:            equ $ - Asp_Mk_2
  91++E4F0
  92++E4F0
  93++E4F0
  94++E4F0
# file closed: ./Data/ships/Asp_Mk_2.asm
  90+ E4F0                                      include "Data/ships/Boa.asm"
# file opened: ./Data/ships/Boa.asm
   1++E4F0 05           Boa:	                DB $05                          ; Number of cargo canisters released when destroyed
   2++E4F1 24 13                                DW 70 * 70                      ; Ship's targetable area LoHi
   3++E4F3 5D E5                                DW BoaEdges                     ; Edge Data
   4++E4F5 60                                   DB BoaEdgesSize                 ; Size of Edge Data
   5++E4F6 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E4F7 26                                   DB $26                          ; Explosion Count
   7++E4F8 0D                                   DB BoaVertSize /6               ; Vertex Count /6
   8++E4F9 4E                                   DB BoaVertSize                  ; Vertex Count
   9++E4FA 18                                   DB BoaEdgesCnt                  ; Edges Count
  10++E4FB 00 00                                DW $0000                        ; Bounty LoHi
  11++E4FD 30                                   DB BoaNormalsSize               ; Face (Normal) Count
  12++E4FE 28                                   DB $28                          ; Range when it turns to a dot
  13++E4FF FA                                   DB $FA                          ; Energy Max
  14++E500 18                                   DB $18                          ; Speed Max
  15++E501 BD E5                                DW BoaNormals                   ; Normals
  16++E503 00                                   DB $00                          ; Q scaling
  17++E504 1C                                   DB $1C                          ; Laser power and Nbr Missiles
  18++E505 0F E5                                DW BoaVertices                  ; Verticles Address
  19++E507 00                                   DB ShipTypeNormal               ; Ship Type
  20++E508 00                                   DB 0                            ; NewB Tactics
  21++E509 80                                   DB ShipCanAnger                 ; AI Flags
  22++E50A A0                                   DB $A0                          ; chance of ECM module
  23++E50B FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E50C 00 00                                DW $0000                            ; no solid data
  25++E50E 00                                   DB $00                              ; no solid data
  26++E50F
  27++E50F 00 00 5D 1F  BoaVertices:	        DB $00, $00, $5D, $1F, $FF, $FF ; 01
  27++E513 FF FF
  28++E515 00 28 57 38                          DB $00, $28, $57, $38, $02, $33 ; 02
  28++E519 02 33
  29++E51B 26 19 63 78                          DB $26, $19, $63, $78, $01, $44 ; 03
  29++E51F 01 44
  30++E521 26 19 63 F8                          DB $26, $19, $63, $F8, $12, $55 ; 04
  30++E525 12 55
  31++E527 26 28 3B BF                          DB $26, $28, $3B, $BF, $23, $69 ; 05
  31++E52B 23 69
  32++E52D 26 28 3B 3F                          DB $26, $28, $3B, $3F, $03, $6B ; 06
  32++E531 03 6B
  33++E533 3E 00 43 3F                          DB $3E, $00, $43, $3F, $04, $8B ; 07
  33++E537 04 8B
  34++E539 18 41 4F 7F                          DB $18, $41, $4F, $7F, $14, $8A ; 08
  34++E53D 14 8A
  35++E53F 18 41 4F FF                          DB $18, $41, $4F, $FF, $15, $7A ; 09
  35++E543 15 7A
  36++E545 3E 00 43 BF                          DB $3E, $00, $43, $BF, $25, $79 ; 10
  36++E549 25 79
  37++E54B 00 07 6B 36                          DB $00, $07, $6B, $36, $02, $AA ; 11
  37++E54F 02 AA
  38++E551 0D 09 6B 76                          DB $0D, $09, $6B, $76, $01, $AA ; 12
  38++E555 01 AA
  39++E557 0D 09 6B F6                          DB $0D, $09, $6B, $F6, $12, $CC ; 13
  39++E55B 12 CC
  40++E55D              BoaVertSize:            equ $ - BoaVertices
  41++E55D 1F 6B 00 14  BoaEdges:	            DB $1F, $6B, $00, $14
  42++E561 1F 8A 00 1C                          DB $1F, $8A, $00, $1C
  43++E565 1F 79 00 24                          DB $1F, $79, $00, $24
  44++E569 1D 69 00 10                          DB $1D, $69, $00, $10
  45++E56D 1D 8B 00 18                          DB $1D, $8B, $00, $18
  46++E571 1D 7A 00 20                          DB $1D, $7A, $00, $20
  47++E575 1F 36 10 14                          DB $1F, $36, $10, $14
  48++E579 1F 0B 14 18                          DB $1F, $0B, $14, $18
  49++E57D 1F 48 18 1C                          DB $1F, $48, $18, $1C
  50++E581 1F 1A 1C 20                          DB $1F, $1A, $1C, $20
  51++E585 1F 57 20 24                          DB $1F, $57, $20, $24
  52++E589 1F 29 10 24                          DB $1F, $29, $10, $24
  53++E58D 18 23 04 10                          DB $18, $23, $04, $10
  54++E591 18 03 04 14                          DB $18, $03, $04, $14
  55++E595 18 25 0C 24                          DB $18, $25, $0C, $24
  56++E599 18 15 0C 20                          DB $18, $15, $0C, $20
  57++E59D 18 04 08 18                          DB $18, $04, $08, $18
  58++E5A1 18 14 08 1C                          DB $18, $14, $08, $1C
  59++E5A5 16 02 04 28                          DB $16, $02, $04, $28
  60++E5A9 16 01 08 2C                          DB $16, $01, $08, $2C
  61++E5AD 16 12 0C 30                          DB $16, $12, $0C, $30
  62++E5B1 0E 0C 28 2C                          DB $0E, $0C, $28, $2C
  63++E5B5 0E 1C 2C 30                          DB $0E, $1C, $2C, $30
  64++E5B9 0E 2C 30 28                          DB $0E, $2C, $30, $28
  65++E5BD              BoaEdgesSize:           equ $ - BoaEdges
  66++E5BD              BoaEdgesCnt:            equ BoaEdgesSize/4
  67++E5BD 3F 2B 25 3C  BoaNormals:	            DB $3F, $2B, $25, $3C
  68++E5C1 7F 00 2D 59                          DB $7F, $00, $2D, $59
  69++E5C5 BF 2B 25 3C                          DB $BF, $2B, $25, $3C
  70++E5C9 1F 00 28 00                          DB $1F, $00, $28, $00
  71++E5CD 7F 3E 20 14                          DB $7F, $3E, $20, $14
  72++E5D1 FF 3E 20 14                          DB $FF, $3E, $20, $14
  73++E5D5 1F 00 17 06                          DB $1F, $00, $17, $06
  74++E5D9 DF 17 0F 09                          DB $DF, $17, $0F, $09
  75++E5DD 5F 17 0F 09                          DB $5F, $17, $0F, $09
  76++E5E1 9F 1A 0D 0A                          DB $9F, $1A, $0D, $0A
  77++E5E5 5F 00 1F 0C                          DB $5F, $00, $1F, $0C
  78++E5E9 1F 1A 0D 0A                          DB $1F, $1A, $0D, $0A
  79++E5ED              BoaNormalsSize:         equ $ - BoaNormals
  80++E5ED              BoaLen:                 equ $ - Boa
  81++E5ED
# file closed: ./Data/ships/Boa.asm
  91+ E5ED
  92+ E5ED                                      include "Data/ships/CargoType5.asm"
# file opened: ./Data/ships/CargoType5.asm
   1++E5ED 00           CargoType5              DB $00                                     ; Number of cargo canisters released when destroyed
   2++E5EE 90 01                                DW 20 * 20                                 ; Ship's targetable area LoHi
   3++E5F0 48 E6                                DW CargoType5Edges                         ; Edge Data
   4++E5F2 3C                                   DB CargoType5EdgesSize                     ; Size of Edge Data
   5++E5F3 00                                   DB $00                                     ; Gun Vertex Byte offset
   6++E5F4 12                                   DB $12                                     ; Explosion Count
   7++E5F5 0A                                   DB CargoType5VertSize /6                   ; Vertex Count /6
   8++E5F6 3C                                   DB CargoType5VertSize                      ; Vertex Count
   9++E5F7 0F                                   DB CargoType5EdgesCnt                      ; Edges Count
  10++E5F8 00 00                                DW $0000                                   ; Bounty LoHi
  11++E5FA 1C                                   DB CargoType5NormalsSize                   ; Face (Normal) Count
  12++E5FB 0C                                   DB $0C                                     ; Range when it turns to a dot
  13++E5FC 11                                   DB $11                                     ; Energy Max
  14++E5FD 0F                                   DB $0F                                     ; Speed Max
  15++E5FE 84 E6                                DW CargoType5Normals                       ; Normals
  16++E600 02                                   DB $02                                     ; Q scaling
  17++E601 00                                   DB $00                                     ; Laser power and Nbr Missiles
  18++E602 0C E6                                DW CargoType5Vertices                      ; Verticles Address
  19++E604 04                                   DB ShipTypeScoopable                       ; Ship Type
  20++E605 00                                   DB 0                                       ; NewB Tactics
  21++E606 00                                   DB 0                                       ; AI Flags
  22++E607 00                                   DB $0                                      ; chance of ECM module
  23++E608 00                                   DB $00                                     ; Supports Solid Fill
  24++E609 A0 E6                                DW CargoType5Traingles                  ;
  25++E60B 21                                   DB CargoType5TrainglesSize
  26++E60C              ; So cargo is               Edge offset $0050  Face Offset $008C, Verices will alwys be +20, LineMax 31 -> 4  EdgeCnt 15  VertexCnt 60 -> 10     FaceCn 28 -> 7
  27++E60C              ;                                       Faces
  28++E60C              ;                            X  Y    Z  12 34  Vis
  29++E60C 18 10 00 1F  CargoType5Vertices		DB $18,$10,$00,$1F,$10,$55 	               ;00  Top Right
  29++E610 10 55
  30++E612 18 05 0F 1F                          DB $18,$05,$0F,$1F,$10,$22                 ;01  Mid Right Near
  30++E616 10 22
  31++E618 18 0D 09 5F                          DB $18,$0D,$09,$5F,$20,$33                 ;02  Bottom right Near
  31++E61C 20 33
  32++E61E 18 0D 09 7F                          DB $18,$0D,$09,$7F,$30,$44                 ;03  Bottom Right Rear
  32++E622 30 44
  33++E624 18 05 0F 3F                          DB $18,$05,$0F,$3F,$40,$55                 ;04  Mid Right Rear
  33++E628 40 55
  34++E62A 18 10 00 9F                          DB $18,$10,$00,$9F,$51,$66                 ;05  Left versions
  34++E62E 51 66
  35++E630 18 05 0F 9F                          DB $18,$05,$0F,$9F,$21,$66                 ;06
  35++E634 21 66
  36++E636 18 0D 09 DF                          DB $18,$0D,$09,$DF,$32,$66                 ;07
  36++E63A 32 66
  37++E63C 18 0D 09 FF                          DB $18,$0D,$09,$FF,$43,$66                 ;08
  37++E640 43 66
  38++E642 18 05 0F BF                          DB $18,$05,$0F,$BF,$54,$66                 ;09
  38++E646 54 66
  39++E648              CargoType5VertSize      equ $  - CargoType5Vertices
  40++E648              ;                          Vis  FacVert Offset (4 bytexVertnbr)
  41++E648              ;                               12  01 02
  42++E648 1F 10 00 04  CargoType5Edges			DB $1F,$10,$00,$04 	       ;00 Face  0,1
  43++E64C 1F 20 04 08                          DB $1F,$20,$04,$08         ;01
  44++E650 1F 30 08 0C                          DB $1F,$30,$08,$0C         ;02
  45++E654 1F 40 0C 10                          DB $1F,$40,$0C,$10         ;03
  46++E658 1F 50 00 10                          DB $1F,$50,$00,$10         ;04
  47++E65C 1F 51 00 14                          DB $1F,$51,$00,$14         ;05
  48++E660 1F 21 04 18                          DB $1F,$21,$04,$18         ;06
  49++E664 1F 32 08 1C                          DB $1F,$32,$08,$1C         ;07
  50++E668 1F 43 0C 20                          DB $1F,$43,$0C,$20         ;08
  51++E66C 1F 54 10 24                          DB $1F,$54,$10,$24         ;19
  52++E670 1F 61 14 18                          DB $1F,$61,$14,$18         ;10
  53++E674 1F 62 18 1C                          DB $1F,$62,$18,$1C         ;11
  54++E678 1F 63 1C 20                          DB $1F,$63,$1C,$20         ;12
  55++E67C 1F 64 20 24                          DB $1F,$64,$20,$24         ;13
  56++E680 1F 65 24 14                          DB $1F,$65,$24,$14         ;14
  57++E684              CargoType5EdgesSize     equ $  - CargoType5Edges
  58++E684              CargoType5EdgesCnt      equ CargoType5EdgesSize / 4
  59++E684              ;                           x  y    z   vis
  60++E684 1F 60 00 00  CargoType5Normals    	DB $1F,$60,$00,$00 			               ;00 Right side
  61++E688 1F 00 29 1E                          DB $1F,$00,$29,$1E                         ;01
  62++E68C 5F 00 12 30                          DB $5F,$00,$12,$30                         ;02
  63++E690 5F 00 33 00                          DB $5F,$00,$33,$00                         ;03
  64++E694 7F 00 12 30                          DB $7F,$00,$12,$30                         ;04
  65++E698 3F 00 29 1E                          DB $3F,$00,$29,$1E                         ;05 Left
  66++E69C 9F 60 00 00                          DB $9F,$60,$00,$00   ; end Cargo cannister ;06 right side
  67++E6A0              CargoType5NormalsSize   equ $  - CargoType5Normals
  68++E6A0              CargoType5Len           equ $  - CargoType5
  69++E6A0                                      ; Triangles is made of a list of edges
  70++E6A0              ; Ideal is pointers have a DW at the end to the list of triangles and count
  71++E6A0              ; for testing we will do a simple search
  72++E6A0              ;                          Nrm NodeOffset X 1
  73++E6A0              ;                                0    1    2
  74++E6A0 00 00 04 10  CargoType5Traingles     DB $00,$00*4, $01*4, $04*4
  75++E6A4 00 04 08 10                          DB $00,$01*4, $02*4, $04*4
  76++E6A8 00 08 0C 10                          DB $00,$02*4, $03*4, $04*4
  77++E6AC 01 00 10 14                          DB $01,$00*4, $04*4, $05*4
  78++E6B0 01 10 14 18                          DB $01,$04*4, $05*4, $06*4
  79++E6B4                                  ;   DB $02,
  80++E6B4                                  ;   DB $03,
  81++E6B4                                  ;   DB $03,
  82++E6B4                                  ;   DB $04,
  83++E6B4                                  ;   DB $04,
  84++E6B4                                  ;   DB $01,
  85++E6B4                                  ;   DB $01,
  86++E6B4                                  ;   DB $01,
  87++E6B4                                  ;   DB $01,
  88++E6B4 06 14 18 24                          DB $06,$05*4, $06*4, $09*4 ; its we store UBnkNodeArray + this offset it will save one memroy ready
  89++E6B8 06 18 1C 24                          DB $06,$06*4, $07*4, $09*4
  90++E6BC 06 1C 20 24                          DB $06,$07*4, $08*4, $09*4
  91++E6C0 FF                                   DB $FF ; Very important end of traingle list marker
  92++E6C1              CargoType5TrainglesSize:equ $  -  CargoType5Traingles
  93++E6C1
  94++E6C1
  95++E6C1
# file closed: ./Data/ships/CargoType5.asm
  93+ E6C1                                      include "Data/ships/Boulder.asm"
# file opened: ./Data/ships/Boulder.asm
   1++E6C1 00           Boulder:	            DB $00                               ; Number of cargo canisters released when destroyed
   2++E6C2 84 03                                DW 30 * 30                           ; Ship's targetable area LoHi
   3++E6C4 0A E7                                DW BoulderEdges                      ; Edge Data
   4++E6C6 3C                                   DB BoulderEdgesSize                  ; Size of Edge Data
   5++E6C7 00                                   DB $00                               ; Gun Vertex Byte offset
   6++E6C8 0E                                   DB $0E                               ; Explosion Count
   7++E6C9 07                                   DB BoulderVertSize /6                ; Vertex Count /6
   8++E6CA 2A                                   DB BoulderVertSize                   ; Vertex Count
   9++E6CB 0F                                   DB BoulderEdgesCnt                   ; Edges Count
  10++E6CC 01 00                                DW $0001                             ; Bounty LoHi
  11++E6CE 28                                   DB BoulderNormalsSize                ; Face (Normal) Count
  12++E6CF 14                                   DB $14                               ; Range when it turns to a dot
  13++E6D0 14                                   DB $14                               ; Energy Max
  14++E6D1 1E                                   DB $1E                               ; Speed Max
  15++E6D2 46 E7                                DW BoulderNormals                    ; Normals
  16++E6D4 02                                   DB $02                               ; Q scaling
  17++E6D5 00                                   DB $00                               ; Laser power and Nbr Missiles
  18++E6D6 E0 E6                                DW BoulderVertices                   ; Verticles Address
  19++E6D8 03                                   DB ShipTypeJunk                      ; Ship Type
  20++E6D9 00                                   DB 0                                 ; NewB Tactics
  21++E6DA 00                                   DB 0                                 ; AI Flags
  22++E6DB A0                                   DB $A0                               ; chance of ECM module
  23++E6DC FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E6DD 00 00                                DW $0000                            ; no solid data
  25++E6DF 00                                   DB $00                              ; no solid data
  26++E6E0
  27++E6E0 12 25 0B BF  BoulderVertices:	    DB $12, $25, $0B, $BF, $01, $59
  27++E6E4 01 59
  28++E6E6 1E 07 0C 1F                          DB $1E, $07, $0C, $1F, $12, $56
  28++E6EA 12 56
  29++E6EC 1C 07 0C 7F                          DB $1C, $07, $0C, $7F, $23, $67
  29++E6F0 23 67
  30++E6F2 02 00 27 3F                          DB $02, $00, $27, $3F, $34, $78
  30++E6F6 34 78
  31++E6F8 1C 22 1E BF                          DB $1C, $22, $1E, $BF, $04, $89
  31++E6FC 04 89
  32++E6FE 05 0A 0D 5F                          DB $05, $0A, $0D, $5F, $FF, $FF
  32++E702 FF FF
  33++E704 14 11 1E 3F                          DB $14, $11, $1E, $3F, $FF, $FF
  33++E708 FF FF
  34++E70A              BoulderVertSize:        equ $ - BoulderVertices
  35++E70A 1F 15 00 04  BoulderEdges:	        DB $1F, $15, $00, $04
  36++E70E 1F 26 04 08                          DB $1F, $26, $04, $08
  37++E712 1F 37 08 0C                          DB $1F, $37, $08, $0C
  38++E716 1F 48 0C 10                          DB $1F, $48, $0C, $10
  39++E71A 1F 09 10 00                          DB $1F, $09, $10, $00
  40++E71E 1F 01 00 14                          DB $1F, $01, $00, $14
  41++E722 1F 12 04 14                          DB $1F, $12, $04, $14
  42++E726 1F 23 08 14                          DB $1F, $23, $08, $14
  43++E72A 1F 34 0C 14                          DB $1F, $34, $0C, $14
  44++E72E 1F 04 10 14                          DB $1F, $04, $10, $14
  45++E732 1F 59 00 18                          DB $1F, $59, $00, $18
  46++E736 1F 56 04 18                          DB $1F, $56, $04, $18
  47++E73A 1F 67 08 18                          DB $1F, $67, $08, $18
  48++E73E 1F 78 0C 18                          DB $1F, $78, $0C, $18
  49++E742 1F 89 10 18                          DB $1F, $89, $10, $18
  50++E746              BoulderEdgesSize:       equ $ - BoulderEdges
  51++E746              BoulderEdgesCnt:        equ BoulderEdgesSize/4
  52++E746 DF 0F 03 08  BoulderNormals:	        DB $DF, $0F, $03, $08
  53++E74A 9F 07 0C 1E                          DB $9F, $07, $0C, $1E
  54++E74E 5F 20 2F 18                          DB $5F, $20, $2F, $18
  55++E752 FF 03 27 07                          DB $FF, $03, $27, $07
  56++E756 FF 05 04 01                          DB $FF, $05, $04, $01
  57++E75A 1F 31 54 08                          DB $1F, $31, $54, $08
  58++E75E 3F 70 15 15                          DB $3F, $70, $15, $15
  59++E762 7F 4C 23 52                          DB $7F, $4C, $23, $52
  60++E766 3F 16 38 89                          DB $3F, $16, $38, $89
  61++E76A 3F 28 6E 26                          DB $3F, $28, $6E, $26
  62++E76E              BoulderNormalsSize:     equ $ - BoulderNormals
  63++E76E              BoulderLen:             equ $ - Boulder
  64++E76E
# file closed: ./Data/ships/Boulder.asm
  94+ E76E                                      include "Data/ships/Asteroid.asm"
# file opened: ./Data/ships/Asteroid.asm
   1++E76E 00           Asteroid:	            DB $00                          ; Number of cargo canisters released when destroyed
   2++E76F 00 19                                DW 80 * 80                      ; Ship's targetable area LoHi
   3++E771 C3 E7                                DW AsteroidEdges                ; Edge Data
   4++E773 54                                   DB AsteroidEdgesSize            ; Size of Edge Data
   5++E774 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E775 22                                   DB $22                          ; Explosion Count
   7++E776 09                                   DB AsteroidVertSize /6          ; Vertex Count /6
   8++E777 36                                   DB AsteroidVertSize             ; Vertex Count
   9++E778 15                                   DB AsteroidEdgesCnt             ; Edges Count
  10++E779 05 00                                DW $0005                        ; Bounty LoHi
  11++E77B 38                                   DB AsteroidNormalsSize          ; Face (Normal) Count
  12++E77C 32                                   DB $32                          ; Range when it turns to a dot
  13++E77D 3C                                   DB $3C                          ; Energy Max
  14++E77E 1E                                   DB $1E                          ; Speed Max
  15++E77F 17 E8                                DW AsteroidNormals              ; Normals
  16++E781 01                                   DB $01                          ; Q scaling
  17++E782 00                                   DB $00                          ; Laser power and Nbr Missiles
  18++E783 8D E7                                DW AsteroidVertices             ; Verticles Address
  19++E785 03                                   DB ShipTypeJunk                 ; Ship Type
  20++E786 00                                   DB 0                            ; NewB Tactics
  21++E787 00                                   DB 0                            ; AI Flags
  22++E788 00                                   DB $00                          ; chance of ECM module
  23++E789 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E78A 00 00                                DW $0000                            ; no solid data
  25++E78C 00                                   DB $00                              ; no solid data
  26++E78D
  27++E78D 00 50 00 1F  AsteroidVertices:	    DB $00, $50, $00, $1F, $FF, $FF ;01
  27++E791 FF FF
  28++E793 50 0A 00 DF                          DB $50, $0A, $00, $DF, $FF, $FF ;02
  28++E797 FF FF
  29++E799 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF ;03
  29++E79D FF FF
  30++E79F 46 28 00 5F                          DB $46, $28, $00, $5F, $FF, $FF ;04
  30++E7A3 FF FF
  31++E7A5 3C 32 00 1F                          DB $3C, $32, $00, $1F, $65, $DC ;05
  31++E7A9 65 DC
  32++E7AB 32 00 3C 1F                          DB $32, $00, $3C, $1F, $FF, $FF ;06
  32++E7AF FF FF
  33++E7B1 28 00 46 9F                          DB $28, $00, $46, $9F, $10, $32 ;07
  33++E7B5 10 32
  34++E7B7 00 1E 4B 3F                          DB $00, $1E, $4B, $3F, $FF, $FF ;08
  34++E7BB FF FF
  35++E7BD 00 32 3C 7F                          DB $00, $32, $3C, $7F, $98, $BA ;09
  35++E7C1 98 BA
  36++E7C3              AsteroidVertSize:       equ $ - AsteroidVertices
  37++E7C3 1F 72 00 04  AsteroidEdges:	        DB $1F, $72, $00, $04           ;01
  38++E7C7 1F D6 00 10                          DB $1F, $D6, $00, $10           ;02
  39++E7CB 1F C5 0C 10                          DB $1F, $C5, $0C, $10           ;03
  40++E7CF 1F B4 08 0C                          DB $1F, $B4, $08, $0C           ;04
  41++E7D3 1F A3 04 08                          DB $1F, $A3, $04, $08           ;05
  42++E7D7 1F 32 04 18                          DB $1F, $32, $04, $18           ;06
  43++E7DB 1F 31 08 18                          DB $1F, $31, $08, $18           ;07
  44++E7DF 1F 41 08 14                          DB $1F, $41, $08, $14           ;08
  45++E7E3 1F 10 14 18                          DB $1F, $10, $14, $18           ;09
  46++E7E7 1F 60 00 14                          DB $1F, $60, $00, $14           ;10
  47++E7EB 1F 54 0C 14                          DB $1F, $54, $0C, $14           ;11
  48++E7EF 1F 20 00 18                          DB $1F, $20, $00, $18           ;12
  49++E7F3 1F 65 10 14                          DB $1F, $65, $10, $14           ;13
  50++E7F7 1F A8 04 20                          DB $1F, $A8, $04, $20           ;14
  51++E7FB 1F 87 04 1C                          DB $1F, $87, $04, $1C           ;15
  52++E7FF 1F D7 00 1C                          DB $1F, $D7, $00, $1C           ;16
  53++E803 1F DC 10 1C                          DB $1F, $DC, $10, $1C           ;17
  54++E807 1F C9 0C 1C                          DB $1F, $C9, $0C, $1C           ;18
  55++E80B 1F B9 0C 20                          DB $1F, $B9, $0C, $20
  56++E80F 1F BA 08 20                          DB $1F, $BA, $08, $20
  57++E813 1F 98 1C 20                          DB $1F, $98, $1C, $20
  58++E817
  59++E817              AsteroidEdgesSize:      equ $ - AsteroidEdges
  60++E817              AsteroidEdgesCnt:       equ AsteroidEdgesSize/4
  61++E817 1F 09 42 51  AsteroidNormals:	    DB $1F, $09, $42, $51           ;01
  62++E81B 5F 09 42 51                          DB $5F, $09, $42, $51           ;02
  63++E81F 9F 48 40 1F                          DB $9F, $48, $40, $1F           ;03
  64++E823 DF 40 49 2F                          DB $DF, $40, $49, $2F           ;04
  65++E827 5F 2D 4F 41                          DB $5F, $2D, $4F, $41           ;05
  66++E82B 1F 87 0F 23                          DB $1F, $87, $0F, $23           ;06
  67++E82F 1F 26 4C 46                          DB $1F, $26, $4C, $46           ;07
  68++E833 BF 42 3B 27                          DB $BF, $42, $3B, $27           ;08
  69++E837 FF 43 0F 50                          DB $FF, $43, $0F, $50           ;09
  70++E83B 7F 42 0E 4B                          DB $7F, $42, $0E, $4B           ;10
  71++E83F FF 46 50 28                          DB $FF, $46, $50, $28           ;11
  72++E843 7F 3A 66 33                          DB $7F, $3A, $66, $33           ;12
  73++E847 3F 51 09 43                          DB $3F, $51, $09, $43           ;13
  74++E84B 3F 2F 5E 3F                          DB $3F, $2F, $5E, $3F           ;14
  75++E84F              AsteroidNormalsSize:    equ $ - AsteroidNormals
  76++E84F              AsteroidLen:            equ $ - Asteroid
  77++E84F
  78++E84F
# file closed: ./Data/ships/Asteroid.asm
  95+ E84F
  96+ E84F                                      include "Data/ships/Bushmaster.asm"
# file opened: ./Data/ships/Bushmaster.asm
   1++E84F 00           Bushmaster:	            DB $00                           ; Number of cargo canisters released when destroyed
   2++E850 9A 10                                DW $109A                         ; Ship's targetable area LoHi
   3++E852 B6 E8                                DW BushmasterEdges               ; Edge Data
   4++E854 4C                                   DB BushmasterEdgesSize           ; Size of Edge Data
   5++E855 00                                   DB $00                           ; Gun Vertex Byte offset
   6++E856 1E                                   DB $1E                           ; Explosion Count
   7++E857 0C                                   DB BushmasterVertSize /6         ; Vertex Count /6
   8++E858 48                                   DB BushmasterVertSize            ; Vertex Count
   9++E859 13                                   DB BushmasterEdgesCnt            ; Edges Count
  10++E85A 96 00                                DW $0096                         ; Bounty LoHi
  11++E85C 24                                   DB BushmasterNormalsSize         ; Face (Normal) Count
  12++E85D 14                                   DB $14                           ; Range when it turns to a dot
  13++E85E 4A                                   DB $4A                           ; Energy Max
  14++E85F 23                                   DB $23                           ; Speed Max
  15++E860 02 E9                                DW BushmasterNormals             ; Normals
  16++E862 02                                   DB $02                           ; Q scaling
  17++E863 21                                   DB $20 | ShipMissiles1           ; Laser power and Nbr Missiles
  18++E864 6E E8                                DW BushmasterVertices            ; Verticles Address
  19++E866 00                                   DB ShipTypeNormal                ; Ship Type
  20++E867 00                                   DB 0                             ; NewB Tactics
  21++E868 80                                   DB ShipCanAnger                  ; AI Flags
  22++E869 70                                   DB $70                           ; chance of ECM module
  23++E86A FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E86B 00 00                                DW $0000                            ; no solid data
  25++E86D 00                                   DB $00                              ; no solid data
  26++E86E
  27++E86E 00 00 3C 1F  BushmasterVertices:	    DB $00, $00, $3C, $1F, $23, $01  ; 01
  27++E872 23 01
  28++E874 32 00 14 1F                          DB $32, $00, $14, $1F, $57, $13  ; 02
  28++E878 57 13
  29++E87A 32 00 14 9F                          DB $32, $00, $14, $9F, $46, $02  ; 03
  29++E87E 46 02
  30++E880 00 14 00 1F                          DB $00, $14, $00, $1F, $45, $01  ; 04
  30++E884 45 01
  31++E886 00 14 28 7F                          DB $00, $14, $28, $7F, $FF, $FF  ; 05
  31++E88A FF FF
  32++E88C 00 0E 28 3F                          DB $00, $0E, $28, $3F, $88, $45  ; 06
  32++E890 88 45
  33++E892 28 00 28 3F                          DB $28, $00, $28, $3F, $88, $57  ; 07
  33++E896 88 57
  34++E898 28 00 28 BF                          DB $28, $00, $28, $BF, $88, $46  ; 08
  34++E89C 88 46
  35++E89E 00 04 28 2A                          DB $00, $04, $28, $2A, $88, $88  ; 09
  35++E8A2 88 88
  36++E8A4 0A 00 28 2A                          DB $0A, $00, $28, $2A, $88, $88  ; 10
  36++E8A8 88 88
  37++E8AA 00 04 28 6A                          DB $00, $04, $28, $6A, $88, $88  ; 11
  37++E8AE 88 88
  38++E8B0 0A 00 28 AA                          DB $0A, $00, $28, $AA, $88, $88  ; 12           ; 12 * 6 = 72
  38++E8B4 88 88
  39++E8B6              BushmasterVertSize:     equ $ - BushmasterVertices
  40++E8B6 1F 13 00 04  BushmasterEdges:	    DB $1F, $13, $00, $04            ; 01
  41++E8BA 1F 02 00 08                          DB $1F, $02, $00, $08            ; 02
  42++E8BE 1F 01 00 0C                          DB $1F, $01, $00, $0C            ; 03
  43++E8C2 1F 23 00 10                          DB $1F, $23, $00, $10            ; 04
  44++E8C6 1F 45 0C 14                          DB $1F, $45, $0C, $14            ; 05
  45++E8CA 1F 04 08 0C                          DB $1F, $04, $08, $0C            ; 06
  46++E8CE 1F 15 04 0C                          DB $1F, $15, $04, $0C            ; 07
  47++E8D2 1F 46 08 1C                          DB $1F, $46, $08, $1C            ; 08
  48++E8D6 1F 57 04 18                          DB $1F, $57, $04, $18            ; 09
  49++E8DA 1F 26 08 10                          DB $1F, $26, $08, $10            ; 10
  50++E8DE 1F 37 04 10                          DB $1F, $37, $04, $10            ; 11
  51++E8E2 1F 48 14 1C                          DB $1F, $48, $14, $1C            ; 12
  52++E8E6 1F 58 14 18                          DB $1F, $58, $14, $18            ; 13
  53++E8EA 1F 68 10 1C                          DB $1F, $68, $10, $1C            ; 14
  54++E8EE 1F 78 10 18                          DB $1F, $78, $10, $18            ; 15
  55++E8F2 0A 88 20 24                          DB $0A, $88, $20, $24            ; 16
  56++E8F6 0A 88 24 28                          DB $0A, $88, $24, $28            ; 17
  57++E8FA 0A 88 28 2C                          DB $0A, $88, $28, $2C            ; 18
  58++E8FE 0A 88 2C 20                          DB $0A, $88, $2C, $20            ; 19           ; 19 * 4 = 76
  59++E902              BushmasterEdgesSize:    equ $ - BushmasterEdges
  60++E902              BushmasterEdgesCnt:     equ BushmasterEdgesSize/4        ;
  61++E902 9F 17 58 1D  BushmasterNormals:	    DB $9F, $17, $58, $1D            ; 01
  62++E906 1F 17 58 1D                          DB $1F, $17, $58, $1D            ; 02
  63++E90A DF 0E 5D 12                          DB $DF, $0E, $5D, $12            ; 03
  64++E90E 5F 0E 5D 12                          DB $5F, $0E, $5D, $12            ; 04
  65++E912 BF 1F 59 0D                          DB $BF, $1F, $59, $0D            ; 05
  66++E916 3F 1F 59 0D                          DB $3F, $1F, $59, $0D            ; 06
  67++E91A FF 2A 55 07                          DB $FF, $2A, $55, $07            ; 07
  68++E91E 7F 2A 55 07                          DB $7F, $2A, $55, $07            ; 08
  69++E922 3F 00 00 60                          DB $3F, $00, $00, $60            ; 09           ; 9 * 4 = 36
  70++E926              BushmasterNormalsSize:  equ $ - BushmasterNormals
  71++E926              BushmasterLen:          equ $ - Bushmaster
  72++E926
# file closed: ./Data/ships/Bushmaster.asm
  97+ E926                                      include "Data/ships/Chameleon.asm"
# file opened: ./Data/ships/Chameleon.asm
   1++E926 03           Chameleon:	            DB $03                          ; Number of cargo canisters released when destroyed
   2++E927 A0 0F                                DW $0FA0                        ; Ship's targetable area LoHi
   3++E929 B0 E9                                DW ChameleonEdges               ; Edge Data
   4++E92B 74                                   DB ChameleonEdgesSize           ; Size of Edge Data
   5++E92C 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E92D 1A                                   DB $1A                          ; Explosion Count
   7++E92E 12                                   DB ChameleonVertSize /6         ; Vertex Count /6
   8++E92F 6C                                   DB ChameleonVertSize            ; Vertex Count
   9++E930 1D                                   DB ChameleonEdgesCnt            ; Edges Count
  10++E931 C8                                   DB $00C8                        ; Bounty LoHi
  11++E932 34                                   DB ChameleonNormalsSize         ; Face (Normal) Count
  12++E933 0A                                   DB $0A                          ; Range when it turns to a dot
  13++E934 64                                   DB $64                          ; Energy Max
  14++E935 1D                                   DB $1D                          ; Speed Max
  15++E936 24 EA                                DW ChameleonNormals             ; Normals
  16++E938 01                                   DB $01                          ; Q scaling
  17++E939 23                                   DB $23                          ; Laser power and Nbr Missiles
  18++E93A 44 E9                                DW ChameleonVertices            ; Verticles Address
  19++E93C 00                                   DB ShipTypeNormal               ; Ship Type
  20++E93D 00                                   DB 0                            ; NewB Tactics
  21++E93E 80                                   DB ShipCanAnger                 ; AI Flags
  22++E93F 40                                   DB $40                          ; chance of ECM module
  23++E940 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E941 00 00                                DW $0000                            ; no solid data
  25++E943 00                                   DB $00                              ; no solid data
  26++E944
  27++E944 12 00 6E 9F  ChameleonVertices:	    DB $12, $00, $6E, $9F, $25, $01
  27++E948 25 01
  28++E94A 12 00 6E 1F                          DB $12, $00, $6E, $1F, $34, $01
  28++E94E 34 01
  29++E950 28 00 00 9F                          DB $28, $00, $00, $9F, $8B, $25
  29++E954 8B 25
  30++E956 08 18 00 9F                          DB $08, $18, $00, $9F, $68, $22
  30++E95A 68 22
  31++E95C 08 18 00 1F                          DB $08, $18, $00, $1F, $69, $33
  31++E960 69 33
  32++E962 28 00 00 1F                          DB $28, $00, $00, $1F, $9A, $34
  32++E966 9A 34
  33++E968 08 18 00 5F                          DB $08, $18, $00, $5F, $7A, $44
  33++E96C 7A 44
  34++E96E 08 18 00 DF                          DB $08, $18, $00, $DF, $7B, $55
  34++E972 7B 55
  35++E974 00 18 28 1F                          DB $00, $18, $28, $1F, $36, $02
  35++E978 36 02
  36++E97A 00 18 28 5F                          DB $00, $18, $28, $5F, $57, $14
  36++E97E 57 14
  37++E980 20 00 28 BF                          DB $20, $00, $28, $BF, $BC, $88
  37++E984 BC 88
  38++E986 00 18 28 3F                          DB $00, $18, $28, $3F, $9C, $68
  38++E98A 9C 68
  39++E98C 20 00 28 3F                          DB $20, $00, $28, $3F, $AC, $99
  39++E990 AC 99
  40++E992 00 18 28 7F                          DB $00, $18, $28, $7F, $BC, $7A
  40++E996 BC 7A
  41++E998 08 00 28 AA                          DB $08, $00, $28, $AA, $CC, $CC
  41++E99C CC CC
  42++E99E 00 08 28 2A                          DB $00, $08, $28, $2A, $CC, $CC
  42++E9A2 CC CC
  43++E9A4 08 00 28 2A                          DB $08, $00, $28, $2A, $CC, $CC
  43++E9A8 CC CC
  44++E9AA 00 08 28 6A                          DB $00, $08, $28, $6A, $CC, $CC
  44++E9AE CC CC
  45++E9B0              ChameleonVertSize:      equ $ - ChameleonVertices
  46++E9B0 1F 01 00 04  ChameleonEdges:	        DB $1F, $01, $00, $04
  47++E9B4 1F 02 00 20                          DB $1F, $02, $00, $20
  48++E9B8 1F 15 00 24                          DB $1F, $15, $00, $24
  49++E9BC 1F 03 04 20                          DB $1F, $03, $04, $20
  50++E9C0 1F 14 04 24                          DB $1F, $14, $04, $24
  51++E9C4 1F 34 04 14                          DB $1F, $34, $04, $14
  52++E9C8 1F 25 00 08                          DB $1F, $25, $00, $08
  53++E9CC 1F 26 0C 20                          DB $1F, $26, $0C, $20
  54++E9D0 1F 36 10 20                          DB $1F, $36, $10, $20
  55++E9D4 1F 75 1C 24                          DB $1F, $75, $1C, $24
  56++E9D8 1F 74 18 24                          DB $1F, $74, $18, $24
  57++E9DC 1F 39 10 14                          DB $1F, $39, $10, $14
  58++E9E0 1F 4A 14 18                          DB $1F, $4A, $14, $18
  59++E9E4 1F 28 08 0C                          DB $1F, $28, $08, $0C
  60++E9E8 1F 5B 08 1C                          DB $1F, $5B, $08, $1C
  61++E9EC 1F 8B 08 28                          DB $1F, $8B, $08, $28
  62++E9F0 1F 9A 14 30                          DB $1F, $9A, $14, $30
  63++E9F4 1F 68 0C 2C                          DB $1F, $68, $0C, $2C
  64++E9F8 1F 7B 1C 34                          DB $1F, $7B, $1C, $34
  65++E9FC 1F 69 10 2C                          DB $1F, $69, $10, $2C
  66++EA00 1F 7A 18 34                          DB $1F, $7A, $18, $34
  67++EA04 1F 8C 28 2C                          DB $1F, $8C, $28, $2C
  68++EA08 1F BC 28 34                          DB $1F, $BC, $28, $34
  69++EA0C 1F 9C 2C 30                          DB $1F, $9C, $2C, $30
  70++EA10 1F AC 30 34                          DB $1F, $AC, $30, $34
  71++EA14 0A CC 38 3C                          DB $0A, $CC, $38, $3C
  72++EA18 0A CC 3C 40                          DB $0A, $CC, $3C, $40
  73++EA1C 0A CC 40 44                          DB $0A, $CC, $40, $44
  74++EA20 0A CC 44 38                          DB $0A, $CC, $44, $38
  75++EA24              ChameleonEdgesSize:     equ $ - ChameleonEdges
  76++EA24              ChameleonEdgesCnt:      equ ChameleonEdgesSize/4
  77++EA24 1F 00 5A 1F  ChameleonNormals:	    DB $1F, $00, $5A, $1F
  78++EA28 5F 00 5A 1F                          DB $5F, $00, $5A, $1F
  79++EA2C 9F 39 4C 0B                          DB $9F, $39, $4C, $0B
  80++EA30 1F 39 4C 0B                          DB $1F, $39, $4C, $0B
  81++EA34 5F 39 4C 0B                          DB $5F, $39, $4C, $0B
  82++EA38 DF 39 4C 0B                          DB $DF, $39, $4C, $0B
  83++EA3C 1F 00 60 00                          DB $1F, $00, $60, $00
  84++EA40 5F 00 60 00                          DB $5F, $00, $60, $00
  85++EA44 BF 39 4C 0B                          DB $BF, $39, $4C, $0B
  86++EA48 3F 39 4C 0B                          DB $3F, $39, $4C, $0B
  87++EA4C 7F 39 4C 0B                          DB $7F, $39, $4C, $0B
  88++EA50 FF 39 4C 0B                          DB $FF, $39, $4C, $0B
  89++EA54 3F 00 00 60                          DB $3F, $00, $00, $60
  90++EA58              ChameleonNormalsSize:   equ $ - ChameleonNormals
  91++EA58              ChameleonLen:           equ $ - Chameleon
  92++EA58
# file closed: ./Data/ships/Chameleon.asm
  98+ EA58                                      include "Data/ships/CobraMk3.asm"
# file opened: ./Data/ships/CobraMk3.asm
   1++EA58              ; Corrected pointers
   2++EA58              ;                      0    1    2  3  4  5   6   7   8   9   10  11  12   13  14  15   16 17 18 19    20    21
   3++EA58              ;					   Scp  Missile Edge  Lin Gun Exp Vtx Edg Bounty  Face              Face           Vertices
   4++EA58              ;                      Deb  Lock    Lo Hi x4  Vtx Cnt x6  X1  lo  hi  x4   Dot Erg Spd  Lo Hi Q  Laser Lo    hi
   5++EA58 03           CobraMk3    		    DB $03                            ; Number of cargo canisters released when destroyed
   6++EA59 41 23                                DW $2341                          ; Ship's targetable area LoHi
   7++EA5B 1F EB                                DW CobraMk3Edges                  ; Edge Data
   8++EA5D 98                                   DB CobraMkEdgesSize               ; Size of Edge Data
   9++EA5E 54                                   DB $54                            ; Gun Vertex Byte offset
  10++EA5F 2A                                   DB $2A                            ; Explosion Count
  11++EA60 1C                                   DB CobraMkVertSize /6             ; Vertex Count /6
  12++EA61 A8                                   DB CobraMkVertSize                ; Vertex Count
  13++EA62 26                                   DB CobraMkEdgesCnt                ; Edges Count
  14++EA63 00 00                                DW $0000                          ; Bounty LoHi
  15++EA65 34                                   DB CobraMk3NormalsSize            ; Face (Normal) Count
  16++EA66 32                                   DB $32                            ; Range when it turns to a dot
  17++EA67 96                                   DB $96                            ; Energy Max
  18++EA68 1C                                   DB $1C                            ; Speed Max
  19++EA69 B7 EB                                DW CobraMk3Normals                ; Normals
  20++EA6B 01                                   DB $01                            ; Q scaling
  21++EA6C 34                                   DB $30 | ShipMissiles4            ; Laser power and Nbr Missiles
  22++EA6D 77 EA                                DW CobraMk3Vertices               ; Verticles Address
  23++EA6F 00                                   DB ShipTypeNormal                 ; Ship Type
  24++EA70 00                                   DB 0                              ; NewB Tactics
  25++EA71 80                                   DB ShipCanAnger                   ; AI Flags
  26++EA72 70                                   DB $70                            ; chance of ECM module
  27++EA73 FF                                   DB $FF                              ; Supports Solid Fill = false
  28++EA74 00 00                                DW $0000                            ; no solid data
  29++EA76 00                                   DB $00                              ; no solid data
  30++EA77
  31++EA77 20 00 4C 1F  CobraMk3Vertices	    DB $20,$00,$4C,$1F,$FF,$FF
  31++EA7B FF FF
  32++EA7D 20 00 4C 9F                          DB $20,$00,$4C,$9F,$FF,$FF
  32++EA81 FF FF
  33++EA83 00 1A 18 1F                          DB $00,$1A,$18,$1F,$FF,$FF
  33++EA87 FF FF
  34++EA89 78 03 08 FF                          DB $78,$03,$08,$FF,$73,$AA
  34++EA8D 73 AA
  35++EA8F 78 03 08 7F                          DB $78,$03,$08,$7F,$84,$CC
  35++EA93 84 CC
  36++EA95 58 10 28 BF                          DB $58,$10,$28,$BF,$FF,$FF
  36++EA99 FF FF
  37++EA9B 58 10 28 3F                          DB $58,$10,$28,$3F,$FF,$FF
  37++EA9F FF FF
  38++EAA1 80 08 28 7F                          DB $80,$08,$28,$7F,$98,$CC
  38++EAA5 98 CC
  39++EAA7 80 08 28 FF                          DB $80,$08,$28,$FF,$97,$AA
  39++EAAB 97 AA
  40++EAAD 00 1A 28 3F                          DB $00,$1A,$28,$3F,$65,$99
  40++EAB1 65 99
  41++EAB3 20 18 28 FF                          DB $20,$18,$28,$FF,$A9,$BB
  41++EAB7 A9 BB
  42++EAB9 20 18 28 7F                          DB $20,$18,$28,$7F,$B9,$CC
  42++EABD B9 CC
  43++EABF 24 08 28 B4                          DB $24,$08,$28,$B4,$99,$99
  43++EAC3 99 99
  44++EAC5 08 0C 28 B4                          DB $08,$0C,$28,$B4,$99,$99
  44++EAC9 99 99
  45++EACB 08 0C 28 34                          DB $08,$0C,$28,$34,$99,$99
  45++EACF 99 99
  46++EAD1 24 08 28 34                          DB $24,$08,$28,$34,$99,$99
  46++EAD5 99 99
  47++EAD7 24 0C 28 74                          DB $24,$0C,$28,$74,$99,$99
  47++EADB 99 99
  48++EADD 08 10 28 74                          DB $08,$10,$28,$74,$99,$99
  48++EAE1 99 99
  49++EAE3 08 10 28 F4                          DB $08,$10,$28,$F4,$99,$99
  49++EAE7 99 99
  50++EAE9 24 0C 28 F4                          DB $24,$0C,$28,$F4,$99,$99
  50++EAED 99 99
  51++EAEF 00 00 4C 06                          DB $00,$00,$4C,$06,$B0,$BB
  51++EAF3 B0 BB
  52++EAF5 00 00 5A 1F                          DB $00,$00,$5A,$1F,$B0,$BB
  52++EAF9 B0 BB
  53++EAFB 50 06 28 E8                          DB $50,$06,$28,$E8,$99,$99
  53++EAFF 99 99
  54++EB01 50 06 28 A8                          DB $50,$06,$28,$A8,$99,$99
  54++EB05 99 99
  55++EB07 58 00 28 A6                          DB $58,$00,$28,$A6,$99,$99
  55++EB0B 99 99
  56++EB0D 50 06 28 28                          DB $50,$06,$28,$28,$99,$99
  56++EB11 99 99
  57++EB13 58 00 28 26                          DB $58,$00,$28,$26,$99,$99
  57++EB17 99 99
  58++EB19 50 06 28 68                          DB $50,$06,$28,$68,$99,$99
  58++EB1D 99 99
  59++EB1F              CobraMkVertSize         equ $  - CobraMk3Vertices
  60++EB1F 1F B0 00 04  CobraMk3Edges		    DB $1F,$B0,$00,$04
  61++EB23 1F C4 00 10                          DB $1F,$C4,$00,$10
  62++EB27 1F A3 04 0C                          DB $1F,$A3,$04,$0C
  63++EB2B 1F A7 0C 20                          DB $1F,$A7,$0C,$20
  64++EB2F 1F C8 10 1C                          DB $1F,$C8,$10,$1C
  65++EB33 1F 98 18 1C                          DB $1F,$98,$18,$1C
  66++EB37 1F 96 18 24                          DB $1F,$96,$18,$24
  67++EB3B 1F 95 14 24                          DB $1F,$95,$14,$24
  68++EB3F 1F 97 14 20                          DB $1F,$97,$14,$20
  69++EB43 1F 51 08 14                          DB $1F,$51,$08,$14
  70++EB47 1F 62 08 18                          DB $1F,$62,$08,$18
  71++EB4B 1F 73 0C 14                          DB $1F,$73,$0C,$14
  72++EB4F 1F 84 10 18                          DB $1F,$84,$10,$18
  73++EB53 1F 10 04 08                          DB $1F,$10,$04,$08
  74++EB57 1F 20 00 08                          DB $1F,$20,$00,$08
  75++EB5B 1F A9 20 28                          DB $1F,$A9,$20,$28
  76++EB5F 1F B9 28 2C                          DB $1F,$B9,$28,$2C
  77++EB63 1F C9 1C 2C                          DB $1F,$C9,$1C,$2C
  78++EB67 1F BA 04 28                          DB $1F,$BA,$04,$28
  79++EB6B 1F CB 00 2C                          DB $1F,$CB,$00,$2C
  80++EB6F 1D 31 04 14                          DB $1D,$31,$04,$14
  81++EB73 1D 42 00 18                          DB $1D,$42,$00,$18
  82++EB77 06 B0 50 54                          DB $06,$B0,$50,$54
  83++EB7B 14 99 30 34                          DB $14,$99,$30,$34
  84++EB7F 14 99 48 4C                          DB $14,$99,$48,$4C
  85++EB83 14 99 38 3C                          DB $14,$99,$38,$3C
  86++EB87 14 99 40 44                          DB $14,$99,$40,$44
  87++EB8B 13 99 3C 40                          DB $13,$99,$3C,$40
  88++EB8F 11 99 38 44                          DB $11,$99,$38,$44
  89++EB93 13 99 34 48                          DB $13,$99,$34,$48
  90++EB97 13 99 30 4C                          DB $13,$99,$30,$4C
  91++EB9B 1E 65 08 24                          DB $1E,$65,$08,$24
  92++EB9F 06 99 58 60                          DB $06,$99,$58,$60
  93++EBA3 06 99 5C 60                          DB $06,$99,$5C,$60
  94++EBA7 08 99 58 5C                          DB $08,$99,$58,$5C
  95++EBAB 06 99 64 68                          DB $06,$99,$64,$68
  96++EBAF 06 99 68 6C                          DB $06,$99,$68,$6C
  97++EBB3 08 99 64 6C                          DB $08,$99,$64,$6C
  98++EBB7              CobraMkEdgesSize        equ $  - CobraMk3Edges
  99++EBB7              CobraMkEdgesCnt         equ CobraMkEdgesSize/4
 100++EBB7              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
 101++EBB7 1F 00 3E 1F  CobraMk3Normals		    DB $1F,$00,$3E,$1F
 102++EBBB 9F 12 37 10                          DB $9F,$12,$37,$10
 103++EBBF 1F 12 37 10                          DB $1F,$12,$37,$10
 104++EBC3 9F 10 34 0E                          DB $9F,$10,$34,$0E
 105++EBC7 1F 10 34 0E                          DB $1F,$10,$34,$0E
 106++EBCB 9F 0E 2F 00                          DB $9F,$0E,$2F,$00
 107++EBCF 1F 0E 2F 00                          DB $1F,$0E,$2F,$00
 108++EBD3 9F 3D 66 00                          DB $9F,$3D,$66,$00
 109++EBD7 1F 3D 66 00                          DB $1F,$3D,$66,$00
 110++EBDB 3F 00 00 50                          DB $3F,$00,$00,$50
 111++EBDF DF 07 2A 09                          DB $DF,$07,$2A,$09
 112++EBE3 5F 00 1E 06                          DB $5F,$00,$1E,$06
 113++EBE7 5F 07 2A 09                          DB $5F,$07,$2A,$09 		;end of Cobra Mk III
 114++EBEB              CobraMk3NormalsSize     equ $  - CobraMk3Normals
 115++EBEB              CobraMk3Len             equ $  - CobraMk3
 116++EBEB
# file closed: ./Data/ships/CobraMk3.asm
  99+ EBEB                                      include "Data/ships/Cobra_Mk_1.asm"
# file opened: ./Data/ships/Cobra_Mk_1.asm
   1++EBEB 03           Cobra_Mk_1:	            DB $03                              ; Number of cargo canisters released when destroyed
   2++EBEC 49 26                                DW $2649                            ; Ship's targetable area LoHi
   3++EBEE 4C EC                                DW Cobra_Mk_1Edges                  ; Edge Data
   4++EBF0 48                                   DB Cobra_Mk_1EdgesSize              ; Size of Edge Data
   5++EBF1 28                                   DB $28                              ; Gun Vertex Byte offset
   6++EBF2 1A                                   DB $1A                              ; Explosion Count
   7++EBF3 0B                                   DB Cobra_Mk_1VertSize /6            ; Vertex Count /6
   8++EBF4 42                                   DB Cobra_Mk_1VertSize               ; Vertex Count
   9++EBF5 12                                   DB Cobra_Mk_1EdgesCnt               ; Edges Count
  10++EBF6 00 4B                                DW $4B00                            ; Bounty LoHi
  11++EBF8 28                                   DB Cobra_Mk_1NormalsSize            ; Face (Normal) Count
  12++EBF9 13                                   DB $13                              ; Range when it turns to a dot
  13++EBFA 51                                   DB $51                              ; Energy Max
  14++EBFB 1A                                   DB $1A                              ; Speed Max
  15++EBFC 94 EC                                DW Cobra_Mk_1Normals                ; Normals
  16++EBFE 02                                   DB $02                              ; Q scaling
  17++EBFF 23                                   DB $20 | ShipMissiles3              ; Laser power and Nbr Missiles
  18++EC00 0A EC                                DW Cobra_Mk_1Vertices               ; Verticles Address
  19++EC02 00                                   DB ShipTypeNormal                   ; Ship Type
  20++EC03 00                                   DB 0                                ; NewB Tactics
  21++EC04 80                                   DB ShipCanAnger                     ; AI Flags
  22++EC05 30                                   DB $30                              ; chance of ECM module
  23++EC06 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EC07 00 00                                DW $0000                            ; no solid data
  25++EC09 00                                   DB $00                              ; no solid data
  26++EC0A
  27++EC0A 12 01 32 DF  Cobra_Mk_1Vertices:	    DB $12, $01, $32, $DF, $01, $23
  27++EC0E 01 23
  28++EC10 12 01 32 5F                          DB $12, $01, $32, $5F, $01, $45
  28++EC14 01 45
  29++EC16 42 00 07 9F                          DB $42, $00, $07, $9F, $23, $88
  29++EC1A 23 88
  30++EC1C 42 00 07 1F                          DB $42, $00, $07, $1F, $45, $99
  30++EC20 45 99
  31++EC22 20 0C 26 BF                          DB $20, $0C, $26, $BF, $26, $78
  31++EC26 26 78
  32++EC28 20 0C 26 3F                          DB $20, $0C, $26, $3F, $46, $79
  32++EC2C 46 79
  33++EC2E 36 0C 26 FF                          DB $36, $0C, $26, $FF, $13, $78
  33++EC32 13 78
  34++EC34 36 0C 26 7F                          DB $36, $0C, $26, $7F, $15, $79
  34++EC38 15 79
  35++EC3A 00 0C 06 34                          DB $00, $0C, $06, $34, $02, $46
  35++EC3E 02 46
  36++EC40 00 01 32 42                          DB $00, $01, $32, $42, $01, $11
  36++EC44 01 11
  37++EC46 00 01 3C 5F                          DB $00, $01, $3C, $5F, $01, $11
  37++EC4A 01 11
  38++EC4C              Cobra_Mk_1VertSize:     equ $ - Cobra_Mk_1Vertices
  39++EC4C 1F 01 04 00  Cobra_Mk_1Edges:	    DB $1F, $01, $04, $00
  40++EC50 1F 23 00 08                          DB $1F, $23, $00, $08
  41++EC54 1F 38 08 18                          DB $1F, $38, $08, $18
  42++EC58 1F 17 18 1C                          DB $1F, $17, $18, $1C
  43++EC5C 1F 59 1C 0C                          DB $1F, $59, $1C, $0C
  44++EC60 1F 45 0C 04                          DB $1F, $45, $0C, $04
  45++EC64 1F 28 08 10                          DB $1F, $28, $08, $10
  46++EC68 1F 67 10 14                          DB $1F, $67, $10, $14
  47++EC6C 1F 49 14 0C                          DB $1F, $49, $14, $0C
  48++EC70 14 02 00 20                          DB $14, $02, $00, $20
  49++EC74 14 04 20 04                          DB $14, $04, $20, $04
  50++EC78 10 26 10 20                          DB $10, $26, $10, $20
  51++EC7C 10 46 20 14                          DB $10, $46, $20, $14
  52++EC80 1F 78 10 18                          DB $1F, $78, $10, $18
  53++EC84 1F 79 14 1C                          DB $1F, $79, $14, $1C
  54++EC88 14 13 00 18                          DB $14, $13, $00, $18
  55++EC8C 14 15 04 1C                          DB $14, $15, $04, $1C
  56++EC90 02 01 28 24                          DB $02, $01, $28, $24
  57++EC94              Cobra_Mk_1EdgesSize:    equ $ - Cobra_Mk_1Edges
  58++EC94              Cobra_Mk_1EdgesCnt:     equ Cobra_Mk_1EdgesSize/4
  59++EC94 1F 00 29 0A  Cobra_Mk_1Normals:	    DB $1F, $00, $29, $0A
  60++EC98 5F 00 1B 03                          DB $5F, $00, $1B, $03
  61++EC9C 9F 08 2E 08                          DB $9F, $08, $2E, $08
  62++ECA0 DF 0C 39 0C                          DB $DF, $0C, $39, $0C
  63++ECA4 1F 08 2E 08                          DB $1F, $08, $2E, $08
  64++ECA8 5F 0C 39 0C                          DB $5F, $0C, $39, $0C
  65++ECAC 1F 00 31 00                          DB $1F, $00, $31, $00
  66++ECB0 3F 00 00 9A                          DB $3F, $00, $00, $9A
  67++ECB4 BF 79 6F 3E                          DB $BF, $79, $6F, $3E
  68++ECB8 3F 79 6F 3E                          DB $3F, $79, $6F, $3E
  69++ECBC              Cobra_Mk_1NormalsSize:  equ $ - Cobra_Mk_1Normals
  70++ECBC              Cobra_Mk_1Len:          equ $ - Cobra_Mk_1
  71++ECBC
# file closed: ./Data/ships/Cobra_Mk_1.asm
 100+ ECBC                                      include "Data/ships/Cobra_Mk_3_P.asm"
# file opened: ./Data/ships/Cobra_Mk_3_P.asm
   1++ECBC 01           Cobra_Mk_3_P:	        DB $01                              ; Number of cargo canisters released when destroyed
   2++ECBD 41 23                                DW $2341                            ; Ship's targetable area LoHi
   3++ECBF 83 ED                                DW Cobra_Mk_3_PEdges                ; Edge Data
   4++ECC1 98                                   DB Cobra_Mk_3_PEdgesSize            ; Size of Edge Data
   5++ECC2 54                                   DB $54                              ; Gun Vertex Byte offset
   6++ECC3 2A                                   DB $2A                              ; Explosion Count
   7++ECC4 1C                                   DB Cobra_Mk_3_PVertSize /6          ; Vertex Count /6
   8++ECC5 A8                                   DB Cobra_Mk_3_PVertSize             ; Vertex Count
   9++ECC6 26                                   DB Cobra_Mk_3_PEdgesCnt             ; Edges Count
  10++ECC7 00 AF                                DW $AF00                            ; Bounty LoHi
  11++ECC9 34                                   DB Cobra_Mk_3_PNormalsSize          ; Face (Normal) Count
  12++ECCA                                      ; Add in a new byte for range for LoD, if this is zero then no LoD Data
  13++ECCA 32                                   DB $32                              ; Range when it turns to a dot
  14++ECCB 96                                   DB $96                              ; Energy Max
  15++ECCC 1C                                   DB $1C                              ; Speed Max
  16++ECCD 1B EE                                DW Cobra_Mk_3_PNormals              ; Normals
  17++ECCF 01                                   DB $01                              ; Q scaling
  18++ECD0 14                                   DB $10 | ShipMissiles4              ; Laser power and Nbr Missiles
  19++ECD1 DB EC                                DW Cobra_Mk_3_PVertices             ; Verticles Address
  20++ECD3 00                                   DB ShipTypeNormal                   ; Ship Type
  21++ECD4 00                                   DB 0                                ; NewB Tactics
  22++ECD5 80                                   DB ShipCanAnger                     ; AI Flags
  23++ECD6 90                                   DB $90                              ; chance of ECM module
  24++ECD7 FF                                   DB $FF                              ; Supports Solid Fill = false
  25++ECD8 00 00                                DW $0000                            ; no solid data
  26++ECDA 00                                   DB $00                              ; no solid data
  27++ECDB
  28++ECDB 20 00 4C 1F  Cobra_Mk_3_PVertices:	DB $20, $00, $4C, $1F, $FF, $FF
  28++ECDF FF FF
  29++ECE1 20 00 4C 9F                          DB $20, $00, $4C, $9F, $FF, $FF
  29++ECE5 FF FF
  30++ECE7 00 1A 18 1F                          DB $00, $1A, $18, $1F, $FF, $FF
  30++ECEB FF FF
  31++ECED 78 03 08 FF                          DB $78, $03, $08, $FF, $73, $AA
  31++ECF1 73 AA
  32++ECF3 78 03 08 7F                          DB $78, $03, $08, $7F, $84, $CC
  32++ECF7 84 CC
  33++ECF9 58 10 28 BF                          DB $58, $10, $28, $BF, $FF, $FF
  33++ECFD FF FF
  34++ECFF 58 10 28 3F                          DB $58, $10, $28, $3F, $FF, $FF
  34++ED03 FF FF
  35++ED05 80 08 28 7F                          DB $80, $08, $28, $7F, $98, $CC
  35++ED09 98 CC
  36++ED0B 80 08 28 FF                          DB $80, $08, $28, $FF, $97, $AA
  36++ED0F 97 AA
  37++ED11 00 1A 28 3F                          DB $00, $1A, $28, $3F, $65, $99
  37++ED15 65 99
  38++ED17 20 18 28 FF                          DB $20, $18, $28, $FF, $A9, $BB
  38++ED1B A9 BB
  39++ED1D 20 18 28 7F                          DB $20, $18, $28, $7F, $B9, $CC
  39++ED21 B9 CC
  40++ED23 24 08 28 B4                          DB $24, $08, $28, $B4, $99, $99
  40++ED27 99 99
  41++ED29 08 0C 28 B4                          DB $08, $0C, $28, $B4, $99, $99
  41++ED2D 99 99
  42++ED2F 08 0C 28 34                          DB $08, $0C, $28, $34, $99, $99
  42++ED33 99 99
  43++ED35 24 08 28 34                          DB $24, $08, $28, $34, $99, $99
  43++ED39 99 99
  44++ED3B 24 0C 28 74                          DB $24, $0C, $28, $74, $99, $99
  44++ED3F 99 99
  45++ED41 08 10 28 74                          DB $08, $10, $28, $74, $99, $99
  45++ED45 99 99
  46++ED47 08 10 28 F4                          DB $08, $10, $28, $F4, $99, $99
  46++ED4B 99 99
  47++ED4D 24 0C 28 F4                          DB $24, $0C, $28, $F4, $99, $99
  47++ED51 99 99
  48++ED53 00 00 4C 06                          DB $00, $00, $4C, $06, $B0, $BB
  48++ED57 B0 BB
  49++ED59 00 00 5A 1F                          DB $00, $00, $5A, $1F, $B0, $BB
  49++ED5D B0 BB
  50++ED5F 50 06 28 E8                          DB $50, $06, $28, $E8, $99, $99
  50++ED63 99 99
  51++ED65 50 06 28 A8                          DB $50, $06, $28, $A8, $99, $99
  51++ED69 99 99
  52++ED6B 58 00 28 A6                          DB $58, $00, $28, $A6, $99, $99
  52++ED6F 99 99
  53++ED71 50 06 28 28                          DB $50, $06, $28, $28, $99, $99
  53++ED75 99 99
  54++ED77 58 00 28 26                          DB $58, $00, $28, $26, $99, $99
  54++ED7B 99 99
  55++ED7D 50 06 28 68                          DB $50, $06, $28, $68, $99, $99
  55++ED81 99 99
  56++ED83              Cobra_Mk_3_PVertSize:   equ $ - Cobra_Mk_3_PVertices
  57++ED83 1F B0 00 04  Cobra_Mk_3_PEdges:	    DB $1F, $B0, $00, $04
  58++ED87 1F C4 00 10                          DB $1F, $C4, $00, $10
  59++ED8B 1F A3 04 0C                          DB $1F, $A3, $04, $0C
  60++ED8F 1F A7 0C 20                          DB $1F, $A7, $0C, $20
  61++ED93 1F C8 10 1C                          DB $1F, $C8, $10, $1C
  62++ED97 1F 98 18 1C                          DB $1F, $98, $18, $1C
  63++ED9B 1F 96 18 24                          DB $1F, $96, $18, $24
  64++ED9F 1F 95 14 24                          DB $1F, $95, $14, $24
  65++EDA3 1F 97 14 20                          DB $1F, $97, $14, $20
  66++EDA7 1F 51 08 14                          DB $1F, $51, $08, $14
  67++EDAB 1F 62 08 18                          DB $1F, $62, $08, $18
  68++EDAF 1F 73 0C 14                          DB $1F, $73, $0C, $14
  69++EDB3 1F 84 10 18                          DB $1F, $84, $10, $18
  70++EDB7 1F 10 04 08                          DB $1F, $10, $04, $08
  71++EDBB 1F 20 00 08                          DB $1F, $20, $00, $08
  72++EDBF 1F A9 20 28                          DB $1F, $A9, $20, $28
  73++EDC3 1F B9 28 2C                          DB $1F, $B9, $28, $2C
  74++EDC7 1F C9 1C 2C                          DB $1F, $C9, $1C, $2C
  75++EDCB 1F BA 04 28                          DB $1F, $BA, $04, $28
  76++EDCF 1F CB 00 2C                          DB $1F, $CB, $00, $2C
  77++EDD3 1D 31 04 14                          DB $1D, $31, $04, $14
  78++EDD7 1D 42 00 18                          DB $1D, $42, $00, $18
  79++EDDB 06 B0 50 54                          DB $06, $B0, $50, $54
  80++EDDF 14 99 30 34                          DB $14, $99, $30, $34
  81++EDE3 14 99 48 4C                          DB $14, $99, $48, $4C
  82++EDE7 14 99 38 3C                          DB $14, $99, $38, $3C
  83++EDEB 14 99 40 44                          DB $14, $99, $40, $44
  84++EDEF 13 99 3C 40                          DB $13, $99, $3C, $40
  85++EDF3 11 99 38 44                          DB $11, $99, $38, $44
  86++EDF7 13 99 34 48                          DB $13, $99, $34, $48
  87++EDFB 13 99 30 4C                          DB $13, $99, $30, $4C
  88++EDFF 1E 65 08 24                          DB $1E, $65, $08, $24
  89++EE03 06 99 58 60                          DB $06, $99, $58, $60
  90++EE07 06 99 5C 60                          DB $06, $99, $5C, $60
  91++EE0B 08 99 58 5C                          DB $08, $99, $58, $5C
  92++EE0F 06 99 64 68                          DB $06, $99, $64, $68
  93++EE13 06 99 68 6C                          DB $06, $99, $68, $6C
  94++EE17 08 99 64 6C                          DB $08, $99, $64, $6C
  95++EE1B              Cobra_Mk_3_PEdgesSize:  equ $ - Cobra_Mk_3_PEdges
  96++EE1B              Cobra_Mk_3_PEdgesCnt:   equ Cobra_Mk_3_PEdgesSize/4
  97++EE1B 1F 00 3E 1F  Cobra_Mk_3_PNormals:	DB $1F, $00, $3E, $1F
  98++EE1F 9F 12 37 10                          DB $9F, $12, $37, $10
  99++EE23 1F 12 37 10                          DB $1F, $12, $37, $10
 100++EE27 9F 10 34 0E                          DB $9F, $10, $34, $0E
 101++EE2B 1F 10 34 0E                          DB $1F, $10, $34, $0E
 102++EE2F 9F 0E 2F 00                          DB $9F, $0E, $2F, $00
 103++EE33 1F 0E 2F 00                          DB $1F, $0E, $2F, $00
 104++EE37 9F 3D 66 00                          DB $9F, $3D, $66, $00
 105++EE3B 1F 3D 66 00                          DB $1F, $3D, $66, $00
 106++EE3F 3F 00 00 50                          DB $3F, $00, $00, $50
 107++EE43 DF 07 2A 09                          DB $DF, $07, $2A, $09
 108++EE47 5F 00 1E 06                          DB $5F, $00, $1E, $06
 109++EE4B 5F 07 2A 09                          DB $5F, $07, $2A, $09
 110++EE4F              Cobra_Mk_3_PNormalsSize:equ $ - Cobra_Mk_3_PNormals
 111++EE4F              Cobra_Mk_3_PLen:        equ $ - Cobra_Mk_3_P
 112++EE4F
# file closed: ./Data/ships/Cobra_Mk_3_P.asm
 101+ EE4F                                      include "Data/ships/Constrictor.asm"
# file opened: ./Data/ships/Constrictor.asm
   1++EE4F F3           Constrictor:    	    DB $F3                         ; Number of cargo canisters released when destroyed
   2++EE50 49 26                                DW $2649                       ; Ship's targetable area LoHi
   3++EE52 D4 EE                                DW ConstrictorEdges            ; Edge Data
   4++EE54 60                                   DB ConstrictorEdgesSize        ; Size of Edge Data
   5++EE55 00                                   DB $00                         ; Gun Vertex Byte offset
   6++EE56 2E                                   DB $2E                         ; Explosion Count
   7++EE57 11                                   DB ConstrictorVertSize /6      ; Vertex Count /6
   8++EE58 66                                   DB ConstrictorVertSize         ; Vertex Count
   9++EE59 18                                   DB ConstrictorEdgesCnt         ; Edges Count
  10++EE5A 18 00                                DW $0018                       ; Bounty LoHi
  11++EE5C 28                                   DB ConstrictorNormalsSize      ; Face (Normal) Count
  12++EE5D 2D                                   DB $2D                         ; Range when it turns to a dot
  13++EE5E C8                                   DB $C8                         ; Energy Max
  14++EE5F 37                                   DB $37                         ; Speed Max
  15++EE60 34 EF                                DW ConstrictorNormals          ; Normals
  16++EE62 02                                   DB $02                         ; Q scaling
  17++EE63 2F                                   DB $20 | ShipMissiles15        ; Laser power and Nbr Missiles
  18++EE64 6E EE                                DW ConstrictorVertices         ; Verticles Address
  19++EE66 00                                   DB ShipTypeNormal              ; Ship Type
  20++EE67 00                                   DB 0                           ; NewB Tactics
  21++EE68 80                                   DB ShipCanAnger                ; AI Flags
  22++EE69 FF                                   DB $FF                         ; chance of ECM module
  23++EE6A FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EE6B 00 00                                DW $0000                            ; no solid data
  25++EE6D 00                                   DB $00                              ; no solid data
  26++EE6E
  27++EE6E 14 07 50 5F  ConstrictorVertices     DB $14, $07, $50, $5F, $02, $99
  27++EE72 02 99
  28++EE74 14 07 50 DF                          DB $14, $07, $50, $DF, $01, $99
  28++EE78 01 99
  29++EE7A 36 07 28 DF                          DB $36, $07, $28, $DF, $14, $99
  29++EE7E 14 99
  30++EE80 36 07 28 FF                          DB $36, $07, $28, $FF, $45, $89
  30++EE84 45 89
  31++EE86 14 0D 28 BF                          DB $14, $0D, $28, $BF, $56, $88
  31++EE8A 56 88
  32++EE8C 14 0D 28 3F                          DB $14, $0D, $28, $3F, $67, $88
  32++EE90 67 88
  33++EE92 36 07 28 7F                          DB $36, $07, $28, $7F, $37, $89
  33++EE96 37 89
  34++EE98 36 07 28 5F                          DB $36, $07, $28, $5F, $23, $99
  34++EE9C 23 99
  35++EE9E 14 0D 05 1F                          DB $14, $0D, $05, $1F, $FF, $FF
  35++EEA2 FF FF
  36++EEA4 14 0D 05 9F                          DB $14, $0D, $05, $9F, $FF, $FF
  36++EEA8 FF FF
  37++EEAA 14 07 3E 52                          DB $14, $07, $3E, $52, $99, $99
  37++EEAE 99 99
  38++EEB0 14 07 3E D2                          DB $14, $07, $3E, $D2, $99, $99
  38++EEB4 99 99
  39++EEB6 19 07 19 72                          DB $19, $07, $19, $72, $99, $99
  39++EEBA 99 99
  40++EEBC 19 07 19 F2                          DB $19, $07, $19, $F2, $99, $99
  40++EEC0 99 99
  41++EEC2 0F 07 0F 6A                          DB $0F, $07, $0F, $6A, $99, $99
  41++EEC6 99 99
  42++EEC8 0F 07 0F EA                          DB $0F, $07, $0F, $EA, $99, $99
  42++EECC 99 99
  43++EECE 00 07 00 40                          DB $00, $07, $00, $40, $9F, $01
  43++EED2 9F 01
  44++EED4              ConstrictorVertSize     equ $  - ConstrictorVertices
  45++EED4 1F 09 00 04  ConstrictorEdges        DB $1F, $09, $00, $04
  46++EED8 1F 19 04 08                          DB $1F, $19, $04, $08
  47++EEDC 1F 01 04 24                          DB $1F, $01, $04, $24
  48++EEE0 1F 02 00 20                          DB $1F, $02, $00, $20
  49++EEE4 1F 29 00 1C                          DB $1F, $29, $00, $1C
  50++EEE8 1F 23 1C 20                          DB $1F, $23, $1C, $20
  51++EEEC 1F 14 08 24                          DB $1F, $14, $08, $24
  52++EEF0 1F 49 08 0C                          DB $1F, $49, $08, $0C
  53++EEF4 1F 39 18 1C                          DB $1F, $39, $18, $1C
  54++EEF8 1F 37 18 20                          DB $1F, $37, $18, $20
  55++EEFC 1F 67 14 20                          DB $1F, $67, $14, $20
  56++EF00 1F 56 10 24                          DB $1F, $56, $10, $24
  57++EF04 1F 45 0C 24                          DB $1F, $45, $0C, $24
  58++EF08 1F 58 0C 10                          DB $1F, $58, $0C, $10
  59++EF0C 1F 68 10 14                          DB $1F, $68, $10, $14
  60++EF10 1F 78 14 18                          DB $1F, $78, $14, $18
  61++EF14 1F 89 0C 18                          DB $1F, $89, $0C, $18
  62++EF18 1F 06 20 24                          DB $1F, $06, $20, $24
  63++EF1C 12 99 28 30                          DB $12, $99, $28, $30
  64++EF20 05 99 30 38                          DB $05, $99, $30, $38
  65++EF24 0A 99 38 28                          DB $0A, $99, $38, $28
  66++EF28 0A 99 2C 3C                          DB $0A, $99, $2C, $3C
  67++EF2C 05 99 34 3C                          DB $05, $99, $34, $3C
  68++EF30 12 99 2C 34                          DB $12, $99, $2C, $34
  69++EF34              ConstrictorEdgesSize    equ $  - ConstrictorEdges
  70++EF34              ConstrictorEdgesCnt     equ ConstrictorEdgesSize/4
  71++EF34 1F 00 37 0F  ConstrictorNormals      DB $1F, $00, $37, $0F, $9F, $18, $4B, $14
  71++EF38 9F 18 4B 14
  72++EF3C 1F 18 4B 14                          DB $1F, $18, $4B, $14, $1F, $2C, $4B, $00
  72++EF40 1F 2C 4B 00
  73++EF44 9F 2C 4B 00                          DB $9F, $2C, $4B, $00, $9F, $2C, $4B, $00
  73++EF48 9F 2C 4B 00
  74++EF4C 1F 00 35 00                          DB $1F, $00, $35, $00, $1F, $2C, $4B, $00
  74++EF50 1F 2C 4B 00
  75++EF54 3F 00 00 A0                          DB $3F, $00, $00, $A0, $5F, $00, $1B, $00
  75++EF58 5F 00 1B 00
  76++EF5C              ConstrictorNormalsSize  equ $  - ConstrictorNormals
  77++EF5C              ConstrictorLen          equ $  - Constrictor
  78++EF5C
# file closed: ./Data/ships/Constrictor.asm
 102+ EF5C                                      include "Data/ships/Coriolis.asm"
# file opened: ./Data/ships/Coriolis.asm
   1++EF5C 00           Coriolis:	            DB $00                                      ; Number of cargo canisters released when destroyed
   2++EF5D 00 64                                DW $6400                                    ; Ship's targetable area LoHi
   3++EF5F DB EF                                DW CoriolisEdges                            ; Edge Data
   4++EF61 70                                   DB CoriolisEdgesSize                        ; Size of Edge Data
   5++EF62 00                                   DB $00                                      ; Gun Vertex Byte offset
   6++EF63 36                                   DB $36                                      ; Explosion Count
   7++EF64 10                                   DB CoriolisVertSize /6                      ; Vertex Count /6
   8++EF65 60                                   DB CoriolisVertSize                         ; Vertex Count
   9++EF66 1C                                   DB CoriolisEdgesCnt                         ; Edges Count
  10++EF67 00 00                                DW $0000                                    ; Bounty LoHi
  11++EF69 38                                   DB CoriolisNormalsSize                      ; Face (Normal) Count
  12++EF6A 78                                   DB $78                                      ; Range when it turns to a dot
  13++EF6B F0                                   DB $F0                                      ; Energy Max
  14++EF6C 00                                   DB $00                                      ; Speed Max
  15++EF6D 4B F0                                DW CoriolisNormals                          ; Normals
  16++EF6F 00                                   DB $00                                      ; Q scaling
  17++EF70 06                                   DB $06                                      ; Laser power and Nbr Missiles
  18++EF71 7B EF                                DW CoriolisVertices                         ; Verticles Address
  19++EF73 02                                   DB ShipTypeStation                          ; Ship Type
  20++EF74 00                                   DB 0                                        ; NewB Tactics
  21++EF75 78                                   DB ShipFighterBaySize | ShipFighterViper    ; AI Flags
  22++EF76 FF                                   DB $FF                                      ; chance of ECM module
  23++EF77 FF                                   DB $FF                                      ; Supports Solid Fill = false
  24++EF78 00 00                                DW $0000                                    ; no solid data
  25++EF7A 00                                   DB $00                                      ; no solid data
  26++EF7B              ;Need to do a debug cube and test that, even better a debug square only
  27++EF7B              ; a debug cube would be -160, 160, 160  to -160,160,-160    top left forward     to top left rear         TLF   $A0, $A0, $A0, $9F, $14, $50
  28++EF7B              ;                       -160, 160, 160  to -160,-160,160    top left forward     to bottom left forward   TLR   $A0, $A0, $A0, $BF, $45, $60
  29++EF7B              ;                       -160, 160,-160  to  160,160,-160    top left rear        to top right rear        BLF   $A0, $A0, $A0, $DF, $12, $40
  30++EF7B              ;                       -160, 160,-160  to -160,-160,-160   top left rear        to bottom left rear      TRR   $A0, $A0, $A0, $3F, $35, $60
  31++EF7B              ;                       -160,-160,-160  to -160,-160,-160   bottom left forward  to bottom left rear      BLR   $A0, $A0, $A0, $FF, $24, $60
  32++EF7B              ;                       -160, 160, 160  to  160, 160, 160   top left forward     to top right forward     TRF   $A0, $A0, $A0, $1F, $13, $60
  33++EF7B              ;                       -160,-160, 160  to  160,-160, 160   bottom left forward  to bottom right forward  BRF   $A0, $A0, $A0, $5F, $12, $30
  34++EF7B              ;                       -160,-160,-160  to  160,-160,-160   bottom left rear     to bottom right rear     BRR   $A0, $A0, $A0, $7F, $23, $50
  35++EF7B              ;                        160, 160, 160  to  160, 160,-160   top right forward    to top right rear
  36++EF7B              ;                        160,-160, 160  to  160,-160,-160   bottom right forward to bottom right rear
  37++EF7B              ;                        160, 160, 160  to  160,-160, 160   top right forward    to bottom right forward
  38++EF7B              ;                        160, 160,-160  to  160,-160,-160   top right rear       to bottom right rear
  39++EF7B              CoriolisVertices:	    ; DB $A0, $A0, $A0, $9F, $14, $50    ; TLF 1
  40++EF7B                                      ; DB $A0, $A0, $A0, $BF, $45, $60    ; TLR 2
  41++EF7B                                      ; DB $A0, $A0, $A0, $DF, $12, $40    ; BLF 3
  42++EF7B                                      ; DB $A0, $A0, $A0, $3F, $35, $60    ; TRR 4
  43++EF7B                                      ; DB $A0, $A0, $A0, $FF, $24, $60    ; BLR 5
  44++EF7B                                      ; DB $A0, $A0, $A0, $1F, $13, $60    ; TRF 6
  45++EF7B                                      ; DB $A0, $A0, $A0, $5F, $12, $30    ; BRF 7
  46++EF7B                                      ; DB $A0, $A0, $A0, $7F, $23, $50    ; BRR 8
  47++EF7B A0 00 A0 1F                           DB $A0, $00, $A0, $1F, $10, $62     ; 160,   0 , 160
  47++EF7F 10 62
  48++EF81 00 A0 A0 1F                           DB $00, $A0, $A0, $1F, $20, $83     ;   0, 160 , 160
  48++EF85 20 83
  49++EF87 A0 00 A0 9F                           DB $A0, $00, $A0, $9F, $30, $74     ;-160,   0 , 160
  49++EF8B 30 74
  50++EF8D 00 A0 A0 5F                           DB $00, $A0, $A0, $5F, $10, $54     ;   0,-160 , 160
  50++EF91 10 54
  51++EF93 A0 A0 00 5F                           DB $A0, $A0, $00, $5F, $51, $A6     ; 160,-160 ,   0
  51++EF97 51 A6
  52++EF99 A0 A0 00 1F                           DB $A0, $A0, $00, $1F, $62, $B8     ; 160, 160 ,   0
  52++EF9D 62 B8
  53++EF9F A0 A0 00 9F                           DB $A0, $A0, $00, $9F, $73, $C8     ;-160, 160 ,   0
  53++EFA3 73 C8
  54++EFA5 A0 A0 00 DF                           DB $A0, $A0, $00, $DF, $54, $97     ;-160,-160 ,   0
  54++EFA9 54 97
  55++EFAB A0 00 A0 3F                           DB $A0, $00, $A0, $3F, $A6, $DB     ; 160,   0 ,-160
  55++EFAF A6 DB
  56++EFB1 00 A0 A0 3F                           DB $00, $A0, $A0, $3F, $B8, $DC     ;   0, 160 ,-160
  56++EFB5 B8 DC
  57++EFB7 A0 00 A0 BF                           DB $A0, $00, $A0, $BF, $97, $DC     ;-160,   0 ,-160
  57++EFBB 97 DC
  58++EFBD 00 A0 A0 7F                           DB $00, $A0, $A0, $7F, $95, $DA     ;   0,-160 ,-160
  58++EFC1 95 DA
  59++EFC3 0A 1E A0 5E                           DB $0A, $1E, $A0, $5E, $00, $00     ; 160, -30 , 160
  59++EFC7 00 00
  60++EFC9 0A 1E A0 1E                           DB $0A, $1E, $A0, $1E, $00, $00     ; 160,  30 , 160
  60++EFCD 00 00
  61++EFCF 0A 1E A0 9E                           DB $0A, $1E, $A0, $9E, $00, $00     ;-160,  30 , 160
  61++EFD3 00 00
  62++EFD5 0A 1E A0 DE                          DB $0A, $1E, $A0, $DE, $00, $00     ;-160, -30 , 160
  62++EFD9 00 00
  63++EFDB              CoriolisVertSize:       equ $ - CoriolisVertices
  64++EFDB              CoriolisEdges:	        ; DB $1F, $46, $01, $02
  65++EFDB                                      ; DB $1F, $56, $02, $04
  66++EFDB                                      ; DB $1F, $36, $06, $04
  67++EFDB                                      ; DB $1F, $16, $01, $06
  68++EFDB                                      ; DB $1F, $14, $01, $03
  69++EFDB                                      ; DB $1F, $46, $02, $05
  70++EFDB                                      ; DB $1F, $35, $04, $08
  71++EFDB                                      ; DB $1F, $23, $06, $07
  72++EFDB                                      ; DB $1F, $24, $03, $05
  73++EFDB                                      ; DB $1F, $25, $05, $08
  74++EFDB                                      ; DB $1F, $23, $07, $08
  75++EFDB                                      ; DB $1F, $12, $03, $07
  76++EFDB
  77++EFDB 1F 10 00 0C                          DB $1F, $10, $00, $0C
  78++EFDF 1F 20 00 04                          DB $1F, $20, $00, $04
  79++EFE3 1F 30 04 08                          DB $1F, $30, $04, $08
  80++EFE7 1F 40 08 0C                          DB $1F, $40, $08, $0C
  81++EFEB 1F 51 0C 10                          DB $1F, $51, $0C, $10
  82++EFEF 1F 61 00 10                          DB $1F, $61, $00, $10
  83++EFF3 1F 62 00 14                          DB $1F, $62, $00, $14
  84++EFF7 1F 82 14 04                          DB $1F, $82, $14, $04
  85++EFFB 1F 83 04 18                          DB $1F, $83, $04, $18
  86++EFFF 1F 73 08 18                          DB $1F, $73, $08, $18
  87++F003 1F 74 08 1C                          DB $1F, $74, $08, $1C
  88++F007 1F 54 0C 1C                          DB $1F, $54, $0C, $1C
  89++F00B 1F DA 20 2C                          DB $1F, $DA, $20, $2C
  90++F00F 1F DB 20 24                          DB $1F, $DB, $20, $24
  91++F013 1F DC 24 28                          DB $1F, $DC, $24, $28
  92++F017 1F D9 28 2C                          DB $1F, $D9, $28, $2C
  93++F01B 1F A5 10 2C                          DB $1F, $A5, $10, $2C
  94++F01F 1F A6 10 20                          DB $1F, $A6, $10, $20
  95++F023 1F B6 14 20                          DB $1F, $B6, $14, $20
  96++F027 1F B8 14 24                          DB $1F, $B8, $14, $24
  97++F02B 1F C8 18 24                          DB $1F, $C8, $18, $24
  98++F02F 1F C7 18 28                          DB $1F, $C7, $18, $28
  99++F033 1F 97 1C 28                          DB $1F, $97, $1C, $28
 100++F037 1F 95 1C 2C                          DB $1F, $95, $1C, $2C
 101++F03B 1E 00 30 34                          DB $1E, $00, $30, $34
 102++F03F 1E 00 34 38                          DB $1E, $00, $34, $38
 103++F043 1E 00 38 3C                          DB $1E, $00, $38, $3C
 104++F047 1E 00 3C 30                          DB $1E, $00, $3C, $30
 105++F04B              CoriolisEdgesSize:      equ $ - CoriolisEdges
 106++F04B              CoriolisEdgesCnt:       equ CoriolisEdgesSize/4
 107++F04B              CoriolisNormals:	    ; DB $1F, $6B, $00, $00
 108++F04B                                      ; DB $5F, $00, $6B, $00
 109++F04B                                      ; DB $1F, $6B, $00, $00
 110++F04B                                      ; DB $9F, $6B, $00, $00
 111++F04B                                      ; DB $3F, $00, $00, $6B
 112++F04B                                      ; DB $1F, $00, $6B, $00
 113++F04B
 114++F04B 1F 00 00 A0                          DB $1F, $00, $00, $A0
 115++F04F 5F 6B 6B 6B                          DB $5F, $6B, $6B, $6B
 116++F053 1F 6B 6B 6B                          DB $1F, $6B, $6B, $6B
 117++F057 9F 6B 6B 6B                          DB $9F, $6B, $6B, $6B
 118++F05B DF 6B 6B 6B                          DB $DF, $6B, $6B, $6B
 119++F05F 5F 00 A0 00                          DB $5F, $00, $A0, $00
 120++F063 1F A0 00 00                          DB $1F, $A0, $00, $00
 121++F067 9F A0 00 00                          DB $9F, $A0, $00, $00
 122++F06B 1F 00 A0 00                          DB $1F, $00, $A0, $00
 123++F06F FF 6B 6B 6B                          DB $FF, $6B, $6B, $6B
 124++F073 7F 6B 6B 6B                          DB $7F, $6B, $6B, $6B
 125++F077 3F 6B 6B 6B                          DB $3F, $6B, $6B, $6B
 126++F07B BF 6B 6B 6B                          DB $BF, $6B, $6B, $6B
 127++F07F 3F 00 00 A0                          DB $3F, $00, $00, $A0
 128++F083              CoriolisNormalsSize:    equ $ - CoriolisNormals
 129++F083              CoriolisLen:            equ $ - Coriolis
 130++F083
# file closed: ./Data/ships/Coriolis.asm
 103+ F083                                      include "Data/ships/Cougar.asm"
# file opened: ./Data/ships/Cougar.asm
   1++F083 03           Cougar:	                DB $03                         ; Number of cargo canisters released when destroyed
   2++F084 24 13                                DW $1324                       ; Ship's targetable area LoHi
   3++F086 14 F1                                DW CougarEdges                 ; Edge Data
   4++F088 64                                   DB CougarEdgesSize             ; Size of Edge Data
   5++F089 00                                   DB $00                         ; Gun Vertex Byte offset
   6++F08A 2A                                   DB $2A                         ; Explosion Count
   7++F08B 13                                   DB CougarVertSize /6           ; Vertex Count /6
   8++F08C 72                                   DB CougarVertSize              ; Vertex Count
   9++F08D 19                                   DB CougarEdgesCnt              ; Edges Count
  10++F08E 00 00                                DW $0000                       ; Bounty LoHi
  11++F090 18                                   DB CougarNormalsSize           ; Face (Normal) Count
  12++F091 22                                   DB $22                         ; Range when it turns to a dot
  13++F092 FC                                   DB $FC                         ; Energy Max
  14++F093 28                                   DB $28                         ; Speed Max
  15++F094 78 F1                                DW CougarNormals               ; Normals
  16++F096 02                                   DB $02                         ; Q scaling
  17++F097 34                                   DB $30 | ShipMissiles4         ; Laser power and Nbr Missiles
  18++F098 A2 F0                                DW CougarVertices              ; Verticles Address
  19++F09A 00                                   DB ShipTypeNormal              ; Ship Type
  20++F09B 00                                   DB 0                           ; NewB Tactics
  21++F09C 80                                   DB ShipCanAnger                ; AI Flags
  22++F09D B0                                   DB $B0                         ; chance of ECM module
  23++F09E FF                                   DB $FF                              ; Supports Solid Fill = false
  24++F09F 00 00                                DW $0000                            ; no solid data
  25++F0A1 00                                   DB $00                              ; no solid data
  26++F0A2
  27++F0A2 00 05 43 1F  CougarVertices:	        DB $00, $05, $43, $1F, $02, $44
  27++F0A6 02 44
  28++F0A8 14 00 28 9F                          DB $14, $00, $28, $9F, $01, $22
  28++F0AC 01 22
  29++F0AE 28 00 28 BF                          DB $28, $00, $28, $BF, $01, $55
  29++F0B2 01 55
  30++F0B4 00 0E 28 3E                          DB $00, $0E, $28, $3E, $04, $55
  30++F0B8 04 55
  31++F0BA 00 0E 28 7E                          DB $00, $0E, $28, $7E, $12, $35
  31++F0BE 12 35
  32++F0C0 14 00 28 1F                          DB $14, $00, $28, $1F, $23, $44
  32++F0C4 23 44
  33++F0C6 28 00 28 3F                          DB $28, $00, $28, $3F, $34, $55
  33++F0CA 34 55
  34++F0CC 24 00 38 9F                          DB $24, $00, $38, $9F, $01, $11
  34++F0D0 01 11
  35++F0D2 3C 00 14 BF                          DB $3C, $00, $14, $BF, $01, $11
  35++F0D6 01 11
  36++F0D8 24 00 38 1F                          DB $24, $00, $38, $1F, $34, $44
  36++F0DC 34 44
  37++F0DE 3C 00 14 3F                          DB $3C, $00, $14, $3F, $34, $44
  37++F0E2 34 44
  38++F0E4 00 07 23 12                          DB $00, $07, $23, $12, $00, $44
  38++F0E8 00 44
  39++F0EA 00 08 19 14                          DB $00, $08, $19, $14, $00, $44
  39++F0EE 00 44
  40++F0F0 0C 02 2D 94                          DB $0C, $02, $2D, $94, $00, $00
  40++F0F4 00 00
  41++F0F6 0C 02 2D 14                          DB $0C, $02, $2D, $14, $44, $44
  41++F0FA 44 44
  42++F0FC 0A 06 28 B4                          DB $0A, $06, $28, $B4, $55, $55
  42++F100 55 55
  43++F102 0A 06 28 F4                          DB $0A, $06, $28, $F4, $55, $55
  43++F106 55 55
  44++F108 0A 06 28 74                          DB $0A, $06, $28, $74, $55, $55
  44++F10C 55 55
  45++F10E 0A 06 28 34                          DB $0A, $06, $28, $34, $55, $55
  45++F112 55 55
  46++F114              CougarVertSize:         equ $ - CougarVertices
  47++F114 1F 02 00 04  CougarEdges:	        DB $1F, $02, $00, $04
  48++F118 1F 01 04 1C                          DB $1F, $01, $04, $1C
  49++F11C 1F 01 1C 20                          DB $1F, $01, $1C, $20
  50++F120 1F 01 20 08                          DB $1F, $01, $20, $08
  51++F124 1E 05 08 0C                          DB $1E, $05, $08, $0C
  52++F128 1E 45 0C 18                          DB $1E, $45, $0C, $18
  53++F12C 1E 15 08 10                          DB $1E, $15, $08, $10
  54++F130 1E 35 10 18                          DB $1E, $35, $10, $18
  55++F134 1F 34 18 28                          DB $1F, $34, $18, $28
  56++F138 1F 34 28 24                          DB $1F, $34, $28, $24
  57++F13C 1F 34 24 14                          DB $1F, $34, $24, $14
  58++F140 1F 24 14 00                          DB $1F, $24, $14, $00
  59++F144 1B 04 00 0C                          DB $1B, $04, $00, $0C
  60++F148 1B 12 04 10                          DB $1B, $12, $04, $10
  61++F14C 1B 23 14 10                          DB $1B, $23, $14, $10
  62++F150 1A 01 04 08                          DB $1A, $01, $04, $08
  63++F154 1A 34 14 18                          DB $1A, $34, $14, $18
  64++F158 14 00 30 34                          DB $14, $00, $30, $34
  65++F15C 12 00 34 2C                          DB $12, $00, $34, $2C
  66++F160 12 44 2C 38                          DB $12, $44, $2C, $38
  67++F164 14 44 38 30                          DB $14, $44, $38, $30
  68++F168 12 55 3C 40                          DB $12, $55, $3C, $40
  69++F16C 14 55 40 48                          DB $14, $55, $40, $48
  70++F170 12 55 48 44                          DB $12, $55, $48, $44
  71++F174 14 55 44 3C                          DB $14, $55, $44, $3C
  72++F178              CougarEdgesSize:        equ $ - CougarEdges
  73++F178              CougarEdgesCnt:         equ CougarEdgesSize/4
  74++F178 9F 10 2E 04  CougarNormals:	        DB $9F, $10, $2E, $04
  75++F17C DF 10 2E 04                          DB $DF, $10, $2E, $04
  76++F180 5F 00 1B 05                          DB $5F, $00, $1B, $05
  77++F184 5F 10 2E 04                          DB $5F, $10, $2E, $04
  78++F188 1F 10 2E 04                          DB $1F, $10, $2E, $04
  79++F18C 3E 00 00 A0                          DB $3E, $00, $00, $A0
  80++F190              CougarNormalsSize:      equ $ - CougarNormals
  81++F190              CougarLen:              equ $ - Cougar
  82++F190
# file closed: ./Data/ships/Cougar.asm
 104+ F190                                      include "Data/ships/Dodo.asm"
# file opened: ./Data/ships/Dodo.asm
   1++F190 00           Dodo:	                DB $00                        ; Number of cargo canisters released when destroyed
   2++F191 90 7E                                DW $7E90                      ; Ship's targetable area LoHi
   3++F193 3F F2                                DW DodoEdges                  ; Edge Data
   4++F195 88                                   DB DodoEdgesSize              ; Size of Edge Data
   5++F196 00                                   DB $00                        ; Gun Vertex Byte offset
   6++F197 36                                   DB $36                        ; Explosion Count
   7++F198 18                                   DB DodoVertSize /6            ; Vertex Count /6
   8++F199 90                                   DB DodoVertSize               ; Vertex Count
   9++F19A 22                                   DB DodoEdgesCnt               ; Edges Count
  10++F19B 00 00                                DW $0000                      ; Bounty LoHi
  11++F19D 30                                   DB DodoNormalsSize            ; Face (Normal) Count
  12++F19E 7D                                   DB $7D                        ; Range when it turns to a dot
  13++F19F F0                                   DB $F0                        ; Energy Max
  14++F1A0 00                                   DB $00                        ; Speed Max
  15++F1A1 C7 F2                                DW DodoNormals                ; Normals
  16++F1A3 00                                   DB $00                        ; Q scaling
  17++F1A4 00                                   DB $00                        ; Laser power and Nbr Missiles
  18++F1A5 AF F1                                DW DodoVertices               ; Verticles Address
  19++F1A7 02                                   DB ShipTypeStation            ; Ship Type
  20++F1A8 00                                   DB 0                          ; NewB Tactics
  21++F1A9 00                                   DB 0                          ; AI Flags
  22++F1AA FF                                   DB $FF                        ; chance of ECM module
  23++F1AB FF                                   DB $FF                              ; Supports Solid Fill = false
  24++F1AC 00 00                                DW $0000                            ; no solid data
  25++F1AE 00                                   DB $00                              ; no solid data
  26++F1AF
  27++F1AF 00 96 C4 1F  DodoVertices:	        DB $00, $96, $C4, $1F, $01, $55
  27++F1B3 01 55
  28++F1B5 8F 2E C4 1F                          DB $8F, $2E, $C4, $1F, $01, $22
  28++F1B9 01 22
  29++F1BB 58 79 C4 5F                          DB $58, $79, $C4, $5F, $02, $33
  29++F1BF 02 33
  30++F1C1 58 79 C4 DF                          DB $58, $79, $C4, $DF, $03, $44
  30++F1C5 03 44
  31++F1C7 8F 2E C4 9F                          DB $8F, $2E, $C4, $9F, $04, $55
  31++F1CB 04 55
  32++F1CD 00 F3 2E 1F                          DB $00, $F3, $2E, $1F, $15, $66
  32++F1D1 15 66
  33++F1D3 E7 4B 2E 1F                          DB $E7, $4B, $2E, $1F, $12, $77
  33++F1D7 12 77
  34++F1D9 8F C4 2E 5F                          DB $8F, $C4, $2E, $5F, $23, $88
  34++F1DD 23 88
  35++F1DF 8F C4 2E DF                          DB $8F, $C4, $2E, $DF, $34, $99
  35++F1E3 34 99
  36++F1E5 E7 4B 2E 9F                          DB $E7, $4B, $2E, $9F, $45, $AA
  36++F1E9 45 AA
  37++F1EB 8F C4 2E 3F                          DB $8F, $C4, $2E, $3F, $16, $77
  37++F1EF 16 77
  38++F1F1 E7 4B 2E 7F                          DB $E7, $4B, $2E, $7F, $27, $88
  38++F1F5 27 88
  39++F1F7 00 F3 2E 7F                          DB $00, $F3, $2E, $7F, $38, $99
  39++F1FB 38 99
  40++F1FD E7 4B 2E FF                          DB $E7, $4B, $2E, $FF, $49, $AA
  40++F201 49 AA
  41++F203 8F C4 2E BF                          DB $8F, $C4, $2E, $BF, $56, $AA
  41++F207 56 AA
  42++F209 58 79 C4 3F                          DB $58, $79, $C4, $3F, $67, $BB
  42++F20D 67 BB
  43++F20F 8F 2E C4 7F                          DB $8F, $2E, $C4, $7F, $78, $BB
  43++F213 78 BB
  44++F215 00 96 C4 7F                          DB $00, $96, $C4, $7F, $89, $BB
  44++F219 89 BB
  45++F21B 8F 2E C4 FF                          DB $8F, $2E, $C4, $FF, $9A, $BB
  45++F21F 9A BB
  46++F221 58 79 C4 BF                          DB $58, $79, $C4, $BF, $6A, $BB
  46++F225 6A BB
  47++F227 10 20 C4 9E                          DB $10, $20, $C4, $9E, $00, $00
  47++F22B 00 00
  48++F22D 10 20 C4 DE                          DB $10, $20, $C4, $DE, $00, $00
  48++F231 00 00
  49++F233 10 20 C4 17                          DB $10, $20, $C4, $17, $00, $00
  49++F237 00 00
  50++F239 10 20 C4 57                          DB $10, $20, $C4, $57, $00, $00
  50++F23D 00 00
  51++F23F              DodoVertSize:           equ $ - DodoVertices
  52++F23F 1F 01 00 04  DodoEdges:	            DB $1F, $01, $00, $04
  53++F243 1F 02 04 08                          DB $1F, $02, $04, $08
  54++F247 1F 03 08 0C                          DB $1F, $03, $08, $0C
  55++F24B 1F 04 0C 10                          DB $1F, $04, $0C, $10
  56++F24F 1F 05 10 00                          DB $1F, $05, $10, $00
  57++F253 1F 16 14 28                          DB $1F, $16, $14, $28
  58++F257 1F 17 28 18                          DB $1F, $17, $28, $18
  59++F25B 1F 27 18 2C                          DB $1F, $27, $18, $2C
  60++F25F 1F 28 2C 1C                          DB $1F, $28, $2C, $1C
  61++F263 1F 38 1C 30                          DB $1F, $38, $1C, $30
  62++F267 1F 39 30 20                          DB $1F, $39, $30, $20
  63++F26B 1F 49 20 34                          DB $1F, $49, $20, $34
  64++F26F 1F 4A 34 24                          DB $1F, $4A, $34, $24
  65++F273 1F 5A 24 38                          DB $1F, $5A, $24, $38
  66++F277 1F 56 38 14                          DB $1F, $56, $38, $14
  67++F27B 1F 7B 3C 40                          DB $1F, $7B, $3C, $40
  68++F27F 1F 8B 40 44                          DB $1F, $8B, $40, $44
  69++F283 1F 9B 44 48                          DB $1F, $9B, $44, $48
  70++F287 1F AB 48 4C                          DB $1F, $AB, $48, $4C
  71++F28B 1F 6B 4C 3C                          DB $1F, $6B, $4C, $3C
  72++F28F 1F 15 00 14                          DB $1F, $15, $00, $14
  73++F293 1F 12 04 18                          DB $1F, $12, $04, $18
  74++F297 1F 23 08 1C                          DB $1F, $23, $08, $1C
  75++F29B 1F 34 0C 20                          DB $1F, $34, $0C, $20
  76++F29F 1F 45 10 24                          DB $1F, $45, $10, $24
  77++F2A3 1F 67 28 3C                          DB $1F, $67, $28, $3C
  78++F2A7 1F 78 2C 40                          DB $1F, $78, $2C, $40
  79++F2AB 1F 89 30 44                          DB $1F, $89, $30, $44
  80++F2AF 1F 9A 34 48                          DB $1F, $9A, $34, $48
  81++F2B3 1F 6A 38 4C                          DB $1F, $6A, $38, $4C
  82++F2B7 1E 00 50 54                          DB $1E, $00, $50, $54
  83++F2BB 14 00 54 5C                          DB $14, $00, $54, $5C
  84++F2BF 17 00 5C 58                          DB $17, $00, $5C, $58
  85++F2C3 14 00 58 50                          DB $14, $00, $58, $50
  86++F2C7              DodoEdgesSize:          equ $ - DodoEdges
  87++F2C7              DodoEdgesCnt:           equ DodoEdgesSize/4
  88++F2C7 1F 00 00 C4  DodoNormals:	        DB $1F, $00, $00, $C4
  89++F2CB 1F 67 8E 58                          DB $1F, $67, $8E, $58
  90++F2CF 5F A9 37 59                          DB $5F, $A9, $37, $59
  91++F2D3 5F 00 B0 58                          DB $5F, $00, $B0, $58
  92++F2D7 DF A9 37 59                          DB $DF, $A9, $37, $59
  93++F2DB 9F 67 8E 58                          DB $9F, $67, $8E, $58
  94++F2DF 3F 00 B0 58                          DB $3F, $00, $B0, $58
  95++F2E3 3F A9 37 59                          DB $3F, $A9, $37, $59
  96++F2E7 7F 67 8E 58                          DB $7F, $67, $8E, $58
  97++F2EB FF 67 8E 58                          DB $FF, $67, $8E, $58
  98++F2EF BF A9 37 59                          DB $BF, $A9, $37, $59
  99++F2F3 3F 00 00 C4                          DB $3F, $00, $00, $C4
 100++F2F7              DodoNormalsSize:        equ $ - DodoNormals
 101++F2F7              DodoLen:                equ $ - Dodo
 102++F2F7
# file closed: ./Data/ships/Dodo.asm
# file closed: ./Data/ShipModelMetaData1.asm
 911  F2F7                  DISPLAY "Bank ",BankShipModels1," - Bytes free ",/D, $2000 - ($-ShipModelsAddr), " - BankShipModels1"
 912  F2F7              ; Bank 66  ------------------------------------------------------------------------------------------------------------------------
 913  F2F7                  SLOT    DispMarketAddr
 914  F2F7                  PAGE    BankDispMarket
 915  F2F7                  ORG     DispMarketAddr
 916  C000                  INCLUDE "./Menus/market_prices_disp.asm"
# file opened: ./Menus/market_prices_disp.asm
   1+ C000 4D 61 72 6B  mktdisp_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 B0 8E  mktdisp_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 7C 8F  						DW $0220,name_expanded
   4+ C018 80 0B FE 88  						DW $0B80,WordUnit
   5+ C01C B0 0B 47 8B  						DW $0BB0,WordQuantity
   6+ C020 08 13 25 8B  						DW $1308,WordProduct
   7+ C024 60 13 2D 8B  						DW $1360,WordUoM
   8+ C028 80 13 31 8B  						DW $1380,WordPrice
   9+ C02C B0 13 55 8B  						DW $13B0,WordStock
  10+ C030 E0 13 51 8B  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_mktdisp_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_mktdisp_quantity    DB "999",0
  24+ C03D 39 39 39 00  txt_mktdisp_cargo       DB "999",0
  25+ C041 00 00        mktdisp_cursor			DW  $0000
  26+ C043              mktdisp_position		equ $2008
  27+ C043              mktdisp_uom				equ	$68
  28+ C043              mktdisp_price 			equ $88
  29+ C043              mktdisp_Quantity		equ	$B0
  30+ C043              mktdisp_Cargo           equ $E0
  31+ C043              mktdisp_UomOffset		equ 46
  32+ C043 20 20 20 20  mktdisp_blank_line      DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mktdisp_hold_level      DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mktdisp_cash			DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mktdisp_selected_row    db  0
  36+ C075
  37+ C075              mktdisp_cash_position   equ $B048
  38+ C075 00 00 00...  mktdisp_cash_amount		DS 20
  39+ C089 20 43 72 20  mktdisp_cash_UoM        DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mktdisp_cargo_position  equ $A848
  41+ C094 00 00 00...  mktdisp_cargo_amount	DS 20
  42+ C0A8 20 54 6F 6E  mktdisp_cargo_UoM       DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3 CD CA C0     mktdisp_DispDEIXtoIY1DP:    call    mktdisp_DispDEIXtoIY
  46+ C0B6 FD 36 02 00                          ld (iy+2),0
  47+ C0BA FD 7E 00                             ld      a,(IY+0)
  48+ C0BD FD 77 01                             ld      (IY+1),a
  49+ C0C0 3E 2E                                ld      a,"."
  50+ C0C2 FD 77 00                             ld      (IY+0),a
  51+ C0C5 FD 23                                inc     IY
  52+ C0C7 FD 23                                inc     IY
  53+ C0C9 C9                                   ret
  54+ C0CA              ;----------------------------------------------------------------------------------------------------------------------------------
  55+ C0CA DD 22 5F C1  mktdisp_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  56+ C0CE ED 53 61 C1                          ld (.MKTclcn32zIX),de
  57+ C0D2 DD 21 5B C1                          ld ix,.MKTclcn32t+36
  58+ C0D6 06 09                                ld b,9
  59+ C0D8 0E 00                                ld c,0
  60+ C0DA 3E 30        .MKTclcn321:            ld a,'0'
  61+ C0DC B7                                   or a
  62+ C0DD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  63+ C0E0 DD 56 01                             ld d,(ix+1)
  64+ C0E3 2A 5F C1                             ld hl,(.MKTclcn32z)
  65+ C0E6 ED 52                                sbc hl,de
  66+ C0E8 22 5F C1                             ld (.MKTclcn32z),hl
  67+ C0EB DD 5E 02                             ld e,(ix+2)
  68+ C0EE DD 56 03                             ld d,(ix+3)
  69+ C0F1 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  70+ C0F4 ED 52                                sbc hl,de
  71+ C0F6 22 61 C1                             ld (.MKTclcn32zIX),hl
  72+ C0F9 38 04                                jr c,.MKTclcn325
  73+ C0FB 0C                                   inc c
  74+ C0FC 3C                                   inc a
  75+ C0FD 18 DE                                jr .MKTclcn322
  76+ C0FF DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  77+ C102 DD 56 01                             ld d,(ix+1)
  78+ C105 2A 5F C1                             ld hl,(.MKTclcn32z)
  79+ C108 19                                   add hl,de
  80+ C109 22 5F C1                             ld (.MKTclcn32z),hl
  81+ C10C DD 5E 02                             ld e,(ix+2)
  82+ C10F DD 56 03                             ld d,(ix+3)
  83+ C112 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  84+ C115 ED 5A                                adc hl,de
  85+ C117 22 61 C1                             ld (.MKTclcn32zIX),hl
  86+ C11A 11 FC FF                             ld de,-4
  87+ C11D DD 19                                add ix,de
  88+ C11F 0C                                   inc c
  89+ C120 0D                                   dec c
  90+ C121 28 05                                jr z,.MKTclcn323
  91+ C123 FD 77 00                             ld (iy+0),a
  92+ C126 FD 23                                inc iy
  93+ C128 10 B0        .MKTclcn323:            djnz .MKTclcn321
  94+ C12A 3A 5F C1                             ld a,(.MKTclcn32z)
  95+ C12D C6 30                                add A,'0'
  96+ C12F FD 77 00                             ld (iy+0),a
  97+ C132 FD 36 01 00                          ld (iy+1),0
  98+ C136 C9                                   ret
  99+ C137 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  99+ C13B 0A 00 00 00
  99+ C13F 64 00 00 00
  99+ C143 E8 03 00 00
  99+ C147 10 27 00 00
 100+ C14B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 100+ C14F 40 42 0F 00
 100+ C153 80 96 98 00
 100+ C157 00 E1 F5 05
 100+ C15B 00 CA 9A 3B
 101+ C15F 00 00        .MKTclcn32z             ds 2
 102+ C161 00 00        .MKTclcn32zIX           ds 2
 103+ C163              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C163              ; "DispHL, writes HL to DE address"
 105+ C163 01 F0 D8     MPD_DispHLtoDE:         ld	bc,-10000
 106+ C166 CD 7C C1                             call	MPD_Num1
 107+ C169 01 18 FC                             ld	bc,-1000
 108+ C16C CD 7C C1                             call	MPD_Num1
 109+ C16F 01 9C FF                             ld	bc,-100
 110+ C172 CD 7C C1                             call	MPD_Num1
 111+ C175 0E F6                                ld	c,-10
 112+ C177 CD 7C C1                             call	MPD_Num1
 113+ C17A 0E FF                                ld	c,-1
 114+ C17C 3E 2F        MPD_Num1:	            ld	a,'0'-1
 115+ C17E 3C           .Num2:	                inc	a
 116+ C17F 09                                   add	hl,bc
 117+ C180 38 FC                                jr	c,.Num2
 118+ C182 ED 42                                sbc	hl,bc
 119+ C184 12                                   ld	(de),a
 120+ C185 13                                   inc	de
 121+ C186 C9                                   ret
 122+ C187              ;----------------------------------------------------------------------------------------------------------------------------------
 123+ C187 26 00        MPD_DispAtoDE:          ld h,0
 124+ C189 6F                                   ld l,a
 125+ C18A C3 63 C1                             jp MPD_DispHLtoDE
 126+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 127+ C18D 26 00        MPD_DispPriceAtoDE:     ld h,0
 128+ C18F 6F                                   ld l,a
 129+ C190 01 9C FF                             ld	bc,-100
 130+ C193 CD A3 C1                             call	.NumLeadBlank1
 131+ C196 0E F6                                ld	c,-10
 132+ C198 CD 7C C1                             call	MPD_Num1
 133+ C19B 3E 2E                                ld		a,'.'					; we could assume preformat but
 134+ C19D                                                  DISPLAY "TODO: optimse"
 135+ C19D 12                                   ld		(de),a					; we can optimse that later TODO
 136+ C19E 13                                   inc		de						; with just an inc De
 137+ C19F 0E FF                                ld	c,-1
 138+ C1A1 18 D9                                jr		MPD_Num1
 139+ C1A3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 140+ C1A5 3C           .NumLeadBlank2:	        inc	a
 141+ C1A6 09                                   add	hl,bc
 142+ C1A7 38 FC                                jr	c,.NumLeadBlank2
 143+ C1A9 FE 30                                cp	'0'
 144+ C1AB 20 02                                jr	nz,.DontBlank
 145+ C1AD 3E 20        .Blank:                 ld	a,' '
 146+ C1AF ED 42        .DontBlank:	            sbc	hl,bc
 147+ C1B1 12                                   ld	(de),a
 148+ C1B2 13                                   inc	de
 149+ C1B3 C9                                   ret
 150+ C1B4              ;----------------------------------------------------------------------------------------------------------------------------------
 151+ C1B4 FE 00        MPD_DispQtyAtoDE:       cp	0
 152+ C1B6 28 30                                jr	z,.NoStock
 153+ C1B8 26 00                                ld h,0
 154+ C1BA 6F                                   ld l,a
 155+ C1BB 01 9C FF                             ld	bc,-100
 156+ C1BE CD D7 C1                             call	.NumLeadBlank1
 157+ C1C1 FE 20        .WasLead0:              cp      ' '
 158+ C1C3 20 09                                jr      nz,.NotHundredsZero
 159+ C1C5 0E F6                                ld	c,-10
 160+ C1C7 CD D7 C1                             call	.NumLeadBlank1
 161+ C1CA 0E FF                                ld	c,-1
 162+ C1CC 18 AE                                jr		MPD_Num1
 163+ C1CE 0E F6        .NotHundredsZero:       ld	c,-10
 164+ C1D0 CD 7C C1                             call	MPD_Num1
 165+ C1D3 0E FF                                ld	c,-1
 166+ C1D5 18 A5                                jr		MPD_Num1
 167+ C1D7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 168+ C1D9 3C           .NumLeadBlank2:	        inc	a
 169+ C1DA 09                                   add	hl,bc
 170+ C1DB 38 FC                                jr	c,.NumLeadBlank2
 171+ C1DD FE 30                                cp	'0'
 172+ C1DF 20 02                                jr	nz,.DontBlank
 173+ C1E1 3E 20        .Blank:                 ld	a,' '
 174+ C1E3 ED 42        .DontBlank:	            sbc	hl,bc
 175+ C1E5 12                                   ld	(de),a
 176+ C1E6 13                                   inc	de
 177+ C1E7 C9                                   ret
 178+ C1E8 3E 20        .NoStock:               ld	a,' '
 179+ C1EA 12                                   ld	(de),a
 180+ C1EB 13                                   inc	de
 181+ C1EC 12                                   ld	(de),a
 182+ C1ED 13                                   inc	de
 183+ C1EE 3E 2D                                ld	a,'-'
 184+ C1F0 12                                   ld	(de),a
 185+ C1F1 13                                   inc de
 186+ C1F2 C9                                   ret
 187+ C1F3              ;----------------------------------------------------------------------------------------------------------------------------------
 188+ C1F3              MPD_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C1F3
   2++C1F3              ;">print_boilder_text hl = text structure, b = message count"
   3++C1F3 C5           .BoilerTextLoop:        push		bc			; Save Message Count loop value
   4++C1F4 4E                                   ld			c,(hl)		; Get Row into b
   5++C1F5 23                                   inc			hl
   6++C1F6 46                                   ld			b,(hl)		; Get Col into b
   7++C1F7 23                                   inc			hl
   8++C1F8 5E                                   ld			e,(hl)		; Get text address Lo into E
   9++C1F9 23                                   inc			hl
  10++C1FA 56                                   ld			d,(hl)		; Get text address Hi into E
  11++C1FB 23                                   inc			hl
  12++C1FC E5                                   push		hl			; Save present HL to stack as this is the address for the next message
  13++C1FD EB                                   ex			de,hl		; now hl = address of text data
  14++C1FE 1E FF                                ld			e,txt_status_colour
  15++C200 C5                                   push		bc
  16++C201 D1                                   pop			de
  17++C202                                      MMUSelectLayer1
  17++C202 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  18++C206 CD D7 E0                             call		l1_print_at
  19++C209 E1                                   pop			hl
  20++C20A C1                                   pop			bc
  21++C20B 10 E6                                djnz		.BoilerTextLoop
  22++C20D C9                                   ret
  23++C20E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 189+ C20E              ;----------------------------------------------------------------------------------------------------------------------------------
 190+ C20E 2A D1 84     mktdisp_GetCash:            ld		hl,(Cash+2)
 191+ C211 EB                                   ex      de,hl
 192+ C212 DD 2A CF 84                          ld      ix,(Cash)
 193+ C216 FD 21 75 C0                          ld		iy,mktdisp_cash_amount
 194+ C21A CD B3 C0                             call 	mktdisp_DispDEIXtoIY1DP
 195+ C21D FD E5                                push    IY
 196+ C21F D1                                   pop     de
 197+ C220 21 89 C0                             ld      hl,mktdisp_cash_UoM
 198+ C223 01 0B 00                             ld      bc,11
 199+ C226 ED B0                                ldir
 200+ C228 C9                                   ret
 201+ C229              ;----------------------------------------------------------------------------------------------------------------------------------
 202+ C229 11 00 00     mktdisp_GetCargo:   	ld      de,0
 203+ C22C DD 21 00 00                          ld      ix,0
 204+ C230 3A D5 84                             ld      a,(CargoRunningLoad)
 205+ C233 DD 6F                                ld      ixl,a
 206+ C235 FD 21 94 C0                          ld		iy,mktdisp_cargo_amount
 207+ C239 CD CA C0                             call 	mktdisp_DispDEIXtoIY
 208+ C23C FD E5                                push    IY
 209+ C23E D1                                   pop     de
 210+ C23F 13                                   inc     de
 211+ C240 21 A8 C0                             ld      hl,mktdisp_cargo_UoM
 212+ C243 01 0B 00                             ld      bc,11
 213+ C246 ED B0                                ldir
 214+ C248 C9                                   ret
 215+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 216+ C249 CD 29 C2     mktdisp_DisplayCargo:   call	mktdisp_GetCargo
 217+ C24C 21 94 C0                             ld		hl,mktdisp_cargo_amount
 218+ C24F 11 48 A8                             ld      de,mktdisp_cargo_position
 219+ C252                                      MMUSelectLayer1
 219+ C252 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 220+ C256 CD D7 E0                             call	l1_print_at
 221+ C259 C9                                   ret
 222+ C25A              ;----------------------------------------------------------------------------------------------------------------------------------
 223+ C25A CD 0E C2     mktdisp_DisplayCash:        call	mktdisp_GetCash
 224+ C25D 21 75 C0                             ld		hl,mktdisp_cash_amount
 225+ C260 11 48 B0                             ld      de,mktdisp_cash_position
 226+ C263                                      MMUSelectLayer1
 226+ C263 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 227+ C267 CD D7 E0                             call	l1_print_at
 228+ C26A C9                                   ret
 229+ C26B              ;----------------------------------------------------------------------------------------------------------------------------------
 230+ C26B              ; "A = stock item number"
 231+ C26B F5           PrintMktDispItem:       push     af
 232+ C26C 21 08 20                             ld      hl,mktdisp_position
 233+ C26F 57                                   ld      d,a
 234+ C270 1E 08                                ld      e,8
 235+ C272 ED 30                                mul
 236+ C274 53                                   ld      d,e
 237+ C275 1E 00                                ld      e,0
 238+ C277 19                                   add     hl,de
 239+ C278 22 41 C0                             ld      (mktdisp_cursor),hl
 240+ C27B EB                                   ex      hl,de
 241+ C27C 21 43 C0                             ld      hl,mktdisp_blank_line
 242+ C27F                                      MMUSelectLayer1
 242+ C27F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 243+ C283 CD D7 E0                             call	l1_print_at
 244+ C286 F1                                   pop     af
 245+ C287 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 246+ C28B FD 21 D6 84                          ld      iy,CargoTonnes
 247+ C28F 1E 08                                ld		e,8
 248+ C291 57                                   ld		d,a
 249+ C292 ED 30                                mul
 250+ C294 DD 19                                add		ix,de				; Move down a row ix += a * 8
 251+ C296 16 00                                ld      d,0
 252+ C298 5F                                   ld      e,a
 253+ C299 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 254+ C29B              .GetName:               MMUSelectStockTable
 254+ C29B ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 255+ C29F DD 7E 00                             ld		a,(ix+0)
 256+ C2A2 21 FC 8C                             ld		hl,WordIdx
 257+ C2A5 CD 57 88                             call	getTableText
 258+ C2A8 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 259+ C2AC                                      MMUSelectLayer1
 259+ C2AC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 260+ C2B0 CD D7 E0                             call	l1_print_at
 261+ C2B3              .GetUom                 MMUSelectStockTable
 261+ C2B3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 262+ C2B7 DD 7E 07                             ld		a,(ix+7)
 263+ C2BA C6 2E                                add		a,mktdisp_UomOffset
 264+ C2BC 21 FC 8C                             ld		hl,WordIdx
 265+ C2BF CD 57 88                             call	getTableText
 266+ C2C2 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 267+ C2C6 1E 68                                ld		e,mktdisp_uom
 268+ C2C8                                      MMUSelectLayer1
 268+ C2C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 269+ C2CC CD D7 E0                             call	l1_print_at
 270+ C2CF              .GetPrice:              MMUSelectStockTable
 270+ C2CF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 271+ C2D3 DD 7E 02                             ld		a,(ix+2)
 272+ C2D6 11 34 C0                             ld		de,txt_mktdisp_amount
 273+ C2D9 CD 8D C1                             call	MPD_DispPriceAtoDE
 274+ C2DC 21 34 C0                             ld		hl,txt_mktdisp_amount
 275+ C2DF ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 276+ C2E3 1E 88                                ld		e,mktdisp_price
 277+ C2E5                                      MMUSelectLayer1
 277+ C2E5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 278+ C2E9 CD D7 E0                             call	l1_print_at
 279+ C2EC              .GetQty:                MMUSelectStockTable
 279+ C2EC ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 280+ C2F0 DD 7E 01                             ld		a,(ix+1)
 281+ C2F3 11 39 C0                             ld		de,txt_mktdisp_quantity
 282+ C2F6 CD B4 C1                             call	MPD_DispQtyAtoDE
 283+ C2F9 21 39 C0                             ld		hl,txt_mktdisp_quantity
 284+ C2FC ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 285+ C300 1E B0                                ld		e,mktdisp_Quantity
 286+ C302                                      MMUSelectLayer1
 286+ C302 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 287+ C306 CD D7 E0                             call	l1_print_at
 288+ C309 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 289+ C30C 11 3D C0                             ld      de,txt_mktdisp_cargo
 290+ C30F CD B4 C1                             call	MPD_DispQtyAtoDE
 291+ C312 21 3D C0                             ld      hl,txt_mktdisp_cargo
 292+ C315 ED 5B 41 C0                          ld      de,(mktdisp_cursor)
 293+ C319 1E E0                                ld      e,mktdisp_Cargo
 294+ C31B                                      MMUSelectLayer1
 294+ C31B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 295+ C31F CD D7 E0                             call	l1_print_at
 296+ C322 C9                                   ret
 297+ C323
 298+ C323              draw_mktdisp_prices_menu:InitNoDoubleBuffer
 298+ C323             >                            MMUSelectLayer1
 298+ C323 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 298+ C327 CD 8F E0    >                            call	l1_cls
 298+ C32A 3E 07       >                            ld		a,7
 298+ C32C CD AA E0    >                            call	l1_attr_cls_to_a
 298+ C32F             >                            MMUSelectLayer2
 298+ C32F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 298+ C333 CD 0A E0    >                            call    asm_l2_double_buffer_off
 298+ C336 CD 0E E2    >                            call	l2_cls	; Get some space
 298+ C339             >                            MMUSelectSpriteBank
 298+ C339 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 298+ C33D CD 6E E5    >                            call    sprite_cls_cursors
 299+ C340 3E 20                                ld      a,$20
 300+ C342 32 7E 7F                             ld      (MenuIdMax),a
 301+ C345 01 01 01     .Drawbox:               ld		bc,$0101
 302+ C348 11 FD BE                             ld		de,$BEFD
 303+ C34B 3E C0                                ld		a,$C0
 304+ C34D                                      MMUSelectLayer2
 304+ C34D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 305+ C351 CD F9 E3                             call	l2_draw_box
 306+ C354 01 01 0A                             ld		bc,$0A01
 307+ C357 11 C0 FE                             ld		de,$FEC0
 308+ C35A CD 84 E4                             call	l2_draw_horz_line
 309+ C35D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 310+ C360 11 C0 50                             ld		de,$50C0
 311+ C363 CD 84 E4                             call	l2_draw_horz_line
 312+ C366 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 313+ C369 11 C0 18                             ld		de,$18C0
 314+ C36C CD 84 E4                             call	l2_draw_horz_line
 315+ C36F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 316+ C372 11 C0 28                             ld		de,$28C0
 317+ C375 CD 84 E4                             call	l2_draw_horz_line
 318+ C378 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 319+ C37B 11 C0 28                             ld		de,$28C0
 320+ C37E CD 84 E4                             call	l2_draw_horz_line
 321+ C381 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 322+ C384 11 C0 18                             ld		de,$18C0
 323+ C387 CD 84 E4                             call	l2_draw_horz_line
 324+ C38A 3A 00 80     .StaticText:	        ld      a,(Galaxy)
 325+ C38D                                      MMUSelectGalaxyA
 325+ C38D ED 92 57    >                     nextreg GalaxyDataMMU,     a
 326+ C390 3E 19                                ld		a,25
 327+ C392 CD F7 8E                             call	expandTokenToString
 328+ C395 CD 7A F6                             call	GetDigramGalaxySeed
 329+ C398 06 09                                ld		b,9
 330+ C39A 21 10 C0                             ld		hl,mktdisp_boiler_text
 331+ C39D CD F3 C1                             call	MPD_print_boiler_text
 332+ C3A0 3E 00        .DisplayPrices:         ld		a,0
 333+ C3A2 21 08 20                             ld		hl,mktdisp_position
 334+ C3A5 22 41 C0                             ld		(mktdisp_cursor),hl
 335+ C3A8 F5           .MarketLoop:	        push	af
 336+ C3A9 CD 6B C2                             call	PrintMktDispItem
 337+ C3AC F1                                   pop		af
 338+ C3AD 3C                                   inc		a
 339+ C3AE FE 11                                cp		17
 340+ C3B0 20 F6                                jr		nz,.MarketLoop
 341+ C3B2 21 64 C0     .DisCargo:              ld      hl,mktdisp_hold_level
 342+ C3B5 11 10 A8                             ld      de,$A810
 343+ C3B8                                      MMUSelectLayer1
 343+ C3B8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 344+ C3BC CD D7 E0                             call	l1_print_at
 345+ C3BF CD 49 C2                             call    mktdisp_DisplayCargo
 346+ C3C2 21 6C C0     .DisCash:               ld      hl,mktdisp_cash
 347+ C3C5 11 10 B0                             ld      de,$B010
 348+ C3C8                                      MMUSelectLayer1
 348+ C3C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 349+ C3CC CD D7 E0                             call	l1_print_at
 350+ C3CF CD 5A C2                             call    mktdisp_DisplayCash
 351+ C3D2 C9                                   ret
 352+ C3D3
 353+ C3D3
# file closed: ./Menus/market_prices_disp.asm
 917  C3D3                  DISPLAY "Bank ",BankDispMarket," - Bytes free ",/D, $2000 - ($-MenuShrChtAddr), " - BankDispMarket"
 918  C3D3              ; Bank 67  ------------------------------------------------------------------------------------------------------------------------
 919  C3D3                  SLOT    ShipModelsAddr
 920  C3D3                  PAGE    BankShipModels2
 921  C3D3              	ORG     ShipModelsAddr, BankShipModels2
 922  E000
 923  E000                  INCLUDE "./Data/ShipBank2Label.asm"
# file opened: ./Data/ShipBank2Label.asm
   1+ E000 53 68 69 70  ShipBank2Label:         DB  "ShipBank2      "
   1+ E004 42 61 6E 6B
   1+ E008 32 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank2Label.asm
 924  E00F              GetShipBank2Id:         MGetShipBankId ShipBankTable2
 924  E00F 06 00       >                        ld      b,0
 924  E011 4F          >                        ld      c,a                                 ; c= original ship id
 924  E012 CB 3F       >.ShiftLoop:             srl     a
 924  E014 CB 3F       >                        srl     a
 924  E016 CB 3F       >                        srl     a
 924  E018 CB 3F       >                        srl     a                                   ; divide by 16
 924  E01A 47          >                        ld      b,a                                 ; b = bank nbr
 924  E01B 79          >                        ld      a,c
 924  E01C 50          >                        ld      d,b
 924  E01D 1E 10       >                        ld      e,16
 924  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
 924  E021 93          >                        sub     e                                   ; a= actual model id now
 924  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
 924  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
 924  E024 7A          >                        ld      a,d                                 ; a = bank number
 924  E025             >;.. Now b = bank and a = adjusted ship nbr
 924  E025 21 62 E0    >                        ld      hl,ShipBankTable2                        ; a= bank index
 924  E028 ED 31       >                        add     hl,a
 924  E02A ED 31       >                        add     hl,a
 924  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
 924  E02D             >                        ClearCarryFlag
 924  E02D B7          >                        or a
 924  E02E C9          >                        ret
 925  E02F              CopyVertsToUniv2:       McopyVertsToUniverse
 925  E02F 2A 0C C4    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in UBnk its easy to read
 925  E032 11 12 C4    >                        ld          de,UBnkHullVerticies
 925  E035 06 00       >                        ld          b,0
 925  E037 3A 00 C4    >                        ld			a,(VertexCtX6Addr)
 925  E03A 4F          >                        ld          c,a
 925  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 925  E03C CD 2A 7E    >                        call        memcopy_dma
 925  E03F C9          >                        ret
 926  E040              CopyEdgesToUniv2:       McopyEdgesToUniverse
 926  E040 2A FA C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in UBnk its easy to read
 926  E043 11 02 C5    >                        ld          de,UBnkHullEdges
 926  E046 06 00       >                        ld          b,0
 926  E048 3A FC C3    >                        ld			a,(LineX4Addr)
 926  E04B 4F          >                        ld          c,a
 926  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 926  E04D CD 2A 7E    >                        call        memcopy_dma
 926  E050 C9          >                        ret
 927  E051              CopyNormsToUniv2:       McopyNormsToUniverse
 927  E051 2A 08 C4    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in UBnk its easy to read
 927  E054 11 CA C5    >                        ld          de,UBnkHullNormals
 927  E057 06 00       >                        ld          b,0
 927  E059 3A 04 C4    >                        ld          a,(FaceCtX4Addr)
 927  E05C 4F          >                        ld          c,a
 927  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 927  E05E CD 2A 7E    >                        call        memcopy_dma
 927  E061 C9          >                        ret
 928  E062              ShipBankTable2:         MShipBankTable
 928  E062 3B 00       >                        DW      BankShipModels1
 928  E064 43 00       >                        DW      BankShipModels2
 928  E066 44 00       >                        DW      BankShipModels3
 928  E068 45 00       >                        DW      BankShipModels4
 929  E06A              CopyShipToUniverse2     MCopyShipToUniverse     BankShipModels2
 929  E06A 21 41 C0    >                        ld          hl,UBnkShipModelBank
 929  E06D 36 43       >                        ld          (hl),BankShipModels2
 929  E06F F5          >                        push        af
 929  E070 FD 7D       >                        ld          a,iyl
 929  E072 32 43 C0    >                        ld          (UBnkShipModelId),a
 929  E075 F1          >                        pop         af
 929  E076 32 42 C0    >                        ld          (UBnkShipModelNbr),a
 929  E079 21 57 E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
 929  E07C ED 31       >                        add         hl,a
 929  E07E ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
 929  E080 4E          >                        ld          c,(hl)
 929  E081 23          >                        inc         hl
 929  E082 46          >                        ld          b,(hl)                      ; bc now equals length of data set
 929  E083 21 D7 E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
 929  E086 ED 31       >                        add         hl,a
 929  E088 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
 929  E08A 7E          >                        ld          a,(hl)
 929  E08B 23          >                        inc         hl
 929  E08C 66          >                        ld          h,(hl)
 929  E08D 6F          >                        ld          l,a                         ; now hl = address of ship hull data
 929  E08E 11 F7 C3    >                        ld          de,UBnkHullCopy             ; Universe bank
 929  E091 01 1B 00    >                        ld          bc,ShipDataLength
 929  E094 ED B0       >                        ldir
 929  E096 CD 2F E0    >                        call        CopyVertsToUniv
 929  E099 CD 40 E0    >                        call        CopyEdgesToUniv
 929  E09C CD 51 E0    >                        call        CopyNormsToUniv
 929  E09F 21 10 C0    >.ClearName:             ld          hl,StartOfUnivName
 929  E0A2 3E 20       >                        ld          a," "
 929  E0A4 06 10       >                        ld          b,16
 929  E0A6 77          >.fillLoop:              ld          (hl),a
 929  E0A7 23          >                        inc         hl
 929  E0A8 10 FC       >                        djnz        .fillLoop
 929  E0AA 3A 43 C0    >.SetName:               ld          a,(UBnkShipModelId)
 929  E0AD CD E3 8E    >                        call        ShipIndexToAddress
 929  E0B0 11 10 C0    >                        ld          de,StartOfUnivName
 929  E0B3 06 10       >                        ld          b,16
 929  E0B5 7E          >.CopyLoop:              ld          a,(hl)
 929  E0B6 FE 00       >                        cp          0
 929  E0B8 28 05       >                        jr          z,.CopyDone
 929  E0BA 12          >                        ld          (de),a
 929  E0BB 23          >                        inc         hl
 929  E0BC 13          >                        inc         de
 929  E0BD 10 F6       >                        djnz        .CopyLoop
 929  E0BF C9          >.CopyDone:              ret
 930  E0C0              CopyBodyToUniverse2:    MCopyBodyToUniverse     CopyShipToUniverse2
 930  E0C0 3E 0D       >                        ld          a,13
 930  E0C2 CD 6A E0    >                        call        CopyShipToUniverse2
 930  E0C5 C9          >                        ret
 931  E0C6              CopyVertsToUniverse2:    McopyVertsToUniverse
 931  E0C6 2A 0C C4    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in UBnk its easy to read
 931  E0C9 11 12 C4    >                        ld          de,UBnkHullVerticies
 931  E0CC 06 00       >                        ld          b,0
 931  E0CE 3A 00 C4    >                        ld			a,(VertexCtX6Addr)
 931  E0D1 4F          >                        ld          c,a
 931  E0D2 EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 931  E0D3 CD 2A 7E    >                        call        memcopy_dma
 931  E0D6 C9          >                        ret
 932  E0D7                  IFDEF SPACESTATIONUNIQUECODE
 933  E0D7 ~            CopyNormsToSpaceStation2: McopyNormsToSpaceStation
 934  E0D7 ~            CopyVertsToSpaceStation2: McopyVertsToSpaceStation
 935  E0D7 ~            CopyEdgesToSpaceStation2: McopyEdgesToSpaceStation
 936  E0D7 ~            CopyShipToSpaceStation2:  MCopyShipToSpaceStation  BankShipModels2
 937  E0D7 ~            CopyBodyToSpaceStation2:  MCopyBodyToSpaceStation  CopyShipToSpaceStation2
 938  E0D7                  ENDIF
 939  E0D7                  INCLUDE "./Data/ShipModelMetaData2.asm"
# file opened: ./Data/ShipModelMetaData2.asm
   1+ E0D7 77 E1        ShipModelTable2:         DW Dragon                                  ;16  $10
   2+ E0D9 58 E2                                 DW Escape_Pod                              ;17  $11
   3+ E0DB B7 E2                                 DW Fer_De_Lance                            ;18  $12
   4+ E0DD DC E3                                 DW Gecko                                   ;19  $13
   5+ E0DF AB E4                                 DW Ghavial                                 ;20  $14
   6+ E0E1 9A E5                                 DW Iguana                                  ;21  $15
   7+ E0E3 97 E6                                 DW Krait                                   ;22  $16
   8+ E0E5 88 E7                                 DW Logo                                    ;23  $17
   9+ E0E7 4B E9                                 DW Mamba                                   ;24  $18
  10+ E0E9 84 EA                                 DW Missile                                 ;25  $19
  11+ E0EB 8D EB                                 DW Monitor                                 ;26  $1A
  12+ E0ED 9A EC                                 DW Moray                                   ;27  $1B
  13+ E0EF 7D ED                                 DW Ophidian                                ;28  $1C
  14+ E0F1 BC EE                                 DW Plate                                   ;29  $1D
  15+ E0F3 01 EF                                 DW Python                                  ;30  $1E
  16+ E0F5 FE EF                                 DW Python_P                                ;31  $1F
  17+ E0F7 96 E1        ShipVertexTable2:        DW DragonVertices                          ;16  $10
  18+ E0F9 77 E2                                 DW Escape_PodVertices                      ;17  $11
  19+ E0FB D6 E2                                 DW Fer_De_LanceVertices                    ;18  $12
  20+ E0FD FB E3                                 DW GeckoVertices                           ;19  $13
  21+ E0FF CA E4                                 DW GhavialVertices                         ;20  $14
  22+ E101 B9 E5                                 DW IguanaVertices                          ;21  $15
  23+ E103 B6 E6                                 DW KraitVertices                           ;22  $16
  24+ E105 A7 E7                                 DW LogoVertices                            ;23  $17
  25+ E107 6A E9                                 DW MambaVertices                           ;24  $18
  26+ E109 A3 EA                                 DW MissileVertices                         ;25  $19
  27+ E10B AC EB                                 DW MonitorVertices                         ;26  $1A
  28+ E10D B9 EC                                 DW MorayVertices                           ;27  $1B
  29+ E10F 9C ED                                 DW OphidianVertices                        ;28  $1C
  30+ E111 DB EE                                 DW PlateVertices                           ;29  $1D
  31+ E113 20 EF                                 DW PythonVertices                          ;30  $1E
  32+ E115 1D F0                                 DW Python_PVertices                        ;31  $1F
  33+ E117 CC E1        ShipEdgeTable2:          DW DragonEdges                             ;16  $10
  34+ E119 8F E2                                 DW Escape_PodEdges                         ;17  $11
  35+ E11B 48 E3                                 DW Fer_De_LanceEdges                       ;18  $12
  36+ E11D 43 E4                                 DW GeckoEdges                              ;19  $13
  37+ E11F 12 E5                                 DW GhavialEdges                            ;20  $14
  38+ E121 13 E6                                 DW IguanaEdges                             ;21  $15
  39+ E123 1C E7                                 DW KraitEdges                              ;22  $16
  40+ E125 A3 E8                                 DW LogoEdges                               ;23  $17
  41+ E127 00 EA                                 DW MambaEdges                              ;24  $18
  42+ E129 09 EB                                 DW MissileEdges                            ;25  $19
  43+ E12B 12 EC                                 DW MonitorEdges                            ;26  $1A
  44+ E12D 0D ED                                 DW MorayEdges                              ;27  $1B
  45+ E12F 14 EE                                 DW OphidianEdges                           ;28  $1C
  46+ E131 ED EE                                 DW PlateEdges                              ;29  $1D
  47+ E133 62 EF                                 DW PythonEdges                             ;30  $1E
  48+ E135 5F F0                                 DW Python_PEdges                           ;31  $1F
  49+ E137 20 E2        ShipNormalTable2:        DW DragonNormals                           ;16  $10
  50+ E139 A7 E2                                 DW Escape_PodNormals                       ;17  $11
  51+ E13B B4 E3                                 DW Fer_De_LanceNormals                     ;18  $12
  52+ E13D 87 E4                                 DW GeckoNormals                            ;19  $13
  53+ E13F 6A E5                                 DW GhavialNormals                          ;20  $14
  54+ E141 6F E6                                 DW IguanaNormals                           ;21  $15
  55+ E143 70 E7                                 DW KraitNormals                            ;22  $16
  56+ E145 37 E9                                 DW LogoNormals                             ;23  $17
  57+ E147 70 EA                                 DW MambaNormals                            ;24  $18
  58+ E149 69 EB                                 DW MissileNormals                          ;25  $19
  59+ E14B 6E EC                                 DW MonitorNormals                          ;26  $1A
  60+ E14D 59 ED                                 DW MorayNormals                            ;27  $1B
  61+ E14F 8C EE                                 DW OphidianNormals                         ;28  $1C
  62+ E151 FD EE                                 DW PlateNormals                            ;29  $1D
  63+ E153 CA EF                                 DW PythonNormals                           ;30  $1E
  64+ E155 C7 F0                                 DW Python_PNormals                         ;31  $1F
  65+ E157 E1 00        ShipModelSizeTable2:     DW DragonLen                               ;16  $10
  66+ E159 5F 00                                 DW Escape_PodLen                           ;17  $11
  67+ E15B 25 01                                 DW Fer_De_LanceLen                         ;18  $12
  68+ E15D CF 00                                 DW GeckoLen                                ;19  $13
  69+ E15F EF 00                                 DW GhavialLen                              ;20  $14
  70+ E161 FD 00                                 DW IguanaLen                               ;21  $15
  71+ E163 F1 00                                 DW KraitLen                                ;22  $16
  72+ E165 C3 01                                 DW LogoLen                                 ;23  $17
  73+ E167 39 01                                 DW MambaLen                                ;24  $18
  74+ E169 09 01                                 DW MissileLen                              ;25  $19
  75+ E16B 0D 01                                 DW MonitorLen                              ;26  $1A
  76+ E16D E3 00                                 DW MorayLen                                ;27  $1B
  77+ E16F 3F 01                                 DW OphidianLen                             ;28  $1C
  78+ E171 45 00                                 DW PlateLen                                ;29  $1D
  79+ E173 FD 00                                 DW PythonLen                               ;30  $1E
  80+ E175 FD 00                                 DW Python_PLen                             ;31  $1F
  81+ E177
  82+ E177                                      include "Data/ships/Dragon.asm"
# file opened: ./Data/ships/Dragon.asm
   1++E177 00           Dragon:	                DB $00                                                    ; Number of cargo canisters released when destroyed
   2++E178 66 50                                DW $5066                                                  ; Ship's targetable area LoHi
   3++E17A CC E1                                DW DragonEdges                                            ; Edge Data
   4++E17C 54                                   DB DragonEdgesSize                                        ; Size of Edge Data
   5++E17D 00                                   DB $00                                                    ; Gun Vertex Byte offset
   6++E17E 3C                                   db $3C                                                    ; Explosion Count
   7++E17F 09                                   DB DragonVertSize /6                                      ; Vertex Count /6
   8++E180 36                                   DB DragonVertSize                                         ; Vertex Count
   9++E181 15                                   DB DragonEdgesCnt                                         ; Edges Count
  10++E182 00 00                                DW $0000                                                  ; Bounty LoHi
  11++E184 38                                   DB DragonNormalsSize                                      ; Face (Normal) Count
  12++E185 20                                   DB $20                                                    ; Range when it turns to a dot
  13++E186 F7                                   DB $F7                                                    ; Energy Max
  14++E187 14                                   DB $14                                                    ; Speed Max
  15++E188 20 E2                                DW DragonNormals                                          ; Normals
  16++E18A 00                                   DB $00                                                    ; Q scaling
  17++E18B 47                                   DB $40 | ShipMissiles7                                    ; Laser power and Nbr Missiles
  18++E18C 96 E1                                DW DragonVertices                                         ; Verticles Address
  19++E18E 00                                   DB ShipTypeNormal                                         ; Ship Type
  20++E18F 00                                   DB 0                                                      ; NewB Tactics
  21++E190 A0                                   DB ShipCanAnger | ShipFighterBaySize2 | ShipFighterWorm   ; AI Flags
  22++E191 B0                                   DB $B0                                                    ; chance of ECM module
  23++E192 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E193 00 00                                DW $0000                            ; no solid data
  25++E195 00                                   DB $00                              ; no solid data
  26++E196
  27++E196 00 00 FA 1F  DragonVertices:	        DB $00, $00, $FA, $1F, $6B, $05
  27++E19A 6B 05
  28++E19C D8 00 7C 1F                          DB $D8, $00, $7C, $1F, $67, $01
  28++E1A0 67 01
  29++E1A2 D8 00 7C 3F                          DB $D8, $00, $7C, $3F, $78, $12
  29++E1A6 78 12
  30++E1A8 00 28 FA 3F                          DB $00, $28, $FA, $3F, $CD, $23
  30++E1AC CD 23
  31++E1AE 00 28 FA 7F                          DB $00, $28, $FA, $7F, $CD, $89
  31++E1B2 CD 89
  32++E1B4 D8 00 7C BF                          DB $D8, $00, $7C, $BF, $9A, $34
  32++E1B8 9A 34
  33++E1BA D8 00 7C 9F                          DB $D8, $00, $7C, $9F, $AB, $45
  33++E1BE AB 45
  34++E1C0 00 50 00 1F                          DB $00, $50, $00, $1F, $FF, $FF
  34++E1C4 FF FF
  35++E1C6 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF
  35++E1CA FF FF
  36++E1CC              DragonVertSize:         equ $ - DragonVertices
  37++E1CC 1F 01 04 1C  DragonEdges:	        DB $1F, $01, $04, $1C
  38++E1D0 1F 12 08 1C                          DB $1F, $12, $08, $1C
  39++E1D4 1F 23 0C 1C                          DB $1F, $23, $0C, $1C
  40++E1D8 1F 34 14 1C                          DB $1F, $34, $14, $1C
  41++E1DC 1F 45 18 1C                          DB $1F, $45, $18, $1C
  42++E1E0 1F 50 00 1C                          DB $1F, $50, $00, $1C
  43++E1E4 1F 67 04 20                          DB $1F, $67, $04, $20
  44++E1E8 1F 78 08 20                          DB $1F, $78, $08, $20
  45++E1EC 1F 89 10 20                          DB $1F, $89, $10, $20
  46++E1F0 1F 9A 14 20                          DB $1F, $9A, $14, $20
  47++E1F4 1F AB 18 20                          DB $1F, $AB, $18, $20
  48++E1F8 1F B6 00 20                          DB $1F, $B6, $00, $20
  49++E1FC 1F 06 00 04                          DB $1F, $06, $00, $04
  50++E200 1F 17 04 08                          DB $1F, $17, $04, $08
  51++E204 1F 4A 14 18                          DB $1F, $4A, $14, $18
  52++E208 1F 5B 00 18                          DB $1F, $5B, $00, $18
  53++E20C 1F 2C 08 0C                          DB $1F, $2C, $08, $0C
  54++E210 1F 8C 08 10                          DB $1F, $8C, $08, $10
  55++E214 1F 3D 0C 14                          DB $1F, $3D, $0C, $14
  56++E218 1F 9D 10 14                          DB $1F, $9D, $10, $14
  57++E21C 1F CD 0C 10                          DB $1F, $CD, $0C, $10
  58++E220              DragonEdgesSize:        equ $ - DragonEdges
  59++E220              DragonEdgesCnt:         equ DragonEdgesSize/4
  60++E220 1F 10 5A 1C  DragonNormals:	        DB $1F, $10, $5A, $1C
  61++E224 1F 21 5A 00                          DB $1F, $21, $5A, $00
  62++E228 3F 19 5B 0E                          DB $3F, $19, $5B, $0E
  63++E22C BF 19 5B 0E                          DB $BF, $19, $5B, $0E
  64++E230 9F 21 5A 00                          DB $9F, $21, $5A, $00
  65++E234 9F 10 5A 1C                          DB $9F, $10, $5A, $1C
  66++E238 5F 10 5A 1C                          DB $5F, $10, $5A, $1C
  67++E23C 5F 21 5A 00                          DB $5F, $21, $5A, $00
  68++E240 7F 19 5B 0E                          DB $7F, $19, $5B, $0E
  69++E244 FF 19 5B 0E                          DB $FF, $19, $5B, $0E
  70++E248 DF 21 5A 00                          DB $DF, $21, $5A, $00
  71++E24C DF 10 5A 1C                          DB $DF, $10, $5A, $1C
  72++E250 3F 30 00 52                          DB $3F, $30, $00, $52
  73++E254 BF 30 00 52                          DB $BF, $30, $00, $52
  74++E258              DragonNormalsSize:      equ $ - DragonNormals
  75++E258              DragonLen:              equ $ - Dragon
  76++E258
# file closed: ./Data/ships/Dragon.asm
  83+ E258                                      include "Data/ships/Escape_Pod.asm"
# file opened: ./Data/ships/Escape_Pod.asm
   1++E258 20           Escape_Pod:             DB $20                          ; Number of cargo canisters released when destroyed
   2++E259 00 01                                DW $0100                        ; Ship's targetable area LoHi
   3++E25B 8F E2                                DW Escape_PodEdges              ; Edge Data
   4++E25D 18                                   DB Escape_PodEdgesSize          ; Size of Edge Data
   5++E25E 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E25F 16                                   DB $16                          ; Explosion Count
   7++E260 04                                   DB Escape_PodVertSize /6        ; Vertex Count /6
   8++E261 18                                   DB Escape_PodVertSize           ; Vertex Count
   9++E262 06                                   DB Escape_PodEdgesCnt           ; Edges Count
  10++E263 00 00                                DW $0000                        ; Bounty LoHi
  11++E265 10                                   DB Escape_PodNormalsSize        ; Face (Normal) Count
  12++E266 08                                   DB $08                          ; Range when it turns to a dot
  13++E267 11                                   DB $11                          ; Energy Max
  14++E268 08                                   DB $08                          ; Speed Max
  15++E269 A7 E2                                DW Escape_PodNormals            ; Normals
  16++E26B 04                                   DB $04                          ; Q scaling
  17++E26C 00                                   DB $00                          ; Laser power and Nbr Missiles
  18++E26D 77 E2                                DW Escape_PodVertices           ; Verticles Address
  19++E26F 00                                   DB 0                            ; Ship Type
  20++E270 00                                   DB 0                            ; NewB Tactics
  21++E271 00                                   DB 0                            ; AI Flags
  22++E272 FF                                   DB $FF                          ; chance of ECM module
  23++E273 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E274 00 00                                DW $0000                            ; no solid data
  25++E276 00                                   DB $00                              ; no solid data
  26++E277
  27++E277 07 00 24 9F  Escape_PodVertices:	    DB $07, $00, $24, $9F, $12, $33
  27++E27B 12 33
  28++E27D 07 0E 0C FF                          DB $07, $0E, $0C, $FF, $02, $33
  28++E281 02 33
  29++E283 07 0E 0C BF                          DB $07, $0E, $0C, $BF, $01, $33
  29++E287 01 33
  30++E289 15 00 00 1F                          DB $15, $00, $00, $1F, $01, $22
  30++E28D 01 22
  31++E28F              Escape_PodVertSize:     equ $ - Escape_PodVertices
  32++E28F 1F 23 00 04  Escape_PodEdges:	    DB $1F, $23, $00, $04
  33++E293 1F 03 04 08                          DB $1F, $03, $04, $08
  34++E297 1F 01 08 0C                          DB $1F, $01, $08, $0C
  35++E29B 1F 12 0C 00                          DB $1F, $12, $0C, $00
  36++E29F 1F 13 00 08                          DB $1F, $13, $00, $08
  37++E2A3 1F 02 0C 04                          DB $1F, $02, $0C, $04
  38++E2A7              Escape_PodEdgesSize:    equ $ - Escape_PodEdges
  39++E2A7              Escape_PodEdgesCnt:     equ Escape_PodEdgesSize/4
  40++E2A7 3F 34 00 7A  Escape_PodNormals:	    DB $3F, $34, $00, $7A
  41++E2AB 1F 27 67 1E                          DB $1F, $27, $67, $1E
  42++E2AF 5F 27 67 1E                          DB $5F, $27, $67, $1E
  43++E2B3 9F 70 00 00                          DB $9F, $70, $00, $00
  44++E2B7              Escape_PodNormalsSize:  equ $ - Escape_PodNormals
  45++E2B7              Escape_PodLen:          equ $ - Escape_Pod
  46++E2B7
# file closed: ./Data/ships/Escape_Pod.asm
  84+ E2B7                                      include "Data/ships/Fer_De_Lance.asm"
# file opened: ./Data/ships/Fer_De_Lance.asm
   1++E2B7 00           Fer_De_Lance:	        DB $00                          ; Number of cargo canisters released when destroyed
   2++E2B8 40 06                                DW $0640                        ; Ship's targetable area LoHi
   3++E2BA 48 E3                                DW Fer_De_LanceEdges            ; Edge Data
   4++E2BC 6C                                   DB Fer_De_LanceEdgesSize        ; Size of Edge Data
   5++E2BD 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E2BE 1A                                   DB $1A                          ; Explosion Count
   7++E2BF 13                                   DB Fer_De_LanceVertSize /6      ; Vertex Count /6
   8++E2C0 72                                   DB Fer_De_LanceVertSize         ; Vertex Count
   9++E2C1 1B                                   DB Fer_De_LanceEdgesCnt         ; Edges Count
  10++E2C2 00 00                                DW $0000                        ; Bounty LoHi
  11++E2C4 28                                   DB Fer_De_LanceNormalsSize      ; Face (Normal) Count
  12++E2C5 28                                   DB $28                          ; Range when it turns to a dot
  13++E2C6 A0                                   DB $A0                          ; Energy Max
  14++E2C7 1E                                   DB $1E                          ; Speed Max
  15++E2C8 B4 E3                                DW Fer_De_LanceNormals          ; Normals
  16++E2CA 01                                   DB $01                          ; Q scaling
  17++E2CB 17                                   DB $10 | ShipMissiles7          ; Laser power and Nbr Missiles
  18++E2CC D6 E2                                DW Fer_De_LanceVertices         ; Verticles Address
  19++E2CE 00                                   DB ShipTypeNormal               ; Ship Type
  20++E2CF 00                                   DB 0                            ; NewB Tactics
  21++E2D0 80                                   DB ShipCanAnger                 ; AI Flags
  22++E2D1 FF                                   DB $FF                          ; chance of ECM module
  23++E2D2 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E2D3 00 00                                DW $0000                            ; no solid data
  25++E2D5 00                                   DB $00                              ; no solid data
  26++E2D6
  27++E2D6 00 0E 6C 5F  Fer_De_LanceVertices:	DB $00, $0E, $6C, $5F, $01, $59
  27++E2DA 01 59
  28++E2DC 28 0E 04 FF                          DB $28, $0E, $04, $FF, $12, $99
  28++E2E0 12 99
  29++E2E2 0C 0E 34 FF                          DB $0C, $0E, $34, $FF, $23, $99
  29++E2E6 23 99
  30++E2E8 0C 0E 34 7F                          DB $0C, $0E, $34, $7F, $34, $99
  30++E2EC 34 99
  31++E2EE 28 0E 04 7F                          DB $28, $0E, $04, $7F, $45, $99
  31++E2F2 45 99
  32++E2F4 28 0E 04 BC                          DB $28, $0E, $04, $BC, $01, $26
  32++E2F8 01 26
  33++E2FA 0C 02 34 BC                          DB $0C, $02, $34, $BC, $23, $67
  33++E2FE 23 67
  34++E300 0C 02 34 3C                          DB $0C, $02, $34, $3C, $34, $78
  34++E304 34 78
  35++E306 28 0E 04 3C                          DB $28, $0E, $04, $3C, $04, $58
  35++E30A 04 58
  36++E30C 00 12 14 2F                          DB $00, $12, $14, $2F, $06, $78
  36++E310 06 78
  37++E312 03 0B 61 CB                          DB $03, $0B, $61, $CB, $00, $00
  37++E316 00 00
  38++E318 1A 08 12 89                          DB $1A, $08, $12, $89, $00, $00
  38++E31C 00 00
  39++E31E 10 0E 04 AB                          DB $10, $0E, $04, $AB, $00, $00
  39++E322 00 00
  40++E324 03 0B 61 4B                          DB $03, $0B, $61, $4B, $00, $00
  40++E328 00 00
  41++E32A 1A 08 12 09                          DB $1A, $08, $12, $09, $00, $00
  41++E32E 00 00
  42++E330 10 0E 04 2B                          DB $10, $0E, $04, $2B, $00, $00
  42++E334 00 00
  43++E336 00 0E 14 6C                          DB $00, $0E, $14, $6C, $99, $99
  43++E33A 99 99
  44++E33C 0E 0E 2C CC                          DB $0E, $0E, $2C, $CC, $99, $99
  44++E340 99 99
  45++E342 0E 0E 2C 4C                          DB $0E, $0E, $2C, $4C, $99, $99
  45++E346 99 99
  46++E348              Fer_De_LanceVertSize:   equ $ - Fer_De_LanceVertices
  47++E348 1F 19 00 04  Fer_De_LanceEdges:	    DB $1F, $19, $00, $04
  48++E34C 1F 29 04 08                          DB $1F, $29, $04, $08
  49++E350 1F 39 08 0C                          DB $1F, $39, $08, $0C
  50++E354 1F 49 0C 10                          DB $1F, $49, $0C, $10
  51++E358 1F 59 00 10                          DB $1F, $59, $00, $10
  52++E35C 1C 01 00 14                          DB $1C, $01, $00, $14
  53++E360 1C 26 14 18                          DB $1C, $26, $14, $18
  54++E364 1C 37 18 1C                          DB $1C, $37, $18, $1C
  55++E368 1C 48 1C 20                          DB $1C, $48, $1C, $20
  56++E36C 1C 05 00 20                          DB $1C, $05, $00, $20
  57++E370 0F 06 14 24                          DB $0F, $06, $14, $24
  58++E374 0B 67 18 24                          DB $0B, $67, $18, $24
  59++E378 0B 78 1C 24                          DB $0B, $78, $1C, $24
  60++E37C 0F 08 20 24                          DB $0F, $08, $20, $24
  61++E380 0E 12 04 14                          DB $0E, $12, $04, $14
  62++E384 0E 23 08 18                          DB $0E, $23, $08, $18
  63++E388 0E 34 0C 1C                          DB $0E, $34, $0C, $1C
  64++E38C 0E 45 10 20                          DB $0E, $45, $10, $20
  65++E390 08 00 28 2C                          DB $08, $00, $28, $2C
  66++E394 09 00 2C 30                          DB $09, $00, $2C, $30
  67++E398 0B 00 28 30                          DB $0B, $00, $28, $30
  68++E39C 08 00 34 38                          DB $08, $00, $34, $38
  69++E3A0 09 00 38 3C                          DB $09, $00, $38, $3C
  70++E3A4 0B 00 34 3C                          DB $0B, $00, $34, $3C
  71++E3A8 0C 99 40 44                          DB $0C, $99, $40, $44
  72++E3AC 0C 99 40 48                          DB $0C, $99, $40, $48
  73++E3B0 08 99 44 48                          DB $08, $99, $44, $48
  74++E3B4              Fer_De_LanceEdgesSize:  equ $ - Fer_De_LanceEdges
  75++E3B4              Fer_De_LanceEdgesCnt:   equ Fer_De_LanceEdgesSize/4
  76++E3B4 1C 00 18 06  Fer_De_LanceNormals:	DB $1C, $00, $18, $06
  77++E3B8 9F 44 00 18                          DB $9F, $44, $00, $18
  78++E3BC BF 3F 00 25                          DB $BF, $3F, $00, $25
  79++E3C0 3F 00 00 68                          DB $3F, $00, $00, $68
  80++E3C4 3F 3F 00 25                          DB $3F, $3F, $00, $25
  81++E3C8 1F 44 00 18                          DB $1F, $44, $00, $18
  82++E3CC BC 0C 2E 13                          DB $BC, $0C, $2E, $13
  83++E3D0 3C 00 2D 16                          DB $3C, $00, $2D, $16
  84++E3D4 3C 0C 2E 13                          DB $3C, $0C, $2E, $13
  85++E3D8 5F 00 1C 00                          DB $5F, $00, $1C, $00
  86++E3DC              Fer_De_LanceNormalsSize:equ $ - Fer_De_LanceNormals
  87++E3DC              Fer_De_LanceLen:        equ $ - Fer_De_Lance
  88++E3DC
# file closed: ./Data/ships/Fer_De_Lance.asm
  85+ E3DC                                      include "Data/ships/Gecko.asm"
# file opened: ./Data/ships/Gecko.asm
   1++E3DC 00           Gecko:	                DB $00                         ; Number of cargo canisters released when destroyed
   2++E3DD 49 26                                DW $2649                       ; Ship's targetable area LoHi
   3++E3DF 43 E4                                DW GeckoEdges                  ; Edge Data
   4++E3E1 44                                   DB GeckoEdgesSize              ; Size of Edge Data
   5++E3E2 00                                   DB $00                         ; Gun Vertex Byte offset
   6++E3E3 1A                                   DB $1A                         ; Explosion Count
   7++E3E4 0C                                   DB GeckoVertSize /6            ; Vertex Count /6
   8++E3E5 48                                   DB GeckoVertSize               ; Vertex Count
   9++E3E6 11                                   DB GeckoEdgesCnt               ; Edges Count
  10++E3E7 37 00                                DW $0037                       ; Bounty LoHi
  11++E3E9 24                                   DB GeckoNormalsSize            ; Face (Normal) Count
  12++E3EA 12                                   DB $12                         ; Range when it turns to a dot
  13++E3EB 46                                   DB $46                         ; Energy Max
  14++E3EC 1E                                   DB $1E                         ; Speed Max
  15++E3ED 87 E4                                DW GeckoNormals                ; Normals
  16++E3EF 03                                   DB $03                         ; Q scaling
  17++E3F0 10                                   DB $10                         ; Laser power and Nbr Missiles
  18++E3F1 FB E3                                DW GeckoVertices               ; Verticles Address
  19++E3F3 00                                   DB ShipTypeNormal              ; Ship Type
  20++E3F4 00                                   DB 0                           ; NewB Tactics
  21++E3F5 80                                   DB ShipCanAnger                ; AI Flags
  22++E3F6 60                                   DB $60                         ; chance of ECM module
  23++E3F7 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E3F8 00 00                                DW $0000                            ; no solid data
  25++E3FA 00                                   DB $00                              ; no solid data
  26++E3FB
  27++E3FB 0A 04 2F DF  GeckoVertices:	        DB $0A, $04, $2F, $DF, $03, $45
  27++E3FF 03 45
  28++E401 0A 04 2F 5F                          DB $0A, $04, $2F, $5F, $01, $23
  28++E405 01 23
  29++E407 10 08 17 BF                          DB $10, $08, $17, $BF, $05, $67
  29++E40B 05 67
  30++E40D 10 08 17 3F                          DB $10, $08, $17, $3F, $01, $78
  30++E411 01 78
  31++E413 42 00 03 BF                          DB $42, $00, $03, $BF, $45, $66
  31++E417 45 66
  32++E419 42 00 03 3F                          DB $42, $00, $03, $3F, $12, $88
  32++E41D 12 88
  33++E41F 14 0E 17 FF                          DB $14, $0E, $17, $FF, $34, $67
  33++E423 34 67
  34++E425 14 0E 17 7F                          DB $14, $0E, $17, $7F, $23, $78
  34++E429 23 78
  35++E42B 08 06 21 D0                          DB $08, $06, $21, $D0, $33, $33
  35++E42F 33 33
  36++E431 08 06 21 51                          DB $08, $06, $21, $51, $33, $33
  36++E435 33 33
  37++E437 08 0D 10 F0                          DB $08, $0D, $10, $F0, $33, $33
  37++E43B 33 33
  38++E43D 08 0D 10 71                          DB $08, $0D, $10, $71, $33, $33
  38++E441 33 33
  39++E443              GeckoVertSize:          equ $ - GeckoVertices
  40++E443 1F 03 00 04  GeckoEdges:	            DB $1F, $03, $00, $04
  41++E447 1F 12 04 14                          DB $1F, $12, $04, $14
  42++E44B 1F 18 14 0C                          DB $1F, $18, $14, $0C
  43++E44F 1F 07 0C 08                          DB $1F, $07, $0C, $08
  44++E453 1F 56 08 10                          DB $1F, $56, $08, $10
  45++E457 1F 45 10 00                          DB $1F, $45, $10, $00
  46++E45B 1F 28 14 1C                          DB $1F, $28, $14, $1C
  47++E45F 1F 37 1C 18                          DB $1F, $37, $1C, $18
  48++E463 1F 46 18 10                          DB $1F, $46, $18, $10
  49++E467 1D 05 00 08                          DB $1D, $05, $00, $08
  50++E46B 1E 01 04 0C                          DB $1E, $01, $04, $0C
  51++E46F 1D 34 00 18                          DB $1D, $34, $00, $18
  52++E473 1E 23 04 1C                          DB $1E, $23, $04, $1C
  53++E477 14 67 08 18                          DB $14, $67, $08, $18
  54++E47B 14 78 0C 1C                          DB $14, $78, $0C, $1C
  55++E47F 10 33 20 28                          DB $10, $33, $20, $28
  56++E483 11 33 24 2C                          DB $11, $33, $24, $2C
  57++E487              GeckoEdgesSize:             equ $ - GeckoEdges
  58++E487              GeckoEdgesCnt:          equ GeckoEdgesSize/4
  59++E487 1F 00 1F 05  GeckoNormals:	        DB $1F, $00, $1F, $05
  60++E48B 1F 04 2D 08                          DB $1F, $04, $2D, $08
  61++E48F 5F 19 6C 13                          DB $5F, $19, $6C, $13
  62++E493 5F 00 54 0C                          DB $5F, $00, $54, $0C
  63++E497 DF 19 6C 13                          DB $DF, $19, $6C, $13
  64++E49B 9F 04 2D 08                          DB $9F, $04, $2D, $08
  65++E49F BF 58 10 D6                          DB $BF, $58, $10, $D6
  66++E4A3 3F 00 00 BB                          DB $3F, $00, $00, $BB
  67++E4A7 3F 58 10 D6                          DB $3F, $58, $10, $D6
  68++E4AB              GeckoNormalsSize:       equ $ - GeckoNormals
  69++E4AB              GeckoLen:               equ $ - Gecko
  70++E4AB
# file closed: ./Data/ships/Gecko.asm
  86+ E4AB                                      include "Data/ships/Ghavial.asm"
# file opened: ./Data/ships/Ghavial.asm
   1++E4AB 03           Ghavial:	            DB $03                      ; Number of cargo canisters released when destroyed
   2++E4AC 00 26                                DW $2600                    ; Ship's targetable area LoHi
   3++E4AE 12 E5                                DW GhavialEdges             ; Edge Data
   4++E4B0 58                                   DB GhavialEdgesSize         ; Size of Edge Data
   5++E4B1 00                                   DB $00                      ; Gun Vertex Byte offset
   6++E4B2 22                                   DB $22                      ; Explosion Count
   7++E4B3 0C                                   DB GhavialVertSize /6       ; Vertex Count /6
   8++E4B4 48                                   DB GhavialVertSize          ; Vertex Count
   9++E4B5 16                                   DB GhavialEdgesCnt          ; Edges Count
  10++E4B6 64 00                                DW $0064                    ; Bounty LoHi
  11++E4B8 30                                   DB GhavialNormalsSize       ; Face (Normal) Count
  12++E4B9 0A                                   DB $0A                      ; Range when it turns to a dot
  13++E4BA 72                                   DB $72                      ; Energy Max
  14++E4BB 10                                   DB $10                      ; Speed Max
  15++E4BC 6A E5                                DW GhavialNormals           ; Normals
  16++E4BE 00                                   DB $00                      ; Q scaling
  17++E4BF 27                                   DB $27                      ; Laser power and Nbr Missiles
  18++E4C0 CA E4                                DW GhavialVertices          ; Verticles Address
  19++E4C2 00                                   DB ShipTypeNormal           ; Ship Type
  20++E4C3 00                                   DB 0                        ; NewB Tactics
  21++E4C4 80                                   DB ShipCanAnger             ; AI Flags
  22++E4C5 60                                   DB $60                      ; chance of ECM module
  23++E4C6 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E4C7 00 00                                DW $0000                            ; no solid data
  25++E4C9 00                                   DB $00                              ; no solid data
  26++E4CA
  27++E4CA 1E 00 64 1F  GhavialVertices:	DB $1E, $00, $64, $1F, $67, $01
  27++E4CE 67 01
  28++E4D0 1E 00 64 9F                      DB $1E, $00, $64, $9F, $6B, $05
  28++E4D4 6B 05
  29++E4D6 28 1E 1A 3F                      DB $28, $1E, $1A, $3F, $23, $01
  29++E4DA 23 01
  30++E4DC 28 1E 1A BF                      DB $28, $1E, $1A, $BF, $45, $03
  30++E4E0 45 03
  31++E4E2 3C 00 14 3F                      DB $3C, $00, $14, $3F, $78, $12
  31++E4E6 78 12
  32++E4E8 28 00 3C 3F                      DB $28, $00, $3C, $3F, $89, $23
  32++E4EC 89 23
  33++E4EE 3C 00 14 BF                      DB $3C, $00, $14, $BF, $AB, $45
  33++E4F2 AB 45
  34++E4F4 28 00 3C BF                      DB $28, $00, $3C, $BF, $9A, $34
  34++E4F8 9A 34
  35++E4FA 00 1E 14 7F                      DB $00, $1E, $14, $7F, $FF, $FF
  35++E4FE FF FF
  36++E500 0A 18 00 09                      DB $0A, $18, $00, $09, $00, $00
  36++E504 00 00
  37++E506 0A 18 00 89                      DB $0A, $18, $00, $89, $00, $00
  37++E50A 00 00
  38++E50C 00 16 0A 09                      DB $00, $16, $0A, $09, $00, $00
  38++E510 00 00
  39++E512
  40++E512              GhavialVertSize: equ $ - GhavialVertices
  41++E512
  42++E512
  43++E512 1F 01 00 08  GhavialEdges:	DB $1F, $01, $00, $08
  44++E516 1F 12 10 08                  DB $1F, $12, $10, $08
  45++E51A 1F 23 14 08                  DB $1F, $23, $14, $08
  46++E51E 1F 30 0C 08                  DB $1F, $30, $0C, $08
  47++E522 1F 34 1C 0C                  DB $1F, $34, $1C, $0C
  48++E526 1F 45 18 0C                  DB $1F, $45, $18, $0C
  49++E52A 1F 50 0C 04                  DB $1F, $50, $0C, $04
  50++E52E 1F 67 00 20                  DB $1F, $67, $00, $20
  51++E532 1F 78 10 20                  DB $1F, $78, $10, $20
  52++E536 1F 89 14 20                  DB $1F, $89, $14, $20
  53++E53A 1F 9A 1C 20                  DB $1F, $9A, $1C, $20
  54++E53E 1F AB 18 20                  DB $1F, $AB, $18, $20
  55++E542 1F B6 04 20                  DB $1F, $B6, $04, $20
  56++E546 1F 06 04 00                  DB $1F, $06, $04, $00
  57++E54A 1F 17 00 10                  DB $1F, $17, $00, $10
  58++E54E 1F 28 10 14                  DB $1F, $28, $10, $14
  59++E552 1F 39 14 1C                  DB $1F, $39, $14, $1C
  60++E556 1F 4A 1C 18                  DB $1F, $4A, $1C, $18
  61++E55A 1F 5B 18 04                  DB $1F, $5B, $18, $04
  62++E55E 09 00 24 28                  DB $09, $00, $24, $28
  63++E562 09 00 28 2C                  DB $09, $00, $28, $2C
  64++E566 09 00 2C 24                  DB $09, $00, $2C, $24
  65++E56A
  66++E56A              GhavialEdgesSize: equ $ - GhavialEdges
  67++E56A
  68++E56A
  69++E56A              GhavialEdgesCnt: equ GhavialEdgesSize/4
  70++E56A
  71++E56A
  72++E56A 1F 00 3E 0E  GhavialNormals:	DB $1F, $00, $3E, $0E
  73++E56E 1F 33 24 0C                  DB $1F, $33, $24, $0C
  74++E572 3F 33 1C 19                  DB $3F, $33, $1C, $19
  75++E576 3F 00 30 2A                  DB $3F, $00, $30, $2A
  76++E57A BF 33 1C 19                  DB $BF, $33, $1C, $19
  77++E57E 9F 33 24 0C                  DB $9F, $33, $24, $0C
  78++E582 5F 00 3E 0F                  DB $5F, $00, $3E, $0F
  79++E586 5F 1C 38 07                  DB $5F, $1C, $38, $07
  80++E58A 7F 1B 37 0D                  DB $7F, $1B, $37, $0D
  81++E58E 7F 00 33 26                  DB $7F, $00, $33, $26
  82++E592 FF 1B 37 0D                  DB $FF, $1B, $37, $0D
  83++E596 DF 1C 38 07                  DB $DF, $1C, $38, $07
  84++E59A
  85++E59A              GhavialNormalsSize: equ $ - GhavialNormals
  86++E59A              GhavialLen: equ $ - Ghavial
  87++E59A
# file closed: ./Data/ships/Ghavial.asm
  87+ E59A                                      include "Data/ships/Iguana.asm"
# file opened: ./Data/ships/Iguana.asm
   1++E59A 01           Iguana:	                DB $01                      ; Number of cargo canisters released when destroyed
   2++E59B AC 0D                                DW $0DAC                    ; Ship's targetable area LoHi
   3++E59D 13 E6                                DW IguanaEdges              ; Edge Data
   4++E59F 5C                                   DB IguanaEdgesSize          ; Size of Edge Data
   5++E5A0 00                                   DB $00                      ; Gun Vertex Byte offset
   6++E5A1 1A                                   DB $1A                      ; Explosion Count
   7++E5A2 0F                                   DB IguanaVertSize /6        ; Vertex Count /6
   8++E5A3 5A                                   DB IguanaVertSize           ; Vertex Count
   9++E5A4 17                                   DB IguanaEdgesCnt           ; Edges Count
  10++E5A5 96 00                                DW $0096                    ; Bounty LoHi
  11++E5A7 28                                   DB IguanaNormalsSize        ; Face (Normal) Count
  12++E5A8 0A                                   DB $0A                      ; Range when it turns to a dot
  13++E5A9 5A                                   DB $5A                      ; Energy Max
  14++E5AA 21                                   DB $21                      ; Speed Max
  15++E5AB 6F E6                                DW IguanaNormals            ; Normals
  16++E5AD 01                                   DB $01                      ; Q scaling
  17++E5AE 23                                   DB $20 | ShipMissiles3      ; Laser power and Nbr Missiles
  18++E5AF B9 E5                                DW IguanaVertices           ; Verticles Address
  19++E5B1 00                                   DB ShipTypeNormal           ; Ship Type
  20++E5B2 00                                   DB 0                        ; NewB Tactics
  21++E5B3 80                                   DB ShipCanAnger             ; AI Flags
  22++E5B4 80                                   DB $80                      ; chance of ECM module
  23++E5B5 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E5B6 00 00                                DW $0000                            ; no solid data
  25++E5B8 00                                   DB $00                              ; no solid data
  26++E5B9
  27++E5B9
  28++E5B9 00 00 5A 1F  IguanaVertices:	DB $00, $00, $5A, $1F, $23, $01
  28++E5BD 23 01
  29++E5BF 00 14 1E 1F                  DB $00, $14, $1E, $1F, $46, $02
  29++E5C3 46 02
  30++E5C5 28 00 0A 9F                  DB $28, $00, $0A, $9F, $45, $01
  30++E5C9 45 01
  31++E5CB 00 14 1E 5F                  DB $00, $14, $1E, $5F, $57, $13
  31++E5CF 57 13
  32++E5D1 28 00 0A 1F                  DB $28, $00, $0A, $1F, $67, $23
  32++E5D5 67 23
  33++E5D7 00 14 28 3F                  DB $00, $14, $28, $3F, $89, $46
  33++E5DB 89 46
  34++E5DD 28 00 1E BF                  DB $28, $00, $1E, $BF, $88, $45
  34++E5E1 88 45
  35++E5E3 00 14 28 7F                  DB $00, $14, $28, $7F, $89, $57
  35++E5E7 89 57
  36++E5E9 28 00 1E 3F                  DB $28, $00, $1E, $3F, $99, $67
  36++E5ED 99 67
  37++E5EF 28 00 28 9E                  DB $28, $00, $28, $9E, $11, $00
  37++E5F3 11 00
  38++E5F5 28 00 28 1E                  DB $28, $00, $28, $1E, $33, $22
  38++E5F9 33 22
  39++E5FB 00 08 28 2A                  DB $00, $08, $28, $2A, $99, $88
  39++E5FF 99 88
  40++E601 10 00 24 AA                  DB $10, $00, $24, $AA, $88, $88
  40++E605 88 88
  41++E607 00 08 28 6A                  DB $00, $08, $28, $6A, $99, $88
  41++E60B 99 88
  42++E60D 10 00 24 2A                  DB $10, $00, $24, $2A, $99, $99
  42++E611 99 99
  43++E613
  44++E613              IguanaVertSize: equ $ - IguanaVertices
  45++E613
  46++E613
  47++E613
  48++E613 1F 02 00 04  IguanaEdges:	DB $1F, $02, $00, $04
  49++E617 1F 01 00 08                  DB $1F, $01, $00, $08
  50++E61B 1F 13 00 0C                  DB $1F, $13, $00, $0C
  51++E61F 1F 23 00 10                  DB $1F, $23, $00, $10
  52++E623 1F 46 04 14                  DB $1F, $46, $04, $14
  53++E627 1F 45 08 18                  DB $1F, $45, $08, $18
  54++E62B 1F 57 0C 1C                  DB $1F, $57, $0C, $1C
  55++E62F 1F 67 10 20                  DB $1F, $67, $10, $20
  56++E633 1F 48 14 18                  DB $1F, $48, $14, $18
  57++E637 1F 58 18 1C                  DB $1F, $58, $18, $1C
  58++E63B 1F 69 14 20                  DB $1F, $69, $14, $20
  59++E63F 1F 79 1C 20                  DB $1F, $79, $1C, $20
  60++E643 1F 04 04 08                  DB $1F, $04, $04, $08
  61++E647 1F 15 08 0C                  DB $1F, $15, $08, $0C
  62++E64B 1F 26 04 10                  DB $1F, $26, $04, $10
  63++E64F 1F 37 0C 10                  DB $1F, $37, $0C, $10
  64++E653 1F 89 14 1C                  DB $1F, $89, $14, $1C
  65++E657 1E 01 08 24                  DB $1E, $01, $08, $24
  66++E65B 1E 23 10 28                  DB $1E, $23, $10, $28
  67++E65F 0A 88 2C 30                  DB $0A, $88, $2C, $30
  68++E663 0A 88 34 30                  DB $0A, $88, $34, $30
  69++E667 0A 99 2C 38                  DB $0A, $99, $2C, $38
  70++E66B 0A 99 34 38                  DB $0A, $99, $34, $38
  71++E66F
  72++E66F              IguanaEdgesSize: equ $ - IguanaEdges
  73++E66F
  74++E66F
  75++E66F              IguanaEdgesCnt: equ IguanaEdgesSize/4
  76++E66F
  77++E66F
  78++E66F 9F 33 4D 19  IguanaNormals:	DB $9F, $33, $4D, $19
  79++E673 DF 33 4D 19  	DB $DF, $33, $4D, $19
  80++E677 1F 33 4D 19  	DB $1F, $33, $4D, $19
  81++E67B 5F 33 4D 19  	DB $5F, $33, $4D, $19
  82++E67F 9F 2A 55 00  	DB $9F, $2A, $55, $00
  83++E683 DF 2A 55 00  	DB $DF, $2A, $55, $00
  84++E687 1F 2A 55 00  	DB $1F, $2A, $55, $00
  85++E68B 5F 2A 55 00  	DB $5F, $2A, $55, $00
  86++E68F BF 17 00 5D  	DB $BF, $17, $00, $5D
  87++E693 3F 17 00 5D  	DB $3F, $17, $00, $5D
  88++E697
  89++E697
  90++E697              IguanaNormalsSize: equ $ - IguanaNormals
  91++E697              IguanaLen: equ $ - Iguana
  92++E697
# file closed: ./Data/ships/Iguana.asm
  88+ E697                                      include "Data/ships/Krait.asm"
# file opened: ./Data/ships/Krait.asm
   1++E697
   2++E697 01           Krait:                  DB $01                         ; Number of cargo canisters released when destroyed
   3++E698 0E 10                                DW $100E                       ; Ship's targetable area LoHi
   4++E69A 1C E7                                DW KraitEdges                  ; Edge Data
   5++E69C 54                                   DB KraitEdgesSize              ; Size of Edge Data
   6++E69D 00                                   DB $00                         ; Gun Vertex Byte offset
   7++E69E 12                                   DB $12                         ; Explosion Count
   8++E69F 11                                   DB KraitVertSize /6            ; Vertex Count /6
   9++E6A0 66                                   DB KraitVertSize               ; Vertex Count
  10++E6A1 15                                   DB KraitEdgesCnt               ; Edges Count
  11++E6A2 64 00                                DW $0064                       ; Bounty LoHi
  12++E6A4 18                                   DB KraitNormalsSize            ; Face (Normal) Count
  13++E6A5 14                                   DB $14                         ; Range when it turns to a dot
  14++E6A6 50                                   DB $50                         ; Energy Max
  15++E6A7 1E                                   DB $1E                         ; Speed Max
  16++E6A8 70 E7                                DW KraitNormals                ; Normals
  17++E6AA 02                                   DB $02                         ; Q scaling
  18++E6AB 14                                   DB $10 | ShipMissiles4         ; Laser power and Nbr Missiles
  19++E6AC B6 E6                                DW KraitVertices               ; Verticles Address
  20++E6AE 00                                   DB ShipTypeNormal              ; Ship Type
  21++E6AF 00                                   DB 0                           ; NewB Tactics
  22++E6B0 80                                   DB ShipCanAnger                ; AI Flags
  23++E6B1 D0                                   DB $D0                         ; chance of ECM module
  24++E6B2 FF                                   DB $FF                              ; Supports Solid Fill = false
  25++E6B3 00 00                                DW $0000                            ; no solid data
  26++E6B5 00                                   DB $00                              ; no solid data
  27++E6B6
  28++E6B6 00 00 60 1F  KraitVertices:          DB $00, $00, $60, $1F, $01, $23
  28++E6BA 01 23
  29++E6BC 00 12 30 3F                          DB $00, $12, $30, $3F, $03, $45
  29++E6C0 03 45
  30++E6C2 00 12 30 7F                          DB $00, $12, $30, $7F, $12, $45
  30++E6C6 12 45
  31++E6C8 5A 00 03 3F                          DB $5A, $00, $03, $3F, $01, $44
  31++E6CC 01 44
  32++E6CE 5A 00 03 BF                          DB $5A, $00, $03, $BF, $23, $55
  32++E6D2 23 55
  33++E6D4 5A 00 57 1C                          DB $5A, $00, $57, $1C, $01, $11
  33++E6D8 01 11
  34++E6DA 5A 00 57 9C                          DB $5A, $00, $57, $9C, $23, $33
  34++E6DE 23 33
  35++E6E0 00 05 35 09                          DB $00, $05, $35, $09, $00, $33
  35++E6E4 00 33
  36++E6E6 00 07 26 06                          DB $00, $07, $26, $06, $00, $33
  36++E6EA 00 33
  37++E6EC 12 07 13 89                          DB $12, $07, $13, $89, $33, $33
  37++E6F0 33 33
  38++E6F2 12 07 13 09                          DB $12, $07, $13, $09, $00, $00
  38++E6F6 00 00
  39++E6F8 12 0B 27 28                          DB $12, $0B, $27, $28, $44, $44
  39++E6FC 44 44
  40++E6FE 12 0B 27 68                          DB $12, $0B, $27, $68, $44, $44
  40++E702 44 44
  41++E704 24 00 1E 28                          DB $24, $00, $1E, $28, $44, $44
  41++E708 44 44
  42++E70A 12 0B 27 A8                          DB $12, $0B, $27, $A8, $55, $55
  42++E70E 55 55
  43++E710 12 0B 27 E8                          DB $12, $0B, $27, $E8, $55, $55
  43++E714 55 55
  44++E716 24 00 1E A8                          DB $24, $00, $1E, $A8, $55, $55
  44++E71A 55 55
  45++E71C              KraitVertSize           equ $  - KraitVertices
  46++E71C 1F 03 00 04  KraitEdges:             DB $1F, $03, $00, $04, $1F, $12, $00, $08
  46++E720 1F 12 00 08
  47++E724 1F 01 00 0C                          DB $1F, $01, $00, $0C, $1F, $23, $00, $10
  47++E728 1F 23 00 10
  48++E72C 1F 35 04 10                          DB $1F, $35, $04, $10, $1F, $25, $10, $08
  48++E730 1F 25 10 08
  49++E734 1F 14 08 0C                          DB $1F, $14, $08, $0C, $1F, $04, $0C, $04
  49++E738 1F 04 0C 04
  50++E73C 1C 01 0C 14                          DB $1C, $01, $0C, $14, $1C, $23, $10, $18
  50++E740 1C 23 10 18
  51++E744 05 45 04 08                          DB $05, $45, $04, $08, $09, $00, $1C, $28
  51++E748 09 00 1C 28
  52++E74C 06 00 20 28                          DB $06, $00, $20, $28, $09, $33, $1C, $24
  52++E750 09 33 1C 24
  53++E754 06 33 20 24                          DB $06, $33, $20, $24, $08, $44, $2C, $34
  53++E758 08 44 2C 34
  54++E75C 08 44 34 30                          DB $08, $44, $34, $30, $07, $44, $30, $2C
  54++E760 07 44 30 2C
  55++E764 07 55 38 3C                          DB $07, $55, $38, $3C, $08, $55, $3C, $40
  55++E768 08 55 3C 40
  56++E76C 08 55 40 38                          DB $08, $55, $40, $38
  57++E770              KraitEdgesSize          equ $  - KraitEdges
  58++E770              KraitEdgesCnt           equ KraitEdgesSize/4
  59++E770 1F 07 30 06  KraitNormals            DB $1F, $07, $30, $06
  60++E774 5F 07 30 06                          DB $5F, $07, $30, $06, $DF, $07, $30, $06
  60++E778 DF 07 30 06
  61++E77C 9F 07 30 06                          DB $9F, $07, $30, $06, $3F, $4D, $00, $9A
  61++E780 3F 4D 00 9A
  62++E784 BF 4D 00 9A                          DB $BF, $4D, $00, $9A
  63++E788              KraitNormalsSize        equ $  - KraitNormals
  64++E788              KraitLen                equ $  - Krait
  65++E788
# file closed: ./Data/ships/Krait.asm
  89+ E788                                      include "Data/ships/Logo.asm"
# file opened: ./Data/ships/Logo.asm
   1++E788 00           Logo:	                DB $00                    ; Number of cargo canisters released when destroyed
   2++E789 49 26                                DW $2649                  ; Ship's targetable area LoHi
   3++E78B A3 E8                                DW LogoEdges              ; Edge Data
   4++E78D 94                                   DB LogoEdgesSize          ; Size of Edge Data
   5++E78E 00                                   DB $00                    ; Gun Vertex Byte offset
   6++E78F 36                                   DB $36                    ; Explosion Count
   7++E790 2A                                   DB LogoVertSize /6        ; Vertex Count /6
   8++E791 FC                                   DB LogoVertSize           ; Vertex Count
   9++E792 25                                   DB LogoEdgesCnt           ; Edges Count
  10++E793 00 00                                DW $0000                  ; Bounty LoHi
  11++E795 14                                   DB LogoNormalsSize        ; Face (Normal) Count
  12++E796 63                                   DB $63                    ; Range when it turns to a dot
  13++E797 FC                                   DB $FC                    ; Energy Max
  14++E798 24                                   DB $24                    ; Speed Max
  15++E799 37 E9                                DW LogoNormals            ; Normals
  16++E79B 01                                   DB $01                    ; Q scaling
  17++E79C 00                                   DB $00                    ; Laser power and Nbr Missiles
  18++E79D A7 E7                                DW LogoVertices           ; Verticles Address
  19++E79F FD                                   DB ShipTypeText           ; Ship Type
  20++E7A0 00                                   DB 0                      ; NewB Tactics
  21++E7A1 00                                   DB 0                      ; AI Flags
  22++E7A2 FF                                   DB $FF                    ; chance of ECM module
  23++E7A3 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E7A4 00 00                                DW $0000                            ; no solid data
  25++E7A6 00                                   DB $00                              ; no solid data
  26++E7A7
  27++E7A7
  28++E7A7 00 09 37 5F  LogoVertices:	DB $00, $09, $37, $5F, $00, $00
  28++E7AB 00 00
  29++E7AD 0A 09 1E DF  	DB $0A, $09, $1E, $DF, $00, $00
  29++E7B1 00 00
  30++E7B3 19 09 5D DF  	DB $19, $09, $5D, $DF, $00, $00
  30++E7B7 00 00
  31++E7B9 96 09 B4 DF  	DB $96, $09, $B4, $DF, $00, $00
  31++E7BD 00 00
  32++E7BF 5A 09 0A DF  	DB $5A, $09, $0A, $DF, $00, $00
  32++E7C3 00 00
  33++E7C5 8C 09 0A DF  	DB $8C, $09, $0A, $DF, $00, $00
  33++E7C9 00 00
  34++E7CB 00 09 5F 7F  	DB $00, $09, $5F, $7F, $00, $00
  34++E7CF 00 00
  35++E7D1 8C 09 0A 5F  	DB $8C, $09, $0A, $5F, $00, $00
  35++E7D5 00 00
  36++E7D7 5A 09 0A 5F  	DB $5A, $09, $0A, $5F, $00, $00
  36++E7DB 00 00
  37++E7DD 96 09 B4 5F  	DB $96, $09, $B4, $5F, $00, $00
  37++E7E1 00 00
  38++E7E3 19 09 5D 5F  	DB $19, $09, $5D, $5F, $00, $00
  38++E7E7 00 00
  39++E7E9 0A 09 1E 5F  	DB $0A, $09, $1E, $5F, $00, $00
  39++E7ED 00 00
  40++E7EF 55 09 1E FF  	DB $55, $09, $1E, $FF, $02, $33
  40++E7F3 02 33
  41++E7F5 55 09 1E 7F  	DB $55, $09, $1E, $7F, $02, $44
  41++E7F9 02 44
  42++E7FB 46 0B 05 9F  	DB $46, $0B, $05, $9F, $01, $33
  42++E7FF 01 33
  43++E801 46 0B 19 BF  	DB $46, $0B, $19, $BF, $02, $33
  43++E805 02 33
  44++E807 46 0B 19 3F  	DB $46, $0B, $19, $3F, $02, $44
  44++E80B 02 44
  45++E80D 46 0B 05 1F  	DB $46, $0B, $05, $1F, $01, $44
  45++E811 01 44
  46++E813 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  46++E817 00 00
  47++E819 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  47++E81D 00 00
  48++E81F 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  48++E823 00 00
  49++E825 1C 0B 02 BF  	DB $1C, $0B, $02, $BF, $00, $00
  49++E829 00 00
  50++E82B 31 0B 02 BF  	DB $31, $0B, $02, $BF, $00, $00
  50++E82F 00 00
  51++E831 31 0B 0A BF  	DB $31, $0B, $0A, $BF, $00, $00
  51++E835 00 00
  52++E837 31 0B 11 BF  	DB $31, $0B, $11, $BF, $00, $00
  52++E83B 00 00
  53++E83D 1C 0B 11 BF  	DB $1C, $0B, $11, $BF, $00, $00
  53++E841 00 00
  54++E843 1C 0B 0A BF  	DB $1C, $0B, $0A, $BF, $00, $00
  54++E847 00 00
  55++E849 18 0B 02 BF  	DB $18, $0B, $02, $BF, $00, $00
  55++E84D 00 00
  56++E84F 18 0B 11 BF  	DB $18, $0B, $11, $BF, $00, $00
  56++E853 00 00
  57++E855 03 0B 11 BF  	DB $03, $0B, $11, $BF, $00, $00
  57++E859 00 00
  58++E85B 00 0B 02 3F  	DB $00, $0B, $02, $3F, $00, $00
  58++E85F 00 00
  59++E861 00 0B 11 3F  	DB $00, $0B, $11, $3F, $00, $00
  59++E865 00 00
  60++E867 04 0B 02 3F  	DB $04, $0B, $02, $3F, $00, $00
  60++E86B 00 00
  61++E86D 19 0B 02 3F  	DB $19, $0B, $02, $3F, $00, $00
  61++E871 00 00
  62++E873 0E 0B 02 3F  	DB $0E, $0B, $02, $3F, $00, $00
  62++E877 00 00
  63++E879 0E 0B 11 3F  	DB $0E, $0B, $11, $3F, $00, $00
  63++E87D 00 00
  64++E87F 31 0B 02 3F  	DB $31, $0B, $02, $3F, $00, $00
  64++E883 00 00
  65++E885 1C 0B 02 3F  	DB $1C, $0B, $02, $3F, $00, $00
  65++E889 00 00
  66++E88B 1C 0B 0A 3F  	DB $1C, $0B, $0A, $3F, $00, $00
  66++E88F 00 00
  67++E891 1C 0B 11 3F  	DB $1C, $0B, $11, $3F, $00, $00
  67++E895 00 00
  68++E897 31 0B 11 3F  	DB $31, $0B, $11, $3F, $00, $00
  68++E89B 00 00
  69++E89D 31 0B 0A 3F  	DB $31, $0B, $0A, $3F, $00, $00
  69++E8A1 00 00
  70++E8A3
  71++E8A3              LogoVertSize: equ $ - LogoVertices
  72++E8A3
  73++E8A3
  74++E8A3
  75++E8A3 1F 00 00 04  LogoEdges:	DB $1F, $00, $00, $04
  76++E8A7 1F 00 04 08  	DB $1F, $00, $04, $08
  77++E8AB 1F 00 08 0C  	DB $1F, $00, $08, $0C
  78++E8AF 1F 00 0C 10  	DB $1F, $00, $0C, $10
  79++E8B3 1F 00 10 14  	DB $1F, $00, $10, $14
  80++E8B7 1F 00 14 18  	DB $1F, $00, $14, $18
  81++E8BB 1F 00 18 1C  	DB $1F, $00, $18, $1C
  82++E8BF 1F 00 1C 20  	DB $1F, $00, $1C, $20
  83++E8C3 1F 00 20 24  	DB $1F, $00, $20, $24
  84++E8C7 1F 00 24 28  	DB $1F, $00, $24, $28
  85++E8CB 1F 00 28 2C  	DB $1F, $00, $28, $2C
  86++E8CF 1F 00 2C 00  	DB $1F, $00, $2C, $00
  87++E8D3 1E 03 38 3C  	DB $1E, $03, $38, $3C
  88++E8D7 1E 01 3C 40  	DB $1E, $01, $3C, $40
  89++E8DB 1E 04 40 44  	DB $1E, $04, $40, $44
  90++E8DF 1E 01 44 38  	DB $1E, $01, $44, $38
  91++E8E3 1E 03 10 30  	DB $1E, $03, $10, $30
  92++E8E7 1E 22 30 34  	DB $1E, $22, $30, $34
  93++E8EB 1E 04 34 20  	DB $1E, $04, $34, $20
  94++E8EF 1E 11 20 10  	DB $1E, $11, $20, $10
  95++E8F3 1E 13 10 38  	DB $1E, $13, $10, $38
  96++E8F7 1E 13 30 3C  	DB $1E, $13, $30, $3C
  97++E8FB 1E 24 34 40  	DB $1E, $24, $34, $40
  98++E8FF 1E 14 20 44  	DB $1E, $14, $20, $44
  99++E903 1E 00 54 58  	DB $1E, $00, $54, $58
 100++E907 1E 00 58 60  	DB $1E, $00, $58, $60
 101++E90B 1E 00 60 64  	DB $1E, $00, $60, $64
 102++E90F 1E 00 5C 68  	DB $1E, $00, $5C, $68
 103++E913 1E 00 6C 70  	DB $1E, $00, $6C, $70
 104++E917 1E 00 70 74  	DB $1E, $00, $70, $74
 105++E91B 1E 00 78 7C  	DB $1E, $00, $78, $7C
 106++E91F 1E 00 80 84  	DB $1E, $00, $80, $84
 107++E923 1E 00 88 8C  	DB $1E, $00, $88, $8C
 108++E927 1E 00 90 94  	DB $1E, $00, $90, $94
 109++E92B 1E 00 94 9C  	DB $1E, $00, $94, $9C
 110++E92F 1E 00 9C A0  	DB $1E, $00, $9C, $A0
 111++E933 1E 00 A4 98  	DB $1E, $00, $A4, $98
 112++E937
 113++E937              LogoEdgesSize: equ $ - LogoEdges
 114++E937
 115++E937
 116++E937              LogoEdgesCnt: equ LogoEdgesSize/4
 117++E937
 118++E937
 119++E937 1F 00 17 00  LogoNormals:	DB $1F, $00, $17, $00
 120++E93B 1F 00 04 0F  	DB $1F, $00, $04, $0F
 121++E93F 3F 00 0D 34  	DB $3F, $00, $0D, $34
 122++E943 9F 51 51 00  	DB $9F, $51, $51, $00
 123++E947 1F 51 51 00  	DB $1F, $51, $51, $00
 124++E94B
 125++E94B
 126++E94B              LogoNormalsSize: equ $ - LogoNormals
 127++E94B              LogoLen: equ $ - Logo
 128++E94B
# file closed: ./Data/ships/Logo.asm
  90+ E94B                                      include "Data/ships/Mamba.asm"
# file opened: ./Data/ships/Mamba.asm
   1++E94B 01           Mamba:	                DB $01                     ; Number of cargo canisters released when destroyed
   2++E94C 24 13                                DW $1324                   ; Ship's targetable area LoHi
   3++E94E 00 EA                                DW MambaEdges              ; Edge Data
   4++E950 70                                   DB MambaEdgesSize          ; Size of Edge Data
   5++E951 00                                   DB $00                     ; Gun Vertex Byte offset
   6++E952 22                                   DB $22                     ; Explosion Count
   7++E953 19                                   DB MambaVertSize /6        ; Vertex Count /6
   8++E954 96                                   DB MambaVertSize           ; Vertex Count
   9++E955 1C                                   DB MambaEdgesCnt           ; Edges Count
  10++E956 96 00                                DW $0096                   ; Bounty LoHi
  11++E958 14                                   DB MambaNormalsSize        ; Face (Normal) Count
  12++E959 19                                   DB $19                     ; Range when it turns to a dot
  13++E95A 5A                                   DB $5A                     ; Energy Max
  14++E95B 1E                                   DB $1E                     ; Speed Max
  15++E95C 70 EA                                DW MambaNormals            ; Normals
  16++E95E 02                                   DB $02                     ; Q scaling
  17++E95F 12                                   DB $12 | ShipMissiles2     ; Laser power and Nbr Missiles
  18++E960 6A E9                                DW MambaVertices           ; Verticles Address
  19++E962 00                                   DB ShipTypeNormal          ; Ship Type
  20++E963 00                                   DB 0                       ; NewB Tactics
  21++E964 80                                   DB ShipCanAnger            ; AI Flags
  22++E965 E0                                   DB $E0                     ; chance of ECM module
  23++E966 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E967 00 00                                DW $0000                            ; no solid data
  25++E969 00                                   DB $00                              ; no solid data
  26++E96A
  27++E96A
  28++E96A 00 00 40 1F  MambaVertices:	DB $00, $00, $40, $1F, $10, $32
  28++E96E 10 32
  29++E970 40 08 20 FF                  DB $40, $08, $20, $FF, $20, $44
  29++E974 20 44
  30++E976 20 08 20 BE                  DB $20, $08, $20, $BE, $21, $44
  30++E97A 21 44
  31++E97C 20 08 20 3E                  DB $20, $08, $20, $3E, $31, $44
  31++E980 31 44
  32++E982 40 08 20 7F                  DB $40, $08, $20, $7F, $30, $44
  32++E986 30 44
  33++E988 04 04 10 8E                  DB $04, $04, $10, $8E, $11, $11
  33++E98C 11 11
  34++E98E 04 04 10 0E                  DB $04, $04, $10, $0E, $11, $11
  34++E992 11 11
  35++E994 08 03 1C 0D                  DB $08, $03, $1C, $0D, $11, $11
  35++E998 11 11
  36++E99A 08 03 1C 8D                  DB $08, $03, $1C, $8D, $11, $11
  36++E99E 11 11
  37++E9A0 14 04 10 D4                  DB $14, $04, $10, $D4, $00, $00
  37++E9A4 00 00
  38++E9A6 14 04 10 54                  DB $14, $04, $10, $54, $00, $00
  38++E9AA 00 00
  39++E9AC 18 07 14 F4                  DB $18, $07, $14, $F4, $00, $00
  39++E9B0 00 00
  40++E9B2 10 07 14 F0                  DB $10, $07, $14, $F0, $00, $00
  40++E9B6 00 00
  41++E9B8 10 07 14 70                  DB $10, $07, $14, $70, $00, $00
  41++E9BC 00 00
  42++E9BE 18 07 14 74                  DB $18, $07, $14, $74, $00, $00
  42++E9C2 00 00
  43++E9C4 08 04 20 AD                  DB $08, $04, $20, $AD, $44, $44
  43++E9C8 44 44
  44++E9CA 08 04 20 2D                  DB $08, $04, $20, $2D, $44, $44
  44++E9CE 44 44
  45++E9D0 08 04 20 6E                  DB $08, $04, $20, $6E, $44, $44
  45++E9D4 44 44
  46++E9D6 08 04 20 EE                  DB $08, $04, $20, $EE, $44, $44
  46++E9DA 44 44
  47++E9DC 20 04 20 A7                  DB $20, $04, $20, $A7, $44, $44
  47++E9E0 44 44
  48++E9E2 20 04 20 27                  DB $20, $04, $20, $27, $44, $44
  48++E9E6 44 44
  49++E9E8 24 04 20 67                  DB $24, $04, $20, $67, $44, $44
  49++E9EC 44 44
  50++E9EE 24 04 20 E7                  DB $24, $04, $20, $E7, $44, $44
  50++E9F2 44 44
  51++E9F4 26 00 20 A5                  DB $26, $00, $20, $A5, $44, $44
  51++E9F8 44 44
  52++E9FA 26 00 20 25                  DB $26, $00, $20, $25, $44, $44
  52++E9FE 44 44
  53++EA00
  54++EA00              MambaVertSize: equ $ - MambaVertices
  55++EA00
  56++EA00
  57++EA00
  58++EA00 1F 20 00 04  MambaEdges:	DB $1F, $20, $00, $04
  59++EA04 1F 30 00 10  	DB $1F, $30, $00, $10
  60++EA08 1F 40 04 10  	DB $1F, $40, $04, $10
  61++EA0C 1E 42 04 08  	DB $1E, $42, $04, $08
  62++EA10 1E 41 08 0C  	DB $1E, $41, $08, $0C
  63++EA14 1E 43 0C 10  	DB $1E, $43, $0C, $10
  64++EA18 0E 11 14 18  	DB $0E, $11, $14, $18
  65++EA1C 0C 11 18 1C  	DB $0C, $11, $18, $1C
  66++EA20 0D 11 1C 20  	DB $0D, $11, $1C, $20
  67++EA24 0C 11 14 20  	DB $0C, $11, $14, $20
  68++EA28 14 00 24 2C  	DB $14, $00, $24, $2C
  69++EA2C 10 00 24 30  	DB $10, $00, $24, $30
  70++EA30 10 00 28 34  	DB $10, $00, $28, $34
  71++EA34 14 00 28 38  	DB $14, $00, $28, $38
  72++EA38 0E 00 34 38  	DB $0E, $00, $34, $38
  73++EA3C 0E 00 2C 30  	DB $0E, $00, $2C, $30
  74++EA40 0D 44 3C 40  	DB $0D, $44, $3C, $40
  75++EA44 0E 44 44 48  	DB $0E, $44, $44, $48
  76++EA48 0C 44 3C 48  	DB $0C, $44, $3C, $48
  77++EA4C 0C 44 40 44  	DB $0C, $44, $40, $44
  78++EA50 07 44 50 54  	DB $07, $44, $50, $54
  79++EA54 05 44 50 60  	DB $05, $44, $50, $60
  80++EA58 05 44 54 60  	DB $05, $44, $54, $60
  81++EA5C 07 44 4C 58  	DB $07, $44, $4C, $58
  82++EA60 05 44 4C 5C  	DB $05, $44, $4C, $5C
  83++EA64 05 44 58 5C  	DB $05, $44, $58, $5C
  84++EA68 1E 21 00 08  	DB $1E, $21, $00, $08
  85++EA6C 1E 31 00 0C  	DB $1E, $31, $00, $0C
  86++EA70
  87++EA70              MambaEdgesSize: equ $ - MambaEdges
  88++EA70
  89++EA70
  90++EA70              MambaEdgesCnt: equ MambaEdgesSize/4
  91++EA70
  92++EA70
  93++EA70 5E 00 18 02  MambaNormals:	DB $5E, $00, $18, $02
  94++EA74 1E 00 18 02  	DB $1E, $00, $18, $02
  95++EA78 9E 20 40 10  	DB $9E, $20, $40, $10
  96++EA7C 1E 20 40 10  	DB $1E, $20, $40, $10
  97++EA80 3E 00 00 7F  	DB $3E, $00, $00, $7F
  98++EA84
  99++EA84              MambaNormalsSize: equ $ - MambaNormals
 100++EA84              MambaLen: equ $ - Mamba
 101++EA84
# file closed: ./Data/ships/Mamba.asm
  91+ EA84                                      include "Data/ships/Missile.asm"
# file opened: ./Data/ships/Missile.asm
   1++EA84              ;    DEFINE DEBUGMODEL 1
   2++EA84 00           Missile:	            DB $00                     ; Number of cargo canisters released when destroyed
   3++EA85 40 06                                DW $0640                   ; Ship's targetable area LoHi
   4++EA87 09 EB                                DW MissileEdges            ; Edge Data
   5++EA89 60                                   DB MissileEdgesSize        ; Size of Edge Data
   6++EA8A 00                                   DB $00                     ; Gun Vertex Byte offset
   7++EA8B 0A                                   DB $0A                     ; Explosion Count
   8++EA8C 11                                   DB MissileVertSize /6      ; Vertex Count /6
   9++EA8D 66                                   DB MissileVertSize         ; Vertex Count
  10++EA8E 18                                   DB MissileEdgesCnt         ; Edges Count
  11++EA8F 00 00                                DW $0000                   ; Bounty LoHi
  12++EA91 24                                   DB MissileNormalsSize      ; Face (Normal) Count
  13++EA92 0E                                   DB $0E                     ; Range when it turns to a dot
  14++EA93 02                                   DB $02                     ; Energy Max
  15++EA94 2C                                   DB $2C                     ; Speed Max
  16++EA95 69 EB                                DW MissileNormals          ; Normals
  17++EA97 02                                   DB $02                     ; Q scaling
  18++EA98 00                                   DB $00                     ; Laser power and Nbr Missiles
  19++EA99 A3 EA                                DW MissileVertices         ; Verticles Address
  20++EA9B 01                                   DB ShipTypeMissile         ; Ship Type
  21++EA9C 00                                   DB 0                       ; NewB Tactics
  22++EA9D 00                                   DB 0                       ; AI Flags
  23++EA9E 00                                   DB $00                     ; chance of ECM module
  24++EA9F FF                                   DB $FF                              ; Supports Solid Fill = false
  25++EAA0 00 00                                DW $0000                            ; no solid data
  26++EAA2 00                                   DB $00                              ; no solid data
  27++EAA3
  28++EAA3
  29++EAA3              ;;;     Byte 0 = X magnitide with origin at middle of ship
  30++EAA3              ;;;		Byte 1 = Y magnitide with origin at middle of ship
  31++EAA3              ;;;		Byte 2 = Z magnitide with origin at middle of ship
  32++EAA3              ;;;		Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
  33++EAA3              ;;;		Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  34++EAA3              ;;;		Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
  35++EAA3              MissileVertices:    IFDEF DEBUGMODEL
  36++EAA3 ~                                    DB $00,$50,$00,$1F,$00,$00  ; 00 00 Y Tip (Roof)
  37++EAA3 ~                                    DB $00,$00,$00,$1F,$00,$00  ; 01 04 Y base for all nodes
  38++EAA3 ~                                    DB $50,$00,$00,$1F,$01,$01  ; 02 08 X Tip (Side)
  39++EAA3 ~                                    DB $00,$00,$00,$1F,$01,$01  ; 03 0C X Base
  40++EAA3 ~                                    DB $00,$00,$30,$1F,$02,$02  ; 04 10 Z Tip (Nose1)
  41++EAA3 ~                                    DB $00,$00,$00,$1F,$02,$03  ; 05 14 Z base
  42++EAA3 ~                                    DB $04,$00,$25,$9F,$03,$03  ; 06 18 Z Trangle point 1
  43++EAA3 ~                                    DB $04,$00,$25,$1F,$03,$03  ; 07 1C Z Trangle point 2
  44++EAA3 ~                                    DB $05,$10,$00,$9F,$00,$00  ; 08 20 Y Cross Member 1
  45++EAA3 ~                                    DB $05,$10,$00,$1F,$00,$00  ; 09 24 Y Cross Member 2
  46++EAA3 ~                                    DB $10,$05,$00,$1F,$00,$00  ; 10 28 X Cross Member 1
  47++EAA3 ~                                    DB $20,$00,$00,$1F,$00,$00  ; 11 2C X Cross Member 2
  48++EAA3 ~                                    DB $10,$05,$00,$5F,$00,$00  ; 12 30 X Cross Member 3
  49++EAA3                                  ELSE
  50++EAA3 00 00 44 1F                          DB $00, $00, $44, $1F, $10, $32
  50++EAA7 10 32
  51++EAA9 08 08 24 5F                          DB $08, $08, $24, $5F, $21, $54
  51++EAAD 21 54
  52++EAAF 08 08 24 1F                          DB $08, $08, $24, $1F, $32, $74
  52++EAB3 32 74
  53++EAB5 08 08 24 9F                          DB $08, $08, $24, $9F, $30, $76
  53++EAB9 30 76
  54++EABB 08 08 24 DF                          DB $08, $08, $24, $DF, $10, $65
  54++EABF 10 65
  55++EAC1 08 08 2C 3F                          DB $08, $08, $2C, $3F, $74, $88
  55++EAC5 74 88
  56++EAC7 08 08 2C 7F                          DB $08, $08, $2C, $7F, $54, $88
  56++EACB 54 88
  57++EACD 08 08 2C FF                          DB $08, $08, $2C, $FF, $65, $88
  57++EAD1 65 88
  58++EAD3 08 08 2C BF                          DB $08, $08, $2C, $BF, $76, $88
  58++EAD7 76 88
  59++EAD9 0C 0C 2C 28                          DB $0C, $0C, $2C, $28, $74, $88
  59++EADD 74 88
  60++EADF 0C 0C 2C 68                          DB $0C, $0C, $2C, $68, $54, $88
  60++EAE3 54 88
  61++EAE5 0C 0C 2C E8                          DB $0C, $0C, $2C, $E8, $65, $88
  61++EAE9 65 88
  62++EAEB 0C 0C 2C A8                          DB $0C, $0C, $2C, $A8, $76, $88
  62++EAEF 76 88
  63++EAF1 08 08 0C A8                          DB $08, $08, $0C, $A8, $76, $77
  63++EAF5 76 77
  64++EAF7 08 08 0C E8                          DB $08, $08, $0C, $E8, $65, $66
  64++EAFB 65 66
  65++EAFD 08 08 0C 28                          DB $08, $08, $0C, $28, $74, $77
  65++EB01 74 77
  66++EB03 08 08 0C 68                          DB $08, $08, $0C, $68, $54, $55
  66++EB07 54 55
  67++EB09                                  ENDIF
  68++EB09              MissileVertSize: equ $ - MissileVertices
  69++EB09
  70++EB09              ;;;     Byte 0 = Edge visbility Distance if > XX4 distance then won't show
  71++EB09              ;;;		Byte 1 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  72++EB09              ;;;		Byte 2 = Byte offset to Point 1 (divide by 4 for index)
  73++EB09              ;;;		Byte 3 = Byte offset to Point 2 (divide by 4 for index)
  74++EB09
  75++EB09              MissileEdges:	    IFDEF DEBUGMODEL
  76++EB09 ~                                    DB $1F,$00,$00,$04 ; Y
  77++EB09 ~                                    DB $1F,$00,$08,$0C ; X
  78++EB09 ~                                    DB $1F,$00,$10,$14 ; Z
  79++EB09 ~                                    DB $1F,$00,$10,$18 ; Z Tip Traingle 1
  80++EB09 ~                                    DB $1F,$00,$10,$1C ; Z Tip Traingle 2
  81++EB09 ~                                    DB $1F,$00,$1C,$18 ; Z Tip Traingle 2
  82++EB09 ~                                    DB $1F,$00,$20,$24 ; Y Cross memeber
  83++EB09 ~                                    DB $1F,$00,$28,$2C ; X Triangle
  84++EB09 ~                                    DB $1F,$00,$2C,$30 ; X Triangle
  85++EB09 ~                                    ;DB $1F,$00,$18,$1C
  86++EB09                                  ELSE
  87++EB09 1F 21 00 04                          DB $1F, $21, $00, $04
  88++EB0D 1F 32 00 08                          DB $1F, $32, $00, $08
  89++EB11 1F 30 00 0C                          DB $1F, $30, $00, $0C
  90++EB15 1F 10 00 10                          DB $1F, $10, $00, $10
  91++EB19 1F 24 04 08                          DB $1F, $24, $04, $08
  92++EB1D 1F 51 04 10                          DB $1F, $51, $04, $10
  93++EB21 1F 60 0C 10                          DB $1F, $60, $0C, $10
  94++EB25 1F 73 08 0C                          DB $1F, $73, $08, $0C
  95++EB29 1F 74 08 14                          DB $1F, $74, $08, $14
  96++EB2D 1F 54 04 18                          DB $1F, $54, $04, $18
  97++EB31 1F 65 10 1C                          DB $1F, $65, $10, $1C
  98++EB35 1F 76 0C 20                          DB $1F, $76, $0C, $20
  99++EB39 1F 86 1C 20                          DB $1F, $86, $1C, $20
 100++EB3D 1F 87 14 20                          DB $1F, $87, $14, $20
 101++EB41 1F 84 14 18                          DB $1F, $84, $14, $18
 102++EB45 1F 85 18 1C                          DB $1F, $85, $18, $1C
 103++EB49 08 85 18 28                          DB $08, $85, $18, $28
 104++EB4D 08 87 14 24                          DB $08, $87, $14, $24
 105++EB51 08 87 20 30                          DB $08, $87, $20, $30
 106++EB55 08 85 1C 2C                          DB $08, $85, $1C, $2C
 107++EB59 08 74 24 3C                          DB $08, $74, $24, $3C
 108++EB5D 08 54 28 40                          DB $08, $54, $28, $40
 109++EB61 08 76 30 34                          DB $08, $76, $30, $34
 110++EB65 08 65 2C 38                          DB $08, $65, $2C, $38
 111++EB69                                  ENDIF
 112++EB69              MissileEdgesSize: equ $ - MissileEdges
 113++EB69
 114++EB69
 115++EB69              MissileEdgesCnt: equ MissileEdgesSize/4
 116++EB69
 117++EB69              ;;;		Byte 0 = Sign Bits of Vertex 7=X 6=Y 5 = Z, bits 4 to 0 are distance for always visible
 118++EB69              ;;;		Byte 1 = X Lo
 119++EB69              ;;;		Byte 2 = Y Lo
 120++EB69              ;;;		Byte 3 = Z Lo
 121++EB69              MissileNormals:	    IFDEF DEBUGMODEL
 122++EB69 ~                                    DB $1F,$00,$10,$00
 123++EB69 ~                                    DB $1F,$10,$00,$00
 124++EB69 ~                                    DB $1F,$00,$00,$10
 125++EB69 ~                                    DB $1F,$00,$00,$10
 126++EB69                                  ELSE
 127++EB69 9F 40 00 10                          DB $9F, $40, $00, $10
 128++EB6D 5F 00 40 10                          DB $5F, $00, $40, $10
 129++EB71 1F 40 00 10                          DB $1F, $40, $00, $10
 130++EB75 1F 00 40 10                          DB $1F, $00, $40, $10
 131++EB79 1F 20 00 00                          DB $1F, $20, $00, $00
 132++EB7D 5F 00 20 00                          DB $5F, $00, $20, $00
 133++EB81 9F 20 00 00                          DB $9F, $20, $00, $00
 134++EB85 1F 00 20 00                          DB $1F, $00, $20, $00
 135++EB89 3F 00 00 B0                          DB $3F, $00, $00, $B0
 136++EB8D                                  ENDIF
 137++EB8D
 138++EB8D              MissileNormalsSize: equ $ - MissileNormals
 139++EB8D              MissileLen: equ $ - Missile
 140++EB8D
# file closed: ./Data/ships/Missile.asm
  92+ EB8D                                      include "Data/ships/Monitor.asm"
# file opened: ./Data/ships/Monitor.asm
   1++EB8D 04           Monitor:	            DB $04                     ; Number of cargo canisters released when destroyed
   2++EB8E 00 36                                DW $3600                   ; Ship's targetable area LoHi
   3++EB90 12 EC                                DW MonitorEdges            ; Edge Data
   4++EB92 5C                                   DB MonitorEdgesSize        ; Size of Edge Data
   5++EB93 00                                   DB $00                     ; Gun Vertex Byte offset
   6++EB94 2A                                   DB $2A                     ; Explosion Count
   7++EB95 11                                   DB MonitorVertSize /6      ; Vertex Count /6
   8++EB96 66                                   DB MonitorVertSize         ; Vertex Count
   9++EB97 17                                   DB MonitorEdgesCnt         ; Edges Count
  10++EB98 90 01                                DW $0190                   ; Bounty LoHi
  11++EB9A 2C                                   DB MonitorNormalsSize      ; Face (Normal) Count
  12++EB9B 28                                   DB $28                     ; Range when it turns to a dot
  13++EB9C 84                                   DB $84                     ; Energy Max
  14++EB9D 10                                   DB $10                     ; Speed Max
  15++EB9E 6E EC                                DW MonitorNormals          ; Normals
  16++EBA0 00                                   DB $00                     ; Q scaling
  17++EBA1 37                                   DB $37                     ; Laser power and Nbr Missiles
  18++EBA2 AC EB                                DW MonitorVertices         ; Verticles Address
  19++EBA4 00                                   DB ShipTypeNormal          ; Ship Type
  20++EBA5 00                                   DB 0                       ; NewB Tactics
  21++EBA6 80                                   DB ShipCanAnger            ; AI Flags
  22++EBA7 40                                   DB $40                     ; chance of ECM module
  23++EBA8 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EBA9 00 00                                DW $0000                            ; no solid data
  25++EBAB 00                                   DB $00                              ; no solid data
  26++EBAC
  27++EBAC
  28++EBAC 00 0A 8C 1F  MonitorVertices:	    DB $00, $0A, $8C, $1F, $FF, $FF
  28++EBB0 FF FF
  29++EBB2 14 28 14 3F                          DB $14, $28, $14, $3F, $23, $01
  29++EBB6 23 01
  30++EBB8 14 28 14 BF                          DB $14, $28, $14, $BF, $50, $34
  30++EBBC 50 34
  31++EBBE 32 00 0A 1F                          DB $32, $00, $0A, $1F, $78, $12
  31++EBC2 78 12
  32++EBC4 32 00 0A 9F                          DB $32, $00, $0A, $9F, $96, $45
  32++EBC8 96 45
  33++EBCA 1E 04 3C 3F                          DB $1E, $04, $3C, $3F, $AA, $28
  33++EBCE AA 28
  34++EBD0 1E 04 3C BF                          DB $1E, $04, $3C, $BF, $AA, $49
  34++EBD4 AA 49
  35++EBD6 12 14 3C 3F                          DB $12, $14, $3C, $3F, $AA, $23
  35++EBDA AA 23
  36++EBDC 12 14 3C BF                          DB $12, $14, $3C, $BF, $AA, $34
  36++EBE0 AA 34
  37++EBE2 00 14 3C 7F                          DB $00, $14, $3C, $7F, $AA, $89
  37++EBE6 AA 89
  38++EBE8 00 28 0A 5F                          DB $00, $28, $0A, $5F, $89, $67
  38++EBEC 89 67
  39++EBEE 00 22 0A 0A                          DB $00, $22, $0A, $0A, $00, $00
  39++EBF2 00 00
  40++EBF4 00 1A 32 0A                          DB $00, $1A, $32, $0A, $00, $00
  40++EBF8 00 00
  41++EBFA 14 0A 3C 4A                          DB $14, $0A, $3C, $4A, $77, $77
  41++EBFE 77 77
  42++EC00 0A 00 64 0A                          DB $0A, $00, $64, $0A, $77, $77
  42++EC04 77 77
  43++EC06 14 0A 3C CA                          DB $14, $0A, $3C, $CA, $66, $66
  43++EC0A 66 66
  44++EC0C 0A 00 64 8A                          DB $0A, $00, $64, $8A, $66, $66
  44++EC10 66 66
  45++EC12              MonitorVertSize:        equ $ - MonitorVertices
  46++EC12 1F 01 00 04  MonitorEdges:	        DB $1F, $01, $00, $04
  47++EC16 1F 12 04 0C  	                    DB $1F, $12, $04, $0C
  48++EC1A 1F 23 04 1C                          DB $1F, $23, $04, $1C
  49++EC1E 1F 34 08 20                          DB $1F, $34, $08, $20
  50++EC22 1F 45 08 10                          DB $1F, $45, $08, $10
  51++EC26 1F 50 00 08                          DB $1F, $50, $00, $08
  52++EC2A 1F 03 04 08                          DB $1F, $03, $04, $08
  53++EC2E 1F 67 00 28                          DB $1F, $67, $00, $28
  54++EC32 1F 78 0C 28                          DB $1F, $78, $0C, $28
  55++EC36 1F 89 24 28                          DB $1F, $89, $24, $28
  56++EC3A 1F 96 10 28                          DB $1F, $96, $10, $28
  57++EC3E 1F 17 00 0C                          DB $1F, $17, $00, $0C
  58++EC42 1F 28 0C 14                          DB $1F, $28, $0C, $14
  59++EC46 1F 49 18 10                          DB $1F, $49, $18, $10
  60++EC4A 1F 56 10 00                          DB $1F, $56, $10, $00
  61++EC4E 1F 2A 1C 14                          DB $1F, $2A, $1C, $14
  62++EC52 1F 3A 20 1C                          DB $1F, $3A, $20, $1C
  63++EC56 1F 4A 20 18                          DB $1F, $4A, $20, $18
  64++EC5A 1F 8A 14 24                          DB $1F, $8A, $14, $24
  65++EC5E 1F 9A 18 24                          DB $1F, $9A, $18, $24
  66++EC62 0A 00 2C 30                          DB $0A, $00, $2C, $30
  67++EC66 0A 77 34 38                          DB $0A, $77, $34, $38
  68++EC6A 0A 66 3C 40                          DB $0A, $66, $3C, $40
  69++EC6E              MonitorEdgesSize:       equ $ - MonitorEdges
  70++EC6E              MonitorEdgesCnt:        equ MonitorEdgesSize/4
  71++EC6E 1F 00 3E 0B  MonitorNormals:	        DB $1F, $00, $3E, $0B
  72++EC72 1F 2C 2B 0D                          DB $1F, $2C, $2B, $0D
  73++EC76 3F 36 1C 10                          DB $3F, $36, $1C, $10
  74++EC7A 3F 00 39 1C                          DB $3F, $00, $39, $1C
  75++EC7E BF 36 1C 10                          DB $BF, $36, $1C, $10
  76++EC82 9F 2C 2B 0D                          DB $9F, $2C, $2B, $0D
  77++EC86 DF 26 2F 12                          DB $DF, $26, $2F, $12
  78++EC8A 5F 26 2F 12                          DB $5F, $26, $2F, $12
  79++EC8E 7F 27 30 0D                          DB $7F, $27, $30, $0D
  80++EC92 FF 27 30 0D                          DB $FF, $27, $30, $0D
  81++EC96 3F 00 00 40                          DB $3F, $00, $00, $40
  82++EC9A              MonitorNormalsSize:     equ $ - MonitorNormals
  83++EC9A              MonitorLen:             equ $ - Monitor
  84++EC9A
# file closed: ./Data/ships/Monitor.asm
  93+ EC9A                                      include "Data/ships/Moray.asm"
# file opened: ./Data/ships/Moray.asm
   1++EC9A 01           Moray:	                DB $01                    ; Number of cargo canisters released when destroyed
   2++EC9B 84 03                                DW $0384                  ; Ship's targetable area LoHi
   3++EC9D 0D ED                                DW MorayEdges             ; Edge Data
   4++EC9F 4C                                   DB MorayEdgesSize         ; Size of Edge Data
   5++ECA0 00                                   DB $00                    ; Gun Vertex Byte offset
   6++ECA1 1A                                   DB $1A                    ; Explosion Count
   7++ECA2 0E                                   DB MorayVertSize /6       ; Vertex Count /6
   8++ECA3 54                                   DB MorayVertSize          ; Vertex Count
   9++ECA4 13                                   DB MorayEdgesCnt          ; Edges Count
  10++ECA5 32 00                                DW $0032                  ; Bounty LoHi
  11++ECA7 24                                   DB MorayNormalsSize       ; Face (Normal) Count
  12++ECA8 28                                   DB $28                    ; Range when it turns to a dot
  13++ECA9 59                                   DB $59                    ; Energy Max
  14++ECAA 19                                   DB $19                    ; Speed Max
  15++ECAB 59 ED                                DW MorayNormals           ; Normals
  16++ECAD 02                                   DB $02                    ; Q scaling
  17++ECAE 2A                                   DB $2A                    ; Laser power and Nbr Missiles
  18++ECAF B9 EC                                DW MorayVertices          ; Verticles Address
  19++ECB1 00                                   DB ShipTypeNormal         ; Ship Type
  20++ECB2 00                                   DB 0                      ; NewB Tactics
  21++ECB3 80                                   DB ShipCanAnger           ; AI Flags
  22++ECB4 C0                                   DB $C0                    ; chance of ECM module
  23++ECB5 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++ECB6 00 00                                DW $0000                            ; no solid data
  25++ECB8 00                                   DB $00                              ; no solid data
  26++ECB9
  27++ECB9
  28++ECB9 0F 00 41 1F  MorayVertices:	        DB $0F, $00, $41, $1F, $02, $78
  28++ECBD 02 78
  29++ECBF 0F 00 41 9F                          DB $0F, $00, $41, $9F, $01, $67
  29++ECC3 01 67
  30++ECC5 00 12 28 31                          DB $00, $12, $28, $31, $FF, $FF
  30++ECC9 FF FF
  31++ECCB 3C 00 00 9F                          DB $3C, $00, $00, $9F, $13, $66
  31++ECCF 13 66
  32++ECD1 3C 00 00 1F                          DB $3C, $00, $00, $1F, $25, $88
  32++ECD5 25 88
  33++ECD7 1E 1B 0A 78                          DB $1E, $1B, $0A, $78, $45, $78
  33++ECDB 45 78
  34++ECDD 1E 1B 0A F8                          DB $1E, $1B, $0A, $F8, $34, $67
  34++ECE1 34 67
  35++ECE3 09 04 19 E7                          DB $09, $04, $19, $E7, $44, $44
  35++ECE7 44 44
  36++ECE9 09 04 19 67                          DB $09, $04, $19, $67, $44, $44
  36++ECED 44 44
  37++ECEF 00 12 10 67                          DB $00, $12, $10, $67, $44, $44
  37++ECF3 44 44
  38++ECF5 0D 03 31 05                          DB $0D, $03, $31, $05, $00, $00
  38++ECF9 00 00
  39++ECFB 06 00 41 05                          DB $06, $00, $41, $05, $00, $00
  39++ECFF 00 00
  40++ED01 0D 03 31 85                          DB $0D, $03, $31, $85, $00, $00
  40++ED05 00 00
  41++ED07 06 00 41 85                          DB $06, $00, $41, $85, $00, $00
  41++ED0B 00 00
  42++ED0D              MorayVertSize:          equ $ - MorayVertices
  43++ED0D 1F 07 00 04  MorayEdges:	            DB $1F, $07, $00, $04
  44++ED11 1F 16 04 0C                          DB $1F, $16, $04, $0C
  45++ED15 18 36 0C 18                          DB $18, $36, $0C, $18
  46++ED19 18 47 14 18                          DB $18, $47, $14, $18
  47++ED1D 18 58 10 14                          DB $18, $58, $10, $14
  48++ED21 1F 28 00 10                          DB $1F, $28, $00, $10
  49++ED25 0F 67 04 18                          DB $0F, $67, $04, $18
  50++ED29 0F 78 00 14                          DB $0F, $78, $00, $14
  51++ED2D 0F 02 00 08                          DB $0F, $02, $00, $08
  52++ED31 0F 01 04 08                          DB $0F, $01, $04, $08
  53++ED35 11 13 08 0C                          DB $11, $13, $08, $0C
  54++ED39 11 25 08 10                          DB $11, $25, $08, $10
  55++ED3D 0D 45 08 14                          DB $0D, $45, $08, $14
  56++ED41 0D 34 08 18                          DB $0D, $34, $08, $18
  57++ED45 05 44 1C 20                          DB $05, $44, $1C, $20
  58++ED49 07 44 1C 24                          DB $07, $44, $1C, $24
  59++ED4D 07 44 20 24                          DB $07, $44, $20, $24
  60++ED51 05 00 28 2C                          DB $05, $00, $28, $2C
  61++ED55 05 00 30 34                          DB $05, $00, $30, $34
  62++ED59              MorayEdgesSize:         equ $ - MorayEdges
  63++ED59              MorayEdgesCnt:          equ MorayEdgesSize/4
  64++ED59 1F 00 2B 07  MorayNormals:	        DB $1F, $00, $2B, $07
  65++ED5D 9F 0A 31 07                          DB $9F, $0A, $31, $07
  66++ED61 1F 0A 31 07                          DB $1F, $0A, $31, $07
  67++ED65 F8 3B 1C 65                          DB $F8, $3B, $1C, $65
  68++ED69 78 00 34 4E                          DB $78, $00, $34, $4E
  69++ED6D 78 3B 1C 65                          DB $78, $3B, $1C, $65
  70++ED71 DF 48 63 32                          DB $DF, $48, $63, $32
  71++ED75 5F 00 53 1E                          DB $5F, $00, $53, $1E
  72++ED79 5F 48 63 32                          DB $5F, $48, $63, $32
  73++ED7D
  74++ED7D              MorayNormalsSize:       equ $ - MorayNormals
  75++ED7D              MorayLen:               equ $ - Moray
  76++ED7D
# file closed: ./Data/ships/Moray.asm
  94+ ED7D                                      include "Data/ships/Ophidian.asm"
# file opened: ./Data/ships/Ophidian.asm
   1++ED7D 02           Ophidian:	            DB $02                     ; Number of cargo canisters released when destroyed
   2++ED7E 88 0E                                DW $0E88                   ; Ship's targetable area LoHi
   3++ED80 14 EE                                DW OphidianEdges           ; Edge Data
   4++ED82 78                                   DB OphidianEdgesSize       ; Size of Edge Data
   5++ED83 00                                   DB $00                     ; Gun Vertex Byte offset
   6++ED84 3C                                   DB $3C                     ; Explosion Count
   7++ED85 14                                   DB OphidianVertSize /6     ; Vertex Count /6
   8++ED86 78                                   DB OphidianVertSize        ; Vertex Count
   9++ED87 1E                                   DB OphidianEdgesCnt        ; Edges Count
  10++ED88 32 00                                DW $0032                   ; Bounty LoHi
  11++ED8A 30                                   DB OphidianNormalsSize     ; Face (Normal) Count
  12++ED8B 14                                   DB $14                     ; Range when it turns to a dot
  13++ED8C 40                                   DB $40                     ; Energy Max
  14++ED8D 22                                   DB $22                     ; Speed Max
  15++ED8E 8C EE                                DW OphidianNormals         ; Normals
  16++ED90 01                                   DB $01                     ; Q scaling
  17++ED91 1A                                   DB $1A                     ; Laser power and Nbr Missiles
  18++ED92 9C ED                                DW OphidianVertices        ; Verticles Address
  19++ED94 00                                   DB ShipTypeNormal          ; Ship Type
  20++ED95 00                                   DB 0                       ; NewB Tactics
  21++ED96 80                                   DB ShipCanAnger            ; AI Flags
  22++ED97 C0                                   DB $C0                     ; chance of ECM module
  23++ED98 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++ED99 00 00                                DW $0000                            ; no solid data
  25++ED9B 00                                   DB $00                              ; no solid data
  26++ED9C
  27++ED9C
  28++ED9C 14 00 46 9F  OphidianVertices:	    DB $14, $00, $46, $9F, $68, $02 ; 01
  28++EDA0 68 02
  29++EDA2 14 00 46 1F                          DB $14, $00, $46, $1F, $67, $01 ; 02
  29++EDA6 67 01
  30++EDA8 00 0A 28 1F                          DB $00, $0A, $28, $1F, $22, $01 ; 03
  30++EDAC 22 01
  31++EDAE 1E 00 1E 9F                          DB $1E, $00, $1E, $9F, $8A, $24 ; 04
  31++EDB2 8A 24
  32++EDB4 1E 00 1E 1F                          DB $1E, $00, $1E, $1F, $79, $13 ; 05
  32++EDB8 79 13
  33++EDBA 00 10 0A 1F                          DB $00, $10, $0A, $1F, $FF, $FF ; 06
  33++EDBE FF FF
  34++EDC0 14 0A 32 3F                          DB $14, $0A, $32, $3F, $9B, $35 ; 07
  34++EDC4 9B 35
  35++EDC6 14 0A 32 BF                          DB $14, $0A, $32, $BF, $AB, $45 ; 08
  35++EDCA AB 45
  36++EDCC 1E 00 32 BF                          DB $1E, $00, $32, $BF, $BB, $4A ; 09
  36++EDD0 BB 4A
  37++EDD2 28 00 32 B0                          DB $28, $00, $32, $B0, $FF, $FF ; 10
  37++EDD6 FF FF
  38++EDD8 1E 00 1E B0                          DB $1E, $00, $1E, $B0, $FF, $FF ; 11
  38++EDDC FF FF
  39++EDDE 1E 00 32 3F                          DB $1E, $00, $32, $3F, $BB, $39 ; 12
  39++EDE2 BB 39
  40++EDE4 28 00 32 30                          DB $28, $00, $32, $30, $FF, $FF ; 13
  40++EDE8 FF FF
  41++EDEA 1E 00 1E 30                          DB $1E, $00, $1E, $30, $FF, $FF ; 14
  41++EDEE FF FF
  42++EDF0 00 0A 32 7F                          DB $00, $0A, $32, $7F, $BB, $9A ; 15
  42++EDF4 BB 9A
  43++EDF6 00 10 14 5F                          DB $00, $10, $14, $5F, $FF, $FF ; 16
  43++EDFA FF FF
  44++EDFC 0A 04 32 30                          DB $0A, $04, $32, $30, $BB, $BB ; 17
  44++EE00 BB BB
  45++EE02 0A 02 32 70                          DB $0A, $02, $32, $70, $BB, $BB ; 18
  45++EE06 BB BB
  46++EE08 0A 02 32 F0                          DB $0A, $02, $32, $F0, $BB, $BB ; 19
  46++EE0C BB BB
  47++EE0E 0A 04 32 B0                          DB $0A, $04, $32, $B0, $BB, $BB ; 20
  47++EE12 BB BB
  48++EE14
  49++EE14              OphidianVertSize:       equ $ - OphidianVertices
  50++EE14 1F 06 00 04  OphidianEdges:	        DB $1F, $06, $00, $04
  51++EE18 1F 01 04 08                          DB $1F, $01, $04, $08
  52++EE1C 1F 02 00 08                          DB $1F, $02, $00, $08
  53++EE20 1F 12 08 14                          DB $1F, $12, $08, $14
  54++EE24 1F 13 10 14                          DB $1F, $13, $10, $14
  55++EE28 1F 24 0C 14                          DB $1F, $24, $0C, $14
  56++EE2C 1F 35 14 18                          DB $1F, $35, $14, $18
  57++EE30 1F 45 14 1C                          DB $1F, $45, $14, $1C
  58++EE34 1F 28 00 0C                          DB $1F, $28, $00, $0C
  59++EE38 1F 17 04 10                          DB $1F, $17, $04, $10
  60++EE3C 1F 39 10 2C                          DB $1F, $39, $10, $2C
  61++EE40 1F 4A 0C 20                          DB $1F, $4A, $0C, $20
  62++EE44 1F 67 04 3C                          DB $1F, $67, $04, $3C
  63++EE48 1F 68 00 3C                          DB $1F, $68, $00, $3C
  64++EE4C 1F 79 10 3C                          DB $1F, $79, $10, $3C
  65++EE50 1F 8A 0C 3C                          DB $1F, $8A, $0C, $3C
  66++EE54 1F 9A 38 3C                          DB $1F, $9A, $38, $3C
  67++EE58 1F 5B 18 1C                          DB $1F, $5B, $18, $1C
  68++EE5C 1F 3B 18 2C                          DB $1F, $3B, $18, $2C
  69++EE60 1F 4B 1C 20                          DB $1F, $4B, $1C, $20
  70++EE64 1F 9B 2C 38                          DB $1F, $9B, $2C, $38
  71++EE68 1F AB 20 38                          DB $1F, $AB, $20, $38
  72++EE6C 10 BB 40 44                          DB $10, $BB, $40, $44
  73++EE70 10 BB 44 48                          DB $10, $BB, $44, $48
  74++EE74 10 BB 48 4C                          DB $10, $BB, $48, $4C
  75++EE78 10 BB 4C 40                          DB $10, $BB, $4C, $40
  76++EE7C 10 39 30 34                          DB $10, $39, $30, $34
  77++EE80 10 39 2C 30                          DB $10, $39, $2C, $30
  78++EE84 10 4A 28 24                          DB $10, $4A, $28, $24
  79++EE88 10 4A 24 20                          DB $10, $4A, $24, $20
  80++EE8C              OphidianEdgesSize:      equ $ - OphidianEdges
  81++EE8C              OphidianEdgesCnt:       equ OphidianEdgesSize/4
  82++EE8C
  83++EE8C 1F 00 25 0C  OphidianNormals:	    DB $1F, $00, $25, $0C
  84++EE90 1F 0B 1C 05                          DB $1F, $0B, $1C, $05
  85++EE94 9F 0B 1C 05                          DB $9F, $0B, $1C, $05
  86++EE98 1F 10 22 02                          DB $1F, $10, $22, $02
  87++EE9C 9F 10 22 02                          DB $9F, $10, $22, $02
  88++EEA0 3F 00 25 03                          DB $3F, $00, $25, $03
  89++EEA4 5F 00 1F 0A                          DB $5F, $00, $1F, $0A
  90++EEA8 5F 0A 14 02                          DB $5F, $0A, $14, $02
  91++EEAC DF 0A 14 02                          DB $DF, $0A, $14, $02
  92++EEB0 7F 12 20 02                          DB $7F, $12, $20, $02
  93++EEB4 FF 12 20 02                          DB $FF, $12, $20, $02
  94++EEB8 3F 00 00 25                          DB $3F, $00, $00, $25
  95++EEBC
  96++EEBC              OphidianNormalsSize:    equ $ - OphidianNormals
  97++EEBC              OphidianLen:            equ $ - Ophidian
  98++EEBC
# file closed: ./Data/ships/Ophidian.asm
  95+ EEBC                                      include "Data/ships/Plate.asm"
# file opened: ./Data/ships/Plate.asm
   1++EEBC 80           Plate:	                DB $80                    ; Number of cargo canisters released when destroyed
   2++EEBD 64 00                                DW $0064                  ; Ship's targetable area LoHi
   3++EEBF ED EE                                DW PlateEdges             ; Edge Data
   4++EEC1 10                                   DB PlateEdgesSize         ; Size of Edge Data
   5++EEC2 00                                   DB $00                    ; Gun Vertex Byte offset
   6++EEC3 0A                                   DB $0A                    ; Explosion Count
   7++EEC4 03                                   DB PlateVertSize /6       ; Vertex Count /6
   8++EEC5 12                                   DB PlateVertSize          ; Vertex Count
   9++EEC6 04                                   DB PlateEdgesCnt          ; Edges Count
  10++EEC7 00 00                                DW $0000                  ; Bounty LoHi
  11++EEC9 04                                   DB PlateNormalsSize       ; Face (Normal) Count
  12++EECA 05                                   DB $05                    ; Range when it turns to a dot
  13++EECB 10                                   DB $10                    ; Energy Max
  14++EECC 10                                   DB $10                    ; Speed Max
  15++EECD FD EE                                DW PlateNormals           ; Normals
  16++EECF 03                                   DB $03                    ; Q scaling
  17++EED0 00                                   DB $00                    ; Laser power and Nbr Missiles
  18++EED1 DB EE                                DW PlateVertices          ; Verticles Address
  19++EED3 04                                   DB ShipTypeScoopable      ; Ship Type
  20++EED4 00                                   DB 0                      ; NewB Tactics
  21++EED5 80                                   DB ShipCanAnger           ; AI Flags
  22++EED6 00                                   DB $00                    ; chance of ECM module
  23++EED7 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EED8 00 00                                DW $0000                            ; no solid data
  25++EEDA 00                                   DB $00                              ; no solid data
  26++EEDB
  27++EEDB
  28++EEDB
  29++EEDB 0F 16 09 FF  PlateVertices:	        DB $0F, $16, $09, $FF, $FF, $FF
  29++EEDF FF FF
  30++EEE1 0F 26 09 BF                          DB $0F, $26, $09, $BF, $FF, $FF
  30++EEE5 FF FF
  31++EEE7 13 20 0B 14                          DB $13, $20, $0B, $14, $FF, $FF
  31++EEEB FF FF
  32++EEED
  33++EEED              PlateVertSize: equ $ - PlateVertices
  34++EEED
  35++EEED
  36++EEED
  37++EEED 1F FF 00 04  PlateEdges:	DB $1F, $FF, $00, $04
  38++EEF1 10 FF 04 08  	DB $10, $FF, $04, $08
  39++EEF5 14 FF 08 0C  	DB $14, $FF, $08, $0C
  40++EEF9 10 FF 0C 00  	DB $10, $FF, $0C, $00
  41++EEFD
  42++EEFD              PlateEdgesSize: equ $ - PlateEdges
  43++EEFD
  44++EEFD
  45++EEFD              PlateEdgesCnt: equ PlateEdgesSize/4
  46++EEFD
  47++EEFD
  48++EEFD 00 00 00 00  PlateNormals:	DB $00, $00, $00, $00
  49++EF01
  50++EF01
  51++EF01              PlateNormalsSize: equ $ - PlateNormals
  52++EF01              PlateLen: equ $ - Plate
  53++EF01
# file closed: ./Data/ships/Plate.asm
  96+ EF01                                      include "Data/ships/Python.asm"
# file opened: ./Data/ships/Python.asm
   1++EF01              ;\ -> &5BA1 \ Python = Type 12                                                   ; Number of cargo canisters released when destroyed
   2++EF01 05           Python:                 DB $05                                                   ; Ship's targetable area LoHi
   3++EF02 00 19                                DW $1900                                                 ; Edge Data
   4++EF04 62 EF                                DW PythonEdges                                           ; Size of Edge Data
   5++EF06 68                                   DB PythonEdgesSize                                       ; Gun Vertex Byte offset
   6++EF07 00                                   DB $00                                                   ; Explosion Count
   7++EF08 2A                                   DB $2A                                                   ; Vertex Count /6
   8++EF09 0B                                   DB PythonVertSize /6                                     ; Vertex Count
   9++EF0A 42                                   DB PythonVertSize                                        ; Edges Count
  10++EF0B 1A                                   DB PythonEdgesCnt                                        ; Bounty LoHi
  11++EF0C 00 00                                DW $0000                                                 ; Face (Normal) Count
  12++EF0E 34                                   DB PythonNormalsSize                                     ; Range when it turns to a dot
  13++EF0F 28                                   DB $28                                                   ; Energy Max
  14++EF10 FA                                   DB $FA                                                   ; Speed Max
  15++EF11 14                                   DB $14                                                   ; Normals
  16++EF12 CA EF                                DW PythonNormals                                         ; Q scaling
  17++EF14 00                                   DB $00                                                   ; Laser power and Nbr Missiles
  18++EF15 56                                   DB $50 | ShipMissiles6                                   ; Verticles Address
  19++EF16 20 EF                                DW PythonVertices                                        ; Ship Type
  20++EF18 00                                   DB ShipTypeNormal                                        ; NewB Tactics
  21++EF19 00                                   DB 0                                                     ; AI Flags
  22++EF1A 90                                   DB ShipCanAnger | ShipFighterBaySize1 | ShipFighterWorm  ; chance of ECM module
  23++EF1B E0                                   DB $E0
  24++EF1C FF                                   DB $FF                              ; Supports Solid Fill = false
  25++EF1D 00 00                                DW $0000                            ; no solid data
  26++EF1F 00                                   DB $00                              ; no solid data
  27++EF20
  28++EF20 00 00 E0 1F  PythonVertices:         DB $00, $00, $E0, $1F, $10, $32
  28++EF24 10 32
  29++EF26 00 30 30 1E                          DB $00, $30, $30, $1E, $10, $54
  29++EF2A 10 54
  30++EF2C 60 00 10 3F                          DB $60, $00, $10, $3F, $FF, $FF
  30++EF30 FF FF
  31++EF32 60 00 10 BF                          DB $60, $00, $10, $BF, $FF, $FF
  31++EF36 FF FF
  32++EF38 00 30 20 3E                          DB $00, $30, $20, $3E, $54, $98
  32++EF3C 54 98
  33++EF3E 00 18 70 3F                          DB $00, $18, $70, $3F, $89, $CC
  33++EF42 89 CC
  34++EF44 30 00 70 BF                          DB $30, $00, $70, $BF, $B8, $CC
  34++EF48 B8 CC
  35++EF4A 30 00 70 3F                          DB $30, $00, $70, $3F, $A9, $CC
  35++EF4E A9 CC
  36++EF50 00 30 30 5E                          DB $00, $30, $30, $5E, $32, $76
  36++EF54 32 76
  37++EF56 00 30 20 7E                          DB $00, $30, $20, $7E, $76, $BA
  37++EF5A 76 BA
  38++EF5C 00 18 70 7E                          DB $00, $18, $70, $7E, $BA, $CC
  38++EF60 BA CC
  39++EF62              PythonVertSize          equ $  - PythonVertices
  40++EF62 1E 32 00 20  PythonEdges:            DB $1E, $32, $00, $20, $1F, $20, $00, $0C
  40++EF66 1F 20 00 0C
  41++EF6A 1F 31 00 08                          DB $1F, $31, $00, $08, $1E, $10, $00, $04
  41++EF6E 1E 10 00 04
  42++EF72 1D 59 08 10                          DB $1D, $59, $08, $10, $1D, $51, $04, $08
  42++EF76 1D 51 04 08
  43++EF7A 1D 37 08 20                          DB $1D, $37, $08, $20, $1D, $40, $04, $0C
  43++EF7E 1D 40 04 0C
  44++EF82 1D 62 0C 20                          DB $1D, $62, $0C, $20, $1D, $A7, $08, $24
  44++EF86 1D A7 08 24
  45++EF8A 1D 84 0C 10                          DB $1D, $84, $0C, $10, $1D, $B6, $0C, $24
  45++EF8E 1D B6 0C 24
  46++EF92 05 88 0C 14                          DB $05, $88, $0C, $14, $05, $BB, $0C, $28
  46++EF96 05 BB 0C 28
  47++EF9A 05 99 08 14                          DB $05, $99, $08, $14, $05, $AA, $08, $28
  47++EF9E 05 AA 08 28
  48++EFA2 1F A9 08 1C                          DB $1F, $A9, $08, $1C, $1F, $B8, $0C, $18
  48++EFA6 1F B8 0C 18
  49++EFAA 1F C8 14 18                          DB $1F, $C8, $14, $18, $1F, $C9, $14, $1C
  49++EFAE 1F C9 14 1C
  50++EFB2 1D AC 1C 28                          DB $1D, $AC, $1C, $28, $1D, $CB, $18, $28
  50++EFB6 1D CB 18 28
  51++EFBA 1D 98 10 14                          DB $1D, $98, $10, $14, $1D, $BA, $24, $28
  51++EFBE 1D BA 24 28
  52++EFC2 1D 54 04 10                          DB $1D, $54, $04, $10, $1D, $76, $20, $24
  52++EFC6 1D 76 20 24
  53++EFCA              PythonEdgesSize         equ $  - PythonEdges
  54++EFCA              PythonEdgesCnt          equ PythonEdgesSize/4
  55++EFCA 9E 1B 28 0B  PythonNormals           DB $9E, $1B, $28, $0B, $1E, $1B, $28, $0B
  55++EFCE 1E 1B 28 0B
  56++EFD2 DE 1B 28 0B                          DB $DE, $1B, $28, $0B, $5E, $1B, $28, $0B
  56++EFD6 5E 1B 28 0B
  57++EFDA 9E 13 26 00                          DB $9E, $13, $26, $00, $1E, $13, $26, $00
  57++EFDE 1E 13 26 00
  58++EFE2 DE 13 26 00                          DB $DE, $13, $26, $00, $5E, $13, $26, $00
  58++EFE6 5E 13 26 00
  59++EFEA BE 19 25 0B                          DB $BE, $19, $25, $0B, $3E, $19, $25, $0B
  59++EFEE 3E 19 25 0B
  60++EFF2 7E 19 25 0B                          DB $7E, $19, $25, $0B, $FE, $19, $25, $0B
  60++EFF6 FE 19 25 0B
  61++EFFA 3E 00 00 70                          DB $3E, $00, $00, $70
  62++EFFE              PythonNormalsSize       equ $  - PythonNormals
  63++EFFE              PythonLen               equ $  - Python
  64++EFFE
# file closed: ./Data/ships/Python.asm
  97+ EFFE                                      include "Data/ships/Python_P.asm"
# file opened: ./Data/ships/Python_P.asm
   1++EFFE 02           Python_P:	            DB $02                           ; Number of cargo canisters released when destroyed
   2++EFFF 00 19                                DW $1900                         ; Ship's targetable area LoHi
   3++F001 5F F0                                DW Python_PEdges                 ; Edge Data
   4++F003 68                                   DB Python_PEdgesSize             ; Size of Edge Data
   5++F004 00                                   DB $00                           ; Gun Vertex Byte offset
   6++F005 2A                                   DB $2A                           ; Explosion Count
   7++F006 0B                                   DB Python_PVertSize /6           ; Vertex Count /6
   8++F007 42                                   DB Python_PVertSize              ; Vertex Count
   9++F008 1A                                   DB Python_PEdgesCnt              ; Edges Count
  10++F009 C8 00                                DW $00C8                         ; Bounty LoHi
  11++F00B 34                                   DB Python_PNormalsSize           ; Face (Normal) Count
  12++F00C 28                                   DB $28                           ; Range when it turns to a dot
  13++F00D FA                                   DB $FA                           ; Energy Max
  14++F00E 14                                   DB $14                           ; Speed Max
  15++F00F C7 F0                                DW Python_PNormals               ; Normals
  16++F011 00                                   DB $00                           ; Q scaling
  17++F012 66                                   DB $60 | ShipMissiles6           ; Laser power and Nbr Missiles
  18++F013 1D F0                                DW Python_PVertices              ; Verticles Address
  19++F015 00                                   DB ShipTypeNormal                ; Ship Type
  20++F016 00                                   DB 0                             ; NewB Tactics
  21++F017 80                                   DB ShipCanAnger                  ; AI Flags
  22++F018 F0                                   DB $F0                           ; chance of ECM module
  23++F019 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++F01A 00 00                                DW $0000                            ; no solid data
  25++F01C 00                                   DB $00                              ; no solid data
  26++F01D
  27++F01D
  28++F01D 00 00 E0 1F  Python_PVertices:	    DB $00, $00, $E0, $1F, $10, $32
  28++F021 10 32
  29++F023 00 30 30 1F                          DB $00, $30, $30, $1F, $10, $54
  29++F027 10 54
  30++F029 60 00 10 3F                          DB $60, $00, $10, $3F, $FF, $FF
  30++F02D FF FF
  31++F02F 60 00 10 BF                          DB $60, $00, $10, $BF, $FF, $FF
  31++F033 FF FF
  32++F035 00 30 20 3F                          DB $00, $30, $20, $3F, $54, $98
  32++F039 54 98
  33++F03B 00 18 70 3F                          DB $00, $18, $70, $3F, $89, $CC
  33++F03F 89 CC
  34++F041 30 00 70 BF                          DB $30, $00, $70, $BF, $B8, $CC
  34++F045 B8 CC
  35++F047 30 00 70 3F                          DB $30, $00, $70, $3F, $A9, $CC
  35++F04B A9 CC
  36++F04D 00 30 30 5F                          DB $00, $30, $30, $5F, $32, $76
  36++F051 32 76
  37++F053 00 30 20 7F                          DB $00, $30, $20, $7F, $76, $BA
  37++F057 76 BA
  38++F059 00 18 70 7F                          DB $00, $18, $70, $7F, $BA, $CC
  38++F05D BA CC
  39++F05F
  40++F05F              Python_PVertSize: equ $ - Python_PVertices
  41++F05F
  42++F05F
  43++F05F
  44++F05F 1F 32 00 20  Python_PEdges:	DB $1F, $32, $00, $20
  45++F063 1F 20 00 0C  	DB $1F, $20, $00, $0C
  46++F067 1F 31 00 08  	DB $1F, $31, $00, $08
  47++F06B 1F 10 00 04  	DB $1F, $10, $00, $04
  48++F06F 1F 59 08 10  	DB $1F, $59, $08, $10
  49++F073 1F 51 04 08  	DB $1F, $51, $04, $08
  50++F077 1F 37 08 20  	DB $1F, $37, $08, $20
  51++F07B 1F 40 04 0C  	DB $1F, $40, $04, $0C
  52++F07F 1F 62 0C 20  	DB $1F, $62, $0C, $20
  53++F083 1F A7 08 24  	DB $1F, $A7, $08, $24
  54++F087 1F 84 0C 10  	DB $1F, $84, $0C, $10
  55++F08B 1F B6 0C 24  	DB $1F, $B6, $0C, $24
  56++F08F 07 88 0C 14  	DB $07, $88, $0C, $14
  57++F093 07 BB 0C 28  	DB $07, $BB, $0C, $28
  58++F097 07 99 08 14  	DB $07, $99, $08, $14
  59++F09B 07 AA 08 28  	DB $07, $AA, $08, $28
  60++F09F 1F A9 08 1C  	DB $1F, $A9, $08, $1C
  61++F0A3 1F B8 0C 18  	DB $1F, $B8, $0C, $18
  62++F0A7 1F C8 14 18  	DB $1F, $C8, $14, $18
  63++F0AB 1F C9 14 1C  	DB $1F, $C9, $14, $1C
  64++F0AF 1F AC 1C 28  	DB $1F, $AC, $1C, $28
  65++F0B3 1F CB 18 28  	DB $1F, $CB, $18, $28
  66++F0B7 1F 98 10 14  	DB $1F, $98, $10, $14
  67++F0BB 1F BA 24 28  	DB $1F, $BA, $24, $28
  68++F0BF 1F 54 04 10  	DB $1F, $54, $04, $10
  69++F0C3 1F 76 20 24  	DB $1F, $76, $20, $24
  70++F0C7
  71++F0C7              Python_PEdgesSize: equ $ - Python_PEdges
  72++F0C7
  73++F0C7
  74++F0C7              Python_PEdgesCnt: equ Python_PEdgesSize/4
  75++F0C7
  76++F0C7
  77++F0C7 9F 1B 28 0B  Python_PNormals:	DB $9F, $1B, $28, $0B
  78++F0CB 1F 1B 28 0B  	DB $1F, $1B, $28, $0B
  79++F0CF DF 1B 28 0B  	DB $DF, $1B, $28, $0B
  80++F0D3 5F 1B 28 0B  	DB $5F, $1B, $28, $0B
  81++F0D7 9F 13 26 00  	DB $9F, $13, $26, $00
  82++F0DB 1F 13 26 00  	DB $1F, $13, $26, $00
  83++F0DF DF 13 26 00  	DB $DF, $13, $26, $00
  84++F0E3 5F 13 26 00  	DB $5F, $13, $26, $00
  85++F0E7 BF 19 25 0B  	DB $BF, $19, $25, $0B
  86++F0EB 3F 19 25 0B  	DB $3F, $19, $25, $0B
  87++F0EF 7F 19 25 0B  	DB $7F, $19, $25, $0B
  88++F0F3 FF 19 25 0B  	DB $FF, $19, $25, $0B
  89++F0F7 3F 00 00 70  	DB $3F, $00, $00, $70
  90++F0FB
  91++F0FB
  92++F0FB              Python_PNormalsSize: equ $ - Python_PNormals
  93++F0FB              Python_PLen: equ $ - Python_P
  94++F0FB
# file closed: ./Data/ships/Python_P.asm
  98+ F0FB
# file closed: ./Data/ShipModelMetaData2.asm
 940  F0FB                  DISPLAY "Bank ",BankShipModels2," - Bytes free ",/D, $2000 - ($-ShipModelsAddr), " - BankShipModels2"
 941  F0FB              ; Bank 68  ------------------------------------------------------------------------------------------------------------------------
 942  F0FB                  SLOT    ShipModelsAddr
 943  F0FB                  PAGE    BankShipModels3
 944  F0FB              	ORG     ShipModelsAddr, BankShipModels3
 945  E000
 946  E000                  INCLUDE "./Data/ShipBank3Label.asm"
# file opened: ./Data/ShipBank3Label.asm
   1+ E000 53 68 69 70  ShipBank3Label:         DB  "ShipBank3      "
   1+ E004 42 61 6E 6B
   1+ E008 33 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank3Label.asm
 947  E00F              GetShipBank3Id:         MGetShipBankId ShipBankTable3
 947  E00F 06 00       >                        ld      b,0
 947  E011 4F          >                        ld      c,a                                 ; c= original ship id
 947  E012 CB 3F       >.ShiftLoop:             srl     a
 947  E014 CB 3F       >                        srl     a
 947  E016 CB 3F       >                        srl     a
 947  E018 CB 3F       >                        srl     a                                   ; divide by 16
 947  E01A 47          >                        ld      b,a                                 ; b = bank nbr
 947  E01B 79          >                        ld      a,c
 947  E01C 50          >                        ld      d,b
 947  E01D 1E 10       >                        ld      e,16
 947  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
 947  E021 93          >                        sub     e                                   ; a= actual model id now
 947  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
 947  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
 947  E024 7A          >                        ld      a,d                                 ; a = bank number
 947  E025             >;.. Now b = bank and a = adjusted ship nbr
 947  E025 21 62 E0    >                        ld      hl,ShipBankTable3                        ; a= bank index
 947  E028 ED 31       >                        add     hl,a
 947  E02A ED 31       >                        add     hl,a
 947  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
 947  E02D             >                        ClearCarryFlag
 947  E02D B7          >                        or a
 947  E02E C9          >                        ret
 948  E02F              CopyVertsToUniv3:       McopyVertsToUniverse
 948  E02F 2A 0C C4    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in UBnk its easy to read
 948  E032 11 12 C4    >                        ld          de,UBnkHullVerticies
 948  E035 06 00       >                        ld          b,0
 948  E037 3A 00 C4    >                        ld			a,(VertexCtX6Addr)
 948  E03A 4F          >                        ld          c,a
 948  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 948  E03C CD 2A 7E    >                        call        memcopy_dma
 948  E03F C9          >                        ret
 949  E040              CopyEdgesToUniv3:       McopyEdgesToUniverse
 949  E040 2A FA C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in UBnk its easy to read
 949  E043 11 02 C5    >                        ld          de,UBnkHullEdges
 949  E046 06 00       >                        ld          b,0
 949  E048 3A FC C3    >                        ld			a,(LineX4Addr)
 949  E04B 4F          >                        ld          c,a
 949  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 949  E04D CD 2A 7E    >                        call        memcopy_dma
 949  E050 C9          >                        ret
 950  E051              CopyNormsToUniv3:       McopyNormsToUniverse
 950  E051 2A 08 C4    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in UBnk its easy to read
 950  E054 11 CA C5    >                        ld          de,UBnkHullNormals
 950  E057 06 00       >                        ld          b,0
 950  E059 3A 04 C4    >                        ld          a,(FaceCtX4Addr)
 950  E05C 4F          >                        ld          c,a
 950  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 950  E05E CD 2A 7E    >                        call        memcopy_dma
 950  E061 C9          >                        ret
 951  E062              ShipBankTable3:         MShipBankTable
 951  E062 3B 00       >                        DW      BankShipModels1
 951  E064 43 00       >                        DW      BankShipModels2
 951  E066 44 00       >                        DW      BankShipModels3
 951  E068 45 00       >                        DW      BankShipModels4
 952  E06A              CopyShipToUniverse3     MCopyShipToUniverse     BankShipModels3
 952  E06A 21 41 C0    >                        ld          hl,UBnkShipModelBank
 952  E06D 36 44       >                        ld          (hl),BankShipModels3
 952  E06F F5          >                        push        af
 952  E070 FD 7D       >                        ld          a,iyl
 952  E072 32 43 C0    >                        ld          (UBnkShipModelId),a
 952  E075 F1          >                        pop         af
 952  E076 32 42 C0    >                        ld          (UBnkShipModelNbr),a
 952  E079 21 57 E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
 952  E07C ED 31       >                        add         hl,a
 952  E07E ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
 952  E080 4E          >                        ld          c,(hl)
 952  E081 23          >                        inc         hl
 952  E082 46          >                        ld          b,(hl)                      ; bc now equals length of data set
 952  E083 21 D7 E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
 952  E086 ED 31       >                        add         hl,a
 952  E088 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
 952  E08A 7E          >                        ld          a,(hl)
 952  E08B 23          >                        inc         hl
 952  E08C 66          >                        ld          h,(hl)
 952  E08D 6F          >                        ld          l,a                         ; now hl = address of ship hull data
 952  E08E 11 F7 C3    >                        ld          de,UBnkHullCopy             ; Universe bank
 952  E091 01 1B 00    >                        ld          bc,ShipDataLength
 952  E094 ED B0       >                        ldir
 952  E096 CD 2F E0    >                        call        CopyVertsToUniv
 952  E099 CD 40 E0    >                        call        CopyEdgesToUniv
 952  E09C CD 51 E0    >                        call        CopyNormsToUniv
 952  E09F 21 10 C0    >.ClearName:             ld          hl,StartOfUnivName
 952  E0A2 3E 20       >                        ld          a," "
 952  E0A4 06 10       >                        ld          b,16
 952  E0A6 77          >.fillLoop:              ld          (hl),a
 952  E0A7 23          >                        inc         hl
 952  E0A8 10 FC       >                        djnz        .fillLoop
 952  E0AA 3A 43 C0    >.SetName:               ld          a,(UBnkShipModelId)
 952  E0AD CD E3 8E    >                        call        ShipIndexToAddress
 952  E0B0 11 10 C0    >                        ld          de,StartOfUnivName
 952  E0B3 06 10       >                        ld          b,16
 952  E0B5 7E          >.CopyLoop:              ld          a,(hl)
 952  E0B6 FE 00       >                        cp          0
 952  E0B8 28 05       >                        jr          z,.CopyDone
 952  E0BA 12          >                        ld          (de),a
 952  E0BB 23          >                        inc         hl
 952  E0BC 13          >                        inc         de
 952  E0BD 10 F6       >                        djnz        .CopyLoop
 952  E0BF C9          >.CopyDone:              ret
 953  E0C0              CopyBodyToUniverse3:    MCopyBodyToUniverse     CopyShipToUniverse3
 953  E0C0 3E 0D       >                        ld          a,13
 953  E0C2 CD 6A E0    >                        call        CopyShipToUniverse3
 953  E0C5 C9          >                        ret
 954  E0C6              CopyVertsToUnivers3:    McopyVertsToUniverse
 954  E0C6 2A 0C C4    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in UBnk its easy to read
 954  E0C9 11 12 C4    >                        ld          de,UBnkHullVerticies
 954  E0CC 06 00       >                        ld          b,0
 954  E0CE 3A 00 C4    >                        ld			a,(VertexCtX6Addr)
 954  E0D1 4F          >                        ld          c,a
 954  E0D2 EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 954  E0D3 CD 2A 7E    >                        call        memcopy_dma
 954  E0D6 C9          >                        ret
 955  E0D7                  IFDEF SPACESTATIONUNIQUECODE
 956  E0D7 ~            CopyNormsToSpaceStation3: McopyNormsToSpaceStation
 957  E0D7 ~            CopyVertsToSpaceStation3: McopyVertsToSpaceStation
 958  E0D7 ~            CopyEdgesToSpaceStation3: McopyEdgesToSpaceStation
 959  E0D7 ~            CopyShipToSpaceStation3:  MCopyShipToSpaceStation  BankShipModels3
 960  E0D7 ~            CopyBodyToSpaceStation3:  MCopyBodyToSpaceStation  CopyShipToSpaceStation3
 961  E0D7                  ENDIF
 962  E0D7                  DISPLAY "TODO: Move space stations into their own bank to simplify code macros"
 963  E0D7                  INCLUDE "./Data/ShipModelMetaData3.asm"
# file opened: ./Data/ShipModelMetaData3.asm
   1+ E0D7 77 E1        ShipModelTable3:         DW Rock_Hermit                             ;32  $30
   2+ E0D9 58 E2                                 DW ShuttleType9                            ;33  $31
   3+ E0DB 95 E3                                 DW Shuttle_Mk_2                            ;34  $32
   4+ E0DD BE E4                                 DW Sidewinder                              ;35  $33
   5+ E0DF 71 E5                                 DW Splinter                                ;36  $34
   6+ E0E1 D0 E5                                 DW TestVector                              ;37  $35
   7+ E0E3 39 E6                                 DW Thargoid                                ;38  $36
   8+ E0E5 60 E7                                 DW Thargon                                 ;39  $37
   9+ E0E7 13 E8                                 DW TransportType10                         ;40  $38
  10+ E0E9 00 EA                                 DW Viper                                   ;41  $39
  11+ E0EB E5 EA                                 DW Worm                                    ;42  $3A
  12+ E0ED A0 EB                                 DW Rattler                                 ;43  $3B
  13+ E0EF 00 00                                 DW 0                                       ;44  $3C
  14+ E0F1 00 00                                 DW 0                                       ;45  $3D
  15+ E0F3 00 00                                 DW 0                                       ;46  $3E
  16+ E0F5 00 00                                 DW 0                                       ;47  $3F
  17+ E0F7 96 E1        ShipVertexTable3:        DW Rock_HermitVertices                     ;32  $30
  18+ E0F9 77 E2                                 DW ShuttleType9Vertices                    ;33  $31
  19+ E0FB B4 E3                                 DW Shuttle_Mk_2Vertices                    ;34  $32
  20+ E0FD DD E4                                 DW SidewinderVertices                      ;35  $33
  21+ E0FF 90 E5                                 DW SplinterVertices                        ;36  $34
  22+ E101 EF E5                                 DW TestVectorVertices                      ;37  $35
  23+ E103 58 E6                                 DW ThargoidVertices                        ;38  $36
  24+ E105 7F E7                                 DW ThargonVertices                         ;39  $37
  25+ E107 32 E8                                 DW TransportType10Vertices                 ;40  $38
  26+ E109 1F EA                                 DW ViperVertices                           ;41  $39
  27+ E10B 04 EB                                 DW WormVertices                            ;42  $3A
  28+ E10D BF EB                                 DW RattlerVertices                         ;43  $3B
  29+ E10F 00 00                                 DW 0                                       ;44  $3C
  30+ E111 00 00                                 DW 0                                       ;45  $3D
  31+ E113 00 00                                 DW 0                                       ;46  $3E
  32+ E115 00 00                                 DW 0                                       ;47  $3F
  33+ E117
  34+ E117 CC E1        ShipEdgeTable3:          DW Rock_HermitEdges                        ;32  $30
  35+ E119 E9 E2                                 DW ShuttleType9Edges                       ;33  $31
  36+ E11B 1A E4                                 DW Shuttle_Mk_2Edges                       ;34  $32
  37+ E11D 19 E5                                 DW SidewinderEdges                         ;35  $33
  38+ E11F A8 E5                                 DW SplinterEdges                           ;36  $34
  39+ E121 19 E6                                 DW TestVectorEdges                         ;37  $35
  40+ E123 D0 E6                                 DW ThargoidEdges                           ;38  $36
  41+ E125 BB E7                                 DW ThargonEdges                            ;39  $37
  42+ E127 10 E9                                 DW TransportType10Edges                    ;40  $38
  43+ E129 79 EA                                 DW ViperEdges                              ;41  $39
  44+ E12B 40 EB                                 DW WormEdges                               ;42  $3A
  45+ E12D 19 EC                                 DW RattlerEdges                            ;43  $3B
  46+ E12F 00 00                                 DW 0                                       ;44  $3C
  47+ E131 00 00                                 DW 0                                       ;45  $3D
  48+ E133 00 00                                 DW 0                                       ;46  $3E
  49+ E135 00 00                                 DW 0                                       ;47  $3F
  50+ E137
  51+ E137 20 E2        ShipNormalTable3:        DW Rock_HermitNormals                      ;32  $30
  52+ E139 61 E3                                 DW ShuttleType9Normals                     ;33  $31
  53+ E13B 8A E4                                 DW Shuttle_Mk_2Normals                     ;34  $32
  54+ E13D 55 E5                                 DW SidewinderNormals                       ;35  $33
  55+ E13F C0 E5                                 DW SplinterNormals                         ;36  $34
  56+ E141 29 E6                                 DW TestVectorNormals                       ;37  $35
  57+ E143 38 E7                                 DW ThargoidNormals                         ;38  $36
  58+ E145 F7 E7                                 DW ThargonNormals                          ;39  $37
  59+ E147 C8 E9                                 DW TransportType10Normals                  ;40  $38
  60+ E149 C9 EA                                 DW ViperNormals                            ;41  $39
  61+ E14B 80 EB                                 DW WormNormals                             ;42  $3A
  62+ E14D 19 EC                                 DW RattlerEdges                            ;43  $3B
  63+ E14F 00 00                                 DW 0                                       ;44  $3C
  64+ E151 00 00                                 DW 0                                       ;45  $3D
  65+ E153 00 00                                 DW 0                                       ;46  $3E
  66+ E155 00 00                                 DW 0                                       ;47  $3F
  67+ E157
  68+ E157 E1 00        ShipModelSizeTable3:     DW Rock_HermitLen                          ;32  $30
  69+ E159 3D 01                                 DW ShuttleType9Len                         ;33  $31
  70+ E15B 29 01                                 DW Shuttle_Mk_2Len                         ;34  $32
  71+ E15D B3 00                                 DW SidewinderLen                           ;35  $33
  72+ E15F 5F 00                                 DW SplinterLen                             ;36  $34
  73+ E161 69 00                                 DW TestVectorLen                           ;37  $35
  74+ E163 27 01                                 DW ThargoidLen                             ;38  $36
  75+ E165 B3 00                                 DW ThargonLen                              ;39  $37
  76+ E167 ED 01                                 DW TransportType10Len                      ;40  $38
  77+ E169 E5 00                                 DW ViperLen                                ;41  $39
  78+ E16B BB 00                                 DW WormLen                                 ;42  $3A
  79+ E16D 15 01                                 DW RattlerLen                              ;43  $3B
  80+ E16F 00 00                                 DW 0                                       ;44  $3C
  81+ E171 00 00                                 DW 0                                       ;45  $3D
  82+ E173 00 00                                 DW 0                                       ;46  $3E
  83+ E175 00 00                                 DW 0                                       ;47  $3F
  84+ E177
  85+ E177                                      include "Data/ships/Rock_Hermit.asm"
# file opened: ./Data/ships/Rock_Hermit.asm
   1++E177 07           Rock_Hermit:	        DB $07                            ; Number of cargo canisters released when destroyed
   2++E178 00 19                                DW $1900                          ; Ship's targetable area LoHi
   3++E17A CC E1                                DW Rock_HermitEdges               ; Edge Data
   4++E17C 54                                   DB Rock_HermitEdgesSize           ; Size of Edge Data
   5++E17D 00                                   DB $00                            ; Gun Vertex Byte offset
   6++E17E 32                                   DB $32                            ; Explosion Count
   7++E17F 09                                   DB Rock_HermitVertSize /6         ; Vertex Count /6
   8++E180 36                                   DB Rock_HermitVertSize            ; Vertex Count
   9++E181 15                                   DB Rock_HermitEdgesCnt            ; Edges Count
  10++E182 00 00                                DW $0000                          ; Bounty LoHi
  11++E184 38                                   DB Rock_HermitNormalsSize         ; Face (Normal) Count
  12++E185 32                                   DB $32                            ; Range when it turns to a dot
  13++E186 B4                                   DB $B4                            ; Energy Max
  14++E187 1E                                   DB $1E                            ; Speed Max
  15++E188 20 E2                                DW Rock_HermitNormals             ; Normals
  16++E18A 01                                   DB $01                            ; Q scaling
  17++E18B 02                                   DB $02                            ; Laser power and Nbr Missiles
  18++E18C 96 E1                                DW Rock_HermitVertices            ; Verticles Address
  19++E18E 00                                   DB ShipTypeNormal                 ; Ship Type
  20++E18F 00                                   DB 0                              ; NewB Tactics
  21++E190 80                                   DB ShipCanAnger                   ; AI Flags
  22++E191 30                                   DB $30                            ; chance of ECM module
  23++E192 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E193 00 00                                DW $0000                            ; no solid data
  25++E195 00                                   DB $00                              ; no solid data
  26++E196
  27++E196
  28++E196
  29++E196 00 50 00 1F  Rock_HermitVertices:	DB $00, $50, $00, $1F, $FF, $FF
  29++E19A FF FF
  30++E19C 50 0A 00 DF                          DB $50, $0A, $00, $DF, $FF, $FF
  30++E1A0 FF FF
  31++E1A2 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF
  31++E1A6 FF FF
  32++E1A8 46 28 00 5F                          DB $46, $28, $00, $5F, $FF, $FF
  32++E1AC FF FF
  33++E1AE 3C 32 00 1F                          DB $3C, $32, $00, $1F, $65, $DC
  33++E1B2 65 DC
  34++E1B4 32 00 3C 1F                          DB $32, $00, $3C, $1F, $FF, $FF
  34++E1B8 FF FF
  35++E1BA 28 00 46 9F                          DB $28, $00, $46, $9F, $10, $32
  35++E1BE 10 32
  36++E1C0 00 1E 4B 3F                          DB $00, $1E, $4B, $3F, $FF, $FF
  36++E1C4 FF FF
  37++E1C6 00 32 3C 7F                          DB $00, $32, $3C, $7F, $98, $BA
  37++E1CA 98 BA
  38++E1CC
  39++E1CC
  40++E1CC              Rock_HermitVertSize: equ $ - Rock_HermitVertices
  41++E1CC
  42++E1CC
  43++E1CC
  44++E1CC 1F 72 00 04  Rock_HermitEdges:	DB $1F, $72, $00, $04
  45++E1D0 1F D6 00 10  	DB $1F, $D6, $00, $10
  46++E1D4 1F C5 0C 10  	DB $1F, $C5, $0C, $10
  47++E1D8 1F B4 08 0C  	DB $1F, $B4, $08, $0C
  48++E1DC 1F A3 04 08  	DB $1F, $A3, $04, $08
  49++E1E0 1F 32 04 18  	DB $1F, $32, $04, $18
  50++E1E4 1F 31 08 18  	DB $1F, $31, $08, $18
  51++E1E8 1F 41 08 14  	DB $1F, $41, $08, $14
  52++E1EC 1F 10 14 18  	DB $1F, $10, $14, $18
  53++E1F0 1F 60 00 14  	DB $1F, $60, $00, $14
  54++E1F4 1F 54 0C 14  	DB $1F, $54, $0C, $14
  55++E1F8 1F 20 00 18  	DB $1F, $20, $00, $18
  56++E1FC 1F 65 10 14  	DB $1F, $65, $10, $14
  57++E200 1F A8 04 20  	DB $1F, $A8, $04, $20
  58++E204 1F 87 04 1C  	DB $1F, $87, $04, $1C
  59++E208 1F D7 00 1C  	DB $1F, $D7, $00, $1C
  60++E20C 1F DC 10 1C  	DB $1F, $DC, $10, $1C
  61++E210 1F C9 0C 1C  	DB $1F, $C9, $0C, $1C
  62++E214 1F B9 0C 20  	DB $1F, $B9, $0C, $20
  63++E218 1F BA 08 20  	DB $1F, $BA, $08, $20
  64++E21C 1F 98 1C 20  	DB $1F, $98, $1C, $20
  65++E220
  66++E220              Rock_HermitEdgesSize: equ $ - Rock_HermitEdges
  67++E220
  68++E220
  69++E220              Rock_HermitEdgesCnt: equ Rock_HermitEdgesSize/4
  70++E220
  71++E220
  72++E220 1F 09 42 51  Rock_HermitNormals:	DB $1F, $09, $42, $51
  73++E224 5F 09 42 51  	DB $5F, $09, $42, $51
  74++E228 9F 48 40 1F  	DB $9F, $48, $40, $1F
  75++E22C DF 40 49 2F  	DB $DF, $40, $49, $2F
  76++E230 5F 2D 4F 41  	DB $5F, $2D, $4F, $41
  77++E234 1F 87 0F 23  	DB $1F, $87, $0F, $23
  78++E238 1F 26 4C 46  	DB $1F, $26, $4C, $46
  79++E23C BF 42 3B 27  	DB $BF, $42, $3B, $27
  80++E240 FF 43 0F 50  	DB $FF, $43, $0F, $50
  81++E244 7F 42 0E 4B  	DB $7F, $42, $0E, $4B
  82++E248 FF 46 50 28  	DB $FF, $46, $50, $28
  83++E24C 7F 3A 66 33  	DB $7F, $3A, $66, $33
  84++E250 3F 51 09 43  	DB $3F, $51, $09, $43
  85++E254 3F 2F 5E 3F  	DB $3F, $2F, $5E, $3F
  86++E258
  87++E258
  88++E258              Rock_HermitNormalsSize: equ $ - Rock_HermitNormals
  89++E258              Rock_HermitLen: equ $ - Rock_Hermit
  90++E258
# file closed: ./Data/ships/Rock_Hermit.asm
  86+ E258                                      include "Data/ships/ShuttleType9.asm"
# file opened: ./Data/ships/ShuttleType9.asm
   1++E258 0F           ShuttleType9:	            DB $0F                       ; Number of cargo canisters released when destroyed
   2++E259 C4 09                                    DW $09C4                     ; Ship's targetable area LoHi
   3++E25B E9 E2                                    DW ShuttleType9Edges         ; Edge Data
   4++E25D 78                                       DB ShuttleType9EdgesSize     ; Size of Edge Data
   5++E25E 00                                       DB $00                       ; Gun Vertex Byte offset
   6++E25F 26                                       DB $26                       ; Explosion Count
   7++E260 13                                       DB ShuttleType9VertSize /6   ; Vertex Count /6
   8++E261 72                                       DB ShuttleType9VertSize      ; Vertex Count
   9++E262 1E                                       DB ShuttleType9EdgesCnt      ; Edges Count
  10++E263 00 00                                    DW $0000                     ; Bounty LoHi
  11++E265 34                                       DB ShuttleType9NormalsSize   ; Face (Normal) Count
  12++E266 16                                       DB $16                       ; Range when it turns to a dot
  13++E267 20                                       DB $20                       ; Energy Max
  14++E268 08                                       DB $08                       ; Speed Max
  15++E269 61 E3                                    DW ShuttleType9Normals       ; Normals
  16++E26B 02                                       DB $02                       ; Q scaling
  17++E26C 00                                       DB $00                       ; Laser power and Nbr Missiles
  18++E26D 77 E2                                    DW ShuttleType9Vertices      ; Verticles Address
  19++E26F 00           	                        DB ShipTypeNormal            ; Ship Type
  20++E270 00                                       DB 0                         ; NewB Tactics
  21++E271 00                                       DB 0                         ; AI Flags
  22++E272 80                                       DB $80                       ; chance of ECM module
  23++E273 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E274 00 00                                DW $0000                            ; no solid data
  25++E276 00                                   DB $00                              ; no solid data
  26++E277
  27++E277
  28++E277
  29++E277 00 11 17 5F  ShuttleType9Vertices:	DB $00, $11, $17, $5F, $FF, $FF ; 01
  29++E27B FF FF
  30++E27D 11 00 17 9F                          DB $11, $00, $17, $9F, $FF, $FF ; 02
  30++E281 FF FF
  31++E283 00 12 17 1F                          DB $00, $12, $17, $1F, $FF, $FF ; 03
  31++E287 FF FF
  32++E289 12 00 17 1F                          DB $12, $00, $17, $1F, $FF, $FF ; 04
  32++E28D FF FF
  33++E28F 14 14 1B FF                          DB $14, $14, $1B, $FF, $12, $39 ; 05
  33++E293 12 39
  34++E295 14 14 1B BF                          DB $14, $14, $1B, $BF, $34, $59 ; 06
  34++E299 34 59
  35++E29B 14 14 1B 3F                          DB $14, $14, $1B, $3F, $56, $79 ; 07
  35++E29F 56 79
  36++E2A1 14 14 1B 7F                          DB $14, $14, $1B, $7F, $17, $89 ; 08
  36++E2A5 17 89
  37++E2A7 05 00 1B 30                          DB $05, $00, $1B, $30, $99, $99 ; 09
  37++E2AB 99 99
  38++E2AD 00 02 1B 70                          DB $00, $02, $1B, $70, $99, $99 ; 10
  38++E2B1 99 99
  39++E2B3 05 00 1B A9                          DB $05, $00, $1B, $A9, $99, $99 ; 11
  39++E2B7 99 99
  40++E2B9 00 03 1B 29                          DB $00, $03, $1B, $29, $99, $99 ; 12
  40++E2BD 99 99
  41++E2BF 00 09 23 50                          DB $00, $09, $23, $50, $0A, $BC ; 13
  41++E2C3 0A BC
  42++E2C5 03 01 1F 47                          DB $03, $01, $1F, $47, $FF, $02 ; 14
  42++E2C9 FF 02
  43++E2CB 04 0B 19 08                          DB $04, $0B, $19, $08, $01, $F4 ; 15
  43++E2CF 01 F4
  44++E2D1 0B 04 19 08                          DB $0B, $04, $19, $08, $A1, $3F ; 16
  44++E2D5 A1 3F
  45++E2D7 03 01 1F C7                          DB $03, $01, $1F, $C7, $6B, $23 ; 17
  45++E2DB 6B 23
  46++E2DD 03 0B 19 88                          DB $03, $0B, $19, $88, $F8, $C0 ; 18
  46++E2E1 F8 C0
  47++E2E3 0A 04 19 88                          DB $0A, $04, $19, $88, $4F, $18 ; 19
  47++E2E7 4F 18
  48++E2E9
  49++E2E9              ShuttleType9VertSize: equ $ - ShuttleType9Vertices
  50++E2E9
  51++E2E9
  52++E2E9
  53++E2E9 1F 02 00 04  ShuttleType9Edges:	DB $1F, $02, $00, $04
  54++E2ED 1F 4A 04 08  	DB $1F, $4A, $04, $08
  55++E2F1 1F 6B 08 0C  	DB $1F, $6B, $08, $0C
  56++E2F5 1F 8C 00 0C  	DB $1F, $8C, $00, $0C
  57++E2F9 1F 18 00 1C  	DB $1F, $18, $00, $1C
  58++E2FD 18 12 00 10  	DB $18, $12, $00, $10
  59++E301 1F 23 04 10  	DB $1F, $23, $04, $10
  60++E305 18 34 04 14  	DB $18, $34, $04, $14
  61++E309 1F 45 08 14  	DB $1F, $45, $08, $14
  62++E30D 0C 56 08 18  	DB $0C, $56, $08, $18
  63++E311 1F 67 0C 18  	DB $1F, $67, $0C, $18
  64++E315 18 78 0C 1C  	DB $18, $78, $0C, $1C
  65++E319 1F 39 10 14  	DB $1F, $39, $10, $14
  66++E31D 1F 59 14 18  	DB $1F, $59, $14, $18
  67++E321 1F 79 18 1C  	DB $1F, $79, $18, $1C
  68++E325 1F 19 10 1C  	DB $1F, $19, $10, $1C
  69++E329 10 0C 00 30  	DB $10, $0C, $00, $30
  70++E32D 10 0A 04 30  	DB $10, $0A, $04, $30
  71++E331 10 AB 08 30  	DB $10, $AB, $08, $30
  72++E335 10 BC 0C 30  	DB $10, $BC, $0C, $30
  73++E339 10 99 20 24  	DB $10, $99, $20, $24
  74++E33D 07 99 24 28  	DB $07, $99, $24, $28
  75++E341 09 99 28 2C  	DB $09, $99, $28, $2C
  76++E345 07 99 20 2C  	DB $07, $99, $20, $2C
  77++E349 05 BB 34 38  	DB $05, $BB, $34, $38
  78++E34D 08 BB 38 3C  	DB $08, $BB, $38, $3C
  79++E351 07 BB 34 3C  	DB $07, $BB, $34, $3C
  80++E355 05 AA 40 44  	DB $05, $AA, $40, $44
  81++E359 08 AA 44 48  	DB $08, $AA, $44, $48
  82++E35D 07 AA 40 48  	DB $07, $AA, $40, $48
  83++E361              ShuttleType9EdgesSize: equ $ - ShuttleType9Edges
  84++E361              ShuttleType9EdgesCnt: equ ShuttleType9EdgesSize/4
  85++E361
  86++E361 DF 37 37 28  ShuttleType9Normals:	DB $DF, $37, $37, $28
  87++E365 5F 00 4A 04  	DB $5F, $00, $4A, $04
  88++E369 DF 33 33 17  	DB $DF, $33, $33, $17
  89++E36D 9F 4A 00 04  	DB $9F, $4A, $00, $04
  90++E371 9F 33 33 17  	DB $9F, $33, $33, $17
  91++E375 1F 00 4A 04  	DB $1F, $00, $4A, $04
  92++E379 1F 33 33 17  	DB $1F, $33, $33, $17
  93++E37D 1F 4A 00 04  	DB $1F, $4A, $00, $04
  94++E381 5F 33 33 17  	DB $5F, $33, $33, $17
  95++E385 3F 00 00 6B  	DB $3F, $00, $00, $6B
  96++E389 9F 29 29 5A  	DB $9F, $29, $29, $5A
  97++E38D 1F 29 29 5A  	DB $1F, $29, $29, $5A
  98++E391 5F 37 37 28  	DB $5F, $37, $37, $28
  99++E395
 100++E395
 101++E395              ShuttleType9NormalsSize: equ $ - ShuttleType9Normals
 102++E395              ShuttleType9Len: equ $ - ShuttleType9
 103++E395
# file closed: ./Data/ships/ShuttleType9.asm
  87+ E395                                      include "Data/ships/Shuttle_Mk_2.asm"
# file opened: ./Data/ships/Shuttle_Mk_2.asm
   1++E395 0F           Shuttle_Mk_2:	        DB $0F                         ; Number of cargo canisters released when destroyed
   2++E396 C4 09                                DW $09C4                       ; Ship's targetable area LoHi
   3++E398 1A E4                                DW Shuttle_Mk_2Edges           ; Edge Data
   4++E39A 70                                   DB Shuttle_Mk_2EdgesSize       ; Size of Edge Data
   5++E39B 00                                   DB $00                         ; Gun Vertex Byte offset
   6++E39C 26                                   DB $26                         ; Explosion Count
   7++E39D 11                                   DB Shuttle_Mk_2VertSize /6     ; Vertex Count /6
   8++E39E 66                                   DB Shuttle_Mk_2VertSize        ; Vertex Count
   9++E39F 1C                                   DB Shuttle_Mk_2EdgesCnt        ; Edges Count
  10++E3A0 00 00                                DW $0000                       ; Bounty LoHi
  11++E3A2 34                                   DB Shuttle_Mk_2NormalsSize     ; Face (Normal) Count
  12++E3A3 0A                                   DB $0A                         ; Range when it turns to a dot
  13++E3A4 20                                   DB $20                         ; Energy Max
  14++E3A5 09                                   DB $09                         ; Speed Max
  15++E3A6 8A E4                                DW Shuttle_Mk_2Normals         ; Normals
  16++E3A8 02                                   DB $02                         ; Q scaling
  17++E3A9 00                                   DB $00                         ; Laser power and Nbr Missiles
  18++E3AA B4 E3                                DW Shuttle_Mk_2Vertices        ; Verticles Address
  19++E3AC 00                                   DB ShipTypeNormal              ; Ship Type
  20++E3AD 00                                   DB 0                           ; NewB Tactics
  21++E3AE 00                                   DB 0                           ; AI Flags
  22++E3AF 80                                   DB $80                         ; chance of ECM module
  23++E3B0 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E3B1 00 00                                DW $0000                            ; no solid data
  25++E3B3 00                                   DB $00                              ; no solid data
  26++E3B4
  27++E3B4
  28++E3B4
  29++E3B4 00 00 28 1F  Shuttle_Mk_2Vertices:	DB $00, $00, $28, $1F, $23, $01
  29++E3B8 23 01
  30++E3BA 00 14 1E 1F  	DB $00, $14, $1E, $1F, $34, $00
  30++E3BE 34 00
  31++E3C0 14 00 1E 9F  	DB $14, $00, $1E, $9F, $15, $00
  31++E3C4 15 00
  32++E3C6 00 14 1E 5F  	DB $00, $14, $1E, $5F, $26, $11
  32++E3CA 26 11
  33++E3CC 14 00 1E 1F  	DB $14, $00, $1E, $1F, $37, $22
  33++E3D0 37 22
  34++E3D2 14 14 14 9F  	DB $14, $14, $14, $9F, $58, $04
  34++E3D6 58 04
  35++E3D8 14 14 14 DF  	DB $14, $14, $14, $DF, $69, $15
  35++E3DC 69 15
  36++E3DE 14 14 14 5F  	DB $14, $14, $14, $5F, $7A, $26
  36++E3E2 7A 26
  37++E3E4 14 14 14 1F  	DB $14, $14, $14, $1F, $7B, $34
  37++E3E8 7B 34
  38++E3EA 00 14 28 3F  	DB $00, $14, $28, $3F, $BC, $48
  38++E3EE BC 48
  39++E3F0 14 00 28 BF  	DB $14, $00, $28, $BF, $9C, $58
  39++E3F4 9C 58
  40++E3F6 00 14 28 7F  	DB $00, $14, $28, $7F, $AC, $69
  40++E3FA AC 69
  41++E3FC 14 00 28 3F  	DB $14, $00, $28, $3F, $BC, $7A
  41++E400 BC 7A
  42++E402 04 04 28 AA  	DB $04, $04, $28, $AA, $CC, $CC
  42++E406 CC CC
  43++E408 04 04 28 EA  	DB $04, $04, $28, $EA, $CC, $CC
  43++E40C CC CC
  44++E40E 04 04 28 6A  	DB $04, $04, $28, $6A, $CC, $CC
  44++E412 CC CC
  45++E414 04 04 28 2A  	DB $04, $04, $28, $2A, $CC, $CC
  45++E418 CC CC
  46++E41A
  47++E41A              Shuttle_Mk_2VertSize: equ $ - Shuttle_Mk_2Vertices
  48++E41A
  49++E41A
  50++E41A
  51++E41A 1F 01 00 08  Shuttle_Mk_2Edges:	DB $1F, $01, $00, $08
  52++E41E 1F 12 00 0C  	DB $1F, $12, $00, $0C
  53++E422 1F 23 00 10  	DB $1F, $23, $00, $10
  54++E426 1F 30 00 04  	DB $1F, $30, $00, $04
  55++E42A 1F 04 04 14  	DB $1F, $04, $04, $14
  56++E42E 1F 05 08 14  	DB $1F, $05, $08, $14
  57++E432 1F 15 08 18  	DB $1F, $15, $08, $18
  58++E436 1F 16 0C 18  	DB $1F, $16, $0C, $18
  59++E43A 1F 26 0C 1C  	DB $1F, $26, $0C, $1C
  60++E43E 1F 27 10 1C  	DB $1F, $27, $10, $1C
  61++E442 1F 37 10 20  	DB $1F, $37, $10, $20
  62++E446 1F 34 04 20  	DB $1F, $34, $04, $20
  63++E44A 1F 48 14 24  	DB $1F, $48, $14, $24
  64++E44E 1F 58 14 28  	DB $1F, $58, $14, $28
  65++E452 1F 59 18 28  	DB $1F, $59, $18, $28
  66++E456 1F 69 18 2C  	DB $1F, $69, $18, $2C
  67++E45A 1F 6A 1C 2C  	DB $1F, $6A, $1C, $2C
  68++E45E 1F 7A 1C 30  	DB $1F, $7A, $1C, $30
  69++E462 1F 7B 20 30  	DB $1F, $7B, $20, $30
  70++E466 1F 4B 20 24  	DB $1F, $4B, $20, $24
  71++E46A 1F 8C 24 28  	DB $1F, $8C, $24, $28
  72++E46E 1F 9C 28 2C  	DB $1F, $9C, $28, $2C
  73++E472 1F AC 2C 30  	DB $1F, $AC, $2C, $30
  74++E476 1F BC 30 24  	DB $1F, $BC, $30, $24
  75++E47A 0A CC 34 38  	DB $0A, $CC, $34, $38
  76++E47E 0A CC 38 3C  	DB $0A, $CC, $38, $3C
  77++E482 0A CC 3C 40  	DB $0A, $CC, $3C, $40
  78++E486 0A CC 40 34  	DB $0A, $CC, $40, $34
  79++E48A
  80++E48A              Shuttle_Mk_2EdgesSize: equ $ - Shuttle_Mk_2Edges
  81++E48A
  82++E48A
  83++E48A              Shuttle_Mk_2EdgesCnt: equ Shuttle_Mk_2EdgesSize/4
  84++E48A
  85++E48A
  86++E48A 9F 27 27 4E  Shuttle_Mk_2Normals:	DB $9F, $27, $27, $4E
  87++E48E DF 27 27 4E  	DB $DF, $27, $27, $4E
  88++E492 5F 27 27 4E  	DB $5F, $27, $27, $4E
  89++E496 1F 27 27 4E  	DB $1F, $27, $27, $4E
  90++E49A 1F 00 60 00  	DB $1F, $00, $60, $00
  91++E49E 9F 60 00 00  	DB $9F, $60, $00, $00
  92++E4A2 5F 00 60 00  	DB $5F, $00, $60, $00
  93++E4A6 1F 60 00 00  	DB $1F, $60, $00, $00
  94++E4AA BF 42 42 16  	DB $BF, $42, $42, $16
  95++E4AE FF 42 42 16  	DB $FF, $42, $42, $16
  96++E4B2 7F 42 42 16  	DB $7F, $42, $42, $16
  97++E4B6 3F 42 42 16  	DB $3F, $42, $42, $16
  98++E4BA 3F 00 00 60  	DB $3F, $00, $00, $60
  99++E4BE
 100++E4BE
 101++E4BE              Shuttle_Mk_2NormalsSize: equ $ - Shuttle_Mk_2Normals
 102++E4BE              Shuttle_Mk_2Len: equ $ - Shuttle_Mk_2
 103++E4BE
# file closed: ./Data/ships/Shuttle_Mk_2.asm
  88+ E4BE                                      include "Data/ships/Sidewinder.asm"
# file opened: ./Data/ships/Sidewinder.asm
   1++E4BE 00           Sidewinder:	            DB $00                      ; Number of cargo canisters released when destroyed
   2++E4BF 81 10                                DW $1081                    ; Ship's targetable area LoHi
   3++E4C1 19 E5                                DW SidewinderEdges          ; Edge Data
   4++E4C3 3C                                   DB SidewinderEdgesSize      ; Size of Edge Data
   5++E4C4 00                                   DB $00                      ; Gun Vertex Byte offset
   6++E4C5 1E                                   DB $1E                      ; Explosion Count
   7++E4C6 0A                                   DB SidewinderVertSize /6    ; Vertex Count /6
   8++E4C7 3C                                   DB SidewinderVertSize       ; Vertex Count
   9++E4C8 0F                                   DB SidewinderEdgesCnt       ; Edges Count
  10++E4C9 32 00                                DW $0032                    ; Bounty LoHi
  11++E4CB 1C                                   DB SidewinderNormalsSize    ; Face (Normal) Count
  12++E4CC 14                                   DB $14                      ; Range when it turns to a dot
  13++E4CD 46                                   DB $46                      ; Energy Max
  14++E4CE 25                                   DB $25                      ; Speed Max
  15++E4CF 55 E5                                DW SidewinderNormals        ; Normals
  16++E4D1 02                                   DB $02                      ; Q scaling
  17++E4D2 11                                   DB $10 | ShipMissiles1      ; Laser power and Nbr Missiles
  18++E4D3 DD E4                                DW SidewinderVertices       ; Verticles Address
  19++E4D5 00                                   DB ShipTypeNormal           ; Ship Type
  20++E4D6 00                                   DB 0                        ; NewB Tactics
  21++E4D7 80                                   DB ShipCanAnger             ; AI Flags
  22++E4D8 30                                   DB $30                      ; chance of ECM module
  23++E4D9 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E4DA 00 00                                DW $0000                            ; no solid data
  25++E4DC 00                                   DB $00                              ; no solid data
  26++E4DD
  27++E4DD
  28++E4DD 20 00 24 9F  SidewinderVertices:	DB $20, $00, $24, $9F, $10, $54
  28++E4E1 10 54
  29++E4E3 20 00 24 1F  	DB $20, $00, $24, $1F, $20, $65
  29++E4E7 20 65
  30++E4E9 40 00 1C 3F  	DB $40, $00, $1C, $3F, $32, $66
  30++E4ED 32 66
  31++E4EF 40 00 1C BF  	DB $40, $00, $1C, $BF, $31, $44
  31++E4F3 31 44
  32++E4F5 00 10 1C 3F  	DB $00, $10, $1C, $3F, $10, $32
  32++E4F9 10 32
  33++E4FB 00 10 1C 7F  	DB $00, $10, $1C, $7F, $43, $65
  33++E4FF 43 65
  34++E501 0C 06 1C AF  	DB $0C, $06, $1C, $AF, $33, $33
  34++E505 33 33
  35++E507 0C 06 1C 2F  	DB $0C, $06, $1C, $2F, $33, $33
  35++E50B 33 33
  36++E50D 0C 06 1C 6C  	DB $0C, $06, $1C, $6C, $33, $33
  36++E511 33 33
  37++E513 0C 06 1C EC  	DB $0C, $06, $1C, $EC, $33, $33
  37++E517 33 33
  38++E519
  39++E519
  40++E519              SidewinderVertSize: equ $ - SidewinderVertices
  41++E519
  42++E519
  43++E519
  44++E519 1F 50 00 04  SidewinderEdges:	DB $1F, $50, $00, $04
  45++E51D 1F 62 04 08  	DB $1F, $62, $04, $08
  46++E521 1F 20 04 10  	DB $1F, $20, $04, $10
  47++E525 1F 10 00 10  	DB $1F, $10, $00, $10
  48++E529 1F 41 00 0C  	DB $1F, $41, $00, $0C
  49++E52D 1F 31 0C 10  	DB $1F, $31, $0C, $10
  50++E531 1F 32 08 10  	DB $1F, $32, $08, $10
  51++E535 1F 43 0C 14  	DB $1F, $43, $0C, $14
  52++E539 1F 63 08 14  	DB $1F, $63, $08, $14
  53++E53D 1F 65 04 14  	DB $1F, $65, $04, $14
  54++E541 1F 54 00 14  	DB $1F, $54, $00, $14
  55++E545 0F 33 18 1C  	DB $0F, $33, $18, $1C
  56++E549 0C 33 1C 20  	DB $0C, $33, $1C, $20
  57++E54D 0C 33 18 24  	DB $0C, $33, $18, $24
  58++E551 0C 33 20 24  	DB $0C, $33, $20, $24
  59++E555
  60++E555              SidewinderEdgesSize: equ $ - SidewinderEdges
  61++E555
  62++E555
  63++E555              SidewinderEdgesCnt: equ SidewinderEdgesSize/4
  64++E555
  65++E555
  66++E555 1F 00 20 08  SidewinderNormals:	DB $1F, $00, $20, $08
  67++E559 9F 0C 2F 06  	DB $9F, $0C, $2F, $06
  68++E55D 1F 0C 2F 06  	DB $1F, $0C, $2F, $06
  69++E561 3F 00 00 70  	DB $3F, $00, $00, $70
  70++E565 DF 0C 2F 06  	DB $DF, $0C, $2F, $06
  71++E569 5F 00 20 08  	DB $5F, $00, $20, $08
  72++E56D 5F 0C 2F 06  	DB $5F, $0C, $2F, $06
  73++E571
  74++E571
  75++E571              SidewinderNormalsSize: equ $ - SidewinderNormals
  76++E571              SidewinderLen: equ $ - Sidewinder
  77++E571
# file closed: ./Data/ships/Sidewinder.asm
  89+ E571                                      include "Data/ships/Splinter.asm"
# file opened: ./Data/ships/Splinter.asm
   1++E571 B0           Splinter:	            DB $B0                      ; Number of cargo canisters released when destroyed
   2++E572 00 01                                DW $0100                    ; Ship's targetable area LoHi
   3++E574 A8 E5                                DW SplinterEdges            ; Edge Data
   4++E576 18                                   DB SplinterEdgesSize        ; Size of Edge Data
   5++E577 00                                   DB $00                      ; Gun Vertex Byte offset
   6++E578 16                                   DB $16                      ; Explosion Count
   7++E579 04                                   DB SplinterVertSize /6      ; Vertex Count /6
   8++E57A 18                                   DB SplinterVertSize         ; Vertex Count
   9++E57B 06                                   DB SplinterEdgesCnt         ; Edges Count
  10++E57C 00 00                                DW $0000                    ; Bounty LoHi
  11++E57E 10                                   DB SplinterNormalsSize      ; Face (Normal) Count
  12++E57F 08                                   DB $08                      ; Range when it turns to a dot
  13++E580 14                                   DB $14                      ; Energy Max
  14++E581 0A                                   DB $0A                      ; Speed Max
  15++E582 C0 E5                                DW SplinterNormals          ; Normals
  16++E584 05                                   DB $05                      ; Q scaling
  17++E585 00                                   DB $00                      ; Laser power and Nbr Missiles
  18++E586 90 E5                                DW SplinterVertices         ; Verticles Address
  19++E588 00                                   DB ShipTypeNormal           ; Ship Type
  20++E589 00                                   DB 0                        ; NewB Tactics
  21++E58A 00                                   DB 0                        ; AI Flags
  22++E58B 00                                   DB $00                      ; chance of ECM module
  23++E58C FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E58D 00 00                                DW $0000                            ; no solid data
  25++E58F 00                                   DB $00                              ; no solid data
  26++E590
  27++E590
  28++E590 18 19 10 DF  SplinterVertices:	    DB $18, $19, $10, $DF, $12, $33
  28++E594 12 33
  29++E596 00 0C 0A 3F                          DB $00, $0C, $0A, $3F, $02, $33
  29++E59A 02 33
  30++E59C 0B 06 02 5F                          DB $0B, $06, $02, $5F, $01, $33
  30++E5A0 01 33
  31++E5A2 0C 2A 07 1F                          DB $0C, $2A, $07, $1F, $01, $22
  31++E5A6 01 22
  32++E5A8              SplinterVertSize:       equ $ - SplinterVertices
  33++E5A8 1F 23 00 04  SplinterEdges:	        DB $1F, $23, $00, $04
  34++E5AC 1F 03 04 08                          DB $1F, $03, $04, $08
  35++E5B0 1F 01 08 0C                          DB $1F, $01, $08, $0C
  36++E5B4 1F 12 0C 00                          DB $1F, $12, $0C, $00
  37++E5B8 1F 13 00 08                          DB $1F, $13, $00, $08
  38++E5BC 1F 02 0C 04                          DB $1F, $02, $0C, $04
  39++E5C0              SplinterEdgesSize:      equ $ - SplinterEdges
  40++E5C0              SplinterEdgesCnt:       equ SplinterEdgesSize/4
  41++E5C0 1F 23 00 04  SplinterNormals:	    DB $1F, $23, $00, $04
  42++E5C4 1F 03 04 08                          DB $1F, $03, $04, $08
  43++E5C8 1F 01 08 0C                          DB $1F, $01, $08, $0C
  44++E5CC 1F 12 0C 00                          DB $1F, $12, $0C, $00
  45++E5D0              SplinterNormalsSize:    equ $ - SplinterNormals
  46++E5D0              SplinterLen:            equ $ - Splinter
  47++E5D0
# file closed: ./Data/ships/Splinter.asm
  90+ E5D0                                      include "Data/ships/TestVector.asm"
# file opened: ./Data/ships/TestVector.asm
   1++E5D0 03           TestVector:             DB $03                      ; Number of cargo canisters released when destroyed
   2++E5D1 23 41                                DW $4123                    ; Ship's targetable area LoHi
   3++E5D3 19 E6                                DW TestVectorEdges          ; Edge Data
   4++E5D5 10                                   DB TestVectorEdgesSize      ; Size of Edge Data
   5++E5D6 54                                   DB $54                      ; Gun Vertex Byte offset
   6++E5D7 2A                                   DB $2A                      ; Explosion Count
   7++E5D8 07                                   DB TestVectorVertSize /6    ; Vertex Count /6
   8++E5D9 2A                                   DB TestVectorVertSize       ; Vertex Count
   9++E5DA 04                                   DB TestVectorEdgesCnt       ; Edges Count
  10++E5DB 00 00                                DW $0000                    ; Bounty LoHi
  11++E5DD 10                                   DB TestVectorNormalsSize    ; Face (Normal) Count
  12++E5DE 32                                   DB $32                      ; Range when it turns to a dot
  13++E5DF 96                                   DB $96                      ; Energy Max
  14++E5E0 1C                                   DB $1C                      ; Speed Max
  15++E5E1 29 E6                                DW TestVectorNormals        ; Normals
  16++E5E3 04                                   DB $04                      ; Q scaling
  17++E5E4 01                                   DB $01                      ; Laser power and Nbr Missiles
  18++E5E5 EF E5                                DW TestVectorVertices       ; Verticles Address
  19++E5E7 FE                                   DB ShipTypeDebug            ; Ship Type
  20++E5E8 00                                   DB 0                        ; NewB Tactics
  21++E5E9 00                                   DB 0                        ; AI Flags
  22++E5EA 00                                   DB $00                      ; chance of ECM module
  23++E5EB FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E5EC 00 00                                DW $0000                            ; no solid data
  25++E5EE 00                                   DB $00                              ; no solid data
  26++E5EF
  27++E5EF
  28++E5EF 00 40 00 1F  TestVectorVertices	    DB $00,$40,$00,$1F,$00,$00
  28++E5F3 00 00
  29++E5F5 00 20 00 1F                          DB $00,$20,$00,$1F,$00,$00
  29++E5F9 00 00
  30++E5FB 40 00 00 1F                          DB $40,$00,$00,$1F,$01,$01
  30++E5FF 01 01
  31++E601 20 00 00 1F                          DB $20,$00,$00,$1F,$01,$01
  31++E605 01 01
  32++E607 00 00 40 1F                          DB $00,$00,$40,$1F,$02,$02
  32++E60B 02 02
  33++E60D 00 00 20 1F                          DB $00,$00,$20,$1F,$02,$02
  33++E611 02 02
  34++E613 00 00 00 1F                          DB $00,$00,$00,$1F,$03,$03
  34++E617 03 03
  35++E619              TestVectorVertSize      equ $  - TestVectorVertices
  36++E619 1F 00 00 04  TestVectorEdges		    DB $1F,$00,$00,$04
  37++E61D 1F 00 08 0C                          DB $1F,$00,$08,$0C
  38++E621 1F 00 10 14                          DB $1F,$00,$10,$14
  39++E625 1F 00 18 18                          DB $1F,$00,$18,$18
  40++E629              TestVectorEdgesSize     equ $  - TestVectorEdges
  41++E629              TestVectorEdgesCnt      equ TestVectorEdgesSize/4
  42++E629              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
  43++E629 1F 00 10 00  TestVectorNormals	    DB $1F,$00,$10,$00
  44++E62D 1F 10 00 00                          DB $1F,$10,$00,$00
  45++E631 1F 00 00 10                          DB $1F,$00,$00,$10
  46++E635 1F 00 00 10                          DB $1F,$00,$00,$10
  47++E639              TestVectorNormalsSize   equ $  - TestVectorNormals
  48++E639              TestVectorLen           equ $  - TestVector
  49++E639
# file closed: ./Data/ships/TestVector.asm
  91+ E639                                      include "Data/ships/Thargoid.asm"
# file opened: ./Data/ships/Thargoid.asm
   1++E639 00           Thargoid:	            DB $00                                                      ; Number of cargo canisters released when destroyed
   2++E63A 49 26                                DW $2649                                                    ; Ship's targetable area LoHi
   3++E63C D0 E6                                DW ThargoidEdges                                            ; Edge Data
   4++E63E 68                                   DB ThargoidEdgesSize                                        ; Size of Edge Data
   5++E63F 3C                                   DB $3C                                                      ; Gun Vertex Byte offset
   6++E640 26                                   DB $26                                                      ; Explosion Count
   7++E641 14                                   DB ThargoidVertSize /6                                      ; Vertex Count /6
   8++E642 78                                   DB ThargoidVertSize                                         ; Vertex Count
   9++E643 1A                                   DB ThargoidEdgesCnt                                         ; Edges Count
  10++E644 F4 01                                DW $01F4                                                    ; Bounty LoHi
  11++E646 28                                   DB ThargoidNormalsSize                                      ; Face (Normal) Count
  12++E647 37                                   DB $37                                                      ; Range when it turns to a dot
  13++E648 F0                                   DB $F0                                                      ; Energy Max
  14++E649 27                                   DB $27                                                      ; Speed Max
  15++E64A 38 E7                                DW ThargoidNormals                                          ; Normals
  16++E64C 02                                   DB $02                                                      ; Q scaling
  17++E64D 16                                   DB $16                                                      ; Laser power and Nbr Missiles
  18++E64E 58 E6                                DW ThargoidVertices                                         ; Verticles Address
  19++E650 00                                   DB 0                                                        ; Ship Type
  20++E651 00                                   DB 0                                                        ; NewB Tactics
  21++E652 FC                                   DB ShipCanAnger | ShipFighterBaySize  | ShipFighterThargon  ; AI Flags
  22++E653 FF                                   DB $FF                                                      ; chance of ECM module
  23++E654 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E655 00 00                                DW $0000                            ; no solid data
  25++E657 00                                   DB $00                              ; no solid data
  26++E658
  27++E658
  28++E658 20 30 30 5F  ThargoidVertices:	    DB $20, $30, $30, $5F, $40, $88 ; 01
  28++E65C 40 88
  29++E65E 20 44 00 5F                          DB $20, $44, $00, $5F, $10, $44 ; 02
  29++E662 10 44
  30++E664 20 30 30 7F                          DB $20, $30, $30, $7F, $21, $44 ; 03
  30++E668 21 44
  31++E66A 20 00 44 3F                          DB $20, $00, $44, $3F, $32, $44 ; 04
  31++E66E 32 44
  32++E670 20 30 30 3F                          DB $20, $30, $30, $3F, $43, $55 ; 05
  32++E674 43 55
  33++E676 20 44 00 1F                          DB $20, $44, $00, $1F, $54, $66 ; 06
  33++E67A 54 66
  34++E67C 20 30 30 1F                          DB $20, $30, $30, $1F, $64, $77 ; 07
  34++E680 64 77
  35++E682 20 00 44 1F                          DB $20, $00, $44, $1F, $74, $88 ; 08
  35++E686 74 88
  36++E688 18 74 74 DF                          DB $18, $74, $74, $DF, $80, $99 ; 09
  36++E68C 80 99
  37++E68E 18 A4 00 DF                          DB $18, $A4, $00, $DF, $10, $99 ; 10
  37++E692 10 99
  38++E694 18 74 74 FF                          DB $18, $74, $74, $FF, $21, $99 ; 11
  38++E698 21 99
  39++E69A 18 00 A4 BF                          DB $18, $00, $A4, $BF, $32, $99 ; 12
  39++E69E 32 99
  40++E6A0 18 74 74 BF                          DB $18, $74, $74, $BF, $53, $99 ; 13
  40++E6A4 53 99
  41++E6A6 18 A4 00 9F                          DB $18, $A4, $00, $9F, $65, $99 ; 14
  41++E6AA 65 99
  42++E6AC 18 74 74 9F                          DB $18, $74, $74, $9F, $76, $99 ; 15
  42++E6B0 76 99
  43++E6B2 18 00 A4 9F                          DB $18, $00, $A4, $9F, $87, $99 ; 16
  43++E6B6 87 99
  44++E6B8 18 40 50 9E                          DB $18, $40, $50, $9E, $99, $99 ; 17
  44++E6BC 99 99
  45++E6BE 18 40 50 BE                          DB $18, $40, $50, $BE, $99, $99 ; 18
  45++E6C2 99 99
  46++E6C4 18 40 50 FE                          DB $18, $40, $50, $FE, $99, $99 ; 19
  46++E6C8 99 99
  47++E6CA 18 40 50 DE                          DB $18, $40, $50, $DE, $99, $99 ; 20
  47++E6CE 99 99
  48++E6D0
  49++E6D0              ThargoidVertSize: equ $ - ThargoidVertices
  50++E6D0
  51++E6D0
  52++E6D0
  53++E6D0 1F 84 00 1C  ThargoidEdges:	DB $1F, $84, $00, $1C           ;01
  54++E6D4 1F 40 00 04                  DB $1F, $40, $00, $04           ;02
  55++E6D8 1F 41 04 08                  DB $1F, $41, $04, $08           ;03
  56++E6DC 1F 42 08 0C                  DB $1F, $42, $08, $0C           ;04
  57++E6E0 1F 43 0C 10                  DB $1F, $43, $0C, $10           ;05
  58++E6E4 1F 54 10 14                  DB $1F, $54, $10, $14           ;06
  59++E6E8 1F 64 14 18                  DB $1F, $64, $14, $18           ;07
  60++E6EC 1F 74 18 1C                  DB $1F, $74, $18, $1C           ;08
  61++E6F0 1F 80 00 20                  DB $1F, $80, $00, $20           ;09
  62++E6F4 1F 10 04 24                  DB $1F, $10, $04, $24           ;10
  63++E6F8 1F 21 08 28                  DB $1F, $21, $08, $28           ;11
  64++E6FC 1F 32 0C 2C                  DB $1F, $32, $0C, $2C           ;12
  65++E700 1F 53 10 30                  DB $1F, $53, $10, $30           ;13
  66++E704 1F 65 14 34                  DB $1F, $65, $14, $34           ;14
  67++E708 1F 76 18 38                  DB $1F, $76, $18, $38           ;15
  68++E70C 1F 87 1C 3C                  DB $1F, $87, $1C, $3C           ;16
  69++E710 1F 98 20 3C                  DB $1F, $98, $20, $3C           ;17
  70++E714 1F 90 20 24                  DB $1F, $90, $20, $24           ;18
  71++E718 1F 91 24 28                  DB $1F, $91, $24, $28
  72++E71C 1F 92 28 2C                  DB $1F, $92, $28, $2C
  73++E720 1F 93 2C 30                  DB $1F, $93, $2C, $30
  74++E724 1F 95 30 34                  DB $1F, $95, $30, $34
  75++E728 1F 96 34 38                  DB $1F, $96, $34, $38
  76++E72C 1F 97 38 3C                  DB $1F, $97, $38, $3C
  77++E730 1E 99 40 44                  DB $1E, $99, $40, $44
  78++E734 1E 99 48 4C                  DB $1E, $99, $48, $4C
  79++E738
  80++E738              ThargoidEdgesSize: equ $ - ThargoidEdges
  81++E738
  82++E738              ThargoidEdgesCnt: equ ThargoidEdgesSize/4
  83++E738
  84++E738 5F 67 3C 19  ThargoidNormals:	DB $5F, $67, $3C, $19
  85++E73C 7F 67 3C 19  	DB $7F, $67, $3C, $19
  86++E740 7F 67 19 3C  	DB $7F, $67, $19, $3C
  87++E744 3F 67 19 3C  	DB $3F, $67, $19, $3C
  88++E748 1F 40 00 00  	DB $1F, $40, $00, $00
  89++E74C 3F 67 3C 19  	DB $3F, $67, $3C, $19
  90++E750 1F 67 3C 19  	DB $1F, $67, $3C, $19
  91++E754 1F 67 19 3C  	DB $1F, $67, $19, $3C
  92++E758 5F 67 19 3C  	DB $5F, $67, $19, $3C
  93++E75C 9F 30 00 00  	DB $9F, $30, $00, $00
  94++E760
  95++E760
  96++E760              ThargoidNormalsSize: equ $ - ThargoidNormals
  97++E760              ThargoidLen: equ $ - Thargoid
  98++E760
# file closed: ./Data/ships/Thargoid.asm
  92+ E760                                      include "Data/ships/Thargon.asm"
# file opened: ./Data/ships/Thargon.asm
   1++E760 F0           Thargon:	            DB $F0                          ; Number of cargo canisters released when destroyed
   2++E761 40 06                                DW $0640                        ; Ship's targetable area LoHi
   3++E763 BB E7                                DW ThargonEdges                 ; Edge Data
   4++E765 3C                                   DB ThargonEdgesSize             ; Size of Edge Data
   5++E766 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E767 12                                   DB $12                          ; Explosion Count
   7++E768 0A                                   DB ThargonVertSize /6           ; Vertex Count /6
   8++E769 3C                                   DB ThargonVertSize              ; Vertex Count
   9++E76A 0F                                   DB ThargonEdgesCnt              ; Edges Count
  10++E76B 32 00                                DW $0032                        ; Bounty LoHi
  11++E76D 1C                                   DB ThargonNormalsSize           ; Face (Normal) Count
  12++E76E 14                                   DB $14                          ; Range when it turns to a dot
  13++E76F 14                                   DB $14                          ; Energy Max
  14++E770 1E                                   DB $1E                          ; Speed Max
  15++E771 F7 E7                                DW ThargonNormals               ; Normals
  16++E773 02                                   DB $02                          ; Q scaling
  17++E774 10                                   DB $10                          ; Laser power and Nbr Missiles
  18++E775 7F E7                                DW ThargonVertices              ; Verticles Address
  19++E777 00                                   DB 0                            ; Ship Type
  20++E778 00                                   DB 0                            ; NewB Tactics
  21++E779 80                                   DB ShipCanAnger                 ; AI Flags
  22++E77A 00                                   DB $00                          ; chance of ECM module
  23++E77B FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E77C 00 00                                DW $0000                            ; no solid data
  25++E77E 00                                   DB $00                              ; no solid data
  26++E77F
  27++E77F
  28++E77F
  29++E77F 09 00 28 9F  ThargonVertices:	    DB $09, $00, $28, $9F, $01, $55
  29++E783 01 55
  30++E785 09 26 0C DF                          DB $09, $26, $0C, $DF, $01, $22
  30++E789 01 22
  31++E78B 09 18 20 FF                          DB $09, $18, $20, $FF, $02, $33
  31++E78F 02 33
  32++E791 09 18 20 BF                          DB $09, $18, $20, $BF, $03, $44
  32++E795 03 44
  33++E797 09 26 0C 9F                          DB $09, $26, $0C, $9F, $04, $55
  33++E79B 04 55
  34++E79D 09 00 08 3F                          DB $09, $00, $08, $3F, $15, $66
  34++E7A1 15 66
  35++E7A3 09 0A 0F 7F                          DB $09, $0A, $0F, $7F, $12, $66
  35++E7A7 12 66
  36++E7A9 09 06 1A 7F                          DB $09, $06, $1A, $7F, $23, $66
  36++E7AD 23 66
  37++E7AF 09 06 1A 3F                          DB $09, $06, $1A, $3F, $34, $66
  37++E7B3 34 66
  38++E7B5 09 0A 0F 3F                          DB $09, $0A, $0F, $3F, $45, $66
  38++E7B9 45 66
  39++E7BB
  40++E7BB              ThargonVertSize:        equ $ - ThargonVertices
  41++E7BB
  42++E7BB
  43++E7BB 1F 10 00 04  ThargonEdges:	        DB $1F, $10, $00, $04
  44++E7BF 1F 20 04 08                          DB $1F, $20, $04, $08
  45++E7C3 1F 30 08 0C                          DB $1F, $30, $08, $0C
  46++E7C7 1F 40 0C 10                          DB $1F, $40, $0C, $10
  47++E7CB 1F 50 00 10                          DB $1F, $50, $00, $10
  48++E7CF 1F 51 00 14                          DB $1F, $51, $00, $14
  49++E7D3 1F 21 04 18                          DB $1F, $21, $04, $18
  50++E7D7 1F 32 08 1C                          DB $1F, $32, $08, $1C
  51++E7DB 1F 43 0C 20                          DB $1F, $43, $0C, $20
  52++E7DF 1F 54 10 24                          DB $1F, $54, $10, $24
  53++E7E3 1F 61 14 18                          DB $1F, $61, $14, $18
  54++E7E7 1F 62 18 1C                          DB $1F, $62, $18, $1C
  55++E7EB 1F 63 1C 20                          DB $1F, $63, $1C, $20
  56++E7EF 1F 64 20 24                          DB $1F, $64, $20, $24
  57++E7F3 1F 65 24 14                          DB $1F, $65, $24, $14
  58++E7F7
  59++E7F7              ThargonEdgesSize:       equ $ - ThargonEdges
  60++E7F7
  61++E7F7
  62++E7F7              ThargonEdgesCnt:        equ ThargonEdgesSize/4
  63++E7F7
  64++E7F7
  65++E7F7 9F 24 00 00  ThargonNormals:	        DB $9F, $24, $00, $00
  66++E7FB 5F 14 05 07                          DB $5F, $14, $05, $07
  67++E7FF 7F 2E 2A 0E                          DB $7F, $2E, $2A, $0E
  68++E803 3F 24 00 68                          DB $3F, $24, $00, $68
  69++E807 3F 2E 2A 0E                          DB $3F, $2E, $2A, $0E
  70++E80B 1F 14 05 07                          DB $1F, $14, $05, $07
  71++E80F 1F 24 00 00                          DB $1F, $24, $00, $00
  72++E813
  73++E813
  74++E813              ThargonNormalsSize:     equ $ - ThargonNormals
  75++E813              ThargonLen:             equ $ - Thargon
  76++E813
# file closed: ./Data/ships/Thargon.asm
  93+ E813                                      include "Data/ships/TransportType10.asm"
# file opened: ./Data/ships/TransportType10.asm
   1++E813 00           TransportType10:	    DB $00                             ; Number of cargo canisters released when destroyed
   2++E814 C4 09                                DW $09C4                           ; Ship's targetable area LoHi
   3++E816 10 E9                                DW TransportType10Edges            ; Edge Data
   4++E818 B8                                   DB TransportType10EdgesSize        ; Size of Edge Data
   5++E819 30                                   DB $30                             ; Gun Vertex Byte offset
   6++E81A 1A                                   DB $1A                             ; Explosion Count
   7++E81B 25                                   DB TransportType10VertSize /6      ; Vertex Count /6
   8++E81C DE                                   DB TransportType10VertSize         ; Vertex Count
   9++E81D 2E                                   DB TransportType10EdgesCnt         ; Edges Count
  10++E81E 00 00                                DW $0000                           ; Bounty LoHi
  11++E820 38                                   DB TransportType10NormalsSize      ; Face (Normal) Count
  12++E821 10                                   DB $10                             ; Range when it turns to a dot
  13++E822 20                                   DB $20                             ; Energy Max
  14++E823 0A                                   DB $0A                             ; Speed Max
  15++E824 C8 E9                                DW TransportType10Normals          ; Normals
  16++E826 02                                   DB $02                             ; Q scaling
  17++E827 00                                   DB $00                             ; Laser power and Nbr Missiles
  18++E828 32 E8                                DW TransportType10Vertices         ; Verticles Address
  19++E82A 00                                   DB ShipTypeNormal                  ; Ship Type
  20++E82B 00                                   DB 0                               ; NewB Tactics
  21++E82C 00                                   DB 0                               ; AI Flags
  22++E82D FF                                   DB $FF                             ; chance of ECM module
  23++E82E FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E82F 00 00                                DW $0000                            ; no solid data
  25++E831 00                                   DB $00                              ; no solid data
  26++E832
  27++E832
  28++E832 00 0A 1A 3F  TransportType10Vertices:DB $00, $0A, $1A, $3F, $06, $77     ;01
  28++E836 06 77
  29++E838 19 04 1A BF                          DB $19, $04, $1A, $BF, $01, $77     ;02
  29++E83C 01 77
  30++E83E 1C 03 1A FF                          DB $1C, $03, $1A, $FF, $01, $22     ;03
  30++E842 01 22
  31++E844 19 08 1A FF                          DB $19, $08, $1A, $FF, $02, $33     ;04
  31++E848 02 33
  32++E84A 1A 08 1A 7F                          DB $1A, $08, $1A, $7F, $03, $44     ;05
  32++E84E 03 44
  33++E850 1D 03 1A 7F                          DB $1D, $03, $1A, $7F, $04, $55     ;06
  33++E854 04 55
  34++E856 1A 04 1A 3F                          DB $1A, $04, $1A, $3F, $05, $66     ;07
  34++E85A 05 66
  35++E85C 00 06 0C 13                          DB $00, $06, $0C, $13, $FF, $FF     ;08
  35++E860 FF FF
  36++E862 1E 01 0C DF                          DB $1E, $01, $0C, $DF, $17, $89     ;09
  36++E866 17 89
  37++E868 21 08 0C DF                          DB $21, $08, $0C, $DF, $12, $39     ;10
  37++E86C 12 39
  38++E86E 21 08 0C 5F                          DB $21, $08, $0C, $5F, $34, $5A     ;11
  38++E872 34 5A
  39++E874 1E 01 0C 5F                          DB $1E, $01, $0C, $5F, $56, $AB     ;12
  39++E878 56 AB
  40++E87A 0B 02 1E DF                          DB $0B, $02, $1E, $DF, $89, $CD     ;13
  40++E87E 89 CD
  41++E880 0D 08 1E DF                          DB $0D, $08, $1E, $DF, $39, $DD     ;14
  41++E884 39 DD
  42++E886 0E 08 1E 5F                          DB $0E, $08, $1E, $5F, $3A, $DD     ;15
  42++E88A 3A DD
  43++E88C 0B 02 1E 5F                          DB $0B, $02, $1E, $5F, $AB, $CD     ;16
  43++E890 AB CD
  44++E892 05 06 02 87                          DB $05, $06, $02, $87, $77, $77     ;17
  44++E896 77 77
  45++E898 12 03 02 87                          DB $12, $03, $02, $87, $77, $77     ;18
  45++E89C 77 77
  46++E89E 05 07 07 A7                          DB $05, $07, $07, $A7, $77, $77     ;19
  46++E8A2 77 77
  47++E8A4 12 04 07 A7                          DB $12, $04, $07, $A7, $77, $77     ;20
  47++E8A8 77 77
  48++E8AA 0B 06 0E A7                          DB $0B, $06, $0E, $A7, $77, $77     ;21
  48++E8AE 77 77
  49++E8B0 0B 05 07 A7                          DB $0B, $05, $07, $A7, $77, $77     ;22
  49++E8B4 77 77
  50++E8B6 05 07 0E 27                          DB $05, $07, $0E, $27, $66, $66     ;23
  50++E8BA 66 66
  51++E8BC 12 04 0E 27                          DB $12, $04, $0E, $27, $66, $66     ;24
  51++E8C0 66 66
  52++E8C2 0B 05 07 27                          DB $0B, $05, $07, $27, $66, $66     ;25
  52++E8C6 66 66
  53++E8C8 05 06 03 27                          DB $05, $06, $03, $27, $66, $66     ;26
  53++E8CC 66 66
  54++E8CE 12 03 03 27                          DB $12, $03, $03, $27, $66, $66     ;27
  54++E8D2 66 66
  55++E8D4 0B 04 08 07                          DB $0B, $04, $08, $07, $66, $66     ;28
  55++E8D8 66 66
  56++E8DA 0B 05 03 27                          DB $0B, $05, $03, $27, $66, $66     ;29
  56++E8DE 66 66
  57++E8E0 10 08 0D E6                          DB $10, $08, $0D, $E6, $33, $33     ;30
  57++E8E4 33 33
  58++E8E6 10 08 10 C6                          DB $10, $08, $10, $C6, $33, $33     ;31
  58++E8EA 33 33
  59++E8EC 11 08 0D 66                          DB $11, $08, $0D, $66, $33, $33     ;32
  59++E8F0 33 33
  60++E8F2 11 08 10 46                          DB $11, $08, $10, $46, $33, $33     ;33
  60++E8F6 33 33
  61++E8F8 0D 03 1A E8                          DB $0D, $03, $1A, $E8, $00, $00     ;34
  61++E8FC 00 00
  62++E8FE 0D 03 1A 68                          DB $0D, $03, $1A, $68, $00, $00     ;35
  62++E902 00 00
  63++E904 09 03 1A 25                          DB $09, $03, $1A, $25, $00, $00     ;36
  63++E908 00 00
  64++E90A 08 03 1A A5                          DB $08, $03, $1A, $A5, $00, $00     ;37
  64++E90E 00 00
  65++E910
  66++E910              TransportType10VertSize: equ $ - TransportType10Vertices
  67++E910
  68++E910
  69++E910
  70++E910 1F 07 00 04  TransportType10Edges:	DB $1F, $07, $00, $04               ;01
  71++E914 1F 01 04 08                          DB $1F, $01, $04, $08               ;02
  72++E918 1F 02 08 0C                          DB $1F, $02, $08, $0C               ;03
  73++E91C 1F 03 0C 10                          DB $1F, $03, $0C, $10               ;04
  74++E920 1F 04 10 14                          DB $1F, $04, $10, $14               ;05
  75++E924 1F 05 14 18                          DB $1F, $05, $14, $18               ;06
  76++E928 1F 06 00 18                          DB $1F, $06, $00, $18               ;07
  77++E92C 10 67 00 1C                          DB $10, $67, $00, $1C               ;08
  78++E930 1F 17 04 20                          DB $1F, $17, $04, $20               ;09
  79++E934 0B 12 08 24                          DB $0B, $12, $08, $24               ;10
  80++E938 1F 23 0C 24                          DB $1F, $23, $0C, $24               ;11
  81++E93C 1F 34 10 28                          DB $1F, $34, $10, $28               ;12
  82++E940 0B 45 14 28                          DB $0B, $45, $14, $28               ;13
  83++E944 1F 56 18 2C                          DB $1F, $56, $18, $2C               ;14
  84++E948 11 78 1C 20                          DB $11, $78, $1C, $20               ;15
  85++E94C 11 19 20 24                          DB $11, $19, $20, $24               ;16
  86++E950 11 5A 28 2C                          DB $11, $5A, $28, $2C               ;17
  87++E954 11 6B 1C 2C                          DB $11, $6B, $1C, $2C               ;18
  88++E958 13 BC 1C 3C                          DB $13, $BC, $1C, $3C               ;19
  89++E95C 13 8C 1C 30                          DB $13, $8C, $1C, $30               ;20
  90++E960 10 89 20 30                          DB $10, $89, $20, $30               ;21
  91++E964 1F 39 24 34                          DB $1F, $39, $24, $34               ;22
  92++E968 1F 3A 28 38                          DB $1F, $3A, $28, $38               ;23
  93++E96C 10 AB 2C 3C                          DB $10, $AB, $2C, $3C               ;24
  94++E970 1F 9D 30 34                          DB $1F, $9D, $30, $34               ;25
  95++E974 1F 3D 34 38                          DB $1F, $3D, $34, $38               ;26
  96++E978 1F AD 38 3C                          DB $1F, $AD, $38, $3C               ;27
  97++E97C 1F CD 30 3C                          DB $1F, $CD, $30, $3C               ;28
  98++E980 07 77 40 44                          DB $07, $77, $40, $44               ;29
  99++E984 07 77 48 4C                          DB $07, $77, $48, $4C               ;30
 100++E988 07 77 4C 50                          DB $07, $77, $4C, $50               ;31
 101++E98C 07 77 48 50                          DB $07, $77, $48, $50               ;32
 102++E990 07 77 50 54                          DB $07, $77, $50, $54               ;33
 103++E994 07 66 58 5C                          DB $07, $66, $58, $5C               ;34
 104++E998 07 66 5C 60                          DB $07, $66, $5C, $60               ;35
 105++E99C 07 66 60 58                          DB $07, $66, $60, $58               ;36
 106++E9A0 07 66 64 68                          DB $07, $66, $64, $68               ;37
 107++E9A4 07 66 68 6C                          DB $07, $66, $68, $6C               ;38
 108++E9A8 07 66 64 6C                          DB $07, $66, $64, $6C               ;39
 109++E9AC 07 66 6C 70                          DB $07, $66, $6C, $70               ;40
 110++E9B0 06 33 74 78                          DB $06, $33, $74, $78               ;41
 111++E9B4 06 33 7C 80                          DB $06, $33, $7C, $80               ;42
 112++E9B8 08 00 84 88                          DB $08, $00, $84, $88               ;43
 113++E9BC 05 00 88 8C                          DB $05, $00, $88, $8C               ;44
 114++E9C0 05 00 8C 90                          DB $05, $00, $8C, $90               ;45
 115++E9C4 05 00 90 84                          DB $05, $00, $90, $84               ;46
 116++E9C8
 117++E9C8              TransportType10EdgesSize: equ $ - TransportType10Edges
 118++E9C8
 119++E9C8
 120++E9C8              TransportType10EdgesCnt: equ TransportType10EdgesSize/4
 121++E9C8
 122++E9C8
 123++E9C8 3F 00 00 67  TransportType10Normals:	DB $3F, $00, $00, $67               ;01
 124++E9CC BF 6F 30 07                          DB $BF, $6F, $30, $07               ;02
 125++E9D0 FF 69 3F 15                          DB $FF, $69, $3F, $15               ;03
 126++E9D4 5F 00 22 00                          DB $5F, $00, $22, $00               ;04
 127++E9D8 7F 69 3F 15                          DB $7F, $69, $3F, $15               ;05
 128++E9DC 3F 6F 30 07                          DB $3F, $6F, $30, $07               ;06
 129++E9E0 1F 08 20 03                          DB $1F, $08, $20, $03               ;07
 130++E9E4 9F 08 20 03                          DB $9F, $08, $20, $03               ;08
 131++E9E8 93 08 22 0B                          DB $93, $08, $22, $0B               ;09
 132++E9EC 9F 4B 20 4F                          DB $9F, $4B, $20, $4F               ;10
 133++E9F0 1F 4B 20 4F                          DB $1F, $4B, $20, $4F               ;11
 134++E9F4 13 08 22 0B                          DB $13, $08, $22, $0B               ;12
 135++E9F8 1F 00 26 11                          DB $1F, $00, $26, $11               ;13
 136++E9FC 1F 00 00 79                          DB $1F, $00, $00, $79               ;14
 137++EA00
 138++EA00
 139++EA00              TransportType10NormalsSize: equ $ - TransportType10Normals
 140++EA00              TransportType10Len: equ $ - TransportType10
 141++EA00
# file closed: ./Data/ships/TransportType10.asm
  94+ EA00                                      include "Data/ships/Viper.asm"
# file opened: ./Data/ships/Viper.asm
   1++EA00 00           Viper:                  DB $00                         ; Number of cargo canisters released when destroyed
   2++EA01 F9 15                                DW $15F9                       ; Ship's targetable area LoHi
   3++EA03 79 EA                                DW ViperEdges                  ; Edge Data
   4++EA05 50                                   DB ViperEdgesSize              ; Size of Edge Data
   5++EA06 00                                   DB $00                         ; Gun Vertex Byte offset
   6++EA07 2A                                   DB $2A                         ; Explosion Count
   7++EA08 0F                                   DB ViperVertSize /6            ; Vertex Count /6
   8++EA09 5A                                   DB ViperVertSize               ; Vertex Count
   9++EA0A 14                                   DB ViperEdgesCnt               ; Edges Count
  10++EA0B 00 00                                DW $0000                       ; Bounty LoHi
  11++EA0D 1C                                   DB ViperNormalsSize            ; Face (Normal) Count
  12++EA0E 17                                   DB $17 ;$17 before                        ; Range when it turns to a dot
  13++EA0F 64                                   DB $64                         ; Energy Max
  14++EA10 20                                   DB $20                         ; Speed Max
  15++EA11 C9 EA                                DW ViperNormals                ; Normals
  16++EA13 01                                   DB $01                         ; Q scaling
  17++EA14 11                                   DB $11                         ; Laser power and Nbr Missiles
  18++EA15 1F EA                                DW ViperVertices               ; Verticles Address
  19++EA17 00                                   DB ShipTypeNormal              ; Ship Type
  20++EA18 00                                   DB 0                           ; NewB Tactics
  21++EA19 80                                   DB ShipCanAnger                ; AI Flags
  22++EA1A FF                                   DB $FF                         ; chance of ECM module
  23++EA1B FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EA1C 00 00                                DW $0000                            ; no solid data
  25++EA1E 00                                   DB $00                              ; no solid data
  26++EA1F
  27++EA1F
  28++EA1F 00 00 48 1F  ViperVertices:          DB $00, $00, $48, $1F, $21, $43
  28++EA23 21 43
  29++EA25 00 10 18 1E                          DB $00, $10, $18, $1E, $10, $22
  29++EA29 10 22
  30++EA2B 00 10 18 5E                          DB $00, $10, $18, $5E, $43, $55
  30++EA2F 43 55
  31++EA31 30 00 18 3F                          DB $30, $00, $18, $3F, $42, $66
  31++EA35 42 66
  32++EA37 30 00 18 BF                          DB $30, $00, $18, $BF, $31, $66
  32++EA3B 31 66
  33++EA3D 18 10 18 7E                          DB $18, $10, $18, $7E, $54, $66
  33++EA41 54 66
  34++EA43 18 10 18 FE                          DB $18, $10, $18, $FE, $35, $66
  34++EA47 35 66
  35++EA49 18 10 18 3F                          DB $18, $10, $18, $3F, $20, $66
  35++EA4D 20 66
  36++EA4F 18 10 18 BF                          DB $18, $10, $18, $BF, $10, $66
  36++EA53 10 66
  37++EA55 20 00 18 B3                          DB $20, $00, $18, $B3, $66, $66
  37++EA59 66 66
  38++EA5B 20 00 18 33                          DB $20, $00, $18, $33, $66, $66
  38++EA5F 66 66
  39++EA61 08 08 18 33                          DB $08, $08, $18, $33, $66, $66
  39++EA65 66 66
  40++EA67 08 08 18 B3                          DB $08, $08, $18, $B3, $66, $66
  40++EA6B 66 66
  41++EA6D 08 08 18 F2                          DB $08, $08, $18, $F2, $66, $66
  41++EA71 66 66
  42++EA73 08 08 18 72                          DB $08, $08, $18, $72, $66, $66
  42++EA77 66 66
  43++EA79              ViperVertSize           equ $  - ViperVertices
  44++EA79 1F 42 00 0C  ViperEdges:             DB $1F, $42, $00, $0C, $1E, $21, $00, $04
  44++EA7D 1E 21 00 04
  45++EA81 1E 43 00 08                          DB $1E, $43, $00, $08, $1F, $31, $00, $10
  45++EA85 1F 31 00 10
  46++EA89 1E 20 04 1C                          DB $1E, $20, $04, $1C, $1E, $10, $04, $20
  46++EA8D 1E 10 04 20
  47++EA91 1E 54 08 14                          DB $1E, $54, $08, $14, $1E, $53, $08, $18
  47++EA95 1E 53 08 18
  48++EA99 1F 60 1C 20                          DB $1F, $60, $1C, $20, $1E, $65, $14, $18
  48++EA9D 1E 65 14 18
  49++EAA1 1F 61 10 20                          DB $1F, $61, $10, $20, $1E, $63, $10, $18
  49++EAA5 1E 63 10 18
  50++EAA9 1F 62 0C 1C                          DB $1F, $62, $0C, $1C, $1E, $46, $0C, $14
  50++EAAD 1E 46 0C 14
  51++EAB1 13 66 24 30                          DB $13, $66, $24, $30, $12, $66, $24, $34
  51++EAB5 12 66 24 34
  52++EAB9 13 66 28 2C                          DB $13, $66, $28, $2C, $12, $66, $28, $38
  52++EABD 12 66 28 38
  53++EAC1 10 66 2C 38                          DB $10, $66, $2C, $38, $10, $66, $30, $34
  53++EAC5 10 66 30 34
  54++EAC9              ViperEdgesSize          equ $  - ViperEdges
  55++EAC9              ViperEdgesCnt           equ ViperEdgesSize/4
  56++EAC9 1F 00 20 00  ViperNormals            DB $1F, $00, $20, $00, $9F, $16, $21, $0B
  56++EACD 9F 16 21 0B
  57++EAD1 1F 16 21 0B                          DB $1F, $16, $21, $0B, $DF, $16, $21, $0B
  57++EAD5 DF 16 21 0B
  58++EAD9 5F 16 21 0B                          DB $5F, $16, $21, $0B, $5F, $00, $20, $00
  58++EADD 5F 00 20 00
  59++EAE1 3F 00 00 30                          DB $3F, $00, $00, $30
  60++EAE5              ViperNormalsSize        equ $  - ViperNormals
  61++EAE5              ViperLen                equ $  - Viper
  62++EAE5
# file closed: ./Data/ships/Viper.asm
  95+ EAE5                                      include "Data/ships/Worm.asm"
# file opened: ./Data/ships/Worm.asm
   1++EAE5 00           Worm:	                DB $00                      ; Number of cargo canisters released when destroyed
   2++EAE6 49 26                                DW $2649                    ; Ship's targetable area LoHi
   3++EAE8 40 EB                                DW WormEdges                ; Edge Data
   4++EAEA 40                                   DB WormEdgesSize            ; Size of Edge Data
   5++EAEB 00                                   DB $00                      ; Gun Vertex Byte offset
   6++EAEC 12                                   DB $12                      ; Explosion Count
   7++EAED 0A                                   DB WormVertSize /6          ; Vertex Count /6
   8++EAEE 3C                                   DB WormVertSize             ; Vertex Count
   9++EAEF 10                                   DB WormEdgesCnt             ; Edges Count
  10++EAF0 00 00                                DW $0000                    ; Bounty LoHi
  11++EAF2 20                                   DB WormNormalsSize          ; Face (Normal) Count
  12++EAF3 13                                   DB $13                      ; Range when it turns to a dot
  13++EAF4 1E                                   DB $1E                      ; Energy Max
  14++EAF5 17                                   DB $17                      ; Speed Max
  15++EAF6 80 EB                                DW WormNormals              ; Normals
  16++EAF8 03                                   DB $03                      ; Q scaling
  17++EAF9 30                                   DB $30                      ; Laser power and Nbr Missiles
  18++EAFA 04 EB                                DW WormVertices             ; Verticles Address
  19++EAFC 00                                   DB ShipTypeNormal           ; Ship Type
  20++EAFD 00                                   DB 0                        ; NewB Tactics
  21++EAFE 80                                   DB ShipCanAnger             ; AI Flags
  22++EAFF B0                                   DB $B0                      ; chance of ECM module
  23++EB00 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EB01 00 00                                DW $0000                            ; no solid data
  25++EB03 00                                   DB $00                              ; no solid data
  26++EB04
  27++EB04 0A 0A 23 5F  WormVertices:	        DB $0A, $0A, $23, $5F, $02, $77
  27++EB08 02 77
  28++EB0A 0A 0A 23 DF                          DB $0A, $0A, $23, $DF, $03, $77
  28++EB0E 03 77
  29++EB10 05 06 0F 1F                          DB $05, $06, $0F, $1F, $01, $24
  29++EB14 01 24
  30++EB16 05 06 0F 9F                          DB $05, $06, $0F, $9F, $01, $35
  30++EB1A 01 35
  31++EB1C 0F 0A 19 5F                          DB $0F, $0A, $19, $5F, $24, $77
  31++EB20 24 77
  32++EB22 0F 0A 19 DF                          DB $0F, $0A, $19, $DF, $35, $77
  32++EB26 35 77
  33++EB28 1A 0A 19 7F                          DB $1A, $0A, $19, $7F, $46, $77
  33++EB2C 46 77
  34++EB2E 1A 0A 19 FF                          DB $1A, $0A, $19, $FF, $56, $77
  34++EB32 56 77
  35++EB34 08 0E 19 3F                          DB $08, $0E, $19, $3F, $14, $66
  35++EB38 14 66
  36++EB3A 08 0E 19 BF                          DB $08, $0E, $19, $BF, $15, $66
  36++EB3E 15 66
  37++EB40
  38++EB40              WormVertSize: equ $ - WormVertices
  39++EB40
  40++EB40
  41++EB40 1F 07 00 04  WormEdges:	            DB $1F, $07, $00, $04
  42++EB44 1F 37 04 14                          DB $1F, $37, $04, $14
  43++EB48 1F 57 14 1C                          DB $1F, $57, $14, $1C
  44++EB4C 1F 67 1C 18                          DB $1F, $67, $1C, $18
  45++EB50 1F 47 18 10                          DB $1F, $47, $18, $10
  46++EB54 1F 27 10 00                          DB $1F, $27, $10, $00
  47++EB58 1F 02 00 08                          DB $1F, $02, $00, $08
  48++EB5C 1F 03 04 0C                          DB $1F, $03, $04, $0C
  49++EB60 1F 24 10 08                          DB $1F, $24, $10, $08
  50++EB64 1F 35 14 0C                          DB $1F, $35, $14, $0C
  51++EB68 1F 14 08 20                          DB $1F, $14, $08, $20
  52++EB6C 1F 46 20 18                          DB $1F, $46, $20, $18
  53++EB70 1F 15 0C 24                          DB $1F, $15, $0C, $24
  54++EB74 1F 56 24 1C                          DB $1F, $56, $24, $1C
  55++EB78 1F 01 08 0C                          DB $1F, $01, $08, $0C
  56++EB7C 1F 16 20 24                          DB $1F, $16, $20, $24
  57++EB80
  58++EB80              WormEdgesSize: equ $ - WormEdges
  59++EB80
  60++EB80
  61++EB80              WormEdgesCnt: equ WormEdgesSize/4
  62++EB80
  63++EB80
  64++EB80 1F 00 58 46  WormNormals:	        DB $1F, $00, $58, $46
  65++EB84 1F 00 45 0E                          DB $1F, $00, $45, $0E
  66++EB88 1F 46 42 23                          DB $1F, $46, $42, $23
  67++EB8C 9F 46 42 23                          DB $9F, $46, $42, $23
  68++EB90 1F 40 31 0E                          DB $1F, $40, $31, $0E
  69++EB94 9F 40 31 0E                          DB $9F, $40, $31, $0E
  70++EB98 3F 00 00 C8                          DB $3F, $00, $00, $C8
  71++EB9C 5F 00 50 00                          DB $5F, $00, $50, $00
  72++EBA0
  73++EBA0
  74++EBA0              WormNormalsSize: equ $ - WormNormals
  75++EBA0              WormLen: equ $ - Worm
  76++EBA0
# file closed: ./Data/ships/Worm.asm
  96+ EBA0                                      include "Data/ships/Rattler.asm"
# file opened: ./Data/ships/Rattler.asm
   1++EBA0 02           Rattler:	            DB $02                       ; Number of cargo canisters released when destroyed
   2++EBA1 70 17                                DW $1770                     ; Ship's targetable area LoHi
   3++EBA3 19 EC                                DW RattlerEdges              ; Edge Data
   4++EBA5 68                                   DB RattlerEdgesSize          ; Size of Edge Data
   5++EBA6 00                                   DB $00                       ; Gun Vertex Byte offset
   6++EBA7 2A                                   DB $2A                       ; Explosion Count
   7++EBA8 0F                                   DB RattlerVertSize /6        ; Vertex Count /6
   8++EBA9 5A                                   DB RattlerVertSize           ; Vertex Count
   9++EBAA 1A                                   DB RattlerEdgesCnt           ; Edges Count
  10++EBAB 96 00                                DW $0096                     ; Bounty LoHi
  11++EBAD 34                                   DB RattlerNormalsSize        ; Face (Normal) Count
  12++EBAE 0A                                   DB $0A                       ; Range when it turns to a dot
  13++EBAF 71                                   DB $71                       ; Energy Max
  14++EBB0 1F                                   DB $1F                       ; Speed Max
  15++EBB1 81 EC                                DW RattlerNormals            ; Normals
  16++EBB3 01                                   DB $01                       ; Q scaling
  17++EBB4 22                                   DB $20 | ShipMissiles2       ; Laser power and Nbr Missiles
  18++EBB5 BF EB                                DW RattlerVertices           ; Verticles Address
  19++EBB7 00                                   DB ShipTypeNormal            ; Ship Type
  20++EBB8 00                                   DB 0                         ; NewB Tactics
  21++EBB9 80                                   DB ShipCanAnger              ; AI Flags
  22++EBBA 90                                   DB $90                       ; chance of ECM module
  23++EBBB FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EBBC 00 00                                DW $0000                            ; no solid data
  25++EBBE 00                                   DB $00                              ; no solid data
  26++EBBF
  27++EBBF
  28++EBBF
  29++EBBF 00 00 3C 1F  RattlerVertices:	    DB $00, $00, $3C, $1F, $89, $23
  29++EBC3 89 23
  30++EBC5 28 00 28 1F                          DB $28, $00, $28, $1F, $9A, $34
  30++EBC9 9A 34
  31++EBCB 28 00 28 9F                          DB $28, $00, $28, $9F, $78, $12
  31++EBCF 78 12
  32++EBD1 3C 00 00 1F                          DB $3C, $00, $00, $1F, $AB, $45
  32++EBD5 AB 45
  33++EBD7 3C 00 00 9F                          DB $3C, $00, $00, $9F, $67, $01
  33++EBDB 67 01
  34++EBDD 46 00 28 3F                          DB $46, $00, $28, $3F, $CC, $5B
  34++EBE1 CC 5B
  35++EBE3 46 00 28 BF                          DB $46, $00, $28, $BF, $CC, $06
  35++EBE7 CC 06
  36++EBE9 00 14 28 3F                          DB $00, $14, $28, $3F, $FF, $FF
  36++EBED FF FF
  37++EBEF 00 14 28 7F                          DB $00, $14, $28, $7F, $FF, $FF
  37++EBF3 FF FF
  38++EBF5 0A 06 28 AA                          DB $0A, $06, $28, $AA, $CC, $CC
  38++EBF9 CC CC
  39++EBFB 0A 06 28 EA                          DB $0A, $06, $28, $EA, $CC, $CC
  39++EBFF CC CC
  40++EC01 14 00 28 AA                          DB $14, $00, $28, $AA, $CC, $CC
  40++EC05 CC CC
  41++EC07 0A 06 28 2A                          DB $0A, $06, $28, $2A, $CC, $CC
  41++EC0B CC CC
  42++EC0D 0A 06 28 6A                          DB $0A, $06, $28, $6A, $CC, $CC
  42++EC11 CC CC
  43++EC13 14 00 28 2A                          DB $14, $00, $28, $2A, $CC, $CC
  43++EC17 CC CC
  44++EC19
  45++EC19              RattlerVertSize: equ $ - RattlerVertices
  46++EC19
  47++EC19
  48++EC19 1F 06 10 18  RattlerEdges:	DB $1F, $06, $10, $18
  49++EC1D 1F 17 08 10  	DB $1F, $17, $08, $10
  50++EC21 1F 28 00 08  	DB $1F, $28, $00, $08
  51++EC25 1F 39 00 04  	DB $1F, $39, $00, $04
  52++EC29 1F 4A 04 0C  	DB $1F, $4A, $04, $0C
  53++EC2D 1F 5B 0C 14  	DB $1F, $5B, $0C, $14
  54++EC31 1F 0C 18 1C  	DB $1F, $0C, $18, $1C
  55++EC35 1F 6C 18 20  	DB $1F, $6C, $18, $20
  56++EC39 1F 01 10 1C  	DB $1F, $01, $10, $1C
  57++EC3D 1F 67 10 20  	DB $1F, $67, $10, $20
  58++EC41 1F 12 08 1C  	DB $1F, $12, $08, $1C
  59++EC45 1F 78 08 20  	DB $1F, $78, $08, $20
  60++EC49 1F 23 00 1C  	DB $1F, $23, $00, $1C
  61++EC4D 1F 89 00 20  	DB $1F, $89, $00, $20
  62++EC51 1F 34 04 1C  	DB $1F, $34, $04, $1C
  63++EC55 1F 9A 04 20  	DB $1F, $9A, $04, $20
  64++EC59 1F 45 0C 1C  	DB $1F, $45, $0C, $1C
  65++EC5D 1F AB 0C 20  	DB $1F, $AB, $0C, $20
  66++EC61 1F 5C 14 1C  	DB $1F, $5C, $14, $1C
  67++EC65 1F BC 14 20  	DB $1F, $BC, $14, $20
  68++EC69 0A CC 24 28  	DB $0A, $CC, $24, $28
  69++EC6D 0A CC 28 2C  	DB $0A, $CC, $28, $2C
  70++EC71 0A CC 2C 24  	DB $0A, $CC, $2C, $24
  71++EC75 0A CC 30 34  	DB $0A, $CC, $30, $34
  72++EC79 0A CC 34 38  	DB $0A, $CC, $34, $38
  73++EC7D 0A CC 38 30  	DB $0A, $CC, $38, $30
  74++EC81
  75++EC81              RattlerEdgesSize: equ $ - RattlerEdges
  76++EC81
  77++EC81
  78++EC81              RattlerEdgesCnt: equ RattlerEdgesSize/4
  79++EC81
  80++EC81
  81++EC81 9F 1A 5C 06  RattlerNormals:	DB $9F, $1A, $5C, $06
  82++EC85 9F 17 5C 0B  	DB $9F, $17, $5C, $0B
  83++EC89 9F 09 5D 12  	DB $9F, $09, $5D, $12
  84++EC8D 1F 09 5D 12  	DB $1F, $09, $5D, $12
  85++EC91 1F 17 5C 0B  	DB $1F, $17, $5C, $0B
  86++EC95 1F 1A 5C 06  	DB $1F, $1A, $5C, $06
  87++EC99 DF 1A 5C 06  	DB $DF, $1A, $5C, $06
  88++EC9D DF 17 5C 0B  	DB $DF, $17, $5C, $0B
  89++ECA1 DF 09 5D 12  	DB $DF, $09, $5D, $12
  90++ECA5 5F 09 5D 12  	DB $5F, $09, $5D, $12
  91++ECA9 5F 17 5C 0B  	DB $5F, $17, $5C, $0B
  92++ECAD 5F 1A 5C 06  	DB $5F, $1A, $5C, $06
  93++ECB1 3F 00 00 60  	DB $3F, $00, $00, $60
  94++ECB5
  95++ECB5              RattlerNormalsSize: equ $ - RattlerNormals
  96++ECB5              RattlerLen: equ $ - Rattler
  97++ECB5
# file closed: ./Data/ships/Rattler.asm
  97+ ECB5
# file closed: ./Data/ShipModelMetaData3.asm
 964  ECB5              ;;Privisioned for more models ; Bank 69  ------------------------------------------------------------------------------------------------------------------------
 965  ECB5              ;;Privisioned for more models     SLOT    ShipModelsAddr
 966  ECB5              ;;Privisioned for more models     PAGE    BankShipModels4
 967  ECB5              ;;Privisioned for more models 	ORG     ShipModelsAddr, BankShipModels4
 968  ECB5                  DISPLAY "Bank ",BankShipModels3," - Bytes free ",/D, $2000 - ($-ShipModelsAddr), " - BankShipModels3"
 969  ECB5              ; Bank 60  ------------------------------------------------------------------------------------------------------------------------
 970  ECB5                                  SLOT    SpritemembankAddr
 971  ECB5                                  PAGE    BankSPRITE
 972  ECB5                                  ORG     SpritemembankAddr, BankSPRITE
 973  E000                                  INCLUDE "./Layer3Sprites/sprite_routines.asm"
# file opened: ./Layer3Sprites/sprite_routines.asm
   1+ E000
   2+ E000              galactic_cursor_sprite				equ	0                            ; 00
   3+ E000              galactic_cursor_sprite1				equ	galactic_cursor_sprite+1     ; 01
   4+ E000              galactic_cursor_sprite2				equ	galactic_cursor_sprite1+2    ; 02
   5+ E000                                                                                   ;
   6+ E000              galactic_hyper_sprite				equ	galactic_cursor_sprite2+1    ; 03
   7+ E000              ;galactic_hyper_sprite1				equ galactic_hyper_sprite+1      ;
   8+ E000              ;galactic_hyper_sprite2				equ	galactic_hyper_sprite1+1     ;
   9+ E000
  10+ E000              local_cursor_sprite					equ	galactic_hyper_sprite+1      ; 04
  11+ E000              local_cursor_sprite1				equ	local_cursor_sprite+1        ; 05
  12+ E000              local_cursor_sprite2				equ	local_cursor_sprite1+1       ; 06
  13+ E000
  14+ E000              local_hyper_sprite					equ	local_cursor_sprite2+1       ; 07
  15+ E000              local_hyper_sprite1					equ	local_hyper_sprite+1         ; 08
  16+ E000              local_hyper_sprite2					equ	local_hyper_sprite1+2        ; 09
  17+ E000
  18+ E000              reticlule_sprite1                   equ	local_hyper_sprite2+1        ; 10
  19+ E000              reticlule_sprite2                   equ	reticlule_sprite1+1          ; 11
  20+ E000              reticlule_sprite3                   equ	reticlule_sprite2+1          ; 12
  21+ E000              reticlule_sprite4                   equ reticlule_sprite3+1          ; 13
  22+ E000
  23+ E000              laser_sprite1                       equ	reticlule_sprite4+1          ; 14
  24+ E000              laser_sprite2                       equ	laser_sprite1    +1          ; 15
  25+ E000              laser_sprite3                       equ	laser_sprite2    +1          ; 16
  26+ E000              laser_sprite4                       equ laser_sprite3    +1          ; 17
  27+ E000              laser_sprite5                       equ	laser_sprite4    +1          ; 18
  28+ E000              laser_sprite6                       equ	laser_sprite5    +1          ; 19
  29+ E000              laser_sprite7                       equ	laser_sprite6    +1          ; 20
  30+ E000              laser_sprite8                       equ laser_sprite7    +1          ; 21
  31+ E000              laser_sprite9                       equ	laser_sprite8    +1          ; 22
  32+ E000              laser_sprite10                      equ	laser_sprite9    +1          ; 23
  33+ E000              laser_sprite11                      equ	laser_sprite10   +1          ; 24
  34+ E000              laser_sprite12                      equ laser_sprite11   +1          ; 25
  35+ E000              laser_sprite13                      equ	laser_sprite12   +1          ; 26
  36+ E000              laser_sprite14                      equ	laser_sprite13   +1          ; 27
  37+ E000              laser_sprite15                      equ	laser_sprite14   +1          ; 28
  38+ E000              laser_sprite16                      equ laser_sprite15   +1          ; 29
  39+ E000              compass_sun                         equ laser_sprite16   +1          ; 30
  40+ E000              compass_station                     equ compass_sun      +1          ; 31
  41+ E000              targetting_sprite1                  equ compass_station  +1          ; 32
  42+ E000              targetting_sprite2                  equ targetting_sprite1   +1      ; 33
  43+ E000              ECM_sprite                          equ targetting_sprite2   +1      ; 34
  44+ E000              missile_sprite1                     equ ECM_sprite       +1          ; 35
  45+ E000              missile_sprite2                     equ missile_sprite1  +1          ; 36
  46+ E000              missile_sprite3                     equ missile_sprite2  +1          ; 37
  47+ E000              missile_sprite4                     equ missile_sprite3  +1          ; 38
  48+ E000
  49+ E000              glactic_pattern_1					equ 0
  50+ E000              glactic_hyper_pattern_1             equ 2
  51+ E000              local_present_cursor                equ 4
  52+ E000              local_hyper_pattern                 equ 7
  53+ E000              reticule_pattern_1                  equ 10
  54+ E000              reticule_pattern_2                  equ 11
  55+ E000              laser_pattern_1                     equ 12
  56+ E000              laser_pattern_2                     equ 13
  57+ E000              laser_pattern_3                     equ 14
  58+ E000              laser_pattern_4                     equ 15
  59+ E000              laser_pattern_5                     equ 16
  60+ E000              targetting_pattern                  equ 23
  61+ E000              lock_pattern                        equ 24
  62+ E000              ecm_pattern                         equ 25
  63+ E000              missile_ready_pattern               equ 26
  64+ E000              missile_armed_pattern               equ 27
  65+ E000              missile_locked_pattern              equ 28
  66+ E000
  67+ E000              compass_sun_infront                 equ 17
  68+ E000              compass_sun_behind                  equ 18
  69+ E000              compass_station_infront             equ 19
  70+ E000              compass_station_behind              equ 20
  71+ E000              spritecursoroffset					equ 17
  72+ E000              spriteborderoffset                  equ 32
  73+ E000
  74+ E000              HideSprite:                 MACRO   spritenbr
  75+ E000 ~                                        nextreg		SPRITE_PORT_INDEX_REGISTER,spritenbr
  76+ E000 ~                                        nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
  77+ E000                                          ENDM
  78+ E000
  79+ E000              ; " sprite_big BC = rowcol, D = sprite nbr , E= , pattern"
  80+ E000              sprite_big:
  81+ E000 7A           .SetAnchor:	                ld		a,d                                 ; a = sprite nbr, bug fix?
  82+ E001 F5                                       push	af									; save id for next few
  83+ E002 D5                                       push	de
  84+ E003 ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
  85+ E006              ; write out X position bits 1 to 8
  86+ E006 79                                       ld		a,c
  87+ E007 21 11 00                                 ld      hl,spritecursoroffset
  88+ E00A ED 31                                    add		hl,a                                ; hl = full x position
  89+ E00C 7D                                       ld		a,l
  90+ E00D ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
  91+ E010              ; write out Y position bits 1 to 8
  92+ E010 EB                                       ex		de,hl								; de = full x position
  93+ E011 78                                       ld		a,b
  94+ E012 21 11 00                                 ld      hl,spritecursoroffset
  95+ E015 ED 31                                    add		hl,a
  96+ E017 7D                                       ld		a,l                                 ; hl = full y position
  97+ E018 ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
  98+ E01B              ; write out MSB of X as its an anchor
  99+ E01B 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
 100+ E01C ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 101+ E01F              ; write out sprite pattern
 102+ E01F D1                                       pop		de                                  ; de = pattern and sprite nbr
 103+ E020 7B                                       ld		a,e
 104+ E021 F6 C0                                    or		%11000000							;
 105+ E023 ED 92 38                                 nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
 106+ E026              ; write out msb of y in h must be bit 0 only
 107+ E026 3E 00                                    ld		a,%00000000							; big unified composite
 108+ E028 B4                                       or		h									; MSB Y
 109+ E029 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 110+ E02C F1           .BigSprite1:                pop		af
 111+ E02D 3C                                       inc		a
 112+ E02E F5                                       push	af
 113+ E02F ED 92 34                                 nextreg		SPRITE_PORT_INDEX_REGISTER,a
 114+ E032 3E 10                                    ld		a,16
 115+ E034 ED 92 35                                 nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
 116+ E037 AF                                       xor 	a
 117+ E038 ED 92 36                                 nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
 118+ E03B ED 92 37                                 nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
 119+ E03E 3E C1                                    ld		a,%11000001							; relative and 4 bytes of data, pattern 1
 120+ E040 ED 92 38                                 nextreg		SPRITE_PORT_ATTR3_REGISTER,a
 121+ E043 3E 41                                    ld		a,%01000001							; big unified composite
 122+ E045 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 123+ E048 F1           .BigSprite2:                pop		af
 124+ E049 3C                                       inc		a
 125+ E04A ED 92 34                                 nextreg		SPRITE_PORT_INDEX_REGISTER,a
 126+ E04D AF                                       xor		a
 127+ E04E ED 92 35                                 nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
 128+ E051 3E 10                                    ld		a,16
 129+ E053 ED 92 36                                 nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
 130+ E056 AF                                       xor		a
 131+ E057 ED 92 37                                 nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
 132+ E05A 3E C2                                    ld		a,%11000010							; relative and 4 bytes of data, pattern 2
 133+ E05C ED 92 38                                 nextreg		SPRITE_PORT_ATTR3_REGISTER,a
 134+ E05F 3E 41                                    ld		a,%01000001							; big unified composite
 135+ E061 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 136+ E064 C9                                       ret
 137+ E065
 138+ E065              ; for a sinle sprite within 256x192 area
 139+ E065 7A           sprite_single:          ld		a,d                                 ; a = sprite nbr, bug fix?
 140+ E066 D5                                   push    de
 141+ E067 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 142+ E06A              ; write out X position bits 1 to 8
 143+ E06A 79                                   ld		a,c                                 ; a = column (c)
 144+ E06B 21 20 00                             ld      hl,spriteborderoffset
 145+ E06E ED 31                                add		hl,a                                ; hl = full x position
 146+ E070 EB                                   ex		de,hl								; de = full x position
 147+ E071 7B                                   ld		a,e
 148+ E072 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 149+ E075              ; write out Y position bits 1 to 8
 150+ E075 78                                   ld		a,b                                 ; a = row
 151+ E076 21 20 00                             ld      hl,spriteborderoffset
 152+ E079 ED 31                                add		hl,a
 153+ E07B 7D                                   ld		a,l                                 ; hl = full y position
 154+ E07C ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 155+ E07F              ; write out MSB of X as its an anchor
 156+ E07F 7A                                   ld		a,d									; de = MSB of X (hl bit 0)
 157+ E080 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 158+ E083              ; write out sprite pattern
 159+ E083 D1                                   pop     de
 160+ E084 7B                                   ld		a,e
 161+ E085 F6 80                                or		%10000000							;
 162+ E087 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
 163+ E08A              ; write out extended attribute
 164+ E08A 3E 00                                ld      a,%00000000                         ; its a single sprite
 165+ E08C B4                                   or      h
 166+ E08D ED 92 39                             nextreg	SPRITE_PORT_ATTR4_REGISTER,a
 167+ E090 C9                                   ret
 168+ E091              ; ">sprite_galactic_cursor BC = rowcol"
 169+ E091 16 00        sprite_galactic_cursor:     ld		d,galactic_cursor_sprite
 170+ E093 1E 00                                    ld		e,0
 171+ E095 78                                       ld		a,b
 172+ E096 C6 18                                    add		a,galactic_chart_y_offset
 173+ E098 47                                       ld		b,a
 174+ E099 CD 00 E0                                 call	sprite_big
 175+ E09C C9                                       ret
 176+ E09D
 177+ E09D              ; "> sprite_galactic_hyper_cursorBC = rowcol"
 178+ E09D 78           sprite_galactic_hyper_cursor:ld		a,b
 179+ E09E C6 04                                    add		a,galactic_chart_hyper_offset
 180+ E0A0 47                                       ld		b,a
 181+ E0A1 16 04                                    ld		d,galactic_hyper_sprite
 182+ E0A3 1E 03                                    ld		e,3
 183+ E0A5 CD 65 E0                                 call	sprite_single ; sprite_big:
 184+ E0A8 C9                                       ret
 185+ E0A9
 186+ E0A9
 187+ E0A9              ; moves hyperspace cursor to target system x position
 188+ E0A9 3E 04        sprite_ghc_move:            ld		a,galactic_hyper_sprite
 189+ E0AB ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 190+ E0AE              ; write out X position bits 1 to 8
 191+ E0AE 79                                       ld		a,c
 192+ E0AF 21 1C 00                                 ld      hl,galactic_chart_hyper_x_offset
 193+ E0B2 ED 31                                    add		hl,a                                ; hl = full x position
 194+ E0B4 7D                                       ld		a,l
 195+ E0B5 ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 196+ E0B8              ; write out Y position bits 1 to 8
 197+ E0B8 EB                                       ex		de,hl								; de = full x position
 198+ E0B9 CB 38                                    srl		b			    					; row is row / 2
 199+ E0BB 78                                       ld      a,b
 200+ E0BC 21 34 00                                 ld      hl,galactic_chart_hyper_y_offset
 201+ E0BF ED 31                                    add		hl,a
 202+ E0C1 7D                                       ld		a,l                                 ; hl = full y position
 203+ E0C2 ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 204+ E0C5              ; write out MSB of X as its an anchor
 205+ E0C5 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
 206+ E0C6 ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 207+ E0C9              ; write out msb of y in h must be bit 0 only
 208+ E0C9 3E 00                                    ld		a,%00000000							; big unified composite
 209+ E0CB B2                                       or		d									; MSB Y
 210+ E0CC ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 211+ E0CF C9                                       ret
 212+ E0D0
 213+ E0D0
 214+ E0D0 3E 08        sprite_lhc_move:            ld		a,local_hyper_sprite
 215+ E0D2 ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 216+ E0D5              ; write out X position bits 1 to 8
 217+ E0D5 79                                       ld		a,c
 218+ E0D6 21 11 00                                 ld      hl,spritecursoroffset
 219+ E0D9 ED 31                                    add		hl,a                                ; hl = full x position
 220+ E0DB 7D                                       ld		a,l
 221+ E0DC ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 222+ E0DF              ; write out Y position bits 1 to 8
 223+ E0DF EB                                       ex		de,hl								; de = full x position
 224+ E0E0 78                                       ld		a,b
 225+ E0E1 21 11 00                                 ld      hl,spritecursoroffset
 226+ E0E4 ED 31                                    add		hl,a
 227+ E0E6 7D                                       ld		a,l                                 ; hl = full y position
 228+ E0E7 ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 229+ E0EA              ; write out MSB of X as its an anchor
 230+ E0EA 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
 231+ E0EB ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 232+ E0EE              ; write out msb of y in h must be bit 0 only
 233+ E0EE 3E 00                                    ld		a,%00000000							; big unified composite
 234+ E0F0 B2                                       or		d									; MSB Y
 235+ E0F1 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 236+ E0F4 C9                                       ret
 237+ E0F5
 238+ E0F5              ; "sprite_local_cursor BC = rowcol"
 239+ E0F5 16 05        sprite_local_cursor:        ld		d,local_cursor_sprite
 240+ E0F7 1E 04                                    ld		e,local_present_cursor
 241+ E0F9 CD 00 E0                                 call	sprite_big
 242+ E0FC C9                                       ret
 243+ E0FD
 244+ E0FD              ; "sprite_local_hyper_cursor BC = rowcol"
 245+ E0FD 16 08        sprite_local_hyper_cursor:  ld		d,local_hyper_sprite
 246+ E0FF 1E 07                                    ld		e,local_hyper_pattern
 247+ E101 CD 00 E0                                 call	sprite_big
 248+ E104 C9                                       ret
 249+ E105
 250+ E105              compass_offset              equ 2
 251+ E105              ScannerX                    equ 128
 252+ E105              ScannerY                    equ 171
 253+ E105              SunScanCenterX              equ 92
 254+ E105              SunScanCenterY              equ 171
 255+ E105              PlanetScanCenterX           equ 229
 256+ E105              PlanetScanCenterY           equ 171
 257+ E105
 258+ E105
 259+ E105              ; Put on compas based on bc = Y X position offset from compass center
 260+ E105 3E 20        compass_sun_move:       ld		a,compass_sun
 261+ E107 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 262+ E10A              ; write out X position bits 1 to 8
 263+ E10A 3E 5A                                ld      a, SunScanCenterX-compass_offset
 264+ E10C 81                                   add     a,c
 265+ E10D ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 266+ E110              ; write out Y position bits 1 to 8
 267+ E110 3E A9                                ld      a, SunScanCenterY-compass_offset
 268+ E112 90                                   sub     b
 269+ E113 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 270+ E116 C9                                   ret
 271+ E117
 272+ E117              ; Put on compas based on bc = Y X position offset from compass center
 273+ E117 3E 21        compass_station_move:   ld		a,compass_station
 274+ E119 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 275+ E11C              ; write out X position bits 1 to 8
 276+ E11C 3E E3                                ld      a, PlanetScanCenterX-compass_offset
 277+ E11E 81                                   add     a,c
 278+ E11F ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 279+ E122              ; write out Y position bits 1 to 8
 280+ E122 3E A9                                ld      a, PlanetScanCenterY-compass_offset
 281+ E124 90                                   sub     b
 282+ E125 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 283+ E128 C9                                   ret
 284+ E129
 285+ E129              ReticuleCentreX         EQU (256/2)+32 -1
 286+ E129              ReticuleCentreY         EQU (192/2)+32 -1
 287+ E129              ReticuleOffset          EQU 8
 288+ E129
 289+ E129              TargetetingCentreX1     EQU ReticuleCentreX -32
 290+ E129              TargetetingCentreX2     EQU ReticuleCentreX +16
 291+ E129              TargetetingCentreY      EQU ReticuleCentreY -7
 292+ E129
 293+ E129              sprite_missile_x        EQU 2+32
 294+ E129              sprite_missile_y        EQU 192-8+32
 295+ E129
 296+ E129              sprite_ecm_x            EQU (6*8) +2 +32
 297+ E129              sprite_ecm_y            EQU 192-15+32
 298+ E129
 299+ E129 3E 24        sprite_ECM:             ld      a,ECM_sprite
 300+ E12B ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a
 301+ E12E 3E 52                                ld      a,sprite_ecm_x
 302+ E130 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a
 303+ E133 3E D1                                ld		a,sprite_ecm_y
 304+ E135 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 305+ E138 3E 99                                ld      a,ecm_pattern | %10000000
 306+ E13A ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 307+ E13D C9                                   ret
 308+ E13E
 309+ E13E ED 92 34     sprite_missile_ready:   nextreg SPRITE_PORT_INDEX_REGISTER,a
 310+ E141 79                                   ld      a,c
 311+ E142 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a
 312+ E145 3E D8                                ld		a,sprite_missile_y
 313+ E147 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 314+ E14A 3E 9A                                ld      a,missile_ready_pattern | %10000000
 315+ E14C ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 316+ E14F C9                                   ret
 317+ E150
 318+ E150 3E 25        sprite_missile_1:       ld      a,missile_sprite1
 319+ E152 0E 22                                ld      c,sprite_missile_x
 320+ E154 C3 3E E1                             jp      sprite_missile_ready
 321+ E157
 322+ E157 3E 26        sprite_missile_2:       ld      a,missile_sprite2
 323+ E159 0E 31                                ld      c,sprite_missile_x+15
 324+ E15B C3 3E E1                             jp      sprite_missile_ready
 325+ E15E
 326+ E15E 3E 27        sprite_missile_3:       ld      a,missile_sprite3
 327+ E160 0E 3B                                ld      c,sprite_missile_x+25
 328+ E162 C3 3E E1                             jp      sprite_missile_ready
 329+ E165
 330+ E165 3E 28        sprite_missile_4:       ld      a,missile_sprite4
 331+ E167 0E 45                                ld      c,sprite_missile_x +35
 332+ E169 C3 3E E1                             jp      sprite_missile_ready
 333+ E16C
 334+ E16C
 335+ E16C
 336+ E16C 3E 0C        sprite_reticule:        ld      a,reticlule_sprite1                 ; LEFT ARM
 337+ E16E ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 338+ E171 3E 87                                ld      a,ReticuleCentreX -16 - ReticuleOffset
 339+ E173 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 340+ E176 3E 7F                                ld		a,ReticuleCentreY
 341+ E178 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 342+ E17B AF                                   xor     a
 343+ E17C ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 344+ E17F 3E 8B                                ld      a,reticule_pattern_2 | %10000000
 345+ E181 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 346+ E184 3E 0D        .rightReticule          ld      a,reticlule_sprite2                 ; RIGHT ARM
 347+ E186 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 348+ E189 3E A7                                ld      a,ReticuleCentreX + ReticuleOffset
 349+ E18B ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 350+ E18E 3E 7F                                ld		a,ReticuleCentreY
 351+ E190 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 352+ E193 3E 08                                ld      a,%00001000
 353+ E195 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring horizontal
 354+ E198 3E 8B                                ld      a,reticule_pattern_2 | %10000000
 355+ E19A ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 356+ E19D 3E 0E        .topReticule            ld      a,reticlule_sprite3
 357+ E19F ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 358+ E1A2 3E 9F                                ld      a,ReticuleCentreX
 359+ E1A4 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 360+ E1A7 3E 67                                ld		a,ReticuleCentreY-16 - ReticuleOffset
 361+ E1A9 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 362+ E1AC AF                                   xor     a
 363+ E1AD ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 364+ E1B0 3E 8A                                ld      a,reticule_pattern_1 | %10000000
 365+ E1B2 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 366+ E1B5 3E 0F        .bottomReticule         ld      a,reticlule_sprite4
 367+ E1B7 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 368+ E1BA 3E 9F                                ld      a,ReticuleCentreX
 369+ E1BC ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 370+ E1BF 3E 87                                ld		a,ReticuleCentreY + ReticuleOffset
 371+ E1C1 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 372+ E1C4 3E 04                                ld      a,%00000100
 373+ E1C6 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring vertical
 374+ E1C9 3E 8A                                ld      a,reticule_pattern_1 | %10000000
 375+ E1CB ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 376+ E1CE C9                                   ret
 377+ E1CF
 378+ E1CF              laserbasex              equ 6
 379+ E1CF              laserbasey              equ 14
 380+ E1CF
 381+ E1CF              ShowSprite              MACRO   spritenbr, patternnbr
 382+ E1CF ~                                    ld      a, spritenbr
 383+ E1CF ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 384+ E1CF ~                                    ld      a,patternnbr | %10000000
 385+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 386+ E1CF                                      ENDM
 387+ E1CF
 388+ E1CF              LeftLaser:              MACRO   xoffset, yoffset, spriteL, patternL
 389+ E1CF ~                                    ld      a, spriteL
 390+ E1CF ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 391+ E1CF ~                                    ld      a,((laserbasex + xoffset) *8) + 32
 392+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 393+ E1CF ~                                    ld		a,((laserbasey -yoffset) * 8) + 32 -1
 394+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 395+ E1CF ~                                    xor     a
 396+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 397+ E1CF ~                                    ld      a, patternL | %00000000             ; hidden by default
 398+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 399+ E1CF                                      ENDM
 400+ E1CF
 401+ E1CF              RightLaser:             MACRO   xoffset, yoffset, spriteL, patternL
 402+ E1CF ~                                    ld      a, spriteL
 403+ E1CF ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 404+ E1CF ~                                    ld      a,(((30-laserbasex) - xoffset) *8) + 32 -2
 405+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 406+ E1CF ~                                    ld		a,((laserbasey -yoffset) * 8) + 32 -1
 407+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 408+ E1CF ~                                    ld      a,%00001000
 409+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 410+ E1CF ~                                    ld      a, patternL | %00000000             ; hidden by default
 411+ E1CF ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 412+ E1CF                                      ENDM
 413+ E1CF
 414+ E1CF              show_ecm_sprite:        ShowSprite  ECM_sprite, ecm_pattern
 414+ E1CF 3E 24       >                        ld      a, ECM_sprite
 414+ E1D1 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 414+ E1D4 3E 99       >                        ld      a,ecm_pattern | %10000000
 414+ E1D6 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 415+ E1D9 C9                                   ret
 416+ E1DA
 417+ E1DA              show_missile_1_ready:   ShowSprite  missile_sprite1, missile_ready_pattern
 417+ E1DA 3E 25       >                        ld      a, missile_sprite1
 417+ E1DC ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 417+ E1DF 3E 9A       >                        ld      a,missile_ready_pattern | %10000000
 417+ E1E1 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 418+ E1E4 C9                                   ret
 419+ E1E5
 420+ E1E5              show_missile_2_ready:   ShowSprite  missile_sprite2, missile_ready_pattern
 420+ E1E5 3E 26       >                        ld      a, missile_sprite2
 420+ E1E7 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 420+ E1EA 3E 9A       >                        ld      a,missile_ready_pattern | %10000000
 420+ E1EC ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 421+ E1EF C9                                   ret
 422+ E1F0
 423+ E1F0              show_missile_3_ready:   ShowSprite  missile_sprite3, missile_ready_pattern
 423+ E1F0 3E 27       >                        ld      a, missile_sprite3
 423+ E1F2 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 423+ E1F5 3E 9A       >                        ld      a,missile_ready_pattern | %10000000
 423+ E1F7 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 424+ E1FA C9                                   ret
 425+ E1FB
 426+ E1FB              show_missile_4_ready:   ShowSprite  missile_sprite4, missile_ready_pattern
 426+ E1FB 3E 28       >                        ld      a, missile_sprite4
 426+ E1FD ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 426+ E200 3E 9A       >                        ld      a,missile_ready_pattern | %10000000
 426+ E202 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 427+ E205 C9                                   ret
 428+ E206
 429+ E206              show_missile_1_armed:   ShowSprite  missile_sprite1, missile_armed_pattern
 429+ E206 3E 25       >                        ld      a, missile_sprite1
 429+ E208 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 429+ E20B 3E 9B       >                        ld      a,missile_armed_pattern | %10000000
 429+ E20D ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 430+ E210 C9                                   ret
 431+ E211
 432+ E211              show_missile_1_locked:  ShowSprite  missile_sprite1, missile_locked_pattern
 432+ E211 3E 25       >                        ld      a, missile_sprite1
 432+ E213 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 432+ E216 3E 9C       >                        ld      a,missile_locked_pattern | %10000000
 432+ E218 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 433+ E21B C9                                   ret
 434+ E21C
 435+ E21C
 436+ E21C              show_compass_sun_infront:ShowSprite  compass_sun, compass_sun_infront
 436+ E21C 3E 20       >                        ld      a, compass_sun
 436+ E21E ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 436+ E221 3E 91       >                        ld      a,compass_sun_infront | %10000000
 436+ E223 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 437+ E226 C9                                    ret
 438+ E227
 439+ E227              show_compass_sun_behind: ShowSprite  compass_sun, compass_sun_behind
 439+ E227 3E 20       >                        ld      a, compass_sun
 439+ E229 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 439+ E22C 3E 92       >                        ld      a,compass_sun_behind | %10000000
 439+ E22E ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 440+ E231 C9                                    ret
 441+ E232
 442+ E232              show_compass_station_infront: ShowSprite  compass_station, compass_station_infront
 442+ E232 3E 21       >                        ld      a, compass_station
 442+ E234 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 442+ E237 3E 93       >                        ld      a,compass_station_infront | %10000000
 442+ E239 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 443+ E23C C9                                    ret
 444+ E23D
 445+ E23D              show_compass_station_behind:  ShowSprite  compass_station, compass_station_behind
 445+ E23D 3E 21       >                        ld      a, compass_station
 445+ E23F ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 445+ E242 3E 94       >                        ld      a,compass_station_behind | %10000000
 445+ E244 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 446+ E247 C9                                    ret
 447+ E248
 448+ E248              sprite_laser:           LeftLaser  0,0,laser_sprite1 ,laser_pattern_1
 448+ E248 3E 10       >                        ld      a, laser_sprite1
 448+ E24A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 448+ E24D 3E 50       >                        ld      a,((laserbasex + 0) *8) + 32
 448+ E24F ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 448+ E252 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 448+ E254 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 448+ E257 AF          >                        xor     a
 448+ E258 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 448+ E25B 3E 0C       >                        ld      a, laser_pattern_1 | %00000000             ; hidden by default
 448+ E25D ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 449+ E260                                      LeftLaser  2,0,laser_sprite2 ,laser_pattern_2
 449+ E260 3E 11       >                        ld      a, laser_sprite2
 449+ E262 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 449+ E265 3E 60       >                        ld      a,((laserbasex + 2) *8) + 32
 449+ E267 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 449+ E26A 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 449+ E26C ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 449+ E26F AF          >                        xor     a
 449+ E270 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 449+ E273 3E 0D       >                        ld      a, laser_pattern_2 | %00000000             ; hidden by default
 449+ E275 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 450+ E278                                      LeftLaser  4,1,laser_sprite3 ,laser_pattern_3
 450+ E278 3E 12       >                        ld      a, laser_sprite3
 450+ E27A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 450+ E27D 3E 70       >                        ld      a,((laserbasex + 4) *8) + 32
 450+ E27F ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 450+ E282 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 450+ E284 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 450+ E287 AF          >                        xor     a
 450+ E288 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 450+ E28B 3E 0E       >                        ld      a, laser_pattern_3 | %00000000             ; hidden by default
 450+ E28D ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 451+ E290                                      LeftLaser  6,1,laser_sprite4 ,laser_pattern_4
 451+ E290 3E 13       >                        ld      a, laser_sprite4
 451+ E292 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 451+ E295 3E 80       >                        ld      a,((laserbasex + 6) *8) + 32
 451+ E297 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 451+ E29A 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 451+ E29C ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 451+ E29F AF          >                        xor     a
 451+ E2A0 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 451+ E2A3 3E 0F       >                        ld      a, laser_pattern_4 | %00000000             ; hidden by default
 451+ E2A5 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 452+ E2A8                                      LeftLaser  8,2,laser_sprite5 ,laser_pattern_5
 452+ E2A8 3E 14       >                        ld      a, laser_sprite5
 452+ E2AA ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 452+ E2AD 3E 90       >                        ld      a,((laserbasex + 8) *8) + 32
 452+ E2AF ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 452+ E2B2 3E 7F       >                        ld		a,((laserbasey -2) * 8) + 32 -1
 452+ E2B4 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 452+ E2B7 AF          >                        xor     a
 452+ E2B8 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 452+ E2BB 3E 10       >                        ld      a, laser_pattern_5 | %00000000             ; hidden by default
 452+ E2BD ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 453+ E2C0                                      RightLaser 0,0,laser_sprite9 ,laser_pattern_1
 453+ E2C0 3E 18       >                        ld      a, laser_sprite9
 453+ E2C2 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 453+ E2C5 3E DE       >                        ld      a,(((30-laserbasex) - 0) *8) + 32 -2
 453+ E2C7 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 453+ E2CA 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 453+ E2CC ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 453+ E2CF 3E 08       >                        ld      a,%00001000
 453+ E2D1 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 453+ E2D4 3E 0C       >                        ld      a, laser_pattern_1 | %00000000             ; hidden by default
 453+ E2D6 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 454+ E2D9                                      RightLaser 2,0,laser_sprite10,laser_pattern_2
 454+ E2D9 3E 19       >                        ld      a, laser_sprite10
 454+ E2DB ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 454+ E2DE 3E CE       >                        ld      a,(((30-laserbasex) - 2) *8) + 32 -2
 454+ E2E0 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 454+ E2E3 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 454+ E2E5 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 454+ E2E8 3E 08       >                        ld      a,%00001000
 454+ E2EA ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 454+ E2ED 3E 0D       >                        ld      a, laser_pattern_2 | %00000000             ; hidden by default
 454+ E2EF ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 455+ E2F2                                      RightLaser 4,1,laser_sprite11,laser_pattern_3
 455+ E2F2 3E 1A       >                        ld      a, laser_sprite11
 455+ E2F4 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 455+ E2F7 3E BE       >                        ld      a,(((30-laserbasex) - 4) *8) + 32 -2
 455+ E2F9 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 455+ E2FC 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 455+ E2FE ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 455+ E301 3E 08       >                        ld      a,%00001000
 455+ E303 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 455+ E306 3E 0E       >                        ld      a, laser_pattern_3 | %00000000             ; hidden by default
 455+ E308 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 456+ E30B                                      RightLaser 6,1,laser_sprite12,laser_pattern_4
 456+ E30B 3E 1B       >                        ld      a, laser_sprite12
 456+ E30D ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 456+ E310 3E AE       >                        ld      a,(((30-laserbasex) - 6) *8) + 32 -2
 456+ E312 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 456+ E315 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 456+ E317 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 456+ E31A 3E 08       >                        ld      a,%00001000
 456+ E31C ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 456+ E31F 3E 0F       >                        ld      a, laser_pattern_4 | %00000000             ; hidden by default
 456+ E321 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 457+ E324                                      RightLaser 8,2,laser_sprite13,laser_pattern_5
 457+ E324 3E 1C       >                        ld      a, laser_sprite13
 457+ E326 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 457+ E329 3E 9E       >                        ld      a,(((30-laserbasex) - 8) *8) + 32 -2
 457+ E32B ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 457+ E32E 3E 7F       >                        ld		a,((laserbasey -2) * 8) + 32 -1
 457+ E330 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 457+ E333 3E 08       >                        ld      a,%00001000
 457+ E335 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 457+ E338 3E 10       >                        ld      a, laser_pattern_5 | %00000000             ; hidden by default
 457+ E33A ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 458+ E33D C9                                   ret
 459+ E33E                                      ; Need simple show updates just to update the show attribute
 460+ E33E
 461+ E33E              sprite_laser_show:      ShowSprite laser_sprite1 ,laser_pattern_1
 461+ E33E 3E 10       >                        ld      a, laser_sprite1
 461+ E340 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 461+ E343 3E 8C       >                        ld      a,laser_pattern_1 | %10000000
 461+ E345 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 462+ E348                                      ShowSprite laser_sprite2 ,laser_pattern_2
 462+ E348 3E 11       >                        ld      a, laser_sprite2
 462+ E34A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 462+ E34D 3E 8D       >                        ld      a,laser_pattern_2 | %10000000
 462+ E34F ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 463+ E352                                      ShowSprite laser_sprite3 ,laser_pattern_3
 463+ E352 3E 12       >                        ld      a, laser_sprite3
 463+ E354 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 463+ E357 3E 8E       >                        ld      a,laser_pattern_3 | %10000000
 463+ E359 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 464+ E35C                                      ShowSprite laser_sprite4 ,laser_pattern_4
 464+ E35C 3E 13       >                        ld      a, laser_sprite4
 464+ E35E ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 464+ E361 3E 8F       >                        ld      a,laser_pattern_4 | %10000000
 464+ E363 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 465+ E366                                      ShowSprite laser_sprite5 ,laser_pattern_5
 465+ E366 3E 14       >                        ld      a, laser_sprite5
 465+ E368 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 465+ E36B 3E 90       >                        ld      a,laser_pattern_5 | %10000000
 465+ E36D ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 466+ E370                                      ShowSprite laser_sprite9 ,laser_pattern_1
 466+ E370 3E 18       >                        ld      a, laser_sprite9
 466+ E372 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 466+ E375 3E 8C       >                        ld      a,laser_pattern_1 | %10000000
 466+ E377 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 467+ E37A                                      ShowSprite laser_sprite10,laser_pattern_2
 467+ E37A 3E 19       >                        ld      a, laser_sprite10
 467+ E37C ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 467+ E37F 3E 8D       >                        ld      a,laser_pattern_2 | %10000000
 467+ E381 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 468+ E384                                      ShowSprite laser_sprite11,laser_pattern_3
 468+ E384 3E 1A       >                        ld      a, laser_sprite11
 468+ E386 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 468+ E389 3E 8E       >                        ld      a,laser_pattern_3 | %10000000
 468+ E38B ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 469+ E38E                                      ShowSprite laser_sprite12,laser_pattern_4
 469+ E38E 3E 1B       >                        ld      a, laser_sprite12
 469+ E390 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 469+ E393 3E 8F       >                        ld      a,laser_pattern_4 | %10000000
 469+ E395 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 470+ E398                                      ShowSprite laser_sprite13,laser_pattern_5
 470+ E398 3E 1C       >                        ld      a, laser_sprite13
 470+ E39A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 470+ E39D 3E 90       >                        ld      a,laser_pattern_5 | %10000000
 470+ E39F ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 471+ E3A2 C9                                   ret
 472+ E3A3
 473+ E3A3              sprite_galactic_hide:   HideSprite galactic_cursor_sprite
 473+ E3A3 ED 91 34 00 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite
 473+ E3A7 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 474+ E3AB                                      HideSprite galactic_cursor_sprite1
 474+ E3AB ED 91 34 01 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite1
 474+ E3AF ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 475+ E3B3                                      HideSprite galactic_cursor_sprite2
 475+ E3B3 ED 91 34 03 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite2
 475+ E3B7 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 476+ E3BB C9                                   ret
 477+ E3BC
 478+ E3BC              sprite_galactic_hyper_hide:
 479+ E3BC                                      HideSprite galactic_hyper_sprite
 479+ E3BC ED 91 34 04 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite
 479+ E3C0 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 480+ E3C4                                       ;nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite1
 481+ E3C4              ;                        nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 482+ E3C4              ;                        nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite2
 483+ E3C4              ;                        nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 484+ E3C4 C9                                   ret
 485+ E3C5
 486+ E3C5              sprite_local_hide:      HideSprite local_cursor_sprite
 486+ E3C5 ED 91 34 05 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite
 486+ E3C9 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 487+ E3CD                                      HideSprite local_cursor_sprite1
 487+ E3CD ED 91 34 06 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite1
 487+ E3D1 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 488+ E3D5                                      HideSprite local_cursor_sprite2
 488+ E3D5 ED 91 34 07 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite2
 488+ E3D9 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 489+ E3DD C9                                   ret
 490+ E3DE
 491+ E3DE              sprite_local_hyper_hide:HideSprite local_hyper_sprite
 491+ E3DE ED 91 34 08 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite
 491+ E3E2 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 492+ E3E6                                      HideSprite local_hyper_sprite1
 492+ E3E6 ED 91 34 09 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite1
 492+ E3EA ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 493+ E3EE                                      HideSprite local_hyper_sprite2
 493+ E3EE ED 91 34 0B >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite2
 493+ E3F2 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 494+ E3F6 C9                                   ret
 495+ E3F7
 496+ E3F7              sprite_reticule_hide:   HideSprite reticlule_sprite1
 496+ E3F7 ED 91 34 0C >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite1
 496+ E3FB ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 497+ E3FF                                      HideSprite reticlule_sprite2
 497+ E3FF ED 91 34 0D >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite2
 497+ E403 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 498+ E407                                      HideSprite reticlule_sprite3
 498+ E407 ED 91 34 0E >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite3
 498+ E40B ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 499+ E40F                                      HideSprite reticlule_sprite4
 499+ E40F ED 91 34 0F >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite4
 499+ E413 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 500+ E417 C9                                   ret
 501+ E418
 502+ E418              sprite_ecm_hide:        HideSprite ECM_sprite
 502+ E418 ED 91 34 24 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,ECM_sprite
 502+ E41C ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 503+ E420 C9                                   ret
 504+ E421
 505+ E421              sprite_missile_1_hide:  HideSprite missile_sprite1
 505+ E421 ED 91 34 25 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,missile_sprite1
 505+ E425 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 506+ E429 C9                                   ret
 507+ E42A
 508+ E42A              sprite_missile_2_hide:  HideSprite missile_sprite2
 508+ E42A ED 91 34 26 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,missile_sprite2
 508+ E42E ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 509+ E432 C9                                   ret
 510+ E433
 511+ E433              sprite_missile_3_hide:  HideSprite missile_sprite3
 511+ E433 ED 91 34 27 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,missile_sprite3
 511+ E437 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 512+ E43B C9                                   ret
 513+ E43C
 514+ E43C              sprite_missile_4_hide:  HideSprite missile_sprite4
 514+ E43C ED 91 34 28 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,missile_sprite4
 514+ E440 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 515+ E444 C9                                   ret
 516+ E445
 517+ E445 CD 21 E4     sprite_missile_all_hide:call  sprite_missile_1_hide
 518+ E448 CD 2A E4                             call  sprite_missile_2_hide
 519+ E44B CD 33 E4                             call  sprite_missile_3_hide
 520+ E44E CD 3C E4                             call  sprite_missile_4_hide
 521+ E451 C9                                   ret
 522+ E452
 523+ E452 3E 22        sprite_targetting:      ld      a,targetting_sprite1                 ; LEFT ARM
 524+ E454 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 525+ E457 3E 7F                                ld      a,TargetetingCentreX1
 526+ E459 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 527+ E45C 3E 78                                ld		a,TargetetingCentreY
 528+ E45E ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 529+ E461 AF                                   xor     a
 530+ E462 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 531+ E465 3E 97                                ld      a,targetting_pattern | %10000000
 532+ E467 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 533+ E46A 3E 23        .right:                 ld      a,targetting_sprite2                ; RIGHT ARM
 534+ E46C ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 535+ E46F 3E AF                                ld      a,TargetetingCentreX2
 536+ E471 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 537+ E474 3E 78                                ld		a,TargetetingCentreY
 538+ E476 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 539+ E479 3E 08                                ld      a,%00001000
 540+ E47B ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring horizontal
 541+ E47E 3E 97                                ld      a,targetting_pattern | %10000000
 542+ E480 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 543+ E483 C9                                   ret
 544+ E484
 545+ E484 3E 22        sprite_lock:            ld      a,targetting_sprite1                 ; LEFT ARM
 546+ E486 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 547+ E489 3E 7F                                ld      a,TargetetingCentreX1
 548+ E48B ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 549+ E48E 3E 78                                ld		a,TargetetingCentreY
 550+ E490 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 551+ E493 AF                                   xor     a
 552+ E494 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 553+ E497 3E 98                                ld      a,lock_pattern | %10000000
 554+ E499 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 555+ E49C 3E 23        .right:                 ld      a,targetting_sprite2                 ; RIGHT ARM
 556+ E49E ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 557+ E4A1 3E AF                                ld      a,TargetetingCentreX2
 558+ E4A3 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 559+ E4A6 3E 78                                ld		a,TargetetingCentreY
 560+ E4A8 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 561+ E4AB 3E 08                                ld      a,%00001000
 562+ E4AD ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring horizontal
 563+ E4B0 3E 98                                ld      a,lock_pattern | %10000000
 564+ E4B2 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 565+ E4B5 C9                                   ret
 566+ E4B6
 567+ E4B6
 568+ E4B6
 569+ E4B6              sprite_targetting_hide: HideSprite targetting_sprite1
 569+ E4B6 ED 91 34 22 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,targetting_sprite1
 569+ E4BA ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 570+ E4BE                                      HideSprite targetting_sprite2
 570+ E4BE ED 91 34 23 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,targetting_sprite2
 570+ E4C2 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 571+ E4C6 C9                                   ret
 572+ E4C7
 573+ E4C7              sprite_targetting_show: ShowSprite targetting_sprite1, targetting_pattern
 573+ E4C7 3E 22       >                        ld      a, targetting_sprite1
 573+ E4C9 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 573+ E4CC 3E 97       >                        ld      a,targetting_pattern | %10000000
 573+ E4CE ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 574+ E4D1                                      ShowSprite targetting_sprite2, targetting_pattern
 574+ E4D1 3E 23       >                        ld      a, targetting_sprite2
 574+ E4D3 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 574+ E4D6 3E 97       >                        ld      a,targetting_pattern | %10000000
 574+ E4D8 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 575+ E4DB C9                                   ret
 576+ E4DC
 577+ E4DC              sprite_laser_hide:      HideSprite laser_sprite1
 577+ E4DC ED 91 34 10 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite1
 577+ E4E0 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 578+ E4E4                                      HideSprite laser_sprite2
 578+ E4E4 ED 91 34 11 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite2
 578+ E4E8 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 579+ E4EC                                      HideSprite laser_sprite3
 579+ E4EC ED 91 34 12 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite3
 579+ E4F0 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 580+ E4F4                                      HideSprite laser_sprite4
 580+ E4F4 ED 91 34 13 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite4
 580+ E4F8 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 581+ E4FC                                      HideSprite laser_sprite5
 581+ E4FC ED 91 34 14 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite5
 581+ E500 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 582+ E504                                      HideSprite laser_sprite6
 582+ E504 ED 91 34 15 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite6
 582+ E508 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 583+ E50C                                      HideSprite laser_sprite7
 583+ E50C ED 91 34 16 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite7
 583+ E510 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 584+ E514                                      HideSprite laser_sprite8
 584+ E514 ED 91 34 17 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite8
 584+ E518 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 585+ E51C                                      HideSprite laser_sprite9
 585+ E51C ED 91 34 18 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite9
 585+ E520 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 586+ E524                                      HideSprite laser_sprite10
 586+ E524 ED 91 34 19 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite10
 586+ E528 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 587+ E52C                                      HideSprite laser_sprite11
 587+ E52C ED 91 34 1A >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite11
 587+ E530 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 588+ E534                                      HideSprite laser_sprite12
 588+ E534 ED 91 34 1B >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite12
 588+ E538 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 589+ E53C                                      HideSprite laser_sprite13
 589+ E53C ED 91 34 1C >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite13
 589+ E540 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 590+ E544                                      HideSprite laser_sprite14
 590+ E544 ED 91 34 1D >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite14
 590+ E548 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 591+ E54C                                      HideSprite laser_sprite15
 591+ E54C ED 91 34 1E >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite15
 591+ E550 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 592+ E554                                      HideSprite laser_sprite16
 592+ E554 ED 91 34 1F >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite16
 592+ E558 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 593+ E55C C9                                   ret
 594+ E55D
 595+ E55D              sprite_compass_hide:    HideSprite compass_sun
 595+ E55D ED 91 34 20 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,compass_sun
 595+ E561 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 596+ E565                                      HideSprite compass_station
 596+ E565 ED 91 34 21 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,compass_station
 596+ E569 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 597+ E56D C9                                   ret
 598+ E56E
 599+ E56E CD A3 E3     sprite_cls_cursors:     call	sprite_galactic_hide
 600+ E571 CD BC E3                             call	sprite_galactic_hyper_hide
 601+ E574 CD C5 E3                             call	sprite_local_hide
 602+ E577 CD DE E3                             call	sprite_local_hyper_hide
 603+ E57A CD F7 E3                             call    sprite_reticule_hide
 604+ E57D CD DC E4                             call    sprite_laser_hide
 605+ E580 CD 5D E5                             call    sprite_compass_hide
 606+ E583 CD B6 E4                             call    sprite_targetting_hide
 607+ E586 CD 45 E4                             call    sprite_missile_all_hide
 608+ E589 C9                                   ret
 609+ E58A
 610+ E58A CD 6E E5     sprite_cls_all:         call    sprite_cls_cursors
 611+ E58D CD 18 E4                             call    sprite_ecm_hide
 612+ E590 CD 45 E4                             call    sprite_missile_all_hide
 613+ E593 C9                                   ret
 614+ E594
 615+ E594 CD 6E E5     init_sprites:           call		sprite_cls_cursors
 616+ E597 ED 91 15 43                          nextreg 	SPRITE_LAYERS_SYSTEM_REGISTER,%01000011
 617+ E59B C9                                   ret
 618+ E59C
 619+ E59C
 620+ E59C              select_sprite_a:        MACRO
 621+ E59C ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 622+ E59C                                      ENDM
 623+ E59C
 624+ E59C              set_sprite_x_low_a:     MACRO
 625+ E59C ~                                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a
 626+ E59C                                      ENDM
 627+ E59C
 628+ E59C              set_sprite_y_low_a:     MACRO
 629+ E59C ~                                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a
 630+ E59C                                      ENDM
 631+ E59C
 632+ E59C              set_sprite_x_msb_anc:   MACRO
 633+ E59C ~                                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a
 634+ E59C                                      ENDM
 635+ E59C
 636+ E59C              set_sprite_pat_a:       MACRO
 637+ E59C ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 638+ E59C                                      ENDM
 639+ E59C
 640+ E59C              set_sprite_pat_a_nx:    MACRO
 641+ E59C ~                                    and     %10111111
 642+ E59C ~                                    set_sprite_pat_a
 643+ E59C                                      ENDM
 644+ E59C
 645+ E59C              set_sprite_pat_a_vis:   MACRO
 646+ E59C ~                                    or      %10000000
 647+ E59C ~                                    set_sprite_pat_a
 648+ E59C                                      ENDM
 649+ E59C
 650+ E59C              set_sprite_hidden:      MACRO
 651+ E59C ~                                    xor     a
 652+ E59C ~                                    set_sprite_pat_a
 653+ E59C                                      ENDM
 654+ E59C
 655+ E59C              set_sprite_pas_a_vis_nx:MACRO
 656+ E59C ~                                    or      %10000000
 657+ E59C ~                                    set_sprite_pat_a_nx
 658+ E59C                                      ENDM
 659+ E59C
 660+ E59C              set_sprite_extended_a:  MACRO
 661+ E59C ~                                    nextreg	SPRITE_PORT_ATTR4_REGISTER,a
 662+ E59C                                      ENDM
 663+ E59C
 664+ E59C 20           diag_x_pos:             DB 32
 665+ E59D 40           diag_y_pos:             DB 64
 666+ E59E 00           diag_sprite_nbr:        DB 0
 667+ E59F
 668+ E59F 06 40        sprite_diagnostic_clear:ld      b,64
 669+ E5A1 0E 00                                ld      c,0
 670+ E5A3 79           .HideLoop:              ld      a,c
 671+ E5A4                                      HideSprite a
 671+ E5A4 ED 92 34    >                            nextreg		SPRITE_PORT_INDEX_REGISTER,a
 671+ E5A7 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 672+ E5AB 0C                                   inc     c
 673+ E5AC 10 F5                                djnz    .HideLoop
 674+ E5AE C9                                   ret
 675+ E5AF
 676+ E5AF AF           sprite_diagnostic:      xor a
 677+ E5B0 32 9E E5                             ld      (diag_sprite_nbr),a
 678+ E5B3 01 3B 30                             ld      bc,$303B
 679+ E5B6 ED 79                                out     (c),a
 680+ E5B8 01 57 00     .sprite_loop:           ld      bc,SPRITE_INFO_PORT
 681+ E5BB 3A 9C E5                             ld      a,(diag_x_pos)
 682+ E5BE ED 79                                out     (c),a
 683+ E5C0 C6 10                                add     16
 684+ E5C2 32 9C E5                             ld      (diag_x_pos),a
 685+ E5C5 3A 9D E5                             ld      a,(diag_y_pos)
 686+ E5C8 ED 79                                out     (c),a
 687+ E5CA AF                                   xor     a
 688+ E5CB ED 79                                out     (c),a
 689+ E5CD 3A 9E E5                             ld      a,(diag_sprite_nbr)
 690+ E5D0 F6 80                                or      %10000000
 691+ E5D2 E6 BF                                and     %10111111
 692+ E5D4 ED 79                                out     (c),a
 693+ E5D6 3A 9E E5                             ld      a,(diag_sprite_nbr)
 694+ E5D9 3C                                   inc     a
 695+ E5DA 32 9E E5                             ld      (diag_sprite_nbr),a
 696+ E5DD                                      JumpIfALTNusng 14,.sprite_loop
 696+ E5DD FE 0E       >                        cp      14
 696+ E5DF DA B8 E5    >                        jp		c, .sprite_loop
 697+ E5E2 3E 40                                ld      a,64
 698+ E5E4                                      JumpIfALTNusng  25,.cont
 698+ E5E4 FE 19       >                        cp      25
 698+ E5E6 DA EA E5    >                        jp		c, .cont
 699+ E5E9 C9                                   ret
 700+ E5EA 3E 40        .cont:                  ld      a,64
 701+ E5EC 32 9D E5                             ld      (diag_y_pos),a
 702+ E5EF 18 C7                                jr      .sprite_loop
 703+ E5F1 C9                                   ret
 704+ E5F2
 705+ E5F2
 706+ E5F2
# file closed: ./Layer3Sprites/sprite_routines.asm
 974  E5F2                                  INCLUDE "./Layer3Sprites/sprite_load.asm"
# file opened: ./Layer3Sprites/sprite_load.asm
   1+ E5F2
   2+ E5F2
   3+ E5F2
   4+ E5F2 00 00 00...  FileWork                DS 10
   5+ E5FC 00           FileNumber:             DB  0
   6+ E5FD
   7+ E5FD 4E 45 53 70  Filename                DB "NESpr"
   7+ E601 72
   8+ E602 30 30        FileNbr                 DB "00"
   9+ E604 2E 64 61 74  Extension:              DB ".dat",0
   9+ E608 00
  10+ E609
  11+ E609
  12+ E609 3A FC E5     FileNbrA:               ld      a,(FileNumber)
  13+ E60C ED 23                                swapnib
  14+ E60E E6 0F                                and     %00001111
  15+ E610 06 30                                ld      b,"0"
  16+ E612 80                                   add     b
  17+ E613 32 02 E6                             ld      (FileNbr),a
  18+ E616 3A FC E5                             ld      a,(FileNumber)
  19+ E619 E6 0F                                and     %00001111
  20+ E61B 80                                   add     b
  21+ E61C 32 03 E6                             ld      (FileNbr+1),a
  22+ E61F C9                                   ret
  23+ E620
  24+ E620 01 3B 30     load_pattern_files:     ld          bc,SPRITE_SLOT_PORT             ; select pattern 0
  25+ E623                                      ZeroA                                       ;
  25+ E623 AF          >                        xor a
  26+ E624 ED 79                                out         (c),a
  27+ E626 3E 01                                ld          a,$01
  28+ E628 32 FC E5                             ld          (FileNumber),a
  29+ E62B 06 1D                                ld          b,29
  30+ E62D C5           .ReadLoop:              push        bc
  31+ E62E CD 09 E6                             call        FileNbrA
  32+ E631 CD 40 E6                             call        load_a_pattern
  33+ E634 3A FC E5                             ld          a,(FileNumber)
  34+ E637 3C                                   inc         a
  35+ E638 27                                   daa
  36+ E639 32 FC E5                             ld          (FileNumber),a
  37+ E63C C1                                   pop         bc
  38+ E63D 10 EE                                djnz        .ReadLoop
  39+ E63F C9                                   ret
  40+ E640                                                   ; write byte 256
  41+ E640
  42+ E640 21 FD E5     load_a_pattern:         ld          hl,Filename
  43+ E643 DD 21 5D E6                          ld          ix,SpriteDatabuffer
  44+ E647 01 00 01                             ld          bc,256
  45+ E64A CD 25 AC                             call        FileLoad
  46+ E64D 1E FF                                ld          e,255
  47+ E64F 01 5B 00     .streamPattern:         ld          bc, SPRITE_PATTERN_UPLOAD_PORT
  48+ E652 21 5D E6                             ld          hl, SpriteDatabuffer
  49+ E655 ED 90        .streamPatternLoop:     outinb                                      ; write byte of pattern
  50+ E657 1D                                   dec         e
  51+ E658 20 FB                                jr          nz, .streamPatternLoop          ; carry on writing for "e" iterations
  52+ E65A ED 90                                outinb
  53+ E65C C9                                   ret
  54+ E65D
  55+ E65D 00 00 00...  SpriteDatabuffer:       DS  256
  56+ E75D
  57+ E75D
# file closed: ./Layer3Sprites/sprite_load.asm
 975  E75D              ;;;***    INCLUDE " A./Layer3Sprites/SpriteSheet.asm"
 976  E75D                                  DISPLAY "Bank ",BankSPRITE," - Bytes free ",/D, $2000 - ($-ShipModelsAddr), " - BankSPRITE"
 977  E75D                                  ASSERT $-SpritemembankAddr <8912 , Bank code leaks over 8K boundary
 978  E75D              ; Bank 61  ------------------------------------------------------------------------------------------------------------------------
 979  E75D                                  SLOT    ConsoleImageAddr
 980  E75D                                  PAGE    BankConsole
 981  E75D                                  ORG     ConsoleImageAddr, BankConsole
 982  E000                                  INCLUDE "./Images/ConsoleImageData.asm"
# file opened: ./Images/ConsoleImageData.asm
   1+ E000              ConsoleImageData:
   2+ E000 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$7F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$00,$FF,$FF,$FF,$FF,$FF,$FF ; row 1
   2+ E004 FF FF 00 7F
   2+ E008 00 00 00 00
   2+ E00C 00 00 00 00
   2+ E010 00 00 00 00
   2+ E014 00 00 00 00
   2+ E018 7F 00 FF FF
   2+ E01C FF FF FF FF
   3+ E020 9C C3 FF FF      DB $9C,$C3,$FF,$FF,$FF,$FF,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$00,$01
   3+ E024 FF FF 40 08
   3+ E028 01 00 00 00
   3+ E02C 00 00 00 00
   3+ E030 00 00 00 00
   3+ E034 00 00 00 40
   3+ E038 08 01 80 00
   3+ E03C 00 00 00 01
   4+ E040 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$10,$08,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$08,$04,$80,$00,$00,$00,$00,$01
   4+ E044 00 01 10 08
   4+ E048 04 00 00 00
   4+ E04C 00 00 00 00
   4+ E050 00 00 00 00
   4+ E054 00 00 00 10
   4+ E058 08 04 80 00
   4+ E05C 00 00 00 01
   5+ E060 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
   5+ E064 00 01 00 00
   5+ E068 00 00 00 00
   5+ E06C 00 00 00 00
   5+ E070 00 00 00 00
   5+ E074 00 00 00 00
   5+ E078 00 00 80 00
   5+ E07C 00 00 00 01
   6+ E080 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$07,$82,$00,$08,$06,$20,$01,$80,$04,$60,$10,$00,$41,$E0,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   6+ E084 00 01 00 00
   6+ E088 00 07 82 00
   6+ E08C 08 06 20 01
   6+ E090 80 04 60 10
   6+ E094 00 41 E0 00
   6+ E098 00 00 FF FF
   6+ E09C FF FF FF FF
   7+ E0A0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$30,$00,$08,$00,$04,$00,$61,$86,$00,$20,$00,$10,$00,$0C,$00,$60,$00,$FF,$FF,$FF,$FF,$FF,$FF
   7+ E0A4 00 01 00 06
   7+ E0A8 00 30 00 08
   7+ E0AC 00 04 00 61
   7+ E0B0 86 00 20 00
   7+ E0B4 10 00 0C 00
   7+ E0B8 60 00 FF FF
   7+ E0BC FF FF FF FF
   8+ E0C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$0F,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$55,$55,$55,$F0,$00,$FF,$FF,$FF,$FF,$FF,$FF
   8+ E0C4 00 01 00 0F
   8+ E0C8 AA AA AA AA
   8+ E0CC AA AA AA AA
   8+ E0D0 55 55 55 55
   8+ E0D4 55 55 55 55
   8+ E0D8 F0 00 FF FF
   8+ E0DC FF FF FF FF
   9+ E0E0 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$1E,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$78,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   9+ E0E4 FF FF 00 00
   9+ E0E8 00 1E 00 00
   9+ E0EC 08 00 00 01
   9+ E0F0 80 00 00 10
   9+ E0F4 00 00 78 00
   9+ E0F8 00 00 FF FF
   9+ E0FC FF FF FF FF
  10+ E100 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$01,$C9,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$C9,$C0,$80,$00,$00,$00,$00,$01 ; row 2
  10+ E104 00 01 01 C9
  10+ E108 C0 00 00 00
  10+ E10C 00 00 00 00
  10+ E110 00 00 00 00
  10+ E114 00 00 00 01
  10+ E118 C9 C0 80 00
  10+ E11C 00 00 00 01
  11+ E120 B2 C3 92 49      DB $B2,$C3,$92,$49,$24,$93,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$39
  11+ E124 24 93 40 08
  11+ E128 01 00 00 00
  11+ E12C 00 00 00 00
  11+ E130 00 00 00 00
  11+ E134 00 00 00 40
  11+ E138 08 01 80 00
  11+ E13C 00 00 7C 39
  12+ E140 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$18,$00,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$00,$0C,$80,$00,$00,$00,$7C,$61
  12+ E144 00 01 18 00
  12+ E148 0C 00 00 00
  12+ E14C 00 00 00 00
  12+ E150 00 00 00 00
  12+ E154 00 00 00 18
  12+ E158 00 0C 80 00
  12+ E15C 00 00 7C 61
  13+ E160 9C 7E 00 00      DB $9C,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  13+ E164 00 01 00 00
  13+ E168 00 00 00 00
  13+ E16C 00 00 00 00
  13+ E170 00 00 00 00
  13+ E174 00 00 00 00
  13+ E178 00 00 80 00
  13+ E17C 00 00 00 01
  14+ E180 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$00,$00,$00,$38,$04,$00,$10,$01,$40,$01,$80,$06,$80,$08,$00,$20,$1C,$00,$00,$00,$80,$00,$00,$00,$00,$81
  14+ E184 00 01 00 00
  14+ E188 00 38 04 00
  14+ E18C 10 01 40 01
  14+ E190 80 06 80 08
  14+ E194 00 20 1C 00
  14+ E198 00 00 80 00
  14+ E19C 00 00 00 81
  15+ E1A0 9C 30 00 00      DB $9C,$30,$00,$00,$00,$01,$00,$0C,$00,$40,$00,$10,$00,$04,$00,$11,$88,$00,$20,$00,$08,$00,$02,$00,$30,$00,$80,$00,$00,$00,$00,$81
  15+ E1A4 00 01 00 0C
  15+ E1A8 00 40 00 10
  15+ E1AC 00 04 00 11
  15+ E1B0 88 00 20 00
  15+ E1B4 08 00 02 00
  15+ E1B8 30 00 80 00
  15+ E1BC 00 00 00 81
  16+ E1C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$00,$10,$00,$00,$80,$00,$01,$80,$00,$01,$00,$00,$08,$00,$00,$60,$00,$80,$00,$00,$00,$00,$81
  16+ E1C4 00 01 00 06
  16+ E1C8 00 00 10 00
  16+ E1CC 00 80 00 01
  16+ E1D0 80 00 01 00
  16+ E1D4 00 08 00 00
  16+ E1D8 60 00 80 00
  16+ E1DC 00 00 00 81
  17+ E1E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$01,$E0,$00,$10,$00,$00,$01,$80,$00,$00,$08,$00,$07,$80,$00,$00,$00,$80,$00,$00,$00,$00,$81
  17+ E1E4 00 01 00 00
  17+ E1E8 00 01 E0 00
  17+ E1EC 10 00 00 01
  17+ E1F0 80 00 00 08
  17+ E1F4 00 07 80 00
  17+ E1F8 00 00 80 00
  17+ E1FC 00 00 00 81
  18+ E200 BE 3C 00 00      DB $BE,$3C,$00,$00,$00,$01,$06,$08,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$08,$38,$80,$00,$00,$00,$3C,$79 ; row 3
  18+ E204 00 01 06 08
  18+ E208 38 00 00 00
  18+ E20C 00 00 00 00
  18+ E210 00 00 00 00
  18+ E214 00 00 00 06
  18+ E218 08 38 80 00
  18+ E21C 00 00 3C 79
  19+ E220 B2 C3 80 01      DB $B2,$C3,$80,$01,$00,$03,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$80,$00,$00,$00,$62,$65
  19+ E224 00 03 55 55
  19+ E228 55 00 00 00
  19+ E22C 00 00 00 00
  19+ E230 00 00 00 00
  19+ E234 00 00 00 55
  19+ E238 55 55 80 00
  19+ E23C 00 00 62 65
  20+ E240 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$0C,$08,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$08,$18,$80,$00,$00,$00,$66,$61
  20+ E244 00 01 0C 08
  20+ E248 18 00 00 00
  20+ E24C 00 00 00 00
  20+ E250 00 00 00 00
  20+ E254 00 00 00 0C
  20+ E258 08 18 80 00
  20+ E25C 00 00 66 61
  21+ E260 B2 18 00 00      DB $B2,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  21+ E264 00 01 00 00
  21+ E268 00 00 00 00
  21+ E26C 00 00 00 00
  21+ E270 00 00 00 00
  21+ E274 00 00 00 00
  21+ E278 00 00 80 00
  21+ E27C 00 00 00 01
  22+ E280 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$01,$CA,$BA,$AA,$AA,$AA,$EA,$AA,$55,$57,$55,$55,$55,$5D,$53,$80,$00,$00,$80,$00,$00,$00,$00,$99
  22+ E284 00 01 00 00
  22+ E288 01 CA BA AA
  22+ E28C AA AA EA AA
  22+ E290 55 57 55 55
  22+ E294 55 5D 53 80
  22+ E298 00 00 80 00
  22+ E29C 00 00 00 99
  23+ E2A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$08,$01,$80,$00,$20,$00,$08,$00,$05,$A0,$00,$10,$00,$04,$00,$01,$80,$10,$00,$80,$00,$00,$00,$00,$B9
  23+ E2A4 00 01 00 08
  23+ E2A8 01 80 00 20
  23+ E2AC 00 08 00 05
  23+ E2B0 A0 00 10 00
  23+ E2B4 04 00 01 80
  23+ E2B8 10 00 80 00
  23+ E2BC 00 00 00 B9
  24+ E2C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$01,$00,$00,$20,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$04,$00,$00,$80,$00,$80,$00,$00,$00,$00,$B9
  24+ E2C4 00 01 00 01
  24+ E2C8 00 00 20 00
  24+ E2CC 01 00 00 01
  24+ E2D0 80 00 00 80
  24+ E2D4 00 04 00 00
  24+ E2D8 80 00 80 00
  24+ E2DC 00 00 00 B9
  25+ E2E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$1F,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$F8,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  25+ E2E4 00 01 00 00
  25+ E2E8 00 00 1F AA
  25+ E2EC AA AA AA AA
  25+ E2F0 55 55 55 55
  25+ E2F4 55 F8 00 00
  25+ E2F8 00 00 80 00
  25+ E2FC 00 00 00 A9
  26+ E300 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$0E,$08,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$08,$18,$80,$00,$00,$00,$60,$65 ; row 4
  26+ E304 00 01 0E 08
  26+ E308 18 00 00 00
  26+ E30C 00 00 00 00
  26+ E310 00 00 00 00
  26+ E314 00 00 00 0E
  26+ E318 08 18 80 00
  26+ E31C 00 00 60 65
  27+ E320 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$62,$61
  27+ E324 00 01 40 08
  27+ E328 01 00 00 00
  27+ E32C 00 00 00 00
  27+ E330 00 00 00 00
  27+ E334 00 00 00 40
  27+ E338 08 01 80 00
  27+ E33C 00 00 62 61
  28+ E340 BC 66 00 00      DB $BC,$66,$00,$00,$00,$01,$03,$00,$60,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$00,$60,$80,$00,$00,$00,$66,$61
  28+ E344 00 01 03 00
  28+ E348 60 00 00 00
  28+ E34C 00 00 00 00
  28+ E350 00 00 00 00
  28+ E354 00 00 00 03
  28+ E358 00 60 80 00
  28+ E35C 00 00 66 61
  29+ E360 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  29+ E364 00 01 00 00
  29+ E368 00 00 00 00
  29+ E36C 00 0F FF FF
  29+ E370 FF FF F0 00
  29+ E374 00 00 00 00
  29+ E378 00 00 80 00
  29+ E37C 00 00 00 01
  30+ E380 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$06,$00,$20,$00,$40,$00,$A0,$01,$80,$05,$00,$02,$00,$04,$00,$60,$00,$00,$80,$00,$00,$00,$00,$B9
  30+ E384 00 01 00 00
  30+ E388 06 00 20 00
  30+ E38C 40 00 A0 01
  30+ E390 80 05 00 02
  30+ E394 00 04 00 60
  30+ E398 00 00 80 00
  30+ E39C 00 00 00 B9
  31+ E3A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$1A,$AA,$AA,$AA,$EA,$AA,$BA,$AA,$AB,$D5,$55,$5D,$55,$57,$55,$55,$55,$58,$00,$80,$00,$00,$00,$00,$85
  31+ E3A4 00 01 00 1A
  31+ E3A8 AA AA AA EA
  31+ E3AC AA BA AA AB
  31+ E3B0 D5 55 5D 55
  31+ E3B4 57 55 55 55
  31+ E3B8 58 00 80 00
  31+ E3BC 00 00 00 85
  32+ E3C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$C0,$00,$40,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$02,$00,$03,$00,$00,$80,$00,$00,$00,$00,$85
  32+ E3C4 00 01 00 00
  32+ E3C8 C0 00 40 00
  32+ E3CC 01 00 00 01
  32+ E3D0 80 00 00 80
  32+ E3D4 00 02 00 03
  32+ E3D8 00 00 80 00
  32+ E3DC 00 00 00 85
  33+ E3E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$FC,$20,$00,$00,$01,$80,$00,$00,$04,$3F,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  33+ E3E4 00 01 00 00
  33+ E3E8 00 00 00 FC
  33+ E3EC 20 00 00 01
  33+ E3F0 80 00 00 04
  33+ E3F4 3F 00 00 00
  33+ E3F8 00 00 80 00
  33+ E3FC 00 00 00 A9
  34+ E400 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$18,$08,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$08,$0C,$80,$00,$00,$00,$3C,$65 ; row 5
  34+ E404 00 01 18 08
  34+ E408 0C 00 00 00
  34+ E40C 00 00 00 00
  34+ E410 00 00 00 00
  34+ E414 00 00 00 18
  34+ E418 08 0C 80 00
  34+ E41C 00 00 3C 65
  35+ E420 B2 7E 00 00      DB $B2,$7E,$00,$00,$00,$01,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$61
  35+ E424 00 01 40 08
  35+ E428 01 00 00 00
  35+ E42C 00 00 00 00
  35+ E430 00 00 00 00
  35+ E434 00 00 00 40
  35+ E438 08 01 80 00
  35+ E43C 00 00 7C 61
  36+ E440 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$00,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$80,$80,$00,$00,$00,$66,$61
  36+ E444 00 01 00 FF
  36+ E448 80 00 00 00
  36+ E44C 00 00 00 00
  36+ E450 00 00 00 00
  36+ E454 00 00 00 00
  36+ E458 FF 80 80 00
  36+ E45C 00 00 66 61
  37+ E460 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$3F,$F0,$08,$01,$80,$10,$0F,$FC,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  37+ E464 00 01 00 00
  37+ E468 00 00 00 00
  37+ E46C 3F F0 08 01
  37+ E470 80 10 0F FC
  37+ E474 00 00 00 00
  37+ E478 00 00 80 00
  37+ E47C 00 00 00 01
  38+ E480 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$18,$00,$C0,$00,$80,$00,$18,$01,$80,$18,$00,$01,$00,$03,$00,$18,$00,$00,$80,$00,$00,$00,$00,$99
  38+ E484 00 01 00 00
  38+ E488 18 00 C0 00
  38+ E48C 80 00 18 01
  38+ E490 80 18 00 01
  38+ E494 00 03 00 18
  38+ E498 00 00 80 00
  38+ E49C 00 00 00 99
  39+ E4A0 BE 30 00 00      DB $BE,$30,$00,$00,$00,$01,$00,$10,$0C,$00,$00,$80,$00,$10,$00,$01,$80,$00,$08,$00,$01,$00,$00,$30,$08,$00,$80,$00,$00,$00,$00,$BD
  39+ E4A4 00 01 00 10
  39+ E4A8 0C 00 00 80
  39+ E4AC 00 10 00 01
  39+ E4B0 80 00 08 00
  39+ E4B4 01 00 00 30
  39+ E4B8 08 00 80 00
  39+ E4BC 00 00 00 BD
  40+ E4C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$30,$00,$80,$00,$02,$00,$00,$01,$80,$00,$00,$40,$00,$01,$00,$0C,$00,$00,$80,$00,$00,$00,$00,$BD
  40+ E4C4 00 01 00 00
  40+ E4C8 30 00 80 00
  40+ E4CC 02 00 00 01
  40+ E4D0 80 00 00 40
  40+ E4D4 00 01 00 0C
  40+ E4D8 00 00 80 00
  40+ E4DC 00 00 00 BD
  41+ E4E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$03,$FC,$00,$00,$01,$80,$00,$00,$3F,$C0,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$BD
  41+ E4E4 00 01 00 00
  41+ E4E8 00 00 00 03
  41+ E4EC FC 00 00 01
  41+ E4F0 80 00 00 3F
  41+ E4F4 C0 00 00 00
  41+ E4F8 00 00 80 00
  41+ E4FC 00 00 00 BD
  42+ E500 B0 C3 80 01      DB $B0,$C3,$80,$01,$00,$03,$30,$08,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$30,$08,$06,$C0,$00,$80,$01,$06,$7D ; row 6
  42+ E504 00 03 30 08
  42+ E508 06 00 00 00
  42+ E50C 00 00 00 00
  42+ E510 00 00 00 00
  42+ E514 00 00 00 30
  42+ E518 08 06 C0 00
  42+ E51C 80 01 06 7D
  43+ E520 B2 3C 00 00      DB $B2,$3C,$00,$00,$00,$01,$40,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$00,$01,$C0,$00,$80,$01,$66,$65
  43+ E524 00 01 40 00
  43+ E528 01 00 00 00
  43+ E52C 00 00 00 00
  43+ E530 00 00 00 00
  43+ E534 00 00 00 40
  43+ E538 00 01 C0 00
  43+ E53C 80 01 66 65
  44+ E540 B0 66 80 01      DB $B0,$66,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$00,$80,$01,$66,$61
  44+ E544 00 03 00 00
  44+ E548 00 00 00 00
  44+ E54C 00 00 00 00
  44+ E550 00 00 00 00
  44+ E554 00 00 00 00
  44+ E558 00 00 C0 00
  44+ E55C 80 01 66 61
  45+ E560 B2 18 80 01      DB $B2,$18,$80,$01,$00,$03,$00,$00,$00,$00,$00,$1F,$C1,$AA,$AA,$AA,$55,$55,$57,$83,$F8,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  45+ E564 00 03 00 00
  45+ E568 00 00 00 1F
  45+ E56C C1 AA AA AA
  45+ E570 55 55 57 83
  45+ E574 F8 00 00 00
  45+ E578 00 00 80 00
  45+ E57C 00 00 00 01
  46+ E580 B0 18 80 01      DB $B0,$18,$80,$01,$00,$03,$00,$00,$60,$01,$00,$01,$00,$01,$04,$01,$80,$20,$80,$00,$80,$00,$80,$06,$00,$00,$80,$00,$00,$00,$00,$99
  46+ E584 00 03 00 00
  46+ E588 60 01 00 01
  46+ E58C 00 01 04 01
  46+ E590 80 20 80 00
  46+ E594 80 00 80 06
  46+ E598 00 00 80 00
  46+ E59C 00 00 00 99
  47+ E5A0 B2 30 80 01      DB $B2,$30,$80,$01,$00,$03,$00,$10,$18,$00,$01,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$80,$00,$18,$08,$00,$80,$00,$00,$00,$00,$A1
  47+ E5A4 00 03 00 10
  47+ E5A8 18 00 01 00
  47+ E5AC 00 20 00 01
  47+ E5B0 80 00 04 00
  47+ E5B4 00 80 00 18
  47+ E5B8 08 00 80 00
  47+ E5BC 00 00 00 A1
  48+ E5C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$0E,$AB,$AA,$AA,$AE,$AA,$AA,$AA,$55,$55,$55,$75,$55,$55,$D5,$70,$00,$00,$80,$00,$00,$00,$00,$85
  48+ E5C4 00 01 00 00
  48+ E5C8 0E AB AA AA
  48+ E5CC AE AA AA AA
  48+ E5D0 55 55 55 75
  48+ E5D4 55 55 D5 70
  48+ E5D8 00 00 80 00
  48+ E5DC 00 00 00 85
  49+ E5E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$03,$FF,$F0,$01,$80,$0F,$FF,$C0,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  49+ E5E4 00 01 00 00
  49+ E5E8 00 00 00 00
  49+ E5EC 03 FF F0 01
  49+ E5F0 80 0F FF C0
  49+ E5F4 00 00 00 00
  49+ E5F8 00 00 80 00
  49+ E5FC 00 00 00 89
  50+ E600 B0 C3 92 49      DB $B0,$C3,$92,$49,$24,$93,$20,$08,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$08,$02,$C9,$24,$92,$49,$3C,$61 ; row 7
  50+ E604 24 93 20 08
  50+ E608 02 00 00 00
  50+ E60C 00 00 00 00
  50+ E610 00 00 00 00
  50+ E614 00 00 00 20
  50+ E618 08 02 C9 24
  50+ E61C 92 49 3C 61
  51+ E620 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$60,$08,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$02,$C9,$24,$92,$49,$66,$39
  51+ E624 00 01 60 08
  51+ E628 02 00 00 00
  51+ E62C 00 00 00 00
  51+ E630 00 00 00 00
  51+ E634 00 00 00 60
  51+ E638 08 02 C9 24
  51+ E63C 92 49 66 39
  52+ E640 B0 3C 92 49      DB $B0,$3C,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C9,$24,$92,$49,$7C,$7D
  52+ E644 24 93 00 00
  52+ E648 00 00 00 00
  52+ E64C 00 00 00 00
  52+ E650 00 00 00 00
  52+ E654 00 00 00 00
  52+ E658 00 00 C9 24
  52+ E65C 92 49 7C 7D
  53+ E660 9C 18 92 49      DB $9C,$18,$92,$49,$24,$93,$00,$00,$00,$00,$03,$E0,$02,$60,$10,$01,$80,$08,$06,$40,$07,$E0,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  53+ E664 24 93 00 00
  53+ E668 00 00 03 E0
  53+ E66C 02 60 10 01
  53+ E670 80 08 06 40
  53+ E674 07 E0 00 00
  53+ E678 00 00 80 00
  53+ E67C 00 00 00 01
  54+ E680 BE 18 92 49      DB $BE,$18,$92,$49,$24,$93,$00,$01,$AA,$AE,$AA,$AA,$AA,$AA,$AB,$AA,$55,$D5,$55,$55,$55,$55,$75,$55,$80,$00,$80,$00,$00,$00,$00,$99
  54+ E684 24 93 00 01
  54+ E688 AA AE AA AA
  54+ E68C AA AA AB AA
  54+ E690 55 D5 55 55
  54+ E694 55 55 75 55
  54+ E698 80 00 80 00
  54+ E69C 00 00 00 99
  55+ E6A0 B2 3E 92 49      DB $B2,$3E,$92,$49,$24,$93,$00,$10,$60,$00,$02,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$40,$00,$06,$08,$00,$80,$00,$00,$00,$00,$BD
  55+ E6A4 24 93 00 10
  55+ E6A8 60 00 02 00
  55+ E6AC 00 20 00 01
  55+ E6B0 80 00 04 00
  55+ E6B4 00 40 00 06
  55+ E6B8 08 00 80 00
  55+ E6BC 00 00 00 BD
  56+ E6C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$03,$02,$00,$00,$04,$00,$00,$01,$80,$00,$00,$20,$00,$00,$00,$C0,$00,$00,$80,$00,$00,$00,$00,$B9
  56+ E6C4 00 01 00 00
  56+ E6C8 03 02 00 00
  56+ E6CC 04 00 00 01
  56+ E6D0 80 00 00 20
  56+ E6D4 00 00 00 C0
  56+ E6D8 00 00 80 00
  56+ E6DC 00 00 00 B9
  57+ E6E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  57+ E6E4 00 01 00 00
  57+ E6E8 00 00 00 00
  57+ E6EC 00 00 0F FF
  57+ E6F0 FF F0 00 00
  57+ E6F4 00 00 00 00
  57+ E6F8 00 00 80 00
  57+ E6FC 00 00 00 89
  58+ E700 80 C3 FF FF      DB $80,$C3,$FF,$FF,$FF,$FF,$60,$08,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$03,$FF,$FF,$FF,$FF,$00,$61 ; row 8
  58+ E704 FF FF 60 08
  58+ E708 03 00 00 00
  58+ E70C 00 00 00 00
  58+ E710 00 00 00 00
  58+ E714 00 00 00 60
  58+ E718 08 03 FF FF
  58+ E71C FF FF 00 61
  59+ E720 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$20,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$00,$02,$FF,$FF,$FF,$FF,$00,$01
  59+ E724 FF FF 20 00
  59+ E728 02 00 00 00
  59+ E72C 00 00 00 00
  59+ E730 00 00 00 00
  59+ E734 00 00 00 20
  59+ E738 00 02 FF FF
  59+ E73C FF FF 00 01
  60+ E740 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$00,$01
  60+ E744 FF FF 00 00
  60+ E748 00 00 00 00
  60+ E74C 00 00 00 00
  60+ E750 00 00 00 00
  60+ E754 00 00 00 00
  60+ E758 00 00 FF FF
  60+ E75C FF FF 00 01
  61+ E760 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$7D,$8A,$AE,$BA,$AA,$AA,$55,$55,$5D,$75,$51,$BE,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  61+ E764 FF FF 00 00
  61+ E768 00 00 7D 8A
  61+ E76C AE BA AA AA
  61+ E770 55 55 5D 75
  61+ E774 51 BE 00 00
  61+ E778 00 00 80 00
  61+ E77C 00 00 00 01
  62+ E780 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$03,$00,$08,$00,$04,$00,$02,$00,$81,$81,$00,$40,$00,$20,$00,$10,$00,$C0,$00,$FF,$FF,$FF,$FF,$FF,$FF
  62+ E784 FF FF 00 03
  62+ E788 00 08 00 04
  62+ E78C 00 02 00 81
  62+ E790 81 00 40 00
  62+ E794 20 00 10 00
  62+ E798 C0 00 FF FF
  62+ E79C FF FF FF FF
  63+ E7A0 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$08,$C0,$00,$04,$00,$00,$40,$00,$01,$80,$00,$02,$00,$00,$20,$00,$03,$10,$00,$FF,$FF,$FF,$FF,$FF,$FF
  63+ E7A4 FF FF 00 08
  63+ E7A8 C0 00 04 00
  63+ E7AC 00 40 00 01
  63+ E7B0 80 00 02 00
  63+ E7B4 00 20 00 03
  63+ E7B8 10 00 FF FF
  63+ E7BC FF FF FF FF
  64+ E7C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$E4,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$27,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  64+ E7C4 00 01 00 00
  64+ E7C8 00 E4 00 00
  64+ E7CC 08 00 00 01
  64+ E7D0 80 00 00 10
  64+ E7D4 00 00 27 00
  64+ E7D8 00 00 FF FF
  64+ E7DC FF FF FF FF
  65+ E7E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  65+ E7E4 00 01 00 00
  65+ E7E8 00 00 00 00
  65+ E7EC 00 00 00 00
  65+ E7F0 00 00 00 00
  65+ E7F4 00 00 00 00
  65+ E7F8 00 00 FF FF
  65+ E7FC FF FF FF FF
  66+ E800              ConsoleAttributes:
  67+ E800 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$45,$45,$45,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  67+ E804 07 07 45 45
  67+ E808 45 00 00 00
  67+ E80C 00 00 00 00
  67+ E810 00 00 00 00
  67+ E814 00 00 00 41
  67+ E818 41 41 07 07
  67+ E81C 07 07 07 07
  68+ E820 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$05,$45,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$41,$01,$07,$07,$07,$07,$07,$07
  68+ E824 07 07 05 45
  68+ E828 05 00 00 00
  68+ E82C 00 00 00 00
  68+ E830 00 00 00 00
  68+ E834 00 00 00 01
  68+ E838 41 01 07 07
  68+ E83C 07 07 07 07
  69+ E840 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$45,$45,$45,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  69+ E844 07 07 45 45
  69+ E848 45 00 00 00
  69+ E84C 00 00 00 00
  69+ E850 00 00 00 00
  69+ E854 00 00 00 41
  69+ E858 41 41 07 07
  69+ E85C 07 07 07 07
  70+ E860 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$00,$00,$00,$00,$07,$00,$00,$00,$00,$07
  70+ E864 07 07 00 00
  70+ E868 00 00 42 42
  70+ E86C 42 42 42 42
  70+ E870 42 42 42 42
  70+ E874 42 42 00 00
  70+ E878 00 00 07 00
  70+ E87C 00 00 00 07
  71+ E880 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$02,$00,$07,$07,$07,$07,$07,$07
  71+ E884 07 07 00 02
  71+ E888 42 42 42 42
  71+ E88C 42 42 42 42
  71+ E890 42 42 42 42
  71+ E894 42 42 42 42
  71+ E898 02 00 07 07
  71+ E89C 07 07 07 07
  72+ E8A0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  72+ E8A4 07 07 00 02
  72+ E8A8 02 02 02 02
  72+ E8AC 02 02 02 02
  72+ E8B0 02 02 02 02
  72+ E8B4 02 02 02 02
  72+ E8B8 02 00 07 07
  72+ E8BC 07 07 07 07
  73+ E8C0 07 00 00 00      DB $07,$00,$00,$00,$00,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  73+ E8C4 00 07 00 02
  73+ E8C8 02 02 02 02
  73+ E8CC 02 02 02 02
  73+ E8D0 02 02 02 02
  73+ E8D4 02 02 02 02
  73+ E8D8 02 00 07 07
  73+ E8DC 07 07 07 07
  74+ E8E0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$07,$07,$07,$07,$07,$07
  74+ E8E4 07 07 00 00
  74+ E8E8 00 02 02 02
  74+ E8EC 02 02 02 02
  74+ E8F0 02 02 02 02
  74+ E8F4 02 02 02 00
  74+ E8F8 00 00 07 07
  74+ E8FC 07 07 07 07
  75+ E900
  76+ E900
# file closed: ./Images/ConsoleImageData.asm
 983  E900                                  DISPLAY "Bank ",BankConsole," - Bytes free ",/D, $2000 - ($-ConsoleImageAddr), " - BankConsole"
 984  E900                                  ASSERT $-ConsoleImageAddr <8912 , Bank code leaks over 8K boundary
 985  E900              ; Bank 62  ------------------------------------------------------------------------------------------------------------------------
 986  E900                                  SLOT    ViewFrontAddr
 987  E900                                  PAGE    BankFrontView
 988  E900                                  ORG     ViewFrontAddr
 989  C000                                  INCLUDE "./Views/Front_View.asm"
# file opened: ./Views/Front_View.asm
   1+ C000
   2+ C000 46 72 6F 6E  front_page_page_marker  DB "FrontView   PG62"
   2+ C004 74 56 69 65
   2+ C008 77 20 20 20
   2+ C00C 50 47 36 32
   3+ C010
   4+ C010 47           draw_front_calc_alpha:  ld      b,a
   5+ C011 E6 80                                and     $80
   6+ C013 32 8C 7E                             ld      (ALP2),a                            ; set sign
   7+ C016 4F                                   ld      c,a                                 ; save sign
   8+ C017 EE 80                                xor     $80
   9+ C019 32 8D 7E                             ld      (ALP2FLIP),a                        ; and oppsite sign
  10+ C01C 3A 88 7E                             ld      a,(JSTX)
  11+ C01F ED 27 80                             test    $80
  12+ C022 28 02                                jr      z,  .PositiveRoll
  13+ C024 ED 44        .NegativeRoll:          neg
  14+ C026 CB 3F        .PositiveRoll           srl     a                                   ; divide sign by 4
  15+ C028 CB 3F                                srl     a
  16+ C02A FE 08                                cp      8
  17+ C02C 38 02                                jr      c,.NotIncreasedDamp                 ; if a < 8 divide by 2 again
  18+ C02E CB 3F        .IncreasedDamp          srl     a
  19+ C030 32 8B 7E     .NotIncreasedDamp:      ld      (ALP1),a
  20+ C033 B1                                   or      c
  21+ C034 32 8A 7E                             ld      (ALPHA),a                           ; a = signed bit alph1
  22+ C037 21 F4 C2     .RestartDampenRoll:     ld      hl,dampenRcounter
  23+ C03A 36 04                                ld      (hl),dampenRate
  24+ C03C C9                                   ret
  25+ C03D
  26+ C03D              ; Do the same for pitch
  27+ C03D 47           draw_front_calc_beta:   ld      b,a
  28+ C03E E6 80                                and     $80
  29+ C040 32 77 7E                             ld      (BET2),a                            ; set sign
  30+ C043 4F                                   ld      c,a                                 ; save sign
  31+ C044 EE 80                                xor     $80
  32+ C046 32 78 7E                             ld      (BET2FLIP),a                        ; and oppsite sign
  33+ C049 3A 75 7E                             ld      a,(JSTY)
  34+ C04C ED 27 80                             test    $80
  35+ C04F 28 02                                jr      z,  .PositivePitch
  36+ C051 ED 44        .NegativePitch:         neg
  37+ C053 CB 3F        .PositivePitch:         srl     a                                   ; divide sign by 4
  38+ C055 CB 3F                                srl     a
  39+ C057 FE 08                                cp      8
  40+ C059 38 02                                jr      c,.NotIncreasedDamp                 ; if a < 8 divide by 2 again
  41+ C05B CB 3F        .IncreasedDamp          srl     a
  42+ C05D 32 76 7E     .NotIncreasedDamp:      ld      (BET1),a
  43+ C060 B1                                   or      c
  44+ C061 32 74 7E                             ld      (BETA),a                            ; a = signed bit bet1
  45+ C064 21 F5 C2     .RestartDampenPitch:    ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
  46+ C067 36 04                                ld      (hl),dampenRate
  47+ C069 C9                                   ret
  48+ C06A
  49+ C06A              initialise_front_view:
  50+ C06A
  51+ C06A              draw_front_view:        MMUSelectLayer1
  51+ C06A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  52+ C06E CD 8F E0                             call    l1_cls
  53+ C071 CD A9 E0                             call    l1_attr_cls
  54+ C074                                      MMUSelectLayer2
  54+ C074 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  55+ C078 CD 04 E0                             call     asm_l2_double_buffer_on
  56+ C07B                                      MMUSelectSpriteBank
  56+ C07B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  57+ C07F CD 6E E5                             call    sprite_cls_cursors
  58+ C082 CD 6C E1                             call    sprite_reticule
  59+ C085 CD 48 E2                             call    sprite_laser
  60+ C088 CD 52 E4                             call    sprite_targetting
  61+ C08B CD 84 E4                             call    sprite_lock
  62+ C08E CD B6 E4                             call    sprite_targetting_hide      ; do not show targeting initially
  63+ C091 CD 29 E1                             call    sprite_ECM
  64+ C094 CD 50 E1                             call    sprite_missile_1
  65+ C097 CD 57 E1                             call    sprite_missile_2
  66+ C09A CD 5E E1                             call    sprite_missile_3
  67+ C09D CD 65 E1                             call    sprite_missile_4
  68+ C0A0 CD 18 E4                             call    sprite_ecm_hide
  69+ C0A3 CD 45 E4                             call    sprite_missile_all_hide
  70+ C0A6                                     ; call    sprite_laser_show
  71+ C0A6                                      MMUSelectConsoleBank
  71+ C0A6 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
  72+ C0AA 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in UBnk its easy to read
  73+ C0AD 11 00 E0                             ld          de,ConsoleImageData
  74+ C0B0 01 00 08                             ld          bc, ScreenL1BottomLen
  75+ C0B3 CD 2A 7E                             call        memcopy_dma
  76+ C0B6 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in UBnk its easy to read
  77+ C0B9 11 00 E8                             ld          de,ConsoleAttributes
  78+ C0BC 01 00 01                             ld          bc, ScreenL1AttrBtmLen
  79+ C0BF CD 2A 7E                             call        memcopy_dma
  80+ C0C2 CD 9C 7B                             call        InitialiseStars
  81+ C0C5 AF                                   xor         a
  82+ C0C6 32 33 81                             ld          (DockedFlag),a              ; we can never be docked if we hit a view screen
  83+ C0C9 32 D0 C0                             ld          (CurrentLock),a             ; we are on no targetting sprites
  84+ C0CC 32 D1 C0                             ld          (ShowingLock),a
  85+ C0CF C9                                   ret
  86+ C0D0
  87+ C0D0 00           CurrentLock             DB      0
  88+ C0D1 00           ShowingLock             DB      0
  89+ C0D2 3A F7 81     update_front_view:      ld      a,(MissileTargettingFlag)
  90+ C0D5                                      JumpIfANEquNusng StageMissileNotTargeting,  .NoTarget
  90+ C0D5 FE FF       >                        cp     StageMissileNotTargeting
  90+ C0D7 CA E7 C0    >                        jp     z,.NoTarget
  91+ C0DA                                      JumpIfANEquNusng StageMissileTargeting, .Targetting
  91+ C0DA FE FE       >                        cp     StageMissileTargeting
  91+ C0DC CA F4 C0    >                        jp     z,.Targetting
  92+ C0DF CB 7F                                bit     7,a
  93+ C0E1 20 26                                jr      nz, .Locked
  94+ C0E3 CD B6 E4                             call    sprite_targetting_hide
  95+ C0E6 C9                                   ret
  96+ C0E7 3A D1 C0     .NoTarget:              ld      a,(ShowingLock)
  97+ C0EA                                      ReturnIfAIsZero
  97+ C0EA A7          >                        and     a
  97+ C0EB C8          >                        ret     z
  98+ C0EC                                      MMUSelectSpriteBank
  98+ C0EC ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  99+ C0F0 CD B6 E4                             call     sprite_targetting_hide
 100+ C0F3 C9                                   ret
 101+ C0F4              .Targetting:            CallIfMemZero CurrentLock, sprite_targetting
 101+ C0F4 3A D0 C0    >                        ld      a,(CurrentLock)
 101+ C0F7 A7          >                        and     a
 101+ C0F8 CC 52 E4    >                        call    z, sprite_targetting
 102+ C0FB                                      CallIfMemZero ShowingLock, sprite_targetting_show
 102+ C0FB 3A D1 C0    >                        ld      a,(ShowingLock)
 102+ C0FE A7          >                        and     a
 102+ C0FF CC C7 E4    >                        call    z, sprite_targetting_show
 103+ C102 21 00 01                             ld      hl,$0100                        ; set both bytes in one go
 104+ C105 22 D0 C0                             ld      (CurrentLock),hl
 105+ C108 C9                                   ret
 106+ C109              .Locked:                CallIfMemNotZero CurrentLock, sprite_lock
 106+ C109 3A D0 C0    >                        ld      a,(CurrentLock)
 106+ C10C A7          >                        and     a
 106+ C10D C4 84 E4    >                        call    nz, sprite_lock
 107+ C110                                      CallIfMemZero ShowingLock, sprite_targetting_show
 107+ C110 3A D1 C0    >                        ld      a,(ShowingLock)
 107+ C113 A7          >                        and     a
 107+ C114 CC C7 E4    >                        call    z, sprite_targetting_show
 108+ C117 21 01 01                             ld      hl,$0101                        ; set both bytes in one go
 109+ C11A 22 D0 C0                             ld      (CurrentLock),hl
 110+ C11D C9                                   ret
 111+ C11E
 112+ C11E                                      ;  1......................  2......................  3......................  4......................  5......................  6...................... 7......................  8......................
 113+ C11E                                      ;  1......................  2......................  3......................  4......................  5......................  6...................... 7......................  8......................
 114+ C11E 80 40 60 28  LightningLines:         db 128, 064, 096, 040, 255, 097, 042, 076, 035, 031, 082, 039, 079, 020, 026, 079, 026, 058, 018, 022, 064, 021, 032, 026, 018, 038, 025, 030, 009, 026, 035, 020, 005, 016, 018, 037, 021, 000, 000, 018
 114+ C122 FF 61 2A 4C
 114+ C126 23 1F 52 27
 114+ C12A 4F 14 1A 4F
 114+ C12E 1A 3A 12 16
 114+ C132 40 15 20 1A
 114+ C136 12 26 19 1E
 114+ C13A 09 1A 23 14
 114+ C13E 05 10 12 25
 114+ C142 15 00 00 12
 115+ C146 80 40 8B 28                          db 128, 064, 139, 040, 255, 137, 045, 160, 035, 031, 150, 040, 157, 056, 026, 160, 036, 175, 010, 022, 156, 037, 196, 040, 018, 197, 041, 223, 033, 026, 223, 033, 245, 030, 018, 223, 032, 254, 047, 018
 115+ C14A FF 89 2D A0
 115+ C14E 23 1F 96 28
 115+ C152 9D 38 1A A0
 115+ C156 24 AF 0A 16
 115+ C15A 9C 25 C4 28
 115+ C15E 12 C5 29 DF
 115+ C162 21 1A DF 21
 115+ C166 F5 1E 12 DF
 115+ C16A 20 FE 2F 12
 116+ C16E 80 40 5A 59                          db 128, 064, 090, 089, 255, 089, 089, 064, 098, 031, 079, 092, 064, 072, 025, 065, 075, 030, 070, 022, 035, 071, 038, 064, 018, 067, 095, 021, 099, 026, 031, 097, 000, 080, 018, 031, 097, 021, 110, 018
 116+ C172 FF 59 59 40
 116+ C176 62 1F 4F 5C
 116+ C17A 40 48 19 41
 116+ C17E 4B 1E 46 16
 116+ C182 23 47 26 40
 116+ C186 12 43 5F 15
 116+ C18A 63 1A 1F 61
 116+ C18E 00 50 12 1F
 116+ C192 61 15 6E 12
 117+ C196 80 40 61 71                          db 128, 064, 097, 113, 255, 098, 110, 064, 115, 031, 070, 115, 073, 127, 025, 071, 114, 060, 112, 022, 030, 120, 020, 126, 018, 070, 114, 050, 120, 026, 050, 120, 027, 119, 018, 020, 125, 010, 120, 018
 117+ C19A FF 62 6E 40
 117+ C19E 73 1F 46 73
 117+ C1A2 49 7F 19 47
 117+ C1A6 72 3C 70 16
 117+ C1AA 1E 78 14 7E
 117+ C1AE 12 46 72 32
 117+ C1B2 78 1A 32 78
 117+ C1B6 1B 77 12 14
 117+ C1BA 7D 0A 78 12
 118+ C1BE 80 40 84 59                          db 128, 064, 132, 089, 255, 131, 081, 145, 098, 031, 145, 097, 133, 103, 025, 145, 098, 150, 110, 022, 150, 109, 154, 105, 018, 150, 110, 146, 120, 026, 145, 120, 140, 126, 018, 147, 120, 159, 126, 018
 118+ C1C2 FF 83 51 91
 118+ C1C6 62 1F 91 61
 118+ C1CA 85 67 19 91
 118+ C1CE 62 96 6E 16
 118+ C1D2 96 6D 9A 69
 118+ C1D6 12 96 6E 92
 118+ C1DA 78 1A 91 78
 118+ C1DE 8C 7E 12 93
 118+ C1E2 78 9F 7E 12
 119+ C1E6 80 40 9F 67                          db 128, 064, 159, 103, 255, 161, 102, 171, 108, 031, 160, 102, 175, 127, 025, 175, 124, 200, 122, 022, 200, 121, 223, 120, 018, 224, 120, 225, 127, 026, 224, 119, 245, 116, 018, 246, 117, 254, 123, 018
 119+ C1EA FF A1 66 AB
 119+ C1EE 6C 1F A0 66
 119+ C1F2 AF 7F 19 AF
 119+ C1F6 7C C8 7A 16
 119+ C1FA C8 79 DF 78
 119+ C1FE 12 E0 78 E1
 119+ C202 7F 1A E0 77
 119+ C206 F5 74 12 F6
 119+ C20A 75 FE 7B 12
 120+ C20E 80 40 91 4A                          db 128, 064, 145, 074, 255, 145, 073, 158, 072, 031, 159, 072, 179, 064, 025, 159, 073, 185, 085, 022, 182, 084, 197, 076, 018, 195, 075, 207, 079, 026, 206, 079, 245, 063, 018, 206, 080, 245, 105, 018
 120+ C212 FF 91 49 9E
 120+ C216 48 1F 9F 48
 120+ C21A B3 40 19 9F
 120+ C21E 49 B9 55 16
 120+ C222 B6 54 C5 4C
 120+ C226 12 C3 4B CF
 120+ C22A 4F 1A CE 4F
 120+ C22E F5 3F 12 CE
 120+ C232 50 F5 69 12
 121+ C236
 122+ C236              ; Draw line at hl for b lines
 123+ C236 E5 C5        DrawLighningLine:       push    hl,,bc
 124+ C238 4E                                   ld      c,(hl)
 125+ C239 23                                   inc     hl
 126+ C23A 46                                   ld      b,(hl)
 127+ C23B 23                                   inc     hl
 128+ C23C 5E                                   ld      e,(hl)
 129+ C23D 23                                   inc     hl
 130+ C23E 56                                   ld      d,(hl)
 131+ C23F 23                                   inc     hl
 132+ C240 7E                                   ld      a,(hl)          ; colour
 133+ C241 CD D6 E9                             call    l2_draw_diagonal
 134+ C244 C1 E1                                pop     hl,,bc
 135+ C246 3E 05                                ld      a,5
 136+ C248 ED 31                                add     hl,a
 137+ C24A 10 EA                                djnz    DrawLighningLine
 138+ C24C C9                                   ret
 139+ C24D
 140+ C24D              ;Loop though all lines
 141+ C24D              ;   60$% chance of drawing a line, call draw line
 142+ C24D              ;   go to next line
 143+ C24D              ;repeat
 144+ C24D 06 07        hyperspace_Lightning:   ld      b, 7                    ; total number of lightning bolts
 145+ C24F 21 1E C1                             ld      hl,LightningLines
 146+ C252                                      MMUSelectLayer2
 146+ C252 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 147+ C256                                      ;break
 148+ C256              ; above here select which lines table we will use
 149+ C256 C5 E5        .LineLoop:              push    bc,,hl
 150+ C258 CD 0A 85                             call    doRandom
 151+ C25B FE 1E                                cp      30
 152+ C25D 30 0C                                jr      nc,.NextLine
 153+ C25F CD 0A 85                             call    doRandom
 154+ C262 E6 07                                and     $07
 155+ C264 3C                                   inc     a
 156+ C265 47                                   ld      b,a
 157+ C266 E1                                   pop     hl
 158+ C267 E5                                   push    hl
 159+ C268 CD 36 C2                             call    DrawLighningLine
 160+ C26B E1 C1        .NextLine:              pop     bc,,hl
 161+ C26D 16 08                                ld      d,8
 162+ C26F 1E 05                                ld      e,5
 163+ C271 ED 30                                mul
 164+ C273 19                                   add     hl,de
 165+ C274 10 E0                                djnz    .LineLoop
 166+ C276 3A 3D 81                             ld      a,(HyperCircle)
 167+ C279 57                                   ld      d,a
 168+ C27A 01 80 40                             ld      bc, $4080
 169+ C27D                                      ;break
 170+ C27D 1E 00                                ld      e,$00
 171+ C27F CD F4 ED                             call    l2_draw_circle_fill; ; ">l2_draw_circle_fill BC = center row col, d = radius, e = colour"
 172+ C282 01 80 40                             ld      bc, $4080
 173+ C285 3A 3D 81                             ld      a,(HyperCircle)
 174+ C288 3C                                   inc     a
 175+ C289 57                                   ld      d,a
 176+ C28A 1E FF                                ld      e,$FF
 177+ C28C CD CA EB                             call    l2_draw_circle
 178+ C28F 3A 3D 81                             ld      a,(HyperCircle)
 179+ C292 3C                                   inc     a
 180+ C293 3C                                   inc     a
 181+ C294 FE 40                                cp      64
 182+ C296 D0                                   ret     nc
 183+ C297 32 3D 81                             ld      (HyperCircle),a
 184+ C29A                                      SetCarryFlag
 184+ C29A 37          >                        scf
 185+ C29B C9                                   ret
 186+ C29C
 187+ C29C
 188+ C29C              draw_hyperspace:        MMUSelectLayer1
 188+ C29C ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 189+ C2A0 CD 8F E0                             call    l1_cls
 190+ C2A3 CD A9 E0                             call    l1_attr_cls
 191+ C2A6                                      MMUSelectLayer2
 191+ C2A6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 192+ C2AA CD 04 E0                             call     asm_l2_double_buffer_on
 193+ C2AD                                      MMUSelectSpriteBank
 193+ C2AD ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 194+ C2B1 CD 6E E5                             call    sprite_cls_cursors
 195+ C2B4                                      MMUSelectConsoleBank
 195+ C2B4 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
 196+ C2B8 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in UBnk its easy to read
 197+ C2BB 11 00 E0                             ld          de,ConsoleImageData
 198+ C2BE 01 00 08                             ld          bc, ScreenL1BottomLen
 199+ C2C1 CD 2A 7E                             call        memcopy_dma
 200+ C2C4 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in UBnk its easy to read
 201+ C2C7 11 00 E8                             ld          de,ConsoleAttributes
 202+ C2CA 01 00 01                             ld          bc, ScreenL1AttrBtmLen
 203+ C2CD CD 2A 7E                             call        memcopy_dma
 204+ C2D0 CD A7 7B                             call        InitialiseHyperStars
 205+ C2D3 AF                                   xor         a
 206+ C2D4 32 33 81                             ld          (DockedFlag),a              ; we can never be docked if we hit a view screen
 207+ C2D7 3E 02                                ld          a,2
 208+ C2D9 32 3D 81                             ld          (HyperCircle),a
 209+ C2DC 3E FC                                ld          a,$FC
 210+ C2DE 32 33 81                             ld          (DockedFlag),a
 211+ C2E1 C9                                   ret
 212+ C2E2
 213+ C2E2              ;----------------------------------------------------------------------------------------------------------------------------------
 214+ C2E2              front_warp:             ;call        SaveCurrentDust                         ; save current dust positions
 215+ C2E2 06 AF                                ld          b,175                                    ; loop for x iterations
 216+ C2E4 C5           .warploop:              push        bc
 217+ C2E5 CD FF 7B                             call        DustForward
 218+ C2E8                                      MMUSelectLayer2
 218+ C2E8 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 219+ C2EC CD 97 E2                             call        l2_flip_buffers
 220+ C2EF C1                                   pop         bc
 221+ C2F0 10 F2                                djnz        .warploop
 222+ C2F2 C9                                   ret
 223+ C2F3
 224+ C2F3              ;----------------------------------------------------------------------------------------------------------------------------------
 225+ C2F3 C9           loop_hyperspace         ret
 226+ C2F4              ;----------------------------------------------------------------------------------------------------------------------------------
 227+ C2F4              dampenRate:             equ     $04
 228+ C2F4 04           dampenRcounter:         DB      dampenRate
 229+ C2F5 04           dampenPcounter:         DB      dampenRate
 230+ C2F6              ;----------------------------------------------------------------------------------------------------------------------------------
 231+ C2F6              input_front_view:       ;DEFUNCT ClearEngineSoundChanged
 232+ C2F6 2A 59 E0                             ld      hl,(addr_Pressed_Accellerate)
 233+ C2F9 7E                                   ld      a,(hl)
 234+ C2FA                                      JumpIfAIsZero     .TestDecellerate
 234+ C2FA A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 234+ C2FB CA 17 C3    >                        jp	    z, .TestDecellerate
 235+ C2FE 3A 6A 7F                             ld      a,(SHIPMAXSPEED)
 236+ C301 57                                   ld      d,a
 237+ C302 3A 6B 7F                             ld      a,(DELTA)
 238+ C305                                      JumpIfAGTENusng d,.TestDecellerate
 238+ C305 BA          >                        cp     d
 238+ C306 D2 17 C3    >                        jp		nc,.TestDecellerate
 239+ C309 3C                                   inc     a
 240+ C30A 32 6B 7F                             ld      (DELTA),a
 241+ C30D 2A 6C 7F                             ld      hl,(DELT4Lo)
 242+ C310 ED 34 04 00                          add     hl,4
 243+ C314 22 6C 7F                             ld      (DELT4Lo),hl
 244+ C317                                      ;DEFUNCT SetEngineSoundChanged
 245+ C317 2A 5B E0     .TestDecellerate:       ld      hl,(addr_Pressed_Decellerate)
 246+ C31A 7E                                   ld      a,(hl)
 247+ C31B                                      JumpIfAIsZero   .TestLeftPressed
 247+ C31B A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 247+ C31C CA 34 C3    >                        jp	    z, .TestLeftPressed
 248+ C31F 3A 6B 7F                             ld      a,(DELTA)
 249+ C322                                      JumpIfAIsZero   .TestLeftPressed
 249+ C322 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 249+ C323 CA 34 C3    >                        jp	    z, .TestLeftPressed
 250+ C326 3D                                   dec     a
 251+ C327 32 6B 7F                             ld      (DELTA),a
 252+ C32A 2A 6C 7F                             ld      hl,(DELT4Lo)
 253+ C32D 2B                                   dec     hl
 254+ C32E 2B                                   dec     hl
 255+ C32F 2B                                   dec     hl
 256+ C330 2B                                   dec     hl
 257+ C331 22 6C 7F                             ld      (DELT4Lo),hl
 258+ C334                                      ;DEFUNCT SetEngineSoundChanged
 259+ C334 2A 51 E0     .TestLeftPressed:       ld      hl,(addr_Pressed_RollLeft)
 260+ C337 7E                                   ld      a,(hl)
 261+ C338                                      JumpIfAIsZero   .TestRightPressed
 261+ C338 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 261+ C339 CA 4F C3    >                        jp	    z, .TestRightPressed
 262+ C33C 3A 88 7E                             ld      a,(JSTX)                            ; have we maxed out Joystick?
 263+ C33F 21 8F 7E                             ld      hl,ALP1MAXL                         ; currnet ship max left roll
 264+ C342 BE                                   cp      (hl)
 265+ C343 28 0A                                jr      z,.TestRightPressed
 266+ C345                                      ;break
 267+ C345 3D                                   dec     a                                   ; increase joystick roll
 268+ C346 32 88 7E                             ld      (JSTX),a
 269+ C349 CD 10 C0                             call    draw_front_calc_alpha
 270+ C34C C3 84 C3                             jp      .TestDivePressed                    ; when pressing ignore damper
 271+ C34F 2A 53 E0     .TestRightPressed:       ld      hl,(addr_Pressed_RollRight)
 272+ C352 7E                                   ld      a,(hl)
 273+ C353                                      JumpIfAIsZero   .DampenRoll
 273+ C353 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 273+ C354 CA 6A C3    >                        jp	    z, .DampenRoll
 274+ C357 3A 88 7E                             ld      a,(JSTX)                            ; have we maxed out Joystick?
 275+ C35A 21 8E 7E                             ld      hl,ALP1MAXR                         ; currnet ship max left roll
 276+ C35D BE                                   cp      (hl)
 277+ C35E 28 24                                jr      z,.TestDivePressed                   ; if its held then we don't dampen
 278+ C360                                      ;break
 279+ C360 3C                                   inc     a                                   ; increase joystick roll
 280+ C361 32 88 7E     .UpdateAlphRoll:        ld      (JSTX),a
 281+ C364 CD 10 C0                             call    draw_front_calc_alpha
 282+ C367 C3 84 C3                             jp      .TestDivePressed                    ; when pressing ignore damper
 283+ C36A 21 F4 C2     .DampenRoll:            ld      hl,dampenRcounter
 284+ C36D 35                                   dec     (hl)
 285+ C36E 20 14                                jr      nz,.TestDivePressed
 286+ C370 3E 04                                ld      a,dampenRate
 287+ C372 77                                   ld      (hl),a
 288+ C373 3A 88 7E                             ld      a,(JSTX)
 289+ C376 FE 00                                cp      0
 290+ C378 28 0A                                jr      z, .TestDivePressed
 291+ C37A CB 7F                                bit     7,a
 292+ C37C 28 03                                jr      z,.PosRollDampen
 293+ C37E 3C           .NegRollDampen:         inc     a
 294+ C37F 18 01                                jr      .ApplyRollDampen
 295+ C381 3D           .PosRollDampen:         dec     a
 296+ C382 18 DD        .ApplyRollDampen:       jr      .UpdateAlphRoll
 297+ C384              ; Dive and Climb input
 298+ C384 2A 55 E0     .TestDivePressed:       ld      hl,(addr_Pressed_Dive)
 299+ C387 7E                                   ld      a,(hl)
 300+ C388                                      JumpIfAIsZero   .TestClimbPressed
 300+ C388 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 300+ C389 CA 9F C3    >                        jp	    z, .TestClimbPressed
 301+ C38C 3A 75 7E                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 302+ C38F 21 7A 7E                             ld      hl,BET1MAXD                         ; currnet ship max left roll
 303+ C392 BE                                   cp      (hl)
 304+ C393 28 0A                                jr      z,.TestClimbPressed
 305+ C395                                      ;break
 306+ C395 3D                                   dec     a                                   ; increase joystick roll
 307+ C396 32 75 7E                             ld      (JSTY),a
 308+ C399 CD 3D C0                             call    draw_front_calc_beta
 309+ C39C C3 D4 C3                             jp      .ForwardCursorKeysDone
 310+ C39F 2A 57 E0     .TestClimbPressed:      ld      hl,(addr_Pressed_Climb)
 311+ C3A2 7E                                   ld      a,(hl)
 312+ C3A3                                      JumpIfAIsZero   .DampenPitch
 312+ C3A3 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 312+ C3A4 CA BA C3    >                        jp	    z, .DampenPitch
 313+ C3A7 3A 75 7E                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 314+ C3AA 21 79 7E                             ld      hl,BET1MAXC                         ; currnet ship max left roll
 315+ C3AD BE                                   cp      (hl)
 316+ C3AE 28 24                                jr      z,.ForwardCursorKeysDone
 317+ C3B0 3C                                   inc     a                                   ; increase joystick roll
 318+ C3B1 32 75 7E     .UpdateBetaPitch:       ld      (JSTY),a
 319+ C3B4 CD 3D C0                             call    draw_front_calc_beta
 320+ C3B7 C3 D4 C3                             jp      .ForwardCursorKeysDone
 321+ C3BA 21 F5 C2     .DampenPitch:           ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
 322+ C3BD 35                                   dec     (hl)
 323+ C3BE 20 14                                jr      nz,.ForwardCursorKeysDone
 324+ C3C0 3E 04                                ld      a,dampenRate
 325+ C3C2 77                                   ld      (hl),a
 326+ C3C3 3A 75 7E                             ld      a,(JSTY)
 327+ C3C6 FE 00                                cp      0
 328+ C3C8 28 0A                                jr      z,.ForwardCursorKeysDone
 329+ C3CA CB 7F                                bit     7,a
 330+ C3CC 28 03                                jr      z,.PosPitchDampen
 331+ C3CE 3C           .NegPitchDampen:        inc     a
 332+ C3CF 18 01                                jr      .ApplyPitchDampen
 333+ C3D1 3D           .PosPitchDampen:        dec     a
 334+ C3D2 18 DD        .ApplyPitchDampen:      jr      .UpdateBetaPitch
 335+ C3D4              ; Now test hyperpsace. We can't be docked as this is a view routine piece of logic but for say local charts we may
 336+ C3D4              ; be in flight and they have to force a forward view when hyperspace is pressed
 337+ C3D4              ; We won't do galatic here, but for other views force to forward view
 338+ C3D4              .ForwardCursorKeysDone: MacroIsKeyPressed c_Pressed_Hyperspace              ; Check for hyperspace
 338+ C3D4 3E 24       >                        ld      a,c_Pressed_Hyperspace
 338+ C3D6             >                        MMUSelectKeyboard
 338+ C3D6 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 338+ C3DA CD A2 E1    >                        call    is_key_pressed
 339+ C3DD 20 48                                jr      nz,.NotHyperspace
 340+ C3DF              ; If we are in hyperspace countdown then test for hyperspace
 341+ C3DF 2A 39 81                             ld      hl,(InnerHyperCount)                ; if hyperspace was enaged then cancel
 342+ C3E2 7C                                   ld      a,h                                 ; hyperspace
 343+ C3E3 B5                                   or      l                                   ; .
 344+ C3E4 20 41                                jr      nz,.CancelHyperspace                ; .
 345+ C3E6              ; check selected target if we find one then after gettting galaxy at bc a=0 if not found
 346+ C3E6 ED 5B 13 80                          ld      de,(PresentSystemX)
 347+ C3EA 2A 15 80                             ld      hl,(TargetSystemX)
 348+ C3ED CD 56 99                             call    compare16HLDE
 349+ C3F0 28 35                                jr      z,.NoTargetSelected                 ; can't jump to current system
 350+ C3F2 3A 00 80                             ld      a,(Galaxy)
 351+ C3F5                                      MMUSelectGalaxyA
 351+ C3F5 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 352+ C3F8 ED 4B 15 80                          ld      bc,(TargetSystemX)
 353+ C3FC CD BB FA                             call    galaxy_name_at_bc
 354+ C3FF FE 00                                cp      0
 355+ C401 28 24                                jr      z,.NotHyperspace
 356+ C403              ; check fuel is sufficient
 357+ C403 ED 4B 13 80                          ld      bc,(PresentSystemX)
 358+ C407 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 359+ C40B ED 4B 15 80                          ld      bc,(TargetSystemX)
 360+ C40F ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 361+ C413 CD F7 FB                             call    galaxy_find_distance            ; get distance into HL
 362+ C416 7C                                   ld      a,h
 363+ C417 A7                                   and     a
 364+ C418 20 0D                                jr      nz,.InsufficientFuel            ; max jump capacity is 25 ly for any ship
 365+ C41A 3A D3 84                             ld      a,(Fuel)
 366+ C41D                                      JumpIfALTNusng    l, .InsufficientFuel
 366+ C41D BD          >                        cp      l
 366+ C41E DA 27 C4    >                        jp		c, .InsufficientFuel
 367+ C421              ; set up timer countdown
 368+ C421 21 0B 0B                             ld      hl,HyperSpaceTimers                 ; set both timers to 15
 369+ C424 22 39 81                             ld      (InnerHyperCount),hl                ; .
 370+ C427              .CancelHyperspace
 371+ C427              .NoTargetSelected
 372+ C427              .InsufficientFuel
 373+ C427              .NotHyperspace:
 374+ C427              ;--- Check for in system Jump---------------------------------------
 375+ C427 2A 39 81     .CheckForWarpPressd:    ld      hl,(InnerHyperCount)                ; if hyperspace was enaged then cancel
 376+ C42A 7C                                   ld      a,h                                 ; hyperspace
 377+ C42B B5                                   or      l                                   ; .
 378+ C42C 20 0F                                jr      nz,.WarpNotPressed
 379+ C42E 3E 54                                ld      a,c_Pressed_Warp
 380+ C430                                      MMUSelectKeyboard
 380+ C430 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 381+ C434 CD 95 E1                             call    is_key_up_state
 382+ C437 28 04                                jr      z, .WarpNotPressed
 383+ C439                                      SetMemTrue  WarpPressed                     ; This signals the event , teh main loop will cancel this as an acknowlege
 383+ C439 AF          >                        xor     a
 383+ C43A 32 62 81    >                        ld      (WarpPressed),a
 384+ C43D              .WarpNotPressed:
 385+ C43D                              IFDEF   LASER_V2
 386+ C43D CD 30 83                             call    IsLaserUseable                      ; no laser or destroyed?
 387+ C440 28 3A                                jr      z,          .FireNotPressed
 388+ C442 3E 14        .IsFirePressed:         ld      a,c_Pressed_FireLaser               ; else (beam type) if fire is pressed
 389+ C444                                      MMUSelectKeyboard
 389+ C444 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 390+ C448 CD 95 E1                             call    is_key_up_state
 391+ C44B 28 2F                                jr      z,.FireNotPressed
 392+ C44D              .FirePressed:           ;break
 393+ C44D                                      JumpIfMemNotZero    CurrentCooldown,     .LaserDone
 393+ C44D 3A 12 82    >                        ld  a,(CurrentCooldown)
 393+ C450 A7          >                        and a
 393+ C451 C2 A0 C4    >                        jp  nz,.LaserDone
 394+ C454                                      JumpIfMemNotZero    CurrentBurstPause,   .LaserDone
 394+ C454 3A 11 82    >                        ld  a,(CurrentBurstPause)
 394+ C457 A7          >                        and a
 394+ C458 C2 A0 C4    >                        jp  nz,.LaserDone
 395+ C45B                                      JumpIfMemNotZero    CurrLaserBurstCount, .LaserDone
 395+ C45B 3A 14 82    >                        ld  a,(CurrLaserBurstCount)
 395+ C45E A7          >                        and a
 395+ C45F C2 A0 C4    >                        jp  nz,.LaserDone
 396+ C462                                      JumpIfMemTrue       LaserBeamOn,         .LaserDone
 396+ C462 3A 0F 82    >                        ld      a,(LaserBeamOn)
 396+ C465 A7          >                        and     a
 396+ C466 CA A0 C4    >                        jp      z, .LaserDone
 397+ C469                                      ldCopyByte          CurrLaserPulseRate,   CurrLaserBurstCount
 397+ C469 3A 0B 82    >                        ld       a,(CurrLaserPulseRate)
 397+ C46C 32 14 82    >                        ld       (CurrLaserBurstCount),a
 398+ C46F                                      ldCopyByte          CurrLaserPulseOnTime, CurrLaserDuration
 398+ C46F 3A 0C 82    >                        ld       a,(CurrLaserPulseOnTime)
 398+ C472 32 10 82    >                        ld       (CurrLaserDuration),a
 399+ C475                                      SetMemTrue          LaserBeamOn
 399+ C475 AF          >                        xor     a
 399+ C476 32 0F 82    >                        ld      (LaserBeamOn),a
 400+ C479                                      ;call               TriggerLaserSound
 401+ C479 C3 A0 C4                             jp                  .LaserDone
 402+ C47C              .FireNotPressed:        ReturnIfMemNotZero  CurrLaserBurstCount
 402+ C47C 3A 14 82    >                        ld     a,(CurrLaserBurstCount)
 402+ C47F A7          >                        and     a
 402+ C480 C0          >                        ret    nz
 403+ C481                                      ReturnIfMemNotZero  CurrLaserDuration
 403+ C481 3A 10 82    >                        ld     a,(CurrLaserDuration)
 403+ C484 A7          >                        and     a
 403+ C485 C0          >                        ret    nz
 404+ C486                                      ReturnIfMemFalse    LaserBeamOn
 404+ C486 3A 0F 82    >                        ld      a,(LaserBeamOn)
 404+ C489 A7          >                        and     a
 404+ C48A C0          >                        ret     nz
 405+ C48B DD 01                                break
 406+ C48D                                      ldCopyByte          CurrLaserPulseRest, CurrentCooldown
 406+ C48D 3A 0E 82    >                        ld       a,(CurrLaserPulseRest)
 406+ C490 32 12 82    >                        ld       (CurrentCooldown),a
 407+ C493                                      SetMemFalse         LaserBeamOn
 407+ C493 3E FF       >                        ld      a,$FF
 407+ C495 32 0F 82    >                        ld      (LaserBeamOn),a
 408+ C498                                      SetMemZero          CurrLaserBurstCount
 408+ C498 AF          >                        xor     a
 408+ C499 32 14 82    >                        ld      (CurrLaserBurstCount),a
 409+ C49C                                      SetMemZero          CurrentBurstPause
 409+ C49C AF          >                        xor     a
 409+ C49D 32 11 82    >                        ld      (CurrentBurstPause),a
 410+ C4A0              .LaserDone:
 411+ C4A0                              ELSE
 412+ C4A0 ~            .CheckForLaserPressed:  call    IsLaserUseable                      ; no laser or destroyed?
 413+ C4A0 ~                                    jr      z,.CheckTargetting
 414+ C4A0 ~            .CanLaserStillFire:     SetMemFalse FireLaserPressed                ; default to no laser
 415+ C4A0 ~                                    ld      a,(CurrLaserPulseRate)              ; if not beam type
 416+ C4A0 ~                                    JumpIfAIsZero .BeamType                     ; .
 417+ C4A0 ~                                    ld      b,a                                 ; and not run out of pulses
 418+ C4A0 ~                                    ld      a,(CurrLaserPulseRateCount)         ;
 419+ C4A0 ~                                    ld      a,(CurrLaserPulseOnCount)           ;    if not already on
 420+ C4A0 ~                                    JumpIfAEqNusng  b, .PulseLimitReached       ;
 421+ C4A0 ~                                    ld      hl,CurrLaserPulseOffCount           ;       and not in off phase
 422+ C4A0 ~                                    or      (hl)                                ;
 423+ C4A0 ~                                    inc     hl  ; CurrLaserPulseRestCount       ;       and not in rest phase.
 424+ C4A0 ~                                    or      (hl)                                ;    .
 425+ C4A0 ~                                    jr      nz, .CheckTargetting                ;    .
 426+ C4A0 ~            .IsFirePressed:         ld      a,c_Pressed_FireLaser               ;       if fire is pressed
 427+ C4A0 ~                                    MMUSelectKeyboard
 428+ C4A0 ~                                    call    is_key_up_state                     ;       .
 429+ C4A0 ~                                    jr      z,.CheckTargetting                  ;       .
 430+ C4A0 ~            .CanProcesFire:         ld      a,(CurrLaserPulseRateCount)         ;            pulse rate count ++
 431+ C4A0 ~                                    inc     a                                   ;            .
 432+ C4A0 ~            .StillHavePulsesLeft:   ld      (CurrLaserPulseRateCount),a         ;            .
 433+ C4A0 ~                                    ldCopyByte CurrLaserPulseOnTime, CurrLaserPulseOnCount  ; pulse on count = pulse on time
 434+ C4A0 ~                                 ;   ldCopyByte CurrLaserPulseOffTime, CurrLaserPulseOffCount; pulse off count = pulse off time
 435+ C4A0 ~                                 ;   ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount  ; pulse rest count = pulse rest time
 436+ C4A0 ~                                    jp      .CheckTargetting
 437+ C4A0 ~            .BeamType:              ld      a,c_Pressed_FireLaser               ; else (beam type) if fire is pressed
 438+ C4A0 ~                                    MMUSelectKeyboard
 439+ C4A0 ~                                    call    is_key_up_state                     ;                   .
 440+ C4A0 ~                                    jr      z,.CheckTargetting                  ;                   .
 441+ C4A0 ~                                    SetMemTrue FireLaserPressed                 ;                   set pulse on to 1
 442+ C4A0 ~                                    ld      a,0
 443+ C4A0 ~                                    ld      (SoundFxToEnqueue),a
 444+ C4A0 ~                                    jp      .CheckTargetting
 445+ C4A0 ~            .PulseLimitReached:     ;ZeroA                                       ;
 446+ C4A0 ~                                    ;ld      (CurrLaserPulseRateCount),a         ;
 447+ C4A0 ~                                    ;ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount   ; start the rest phase
 448+ C4A0                              ENDIF
 449+ C4A0              ; . Here we check to see if the target lock has been pressed
 450+ C4A0              .CheckTargetting:       MMUSelectKeyboard
 450+ C4A0 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 451+ C4A4 CD 2C E3                             call    TargetMissileTest
 452+ C4A7              .CheckForMissile:       MacroIsKeyPressed c_Pressed_FireMissile             ; launch pressed?
 452+ C4A7 3E 18       >                        ld      a,c_Pressed_FireMissile
 452+ C4A9             >                        MMUSelectKeyboard
 452+ C4A9 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 452+ C4AD CD A2 E1    >                        call    is_key_pressed
 453+ C4B0 20 13                                jr      nz,.NotMissileLaunch
 454+ C4B2                                      AnyMissilesLeft
 454+ C4B2 3A 20 80    >                        ld      a,(NbrMissiles)
 454+ C4B5 A7          >                        and     a
 455+ C4B6 28 0D                                jr      z,.NotMissileLaunch                 ; no missiles in rack
 456+ C4B8 CD D5 83                             call    IsMissileLockedOn
 457+ C4BB 28 08                                jr      z,.MissileNotLocked
 458+ C4BD              .MissileLaunch:         SetMissileLaunch
 458+ C4BD 3A F7 81    >                        ld      a,(MissileTargettingFlag)
 458+ C4C0 E6 0F       >                        and     $0F
 458+ C4C2 32 F7 81    >                        ld      (MissileTargettingFlag),a
 459+ C4C5              .MissileNotLocked:                       ; later on we need a "bing bong" nose for trying to launch an unlocked missile
 460+ C4C5              .NotMissileLaunch:
 461+ C4C5 3A F1 84     .CheckForECM:           ld      a,(ECMPresent)
 462+ C4C8                                      JumpIfAEqNusng EquipmentItemNotFitted,.NoECM
 462+ C4C8 FE 00       >                        cp     EquipmentItemNotFitted
 462+ C4CA CA F1 C4    >                        jp      z,.NoECM
 463+ C4CD 3A 21 80     .CheckECMActive:        ld      a,(PlayerECMActiveCount)
 464+ C4D0                                      JumpIfAIsNotZero .NoECM
 464+ C4D0 A7          >                        and     a
 464+ C4D1 C2 F1 C4    >                        jp	    nz,.NoECM
 465+ C4D4              .CheckForKeyPress:      MacroIsKeyPressed c_Pressed_ECM
 465+ C4D4 3E 1C       >                        ld      a,c_Pressed_ECM
 465+ C4D6             >                        MMUSelectKeyboard
 465+ C4D6 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 465+ C4DA CD A2 E1    >                        call    is_key_pressed
 466+ C4DD 20 12                                jr      nz, .NoECM
 467+ C4DF              .FireECM:               SetMemToN      PlayerECMActiveCount, ECMCounterMax
 467+ C4DF 3E 80       >                        ld      a,ECMCounterMax
 467+ C4E1 32 21 80    >                        ld      (PlayerECMActiveCount),a
 468+ C4E4 3A 86 7E                             ld      a,(ECMCountDown)
 469+ C4E7                                      JumpIfAGTENusng ECMCounterMax, .NoECM
 469+ C4E7 FE 80       >                        cp     ECMCounterMax
 469+ C4E9 D2 F1 C4    >                        jp		nc,.NoECM
 470+ C4EC                                      SetMemToN      ECMCountDown, ECMCounterMax
 470+ C4EC 3E 80       >                        ld      a,ECMCounterMax
 470+ C4EE 32 86 7E    >                        ld      (ECMCountDown),a
 471+ C4F1 C9           .NoECM:                 ret
 472+ C4F2
 473+ C4F2
 474+ C4F2
 475+ C4F2
 476+ C4F2
 477+ C4F2
 478+ C4F2
# file closed: ./Views/Front_View.asm
 990  C4F2                                  DISPLAY "Bank ",BankFrontView," - Bytes free ",/D, $2000 - ($-ViewFrontAddr), " - BankFrontView"
 991  C4F2                                  ASSERT $-ViewFrontAddr <8912 , Bank code leaks over 8K boundary
 992  C4F2              ; Bank 63  ------------------------------------------------------------------------------------------------------------------------
 993  C4F2                                  SLOT    MenuStatusAddr
 994  C4F2                                  PAGE    BankMenuStatus
 995  C4F2                                  ORG     MenuStatusAddr
 996  C000                                  INCLUDE "./Menus/status_menu.asm"
# file opened: ./Menus/status_menu.asm
   1+ C000 53 74 61 74  status_page_marker  DB "Status      PG63"
   1+ C004 75 73 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 36 33
   2+ C010
   3+ C010 43 4F 4D 4D  txt_stat_commander 			DB "COMMANDER",0
   3+ C014 41 4E 44 45
   3+ C018 52 00
   4+ C01A 49 4E 56 45  txt_stat_inventory 			DB "INVENTORY",0
   4+ C01E 4E 54 4F 52
   4+ C022 59 00
   5+ C024 50 72 65 73  txt_stat_present_system		DB "Present System   :",0
   5+ C028 65 6E 74 20
   5+ C02C 53 79 73 74
   5+ C030 65 6D 20 20
   5+ C034 20 3A 00
   6+ C037 48 79 70 65  txt_stat_hyperspace_system	DB "Hyperspace System:",0
   6+ C03B 72 73 70 61
   6+ C03F 63 65 20 53
   6+ C043 79 73 74 65
   6+ C047 6D 3A 00
   7+ C04A 43 6F 6E 64  txt_stat_condition			DB "Condition   :",0
   7+ C04E 69 74 69 6F
   7+ C052 6E 20 20 20
   7+ C056 3A 00
   8+ C058 46 75 65 6C  txt_stat_fuel				DB "Fuel        :",0
   8+ C05C 20 20 20 20
   8+ C060 20 20 20 20
   8+ C064 3A 00
   9+ C066 43 61 73 68  txt_stat_cash				DB "Cash        :",0
   9+ C06A 20 20 20 20
   9+ C06E 20 20 20 20
   9+ C072 3A 00
  10+ C074 4C 65 67 61  txt_stat_legal_status		DB "Legal Status:",0
  10+ C078 6C 20 53 74
  10+ C07C 61 74 75 73
  10+ C080 3A 00
  11+ C082 52 61 74 69  txt_stat_rating				DB "Rating      :",0
  11+ C086 6E 67 20 20
  11+ C08A 20 20 20 20
  11+ C08E 3A 00
  12+ C090 45 51 55 49  txt_stat_equipment			DB "EQUIPMENT:",0
  12+ C094 50 4D 45 4E
  12+ C098 54 3A 00
  13+ C09B
  14+ C09B 30 30 2E 30  txt_stat_fuel_level			DB "00.0 Light Years",0
  14+ C09F 20 4C 69 67
  14+ C0A3 68 74 20 59
  14+ C0A7 65 61 72 73
  14+ C0AB 00
  15+ C0AC 58 58 58 58  txt_stat_cash_amount		DB "XXXXXXXXXX",0
  15+ C0B0 58 58 58 58
  15+ C0B4 58 58 00
  16+ C0B7 2E           txt_stat_cash_decimal       DB "."
  17+ C0B8 58 20 43 72  txt_stat_cash_fraction      DB "X Cr",0
  17+ C0BC 00
  18+ C0BD
  19+ C0BD 40 02 10 C0  status_boiler_text		DW $0240,txt_stat_commander
  20+ C0C1 90 02 F8 81  						DW $0290,CommanderName
  21+ C0C5 08 0B 24 C0  						DW $0B08,txt_stat_present_system
  22+ C0C9 08 13 37 C0  						DW $1308,txt_stat_hyperspace_system
  23+ C0CD 08 1B 4A C0  						DW $1B08,txt_stat_condition
  24+ C0D1 08 23 58 C0  						DW $2308,txt_stat_fuel
  25+ C0D5 08 2B 66 C0  						DW $2B08,txt_stat_cash
  26+ C0D9 08 33 74 C0  						DW $3308,txt_stat_legal_status
  27+ C0DD 08 3B 82 C0  						DW $3B08,txt_stat_rating
  28+ C0E1 08 4B 90 C0  						DW $4B08,txt_stat_equipment
  29+ C0E5
  30+ C0E5 00 00        equipment_cursor		DW  $0000
  31+ C0E7              present_position		equ	$0B98
  32+ C0E7              hyperspace_position		equ	$1398
  33+ C0E7              condition_position		equ	$1B70
  34+ C0E7              fuel_position			equ	$2370
  35+ C0E7              cash_position			equ	$2B70
  36+ C0E7              legal_status_position	equ $3370
  37+ C0E7              rank_position			equ $3B70
  38+ C0E7              equipment_position		equ $5340
  39+ C0E7              equipment_position2		equ $5378
  40+ C0E7              equipmax_row			equ $FF
  41+ C0E7
  42+ C0E7 00           STAT_selected_row       DB 0
  43+ C0E8 00           STAT_current_topItem    DB 0
  44+ C0E9 00           STAT_current_end        DB 0
  45+ C0EA              STAT_buffer_rows         EQU     128
  46+ C0EA              STAT_buffer_row_len      EQU     24
  47+ C0EA              STAT_eqip_window_len    EQU 10
  48+ C0EA              STAT_display_buff_len   EQU     STAT_buffer_rows *   STAT_buffer_row_len
  49+ C0EA 00 00 00...  STAT_display_buffer:    DS      STAT_display_buff_len                     ; maxium of 128 items can be coded for
  50+ CCEA              STAT_position			equ $5840
  51+ CCEA 00 00 00...  STAT_cash_amount    	DS 10
  52+ CCF4 20 43 72 00  STAT_cash_UoM           DB " Cr",0
  53+ CCF8
  54+ CCF8 00 00 00...  stat_present_name       DS  30
  55+ CD16 00                                   DB  0
  56+ CD17 00 00 00...  stat_target_name        DS  30
  57+ CD35 00                                   DB  0
  58+ CD36
  59+ CD36 21 7F E8     stat_copy_to_name:      ld      hl,GalaxyExpandedName
  60+ CD39 01 1E 00                             ld      bc,30
  61+ CD3C ED B0                                ldir
  62+ CD3E C9                                   ret
  63+ CD3F
  64+ CD3F              ;----------------------------------------------------------------------------------------------------------------------------------
  65+ CD3F              STAT_print_boiler_text: INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++CD3F
   2++CD3F              ;">print_boilder_text hl = text structure, b = message count"
   3++CD3F C5           .BoilerTextLoop:        push		bc			; Save Message Count loop value
   4++CD40 4E                                   ld			c,(hl)		; Get Row into b
   5++CD41 23                                   inc			hl
   6++CD42 46                                   ld			b,(hl)		; Get Col into b
   7++CD43 23                                   inc			hl
   8++CD44 5E                                   ld			e,(hl)		; Get text address Lo into E
   9++CD45 23                                   inc			hl
  10++CD46 56                                   ld			d,(hl)		; Get text address Hi into E
  11++CD47 23                                   inc			hl
  12++CD48 E5                                   push		hl			; Save present HL to stack as this is the address for the next message
  13++CD49 EB                                   ex			de,hl		; now hl = address of text data
  14++CD4A 1E FF                                ld			e,txt_status_colour
  15++CD4C C5                                   push		bc
  16++CD4D D1                                   pop			de
  17++CD4E                                      MMUSelectLayer1
  17++CD4E ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  18++CD52 CD D7 E0                             call		l1_print_at
  19++CD55 E1                                   pop			hl
  20++CD56 C1                                   pop			bc
  21++CD57 10 E6                                djnz		.BoilerTextLoop
  22++CD59 C9                                   ret
  23++CD5A
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  66+ CD5A              ;----------------------------------------------------------------------------------------------------------------------------------
  67+ CD5A DD 22 FE CD  STAT_DispDEIXtoIY:      ld (.STATclcn32z),ix
  68+ CD5E ED 53 00 CE                          ld (.STATclcn32zIX),de
  69+ CD62 DD 21 FA CD                          ld ix,.STATclcn32t+36
  70+ CD66 06 09                                ld b,9
  71+ CD68 0E 00                                ld c,0
  72+ CD6A 3E 30        .STATclcn321:           ld a,'0'
  73+ CD6C B7                                   or a
  74+ CD6D DD 5E 00     .STATclcn322:           ld e,(ix+0)
  75+ CD70 DD 56 01                             ld d,(ix+1)
  76+ CD73 2A FE CD                             ld hl,(.STATclcn32z)
  77+ CD76 ED 52                                sbc hl,de
  78+ CD78 22 FE CD                             ld (.STATclcn32z),hl
  79+ CD7B DD 5E 02                             ld e,(ix+2)
  80+ CD7E DD 56 03                             ld d,(ix+3)
  81+ CD81 2A 00 CE                             ld hl,(.STATclcn32zIX)
  82+ CD84 ED 52                                sbc hl,de
  83+ CD86 22 00 CE                             ld (.STATclcn32zIX),hl
  84+ CD89 38 04                                jr c,.STATclcn325
  85+ CD8B 0C                                   inc c
  86+ CD8C 3C                                   inc a
  87+ CD8D 18 DE                                jr .STATclcn322
  88+ CD8F DD 5E 00     .STATclcn325:           ld e,(ix+0)
  89+ CD92 DD 56 01                             ld d,(ix+1)
  90+ CD95 2A FE CD                             ld hl,(.STATclcn32z)
  91+ CD98 19                                   add hl,de
  92+ CD99 22 FE CD                             ld (.STATclcn32z),hl
  93+ CD9C DD 5E 02                             ld e,(ix+2)
  94+ CD9F DD 56 03                             ld d,(ix+3)
  95+ CDA2 2A 00 CE                             ld hl,(.STATclcn32zIX)
  96+ CDA5 ED 5A                                adc hl,de
  97+ CDA7 22 00 CE                             ld (.STATclcn32zIX),hl
  98+ CDAA 11 FC FF                             ld de,-4
  99+ CDAD DD 19                                add ix,de
 100+ CDAF 0C                                   inc c
 101+ CDB0 0D                                   dec c
 102+ CDB1 28 05                                jr z,.STATclcn323
 103+ CDB3 FD 77 00                             ld (iy+0),a
 104+ CDB6 FD 23                                inc iy
 105+ CDB8 10 B0        .STATclcn323:           djnz .STATclcn321
 106+ CDBA 3A FE CD                             ld a,(.STATclcn32z)
 107+ CDBD C6 30                                add A,'0'
 108+ CDBF FD 77 00                             ld (iy+0),a
 109+ CDC2 FD 36 02 00                          ld (iy+2),0
 110+ CDC6 FD 7E 00                             ld      a,(IY+0)
 111+ CDC9 FD 77 01                             ld      (IY+1),a
 112+ CDCC 3E 2E                                ld      a,"."
 113+ CDCE FD 77 00                             ld      (IY+0),a
 114+ CDD1 FD 23                                inc     IY
 115+ CDD3 FD 23                                inc     IY
 116+ CDD5 C9                                   ret
 117+ CDD6 01 00 00 00  .STATclcn32t            dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 117+ CDDA 0A 00 00 00
 117+ CDDE 64 00 00 00
 117+ CDE2 E8 03 00 00
 117+ CDE6 10 27 00 00
 118+ CDEA A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 118+ CDEE 40 42 0F 00
 118+ CDF2 80 96 98 00
 118+ CDF6 00 E1 F5 05
 118+ CDFA 00 CA 9A 3B
 119+ CDFE 00 00        .STATclcn32z            ds 2
 120+ CE00 00 00        .STATclcn32zIX          ds 2
 121+ CE02              ;----------------------------------------------------------------------------------------------------------------------------------
 122+ CE02 2A D1 84     STAT_GetCash:           ld		hl,(Cash+2)
 123+ CE05 EB                                   ex      de,hl
 124+ CE06 DD 2A CF 84                          ld      ix,(Cash)
 125+ CE0A FD 21 EA CC                          ld		iy,STAT_cash_amount
 126+ CE0E CD 5A CD                             call 	STAT_DispDEIXtoIY
 127+ CE11 FD E5                                push    iy
 128+ CE13 D1                                   pop     de
 129+ CE14 21 F4 CC                             ld      hl,STAT_cash_UoM
 130+ CE17 01 04 00                             ld      bc,4
 131+ CE1A ED B0                                ldir
 132+ CE1C C9                                   ret
 133+ CE1D              ;----------------------------------------------------------------------------------------------------------------------------------
 134+ CE1D 7E           STAT_expand_word:       ld      a,(hl)
 135+ CE1E FE 00                                cp      0
 136+ CE20 C8                                   ret     z
 137+ CE21 12                                   ld      (de),a
 138+ CE22 23                                   inc     hl
 139+ CE23 13                                   inc     de
 140+ CE24 18 F7                                jr      STAT_expand_word
 141+ CE26
 142+ CE26              ; hl = list of words
 143+ CE26              ; de = adress to expand to
 144+ CE26 7E           STAT_expand_name:       ld      a,(hl)
 145+ CE27 47                                   ld      b,a
 146+ CE28 23                                   inc     hl
 147+ CE29 7E                                   ld      a,(hl)              ; its a 16 bit
 148+ CE2A 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 149+ CE2B B0                                   or      b
 150+ CE2C 20 01                                jr      nz,.MoreToDo
 151+ CE2E              ;                        ld      (de),a we dont want the null marker now
 152+ CE2E C9                                   ret
 153+ CE2F E5 D5        .MoreToDo:              push    hl,,de
 154+ CE31 7E                                   ld      a,(hl)              ; bodge for now no optimise
 155+ CE32 5F                                   ld      e,a
 156+ CE33 23                                   inc     hl
 157+ CE34 7E                                   ld      a,(hl)
 158+ CE35 57                                   ld      d,a
 159+ CE36 EB                                   ex      hl,de               ; hl is now Word... address
 160+ CE37 D1                                   pop     de                  ; de back to pointer to buffer
 161+ CE38 CD 1D CE     .ProcessWord:           call    STAT_expand_word
 162+ CE3B 3E 20                                ld      a," "               ; speculative space
 163+ CE3D 12                                   ld      (de),a
 164+ CE3E 13                                   inc     de
 165+ CE3F E1                                   pop     hl                  ; get string pointer back
 166+ CE40 23                                   inc     hl
 167+ CE41 23                                   inc     hl                  ; on to next word
 168+ CE42 18 E2                                jr      STAT_expand_name
 169+ CE44
 170+ CE44              STAT_First_Item         EQU     EQ_CARGO_BAY
 171+ CE44 3A 00 80     STAT_buffer_list:       ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 172+ CE47                                      MMUSelectGalaxyA
 172+ CE47 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 173+ CE4A 21 EA C0                             ld      hl,STAT_display_buffer                      ; hl - target buffer
 174+ CE4D 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 175+ CE4F 11 00 0C                             ld      de, STAT_display_buff_len
 176+ CE52 CD 04 7E                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 177+ CE55 21 01 C1                             ld      hl,STAT_display_buffer+STAT_buffer_row_len-1
 178+ CE58 11 18 00                             ld      de,STAT_buffer_row_len
 179+ CE5B 06 80                                ld      b,STAT_buffer_rows
 180+ CE5D                                      ZeroA
 180+ CE5D AF          >                        xor a
 181+ CE5E 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 182+ CE5F 19                                   add     hl,de
 183+ CE60 10 FC                                djnz    .EoLLoop
 184+ CE62 DD 21 F0 84                          ld      ix,EquipmentFitted + STAT_First_Item        ; ix = equipment master table, ignore missiles
 185+ CE66 FD 21 EA C0                          ld      iy,STAT_display_buffer                      ; iy = target buffer
 186+ CE6A 06 18                                ld      b,EQ_ITEM_COUNT - EQ_CARGO_BAY              ; we do not include Fuel and Missile counts
 187+ CE6C 0E 00                                ld      c,0                                         ; Current Row
 188+ CE6E 1E 02                                ld      e,STAT_First_Item
 189+ CE70 DD 7E 00     .ProcessRow:            ld      a,(ix+0)                                    ; Do we own one?
 190+ CE73                                      JumpIfAIsZero .NotFitted                            ; optimised check for EquipmentItemNotFitted
 190+ CE73 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 190+ CE74 CA 98 CE    >                        jp	    z, .NotFitted
 191+ CE77 D5 FD E5 DD  .OwnItem:               push    de,, iy,, ix,, bc
 191+ CE7B E5 C5
 192+ CE7D 21 06 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 193+ CE80 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length, e = current equip row
 194+ CE82 ED 30                                mul
 195+ CE84 19                                   add     hl,de                                       ; hl = dword list of work pointers
 196+ CE85 FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 197+ CE89 CD 26 CE                             call    STAT_expand_name                           ; expand name
 198+ CE8C C1 DD E1 FD                          pop     iy,,ix,,bc
 198+ CE90 E1
 199+ CE91 11 18 00                             ld      de,STAT_buffer_row_len
 200+ CE94 FD 19                                add     iy,de                                       ; now iy = start of next column
 201+ CE96 D1                                   pop     de
 202+ CE97 0C                                   inc     c
 203+ CE98              .NotFitted:
 204+ CE98 DD 23        .DoneFittedCheck:       inc     ix
 205+ CE9A 1C                                   inc     e
 206+ CE9B 10 D3                                djnz    .ProcessRow
 207+ CE9D 79           .DoneProcess:           ld      a,c
 208+ CE9E 32 E9 C0                             ld      (STAT_current_end),a
 209+ CEA1 C9                                   ret
 210+ CEA2
 211+ CEA2 06 0A        draw_STAT_boilertext:   ld		b,10
 212+ CEA4 21 BD C0                             ld		hl,status_boiler_text
 213+ CEA7 CD 3F CD                             call	STAT_print_boiler_text
 214+ CEAA C9                                   ret
 215+ CEAB
 216+ CEAB              GetStatFuelLevel:       INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++CEAB
   2++CEAB
   3++CEAB 3A D3 84     	ld		a,(Fuel)
   4++CEAE 11 D5 AF     	ld		de,txt_fuel_level
   5++CEB1 0E 9C        	ld	c, -100
   6++CEB3 CD BD CE     	call	.Num1
   7++CEB6 0E F6        	ld	c,-10
   8++CEB8 CD BD CE     	call	.Num1
   9++CEBB 0E FF        	ld	c,-1
  10++CEBD              .Num1:
  11++CEBD 06 2F        	ld	b,'0'-1
  12++CEBF              .Num2:
  13++CEBF 04           	inc		b
  14++CEC0 81           	add		a,c
  15++CEC1 38 FC        	jr		c,.Num2
  16++CEC3 91           	sub 	c
  17++CEC4 C5           	push	bc
  18++CEC5 F5           	push	af
  19++CEC6 79           	ld		a,c
  20++CEC7 FE FF        	cp		-1
  21++CEC9 CC D2 CE     	call	z,.InsertDot
  22++CECC 78           	ld		a,b
  23++CECD 12           	ld		(de),a
  24++CECE 13           	inc		de
  25++CECF F1           	pop		af
  26++CED0 C1           	pop		bc
  27++CED1 C9           	ret
  28++CED2              .InsertDot:
  29++CED2 3E 2E        	ld		a,'.'
  30++CED4 12           	ld		(de),a
  31++CED5 13           	inc		de
  32++CED6 C9           	ret
  33++CED7
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
 217+ CED7
 218+ CED7              ;----------------------------------------------------------------------------------------------------------------------------------
 219+ CED7 01 01 01     draw_STAT_maintext:    	ld		bc,$0101
 220+ CEDA 11 FD BE                             ld		de,$BEFD
 221+ CEDD 3E C0                                ld		a,$C0
 222+ CEDF                                      MMUSelectLayer2
 222+ CEDF ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 223+ CEE3 CD F9 E3                             call	l2_draw_box
 224+ CEE6 CD A2 CE                             call    draw_STAT_boilertext
 225+ CEE9 3A 00 80     .PresentSystem:         ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 226+ CEEC                                      MMUSelectGalaxyA
 226+ CEEC ED 92 57    >                     nextreg GalaxyDataMMU,     a
 227+ CEEF ED 4B 13 80                          ld      bc, (PresentSystemX)
 228+ CEF3 CD BB FA                             call    galaxy_name_at_bc
 229+ CEF6 11 F8 CC                             ld      de,stat_present_name
 230+ CEF9 CD 36 CD                             call    stat_copy_to_name
 230+ CEFC
 231+ CEFC 01 98 0B                             ld      bc,present_position
 232+ CEFF 21 F8 CC                             ld      hl,stat_present_name
 233+ CF02                                      MMUSelectLayer2
 233+ CF02 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 234+ CF06 1E FF                                ld      e,txt_status_colour
 235+ CF08 CD 5E E3                             call    l2_print_at
 236+ CF0B 3A 00 80     .HyperspaceSystem:      ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 237+ CF0E                                      MMUSelectGalaxyA
 237+ CF0E ED 92 57    >                     nextreg GalaxyDataMMU,     a
 238+ CF11 ED 4B 15 80                          ld      bc, (TargetSystemX)
 239+ CF15 CD BB FA                             call    galaxy_name_at_bc
 240+ CF18 11 17 CD                             ld      de,stat_target_name
 241+ CF1B CD 36 CD                             call    stat_copy_to_name
 241+ CF1E
 242+ CF1E 01 98 13                             ld      bc,hyperspace_position
 243+ CF21 21 17 CD                             ld      hl,stat_target_name
 244+ CF24                                      MMUSelectLayer2
 244+ CF24 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 245+ CF28 1E FF                                ld      e,txt_status_colour
 246+ CF2A CD 5E E3                             call    l2_print_at
 247+ CF2D CD E2 CF     .StatusText:	        call	get_cmdr_condition
 248+ CF30 21 3F 87                             ld		hl, ConditionNameIdx
 249+ CF33 CD 57 88                             call	getTableText
 250+ CF36 01 70 1B                             ld		bc,condition_position
 251+ CF39                                      MMUSelectLayer2
 251+ CF39 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 252+ CF3D 1E FF                                ld      e,txt_status_colour
 253+ CF3F CD 5E E3                             call    l2_print_at
 254+ CF42 CD AB CE     .DisplayFuel:           call	GetStatFuelLevel
 255+ CF45 21 D5 AF                             ld		hl, txt_fuel_level
 256+ CF48 7E                                   ld		a,(hl)
 257+ CF49 FE 30                                cp		'0'
 258+ CF4B 20 01                                jr		nz,.PrintFuel
 259+ CF4D 23           .SkipLeadingZero:	    inc		hl
 260+ CF4E 01 70 23     .PrintFuel:             ld		bc,fuel_position
 261+ CF51                                      MMUSelectLayer2
 261+ CF51 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 262+ CF55 1E FF                                ld      e,txt_status_colour
 263+ CF57 CD 5E E3                             call    l2_print_at
 264+ CF5A CD 02 CE     .DisplayCash:           call	STAT_GetCash
 265+ CF5D 01 70 2B                             ld		bc,cash_position
 266+ CF60 21 EA CC                             ld		hl,STAT_cash_amount
 267+ CF63                                      MMUSelectLayer2
 267+ CF63 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 268+ CF67 1E FF                                ld      e,txt_status_colour
 269+ CF69 CD 5E E3                             call    l2_print_at
 270+ CF6C 3A 22 80     .PrintLegalStatus:      ld		a,(FugitiveInnocentStatus)
 271+ CF6F FE 00                                cp		0
 272+ CF71 20 05                                jr		nz,.Naughty
 273+ CF73 21 36 89                             ld		hl,WordClean
 274+ CF76 18 0C                                jr		.DisplayLegalStatus
 275+ CF78 FE 32        .Naughty:               cp		50
 276+ CF7A 38 05                                jr		c,.JustOffender
 277+ CF7C 21 45 89     .VeryNaughty:           ld		hl,WordFugitive
 278+ CF7F 18 03                                jr		.DisplayLegalStatus
 279+ CF81 21 3C 89     .JustOffender:          ld		hl,WordOffender
 280+ CF84 01 70 33     .DisplayLegalStatus:    ld		bc,legal_status_position
 281+ CF87                                      MMUSelectLayer2
 281+ CF87 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 282+ CF8B 1E FF                                ld      e,txt_status_colour
 283+ CF8D CD 5E E3                             call    l2_print_at
 284+ CF90 3A 25 80     .DisplayRating:         ld      a,(CurrentRank)
 285+ CF93                                      ; now cached ld		de,(KillTally)
 286+ CF93                                      ; now cached call	getRankIndex
 287+ CF93 21 41 88                             ld		hl, RankingNameIdx
 288+ CF96 CD 57 88                             call	getTableText
 289+ CF99 01 70 3B                             ld		bc,rank_position
 290+ CF9C                                      MMUSelectLayer2
 290+ CF9C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 291+ CFA0 1E FF                                ld      e,txt_status_colour
 292+ CFA2 CD 5E E3                             call    l2_print_at
 293+ CFA5                                      ;break
 294+ CFA5
 295+ CFA5 C9                                   ret
 296+ CFA6
 297+ CFA6
 298+ CFA6              draw_STAT_items:        MMUSelectLayer1
 298+ CFA6 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 299+ CFAA CD 8F E0                             call    l1_cls
 300+ CFAD                                      ; add in all the status stuff later
 301+ CFAD 3A E8 C0                             ld      a,(STAT_current_topItem)                    ; Move to correct top of stat list item
 302+ CFB0 16 18                                ld      d,STAT_buffer_row_len                       ; so de = offset to first item in display
 303+ CFB2 5F                                   ld      e,a
 304+ CFB3 ED 30                                mul
 305+ CFB5 21 EA C0                             ld      hl,STAT_display_buffer                      ; hl = pointer to first item in display
 306+ CFB8 19                                   add     hl,de                                       ;
 307+ CFB9 3A E8 C0                             ld      a,(STAT_current_topItem)                    ; set a to number of lines to display
 308+ CFBC 47                                   ld      b,a                                         ;
 309+ CFBD 3A E9 C0                             ld      a,(STAT_current_end)                        ;
 310+ CFC0 90                                   sub     b                                           ;
 311+ CFC1                                      JumpIfALTNusng  STAT_eqip_window_len, .FillScreen   ; if there are enough then just do a screen fill
 311+ CFC1 FE 0A       >                        cp      STAT_eqip_window_len
 311+ CFC3 DA CA CF    >                        jp		c, .FillScreen
 312+ CFC6 06 0A        .JustWindowing:         ld      b,STAT_eqip_window_len                      ; if its more than a screen then window
 313+ CFC8 18 01                                jr      .ReadyToPrint
 314+ CFCA 47           .FillScreen:            ld      b,a                                         ; b = the mumber of rows to display
 315+ CFCB 11 40 58     .ReadyToPrint:          ld      de,STAT_position
 316+ CFCE D5 E5 C5     .DrawARow:              push    de,, hl,, bc                                ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 317+ CFD1 CD D7 E0                             call    l1_print_at
 317+ CFD4
 318+ CFD4 C1 E1                                pop     hl,,bc                                      ; get mesage addr back and move down one line
 319+ CFD6 11 18 00                             ld      de,STAT_buffer_row_len
 320+ CFD9 19                                   add     hl,de
 321+ CFDA D1                                   pop     de                                           ; get output row back
 322+ CFDB 3E 08                                ld      a,8
 323+ CFDD 82                                   add     a,d
 324+ CFDE 57                                   ld      d,a
 325+ CFDF 10 ED                                djnz    .DrawARow
 326+ CFE1 C9                                   ret
 327+ CFE2
 328+ CFE2              ;----------------------------------------------------------------------------------------------------------------------------------
 329+ CFE2
 330+ CFE2 3A 33 81     get_cmdr_condition:     ld			a,(DockedFlag)
 331+ CFE5 FE FF                                cp			StatePlayerDocked
 332+ CFE7 28 17                                jr			z,.PlayerIsDocked
 333+ CFE9              .PlayerNotDocked:	    ReturnIfMemTrue    SpaceStationSafeZone
 333+ CFE9 3A 19 80    >                        ld      a,(SpaceStationSafeZone)
 333+ CFEC A7          >                        and     a
 333+ CFED C8          >                        ret     z
 334+ CFEE CD 91 84                             call        AreShipsPresent
 335+ CFF1 38 03                                jr          c,.NoShipsAround
 336+ CFF3 3E 01                                ld          a,1
 337+ CFF5 C9                                   ret
 338+ CFF6 3A F4 81     .NoShipsAround:         ld			a,(PlayerEnergy)
 339+ CFF9 FE 80                                cp			$80
 340+ CFFB 3E 01                                ld          a,1
 341+ CFFD CE 01                                adc         1                                       ; add 1 + carry, if a < 128 then carry set so goes red
 342+ CFFF C9                                   ret
 343+ D000 AF           .PlayerIsDocked:        xor			a
 344+ D001 C9                                   ret
 345+ D002
 346+ D002              draw_status_menu:       InitNoDoubleBuffer
 346+ D002             >                            MMUSelectLayer1
 346+ D002 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 346+ D006 CD 8F E0    >                            call	l1_cls
 346+ D009 3E 07       >                            ld		a,7
 346+ D00B CD AA E0    >                            call	l1_attr_cls_to_a
 346+ D00E             >                            MMUSelectLayer2
 346+ D00E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 346+ D012 CD 0A E0    >                            call    asm_l2_double_buffer_off
 346+ D015 CD 0E E2    >                            call	l2_cls	; Get some space
 346+ D018             >                            MMUSelectSpriteBank
 346+ D018 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 346+ D01C CD 6E E5    >                            call    sprite_cls_cursors
 347+ D01F 3E 08                                ld		a,8
 348+ D021 32 7E 7F                             ld		(MenuIdMax),a
 349+ D024 01 01 01     .Drawbox:               ld		bc,$0101
 350+ D027 11 FD BE                             ld		de,$BEFD
 351+ D02A 3E C0                                ld		a,$C0
 352+ D02C                                      MMUSelectLayer2
 352+ D02C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 353+ D030 CD F9 E3                             call	l2_draw_box
 354+ D033 01 01 0A                             ld		bc,$0A01
 355+ D036 11 C0 FE                             ld		de,$FEC0
 356+ D039                                      SetMemToN STAT_current_topItem, 0
 356+ D039 3E 00       >                        ld      a,0
 356+ D03B 32 E8 C0    >                        ld      (STAT_current_topItem),a
 357+ D03E CD 84 E4                             call	l2_draw_horz_line
 358+ D041 CD 44 CE     .equipment              call    STAT_buffer_list
 359+ D044 CD A6 CF                             call    draw_STAT_items
 360+ D047 CD D7 CE                             call    draw_STAT_maintext
 361+ D04A C9                                   ret
 362+ D04B
 363+ D04B              ;----------------------------------------------------------------------------------------------------------------------------------
 364+ D04B              ; Handles all the input whilst in the market menu
 365+ D04B              loop_STAT_menu:         MacroIsKeyPressed c_Pressed_CursorUp
 365+ D04B 3E 4A       >                        ld      a,c_Pressed_CursorUp
 365+ D04D             >                        MMUSelectKeyboard
 365+ D04D ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 365+ D051 CD A2 E1    >                        call    is_key_pressed
 366+ D054 CC 64 D0                             call    z,STAT_UpPressed
 367+ D057                                      MacroIsKeyPressed c_Pressed_CursorDown
 367+ D057 3E 4C       >                        ld      a,c_Pressed_CursorDown
 367+ D059             >                        MMUSelectKeyboard
 367+ D059 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 367+ D05D CD A2 E1    >                        call    is_key_pressed
 368+ D060 CC 79 D0                             call    z,STAT_DownPressed
 369+ D063 C9                                   ret
 370+ D064
 371+ D064              ;----------------------------------------------------------------------------------------------------------------------------------
 372+ D064 AF           STAT_UpPressed:         xor     a
 373+ D065 32 E7 C0                             ld      (STAT_selected_row),a
 374+ D068 3A E8 C0     .check_scroll_up:       ld      a,(STAT_current_topItem)
 375+ D06B FE 00                                cp      0
 376+ D06D C8                                   ret     z
 377+ D06E 3D                                   dec     a           ; chjange later to buffering step back 1
 378+ D06F 32 E8 C0                             ld      (STAT_current_topItem),a
 379+ D072 CD A6 CF                             call    draw_STAT_items
 380+ D075 CD A2 CE                             call    draw_STAT_boilertext
 381+ D078 C9                                   ret
 382+ D079              ;----------------------------------------------------------------------------------------------------------------------------------
 383+ D079 3E 09        STAT_DownPressed:       ld      a,STAT_eqip_window_len-1
 384+ D07B 32 E7 C0                             ld      (STAT_selected_row),a
 385+ D07E 3A E9 C0                             ld      a,(STAT_current_end)
 386+ D081 47                                   ld      b,a                             ; This check is if the current list is < one screen
 387+ D082 05                                   dec     b
 388+ D083 3A E7 C0                             ld      a,(STAT_selected_row)
 389+ D086 B8                                   cp      b
 390+ D087 C8                                   ret     z
 391+ D088 FE 09                                cp      STAT_eqip_window_len-1
 392+ D08A 28 05                                jr      z, .check_scroll_down
 393+ D08C 21 E7 C0                             ld      hl,STAT_selected_row
 394+ D08F 34                                   inc     (hl)
 395+ D090 C9                                   ret
 396+ D091 47           .check_scroll_down:     ld      b,a
 397+ D092 3A E8 C0                             ld      a,(STAT_current_topItem)
 398+ D095 80                                   add     b
 399+ D096 3C                                   inc     a
 400+ D097 21 E9 C0                             ld      hl,STAT_current_end
 401+ D09A                                      ReturnIfAGTEusng      (hl)
 401+ D09A BE          >                        cp    (hl)
 401+ D09B D0          >                        ret	 nc
 402+ D09C 21 E8 C0     .can_scroll_down:       ld      hl,STAT_current_topItem
 403+ D09F 34                                   inc     (hl)
 404+ D0A0 CD A6 CF                             call    draw_STAT_items
 405+ D0A3 CD A2 CE                             call    draw_STAT_boilertext
 406+ D0A6 C9                                   ret
 407+ D0A7
# file closed: ./Menus/status_menu.asm
 997  D0A7                                  DISPLAY "Bank ",BankMenuStatus," - Bytes free ",/D, $2000 - ($-MenuStatusAddr), " - BankMenuStatus"
 998  D0A7                                  ASSERT $-MenuStatusAddr <8912 , Bank code leaks over 8K boundary
 999  D0A7              ; Bank 64  ------------------------------------------------------------------------------------------------------------------------
1000  D0A7                                  SLOT    MenuEquipSAddr
1001  D0A7                                  PAGE    BankMenuEquipS
1002  D0A7                                  ORG     MenuEquipSAddr
1003  C000                                  INCLUDE "./Menus/equip_ship_menu.asm"
# file opened: ./Menus/equip_ship_menu.asm
   1+ C000 45 71 75 69  eqshp_prices_page_marker  DB "EquipShipPG63"
   1+ C004 70 53 68 69
   1+ C008 70 50 47 36
   1+ C00C 33
   2+ C00D 50 02 19 C0  eqshp_boiler_text		DW $0250,eqship_title
   3+ C011 20 02 7C 8F  						DW $0220,name_expanded
   4+ C015 08 B0 24 C0                          DW $B008,eqship_cash
   5+ C019
   6+ C019 45 71 75 69  eqship_title            DB "Equip Ship",0
   6+ C01D 70 20 53 68
   6+ C021 69 70 00
   7+ C024 43 61 73 68  eqship_cash				DB "Cash : ",0
   7+ C028 20 3A 20 00
   8+ C02C
   9+ C02C 30 30 2E 30  txt_eqshp_amount	    DB "00.0",0
   9+ C030 00
  10+ C031 39 39 39 00  txt_eqshp_quantity      DB "999",0
  11+ C035 39 39 39 00  txt_eqshp_cargo         DB "999",0
  12+ C039 00 00        eqshp_cursor			DW  $0000
  13+ C03B              eqshp_position			equ $1808
  14+ C03B              eqshp_uom				equ	$68
  15+ C03B              eqshp_price 			equ $88
  16+ C03B              eqshp_Quantity			equ	$B0
  17+ C03B              eqshp_Cargo             equ $E0
  18+ C03B              eqshp_UomOffset		    equ 46
  19+ C03B 20 20 20 20  eqshp_blank_line        DB "                                ",0
  19+ C03F 20 20 20 20
  19+ C043 20 20 20 20
  19+ C047 20 20 20 20
  19+ C04B 20 20 20 20
  19+ C04F 20 20 20 20
  19+ C053 20 20 20 20
  19+ C057 20 20 20 20
  19+ C05B 00
  20+ C05C
  21+ C05C 00 00 00...  eqshp_item_price        DS 20
  22+ C070
  23+ C070              eqshp_cash_position     equ $B048
  24+ C070 00 00 00...  eqshp_cash_amount		DS 20
  25+ C084 20 43 72 20  eqshp_cash_UoM          DB " Cr       ",0
  25+ C088 20 20 20 20
  25+ C08C 20 20 00
  26+ C08F
  27+ C08F 00           eqshp_selected_row      DB 0
  28+ C090 00           eqshp_current_topItem   DB 0
  29+ C091 00           eqshp_current_end       DB 0
  30+ C092              eqship_buffer_rows      EQU     128
  31+ C092              eqship_buffer_row_len   EQU      32
  32+ C092              eqship_display_buff_len EQU     eqship_buffer_rows *   eqship_buffer_row_len
  33+ C092 00 00 00...  eqship_display_buffer:  DS      eqship_display_buff_len                     ; maxium of 128 items can be coded for
  34+ D092 00 00 00...  eqship_buyable_buffer:  DS      128
  35+ D112              eqship_buffer_cash_col: EQU     21
  36+ D112              eqship_fitted_module:   EQU     29
  37+ D112              ;----------------------------------------------------------------------------------------------------------------------------------
  38+ D112 3A 8F C0     eqshp_highlight_row:    ld      a,(eqshp_selected_row)
  39+ D115 C6 03                                add     a,3
  40+ D117 57                                   ld      d,a
  41+ D118 1E 56                                ld      e,L1InvHighlight
  42+ D11A                                      MMUSelectLayer1
  42+ D11A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  43+ D11E CD 3F E0                             call    l1_hilight_row
  44+ D121 C9                                   ret
  45+ D122              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ D122 3A 8F C0     eqshp_lowlight_row      ld      a,(eqshp_selected_row)
  47+ D125 C6 03                                add     a,3
  48+ D127 57                                   ld      d,a
  49+ D128 1E 07                                ld      e,L1InvLowlight
  50+ D12A                                      MMUSelectLayer1
  50+ D12A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ D12E CD 3F E0                             call    l1_hilight_row
  52+ D131 C9                                   ret
  53+ D132              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ D132 CD 49 D1     eqshp_DispDEIXtoIY1DP:  call    eqshp_DispDEIXtoIY
  55+ D135 FD 36 02 00                          ld      (iy+2),0
  56+ D139 FD 7E 00                             ld      a,(IY+0)
  57+ D13C FD 77 01                             ld      (IY+1),a
  58+ D13F 3E 2E                                ld      a,"."
  59+ D141 FD 77 00                             ld      (IY+0),a
  60+ D144 FD 23                                inc     IY
  61+ D146 FD 23                                inc     IY
  62+ D148 C9                                   ret
  63+ D149              ;----------------------------------------------------------------------------------------------------------------------------------
  64+ D149 DD 22 DA D1  eqshp_DispDEIXtoIY:     ld (.EQSHPclcn32z),ix
  65+ D14D ED 53 DC D1                          ld (.EQSHPclcn32zIX),de
  66+ D151 DD 21 D6 D1                          ld ix,.EQSHPclcn32t+36
  67+ D155 06 09                                ld b,9
  68+ D157 0E 00                                ld c,0
  69+ D159 3E 30        .EQSHPclcn321:            ld a,'0'
  70+ D15B B7                                   or a
  71+ D15C DD 5E 00     .EQSHPclcn322:            ld e,(ix+0)
  72+ D15F DD 56 01                             ld d,(ix+1)
  73+ D162 2A DA D1                             ld hl,(.EQSHPclcn32z)
  74+ D165 ED 52                                sbc hl,de
  75+ D167 22 DA D1                             ld (.EQSHPclcn32z),hl
  76+ D16A DD 5E 02                             ld e,(ix+2)
  77+ D16D DD 56 03                             ld d,(ix+3)
  78+ D170 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  79+ D173 ED 52                                sbc hl,de
  80+ D175 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  81+ D178 38 04                                jr c,.EQSHPclcn325
  82+ D17A 0C                                   inc c
  83+ D17B 3C                                   inc a
  84+ D17C 18 DE                                jr .EQSHPclcn322
  85+ D17E DD 5E 00     .EQSHPclcn325:            ld e,(ix+0)
  86+ D181 DD 56 01                             ld d,(ix+1)
  87+ D184 2A DA D1                             ld hl,(.EQSHPclcn32z)
  88+ D187 19                                   add hl,de
  89+ D188 22 DA D1                             ld (.EQSHPclcn32z),hl
  90+ D18B DD 5E 02                             ld e,(ix+2)
  91+ D18E DD 56 03                             ld d,(ix+3)
  92+ D191 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  93+ D194 ED 5A                                adc hl,de
  94+ D196 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  95+ D199 11 FC FF                             ld de,-4
  96+ D19C DD 19                                add ix,de
  97+ D19E 0C                                   inc c
  98+ D19F 0D                                   dec c
  99+ D1A0 28 05                                jr z,.EQSHPclcn323
 100+ D1A2 FD 77 00                             ld (iy+0),a
 101+ D1A5 FD 23                                inc iy
 102+ D1A7 10 B0        .EQSHPclcn323:            djnz .EQSHPclcn321
 103+ D1A9 3A DA D1                             ld a,(.EQSHPclcn32z)
 104+ D1AC C6 30                                add A,'0'
 105+ D1AE FD 77 00                             ld (iy+0),a
 106+ D1B1 C9                                   ret
 107+ D1B2 01 00 00 00  .EQSHPclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 107+ D1B6 0A 00 00 00
 107+ D1BA 64 00 00 00
 107+ D1BE E8 03 00 00
 107+ D1C2 10 27 00 00
 108+ D1C6 A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 108+ D1CA 40 42 0F 00
 108+ D1CE 80 96 98 00
 108+ D1D2 00 E1 F5 05
 108+ D1D6 00 CA 9A 3B
 109+ D1DA 00 00        .EQSHPclcn32z             ds 2
 110+ D1DC 00 00        .EQSHPclcn32zIX           ds 2
 111+ D1DE              ;----------------------------------------------------------------------------------------------------------------------------------
 112+ D1DE              ; "DispHL, writes HL to DE address"
 113+ D1DE 01 F0 D8     EQSHP_DispHLtoDE:         ld	bc,-10000
 114+ D1E1 CD F7 D1                             call	EQSHP_Num1
 115+ D1E4 01 18 FC                             ld	bc,-1000
 116+ D1E7 CD F7 D1                             call	EQSHP_Num1
 117+ D1EA 01 9C FF                             ld	bc,-100
 118+ D1ED CD F7 D1                             call	EQSHP_Num1
 119+ D1F0 0E F6                                ld	c,-10
 120+ D1F2 CD F7 D1                             call	EQSHP_Num1
 121+ D1F5 0E FF                                ld	c,-1
 122+ D1F7 3E 2F        EQSHP_Num1:	            ld	a,'0'-1
 123+ D1F9 3C           .Num2:	                inc	a
 124+ D1FA 09                                   add	hl,bc
 125+ D1FB 38 FC                                jr	c,.Num2
 126+ D1FD ED 42                                sbc	hl,bc
 127+ D1FF 12                                   ld	(de),a
 128+ D200 13                                   inc	de
 129+ D201 C9                                   ret
 130+ D202              ;----------------------------------------------------------------------------------------------------------------------------------
 131+ D202 26 00        EQSHP_DispAtoDE:          ld h,0
 132+ D204 6F                                   ld l,a
 133+ D205 C3 DE D1                             jp EQSHP_DispHLtoDE
 134+ D208              ;----------------------------------------------------------------------------------------------------------------------------------
 135+ D208 26 00        EQSHP_DispPriceAtoDE:     ld h,0
 136+ D20A 6F                                   ld l,a
 137+ D20B 01 9C FF                             ld	bc,-100
 138+ D20E CD 1E D2                             call	.NumLeadBlank1
 139+ D211 0E F6                                ld	c,-10
 140+ D213 CD F7 D1                             call	EQSHP_Num1
 141+ D216 3E 2E                                ld		a,'.'					; we could assume preformat but
 142+ D218                                                  DISPLAY "TODO: optimise"
 143+ D218 12                                   ld		(de),a					; we can optimse that later TODO
 144+ D219 13                                   inc		de						; with just an inc De
 145+ D21A 0E FF                                ld	c,-1
 146+ D21C 18 D9                                jr		EQSHP_Num1
 147+ D21E 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 148+ D220 3C           .NumLeadBlank2:	        inc	a
 149+ D221 09                                   add	hl,bc
 150+ D222 38 FC                                jr	c,.NumLeadBlank2
 151+ D224 FE 30                                cp	'0'
 152+ D226 20 02                                jr	nz,.DontBlank
 153+ D228 3E 20        .Blank:                 ld	a,' '
 154+ D22A ED 42        .DontBlank:	            sbc	hl,bc
 155+ D22C 12                                   ld	(de),a
 156+ D22D 13                                   inc	de
 157+ D22E C9                                   ret
 158+ D22F              ;----------------------------------------------------------------------------------------------------------------------------------
 159+ D22F FE 00        EQSHP_DispQtyAtoDE:      cp	0
 160+ D231 28 30                                jr	z,.NoStock
 161+ D233 26 00                                ld h,0
 162+ D235 6F                                   ld l,a
 163+ D236 01 9C FF                             ld	bc,-100
 164+ D239 CD 52 D2                             call	.NumLeadBlank1
 165+ D23C FE 20        .WasLead0:              cp      ' '
 166+ D23E 20 09                                jr      nz,.NotHundredsZero
 167+ D240 0E F6                                ld	c,-10
 168+ D242 CD 52 D2                             call	.NumLeadBlank1
 169+ D245 0E FF                                ld	c,-1
 170+ D247 18 AE                                jr		EQSHP_Num1
 171+ D249 0E F6        .NotHundredsZero:       ld	c,-10
 172+ D24B CD F7 D1                             call	EQSHP_Num1
 173+ D24E 0E FF                                ld	c,-1
 174+ D250 18 A5                                jr		EQSHP_Num1
 175+ D252 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 176+ D254 3C           .NumLeadBlank2:	        inc	a
 177+ D255 09                                   add	hl,bc
 178+ D256 38 FC                                jr	c,.NumLeadBlank2
 179+ D258 FE 30                                cp	'0'
 180+ D25A 20 02                                jr	nz,.DontBlank
 181+ D25C 3E 20        .Blank:                 ld	a,' '
 182+ D25E ED 42        .DontBlank:	            sbc	hl,bc
 183+ D260 12                                   ld	(de),a
 184+ D261 13                                   inc	de
 185+ D262 C9                                   ret
 186+ D263 3E 20        .NoStock:               ld	a,' '
 187+ D265 12                                   ld	(de),a
 188+ D266 13                                   inc	de
 189+ D267 12                                   ld	(de),a
 190+ D268 13                                   inc	de
 191+ D269 3E 2D                                ld	a,'-'
 192+ D26B 12                                   ld	(de),a
 193+ D26C 13                                   inc de
 194+ D26D C9                                   ret
 195+ D26E              ;----------------------------------------------------------------------------------------------------------------------------------
 196+ D26E              EQSHP_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++D26E
   2++D26E              ;">print_boilder_text hl = text structure, b = message count"
   3++D26E C5           .BoilerTextLoop:        push		bc			; Save Message Count loop value
   4++D26F 4E                                   ld			c,(hl)		; Get Row into b
   5++D270 23                                   inc			hl
   6++D271 46                                   ld			b,(hl)		; Get Col into b
   7++D272 23                                   inc			hl
   8++D273 5E                                   ld			e,(hl)		; Get text address Lo into E
   9++D274 23                                   inc			hl
  10++D275 56                                   ld			d,(hl)		; Get text address Hi into E
  11++D276 23                                   inc			hl
  12++D277 E5                                   push		hl			; Save present HL to stack as this is the address for the next message
  13++D278 EB                                   ex			de,hl		; now hl = address of text data
  14++D279 1E FF                                ld			e,txt_status_colour
  15++D27B C5                                   push		bc
  16++D27C D1                                   pop			de
  17++D27D                                      MMUSelectLayer1
  17++D27D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  18++D281 CD D7 E0                             call		l1_print_at
  19++D284 E1                                   pop			hl
  20++D285 C1                                   pop			bc
  21++D286 10 E6                                djnz		.BoilerTextLoop
  22++D288 C9                                   ret
  23++D289
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 197+ D289              ;----------------------------------------------------------------------------------------------------------------------------------
 198+ D289 2A D1 84     eqshp_GetCash:          ld		hl,(Cash+2)
 199+ D28C EB                                   ex      de,hl
 200+ D28D DD 2A CF 84                          ld      ix,(Cash)
 201+ D291 FD 21 70 C0                          ld		iy,eqshp_cash_amount
 202+ D295 CD 32 D1                             call 	eqshp_DispDEIXtoIY1DP
 203+ D298 FD E5                                push    IY
 204+ D29A D1                                   pop     de
 205+ D29B 21 84 C0                             ld      hl,eqshp_cash_UoM
 206+ D29E 01 0B 00                             ld      bc,11
 207+ D2A1 ED B0                                ldir
 208+ D2A3 C9                                   ret
 209+ D2A4              ;----------------------------------------------------------------------------------------------------------------------------------
 210+ D2A4 CD 89 D2     eqshp_DisplayCash:      call	eqshp_GetCash
 211+ D2A7 21 70 C0                             ld		hl,eqshp_cash_amount
 212+ D2AA 11 48 B0                             ld      de,eqshp_cash_position
 213+ D2AD                                      MMUSelectLayer1
 213+ D2AD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 214+ D2B1 CD D7 E0                             call	l1_print_at
 215+ D2B4 C9                                   ret
 216+ D2B5              ;----------------------------------------------------------------------------------------------------------------------------------
 217+ D2B5 7E           eqshp_expand_word:      ld      a,(hl)
 218+ D2B6 FE 00                                cp      0
 219+ D2B8 C8                                   ret     z
 220+ D2B9 12                                   ld      (de),a
 221+ D2BA 23                                   inc     hl
 222+ D2BB 13                                   inc     de
 223+ D2BC 18 F7                                jr      eqshp_expand_word
 224+ D2BE
 225+ D2BE              ; hl = list of words
 226+ D2BE              ; de = adress to expand to
 227+ D2BE 7E           eqshp_expand_name:      ld      a,(hl)
 228+ D2BF 47                                   ld      b,a
 229+ D2C0 23                                   inc     hl
 230+ D2C1 7E                                   ld      a,(hl)              ; its a 16 bit
 231+ D2C2 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 232+ D2C3 B0                                   or      b
 233+ D2C4 20 01                                jr      nz,.MoreToDo
 234+ D2C6              ;                        ld      (de),a we dont want the null marker now
 235+ D2C6 C9                                   ret
 236+ D2C7 E5 D5        .MoreToDo:              push    hl,,de
 237+ D2C9 7E                                   ld      a,(hl)              ; bodge for now no optimise
 238+ D2CA 5F                                   ld      e,a
 239+ D2CB 23                                   inc     hl
 240+ D2CC 7E                                   ld      a,(hl)
 241+ D2CD 57                                   ld      d,a
 242+ D2CE EB                                   ex      hl,de               ; hl is now Word... address
 243+ D2CF D1                                   pop     de                  ; de back to pointer to buffer
 244+ D2D0 CD B5 D2     .ProcessWord:           call    eqshp_expand_word
 245+ D2D3 3E 20                                ld      a," "               ; speculative space
 246+ D2D5 12                                   ld      (de),a
 247+ D2D6 13                                   inc     de
 248+ D2D7 E1                                   pop     hl                  ; get string pointer back
 249+ D2D8 23                                   inc     hl
 250+ D2D9 23                                   inc     hl                  ; on to next word
 251+ D2DA 18 E2                                jr      eqshp_expand_name
 252+ D2DC
 253+ D2DC 21 92 C0     eqshp_buffer_list:      ld      hl,eqship_display_buffer                    ; hl - target buffer
 254+ D2DF 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 255+ D2E1 11 00 10                             ld      de, eqship_display_buff_len
 256+ D2E4 CD 04 7E                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 257+ D2E7 21 B1 C0                             ld      hl,eqship_display_buffer+eqship_buffer_row_len-1
 258+ D2EA 11 20 00                             ld      de,eqship_buffer_row_len
 259+ D2ED 06 1A                                ld      b,ShipEquipTableSize
 260+ D2EF AF                                   xor     a
 261+ D2F0 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 262+ D2F1 19                                   add     hl,de
 263+ D2F2 10 FC                                djnz    .EoLLoop
 264+ D2F4 06 1A                                ld      b,ShipEquipTableSize                        ; CurrentGameMaxEquipment
 265+ D2F6 DD 21 D6 F4                          ld      ix,ShipEquipmentList                        ; ix = equipment master table
 266+ D2FA FD 21 92 C0                          ld      iy,eqship_display_buffer                    ; iy = target buffer
 267+ D2FE 0E 00                                ld      c,0                                         ; Current Row
 268+ D300 DD 7E 01     .ProcessRow:            ld      a,(ix+1)                                    ; get can buy
 269+ D303 FE FF                                cp      $FF                                         ; if its $FF then do not display
 270+ D305 C2 12 D3                             jp      nz,.BufferItem
 271+ D308 11 10 00     .DoNotDisplay:          ld      de,ShipEquipTableRowLen                     ; mov eto next equipment list, 7 =  row length
 272+ D30B DD 19                                add     ix,de
 273+ D30D 10 F1                                djnz    .ProcessRow
 274+ D30F C3 75 D3                             jp      .DoneProcess
 275+ D312 FD E5 DD E5  .BufferItem:            push    iy,,ix,,bc
 275+ D316 C5
 276+ D317 DD 7E 00                             ld      a,(ix+0)                                    ; get can buy
 277+ D31A 21 92 D0                             ld      hl,eqship_buyable_buffer                    ;
 278+ D31D 59                                   ld      e,c
 279+ D31E 16 00                                ld      d,0                                         ;
 280+ D320 19                                   add     hl,de                                       ;
 281+ D321 77                                   ld      (hl),a                                      ; set buyable to 0
 282+ D322 21 06 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 283+ D325 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length
 284+ D327 59                                   ld      e,c
 285+ D328 ED 30                                mul
 286+ D32A 19                                   add     hl,de                                       ; hl = dword list of work pointers
 287+ D32B FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 288+ D32F C5                                   push    bc
 289+ D330 CD BE D2                             call    eqshp_expand_name                           ; expand name
 290+ D333 C1                                   pop     bc
 291+ D334 11 15 00                             ld      de,eqship_buffer_cash_col                   ; move buffer column to 20
 292+ D337 FD 19                                add     iy,de
 293+ D339 FD E5                                push    iy
 294+ D33B DD 7E 04                             ld      a,(ix+4)
 295+ D33E 5F                                   ld      e,a
 296+ D33F DD 7E 05                             ld      a,(ix+5)
 297+ D342 57                                   ld      d,a                                         ; de = price
 298+ D343 DD 62 DD 6B                          ld      ix,de
 299+ D347                                      ;push    de
 300+ D347                                      ;pop     ix
 301+ D347 11 00 00                             ld      de,0                                        ; deix = price
 302+ D34A CD 49 D1                             call    eqshp_DispDEIXtoIY                          ; print it to pos IY
 303+ D34D 3E 20                                ld      a," "
 304+ D34F FD 77 00                             ld      (IY+0),a
 305+ D352 FD 77 01                             ld      (IY+1),a
 306+ D355 FD 77 02                             ld      (IY+2),a
 307+ D358 FD E1                                pop     iy
 308+ D35A CD 7A D3                             call    .RightJustify
 309+ D35D C1 DD E1 FD                          pop     iy,,ix,,bc
 309+ D361 E1
 310+ D362 DD 7E 07     .CheckFitted:           ld      a,(ix+7)
 311+ D365 FD 77 1D                             ld      (iy+eqship_fitted_module),a
 312+ D368 11 20 00                             ld      de,eqship_buffer_row_len
 313+ D36B FD 19                                add     iy,de                                       ; now iy = start of next column
 314+ D36D 11 10 00                             ld      de,ShipEquipTableRowLen
 315+ D370 DD 19                                add     ix,de
 316+ D372 0C                                   inc     c
 317+ D373 10 8B                                djnz    .ProcessRow
 318+ D375 79           .DoneProcess:           ld      a,c
 319+ D376 32 91 C0                             ld      (eqshp_current_end),a
 320+ D379 C9                                   ret
 321+ D37A CD 7D D3     .RightJustify:          call    .RightJustify2
 322+ D37D CD 80 D3     .RightJustify2:         call    .RightJustify3
 323+ D380 FD 7E 03     .RightJustify3:         ld      a,(iy+3)
 324+ D383 FE 20                                cp      " "
 325+ D385 CC 89 D3                             call    z,.ShuffleRight
 326+ D388 C9                                   ret
 327+ D389 FD E5        .ShuffleRight:          push    iy
 328+ D38B E1                                   pop     hl
 329+ D38C 3E 03                                ld      a,3
 330+ D38E ED 31                                add     hl,a
 331+ D390 FD 7E 02                             ld      a,(iy+2)
 332+ D393 77                                   ld      (hl),a
 333+ D394 2B                                   dec     hl
 334+ D395 FD 7E 01                             ld      a,(iy+1)
 335+ D398 77                                   ld      (hl),a
 336+ D399 2B                                   dec     hl
 337+ D39A FD 7E 00                             ld      a,(iy+0)
 338+ D39D 77                                   ld      (hl),a
 339+ D39E 2B                                   dec     hl
 340+ D39F 3E 20                                ld      a," "
 341+ D3A1 77                                   ld      (hl),a
 342+ D3A2 C9                                   ret
 343+ D3A3
 344+ D3A3
 345+ D3A3              draw_eqship_items:      MMUSelectLayer1
 345+ D3A3 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 346+ D3A7 CD 8F E0                             call    l1_cls
 347+ D3AA 06 03                                ld		b,3
 348+ D3AC 21 0D C0                             ld		hl,eqshp_boiler_text
 349+ D3AF CD 6E D2                             call	EQSHP_print_boiler_text
 350+ D3B2 CD A4 D2                             call    eqshp_DisplayCash
 351+ D3B5 3A 90 C0                             ld      a,(eqshp_current_topItem)
 352+ D3B8 16 20                                ld      d,eqship_buffer_row_len
 353+ D3BA 5F                                   ld      e,a
 354+ D3BB ED 30                                mul
 355+ D3BD 21 92 C0                             ld      hl,eqship_display_buffer
 356+ D3C0 19                                   add     hl,de
 357+ D3C1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 358+ D3C4 47                                   ld      b,a
 359+ D3C5 3A 91 C0                             ld      a,(eqshp_current_end)
 360+ D3C8 90                                   sub     b
 361+ D3C9                                      JumpIfALTNusng  18, .FillScreen
 361+ D3C9 FE 12       >                        cp      18
 361+ D3CB DA D2 D3    >                        jp		c, .FillScreen
 362+ D3CE 06 12        .JustWindowing:         ld      b,18
 363+ D3D0 18 01                                jr      .ReadyToPrint
 364+ D3D2 47           .FillScreen:            ld      b,a         ; the mumber of rows to display
 365+ D3D3 11 08 18     .ReadyToPrint:          ld      de,eqshp_position
 366+ D3D6 D5 E5 C5     .DrawARow:              push    de,,hl,,bc                  ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 367+ D3D9 CD D7 E0                             call    l1_print_at
 367+ D3DC
 368+ D3DC C1 E1                                pop     hl,,bc                      ; get mesage addr back and move down one line
 369+ D3DE 11 20 00                             ld      de,eqship_buffer_row_len
 370+ D3E1 19                                   add     hl,de
 371+ D3E2 D1                                   pop     de                          ; get output row back
 372+ D3E3 3E 08                                ld      a,8
 373+ D3E5 82                                   add     a,d
 374+ D3E6 57                                   ld      d,a
 375+ D3E7 10 ED                                djnz    .DrawARow
 376+ D3E9 C9                                   ret
 377+ D3EA
 378+ D3EA              draw_eqshp_menu:        InitNoDoubleBuffer
 378+ D3EA             >                            MMUSelectLayer1
 378+ D3EA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 378+ D3EE CD 8F E0    >                            call	l1_cls
 378+ D3F1 3E 07       >                            ld		a,7
 378+ D3F3 CD AA E0    >                            call	l1_attr_cls_to_a
 378+ D3F6             >                            MMUSelectLayer2
 378+ D3F6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 378+ D3FA CD 0A E0    >                            call    asm_l2_double_buffer_off
 378+ D3FD CD 0E E2    >                            call	l2_cls	; Get some space
 378+ D400             >                            MMUSelectSpriteBank
 378+ D400 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 378+ D404 CD 6E E5    >                            call    sprite_cls_cursors
 379+ D407 3E 20                                ld      a,$20
 380+ D409 32 7E 7F                             ld      (MenuIdMax),a
 381+ D40C 3A 00 80     .SetData:               ld      a,(Galaxy)
 382+ D40F                                      MMUSelectGalaxyA
 382+ D40F ED 92 57    >                     nextreg GalaxyDataMMU,     a
 383+ D412 CD 6D F9                             call    galaxy_planet_data
 384+ D415 CD F5 F8                             call    galaxy_equip_market
 385+ D418 ED 4B 13 80                          ld      bc,(PresentSystemX)
 386+ D41C CD BB FA                             call    galaxy_name_at_bc
 387+ D41F CD 6D F9                             call    galaxy_planet_data
 388+ D422 AF                                   xor     a
 389+ D423 32 90 C0                             ld      (eqshp_current_topItem),a
 390+ D426 CD DC D2                             call    eqshp_buffer_list
 391+ D429 01 01 01     .Drawbox:               ld		bc,$0101
 392+ D42C 11 FD BE                             ld		de,$BEFD
 393+ D42F 3E C0                                ld		a,$C0
 394+ D431                                      MMUSelectLayer2
 394+ D431 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 395+ D435 CD F9 E3                             call	l2_draw_box
 396+ D438 01 01 0A                             ld		bc,$0A01
 397+ D43B 11 C0 FE                             ld		de,$FEC0
 398+ D43E CD 84 E4                             call	l2_draw_horz_line
 399+ D441 3A 00 80     .StaticText:	        ld      a,(Galaxy)
 400+ D444                                      MMUSelectGalaxyA
 400+ D444 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 401+ D447 3E 19                                ld		a,25
 402+ D449 CD F7 8E                             call	expandTokenToString
 403+ D44C CD 7A F6                             call	GetDigramGalaxySeed
 404+ D44F CD A3 D3                             call    draw_eqship_items
 405+ D452 AF           .InitialHighlight:      xor     a
 406+ D453 32 8F C0                             ld      (eqshp_selected_row),a        ; assume on row zero
 407+ D456 CD 12 D1                             call    eqshp_highlight_row
 408+ D459 CD A4 D2     .DisCash:               call    eqshp_DisplayCash
 409+ D45C C9                                   ret
 410+ D45D
 411+ D45D              ;----------------------------------------------------------------------------------------------------------------------------------
 412+ D45D CD DC D2     eqip_refesh_buffer:     call    eqshp_buffer_list
 413+ D460 3A 8F C0                             ld      a,(eqshp_selected_row)              ; get revised list length
 414+ D463 47                                   ld      b,a
 415+ D464 3A 90 C0                             ld      a,(eqshp_current_topItem)           ; get current top of screen
 416+ D467 4F                                   ld      c,a
 417+ D468 80                                   add     b                                   ; a = top + selected row
 418+ D469 21 91 C0                             ld      hl,eqshp_current_end
 419+ D46C                                      CallIfAGTENusng (hl), .NewListShorter       ; if a > new list len then rebuild
 419+ D46C BE          >                        cp      (hl)
 419+ D46D D4 73 D4    >                        call	nc,.NewListShorter
 420+ D470 C3 7F D4                             jp      .RedrawList
 421+ D473 C5           .NewListShorter:        push    bc
 422+ D474 CD 22 D1                             call    eqshp_lowlight_row
 423+ D477 C1                                   pop     bc
 424+ D478 3A 91 C0                             ld      a,(eqshp_current_end)               ; b = end of list
 425+ D47B 91                                   sub     c                                   ; minus current top
 426+ D47C 32 8F C0                             ld      (eqshp_selected_row),a
 427+ D47F CD 12 D1     .RedrawList:            call    eqshp_highlight_row
 428+ D482 CD A3 D3                             call    draw_eqship_items
 429+ D485 C9                                   ret
 430+ D486
 431+ D486              ;----------------------------------------------------------------------------------------------------------------------------------
 432+ D486              ; Handles all the input whilst in the market menu
 433+ D486              loop_eqshp_menu:        MacroIsKeyPressed c_Pressed_CursorUp
 433+ D486 3E 4A       >                        ld      a,c_Pressed_CursorUp
 433+ D488             >                        MMUSelectKeyboard
 433+ D488 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 433+ D48C CD A2 E1    >                        call    is_key_pressed
 434+ D48F CC B7 D4                             call    z,eqshp_UpPressed
 435+ D492                                      MacroIsKeyPressed c_Pressed_CursorDown
 435+ D492 3E 4C       >                        ld      a,c_Pressed_CursorDown
 435+ D494             >                        MMUSelectKeyboard
 435+ D494 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 435+ D498 CD A2 E1    >                        call    is_key_pressed
 436+ D49B CC D7 D4                             call    z,eqshp_DownPressed
 437+ D49E                                      MacroIsKeyPressed c_Pressed_RollLeft
 437+ D49E 3E 08       >                        ld      a,c_Pressed_RollLeft
 437+ D4A0             >                        MMUSelectKeyboard
 437+ D4A0 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 437+ D4A4 CD A2 E1    >                        call    is_key_pressed
 438+ D4A7 CC 03 D5                             call    z,eqshp_LeftPressed
 439+ D4AA                                      MacroIsKeyPressed c_Pressed_RollRight
 439+ D4AA 3E 0A       >                        ld      a,c_Pressed_RollRight
 439+ D4AC             >                        MMUSelectKeyboard
 439+ D4AC ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 439+ D4B0 CD A2 E1    >                        call    is_key_pressed
 440+ D4B3 CC 78 D5                             call    z,eqshp_RightPressed
 441+ D4B6 C9                                   ret
 442+ D4B7
 443+ D4B7              ;----------------------------------------------------------------------------------------------------------------------------------
 444+ D4B7 3A 8F C0     eqshp_UpPressed:        ld      a,(eqshp_selected_row)
 445+ D4BA FE 00                                cp      0
 446+ D4BC 28 0B                                jr      z,.check_scroll_up
 447+ D4BE CD 22 D1                             call    eqshp_lowlight_row
 448+ D4C1 21 8F C0                             ld      hl,eqshp_selected_row
 449+ D4C4 35                                   dec     (hl)
 450+ D4C5 CD 12 D1                             call    eqshp_highlight_row
 451+ D4C8 C9                                   ret
 452+ D4C9 3A 90 C0     .check_scroll_up:       ld      a,(eqshp_current_topItem)
 453+ D4CC FE 00                                cp      0
 454+ D4CE C8                                   ret     z
 455+ D4CF 3D                                   dec     a           ; chjange later to buffering step back 1
 456+ D4D0 32 90 C0                             ld      (eqshp_current_topItem),a
 457+ D4D3 CD A3 D3                             call    draw_eqship_items
 458+ D4D6 C9                                   ret
 459+ D4D7              ;----------------------------------------------------------------------------------------------------------------------------------
 460+ D4D7 3A 91 C0     eqshp_DownPressed:      ld      a,(eqshp_current_end)
 461+ D4DA 47                                   ld      b,a                             ; This check is if the current list is < one screen
 462+ D4DB 05                                   dec     b
 463+ D4DC 3A 8F C0                             ld      a,(eqshp_selected_row)
 464+ D4DF B8                                   cp      b
 465+ D4E0 C8                                   ret     z
 466+ D4E1 FE 11                                cp      17
 467+ D4E3 28 0B                                jr      z, .check_scroll_down
 468+ D4E5 CD 22 D1                             call    eqshp_lowlight_row
 469+ D4E8 21 8F C0                             ld      hl,eqshp_selected_row
 470+ D4EB 34                                   inc     (hl)
 471+ D4EC CD 12 D1                             call    eqshp_highlight_row
 472+ D4EF C9                                   ret
 473+ D4F0 47           .check_scroll_down:     ld      b,a
 474+ D4F1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 475+ D4F4 80                                   add     b
 476+ D4F5 3C                                   inc     a
 477+ D4F6 21 91 C0                             ld      hl,eqshp_current_end
 478+ D4F9                                      ReturnIfAGTEusng      (hl)
 478+ D4F9 BE          >                        cp    (hl)
 478+ D4FA D0          >                        ret	 nc
 479+ D4FB 21 90 C0     .can_scroll_down:       ld      hl,eqshp_current_topItem
 480+ D4FE 34                                   inc     (hl)
 481+ D4FF CD A3 D3                             call    draw_eqship_items
 482+ D502 C9                                   ret
 483+ D503              ;----------------------------------------------------------------------------------------------------------------------------------
 484+ D503 3A 00 80     eqshp_LeftPressed:      ld      a,(Galaxy)
 485+ D506                                      MMUSelectGalaxyA
 485+ D506 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 486+ D509 DD 21 D6 F4                          ld      ix,ShipEquipmentList
 487+ D50D 3A 90 C0     .IsItFuel:              ld      a,(eqshp_current_topItem)   ; Can't refund fuel
 488+ D510 47                                   ld      b,a
 489+ D511 3A 8F C0                             ld      a,(eqshp_selected_row)
 490+ D514 80                                   add     b
 491+ D515 FE 00                                cp      0
 492+ D517 C8                                   ret     z
 493+ D518 4F           .FuelNotSelected:       ld      c,a
 494+ D519 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 495+ D51B 5F                                   ld      e,a
 496+ D51C ED 30                                mul
 497+ D51E DD 19                                add     ix,de
 498+ D520 DD 7E 07                             ld      a,(ix+7)
 499+ D523 FE 2D                                cp      "-"
 500+ D525 C8                                   ret     z
 501+ D526 79           .CheckIfMissle:         ld      a,c
 502+ D527 FE 01                                cp      EQ_MISSILE
 503+ D529 28 2F                                jr      z,.RefundMissle
 504+ D52B DD 5E 04     .RefundItemCash:        ld      e,(ix+4)
 505+ D52E DD 56 05                             ld      d,(ix+5)
 506+ D531 E5 C5                                push    hl,,bc
 507+ D533 CD FF 8F                             call    addDEtoCash         ; refund laser value
 508+ D536 C1 E1                                pop     hl,,bc
 509+ D538 3E 2D                                ld      a,"-"
 510+ D53A DD 77 07                             ld      (ix+7),a
 511+ D53D 21 EE 84                             ld      hl,EquipmentFitted
 512+ D540 79                                   ld      a,c                 ; get back current laser ref
 513+ D541 ED 31                                add     hl,a
 514+ D543 36 00                                ld      (hl),EquipmentItemNotFitted; remove laser from equipment
 515+ D545 CD 5D D4                             call    eqip_refesh_buffer
 516+ D548 DD 7E 08                             ld      a,(ix+8)
 517+ D54B FE FF                                cp      $FF
 518+ D54D C8                                   ret     z
 519+ D54E 21 E6 84     .ItsALaser              ld      hl,LaserType        ; clear out respective current laser
 520+ D551 47                                   ld      b,a
 521+ D552 DD 7E 09                             ld      a,(ix+9)
 522+ D555 ED 31                                add     hl,a
 523+ D557 36 FF                                ld      (hl),$FF            ; $FF = not fitted
 524+ D559 C9                                   ret
 525+ D55A DD 5E 04     .RefundMissle           ld      e,(ix+4)
 526+ D55D DD 56 05                             ld      d,(ix+5)
 527+ D560 E5 C5                                push    hl,,bc
 528+ D562 CD FF 8F                             call    addDEtoCash         ; refund laser value
 529+ D565 C1 E1                                pop     hl,,bc
 530+ D567 DD 7E 07                             ld      a,(ix+7)
 531+ D56A 3D                                   dec     a
 532+ D56B FE 30                                cp      "0"
 533+ D56D 20 02                                jr      nz,.NotAllSold
 534+ D56F 3E 2D        .AllSold:               ld      a,"-"
 535+ D571 DD 77 07     .NotAllSold:            ld      (ix+7),a
 536+ D574 CD 5D D4                             call    eqip_refesh_buffer
 537+ D577 C9                                   ret
 538+ D578              ;----------------------------------------------------------------------------------------------------------------------------------
 539+ D578 3A 00 80     eqshp_RightPressed:     ld      a,(Galaxy)
 540+ D57B                                      MMUSelectGalaxyA
 540+ D57B ED 92 57    >                     nextreg GalaxyDataMMU,     a
 541+ D57E DD 21 D6 F4                          ld      ix,ShipEquipmentList
 542+ D582 3A 90 C0                             ld      a,(eqshp_current_topItem)
 543+ D585 47                                   ld      b,a
 544+ D586 3A 8F C0                             ld      a,(eqshp_selected_row)
 545+ D589 80                                   add     a,b
 546+ D58A FE 01                                cp      EQ_MISSILE
 547+ D58C 20 0A                                jr      nz,.NotAMissileBuy
 548+ D58E 08           .ItsAMissile:           ex      af,af'
 549+ D58F 3E 34                                ld      a,"4"
 550+ D591 32 AA D5                             ld      (.CompareCheck+1),a
 551+ D594 08                                   ex      af,af'
 552+ D595 C3 9F D5                             jp      .FindInTable
 553+ D598 08           .NotAMissileBuy:        ex      af,af'
 554+ D599 3E 2A                                ld      a,"*"
 555+ D59B 32 AA D5                             ld      (.CompareCheck+1),a
 556+ D59E 08                                   ex      af,af'
 557+ D59F 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 558+ D5A1 5F                                   ld      e,a
 559+ D5A2 ED 30                                mul
 560+ D5A4 DD 19                                add     ix,de
 561+ D5A6 DD 7E 07                             ld      a,(ix+7)
 562+ D5A9 FE 2A        .CompareCheck:          cp      "*"; not true for missles astyou can buy 1 to 4
 563+ D5AB C8                                   ret     z
 564+ D5AC 47           .Purchasable:           ld      b,a
 565+ D5AD DD 7E 06                             ld      a,(ix+6)
 566+ D5B0 FE 01                                cp      EQ_MISSILE
 567+ D5B2 20 06                                jr      nz,.NotMissleMax
 568+ D5B4 21 20 80     .MissleQuanity:         ld      hl,NbrMissiles
 569+ D5B7 78                                   ld      a,b
 570+ D5B8 BE                                   cp      (hl)
 571+ D5B9 C8                                   ret     z
 572+ D5BA 4F           .NotMissleMax:          ld      c,a
 573+ D5BB DD 7E 01                             ld      a,(ix+1)
 574+ D5BE FE FF                                cp      $FF
 575+ D5C0 C8                                   ret     z
 576+ D5C1              .CheckCash:             JumpIfMemIsNotZero  Cash+2 , .MoreThanRequired      ; Nothing in game > 65535CR
 576+ D5C1 3A D1 84    >                        ld      a,(Cash+2)
 576+ D5C4 A7          >                        and     a
 576+ D5C5 C2 D5 D5    >                        jp	    nz,.MoreThanRequired
 577+ D5C8 2A CF 84                             ld      hl,(Cash)                                   ; hl = lower 16 bits of cash
 578+ D5CB DD 5E 04                             ld      e,(ix+4)
 579+ D5CE DD 56 05                             ld      d,(ix+5)
 580+ D5D1 CD 56 99                             call	compare16HLDE
 581+ D5D4 D8                                   ret     c                                           ; Insufficient Funds
 582+ D5D5 DD 7E 06     .MoreThanRequired:      ld      a,(ix+6)
 583+ D5D8 FE 00                                cp      0
 584+ D5DA 28 15                                jr      z,.MaxFuelOut
 585+ D5DC FE 01                                cp      1
 586+ D5DE 28 1B                                jr      z,.AddMissle
 587+ D5E0                                      JumpIfAGTENusng  EQ_FRONT_PULSE,.AddLaser
 587+ D5E0 FE 0A       >                        cp     EQ_FRONT_PULSE
 587+ D5E2 D2 05 D6    >                        jp		nc,.AddLaser
 588+ D5E5 21 EE 84     .AddNormalItem:         ld      hl,EquipmentFitted
 589+ D5E8 ED 31                                add     hl,a
 590+ D5EA 36 FF                                ld      (hl),EquipmentItemFitted
 591+ D5EC 3E 2A                                ld      a,"*"
 592+ D5EE C3 4D D6                             jp      .AddedItem
 593+ D5F1              .MaxFuelOut:            MaxFuelMacro
 593+ D5F1 3E 46       >						ld		a,MaxFuelLevel
 593+ D5F3 32 D3 84    >						ld		(Fuel),a
 594+ D5F6 3E 2A                                ld      a,"*"
 595+ D5F8 C3 4D D6                             jp      .AddedItem
 596+ D5FB 21 20 80     .AddMissle:             ld      hl,NbrMissiles
 597+ D5FE 34                                   inc     (hl)
 598+ D5FF 7E                                   ld      a,(hl)
 599+ D600 C6 30                                add     "0"
 600+ D602 C3 4D D6                             jp      .AddedItem
 601+ D605 DD 7E 08     .AddLaser:              ld      a,(ix+8)            ; Get if its a laser, $FF = no laser
 602+ D608 FE FF                                cp      $FF
 603+ D60A 20 29                                jr      nz,.BuyLaser
 604+ D60C              .LargeCargoBay: ;TODO
 605+ D60C 4F           .RefundExistingLaser:   ld      c,a                 ; retain current laser nbr
 606+ D60D 21 D6 F4                             ld      hl,ShipEquipmentList
 607+ D610 16 10                                ld      d,ShipEquipTableRowLen
 608+ D612 5F                                   ld      e,a
 609+ D613 ED 30                                mul
 610+ D615 19                                   add     hl,de               ; now we have the row for the current laser
 611+ D616 3E 04                                ld      a,4
 612+ D618 ED 31                                add     hl,a
 613+ D61A 7E                                   ld      a,(hl)
 614+ D61B 5F                                   ld      e,a
 615+ D61C 23                                   inc     hl
 616+ D61D 7E                                   ld      a,(hl)
 617+ D61E 57                                   ld      d,a
 618+ D61F E5 C5                                push    hl,,bc
 619+ D621 CD FF 8F                             call    addDEtoCash         ; refund laser value
 620+ D624 C1 E1                                pop     hl,,bc
 621+ D626 3E 02                                ld      a,2
 622+ D628 ED 31                                add     hl,a
 623+ D62A 3E 2D                                ld      a,"-"
 624+ D62C 77                                   ld      (hl),a              ; clear on ship equipment
 625+ D62D 21 EE 84                             ld      hl,EquipmentFitted
 626+ D630 79                                   ld      a,c                 ; get back current laser ref
 627+ D631 ED 31                                add     hl,a
 628+ D633 36 00                                ld      (hl),EquipmentItemNotFitted  ; remove laser from equipment
 629+ D635 21 EE 84     .BuyLaser:              ld      hl,EquipmentFitted
 630+ D638 DD 7E 06                             ld      a,(ix+6)
 631+ D63B ED 31                                add     hl,a
 632+ D63D 36 FF                                ld      (hl),EquipmentItemFitted
 633+ D63F DD 7E 09                             ld      a,(ix+9)            ; get laser position
 634+ D642 21 E6 84                             ld      hl,LaserType
 635+ D645 ED 31                                add     hl,a
 636+ D647 DD 7E 08                             ld      a,(ix+8)            ; get type
 637+ D64A 77                                   ld      (hl),a
 638+ D64B 3E 2A                                ld      a,"*"
 639+ D64D DD 77 07     .AddedItem              ld      (ix+7),a
 640+ D650 DD 5E 04                             ld      e,(ix+4)
 641+ D653 DD 56 05                             ld      d,(ix+5)
 642+ D656 CD 12 90                             call    subDEfromCash
 643+ D659 CD 5D D4                             call    eqip_refesh_buffer
 644+ D65C C9                                   ret
# file closed: ./Menus/equip_ship_menu.asm
1004  D65D                                  DISPLAY "Bank ",BankMenuEquipS," - Bytes free ",/D, $2000 - ($-MenuEquipSAddr), " - BankMenuEquipS"
1005  D65D                                  ASSERT $-MenuEquipSAddr <8912 , Bank code leaks over 8K boundary
1006  D65D              ; Bank 65  ------------------------------------------------------------------------------------------------------------------------
1007  D65D                                  SLOT    LaunchShipAddr
1008  D65D                                  PAGE    BankLaunchShip
1009  D65D                                  ORG     LaunchShipAddr
1010  C000                                  INCLUDE "./Transitions/launch_ship.asm"
# file opened: ./Transitions/launch_ship.asm
   1+ C000 4C 61 75 6E  launchship_page_marker  DB "LaunchShipPG65"
   1+ C004 63 68 53 68
   1+ C008 69 70 50 47
   1+ C00C 36 35
   2+ C00E
   3+ C00E 7E 3F 04 02  launchdraw_table        DB $7E,$3F, $04,$02, $66            ; purple blue
   3+ C012 66
   4+ C013              launchdraw_rowsize      equ $-launchdraw_table
   5+ C013 7C 3E 08 04                          DB $7C,$3E, $08,$04, $66
   5+ C017 66
   6+ C018 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $66
   6+ C01C 66
   7+ C01D 78 3C 10 08                          DB $78,$3C, $10,$08, $66
   7+ C021 66
   8+ C022 76 3B 14 0A                          DB $76,$3B, $14,$0A, $66
   8+ C026 66
   9+ C027 74 3A 18 0C                          DB $74,$3A, $18,$0C, $66
   9+ C02B 66
  10+ C02C 70 38 20 10                          DB $70,$38, $20,$10, $66
  10+ C030 66
  11+ C031 6C 36 28 14                          DB $6C,$36, $28,$14, $05            ; Black Blue
  11+ C035 05
  12+ C036 68 34 30 18                          DB $68,$34, $30,$18, $05
  12+ C03A 05
  13+ C03B 64 32 38 1C                          DB $64,$32, $38,$1C, $05
  13+ C03F 05
  14+ C040 60 30 40 20                          DB $60,$30, $40,$20, $05
  14+ C044 05
  15+ C045 5C 2E 48 24                          DB $5C,$2E, $48,$24, $05            ; Dark Blue
  15+ C049 05
  16+ C04A 58 2C 50 28                          DB $58,$2C, $50,$28, $02
  16+ C04E 02
  17+ C04F 54 2A 58 2C                          DB $54,$2A, $58,$2C, $02
  17+ C053 02
  18+ C054 50 28 60 30                          DB $50,$28, $60,$30, $02
  18+ C058 02
  19+ C059 4C 26 68 34                          DB $4C,$26, $68,$34, $02
  19+ C05D 02
  20+ C05E 46 23 74 3A                          DB $46,$23, $74,$3A, $02
  20+ C062 02
  21+ C063 40 20 80 40                          DB $40,$20, $80,$40, $02
  21+ C067 02
  22+ C068 38 1C 90 48                          DB $38,$1C, $90,$48, $01            ;Very Dark Blue
  22+ C06C 01
  23+ C06D 30 18 A0 50                          DB $30,$18, $A0,$50, $01
  23+ C071 01
  24+ C072 26 13 B4 5A                          DB $26,$13, $B4,$5A, $01
  24+ C076 01
  25+ C077 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $01
  25+ C07B 01
  26+ C07C 10 08 E0 70                          DB $10,$08, $E0,$70, $00            ;Black
  26+ C080 00
  27+ C081 02 01 FC 7E                          DB $02,$01, $FC,$7E, $00
  27+ C085 00
  28+ C086 FF                                   DB $FF
  29+ C087
  30+ C087              launchtablesize         EQU ($ - launchdraw_table)/launchdraw_rowsize
  31+ C087
  32+ C087 7E 3F 04 02  dockingdraw_table       DB $7E,$3F, $04,$02, $00            ; purple blue
  32+ C08B 00
  33+ C08C              dockingdraw_rowsize     equ $-dockingdraw_table
  34+ C08C 7C 3E 08 04                          DB $7C,$3E, $08,$04, $00
  34+ C090 00
  35+ C091 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $00
  35+ C095 00
  36+ C096 78 3C 10 08                          DB $78,$3C, $10,$08, $04
  36+ C09A 04
  37+ C09B 76 3B 14 0A                          DB $76,$3B, $14,$0A, $04
  37+ C09F 04
  38+ C0A0 74 3A 18 0C                          DB $74,$3A, $18,$0C, $04
  38+ C0A4 04
  39+ C0A5 70 38 20 10                          DB $70,$38, $20,$10, $21
  39+ C0A9 21
  40+ C0AA 6C 36 28 14                          DB $6C,$36, $28,$14, $21            ; Black Blue
  40+ C0AE 21
  41+ C0AF 68 34 30 18                          DB $68,$34, $30,$18, $21
  41+ C0B3 21
  42+ C0B4 64 32 38 1C                          DB $64,$32, $38,$1C, $25
  42+ C0B8 25
  43+ C0B9 60 30 40 20                          DB $60,$30, $40,$20, $25
  43+ C0BD 25
  44+ C0BE 5C 2E 48 24                          DB $5C,$2E, $48,$24, $25            ; Dark Blue
  44+ C0C2 25
  45+ C0C3 58 2C 50 28                          DB $58,$2C, $50,$28, $25
  45+ C0C7 25
  46+ C0C8 54 2A 58 2C                          DB $54,$2A, $58,$2C, $25
  46+ C0CC 25
  47+ C0CD 50 28 60 30                          DB $50,$28, $60,$30, $4C
  47+ C0D1 4C
  48+ C0D2 4C 26 68 34                          DB $4C,$26, $68,$34, $4C
  48+ C0D6 4C
  49+ C0D7 46 23 74 3A                          DB $46,$23, $74,$3A, $4C
  49+ C0DB 4C
  50+ C0DC 40 20 80 40                          DB $40,$20, $80,$40, $4C
  50+ C0E0 4C
  51+ C0E1 38 1C 90 48                          DB $38,$1C, $90,$48, $6D            ;Very Dark Blue
  51+ C0E5 6D
  52+ C0E6 30 18 A0 50                          DB $30,$18, $A0,$50, $6D
  52+ C0EA 6D
  53+ C0EB 26 13 B4 5A                          DB $26,$13, $B4,$5A, $6D
  53+ C0EF 6D
  54+ C0F0 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $6D
  54+ C0F4 6D
  55+ C0F5 10 08 E0 70                          DB $10,$08, $E0,$70, $92            ;Black
  55+ C0F9 92
  56+ C0FA 02 01 FC 7E                          DB $02,$01, $FC,$7E, $92
  56+ C0FE 92
  57+ C0FF FF                                   DB $FF
  58+ C100
  59+ C100              dockingtablesize         EQU ($ - dockingdraw_table)/dockingdraw_rowsize
  60+ C100
  61+ C100              init_countdown          EQU $FF
  62+ C100 00           launch_countdown        DB  $0000
  63+ C101 0E C0        launch_table_idx        DW launchdraw_table
  64+ C103 87 C0        docking_table_idx       DW dockingdraw_table
  65+ C105 00           current_offsetX         db 0
  66+ C106 00           current_offsetY         db 0
  67+ C107
  68+ C107
  69+ C107              LaunchTubeEdges         MMUSelectLayer2
  69+ C107 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  70+ C10B 01 00 00                             ld      bc,$0000
  71+ C10E 11 92 01                             ld      de,$0192
  72+ C111 78           .drawLoop1              ld      a,b
  73+ C112 FE 80                                cp      128
  74+ C114 28 25                                jr      z,.DoneEdge
  75+ C116 F5                                   push    af
  76+ C117 C5 D5 C5 D5                          push    bc,,de,,bc,,de
  77+ C11B CD 77 E4                             call    l2_draw_horz_dma_bank           ;"bc = left side row,col, d = length, e = color"
  78+ C11E D1 C1                                pop     bc,,de
  79+ C120 3E FF                                ld      a,$FF
  80+ C122 92                                   sub     d
  81+ C123 4F                                   ld      c,a
  82+ C124 0C                                   inc     c
  83+ C125 CD 77 E4                             call    l2_draw_horz_dma_bank
  84+ C128 D1 C1                                pop     bc,,de
  85+ C12A 78                                   ld      a,b
  86+ C12B FE 40                                cp      64
  87+ C12D 30 06                                jr      nc,.ReduceLoop
  88+ C12F 14                                   inc     d
  89+ C130 14                                   inc     d
  90+ C131 F1                                   pop     af
  91+ C132 04                                   inc     b
  92+ C133 18 DC                                jr      .drawLoop1
  93+ C135 15           .ReduceLoop:            dec     d
  94+ C136 15                                   dec     d
  95+ C137 F1                                   pop     af
  96+ C138 04                                   inc     b
  97+ C139 18 D6                                jr      .drawLoop1
  98+ C13B 3E 80        .DoneEdge:              ld      a,$80
  99+ C13D 01 00 00                             ld      bc,$0000                        ; Top Left
 100+ C140 11 FF 80                             ld      de,$80FF                        ; Bottom Right
 101+ C143 CD D6 E9                             call    l2_draw_diagonal
 102+ C146 3E 80                                ld      a,$80
 103+ C148 01 00 80                             ld      bc,$8000                        ; Botom Left
 104+ C14B 11 FF 00                             ld      de,$00FF                        ; Top Right
 105+ C14E CD D6 E9                             call    l2_draw_diagonal
 106+ C151
 107+ C151 01 00 00                             ld      bc,$0000
 108+ C154 11 80 00                             ld      DE,$0080
 109+ C157 26 60                                ld      h,$60
 110+ C159 2E 55                                ld      l,$55
 111+ C15B C9                                   ret
 112+ C15C
 113+ C15C              LaunchConsole:          MMUSelectConsoleBank                    ; Draw Console
 113+ C15C ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
 114+ C160 21 00 50                             ld      hl,ScreenL1Bottom
 115+ C163 11 00 E0                             ld      de,ConsoleImageData
 116+ C166 01 00 08                             ld      bc, ScreenL1BottomLen
 117+ C169 CD 2A 7E                             call    memcopy_dma
 118+ C16C 21 00 5A                             ld      hl,ScreenL1AttrBtm       ; now the pointers are in UBnk its easy to read
 119+ C16F 11 00 E8                             ld      de,ConsoleAttributes
 120+ C172 01 00 01                             ld      bc, ScreenL1AttrBtmLen
 121+ C175 CD 2A 7E                             call    memcopy_dma
 122+ C178 C9                                   ret
 123+ C179
 124+ C179              CoriloisStation         equ     13
 125+ C179
 126+ C179
 127+ C179              draw_launch_ship:       MMUSelectLayer1
 127+ C179 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 128+ C17D CD 8F E0                             call    l1_cls
 129+ C180 CD A9 E0                             call    l1_attr_cls
 130+ C183                                      MMUSelectSpriteBank
 130+ C183 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 131+ C187 CD 6E E5                             call    sprite_cls_cursors
 132+ C18A                                      MMUSelectLayer2
 132+ C18A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 133+ C18E CD 04 E0                             call    asm_l2_double_buffer_on
 134+ C191 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 135+ C193 32 38 E1                             ld      (l2_cls_byte),a
 136+ C196 CD 77 E1                             call    l2_set_color_upper2
 137+ C199 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 138+ C19B 32 38 E1                             ld      (l2_cls_byte),a
 139+ C19E CD DE E1                             call    l2_cls_lower_third
 140+ C1A1 CD 07 C1                             call    LaunchTubeEdges
 141+ C1A4 CD 5C C1                             call    LaunchConsole
 142+ C1A7              .NextBuffer:            MMUSelectLayer2
 142+ C1A7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 143+ C1AB CD 97 E2                             call    l2_flip_buffers
 144+ C1AE 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 145+ C1B0 32 38 E1                             ld      (l2_cls_byte),a
 146+ C1B3 CD 77 E1                             call    l2_set_color_upper2
 147+ C1B6 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 148+ C1B8 32 38 E1                             ld      (l2_cls_byte),a
 149+ C1BB CD DE E1                             call    l2_cls_lower_third
 150+ C1BE CD 07 C1                             call    LaunchTubeEdges
 151+ C1C1 CD 5C C1                             call    LaunchConsole
 152+ C1C4 3E FF        .SetUpTimers:           ld      a,init_countdown
 153+ C1C6 32 00 C1                             ld      (launch_countdown),a
 154+ C1C9 21 0E C0                             ld      hl,launchdraw_table
 155+ C1CC 22 01 C1                             ld      (launch_table_idx),hl
 156+ C1CF AF                                   xor     a
 157+ C1D0 32 05 C1                             ld      (current_offsetX),a
 158+ C1D3 32 06 C1                             ld      (current_offsetY),a
 159+ C1D6              .SetupGalaxy:           MaxThrottle
 159+ C1D6 3A 6A 7F    >                        ld      a,(SHIPMAXSPEED)
 159+ C1D9 32 6B 7F    >                        ld      (DELTA),a
 159+ C1DC 57          >                        ld      d,a
 159+ C1DD 1E 04       >                        ld      e,4
 159+ C1DF ED 30       >                        mul
 159+ C1E1 ED 53 6C 7F >                        ld      (DELT4Lo),de
 160+ C1E5                                      ZeroThrottle; DEBUG
 160+ C1E5 AF          >                        xor     a
 160+ C1E6 32 6B 7F    >                        ld      (DELTA),a
 160+ C1E9 32 6C 7F    >                        ld      (DELT4Lo),a
 160+ C1EC 32 6D 7F    >                        ld      (DELT4Lo+1),a
 161+ C1EF              ; To launch we need to set docked flag to transition FE and at teh end of the transition set to FD to rebuild universe
 162+ C1EF 3E FE                                ld      a,StateInTransition
 163+ C1F1 32 33 81                             ld      (DockedFlag),a
 164+ C1F4 C9                                   ret
 165+ C1F5
 166+ C1F5
 167+ C1F5 DD 01        draw_docking_ship:      break
 168+ C1F7                                      MMUSelectLayer1
 168+ C1F7 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 169+ C1FB CD 8F E0                             call    l1_cls
 170+ C1FE CD A9 E0                             call    l1_attr_cls
 171+ C201                                      MMUSelectSpriteBank
 171+ C201 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 172+ C205 CD 6E E5                             call    sprite_cls_cursors
 173+ C208                                      MMUSelectLayer2
 173+ C208 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 174+ C20C CD 04 E0                             call    asm_l2_double_buffer_on
 175+ C20F 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 176+ C211 32 38 E1                             ld      (l2_cls_byte),a
 177+ C214 CD 77 E1                             call    l2_set_color_upper2
 178+ C217 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 179+ C219 32 38 E1                             ld      (l2_cls_byte),a
 180+ C21C CD DE E1                             call    l2_cls_lower_third
 181+ C21F CD 07 C1                             call    LaunchTubeEdges
 182+ C222 CD 5C C1                             call    LaunchConsole
 183+ C225              .NextBuffer:            MMUSelectLayer2
 183+ C225 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 184+ C229 CD 97 E2                             call    l2_flip_buffers
 185+ C22C 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 186+ C22E 32 38 E1                             ld      (l2_cls_byte),a
 187+ C231 CD 77 E1                             call    l2_set_color_upper2
 188+ C234 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 189+ C236 32 38 E1                             ld      (l2_cls_byte),a
 190+ C239 CD DE E1                             call    l2_cls_lower_third
 191+ C23C CD 07 C1                             call    LaunchTubeEdges
 192+ C23F CD 5C C1                             call    LaunchConsole
 193+ C242 3E FF        .SetUpTimers:           ld      a,init_countdown
 194+ C244 32 00 C1                             ld      (launch_countdown),a
 195+ C247 21 87 C0                             ld      hl,dockingdraw_table
 196+ C24A 22 03 C1                             ld      (docking_table_idx),hl
 197+ C24D AF                                   xor     a
 198+ C24E 32 05 C1                             ld      (current_offsetX),a
 199+ C251 32 06 C1                             ld      (current_offsetY),a
 200+ C254 AF           .SetupGalaxy:           xor     a ; palcehodler as it would cause next macro to fail re initialise all universe banks
 201+ C255                                      ZeroThrottle
 201+ C255 AF          >                        xor     a
 201+ C256 32 6B 7F    >                        ld      (DELTA),a
 201+ C259 32 6C 7F    >                        ld      (DELT4Lo),a
 201+ C25C 32 6D 7F    >                        ld      (DELT4Lo+1),a
 202+ C25F 3E FF                                ld      a,StatePlayerDocked
 203+ C261 32 33 81                             ld      (DockedFlag),a ; we don't kill off shipts as we kill them on launch
 204+ C264 C9                                   ret
 205+ C265
 206+ C265 CD 07 C1     loop_launch_ship:       call    LaunchTubeEdges
 207+ C268 3E FF                                ld      a,init_countdown
 208+ C26A 32 00 C1                             ld      (launch_countdown),a
 209+ C26D 2A 01 C1                             ld      hl,(launch_table_idx)
 210+ C270 4E                                   ld      c,(hl)
 211+ C271 79                                   ld      a,c
 212+ C272 FE FF                                cp      $FF
 213+ C274 28 1E                                jr      z,.FinishedLaunch
 214+ C276 23                                   inc     hl
 215+ C277 46                                   ld      b,(hl)                 ; bc = top left
 216+ C278 23                                   inc     hl
 217+ C279 5E                                   ld      e,(hl)
 218+ C27A 23                                   inc     hl
 219+ C27B 56                                   ld      d,(hl)                 ;de = width and height
 220+ C27C 23                                   inc     hl
 221+ C27D 7E                                   ld      a,(hl)                 ; a = colour
 222+ C27E 23                                   inc     hl
 223+ C27F 22 01 C1                             ld      (launch_table_idx),hl
 224+ C282 67                                   ld      h,a
 225+ C283 C5 D5                                push    bc,,de
 226+ C285                                      MMUSelectLayer2
 226+ C285 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 227+ C289 CD E9 E3                             call    l2_draw_fill_box        ; ; "l2_draw_fill_box bc=rowcol, de=heightwidth h=color"
 228+ C28C D1 C1                                pop     bc,,de
 229+ C28E 3E 80                                ld      a,$80
 230+ C290 CD F9 E3                             call    l2_draw_box             ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
 231+ C293 C9                                   ret
 232+ C294 3E FD        .FinishedLaunch:        ld      a,StateCompletedLaunch  ; now seed that we need a universe rebuild post launch
 233+ C296 32 33 81                             ld      (DockedFlag),a
 234+ C299 C9                                   ret
 235+ C29A
 236+ C29A CD 07 C1     loop_docking_ship:      call    LaunchTubeEdges
 237+ C29D 3E FF                                ld      a,init_countdown
 238+ C29F 32 00 C1                             ld      (launch_countdown),a
 239+ C2A2 2A 03 C1                             ld      hl,(docking_table_idx)
 240+ C2A5 4E                                   ld      c,(hl)
 241+ C2A6 79                                   ld      a,c
 242+ C2A7 FE FF                                cp      $FF
 243+ C2A9 28 1E                                jr      z,.FinishedDocking
 244+ C2AB 23                                   inc     hl
 245+ C2AC 46                                   ld      b,(hl)                 ; bc = top left
 246+ C2AD 23                                   inc     hl
 247+ C2AE 5E                                   ld      e,(hl)
 248+ C2AF 23                                   inc     hl
 249+ C2B0 56                                   ld      d,(hl)                 ;de = width and height
 250+ C2B1 23                                   inc     hl
 251+ C2B2 7E                                   ld      a,(hl)
 252+ C2B3 23                                   inc     hl
 253+ C2B4 22 03 C1                             ld      (docking_table_idx),hl
 254+ C2B7 67                                   ld      h,a
 255+ C2B8 C5 D5                                push    bc,,de
 256+ C2BA                                      MMUSelectLayer2
 256+ C2BA ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 257+ C2BE CD E9 E3                             call    l2_draw_fill_box
 258+ C2C1 D1 C1                                pop     bc,,de
 259+ C2C3 3E 80                                ld      a,$80
 260+ C2C5 CD F9 E3                             call    l2_draw_box
 261+ C2C8 C9                                   ret
 262+ C2C9              .FinishedDocking        ForceTransition ScreenStatus              ; Force move to status screen
 262+ C2C9 3E 04       >                        ld      a,ScreenStatus
 262+ C2CB 32 8C 6A    >                        ld      (ScreenTransitionForced), a
 263+ C2CE C9                                   ret
 264+ C2CF
 265+ C2CF
 266+ C2CF
# file closed: ./Transitions/launch_ship.asm
1011  C2CF                                  DISPLAY "Bank ",BankLaunchShip," - Bytes free ",/D, $2000 - ($-LaunchShipAddr), " - BankLaunchShip"
1012  C2CF                                  ASSERT $-LaunchShipAddr <8912 , Bank code leaks over 8K boundary
1013  C2CF              ; Bank 70  ------------------------------------------------------------------------------------------------------------------------
1014  C2CF                                  DISPLAY "FYI:Universe Bank 0 at slot ", BankUNIVDATA0
1015  C2CF                                  SLOT    UniverseBankAddr
1016  C2CF                                  PAGE    BankUNIVDATA0
1017  C2CF                                  ORG	    UniverseBankAddr,BankUNIVDATA0
1018  C000                                  INCLUDE "./Universe/Ships/univ_ship_data.asm"
# file opened: ./Universe/Ships/univ_ship_data.asm
   1+ C000              ;    DEFINE DEBUGMISSILELAUNCH 1
   2+ C000              ;    DEFINE PLOTPOINTSONLY 1
   3+ C000              ;   DEFINE OVERLAYNODES 1
   4+ C000              ; In  flight ship data tables
   5+ C000              ; In  flight ship data tables
   6+ C000              ; There can be upto &12 objects in flight.
   7+ C000              ; To avoid hassle of memory heap managment, the free list
   8+ C000              ; will correspond to a memory bank offset so data will be held in
   9+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
  10+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
  11+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
  12+ C000              ; This means each gets its own line list, inwork etc
  13+ C000
  14+ C000              ; "Runtime Ship Data paged into in Bank 7"
  15+ C000              ;                       1234567890123456
  16+ C000 55 6E 69 76  StartOfUniv:        DB "Universe PG"
  16+ C004 65 72 73 65
  16+ C008 20 50 47
  17+ C00B 58           StartOfUnivN:       DB "X"
  18+ C00C 00 00        StartOfUnivPad:     DS 2
  19+ C00E 00           StartOfUnivM:       DB 0
  20+ C00F 00           StartOfUnivT        DB 0
  21+ C010 00 00 00...  StartOfUnivName     DS 16
  22+ C020              ; NOTE we can cheat and pre allocate segs just using a DS for now
  23+ C020
  24+ C020              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  25+ C020              ; Universe map substibute for INWK
  26+ C020              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  27+ C020                                     INCLUDE "./Universe/Ships/AIRuntimeData.asm"
# file opened: ././Universe/Ships/AIRuntimeData.asm
   1++C020              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C020              ;--NOTE POSTITION AND MATRIX are loaded by a single LDIR in cases so must be contiguous
   3++C020              StartOfShipRuntimeData      EQU $
   4++C020 00           UBnkxlo                     DB  0                       ; INWK+0
   5++C021 00           UBnkxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   6++C022 00           UBnkxsgn                    DB  0                       ; INWK+2
   7++C023 00           UBnkylo                     DB  0                       ; INWK+3 \ ylo
   8++C024 00           UBnkyhi                     DB  0                       ; INWK+4 \ yHi
   9++C025 00           UBnkysgn                    DB  0                       ; INWK +5
  10++C026 00           UBnkzlo                     DB  0                       ; INWK +6
  11++C027 00           UBnkzhi                     DB  0                       ; INWK +7
  12++C028 00           UBnkzsgn                    DB  0                       ; INWK +8
  13++C029              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
  14++C029              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
  15++C029              ; Note they seem to have to be after camera position not quite found why yet, can only assume it does an iy or ix indexed copy? Bu oddly does not affect space station.
  16++C029 00 00        UBnkrotmatSidevX            DW  0                       ; INWK +21
  17++C02B              UBnkrotmatSidev             equ UBnkrotmatSidevX
  18++C02B 00 00        UBnkrotmatSidevY            DW  0                       ; INWK +23
  19++C02D 00 00        UBnkrotmatSidevZ            DW  0                       ; INWK +25
  20++C02F 00 00        UBnkrotmatRoofvX            DW  0                       ; INWK +15
  21++C031              UBnkrotmatRoofv             equ UBnkrotmatRoofvX
  22++C031 00 00        UBnkrotmatRoofvY            DW  0                       ; INWK +17
  23++C033 00 00        UBnkrotmatRoofvZ            DW  0                       ; INWK +19
  24++C035 00 00        UBnkrotmatNosevX            DW  0                       ; INWK +9
  25++C037              UBnkrotmatNosev             EQU UBnkrotmatNosevX
  26++C037 00 00        UBnkrotmatNosevY            DW  0                       ; INWK +11
  27++C039 00 00        UBnkrotmatNosevZ            DW  0                       ; INWK +13
  28++C03B              ; -- Note these must be here for initialise blast as it does a 12 byte ldir
  29++C03B              ; . Note missile explosion will have to have logic to cause linger if a blast is to be enqued
  30++C03B 00           UBnkMissileBlastRange:      DB  0                       ; copied in when setting up a missile
  31++C03C 00           UBnkMissileBlastDamage:     DB  0                       ; copied in when setting up a missile
  32++C03D 00           UBnkMissileDetonateRange:   DB  0                       ; copied in when setting up a missile, allows for proximity missiles
  33++C03E 00           UBnkMissileDetonateDamage:  DB  0                       ; copied in when setting up a missile
  34++C03F              ; -- Metadata for ship to help with bank managment
  35++C03F              UBnkStartOfRuntimeData:
  36++C03F 00           UBnkSlotNumber              DB  0
  37++C040 00           UBnkShipUnivBankNbr         DB  0                       ; Present ship universe bank number
  38++C041 00           UBnkShipModelBank           DB  0                       ; Bank nbr ship was from
  39++C042 00           UBnkShipModelNbr            DB  0                       ; Ship Id with in the bank
  40++C043 00           UBnkShipModelId             DB  0                       ; Absolute ship id
  41++C044              ; -- Ship AI data
  42++C044 00           UBnkMissleHitToProcess      DB  0                       ; This is used for enquing missle blasts as we can only do one missile at a time, could make it multi but neeed to smooth CPU usage
  43++C045 00           UBnkMissileTarget           DB  0                       ; This is the ship slot number for the target from 0 to n if the missile is not hostile to us, if the target is $FF then its us
  44++C046 00           UBnkSpeed                   DB  0                       ; INWK +27
  45++C047 00           UBnkAccel                   DB  0                       ; INWK +28
  46++C048 00           UBnkRotXCounter             DB  0                       ; INWK +29
  47++C049 00           UBnkRotYCounter             DB  0                       ; INWK +29
  48++C04A 00           UBnkRotZCounter             DB  0                       ; INWK +30
  49++C04B 00           UBnkRAT                     DB  0                       ; temporary for rotation magnitude or roll counter, for debugging state
  50++C04C 00           UBnkRAT2                    DB  0                       ; temporary for rotation threshold
  51++C04D 00           UBnkCNT                     DB  0                       ; temp for calculating roll and pitch
  52++C04E 00           UBnkCNT2                    DB  0                       ; roll threshold, max angle boynd ship will slow down
  53++C04F 00           univRAT                     DB  0               ; 99
  54++C050 00           univRAT2                    DB  0               ; 9A
  55++C051 00           univRAT2Val                 DB  0               ; 9A
  56++C052 00           UBnkexplDsp                 DB  0                       ; INWK +31 clear exploding/display state|missiles
  57++C053 00           UBnkDrawAllFaces            DB  0
  58++C054 00           UBnkShipAggression          DB  0                       ; calculated agression factor
  59++C055 00           UBnkaiatkecm                DB  0                       ; INWK +32 ai_attack_univ_ecm i.e. AI type
  60++C056 00           UBnkSpawnObject             DB  0
  61++C057 00           UBnkCam0yLo                 DB  0                       ; INWK +33 ????
  62++C058 00           UBnkCam0yHi                 DB  0                       ; INWK +34?????
  63++C059 00           UBnkEnergy                  DB  0                       ; INWK +35
  64++C05A 00           UBnkECMCountDown            DB  0                       ; counts down ECM usage if activated reducing energy too in update loop
  65++C05B 00           UBnkECMFitted               DB  0                       ; Does ship have ECM, true false
  66++C05C 00           UBnkLaserPower              DB  0                       ; Type of laser fitted
  67++C05D 00           UBnkMissilesLeft            DB  0
  68++C05E 00           UBnkFighterShipId           DB  0                       ; computed ship Id for any carriers
  69++C05F 00           UBnkFightersLeft            DB  0                       ; the number of ships left in hanger, 255 = infinite
  70++C060 00           UBnkCloudCounter            DB  0                       ; cloud pixels
  71++C061 00           UBnkCloudRadius             DB  0                       ; cloud pixels
  72++C062              UBnkRuntimeSize             EQU $-UBnkStartOfRuntimeData
  73++C062              ; Flags work as follows:
  74++C062              ; UBnkSpawnObject - signals on death to spawn cargo items
  75++C062              ; 0 -                   Spawn Cargo 1
  76++C062              ; 1 -                   Spawn Cargo 2
  77++C062              ; 2 -                   Spawn Cargo 3
  78++C062              ; 3 -                   Spawn Cargo 4
  79++C062              ; 4 -                   Spawn Alloy 1
  80++C062              ; 5 -                   Spawn Alloy 2
  81++C062              ; 6 -                   Spawn Alloy 3
  82++C062              ; 7 -                   Spawn Alloy 4
  83++C062
  84++C062              ; UBnkaiatkecm
  85++C062              ; Bit	                Description
  86++C062              ; 7 -                   AI Enabled Flag
  87++C062              ; 6 -                   Ship Visible = ShipOnScreen/NotCloaked (cleared or set by check visible or cloaking override)
  88++C062              ; 5 -                   Ship is exploding if set, note if its a missile and one already equeued this will have to linger
  89++C062              ;                       linger can be done by not erasing ship unit missile equeue handled
  90++C062              ; 4 -                   Ship marked as exploded, cleared once aknowledged then bit 5 takes over and UBnkCloudCounter
  91++C062              ; 3 -                   Display state - Plot as a Dot
  92++C062              ; 2 -                   Nbr of Missiles bit 2
  93++C062              ; 1 -                   Nbr of Missiles bit 1
  94++C062              ; 0 -                   ECM present flag
  95++C062              ; ShipNewBitsAddr (in blueprint)
  96++C062              ;Bit	                Description
  97++C062              ;#0	Trader flag         * 0 = not a trader  * 1 = trader
  98++C062              ;                       80% of traders are peaceful and mind their own business plying their trade between the planet and space station, but 20% of them moonlight as bounty hunters (see bit #1)
  99++C062              ;                       Ships that are traders: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
 100++C062              ;#1 Bounty hunter flag  * 0 = not a bounty hunter* 1 = bounty hunter
 101++C062              ;                       If we are a fugitive or a serious offender and we bump into a bounty hunter, they will become hostile and attack us (see bit #2)
 102++C062              ;                       Ships that are bounty hunters: Viper, Fer-de-lance
 103++C062              ;#2	Hostile flag        * 0 = not hostile  * 1 = hostile
 104++C062              ;                       Hostile ships will attack us on sight; there are quite a few of them
 105++C062              ;                       Ships that are hostile: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Worm, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid, Thargon, Constrictor
 106++C062              ;#3	Pirate flag         * 0 = not a pirate * 1 = pirate
 107++C062              ;                       Hostile pirates will attack us on sight, but once we get inside the space station safe zone, they will stop
 108++C062              ;                       Ships that are pirates: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid
 109++C062              ;#4	Docking flag        * 0 = not docking * 1 = docking
 110++C062              ;                       Traders with their docking flag set fly towards the space station to try to dock, otherwise they aim for the planet
 111++C062              ;                       This flag is randomly set for traders when they are spawned
 112++C062              ;                       Ships that can be docking: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
 113++C062              ;#5	Innocent bystander  * 0 = normal * 1 = innocent bystander
 114++C062              ;                       If we attack an innocent ship within the space station safe zone, then the station will get angry with us and start spawning cops
 115++C062              ;                       Ships that are innocent bystanders: Shuttle, Transporter, Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Cougar
 116++C062              ;#6	Cop flag            * 0 = not a cop * 1 = cop
 117++C062              ;                       If we destroy a cop, then we instantly become a fugitive (the Transporter isn't actually a cop, but it's clearly under police protection)
 118++C062              ;                       Ships that are cops: Viper, Transporter
 119++C062              ;#7	Scooped, docked, escape pod flag
 120++C062              ;                       For spawned ships, this flag indicates that the ship been scooped or has docked (bit 7 is always clear on spawning)
 121++C062              ;                       For blueprints, this flag indicates whether the ship type has an escape pod fitted, so it can launch it when in dire straits
 122++C062              ;                       Ships that have escape pods: Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Viper, Mamba, Krait, Adder, Cobra Mk I, Cobra Mk III (pirate), Asp Mk II, Python (pirate), Fer-de-lance
 123++C062
# file closed: ././Universe/Ships/AIRuntimeData.asm
  28+ C062              ; moved to runtime asm
  29+ C062              ;                        INCLUDE "./Universe/Ships/ShipPosVars.asm"
  30+ C062              ;                        INCLUDE "./Universe/Ships/RotationMatrixVars.asm"
  31+ C062
  32+ C062              ; Orientation Matrix [nosev x y z ] nose vector ( forward) 19 to 26
  33+ C062              ;                    [roofv x y z ] roof vector (up)
  34+ C062              ;                    [sidev x y z ] side vector (right)
  35+ C062              ;;rotXCounter                 equ UBnkrotXCounter         ; INWK +29
  36+ C062              ;;rotZCounter                 equ UBnkrotZCounter         ; INWK +30UBnkDrawCam0xLo   DB  0               ; XX18+0
  37+ C062
  38+ C062
  39+ C062                                      INCLUDE "./Universe/Ships/XX16Vars.asm"
# file opened: ././Universe/Ships/XX16Vars.asm
   1++C062              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C062 00 00        UBnkTransmatSidevX          DW  0               ; XX16+0
   3++C064              UBnkTransmatSidev           EQU UBnkTransmatSidevX
   4++C064 00 00        UBnkTransmatSidevY          DW 0                ; XX16+2
   5++C066 00 00        UBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C068 00 00        UBnkTransmatRoofvX          DW 0
   7++C06A              UBnkTransmatRoofv           EQU UBnkTransmatRoofvX
   8++C06A 00 00        UBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C06C 00 00        UBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C06E 00 00        UBnkTransmatNosevX          DW 0
  11++C070              UBnkTransmatNosev           EQU UBnkTransmatNosevX
  12++C070 00 00        UBnkTransmatNosevY          DW 0                ; XX16+2
  13++C072 00 00        UBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C074 00 00        UBnkTransmatTransX          DW 0
  15++C076 00 00        UBnkTransmatTransY          DW 0
  16++C078 00 00        UBnkTransmatTransZ          DW 0
  17++C07A              XX16                        equ UBnkTransmatSidev
  18++C07A              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C07A 00 00        UBnkTransInvRow0x0          DW 0
  20++C07C 00 00        UBnkTransInvRow0x1          DW 0
  21++C07E 00 00        UBnkTransInvRow0x2          DW 0
  22++C080 00 00        UBnkTransInvRow0x3          DW 0
  23++C082 00 00        UBnkTransInvRow1y0          DW 0
  24++C084 00 00        UBnkTransInvRow1y1          DW 0
  25++C086 00 00        UBnkTransInvRow1y2          DW 0
  26++C088 00 00        UBnkTransInvRow1y3          DW 0
  27++C08A 00 00        UBnkTransInvRow2z0          DW 0
  28++C08C 00 00        UBnkTransInvRow2z1          DW 0
  29++C08E 00 00        UBnkTransInvRow2z2          DW 0
  30++C090 00 00        UBnkTransInvRow2z3          DW 0
  31++C092
  32++C092              XX16Inv             equ UBnkTransInvRow0x0
  33++C092
# file closed: ././Universe/Ships/XX16Vars.asm
  40+ C092                                      INCLUDE "./Universe/Ships/XX25Vars.asm"
# file opened: ././Universe/Ships/XX25Vars.asm
   1++C092              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C092 00           UBnkProjxLo                 DB  0
   3++C093 00           UBnkProjxHi                 DB  0
   4++C094 00           UBnkProjxSgn                DB  0
   5++C095              UBnkProjx                   EQU UBnkProjxLo
   6++C095 00           UBnkProjyLo                 DB  0
   7++C096 00           UBnkProjyHi                 DB  0
   8++C097 00           UBnkProjySgn                DB  0
   9++C098              UBnkProjy                   EQU UBnkProjyLo
  10++C098 00           UBnkProjzLo                 DB  0
  11++C099 00           UBnkProjzHi                 DB  0
  12++C09A 00           UBnkProjzSgn                DB  0
  13++C09B              UBnkProjz                   EQU UBnkProjzLo
  14++C09B              XX25                        EQU UBnkProjxLo
  15++C09B
# file closed: ././Universe/Ships/XX25Vars.asm
  41+ C09B                                      INCLUDE "./Universe/Ships/XX18Vars.asm"
# file opened: ././Universe/Ships/XX18Vars.asm
   1++C09B              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C09B 00           UBnkDrawCam0xLo             DB  0               ; XX18+0
   3++C09C 00           UBnkDrawCam0xHi             DB  0               ; XX18+1
   4++C09D 00           UBnkDrawCam0xSgn            DB  0               ; XX18+2
   5++C09E              UBnkDrawCam0x               equ UBnkDrawCam0xLo
   6++C09E 00           UBnkDrawCam0yLo             DB  0               ; XX18+3
   7++C09F 00           UBnkDrawCam0yHi             DB  0               ; XX18+4
   8++C0A0 00           UBnkDrawCam0ySgn            DB  0               ; XX18+5
   9++C0A1              UBnkDrawCam0y               equ UBnkDrawCam0yLo
  10++C0A1 00           UBnkDrawCam0zLo             DB  0               ; XX18+6
  11++C0A2 00           UBnkDrawCam0zHi             DB  0               ; XX18+7
  12++C0A3 00           UBnkDrawCam0zSgn            DB  0               ; XX18+8
  13++C0A4              UBnkDrawCam0z               equ UBnkDrawCam0zLo
  14++C0A4              XX18                        equ UBnkDrawCam0xLo
  15++C0A4
# file closed: ././Universe/Ships/XX18Vars.asm
  42+ C0A4
  43+ C0A4              ; Used to make 16 bit reads a little cleaner in source code
  44+ C0A4 00 00 00     UBnkZPoint                  DS  3
  45+ C0A7              UBnkZPointLo                equ UBnkZPoint
  46+ C0A7              UBnkZPointHi                equ UBnkZPoint+1
  47+ C0A7              UBnkZPointSign              equ UBnkZPoint+2
  48+ C0A7                                      INCLUDE "./Universe/Ships/XX15Vars.asm"
# file opened: ././Universe/Ships/XX15Vars.asm
   1++C0A7              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C0A7 00           UBnkXScaled                 DB  0               ; XX15+0Xscaled
   3++C0A8 00           UBnkXScaledSign             DB  0               ; XX15+1xsign
   4++C0A9 00           UBnkYScaled                 DB  0               ; XX15+2yscaled
   5++C0AA 00           UBnkYScaledSign             DB  0               ; XX15+3ysign
   6++C0AB 00           UBnkZScaled                 DB  0               ; XX15+4zscaled
   7++C0AC 00           UBnkZScaledSign             DB  0               ; XX15+5zsign
   8++C0AD
   9++C0AD              XX15                        equ UBnkXScaled
  10++C0AD              XX15VecX                    equ XX15
  11++C0AD              XX15VecY                    equ XX15+1
  12++C0AD              XX15VecZ                    equ XX15+2
  13++C0AD              UBnkXPoint                  equ XX15
  14++C0AD              UBnkXPointLo                equ XX15+0
  15++C0AD              UBnkXPointHi                equ XX15+1
  16++C0AD              UBnkXPointSign              equ XX15+2
  17++C0AD              UBnkYPoint                  equ XX15+3
  18++C0AD              UBnkYPointLo                equ XX15+3
  19++C0AD              UBnkYPointHi                equ XX15+4
  20++C0AD              UBnkYPointSign              equ XX15+5
  21++C0AD              ; Repurposed XX15 pre clip plines
  22++C0AD              UBnkPreClipX1               equ XX15+0
  23++C0AD              UBnkPreClipY1               equ XX15+2
  24++C0AD              UBnkPreClipX2               equ XX15+4
  25++C0AD              UBnkPreClipY2               equ XX15+6
  26++C0AD              ; Repurposed XX15 post clip lines
  27++C0AD              UBnkNewX1                   equ XX15+0
  28++C0AD              UBnkNewY1                   equ XX15+1
  29++C0AD              UBnkNewX2                   equ XX15+2
  30++C0AD              UBnkNewY2                   equ XX15+3
  31++C0AD              ; Repurposed XX15
  32++C0AD              regXX15fx                   equ UBnkXScaled
  33++C0AD              regXX15fxSgn                equ UBnkXScaledSign
  34++C0AD              regXX15fy                   equ UBnkYScaled
  35++C0AD              regXX15fySgn                equ UBnkYScaledSign
  36++C0AD              regXX15fz                   equ UBnkZScaled
  37++C0AD              regXX15fzSgn                equ UBnkZScaledSign
  38++C0AD              ; Repurposed XX15
  39++C0AD              varX1                       equ UBnkXScaled       ; Reused, verify correct position
  40++C0AD              varY1                       equ UBnkXScaledSign   ; Reused, verify correct position
  41++C0AD              varZ1                       equ UBnkYScaled       ; Reused, verify correct position
  42++C0AD              ; After clipping the coords are two 8 bit pairs
  43++C0AD              UBnkPoint1Clipped           equ UBnkXScaled
  44++C0AD              UBnkPoint2Clipped           equ UBnkYScaled
  45++C0AD              ; Repurposed XX15 when plotting lines
  46++C0AD              ; Repurposed XX15 before calling clip routine
  47++C0AD              UBnkX1                      equ XX15
  48++C0AD              UBnkx1Lo                    equ XX15
  49++C0AD              UBnkx1Hi                    equ XX15+1
  50++C0AD              UBnkY1                      equ XX15+2
  51++C0AD              UBnky1Lo                    equ XX15+2
  52++C0AD              UBnkY1Hi                    equ XX15+3
  53++C0AD              UBnkX2                      equ XX15+4
  54++C0AD              UBnkX2Lo                    equ XX15+4
  55++C0AD              UBnkX2Hi                    equ XX15+5
  56++C0AD
# file closed: ././Universe/Ships/XX15Vars.asm
  49+ C0AD                                      INCLUDE "./Universe/Ships/XX12Vars.asm"
# file opened: ././Universe/Ships/XX12Vars.asm
   1++C0AD              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C0AD              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C0AD 00           UBnkXX12xLo                 DB  0               ; XX12+0
   4++C0AE 00           UBnkXX12xSign               DB  0               ; XX12+1
   5++C0AF 00           UBnkXX12yLo                 DB  0               ; XX12+2
   6++C0B0 00           UBnkXX12ySign               DB  0               ; XX12+3
   7++C0B1 00           UBnkXX12zLo                 DB  0               ; XX12+4
   8++C0B2 00           UBnkXX12zSign               DB  0               ; XX12+5
   9++C0B3 00 00 00...  XX12Save                    DS  6
  10++C0B9 00 00 00...  XX12Save2                   DS  6
  11++C0BF              XX12                        equ UBnkXX12xLo
  12++C0BF              varXX12                     equ UBnkXX12xLo
  13++C0BF              ; Repurposed XX12 when plotting lines
  14++C0BF              UBnkY2                      equ XX12+0
  15++C0BF              UBnky2Lo                    equ XX12+0
  16++C0BF              UBnkY2Hi                    equ XX12+1
  17++C0BF              UBnkDeltaXLo                equ XX12+2
  18++C0BF              UBnkDeltaXHi                equ XX12+3
  19++C0BF              UBnkDeltaYLo                equ XX12+4
  20++C0BF              UBnkDeltaYHi                equ XX12+5
  21++C0BF              UBnkGradient                equ XX12+2
  22++C0BF              UBnkTemp1                   equ XX12+2
  23++C0BF              UBnkTemp1Lo                 equ XX12+2
  24++C0BF              UBnkTemp1Hi                 equ XX12+3
  25++C0BF              UBnkTemp2                   equ XX12+3
  26++C0BF              UBnkTemp2Lo                 equ XX12+3
  27++C0BF              UBnkTemp2Hi                 equ XX12+4
  28++C0BF
# file closed: ././Universe/Ships/XX12Vars.asm
  50+ C0BF
  51+ C0BF
  52+ C0BF              ; Post clipping the results are now 8 bit
  53+ C0BF 00           UBnkVisibility              DB  0               ; replaces general purpose xx4 in rendering
  54+ C0C0 00           UBnkProjectedY              DB  0
  55+ C0C1 00           UBnkProjectedX              DB  0
  56+ C0C2              UBnkProjected               equ UBnkProjectedY  ; resultant projected position
  57+ C0C2 00 00 00...  XX15Save                    DS  8
  58+ C0CA 00 00 00...  XX15Save2                   DS  8
  59+ C0D2 00           VarBackface                 DB 0
  60+ C0D3              ; Heap (or array) information for lines and normals
  61+ C0D3              ; Coords are stored XY,XY,XY,XY
  62+ C0D3              ; Normals
  63+ C0D3              ; This needs re-oprganising now.
  64+ C0D3              ; Runtime Calculation Store
  65+ C0D3
  66+ C0D3              ; ONLY IF TESTING SOLID FILL TraingleArraySize           equ 25
  67+ C0D3              ; Storage arrays for data
  68+ C0D3              ; Structure of arrays
  69+ C0D3              ; Visibility array  - 1 Byte per face/normal on ship model Bit 7 (or FF) visible, 0 Invisible
  70+ C0D3              ; Node array corresponds to a processed vertex from the ship model transformed into world coordinates and tracks the node list from model
  71+ C0D3              ; NodeArray         -  4 bytes per element      0           1            2          3
  72+ C0D3              ;                                               X Coord Lo  Y Coord Lo   Z CoordLo  Sign Bits 7 6 5 for X Y Z Signs (set = negative)
  73+ C0D3              ; Line Array        -  4 bytes per eleement     0           1            2          3
  74+ C0D3              ;                                               X1          Y1           X2         Y2
  75+ C0D3 00 00 00...  UBnkFaceVisArray            DS FaceArraySize            ; XX2 Up to 16 faces this may be normal list, each entry is controlled by bit 7, 1 visible, 0 hidden
  76+ C0F1              ; Node array holds the projected to screen position regardless of if its clipped or not
  77+ C0F1              ; When we use traingles we can cheat a bit on clipping as all lines will be horizontal so clipping is much simplified
  78+ C0F1 00 00 00...  UBnkNodeArray               DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  79+ C191 00 00 00...  UBnkNodeArray2              DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  80+ C231 00 00 00...  UBnkLineArray               DS LineArraySize * 8        ; XX19 Holds the clipped line details
  81+ C3C1              ; ONLY IF TESTING SOLID FILL UBnkTriangleOverspill       DS TraingleArraySize * 4    ; jsut a padding for testing
  82+ C3C1              UBnkLinesHeapMax            EQU $ - UBnkLineArray
  83+ C3C1              UBnkTraingleArray           EQU UBnkLineArray           ; We can use the line array as we draw lines or traingles
  84+ C3C1 00 00 00...  UBnkEdgeProcessedList DS EdgeHeapSize
  85+ C3E9              ; Array current Lengths
  86+ C3E9 00           UBnkFaceVisArrayLen         DS 1
  87+ C3EA 00           UBnkNodeArrayLen            DS 1
  88+ C3EB 00           UBnkLineArrayLen            DS 1                        ; total number of lines loaded to array
  89+ C3EC 00           UBnkLineArrayBytes          DS 1                        ; total number of bytes loaded to array  = array len * 4
  90+ C3ED              XX20                        equ UBnkLineArrayLen
  91+ C3ED              varXX20                     equ UBnkLineArrayLen
  92+ C3ED
  93+ C3ED 00           UBnkEdgeHeapSize            DS 1
  94+ C3EE 00           UBnkEdgeHeapBytes           DS 1
  95+ C3EF 00           UBnkLinesHeapLen            DS 1
  96+ C3F0 00           UBnkEdgeHeapCounter         DS 1
  97+ C3F1 00           UBnkEdgeRadius              DS 1
  98+ C3F2 00           UBnkEdgeShipType            DS 1
  99+ C3F3 00           UBnkEdgeExplosionType       DS 1
 100+ C3F4
 101+ C3F4              ; Node heap is used to write out transformed Vertexs
 102+ C3F4
 103+ C3F4              ; Lines
 104+ C3F4 00 00 00     UBnkXX19                    DS  3
 105+ C3F7
 106+ C3F7 00 00 00...  UBnkHullCopy                DS  ShipDataLength
 107+ C412              ScoopDebrisAddr             equ UBnkHullCopy + ScoopDebrisOffset
 108+ C412              MissileLockLoAddr           equ UBnkHullCopy + MissileLockLoOffset
 109+ C412              MissileLockHiAddr           equ UBnkHullCopy + MissileLockHiOffset
 110+ C412              EdgeAddyAddr                equ UBnkHullCopy + EdgeAddyOffset
 111+ C412              LineX4Addr                  equ UBnkHullCopy + LineX4Offset
 112+ C412              GunVertexAddr               equ UBnkHullCopy + GunVertexOffset
 113+ C412              ExplosionCtAddr             equ UBnkHullCopy + ExplosionCtOffset
 114+ C412              VertexCountAddr             equ UBnkHullCopy + VertexCountOffset
 115+ C412              VertexCtX6Addr              equ UBnkHullCopy + VertexCtX6Offset
 116+ C412              EdgeCountAddr               equ UBnkHullCopy + EdgeCountOffset
 117+ C412              BountyLoAddr                equ UBnkHullCopy + BountyLoOffset
 118+ C412              BountyHiAddr                equ UBnkHullCopy + BountyHiOffset
 119+ C412              FaceCtX4Addr                equ UBnkHullCopy + FaceCtX4Offset
 120+ C412              DotAddr                     equ UBnkHullCopy + DotOffset
 121+ C412              EnergyAddr                  equ UBnkHullCopy + EnergyOffset
 122+ C412              SpeedAddr                   equ UBnkHullCopy + SpeedOffset
 123+ C412              FaceAddyAddr                equ UBnkHullCopy + FaceAddyOffset
 124+ C412              QAddr                       equ UBnkHullCopy + QOffset
 125+ C412              LaserAddr                   equ UBnkHullCopy + LaserOffset
 126+ C412              VerticesAddyAddr            equ UBnkHullCopy + VerticiesAddyOffset
 127+ C412              ShipTypeAddr                equ UBnkHullCopy + ShipTypeOffset
 128+ C412              ShipNewBitsAddr             equ UBnkHullCopy + ShipNewBitsOffset
 129+ C412              ShipAIFlagsAddr             equ UBnkHullCopy + ShipAIFlagsOffset
 130+ C412              ShipECMFittedChanceAddr     equ UBnkHullCopy + ShipECMFittedChanceOffset
 131+ C412              ShipSolidFlagAddr           equ UBnkHullCopy + ShipSolidFlagOffset
 132+ C412              ShipSolidFillAddr           equ UBnkHullCopy + ShipSolidFillOffset
 133+ C412              ShipSolidLenAddr            equ UBnkHullCopy + ShipSolidLenOffset
 134+ C412              ; Static Ship Data. This is copied in when creating the universe object
 135+ C412              XX0                         equ UBnkHullCopy        ; general hull index pointer TODO find biggest ship design
 136+ C412
 137+ C412 00 00 00...  UBnkHullVerticies           DS  40 * 6              ; largetst is trasnport type 10 at 37 vericies so alows for 40 * 6 Bytes  =
 138+ C502 00 00 00...  UBnkHullEdges               DS  50 * 4              ; ype 10 is 46 edges so allow 50
 139+ C5CA 00 00 00...  UBnkHullNormals             DS  20 * 4              ; type 10 is 14 edges so 20 to be safe
 140+ C61A                  IFDEF SOLIDHULLTEST
 141+ C61A ~            UBnkHullSolid               DS  100 * 4             ; Up to 100 triangles (May optimise so only loads non hidden faces later
 142+ C61A                  ENDIF
 143+ C61A 0C           OrthagCountdown             DB  12
 144+ C61B
 145+ C61B              UBnkShipCopy                equ UBnkHullVerticies               ; Buffer for copy of ship data, for speed will copy to a local memory block, Cobra is around 400 bytes on creation of a new ship so should be plenty
 146+ C61B              UBnk_Data_len               EQU $ - StartOfUniv
 147+ C61B
 148+ C61B              ZeroUnivPitchAndRoll:   MACRO
 149+ C61B ~                                    xor     a
 150+ C61B ~                                    ld      (UBnkRotXCounter),a
 151+ C61B ~                                    ld      (UBnkRotZCounter),a
 152+ C61B                                      ENDM
 153+ C61B
 154+ C61B              InfinitPitchAndRoll:    MACRO
 155+ C61B ~                                    ld      a,$FF
 156+ C61B ~                                    ld      (UBnkRotXCounter),a
 157+ C61B ~                                    ld      (UBnkRotZCounter),a
 158+ C61B                                      ENDM
 159+ C61B
 160+ C61B              MaxUnivPitchAndRoll:    MACRO
 161+ C61B ~                                    ld      a,127
 162+ C61B ~                                    ld      (UBnkRotXCounter),a
 163+ C61B ~                                    ld      (UBnkRotZCounter),a
 164+ C61B                                      ENDM
 165+ C61B
 166+ C61B              RandomUnivPitchAndRoll: MACRO
 167+ C61B ~                                    call    doRandom
 168+ C61B ~                                    or      %01101111
 169+ C61B ~                                    ld      (UBnkRotXCounter),a
 170+ C61B ~                                    call    doRandom
 171+ C61B ~                                    or      %01101111
 172+ C61B ~                                    ld      (UBnkRotZCounter),a
 173+ C61B                                      ENDM
 174+ C61B
 175+ C61B              RandomUnivSpeed:        MACRO
 176+ C61B ~                                    call    doRandom
 177+ C61B ~                                    and     31
 178+ C61B ~                                    ld      (UBnkSpeed),a
 179+ C61B                                      ENDM
 180+ C61B
 181+ C61B              MaxUnivSpeed:           MACRO
 182+ C61B ~                                    ld      a,31
 183+ C61B ~                                    ld      (UBnkSpeed),a
 184+ C61B                                      ENDM
 185+ C61B
 186+ C61B              ZeroUnivAccelleration:  MACRO
 187+ C61B ~                                    xor     a
 188+ C61B ~                                    ld      (UBnkAccel),a
 189+ C61B                                      ENDM
 190+ C61B
 191+ C61B 3A 0F C4     SetShipHostile:         ld      a,(ShipNewBitsAddr)
 192+ C61E F6 04                                or      ShipIsHostile
 193+ C620 32 0F C4                             ld      (ShipNewBitsAddr),a
 194+ C623 C9                                   ret
 195+ C624
 196+ C624 3A 0F C4     ClearShipHostile:       ld      a,(ShipNewBitsAddr)
 197+ C627 E6 FB                                and     ShipNotHostile
 198+ C629 32 0F C4                             ld      (ShipNewBitsAddr),a
 199+ C62C C9                                   ret
 200+ C62D
 201+ C62D
 202+ C62D              ; --------------------------------------------------------------
 203+ C62D 21 00 C0     ResetUBnkData:          ld      hl,StartOfUniv
 204+ C630 11 1B 06                             ld      de,UBnk_Data_len
 205+ C633 AF                                   xor     a
 206+ C634 CD 04 7E                             call    memfill_dma
 207+ C637 C9                                   ret
 208+ C638              ; --------------------------------------------------------------
 209+ C638 21 20 C0     ResetUBnkPosition:      ld      hl,UBnkxlo
 210+ C63B 06 09                                ld      b, 3*3
 211+ C63D AF                                   xor     a
 212+ C63E 77           .zeroLoop:              ld      (hl),a
 213+ C63F 23                                   inc     hl
 214+ C640 10 FC                                djnz    .zeroLoop
 215+ C642 C9                                   ret
 216+ C643              ; --------------------------------------------------------------
 217+ C643 3E 80        FireECM:                ld      a,ECMCounterMax                 ; set ECM time
 218+ C645 32 5A C0                             ld      (UBnkECMCountDown),a            ;
 219+ C648 3A 86 7E                             ld      a,(ECMCountDown)
 220+ C64B                                      ReturnIfALTNusng ECMCounterMax
 220+ C64B FE 80       >                        cp    ECMCounterMax
 220+ C64D D8          >                        ret	 c
 221+ C64E 3E 80                                ld      a,ECMCounterMax
 222+ C650 32 86 7E                             ld      (ECMCountDown),a
 223+ C653 C9                                   ret
 224+ C654
 225+ C654 3A 59 C0     RechargeEnergy:         ld      a,(UBnkEnergy)
 226+ C657                                      ReturnIfAGTEMemusng EnergyAddr
 226+ C657 21 06 C4    >                        ld      hl,EnergyAddr
 226+ C65A BE          >                        cp      (hl)
 226+ C65B D0          >                        ret	    nc
 227+ C65C 3C                                   inc     a
 228+ C65D 32 59 C0                             ld      (UBnkEnergy),a
 229+ C660 C9                                   ret
 230+ C661              ; A ship normally needs enough energy to fire ECM but if its shot then
 231+ C661              ; it may be too low, in which case the ECM does a saftey shutdown and returns 1 energy
 232+ C661              ; plus a 50% chance it will blow the ECM up
 233+ C661 3A 5A C0     UpdateECM:              ld      a,(UBnkECMCountDown)
 234+ C664                                      ReturnIfAIsZero
 234+ C664 A7          >                        and     a
 234+ C665 C8          >                        ret     z
 235+ C666 3D                                   dec     a
 236+ C667 32 5A C0                             ld      (UBnkECMCountDown),a
 237+ C66A 21 59 C0                             ld      hl,UBnkEnergy
 238+ C66D 35                                   dec     (hl)
 239+ C66E F0                                   ret     p
 240+ C66F CD 46 C7     .ExhaustedEnergy:       call    UnivExplodeShip                 ; if it ran out of energy it was as it was also shot or collided as it checks in advance. Main ECM loop will continue as a compromise as multiple ships can fire ECM simultaneously
 241+ C672 C9                                   ret
 242+ C673
 243+ C673              ;-- This takes an Axis and subtracts 1, handles leading sign and boundary of 0 going negative
 244+ C673              JumpOffSet:             MACRO   Axis
 245+ C673 ~                                    ld      hl,(Axis)
 246+ C673 ~                                    ld      a,h
 247+ C673 ~                                    and     SignOnly8Bit
 248+ C673 ~                                    jr      nz,.NegativeAxis
 249+ C673 ~            .PositiveAxis:          dec     l
 250+ C673 ~                                    jp      m,.MovingNegative
 251+ C673 ~                                    jp      .Done
 252+ C673 ~            .NegativeAxis:          inc     l                               ; negative means increment the z
 253+ C673 ~                                    jp      .Done
 254+ C673 ~            .MovingNegative:        ld      hl,$8001                        ; -1
 255+ C673 ~            .Done                   ld      (Axis),hl
 256+ C673                                      ENDM
 257+ C673
 258+ C673
 259+ C673              WarpOffset:             JumpOffSet  UBnkzhi                     ; we will simplify on just moving Z
 259+ C673 2A 27 C0    >                        ld      hl,(UBnkzhi)
 259+ C676 7C          >                        ld      a,h
 259+ C677 E6 80       >                        and     SignOnly8Bit
 259+ C679 20 07       >                        jr      nz,.NegativeAxis
 259+ C67B 2D          >.PositiveAxis:          dec     l
 259+ C67C FA 86 C6    >                        jp      m,.MovingNegative
 259+ C67F C3 89 C6    >                        jp      .Done
 259+ C682 2C          >.NegativeAxis:          inc     l                               ; negative means increment the z
 259+ C683 C3 89 C6    >                        jp      .Done
 259+ C686 21 01 80    >.MovingNegative:        ld      hl,$8001                        ; -1
 259+ C689 22 27 C0    >.Done                   ld      (UBnkzhi),hl
 260+ C68C C9                                   ret
 261+ C68D
 262+ C68D
 263+ C68D              ; --------------------------------------------------------------
 264+ C68D              ; update ship speed and pitch based on adjustments from AI Tactics
 265+ C68D 3A 47 C0     UpdateSpeedAndPitch:    ld      a,(UBnkAccel)                   ; only apply non zero accelleration
 266+ C690                                      JumpIfAIsZero .SkipAccelleration
 266+ C690 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 266+ C691 CA AF C6    >                        jp	    z, .SkipAccelleration
 267+ C694 47                                   ld      b,a                             ; b = accelleration in 2's c
 268+ C695 3A 46 C0                             ld      a,(UBnkSpeed)                   ; a = speed + accelleration
 269+ C698                                      ClearCarryFlag
 269+ C698 B7          >                        or a
 270+ C699 88                                   adc     a,b
 271+ C69A                                      JumpIfPositive  .DoneAccelleration      ; if speed < 0
 271+ C69A F2 9E C6    >                        jp		p, .DoneAccelleration
 272+ C69D              .SpeedNegative:         ZeroA                                   ;    then speed = 0
 272+ C69D AF          >                        xor a
 273+ C69E 47           .DoneAccelleration:     ld      b,a                             ; if speed > speed limit
 274+ C69F 3A 07 C4                             ld      a,(SpeedAddr)                   ;    speed = limit
 275+ C6A2                                      JumpIfAGTENusng b, .SpeedInLimits       ; .
 275+ C6A2 B8          >                        cp     b
 275+ C6A3 D2 A7 C6    >                        jp		nc,.SpeedInLimits
 276+ C6A6 47                                   ld      b,a                             ; .
 277+ C6A7 78           .SpeedInLimits:         ld      a,b                             ; .
 278+ C6A8 32 46 C0                             ld      (UBnkSpeed),a                   ; .
 279+ C6AB                                      ZeroA                                   ; acclleration = 0
 279+ C6AB AF          >                        xor a
 280+ C6AC 32 47 C0                             ld      (UBnkAccel),a                   ; for next AI update
 281+ C6AF              .SkipAccelleration:     ; handle roll and pitch rates
 282+ C6AF C9                                   ret
 283+ C6B0
 284+ C6B0 21 B7 A6     UnivSetEnemyMissile:    ld      hl,NewLaunchUBnkX               ; Copy launch ship matrix
 285+ C6B3 11 20 C0                             ld      de,UBnkxlo                      ;
 286+ C6B6 01 1B 00                             ld      bc,NewLaunchDataBlockSize       ; positon + 3 rows of 3 bytes
 287+ C6B9 ED B0                                ldir                                    ;
 288+ C6BB 3E 03        .SetUpSpeed:            ld      a,3                             ; set accelleration
 289+ C6BD 32 47 C0                             ld      (UBnkAccel),a                   ;
 290+ C6C0                                      ZeroA
 290+ C6C0 AF          >                        xor a
 291+ C6C1 32 48 C0                             ld      (UBnkRotXCounter),a
 292+ C6C4 32 4A C0                             ld      (UBnkRotZCounter),a
 293+ C6C7 3E 03                                ld      a,3                             ; these are max roll and pitch rates for later
 294+ C6C9 32 4B C0                             ld      (UBnkRAT),a
 295+ C6CC 3C                                   inc     a
 296+ C6CD 32 4C C0                             ld      (UBnkRAT2),a
 297+ C6D0 3E 16                                ld      a,22
 298+ C6D2 32 4E C0                             ld      (UBnkCNT2),a
 299+ C6D5                                      MaxUnivSpeed                            ; and immediatley full speed (for now at least) TODO
 299+ C6D5 3E 1F       >                        ld      a,31
 299+ C6D7 32 46 C0    >                        ld      (UBnkSpeed),a
 300+ C6DA                                      SetMemFalse UBnkMissleHitToProcess
 300+ C6DA 3E FF       >                        ld      a,$FF
 300+ C6DC 32 44 C0    >                        ld      (UBnkMissleHitToProcess),a
 301+ C6DF 3E 80                                ld      a,ShipAIEnabled
 302+ C6E1 32 55 C0                             ld      (UBnkaiatkecm),a
 303+ C6E4 CD 1B C6                             call    SetShipHostile
 304+ C6E7 3E 96        .SetupPayload:          ld      a,150
 305+ C6E9 32 3C C0                             ld      (UBnkMissileBlastDamage),a
 306+ C6EC 32 3E C0                             ld      (UBnkMissileDetonateDamage),a
 307+ C6EF 3E 05                                ld      a,5
 308+ C6F1 32 3B C0                             ld      (UBnkMissileBlastRange),a
 309+ C6F4 32 3D C0                             ld      (UBnkMissileDetonateRange),a
 310+ C6F7 C9                                   ret
 311+ C6F8
 312+ C6F8              ; --------------------------------------------------------------
 313+ C6F8              ; This sets the position of the current ship if its a player launched missile
 314+ C6F8 CD BC C9     UnivSetPlayerMissile:   call    InitialisePlayerMissileOrientation  ; Copy in Player  facing
 315+ C6FB CD 38 C6                             call    ResetUBnkPosition               ; home position
 316+ C6FE 3E 05                                ld      a,MissileDropHeight             ; the missile launches from underneath
 317+ C700 32 23 C0                             ld      (UBnkylo),a                     ; so its -ve drop height
 318+ C703                                      IFDEF DEBUGMISSILELAUNCH
 319+ C703 ~                                        ld      a,$20       ; DEBUG
 320+ C703 ~                                        ld      (UBnkzlo),a
 321+ C703                                      ENDIF
 322+ C703 3E 80                                ld      a,$80                           ;
 323+ C705 32 25 C0                             ld      (UBnkysgn),a                    ;
 324+ C708 3E 03                                ld      a,3                             ; set accelleration
 325+ C70A 32 47 C0                             ld      (UBnkAccel),a                   ;
 326+ C70D                                      ZeroA
 326+ C70D AF          >                        xor a
 327+ C70E 32 48 C0                             ld      (UBnkRotXCounter),a
 328+ C711 32 4A C0                             ld      (UBnkRotZCounter),a
 329+ C714 3E 03                                ld      a,3                             ; these are max roll and pitch rates for later
 330+ C716 32 4B C0                             ld      (UBnkRAT),a
 331+ C719 3C                                   inc     a
 332+ C71A 32 4C C0                             ld      (UBnkRAT2),a
 333+ C71D 3E 16                                ld      a,22
 334+ C71F 32 4E C0                             ld      (UBnkCNT2),a
 335+ C722                                      MaxUnivSpeed                            ; and immediatley full speed (for now at least) TODO
 335+ C722 3E 1F       >                        ld      a,31
 335+ C724 32 46 C0    >                        ld      (UBnkSpeed),a
 336+ C727                                      SetMemFalse UBnkMissleHitToProcess
 336+ C727 3E FF       >                        ld      a,$FF
 336+ C729 32 44 C0    >                        ld      (UBnkMissleHitToProcess),a
 337+ C72C 3E 80                                ld      a,ShipAIEnabled
 338+ C72E 32 55 C0                             ld      (UBnkaiatkecm),a
 339+ C731                                      ;break
 340+ C731 CD 24 C6                             call    ClearShipHostile                ; its a player missile
 341+ C734
 342+ C734 C9                                   ret
 343+ C735              ; --------------------------------------------------------------
 344+ C735              ; this applies blast damage to ship
 345+ C735 3A 6C 80     ShipMissileBlast:       ld      a,(CurrentMissileBlastDamage)
 346+ C738 47                                   ld      b,a
 347+ C739 3A 59 C0                             ld      a,(UBnkEnergy)                   ; Reduce Energy
 348+ C73C 90                                   sub     b
 349+ C73D C3 46 C7                             jp      UnivExplodeShip
 350+ C740 18 04                                jr      UnivExplodeShip
 351+ C742 32 59 C0                             ld      (UBnkEnergy),a
 352+ C745 C9                                   ret
 353+ C746              ; --------------------------------------------------------------
 354+ C746              ; This sets the ship as a shower of explosiondwd
 355+ C746 DD 01        UnivExplodeShip:        break
 356+ C748 3A 55 C0                             ld      a,(UBnkaiatkecm)
 357+ C74B F6 30                                or      ShipExploding | ShipKilled      ; Set Exlpoding flag and mark as just been killed
 358+ C74D E6 7F                                and     Bit7Clear                       ; Remove AI
 359+ C74F 32 55 C0                             ld      (UBnkaiatkecm),a
 360+ C752 AF                                   xor     a
 361+ C753 32 59 C0                             ld      (UBnkEnergy),a
 362+ C756                                      ;TODO
 363+ C756 C9                                   ret
 364+ C757
 365+ C757 CD 95 C8     UnivSetDemoPostion:     call    UnivSetSpawnPosition
 366+ C75A 3E 81                                ld      a,%10000001                     ; AI Enabled has 1 missile
 367+ C75C 32 55 C0                             ld      (UBnkaiatkecm),a                ; set hostinle, no AI, has ECM
 368+ C75F 32 0F C4                             ld      (ShipNewBitsAddr),a             ; initialise new bits logic
 369+ C762 3E FF                                ld      a,$FF
 370+ C764 32 4A C0                             ld      (UBnkRotZCounter),a             ; no pitch
 371+ C767 32 48 C0                             ld      (UBnkRotXCounter),a             ; set roll to maxi on station
 372+ C76A                                      ZeroA
 372+ C76A AF          >                        xor a
 373+ C76B 32 22 C0                             ld      (UBnkxsgn),a
 374+ C76E 32 25 C0                             ld      (UBnkysgn),a
 375+ C771 32 28 C0                             ld      (UBnkzsgn),a
 376+ C774 21 00 00                             ld      hl,0
 377+ C777 22 20 C0                             ld      (UBnkxlo),hl
 378+ C77A 22 23 C0                             ld      (UBnkylo),hl
 379+ C77D 3A 0E C4                             ld      a,(ShipTypeAddr)
 380+ C780 21 B0 05                             ld      hl,$05B0                            ; so its a negative distance behind
 381+ C783                                      JumpIfANENusng ShipTypeStation, .SkipFurther
 381+ C783 FE 02       >                        cp     ShipTypeStation
 381+ C785 C2 8C C7    >                        jp      nz,.SkipFurther
 382+ C788 3E 05                                ld      a,5
 383+ C78A 84                                   add     h
 384+ C78B 67                                   ld      h,a
 385+ C78C 22 26 C0     .SkipFurther            ld      (UBnkzlo),hl
 386+ C78F C9                                   ret
 387+ C790                  DISPLAY "Tracing 1", $
 388+ C790
 389+ C790              ; --------------------------------------------------------------
 390+ C790              CopyPlanetGlobaltoSpaceStation:
 391+ C790 21 39 80                             ld      hl,ParentPlanetX
 392+ C793 11 20 C0                             ld      de,UBnkxlo
 393+ C796 01 09 00                             ld      bc,3*3
 394+ C799 ED B0                                ldir
 395+ C79B C9                                   ret
 396+ C79C              ; --------------------------------------------------------------
 397+ C79C              CopySpaceStationtoPlanetGlobal:
 398+ C79C 21 20 C0                             ld      hl,UBnkxlo
 399+ C79F 11 39 80                             ld      de,ParentPlanetX
 400+ C7A2 01 09 00                             ld      bc,3*3
 401+ C7A5 ED B0                                ldir
 402+ C7A7 C9                                   ret
 403+ C7A8              ; --------------------------------------------------------------
 404+ C7A8              ; generate space station type based on seed values
 405+ C7A8 3A 2E 80     UnivSelSpaceStationType:ld      a,(DisplayEcononmy)
 406+ C7AB 2A 2F 80                             ld      hl,(DisplayGovernment)          ; h = TekLevel, l = Government
 407+ C7AE ED 5B 31 80                          ld      de,(DisplayPopulation)          ; d = productivity e = Population
 408+ C7B2                                      ; so its economdy + government - TekLevel + productivity - population %00000001
 409+ C7B2 85                                   add     a,l
 410+ C7B3 9C                                   sbc     a,h
 411+ C7B4 82                                   add     a,d
 412+ C7B5 9B                                   sbc     a,e
 413+ C7B6 E6 01                                and     $01
 414+ C7B8 21 D9 77                             ld      hl,MasterStations               ; in main memory
 415+ C7BB ED 31                                add     hl,a
 416+ C7BD 7E                                   ld      a,(hl)
 417+ C7BE C9                                   ret
 418+ C7BF
 419+ C7BF              CalculateSpaceStationWarpPositon:
 420+ C7BF 3A 02 80     .CalcZPosition:         ld      a,(WorkingSeeds+1)      ; seed d & 7
 421+ C7C2 E6 07                                and     %00000111               ; .
 422+ C7C4 C6 07                                add     a,7                     ; + 7
 423+ C7C6 CB 2F                                sra     a                       ; / 2
 424+ C7C8 32 28 C0     .SetZPosition:          ld      (UBnkzsgn),a            ; << 16 (i.e. load into z sign byte
 425+ C7CB 21 00 00                             ld      hl, $0000               ; now set z hi and lo
 426+ C7CE 22 26 C0                             ld      (UBnkzlo),hl            ;
 427+ C7D1 3A 06 80     .CalcXandYPosition:     ld      a,(WorkingSeeds+5)      ; seed f & 3
 428+ C7D4 E6 03                                and     %00000011               ; .
 429+ C7D6 C6 03                                add     a,3                     ; + 3
 430+ C7D8 47                                   ld      b,a
 431+ C7D9 3A 05 80                             ld      a,(WorkingSeeds+4)      ; get low bit of seed e
 432+ C7DC E6 01                                and     %00000001
 433+ C7DE 1F                                   rra                             ; roll bit 0 into bit 7
 434+ C7DF B0                                   or      b                       ; now calc is f & 3 * -1 if seed e is odd
 435+ C7E0 32 22 C0     .SetXandYPosition:      ld      (UBnkxsgn),a            ; set into x and y sign byte
 436+ C7E3 32 25 C0                             ld      (UBnkysgn),a            ; .
 437+ C7E6 78                                   ld      a,b                     ; we want just seed f & 3 here
 438+ C7E7 32 21 C0                             ld      (UBnkxhi),a             ; set into x and y high byte
 439+ C7EA 32 24 C0                             ld      (UBnkyhi),a             ; .
 440+ C7ED                                      ZeroA
 440+ C7ED AF          >                        xor a
 441+ C7EE 32 20 C0                             ld      (UBnkxlo),a
 442+ C7F1 32 23 C0                             ld      (UBnkylo),a
 443+ C7F4              .CaclculateSpaceStationOffset:
 444+ C7F4 3A 03 80     .CalculateOffset:       ld      a,(WorkingSeeds+2)
 445+ C7F7 E6 03                                and     %00000011
 446+ C7F9 4F                                   ld      c,a
 447+ C7FA 3A 01 80                             ld      a,(WorkingSeeds)
 448+ C7FD E6 01                                and     %00000001
 449+ C7FF 17                                   rla
 450+ C800 47                                   ld      b,a
 451+ C801 61                                   ld      h,c
 452+ C802 0E 00                                ld      c,0
 453+ C804 C5 E5        .TransposeX:            push    bc,,hl
 454+ C806 ED 5B 21 C0                          ld      de,(UBnkxhi)
 455+ C80A 3A 22 C0                             ld      a,(UBnkxsgn)
 456+ C80D 6F                                   ld      l,a
 457+ C80E                                      MMUSelectMathsBankedFns
 457+ C80E ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 458+ C812 CD AF 00                             call    AddBCHtoDELsigned
 459+ C815 ED 53 21 C0                          ld      (UBnkxhi),de
 460+ C819 7D                                   ld      a,l
 461+ C81A 32 22 C0                             ld      (UBnkxsgn),a
 462+ C81D E1 C1        .TransposeY:            pop     bc,,hl
 463+ C81F C5 E5                                push    bc,,hl
 464+ C821 ED 5B 24 C0                          ld      de,(UBnkyhi)
 465+ C825 3A 25 C0                             ld      a,(UBnkysgn)
 466+ C828 6F                                   ld      l,a
 467+ C829 CD AF 00                             call    AddBCHtoDELsigned
 468+ C82C ED 53 24 C0                          ld      (UBnkyhi),de
 469+ C830 7D                                   ld      a,l
 470+ C831 32 25 C0                             ld      (UBnkysgn),a
 471+ C834 E1 C1        .TransposeZ:            pop     bc,,hl
 472+ C836 ED 5B 27 C0                          ld      de,(UBnkzhi)
 473+ C83A 3A 28 C0                             ld      a,(UBnkzsgn)
 474+ C83D 6F                                   ld      l,a
 475+ C83E CD AF 00                             call    AddBCHtoDELsigned
 476+ C841 ED 53 27 C0                          ld      (UBnkzhi),de
 477+ C845 7D                                   ld      a,l
 478+ C846 32 28 C0                             ld      (UBnkzsgn),a
 479+ C849 C9                                   ret
 480+ C84A
 481+ C84A
 482+ C84A              ; --------------------------------------------------------------
 483+ C84A              UnivSpawnSpaceStationLaunched:
 484+ C84A CD 69 C8                             call    UnivSpawnSpaceStation
 485+ C84D CD 9C C7                             call    CopySpaceStationtoPlanetGlobal
 486+ C850              ; --------------------------------------------------------------
 487+ C850              SpaceStationLaunchPositon:
 488+ C850 21 00 00                             ld      hl,0
 489+ C853                                      ZeroA
 489+ C853 AF          >                        xor a
 490+ C854 22 20 C0                             ld      (UBnkxlo),hl
 491+ C857 32 22 C0                             ld      (UBnkxsgn),a
 492+ C85A 22 23 C0                             ld      (UBnkylo),hl
 493+ C85D 32 25 C0                             ld      (UBnkysgn),a
 494+ C860 3E 81                                ld      a,$81
 495+ C862 22 26 C0                             ld      (UBnkzlo),hl
 496+ C865 32 28 C0                             ld      (UBnkzsgn),a
 497+ C868 C9                                   ret
 498+ C869              ; --------------------------------------------------------------
 499+ C869              UnivSpawnSpaceStation:  ;    UnivSelSpaceStationType ; set a to type
 500+ C869                                      ;ld      c,13                    ; c to slot 13 which is space station
 501+ C869                                      ;call    SpawnShipTypeASlotC     ; load inito universe slot
 502+ C869 CD 90 C7     .CalculatePosition:     call    CopyPlanetGlobaltoSpaceStation
 503+ C86C CD BF C7     .CalcOrbitOffset:       call    CalculateSpaceStationWarpPositon
 504+ C86F CD 99 C9                             call    InitialiseOrientation
 505+ C872 DD 01                                break
 506+ C874              .SetRollCounters:       InfinitPitchAndRoll
 506+ C874 3E FF       >                        ld      a,$FF
 506+ C876 32 48 C0    >                        ld      (UBnkRotXCounter),a
 506+ C879 32 4A C0    >                        ld      (UBnkRotZCounter),a
 507+ C87C              .SetOrientation:        FlipSignMem UBnkrotmatNosevX+1;  as its 0 flipping will make no difference
 507+ C87C 3A 36 C0    >                        ld  a,(UBnkrotmatNosevX+1)
 507+ C87F EE 80       >                        xor SignOnly8Bit
 507+ C881 32 36 C0    >                        ld  (UBnkrotmatNosevX+1),a
 508+ C884                                      FlipSignMem UBnkrotmatNosevY+1;  as its 0 flipping will make no difference
 508+ C884 3A 38 C0    >                        ld  a,(UBnkrotmatNosevY+1)
 508+ C887 EE 80       >                        xor SignOnly8Bit
 508+ C889 32 38 C0    >                        ld  (UBnkrotmatNosevY+1),a
 509+ C88C                                      FlipSignMem UBnkrotmatNosevZ+1
 509+ C88C 3A 3A C0    >                        ld  a,(UBnkrotmatNosevZ+1)
 509+ C88F EE 80       >                        xor SignOnly8Bit
 509+ C891 32 3A C0    >                        ld  (UBnkrotmatNosevZ+1),a
 510+ C894 C9                                   ret
 511+ C895
 512+ C895              ; --------------------------------------------------------------
 513+ C895              ; This sets the position of the current ship randomly, called after spawing
 514+ C895 CD 99 C9     UnivSetSpawnPosition:   call    InitialiseOrientation
 515+ C898                                      RandomUnivPitchAndRoll
 515+ C898 CD 0A 85    >                        call    doRandom
 515+ C89B F6 6F       >                        or      %01101111
 515+ C89D 32 48 C0    >                        ld      (UBnkRotXCounter),a
 515+ C8A0 CD 0A 85    >                        call    doRandom
 515+ C8A3 F6 6F       >                        or      %01101111
 515+ C8A5 32 4A C0    >                        ld      (UBnkRotZCounter),a
 516+ C8A8 CD 0A 85                             call    doRandom                        ; set x lo and y lo to random
 517+ C8AB 32 20 C0     .setXlo:                ld      (UBnkxlo),a
 518+ C8AE 32 23 C0     .setYlo:                ld      (UBnkylo),a
 519+ C8B1 0F           .setXsign:              rrca                                    ; rotate by 1 bit right
 520+ C8B2 47                                   ld      b,a
 521+ C8B3 E6 80                                and     SignOnly8Bit
 522+ C8B5 32 22 C0                             ld      (UBnkxsgn),a
 523+ C8B8 78           .setYSign:              ld      a,b                             ; get random back again
 524+ C8B9 0F                                   rrca                                    ; rotate by 1 bit right
 525+ C8BA 47                                   ld      b,a
 526+ C8BB E6 80                                and     SignOnly8Bit                    ; and set y sign
 527+ C8BD 32 25 C0                             ld      (UBnkysgn),a
 528+ C8C0 CB 08        .setYHigh:              rrc     b                               ; as value is in b rotate again
 529+ C8C2 78                                   ld      a,b                             ;
 530+ C8C3 E6 1F                                and     31                              ; set y hi to random 0 to 31
 531+ C8C5 32 24 C0                             ld      (UBnkyhi),a                     ;
 532+ C8C8 CB 08        .setXHigh:              rrc     b                               ; as value is in b rotate again
 533+ C8CA 78                                   ld      a,b
 534+ C8CB E6 1F                                and     31                              ; set x hi to random 0 to 31
 535+ C8CD 4F                                   ld      c,a                             ; save shifted into c as well
 536+ C8CE 32 21 C0                             ld      (UBnkxhi),a
 537+ C8D1 3E 50        .setZHigh:              ld      a,80                            ; set z hi to 80 - xhi - yhi - carry
 538+ C8D3 98                                   sbc     b
 539+ C8D4 99                                   sbc     c
 540+ C8D5 32 27 C0                             ld      (UBnkzhi),a
 541+ C8D8 3A 0E C4     .CheckIfBodyOrJunk:     ld      a,(ShipTypeAddr)
 542+ C8DB                                      ReturnIfAEqNusng ShipTypeJunk
 542+ C8DB FE 03       >                        cp      ShipTypeJunk
 542+ C8DD C8          >                        ret     z
 543+ C8DE                                      ReturnIfAEqNusng ShipTypeScoopable
 543+ C8DE FE 04       >                        cp      ShipTypeScoopable
 543+ C8E0 C8          >                        ret     z
 544+ C8E1 78                                   ld      a,b                             ; its not junk to set z sign
 545+ C8E2 0F                                   rrca                                    ; as it can jump in
 546+ C8E3 E6 80                                and     SignOnly8Bit
 547+ C8E5 32 28 C0                             ld      (UBnkzsgn),a
 548+ C8E8 C9                                   ret
 549+ C8E9
 550+ C8E9              ; --------------------------------------------------------------
 551+ C8E9              ; This sets the cargo type or carryflag set for not cargo
 552+ C8E9              ; Later this will be done via a loadable lookup table
 553+ C8E9 3A 0E C4     ShipCargoType:          ld      a,(ShipTypeAddr)
 554+ C8EC                                      JumpIfAEqNusng ShipID_CargoType5, .CargoCanister
 554+ C8EC FE 04       >                        cp     ShipID_CargoType5
 554+ C8EE CA 05 C9    >                        jp      z,.CargoCanister
 555+ C8F1              .IsItThargon:           JumpIfAEqNusng ShipID_Thargon,    .Thargon
 555+ C8F1 FE 27       >                        cp     ShipID_Thargon
 555+ C8F3 CA 0B C9    >                        jp      z,.Thargon
 556+ C8F6              .IsItAlloy:             JumpIfAEqNusng ShipID_Plate,      .Plate
 556+ C8F6 FE 1D       >                        cp     ShipID_Plate
 556+ C8F8 CA 0E C9    >                        jp      z,.Plate
 557+ C8FB              .IsItSplinter:          JumpIfAEqNusng ShipID_Splinter,   .Splinter
 557+ C8FB FE 24       >                        cp     ShipID_Splinter
 557+ C8FD CA 11 C9    >                        jp      z,.Splinter
 558+ C900              .IsItEscapePod:         JumpIfAEqNusng ShipID_Escape_Pod, .EscapePod
 558+ C900 FE 11       >                        cp     ShipID_Escape_Pod
 558+ C902 CA 14 C9    >                        jp      z,.EscapePod
 559+ C905 CD 0A 85     .CargoCanister:         call    doRandom
 560+ C908 E6 0F                                and     15                      ; Limit stock from Food to Platinum
 561+ C90A C9                                   ret
 562+ C90B 3E 11        .Thargon:               ld      a,AlienItemsIndex
 563+ C90D C9                                   ret
 564+ C90E 3E 0A        .Plate:                 ld      a,AlloysIndex
 565+ C910 C9                                   ret
 566+ C911 3E 0D        .Splinter:              ld      a,MineralsIndex
 567+ C913 C9                                   ret
 568+ C914 3E 04        .EscapePod:             ld      a,SlavesIndex
 569+ C916 C9                                   ret
 570+ C917                      IFDEF DEBUG_SHIP_MOVEMENT
 571+ C917 ~            FixStationPos:          ld      hl, DebugPos
 572+ C917 ~                                    ld      de, UBnkxlo
 573+ C917 ~                                    ld      bc,9
 574+ C917 ~                                    ldir
 575+ C917 ~                                    ld      hl,DebugRotMat
 576+ C917 ~                                    ld      de, UBnkrotmatSidevX
 577+ C917 ~                                    ld      bc,6*3
 578+ C917 ~                                    ldir
 579+ C917 ~                                    ret
 580+ C917                      ENDIF
 581+ C917                      IFDEF DEBUG_SHIP_MOVEMENT
 582+ C917 ~            DebugPos:               DB $00,$00,$00,$92,$01,$00,$7E,$04,$00
 583+ C917 ~            DebugRotMat:            DB $37,$88,$9A,$DC,$1B,$F7
 584+ C917 ~            DebugRotMat1:           DB $DF,$6D,$2A,$07,$C1,$83
 585+ C917 ~            DebugRotMat2:           DB $00,$80,$4A,$9B,$AA,$D8
 586+ C917                      ENDIF
 587+ C917
 588+ C917
 589+ C917
 590+ C917 2A 23 29 27  FighterTypeMapping:     DB ShipID_Worm, ShipID_Sidewinder, ShipID_Viper, ShipID_Thargon
 591+ C91B
 592+ C91B              ; Initialiase data, iyh must equal slot number
 593+ C91B              ;                   iyl must be ship type
 594+ C91B              ;                   a  = current bank number
 595+ C91B 01 23 00     UnivInitRuntime:        ld      bc,UBnkRuntimeSize
 596+ C91E 21 3F C0                             ld      hl,UBnkStartOfRuntimeData
 597+ C921                                      ZeroA
 597+ C921 AF          >                        xor a
 598+ C922 32 5A C0                             ld      (UBnkECMCountDown),a
 599+ C925 77           .InitLoop:              ld      (hl),a
 600+ C926 23                                   inc     hl
 601+ C927 10 FC                                djnz    .InitLoop
 602+ C929              .SetEnergy:             ldCopyByte EnergyAddr, UBnkEnergy
 602+ C929 3A 06 C4    >                        ld       a,(EnergyAddr)
 602+ C92C 32 59 C0    >                        ld       (UBnkEnergy),a
 603+ C92F FD 7C        .SetBankData:           ld      a,iyh
 604+ C931 32 3F C0                             ld      (UBnkSlotNumber),a
 605+ C934 C6 46                                add     a,BankUNIVDATA0
 606+ C936 32 40 C0                             ld      (UBnkShipUnivBankNbr),a
 607+ C939 FD 7D                                ld      a,iyl
 608+ C93B 32 43 C0                             ld      (UBnkShipModelId),a
 609+ C93E CD 0F E0                             call    GetShipBankId                ; this will mostly be debugging info
 610+ C941 32 41 C0                             ld      (UBnkShipModelBank),a        ; this will mostly be debugging info
 611+ C944 78                                   ld      a,b                          ; this will mostly be debugging info
 612+ C945 32 42 C0                             ld      (UBnkShipModelNbr),a         ; this will mostly be debugging info
 613+ C948 3A 0B C4     .SetUpMissileCount:     ld      a,(LaserAddr)                ; get laser and missile details
 614+ C94B E6 0F                                and     ShipMissileCount
 615+ C94D 4F                                   ld      c,a
 616+ C94E 3A 5F 7E                             ld      a,(RandomSeed1)              ; missile flag limit
 617+ C951 A1                                   and     c                            ; .
 618+ C952 32 5D C0                             ld      (UBnkMissilesLeft),a
 619+ C955 3A 0B C4     .SetupLaserType         ld      a,(LaserAddr)
 620+ C958 E6 F0                                and     ShipLaserPower
 621+ C95A ED 23                                swapnib
 622+ C95C 32 5C C0                             ld      (UBnkLaserPower),a
 623+ C95F 3A 10 C4     .SetUpFighterBays:      ld      a,(ShipAIFlagsAddr)
 624+ C962 4F                                   ld      c,a
 625+ C963 E6 70                                and     ShipFighterBaySize
 626+ C965                                      JumpIfANENusng ShipFighterBaySizeInf, .LimitedBay
 626+ C965 FE 70       >                        cp     ShipFighterBaySizeInf
 626+ C967 C2 6C C9    >                        jp      nz,.LimitedBay
 627+ C96A 3E FF                                ld      a,$FF                       ; force unlimited ships
 628+ C96C ED 23        .LimitedBay:            swapnib                             ; as its bits 6 to 4 and we have removed bit 7 we can cheat with a swapnib
 629+ C96E 32 5F C0                             ld      (UBnkFightersLeft),a
 630+ C971 79           .SetUpFighterType:      ld      a,c                         ; get back AI flags
 631+ C972 E6 0C                                and     ShipFighterType             ; fighter type is bits 2 and 3
 632+ C974 CB 1F                                rr      a                           ; so get them down to 0 and 1
 633+ C976 CB 1F                                rr      a                           ;
 634+ C978 21 17 C9                             ld      hl,FighterTypeMapping       ; then use the lookup table
 635+ C97B ED 31                                add     hl,a                        ; for the respective ship id
 636+ C97D 7E                                   ld      a,(hl)                      ; we work on this for optimisation
 637+ C97E 32 5E C0                             ld      (UBnkFighterShipId),a       ; ship data holds index to this table
 638+ C981 3A 11 C4     .SetUpECM:              ld      a,(ShipECMFittedChanceAddr) ; Now handle ECM
 639+ C984 47                                   ld      b,a
 640+ C985 3A 61 7E     .FetchLatestRandom:     ld      a,(RandomSeed3)
 641+ C988                                      JumpIfALTNusng b, .ECMFitted
 641+ C988 B8          >                        cp      b
 641+ C989 DA 94 C9    >                        jp		c, .ECMFitted
 642+ C98C              .ECMNotFitted:          SetMemFalse UBnkECMFitted
 642+ C98C 3E FF       >                        ld      a,$FF
 642+ C98E 32 5B C0    >                        ld      (UBnkECMFitted),a
 643+ C991 C3 98 C9                             jp      .DoneECM
 644+ C994              .ECMFitted:             SetMemTrue  UBnkECMFitted
 644+ C994 AF          >                        xor     a
 644+ C995 32 5B C0    >                        ld      (UBnkECMFitted),a
 645+ C998              .DoneECM:               ; TODO set up laser power
 646+ C998 C9                                   ret
 647+ C999                  DISPLAY "Tracing 2", $
 648+ C999
 649+ C999                                      include "Universe/Ships/InitialiseOrientation.asm"
# file opened: ./Universe/Ships/InitialiseOrientation.asm
   1++C999              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
   2++C999              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
   3++C999              ;  nosev = (0,  0, -1)  nosev = (0, 0, &E000)   E000 = SignBit[96]
   4++C999              InitialiseOrientation:
   5++C999 21 00 00     ZI1:                    ld      hl, 0
   6++C99C 22 2B C0                             ld      (UBnkrotmatSidevY),hl                ; set the zeroes
   7++C99F 22 2D C0                             ld      (UBnkrotmatSidevZ),hl                ; set the zeroes
   8++C9A2 22 2F C0                             ld      (UBnkrotmatRoofvX),hl                ; set the zeroes
   9++C9A5 22 33 C0                             ld      (UBnkrotmatRoofvZ),hl                ; set the zeroes
  10++C9A8 22 35 C0                             ld      (UBnkrotmatNosevX),hl                ; set the zeroes
  11++C9AB 22 37 C0                             ld      (UBnkrotmatNosevY),hl                ; set the zeroes
  12++C9AE              ; Optimised as already have 0 in l
  13++C9AE 26 60                                ld      h, $60	             				; 96 in hi byte
  14++C9B0                                      ;ld      hl,1
  15++C9B0 22 29 C0                             ld      (UBnkrotmatSidevX),hl
  16++C9B3 22 31 C0                             ld      (UBnkrotmatRoofvY),hl
  17++C9B6              ; Optimised as already have 0 in l
  18++C9B6 26 E0                                ld      h, $E0					            ; -96 in hi byte which is +96 with hl bit 7 set
  19++C9B8 22 39 C0                             ld      (UBnkrotmatNosevZ),hl
  20++C9BB C9                                   ret
  21++C9BC
  22++C9BC              InitialisePlayerMissileOrientation:
  23++C9BC CD 99 C9                             call    InitialiseOrientation
  24++C9BF 21 00 60                             ld      hl,$6000
  25++C9C2 22 39 C0                             ld      (UBnkrotmatNosevZ),hl           ; mius
  26++C9C5 C9                                   ret
  27++C9C6
  28++C9C6
  29++C9C6              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
  30++C9C6              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
  31++C9C6              ;  nosev = (-0,  -0, 1) nosev = (0, 0, &6000)
  32++C9C6 CD 99 C9     LaunchedOrientation:    call    InitialiseOrientation
  33++C9C9                                      FlipSignMem UBnkrotmatNosevX+1;  as its 0 flipping will make no difference
  33++C9C9 3A 36 C0    >                        ld  a,(UBnkrotmatNosevX+1)
  33++C9CC EE 80       >                        xor SignOnly8Bit
  33++C9CE 32 36 C0    >                        ld  (UBnkrotmatNosevX+1),a
  34++C9D1                                      FlipSignMem UBnkrotmatNosevY+1;  as its 0 flipping will make no difference
  34++C9D1 3A 38 C0    >                        ld  a,(UBnkrotmatNosevY+1)
  34++C9D4 EE 80       >                        xor SignOnly8Bit
  34++C9D6 32 38 C0    >                        ld  (UBnkrotmatNosevY+1),a
  35++C9D9                                      FlipSignMem UBnkrotmatNosevZ+1
  35++C9D9 3A 3A C0    >                        ld  a,(UBnkrotmatNosevZ+1)
  35++C9DC EE 80       >                        xor SignOnly8Bit
  35++C9DE 32 3A C0    >                        ld  (UBnkrotmatNosevZ+1),a
  36++C9E1 C9                                   ret
  37++C9E2
# file closed: ./Universe/Ships/InitialiseOrientation.asm
 650+ C9E2
 651+ C9E2              ;----------------------------------------------------------------------------------------------------------------------------------
 652+ C9E2              ;OrientateVertex:
 653+ C9E2              ;                      [ sidev_x sidev_y sidev_z ]   [ x ]
 654+ C9E2              ;  projected [x y z] = [ roofv_x roofv_y roofv_z ] . [ y ]
 655+ C9E2              ;                      [ nosev_x nosev_y nosev_z ]   [ z ]
 656+ C9E2              ;
 657+ C9E2
 658+ C9E2              ;----------------------------------------------------------------------------------------------------------------------------------
 659+ C9E2              ;TransposeVertex:
 660+ C9E2              ;                      [ sidev_x roofv_x nosev_x ]   [ x ]
 661+ C9E2              ;  projected [x y z] = [ sidev_y roofv_y nosev_y ] . [ y ]
 662+ C9E2              ;                      [ sidev_z roofv_z nosev_z ]   [ z ]
 663+ C9E2              ; VectorToVertex:
 664+ C9E2              ;                     [ sidev_x roofv_x nosev_x ]   [ x ]   [ x ]
 665+ C9E2              ;  vector to vertex = [ sidev_y roofv_y nosev_y ] . [ y ] + [ y ]
 666+ C9E2              ;                     [ sidev_z roofv_z nosev_z ]   [ z ]   [ z ]
 667+ C9E2              ;INPUTS:    bhl = dividend  cde = divisor where b and c are sign bytes
 668+ C9E2              ;OUTPUTS:   cahl = quotient cde = divisor
 669+ C9E2              ;--------------------------------------------------------------------------------------------------------
 670+ C9E2                                      ;include "./ModelRender/EraseOldLines-EE51.asm"
 671+ C9E2               ; OBSOLETE                       include "./ModelRender/TrimToScreenGrad-LL118.asm"
 672+ C9E2                                      include "./ModelRender/CLIP-LL145.asm"
# file opened: ././ModelRender/CLIP-LL145.asm
   1++C9E2              ;--------------------------------------------------------------------------------------------------------------------
   2++C9E2
   3++C9E2 00           clipDx                  DB      0           ; also XX12+2
   4++C9E3 00           clipDxHigh              DB      0           ; also XX12+3
   5++C9E4 00           clipDxHighNonABS        DB      0           ; also XX12+3
   6++C9E5 00           clipDy                  DB      0           ; also XX12+4
   7++C9E6 00           clipDyHigh              DB      0           ; also XX12+5
   8++C9E7 00           clipGradient            DB      0
   9++C9E8 00           clipDxySign             DB      0
  10++C9E9              varX12p3                equ     clipDxySign
  11++C9E9 00           clipXGTY                DB      0
  12++C9EA 00           clipFlags               DB      0
  13++C9EB 00           SWAP                    DB      0
  14++C9EC 00 00        varYX                   DW      0
  15++C9EE              ;varRegX                 DB      0
  16++C9EE              ;varXX12p2               DB      0
  17++C9EE 00           clipXX13                 DB      0
  18++C9EF 00           Gradient                DB      0
  19++C9F0              ; for start and end y. bit7 of lower determines its not been setup yet
  20++C9F0
  21++C9F0              ;--------------------------------------------------------------------------------------
  22++C9F0                      IFNDEF       CLIPVersion3
  23++C9F0 ED 4B A9 C0  ClipLine:               ld      bc,(UBnkPreClipY1)          ; bc - XX15(2,3) Y1
  24++C9F4 DD 2A AD C0                          ld      ix,(UBnkPreClipY2)          ; ix - XX12(0,1) Y2
  25++C9F8 2A A7 C0                             ld      hl,(UBnkPreClipX1)          ; hl - XX15(0,1) X1
  26++C9FB ED 5B AB C0                          ld      de,(UBnkPreClipX2)          ; de - XX15(4,5) X2
  27++C9FF AF                                   xor     a
  28++CA00 32 EB C9                             ld      (SWAP),a                    ; SWAP = 0
  29++CA03 7A                                   ld      a,d                         ; A = X2Hi
  30++CA04 FD 26 BF     .LL147:                 ld      iyh,$BF                     ; we need to be 191 as its 128 + another bit set from 0 to 6, we are using iyh as regX (128 will actually do)
  31++CA07 DD B4                                or      ixh                         ; if (X2Hi L-OR Y2 Hi <> 0) goto LL107             -- X2Y2 off screen
  32++CA09 20 0A                                jr      nz, .LL107
  33++CA0B DD 7D                                ld      a,ixl
  34++CA0D ED 27 80                             test    $80                         ; if screen hight < y2 lo, i.e y2 lo >127 goto LL107,
  35++CA10 20 03                                jr      nz,.LL107
  36++CA12 FD 26 00                             ld      iyh, 0                      ; else iyh = regX = 0                                                                        -- X2Y2 on screen
  37++CA15              ; XX13 = regX (i.e. iyh)      ( if XX13 = XX13 is 191 if (x2, y2) is off-screen else 0) we bin XX13 as not needed
  38++CA15              ; so XX13 = 0 if x2_hi = y2_hi = 0, y2_lo is on-screen,  XX13 = 191 if x2_hi or y2_hi are non-zero or y2_lo is off the bottom of the screen
  39++CA15 FD 7C        .LL107                  ld      a,iyh
  40++CA17 32 EE C9                             ld      (clipXX13),a                ; debug copy iyh to xx13
  41++CA1A 7C                                   ld      a,h                         ; If (X1 hi L-OR Y1) hi  goto LL83                   -- X1Y1 off screen and maybe X2Y2
  42++CA1B B0                                   or      b                           ;
  43++CA1C 20 27                                jr      nz,.LL83                    ;
  44++CA1E 79                                   ld      a,c                         ; or (y1 lo > bottom of screen)
  45++CA1F ED 27 80                             test    $80                         ; i.e  screen height < y1)
  46++CA22 20 21                                jr      nz,.LL83
  47++CA24              ; If we get here, (x1, y1) is on-screen
  48++CA24 FD 7C                                ld      a,iyh                       ; iyh = xx13 at this point if  XX13 <> 0 goto LL108                                                        -- X1Y1 on screen, if we flagged X2Y2 off screen goto LL108
  49++CA26 FE 00                                cp      0
  50++CA28 20 15                                jr      nz, .LL108
  51++CA2A              ; Finished clipping exit point ----------------------------------------------------------------------------------------
  52++CA2A 79           .ClipDone:              ld      a,c                         ; LL146 (Clip Done)               Y1 = y1 lo, x2 = x2 lo, x1 = x1 lo y1 = y1 lo                                   -- Nothing off screen
  53++CA2B 32 A8 C0                             ld      (UBnkNewY1),a
  54++CA2E DD 7D                                ld      a,ixl
  55++CA30 32 AA C0                             ld      (UBnkNewY2),a
  56++CA33 7D                                   ld      a,l
  57++CA34 32 A7 C0                             ld      (UBnkNewX1),a
  58++CA37 7B                                   ld      a,e
  59++CA38 32 A9 C0                             ld      (UBnkNewX2),a
  60++CA3B                                      ClearCarryFlag                      ; carry is clear so valid to plot is in XX15(0to3)
  60++CA3B B7          >                        or a
  61++CA3C C9                                   ret                                 ; 2nd pro different, it swops based on swop flag around here.
  62++CA3D              ; Finished out of bounds exit point -----------------------------------------------------------------------------------
  63++CA3D              .PointsOutofBounds:     SetCarryFlag                        ; LL109 (ClipFailed) carry flag set as not visible
  63++CA3D 37          >                        scf
  64++CA3E C9                                   ret
  65++CA3F FD 7C        .LL108:                 ld      a,iyh
  66++CA41 B7                                   or      a
  67++CA42 1F                                   rra
  68++CA43 FD 67                                ld      iyh,a                       ; (X2Y2 Off Screen)         XX13 = 95 (i.e. divide it by 2)                                                 -- X1Y1 on screen X2Y2 off screen
  69++CA45 FD 7C        .LL83:                  ld      a,iyh                       ; (Line On screen Test)      if XX13 < 128 then only 1 point is on screen so goto LL115                      -- We only need to deal with X2Y2
  70++CA47 ED 27 80                             test    $80                         ;
  71++CA4A 28 28                                jr      z, .LL115                   ;
  72++CA4C              ;                       Check for X1 and X2 negative
  73++CA4C 7C                                   ld      a,h                         ; If both x1_hi and x2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  74++CA4D A2                                   and     d
  75++CA4E                                      JumpIfNegative  .PointsOutofBounds
  75++CA4E FA 3D CA    >                        jp		m, .PointsOutofBounds
  76++CA51              ;                       Check for Y1 and Y2 negative
  77++CA51 78                                   ld      a,b                         ; If both y1_hi and y2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  78++CA52 DD A4                                and     ixh
  79++CA54                                      JumpIfNegative  .PointsOutofBounds
  79++CA54 FA 3D CA    >                        jp		m, .PointsOutofBounds
  80++CA57              ;                       Check for X1 and X2 both > 255
  81++CA57 7C                                   ld      a,h                         ; If neither (x1_hi - 1) or (x2_hi - 1) have bit 7 set, jump to LL109 to return from the subroutine with the C  flag set, as the line doesn't fit on-screen
  82++CA58 3D                                   dec     a
  83++CA59 FD 6F                                ld      iyl,a                       ; using iyl as XX12+2 var
  84++CA5B 7A                                   ld      a,d                         ; a = x2 hi
  85++CA5C 3D                                   dec     a
  86++CA5D FD B5                                or      iyl                         ; (x2 hi -1 ) or (x1 hi -1)
  87++CA5F                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
  87++CA5F F2 3D CA    >                        jp		p, .PointsOutofBounds
  88++CA62              ; by here we have eliminated -ve Y1 bounds so can just test for positive high and bit 7 of lo
  89++CA62 DD 7C                                ld      a,ixh
  90++CA64 3D                                   dec     a
  91++CA65 FD 6F                                ld      iyl,a
  92++CA67 78                                   ld      a,b
  93++CA68 3D                                   dec     a
  94++CA69 FD B5                                or      iyl
  95++CA6B                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
  95++CA6B F2 3D CA    >                        jp		p, .PointsOutofBounds
  96++CA6E 79                                   ld      a,c
  97++CA6F DD A5                                and     ixl
  98++CA71                                      JumpIfNegative .PointsOutofBounds   ; really if both are > 127
  98++CA71 FA 3D CA    >                        jp		m, .PointsOutofBounds
  99++CA74              ; Clip line: calulate the line's gradient
 100++CA74              ; here as an optimisation we make sure X1 is always < X2  later on
 101++CA74              .LL115:                 ClearCarryFlag
 101++CA74 B7          >                        or a
 102++CA75 E5 D5        .CalcDX:                push    hl,,de
 103++CA77 EB                                   ex      hl,de                       ; so hl is x2 and de = x1
 104++CA78 ED 52                                sbc     hl,de
 105++CA7A 22 E2 C9                             ld      (clipDx),hl
 106++CA7D 7C                                   ld      a,h
 107++CA7E 32 E4 C9                             ld      (clipDxHighNonABS),a
 108++CA81              .CalcDy:                ClearCarryFlag
 108++CA81 B7          >                        or a
 109++CA82 DD E5 E1                             ld      hl,ix
 110++CA85 ED 42                                sbc     hl,bc
 111++CA87 54 5D                                ld      de,hl           ;;OPTIMISATION 6/11/21
 112++CA89 22 E5 C9                             ld      (clipDy),hl     ;OPTIMISATION 6/11/21 commented out
 113++CA8C 7C           .CalcQuadrant:          ld      a,h
 114++CA8D 32 E6 C9                             ld      (clipDyHigh),a              ; so A = sign of deltay in effect
 115++CA90              ; So we now have delta_x in XX12(3 2), delta_y in XX12(5 4)  where the delta is (x1, y1) - (x2, y2))
 116++CA90 21 E3 C9                             ld      hl,clipDxHigh
 117++CA93 AE                                   xor     (hl)                        ; now a = sign dx xor sign dy
 118++CA94 32 73 7F                             ld      (varS),a                    ; DEBGU putting it in var S too for now
 119++CA97 32 E8 C9                             ld      (clipDxySign),a
 120++CA9A 3A E6 C9     .AbsDy:                 ld      a,(clipDyHigh)
 121++CA9D ED 27 80                             test    $80
 122++CAA0 28 0E                                jr      z,.LL110                    ; If delta_y_hi is positive, jump down to LL110 to skip the following
 123++CAA2 ED 5B E5 C9                          ld      de,(clipDy)                 ;OPTIMISATION 6/11/21 commented out
 124++CAA6                                      macronegate16de                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 124++CAA6 AF          >					xor 	a
 124++CAA7 93          >                    sub 	e
 124++CAA8 5F          >                    ld 		e,a
 124++CAA9 9F          >                    sbc 	a,a
 124++CAAA 92          >                    sub 	d
 124++CAAB 57          >                    ld 		d,a
 125++CAAC ED 53 E5 C9                          ld      (clipDy),de                 ;OPTIMISATION 6/11/21 commented out
 126++CAB0 2A E2 C9     .LL110:                 ld      hl,(clipDx)
 127++CAB3 3A E3 C9                             ld      a,(clipDxHigh)
 128++CAB6 ED 27 80                             test    $80                         ; is it a negative X
 129++CAB9 28 06                                jr      z,.LL111                    ; If delta_x_hi is positive, jump down to LL110 to skip the following
 130++CABB                                      ;ld      hl,(clipDx)                 ;OPTIMISATION 6/11/21 commented out
 131++CABB                                      macronegate16hl                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 131++CABB AF          >					xor 	a
 131++CABC 95          >					sub 	l
 131++CABD 6F          >					ld 		l,a
 131++CABE 9F          >					sbc 	a,a
 131++CABF 94          >					sub 	h
 131++CAC0 67          >					ld 		h,a
 132++CAC1              .LL111:
 133++CAC1 7C           .ScaleLoop:             ld      a,h                         ; At this point DX and DY are ABS values
 134++CAC2 B2                                   or      d
 135++CAC3 28 0A                                jr      z,.CalculateDelta
 136++CAC5                                      ShiftDERight1
 136++CAC5 CB 3A       >			   srl d
 136++CAC7 CB 1B       >			   rr  e
 137++CAC9                                      ShiftHLRight1
 137++CAC9 CB 3C       >			   srl h
 137++CACB CB 1D       >			   rr  l
 138++CACD 18 F2                                jr      .ScaleLoop                  ; scaled down Dx and Dy to 8 bit, Dy may have been negative
 139++CACF              .CalculateDelta:
 140++CACF              ; By now, the high bytes of both |delta_x| and |delta_y| are zero We know that h and d are both = 0 as that's what we tested with a BEQ
 141++CACF AF           .LL113:                 xor     a
 142++CAD0 32 8D 7F                             ld      (varT),a                    ; t = 0
 143++CAD3 7D                                   ld      a,l                         ; If delta_x_lo < delta_y_lo, so our line is more vertical than horizontal, jump to LL114
 144++CAD4                                      JumpIfALTNusng  e, .LL114           ;
 144++CAD4 BB          >                        cp      e
 144++CAD5 DA E5 CA    >                        jp		c, .LL114
 145++CAD8              ; Here Dx >= Dy sp calculate Delta Y / delta X
 146++CAD8 32 71 7F     .DxGTEDy:               ld      (varQ),a                    ; Set Q = delta_x_lo
 147++CADB 57                                   ld      d,a                         ; d = also Q for calc
 148++CADC 7B                                   ld      a,e                         ; Set A = delta_y_lo
 149++CADD CD 2E 95                             call    AEquAmul256DivD; LL28Amul256DivD             ; Call LL28 to calculate:  R (actually a reg) = 256 * A / Q   = 256 * delta_y_lo / delta_x_lo
 150++CAE0 32 72 7F                             ld      (varR),a                    ;
 151++CAE3 18 10                                jr      .LL116                      ; Jump to LL116, as we now have the line's gradient in R
 152++CAE5              ; Here Delta Y > Delta X so calulate delta X / delta Y
 153++CAE5 7B           .LL114:                 ld      a,e                         ; Set Q = delta_y_lo
 154++CAE6 57                                   ld      d,a
 155++CAE7 32 71 7F                             ld      (varQ),a
 156++CAEA 7D                                   ld      a,l                         ; Set A = delta_x_lo
 157++CAEB CD 2E 95                             call    AEquAmul256DivD; LL28Amul256DivD             ; Call LL28 to calculate: R = 256 * A / Q  = 256 * delta_x_lo / delta_y_lo
 158++CAEE 32 72 7F                             ld      (varR),a                    ;
 159++CAF1 21 8D 7F                             ld      hl,varT                     ; T was set to 0 above, so this sets T = &FF
 160++CAF4 35                                   dec     (hl)
 161++CAF5 D1           .LL116:                 pop     de                          ; get back X2
 162++CAF6 E1                                   pop     hl                          ; get back X1 into hl,
 163++CAF7 3A 72 7F                             ld      a,(varR)                    ; Store the gradient in XX12+2 this can be optimised later
 164++CAFA 32 E7 C9                             ld      (clipGradient),a
 165++CAFD FD 6F                                ld      iyl,a
 166++CAFF 3A 73 7F                             ld      a,(varS)
 167++CB02 32 E8 C9                             ld      (clipDxySign),a             ;  Store the type of slope in XX12+3, bit 7 clear means ?Not needed as clipDxySign is used for varS earlier?
 168++CB05                                                                          ; top left to bottom right, bit 7 set means top right to bottom left **CODE IS WRONG HERE A TEST IS BL to TR
 169++CB05 FD 7C                                ld      a,iyh                       ; iyh was XX13 from earlier
 170++CB07 FE 00                                cp      0                           ; If XX13 = 0, skip the following instruction
 171++CB09 28 05                                jr      z,.LL138                    ;
 172++CB0B ED 27 80                             test    $80                         ; If XX13 is positive, it must be 95. This means (x1, y1) is on-screen but (x2, y2) isn't, so we jump to LLX117 to swap the (x1, y1) and (x2, y2)
 173++CB0E 28 13                                jr      z,.LLX117                   ; coordinates around before doing the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 174++CB10              ; If we get here, XX13 = 0 or 191, so (x1, y1) is off-screen and needs clipping
 175++CB10 CD 37 CB     .LL138                  call    ClipPointHLBC               ; Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 176++CB13 FD 7C                                ld      a,iyh                       ; If XX13 = 0, i.e. (x2, y2) is on-screen, jump down to LL124 to return with a successfully clipped line
 177++CB15 ED 27 80                             test    $80
 178++CB18 28 1A                                jr      z,.LL124
 179++CB1A              ; If we get here, XX13 = 191 (both coordinates are off-screen)
 180++CB1A 7C           .LL117:                 ld      a,h                         ; If either of x1_hi or y1_hi are non-zero, jump to
 181++CB1B B0                                   or      b                           ; LL137 to return from the subroutine with the C flag
 182++CB1C C2 3D CA                             jp      nz, .PointsOutofBounds      ; set, as the line doesn't fit on-screen
 183++CB1F B1                                   or      c                           ; if x1 and y1 hi are both zero test bit 8 or Y1 to see if its > 128
 184++CB20 FA 3D CA                             jp      m, .PointsOutofBounds       ; set, as the line doesn't fit on-screen
 185++CB23              ; If we get here, XX13 = 95 or 191, and in both cases (x2, y2) is off-screen, so we now need to swap the (x1, y1) and (x2, y2) coordinates around before doing
 186++CB23              ; the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 187++CB23 EB           .LLX117:                ex      de,hl                       ;  swap X1 and X2
 188++CB24 DD E5                                push    ix                          ;  swap Y1 and Y2
 189++CB26 C5                                   push    bc
 190++CB27 DD E1                                pop     ix
 191++CB29 C1                                   pop     bc
 192++CB2A CD 37 CB                             call    ClipPointHLBC               ;  Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 193++CB2D 3A EB C9                             ld      a,(SWAP)
 194++CB30 3D                                   dec     a
 195++CB31 32 EB C9                             ld      (SWAP),a                    ; Set SWAP = &FF to indicate that we just clipped the line at the (x2, y2) end by swapping the coordinates (the DEC does this as we set SWAP to 0 at the start of this subroutine)
 196++CB34 C3 2A CA     .LL124:                 jp      .ClipDone                    ; now put points in place
 197++CB37              ; Move a point along a line until it is on-screen point is held in HL(X) BC(Y) LL118
 198++CB37              ; iyh still holds XX13 iyl still holds gradient
 199++CB37 7C           ClipPointHLBC:          ld      a,h                         ; If x1_hi is positive, jump down to LL119 to skip the following
 200++CB38 ED 27 80                             test    $80
 201++CB3B 28 17                                jr      z,.LL119
 202++CB3D 32 73 7F     .X1isNegative:          ld      (varS),a                    ;  Otherwise x1_hi is negative, i.e. off the left of the screen, so set S = x1_hi
 203++CB40 E5 D5 C5                             push    hl,,de,,bc
 204++CB43 CD B9 CB                             call    LL120                       ;  Call LL120 to calculate:   (Y X) = (S x1_lo) * XX12+2      if T = 0   = x1 * gradient
 205++CB46                                                                          ;                             (Y X) = (S x1_lo) / XX12+2      if T <> 0  = x1 / gradient
 206++CB46                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 207++CB46 C1 D1 E1                             pop    hl,,de,,bc                   ;  get coordinates back
 208++CB49 2A EC C9                             ld      hl,(varYX)
 209++CB4C 09                                   add     hl,bc                       ; y1 = y1 + varYX
 210++CB4D 44 4D                                ld      bc,hl
 211++CB4F 21 00 00                             ld      hl,0                        ; Set x1 = 0
 212++CB52 18 1A                                jr      .LL134                      ; in BBC is set x to 0 to force jump, we will just jump
 213++CB54 FE 00        .LL119:                 cp      0
 214++CB56 28 16                                jr      z,.LL134                    ;  If x1_hi = 0 then jump down to LL134 to skip the following, as the x-coordinate is already on-screen (as 0 <= (x_hi x_lo) <= 255)
 215++CB58 3D                                   dec     a
 216++CB59 32 73 7F                             ld      (varS),a                    ;  Otherwise x1_hi is positive, i.e. x1 >= 256 and off the right side of the screen, so set S = x1_hi - 1
 217++CB5C E5 D5 C5                             push    hl,,de,,bc
 218++CB5F CD B9 CB                             call    LL120                      ;  Call LL120 to calculate: (Y X) = (S x1_lo) * XX12+2      if T = 0  = (x1 - 256) * gradient
 219++CB62                                                                          ;                           (Y X) = (S x1_lo) / XX12+2      if T <> 0 = (x1 - 256) / gradient
 220++CB62                                                                          ;  with the sign of (Y X) set to the opposite of theline's direction of slope
 221++CB62 C1 D1 E1                             pop     hl,,de,,bc
 222++CB65 2A EC C9                             ld      hl,(varYX)
 223++CB68 09                                   add     hl,bc                        ;OPTIMISATION 6/11/21 simplfied post debug
 224++CB69 44 4D                                ld      bc,hl                        ;OPTIMISATION 6/11/21 simplfied post debug
 225++CB6B 21 FF 00                             ld      hl,255                      ; Set x1 = 255
 226++CB6E              ; We have moved the point so the x-coordinate is on screen (i.e. in the range 0-255), so now for they-coordinate
 227++CB6E 78           .LL134:                 ld      a,b                         ; If y1_hi is positive, jump down to LL135  to skip the following
 228++CB6F ED 27 80                             test    $80                         ;
 229++CB72 28 1A                                jr      z,.LL135                    ;
 230++CB74 32 73 7F                             ld      (varS),a                    ; Otherwise y1_hi is negative, i.e. off the top of the screen, so set S = y1_hi
 231++CB77 79                                   ld      a,c                         ; Set R = y1_lo
 232++CB78 32 72 7F                             ld      (varR),a                    ;
 233++CB7B E5 D5 C5                             push    hl,,de,,bc
 234++CB7E CD 1A CC                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 235++CB81                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 236++CB81                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 237++CB81 C1 D1 E1                             pop     hl,,de,,bc
 238++CB84 D5                                   push    de
 239++CB85 EB                                   ex      hl,de                       ; de = x1
 240++CB86 2A EC C9                             ld      hl,(varYX)                  ; hl = varYX
 241++CB89 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 242++CB8A D1                                   pop     de                          ; de = x2 again
 243++CB8B 01 00 00                             ld      bc,0                        ; Set y1 = 0
 244++CB8E 79           .LL135:                 ld      a,c                         ; if bc < 128 then no work to do
 245++CB8F E6 80                                and     $80
 246++CB91 B0                                   or      b                           ; here we see if c bit 8 is set or anything in b as we know if its 0 this would mean there is no need to clip
 247++CB92 C8                                   ret     z
 248++CB93 E5                                   push    hl
 249++CB94 60 69                                ld      hl,bc
 250++CB96 01 80 00                             ld      bc,128
 251++CB99 B7                                   or      a
 252++CB9A ED 42                                sbc     hl,bc                       ; hl =  (S R) = (y1_hi y1_lo) - 128
 253++CB9C 22 72 7F                             ld      (varRS), hl                 ; and now RS (or SR)
 254++CB9F 7C                                   ld      a,h
 255++CBA0 E1                                   pop     hl
 256++CBA1 ED 27 80                             test    $80                         ; If the subtraction underflowed, i.e. if y1 < 192, then y1 is already on-screen, so jump to LL136 to return from the subroutine, as we are done
 257++CBA4 C0                                   ret     nz
 258++CBA5              ; If we get here then y1 >= 192, i.e. off the bottom of the screen
 259++CBA5 E5 D5 C5     .LL139:                 push    hl,,de,,bc
 260++CBA8 CD 1A CC                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 261++CBAB                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 262++CBAB                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 263++CBAB C1 D1 E1                             pop     hl,,de,,bc
 264++CBAE D5                                   push    de
 265++CBAF EB                                   ex      hl,de
 266++CBB0 2A EC C9                             ld      hl,(varYX)
 267++CBB3 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 268++CBB4 01 7F 00                             ld      bc,127                      ; set bc to 127 bottom of screen
 269++CBB7 D1                                   pop     de
 270++CBB8 C9           .LL136:                 ret                                 ;  Return from the subroutine
 271++CBB9                      ENDIF
 272++CBB9
 273++CBB9              ; Calculate the following:   * If T = 0  (more vertical than horizontal), (Y X) = (S x1_lo) * XX12+2
 274++CBB9              ;                            * If T <> 0 (more horizontal than vertical), (Y X) = (S x1_lo) / XX12+2
 275++CBB9              ;                              giving (Y X) the opposite sign to the slope direction in XX12+3.
 276++CBB9              ; Other entry points        LL122                Calculate (Y X) = (S R) * Q and set the sign to the opposite of the top byte on the stack
 277++CBB9 7D           LL120:                  ld      a,l                          ; Set R = x1_lo
 278++CBBA 32 72 7F                             ld      (varR),a
 279++CBBD CD 77 CC                             call    LL129                        ;  Call LL129 to do the following:  Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 280++CBC0 F5                                   push    af                           ;  Store A on the stack so we can use it later
 281++CBC1 C5                                   push    bc
 282++CBC2 47                                   ld      b,a
 283++CBC3 3A 8D 7F                             ld      a,(varT)                     ; instead : (Y X) = (S R ) / Q
 284++CBC6 FE 00                                cp      0
 285++CBC8 78                                   ld      a,b
 286++CBC9 C1                                   pop     bc                           ; we can't use af as that would disrupt the flags
 287++CBCA C2 E1 CB                             jp      nz, .LL121
 288++CBCD              ; The following calculates:  (Y X) = (S R) * Q using the same shift-and-add algorithm that's documented in MULT1
 289++CBCD 3A E7 C9     .LL122:                  ld      a,(clipGradient)
 290++CBD0 32 71 7F                             ld      (varQ),a; optimise
 291++CBD3 CD BA 90                             call    HLequSRmulQdiv256
 292++CBD6 22 EC C9                             ld      (varYX),hl
 293++CBD9 F1                                   pop     af
 294++CBDA ED 27 80                             test    $80
 295++CBDD CA 0D CC                             jp      z,.LL133
 296++CBE0 C9                                   ret
 297++CBE1 11 FE FF     .LL121:                  ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 298++CBE4 2A 72 7F                             ld      hl,(varRS)                  ; hl = RS
 299++CBE7 3A 71 7F                             ld      a,(varQ)
 300++CBEA 47                                   ld      b,a                         ; b = q
 301++CBEB              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 301++CBEB CB 25       >			   sla l
 301++CBED CB 14       >			   rl  h
 302++CBEF 7C                                   ld      a,h
 303++CBF0 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 304++CBF2                                      JumpIfALTNusng b, .LL132            ; if S <  Q = 256/gradient skip subtractions
 304++CBF2 B8          >                        cp      b
 304++CBF3 DA FE CB    >                        jp		c, .LL132
 305++CBF6 3F           .LL131:                 ccf                                 ; compliment carry
 306++CBF7 98                                   sbc     a,b                         ; q
 307++CBF8 67                                   ld      h,a                         ; h (s)
 308++CBF9 7D                                   ld      a,l                         ; r
 309++CBFA DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 310++CBFC 37                                   scf                                 ; set carry for next rolls
 311++CBFD 3F                                   ccf
 312++CBFE              .LL132:                 RollDELeft1                         ; Rotate de bits left
 312++CBFE CB 13       >               rl  e
 312++CC00 CB 12       >               rl  d
 313++CC02 38 E7                                jr      c,.LL130                    ;
 314++CC04 ED 53 EC C9                          ld      (varYX),de
 315++CC08 F1                                   pop     af              ; get back sign
 316++CC09 ED 27 80                             test    $80
 317++CC0C C8                                   ret     z               ; if negative then return with value as is reversed sign
 318++CC0D 2A EC C9     .LL133:                 ld      hl,(varYX)      ; may not actually need this?
 319++CC10                                      NegHL
 319++CC10 AF          >                    xor a
 319++CC11 95          >                    sub l
 319++CC12 6F          >                    ld l,a
 319++CC13 9F          >                    sbc a,a
 319++CC14 94          >                    sub h
 319++CC15 67          >                    ld h,a
 320++CC16 22 EC C9                             ld      (varYX),hl
 321++CC19 C9           .LL128:                 ret
 322++CC1A
 323++CC1A
 324++CC1A
 325++CC1A
 326++CC1A              ; Calculate the following: * If T = 0,  calculate (Y X) = (S R) / XX12+2 (actually SR & XX12+2 /256)
 327++CC1A              ;                          * If T <> 0, calculate (Y X) = (S R) * XX12+2
 328++CC1A              ;                          giving (Y X) the opposite sign to the slope direction in XX12+3.
 329++CC1A              ;
 330++CC1A              ; Other entry points:      LL121                Calculate (Y X) = (S R) / Q and set the sign to the opposite of the top byte on the stack
 331++CC1A              ;                          LL133                Negate (Y X) and return from the subroutine
 332++CC1A              ;                          LL128                Contains an RTS
 333++CC1A CD 77 CC     LL123:                  call    LL129                       ; Call LL129 to do the following: Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 334++CC1D F5                                   push    af                          ; Store A on the stack so we can use it later
 335++CC1E C5                                   push    bc                          ; If T is non-zero, so it's more horizontal than vertical, jump down to LL121 to calculate this
 336++CC1F 47                                   ld      b,a
 337++CC20 3A 8D 7F                             ld      a,(varT)                    ; instead : (Y X) = (S R) * Q *** this looks to be the wrong way roudn for Y!!!!
 338++CC23 FE 00                                cp      0
 339++CC25 78                                   ld      a,b
 340++CC26 C1                                   pop     bc
 341++CC27 C2 63 CC                             jp      nz, .LL122
 342++CC2A              ; The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2, its actually X.Y=R.S*256/Q
 343++CC2A 11 FE FF     .LL121:                 ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 344++CC2D 2A 72 7F                             ld      hl,(varRS)                  ; hl = RS
 345++CC30 3A 71 7F                             ld      a,(varQ)
 346++CC33 47                                   ld      b,a                         ; b = q
 347++CC34              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 347++CC34 CB 25       >			   sla l
 347++CC36 CB 14       >			   rl  h
 348++CC38 7C                                   ld      a,h
 349++CC39 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 350++CC3B                                      JumpIfALTNusng b, .LL132            ; if S <  Q = 256/gradient skip subtractions
 350++CC3B B8          >                        cp      b
 350++CC3C DA 47 CC    >                        jp		c, .LL132
 351++CC3F 3F           .LL131:                 ccf                                 ; compliment carry
 352++CC40 98                                   sbc     a,b                         ; q
 353++CC41 67                                   ld      h,a                         ; h (s)
 354++CC42 7D                                   ld      a,l                         ; r
 355++CC43 DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 356++CC45 37                                   scf                                 ; set carry for next rolls
 357++CC46 3F                                   ccf
 358++CC47              .LL132:                 RollDELeft1                         ; Rotate de bits left
 358++CC47 CB 13       >               rl  e
 358++CC49 CB 12       >               rl  d
 359++CC4B 38 E7                                jr      c,.LL130                    ;
 360++CC4D ED 53 EC C9                          ld      (varYX),de
 361++CC51 F1                                   pop     af              ; get back sign
 362++CC52 ED 27 80                             test    $80
 363++CC55 C8                                   ret     z               ; if negative then return with value as is reversed sign
 364++CC56 2A EC C9     .LL133:                 ld      hl,(varYX)      ; may not actually need this?
 365++CC59                                      NegHL
 365++CC59 AF          >                    xor a
 365++CC5A 95          >                    sub l
 365++CC5B 6F          >                    ld l,a
 365++CC5C 9F          >                    sbc a,a
 365++CC5D 94          >                    sub h
 365++CC5E 67          >                    ld h,a
 366++CC5F 22 EC C9                             ld      (varYX),hl
 367++CC62 C9           .LL128:                 ret
 368++CC63              ; The following calculates:  (Y X) = (S R) * Q using the same shift-and-add algorithm that's documented in MULT1
 369++CC63 3A E7 C9     .LL122:                 ld      a,(clipGradient)
 370++CC66 32 71 7F                             ld      (varQ),a; optimise
 371++CC69 CD BA 90                             call    HLequSRmulQdiv256
 372++CC6C 22 EC C9                             ld      (varYX),hl
 373++CC6F F1                                   pop     af
 374++CC70 ED 27 80                             test    $80
 375++CC73 CA 56 CC                             jp      z,.LL133
 376++CC76 C9                                   ret
 377++CC77
 378++CC77              ; Do the following, in this order:  Q = XX12+2
 379++CC77              ;                                   A = S EOR XX12+3
 380++CC77              ;                                   (S R) = |S R|
 381++CC77              ; This sets up the variables required above to calculate (S R) / XX12+2 and give the result the opposite sign to XX13+3.
 382++CC77 3A E7 C9     LL129:                  ld      a,(clipGradient)
 383++CC7A 32 71 7F                             ld      (varQ),a                    ; Set Q = XX12+2
 384++CC7D 3A 73 7F                             ld      a,(varS)                    ; If S is positive, jump to LL127
 385++CC80 E5 F5                                push    hl,,af                      ; else
 386++CC82 ED 27 80                             test    $80                         ;   if bit 7 is clear
 387++CC85 28 0C                                jr      z,.LL127                    ;      RS = ABS RS
 388++CC87 2A 72 7F                             ld      hl,(varRS)                  ;      .
 389++CC8A                                      NegHL                               ;      .
 389++CC8A AF          >                    xor a
 389++CC8B 95          >                    sub l
 389++CC8C 6F          >                    ld l,a
 389++CC8D 9F          >                    sbc a,a
 389++CC8E 94          >                    sub h
 389++CC8F 67          >                    ld h,a
 390++CC90 22 72 7F                             ld      (varRS),hl                  ;      .
 391++CC93 21 E8 C9     .LL127:                 ld      hl,clipDxySign              ;   hl = dxy sign
 392++CC96 F1                                   pop     af                          ;
 393++CC97 AE                                   xor     (hl)                        ; a = S XOR clipDxySign
 394++CC98 E1                                   pop     hl
 395++CC99 C9                                   ret
 396++CC9A
 397++CC9A              ;--------------------------------------------------------------------------------------
 398++CC9A              ; Thow away out of bounds by more than 250
 399++CC9A              ClipLineV3:             ;break
 400++CC9A                      IFDEF       CLIPVersion3
 401++CC9A ~            ;My logic version
 402++CC9A ~            .CheckYorder:
 403++CC9A ~                                    ld      hl,(UBnkPreClipY1)
 404++CC9A ~                                    ld      de,(UBnkPreClipY2)
 405++CC9A ~                                    call    CompareHLDESgn
 406++CC9A ~                                    jr      c,.LineP1toP2                          ; if Y1 < Y2 then we can use the points as is else we have to swap
 407++CC9A ~            .LineP2toP1:            ld      bc,(UBnkPreClipY2)                      ; fetch and write out in reverse
 408++CC9A ~                                    ld      ix,(UBnkPreClipY1)
 409++CC9A ~                                    ld      de,(UBnkPreClipX1)
 410++CC9A ~                                    ld      hl,(UBnkPreClipX2)
 411++CC9A ~                                    ld      (UBnkPreClipY1),bc                      ; bc - XX15(2,3) Y1
 412++CC9A ~                                    ld      (UBnkPreClipY2),ix                      ; ix - XX12(0,1) Y2
 413++CC9A ~                                    ld      (UBnkPreClipX1),hl                      ; hl - XX15(0,1) X1
 414++CC9A ~                                    ld      (UBnkPreClipX2),de                      ;  de - XX15(4,5) X2
 415++CC9A ~                                    jp      .CheckNoClip
 416++CC9A ~            .LineP1toP2             ld      bc,(UBnkPreClipY1)                      ; bc - XX15(2,3) Y1
 417++CC9A ~                                    ld      ix,(UBnkPreClipY2)                      ; ix - XX12(0,1) Y2
 418++CC9A ~                                    ld      hl,(UBnkPreClipX1)                      ; hl - XX15(0,1) X1
 419++CC9A ~                                    ld      de,(UBnkPreClipX2)                      ; de - XX15(4,5) X2
 420++CC9A ~            .CheckNoClip:           ld      a,b
 421++CC9A ~                                    or      d
 422++CC9A ~                                    or      h
 423++CC9A ~                                    or      ixh
 424++CC9A ~                                    jp      nz,.CheckXOffScreen                 ; if both Y1 and y2 have bit 7 set
 425++CC9A ~                                    ld      a,c                                 ; then we clip
 426++CC9A ~                                    and     ixl
 427++CC9A ~                                    test    $80
 428++CC9A ~                                    jp      z, .ClipComplete
 429++CC9A ~            ;if either x1hi x2hi are 0 then we clip. if both <> 0and both same sign exit
 430++CC9A ~            .CheckXOffScreen:       ld      a,h
 431++CC9A ~                                    xor     d
 432++CC9A ~                                    test    $80                                 ; non descructive test of bit 7 is set
 433++CC9A ~                                    jp      nz,.X1X2OppositeSign                ; if bit 7 was set then x1 and x2 must be opposite signs so its on screen
 434++CC9A ~            .X1X2SameSigns:         ld      a,h                                 ; so to get there h and d must be the same sign
 435++CC9A ~                                    test    $80                                 ; if they are the same sign and at x1 is negative then x2 must be negative so off screen
 436++CC9A ~                                    JumpIfAIsZero .X1X2CheckIfBothRight
 437++CC9A ~            .X1X2BothNegative:      SetCarryFlag                                ; to get to here x1 and x2 must be high and off the same sign so its not to draw
 438++CC9A ~                                    ret
 439++CC9A ~            .X1X2CheckIfBothRight:  and     a                                   ; we have h in a already
 440++CC9A ~                                    jr      z,.X1OnScreen
 441++CC9A ~                                    ld      a,d
 442++CC9A ~                                    and     a
 443++CC9A ~                                    jr      z,.X2OnScreen
 444++CC9A ~            .X1X2OffRightSide:      SetCarryFlag                                ; to get to here x1 and x2 must be high and off the same sign so its not to draw
 445++CC9A ~                                    ret
 446++CC9A ~            ;                       to get to here x1 and x2 either span -ve to +ve or from on screen to off screen
 447++CC9A ~            .X1OnScreen:
 448++CC9A ~            .X2OnScreen:
 449++CC9A ~            .X1X2OppositeSign:
 450++CC9A ~            ;                       Now check to see if Y is off screen
 451++CC9A ~            .CheckYOffScreen:       ld      a,b                                     ; Check if y1 and y2 are opposite signs, fi so it spans screen so we are good
 452++CC9A ~            .CheckBothYNegative:    xor     ixh
 453++CC9A ~                                    test    $80                                     ; if bit 7 is set then opposite signs
 454++CC9A ~                                    jp      nz,.Y1Y2OppositeSign                    ; if y1 and y2 are opposite signs its on screen and spans at least one side
 455++CC9A ~            .Y1Y2SameSign:          ld      a,b                                     ; if they are the same sign then if one is negative, so is the other so off screen
 456++CC9A ~                                    test    $80
 457++CC9A ~                                    jp      z,.Y1Y2Positive
 458++CC9A ~            .Y1Y2Negative:          SetCarryFlag
 459++CC9A ~                                    ret
 460++CC9A ~            .Y1Y2Positive:          ld      a,c                                     ; if its the same sign y1 or y2 could be 0 and if they are
 461++CC9A ~                                    and     $80                                     ; this will test to see if b >0 or c > 127
 462++CC9A ~                                    or      b                                       ;
 463++CC9A ~                                    jp      z,.Y1OnScreen
 464++CC9A ~                                    ld      a,ixl
 465++CC9A ~                                    and     $80
 466++CC9A ~                                    or      ixh
 467++CC9A ~                                    jp      z,.Y2OnScreen
 468++CC9A ~            .Y1Y2OffBottomSide:     SetCarryFlag
 469++CC9A ~                                    ret
 470++CC9A ~            .Y1OnScreen:
 471++CC9A ~            .Y2OnScreen:
 472++CC9A ~            .Y1Y2OppositeSign:
 473++CC9A ~            .StartProcessing:       ld      hl,(UBnkPreClipX1)                      ; Now we can test and Clip
 474++CC9A ~                                    ld      de,(UBnkPreClipX2)                      ; de - XX15(4,5)
 475++CC9A ~                                    ld      iyh,0                                   ; set iyh flags to 0
 476++CC9A ~            ; if x1hi or y1 high <> 0 or y1 > 127 then set bit 1 of clipcoord       ; we can optimise this later
 477++CC9A ~                                    ld      a,h
 478++CC9A ~                                    or      b
 479++CC9A ~                                    jr      z,.CheckP1Ylo
 480++CC9A ~            ;                       iyh     bit 0 - P1 Needs Clipping
 481++CC9A ~            ;                               bit 1 - P2 Needs Clipping
 482++CC9A ~            ;                               bit 2 - x1 >= x2 (left to right)
 483++CC9A ~            ;                               bit 3 - y1 >= y2 (top to bottom)
 484++CC9A ~            ;                               bit 4 -  DY/DX (steep)
 485++CC9A ~            .P1OffScreen:           ld      iyh,1                                   ; if either p1 x or y was off screen set bit 0 to 1
 486++CC9A ~                                    jp      .CheckP2OffScreen                       ; .
 487++CC9A ~            .CheckP1Ylo:            ld      a,c                                     ; .
 488++CC9A ~                                    and     $80                                     ; .
 489++CC9A ~                                    jr      z,.CheckP2OffScreen                     ; .
 490++CC9A ~                                    ld      iyh,1                                   ; .
 491++CC9A ~            .CheckP2OffScreen:      ld      a,d                                     ; if x2hi or y2 off screen then set bit 2 of clipcoord to 1
 492++CC9A ~                                    or      ixh                                     ; .
 493++CC9A ~                                    jr      z,.CheckP2Ylo                           ; .
 494++CC9A ~            .P2OffScreen:           ld      a,iyh                                   ; .
 495++CC9A ~                                    or      2                                       ; .
 496++CC9A ~                                    ld      iyh,a                                   ; .
 497++CC9A ~                                    jp      .CheckXDirection                        ; .
 498++CC9A ~            .CheckP2Ylo:            ld      a,ixl                                   ; .
 499++CC9A ~                                    and     $80                                     ; .
 500++CC9A ~                                    jr      z,.CheckXDirection                      ; .
 501++CC9A ~                                    ld      a,iyh                                   ; .
 502++CC9A ~                                    or      2                                       ; .
 503++CC9A ~                                    ld      iyh,a                                   ; .
 504++CC9A ~            .CheckXDirection:       push    de,,hl
 505++CC9A ~                                    call    CompareHLDESgn                          ; IF HL equals DE, Z=1,C=0, IF HL is less than DE, Z=0,C=1, IF HL is more than DE, Z=0,C=0
 506++CC9A ~                                    pop     de,,hl
 507++CC9A ~                                    jp      c,.CalculateDx                          ;
 508++CC9A ~            .X1gteX2:               ld      a,iyh                                   ; if x1 >= x2 then set bit 3 to denote -ve x direction, note we will eliminate horziontal / vertical early as an optimisation
 509++CC9A ~                                    or      4                                       ; .
 510++CC9A ~                                    ld      iyh,a                                   ; .
 511++CC9A ~                                    ; Y Direction is now always top to bottom
 512++CC9A ~            .CalculateDx:           ClearCarryFlag                                  ;                       calculate DX
 513++CC9A ~                                    sbc     hl,de                                   ; .
 514++CC9A ~            .ABSDX:                 ld      a,h                                     ; HL = | HL - DE |
 515++CC9A ~                                    test    $80                                     ; .
 516++CC9A ~                                    jr      z,.DXPositive                           ; .
 517++CC9A ~                                    macronegate16hl                                 ; .
 518++CC9A ~            .DXPositive:            ex      de,hl                                   ; de = abs delta x
 519++CC9A ~            .CalculateDy:           ClearCarryFlag                                  ; hl = Y2 -Y1 as its pre sorted its always positive if on screen
 520++CC9A ~                                    ld      hl,ix                                   ; iy = hl = Y2 - Y1
 521++CC9A ~                                    sbc     hl,bc                                   ; .
 522++CC9A ~            .DYPositive:            ; Scale DX and DY to 8 bit, by here hl = abs dy, de = abs dx
 523++CC9A ~            ;calculate DY
 524++CC9A ~            .ScaleLoop:             ld      a,h                                     ; At this point DX and DY are ABS values
 525++CC9A ~                                    or      d                                       ; .
 526++CC9A ~                                    jr      z,.ScaleDone                            ; .
 527++CC9A ~                                    ShiftDERight1                                   ; .
 528++CC9A ~                                    ShiftHLRight1                                   ; .
 529++CC9A ~                                    jr      .ScaleLoop                              ; scaled down Dx and Dy to 8 bit, Dy may have been;;                                                                                               negative
 530++CC9A ~            .ScaleDone:             ; hl = ABS DY, DE = ABS DX,  bc = Y1, ix = Y2,   note H and D will be zero
 531++CC9A ~            ; if Dx = 0 then horizontal line and clip X1 & X2 only then exit
 532++CC9A ~            ; if Dy = 0 then vertical line and clip Y1 & Y2 only then exit
 533++CC9A ~
 534++CC9A ~            ; if DX < DY  gradient = 256 * delta_x_lo / delta_y_lo
 535++CC9A ~            ;        else gradient = 256 * delta_y_lo / delta_x_lo, set bit 5 of clipcord
 536++CC9A ~            .CalculateDelta:        ld      a,e                                     ; if DX < DY goto DX/DY
 537++CC9A ~                                    JumpIfALTNusng l,.DXdivDY                       ; else do DY/DX
 538++CC9A ~            .DYdivDX:               ld      a,l                                     ;    A = DY
 539++CC9A ~                                    ld      d,e                                     ;    D = DX
 540++CC9A ~                                    call    AEquAmul256DivD                         ;    A = R = 256 * DY / DX
 541++CC9A ~            .SaveGradientDYDX:      ld      (Gradient),a
 542++CC9A ~                                    ld      a,iyh                                   ;    bit 5 of iyh denotes that its a DX/DY (steep), if its clear its DY/DX (shallow)
 543++CC9A ~                                    or      16                                      ;    .
 544++CC9A ~                                    ld      iyh,a                                   ;    .
 545++CC9A ~                                    jp      .ClipP1                                 ;    .
 546++CC9A ~            .DXdivDY:               ld      a,e                                     ;    A = DX
 547++CC9A ~                                    ld      d,l                                     ;    D = DY
 548++CC9A ~                                    call    AEquAmul256DivD                         ;    A = R = 256 * DX / DY
 549++CC9A ~            .SaveGradientDXDY:      ld      (Gradient),a
 550++CC9A ~            ; if bit 1 of clipccord is set call    LL118
 551++CC9A ~            .ClipP1:                ld      a,iyh                                   ; if bit 1 is clear to say no need to clip pont 1 we just jump to point 2
 552++CC9A ~                                    test    1                                       ; .
 553++CC9A ~                                    jp      z,.ClipP2                               ; .
 554++CC9A ~                                    call    LL118v3                                 ; else clip P1 first
 555++CC9A ~                                    ld      a,b                                     ;      and if b or h have a value its failed to totally clip  as it may be only in bounds on just x or y
 556++CC9A ~                                    or      h                                       ;      .
 557++CC9A ~                                    jr      z, .P1Ygt127Check                       ;      .
 558++CC9A ~            .P1HighOutofBounds:     SetCarryFlag                                    ;      .
 559++CC9A ~                                    ret                                             ;      .
 560++CC9A ~            .P1Ygt127Check:         ld      a,c                                     ;      or if y > 127 its failed to totally clip
 561++CC9A ~                                    test    $80                                     ;      .
 562++CC9A ~                                    SetCarryFlag                                    ;      .
 563++CC9A ~                                    ret     nz                                      ;      .
 564++CC9A ~                                    ld      (UBnkPreClipY1), bc                     ;      else its valid and clipped point 1 so save ti back
 565++CC9A ~                                    ld      (UBnkPreClipX1), hl
 566++CC9A ~            ; if bit 2 of clipcoord is set
 567++CC9A ~            ;        swap x1y1 with x2y2
 568++CC9A ~            ;        call    LL118
 569++CC9A ~            .ClipP2:                ld      a,iyh                                   ; so now repeat all that for point 2
 570++CC9A ~                                    and     2
 571++CC9A ~                                    jp      z,.ClipComplete
 572++CC9A ~                                    call    LL118v3PreSwap                          ; now clip p2
 573++CC9A ~                                    ld      a,b                                     ; if either high is set then it failed to properly clip
 574++CC9A ~                                    or      h                                       ; .
 575++CC9A ~                                    jr      z, .P2Ygt127Check                       ; .
 576++CC9A ~            .P2HighOutofBounds:     SetCarryFlag                                    ; .
 577++CC9A ~                                    ret                                             ; .
 578++CC9A ~            .P2Ygt127Check:         ld      a,c                                     ; if c > 127 then it also failed to clip
 579++CC9A ~                                    test    $80                                     ; .
 580++CC9A ~                                    SetCarryFlag                                    ; .
 581++CC9A ~                                    ret     nz                                      ; .
 582++CC9A ~                                    ld      (UBnkPreClipY2), bc                     ; bc - XX15(2,3);;
 583++CC9A ~                                    ld      (UBnkPreClipX2), hl
 584++CC9A ~            ;clip compelte exit
 585++CC9A ~            .ClipComplete:          ld      bc,(UBnkPreClipY1)                      ; bc - XX15(2,3);;
 586++CC9A ~                                    ld      hl,(UBnkPreClipX1)
 587++CC9A ~                                    ld      ix,(UBnkPreClipY2)                      ; bc - XX15(2,3);;
 588++CC9A ~                                    ld      de,(UBnkPreClipX2)
 589++CC9A ~            .SaveClippedLine:       ld      a,c                                     ; Y1 = y1 lo, x2 = x2 lo, x1 = x1 lo y1 = y1 lo                                   -- Nothing off screen
 590++CC9A ~                                    ld      (UBnkNewY1),a
 591++CC9A ~                                    ld      a,ixl
 592++CC9A ~                                    ld      (UBnkNewY2),a
 593++CC9A ~                                    ld      a,l
 594++CC9A ~                                    ld      (UBnkNewX1),a
 595++CC9A ~                                    ld      a,e
 596++CC9A ~                                    ld      (UBnkNewX2),a
 597++CC9A ~                                    ClearCarryFlag                              ; we have a success so not carry
 598++CC9A ~                                    ret
 599++CC9A ~            ;-----------------------------------------------------------------------------------------------------------------------------------
 600++CC9A ~            LL118v3PreSwap:         ld      bc,(UBnkPreClipY2)                  ; bc - XX15(2,3);;
 601++CC9A ~                                    ld      hl,(UBnkPreClipX2)
 602++CC9A ~                                    jp      LL118v3Fetched
 603++CC9A ~            ;-----------------------------------------------------------------------------------------------------------------------------------
 604++CC9A ~            LL118v3:                ld      bc,(UBnkPreClipY1)                  ; bc - XX15(2,3);;
 605++CC9A ~                                    ld      hl,(UBnkPreClipX1)
 606++CC9A ~            ;-----------------------------------------------------------------------------------------------------------------------------------
 607++CC9A ~            LL118v3Fetched:
 608++CC9A ~            ;                       At this point bc = y position, hl = x position both 16 bit
 609++CC9A ~            ;                       if x < 0 then x = 0
 610++CC9A ~            ;                                     adjust = -x */ gradient depending on if its steep or shallow
 611++CC9A ~            ;                                     y = y +- adjust depending on if we are going +ve direction or negative direction  (or simplify it, that it will always be + for x1y1 and - for x2y2 as we pre-sort)
 612++CC9A ~            ;                       if x > 255 then x = 255
 613++CC9A ~            ;                                     adjust = x-255 */ gradient
 614++CC9A ~            ;                                     y = y +- adjust depending on if we are going +ve direction or negative direction  (or simplify it, that it will always be + for x1y1 and - for x2y2 as we pre-sort)
 615++CC9A ~            ;                       if y < 0 then y = 0
 616++CC9A ~            ;                                     adjust = -y */ gradient
 617++CC9A ~            ;                                     x = x +- adjust depending on if we are going left to right or visa versa
 618++CC9A ~            ;                       if y >127 then y = 127
 619++CC9A ~            ;                                     adjust = y-127 */ gradient
 620++CC9A ~            ;                                     x = x +- adjust depending on if we are going left to right or visa versa
 621++CC9A ~            ;
 622++CC9A ~            ;                       iyh     bit 0 - P1 Needs Clipping
 623++CC9A ~            ;                               bit 1 - P2 Needs Clipping
 624++CC9A ~            ;                               bit 2 - x1 >= x2 (left to right)
 625++CC9A ~            ;                               bit 3 - y1 >= y2 (top to bottom)
 626++CC9A ~            ;                               bit 4 -  DY/DX (steep)
 627++CC9A ~            ; if X1 hi <> 0
 628++CC9A ~            LL118:                  ;break
 629++CC9A ~                                    ld      a,h                                     ; if x1 high is 0 then we don't need to clip x at all
 630++CC9A ~                                    and     a
 631++CC9A ~                                    jp      z,.X1NoClipNeeded
 632++CC9A ~            ;                       if x1 hi bit 7 is set (so negative)
 633++CC9A ~            .CalcBlockX:            test    $80                                     ; if h is postiive then jump to the XPositive Calc block
 634++CC9A ~                                    jr      z,.CalcBlockXPositive
 635++CC9A ~            ;                       if clipccord bit 5 is set Adjust = abs(X1) / Gradient (may need to swap bit check?)
 636++CC9A ~            .CalcBlockXNegative:    ld      a,iyh                                   ;
 637++CC9A ~                                    test    16                                      ; bit 5 of iyh denotes that its a DY/DX, if its clear its DX/DY
 638++CC9A ~                                    jr      nz,.CalcBlockXNegMulGrad
 639++CC9A ~            .CaclBlockXNegDivGrad:  macronegate16hl
 640++CC9A ~                                    ld      a,(Gradient)
 641++CC9A ~                                    push    bc                                      ; abs(X1) / Gradient
 642++CC9A ~                                    ld      h,c                     ; move offset into high byte of h
 643++CC9A ~                                    ld      l,0
 644++CC9A ~                                    ld      c,a
 645++CC9A ~                                    call    div_hl_c
 646++CC9A ~                                    pop     bc
 647++CC9A ~                                    jp      .DoneXNegCalc
 648++CC9A ~            ;                       else set Adjust = abs(X1) * Gradient
 649++CC9A ~            .CalcBlockXNegMulGrad:  push    bc                                      ; abs(X1) * Gradient
 650++CC9A ~                                    macronegate16hl
 651++CC9A ~                                    ld      a,(Gradient)
 652++CC9A ~                                    call    HLeqyHLmulAdiv256
 653++CC9A ~                                    pop     bc
 654++CC9A ~            ;                       y1 += adjust * (-1 if bit 4 of clipcoord is set)
 655++CC9A ~            ;                       x1 = 0 then call into DonrX1Calc
 656++CC9A ~            ;                       we can skip the test for negative Y direection
 657++CC9A ~            .DoneXNegCalc:          macronegate16hl
 658++CC9A ~            .XNegSkipNegate:        ld      de,bc
 659++CC9A ~                                    ex      hl,de
 660++CC9A ~                                    add     hl,de
 661++CC9A ~                                    ld      bc,hl
 662++CC9A ~                                    ld      hl,0
 663++CC9A ~                                    jp      .DoneXCalc
 664++CC9A ~            ;                       else x1 hi is positive
 665++CC9A ~            ;                       if clipccord bit 5 is set Adjust = X1 lo / Gradient (may need to swap bit check?)
 666++CC9A ~            .CalcBlockXPositive:    ld      a,iyh
 667++CC9A ~                                    test    16
 668++CC9A ~                                    jr      nz,.CalcBlockXPosMulGrad
 669++CC9A ~            .CalcBlockXPosDivGrad:  ld      a,(Gradient)            ;Q = gradient
 670++CC9A ~                                    push    bc
 671++CC9A ~                                    ld      c,a
 672++CC9A ~                                    ld      de,255
 673++CC9A ~                                    sub     hl,de
 674++CC9A ~                                    ld      h,l
 675++CC9A ~                                    ld      l,0
 676++CC9A ~                                    call    div_hl_c
 677++CC9A ~                                    pop     bc
 678++CC9A ~                                    jp      .DoneX2Calc
 679++CC9A ~            ;                                 else set Adjust = X1 lo * Gradient
 680++CC9A ~            .CalcBlockXPosMulGrad:  push    bc
 681++CC9A ~                                    ld      a,(Gradient)            ;Q = gradient
 682++CC9A ~                                    ld      de,255
 683++CC9A ~                                    sub     hl,de
 684++CC9A ~                                    call    HLeqyHLmulAdiv256       ; hl = YX = SR / Q
 685++CC9A ~                                    pop     bc
 686++CC9A ~            ;                       y1 += adjust * (-1 if bit 4 of clipcoord is set)
 687++CC9A ~            ;                       x1 = 255
 688++CC9A ~            ;                       we can skip the test for negative Y direection
 689++CC9A ~            .DoneX2Calc:            macronegate16hl
 690++CC9A ~            .X2SkipNegate:          ex      de,hl
 691++CC9A ~                                    ld      hl,bc
 692++CC9A ~                                    add     hl,de
 693++CC9A ~                                    ld      bc,hl
 694++CC9A ~                                    ld      hl,255
 695++CC9A ~            ;                       if Y1 hi <> 0 or Y1 low >= 128 then y coordinate is good
 696++CC9A ~            .DoneXCalc:             ld      a,b
 697++CC9A ~                                    and     a
 698++CC9A ~                                    jr      nz,.CalcBlockY1Test
 699++CC9A ~                                    ld      a,c
 700++CC9A ~                                    and     $80
 701++CC9A ~                                    ClearCarryFlag                  ; speculative clear of carry in case its good
 702++CC9A ~                                    ret     z
 703++CC9A ~            ;                       if Y1 hi bit 7 is set
 704++CC9A ~            .X1NoClipNeeded:
 705++CC9A ~            .CalcBlockY1Test:       ld      a,b
 706++CC9A ~                                    test    $80
 707++CC9A ~                                    jr      z,.CalcBlockYPos       ; if Y is positive jump forward
 708++CC9A ~            ;                       if clipccord bit 5 is set Adjust = abs(Y1) / Gradient (may need to swap bit check?)
 709++CC9A ~                                    break
 710++CC9A ~            .CalcBlockY1:           ld      a,iyh
 711++CC9A ~                                    test    16
 712++CC9A ~                                    jr      nz,.CalcBlockYNegMulGrad
 713++CC9A ~            .CalcBlockYNegDivGrad:  macronegate16bc
 714++CC9A ~                                    ld      a,(Gradient)            ;Q = gradient
 715++CC9A ~                                    push    hl
 716++CC9A ~                                    ld      h,c                     ; move offset into high byte of h
 717++CC9A ~                                    ld      l,0
 718++CC9A ~                                    ld      c,a
 719++CC9A ~                                    call    div_hl_c;LLHLdivC;div_hl_c
 720++CC9A ~                                    pop     de
 721++CC9A ~                                    ex      de,hl
 722++CC9A ~                                    jp      .DoneBlockY1
 723++CC9A ~            ;                                 else set Adjust = abs(Y1) * Gradient
 724++CC9A ~            .CalcBlockYNegMulGrad:  macronegate16bc
 725++CC9A ~                                    push    hl
 726++CC9A ~                                    ld      hl,bc
 727++CC9A ~                                    ld      a,(Gradient)            ;Q = gradient
 728++CC9A ~                                    call    HLeqyHLmulAdiv256       ; hl = YX = SR / Q
 729++CC9A ~                                    pop     de
 730++CC9A ~                                    ex      de,hl
 731++CC9A ~            ;                       x1 += adjust * (-1 if bit 3 of clipcoord is set)
 732++CC9A ~            ;                       y1 = 0
 733++CC9A ~            ;                       ret
 734++CC9A ~            ;                       now we have done the adjustment, if y or x are off screen then the line spans screen in only 1 dimension so doesn't get drawn
 735++CC9A ~            .DoneBlockY1:           ld      a,iyh
 736++CC9A ~                                    test    4
 737++CC9A ~                                    jr      z,.Y1SkipNegate
 738++CC9A ~                                    macronegate16de
 739++CC9A ~            .Y1SkipNegate:          add     hl,de
 740++CC9A ~                                    ld      bc,0
 741++CC9A ~                                    ret
 742++CC9A ~            ;                       if clipccord bit 5 is set Adjust = Y1 lo / Gradient (may need to swap bit check?)
 743++CC9A ~            .CalcBlockYPos:         ld      a,iyh
 744++CC9A ~                                    test    16
 745++CC9A ~                                    jr      z,.CalcBlockYPosMulGrad
 746++CC9A ~            .CalcBlockYPosDivGrad:  ld      a,(Gradient)            ;Q = gradient
 747++CC9A ~                                    push    hl
 748++CC9A ~                                    ld      hl,bc
 749++CC9A ~                                    ld      de,127
 750++CC9A ~                                    sub     hl,de
 751++CC9A ~                                    ld      h,l
 752++CC9A ~                                    ld      l,0
 753++CC9A ~                                    ld      c,a
 754++CC9A ~                                    call    div_hl_c;LLHLdivC
 755++CC9A ~                                    pop     de
 756++CC9A ~                                    ex      de,hl
 757++CC9A ~                                    jp      .DoneBlockY2
 758++CC9A ~            ;                                 else set Adjust = Y1 lo * Gradient
 759++CC9A ~            .CalcBlockYPosMulGrad:  push    hl
 760++CC9A ~                                    ld      hl,bc
 761++CC9A ~                                    ld      de,127
 762++CC9A ~                                    sub     hl,de
 763++CC9A ~                                    ld      a,(Gradient)
 764++CC9A ~                                    call    HLeqyHLmulAdiv256       ; hl = YX = SR / Q
 765++CC9A ~                                    pop     de
 766++CC9A ~                                    ex      de,hl
 767++CC9A ~            ;                x1 += adjust * (-1 if bit 3 of clipcoord is set)
 768++CC9A ~            ;                y1 = 127
 769++CC9A ~            .DoneBlockY2:           ld      a,iyh
 770++CC9A ~                                    test    4
 771++CC9A ~                                    jr      nz,.Y2SkipNegate
 772++CC9A ~                                    macronegate16de
 773++CC9A ~            .Y2SkipNegate:          add     hl,de
 774++CC9A ~                                    ld      bc,127
 775++CC9A ~                                    ret
 776++CC9A                      ELSE
 777++CC9A C9                       ret
 778++CC9B                      ENDIF
 779++CC9B              ; old code for on screen test
 780++CC9B              ;;;;;;; if y1 > 127 and y2 > 127 then same sing and exit
 781++CC9B              ;;;;;;
 782++CC9B              ;;;;;;;if y1hi y2hi are <> 0 and both same sign exit
 783++CC9B              ;;;;;;.CheckYOffScreen:       ld      a,b                                 ; y1 and y2 high tests
 784++CC9B              ;;;;;;                        and     ixh
 785++CC9B              ;;;;;;                        jp      .CheckYLow
 786++CC9B              ;;;;;;                        ld
 787++CC9B              ;;;;;;                        and     a                                   ; if either is zero then we can check for > 127
 788++CC9B              ;;;;;;                        jr      z,.YHighNegativeCheck               ;
 789++CC9B              ;;;;;;                        ld      a,ixh                               ;
 790++CC9B              ;;;;;;                        and     a                                   ;
 791++CC9B              ;;;;;;                        ret     nz                                  ;
 792++CC9B              ;;;;;;;if y1h bit 7 and y2h bit 7 set then exit as both -ve
 793++CC9B              ;;;;;;                        ld      a,b                                 ;
 794++CC9B              ;;;;;;                        and     ixh                                 ;
 795++CC9B              ;;;;;;                        and     $80                                 ;
 796++CC9B              ;;;;;;                        ret     z                                   ;
 797++CC9B              ;;;;;;;if y1h > 0 and y2h > 0 then exit as both are +ve high
 798++CC9B              ;;;;;;                        ld      a,b                                 ;
 799++CC9B              ;;;;;;                        and     ixh                                 ;
 800++CC9B              ;;;;;;                        ret     nz                                  ;
 801++CC9B              ;;;;;;;if y1h or y2h is not 0 then proceed to clip
 802++CC9B              ;;;;;;                        ld      a,b
 803++CC9B              ;;;;;;                        or      ixh
 804++CC9B              ;;;;;;                        jr      nz,.StartProcessing
 805++CC9B              ;;;;;;;if (y1l bit 7 is set and y1h is clear ) or (y2l bit 7 is set and y2h is clear) the proceed to clip
 806++CC9B              ;;;;;;                        ld      a,c
 807++CC9B              ;;;;;;                        or      ixl
 808++CC9B              ;;;;;;                        and     $80
 809++CC9B              ;;;;;;                        jr      z,.StartProcessing
 810++CC9B              ;;;;;;
 811++CC9B              ;;;;;;.CheckYOffScreen:       ld      a,b                                 ;
 812++CC9B              ;;;;;;                        cp      0                                   ;
 813++CC9B              ;;;;;;                        jr      z,.Y1HighIsZero                     ;
 814++CC9B              ;;;;;;                        ld      a,ixh                               ; if we get here Y1 high <> 0
 815++CC9B              ;;;;;;                        cp      0                                   ;
 816++CC9B              ;;;;;;                        jr      z,.Y2HighIsZero                     ; if they are both non zero we can do a sign check
 817++CC9B              ;;;;;;.CheckYSameSign:        ld      a,b                                 ; if we get here Y1 high and Y2 high are not zero
 818++CC9B              ;;;;;;                        xor     ixh                                 ; so same sign then bail out if they are
 819++CC9B              ;;;;;;                        and     $80                                 ;
 820++CC9B              ;;;;;;                        ret     z                                   ;
 821++CC9B              ;;;;;;;if we get here either y1hi or y2 hi are 0, now check and y1 low > 127 & y2 low > 127, exit
 822++CC9B              ;;;;;;.Y1HighIsZero:          ld      a,ixh                               ; as y1h is zero, if y2h is zero we do y1 y2 test
 823++CC9B              ;;;;;;                        cp      0                                   ;
 824++CC9B              ;;;;;;                        jr      nz,.Startprocessing                 ;
 825++CC9B              ;;;;;;                        ld      a,c                                 ; so by here y1h and y2h must be zero
 826++CC9B              ;;;;;;                        and     ixl
 827++CC9B              ;;;;;;
 828++CC9B              ;;;;;;                        .CheckY2Lo                        ;
 829++CC9B              ;;;;;;.CheckY1Lo:             ld      a,c
 830++CC9B              ;;;;;;                        and     $80
 831++CC9B              ;;;;;;                        jr      z,.StartProcessing
 832++CC9B              ;;;;;;.CheckY2Lo:             ld      a,ixl
 833++CC9B              ;;;;;;                        and     $80
 834++CC9B              ;;;;;;                        ret     nz
 835++CC9B              ;;;;;;;clip = 0
# file closed: ././ModelRender/CLIP-LL145.asm
 673+ CC9B              ;--------------------------------------------------------------------------------------------------------
 674+ CC9B                                      include "./Universe/Ships/CopyRotmatToTransMat.asm"
# file opened: ././Universe/Ships/CopyRotmatToTransMat.asm
   1++CC9B              ; Set TransMatTo
   2++CC9B              ; XX16(1 0)   (3 2)   (5 4)   = sidev_x sidev_y sidev_z XX16(13,12) (15 14) (17 16)
   3++CC9B              ; XX16(7 6)   (9 8)   (11 10) = roofv_x roofv_y roofv_z XX16(7 6)   (9 8)   (11 10)
   4++CC9B              ; XX16(13 12) (15 14) (17 16) = nosev_x nosev_y nosev_z XX16(1 0)   (3 2)   (5 4)
   5++CC9B              ; This moves Side XYZ to position 0, Roof XYZ to position 1 annd nose XYZ to position 2 as a copy of each batch of 6 bytes
   6++CC9B              ; 18 byte fast copy
   7++CC9B
   8++CC9B              ; Fast copy using the stack                                                         ; T states
   9++CC9B DD 21 00 00  CopyRotmatToTransMat:   ld      ix,0                                                ; 14
  10++CC9F DD 39                                add     ix,sp                                               ; 15
  11++CCA1 31 29 C0                             ld      sp,UBnkrotmatSidevX ; Source                        ; 10
  12++CCA4 E1                                   pop     hl                  ; UBnkrotmatSidevX              ; 10
  13++CCA5 D1                                   pop     de                  ; UBnkrotmatSidevY              ; 10
  14++CCA6 C1                                   pop     bc                  ; UBnkrotmatSidevZ              ; 10
  15++CCA7 D9                                   exx                                                         ; 4
  16++CCA8 E1                                   pop     hl                  ; UBnkrotmatRoofvX              ; 10
  17++CCA9 D1                                   pop     de                  ; UBnkrotmatRoofvY              ; 10
  18++CCAA C1                                   pop     bc                  ; UBnkrotmatRoofvZ              ; 10
  19++CCAB 31 6E C0                             ld      sp,UBnkTransmatRoofvZ+2 ; Target + 2 reversed       ; 10
  20++CCAE C5                                   push    bc                                                  ; 10
  21++CCAF D5                                   push    de                                                  ; 10
  22++CCB0 E5                                   push    hl                                                  ; 10
  23++CCB1 D9                                   exx                                                         ; 4
  24++CCB2 C5                                   push    bc                                                  ; 10
  25++CCB3 D5                                   push    de                                                  ; 10
  26++CCB4 E5                                   push    hl                                                  ; 10
  27++CCB5 31 35 C0                             ld      sp,UBnkrotmatNosevX ; Source                        ; 10
  28++CCB8 E1                                   pop     hl                  ; UBnkrotmatSidevX              ; 10
  29++CCB9 D1                                   pop     de                  ; UBnkrotmatSidevY              ; 10
  30++CCBA C1                                   pop     bc                  ; UBnkrotmatSidevZ              ; 10
  31++CCBB 31 74 C0                             ld      sp,UBnkTransmatNosevZ+2                             ; 10
  32++CCBE C5                                   push    bc                                                  ; 10
  33++CCBF D5                                   push    de                                                  ; 10
  34++CCC0 E5                                   push    hl                                                  ; 10
  35++CCC1 DD F9                                ld      sp,ix               ; restore stack                 ; 10
  36++CCC3 C9                                   ret                                                         ; 10 Total 267 (LDI version is 318)
  37++CCC4
  38++CCC4
  39++CCC4
  40++CCC4              ;CopyRotmatToTransMat:
  41++CCC4              ;                        ld      hl,UBnkrotmatSidevX
  42++CCC4              ;                        ld      de,UBnkTransmatSidevX
  43++CCC4              ;                        SixLDIInstrunctions
  44++CCC4              ;                        ld      hl,UBnkrotmatRoofvX
  45++CCC4              ;                        ld      de, UBnkTransmatRoofvX
  46++CCC4              ;                        SixLDIInstrunctions
  47++CCC4              ;                        ld      hl,UBnkrotmatNosevX
  48++CCC4              ;                        ld      de, UBnkTransmatNosevX
  49++CCC4              ;                        SixLDIInstrunctions
  50++CCC4              ;                        ret
  51++CCC4
  52++CCC4              CopyRotToTransMacro:    MACRO
  53++CCC4 ~                                    ld      hl,UBnkrotmatSidevX
  54++CCC4 ~                                    ld      de,UBnkTransmatSidevX
  55++CCC4 ~                                    SixLDIInstrunctions
  56++CCC4 ~                                    SixLDIInstrunctions
  57++CCC4 ~                                    SixLDIInstrunctions
  58++CCC4                                      ENDM
  59++CCC4
# file closed: ././Universe/Ships/CopyRotmatToTransMat.asm
 675+ CCC4                                      include "./Universe/Ships/TransposeXX12ByShipToXX15.asm"
# file opened: ././Universe/Ships/TransposeXX12ByShipToXX15.asm
   1++CCC4              TransposeXX12ByShipToXX15:
   2++CCC4 2A AD C0             ld		hl,(UBnkXX12xLo)					; get X into HL
   3++CCC7 7C           		ld		a,h			                        ; get XX12 Sign
   4++CCC8 E6 80        		and		$80									; check sign bit on high byte
   5++CCCA 47           		ld		b,a									; and put it in of 12xlo in b
   6++CCCB                      ;110921 debugld      h,0
   7++CCCB 7C                   ld      a,h
   8++CCCC E6 7F                and     $7F
   9++CCCE 67                   ld      h,a
  10++CCCF                      ;110921 debugld      h,0
  11++CCCF ED 5B 20 C0  		ld		de,(UBnkxlo)						;
  12++CCD3 3A 22 C0     		ld		a,(UBnkxsgn)						; get Ship Pos (low,high,sign)
  13++CCD6 E6 80        		and		$80									; make sure we only have bit 7
  14++CCD8 4F           		ld		c,a									; and put sign of unkxsgn c
  15++CCD9              		MMUSelectMathsBankedFns
  15++CCD9 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
  16++CCDD CD 2F 00             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
  17++CCE0 B4           		or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
  18++CCE1 67           		ld		h,a
  19++CCE2 22 A7 C0     		ld		(UBnkXScaled),hl					; now write it out to XX15 X pos
  20++CCE5              ; ..................................
  21++CCE5 2A AF C0     		ld		hl,(UBnkXX12yLo)					; Repeat above for Y coordinate
  22++CCE8 7C           		ld		a,h
  23++CCE9 E6 80        		and		$80
  24++CCEB 47           		ld		b,a
  25++CCEC                      ;110921 debugld      h,0
  26++CCEC 7C                   ld      a,h
  27++CCED E6 7F                and     $7F
  28++CCEF 67                   ld      h,a
  29++CCF0                      ;110921 debugld      h,0
  30++CCF0 ED 5B 23 C0  		ld		de,(UBnkylo)
  31++CCF4 3A 25 C0     		ld		a,(UBnkysgn)
  32++CCF7 E6 80        		and		$80									; make sure we only have bit 7
  33++CCF9 4F           		ld		c,a
  34++CCFA              		MMUSelectMathsBankedFns
  34++CCFA ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
  35++CCFE CD 2F 00             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  36++CD01 B4           		or		h									; combine sign in A with H
  37++CD02 67           		ld		h,a
  38++CD03 22 A9 C0     		ld		(UBnkYScaled),hl
  39++CD06              ; ..................................
  40++CD06 2A B1 C0     		ld		hl,(UBnkXX12zLo)					; and now repeat for Z cooord
  41++CD09 7C           		ld		a,h
  42++CD0A E6 80        		and		$80
  43++CD0C 47           		ld		b,a
  44++CD0D                      ;110921 debugld      h,0
  45++CD0D 7C                   ld      a,h
  46++CD0E E6 7F                and     $7F
  47++CD10 67                   ld      h,a
  48++CD11                      ;110921 debugld      h,0
  49++CD11 ED 5B 26 C0  		ld		de,(UBnkzlo)
  50++CD15 3A 28 C0     		ld		a,(UBnkzsgn)
  51++CD18 E6 80        		and		$80									; make sure we only have bit 7
  52++CD1A 4F           		ld		c,a
  53++CD1B              		MMUSelectMathsBankedFns
  53++CD1B ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
  54++CD1F CD 2F 00             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  55++CD22 B4           		or		h									; combine sign in A with H
  56++CD23 67           		ld		h,a
  57++CD24 CB 7C        		bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
  58++CD26 20 16        		jr		nz,ClampZto4                        ; result was negative so we need to clamp to 4
  59++CD28 E6 7F                and     $7F                                 ; a = value unsigned
  60++CD2A 20 06                jr      nz,NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
  61++CD2C 7D                   ld      a,l                                 ; get low byte now
  62++CD2D              		JumpIfALTNusng 4,ClampZto4					; if its < 4 then fix at 4
  62++CD2D FE 04       >                        cp      4
  62++CD2F DA 3E CD    >                        jp		c, ClampZto4
  63++CD32              NoClampZto4:
  64++CD32 22 AB C0     		ld		(UBnkZScaled),hl					; hl = signed calculation and > 4
  65++CD35 7D           		ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
  66++CD36 32 8D 7F             ld      (varT),a
  67++CD39 7C           		ld		a,h
  68++CD3A 32 70 7F             ld      (varU),a
  69++CD3D C9           		ret
  70++CD3E              ClampZto4:											; This is where we limit 4 to a minimum of 4
  71++CD3E 21 04 00     		ld		hl,4
  72++CD41 22 AB C0     		ld		(UBnkZScaled),hl; BODGE FOR NOW
  73++CD44 7D           		ld		a,l
  74++CD45 32 8D 7F             ld      (varT),a                            ;                                                                           ;;;
  75++CD48 7C           		ld		a,h
  76++CD49 32 70 7F             ld      (varU),a 						; compatibility for now
  77++CD4C C9           		ret
  78++CD4D
# file closed: ././Universe/Ships/TransposeXX12ByShipToXX15.asm
 676+ CD4D                                      include "./Maths/Utilities/ScaleNodeTo8Bit.asm"
# file opened: ././Maths/Utilities/ScaleNodeTo8Bit.asm
   1++CD4D              ScaleNodeTo8Bit:								; TODO make signed
   2++CD4D ED 4B AB C0  	ld			bc,(UBnkZScaled)
   3++CD51 2A A7 C0     	ld			hl,(UBnkXScaled)
   4++CD54 ED 5B A9 C0  	ld			de,(UBnkYScaled)
   5++CD58              SetABSbc:
   6++CD58 78           	ld			a,b
   7++CD59 DD 67        	ld			ixh,a
   8++CD5B E6 7F        	and			SignMask8Bit
   9++CD5D 47           	ld			b,a									; bc = ABS bc
  10++CD5E              SetABShl:
  11++CD5E 7C           	ld			a,h
  12++CD5F DD 6F        	ld			ixl,a
  13++CD61 E6 7F        	and			SignMask8Bit
  14++CD63 67           	ld			h,a									; hl = ABS hl
  15++CD64              SetABSde:
  16++CD64 7A           	ld			a,d
  17++CD65 FD 67        	ld			iyh,a
  18++CD67 E6 7F        	and			SignMask8Bit
  19++CD69 57           	ld			d,a									; de = ABS de
  20++CD6A              ScaleNodeTo8BitLoop:
  21++CD6A 78               ld          a,b		                            ; U	\ z hi
  22++CD6B B4           	or			h                                   ; XX15+1	\ x hi
  23++CD6C B2           	or			d                                   ; XX15+4	\ y hi
  24++CD6D 28 0F            jr          z,ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
  25++CD6F                  ShiftHLRight1
  25++CD6F CB 3C       >			   srl h
  25++CD71 CB 1D       >			   rr  l
  26++CD73                  ShiftDERight1
  26++CD73 CB 3A       >			   srl d
  26++CD75 CB 1B       >			   rr  e
  27++CD77              	ShiftBCRight1
  27++CD77 CB 38       >			   srl b
  27++CD79 CB 19       >			   rr  c
  28++CD7B C3 6A CD         jp          ScaleNodeTo8BitLoop
  29++CD7E              ScaleNodeDone:										; now we have scaled values we have to deal with sign
  30++CD7E DD 7C        	ld			a,ixh								; get sign bit and or with b
  31++CD80 E6 80        	and			SignOnly8Bit
  32++CD82 B0           	or			b
  33++CD83 47           	ld			b,a
  34++CD84              SignforHL:
  35++CD84 DD 7D        	ld			a,ixl								; get sign bit and or with b
  36++CD86 E6 80        	and			SignOnly8Bit
  37++CD88 B4           	or			h
  38++CD89 67           	ld			h,a
  39++CD8A              SignforDE:
  40++CD8A FD 7C        	ld			a,iyh								; get sign bit and or with b
  41++CD8C E6 80        	and			SignOnly8Bit
  42++CD8E B2           	or			d
  43++CD8F 57           	ld			d,a
  44++CD90              SignsDoneSaveResult:
  45++CD90 ED 43 AB C0  	ld			(UBnkZScaled),bc
  46++CD94 22 A7 C0     	ld			(UBnkXScaled),hl
  47++CD97 ED 53 A9 C0  	ld			(UBnkYScaled),de
  48++CD9B 78           	ld			a,b
  49++CD9C 32 70 7F     	ld			(varU),a
  50++CD9F 79           	ld			a,c
  51++CDA0 32 8D 7F     	ld			(varT),a
  52++CDA3 C9           	ret
  53++CDA4
# file closed: ././Maths/Utilities/ScaleNodeTo8Bit.asm
 677+ CDA4
 678+ CDA4              ;--------------------------------------------------------------------------------------------------------
 679+ CDA4 21 D3 C0     SetFaceAVisible:        ld      hl,UBnkFaceVisArray
 680+ CDA7 ED 31                                add     hl,a
 681+ CDA9 3E FF                                ld      a,$FF
 682+ CDAB 77                                   ld      (hl),a
 683+ CDAC C9                                   ret
 684+ CDAD              ;--------------------------------------------------------------------------------------------------------
 685+ CDAD 21 D3 C0     SetFaceAHidden:         ld      hl,UBnkFaceVisArray
 686+ CDB0 ED 31                                add     hl,a
 687+ CDB2 AF                                   xor     a
 688+ CDB3 77                                   ld      (hl),a
 689+ CDB4 C9                                   ret
 690+ CDB5              ;--------------------------------------------------------------------------------------------------------
 691+ CDB5 3A 04 C4     SetAllFacesVisible:     ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+FaceCtX4Addr                                 ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 692+ CDB8 CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 693+ CDBA CB 3F                                srl     a                           ;  /=4  TODO add this into blueprint data for speed                                                           ;;; For loop = 15 to 0
 694+ CDBC 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 695+ CDBD 21 D3 C0                             ld      hl,UBnkFaceVisArray
 696+ CDC0 3E FF                                ld      a,$FF
 697+ CDC2              SetAllFacesVisibleLoop:
 698+ CDC2 77           EE30:                   ld      (hl),a
 699+ CDC3 23                                   inc     hl
 700+ CDC4 10 FC                                djnz    SetAllFacesVisibleLoop
 701+ CDC6 C9                                   ret
 702+ CDC7              ;--------------------------------------------------------------------------------------------------------
 703+ CDC7 3A 04 C4     SetAllFacesHidden:      ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+ShipHullFacesCount                           ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 704+ CDCA CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 705+ CDCC CB 3F                                srl     a                           ;  /=4                                                                                  ;;; For loop = 15 to 0
 706+ CDCE 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 707+ CDCF 06 10                                ld      b,16
 708+ CDD1 21 D3 C0                             ld      hl,UBnkFaceVisArray
 709+ CDD4 3E 00                                ld      a,$00
 710+ CDD6 77           SetAllFacesHiddenLoop:  ld      (hl),a
 711+ CDD7 23                                   inc     hl
 712+ CDD8 10 FC                                djnz    SetAllFacesHiddenLoop
 713+ CDDA C9                                   ret
 714+ CDDB
 715+ CDDB              ;;;;X = normal scale
 716+ CDDB              ;;;;ZtempHi = zhi
 717+ CDDB              ;;;;......................................................
 718+ CDDB              ;;;; if ztemp hi <> 0                                   ::Scale Object Distance
 719+ CDDB              ;;;;  Loop                                              ::LL90
 720+ CDDB              ;;;;     inc X
 721+ CDDB              ;;;;     divide X, Y & ZtempHiLo by 2
 722+ CDDB              ;;;;  Until ZtempHi = 0
 723+ CDDB              ;;;;......................................................
 724+ CDDB              ;-LL21---------------------------------------------------------------------------------------------------
 725+ CDDB                  DISPLAY "Tracing 3", $
 726+ CDDB
 727+ CDDB                                      include "Universe/Ships/NormaliseTransMat.asm"
# file opened: ./Universe/Ships/NormaliseTransMat.asm
   1++CDDB              ;divdide by 16 using undocumented instrunctions
   2++CDDB 47           Norm256mulAdivQ:        ld      b,a
   3++CDDC 0E 00                                ld      c,0
   4++CDDE 16 00                                ld      d,0
   5++CDE0 3A 71 7F                             ld      a,(varQ)
   6++CDE3 5F                                   ld      e,a
   7++CDE4              ;Input: BC = Dividend, DE = Divisor, HL = 0
   8++CDE4              ;Output: BC = Quotient, HL = Remainder
   9++CDE4 21 00 00     NormDIV16UNDOC:         ld      hl,0
  10++CDE7 78                                   ld      a,b
  11++CDE8 06 10                                ld      b,16
  12++CDEA CB 31        NormDIV16UNDOCLOOP:     sll	    c		; unroll 16 times
  13++CDEC 17                                   rla	    		; ...
  14++CDED ED 6A                                adc	    hl,hl		; ...
  15++CDEF ED 52                                sbc	    hl,de		; ...
  16++CDF1 30 02                                jr	    nc,NormDIV16UNDOCSKIP		; ...
  17++CDF3 19                                   add	    hl,de		; ...
  18++CDF4 0D                                   dec	    c		; ...
  19++CDF5 10 F3        NormDIV16UNDOCSKIP:     djnz    NormDIV16UNDOCLOOP
  20++CDF7 79                                   ld      a,c
  21++CDF8 32 72 7F                             ld      (varR),a
  22++CDFB C9                                   ret
  23++CDFC
  24++CDFC FD 67        Norm256mulAdivQSignA:   ld      iyh,a
  25++CDFE                                      ClearSignBitA
  25++CDFE E6 7F       >                        and     SignMask8Bit
  26++CE00 CD DB CD                             call    Norm256mulAdivQ              ; do 15 bit unsigned
  27++CE03 FD 7C                                ld      a,iyh                       ; now correct R reg
  28++CE05                                      SignBitOnlyA
  28++CE05 E6 80       >                        and     SignOnly8Bit
  29++CE07 B1                                   or      c
  30++CE08 32 72 7F                             ld      (varR),a
  31++CE0B C9                                   ret
  32++CE0C
  33++CE0C              ; Tested OK
  34++CE0C              ;LL21
  35++CE0C              NormaliseTransMat:
  36++CE0C                      IFDEF LOGMATHS
  37++CE0C ~                            ld      hl,UBnkTransmatNosevZ+1     ; initialise loop
  38++CE0C ~                            ld      b,9                         ; total of 9 elements to transform
  39++CE0C ~                            MMUSelectMathsTables
  40++CE0C ~            .LL21Loop:      ld      d,(hl)
  41++CE0C ~                            dec     hl
  42++CE0C ~                            ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
  43++CE0C ~                            ShiftDELeft1                        ; De = DE * 2
  44++CE0C ~                            ld      a,d                         ; a = hi byte after shifting
  45++CE0C ~                            push	hl
  46++CE0C ~                            push	bc
  47++CE0C ~                            call    AEquAmul256Div197Log        ; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
  48++CE0C ~                            ;ld      a,c                         ; BFRDIV returns R also in l reg
  49++CE0C ~                            pop		bc
  50++CE0C ~                            pop		hl							; bc gets wrecked by BFRDIV
  51++CE0C ~                            ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
  52++CE0C ~                            dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
  53++CE0C ~                            djnz    .LL21Loop                   ; loop from 2zLo through to 0xLo
  54++CE0C ~                            MMUSelectROM0
  55++CE0C ~                            ret
  56++CE0C                      ELSE
  57++CE0C 21 73 C0                     ld      hl,UBnkTransmatNosevZ+1         ; initialise loop
  58++CE0F 0E C5                        ld      c,ConstNorm                 ; c = Q = norm = 197
  59++CE11 79                           ld      a,c
  60++CE12 32 71 7F                     ld      (varQ),a                    ; set up varQ
  61++CE15 06 09                        ld      b,9                         ; total of 9 elements to transform
  62++CE17 56           LL21Loop:       ld      d,(hl)
  63++CE18 2B                           dec     hl
  64++CE19 5E                           ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
  65++CE1A                              ShiftDELeft1                        ; De = DE * 2
  65++CE1A CB 23       >			   sla e
  65++CE1C CB 12       >			   rl  d
  66++CE1E 7A                           ld      a,d                         ; a = hi byte after shifting
  67++CE1F E5                           push	hl
  68++CE20 C5                           push	bc
  69++CE21 CD DB CD                     call    Norm256mulAdivQ
  70++CE24                              ;===call    RequAmul256divC				; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
  71++CE24 79                           ld      a,c                         ; BFRDIV returns R also in l reg
  72++CE25 C1                           pop		bc
  73++CE26 E1                           pop		hl							; bc gets wrecked by BFRDIV
  74++CE27 77                           ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
  75++CE28 2B                           dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
  76++CE29 10 EC                        djnz    LL21Loop                    ; loop from 2zLo through to 0xLo
  77++CE2B C9                           ret
  78++CE2C                      ENDIF
# file closed: ./Universe/Ships/NormaliseTransMat.asm
 728+ CE2C              ;;;                        include "Universe/Ships/NormaliseXX15.asm"
 729+ CE2C              ;-LL91---------------------------------------------------------------------------------------------------
 730+ CE2C
 731+ CE2C              ; Now we have
 732+ CE2C              ;   * XX18(2 1 0) = (x_sign x_hi x_lo)
 733+ CE2C              ;   * XX18(5 4 3) = (y_sign y_hi y_lo)
 734+ CE2C              ;   * XX18(8 7 6) = (z_sign z_hi z_lo)
 735+ CE2C              ;
 736+ CE2C              ;--------------------------------------------------------------------------------------------------------
 737+ CE2C                                      include "Universe/Ships/InverseXX16.asm"
# file opened: ./Universe/Ships/InverseXX16.asm
   1++CE2C              ; TESTEDOK
   2++CE2C
   3++CE2C              ;ScaleOrientationXX16:                       ; DEBUG TODO will combine with inverse later
   4++CE2C              ;        ld      a,(XX17)
   5++CE2C              ;        ld      ixl,a
   6++CE2C              ;        ld      ixh,9
   7++CE2C              ;        ld      hl,UBnkTransInv0x
   8++CE2C              ;        ld      a,(hl)
   9++CE2C              ;ScaleNode:
  10++CE2C              ;        ld      b,ixl
  11++CE2C              ;ScaleNodeLoop:
  12++CE2C              ;        sla      a
  13++CE2C              ;        djnz    ScaleNodeLoop
  14++CE2C              ;        ld      (hl),a
  15++CE2C              ;        inc     hl
  16++CE2C              ;        inc     hl
  17++CE2C              ;        dec     ixh
  18++CE2C              ;        jr      nz,ScaleNode
  19++CE2C              ;        ret
  20++CE2C
  21++CE2C
  22++CE2C              InverseXX16:								; lead routine into .LL42	\ ->  &4B04 \ DO nodeX-Ycoords their comment  \  TrnspMat
  23++CE2C              ; we coudl combine this with move to transmat later as an optimisation
  24++CE2C              ; INPUT - All Scaled
  25++CE2C              ;  They transmat has already been put into side, roof nose order
  26++CE2C              ;  XX16   = |sidev_x| |sidev_y| |sidev_z|  1  0  3  2  5  4 note each bytepair is Scaled value in low and high byte just for sign
  27++CE2C              ;  XX16   = |roofv_x| |roofv_y| |roofv_z|  7  6  8  9 11 10
  28++CE2C              ;  XX16   = |nosev_x| |nosev_y| |nosev_z| 13 12 15 14 17 16
  29++CE2C              ; OUTPUT
  30++CE2C              ;  XX16(1 0)   ( 3 2) ( 5 4 ) =  sidev_x roofv_x nosev_x
  31++CE2C              ;  XX16(7 6)   ( 8 9) (11 10) =  sidev_y roofv_y nosev_y
  32++CE2C              ;  XX16(13 12) (15 14)(17 16) =  sidev_z roofv_z nosev_z
  33++CE2C              ; First all side values become compoment 0 of each vector
  34++CE2C 2A 62 C0             ld      hl,(UBnkTransmatSidevX)     ;
  35++CE2F ED 5B 68 C0          ld      de,(UBnkTransmatRoofvX)     ;
  36++CE33 ED 4B 6E C0          ld      bc,(UBnkTransmatNosevX)     ;
  37++CE37 22 7A C0             ld      (UBnkTransInvRow0x0),hl     ;
  38++CE3A ED 53 7C C0          ld      (UBnkTransInvRow0x1),de     ;
  39++CE3E ED 43 7E C0          ld      (UBnkTransInvRow0x2),bc     ;
  40++CE42 2A 64 C0             ld      hl,(UBnkTransmatSidevY)     ;
  41++CE45 ED 5B 6A C0          ld      de,(UBnkTransmatRoofvY)     ;
  42++CE49 ED 4B 70 C0          ld      bc,(UBnkTransmatNosevY)     ;
  43++CE4D 22 82 C0             ld      (UBnkTransInvRow1y0),hl     ;
  44++CE50 ED 53 84 C0          ld      (UBnkTransInvRow1y1),de     ;
  45++CE54 ED 43 86 C0          ld      (UBnkTransInvRow1y2),bc     ;
  46++CE58 2A 66 C0             ld      hl,(UBnkTransmatSidevZ)     ;
  47++CE5B ED 5B 6C C0          ld      de,(UBnkTransmatRoofvZ)     ;
  48++CE5F ED 4B 72 C0          ld      bc,(UBnkTransmatNosevZ)     ;
  49++CE63 22 8A C0             ld      (UBnkTransInvRow2z0),hl     ;
  50++CE66 ED 53 8C C0          ld      (UBnkTransInvRow2z1),de     ;
  51++CE6A ED 43 8E C0          ld      (UBnkTransInvRow2z2),bc     ;
  52++CE6E C9                   ret
  53++CE6F
  54++CE6F
# file closed: ./Universe/Ships/InverseXX16.asm
 738+ CE6F              ;--------------------------------------------------------------------------------------------------------
 739+ CE6F              ;--------------------------------------------------------------------------------------------------------
 740+ CE6F              ;   XX12(1 0) = [x y z] . sidev  = (dot_sidev_sign dot_sidev_lo)  = dot_sidev
 741+ CE6F              ;   XX12(3 2) = [x y z] . roofv  = (dot_roofv_sign dot_roofv_lo)  = dot_roofv
 742+ CE6F              ;   XX12(5 4) = [x y z] . nosev  = (dot_nosev_sign dot_nosev_lo)  = dot_nosev
 743+ CE6F              ; Returns
 744+ CE6F              ;
 745+ CE6F              ;   XX12(1 0)            The dot product of [x y z] vector with the sidev (or _x)
 746+ CE6F              ;                        vector, with the sign in XX12+1 and magnitude in XX12
 747+ CE6F              ;
 748+ CE6F              ;   XX12(3 2)            The dot product of [x y z] vector with the roofv (or _y)
 749+ CE6F              ;                        vector, with the sign in XX12+3 and magnitude in XX12+2
 750+ CE6F              ;
 751+ CE6F              ;   XX12(5 4)            The dot product of [x y z] vector with the nosev (or _z)
 752+ CE6F              ;                        vector, with the sign in XX12+5 and magnitude in XX12+4
 753+ CE6F              ; TESTEDOK
 754+ CE6F              XX12DotOneRow:
 755+ CE6F              XX12CalcX:              N0equN1byN2div256 varT, (hl), (UBnkXScaled)       ; T = (hl) * regXX15fx /256
 755+ CE6F 3A A7 C0    >                        ld      a,(UBnkXScaled)                        ;
 755+ CE72 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 755+ CE73 7E          >                        ld      a,(hl)                        ; A = XX16 element
 755+ CE74 57          >                        ld      d,a
 755+ CE75 ED 30       >                        mul
 755+ CE77 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 755+ CE78 32 8D 7F    >                        ld      (varT),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 756+ CE7B 23                                   inc     hl                                  ; move to sign byte
 757+ CE7C              XX12CalcXSign:          AequN1xorN2 UBnkXScaledSign,(hl)             ;
 757+ CE7C 3A A8 C0    >                        ld      a,(UBnkXScaledSign)
 757+ CE7F AE          >                        xor     (hl)
 758+ CE80 32 73 7F                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 759+ CE83 23                                   inc     hl
 760+ CE84              XX12CalcY:              N0equN1byN2div256 varQ, (hl),(UBnkYScaled)       ; Q = XX16 * XX15 /256 using varQ to hold regXX15fx
 760+ CE84 3A A9 C0    >                        ld      a,(UBnkYScaled)                        ;
 760+ CE87 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 760+ CE88 7E          >                        ld      a,(hl)                        ; A = XX16 element
 760+ CE89 57          >                        ld      d,a
 760+ CE8A ED 30       >                        mul
 760+ CE8C 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 760+ CE8D 32 71 7F    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 761+ CE90                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 761+ CE90 3A 8D 7F    >                        ld       a,(varT)
 761+ CE93 32 72 7F    >                        ld       (varR),a
 762+ CE96 23                                   inc     hl
 763+ CE97                                      AequN1xorN2 UBnkYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 763+ CE97 3A AA C0    >                        ld      a,(UBnkYScaledSign)
 763+ CE9A AE          >                        xor     (hl)
 764+ CE9B              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 765+ CE9B E5           STequSRplusAQ           push    hl
 766+ CE9C CD 6D 9C                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 767+ CE9F E1                                   pop     hl
 768+ CEA0 32 8D 7F                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 769+ CEA3 23                                   inc     hl
 770+ CEA4              XX12CalcZ:              N0equN1byN2div256 varQ,(hl),(UBnkZScaled)       ; Q = |sidev_z| * z_lo / 256
 770+ CEA4 3A AB C0    >                        ld      a,(UBnkZScaled)                        ;
 770+ CEA7 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 770+ CEA8 7E          >                        ld      a,(hl)                        ; A = XX16 element
 770+ CEA9 57          >                        ld      d,a
 770+ CEAA ED 30       >                        mul
 770+ CEAC 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 770+ CEAD 32 71 7F    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 771+ CEB0                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 771+ CEB0 3A 8D 7F    >                        ld       a,(varT)
 771+ CEB3 32 72 7F    >                        ld       (varR),a
 772+ CEB6 23                                   inc     hl
 773+ CEB7                                      AequN1xorN2 UBnkZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 773+ CEB7 3A AC C0    >                        ld      a,(UBnkZScaledSign)
 773+ CEBA AE          >                        xor     (hl)
 774+ CEBB              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 775+ CEBB CD 6D 9C                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 776+ CEBE              ; Now we exit with A = result S = Sign
 777+ CEBE C9                                   ret
 778+ CEBF
 779+ CEBF
 780+ CEBF                  DISPLAY "Tracing 4", $
 781+ CEBF
 782+ CEBF              ;-- LL51---------------------------------------------------------------------------------------------------------------------------
 783+ CEBF              ;TESTED OK
 784+ CEBF              ;XX12EquScaleDotOrientation:                         ; .LL51 \ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z
 785+ CEBF              XX12EquXX15DotProductXX16:
 786+ CEBF 01 00 00                             ld      bc,0                                ; LDX, LDY 0
 787+ CEC2 21 62 C0                             ld      hl,UBnkTransmatSidevX
 788+ CEC5 CD 6F CE                             call    XX12DotOneRow
 789+ CEC8 32 AD C0                             ld      (UBnkXX12xLo),a
 790+ CECB 3A 73 7F                             ld      a,(varS)
 791+ CECE 32 AE C0                             ld      (UBnkXX12xSign),a
 792+ CED1 21 68 C0                             ld      hl,UBnkTransmatRoofvX
 793+ CED4 CD 6F CE                             call    XX12DotOneRow
 794+ CED7 32 AF C0                             ld      (UBnkXX12yLo),a
 795+ CEDA 3A 73 7F                             ld      a,(varS)
 796+ CEDD 32 B0 C0                             ld      (UBnkXX12ySign),a
 797+ CEE0 21 6E C0                             ld      hl,UBnkTransmatNosevX
 798+ CEE3 CD 6F CE                             call    XX12DotOneRow
 799+ CEE6 32 B1 C0                             ld      (UBnkXX12zLo),a
 800+ CEE9 3A 73 7F                             ld      a,(varS)
 801+ CEEC 32 B2 C0                             ld      (UBnkXX12zSign),a
 802+ CEEF C9                                   ret
 803+ CEF0              ;--------------------------------------------------------------------------------------------------------
 804+ CEF0                                      include "./Universe/Ships/CopyXX12ScaledToXX18.asm"
# file opened: ././Universe/Ships/CopyXX12ScaledToXX18.asm
   1++CEF0              CopyXX12ScaledToXX18:
   2++CEF0              CopyResultToDrawCam:
   3++CEF0                      ldCopyByte XX12         ,XX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++CEF0 3A AD C0    >                        ld       a,(XX12)
   3++CEF3 32 9B C0    >                        ld       (XX18),a
   4++CEF6                      ldCopyByte XX12+1       ,XX18+2           ; XX12+1 => XX18+2
   4++CEF6 3A AE C0    >                        ld       a,(XX12+1)
   4++CEF9 32 9D C0    >                        ld       (XX18+2),a
   5++CEFC                      ldCopyByte XX12+2       ,XX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++CEFC 3A AF C0    >                        ld       a,(XX12+2)
   5++CEFF 32 9E C0    >                        ld       (XX18+3),a
   6++CF02                      ldCopyByte XX12+3       ,XX18+5           ; XX12+3 => XX18+5
   6++CF02 3A B0 C0    >                        ld       a,(XX12+3)
   6++CF05 32 A0 C0    >                        ld       (XX18+5),a
   7++CF08                      ldCopyByte XX12+4       ,XX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++CF08 3A B1 C0    >                        ld       a,(XX12+4)
   7++CF0B 32 A1 C0    >                        ld       (XX18+6),a
   8++CF0E                      ldCopyByte XX12+5       ,XX18+8           ; XX12+5 => XX18+8
   8++CF0E 3A B2 C0    >                        ld       a,(XX12+5)
   8++CF11 32 A3 C0    >                        ld       (XX18+8),a
   9++CF14 C9                   ret
  10++CF15
# file closed: ././Universe/Ships/CopyXX12ScaledToXX18.asm
 805+ CF15                                      include "./Universe/Ships/CopyXX12toXX15.asm"
# file opened: ././Universe/Ships/CopyXX12toXX15.asm
   1++CF15              CopyXX12toXX15:         ldCopyByte  UBnkXX12xLo     ,UBnkXScaled        ; xlo
   1++CF15 3A AD C0    >                        ld       a,(UBnkXX12xLo)
   1++CF18 32 A7 C0    >                        ld       (UBnkXScaled),a
   2++CF1B                                      ldCopyByte  UBnkXX12xSign   ,UBnkXScaledSign    ; xsg
   2++CF1B 3A AE C0    >                        ld       a,(UBnkXX12xSign)
   2++CF1E 32 A8 C0    >                        ld       (UBnkXScaledSign),a
   3++CF21                                      ldCopyByte  UBnkXX12yLo     ,UBnkYScaled        ; xlo
   3++CF21 3A AF C0    >                        ld       a,(UBnkXX12yLo)
   3++CF24 32 A9 C0    >                        ld       (UBnkYScaled),a
   4++CF27                                      ldCopyByte  UBnkXX12ySign   ,UBnkYScaledSign    ; xsg
   4++CF27 3A B0 C0    >                        ld       a,(UBnkXX12ySign)
   4++CF2A 32 AA C0    >                        ld       (UBnkYScaledSign),a
   5++CF2D                                      ldCopyByte  UBnkXX12zLo     ,UBnkZScaled        ; xlo
   5++CF2D 3A B1 C0    >                        ld       a,(UBnkXX12zLo)
   5++CF30 32 AB C0    >                        ld       (UBnkZScaled),a
   6++CF33                                      ldCopyByte  UBnkXX12zSign   ,UBnkZScaledSign    ; xsg
   6++CF33 3A B2 C0    >                        ld       a,(UBnkXX12zSign)
   6++CF36 32 AC C0    >                        ld       (UBnkZScaledSign),a
   7++CF39 C9                                   ret
   8++CF3A
# file closed: ././Universe/Ships/CopyXX12toXX15.asm
 806+ CF3A                                      include "./Universe/Ships/CopyXX18toXX15.asm"
# file opened: ././Universe/Ships/CopyXX18toXX15.asm
   1++CF3A              CopyXX18toXX15:
   2++CF3A              CopyDrawCamToScaled:
   3++CF3A                      ldCopyByte  UBnkDrawCam0xLo ,UBnkXScaled        ; xlo
   3++CF3A 3A 9B C0    >                        ld       a,(UBnkDrawCam0xLo)
   3++CF3D 32 A7 C0    >                        ld       (UBnkXScaled),a
   4++CF40                      ldCopyByte  UBnkDrawCam0xSgn,UBnkXScaledSign    ; xsg
   4++CF40 3A 9D C0    >                        ld       a,(UBnkDrawCam0xSgn)
   4++CF43 32 A8 C0    >                        ld       (UBnkXScaledSign),a
   5++CF46                      ldCopyByte  UBnkDrawCam0yLo ,UBnkYScaled        ; xlo
   5++CF46 3A 9E C0    >                        ld       a,(UBnkDrawCam0yLo)
   5++CF49 32 A9 C0    >                        ld       (UBnkYScaled),a
   6++CF4C                      ldCopyByte  UBnkDrawCam0ySgn,UBnkYScaledSign    ; xsg
   6++CF4C 3A A0 C0    >                        ld       a,(UBnkDrawCam0ySgn)
   6++CF4F 32 AA C0    >                        ld       (UBnkYScaledSign),a
   7++CF52                      ldCopyByte  UBnkDrawCam0zLo ,UBnkZScaled        ; xlo
   7++CF52 3A A1 C0    >                        ld       a,(UBnkDrawCam0zLo)
   7++CF55 32 AB C0    >                        ld       (UBnkZScaled),a
   8++CF58                      ldCopyByte  UBnkDrawCam0zSgn,UBnkZScaledSign    ; xsg
   8++CF58 3A A3 C0    >                        ld       a,(UBnkDrawCam0zSgn)
   8++CF5B 32 AC C0    >                        ld       (UBnkZScaledSign),a
   9++CF5E C9                   ret
  10++CF5F
# file closed: ././Universe/Ships/CopyXX18toXX15.asm
 807+ CF5F                                      include "./Universe/Ships/CopyXX18ScaledToXX15.asm"
# file opened: ././Universe/Ships/CopyXX18ScaledToXX15.asm
   1++CF5F 2A 20 C0     LoadCraftToCamera:      ld      hl,(UBnkxlo)            ; UBnkxlo, UBnkxhi
   2++CF62 ED 5B 22 C0                          ld      de,(UBnkxsgn)           ; UBnkxsgn, UBnkylo
   3++CF66 ED 4B 24 C0                          ld      bc,(UBnkyhi)            ; UBnkyhi, UBnkysgn
   4++CF6A 22 9B C0                             ld      (UBnkDrawCam0xLo),hl    ; UBnkDrawCam0xLo, UBnkDrawCam0xHi
   5++CF6D ED 53 9D C0                          ld      (UBnkDrawCam0xSgn),de   ; UBnkDrawCam0xSgn,UBnkDrawCam0yLo
   6++CF71 ED 43 9F C0                          ld      (UBnkDrawCam0yHi),bc    ; UBnkDrawCam0yHi, UBnkDrawCam0ySgn
   7++CF75
   8++CF75 2A 26 C0                             ld      hl,(UBnkzlo)            ; UBnkzlo, UBnkzhi
   9++CF78 3A 28 C0                             ld      a,(UBnkzsgn)             ; UBnkzlo
  10++CF7B 22 A1 C0                             ld      (UBnkDrawCam0zLo),hl    ; UBnkDrawCam0zLo, UBnkDrawCam0zHi
  11++CF7E 32 A3 C0                             ld      (UBnkDrawCam0zSgn),a    ; UBnkDrawCam0zSgn
  12++CF81 C9                                   ret
  13++CF82              ;                       ld      hl,UBnkxlo
  14++CF82              ;                       ld      de,UBnkDrawCam0xLo
  15++CF82              ;                       NineLDIInstrunctions                ; transfer 9 bytes
  16++CF82 C9                                   ret
  17++CF83
  18++CF83 2A 9B C0     CopyCameraToXX15Signed: ld  hl,(UBnkDrawCam0xLo)
  19++CF86 3A 9D C0                             ld  a,(UBnkDrawCam0xSgn)
  20++CF89 B4                                   or  h
  21++CF8A 67                                   ld  h,a
  22++CF8B 22 A7 C0                             ld  (UBnkXScaled),hl
  23++CF8E 2A 9E C0                             ld  hl,(UBnkDrawCam0yLo)
  24++CF91 3A A0 C0                             ld  a,(UBnkDrawCam0ySgn)
  25++CF94 B4                                   or  h
  26++CF95 67                                   ld  h,a
  27++CF96 22 A9 C0                             ld  (UBnkYScaled),hl
  28++CF99 2A A1 C0                             ld  hl,(UBnkDrawCam0zLo)
  29++CF9C 3A A3 C0                             ld  a,(UBnkDrawCam0zSgn)
  30++CF9F B4                                   or  h
  31++CFA0 67                                   ld  h,a
  32++CFA1 22 AB C0                             ld  (UBnkZScaled),hl
  33++CFA4 C9                                   ret
  34++CFA5
  35++CFA5              ;;;CopyXX18ScaledToXX15:
  36++CFA5              ;;;CopyDrawCamToScaledMatrix:
  37++CFA5              ;;;        ldCopyByte  UBnkDrawCam0zSgn, UBnkZScaledSign   ; XX18+8 => XX15+5
  38++CFA5              ;;;        ldCopyByte  UBnkDrawCam0xLo,  UBnkXScaled       ; XX18+0 => XX15+0
  39++CFA5              ;;;        ldCopyByte  UBnkDrawCam0xSgn, UBnkXScaledSign   ; XX18+2 => XX15+1
  40++CFA5              ;;;        ldCopyByte  UBnkDrawCam0yLo,  UBnkYScaled       ; XX18+3 => XX15+2
  41++CFA5              ;;;        ldCopyByte  UBnkDrawCam0ySgn, UBnkYScaledSign   ; XX18+5 => XX15+3
  42++CFA5              ;;;        ldCopyByte  UBnkDrawCam0zLo,  UBnkZScaled       ; XX18+6 => XX15+4
  43++CFA5              ;;;        ret
  44++CFA5
  45++CFA5              ;;;CopyXX15ToXX18Scaled:
  46++CFA5              ;;;CopyScaledMatrixToDrawCam:
  47++CFA5              ;;;        ldCopyByte UBnkZScaledSign,   UBnkDrawCam0zSgn  ; XX15+5 => XX18+8
  48++CFA5              ;;;        ldCopyByte UBnkXScaled,       UBnkDrawCam0xLo   ; XX15+0 => XX18+0
  49++CFA5              ;;;        ldCopyByte UBnkXScaledSign,   UBnkDrawCam0xSgn  ; XX15+1 => XX18+2
  50++CFA5              ;;;        ldCopyByte UBnkYScaled,       UBnkDrawCam0yLo   ; XX15+2 => XX18+3
  51++CFA5              ;;;        ldCopyByte UBnkYScaledSign,   UBnkDrawCam0ySgn  ; XX15+3 => XX18+5
  52++CFA5              ;;;        ldCopyByte UBnkZScaled,       UBnkDrawCam0zLo   ; XX15+4 => XX18+6
  53++CFA5              ;;;        ret
  54++CFA5
  55++CFA5
  56++CFA5              XX15EquXX15AddXX18:
  57++CFA5              LL94Z:
  58++CFA5 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  59++CFA7 16 00                ld      d,0                                                     ;
  60++CFA9 3A AB C0             ld      a,(UBnkZScaled)                                         ;
  61++CFAC 6F                   ld      l,a                                                     ;
  62++CFAD 3A AC C0             ld      a,(UBnkZScaledSign)                                     ;
  63++CFB0 47                   ld      b,a                                                     ;
  64++CFB1 3A A1 C0             ld      a,(UBnkDrawCam0zLo)                                     ;
  65++CFB4 5F                   ld      e,a                                                     ;
  66++CFB5 3A A3 C0             ld      a,(UBnkDrawCam0zSgn)                                    ;
  67++CFB8 4F                   ld      c,a                                                     ;
  68++CFB9                      MMUSelectMathsBankedFns
  68++CFB9 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
  69++CFBD CD 2F 00             call    ADDHLDESignBC                                           ;
  70++CFC0 47                   ld      b,a                                                     ;
  71++CFC1 7C                   ld      a,h                                                     ;
  72++CFC2 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  73++CFC3 32 AC C0             ld      (UBnkZScaledSign),a                                     ;
  74++CFC6 7D                   ld      a,l                                                     ;
  75++CFC7 32 AB C0             ld      (UBnkZScaled),a                                         ;           endif
  76++CFCA              LL94X:
  77++CFCA 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  78++CFCC 16 00                ld      d,0                                                     ;
  79++CFCE 3A A7 C0             ld      a,(UBnkXScaled)                                         ;
  80++CFD1 6F                   ld      l,a                                                     ;
  81++CFD2 3A A8 C0             ld      a,(UBnkXScaledSign)                                     ;
  82++CFD5 47                   ld      b,a                                                     ;
  83++CFD6 3A 9B C0             ld      a,(UBnkDrawCam0xLo)                                     ;
  84++CFD9 5F                   ld      e,a                                                     ;
  85++CFDA 3A 9D C0             ld      a,(UBnkDrawCam0xSgn)                                    ;
  86++CFDD 4F                   ld      c,a                                                     ;
  87++CFDE                      MMUSelectMathsBankedFns
  87++CFDE ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
  88++CFE2 CD 2F 00             call    ADDHLDESignBC                                           ;
  89++CFE5 47                   ld      b,a                                                     ;
  90++CFE6 7C                   ld      a,h                                                     ;
  91++CFE7 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  92++CFE8 32 A8 C0             ld      (UBnkXScaledSign),a                                     ;
  93++CFEB 7D                   ld      a,l                                                     ;
  94++CFEC 32 A7 C0             ld      (UBnkXScaled),a                                         ;           endif
  95++CFEF              LL94Y:
  96++CFEF 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  97++CFF1 16 00                ld      d,0                                                     ;
  98++CFF3 3A A9 C0             ld      a,(UBnkYScaled)                                         ;
  99++CFF6 6F                   ld      l,a                                                     ;
 100++CFF7 3A AA C0             ld      a,(UBnkYScaledSign)                                     ;
 101++CFFA 47                   ld      b,a                                                     ;
 102++CFFB 3A 9E C0             ld      a,(UBnkDrawCam0yLo)                                     ;
 103++CFFE 5F                   ld      e,a                                                     ;
 104++CFFF 3A A0 C0             ld      a,(UBnkDrawCam0ySgn)                                    ;
 105++D002 4F                   ld      c,a                                                     ;
 106++D003                      MMUSelectMathsBankedFns
 106++D003 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 107++D007 CD 2F 00             call    ADDHLDESignBC                                           ;
 108++D00A 47                   ld      b,a                                                     ;
 109++D00B 7C                   ld      a,h                                                     ;
 110++D00C 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
 111++D00D 32 AA C0             ld      (UBnkYScaledSign),a                                     ;
 112++D010 7D                   ld      a,l                                                     ;
 113++D011 32 A9 C0             ld      (UBnkYScaled),a                                         ;
 114++D014 C9                   ret
 115++D015
# file closed: ././Universe/Ships/CopyXX18ScaledToXX15.asm
 808+ D015                                      include "./Universe/Ships/CopyXX12ToScaled.asm"
# file opened: ././Universe/Ships/CopyXX12ToScaled.asm
   1++D015              CopyXX12ToScaled:
   2++D015              CopyResultToScaled:
   3++D015                      ldCopyByte  XX12+0,UBnkXScaled      ; xnormal lo
   3++D015 3A AD C0    >                        ld       a,(XX12+0)
   3++D018 32 A7 C0    >                        ld       (UBnkXScaled),a
   4++D01B                      ldCopyByte  XX12+2,UBnkYScaled      ; ynormal lo
   4++D01B 3A AF C0    >                        ld       a,(XX12+2)
   4++D01E 32 A9 C0    >                        ld       (UBnkYScaled),a
   5++D021                      ldCopyByte  XX12+4,UBnkZScaled      ; znormal lo and leaves a holding zscaled normal
   5++D021 3A B1 C0    >                        ld       a,(XX12+4)
   5++D024 32 AB C0    >                        ld       (UBnkZScaled),a
   6++D027 C9                   ret
   7++D028
# file closed: ././Universe/Ships/CopyXX12ToScaled.asm
 809+ D028              ;--------------------------------------------------------------------------------------------------------
 810+ D028                                      include "./Maths/Utilities/DotProductXX12XX15.asm"
# file opened: ././Maths/Utilities/DotProductXX12XX15.asm
   1++D028              ;;; Q = XX12 xLo ,A = XX15 xLo
   2++D028              ;;; T = A * Q/256 Usgined  (FMLTU)
   3++D028              ;;; S = XX12 XSign Xor XX15 XSign
   4++D028              ;;; Q = XX12 Ynormal Lo, A = XX15+2 (y lo)
   5++D028              ;;; Q = A * Q/256 Usigned (FMLTI)
   6++D028              ;;; R = T
   7++D028              ;;; A = XX12+3 (ySign) Xor XX15+3 (ySign)
   8++D028              ;;; T = BADD s(A) = R + Q(SA) (xdot + ydot)
   9++D028              ;;; Q = XX12+4 (znormal lo) A = XX15+4 z lo
  10++D028              ;;; Q = A * Q /256 usigned (zdot)
  11++D028              ;;; R = T
  12++D028              ;;; A - XX15+ 5 Zsign Xor XX12+5 Z Sign
  13++D028
  14++D028
  15++D028
  16++D028              DotProductXX12XX15:
  17++D028 3A AD C0             ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  18++D02B                      JumpIfAIsZero dotxskipzero
  18++D02B A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  18++D02C CA 49 D0    >                        jp	    z, dotxskipzero
  19++D02F 5F                   ld          e,a
  20++D030 3A A7 C0             ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
  21++D033 57                   ld          d,a                     ; de = xx12 x signed
  22++D034                      JumpIfAIsZero dotxskipzero
  22++D034 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  22++D035 CA 49 D0    >                        jp	    z, dotxskipzero
  23++D038 ED 30        		mul
  24++D03A 42                   ld          b,d                     ; b = result
  25++D03B 3A AE C0             ld          a,(UBnkXX12xSign)
  26++D03E 21 A8 C0             ld          hl,UBnkXScaledSign
  27++D041 AE                   xor         (hl)
  28++D042 E6 80                and         $80                     ; so sign bit only
  29++D044 FD 67                ld          iyh ,a                   ; we actually need to preserve sign in iyh here
  30++D046 C3 4D D0             jp          dotmuly
  31++D049              dotxskipzero:
  32++D049 AF                   xor         a
  33++D04A 47                   ld          b,a
  34++D04B FD 67                ld          iyh,a
  35++D04D              dotmuly:
  36++D04D              ; now we have b = XX12 x &d  norm x signed
  37++D04D 3A AF C0             ld          a,(UBnkXX12yLo)
  38++D050                      JumpIfAIsZero dotyskipzero
  38++D050 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  38++D051 CA 70 D0    >                        jp	    z, dotyskipzero
  39++D054 5F                   ld          e,a
  40++D055 3A A9 C0             ld          a,(UBnkYScaled)         ; XX15+2
  41++D058                      JumpIfAIsZero dotyskipzero
  41++D058 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  41++D059 CA 70 D0    >                        jp	    z, dotyskipzero
  42++D05C 57                   ld          d,a                     ; de = xx12 x signed
  43++D05D ED 30                mul
  44++D05F 4A                   ld          c,d                     ; c = result
  45++D060 DD 69                ld          ixl,c
  46++D062 3A B0 C0             ld          a,(UBnkXX12ySign)       ; A = ysg
  47++D065 21 AA C0             ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
  48++D068 AE                   xor         (hl)                    ; XX15+3
  49++D069 E6 80                and         $80                     ; do b = x mul c = y mul, iyh = sign for b and a = sign for c
  50++D06B DD 67                ld          ixh,a
  51++D06D C3 74 D0             jp          dotaddxy
  52++D070              dotyskipzero:
  53++D070 AF                   xor         a
  54++D071 4F                   ld          c,a
  55++D072 DD 67                ld          ixh,a
  56++D074              dotaddxy:
  57++D074              ; Optimise later as this is 16 bit
  58++D074 26 00                ld          h,0                     ;
  59++D076 68                   ld          l,b                     ; hl = xlo + x scaled
  60++D077 16 00                ld          d,0                     ;
  61++D079 59                   ld          e,c                     ; de = ylo + yscaled
  62++D07A FD 44                ld          b,iyh                   ; b = sign of xlo + xscaled
  63++D07C 4F                   ld          c,a                     ; c = sign of ylo + yscaled
  64++D07D                      MMUSelectMathsBankedFns
  64++D07D ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
  65++D081 CD 2F 00             call ADDHLDESignBC                  ; so now hl = result so will push sign to h
  66++D084 47                   ld          b,a                     ; b = resultant sign , hl = add so far
  67++D085 3A B1 C0             ld          a,(UBnkXX12zLo)         ;
  68++D088                      JumpIfAIsZero dotzskipzero
  68++D088 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  68++D089 CA B2 D0    >                        jp	    z, dotzskipzero
  69++D08C 5F                   ld          e,a                     ;
  70++D08D 3A AB C0             ld          a,(UBnkZScaled)         ;
  71++D090                      JumpIfAIsZero dotzskipzero
  71++D090 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  71++D091 CA B2 D0    >                        jp	    z, dotzskipzero
  72++D094 57                   ld          d,a
  73++D095 ED 30                mul
  74++D097 E5                   push        hl                      ; save prev result
  75++D098 3A AC C0             ld          a,(UBnkZScaledSign)
  76++D09B 21 B2 C0             ld          hl, UBnkXX12zSign       ; XX15+5
  77++D09E AE                   xor         (hl)                    ; hi sign
  78++D09F E6 80                and         $80                     ; a = sign of multiply
  79++D0A1 4F                   ld          c,a                     ; c = sign of z lo & z scaled
  80++D0A2 E1                   pop         hl
  81++D0A3 5A                   ld          e,d
  82++D0A4 16 00                ld          d,0
  83++D0A6                      MMUSelectMathsBankedFns
  83++D0A6 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
  84++D0AA CD 2F 00             call ADDHLDESignBC
  85++D0AD 32 73 7F             ld          (varS),a
  86++D0B0 7D                   ld          a,l
  87++D0B1 C9                   ret                                 ; returns with A = value, varS = sign
  88++D0B2              dotzskipzero:                               ; if we got here then z was zero so no component so just tidy up from last add
  89++D0B2 78                   ld          a,b
  90++D0B3 32 73 7F             ld          (varS),a
  91++D0B6 7D                   ld          a,l
  92++D0B7 C9                   ret
  93++D0B8              ;;;;       DotProductXX12XX15:
  94++D0B8              ;;;;       ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  95++D0B8              ;;;;       ld          e,a
  96++D0B8              ;;;;       ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
  97++D0B8              ;;;;       ld          d,a                     ; de = xx12 x signed
  98++D0B8              ;;;;		; FMLTU	\ A=A*Q/256unsg using D as A and E as Q
  99++D0B8              ;;;;		mul
 100++D0B8              ;;;;       ld          b,d                     ; b as var T
 101++D0B8              ;;;;       ld          a,(UBnkXX12xSign)
 102++D0B8              ;;;;       ld          hl,UBnkXScaledSign
 103++D0B8              ;;;;       xor         (hl)
 104++D0B8              ;;;;       and         $80                     ; so sign bit only
 105++D0B8              ;;;;       ld          (varS),a                ; we did use c as S \ S	\ x-sign, but we actually need it in varS for BADD
 106++D0B8              ;;;; now we have b = XX12 x & norm x signed
 107++D0B8              ;;;; by here B = xlo & xscaled C = result sign
 108++D0B8              ;;;;       ld          a,(UBnkXX12yLo)
 109++D0B8              ;;;;       ld          e,a
 110++D0B8              ;;;;       ld          a,(UBnkYScaled)         ; XX15+2
 111++D0B8              ;;;;		ld          d,a						; MISSED THIS EARLIER BUG FIX
 112++D0B8              ;;;;       mul
 113++D0B8              ;;;;       ld          a,d
 114++D0B8              ;;;;       ld          (varQ),a                ; Q = Y y-dot
 115++D0B8              ;;;;       ld          a,b                     ; get back T from above held in b
 116++D0B8              ;;;;       ld          (varR),a                ; R= b \ T	\ x-dot
 117++D0B8              ;;;;       ld          a,(UBnkXX12ySign)       ; A = ysg
 118++D0B8              ;;;;       ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
 119++D0B8              ;;;;       xor         (hl)                    ; XX15+3
 120++D0B8              ;;;;       and         $80
 121++D0B8              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 122++D0B8              ;;;;       ld          (varT),a                ; var T	\ xdot+ydot
 123++D0B8              ;;;;       ld          a,(UBnkXX12zLo)         ; use d as  varQ        ; XX12+4	\ znormal lo to varQ
 124++D0B8              ;;;;       ld          e,a                     ; use e as var Q
 125++D0B8              ;;;;       ld          a,(UBnkZScaled)         ;
 126++D0B8              ;;;;       ld          d,a
 127++D0B8              ;;;;       mul
 128++D0B8              ;;;;       ld          a,d
 129++D0B8              ;;;;       ld          (varQ),a                ; Q	\ zdot
 130++D0B8              ;;;;       ldCopyByte  varT,varR               ; copy T to R so R = resutl of previous calc
 131++D0B8              ;;;;       ld          a,(UBnkZScaledSign)
 132++D0B8              ;;;;       ld          hl, UBnkXX12zSign       ; XX15+5
 133++D0B8              ;;;;       xor         (hl)                    ; hi sign
 134++D0B8              ;;;;       and         $80
 135++D0B8              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 136++D0B8              ;;;;       ret                                 ; returns with A = value, varS = sign
 137++D0B8
# file closed: ././Maths/Utilities/DotProductXX12XX15.asm
 811+ D0B8              ;--------------------------------------------------------------------------------------------------------
 812+ D0B8              ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
 813+ D0B8              ; Not Used in code      include "Universe/Ships/ScaleNormal.asm"
 814+ D0B8              ;--------------------------------------------------------------------------------------------------------
 815+ D0B8                                      include "./Universe/Ships/ScaleObjectDistance.asm"
# file opened: ././Universe/Ships/ScaleObjectDistance.asm
   1++D0B8              ScaleObjectDistance:
   2++D0B8              ; ">ScaleObjectDistance, scales camera location and returns c = scaling factor (equiv of X reg)"
   3++D0B8 3A 0A C4             ld      a,(QAddr)                   ; Hull byte #18 normals scaled by 2^Q% DtProd^XX2  their comment   Dot product gives  normals' visibility in XX2
   4++D0BB 4F                   ld      c,a                         ; c = Q factor for scaling of normals
   5++D0BC              LL90:                                       ; scaling object distance
   6++D0BC 3A A2 C0             ld      a,(UBnkDrawCam0zHi)         ; z_hi
   7++D0BF 47                   ld      b,a                         ; z_hi (yReg)
   8++D0C0                      ReturnIfAIsZero                     ; if zHi 0 test ifis object close/small, i.e. zhi already zero then we are done
   8++D0C0 A7          >                        and     a
   8++D0C1 C8          >                        ret     z
   9++D0C2              LL90Loop:
  10++D0C2              ; Loop dividing camera by 2 until zhi is 0 and updating scale factor
  11++D0C2 0C                   inc     c                           ; LL90+3 \ repeat INWK z brought closer, take Qscale X up
  12++D0C3                      ShiftMem16Right1 UBnkDrawCam0yLo    ; cam Y /= 2
  12++D0C3 2A 9E C0    >                    ld    hl,(UBnkDrawCam0yLo)
  12++D0C6 CB 3C       >                    srl   h
  12++D0C8 CB 1D       >                    rr    l
  12++D0CA 22 9E C0    >                    ld    (UBnkDrawCam0yLo),hl
  13++D0CD                      ShiftMem16Right1 UBnkDrawCam0xLo    ; cam X /= 2
  13++D0CD 2A 9B C0    >                    ld    hl,(UBnkDrawCam0xLo)
  13++D0D0 CB 3C       >                    srl   h
  13++D0D2 CB 1D       >                    rr    l
  13++D0D4 22 9B C0    >                    ld    (UBnkDrawCam0xLo),hl
  14++D0D7                      ShiftMem16Right1 UBnkDrawCam0zLo    ; cam Z /= 2
  14++D0D7 2A A1 C0    >                    ld    hl,(UBnkDrawCam0zLo)
  14++D0DA CB 3C       >                    srl   h
  14++D0DC CB 1D       >                    rr    l
  14++D0DE 22 A1 C0    >                    ld    (UBnkDrawCam0zLo),hl
  15++D0E1 7C                   ld      a,h                         ; last shift will result in zhi adjusted into h reg.
  16++D0E2                      JumpIfAIsNotZero LL90Loop           ; loop until z hi = 0 this gives scalinging in c
  16++D0E2 A7          >                        and     a
  16++D0E3 C2 C2 D0    >                        jp	    nz,LL90Loop
  17++D0E6 C9                   ret
  18++D0E7
# file closed: ././Universe/Ships/ScaleObjectDistance.asm
 816+ D0E7              ;--------------------------------------------------------------------------------------------------------
 817+ D0E7
 818+ D0E7              ; Backface cull
 819+ D0E7              ; is the angle between the ship -> camera vector and the normal of the face as long as both are unit vectors soo we can check that normal z > 0
 820+ D0E7              ; normal vector = cross product of ship ccordinates
 821+ D0E7              ;
 822+ D0E7                                      include "./Universe/Ships/CopyFaceToXX15.asm"
# file opened: ././Universe/Ships/CopyFaceToXX15.asm
   1++D0E7 7E           CopyFaceToXX15:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++D0E8 47                                   ld      b,a                                                    ;;;
   3++D0E9 E6 80                                and     SignOnly8Bit
   4++D0EB 32 A8 C0                             ld      (UBnkXScaledSign),a           ; write Sign bits to x sign                                                            ;;;
   5++D0EE 78                                   ld      a,b
   6++D0EF CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++D0F1 47                                   ld      b,a
   8++D0F2 E6 80                                and     SignOnly8Bit
   9++D0F4 32 AA C0                             ld      (UBnkYScaledSign),a           ;                                                                                      ;;;
  10++D0F7 78                                   ld      a,b
  11++D0F8 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++D0FA E6 80                                and     SignOnly8Bit
  13++D0FC 32 AC C0                             ld      (UBnkZScaledSign),a           ;                                                                                      ;;;
  14++D0FF 23                                   inc     hl                          ; move to X ccord
  15++D100 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++D101 32 A7 C0                             ld      (UBnkXScaled),a                                                                                                    ;;;
  17++D104 23                                   inc     hl                                                                                                                 ;;;
  18++D105 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++D106 32 A9 C0                             ld      (UBnkYScaled),a                                                                                                    ;;;
  20++D109 23                                   inc     hl                                                                                                                 ;;;
  21++D10A 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++D10B 32 AB C0                             ld      (UBnkZScaled),a
  23++D10E C9                                   ret
  24++D10F
# file closed: ././Universe/Ships/CopyFaceToXX15.asm
 823+ D10F                                      include "./Universe/Ships/CopyFaceToXX12.asm"
# file opened: ././Universe/Ships/CopyFaceToXX12.asm
   1++D10F 7E           CopyFaceToXX12:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++D110 47                                   ld      b,a                         ; save sign bits to b
   3++D111 E6 80                                and     SignOnly8Bit
   4++D113 32 AE C0                             ld      (UBnkXX12xSign),a           ; write Sign bits to x sign                                                            ;;;
   5++D116 78                                   ld      a,b
   6++D117 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++D119 47                                   ld      b,a
   8++D11A E6 80                                and     SignOnly8Bit
   9++D11C 32 B0 C0                             ld      (UBnkXX12ySign),a           ;                                                                                      ;;;
  10++D11F 78                                   ld      a,b
  11++D120 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++D122 E6 80                                and     SignOnly8Bit
  13++D124 32 B2 C0                             ld      (UBnkXX12zSign),a           ;                                                                                      ;;;
  14++D127 23                                   inc     hl                          ; move to X ccord
  15++D128 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++D129 32 AD C0                             ld      (UBnkXX12xLo),a                                                                                                    ;;;
  17++D12C 23                                   inc     hl                                                                                                                 ;;;
  18++D12D 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++D12E 32 AF C0                             ld      (UBnkXX12yLo),a                                                                                                    ;;;
  20++D131 23                                   inc     hl                                                                                                                 ;;;
  21++D132 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++D133 32 B1 C0                             ld      (UBnkXX12zLo),a
  23++D136 C9                                   ret
  24++D137
# file closed: ././Universe/Ships/CopyFaceToXX12.asm
 824+ D137              ;--------------------------------------------------------------
 825+ D137              ; Original loginc in EE29 (LL9 4 of 12)
 826+ D137              ; Enters with XX4 = z distnace scaled to 1 .. 31
 827+ D137              ; get number of faces * 4      FaceCntX4
 828+ D137              ; return if no faces
 829+ D137              ; get Face Normal scale factor FaceScale (XX17)
 830+ D137              ; get ship pos z hi     (XX18)
 831+ D137              ; While Z hi <> 0
 832+ D137              ;    FaceScale = FaceScale + 1           (XX17)
 833+ D137              ;    Ship pos y = ship pos y / 2         (XX18)
 834+ D137              ;    ship pos x = ship pos x / 2         (XX18)
 835+ D137              ;    ship pos z = ship pos z / 2         (XX18)
 836+ D137              ; Loop
 837+ D137              ; Copy Ship Pos (XX18) to Scaled         (XX15)
 838+ D137              ; Get Dot Product of Scaled (XX15) and XX16 (pre inverted) into XX12
 839+ D137              ; Copy XX12 into XX18
 840+ D137              ; For each face
 841+ D137              ;     Get Face sign and visibility distance byte
 842+ D137              ;     if normal visibility range  < XX4
 843+ D137              ;        Get Face data into XX12
 844+ D137              ;        if FaceScale (XX17) >= 4
 845+ D137              ;            Copy Ship Pos (XX18) to scaled (XX15)                                                                  ::LL143
 846+ D137              ;        else
 847+ D137              ;           Copy FaceScale scaled to X  (XX17)
 848+ D137              ;LabelOverflowLoop:
 849+ D137              ;           Copy FaceData (XX12) to Scaled (XX15)                                                                   ::LL92
 850+ D137              ;           While X >= 0
 851+ D137              ;              X--                                                                                                  ::LL93
 852+ D137              ;              if  x >= 0
 853+ D137              ;                  XX15x = XX15x / 2
 854+ D137              ;                  XX15y = XX15y / 2
 855+ D137              ;                  XX15y = XX15y / 2
 856+ D137              ;           loop
 857+ D137              ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z                                                              ::LL94
 858+ D137              ;           if A > 256 (i.e. was overflow)
 859+ D137              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 860+ D137              ;               X = 1
 861+ D137              ;               Goto LabelOverflowLoop
 862+ D137              ;           else
 863+ D137              ;              Scaled (XX15) Z = AddZ
 864+ D137              ;           endif
 865+ D137              ;           AddX = FaceData (XX12)x +  ShipPos (XX18)x
 866+ D137              ;           if A > 256 (i.e. was overflow)
 867+ D137              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 868+ D137              ;               X = 1
 869+ D137              ;               Goto LabelOverflowLoop
 870+ D137              ;           else
 871+ D137              ;              Scaled (XX15) X = AddX
 872+ D137              ;           endif
 873+ D137              ;           AddY = FaceData (XX12)y +  ShipPos (XX18)y
 874+ D137              ;           if A > 256 (i.e. was overflow)
 875+ D137              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 876+ D137              ;               X = 1
 877+ D137              ;               Goto LabelOverflowLoop
 878+ D137              ;           else
 879+ D137              ;              Scaled (XX15) Y = AddY
 880+ D137              ;           endif
 881+ D137              ;        endif
 882+ D137              ;        calculate dot product XX12.XX15  (XX15x * XX12x /256 + XX15y * XX12y /256 + XX15z * XX12z /256)        ::LL89
 883+ D137              ;        if dot product < 0
 884+ D137              ;           set face visible
 885+ D137              ;        else
 886+ D137              ;           set face invisible
 887+ D137              ;        end if
 888+ D137              ;     else
 889+ D137              ;       Set FaceVisibility to true
 890+ D137              ;     end if
 891+ D137              ; Next Face
 892+ D137
 893+ D137              ;line of sight vector = [x y z] + face normal vector
 894+ D137
 895+ D137              ;               [ [x y z] . sidev + normal_x ]   [ normal_x ]
 896+ D137              ;  visibility = [ [x y z] . roofv + normal_y ] . [ normal_y ]
 897+ D137              ;               [ [x y z] . nosev + normal_z ]   [ normal_z ]
 898+ D137              ;
 899+ D137              ;--------------------------------------------------------------
 900+ D137              ; line of sight (eye outwards dot face normal vector < 0
 901+ D137              ; So lin eof sight = vector from 0,0,0 to ship pos, now we need to consider teh ship's facing
 902+ D137              ; now if we add teh veector for teh normal(times magnitude)) to teh ship position we have the true center of the face
 903+ D137              ; now we can calcualt teh dot product of this caulated vector and teh normal which if < 0 is goot. this means we use rot mat not inverted rotmat.
 904+ D137                  include "./ModelRender/BackfaceCull.asm"
# file opened: ././ModelRender/BackfaceCull.asm
   1++D137              ;    DEFINE DEBUGDRAWDISTANCE 1
   2++D137                  DEFINE CHECKDOTSHIPDATA  1
   3++D137               ;   DEFINE DEBUGFORCEFACEDRAW 1
   4++D137 00           CurrentNormIdx  DB 0
   5++D138              ; SomeFacesVisible:
   6++D138              ; EE29:
   7++D138
   8++D138              ;   Backface cull logic  line of sight vector . face normal vector
   9++D138              ;       line of sight vector . face normal vector
  10++D138              ;       => line of sight vector = [x y z] + face normal vector
  11++D138              ;       Where [x y z] =
  12++D138              ;                                               [ [x y z] . sidev ]
  13++D138              ;                    projected [x y z] vector = [ [x y z] . roofv ]
  14++D138              ;                                               [ [x y z] . nosev ]
  15++D138              ;
  16++D138              ;   so project the [x y z] vector into the face's normal space
  17++D138              ;  line of sight vector = projected [x y z] vector + face normal vector
  18++D138              ;                         [ [x y z] . sidev ]   [ normal_x ]
  19++D138              ;                       = [ [x y z] . roofv ] + [ normal_y ]
  20++D138              ;                         [ [x y z] . nosev ]   [ normal_z ]
  21++D138              ;
  22++D138              ;                         [ [x y z] . sidev + normal_x ]
  23++D138              ;                       = [ [x y z] . roofv + normal_y ]
  24++D138              ;                         [ [x y z] . nosev + normal_z ]
  25++D138              ;
  26++D138              ; so
  27++D138              ;              visibility = [ [x y z] . sidev + normal_x ]   [ normal_x ]
  28++D138              ;                            [ [x y z] . roofv + normal_y ] . [ normal_y ]
  29++D138              ;                           [ [x y z] . nosev + normal_z ]   [ normal_z ]
  30++D138              ;
  31++D138              ; where face is visible if visibility < 0
  32++D138              ;
  33++D138              ;   so we set XX15 to [x y z] . sidev
  34++D138              ;                     [x y z] . roofv
  35++D138              ;                     [x y z] . nosev
  36++D138              ;
  37++D138
  38++D138
  39++D138
  40++D138 3A A2 C0     ScaleDrawcam:           ld      a,(UBnkDrawCam0zHi)         ; if z hi is 0 then we have scaled XX18
  41++D13B                                      JumpIfAIsZero .ScaleDone            ;
  41++D13B A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  41++D13C CA 68 D1    >                        jp	    z, .ScaleDone
  42++D13F 2A 9B C0                             ld      hl,(UBnkDrawCam0xLo)        ; pull postition into registers
  43++D142 ED 5B 9E C0                          ld      de,(UBnkDrawCam0yLo)        ; we only pull in if needed to save fetches
  44++D146 ED 4B A1 C0                          ld      bc,(UBnkDrawCam0zLo)        ;
  45++D14A FD 2C        .ScaleNormalLoop:       inc     iyl                         ; Q goes up by one
  46++D14C                                      ShiftHLRight1                       ; divide cam position by 2
  46++D14C CB 3C       >			   srl h
  46++D14E CB 1D       >			   rr  l
  47++D150                                      ShiftDERight1                       ;
  47++D150 CB 3A       >			   srl d
  47++D152 CB 1B       >			   rr  e
  48++D154                                      ShiftBCRight1                       ;
  48++D154 CB 38       >			   srl b
  48++D156 CB 19       >			   rr  c
  49++D158 78                                   ld      a,b                         ; loop if not scaled down
  50++D159                                      JumpIfAIsNotZero .ScaleNormalLoop     ;
  50++D159 A7          >                        and     a
  50++D15A C2 4A D1    >                        jp	    nz,.ScaleNormalLoop
  51++D15D 22 9B C0                             ld      (UBnkDrawCam0xLo),hl        ; save position back to XX18
  52++D160 ED 53 9E C0                          ld      (UBnkDrawCam0yLo),de        ;
  53++D164 ED 43 A1 C0                          ld      (UBnkDrawCam0zLo),bc        ;
  54++D168 FD 7D        .ScaleDone:             ld      a,iyl
  55++D16A 32 78 7F                             ld      (varXX17),a                  ; XX17 = normal scale factor for current ship adjusted for camera
  56++D16D C9                                   ret
  57++D16E
  58++D16E 3A 28 C0     CheckVisible:           ld      a,(UBnkzsgn)                 ; Is the ship behind us
  59++D171 E6 80        .CheckBehind:           and     SignOnly8Bit                 ; which means z sign is negative
  60++D173 20 31                                jr      nz,.ShipNoDraw               ; .
  61++D175 2A 26 C0     .CheckViewPort:         ld      hl,(UBnkzlo)                 ; now check to see if its within 90 degree arc
  62++D178 7C                                   ld      a,h
  63++D179                                      JumpIfAGTENusng ShipMaxDistance, .ShipNoDraw
  63++D179 FE C0       >                        cp     ShipMaxDistance
  63++D17B D2 A6 D1    >                        jp		nc,.ShipNoDraw
  64++D17E ED 5B 20 C0  .CheckXAxis:            ld      de,(UBnkxlo)                 ; if abs x > abx z then its out side of view port
  65++D182 CD 56 99                             call    compare16HLDE
  66++D185 38 1F                                jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
  67++D187 ED 5B 23 C0  .CheckYAxis:            ld      de,(UBnkylo)                ; if abs y > abx z then its out side of view port
  68++D18B CD 56 99                             call    compare16HLDE
  69++D18E 38 16                                jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
  70++D190                                      IFDEF   CHECKDOTSHIPDATA
  71++D190 3A 05 C4     .CheckDotV2:                ld      a,(DotAddr)
  72++D193                                          JumpIfAGTENusng h, .DrawFull
  72++D193 BC          >                        cp     h
  72++D194 D2 9A D1    >                        jp		nc,.DrawFull
  73++D197 C3 AC D1                                 jp      .ShipIsADot
  74++D19A 3A 55 C0     .DrawFull:                  ld      a,(UBnkaiatkecm)            ; its visible but a dot
  75++D19D F6 40                                    or      ShipIsVisible               ; Visible and not a dot
  76++D19F E6 F7                                    and     ShipIsNotDot                ;
  77++D1A1 32 55 C0                                 ld      (UBnkaiatkecm),a            ;
  78++D1A4                                          ClearCarryFlag
  78++D1A4 B7          >                        or a
  79++D1A5 C9                                       ret
  80++D1A6                                      ELSE
  81++D1A6 ~            .CalculateXX4:              ShiftHLRight1                       ; hl = z pos / 8
  82++D1A6 ~                                        ShiftHLRight1                       ; .
  83++D1A6 ~                                        ShiftHLRight1                       ; .
  84++D1A6 ~                                        ld      a,h
  85++D1A6 ~                                        srl     a                           ; if a / 16 <> 0 then ship is a dot
  86++D1A6 ~            .DrawAsDotCheck:            JumpIfNotZero   .ShipIsADot
  87++D1A6 ~                                        ; Check visbility distance
  88++D1A6 ~            .SetXX4Dist:                ld      a,l
  89++D1A6 ~                                        rra                                 ; l may have had bit 0 of h carried in
  90++D1A6 ~                                        srl     a                           ; so move it to bit 4 giving A as distance $000xxxxx
  91++D1A6 ~                                        srl     a
  92++D1A6 ~                                        srl     a
  93++D1A6 ~                                        ld      (UBnkDrawAllFaces),a        ; XX4 = "all faces" distance
  94++D1A6 ~                                        ld      a,(UBnkaiatkecm)            ; its visible but a dot
  95++D1A6 ~                                        or      ShipIsVisible               ; Visible and not a dot
  96++D1A6 ~                                        and     ShipIsNotDot                ;
  97++D1A6 ~                                        ld      (UBnkaiatkecm),a            ;
  98++D1A6 ~                                        ClearCarryFlag
  99++D1A6 ~                                        ret
 100++D1A6                                      ENDIF
 101++D1A6              .ShipNoDraw:            ClearMemBitN  UBnkaiatkecm  , ShipIsVisibleBitNbr ; Assume its hidden
 101++D1A6 21 55 C0    >                        ld      hl,UBnkaiatkecm
 101++D1A9 CB B6       >                        res     ShipIsVisibleBitNbr,(hl)
 102++D1AB C9                                   ret
 103++D1AC 3A 55 C0     .ShipIsADot:            ld      a,(UBnkaiatkecm)            ; its visible but a dot
 104++D1AF                                      IFDEF DEBUGDRAWDISTANCE
 105++D1AF ~                                        or      ShipIsVisible   ;
 106++D1AF                                      ELSE
 107++D1AF F6 48                                    or      ShipIsVisible | ShipIsDot   ;
 108++D1B1                                      ENDIF
 109++D1B1 32 55 C0                             ld      (UBnkaiatkecm),a            ;
 110++D1B4 C9                                   ret
 111++D1B5
 112++D1B5                                                  DISPLAY "TODO:remove all teh processing of rotmat to load craft to camera as its already been done"
 113++D1B5              CullV2:                 ReturnIfMemisZero FaceCtX4Addr      ;
 113++D1B5 3A 04 C4    >                        ld   a,(FaceCtX4Addr)
 113++D1B8 A7          >                        and a
 113++D1B9 C8          >                        ret    z
 114++D1BA CD 9B CC                             call    CopyRotmatToTransMat        ; XX16 = UBnkRotMat
 115++D1BD CD F2 7A                             call    ScaleXX16Matrix197          ; scale rotation matrix in XX16
 116++D1C0 CD 5F CF                             call    LoadCraftToCamera           ; XX18 = camera
 117++D1C3                                      ;call    CopyCameraToXX15Signed      ; Copy the camera to XX15 as signed 15 bit
 118++D1C3 3A 0A C4     .BackfaceLoop:          ld      a,(QAddr)                   ;
 119++D1C6 FD 6F                                ld      iyl,a                       ; iyl = scale factor
 120++D1C8              ; By this point XX18 = scaled draw cam and iyl = scale factor
 121++D1C8 CD 38 D1                             call    ScaleDrawcam                ; XX18 = scaled camera XX17 = scale
 122++D1CB CD 83 CF                             call    CopyCameraToXX15Signed      ; Xx18 -> xx15 sign + 15 bit
 123++D1CE CD 85 7A     .LL91:                  call    XX12EquNodeDotXX16          ; xx12 = Scaled Camera . Rotation matrix (Note Xx16 no Xx16 inv)
 124++D1D1 CD F0 CE                             call    CopyXX12ScaledToXX18        ; now xx18 = XX12 = xx15.xx16
 125++D1D4 21 CA C5     .PrepNormals:           ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
 126++D1D7 22 6E 7E                             ld      (varV),hl
 127++D1DA 3A 04 C4                             ld      a,(FaceCtX4Addr)                                        ; For each face
 128++D1DD CB 3F                                srl     a                                              ;
 129++D1DF CB 3F                                srl     a                                              ;
 130++D1E1 47                                   ld      b,a                                            ;
 131++D1E2 AF                                   xor     a
 132++D1E3 32 37 D1                             ld      (CurrentNormIdx),a                                          ; used to increment up face incdex as b decrements
 133++D1E6 E5           .ProcessNormalsLoop:    push    hl
 134++D1E7 C5                                   push    bc
 135++D1E8 7E           .LL86:                  ld      a,(hl)                                         ; Get Face sign and visibility distance byte
 136++D1E9 E6 1F                                and     $1F                                            ; if normal visibility range  < XX4
 137++D1EB E5                                   push    hl
 138++D1EC 21 53 C0                             ld      hl,UBnkDrawAllFaces
 139++D1EF BE                                   cp      (hl)
 140++D1F0 E1                                   pop     hl
 141++D1F1                                      IFDEF DEBUGFORCEFACEDRAW
 142++D1F1 ~                                        jp      .FaceVisible
 143++D1F1                                      ELSE
 144++D1F1 DA 36 D3                                 jp      c,.FaceVisible              ; then we always draw
 145++D1F4                                      ENDIF
 146++D1F4              ; This bit needs to be added to force face visible
 147++D1F4 CD 0F D1     .LL87:                  call    CopyFaceToXX12              ; XX12 = normal (repolaced scale version) as a working copy
 148++D1F7 3A 78 7F                             ld      a,(XX17)                    ; a = q scale XX17 cauclated by the call to ScaleDrawcam
 149++D1FA 47                                   ld      b,a
 150++D1FB                                      JumpIfALTNusng 4,.ScaleNormByXX17   ; if q >= 4 then is so big we don;t factor in + normal for dot product
 150++D1FB FE 04       >                        cp      4
 150++D1FD DA 38 D2    >                        jp		c, .ScaleNormByXX17
 151++D200 CD 3A CF     .LL143:                 call    CopyXX18toXX15              ; and we just set XX15 = scaled Camera dot rotation matrix
 152++D203 C3 C7 D2                             jp      .DoneScalingIntoXX15        ; Now Process XX12 normal
 153++D206 3A 9B C0     .Ovflw:                 ld      a,(UBnkDrawCam0xLo)         ; divide camera by 2 if overflow
 154++D209 CB 3F                                srl     a                           ; which is held in XX18
 155++D20B 32 9B C0                             ld      (UBnkDrawCam0xLo),a         ; .
 156++D20E 3A A1 C0                             ld      a,(UBnkDrawCam0zLo)         ; .
 157++D211 CB 3F                                srl     a                           ; .
 158++D213 32 A1 C0                             ld      (UBnkDrawCam0zLo),a         ; .
 159++D216 3A 9E C0                             ld      a,(UBnkDrawCam0yLo)         ; .
 160++D219 CB 3F                                srl     a                           ; .
 161++D21B 32 9E C0                             ld      (UBnkDrawCam0yLo),a        ; .
 162++D21E 06 01        .ScaleXScaledAgain:     ld      b,1                         ; set scale to 1 so we divide original normal by 2 into face and try again and hope we didn't scaled down XX12 earlier so if we did then we must be in the do doo as the object was obscenely large and very close
 163++D220                                      ShiftMem8Right1 UBnkXScaled         ; Divide XX15 by 2^B
 163++D220 3A A7 C0    >                    ld      a,(UBnkXScaled)
 163++D223 CB 3F       >                    srl     a
 163++D225 32 A7 C0    >                    ld      (UBnkXScaled),a
 164++D228                                      ShiftMem8Right1 UBnkYScaled         ;
 164++D228 3A A9 C0    >                    ld      a,(UBnkYScaled)
 164++D22B CB 3F       >                    srl     a
 164++D22D 32 A9 C0    >                    ld      (UBnkYScaled),a
 165++D230                                      ShiftMem8Right1 UBnkZScaled         ;
 165++D230 3A AB C0    >                    ld      a,(UBnkZScaled)
 165++D233 CB 3F       >                    srl     a
 165++D235 32 AB C0    >                    ld      (UBnkZScaled),a
 166++D238              ; if we jumped to here scale factor < 4 so we copy in normal to XX15 (scaled) LL92
 167++D238              .ScaleNormByXX17:       ;ld      b,a
 168++D238 CD 15 CF                             call    CopyXX12toXX15
 169++D23B 05           .LL93                   dec     b
 170++D23C FA 5B D2                             jp      m, .ScaledNorm
 171++D23F              .LL93Loop:              ShiftMem8Right1 UBnkXScaled        ; Divide XX15 by 2^B, I think this should be really XX12 and is a bug in the original code
 171++D23F 3A A7 C0    >                    ld      a,(UBnkXScaled)
 171++D242 CB 3F       >                    srl     a
 171++D244 32 A7 C0    >                    ld      (UBnkXScaled),a
 172++D247                                      ShiftMem8Right1 UBnkYScaled        ;
 172++D247 3A A9 C0    >                    ld      a,(UBnkYScaled)
 172++D24A CB 3F       >                    srl     a
 172++D24C 32 A9 C0    >                    ld      (UBnkYScaled),a
 173++D24F                                      ShiftMem8Right1 UBnkZScaled        ;
 173++D24F 3A AB C0    >                    ld      a,(UBnkZScaled)
 173++D252 CB 3F       >                    srl     a
 173++D254 32 AB C0    >                    ld      (UBnkZScaled),a
 174++D257 05                                   dec     b                          ;
 175++D258 F2 3F D2                             jp      p,.LL93Loop                ; Now we have XX15 as scaled Normal, XX15 as camera, don;t really knwo why as cals work on XX12 and XX18
 176++D25B              .ScaledNorm:            ;ORIG CODE DOES NOT HAVE THIS call    CopyXX15ToXX12 ; DEBUG as XX15 shoudl be a sacled nromal
 177++D25B              ; Add normal to XX15
 178++D25B              ; if we jumped here direct from LL143 then XX15 = drawcam scaled by Q, XX12 = face normal unscaled, XX18 = drawcam scaled also
 179++D25B              ; if we jumped here via scaling       then XX15 = normal scaled by Q,  XX12 = face normal unscaled, XX16 = drawcam scaled
 180++D25B              ; if we hit an overflow               then XX15 = drawcam scaled by Q  XX12 = face normal unscaled, XX18 = (drawcam scaled / 2 ) / 2^ nbr overflows (if we cam in vai scaling then its a mess?
 181++D25B              ; So LL94 is wrong as it shoud be operating on XX12 not XX15
 182++D25B              .LL94:                  ldCopyByte UBnkZScaled, varR        ; ldCopyByte  UBnkZScaled,     varR  ; if we jumped direct XX15 = drawcam scaled, Xx12 = normal xx18 = drawcam
 182++D25B 3A AB C0    >                        ld       a,(UBnkZScaled)
 182++D25E 32 72 7F    >                        ld       (varR),a
 183++D261                                      ldCopyByte UBnkXX12zSign, varS      ; ldCopyByte  UBnkYScaled,     varS  ; if we did scaling then xx15 = norm scaled XX18 = drawcam
 183++D261 3A B2 C0    >                        ld       a,(UBnkXX12zSign)
 183++D264 32 73 7F    >                        ld       (varS),a
 184++D267                                      ldCopyByte  UBnkDrawCam0zLo, varQ   ; AQ = drawcam Z signed
 184++D267 3A A1 C0    >                        ld       a,(UBnkDrawCam0zLo)
 184++D26A 32 71 7F    >                        ld       (varQ),a
 185++D26D 3A A3 C0                             ld      a,(UBnkDrawCam0zSgn)        ; .
 186++D270 CD 6D 9C                             call    SAEquSRPlusAQ               ; SA = drawcam Z dot + z
 187++D273 DA 06 D2                             jp      c,.Ovflw
 188++D276 32 AB C0                             ld      (UBnkZScaled),a             ; XX15Z = SA
 189++D279                                      ldCopyByte  varS, UBnkZScaledSign   ;
 189++D279 3A 73 7F    >                        ld       a,(varS)
 189++D27C 32 AC C0    >                        ld       (UBnkZScaledSign),a
 190++D27F                                      ldCopyByte  UBnkXScaled,     varR   ; SR = normal X
 190++D27F 3A A7 C0    >                        ld       a,(UBnkXScaled)
 190++D282 32 72 7F    >                        ld       (varR),a
 191++D285                                      ldCopyByte  UBnkXX12xSign,   varS   ; .
 191++D285 3A AE C0    >                        ld       a,(UBnkXX12xSign)
 191++D288 32 73 7F    >                        ld       (varS),a
 192++D28B                                      ldCopyByte  UBnkDrawCam0xLo, varQ   ; AQ = drawcam x dot
 192++D28B 3A 9B C0    >                        ld       a,(UBnkDrawCam0xLo)
 192++D28E 32 71 7F    >                        ld       (varQ),a
 193++D291 3A 9D C0                             ld      a,(UBnkDrawCam0xSgn)        ; .
 194++D294 CD 6D 9C                             call    SAEquSRPlusAQ               ; SA = normal x + drawcam x dot
 195++D297 DA 06 D2                             jp      c,.Ovflw
 196++D29A 32 A7 C0                             ld      (UBnkXScaled),a             ; XX15Z = SA
 197++D29D                                      ldCopyByte  varS, UBnkXScaledSign   ; .
 197++D29D 3A 73 7F    >                        ld       a,(varS)
 197++D2A0 32 A8 C0    >                        ld       (UBnkXScaledSign),a
 198++D2A3                                      ldCopyByte  UBnkYScaled, varR       ; SR = normal Y
 198++D2A3 3A A9 C0    >                        ld       a,(UBnkYScaled)
 198++D2A6 32 72 7F    >                        ld       (varR),a
 199++D2A9                                      ldCopyByte  UBnkXX12ySign, varS     ; .
 199++D2A9 3A B0 C0    >                        ld       a,(UBnkXX12ySign)
 199++D2AC 32 73 7F    >                        ld       (varS),a
 200++D2AF                                      ldCopyByte  UBnkDrawCam0yLo, varQ   ; AQ = drawcam y dot
 200++D2AF 3A 9E C0    >                        ld       a,(UBnkDrawCam0yLo)
 200++D2B2 32 71 7F    >                        ld       (varQ),a
 201++D2B5 3A A0 C0                             ld      a,(UBnkDrawCam0ySgn)        ; .
 202++D2B8 CD 6D 9C                             call    SAEquSRPlusAQ               ; SA = normal y + drawcam y dot
 203++D2BB DA 06 D2                             jp      c,.Ovflw                    ; .
 204++D2BE 32 A9 C0                             ld      (UBnkYScaled),a             ; XX15 Y = SA
 205++D2C1                                      ldCopyByte   varS, UBnkYScaledSign  ; .
 205++D2C1 3A 73 7F    >                        ld       a,(varS)
 205++D2C4 32 AA C0    >                        ld       (UBnkYScaledSign),a
 206++D2C7              ; calculate dot product LL89
 207++D2C7              .DoneScalingIntoXX15:   ldCopyByte  UBnkXX12xLo, varQ       ; Q = norm X XX12
 207++D2C7 3A AD C0    >                        ld       a,(UBnkXX12xLo)
 207++D2CA 32 71 7F    >                        ld       (varQ),a
 208++D2CD 3A A7 C0                             ld      a,(UBnkXScaled)             ; A = XX15 X
 209++D2D0 CD D8 9B                             call    AequAmulQdiv256             ; A = XX15 X * XX 12 X
 210++D2D3 32 8D 7F                             ld      (varT),a                    ; T = XX15 X * XX 12 X
 211++D2D6 3A AE C0                             ld      a,(UBnkXX12xSign)           ; S = sign of XX15 X * XX12 X
 212++D2D9 21 A8 C0                             ld      hl,UBnkXScaledSign          ; .
 213++D2DC AE                                   xor     (hl)                        ; .
 214++D2DD 32 73 7F                             ld      (varS),a                    ; .
 215++D2E0                                      ldCopyByte  UBnkXX12yLo, varQ       ; Q = norm Y XX12
 215++D2E0 3A AF C0    >                        ld       a,(UBnkXX12yLo)
 215++D2E3 32 71 7F    >                        ld       (varQ),a
 216++D2E6 3A A9 C0                             ld      a,(UBnkYScaled)             ; A = XX15 Y
 217++D2E9 CD D8 9B                             call    AequAmulQdiv256             ; A = XX15 Y * XX 12 Y
 218++D2EC 32 71 7F                             ld      (varQ),a                    ; Q = XX15 Y * XX 12 Y
 219++D2EF                                      ldCopyByte  varT,varR               ; R = XX15 X * XX 12 X
 219++D2EF 3A 8D 7F    >                        ld       a,(varT)
 219++D2F2 32 72 7F    >                        ld       (varR),a
 220++D2F5 3A B0 C0                             ld      a,  (UBnkXX12ySign)         ; A = sign of XX15 Y * XX 12 Y
 221++D2F8 21 AA C0                             ld      hl, UBnkYScaledSign         ; .
 222++D2FB AE                                   xor     (hl)                        ; .
 223++D2FC CD 6D 9C                             call    SAEquSRPlusAQ               ; SA = SR+AQ = (X calc) + (Y calc)
 224++D2FF 32 8D 7F                             ld      (varT),a                    ; T = usigned (X calc) + (Y calc)
 225++D302                                      ldCopyByte  UBnkXX12zLo, varQ       ; Q = XX12 Z
 225++D302 3A B1 C0    >                        ld       a,(UBnkXX12zLo)
 225++D305 32 71 7F    >                        ld       (varQ),a
 226++D308 3A AB C0                             ld      a,  (UBnkZScaled)           ; A = XX15 Z
 227++D30B CD D8 9B                             call    AequAmulQdiv256             ; A = XX12 Z * XX15 Z
 228++D30E 32 71 7F                             ld      (varQ),a                    ; Q = XX12 Z * XX15 Z
 229++D311                                      ldCopyByte  varT, varR              ; R = usigned (X calc) + (Y calc)
 229++D311 3A 8D 7F    >                        ld       a,(varT)
 229++D314 32 72 7F    >                        ld       (varR),a
 230++D317 3A AC C0                             ld      a,  (UBnkZScaledSign)       ; A = sign of XX12 Z * XX15 Z
 231++D31A 21 B2 C0                             ld      hl, UBnkXX12zSign           ; .
 232++D31D AE                                   xor     (hl)                        ; .
 233++D31E CD 6D 9C                             call    SAEquSRPlusAQ               ; SA = ((X+Y signed)) (Z signed)
 234++D321 FE 00                                cp      0                           ; was the result 0, if so then there are scenarios where SAEquSRPlusAQ can return -ve 0
 235++D323 28 08                                jr      z,.FaceNotVisible           ; in which case face is not visible
 236++D325 3A 73 7F                             ld      a,(varS)                    ; if the cacl was a negative number then its visible
 237++D328 ED 27 80                             test    $80                         ; this should test S not A
 238++D32B 20 09                                jr      nz,.FaceVisible                                      ;        if dot product < 0 set face visible
 239++D32D 3A 37 D1     .FaceNotVisible:         ld          a,(CurrentNormIdx)
 240++D330 CD AD CD                             call        SetFaceAHidden                                      ;           set face invisible
 241++D333 C3 3C D3                             jp          .ProcessNormalLoopEnd                                ;        end if
 242++D336 3A 37 D1     .FaceVisible:            ld          a,(CurrentNormIdx)
 243++D339 CD A4 CD                             call        SetFaceAVisible
 244++D33C 21 37 D1     .ProcessNormalLoopEnd:  ld          hl, CurrentNormIdx
 245++D33F 34                                   inc         (hl)                    ; move index pointer up by one
 246++D340 C1                                   pop         bc
 247++D341 E1                                   pop         hl                      ; get normal data pointer back
 248++D342 3E 04                                ld          a,4
 249++D344 ED 31                                add         hl,a                    ; move to next normal entry
 250++D346 22 6E 7E                             ld          (varV),hl               ; save as we need it again
 251++D349 05                                   dec         b
 252++D34A C2 E6 D1                             jp          nz,.ProcessNormalsLoop
 253++D34D C9                                   ret
 254++D34E
# file closed: ././ModelRender/BackfaceCull.asm
 905+ D34E              ;--LL52 to LL55-----------------------------------------------------------------------------------------------------------------
 906+ D34E
 907+ D34E              TransposeXX12NodeToXX15:
 908+ D34E                      ldCopyByte  UBnkxsgn,UBnkXPointSign           ; UBnkXSgn => XX15+2 x sign
 908+ D34E 3A 22 C0    >                        ld       a,(UBnkxsgn)
 908+ D351 32 A9 C0    >                        ld       (UBnkXPointSign),a
 909+ D354 ED 4B AD C0          ld          bc,(UBnkXX12xLo)                   ; c = lo, b = sign   XX12XLoSign
 910+ D358 A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 911+ D359 FA 6F D3             jp          m,NodeNegativeX                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 912+ D35C              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 913+ D35C              NodeXPositiveX:
 914+ D35C 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
 915+ D35D 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
 916+ D35F 2A 20 C0             ld          hl,(UBnkxlo)                       ; hl = XX1 UBnkxLo
 917+ D362 26 00                ld          h,0                                 ; but we don;t want the sign
 918+ D364 09                   add         hl,bc                               ; its a 16 bit add
 919+ D365 22 A7 C0             ld          (UBnkXPoint),hl                    ; And written to XX15 0,1
 920+ D368 AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
 921+ D369 32 A9 C0             ld          (UBnkXPointSign),a
 922+ D36C C3 8B D3             jp          FinishedThisNodeX
 923+ D36F              ; If we get here then _sign and vertv_ have different signs so do subtract
 924+ D36F              NodeNegativeX:
 925+ D36F              LL52X:                                                 ;
 926+ D36F 2A 20 C0             ld          hl,(UBnkxlo)                       ; Coord
 927+ D372 ED 4B AD C0          ld          bc,(UBnkXX12xLo)                   ; XX12
 928+ D376 06 00                ld          b,0                                 ; XX12 lo byte only
 929+ D378 ED 42                sbc         hl,bc                               ; hl = UBnkx - UBnkXX12xLo
 930+ D37A F2 88 D3             jp          p,SetAndMopX                       ; if result is positive skip to write back
 931+ D37D              NodeXNegSignChangeX:
 932+ D37D              ; If we get here the result is 2'c compliment so we reverse it and flip sign
 933+ D37D CD 77 93             call        negate16hl                          ; Convert back to positive and flip sign
 934+ D380 3A A9 C0             ld          a,(UBnkXPointSign)                 ; XX15+2
 935+ D383 EE 80                xor         $80                                 ; Flip bit 7
 936+ D385 32 A9 C0             ld          (UBnkXPointSign),a                 ; XX15+2
 937+ D388              SetAndMopX:
 938+ D388 22 20 C0             ld          (UBnkxlo),hl                       ; XX15+0
 939+ D38B              FinishedThisNodeX:
 940+ D38B
 941+ D38B              LL53:
 942+ D38B
 943+ D38B                      ldCopyByte  UBnkysgn,UBnkYPointSign           ; UBnkXSgn => XX15+2 x sign
 943+ D38B 3A 25 C0    >                        ld       a,(UBnkysgn)
 943+ D38E 32 AC C0    >                        ld       (UBnkYPointSign),a
 944+ D391 ED 4B AF C0          ld          bc,(UBnkXX12yLo)                   ; c = lo, b = sign   XX12XLoSign
 945+ D395 A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 946+ D396 FA AC D3             jp          m,NodeNegativeY                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 947+ D399              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 948+ D399              NodeXPositiveY:
 949+ D399 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
 950+ D39A 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
 951+ D39C 2A 23 C0             ld          hl,(UBnkylo)                       ; hl = XX1 UBnkxLo
 952+ D39F 26 00                ld          h,0                                 ; but we don;t want the sign
 953+ D3A1 09                   add         hl,bc                               ; its a 16 bit add
 954+ D3A2 22 AA C0             ld          (UBnkYPoint),hl                    ; And written to XX15 0,1
 955+ D3A5 AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
 956+ D3A6 32 A9 C0             ld          (UBnkXPointSign),a
 957+ D3A9 C3 C8 D3             jp          FinishedThisNodeY
 958+ D3AC              ; If we get here then _sign and vertv_ have different signs so do subtract
 959+ D3AC              NodeNegativeY:
 960+ D3AC              LL52Y:                                                 ;
 961+ D3AC 2A 23 C0             ld          hl,(UBnkylo)                       ; Coord
 962+ D3AF ED 4B AF C0          ld          bc,(UBnkXX12yLo)                   ; XX12
 963+ D3B3 06 00                ld          b,0                                 ; XX12 lo byte only
 964+ D3B5 ED 42                sbc         hl,bc                               ; hl = UBnkx - UBnkXX12xLo
 965+ D3B7 F2 C5 D3             jp          p,SetAndMopY                       ; if result is positive skip to write back
 966+ D3BA              NodeXNegSignChangeY:
 967+ D3BA              ; If we get here the result is 2'c compliment so we reverse it and flip sign
 968+ D3BA CD 77 93             call        negate16hl                          ; Convert back to positive and flip sign
 969+ D3BD 3A AC C0             ld          a,(UBnkYPointSign)                 ; XX15+2
 970+ D3C0 EE 80                xor         $80                                 ; Flip bit 7
 971+ D3C2 32 AC C0             ld          (UBnkYPointSign),a                 ; XX15+2
 972+ D3C5              SetAndMopY:
 973+ D3C5 22 23 C0             ld          (UBnkylo),hl                       ; XX15+0
 974+ D3C8              FinishedThisNodeY:
 975+ D3C8
 976+ D3C8                  DISPLAY "Tracing 5", $
 977+ D3C8
 978+ D3C8              TransposeZ:
 979+ D3C8              LL55:                                                   ; Both y signs arrive here, Onto z                                          ;;;
 980+ D3C8 3A B2 C0             ld          a,(UBnkXX12zSign)                   ; XX12+5    \ rotated znode hi                                              ;;;
 981+ D3CB                      JumpOnBitSet a,7,NegativeNodeZ                    ; LL56 -ve Z node                                                           ;;;
 981+ D3CB CB 7F       >                        bit 	7,a
 981+ D3CD C2 E1 D3    >                        jp      nz,NegativeNodeZ
 982+ D3D0 3A B1 C0             ld          a,(UBnkXX12zLo)                     ; XX12+4 \ rotated znode lo                                                 ;;;
 983+ D3D3 2A 26 C0             ld          hl,(UBnkzlo)                        ; INWK+6    \ zorg lo                                                       ;;;
 984+ D3D6 ED 31                add         hl,a                                ; hl = INWKZ + XX12z                                                        ;;;
 985+ D3D8 7D                   ld          a,l
 986+ D3D9 32 8D 7F             ld          (varT),a                            ;                                                                           ;;;
 987+ D3DC 7C                   ld          a,h
 988+ D3DD 32 70 7F             ld          (varU),a                            ; now z = hl or U(hi).T(lo)                                                 ;;;
 989+ D3E0 C9                   ret                                             ; LL57  \ Node additions done, z = U.T                                      ;;;
 990+ D3E1              ; Doing additions and scalings for each visible node around here                                                                    ;;;
 991+ D3E1              NegativeNodeZ:
 992+ D3E1              LL56:                                                   ; Enter XX12+5 -ve Z node case  from above                                  ;;;
 993+ D3E1 2A 26 C0             ld          hl,(UBnkzlo)                        ; INWK+6 \ z org lo                                                         ;;;
 994+ D3E4 ED 4B B1 C0          ld          bc,(UBnkXX12zLo)                    ; XX12+4    \ rotated z node lo                                                 ......................................................
 995+ D3E8 06 00                ld          b,0                                 ; upper byte will be garbage
 996+ D3EA                      ClearCarryFlag
 996+ D3EA B7          >                        or a
 997+ D3EB ED 42                sbc         hl,bc                               ; 6502 used carry flag compliment
 998+ D3ED 7D                   ld          a,l
 999+ D3EE 32 8D 7F             ld          (varT),a                            ; t = result low
1000+ D3F1 7C                   ld          a,h
1001+ D3F2 32 70 7F             ld          (varU),a                            ; u = result high
1002+ D3F5 E2 02 D4             jp          po,MakeNodeClose                    ; no overflow to parity would be clear
1003+ D3F8              LL56Overflow:
1004+ D3F8 FE 00                cp          0                                   ; is varU 0?
1005+ D3FA 20 16                jr          nz,NodeAdditionsDone                ; Enter Node additions done, UT=z
1006+ D3FC 3A 8D 7F             ld          a,(varT)                            ; T \ restore z lo
1007+ D3FF                      ReturnIfAGTENusng 4                              ; >= 4 ? zlo big enough, Enter Node additions done.
1007+ D3FF FE 04       >                        cp    4
1007+ D401 D0          >                        ret	 nc
1008+ D402              MakeNodeClose:
1009+ D402              LL140:                                                  ; else make node close
1010+ D402 AF                   xor         a                                   ; hi This needs tuning to use a 16 bit variable
1011+ D403 32 70 7F             ld          (varU),a                            ; U
1012+ D406 3E 04                ld          a,4                                 ; lo
1013+ D408 32 8D 7F             ld          (varT),a                            ; T
1014+ D40B C9                   ret
1015+ D40C              ;--LL49-------------------------------------------------------------------------------------------------------------------------
1016+ D40C              ProcessVisibleNode:
1017+ D40C              RotateNode:                                                                                                                         ;;;
1018+ D40C CD BF CE             call        XX12EquXX15DotProductXX16                                                                                       ;;;           call      XX12=XX15.XX16
1019+ D40F              LL52LL53LL54LL55
1020+ D40F              TransposeNode:
1021+ D40F CD 4E D3             call        TransposeXX12NodeToXX15
1022+ D412
1023+ D412              ; ......................................................                                                         ;;;
1024+ D412              NodeAdditionsDone:
1025+ D412              Scale16BitTo8Bit:
1026+ D412              LL57:                                                   ; Enter Node additions done, z=T.U set up from LL55
1027+ D412 3A 70 7F             ld          a,(varU)                            ; U \ z hi
1028+ D415 21 A8 C0             ld          hl,UBnkXPointHi
1029+ D418 B6                   or          (hl)                                ; XX15+1    \ x hi
1030+ D419 21 AB C0             ld          hl,UBnkYPointHi
1031+ D41C B6                   or          (hl)                                ; XX15+4    \ y hi
1032+ D41D              AreXYZHiAllZero:
1033+ D41D 28 2B                jr          z,NodeScalingDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
1034+ D41F              DivideXYZBy2:
1035+ D41F                      ShiftMem16Right1    UBnkXPoint                  ; XX15[0,1]
1035+ D41F 2A A7 C0    >                    ld    hl,(UBnkXPoint)
1035+ D422 CB 3C       >                    srl   h
1035+ D424 CB 1D       >                    rr    l
1035+ D426 22 A7 C0    >                    ld    (UBnkXPoint),hl
1036+ D429                      ShiftMem16Right1    UBnkYPoint                  ; XX15[3,4]
1036+ D429 2A AA C0    >                    ld    hl,(UBnkYPoint)
1036+ D42C CB 3C       >                    srl   h
1036+ D42E CB 1D       >                    rr    l
1036+ D430 22 AA C0    >                    ld    (UBnkYPoint),hl
1037+ D433 3A 70 7F             ld          a,(varU)                            ; U \ z hi
1038+ D436 67                   ld          h,a
1039+ D437 3A 8D 7F             ld          a,(varT)                            ; T \ z lo
1040+ D43A 6F                   ld          l,a
1041+ D43B                      ShiftHLRight1
1041+ D43B CB 3C       >			   srl h
1041+ D43D CB 1D       >			   rr  l
1042+ D43F 7C                   ld          a,h
1043+ D440 32 70 7F             ld          (varU),a
1044+ D443 7D                   ld          a,l
1045+ D444 32 8D 7F             ld          (varT),a                            ; T \ z lo
1046+ D447 C3 12 D4             jp          Scale16BitTo8Bit                    ; loop U
1047+ D44A              NodeScalingDone:
1048+ D44A              LL60:                                                   ; hi U rolled to 0, exited loop above.
1049+ D44A              ProjectNodeToScreen:
1050+ D44A                      ldCopyByte  varT,varQ                           ; T =>  Q   \ zdist lo
1050+ D44A 3A 8D 7F    >                        ld       a,(varT)
1050+ D44D 32 71 7F    >                        ld       (varQ),a
1051+ D450 3A A7 C0             ld          a,(UBnkXPointLo)                    ; XX15  \ rolled x lo
1052+ D453 21 71 7F             ld          hl,varQ
1053+ D456 BE                   cp          (hl)                                ; Q
1054+ D457                      JumpIfALTusng DoSmallAngle                      ; LL69 if xdist < zdist hop over jmp to small x angle
1054+ D457 DA 60 D4    >                        jp		c,DoSmallAngle
1055+ D45A CD E4 9C             call        RequAdivQ                           ; LL61  \ visit up  R = A/Q = x/z
1056+ D45D C3 68 D4             jp          SkipSmallAngle                      ; LL65  \ hop over small xangle
1057+ D460              DoSmallAngle:                                           ; small x angle
1058+ D460              LL69:
1059+ D460              ; TODO check if we need to retain BC as this trashes it
1060+ D460              ;Input: BC = Dividend, DE = Divisor, HL = 0
1061+ D460              ;Output: BC = Quotient, HL = Remainder
1062+ D460 47                   ld      b,a
1063+ D461 CD F7 95             call    DIV16UNDOC
1064+ D464 79                   ld      a,c
1065+ D465 32 72 7F             ld      (varR),a
1066+ D468               ;;;       call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
1067+ D468              SkipSmallAngle:
1068+ D468              ScaleX:
1069+ D468              LL65:                                                   ; both continue for scaling based on z
1070+ D468 3A A9 C0             ld          a,(UBnkXPointSign)                  ; XX15+2 \ sign of X dist
1071+ D46B                      JumpOnBitSet a,7,NegativeXPoint                 ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1071+ D46B CB 7F       >                        bit 	7,a
1071+ D46D C2 80 D4    >                        jp      nz,NegativeXPoint
1072+ D470              ; ......................................................
1073+ D470              PositiveXPoint:
1074+ D470 3A 72 7F             ld          a,(varR)
1075+ D473 6F                   ld          l,a
1076+ D474 3A 70 7F             ld          a,(varU)
1077+ D477 67                   ld          h,a
1078+ D478 3E 80                ld          a,ScreenCenterX
1079+ D47A ED 31                add         hl,a
1080+ D47C EB                   ex          de,hl
1081+ D47D C3 90 D4             jp          StoreXPoint
1082+ D480              NegativeXPoint:
1083+ D480              LL62:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1084+ D480 3A 72 7F             ld          a,(varR)
1085+ D483 6F                   ld          l,a
1086+ D484 3A 70 7F             ld          a,(varU)
1087+ D487 67                   ld          h,a
1088+ D488 0E 80                ld          c,ScreenCenterX
1089+ D48A 06 00                ld          b,0
1090+ D48C                      ClearCarryFlag
1090+ D48C B7          >                        or a
1091+ D48D ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1092+ D48F EB                   ex          de,hl
1093+ D490              StoreXPoint:                                            ; also from LL62, XX3 node heap has xscreen node so far.
1094+ D490 FD 73 00             ld          (iy+0),e                            ; Update X Point
1095+ D493 FD 72 01             ld          (iy+1),d                            ; Update X Point
1096+ D496 FD 23                inc         iy
1097+ D498 FD 23                inc         iy
1098+ D49A              ; ......................................................
1099+ D49A              LL66:
1100+ D49A              ProcessYPoint:
1101+ D49A AF                   xor         a                                   ; y hi = 0
1102+ D49B 32 70 7F             ld          (varU),a                            ; U
1103+ D49E                      ldCopyByte  varT,varQ                           ; Q \ zdist lo
1103+ D49E 3A 8D 7F    >                        ld       a,(varT)
1103+ D4A1 32 71 7F    >                        ld       (varQ),a
1104+ D4A4 3A AA C0             ld          a,(UBnkYPointLo)                    ; XX15+3 \ rolled y low
1105+ D4A7 21 71 7F             ld          hl,varQ
1106+ D4AA BE                   cp          (hl)                                ; Q
1107+ D4AB                      JumpIfALTusng SmallYHop                         ; if ydist < zdist hop to small yangle
1107+ D4AB DA B4 D4    >                        jp		c,SmallYHop
1108+ D4AE              SmallYPoint:
1109+ D4AE CD E4 9C             call        RequAdivQ                           ; LL61  \ else visit up R = A/Q = y/z
1110+ D4B1 C3 B7 D4             jp          SkipYScale                          ; LL68 hop over small y yangle
1111+ D4B4              SmallYHop:
1112+ D4B4              LL67:                                                   ; Arrive from LL66 above if XX15+3 < Q \ small yangle
1113+ D4B4 CD C1 9C             call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
1114+ D4B7              SkipYScale:
1115+ D4B7              LL68:                                                   ; both carry on, also arrive from LL66, yscaled based on z
1116+ D4B7 3A AC C0             ld          a,(UBnkYPointSign)                  ; XX15+5 \ sign of X dist
1117+ D4BA CB 7F                bit         7,a
1118+ D4BC C2 CF D4             jp          nz,NegativeYPoint                   ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1119+ D4BF              PositiveYPoint:
1120+ D4BF 3A 72 7F             ld          a,(varR)
1121+ D4C2 6F                   ld          l,a
1122+ D4C3 3A 70 7F             ld          a,(varU)
1123+ D4C6 67                   ld          h,a
1124+ D4C7 3E 60                ld          a,ScreenHeightHalf
1125+ D4C9 ED 31                add         hl,a
1126+ D4CB EB                   ex          de,hl
1127+ D4CC C3 DF D4             jp          LL50
1128+ D4CF              NegativeYPoint:
1129+ D4CF              LL70:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1130+ D4CF 3A 72 7F             ld          a,(varR)
1131+ D4D2 6F                   ld          l,a
1132+ D4D3 3A 70 7F             ld          a,(varU)
1133+ D4D6 67                   ld          h,a
1134+ D4D7 0E 60                ld          c,ScreenHeightHalf
1135+ D4D9 06 00                ld          b,0
1136+ D4DB                      ClearCarryFlag
1136+ D4DB B7          >                        or a
1137+ D4DC ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1138+ D4DE EB                   ex          de,hl
1139+ D4DF              LL50:                                                   ; also from LL62, XX3 node heap has xscreen node so far.
1140+ D4DF FD 73 00             ld          (iy+0),e                            ; Update X Point
1141+ D4E2 FD 72 01             ld          (iy+1),d                            ; Update X Point
1142+ D4E5 FD 23                inc         iy
1143+ D4E7 FD 23                inc         iy
1144+ D4E9 C9                   ret
1145+ D4EA              ;--------------------------------------------------------------------------------------------------------
1146+ D4EA              ;;;     Byte 0 = X magnitide with origin at middle of ship
1147+ D4EA              ;;;     Byte 1 = Y magnitide with origin at middle of ship
1148+ D4EA              ;;;     Byte 2 = Z magnitide with origin at middle of ship
1149+ D4EA              ;;;     Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
1150+ D4EA              CopyNodeToXX15:
1151+ D4EA                      ldCopyByte  hl, UBnkXScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1151+ D4EA 7E          >                        ld       a,(hl)
1151+ D4EB 32 A7 C0    >                        ld       (UBnkXScaled),a
1152+ D4EE 23                   inc         hl
1153+ D4EF                      ldCopyByte  hl, UBnkYScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1153+ D4EF 7E          >                        ld       a,(hl)
1153+ D4F0 32 A9 C0    >                        ld       (UBnkYScaled),a
1154+ D4F3 23                   inc         hl
1155+ D4F4                      ldCopyByte  hl, UBnkZScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1155+ D4F4 7E          >                        ld       a,(hl)
1155+ D4F5 32 AB C0    >                        ld       (UBnkZScaled),a
1156+ D4F8 23                   inc         hl
1157+ D4F9              PopulateXX15SignBits:
1158+ D4F9              ; Simplfied for debugging, needs optimising back to original DEBUG TODO
1159+ D4F9 7E                   ld          a,(hl)
1160+ D4FA 4F                   ld          c,a                                 ; copy sign and visibility to c
1161+ D4FB 47                   ld          b,a
1162+ D4FC E6 80                and         $80                                 ; keep high 3 bits
1163+ D4FE 32 A8 C0             ld          (UBnkXScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1164+ D501 78                   ld          a,b
1165+ D502 E6 40                and         $40
1166+ D504 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1167+ D506 32 AA C0             ld          (UBnkYScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1168+ D509 78                   ld          a,b
1169+ D50A E6 20                and         $20
1170+ D50C CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1171+ D50E CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1172+ D510 32 AC C0             ld          (UBnkZScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1173+ D513 79                   ld          a,c                                 ; returns a with visibility sign byte
1174+ D514 E6 1F                and         $1F                                 ; visibility is held in bits 0 to 4                                                              ;;;     A = XX15 Signs AND &1F (to get lower 5 visibility)
1175+ D516 32 8D 7F             ld          (varT),a                            ; and store in varT as its needed later
1176+ D519 C9                   ret
1177+ D51A
1178+ D51A              ;;;     Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
1179+ D51A              ;;;     Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
1180+ D51A              ;..............................................................................................................................
1181+ D51A              ProcessANode:                                           ; Start loop on Nodes for visibility, each node has 4 faces associated with ;;; For each node (point) in model                  ::LL48
1182+ D51A              LL48GetScale:
1183+ D51A 3A 4B 7E             ld          a,(LastNormalVisible)               ; get Normal visible range into e before we copy node
1184+ D51D 5F                   ld          e,a
1185+ D51E CD EA D4             call        CopyNodeToXX15
1186+ D521              LL48GetVertices:
1187+ D521              LL48GetVertSignAndVisDist:
1188+ D521                      JumpIfALTNusng e,NodeIsNotVisible               ; if XX4 > Visibility distance then vertext too far away , next vertex.                                             ;;;        goto LL50 (end of loop)
1188+ D521 BB          >                        cp      e
1188+ D522 DA 5F D5    >                        jp		c, NodeIsNotVisible
1189+ D525              CheckFace1:                                                                                                                         ;;;     if all FaceVisile[point face any of idx1,2,3 or 4] = 0
1190+ D525                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;     get point face idx from byte 4 & 5 of normal
1190+ D525 23          >                    inc         hl                                  ; vertex byte#1
1190+ D526 7E          >                    ld          a,(hl)                              ;
1190+ D527 32 69 7E    >                    ld          (varP),a                     ; SunXX15+2 = (V),Y
1191+ D52A 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1192+ D52B E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1193+ D52D E5                   push        hl                                  ; we need to save HL                                                        ;;;
1194+ D52E                      ldHLIdxAToA UBnkFaceVisArray                    ; visibility at face 1                                                Byte 4;;;
1194+ D52E 21 D3 C0    >                    ld          hl,UBnkFaceVisArray
1194+ D531 ED 31       >                    add         hl,a
1194+ D533 7E          >                    ld          a,(hl)
1195+ D534 E1                   pop         hl                                  ;                                                                           ;;;
1196+ D535                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1196+ D535 A7          >                        and     a
1196+ D536 C2 65 D5    >                        jp	    nz,NodeIsVisible
1197+ D539              CheckFace2:                                                                                                                         ;;;
1198+ D539 7A                   ld          a,d                                                                                                             ;;;
1199+ D53A ED 23                swapnib                                                                                                                     ;;;
1200+ D53C E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1201+ D53E                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1201+ D53E A7          >                        and     a
1201+ D53F C2 65 D5    >                        jp	    nz,NodeIsVisible
1202+ D542              CheckFace3:                                                                                                                         ;;;
1203+ D542                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;
1203+ D542 23          >                    inc         hl                                  ; vertex byte#1
1203+ D543 7E          >                    ld          a,(hl)                              ;
1203+ D544 32 69 7E    >                    ld          (varP),a                     ; SunXX15+2 = (V),Y
1204+ D547 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1205+ D548 E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1206+ D54A E5                   push        hl                                  ; we need to save HL                                                        ;;;
1207+ D54B                      ldHLIdxAToA UBnkFaceVisArray                  ; visibility at face 1                                                Byte 5;;;
1207+ D54B 21 D3 C0    >                    ld          hl,UBnkFaceVisArray
1207+ D54E ED 31       >                    add         hl,a
1207+ D550 7E          >                    ld          a,(hl)
1208+ D551 E1                   pop         hl                                  ;                                                                           ;;;
1209+ D552                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1209+ D552 A7          >                        and     a
1209+ D553 C2 65 D5    >                        jp	    nz,NodeIsVisible
1210+ D556              CheckFace4:                                                                                                                         ;;;
1211+ D556 7A                   ld          a,d                                                                                                             ;;;
1212+ D557 ED 23                swapnib                                                                                                                     ;;;
1213+ D559 E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1214+ D55B                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1214+ D55B A7          >                        and     a
1214+ D55C C2 65 D5    >                        jp	    nz,NodeIsVisible
1215+ D55F              NodeIsNotVisible:                                                                                                                   ;;;
1216+ D55F 01 04 00             ld          bc,4
1217+ D562 FD 09                add         iy,bc                               ; if not visible then move to next element in array anyway                  ;;;
1218+ D564                      ;;; Should we be loading FFFFFFFF into 4 bytes or just ignore?
1219+ D564 C9                   ret                                                                                                      ;;;        goto LL50 (end of loop)
1220+ D565              NodeIsVisible:
1221+ D565              LL49:
1222+ D565 CD 0C D4             call        ProcessVisibleNode                  ; Process node to determine if it goes on heap
1223+ D568 C9                   ret
1224+ D569
1225+ D569                  DISPLAY "Tracing 6", $
1226+ D569
1227+ D569              ProjectNodeToEye:
1228+ D569 ED 4B AB C0      ld          bc,(UBnkZScaled)                    ; BC = Z Cordinate. By here it MUST be positive as its clamped to 4 min
1229+ D56D 79               ld          a,c                                 ;  so no need for a negative check
1230+ D56E 32 71 7F         ld          (varQ),a                            ; VarQ = z
1231+ D571 3A A7 C0         ld          a,(UBnkXScaled)                     ; XX15  \ rolled x lo which is signed
1232+ D574 CD E0 95         call        DIV16Amul256dCUNDOC                 ; result in BC which is 16 bit TODO Move to 16 bit below not just C reg
1233+ D577 3A A8 C0         ld          a,(UBnkXScaledSign)                 ; XX15+2 \ sign of X dist
1234+ D57A                  JumpOnBitSet a,7,EyeNegativeXPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1234+ D57A CB 7F       >                        bit 	7,a
1234+ D57C C2 87 D5    >                        jp      nz,EyeNegativeXPoint
1235+ D57F              EyePositiveXPoint:                                  ; x was positive result
1236+ D57F 2E 80            ld          l,ScreenCenterX                     ;
1237+ D581 26 00            ld          h,0
1238+ D583 09               add         hl,bc                               ; hl = Screen Centre + X
1239+ D584 C3 8E D5         jp          EyeStoreXPoint
1240+ D587              EyeNegativeXPoint:                                 ; x < 0 so need to subtract from the screen centre position
1241+ D587 2E 80            ld          l,ScreenCenterX
1242+ D589 26 00            ld          h,0
1243+ D58B                  ClearCarryFlag
1243+ D58B B7          >                        or a
1244+ D58C ED 42            sbc         hl,bc                               ; hl = Screen Centre - X
1245+ D58E              EyeStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1246+ D58E EB               ex          de,hl
1247+ D58F FD 73 00         ld          (iy+0),e                            ; Update X Point TODO this bit is 16 bit aware just need to fix above bit
1248+ D592 FD 72 01         ld          (iy+1),d                            ; Update X Point
1249+ D595              EyeProcessYPoint:
1250+ D595 ED 4B AB C0      ld          bc,(UBnkZScaled)                    ; Now process Y co-ordinate
1251+ D599 79               ld          a,c
1252+ D59A 32 71 7F         ld          (varQ),a
1253+ D59D 3A A9 C0         ld          a,(UBnkYScaled)                     ; XX15  \ rolled x lo
1254+ D5A0 CD E0 95         call        DIV16Amul256dCUNDOC                 ; a = Y scaled * 256 / zscaled
1255+ D5A3 3A AA C0         ld          a,(UBnkYScaledSign)                 ; XX15+2 \ sign of X dist
1256+ D5A6                  JumpOnBitSet a,7,EyeNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
1256+ D5A6 CB 7F       >                        bit 	7,a
1256+ D5A8 C2 B3 D5    >                        jp      nz,EyeNegativeYPoint
1257+ D5AB              EyePositiveYPoint:                                  ; Y is positive so above the centre line
1258+ D5AB 2E 60            ld          l,ScreenCenterY
1259+ D5AD                  ClearCarryFlag
1259+ D5AD B7          >                        or a
1260+ D5AE ED 42            sbc         hl,bc                               ; hl = ScreenCentreY - Y coord (as screen is 0 at top)
1261+ D5B0 C3 B8 D5         jp          EyeStoreYPoint
1262+ D5B3              EyeNegativeYPoint:                                  ; this bit is only 8 bit aware TODO FIX
1263+ D5B3 2E 60            ld          l,ScreenCenterY
1264+ D5B5 26 00            ld          h,0
1265+ D5B7 09               add         hl,bc                               ; hl = ScreenCenterY + Y as negative is below the center of screen
1266+ D5B8              EyeStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1267+ D5B8 EB               ex          de,hl
1268+ D5B9 FD 73 02         ld          (iy+2),e                            ; Update Y Point
1269+ D5BC FD 72 03         ld          (iy+3),d                            ; Update Y Point
1270+ D5BF C9               ret
1271+ D5C0
1272+ D5C0
1273+ D5C0
1274+ D5C0              ; Pitch and roll are 2 phases
1275+ D5C0              ; 1 - we apply our pitch and roll to the ship position
1276+ D5C0              ;       x -> x + alpha * (y - alpha * x)
1277+ D5C0              ;       y -> y - alpha * x - beta * z
1278+ D5C0              ;       z -> z + beta * (y - alpha * x - beta * z)
1279+ D5C0              ; which can be simplified as:
1280+ D5C0              ;       1. K2 = y - alpha * x
1281+ D5C0              ;       2. z = z + beta * K2
1282+ D5C0              ;       3. y = K2 - beta * z
1283+ D5C0              ;       4. x = x + alpha * y
1284+ D5C0              ; 2 - we apply our patch and roll to the ship orientation
1285+ D5C0              ;      Roll calculations:
1286+ D5C0              ;
1287+ D5C0              ;        nosev_y = nosev_y - alpha * nosev_x_hi
1288+ D5C0              ;        nosev_x = nosev_x + alpha * nosev_y_hi
1289+ D5C0              ;      Pitch calculations:
1290+ D5C0              ;
1291+ D5C0              ;        nosev_y = nosev_y - beta * nosev_z_hi
1292+ D5C0              ;        nosev_z = nosev_z + beta * nosev_y_hi
1293+ D5C0
1294+ D5C0
1295+ D5C0              ; ---------------------------------------------------------------------------------------------------------------------------------
1296+ D5C0                          INCLUDE "./Universe/Ships/ApplyMyRollAndPitch.asm"
# file opened: ././Universe/Ships/ApplyMyRollAndPitch.asm
   1++D5C0
   2++D5C0              ; Full version
   3++D5C0              ; 1. K2 = y - alpha * x
   4++D5C0              ; 2. z = z + beta * K2
   5++D5C0              ; 3. y = K2 - beta * z
   6++D5C0              ; 4. x = x + alpha * y
   7++D5C0
   8++D5C0
   9++D5C0
  10++D5C0              APPequXPosPlusAPP:     APPequPosPlusAPP UBnkxlo, UBnkxsgn
  10++D5C0 C5          >                        push    bc
  10++D5C1 4F          >                        ld      c,a                         ; save original value of a into c
  10++D5C2 3A 22 C0    >                        ld      a,(UBnkxsgn)
  10++D5C5 47          >                        ld      b,a
  10++D5C6 79          >                        ld      a,c
  10++D5C7 A8          >                        xor     b                           ; a = a xor x postition sign
  10++D5C8 FA D9 D5    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  10++D5CB             >; Signs are the same to we just add and take which ever sign
  10++D5CB ED 5B 6A 7E >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  10++D5CF 2A 20 C0    >                        ld      hl,(UBnkxlo)
  10++D5D2 19          >                        add     hl,de
  10++D5D3 22 6A 7E    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  10++D5D6 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  10++D5D7 C1          >                        pop     bc
  10++D5D8 C9          >                        ret
  10++D5D9             >; Signs are opposite so we subtract
  10++D5D9 ED 5B 6A 7E >.MV50:                  ld      de,(varPp1)
  10++D5DD 2A 20 C0    >                        ld      hl,(UBnkxlo)
  10++D5E0 B7          >                        or      a
  10++D5E1 ED 52       >                        sbc     hl,de
  10++D5E3 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  10++D5E5 79          >                        ld      a,c                         ; get back the original sign
  10++D5E6 22 6A 7E    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  10++D5E9 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  10++D5EB C1          >                        pop     bc
  10++D5EC C9          >                        ret
  10++D5ED             >.MV51:                  NegHL
  10++D5ED AF          >                    xor a
  10++D5EE 95          >                    sub l
  10++D5EF 6F          >                    ld l,a
  10++D5F0 9F          >                    sbc a,a
  10++D5F1 94          >                    sub h
  10++D5F2 67          >                    ld h,a
  10++D5F3 22 6A 7E    >                        ld      (varPp1),hl
  10++D5F6 79          >                        ld      a,c                         ; the original sign will still be good
  10++D5F7 C1          >                        pop     bc
  10++D5F8 C9          >                        ret
  11++D5F9
  12++D5F9              APPequYPosPlusAPP:     APPequPosPlusAPP UBnkylo, UBnkysgn
  12++D5F9 C5          >                        push    bc
  12++D5FA 4F          >                        ld      c,a                         ; save original value of a into c
  12++D5FB 3A 25 C0    >                        ld      a,(UBnkysgn)
  12++D5FE 47          >                        ld      b,a
  12++D5FF 79          >                        ld      a,c
  12++D600 A8          >                        xor     b                           ; a = a xor x postition sign
  12++D601 FA 12 D6    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  12++D604             >; Signs are the same to we just add and take which ever sign
  12++D604 ED 5B 6A 7E >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  12++D608 2A 23 C0    >                        ld      hl,(UBnkylo)
  12++D60B 19          >                        add     hl,de
  12++D60C 22 6A 7E    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  12++D60F 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  12++D610 C1          >                        pop     bc
  12++D611 C9          >                        ret
  12++D612             >; Signs are opposite so we subtract
  12++D612 ED 5B 6A 7E >.MV50:                  ld      de,(varPp1)
  12++D616 2A 23 C0    >                        ld      hl,(UBnkylo)
  12++D619 B7          >                        or      a
  12++D61A ED 52       >                        sbc     hl,de
  12++D61C 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  12++D61E 79          >                        ld      a,c                         ; get back the original sign
  12++D61F 22 6A 7E    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  12++D622 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  12++D624 C1          >                        pop     bc
  12++D625 C9          >                        ret
  12++D626             >.MV51:                  NegHL
  12++D626 AF          >                    xor a
  12++D627 95          >                    sub l
  12++D628 6F          >                    ld l,a
  12++D629 9F          >                    sbc a,a
  12++D62A 94          >                    sub h
  12++D62B 67          >                    ld h,a
  12++D62C 22 6A 7E    >                        ld      (varPp1),hl
  12++D62F 79          >                        ld      a,c                         ; the original sign will still be good
  12++D630 C1          >                        pop     bc
  12++D631 C9          >                        ret
  13++D632
  14++D632              APPequZPosPlusAPP:     APPequPosPlusAPP UBnkzlo, UBnkzsgn
  14++D632 C5          >                        push    bc
  14++D633 4F          >                        ld      c,a                         ; save original value of a into c
  14++D634 3A 28 C0    >                        ld      a,(UBnkzsgn)
  14++D637 47          >                        ld      b,a
  14++D638 79          >                        ld      a,c
  14++D639 A8          >                        xor     b                           ; a = a xor x postition sign
  14++D63A FA 4B D6    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  14++D63D             >; Signs are the same to we just add and take which ever sign
  14++D63D ED 5B 6A 7E >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  14++D641 2A 26 C0    >                        ld      hl,(UBnkzlo)
  14++D644 19          >                        add     hl,de
  14++D645 22 6A 7E    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  14++D648 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  14++D649 C1          >                        pop     bc
  14++D64A C9          >                        ret
  14++D64B             >; Signs are opposite so we subtract
  14++D64B ED 5B 6A 7E >.MV50:                  ld      de,(varPp1)
  14++D64F 2A 26 C0    >                        ld      hl,(UBnkzlo)
  14++D652 B7          >                        or      a
  14++D653 ED 52       >                        sbc     hl,de
  14++D655 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  14++D657 79          >                        ld      a,c                         ; get back the original sign
  14++D658 22 6A 7E    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  14++D65B EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  14++D65D C1          >                        pop     bc
  14++D65E C9          >                        ret
  14++D65F             >.MV51:                  NegHL
  14++D65F AF          >                    xor a
  14++D660 95          >                    sub l
  14++D661 6F          >                    ld l,a
  14++D662 9F          >                    sbc a,a
  14++D663 94          >                    sub h
  14++D664 67          >                    ld h,a
  14++D665 22 6A 7E    >                        ld      (varPp1),hl
  14++D668 79          >                        ld      a,c                         ; the original sign will still be good
  14++D669 C1          >                        pop     bc
  14++D66A C9          >                        ret
  15++D66B
  16++D66B              ; rollWork holds Alpha intermidate results
  17++D66B 00 00 00     rollWork      DS 3
  18++D66E              rollWorkp1    equ rollWork
  19++D66E              rollWorkp2    equ rollWork+1
  20++D66E              rollWorkp3    equ rollWork+2
  21++D66E
  22++D66E              ;----------------------------------------------------------------------------------------------------------------------------------
  23++D66E              ; based on MVEIT part 4 of 9
  24++D66E 3A 8B 7E     ApplyMyRollAndPitch:    ld      a,(ALP1)                    ; get roll magnitude
  25++D671 21 76 7E                             ld      hl,BET1                     ; and pitch
  26++D674 B6                                   or      (hl)
  27++D675 CA 31 D8                             jp      z,.NoRotation               ; if both zero then don't compute
  28++D678                                      ;break
  29++D678              ; P[210] = x * alph (we use P[2]P[1] later as result/256
  30++D678 5F                                   ld      e,a                         ; e = roll magnitude
  31++D679 2A 20 C0                             ld      hl,(UBnkxlo)                ; hl = ship x pos
  32++D67C CD 63 91                             call    AHLequHLmulE                ; MULTU2-2 AHL = UBnkXlo * Alp1 both unsigned
  33++D67F 32 6B 7E                             ld      (varPhi2),a                 ; set P[2] to high byte to help with ./256
  34++D682 22 69 7E                             ld      (varP),hl                   ; P (2 1 0) = UBnkXlo * Alph1
  35++D685              ; A = Flip sign
  36++D685 3A 8C 7E                             ld      a,(ALP2)                ; flip the current roll angle alpha and xor with x sign
  37++D688 21 22 C0                             ld      hl,UBnkxsgn                 ; and xor with x pos sign
  38++D68B AE                                   xor     (hl)                        ; so now  (A P+2 P+1) = - (x_sign x_hi x_lo) * alpha / 256
  39++D68C              ; AP[2]P[1] =Y + AP[2]P[1] (i.e. Previous APP/256)
  40++D68C CD F9 D5                             call    APPequYPosPlusAPP           ; MVT6 calculate APP = y - (x * alpha / 256)
  41++D68F              ; K2 = AP[2][1] K2(3 2 1) = (A P+2 P+1) = y - x * alpha / 256
  42++D68F 32 6D D6                             ld      (rollWorkp3),a               ; k2+3 = sign of result
  43++D692 22 6B D6                             ld      (rollWorkp1),hl             ; k2+1,2 = result
  44++D695              ; P[210] = K2[2 1] * Beta  = (A ~P) * X
  45++D695 3A 76 7E                             ld      a,(BET1)                    ; a = magnitude of pitch
  46++D698 5F                                   ld      e,a
  47++D699 CD 63 91                             call    AHLequHLmulE                ; MLTU2-2 AHL = (P+2 P+1) * BET1 or by now ((UBnkXlo * Alph1)/256 * Bet1)
  48++D69C 32 6B 7E                             ld      (varPp2),a                   ; save highest byte in P2
  49++D69F 22 69 7E                             ld      (varP),hl
  50++D6A2              ; Fetch sign of previosu cal and xor with BETA inverted
  51++D6A2 3A 6D D6                             ld      a,(rollWorkp3)
  52++D6A5 5F                                   ld      e,a
  53++D6A6 3A 77 7E                             ld      a,(BET2)
  54++D6A9 AB                                   xor     e                           ; so we get the sign of K3 and xor with pitch sign
  55++D6AA              ; Z = P[210] =Z + APP
  56++D6AA CD 32 D6                             call    APPequZPosPlusAPP           ; MVT6
  57++D6AD 32 28 C0                             ld      (UBnkzsgn),a                ; save result back into z
  58++D6B0 22 26 C0                             ld      (UBnkzlo),hl
  59++D6B3              ; A[P1]P[0] = z * Beta
  60++D6B3 3A 76 7E                             ld      a,(BET1)                    ; get pitch back again for mulitply in original it was kept in Q so no fetch needed
  61++D6B6 5F                                   ld      e,a
  62++D6B7 CD 63 91                             call    AHLequHLmulE                ; MULTU2 P2 P1 was already in hl (A P+1 P) = (z_hi z_lo) * beta
  63++D6BA 32 6B 7E                             ld      (varPp2),a                  ; P2 = high byte of result
  64++D6BD 22 69 7E                             ld      (varP),hl                   ; P (2 1 0) = UBnkXlo & Alph1
  65++D6C0              ; A xor BET2,Zsign
  66++D6C0 3A 6D D6                             ld      a,(rollWorkp3)               ; get K3 (sign of y) and store it in y pos
  67++D6C3 32 25 C0                             ld      (UBnkysgn),a                ; save result back into y
  68++D6C6 5F                                   ld      e,a                         ; a = y sign Xor pitch rate sign
  69++D6C7 3A 77 7E                             ld      a,(BET2)                    ;
  70++D6CA AB                                   xor     e                           ;
  71++D6CB 5F                                   ld      e,a                         ; now xor it with z sign too
  72++D6CC 3A 28 C0                             ld      a,(UBnkzsgn)                ;
  73++D6CF AB                                   xor     e                           ; so now a = sign of y * beta * sign y * sign z
  74++D6D0 F2 DF D6                             jp      p,.MV43                     ; if result is pve beta * z and y have differetn signs
  75++D6D3 2A 6A 7E                             ld      hl,(varPp1)
  76++D6D6 ED 5B 6B D6                          ld      de,(rollWorkp1)
  77++D6DA B7                                   or      a
  78++D6DB 19                                   add     hl,de
  79++D6DC C3 F9 D6                             jp      .MV44
  80++D6DF 2A 6B D6     .MV43:                  ld      hl,(rollWorkp1)
  81++D6E2 ED 5B 6A 7E                          ld      de,(varPp1)
  82++D6E6 B7                                   or      a
  83++D6E7 ED 52                                sbc     hl,de                       ; (y_hi y_lo) = K2(2 1) - P(2 1)
  84++D6E9 30 0E                                jr      nc,.MV44                    ; if there was no over flow carry on
  85++D6EB                                      NegHL
  85++D6EB AF          >                    xor a
  85++D6EC 95          >                    sub l
  85++D6ED 6F          >                    ld l,a
  85++D6EE 9F          >                    sbc a,a
  85++D6EF 94          >                    sub h
  85++D6F0 67          >                    ld h,a
  86++D6F1 3A 25 C0                             ld      a,(UBnkysgn)                ; flip sign bit TODO, we may have to remove xor as planets and suns are sign + 23 bit xpos
  87++D6F4 EE 80                                xor     SignOnly8Bit
  88++D6F6 32 25 C0                             ld      (UBnkysgn),a
  89++D6F9              ; by here we have (y_sign y_hi y_lo) = K2(2 1) - P(2 1) = K2 - beta * z
  90++D6F9 22 23 C0     .MV44:                  ld      (UBnkylo),hl                ; we do save here to avoid two writes if MV43 ended up with a 2s'c conversion
  91++D6FC 3A 8B 7E                             ld      a,(ALP1)                    ; get roll magnitude
  92++D6FF 5F                                   ld      e,a
  93++D700 2A 23 C0                             ld      hl,(UBnkylo)
  94++D703 CD 63 91                             call    AHLequHLmulE                ; MLTU2-2 AHL = (y_hi y_lo) * alpha
  95++D706 32 6B 7E                             ld      (varPp2),a                  ; store high byte P(2 1 0) = (y_hi y_lo) * alpha
  96++D709 22 69 7E                             ld      (varP),hl
  97++D70C 3A 8D 7E                             ld      a,(ALP2FLIP)
  98++D70F 5F                                   ld      e,a
  99++D710 3A 25 C0                             ld      a,(UBnkysgn)
 100++D713 AB                                   xor     e                           ; a = sign of roll xor y so now we have (A P+2 P+1) = (y_sign y_hi y_lo) * alpha / 256
 101++D714 CD C0 D5                             call    APPequXPosPlusAPP           ; MVT6 Set (A P+2 P+1) = (x_sign x_hi x_lo) + (A P+2 P+1) = x + y * alpha / 256
 102++D717 32 22 C0                             ld      (UBnkxsgn),a                ; save resutl stright into X pos
 103++D71A 22 20 C0                             ld      (UBnkxlo),hl
 104++D71D                                      ;break
 105++D71D                                      ; if its not a sun then apply to local orientation
 106++D71D                                      ApplyMyRollToVector ALPHA, UBnkrotmatNosevX, UBnkrotmatNosevY   ; ApplyMyRollToNosev:
 106++D71D             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
 106++D71D 3A 8A 7E    >                        ld       a,(ALPHA)
 106++D720 32 71 7F    >                        ld       (varQ),a
 106++D723             >                        ldCopy2Byte UBnkrotmatNosevY, varR           ; RS =  nosev_y
 106++D723 2A 37 C0    >                        ld       hl,(UBnkrotmatNosevY)
 106++D726 22 72 7F    >                        ld       (varR),hl
 106++D729             >                        ldCopyByte  UBnkrotmatNosevX, varP           ; set P to nosevX lo (may be redundant)
 106++D729 3A 35 C0    >                        ld       a,(UBnkrotmatNosevX)
 106++D72C 32 69 7E    >                        ld       (varP),a
 106++D72F 3A 36 C0    >                        ld a,(UBnkrotmatNosevX+1)                    ; Set A = -nosev_x_hi
 106++D732 EE 80       >                        xor $80                             ;
 106++D734 CD E8 90    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
 106++D737 ED 53 37 C0 >                        ld  (UBnkrotmatNosevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
 106++D73B             >                        ldCopy2Byte UBnkrotmatNosevX, varR           ; Set (S R) = nosev_x
 106++D73B 2A 35 C0    >                        ld       hl,(UBnkrotmatNosevX)
 106++D73E 22 72 7F    >                        ld       (varR),hl
 106++D741 3A 38 C0    >                        ld  a,(UBnkrotmatNosevY+1)                   ;  Set A = nosev_y_hi
 106++D744 CD E8 90    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
 106++D747 ED 53 35 C0 >                        ld  (UBnkrotmatNosevX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
 107++D74B                                      ApplyMyRollToVector ALPHA, UBnkrotmatSidevX, UBnkrotmatSidevY   ; ApplyMyRollToSidev:
 107++D74B             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
 107++D74B 3A 8A 7E    >                        ld       a,(ALPHA)
 107++D74E 32 71 7F    >                        ld       (varQ),a
 107++D751             >                        ldCopy2Byte UBnkrotmatSidevY, varR           ; RS =  nosev_y
 107++D751 2A 2B C0    >                        ld       hl,(UBnkrotmatSidevY)
 107++D754 22 72 7F    >                        ld       (varR),hl
 107++D757             >                        ldCopyByte  UBnkrotmatSidevX, varP           ; set P to nosevX lo (may be redundant)
 107++D757 3A 29 C0    >                        ld       a,(UBnkrotmatSidevX)
 107++D75A 32 69 7E    >                        ld       (varP),a
 107++D75D 3A 2A C0    >                        ld a,(UBnkrotmatSidevX+1)                    ; Set A = -nosev_x_hi
 107++D760 EE 80       >                        xor $80                             ;
 107++D762 CD E8 90    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
 107++D765 ED 53 2B C0 >                        ld  (UBnkrotmatSidevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
 107++D769             >                        ldCopy2Byte UBnkrotmatSidevX, varR           ; Set (S R) = nosev_x
 107++D769 2A 29 C0    >                        ld       hl,(UBnkrotmatSidevX)
 107++D76C 22 72 7F    >                        ld       (varR),hl
 107++D76F 3A 2C C0    >                        ld  a,(UBnkrotmatSidevY+1)                   ;  Set A = nosev_y_hi
 107++D772 CD E8 90    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
 107++D775 ED 53 29 C0 >                        ld  (UBnkrotmatSidevX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
 108++D779                                      ApplyMyRollToVector ALPHA, UBnkrotmatRoofvX, UBnkrotmatRoofvY   ; ApplyMyRollToRoofv:
 108++D779             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
 108++D779 3A 8A 7E    >                        ld       a,(ALPHA)
 108++D77C 32 71 7F    >                        ld       (varQ),a
 108++D77F             >                        ldCopy2Byte UBnkrotmatRoofvY, varR           ; RS =  nosev_y
 108++D77F 2A 31 C0    >                        ld       hl,(UBnkrotmatRoofvY)
 108++D782 22 72 7F    >                        ld       (varR),hl
 108++D785             >                        ldCopyByte  UBnkrotmatRoofvX, varP           ; set P to nosevX lo (may be redundant)
 108++D785 3A 2F C0    >                        ld       a,(UBnkrotmatRoofvX)
 108++D788 32 69 7E    >                        ld       (varP),a
 108++D78B 3A 30 C0    >                        ld a,(UBnkrotmatRoofvX+1)                    ; Set A = -nosev_x_hi
 108++D78E EE 80       >                        xor $80                             ;
 108++D790 CD E8 90    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
 108++D793 ED 53 31 C0 >                        ld  (UBnkrotmatRoofvY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
 108++D797             >                        ldCopy2Byte UBnkrotmatRoofvX, varR           ; Set (S R) = nosev_x
 108++D797 2A 2F C0    >                        ld       hl,(UBnkrotmatRoofvX)
 108++D79A 22 72 7F    >                        ld       (varR),hl
 108++D79D 3A 32 C0    >                        ld  a,(UBnkrotmatRoofvY+1)                   ;  Set A = nosev_y_hi
 108++D7A0 CD E8 90    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
 108++D7A3 ED 53 2F C0 >                        ld  (UBnkrotmatRoofvX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
 109++D7A7                                      ApplyMyRollToVector BETA, UBnkrotmatNosevZ, UBnkrotmatNosevY    ; ApplyMyPitchToNosev:
 109++D7A7             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
 109++D7A7 3A 74 7E    >                        ld       a,(BETA)
 109++D7AA 32 71 7F    >                        ld       (varQ),a
 109++D7AD             >                        ldCopy2Byte UBnkrotmatNosevY, varR           ; RS =  nosev_y
 109++D7AD 2A 37 C0    >                        ld       hl,(UBnkrotmatNosevY)
 109++D7B0 22 72 7F    >                        ld       (varR),hl
 109++D7B3             >                        ldCopyByte  UBnkrotmatNosevZ, varP           ; set P to nosevX lo (may be redundant)
 109++D7B3 3A 39 C0    >                        ld       a,(UBnkrotmatNosevZ)
 109++D7B6 32 69 7E    >                        ld       (varP),a
 109++D7B9 3A 3A C0    >                        ld a,(UBnkrotmatNosevZ+1)                    ; Set A = -nosev_x_hi
 109++D7BC EE 80       >                        xor $80                             ;
 109++D7BE CD E8 90    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
 109++D7C1 ED 53 37 C0 >                        ld  (UBnkrotmatNosevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
 109++D7C5             >                        ldCopy2Byte UBnkrotmatNosevZ, varR           ; Set (S R) = nosev_x
 109++D7C5 2A 39 C0    >                        ld       hl,(UBnkrotmatNosevZ)
 109++D7C8 22 72 7F    >                        ld       (varR),hl
 109++D7CB 3A 38 C0    >                        ld  a,(UBnkrotmatNosevY+1)                   ;  Set A = nosev_y_hi
 109++D7CE CD E8 90    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
 109++D7D1 ED 53 39 C0 >                        ld  (UBnkrotmatNosevZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
 110++D7D5                                      ApplyMyRollToVector BETA, UBnkrotmatSidevZ, UBnkrotmatSidevY    ; ApplyMyPitchToSidev:
 110++D7D5             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
 110++D7D5 3A 74 7E    >                        ld       a,(BETA)
 110++D7D8 32 71 7F    >                        ld       (varQ),a
 110++D7DB             >                        ldCopy2Byte UBnkrotmatSidevY, varR           ; RS =  nosev_y
 110++D7DB 2A 2B C0    >                        ld       hl,(UBnkrotmatSidevY)
 110++D7DE 22 72 7F    >                        ld       (varR),hl
 110++D7E1             >                        ldCopyByte  UBnkrotmatSidevZ, varP           ; set P to nosevX lo (may be redundant)
 110++D7E1 3A 2D C0    >                        ld       a,(UBnkrotmatSidevZ)
 110++D7E4 32 69 7E    >                        ld       (varP),a
 110++D7E7 3A 2E C0    >                        ld a,(UBnkrotmatSidevZ+1)                    ; Set A = -nosev_x_hi
 110++D7EA EE 80       >                        xor $80                             ;
 110++D7EC CD E8 90    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
 110++D7EF ED 53 2B C0 >                        ld  (UBnkrotmatSidevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
 110++D7F3             >                        ldCopy2Byte UBnkrotmatSidevZ, varR           ; Set (S R) = nosev_x
 110++D7F3 2A 2D C0    >                        ld       hl,(UBnkrotmatSidevZ)
 110++D7F6 22 72 7F    >                        ld       (varR),hl
 110++D7F9 3A 2C C0    >                        ld  a,(UBnkrotmatSidevY+1)                   ;  Set A = nosev_y_hi
 110++D7FC CD E8 90    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
 110++D7FF ED 53 2D C0 >                        ld  (UBnkrotmatSidevZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
 111++D803                                      ApplyMyRollToVector BETA, UBnkrotmatRoofvZ, UBnkrotmatRoofvY    ; ApplyMyPitchToRoofv:
 111++D803             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
 111++D803 3A 74 7E    >                        ld       a,(BETA)
 111++D806 32 71 7F    >                        ld       (varQ),a
 111++D809             >                        ldCopy2Byte UBnkrotmatRoofvY, varR           ; RS =  nosev_y
 111++D809 2A 31 C0    >                        ld       hl,(UBnkrotmatRoofvY)
 111++D80C 22 72 7F    >                        ld       (varR),hl
 111++D80F             >                        ldCopyByte  UBnkrotmatRoofvZ, varP           ; set P to nosevX lo (may be redundant)
 111++D80F 3A 33 C0    >                        ld       a,(UBnkrotmatRoofvZ)
 111++D812 32 69 7E    >                        ld       (varP),a
 111++D815 3A 34 C0    >                        ld a,(UBnkrotmatRoofvZ+1)                    ; Set A = -nosev_x_hi
 111++D818 EE 80       >                        xor $80                             ;
 111++D81A CD E8 90    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
 111++D81D ED 53 31 C0 >                        ld  (UBnkrotmatRoofvY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
 111++D821             >                        ldCopy2Byte UBnkrotmatRoofvZ, varR           ; Set (S R) = nosev_x
 111++D821 2A 33 C0    >                        ld       hl,(UBnkrotmatRoofvZ)
 111++D824 22 72 7F    >                        ld       (varR),hl
 111++D827 3A 32 C0    >                        ld  a,(UBnkrotmatRoofvY+1)                   ;  Set A = nosev_y_hi
 111++D82A CD E8 90    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
 111++D82D ED 53 33 C0 >                        ld  (UBnkrotmatRoofvZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
 112++D831 3A 6B 7F     .NoRotation:            ld      a,(DELTA)                   ; get speed
 113++D834 16 00                                ld      d,0
 114++D836 5F                                   ld      e,a                         ; de = speed in low byte
 115++D837 2A 26 C0                             ld      hl,(UBnkzlo)                ; hl = z position
 116++D83A 3A 28 C0                             ld      a,(UBnkzsgn)                ; b = z sign
 117++D83D 47                                   ld      b,a                         ;
 118++D83E 0E 80                                ld      c,$80                       ; c = -ve as we are always moving forwards
 119++D840                                      MMUSelectMathsBankedFns
 119++D840 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 120++D844 CD 2F 00                             call    ADDHLDESignBC               ; update speed
 121++D847 22 26 C0                             ld      (UBnkzlo),hl                ; write back to zpos
 122++D84A 32 28 C0                             ld      (UBnkzsgn),a                ;
 123++D84D C9                                   ret
# file closed: ././Universe/Ships/ApplyMyRollAndPitch.asm
1297+ D84E                          INCLUDE "./Universe/Ships/ApplyShipRollAndPitch.asm"
# file opened: ././Universe/Ships/ApplyShipRollAndPitch.asm
   1++D84E
   2++D84E              ; A = value for rotation
   3++D84E              ; HL = address of value for rotation
   4++D84E              ; TODO logic for permanent spin, I thik this it -127??
   5++D84E              SplitAndDampenZ:        MACRO
   6++D84E ~                                    ld      b,a
   7++D84E ~                                    and     SignMask8Bit            ; if abs (Rotz) is 0 then skip
   8++D84E ~                                    jp      z,.ProcessRoll
   9++D84E ~                                    ld      a,b                     ; b = rotate counter S7
  10++D84E ~                                    and     SignOnly8Bit            ; a = sign rat2 = c = sign
  11++D84E ~                                    ld      c,a                     ; .
  12++D84E ~                                    ld      (univRAT2),a            ; .
  13++D84E ~                                    ld      a,b                     ; a = abs b
  14++D84E ~                                    and     SignMask8Bit            ; .
  15++D84E ~                                    dec     a                       ; dampen
  16++D84E ~                                    ld      (univRAT2Val),a
  17++D84E ~                                    or      c                       ; make S7 again after dampening
  18++D84E ~                                    ld      (UBnkRotZCounter),a
  19++D84E                                      ENDM
  20++D84E
  21++D84E              SplitAndDampenX:        MACRO
  22++D84E ~                                    ld      b,a
  23++D84E ~                                    and     SignMask8Bit            ; exit early is ABS = 0
  24++D84E ~                                    and     a                       ; .
  25++D84E ~                                    ret     z                       ; .
  26++D84E ~                                    ld      a,b                     ; a = rotate counter S7
  27++D84E ~                                    and     SignOnly8Bit            ; rat2 = c = sign
  28++D84E ~                                    ld      c,a                     ; .
  29++D84E ~                                    ld      (univRAT2),a            ; .
  30++D84E ~                                    ld      a,b                     ; a = abs b
  31++D84E ~                                    and     SignMask8Bit            ; .
  32++D84E ~                                    dec     a                       ; dampen
  33++D84E ~                                    ld      (univRAT2Val),a
  34++D84E ~                                    or      c                       ; make S7 again after dampening
  35++D84E ~                                    ld      (UBnkRotXCounter),a
  36++D84E                                      ENDM
  37++D84E
  38++D84E
  39++D84E              ;----------------------------------------------------------------------------------------------------------------------------------
  40++D84E              ; based on MVEIT part 4 of 9
  41++D84E              ; x and z counters are proper 2's c values
  42++D84E 3A 4A C0     ApplyShipRollAndPitch:  ld      a,(UBnkRotZCounter)
  43++D851 FE FF                                cp      $FF
  44++D853 28 18                                jr      z,.PitchSAxes
  45++D855                                      SplitAndDampenZ
  45++D855 47          >                        ld      b,a
  45++D856 E6 7F       >                        and     SignMask8Bit            ; if abs (Rotz) is 0 then skip
  45++D858 CA 9A D8    >                        jp      z,.ProcessRoll
  45++D85B 78          >                        ld      a,b                     ; b = rotate counter S7
  45++D85C E6 80       >                        and     SignOnly8Bit            ; a = sign rat2 = c = sign
  45++D85E 4F          >                        ld      c,a                     ; .
  45++D85F 32 50 C0    >                        ld      (univRAT2),a            ; .
  45++D862 78          >                        ld      a,b                     ; a = abs b
  45++D863 E6 7F       >                        and     SignMask8Bit            ; .
  45++D865 3D          >                        dec     a                       ; dampen
  45++D866 32 51 C0    >                        ld      (univRAT2Val),a
  45++D869 B1          >                        or      c                       ; make S7 again after dampening
  45++D86A 32 4A C0    >                        ld      (UBnkRotZCounter),a
  46++D86D                                      ;ld      a,(UBnkRotZCounter)
  47++D86D 21 2F C0     .PitchSAxes:            ld	    hl,UBnkrotmatRoofvX; UBnkrotmatSidevY
  48++D870 22 3F 7E                             ld	    (varAxis1),hl
  49++D873 21 35 C0                             ld	    hl,UBnkrotmatNosevX; UBnkrotmatSidevZ
  50++D876 22 41 7E                             ld	    (varAxis2),hl
  51++D879 CD E6 D8                             call    MVS5RotateAxis
  52++D87C 21 31 C0     .PitchRAxes:            ld	    hl,UBnkrotmatRoofvY
  53++D87F 22 3F 7E                             ld	    (varAxis1),hl
  54++D882 21 37 C0                             ld	    hl,UBnkrotmatNosevY;UBnkrotmatRoofvZ
  55++D885 22 41 7E                             ld	    (varAxis2),hl
  56++D888 CD E6 D8                             call    MVS5RotateAxis
  57++D88B 21 33 C0     .PitchNAxes:            ld	    hl,UBnkrotmatRoofvZ; UBnkrotmatNosevY
  58++D88E 22 3F 7E                             ld	    (varAxis1),hl
  59++D891 21 39 C0                             ld	    hl,UBnkrotmatNosevZ
  60++D894 22 41 7E                             ld	    (varAxis2),hl
  61++D897 CD E6 D8                             call    MVS5RotateAxis
  62++D89A 3A 48 C0     .ProcessRoll:           ld      a,(UBnkRotXCounter)
  63++D89D FE FF                                cp      $FF
  64++D89F 28 17                                jr      z,.RollSAxis
  65++D8A1                                      SplitAndDampenX
  65++D8A1 47          >                        ld      b,a
  65++D8A2 E6 7F       >                        and     SignMask8Bit            ; exit early is ABS = 0
  65++D8A4 A7          >                        and     a                       ; .
  65++D8A5 C8          >                        ret     z                       ; .
  65++D8A6 78          >                        ld      a,b                     ; a = rotate counter S7
  65++D8A7 E6 80       >                        and     SignOnly8Bit            ; rat2 = c = sign
  65++D8A9 4F          >                        ld      c,a                     ; .
  65++D8AA 32 50 C0    >                        ld      (univRAT2),a            ; .
  65++D8AD 78          >                        ld      a,b                     ; a = abs b
  65++D8AE E6 7F       >                        and     SignMask8Bit            ; .
  65++D8B0 3D          >                        dec     a                       ; dampen
  65++D8B1 32 51 C0    >                        ld      (univRAT2Val),a
  65++D8B4 B1          >                        or      c                       ; make S7 again after dampening
  65++D8B5 32 48 C0    >                        ld      (UBnkRotXCounter),a
  66++D8B8 21 2F C0     .RollSAxis:           	ld	    hl,UBnkrotmatRoofvX; UBnkrotmatSidevX
  67++D8BB 22 3F 7E                             ld	    (varAxis1),hl
  68++D8BE 21 29 C0                             ld	    hl,UBnkrotmatSidevX; UBnkrotmatSidevY
  69++D8C1 22 41 7E                             ld	    (varAxis2),hl
  70++D8C4 CD E6 D8                             call    MVS5RotateAxis
  71++D8C7 21 31 C0     .RollRAxis:             ld	    hl,UBnkrotmatRoofvY; UBnkrotmatRoofvX
  72++D8CA 22 3F 7E                             ld	    (varAxis1),hl
  73++D8CD 21 2B C0                             ld	    hl,UBnkrotmatSidevY; UBnkrotmatRoofvY
  74++D8D0 22 41 7E                             ld	    (varAxis2),hl
  75++D8D3 CD E6 D8                             call    MVS5RotateAxis
  76++D8D6 21 33 C0     .RollNAxis:             ld	    hl,UBnkrotmatRoofvZ; UBnkrotmatNosevX
  77++D8D9 22 3F 7E                             ld	    (varAxis1),hl
  78++D8DC 21 2D C0                             ld	    hl,UBnkrotmatSidevZ; UBnkrotmatNosevY
  79++D8DF 22 41 7E                             ld	    (varAxis2),hl
  80++D8E2 CD E6 D8                             call    MVS5RotateAxis
  81++D8E5 C9                                   ret
  82++D8E6
  83++D8E6
  84++D8E6
  85++D8E6              ; Roate around axis
  86++D8E6              ; varAxis1 and varAxis2 point to the address of the axis to rotate
  87++D8E6              ; so the axis x1 points to roofv  x , y or z
  88++D8E6              ;             x2           nosev or sidev  x, y or z
  89++D8E6              ;   Axis1 = Axis1 * (1 - 1/512)  + Axis2 / 16
  90++D8E6              ;   Axis2 = Axis2 * (1 - 1/512)  - Axis1 / 16
  91++D8E6              ; var RAT2 gives direction
  92++D8E6              ; for pitch x we come in with Axis1 = roofv_x and Axis2 = nosev_x
  93++D8E6              ;-Set up S R -----------------------------------------
  94++D8E6              ; optimised we don't deal with sign here just the value of roof axis / 512
  95++D8E6 2A 3F 7E     MVS5RotateAxis:         ld      hl,(varAxis1)   ; work on roofv axis to get (1- 1/152) * roofv axis
  96++D8E9 5E                                   ld      e,(hl)
  97++D8EA 23                                   inc     hl
  98++D8EB 56                                   ld      d,(hl)          ; de = Axis1 (roofv x for pitch x)
  99++D8EC EB                                   ex      de,hl           ; hl = Axis1 (roofv x for pitch x)
 100++D8ED 7C                                   ld      a,h
 101++D8EE E6 80                                and     SignOnly8Bit
 102++D8F0 FD 67                                ld      iyh,a           ; iyh = sign Axis1
 103++D8F2 7C                                   ld      a,h
 104++D8F3 E6 7F                                and     SignMask8Bit    ; a = Axis1 (roof hi axis  unsigned)
 105++D8F5 CB 3F                                srl     a               ; a = Axis1/2
 106++D8F7 5F                                   ld      e,a             ;
 107++D8F8 FD 7C                                ld      a,iyh           ; A = Axis 1 sign
 108++D8FA 57                                   ld      d,a             ; de = signed Axis1 / 512
 109++D8FB B7                                   or      a               ; clear carry
 110++D8FC CD BE 8F                             call    subHLDES15      ; hl = roof axis - (roof axis /512) which in effect is roof * (1-1/512)
 111++D8FF              ;-Push to stack roof axis - (roofaxis/152)  ----------------------------------------------------------------------------------
 112++D8FF E5                                   push    hl              ; save hl on stack PUSH ID 1 (roof axis - roofv aixs /512)
 113++D900 7D                                   ld      a,l
 114++D901 32 72 7F                             ld      (varR),a
 115++D904 7C                                   ld      a,h
 116++D905 32 73 7F                             ld      (varS),a        ;  RS now equals (1- 1/152) * roofv axis or (roof axis - roofv aixs /512)
 117++D908              ;-calculate roofv latter half of calc
 118++D908 2A 41 7E                             ld      hl,(varAxis2)   ; now work on nosev axis to get nosev axis / 16
 119++D90B 5E                                   ld      e,(hl)
 120++D90C 23                                   inc     hl
 121++D90D 56                                   ld      d,(hl)          ; de = value of roof axis
 122++D90E 7A                                   ld      a,d
 123++D90F E6 80                                and     SignOnly8Bit
 124++D911 FD 67                                ld      iyh,a           ; save sign
 125++D913 7A                                   ld      a,d
 126++D914 E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
 127++D916 57                                   ld      d,a             ; de = abs (nosev)
 128++D917                                      ShiftDERight1
 128++D917 CB 3A       >			   srl d
 128++D919 CB 1B       >			   rr  e
 129++D91B                                      ShiftDERight1
 129++D91B CB 3A       >			   srl d
 129++D91D CB 1B       >			   rr  e
 130++D91F                                      ShiftDERight1
 130++D91F CB 3A       >			   srl d
 130++D921 CB 1B       >			   rr  e
 131++D923                                      ShiftDERight1           ; de = nosev /16 unsigned
 131++D923 CB 3A       >			   srl d
 131++D925 CB 1B       >			   rr  e
 132++D927 3A 50 C0                             ld      a,(univRAT2)     ; need to consider direction, so by defautl we use rat2, but flip via sign bit
 133++D92A FD AC                                xor     iyh             ; get the sign back we saveded from DE in so de = nosev axis / 16 signed
 134++D92C E6 80                                and     SignOnly8Bit
 135++D92E B2                                   or      d
 136++D92F 57                                   ld      d,a             ; de = nosev /16 signed and ready as if we were doing a + or - based on RAT2
 137++D930              ;;; ld      a,e
 138++D930              ;;;     or      iyh
 139++D930              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 140++D930              ;-now AP = nosev /16  --------------------------------------------------------------------------------------------------------
 141++D930 E1                                   pop     hl              ; get back RS POP ID 1
 142++D931                  ;ex     de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 143++D931              ;-now DE = (roofaxis/512) hl - abs(nosevaxis) --------------------------------------------------------------------------------
 144++D931                                      MMUSelectMathsBankedFns
 144++D931 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 145++D935 CD 52 00                             call    ADDHLDESignedV4 ; do add using hl and de
 146++D938 E5                                   push    hl              ; we use stack to represent var K here now varK = Nosev axis /16 + (1 - 1/512) * roofv axis PUSH ID 2
 147++D939              ;-push to stack nosev axis + roofvaxis /512  which is what roofv axis will be ------------------------------------------------
 148++D939              ;-- Set up SR = 1 - 1/512 * nosev-----------------------
 149++D939 2A 41 7E                             ld      hl,(varAxis2)   ; work on nosev again to get nosev - novesv / 512
 150++D93C 5E                                   ld      e,(hl)
 151++D93D 23                                   inc     hl
 152++D93E 56                                   ld      d,(hl)
 153++D93F EB                                   ex      de,hl
 154++D940 7C                                   ld      a,h
 155++D941 E6 80                                and     $80
 156++D943 FD 67                                ld      iyh,a
 157++D945 7C                                   ld      a,h
 158++D946 E6 7F                                and     SignMask8Bit    ; a = roof hi axis  unsigned
 159++D948 CB 3F                                srl     a               ; now A = unsigned 15 bit nosev axis hi / 2 (or in effect nosev / 512
 160++D94A 5F                                   ld      e,a
 161++D94B FD 7C                                ld      a,iyh
 162++D94D 57                                   ld      d,a
 163++D94E B7                                   or      a               ; clear carry
 164++D94F CD BE 8F                             call    subHLDES15
 165++D952              ;   sbc     hl,de           ; hl = nosev - novesv / 512
 166++D952 E5                                   push    hl              ; save hl on stack  PUSH ID 3
 167++D953 7D                                   ld      a,l
 168++D954 32 69 7E                             ld      (varP),a        ; p = low of resuilt
 169++D957 7C                                   ld      a,h
 170++D958 E6 7F                                and     SignMask8Bit    ; a = roof hi axis  unsigned
 171++D95A 32 8D 7F                             ld      (varT),a        ; t = high of result
 172++D95D              ;-- Set up TQ
 173++D95D 2A 3F 7E                             ld      hl,(varAxis1)   ; now work on roofv axis / 16
 174++D960              ;   ld      hl,(varAxis2)   ; work on nosev again
 175++D960 5E                                   ld      e,(hl)
 176++D961 23                                   inc     hl
 177++D962 56                                   ld      d,(hl)
 178++D963 7A                                   ld      a,d
 179++D964 E6 80                                and     $80
 180++D966 FD 67                                ld      iyh,a           ; save sign
 181++D968 7A                                   ld      a,d
 182++D969 E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
 183++D96B 57                                   ld      d,a             ; de = abs (nosev)
 184++D96C                                      ShiftDERight1
 184++D96C CB 3A       >			   srl d
 184++D96E CB 1B       >			   rr  e
 185++D970                                      ShiftDERight1
 185++D970 CB 3A       >			   srl d
 185++D972 CB 1B       >			   rr  e
 186++D974                                      ShiftDERight1
 186++D974 CB 3A       >			   srl d
 186++D976 CB 1B       >			   rr  e
 187++D978                                      ShiftDERight1           ; de = nosev /16 unsigned
 187++D978 CB 3A       >			   srl d
 187++D97A CB 1B       >			   rr  e
 188++D97C 3A 50 C0                             ld      a,(univRAT2)
 189++D97F FD AC                                xor     iyh             ; get the sign back in so de = nosev axis / 16 signed
 190++D981 E6 80                                and     $80
 191++D983 B2                                   or      d
 192++D984 57                                   ld      d,a
 193++D985              ;;; ld      a,e
 194++D985              ;;;     or      iyh
 195++D985              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 196++D985 E1                                   pop     hl              ; get back RS   POP ID 3
 197++D986              ;   ex      de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 198++D986 CD BE 8F                             call    subHLDES15 ; do add using hl and de
 199++D989              ;-- Update nosev ---------------------------------------
 200++D989 EB                                   ex      de,hl           ; save hl to de
 201++D98A 2A 41 7E                             ld      hl,(varAxis2)
 202++D98D 73                                   ld      (hl),e
 203++D98E 23                                   inc     hl
 204++D98F 72                                   ld      (hl),d          ; copy result into nosev
 205++D990              ;-- Update roofv ---------------------------------------
 206++D990 D1                                   pop     de              ; get calc saved on stack POP ID 2
 207++D991 2A 3F 7E                             ld      hl,(varAxis1)
 208++D994 73                                   ld      (hl),e
 209++D995 23                                   inc     hl
 210++D996 72                                   ld      (hl),d          ; copy result into nosev
 211++D997 C9                                   ret
 212++D998
 213++D998
# file closed: ././Universe/Ships/ApplyShipRollAndPitch.asm
1298+ D998                          INCLUDE "./Universe/Ships/ApplyShipSpeed.asm"
# file opened: ././Universe/Ships/ApplyShipSpeed.asm
   1++D998
   2++D998
   3++D998              ;AddSpeedToVert:         MACRO   vertex
   4++D998              ;                        ld      hl,(vertex)
   5++D998              ;                        ld      a,(vertex+2)
   6++D998              ;                        ld      b,a
   7++D998              ;                        call    AHLEquBHLaddCDE
   8++D998              ;                        ld      (vertex),hl
   9++D998              ;                        ld      (vertex+2),a
  10++D998              ;                        ENDM
  11++D998
  12++D998
  13++D998              ; ---------------------------------------------------------------------------------------------------------------------------------
  14++D998 3A 46 C0     ApplyShipSpeed:         ld      a,(UBnkSpeed)                   ; get speed * 4
  15++D99B FE 00                                cp      0
  16++D99D C8                                   ret     z
  17++D99E CB 27                                sla     a
  18++D9A0 CB 27                                sla     a
  19++D9A2 FD 6F                                ld      iyl,a                           ; save pre calculated speed
  20++D9A4              .ApplyToX:              SpeedMulAxis    a, UBnkrotmatNosevX     ; e =  ABS (nosev x hi) c = sign
  20++D9A4 5F          >                        ld      e,a
  20++D9A5 2A 35 C0    >                        ld      hl,(UBnkrotmatNosevX)
  20++D9A8 7C          >                        ld      a,h
  20++D9A9             >                        ClearSignBitA
  20++D9A9 E6 7F       >                        and     SignMask8Bit
  20++D9AB 57          >                        ld      d,a
  20++D9AC ED 30       >                        mul     de
  20++D9AE 7C          >                        ld      a,h
  20++D9AF             >                        SignBitOnlyA
  20++D9AF E6 80       >                        and     SignOnly8Bit
  20++D9B1 47          >                        ld      b,a;ld      c,a
  20++D9B2 62          >                        ld      h,d;ld      e,d
  20++D9B3 0E 00       >                        ld      c,0;ld      d,0
  21++D9B5              .AddSpeedToX:           AddSpeedToVert UBnkxlo
  21++D9B5 ED 5B 21 C0 >                        ld      de,(UBnkxlo+1)
  21++D9B9 3A 20 C0    >                        ld      a,(UBnkxlo)
  21++D9BC 6F          >                        ld      l,a
  21++D9BD CD AF 00    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  21++D9C0 7D          >                        ld      a,l
  21++D9C1 32 20 C0    >                        ld      (UBnkxlo),a
  21++D9C4 ED 53 21 C0 >                        ld      (UBnkxlo+1),de
  22++D9C8              .ApplyToY:              SpeedMulAxis    iyl, UBnkrotmatNosevY
  22++D9C8 FD 5D       >                        ld      e,iyl
  22++D9CA 2A 37 C0    >                        ld      hl,(UBnkrotmatNosevY)
  22++D9CD 7C          >                        ld      a,h
  22++D9CE             >                        ClearSignBitA
  22++D9CE E6 7F       >                        and     SignMask8Bit
  22++D9D0 57          >                        ld      d,a
  22++D9D1 ED 30       >                        mul     de
  22++D9D3 7C          >                        ld      a,h
  22++D9D4             >                        SignBitOnlyA
  22++D9D4 E6 80       >                        and     SignOnly8Bit
  22++D9D6 47          >                        ld      b,a;ld      c,a
  22++D9D7 62          >                        ld      h,d;ld      e,d
  22++D9D8 0E 00       >                        ld      c,0;ld      d,0
  23++D9DA              .AddSpeedToY:           AddSpeedToVert UBnkylo
  23++D9DA ED 5B 24 C0 >                        ld      de,(UBnkylo+1)
  23++D9DE 3A 23 C0    >                        ld      a,(UBnkylo)
  23++D9E1 6F          >                        ld      l,a
  23++D9E2 CD AF 00    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  23++D9E5 7D          >                        ld      a,l
  23++D9E6 32 23 C0    >                        ld      (UBnkylo),a
  23++D9E9 ED 53 24 C0 >                        ld      (UBnkylo+1),de
  24++D9ED              .ApplyToZ:              SpeedMulAxis    iyl, UBnkrotmatNosevZ
  24++D9ED FD 5D       >                        ld      e,iyl
  24++D9EF 2A 39 C0    >                        ld      hl,(UBnkrotmatNosevZ)
  24++D9F2 7C          >                        ld      a,h
  24++D9F3             >                        ClearSignBitA
  24++D9F3 E6 7F       >                        and     SignMask8Bit
  24++D9F5 57          >                        ld      d,a
  24++D9F6 ED 30       >                        mul     de
  24++D9F8 7C          >                        ld      a,h
  24++D9F9             >                        SignBitOnlyA
  24++D9F9 E6 80       >                        and     SignOnly8Bit
  24++D9FB 47          >                        ld      b,a;ld      c,a
  24++D9FC 62          >                        ld      h,d;ld      e,d
  24++D9FD 0E 00       >                        ld      c,0;ld      d,0
  25++D9FF              .AddSpeedToZ:           AddSpeedToVert UBnkzlo
  25++D9FF ED 5B 27 C0 >                        ld      de,(UBnkzlo+1)
  25++DA03 3A 26 C0    >                        ld      a,(UBnkzlo)
  25++DA06 6F          >                        ld      l,a
  25++DA07 CD AF 00    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  25++DA0A 7D          >                        ld      a,l
  25++DA0B 32 26 C0    >                        ld      (UBnkzlo),a
  25++DA0E ED 53 27 C0 >                        ld      (UBnkzlo+1),de
  26++DA12 C9                                   ret
  27++DA13
# file closed: ././Universe/Ships/ApplyShipSpeed.asm
1299+ DA13                          INCLUDE "./ModelRender/DrawLines.asm"
# file opened: ././ModelRender/DrawLines.asm
   1++DA13
   2++DA13
   3++DA13              ; ---------------------------------------------------------------------------------------------------------------------------------
   4++DA13 00           DrawLinesCounter		db	0
   5++DA14              ; Initial tests look OK
   6++DA14              LL155:;
   7++DA14              ClearLine:                                  ; CLEAR LINEstr visited by EE31 when XX3 heap ready to draw/erase lines in XX19 heap.
   8++DA14                    ;break                                                                             ; ObjectInFront:
   9++DA14 3E 65        DrawLines:              ld	a,$65 ; DEBUG
  10++DA16 FD 6F                                ld    iyl,a							; set ixl to colour (assuming we come in here with a = colour to draw)
  11++DA18 3A EB C3                             ld	a,(UBnkLineArrayLen)			; get number of lines
  12++DA1B                                      ReturnIfAIsZero   						; No lines then bail out.
  12++DA1B A7          >                        and     a
  12++DA1C C8          >                        ret     z
  13++DA1D FD 67                                ld	iyh,a			                ; number of lines still to draw
  14++DA1F 21 31 C2                             ld	hl,UBnkLineArray
  15++DA22 4E           .DrawLinesLoop:         ld    c,(hl)                          ; (XX19),Y c = varX1
  16++DA23 23                                   inc   hl
  17++DA24 46                                   ld    b,(hl)                          ; bc = point1 Y,X
  18++DA25 23                                   inc   hl
  19++DA26 5E                                   ld    e,(hl)                          ; c = varX1
  20++DA27 23                                   inc   hl
  21++DA28 56                                   ld    d,(hl)                          ; de = point2 Y,X
  22++DA29 23                                   inc   hl
  23++DA2A E5 FD E5                             push  hl,,iy
  24++DA2D 60                                   ld    h,b
  25++DA2E 69                                   ld    l,c
  26++DA2F                ;  call    l2_draw_any_line                ; call version of LOIN that used BCDE
  27++DA2F FD 7D                                ld	a,iyl							; get colour back before calling line draw
  28++DA31                                      MMUSelectLayer2
  28++DA31 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  29++DA35 CD 12 FF                             call  LineHLtoDE
  30++DA38 FD E1 E1                             pop   hl,,iy
  31++DA3B FD 25                                dec   iyh
  32++DA3D 20 E3                                jr	nz, .DrawLinesLoop
  33++DA3F C9                                   ret                                     ; --- Wireframe end  \ LL118-1
  34++DA40
  35++DA40
  36++DA40 3E 65        DrawLinesLateClipping:  ld	a,$65 ; DEBUG
  37++DA42 FD 6F                                ld    iyl,a					      ; set ixl to colour (assuming we come in here with a = colour to draw)
  38++DA44 3A EB C3                             ld	a,(UBnkLineArrayLen)			; get number of lines
  39++DA47                                      ReturnIfAIsZero   				; No lines then bail out.
  39++DA47 A7          >                        and     a
  39++DA48 C8          >                        ret     z
  40++DA49 FD 67                                ld	iyh,a			                  ; number of lines still to draw
  41++DA4B 21 31 C2                             ld	hl,UBnkLineArray
  42++DA4E                                      MMUSelectLayer2
  42++DA4E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  43++DA52 3E BF                                ld    a,$BF
  44++DA54 32 B5 E2                             ld    (line_gfx_colour),a
  45++DA57 11 D8 F5     LateDrawLinesLoop:      ld    de,x1
  46++DA5A                                      FourLDIInstrunctions
  46++DA5A ED A0       >                        ldi
  46++DA5C ED A0       >                        ldi
  46++DA5E ED A0       >                        ldi
  46++DA60 ED A0       >                        ldi
  47++DA62                                      FourLDIInstrunctions
  47++DA62 ED A0       >                        ldi
  47++DA64 ED A0       >                        ldi
  47++DA66 ED A0       >                        ldi
  47++DA68 ED A0       >                        ldi
  48++DA6A E5 FD E5                             push  hl,,iy
  49++DA6D                                      //call  l2_draw_clipped_line
  50++DA6D                                      //call  l2_draw_elite_line
  51++DA6D CD 6B FC                             call    l2_draw_6502_line
  52++DA70 DA 96 DA                             jp      c,LateNoLineToDraw
  53++DA73
  54++DA73 E5 C5 D5 FD  PreLate:                push    hl,,bc,,de,,iy
  54++DA77 E5
  55++DA78 3A D8 F5                             ld      a,(x1)
  56++DA7B 4F                                   ld      c,a
  57++DA7C 3A DA F5                             ld      a,(y1)
  58++DA7F 47                                   ld      b,a
  59++DA80 3A DC F5                             ld      a,(x2)
  60++DA83 5F                                   ld      e,a
  61++DA84 3A DE F5                             ld      a,(y2)
  62++DA87 57                                   ld      d,a
  63++DA88                                      ; bc = y0,x0 de=y1,x1,a=color)
  64++DA88 3E D5                                ld	    a, $D5 ; colour
  65++DA8A                                      MMUSelectLayer2
  65++DA8A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  66++DA8E CD AB FC     LateLine:               call    l2_draw_elite_line; l2_draw_diagonal
  67++DA91 FD E1 D1 C1                          pop     hl,,bc,,de,,iy
  67++DA95 E1
  68++DA96
  69++DA96
  70++DA96 FD E1 E1     LateNoLineToDraw:       pop   hl,,iy
  71++DA99 FD 25                                dec   iyh
  72++DA9B 20 BA                                jr	nz, LateDrawLinesLoop
  73++DA9D C9                                   ret                                     ; --- Wireframe end  \ LL118-1
# file closed: ././ModelRender/DrawLines.asm
1300+ DA9E              ; ---------------------------------------------------------------------------------------------------------------------------------
1301+ DA9E
1302+ DA9E              ; DIot seem to lawyas have Y = 0???
1303+ DA9E              ProcessDot:            ; break
1304+ DA9E CD 9B CC                             call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
1305+ DAA1 CD F2 7A                             call    ScaleXX16Matrix197               ;#02; Normalise XX16
1306+ DAA4 CD 5F CF                             call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
1307+ DAA7 CD 2C CE                             call    InverseXX16                      ;#11; Invert rotation matrix
1308+ DAAA 21 00 00                             ld      hl,0
1309+ DAAD 22 A7 C0                             ld      (UBnkXScaled),hl
1310+ DAB0 22 A9 C0                             ld      (UBnkYScaled),hl
1311+ DAB3 22 AB C0                             ld      (UBnkZScaled),hl
1312+ DAB6 AF                                   xor     a
1313+ DAB7 CD 54 7A                             call    XX12EquNodeDotOrientation
1314+ DABA CD C4 CC                             call    TransposeXX12ByShipToXX15
1315+ DABD CD 4D CD                             call    ScaleNodeTo8Bit                     ; scale to 8 bit values, why don't we hold the magnitude here?x
1316+ DAC0 FD 21 F1 C0                          ld      iy,UBnkNodeArray
1317+ DAC4 CD 69 D5                             call    ProjectNodeToEye
1318+ DAC7 C9                                   ret
1319+ DAC8
1320+ DAC8              ; .....................................................
1321+ DAC8              ; Plot Node points as part of debugging
1322+ DAC8 3A 00 C4     PlotAllNodes:           ld      a,(VertexCtX6Addr)               ; get Hull byte#9 = number of vertices *6                                   ;;;
1323+ DACB 4F           .GetActualVertexCount:  ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1324+ DACC 4F                                   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1325+ DACD 16 06                                ld      d,6
1326+ DACF CD 10 96                             call    asm_div8                         ; asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
1327+ DAD2 41                                   ld      b,c                              ; c = number of vertices
1328+ DAD3 FD 21 F1 C0                          ld      iy,UBnkNodeArray
1329+ DAD7 FD 5E 00     .PlotLoop:              ld      e,(iy)
1330+ DADA FD 56 01                             ld      d,(iy+1)
1331+ DADD FD 6E 02                             ld      l,(iy+2)
1332+ DAE0 FD 66 03                             ld      h,(iy+3)
1333+ DAE3 C5 FD E5                             push    bc,,iy
1334+ DAE6 CD F7 DA                             call    PlotAtDEHL
1335+ DAE9 FD E1 C1                             pop     bc,,iy
1336+ DAEC FD 23                                inc     iy
1337+ DAEE FD 23                                inc     iy
1338+ DAF0 FD 23                                inc     iy
1339+ DAF2 FD 23                                inc     iy
1340+ DAF4 10 E1                                djnz    .PlotLoop
1341+ DAF6 C9                                   ret
1342+ DAF7
1343+ DAF7 7A           PlotAtDEHL:             ld      a,d
1344+ DAF8 A7                                   and     a
1345+ DAF9 C0                                   ret     nz
1346+ DAFA 7C                                   ld      a,h
1347+ DAFB A7                                   and     a
1348+ DAFC C0                                   ret     nz
1349+ DAFD 7D                                   ld      a,l
1350+ DAFE E6 80                                and     $80
1351+ DB00 C0                                   ret     nz
1352+ DB01                                      MMUSelectLayer2
1352+ DB01 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1353+ DB05 45                                   ld      b,l
1354+ DB06 4B                                   ld      c,e
1355+ DB07 3E 88                                ld      a,$88
1356+ DB09 CD B6 E2                             call    l2_plot_pixel
1357+ DB0C C9                                   ret
1358+ DB0D
1359+ DB0D
1360+ DB0D              ; .....................................................
1361+ DB0D              ; Process Nodes does the following:
1362+ DB0D              ; for each node:
1363+ DB0D              ;     see if node >
1364+ DB0D 00           PNXX20DIV6          DB      0
1365+ DB0E 00 00        PNVERTEXPTR         DW      0   ; DEBUG WILL USE LATER
1366+ DB10 00 00        PNNODEPRT           DW      0   ; DEBUG WILL USE LATER
1367+ DB12 00           PNLASTNORM          DB      0
1368+ DB13              ProcessNodes:           ZeroA
1368+ DB13 AF          >                        xor a
1369+ DB14 32 EB C3                             ld      (UBnkLineArrayLen),a
1370+ DB17 CD 9B CC                             call    CopyRotmatToTransMat ; CopyRotToTransMacro                      ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
1371+ DB1A CD F2 7A                             call    ScaleXX16Matrix197               ;#02; Normalise XX16
1372+ DB1D CD 5F CF                             call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
1373+ DB20 CD 2C CE                             call    InverseXX16                      ;#11; Invert rotation matrix
1374+ DB23 21 12 C4                             ld      hl,UBnkHullVerticies
1375+ DB26 3A 00 C4                             ld      a,(VertexCtX6Addr)               ; get Hull byte#9 = number of vertices *6                                   ;;;
1376+ DB29 4F           GetActualVertexCount:   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1377+ DB2A 4F                                   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1378+ DB2B 16 06                                ld      d,6
1379+ DB2D CD 10 96                             call    asm_div8                         ; asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
1380+ DB30 41                                   ld      b,c                              ; c = number of vertices
1381+ DB31 FD 21 F1 C0                          ld      iy,UBnkNodeArray
1382+ DB35              LL48:
1383+ DB35 C5           PointLoop:              push    bc                                  ; save counters
1384+ DB36 E5                                   push    hl                                  ; save verticies list pointer
1385+ DB37 FD E5                                push    iy                                  ; save Screen plot array pointer
1386+ DB39 78                                   ld      a,b
1387+ DB3A                                      ;break
1388+ DB3A CD EA D4                             call    CopyNodeToXX15                      ; copy verices at hl to xx15
1389+ DB3D 3A A8 C0                             ld      a,(UBnkXScaledSign)
1390+ DB40 CD 54 7A                             call    XX12EquNodeDotOrientation
1391+ DB43 CD C4 CC                             call    TransposeXX12ByShipToXX15
1392+ DB46 CD 4D CD                             call    ScaleNodeTo8Bit                     ; scale to 8 bit values, why don't we hold the magnitude here?x
1393+ DB49 FD E1                                pop     iy                                  ; get back screen plot array pointer
1394+ DB4B CD 69 D5                             call    ProjectNodeToEye                     ; set up screen plot list entry
1395+ DB4E                 ; ld      hl,UBnkLineArrayLen
1396+ DB4E                ;  inc     (hl)                                ; another node done
1397+ DB4E FD E5        ReadyForNextPoint:      push    iy                                  ; copy screen plot pointer to hl
1398+ DB50 E1                                   pop     hl
1399+ DB51 3E 04                                ld      a,4
1400+ DB53 ED 31                                add     hl,a
1401+ DB55 E5                                   push    hl                                  ; write it back at iy + 4
1402+ DB56 FD E1                                pop     iy                                  ; and put it in iy again
1403+ DB58 E1                                   pop     hl                                  ; get hl back as vertex list
1404+ DB59 3E 06                                ld      a,6
1405+ DB5B ED 31                                add     hl,a                                ; and move to next vertex
1406+ DB5D C1                                   pop     bc                                  ; get counter back
1407+ DB5E 10 D5                                djnz    PointLoop
1408+ DB60              ; ......................................................
1409+ DB60                                      ClearCarryFlag
1409+ DB60 B7          >                        or a
1410+ DB61 C9                                   ret
1411+ DB62              ; ...........................................................
1412+ DB62 CD 6E D1     ProcessShip:            call    CheckVisible                ; checks for z -ve and outside view frustrum, sets up flags for next bit
1413+ DB65 3A 55 C0     .IsItADot:              ld      a,(UBnkaiatkecm)
1414+ DB68 E6 68                                and     ShipIsVisible | ShipIsDot | ShipExploding  ; first off set if we can draw or need to update explosion
1415+ DB6A C8                                   ret     z                           ; if none of these flags are set we can fast exit
1416+ DB6B                                      JumpOnABitSet ShipExplodingBitNbr, .ExplodingCloud; we always do the cloud processing even if invisible
1416+ DB6B CB 6F       >                        bit 	ShipExplodingBitNbr, a
1416+ DB6D C2 AE DB    >                        jp      nz,.ExplodingCloud
1417+ DB70              ;............................................................
1418+ DB70              .DetermineDrawType:     ReturnOnBitClear    a, ShipIsVisibleBitNbr          ; if its not visible exit early
1418+ DB70 CB 77       >                        bit 	ShipIsVisibleBitNbr,a
1418+ DB72 C8          >                        ret		z
1419+ DB73                                      JumpOnABitClear ShipIsDotBitNbr, .CarryOnWithDraw   ; if not dot do normal draw
1419+ DB73 CB 5F       >                        bit 	ShipIsDotBitNbr, a
1419+ DB75 CA 9C DB    >                        jp      z,.CarryOnWithDraw
1420+ DB78              ;............................................................
1421+ DB78 CD 9E DA     .itsJustADot:           call    ProcessDot
1422+ DB7B                                      SetMemBitN  UBnkaiatkecm , ShipIsDotBitNbr ; set is a dot flag
1422+ DB7B 21 55 C0    >                        ld      hl,UBnkaiatkecm
1422+ DB7E CB DE       >                        set     ShipIsDotBitNbr,(hl)
1423+ DB80 ED 4B F1 C0                          ld      bc,(UBnkNodeArray)          ; if its at dot range get X
1424+ DB84 ED 5B F3 C0                          ld      de,(UBnkNodeArray+2)        ; and Y
1425+ DB88 78                                   ld      a,b                         ; if high byte components are not 0 then off screen
1426+ DB89 B2                                   or      d                           ;
1427+ DB8A C0                                   ret     nz                          ;
1428+ DB8B 7B                                   ld      a,e
1429+ DB8C E6 80                                and     %10000000                   ; check to see if Y > 128
1430+ DB8E C0                                   ret     nz
1431+ DB8F 43                                   ld      b,e                         ; now b = y and c = x
1432+ DB90 3E FF                                ld      a,L2ColourWHITE_1           ; just draw a pixel
1433+ DB92 3E E0                                ld      a,224
1434+ DB94                                      MMUSelectLayer2                     ; then go to update radar
1434+ DB94 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1435+ DB98 CD F8 E2                             call    ShipPixel                   ;
1436+ DB9B C9                                   ret
1437+ DB9C              ;............................................................
1438+ DB9C CD 13 DB     .CarryOnWithDraw:       call    ProcessNodes                ; process notes is the poor performer or check distnace is not culling
1439+ DB9F                                     ; break
1440+ DB9F                                  IFDEF PLOTPOINTSONLY
1441+ DB9F ~                                    ld      a,$F6
1442+ DB9F ~                                    ld      (line_gfx_colour),a
1443+ DB9F ~                                    call    PlotAllNodes
1444+ DB9F                                  ELSE
1445+ DB9F 3E E3                                ld      a,$E3
1446+ DBA1 32 B5 E2                             ld      (line_gfx_colour),a
1447+ DBA4 CD B5 D1                             call    CullV2
1448+ DBA7 CD 56 DD                             call    PrepLines                       ; With late clipping this just moves the data to the line array which is now x2 size
1449+ DBAA CD 40 DA                             call    DrawLinesLateClipping
1450+ DBAD                                  ENDIF
1451+ DBAD                                  IFDEF OVERLAYNODES
1452+ DBAD ~                                    ld      a,$CF
1453+ DBAD ~                                    ld      (line_gfx_colour),a
1454+ DBAD ~                                    call    PlotAllNodes
1455+ DBAD                                  ENDIF
1456+ DBAD                                  IFDEF FLIPBUFFERSTEST
1457+ DBAD ~                                    DISPLAY "Univ_ship_data flip buffer test Enabled"
1458+ DBAD ~                                    call   l2_flip_buffers
1459+ DBAD ~                                    call   l2_flip_buffers
1460+ DBAD                                  ELSE
1461+ DBAD                                      DISPLAY "Univ_ship_data flip buffer test Disabled"
1462+ DBAD                                  ENDIF
1463+ DBAD C9                                   ret
1464+ DBAE              ;............................................................
1465+ DBAE CD 13 DB     .ExplodingCloud:        call    ProcessNodes
1466+ DBB1                                      ClearMemBitN  UBnkaiatkecm, ShipKilledBitNbr ; acknowledge ship exploding
1466+ DBB1 21 55 C0    >                        ld      hl,UBnkaiatkecm
1466+ DBB4 CB A6       >                        res     ShipKilledBitNbr,(hl)
1467+ DBB6 3A 60 C0     .UpdateCloudCounter:    ld      a,(UBnkCloudCounter)        ; counter += 4 until > 255
1468+ DBB9 C6 04                                add     4                           ; we do this early as we now have logic for
1469+ DBBB DA 7D DC                             jp      c,.FinishedExplosion        ; display or not later
1470+ DBBE 32 60 C0                             ld      (UBnkCloudCounter),a        ; .
1471+ DBC1              .SkipHiddenShip:        ReturnOnMemBitClear  UBnkaiatkecm , ShipIsVisibleBitNbr
1471+ DBC1 3A 55 C0    >                        ld     a,(UBnkaiatkecm)
1471+ DBC4 CB 77       >                        bit 	ShipIsVisibleBitNbr,a
1471+ DBC6 C8          >                        ret		z
1472+ DBC7              .IsShipADot:            JumpOnABitSet ShipIsDotBitNbr, .itsJustADot ; if its dot distance then explosion is a dot, TODO later we will do as a coloured dot
1472+ DBC7 CB 5F       >                        bit 	ShipIsDotBitNbr, a
1472+ DBC9 C2 78 DB    >                        jp      nz,.itsJustADot
1473+ DBCC 2A 26 C0     .CalculateZ:            ld      hl,(UBnkzlo)                ; al = hl = z
1474+ DBCF 7C                                   ld      a,h                         ; .
1475+ DBD0                                      JumpIfALTNusng 32,.CalcFromZ        ; if its >= 32 then set a to FE and we are done
1475+ DBD0 FE 20       >                        cp      32
1475+ DBD2 DA DA DB    >                        jp		c, .CalcFromZ
1476+ DBD5 26 FE                                ld      h,$FE                       ; .
1477+ DBD7 C3 E5 DB                             jp      .DoneZDist                  ; .
1478+ DBDA              .CalcFromZ:             ShiftHLLeft1                        ; else
1478+ DBDA CB 25       >			   sla l
1478+ DBDC CB 14       >			   rl  h
1479+ DBDE                                      ShiftHLLeft1                        ; hl = hl * 2
1479+ DBDE CB 25       >			   sla l
1479+ DBE0 CB 14       >			   rl  h
1480+ DBE2                                      SetCarryFlag                        ; h = h * 3 rolling in lower bit
1480+ DBE2 37          >                        scf
1481+ DBE3 CB 14                                rl  h                               ;
1482+ DBE5 06 00        .DoneZDist:             ld      b,0                         ; bc = cloud z distance calculateed
1483+ DBE7 4C                                   ld      c,h                         ; .
1484+ DBE8 3A 60 C0     .CalcCloudRadius:       ld      a,(UBnkCloudCounter)        ; de = cloud counter * 256
1485+ DBEB                      IFDEF LOGMATHS
1486+ DBEB ~                                    MMUSelectMathsTables
1487+ DBEB ~                                    ld      b,h
1488+ DBEB ~                                    call    AEquAmul256DivBLog
1489+ DBEB ~                                    ld      d,a
1490+ DBEB ~                                    MMUSelectROM0
1491+ DBEB                      ELSE
1492+ DBEB 57                                   ld      d,a                         ;
1493+ DBEC 1E 00                                ld      e,0                         ;
1494+ DBEE CD 54 95                             call    DEequDEDivBC                ; de = cloud counter * 256 / z distance
1495+ DBF1 7A                                   ld      a,d                         ; if radius >= 28
1496+ DBF2                      ENDIF
1497+ DBF2                                      JumpIfALTNusng  28,.SetCloudRadius  ; then set raidus in d to $FE
1497+ DBF2 FE 1C       >                        cp      28
1497+ DBF4 DA FC DB    >                        jp		c, .SetCloudRadius
1498+ DBF7 16 FE        .MaxCloudRadius:        ld      d,$FE                       ;
1499+ DBF9 C3 08 DC                             jp      .SizedUpCloud               ;
1500+ DBFC              .SetCloudRadius:        ShiftDELeft1                        ; de = 8 * de
1500+ DBFC CB 23       >			   sla e
1500+ DBFE CB 12       >			   rl  d
1501+ DC00                                      ShiftDELeft1                        ; .
1501+ DC00 CB 23       >			   sla e
1501+ DC02 CB 12       >			   rl  d
1502+ DC04                                      ShiftDELeft1                        ; .
1502+ DC04 CB 23       >			   sla e
1502+ DC06 CB 12       >			   rl  d
1503+ DC08 7A           .SizedUpCloud:          ld      a,d                         ; cloudradius = a = d or (cloudcounter * 8 / 256)
1504+ DC09 32 61 C0                             ld      (UBnkCloudRadius),a         ; .
1505+ DC0C DD 67                                ld      ixh,a                       ; ixh = a = calculated cloud radius
1506+ DC0E 3A 60 C0     .CalcSubParticleColour: ld      a,(UBnkCloudCounter)        ; colur fades away
1507+ DC11 ED 23                                swapnib                             ; divive by 16
1508+ DC13 E6 0F                                and     $0F                         ; mask off upper bytes
1509+ DC15 CB 2F                                sra     a                           ; divide by 32
1510+ DC17 21 89 DC                             ld      hl,DebrisColourTable
1511+ DC1A ED 31                                add     hl,a
1512+ DC1C 7E                                   ld      a,(hl)
1513+ DC1D FD 6F                                ld      iyl,a                       ; iyl = pixel colours
1514+ DC1F 3A 60 C0     .CalcSubParticleCount:  ld      a,(UBnkCloudCounter)        ; cloud counter = abs (cloud counter) in effect if > 127 then shrinks it
1515+ DC22                                      ABSa2c                              ; a = abs a
1515+ DC22 CB 7F       >                        bit     7,a
1515+ DC24 CA 29 DC    >                        jp      z,.DoneABSa
1515+ DC27 ED 44       >                        neg
1515+ DC29             >.DoneABSa:
1516+ DC29 CB 2F        .ParticlePositive:      sra a                               ; iyh = (a /8)
1517+ DC2B CB 2F                                sra a                               ; .
1518+ DC2D CB 2F                                sra a                               ; .
1519+ DC2F F6 01                                or  1                               ; bit 0 set so minimum 1
1520+ DC31 DD 6F        .DoneSubParticleCount:  ld      ixl,a                       ; ixl = nbr particles per vertex
1521+ DC33 3A FF C3     .ForEachVertex:         ld      a,(VertexCountAddr)         ; load vertex count into b
1522+ DC36 47                                   ld      b,a                         ; .
1523+ DC37 21 F1 C0                             ld      hl,UBnkNodeArray            ; hl = list of vertices
1524+ DC3A C5 E5        .ExplosionVertLoop:     push    bc,,hl                      ; save vertex counter in b and pointer to verticles in hl
1525+ DC3C DD 68                                    ld      ixl,b                   ; save counter
1526+ DC3E 4E                                       ld      c,(hl)                  ; get vertex into bc and de
1527+ DC3F 23                                       inc     hl                      ; .
1528+ DC40 46                                       ld      b,(hl)                  ; .
1529+ DC41 23                                       inc     hl                      ; .
1530+ DC42 5E                                       ld      e,(hl)                  ; .
1531+ DC43 23                                       inc     hl                      ; .
1532+ DC44 56                                       ld      d,(hl)                  ; now hl is done with and we can use it
1533+ DC45 DD 7D        .LoopSubParticles:          ld      a,ixl                   ; iyh = loop iterator for nbr of particles per vertex
1534+ DC47 FD 67                                    ld      iyh,a                   ;
1535+ DC49                                          ;break
1536+ DC49 D5 C5        .ProcessAParticle:          push    de,,bc                  ; save y then x coordinates
1537+ DC4B EB                                           ex      de,hl               ; hl = de (Y)
1538+ DC4C DD 54                                        ld      d,ixh               ; d = cloud radius
1539+ DC4E CD 91 DC                                     call    HLEquARandCloud     ; vertex = vertex +/- (random * projected cloud side /256)
1540+ DC51 7C                                           ld      a,h                 ; if off screen skip
1541+ DC52                                              JumpIfAIsNotZero  .NextIteration
1541+ DC52 A7          >                        and     a
1541+ DC53 C2 6E DC    >                        jp	    nz,.NextIteration
1542+ DC56 EB                                           ex      de,hl               ; de = result for y which was put into hl
1543+ DC57 E1                                           pop     hl                  ; get x back from bc on stack
1544+ DC58 E5                                           push    hl                  ; put bc (which is now in hl) back on the stack
1545+ DC59 D5                                           push    de                  ; save de
1546+ DC5A DD 54                                        ld      d,ixh               ; d = cloud radius
1547+ DC5C CD 91 DC                                     call    HLEquARandCloud     ; vertex = vertex +/- (random * projected cloud side /256)
1548+ DC5F D1                                           pop     de                  ; get de back doing pop here clears stack up
1549+ DC60 7C                                           ld      a,h                 ; if high byte has a value then off screen
1550+ DC61                                              JumpIfAIsNotZero .NextIteration ;
1550+ DC61 A7          >                        and     a
1550+ DC62 C2 6E DC    >                        jp	    nz,.NextIteration
1551+ DC65 43                                           ld      b,e                 ; bc = y x of pixel from e and c regs
1552+ DC66 4D                                           ld      c,l                 ; iyl already has colour
1553+ DC67                                              MMUSelectLayer2             ; plot it with debris code as this can chop y > 128
1553+ DC67 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1554+ DC6B CD 00 E3                                     call    DebrisPixel         ; .
1555+ DC6E C1 D1        .NextIteration:             pop    de,,bc                   ; ready for next iteration, get back y and x coordinates
1556+ DC70 FD 25                                    dec    iyh                      ; one partcile done
1557+ DC72 20 D5                                    jr      nz,.ProcessAParticle    ; until all done
1558+ DC74 E1 C1        .NextVert:              pop     bc,,hl                      ; recover loop counter and source pointer
1559+ DC76 3E 04                                ld      a,4                         ; move to next vertex group
1560+ DC78 ED 31                                add     hl,a                        ;
1561+ DC7A 10 BE                                djnz    .ExplosionVertLoop          ;
1562+ DC7C C9                                   ret
1563+ DC7D              .FinishedExplosion:     ;break
1564+ DC7D 3A 3F C0                             ld      a,(UBnkSlotNumber)          ; get slot number
1565+ DC80 CD 3B 84                             call    ClearSlotA                  ; gauranted to be in main memory as non bankables
1566+ DC83                                      ClearMemBitN UBnkaiatkecm, ShipExplodingBitNbr
1566+ DC83 21 55 C0    >                        ld      hl,UBnkaiatkecm
1566+ DC86 CB AE       >                        res     ShipExplodingBitNbr,(hl)
1567+ DC88 C9                                   ret
1568+ DC89
1569+ DC89
1570+ DC89 FC D8 B4 90  DebrisColourTable:      DB L2ColourYELLOW_1, L2ColourYELLOW_2, L2ColourYELLOW_3, L2ColourYELLOW_4, L2ColourYELLOW_5, L2ColourYELLOW_6, L2ColourYELLOW_7,L2ColourGREY_4
1570+ DC8D 6C 48 24 25
1571+ DC91                                      ; set flags and signal to remove from slot list
1572+ DC91
1573+ DC91              ; Hl = HlL +/- (Random * projected cloud size)
1574+ DC91              ; In - d = z distance, hl = vert hi lo
1575+ DC91              ; Out hl = adjusted distance
1576+ DC91              ; uses registers hl, de
1577+ DC91                              DISPLAY "TODO: Move to maths bank"
1578+ DC91 E5           HLEquARandCloud:        push    hl                          ; random number geneator upsets hl register
1579+ DC92 CD 0A 85                             call    doRandom                    ; a= random * 2
1580+ DC95 E1                                   pop     hl
1581+ DC96 17                                   rla                                 ;
1582+ DC97 38 0A                                jr      c,.Negative                 ; if buit 7 went into carry
1583+ DC99 5F           .Positive:              ld  e,a
1584+ DC9A ED 30                                mul
1585+ DC9C 5A                                   ld  e,d
1586+ DC9D 16 00                                ld  d,0
1587+ DC9F                                      ClearCarryFlag
1587+ DC9F B7          >                        or a
1588+ DCA0 ED 5A                                adc     hl,de                       ; hl = hl + a
1589+ DCA2 C9                                   ret
1590+ DCA3 5F           .Negative:              ld  e,a
1591+ DCA4 ED 30                                mul
1592+ DCA6 5A                                   ld  e,d
1593+ DCA7 16 00                                ld  d,0
1594+ DCA9                                      ClearCarryFlag
1594+ DCA9 B7          >                        or a
1595+ DCAA ED 52                                sbc     hl,de                       ; hl = hl + a
1596+ DCAC C9                                   ret
1597+ DCAD
1598+ DCAD              GetExperiencePoints:    ; TODO calculate experience points
1599+ DCAD                                      ; TODO mission updates check
1600+ DCAD C9                                   ret
1601+ DCAE
1602+ DCAE              ; ......................................................
1603+ DCAE 3A 0E C4     KillShip:               ld      a,(ShipTypeAddr)            ; we can't destroy stations in a collision
1604+ DCB1 FE 02                                cp      ShipTypeStation             ; for destructable one we will have a special type of ship
1605+ DCB3 C8                                   ret     z
1606+ DCB4 3A 55 C0                             ld      a,(UBnkaiatkecm)            ; remove AI, mark killed, mark exploding
1607+ DCB7 F6 30                                or      ShipExploding | ShipKilled  ; .
1608+ DCB9 E6 7F                                and     ShipAIDisabled              ; .
1609+ DCBB 32 55 C0                             ld      (UBnkaiatkecm),a            ; .
1610+ DCBE                                      SetMemToN   UBnkexplDsp, ShipExplosionDuration ; set debris cloud timer, also usered in main to remove from slots
1610+ DCBE 3E 4B       >                        ld      a,ShipExplosionDuration
1610+ DCC0 32 52 C0    >                        ld      (UBnkexplDsp),a
1611+ DCC3                                      ldWriteZero UBnkEnergy              ; Zero ship energy
1611+ DCC3 AF          >                        xor      a
1611+ DCC4 32 59 C0    >                        ld       (UBnkEnergy),a
1612+ DCC7 32 61 C0                             ld      (UBnkCloudRadius),a
1613+ DCCA 3E 12                                ld      a,18
1614+ DCCC 32 60 C0                             ld      (UBnkCloudCounter),a        ; Zero cloud
1615+ DCCF                                      ; TODO logic to spawn cargo/plates goes here
1616+ DCCF C9                                   ret
1617+ DCD0
1618+ DCD0              ; in a = damage
1619+ DCD0 47           DamageShip:             ld      b,a                         ; b = a = damage comming in
1620+ DCD1 3A 0E C4                             ld      a,(ShipTypeAddr)            ; we can't destroy stations in a collision
1621+ DCD4 FE 02                                cp      ShipTypeStation             ; for destructable one we will have a special type of ship
1622+ DCD6 C8                                   ret     z
1623+ DCD7 3A 59 C0                             ld      a,(UBnkEnergy)              ; get current energy level
1624+ DCDA                                      ClearCarryFlag
1624+ DCDA B7          >                        or a
1625+ DCDB 98                                   sbc     a,b                         ; subtract damage
1626+ DCDC D2 E3 DC     .Overkilled:            jp      nc,.DoneDamage              ; if no carry then its not gone negative
1627+ DCDF CD AE DC                             call    KillShip                    ; else kill it
1628+ DCE2 C9                                   ret
1629+ DCE3 32 59 C0     .DoneDamage:            ld      (UBnkEnergy),a
1630+ DCE6 C9                                   ret
1631+ DCE7              ; need recovery for energy too
1632+ DCE7              ; Shall we have a "jolt ship off course routine for when it gets hit by a blast or collision)
1633+ DCE7
1634+ DCE7              ;-LL49-----------------------------------------------------------------------------------------------------------------------------
1635+ DCE7              ;  Entering Here we have the following:
1636+ DCE7              ;  XX15(1 0) = vertex x-coordinate but sign not populated
1637+ DCE7              ;  XX15(3 2) = vertex y-coordinate but sign not populated
1638+ DCE7              ;  XX15(5 4) = vertex z-coordinate but sign not populated
1639+ DCE7              ;
1640+ DCE7              ;  XX16(  1 0)sidev_x   (3 2)roofv_x   (5 4)nosev_x
1641+ DCE7              ;  XX16(  7 6)sidev_y   (9 8)roofv_y (11 10)nosev_y
1642+ DCE7              ;  XX16(13 12)sidev_z (15 14)roofv_z (17 16)nosev_z
1643+ DCE7              ;--------------------------------------------------------------------------------------------------------
1644+ DCE7              AddLaserBeamLine:
1645+ DCE7              ; this code is a bag of shit and needs re-writing
1646+ DCE7              GetGunVertexNode:
1647+ DCE7 3A FD C3             ld          a,(GunVertexAddr)                   ; Hull byte#6, gun vertex*4 (XX0),Y
1648+ DCEA 21 F1 C0             ld          hl,UBnkNodeArray                    ; list of lines to read
1649+ DCED ED 31                add         hl,a                                ; HL = address of GunVertexOnNodeArray
1650+ DCEF FD 2E 00             ld          iyl,0
1651+ DCF2              MoveX1PointToXX15:
1652+ DCF2 4E                   ld          c,(hl)                              ;
1653+ DCF3 23                   inc         hl
1654+ DCF4 46                   ld          b,(hl)                              ; bc = x1 of gun vertex
1655+ DCF5 23                   inc         hl
1656+ DCF6 ED 43 A7 C0          ld          (UBnkX1),bc
1657+ DCFA 0C                   inc         c
1658+ DCFB C8                   ret         z                                   ; was c 255?
1659+ DCFC 04                   inc         b
1660+ DCFD C8                   ret         z                                   ; was c 255?
1661+ DCFE              MoveY1PointToXX15:
1662+ DCFE 4E                   ld          c,(hl)                              ;
1663+ DCFF 23                   inc         hl
1664+ DD00 46                   ld          b,(hl)                              ; bc = y1 of gun vertex
1665+ DD01 23                   inc         hl
1666+ DD02 ED 43 A9 C0          ld          (UBnkY1),bc
1667+ DD06              SetX2PointToXX15:
1668+ DD06 01 00 00             ld          bc,0                                ; set X2 to 0
1669+ DD09 ED 43 AB C0          ld          (UBnkX2),bc
1670+ DD0D 3A 26 C0             ld          a,(UBnkzlo)
1671+ DD10 4F                   ld          c,a
1672+ DD11              SetY2PointToXX15:
1673+ DD11 ED 43 AD C0          ld          (UBnkY2),bc                         ; set Y2to 0
1674+ DD15 3A 22 C0             ld          a,(UBnkxsgn)
1675+ DD18                      JumpOnBitClear a,7,LL74SkipDec
1675+ DD18 CB 7F       >                        bit 	7,a
1675+ DD1A CA 22 DD    >                        jp      z,LL74SkipDec
1676+ DD1D              LL74DecX2:
1677+ DD1D 3E FF                ld          a,$FF
1678+ DD1F 32 AB C0             ld          (UBnkX2Lo),a                        ; rather than dec (hl) just load with 255 as it will always be that at this code point
1679+ DD22              LL74SkipDec:
1680+ DD22 CD 9A CC             call        ClipLineV3                            ; LL145 \ clip test on XX15 XX12 vector, returns carry
1681+ DD25 38 5A                jr          c,CalculateNewLines
1682+ DD27              ;        jr          c,CalculateNewLines                 ; LL170 clip returned carry set so not visibile if carry set skip the rest (laser not firing)
1683+ DD27              ; Here we are usign hl to replace VarU as index
1684+ DD27 2A 74 7F             ld          hl,(varU16)
1685+ DD2A 3A A7 C0             ld          a,(UBnkx1Lo)
1686+ DD2D 77                   ld          (hl),a
1687+ DD2E 23                   inc         hl
1688+ DD2F 3A A9 C0             ld          a,(UBnky1Lo)
1689+ DD32 77                   ld          (hl),a
1690+ DD33 23                   inc         hl
1691+ DD34 3A AB C0             ld          a,(UBnkX2Lo)
1692+ DD37 77                   ld          (hl),a
1693+ DD38 23                   inc         hl
1694+ DD39 3A AD C0             ld          a,(UBnky2Lo)
1695+ DD3C 77                   ld          (hl),a
1696+ DD3D FD 2C                inc         iyl                                 ; iyl holds as a counter to iterations
1697+ DD3F 23                   inc         hl
1698+ DD40 FD 2C                inc         iyl                                 ; ready for next byte
1699+ DD42 22 74 7F             ld          (varU16),hl
1700+ DD45 C9                   ret
1701+ DD46
1702+ DD46                  DISPLAY "Tracing 7", $
1703+ DD46
1704+ DD46                  INCLUDE "Universe/Ships/PrepLines.asm"
# file opened: ./Universe/Ships/PrepLines.asm
   1++DD46
   2++DD46              ;--------------------------------------------------------------------------------------------------------
   3++DD46                      DISPLAY "Tracing 8", $
   4++DD46
   5++DD46                  INCLUDE "./ModelRender/getVertexNodeAtAToX1Y1.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   1++DD46              ;--------------------------------------------------------------------------------------------------------
   2++DD46              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++DD46 21 F1 C0     getVertexNodeAtAToDE:   ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++DD49 ED 31                                add         hl,a                                ; hl = address of Node
   5++DD4B 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++DD4C ED A0                                ldi                                             ; x1 lo
   7++DD4E ED A0                                ldi                                             ; x1 hi
   8++DD50 ED A0                                ldi                                             ; y1 lo
   9++DD52 ED A0                                ldi                                             ; y1 hi
  10++DD54 C9                                   ret
  11++DD55
  12++DD55              ;getVertexNodeAtAToX1Y1: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
  13++DD55              ;                        add         hl,a                                ; hl = address of Node
  14++DD55              ;                        ld          a,(hl)                              ; get edge list nbr 1 edge
  15++DD55              ;                        ld          de,UBnkX1
  16++DD55              ;                        ldi                                             ; x1 lo
  17++DD55              ;                        ldi                                             ; x1 hi
  18++DD55              ;                        ldi                                             ; y1 lo
  19++DD55              ;                        ldi                                             ; y1 hi
  20++DD55              ;                        ret
  21++DD55
# file closed: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   6++DD55
   7++DD55                      DISPLAY "Tracing 9", $
   8++DD55
   9++DD55                  INCLUDE "./ModelRender/getVertexNodeAtAToX2Y2.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX2Y2.asm
   1++DD55              ;--------------------------------------------------------------------------------------------------------
   2++DD55              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++DD55              ;getVertexNodeAtAToX2Y2: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++DD55              ;                        add         hl,a                                ; hl = address of Node
   5++DD55              ;                        ld          a,(hl)                              ; get edge list nbr 1 edge
   6++DD55              ;                        ld          de,UBnkX2
   7++DD55              ;                        ldi                                             ; x1 lo
   8++DD55              ;                        ldi                                             ; x1 hi
   9++DD55              ;                        ldi                                             ; y1 lo
  10++DD55              ;                        ldi                                             ; y1 hi
  11++DD55              ;                        ret
# file closed: ././ModelRender/getVertexNodeAtAToX2Y2.asm
  10++DD55                      DISPLAY "Tracing 10", $
  11++DD55
  12++DD55                  INCLUDE "./ModelRender/GetFaceAtA.asm"
# file opened: ././ModelRender/GetFaceAtA.asm
   1++DD55              ;--------------------------------------------------------------------------------------------------------
   2++DD55              GetFaceAtA:         MACRO
   3++DD55 ~                                ld          hl,UBnkFaceVisArray
   4++DD55 ~                                add         hl,a
   5++DD55 ~                                ld          a,(hl)                              ; get face visibility
   6++DD55                                  ENDM
   7++DD55
# file closed: ././ModelRender/GetFaceAtA.asm
  13++DD55                      DISPLAY "Tracing 11", $
  14++DD55
  15++DD55              ;--------------------------------------------------------------------------------------------------------
  16++DD55              ; LL72 Goes through each edge in to determine if they are on a visible face, if so load start and end to line array as clipped lines
  17++DD55               ;   DEFINE NOBACKFACECULL 1
  18++DD55 00           PLEDGECTR           DB          0
  19++DD56
  20++DD56              PrepLines:
  21++DD56              ; FOR NOW BRUTE FORCE IF OFF SCREEN
  22++DD56
  23++DD56              ; TODO add in onced DOEXP is finished
  24++DD56              ;        ld          a,(UBnkexplDsp)                     ; INWK+31  \ display/exploding state|missiles
  25++DD56              ;        JumpOnBitClear  a,5,EE31                        ; bit5 of mask, if zero no explosion
  26++DD56              ;        or          8
  27++DD56              ;        ld          (UBnkexplDsp),a                     ; else else set bit3 to erase old line
  28++DD56              ;        jp          DOEXP                               ; erase using Do Explosion and use implicit return
  29++DD56              ;EE31:                                                   ; no explosion
  30++DD56              ;        JumpOnBitClear  a,3,LL74                        ; clear is hop to do New lines
  31++DD56              ;        call        ClearLine                           ; LL155    \ else erase lines in XX19 heap at LINEstr down
  32++DD56              ;        ld          a, $08                              ; set bit 3 of a and fall into LL74
  33++DD56              ;
  34++DD56              ;--------------------------------------------------------------------------------------------------------
  35++DD56
  36++DD56              InitialiseLineRead:
  37++DD56                      ;break
  38++DD56                      ldWriteZero UBnkLineArrayLen                    ; current line array index = 0
  38++DD56 AF          >                        xor      a
  38++DD57 32 EB C3    >                        ld       (UBnkLineArrayLen),a
  39++DD5A 32 EC C3             ld          (UBnkLineArrayBytes),a              ; UBnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
  40++DD5D 32 55 DD             ld          (PLEDGECTR),a
  41++DD60 3A 01 C4             ld          a,(EdgeCountAddr)
  42++DD63 DD 67                ld          ixh,a                               ; ixh = XX17 = Total number of edges to traverse
  43++DD65 FD 2E 00             ld          iyl,0                               ; ixl = current edge index
  44++DD68 21 31 C2             ld          hl,UBnkLineArray                    ; head of array
  45++DD6B 22 74 7F             ld          (varU16),hl                         ; store current line array pointer un varU16
  46++DD6E                      ldCopyByte  EdgeCountAddr, XX17                 ; XX17  = total number of edges to traverse edge counter
  46++DD6E 3A 01 C4    >                        ld       a,(EdgeCountAddr)
  46++DD71 32 78 7F    >                        ld       (XX17),a
  47++DD74 3A 52 C0             ld          a,(UBnkexplDsp)                     ; get explosion status
  48++DD77                      JumpOnBitClear a,6,CalculateNewLines            ; LL170 bit6 of display state clear (laser not firing) \ Calculate new lines
  48++DD77 CB 77       >                        bit 	6,a
  48++DD79 CA 81 DD    >                        jp      z,CalculateNewLines
  49++DD7C E6 BF                and         $BF                                 ; else laser is firing, clear bit6.
  50++DD7E 32 52 C0             ld          (UBnkexplDsp),a                     ; INWK+31
  51++DD81              ;   TODO commentedout as teh subroutine is a mess   call        AddLaserBeamLine                    ; add laser beam line to draw list
  52++DD81              ; NOw we can calculate hull after including laser line
  53++DD81              CalculateNewLines:
  54++DD81              LL170:                                                  ;(laser not firing) \ Calculate new lines   \ their comment
  55++DD81              CheckEdgesForVisibility:
  56++DD81 21 02 C5             ld          hl,UBnkHullEdges
  57++DD84                      ; TODO change heap to 3 separate arrays and break them down during copy of ship hull data
  58++DD84 22 6E 7E             ld          (varV),hl                           ; V \ is pointer to where edges data start
  59++DD87 3A FC C3             ld          a,(LineX4Addr)
  60++DD8A 47                   ld          b,a                                 ; nbr of bytes of edge data
  61++DD8B              LL75Loop:                                               ; count Visible edges
  62++DD8B              IsEdgeInVisibilityRange:
  63++DD8B 2A 6E 7E             ld          hl,(varV)
  64++DD8E E5                   push        hl
  65++DD8F FD E1                pop         iy
  66++DD91                     ; DEFINE NOBACKFACECULL 1
  67++DD91                      IFDEF NOBACKFACECULL
  68++DD91 ~                        jp          VisibileEdge; DEBUGTODO
  69++DD91                      ENDIF
  70++DD91 3A 4B 7E             ld          a,(LastNormalVisible)               ; XX4 is visibility range
  71++DD94 57                   ld          d,a                                 ; d holds copy of XX4
  72++DD95              ; Get Edge Byte 0
  73++DD95 FD 7E 00             ld          a,(IY+0)                            ; edge data byte#0 is visibility distance
  74++DD98                      JumpIfALTNusng d,LL78EdgeNotVisible             ; XX4   \ visibility LLx78 edge not visible
  74++DD98 BA          >                        cp      d
  74++DD99 DA F4 DD    >                        jp		c, LL78EdgeNotVisible
  75++DD9C              EdgeMayBeVisibile:
  76++DD9C              ; Get Edge Byte 1
  77++DD9C              IsFace1Visibile:                                        ; edges have 2 faces to test
  78++DD9C FD 7E 01             ld          a,(IY+1)                            ; (V),Y \ edge data byte#1 bits 0 to 3 face 1 4 to 7 face 2
  79++DD9F 4F                   ld          c,a                                 ;  c = a copy of byte 1
  80++DDA0 E6 0F                and         $0F                                 ;
  81++DDA2                      GetFaceAtA
  81++DDA2 21 D3 C0    >                    ld          hl,UBnkFaceVisArray
  81++DDA5 ED 31       >                    add         hl,a
  81++DDA7 7E          >                    ld          a,(hl)                              ; get face visibility
  82++DDA8              ;       jp  VisibileEdge; DEBUG BODGE TEST TODO
  83++DDA8                      JumpIfAIsNotZero VisibileEdge                     ; LL70 visible edge
  83++DDA8 A7          >                        and     a
  83++DDA9 C2 BD DD    >                        jp	    nz,VisibileEdge
  84++DDAC              IsFace2Visibile:
  85++DDAC 79                   ld          a,c                                 ; restore byte 1 from c register
  86++DDAD ED 23                swapnib                                         ;
  87++DDAF E6 0F                and         $0F                                 ; swap high byte into low byte
  88++DDB1 E5                   push        hl
  89++DDB2                      GetFaceAtA
  89++DDB2 21 D3 C0    >                    ld          hl,UBnkFaceVisArray
  89++DDB5 ED 31       >                    add         hl,a
  89++DDB7 7E          >                    ld          a,(hl)                              ; get face visibility
  90++DDB8 E1                   pop         hl
  91++DDB9                      JumpIfAIsZero LL78EdgeNotVisible                ; edge not visible
  91++DDB9 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  91++DDBA CA F4 DD    >                        jp	    z, LL78EdgeNotVisible
  92++DDBD              VisibileEdge:                                           ; Now we need to node id from bytes 2 - start and 3 - end
  93++DDBD              ;LL79--Visible edge--------------------------------------
  94++DDBD              ; Get Edge Byte 2
  95++DDBD FD 7E 02             ld          a,(IY+2)                            ; get Node id
  96++DDC0 11 A7 C0             ld          de,UBnkX1
  97++DDC3 CD 46 DD             call        getVertexNodeAtAToDE; getVertexNodeAtAToX1Y1              ; get the points X1Y1 from node
  98++DDC6 FD 7E 03             ld          a,(IY+3)
  99++DDC9 11 AB C0             ld          de,UBnkX2
 100++DDCC CD 46 DD             call        getVertexNodeAtAToDE; getVertexNodeAtAToX2Y2              ; get the points X2Y2 from node
 101++DDCF
 102++DDCF                      IFDEF       CLIPVersion3
 103++DDCF ~                        call        ClipLineV3
 104++DDCF ~                        jr          nc,.SkipBreak1
 105++DDCF ~                        nop
 106++DDCF ~                        nop
 107++DDCF ~                        ;break
 108++DDCF ~            .SkipBreak1:
 109++DDCF ~                        jr          c,LL78EdgeNotVisible
 110++DDCF ~            //COMMENEDOUT FOR LATECLIPPING        ELSE
 111++DDCF ~            //COMMENEDOUT FOR LATECLIPPING            call        ClipLine
 112++DDCF ~            //COMMENEDOUT FOR LATECLIPPING            jr          c,LL78EdgeNotVisible                ; LL78 edge not visible
 113++DDCF                      ENDIF
 114++DDCF              LL80:                                                   ; ll80 \ Shove visible edge onto XX19 ship lines heap counter U
 115++DDCF                      IFDEF       LATECLIPPING
 116++DDCF ED 5B 74 7F                  ld          de,(varU16)                         ; clipped edges heap address
 117++DDD3 21 A7 C0                     ld          hl,UBnkPreClipX1
 118++DDD6                              FourLDIInstrunctions
 118++DDD6 ED A0       >                        ldi
 118++DDD8 ED A0       >                        ldi
 118++DDDA ED A0       >                        ldi
 118++DDDC ED A0       >                        ldi
 119++DDDE                              FourLDIInstrunctions
 119++DDDE ED A0       >                        ldi
 119++DDE0 ED A0       >                        ldi
 119++DDE2 ED A0       >                        ldi
 119++DDE4 ED A0       >                        ldi
 120++DDE6 ED 53 74 7F                  ld          (varU16),de                         ; update U16 with current address
 121++DDEA                      ELSE
 122++DDEA ~                            ld          de,(varU16)                         ; clipped edges heap address
 123++DDEA ~                            ld          hl,UBnkNewX1
 124++DDEA ~                            FourLDIInstrunctions
 125++DDEA ~                            ld          (varU16),de                         ; update U16 with current address
 126++DDEA                      ENDIF
 127++DDEA 21 EB C3             ld          hl,UBnkLineArrayLen                 ; we have loaded one line
 128++DDED 34                   inc         (hl)
 129++DDEE 7E                   ld          a,(hl)
 130++DDEF                      JumpIfAGTENusng LineArraySize,CompletedLineGeneration   ; have we hit max lines for a model hop over jmp to Exit edge data loop
 130++DDEF FE 32       >                        cp     LineArraySize
 130++DDF1 D2 0A DE    >                        jp		nc,CompletedLineGeneration
 131++DDF4              ; If we hit here we skip the write of line arryay u16
 132++DDF4              LL78EdgeNotVisible:                                     ; also arrive here if Edge not visible, loop next data edge.
 133++DDF4              LL78:
 134++DDF4 2A 6E 7E             ld          hl,(varV)                           ; varV is current edge address
 135++DDF7 3E 04                ld          a,4
 136++DDF9 ED 31                add         hl,a
 137++DDFB 22 6E 7E             ld          (varV),hl
 138++DDFE 21 55 DD             ld          hl,PLEDGECTR                        ;
 139++DE01 34                   inc         (hl)                                ;
 140++DE02 7E                   ld          a,(hl)                              ; current edge index ++
 141++DE03                      JumpIfANEMemusng XX17,LL75Loop                  ; compare with total number of edges
 141++DE03 21 78 7F    >                        ld    hl,XX17
 141++DE06 BE          >                        cp    (hl)
 141++DE07 C2 8B DD    >                        jp      nz,LL75Loop
 142++DE0A              CompletedLineGeneration:
 143++DE0A              LL81:
 144++DE0A              LL81SHPPT:                                              ; SHPPT ship is a point arrives here with Acc=2, bottom entry in heap
 145++DE0A 3A EB C3             ld          a,(UBnkLineArrayLen)                ; UBnkLineArrayLen = nbr of lines loaded
 146++DE0D CB 27                sla         a
 147++DE0F CB 27                sla         a                                   ; multiple by 4 to equal number of bytes
 148++DE11                      IFDEF       LATECLIPPING
 149++DE11 CB 27                        sla         a                           ; multiple by 8 to equal number of bytes
 150++DE13                      ENDIF
 151++DE13 32 EC C3             ld          (UBnkLineArrayBytes),a              ; UBnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
 152++DE16              ExitEdgeDataLoop:
 153++DE16 C9                   ret
 154++DE17
# file closed: ./Universe/Ships/PrepLines.asm
1705+ DE17
1706+ DE17                  DISPLAY "Tracing XX", $
1707+ DE17
1708+ DE17              UnivBankSize  EQU $ - StartOfUniv
1709+ DE17
# file closed: ./Universe/Ships/univ_ship_data.asm
1019  DE17                                  DISPLAY "Sizing Bank ",BankUNIVDATA0," - Start ",UniverseBankAddr," End - ",$, "- Universe Data A"
1020  DE17                                  DISPLAY "Bank ",BankUNIVDATA0," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data A"
1021  DE17                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1022  DE17              ; Bank 71  ------------------------------------------------------------------------------------------------------------------------
1023  DE17                                  SLOT    UniverseBankAddr
1024  DE17                                  PAGE    BankUNIVDATA1
1025  DE17                                  ORG	UniverseBankAddr,BankUNIVDATA1
1026  C000 FF           UNIVDATABlock1      DB $FF
1027  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1028  E000                                  DISPLAY "Bank ",BankUNIVDATA1," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data B"
1029  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1030  E000              ; Bank 72  ------------------------------------------------------------------------------------------------------------------------
1031  E000                                  SLOT    UniverseBankAddr
1032  E000                                  PAGE    BankUNIVDATA2
1033  E000                                  ORG	UniverseBankAddr,BankUNIVDATA2
1034  C000 FF           UNIVDATABlock2      DB $FF
1035  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1036  E000                                  DISPLAY "Bank ",BankUNIVDATA2," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data C"
1037  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1038  E000              ; Bank 73  ------------------------------------------------------------------------------------------------------------------------
1039  E000                                  SLOT    UniverseBankAddr
1040  E000                                  PAGE    BankUNIVDATA3
1041  E000                                  ORG	UniverseBankAddr,BankUNIVDATA3
1042  C000 FF           UNIVDATABlock3      DB $FF
1043  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1044  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data D"
1045  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1046  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
1047  E000                                  SLOT    UniverseBankAddr
1048  E000                                  PAGE    BankUNIVDATA4
1049  E000                                  ORG	UniverseBankAddr,BankUNIVDATA4
1050  C000 FF           UNIVDATABlock4      DB $FF
1051  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1052  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data E"
1053  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1054  E000              ; Bank 75  ------------------------------------------------------------------------------------------------------------------------
1055  E000                                  SLOT    UniverseBankAddr
1056  E000                                  PAGE    BankUNIVDATA5
1057  E000                                  ORG	UniverseBankAddr,BankUNIVDATA5
1058  C000 FF           UNIVDATABlock5      DB $FF
1059  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1060  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data F"
1061  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1062  E000              ; Bank 76  ------------------------------------------------------------------------------------------------------------------------
1063  E000                                  SLOT    UniverseBankAddr
1064  E000                                  PAGE    BankUNIVDATA6
1065  E000                                  ORG	UniverseBankAddr,BankUNIVDATA6
1066  C000 FF           UNIVDATABlock6      DB $FF
1067  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1068  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data G"
1069  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1070  E000              ; Bank 77  ------------------------------------------------------------------------------------------------------------------------
1071  E000                                  SLOT    UniverseBankAddr
1072  E000                                  PAGE    BankUNIVDATA7
1073  E000                                  ORG	UniverseBankAddr,BankUNIVDATA7
1074  C000 FF           UNIVDATABlock7      DB $FF
1075  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1076  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data H"
1077  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1078  E000              ; Bank 78  ------------------------------------------------------------------------------------------------------------------------
1079  E000                                  SLOT    UniverseBankAddr
1080  E000                                  PAGE    BankUNIVDATA8
1081  E000                                  ORG	UniverseBankAddr,BankUNIVDATA8
1082  C000 FF           UNIVDATABlock8      DB $FF
1083  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1084  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data I"
1085  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1086  E000              ; Bank 79  ------------------------------------------------------------------------------------------------------------------------
1087  E000                                  SLOT    UniverseBankAddr
1088  E000                                  PAGE    BankUNIVDATA9
1089  E000                                  ORG	UniverseBankAddr,BankUNIVDATA9
1090  C000 FF           UNIVDATABlock9      DB $FF
1091  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1092  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data J"
1093  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1094  E000              ; Bank 80  ------------------------------------------------------------------------------------------------------------------------
1095  E000                                  SLOT    UniverseBankAddr
1096  E000                                  PAGE    BankUNIVDATA10
1097  E000                                  ORG	UniverseBankAddr,BankUNIVDATA10
1098  C000 FF           UNIVDATABlock10     DB $FF
1099  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1100  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data K"
1101  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1102  E000              ; Bank 81  ------------------------------------------------------------------------------------------------------------------------
1103  E000                                  SLOT    UniverseBankAddr
1104  E000                                  PAGE    BankUNIVDATA11
1105  E000                                  ORG	UniverseBankAddr,BankUNIVDATA11
1106  C000 FF           UNIVDATABlock11     DB $FF
1107  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1108  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data L"
1109  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1110  E000              ; Bank 82  ------------------------------------------------------------------------------------------------------------------------
1111  E000                                  SLOT    UniverseBankAddr
1112  E000                                  PAGE    BankUNIVDATA12
1113  E000                                  ORG	UniverseBankAddr,BankUNIVDATA12
1114  C000 FF           UNIVDATABlock12     DB $FF
1115  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1116  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data M"
1117  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1118  E000              ; Bank 83  ------------------------------------------------------------------------------------------------------------------------
1119  E000              ;;;;                    SLOT    SpaceStationBankAddr
1120  E000              ;;;;                    PAGE    BankSpaceStationData
1121  E000              ;;;;                    ORG	    SpaceStationBankAddr,BankSpaceStationData
1122  E000              ;;;;                IFDEF SPACESTATIONUNIQUECODE
1123  E000              ;;;;                    INCLUDE "./Universe/SpaceStation/space_station_data.asm"
1124  E000              ;;;;                ELSE
1125  E000              ;;;;SPACESTATIONDataBlock:
1126  E000              ;;;;UNIVDATABlock13     DB      $FF              ; we will use universe slot data and modify that to 24 bit calcs
1127  E000              ;;;;                    DS $1FFF                 ; just allocate 8000 bytes for now
1128  E000              ;;;;                ENDIF
1129  E000              ;;;;                    DISPLAY "Bank ",BankSpaceStationData," - Bytes free ",/D, $2000 - ($-SpaceStationBankAddr), " - BankSpaceStationData"
1130  E000              ;;;;                    ASSERT $-SpaceStationBankAddr <8912, Bank code leaks over 8K boundary
1131  E000
1132  E000              ; Bank 84  ------------------------------------------------------------------------------------------------------------------------
1133  E000                                  SLOT    SunBankAddr
1134  E000                                  PAGE    BankSunData
1135  E000                                  ORG	    SunBankAddr,BankSunData
1136  C000                                  INCLUDE "./Universe/Sun/sun_data.asm"
# file opened: ./Universe/Sun/sun_data.asm
   1+ C000              ; In  flight ship data tables
   2+ C000              ; In  flight ship data tables
   3+ C000              ; In  flight ship data tables
   4+ C000              ; There can be upto &12 objects in flight.
   5+ C000              ; To avoid hassle of memory heap managment, the free list
   6+ C000              ; will correspond to a memory bank offset so data will be held in
   7+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   8+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   9+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
  10+ C000              ; This means each gets its own line list, inwork etc
  11+ C000
  12+ C000              ; "Runtime Ship Data paged into in Bank 7"
  13+ C000              ;                      0123456789ABCDEF
  14+ C000 53 75 6E 20  StartOfSun:        DB "Sun Data ......."
  14+ C004 44 61 74 61
  14+ C008 20 2E 2E 2E
  14+ C00C 2E 2E 2E 2E
  15+ C010              ; NOTE we can cheat and pre allocate segs just using a DS for now
  16+ C010              CheckRowHLOnScreen:     MACRO   failtarget
  17+ C010 ~                                    ld      a,h                             ; is h byte set, i.e > 256 or < 0
  18+ C010 ~                                    and     a                               ; .
  19+ C010 ~                                    jr      nz,failtarget                   ; h <> 0 so fails (covers <0 and > 255
  20+ C010 ~                                    ld      a,l                             ; l bit 7 0?
  21+ C010 ~                                    and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
  22+ C010 ~                                    jr      nz,failtarget                   ;
  23+ C010                                      ENDM
  24+ C010
  25+ C010              ; IY = SBnKLineArray + rowValue*2
  26+ C010              IYEquRowN:              MACRO   rowValue                        ; set up iy as target address
  27+ C010 ~                                    ld      a,rowValue
  28+ C010 ~                                    ld      hl,SBnKLineArray
  29+ C010 ~                                    add     hl,a
  30+ C010 ~                                    add     hl,a
  31+ C010 ~                                    push    hl
  32+ C010 ~                                    pop     iy
  33+ C010                                      ENDM
  34+ C010              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  35+ C010              ; Universe map substibute for INWK
  36+ C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  37+ C010              SBnKDataBlock:
  38+ C010                                      INCLUDE "./Universe/Sun/SunPosVars.asm"
# file opened: ././Universe/Sun/SunPosVars.asm
   1++C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C010 00           SBnKxlo                     DB  0                       ; INWK+0
   3++C011 00           SBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   4++C012 00           SBnKxsgn                    DB  0                       ; INWK+2
   5++C013 00           SBnKylo                     DB  0                       ; INWK+3 \ ylo
   6++C014 00           SBnKyhi                     DB  0                       ; INWK+4 \ yHi
   7++C015 00           SBnKysgn                    DB  0                       ; INWK +5
   8++C016 00           SBnKzlo                     DB  0                       ; INWK +6
   9++C017 00           SBnKzhi                     DB  0                       ; INWK +7
  10++C018 00           SBnKzsgn                    DB  0                       ; INWK +8
  11++C019 00 00        SunCompassX                 DW  0
  12++C01B 00 00        SunCompassY                 DW  0
  13++C01D
# file closed: ././Universe/Sun/SunPosVars.asm
  39+ C01D                                      INCLUDE "./Universe/Sun/SunRotationMatrixVars.asm"
# file opened: ././Universe/Sun/SunRotationMatrixVars.asm
   1++C01D              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
   2++C01D              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
   3++C01D 00 00        SBnKrotmatSidevX            DW  0                       ; INWK +21
   4++C01F              SBnKrotmatSidev             equ SBnKrotmatSidevX
   5++C01F 00 00        SBnKrotmatSidevY            DW  0                       ; INWK +23
   6++C021 00 00        SBnKrotmatSidevZ            DW  0                       ; INWK +25
   7++C023 00 00        SBnKrotmatRoofvX            DW  0                       ; INWK +15
   8++C025              SBnKrotmatRoofv             equ SBnKrotmatRoofvX
   9++C025 00 00        SBnKrotmatRoofvY            DW  0                       ; INWK +17
  10++C027 00 00        SBnKrotmatRoofvZ            DW  0                       ; INWK +19
  11++C029 00 00        SBnKrotmatNosevX            DW  0                       ; INWK +9
  12++C02B              SBnKrotmatNosev             EQU SBnKrotmatNosevX
  13++C02B 00 00        SBnKrotmatNosevY            DW  0                       ; INWK +11
  14++C02D 00 00        SBnKrotmatNosevZ            DW  0                       ; INWK +13
  15++C02F
# file closed: ././Universe/Sun/SunRotationMatrixVars.asm
  40+ C02F                                      INCLUDE "./Universe/Sun/SunAIRuntimeData.asm"
# file opened: ././Universe/Sun/SunAIRuntimeData.asm
   1++C02F              ; -- Ship AI data
   2++C02F 00           SBnKRotXCounter             DB  0                       ; INWK +29
   3++C030 00           SBnKRotZCounter             DB  0                       ; INWK +30
   4++C031 00           SBnkCam0yLo                 DB  0                       ; INWK +33 ????
   5++C032 00           SBnkCam0yHi                 DB  0                       ; INWK +34?????
   6++C033
# file closed: ././Universe/Sun/SunAIRuntimeData.asm
  41+ C033
  42+ C033
  43+ C033                                      INCLUDE "./Universe/Sun/SunXX16Vars.asm"
# file opened: ././Universe/Sun/SunXX16Vars.asm
   1++C033              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C033 00 00        SBnkTransmatSidevX          DW  0               ; XX16+0
   3++C035              SBnkTransmatSidev           EQU SBnkTransmatSidevX
   4++C035 00 00        SBnkTransmatSidevY          DW 0                ; XX16+2
   5++C037 00 00        SBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C039 00 00        SBnkTransmatRoofvX          DW 0
   7++C03B              SBnkTransmatRoofv           EQU SBnkTransmatRoofvX
   8++C03B 00 00        SBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C03D 00 00        SBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C03F 00 00        SBnkTransmatNosevX          DW 0
  11++C041              SBnkTransmatNosev           EQU SBnkTransmatNosevX
  12++C041 00 00        SBnkTransmatNosevY          DW 0                ; XX16+2
  13++C043 00 00        SBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C045 00 00        SBnkTransmatTransX          DW 0
  15++C047 00 00        SBnkTransmatTransY          DW 0
  16++C049 00 00        SBnkTransmatTransZ          DW 0
  17++C04B              SunXX16                      equ SBnkTransmatSidev
  18++C04B              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C04B 00 00        SBnkTransInvRow0x0          DW 0
  20++C04D 00 00        SBnkTransInvRow0x1          DW 0
  21++C04F 00 00        SBnkTransInvRow0x2          DW 0
  22++C051 00 00        SBnkTransInvRow0x3          DW 0
  23++C053 00 00        SBnkTransInvRow1y0          DW 0
  24++C055 00 00        SBnkTransInvRow1y1          DW 0
  25++C057 00 00        SBnkTransInvRow1y2          DW 0
  26++C059 00 00        SBnkTransInvRow1y3          DW 0
  27++C05B 00 00        SBnkTransInvRow2z0          DW 0
  28++C05D 00 00        SBnkTransInvRow2z1          DW 0
  29++C05F 00 00        SBnkTransInvRow2z2          DW 0
  30++C061 00 00        SBnkTransInvRow2z3          DW 0
  31++C063
  32++C063              SunXX16Inv             equ SBnkTransInvRow0x0
  33++C063
# file closed: ././Universe/Sun/SunXX16Vars.asm
  44+ C063                                      INCLUDE "./Universe/Sun/SunXX25Vars.asm"
# file opened: ././Universe/Sun/SunXX25Vars.asm
   1++C063              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C063 00           SBnKProjxLo                 DB  0
   3++C064 00           SBnKProjxHi                 DB  0
   4++C065 00           SBnKProjxSgn                DB  0
   5++C066              SBnKProjx                   EQU SBnKProjxLo
   6++C066 00           SBnKProjyLo                 DB  0
   7++C067 00           SBnKProjyHi                 DB  0
   8++C068 00           SBnKProjySgn                DB  0
   9++C069              SBnKProjy                   EQU SBnKProjyLo
  10++C069 00           SBnKProjzLo                 DB  0
  11++C06A 00           SBnKProjzHi                 DB  0
  12++C06B 00           SBnKProjzSgn                DB  0
  13++C06C              SBnKProjz                   EQU SBnKProjzLo
  14++C06C              SXX25                       EQU SBnKProjxLo
  15++C06C
# file closed: ././Universe/Sun/SunXX25Vars.asm
  45+ C06C                                      INCLUDE "./Universe/Sun/SunXX18Vars.asm"
# file opened: ././Universe/Sun/SunXX18Vars.asm
   1++C06C              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C06C 00           SBnKDrawCam0xLo             DB  0               ; XX18+0
   3++C06D 00           SBnKDrawCam0xHi             DB  0               ; XX18+1
   4++C06E 00           SBnKDrawCam0xSgn            DB  0               ; XX18+2
   5++C06F              SBnKDrawCam0x               equ SBnKDrawCam0xLo
   6++C06F 00           SBnKDrawCam0yLo             DB  0               ; XX18+3
   7++C070 00           SBnKDrawCam0yHi             DB  0               ; XX18+4
   8++C071 00           SBnKDrawCam0ySgn            DB  0               ; XX18+5
   9++C072              SBnKDrawCam0y               equ SBnKDrawCam0yLo
  10++C072 00           SBnKDrawCam0zLo             DB  0               ; XX18+6
  11++C073 00           SBnKDrawCam0zHi             DB  0               ; XX18+7
  12++C074 00           SBnKDrawCam0zSgn            DB  0               ; XX18+8
  13++C075              SBnKDrawCam0z               equ SBnKDrawCam0zLo
  14++C075              SXX18                       equ SBnKDrawCam0xLo
  15++C075
# file closed: ././Universe/Sun/SunXX18Vars.asm
  46+ C075
  47+ C075              ; Used to make 16 bit reads a little cleaner in source code
  48+ C075 00 00 00     SBnKzPoint                  DS  3
  49+ C078              SBnKzPointLo                equ SBnKzPoint
  50+ C078              SBnKzPointHi                equ SBnKzPoint+1
  51+ C078              SBnKzPointSign              equ SBnKzPoint+2
  52+ C078                                      INCLUDE "./Universe/Sun/SunXX15Vars.asm"
# file opened: ././Universe/Sun/SunXX15Vars.asm
   1++C078              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C078 00           SBnKXScaled                 DB  0               ; XX15+0Xscaled
   3++C079 00           SBnKXScaledSign             DB  0               ; XX15+1xsign
   4++C07A 00           SBnKYScaled                 DB  0               ; XX15+2yscaled
   5++C07B 00           SBnKYScaledSign             DB  0               ; XX15+3ysign
   6++C07C 00           SBnKZScaled                 DB  0               ; XX15+4zscaled
   7++C07D 00           SBnKZScaledSign             DB  0               ; XX15+5zsign
   8++C07E
   9++C07E              SXX15                       equ SBnKXScaled
  10++C07E              SXX15VecX                   equ SXX15
  11++C07E              SXX15VecY                   equ SXX15+1
  12++C07E              SXX15VecZ                   equ SXX15+2
  13++C07E              SBnKXPoint                  equ SXX15
  14++C07E              SBnKXPointLo                equ SXX15+0
  15++C07E              SBnKXPointHi                equ SXX15+1
  16++C07E              SBnKXPointSign              equ SXX15+2
  17++C07E              SBnKYPoint                  equ SXX15+3
  18++C07E              SBnKYPointLo                equ SXX15+3
  19++C07E              SBnKYPointHi                equ SXX15+4
  20++C07E              SBnKYPointSign              equ SXX15+5
  21++C07E
# file closed: ././Universe/Sun/SunXX15Vars.asm
  53+ C07E                                      INCLUDE "./Universe/Sun/SunXX12Vars.asm"
# file opened: ././Universe/Sun/SunXX12Vars.asm
   1++C07E              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C07E              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C07E 00           SBnKXX12xLo                 DB  0               ; XX12+0
   4++C07F 00           SBnKXX12xSign               DB  0               ; XX12+1
   5++C080 00           SBnKXX12yLo                 DB  0               ; XX12+2
   6++C081 00           SBnKXX12ySign               DB  0               ; XX12+3
   7++C082 00           SBnKXX12zLo                 DB  0               ; XX12+4
   8++C083 00           SBnKXX12zSign               DB  0               ; XX12+5
   9++C084 00 00 00...  SXX12Save                   DS  6
  10++C08A 00 00 00...  SXX12Save2                  DS  6
  11++C090              SXX12                       equ SBnKXX12xLo
  12++C090              varSXX12                    equ SBnKXX12xLo
  13++C090              ; Repurposed XX12 when plotting lines
  14++C090              SBnkY2                      equ SXX12+0
  15++C090              SbnKy2Lo                    equ SXX12+0
  16++C090              SBnkY2Hi                    equ SXX12+1
  17++C090              SBnkDeltaXLo                equ SXX12+2
  18++C090              SBnkDeltaXHi                equ SXX12+3
  19++C090              SBnkDeltaYLo                equ SXX12+4
  20++C090              SBnkDeltaYHi                equ SXX12+5
  21++C090              SbnkGradient                equ SXX12+2
  22++C090              SBnkTemp1                   equ SXX12+2
  23++C090              SBnkTemp1Lo                 equ SXX12+2
  24++C090              SBnkTemp1Hi                 equ SXX12+3
  25++C090              SBnkTemp2                   equ SXX12+3
  26++C090              SBnkTemp2Lo                 equ SXX12+3
  27++C090              SBnkTemp2Hi                 equ SXX12+4
  28++C090
# file closed: ././Universe/Sun/SunXX12Vars.asm
  54+ C090
  55+ C090
  56+ C090              ; Post clipping the results are now 8 bit
  57+ C090 00           SBnKVisibility              DB  0               ; replaces general purpose xx4 in rendering
  58+ C091 00           SBnKProjectedY              DB  0
  59+ C092 00           SBnKProjectedX              DB  0
  60+ C093              SBnKProjected               equ SBnKProjectedY  ; resultant projected position
  61+ C093 00 00 00...  SunXX15Save                 DS  8
  62+ C09B 00 00 00...  SunXX15Save2                DS  8
  63+ C0A3              ; Heap (or array) information for lines and normals
  64+ C0A3              ; Coords are stored XY,XY,XY,XY
  65+ C0A3              ; Normals
  66+ C0A3              ; This needs re-oprganising now.
  67+ C0A3              ; Runtime Calculation Store
  68+ C0A3
  69+ C0A3              SunLineArraySize            equ 128 * 2
  70+ C0A3              ; Storage arrays for data
  71+ C0A3
  72+ C0A3 00 00 00...  SBnKLineArray               DS SunLineArraySize ; XX19 Holds the clipped line details
  73+ C1A3              SBnKLinesHeapMax            EQU $ - SBnKLineArray
  74+ C1A3
  75+ C1A3 00 00        LineArrayPtr                DW  0
  76+ C1A5
  77+ C1A5              SBnK_Data_len               EQU $ - SBnKDataBlock
  78+ C1A5
  79+ C1A5              ; --------------------------------------------------------------
  80+ C1A5 21 10 C0     ResetSBnKData:          ld      hl,SBnKDataBlock
  81+ C1A8 11 95 01                             ld      de,SBnK_Data_len
  82+ C1AB AF                                   xor     a
  83+ C1AC CD 04 7E                             call    memfill_dma
  84+ C1AF C9                                   ret
  85+ C1B0              ; --------------------------------------------------------------
  86+ C1B0 21 10 C0     ResetSBnKPosition:      ld      hl,SBnKxlo
  87+ C1B3 06 09                                ld      b, 3*3
  88+ C1B5 AF                                   xor     a
  89+ C1B6 77           .zeroLoop:              ld      (hl),a
  90+ C1B7 23                                   inc     hl
  91+ C1B8 10 FC                                djnz    .zeroLoop
  92+ C1BA C9                                   ret
  93+ C1BB
  94+ C1BB              ; Z Must be at least 2 and positve to warp
  95+ C1BB 21 18 C0     WarpSunCloser:          ld      hl,SBnKzsgn
  96+ C1BE 7E                                   ld      a,(hl)
  97+ C1BF                                      ReturnIfALTNusng 2                      ; hard liit along z axis
  97+ C1BF FE 02       >                        cp    2
  97+ C1C1 D8          >                        ret	 c
  98+ C1C2 35                                   dec     (hl)
  99+ C1C3 C9                                   ret
 100+ C1C4
 101+ C1C4              ; It should normally be behind but someone could fly past a planet, turn aroudn and jump
 102+ C1C4 21 18 C0     WarpSunFurther:         ld      hl,SBnKzsgn
 103+ C1C7 7E                                   ld      a,(hl)
 104+ C1C8                                      ReturnIfAGTENusng $7F                   ; this is the hard limit else it woudl turn negative and flip to -0
 104+ C1C8 FE 7F       >                        cp    $7F
 104+ C1CA D0          >                        ret	 nc
 105+ C1CB 34                                   inc     (hl)                           ; if its negative it will still increase as we will block insane values
 106+ C1CC C9                                   ret
 107+ C1CD              ; This uses UBnkNodeArray as the list
 108+ C1CD              ; the array is 256 * 2 bytes
 109+ C1CD              ; counter is current row y pos
 110+ C1CD              ; byte 1 is start x pos
 111+ C1CD              ; byte 2 is end x pos
 112+ C1CD              ; if they are both 0 then skip
 113+ C1CD              ; its always horizontal, yellow
 114+ C1CD
 115+ C1CD              .SunNoDraw:             SetCarryFlag                    ; ship is behind so do not draw, so we don't care abour draw as dot
 115+ C1CD 37          >                        scf
 116+ C1CE C9                                   ret
 117+ C1CF
 118+ C1CF              SunBankDraw:            MACRO
 119+ C1CF ~            .drawLoop               ld      a,(hl)
 120+ C1CF ~                                    ld      c,a                     ; c = left column
 121+ C1CF ~                                    inc     hl
 122+ C1CF ~                                    ld      d,(hl)                  ; d = right col
 123+ C1CF ~                                    inc     hl                      ; now ready for next linel
 124+ C1CF ~                                    push    hl,,bc
 125+ C1CF ~                                    cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 126+ C1CF ~                                    IfResultZeroGoto .NoLineDraw
 127+ C1CF ~                                    ld      a,d                     ; get right col back
 128+ C1CF ~                                    sub     c                       ; subtract left so a = length
 129+ C1CF ~                                    inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 130+ C1CF ~                                    call    z, .FixWidth
 131+ C1CF ~                                    ld      d,a                     ; de = length (e - d)
 132+ C1CF ~                                    ld      e,216                   ; yellow
 133+ C1CF ~                                    call    l2_draw_horz_dma        ; draw without bank switch
 134+ C1CF ~            .NoLineDraw:            pop     hl,,bc
 135+ C1CF ~                                    inc     b
 136+ C1CF ~                                    dec     iyh
 137+ C1CF ~                                    IfResultNotZeroGoto  .drawLoop
 138+ C1CF                                      ENDM
 139+ C1CF
 140+ C1CF
 141+ C1CF
 142+ C1CF              SunDraw:                MMUSelectLayer2
 142+ C1CF ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 143+ C1D3 3A 0E C6     .OptimiseStartPos:      ld      a,(MinYOffset)
 144+ C1D6                                      JumpIfAIsZero .OffsetIsZero     ; if offset is 0 then just initate as normal
 144+ C1D6 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 144+ C1D7 CA E7 C1    >                        jp	    z, .OffsetIsZero
 145+ C1DA                                      JumpIfALTNusng 64, .OffsetLT64  ; if offset >=64 then we adjust and mve to bank 0
 145+ C1DA FE 40       >                        cp      64
 145+ C1DC DA F4 C1    >                        jp		c, .OffsetLT64
 146+ C1DF D6 40        .OffsetGTE64:           sub     64
 147+ C1E1 32 0E C6                             ld      (MinYOffset),a          ; adjust offset for bank 2
 148+ C1E4 C3 2C C2                             jp      .StartBank2
 149+ C1E7 06 00        .OffsetIsZero:          ld      b,0                     ; row
 150+ C1E9 FD 26 40                             ld      iyh,64                  ; counter
 151+ C1EC 21 A3 C0                             ld      hl,SBnKLineArray        ; set hl to start of array
 152+ C1EF C3 06 C2                             jp      .StartBank1
 153+ C1F2              ;-- Snuck routine in here so that the macro will be happier
 154+ C1F2 3D           .FixWidth:              dec     a                       ; if carry resulted in a value of zero then correct
 155+ C1F3 C9                                   ret
 156+ C1F4 21 A3 C0     .OffsetLT64:            ld      hl,SBnKLineArray        ; adjust hl for line array offset
 157+ C1F7 ED 31                                add     hl,a                    ; .
 158+ C1F9 ED 31                                add     hl,a                    ; .
 159+ C1FB 47                                   ld      b,a                     ; set b row to the actual offset
 160+ C1FC 4F                                   ld      c,a                     ; iyh = 64 - Y offset
 161+ C1FD 3E 40                                ld      a,64                    ; .
 162+ C1FF 91                                   sub     c                       ; .
 163+ C200 FD 67                                ld      iyh,a
 164+ C202 AF                                   xor     a                       ; Ready bank 2 with no offset
 165+ C203 32 0E C6                             ld      (MinYOffset),a          ; .
 166+ C206 D9           .StartBank1:            exx
 167+ C207 3E 00                                ld      a,LAYER2_SHIFTED_SCREEN_TOP
 168+ C209 CD 38 E0                             call    asm_l2_bank_select      ; get in the first bank, we will only then bank select when needed
 169+ C20C D9                                   exx
 170+ C20D                                      SunBankDraw
 170+ C20D 7E          >.drawLoop               ld      a,(hl)
 170+ C20E 4F          >                        ld      c,a                     ; c = left column
 170+ C20F 23          >                        inc     hl
 170+ C210 56          >                        ld      d,(hl)                  ; d = right col
 170+ C211 23          >                        inc     hl                      ; now ready for next linel
 170+ C212 E5 C5       >                        push    hl,,bc
 170+ C214 BA          >                        cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 170+ C215             >                        IfResultZeroGoto .NoLineDraw
 170+ C215 CA 24 C2    >                        jp	z,.NoLineDraw
 170+ C218 7A          >                        ld      a,d                     ; get right col back
 170+ C219 91          >                        sub     c                       ; subtract left so a = length
 170+ C21A 3C          >                        inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 170+ C21B CC F2 C1    >                        call    z, .FixWidth
 170+ C21E 57          >                        ld      d,a                     ; de = length (e - d)
 170+ C21F 1E D8       >                        ld      e,216                   ; yellow
 170+ C221 CD 5E E4    >                        call    l2_draw_horz_dma        ; draw without bank switch
 170+ C224 C1 E1       >.NoLineDraw:            pop     hl,,bc
 170+ C226 04          >                        inc     b
 170+ C227 FD 25       >                        dec     iyh
 170+ C229             >                        IfResultNotZeroGoto  .drawLoop
 170+ C229 C2 0D C2    >                        jp	nz,.drawLoop
 171+ C22C 3A 0E C6     .StartBank2:            ld      a,(MinYOffset)
 172+ C22F                                      JumpIfAIsZero .OffsetBank2IsZero; if offset is 0 then we just continue, offset can never be >127 else there would be no draw
 172+ C22F A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 172+ C230 CA 44 C2    >                        jp	    z, .OffsetBank2IsZero
 173+ C233 21 23 C1     .NotZeroOffset:         ld      hl,SBnKLineArray + (64 * 2); adjust to correct offset
 174+ C236 ED 31                                add     hl,a
 175+ C238 ED 31                                add     hl,a
 176+ C23A 4F                                   ld      c,a                     ; iyh = 64 - offset
 177+ C23B 3E 40                                ld      a,64                    ; .
 178+ C23D 91                                   sub     c                       ; .
 179+ C23E FD 67                                ld      iyh,a                   ; .
 180+ C240 41                                   ld      b,c                     ; b = offset row
 181+ C241 C3 4C C2                             jp      .drawLineBank2
 182+ C244 21 23 C1     .OffsetBank2IsZero:     ld      hl,SBnKLineArray + (64 * 2); start with offset adjusted
 183+ C247 06 00                                ld      b,0
 184+ C249 FD 26 40                             ld      iyh,64
 185+ C24C D9           .drawLineBank2:         exx
 186+ C24D 3E 40                                ld      a,LAYER2_SHIFTED_SCREEN_MIDDLE
 187+ C24F CD 38 E0                             call    asm_l2_bank_select      ; now do the lower bank
 188+ C252 D9                                   exx
 189+ C253              ; Could make this a sub routine but unwrapping saves a call
 190+ C253                                      SunBankDraw
 190+ C253 7E          >.drawLoop               ld      a,(hl)
 190+ C254 4F          >                        ld      c,a                     ; c = left column
 190+ C255 23          >                        inc     hl
 190+ C256 56          >                        ld      d,(hl)                  ; d = right col
 190+ C257 23          >                        inc     hl                      ; now ready for next linel
 190+ C258 E5 C5       >                        push    hl,,bc
 190+ C25A BA          >                        cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 190+ C25B             >                        IfResultZeroGoto .NoLineDraw
 190+ C25B CA 6A C2    >                        jp	z,.NoLineDraw
 190+ C25E 7A          >                        ld      a,d                     ; get right col back
 190+ C25F 91          >                        sub     c                       ; subtract left so a = length
 190+ C260 3C          >                        inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 190+ C261 CC F2 C1    >                        call    z, .FixWidth
 190+ C264 57          >                        ld      d,a                     ; de = length (e - d)
 190+ C265 1E D8       >                        ld      e,216                   ; yellow
 190+ C267 CD 5E E4    >                        call    l2_draw_horz_dma        ; draw without bank switch
 190+ C26A C1 E1       >.NoLineDraw:            pop     hl,,bc
 190+ C26C 04          >                        inc     b
 190+ C26D FD 25       >                        dec     iyh
 190+ C26F             >                        IfResultNotZeroGoto  .drawLoop
 190+ C26F C2 53 C2    >                        jp	nz,.drawLoop
 191+ C272 C9                                   ret
 192+ C273              ; -------------------------------------------------------------
 193+ C273              ; Sun Position    z = ((seed.d & 7) | 1)      shift left 16
 194+ C273              ;                 x = (seed.f & 3) shift left 16  | seed.f & 3 << 8 * -1 if seed f odd
 195+ C273              ;                 y    = sun x position
 196+ C273              ;
 197+ C273              CalculateSunWarpPositon:
 198+ C273 3A 04 80     .CalcZPosition:         ld      a,(WorkingSeeds+3)      ; seed d & 7
 199+ C276 E6 07                                and     %00000111               ; .
 200+ C278 F6 81                                or      %10000001               ; | 1
 201+ C27A 32 18 C0     .SetZPosition:          ld      (SBnKzsgn),a            ; << 16 (i.e. load into z sign byte
 202+ C27D 21 00 00                             ld      hl, $0000               ; now set z hi and lo
 203+ C280 22 16 C0                             ld      (SBnKzlo),hl            ;
 204+ C283 3A 06 80     .CalcXandYPosition:     ld      a,(WorkingSeeds+5)      ; seed f & 3
 205+ C286 E6 03                                and     %00000011               ; .
 206+ C288 47                                   ld      b,a
 207+ C289 3A 05 80                             ld      a,(WorkingSeeds+4)      ; get low bit of seed e
 208+ C28C E6 01                                and     %00000001
 209+ C28E 1F                                   rra                             ; roll bi t0 into bit 7
 210+ C28F B0                                   or      b                       ; now calc is f & 3 * -1 if seed e is odd
 211+ C290 32 12 C0     .SetXandYPosition:      ld      (SBnKxsgn),a            ; set into x and y sign byte
 212+ C293 32 15 C0                             ld      (SBnKysgn),a            ; .
 213+ C296 78                                   ld      a,b                     ; we want just seed f & 3 here
 214+ C297 32 11 C0                             ld      (SBnKxhi),a             ; set into x and y high byte
 215+ C29A 32 14 C0                             ld      (SBnKyhi),a             ; .
 216+ C29D                                      ZeroA
 216+ C29D AF          >                        xor a
 217+ C29E 32 10 C0                             ld      (SBnKxlo),a
 218+ C2A1 32 13 C0                             ld      (SBnKylo),a
 219+ C2A4 C9                                   ret
 220+ C2A5
 221+ C2A5              CalculateSunLaunchedPosition:
 222+ C2A5              .CalcXPosition:         MMUSelectMathsBankedFns
 222+ C2A5 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 223+ C2A9 DD 21 39 80                          ld      ix,ParentPlanetX
 224+ C2AD FD 21 10 C0                          ld      iy,SBnKxlo
 225+ C2B1 CD 8C 00                             call    AddAtIXtoAtIY24Signed
 226+ C2B4 DD 21 3C 80  .CalcYPosition:         ld      ix,ParentPlanetY
 227+ C2B8 FD 21 13 C0                          ld      iy,SBnKylo
 228+ C2BC CD 8C 00                             call    AddAtIXtoAtIY24Signed
 229+ C2BF DD 21 3F 80  .CalcZPosition:         ld      ix,ParentPlanetZ
 230+ C2C3 FD 21 16 C0                          ld      iy,SBnKzlo
 231+ C2C7 CD 8C 00                             call    AddAtIXtoAtIY24Signed
 232+ C2CA C9                                   ret
 233+ C2CB              ; --------------------------------------------------------------
 234+ C2CB              ; This sets current universe object to a star / sun, they use sign + 23 bit positions
 235+ C2CB CD A5 C1     CreateSun:              call    ResetSBnKData
 236+ C2CE CD 73 C2                             call    CalculateSunWarpPositon
 237+ C2D1 C9                                   ret
 238+ C2D2
 239+ C2D2
 240+ C2D2 CD A5 C1     CreateSunLaunched:      call    ResetSBnKData
 241+ C2D5 21 00 00                             ld      hl,0
 242+ C2D8 3E 00                                ld      a,0
 243+ C2DA 22 10 C0                             ld      (SBnKxlo),hl
 244+ C2DD 22 13 C0                             ld      (SBnKylo),hl
 245+ C2E0 21 00 E0                             ld      hl,$E000
 246+ C2E3 22 16 C0                             ld      (SBnKzlo),hl
 247+ C2E6 32 12 C0                             ld      (SBnKxsgn),a
 248+ C2E9 32 18 C0                             ld      (SBnKzsgn),a
 249+ C2EC 3E 06                                ld      a,$06
 250+ C2EE 32 15 C0                             ld      (SBnKysgn),a
 251+ C2F1 C9                                   ret
 252+ C2F2              ; --------------------------------------------------------------
 253+ C2F2              ; This sets current universe object to a planet,they use sign + 23 bit positions
 254+ C2F2              ;;TODOCreatePlanet:           call    ResetSBnKData
 255+ C2F2              ;;TODO                        ld      a,(DisplayTekLevel)
 256+ C2F2              ;;TODO                        and     $00000010               ; Set A = 128 or 130 depending on bit 1 of the system's tech level
 257+ C2F2              ;;TODO                        or      $10000000
 258+ C2F2              ;;TODO                        ld      (SBnKShipType),a
 259+ C2F2              ;;TODO                        xor     a
 260+ C2F2              ;;TODO                        ld      (SBnKaiatkecm),a
 261+ C2F2              ;;TODO                        MaxUnivPitchAndRoll
 262+ C2F2              ;;TODO                        ld      a,(WorkingSeeds+1)      ; a= bits 1 and 0 of working seed1 + 3 + carry
 263+ C2F2              ;;TODO                        and     %00000011               ; .
 264+ C2F2              ;;TODO                        adc     3                       ; .
 265+ C2F2              ;;TODO                        ld      (SBnKzsgn),a            ; set z sign to 3 + C + 0..3 bits
 266+ C2F2              ;;TODO                        rr      a
 267+ C2F2              ;;TODO                        ld      (PlanetXsgn),a
 268+ C2F2              ;;TODO                        ld      (PlanetYsgn),a
 269+ C2F2              ;;TODO                        ret
 270+ C2F2
 271+ C2F2
 272+ C2F2                                 ;     include "./Maths/ADDHLDESignBC.asm"
 273+ C2F2
 274+ C2F2 7C           SunADDHLDESignedv3:     ld      a,h
 275+ C2F3 E6 80                                and     SignOnly8Bit
 276+ C2F5 47                                   ld      b,a                         ;save sign bit in b
 277+ C2F6 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 278+ C2F7                                      JumpIfNegative .SunADDHLDEOppSGN    ;Signs are opposite there fore we can subtract to get difference
 278+ C2F7 FA 12 C3    >                        jp		m, .SunADDHLDEOppSGN
 279+ C2FA 78           .SunADDHLDESameSigns:   ld      a,b
 280+ C2FB B2                                   or      d
 281+ C2FC                                      JumpIfNegative .SunADDHLDESameNeg   ; optimisation so we can just do simple add if both positive
 281+ C2FC FA 04 C3    >                        jp		m, .SunADDHLDESameNeg
 282+ C2FF                                      JumpIfNegative .SunADDHLDESameNeg   ; optimisation so we can just do simple add if both positive
 282+ C2FF FA 04 C3    >                        jp		m, .SunADDHLDESameNeg
 283+ C302 19                                   add     hl,de
 284+ C303 C9                                   ret
 285+ C304 7C           .SunADDHLDESameNeg:     ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 286+ C305 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 287+ C307 67                                   ld      h,a
 288+ C308 7A                                   ld      a,d
 289+ C309 E6 7F                                and     SignMask8Bit
 290+ C30B 57                                   ld      d,a
 291+ C30C 19                                   add     hl,de
 292+ C30D 3E 80                                ld      a,SignOnly8Bit
 293+ C30F B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 294+ C310 67                                   ld      h,a
 295+ C311 C9                                   ret
 296+ C312 7C           .SunADDHLDEOppSGN:      ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 297+ C313 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 298+ C315 67                                   ld      h,a
 299+ C316 7A                                   ld      a,d
 300+ C317 E6 7F                                and     SignMask8Bit
 301+ C319 57                                   ld      d,a
 302+ C31A B7                                   or      a
 303+ C31B ED 52                                sbc     hl,de
 304+ C31D 38 04                                jr      c,.SunADDHLDEOppInvert
 305+ C31F 78           .SunADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 306+ C320 B4                                   or      h
 307+ C321 67                                   ld      h,a                         ; set the previou sign value
 308+ C322 C9                                   ret
 309+ C323              .SunADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 309+ C323 AF          >                    xor a
 309+ C324 95          >                    sub l
 309+ C325 6F          >                    ld l,a
 309+ C326 9F          >                    sbc a,a
 309+ C327 94          >                    sub h
 309+ C328 67          >                    ld h,a
 310+ C329 78                                   ld      a,b
 311+ C32A EE 80                                xor     SignOnly8Bit                ; flip sign bit
 312+ C32C B4                                   or      h
 313+ C32D 67                                   ld      h,a                         ; recover sign
 314+ C32E C9                                   ret
 315+ C32F
 316+ C32F              ; we could cheat, flip the sign of DE and just add but its not very optimised
 317+ C32F 7C           .SunSUBHLDESignedv3:        ld      a,h
 318+ C330 E6 80                                and     SignOnly8Bit
 319+ C332 47                                   ld      b,a                         ;save sign bit in b
 320+ C333 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 321+ C334                                      JumpIfNegative .SunSUBHLDEOppSGN        ;Signs are opposite therefore we can add
 321+ C334 FA 62 C3    >                        jp		m, .SunSUBHLDEOppSGN
 322+ C337 78           .SunSUBHLDESameSigns:       ld      a,b
 323+ C338 B2                                   or      d
 324+ C339                                      JumpIfNegative .SunSUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 324+ C339 FA 43 C3    >                        jp		m, .SunSUBHLDESameNeg
 325+ C33C B7                                   or      a
 326+ C33D ED 52                                sbc     hl,de
 327+ C33F                                      JumpIfNegative .SunSUBHLDESameOvrFlw
 327+ C33F FA 56 C3    >                        jp		m, .SunSUBHLDESameOvrFlw
 328+ C342 C9                                   ret
 329+ C343 7C           .SunSUBHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 330+ C344 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 331+ C346 67                                   ld      h,a
 332+ C347 7A                                   ld      a,d
 333+ C348 E6 7F                                and     SignMask8Bit
 334+ C34A 57                                   ld      d,a
 335+ C34B B7                                   or      a
 336+ C34C ED 52                                sbc     hl,de
 337+ C34E                                      JumpIfNegative .SunSUBHLDESameOvrFlw
 337+ C34E FA 56 C3    >                        jp		m, .SunSUBHLDESameOvrFlw
 338+ C351 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 339+ C352 F6 80                                or      SignOnly8Bit
 340+ C354 67                                   ld      h,a
 341+ C355 C9                                   ret
 342+ C356              .SunSUBHLDESameOvrFlw:      NegHL                                                        ; we need to flip the sign and 2'c the Hl result
 342+ C356 AF          >                    xor a
 342+ C357 95          >                    sub l
 342+ C358 6F          >                    ld l,a
 342+ C359 9F          >                    sbc a,a
 342+ C35A 94          >                    sub h
 342+ C35B 67          >                    ld h,a
 343+ C35C 78                                   ld      a,b
 344+ C35D EE 80                                xor     SignOnly8Bit                ; flip sign bit
 345+ C35F B4                                   or      h
 346+ C360 67                                   ld      h,a                         ; recover sign
 347+ C361 C9                                   ret
 348+ C362 B7           .SunSUBHLDEOppSGN:          or      a                                               ; here HL and DE are opposite so we can add the values
 349+ C363 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 350+ C364 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 351+ C366 67                                   ld      h,a
 352+ C367 7A                                   ld      a,d
 353+ C368 E6 7F                                and     SignMask8Bit
 354+ C36A 57                                   ld      d,a
 355+ C36B 19                                   add     hl,de
 356+ C36C 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 357+ C36D B4                                   or      h
 358+ C36E 67                                   ld      h,a                         ; set the previou sign value
 359+ C36F C9                                   ret
 360+ C370
 361+ C370
 362+ C370              .SunSBCHLDESigned:      JumpOnBitSet h,7,.SunSBCHLDEhlNeg
 362+ C370 CB 7C       >                        bit 	7,h
 362+ C372 C2 83 C3    >                        jp      nz,.SunSBCHLDEhlNeg
 363+ C375              .SunSBCHLDEhlPos:       JumpOnBitSet h,7,.SunSBCHLDEhlNeg
 363+ C375 CB 7C       >                        bit 	7,h
 363+ C377 C2 83 C3    >                        jp      nz,.SunSBCHLDEhlNeg
 364+ C37A ED 52        .SunSBCHLDEhlPosDePos:  sbc     hl,de                           ; ignore overflow for now will sort later TODO
 365+ C37C C9                                   ret
 366+ C37D CB BA        .SunSBCHLDEhlPosDeNeg:  res     7,d
 367+ C37F 19                                   add     hl,de                           ; ignore overflow for now will sort later TODO
 368+ C380 CB FA                                set     7,d
 369+ C382 C9                                   ret
 370+ C383 CB BC        .SunSBCHLDEhlNeg:       res     7,h
 371+ C385                                      JumpOnBitSet d,7,.SunSBCHLDEhlNegdeNeg
 371+ C385 CB 7A       >                        bit 	7,d
 371+ C387 C2 8F C3    >                        jp      nz,.SunSBCHLDEhlNegdeNeg
 372+ C38A ED 52        .SunSBCHLDEhlNegdePos:  sbc     hl,de                       ; ignore overflow for now will sort later TODO
 373+ C38C CB FC                                set     7,h
 374+ C38E C9                                   ret
 375+ C38F CB BA        .SunSBCHLDEhlNegdeNeg:      res     7,d
 376+ C391 19                                   add     hl,de                   ; ignore overflow for now will sort later TODO
 377+ C392 CB FA                                set     7,d
 378+ C394 CB FC                                set     7,h
 379+ C396 C9                                   ret
 380+ C397
 381+ C397
 382+ C397                                      include "./Universe/Sun/TransposeSunXX12BySunToSunXX15.asm"
# file opened: ././Universe/Sun/TransposeSunXX12BySunToSunXX15.asm
   1++C397              TransposeSXX12BySunToSXX15:
   2++C397 2A 7E C0                             ld		hl,(SBnKXX12xLo)					; get X into HL
   3++C39A 7C                                   ld		a,h			                        ; get XX12 Sign
   4++C39B E6 80                                and		$80									; check sign bit on high byte
   5++C39D 47                                   ld		b,a									; and put it in of 12xlo in b
   6++C39E                                      ;110921 debugld      h,0
   7++C39E 7C                                   ld      a,h
   8++C39F E6 7F                                and     $7F
   9++C3A1 67                                   ld      h,a
  10++C3A2                                      ;110921 debugld      h,0
  11++C3A2 ED 5B 10 C0                          ld		de,(SBnKxlo)						;
  12++C3A6 3A 12 C0                             ld		a,(SBnKxsgn)						; get Ship Pos (low,high,sign)
  13++C3A9 E6 80                                and		$80									; make sure we only have bit 7
  14++C3AB 4F                                   ld		c,a									; and put sign of unkxsgn c
  15++C3AC                                      MMUSelectMathsBankedFns
  15++C3AC ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
  16++C3B0 CD 2F 00                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
  17++C3B3 B4                                   or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
  18++C3B4 67                                   ld		h,a
  19++C3B5 22 78 C0                             ld		(SBnKXScaled),hl					; now write it out to XX15 X pos
  20++C3B8              ; ..................................
  21++C3B8 2A 80 C0                             ld		hl,(SBnKXX12yLo)					; Repeat above for Y coordinate
  22++C3BB 7C                                   ld		a,h
  23++C3BC E6 80                                and		$80
  24++C3BE 47                                   ld		b,a
  25++C3BF                                      ;110921 debugld      h,0
  26++C3BF 7C                                   ld      a,h
  27++C3C0 E6 7F                                and     $7F
  28++C3C2 67                                   ld      h,a
  29++C3C3                                      ;110921 debugld      h,0
  30++C3C3 ED 5B 13 C0                          ld		de,(SBnKylo)
  31++C3C7 3A 15 C0                             ld		a,(SBnKysgn)
  32++C3CA E6 80                                and		$80									; make sure we only have bit 7
  33++C3CC 4F                                   ld		c,a
  34++C3CD                                      MMUSelectMathsBankedFns
  34++C3CD ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
  35++C3D1 CD 2F 00                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  36++C3D4 B4                                   or		h									; combine sign in A with H
  37++C3D5 67                                   ld		h,a
  38++C3D6 22 7A C0                             ld		(SBnKYScaled),hl
  39++C3D9              ; ..................................
  40++C3D9 2A 82 C0                             ld		hl,(SBnKXX12zLo)					; and now repeat for Z cooord
  41++C3DC 7C                                   ld		a,h
  42++C3DD E6 80                                and		$80
  43++C3DF 47                                   ld		b,a
  44++C3E0                                      ;110921 debugld      h,0
  45++C3E0 7C                                   ld      a,h
  46++C3E1 E6 7F                                and     $7F
  47++C3E3 67                                   ld      h,a
  48++C3E4                                      ;110921 debugld      h,0
  49++C3E4 ED 5B 16 C0                          ld		de,(SBnKzlo)
  50++C3E8 3A 18 C0                             ld		a,(SBnKzsgn)
  51++C3EB E6 80                                and		$80									; make sure we only have bit 7
  52++C3ED 4F                                   ld		c,a
  53++C3EE                                      MMUSelectMathsBankedFns
  53++C3EE ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
  54++C3F2 CD 2F 00                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  55++C3F5 B4                                   or		h									; combine sign in A with H
  56++C3F6 67                                   ld		h,a
  57++C3F7 CB 7C                                bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
  58++C3F9 20 16                                jr		nz,.ClampZto4                        ; result was negative so we need to clamp to 4
  59++C3FB E6 7F                                and     $7F                                 ; a = value unsigned
  60++C3FD 20 06                                jr      nz,.NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
  61++C3FF 7D                                   ld      a,l                                 ; get low byte now
  62++C400                                      JumpIfALTNusng 4,.ClampZto4					; if its < 4 then fix at 4
  62++C400 FE 04       >                        cp      4
  62++C402 DA 11 C4    >                        jp		c, .ClampZto4
  63++C405 22 7C C0     .NoClampZto4:           ld		(SBnKZScaled),hl					; hl = signed calculation and > 4
  64++C408 7D                                   ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
  65++C409 32 8D 7F                             ld      (varT),a
  66++C40C 7C                                   ld		a,h
  67++C40D 32 70 7F                             ld      (varU),a
  68++C410 C9                                   ret
  69++C411              ; This is where we limit 4 to a minimum of 4
  70++C411 21 04 00     .ClampZto4:             ld		hl,4
  71++C414 22 7C C0                             ld		(SBnKZScaled),hl; BODGE FOR NOW
  72++C417 7D                                   ld		a,l
  73++C418 32 8D 7F                             ld      (varT),a                            ;                                                                           ;;;
  74++C41B 7C                                   ld		a,h
  75++C41C 32 70 7F                             ld      (varU),a 						; compatibility for now
  76++C41F C9                                   ret
  77++C420
# file closed: ././Universe/Sun/TransposeSunXX12BySunToSunXX15.asm
 383+ C420
 384+ C420
 385+ C420 ED 4B 7C C0  ScaleSunTo8Bit:			ld			bc,(SBnKZScaled)
 386+ C424 2A 78 C0                             ld			hl,(SBnKXScaled)
 387+ C427 ED 5B 7A C0                          ld			de,(SBnKYScaled)
 388+ C42B 78           .SetABSbc:              ld			a,b
 389+ C42C DD 67                                ld			ixh,a
 390+ C42E E6 7F                                and			SignMask8Bit
 391+ C430 47                                   ld			b,a									; bc = ABS bc
 392+ C431 7C           .SetABShl:              ld			a,h
 393+ C432 DD 6F                                ld			ixl,a
 394+ C434 E6 7F                                and			SignMask8Bit
 395+ C436 67                                   ld			h,a									; hl = ABS hl
 396+ C437 7A           .SetABSde:              ld			a,d
 397+ C438 FD 67                                ld			iyh,a
 398+ C43A E6 7F                                and			SignMask8Bit
 399+ C43C 57                                   ld			d,a									; de = ABS de
 400+ C43D 78           .ScaleNodeTo8BitLoop:   ld          a,b		                            ; U	\ z hi
 401+ C43E B4                                   or			h                                   ; XX15+1	\ x hi
 402+ C43F B2                                   or			d                                   ; XX15+4	\ y hi
 403+ C440 28 0F                                jr          z,.ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 404+ C442                                      ShiftHLRight1
 404+ C442 CB 3C       >			   srl h
 404+ C444 CB 1D       >			   rr  l
 405+ C446                                      ShiftDERight1
 405+ C446 CB 3A       >			   srl d
 405+ C448 CB 1B       >			   rr  e
 406+ C44A                                      ShiftBCRight1
 406+ C44A CB 38       >			   srl b
 406+ C44C CB 19       >			   rr  c
 407+ C44E C3 3D C4                             jp          .ScaleNodeTo8BitLoop
 408+ C451              ; now we have scaled values we have to deal with sign
 409+ C451 DD 7C        .ScaleNodeDone:          ld			a,ixh								; get sign bit and or with b
 410+ C453 E6 80                                and			SignOnly8Bit
 411+ C455 B0                                   or			b
 412+ C456 47                                   ld			b,a
 413+ C457 DD 7D        .SignforHL:              ld			a,ixl								; get sign bit and or with b
 414+ C459 E6 80                                and			SignOnly8Bit
 415+ C45B B4                                   or			h
 416+ C45C 67                                   ld			h,a
 417+ C45D FD 7C        .SignforDE:              ld			a,iyh								; get sign bit and or with b
 418+ C45F E6 80                                and			SignOnly8Bit
 419+ C461 B2                                   or			d
 420+ C462 57                                   ld			d,a
 421+ C463 ED 43 7C C0  .SignsDoneSaveResult:	ld			(SBnKZScaled),bc
 422+ C467 22 78 C0                             ld			(SBnKXScaled),hl
 423+ C46A ED 53 7A C0                          ld			(SBnKYScaled),de
 424+ C46E 78                                   ld			a,b
 425+ C46F 32 70 7F                             ld			(varU),a
 426+ C472 79                                   ld			a,c
 427+ C473 32 8D 7F                             ld			(varT),a
 428+ C476 C9                                   ret
 429+ C477
 430+ C477              ;--------------------------------------------------------------------------------------------------------
 431+ C477              ;;;;X = normal scale
 432+ C477              ;;;;ZtempHi = zhi
 433+ C477              ;;;;......................................................
 434+ C477              ;;;; if ztemp hi <> 0                                   ::Scale Object Distance
 435+ C477              ;;;;  Loop                                              ::LL90
 436+ C477              ;;;;     inc X
 437+ C477              ;;;;     divide X, Y & ZtempHiLo by 2
 438+ C477              ;;;;  Until ZtempHi = 0
 439+ C477              ;;;;......................................................
 440+ C477              ;-LL21---------------------------------------------------------------------------------------------------
 441+ C477              ;                        include "./Universe/NormaliseTransMat.asm"
 442+ C477              ;-LL91---------------------------------------------------------------------------------------------------
 443+ C477
 444+ C477              ; Now we have
 445+ C477              ;   * XX18(2 1 0) = (x_sign x_hi x_lo)
 446+ C477              ;   * XX18(5 4 3) = (y_sign y_hi y_lo)
 447+ C477              ;   * XX18(8 7 6) = (z_sign z_hi z_lo)
 448+ C477              ;
 449+ C477              ;--------------------------------------------------------------------------------------------------------
 450+ C477              ;--------------------------------------------------------------------------------------------------------
 451+ C477              ;   XX12(1 0) = [x y z] . sidev  = (dot_sidev_sign dot_sidev_lo)  = dot_sidev
 452+ C477              ;   XX12(3 2) = [x y z] . roofv  = (dot_roofv_sign dot_roofv_lo)  = dot_roofv
 453+ C477              ;   XX12(5 4) = [x y z] . nosev  = (dot_nosev_sign dot_nosev_lo)  = dot_nosev
 454+ C477              ; Returns
 455+ C477              ;
 456+ C477              ;   XX12(1 0)            The dot product of [x y z] vector with the sidev (or _x)
 457+ C477              ;                        vector, with the sign in XX12+1 and magnitude in XX12
 458+ C477              ;
 459+ C477              ;   XX12(3 2)            The dot product of [x y z] vector with the roofv (or _y)
 460+ C477              ;                        vector, with the sign in XX12+3 and magnitude in XX12+2
 461+ C477              ;
 462+ C477              ;   XX12(5 4)            The dot product of [x y z] vector with the nosev (or _z)
 463+ C477              ;                        vector, with the sign in XX12+5 and magnitude in XX12+4
 464+ C477
 465+ C477
 466+ C477               ; TESTEDOK
 467+ C477              SXX12DotOneRow:
 468+ C477              SXX12CalcX:              N0equN1byN2div256 varT, (hl), (SBnKXScaled)       ; T = (hl) * regSunXX15fx /256
 468+ C477 3A 78 C0    >                        ld      a,(SBnKXScaled)                        ;
 468+ C47A 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 468+ C47B 7E          >                        ld      a,(hl)                        ; A = XX16 element
 468+ C47C 57          >                        ld      d,a
 468+ C47D ED 30       >                        mul
 468+ C47F 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 468+ C480 32 8D 7F    >                        ld      (varT),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 469+ C483 23                                   inc     hl                                  ; move to sign byte
 470+ C484              SXX12CalcXSign:          AequN1xorN2 SBnKXScaledSign,(hl)             ;
 470+ C484 3A 79 C0    >                        ld      a,(SBnKXScaledSign)
 470+ C487 AE          >                        xor     (hl)
 471+ C488 32 73 7F                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 472+ C48B 23                                   inc     hl
 473+ C48C              SXX12CalcY:              N0equN1byN2div256 varQ, (hl),(SBnKYScaled)       ; Q = XX16 * SunXX15 /256 using varQ to hold regSunXX15fx
 473+ C48C 3A 7A C0    >                        ld      a,(SBnKYScaled)                        ;
 473+ C48F 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 473+ C490 7E          >                        ld      a,(hl)                        ; A = XX16 element
 473+ C491 57          >                        ld      d,a
 473+ C492 ED 30       >                        mul
 473+ C494 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 473+ C495 32 71 7F    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 474+ C498                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 474+ C498 3A 8D 7F    >                        ld       a,(varT)
 474+ C49B 32 72 7F    >                        ld       (varR),a
 475+ C49E 23                                   inc     hl
 476+ C49F                                      AequN1xorN2 SBnKYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 476+ C49F 3A 7B C0    >                        ld      a,(SBnKYScaledSign)
 476+ C4A2 AE          >                        xor     (hl)
 477+ C4A3              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 478+ C4A3 E5           SSTequSRplusAQ           push    hl
 479+ C4A4 CD 6D 9C                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 480+ C4A7 E1                                   pop     hl
 481+ C4A8 32 8D 7F                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 482+ C4AB 23                                   inc     hl
 483+ C4AC              SXX12CalcZ:              N0equN1byN2div256 varQ,(hl),(SBnKZScaled)       ; Q = |sidev_z| * z_lo / 256
 483+ C4AC 3A 7C C0    >                        ld      a,(SBnKZScaled)                        ;
 483+ C4AF 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 483+ C4B0 7E          >                        ld      a,(hl)                        ; A = XX16 element
 483+ C4B1 57          >                        ld      d,a
 483+ C4B2 ED 30       >                        mul
 483+ C4B4 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 483+ C4B5 32 71 7F    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 484+ C4B8                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 484+ C4B8 3A 8D 7F    >                        ld       a,(varT)
 484+ C4BB 32 72 7F    >                        ld       (varR),a
 485+ C4BE 23                                   inc     hl
 486+ C4BF                                      AequN1xorN2 SBnKZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 486+ C4BF 3A 7D C0    >                        ld      a,(SBnKZScaledSign)
 486+ C4C2 AE          >                        xor     (hl)
 487+ C4C3              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 488+ C4C3 CD 6D 9C                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 489+ C4C6              ; Now we exit with A = result S = Sign
 490+ C4C6 C9                                   ret
 491+ C4C7
 492+ C4C7
 493+ C4C7
 494+ C4C7              ;--------------------------------------------------------------------------------------------------------
 495+ C4C7                                      include "./Universe/Sun/CopySunXX12ScaledToSunXX18.asm"
# file opened: ././Universe/Sun/CopySunXX12ScaledToSunXX18.asm
   1++C4C7              CopySXX12ScaledToSXX18:
   2++C4C7              CopyResultToSDrawCam:
   3++C4C7                      ldCopyByte SXX12         ,SXX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++C4C7 3A 7E C0    >                        ld       a,(SXX12)
   3++C4CA 32 6C C0    >                        ld       (SXX18),a
   4++C4CD                      ldCopyByte SXX12+1       ,SXX18+2           ; XX12+1 => XX18+2
   4++C4CD 3A 7F C0    >                        ld       a,(SXX12+1)
   4++C4D0 32 6E C0    >                        ld       (SXX18+2),a
   5++C4D3                      ldCopyByte SXX12+2       ,SXX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++C4D3 3A 80 C0    >                        ld       a,(SXX12+2)
   5++C4D6 32 6F C0    >                        ld       (SXX18+3),a
   6++C4D9                      ldCopyByte SXX12+3       ,SXX18+5           ; XX12+3 => XX18+5
   6++C4D9 3A 81 C0    >                        ld       a,(SXX12+3)
   6++C4DC 32 71 C0    >                        ld       (SXX18+5),a
   7++C4DF                      ldCopyByte SXX12+4       ,SXX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++C4DF 3A 82 C0    >                        ld       a,(SXX12+4)
   7++C4E2 32 72 C0    >                        ld       (SXX18+6),a
   8++C4E5                      ldCopyByte SXX12+5       ,SXX18+8           ; XX12+5 => XX18+8
   8++C4E5 3A 83 C0    >                        ld       a,(SXX12+5)
   8++C4E8 32 74 C0    >                        ld       (SXX18+8),a
   9++C4EB C9                   ret
  10++C4EC
# file closed: ././Universe/Sun/CopySunXX12ScaledToSunXX18.asm
 496+ C4EC              ;                        include "./Variables/CopySunXX12toSunXX15.asm"
 497+ C4EC              ;                       include "./Variables/CopySunXX18toSunXX15.asm"
 498+ C4EC              ;                       include "./Variables/CopySunXX18ScaledToSunXX15.asm"
 499+ C4EC              ;                       include "./Variables/CopySunXX12ToScaled.asm"
 500+ C4EC              ;--------------------------------------------------------------------------------------------------------
 501+ C4EC              ;                        include "./Maths/Utilities/DotProductXX12SunXX15.asm"
 502+ C4EC              ;--------------------------------------------------------------------------------------------------------
 503+ C4EC
 504+ C4EC DD 25        ScaleDownSXX15byIXH:    dec     ixh
 505+ C4EE F8                                   ret     m
 506+ C4EF 21 78 C0                             ld      hl,SBnKXScaled
 507+ C4F2 CB 3E                                srl     (hl)                        ; SunXX15  \ xnormal lo/2 \ LL93+3 \ counter X
 508+ C4F4 23                                   inc     hl                          ; looking at SunXX15 x sign now
 509+ C4F5 23                                   inc     hl                          ; looking at SunXX15 y Lo now
 510+ C4F6 CB 3E                                srl     (hl)                        ; SunXX15+2    \ ynormal lo/2
 511+ C4F8 23                                   inc     hl                          ; looking at SunXX15 y sign now
 512+ C4F9 23                                   inc     hl                          ; looking at SunXX15 z Lo now
 513+ C4FA CB 3E                                srl     (hl)
 514+ C4FC C3 EC C4                             jp      ScaleDownSXX15byIXH
 515+ C4FF C9                                   ret
 516+ C500
 517+ C500 21 6C C0     DivideSXX18By2:         ld      hl,SBnKDrawCam0xLo
 518+ C503 CB 3E                                srl     (hl)                        ; XX18  \ xnormal lo/2 \ LL93+3 \ counter X
 519+ C505 23                                   inc     hl                          ; looking at XX18 x sign now
 520+ C506 23                                   inc     hl                          ; looking at XX18 y Lo now
 521+ C507 CB 3E                                srl     (hl)                        ; XX18+2    \ ynormal lo/2
 522+ C509 23                                   inc     hl                          ; looking at XX18 y sign now
 523+ C50A 23                                   inc     hl                          ; looking at XX18 z Lo now
 524+ C50B CB 3E                                srl     (hl)
 525+ C50D C9                                   ret
 526+ C50E
 527+ C50E              ; ......................................................                                                         ;;;
 528+ C50E
 529+ C50E
 530+ C50E
 531+ C50E
 532+ C50E              ; Pitch and roll are 2 phases
 533+ C50E              ; 1 - we apply our pitch and roll to the ship position
 534+ C50E              ;       x -> x + alpha * (y - alpha * x)
 535+ C50E              ;       y -> y - alpha * x - beta * z
 536+ C50E              ;       z -> z + beta * (y - alpha * x - beta * z)
 537+ C50E              ; which can be simplified as:
 538+ C50E              ;       1. K2 = y - alpha * x
 539+ C50E              ;       2. z = z + beta * K2
 540+ C50E              ;       3. y = K2 - beta * z
 541+ C50E              ;       4. x = x + alpha * y
 542+ C50E              ; 2 - we apply our patch and roll to the ship orientation
 543+ C50E              ;      Roll calculations:
 544+ C50E              ;
 545+ C50E              ;        nosev_y = nosev_y - alpha * nosev_x_hi
 546+ C50E              ;        nosev_x = nosev_x + alpha * nosev_y_hi
 547+ C50E              ;      Pitch calculations:
 548+ C50E              ;
 549+ C50E              ;        nosev_y = nosev_y - beta * nosev_z_hi
 550+ C50E              ;        nosev_z = nosev_z + beta * nosev_y_hi
 551+ C50E
 552+ C50E
 553+ C50E                          INCLUDE "./Universe/Sun/SunApplyMyRollAndPitch.asm"
# file opened: ././Universe/Sun/SunApplyMyRollAndPitch.asm
   1++C50E
   2++C50E              ; Full version
   3++C50E              ; 1. K2 = y - alpha * x
   4++C50E              ; 2. z = z + beta * K2
   5++C50E              ; 3. y = K2 - beta * z
   6++C50E              ; 4. x = x + alpha * y
   7++C50E
   8++C50E
   9++C50E
  10++C50E              ; SunrollWork holds Alpha intermidate results
  11++C50E              ;  1. K2 = y - alpha * x
  12++C50E              ;  2. z = z + beta * K2
  13++C50E              ;  3. y = K2 - beta * z
  14++C50E              ;  4. x = x + alpha * y
  15++C50E              ;.... or
  16++C50E              ;  2. z = z + (beta * (y - alpha * x))
  17++C50E              ;  3. y = (y - alpha * x) - (beta * z)
  18++C50E              ;  4. x = x + (alpha * y)
  19++C50E
  20++C50E
  21++C50E              ;----------------------------------------------------------------------------------------------------------------------------------
  22++C50E              ; Sun version of pitch and roll is a 24 bit calculation 1 bit sign + 23 bit value
  23++C50E              ; Need to write a test routine for roll and pitchs
  24++C50E 00 00 00 00  SunAlphaMulX            DS 4
  25++C512 00 00 00 00  SunAlphaMulY            DS 4
  26++C516 00 00 00 00  SunBetaMulZ             DS 4
  27++C51A 00 00 00     SunK2                   DS 3
  28++C51D
  29++C51D 3A 8A 7E     SunApplyMyRollAndPitch: ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
  30++C520 21 74 7E                             ld      hl,BETA
  31++C523 B6                                   or      (hl)
  32++C524 E6 7F                                and     SignMask8Bit
  33++C526 CA E7 C5                             jp      z,.NoRotation
  34++C529 3A 8A 7E     .CalcAlphaMulX:         ld      a,(ALPHA)                   ; get roll magnitude
  35++C52C EE 80                                xor     SignOnly8Bit                ; d = -alpha (Q value)
  36++C52E 57                                   ld      d,a                         ; .
  37++C52F 3A 10 C0                             ld      a,(SBnKxlo)                 ; HLE = x sgn, hi, lo
  38++C532 5F                                   ld      e,a                         ; .
  39++C533 2A 11 C0                             ld      hl,(SBnKxhi)                ; .
  40++C536 CD FA 91                             call    mulHLEbyDSigned             ; DELC = x * -alpha, so DEL = X * -alpha / 256 where d = sign byte
  41++C539              .SaveAlphaMulX:         ;ld      a,c                         ; a = upper byte of results which will have the sign               ONLY NEEDED FOR DEBUGGING TEST
  42++C539                                      ;ld      (SunAlphaMulX),a            ; save sign from result, ELC holds actual result                   ONLY NEEDED FOR DEBUGGING TEST
  43++C539 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
  44++C53A 32 0F C5                             ld      (SunAlphaMulX+1),a
  45++C53D 7B                                   ld      a,e
  46++C53E 32 10 C5                             ld      (SunAlphaMulX+2),a
  47++C541 7A                                   ld      a,d
  48++C542 32 11 C5                             ld      (SunAlphaMulX+3),a          ; we actually only want X1 X2 X3 later as its /256
  49++C545 ED 5B 14 C0  .CalcK2:                ld      de,(SBnKyhi)                ; DEL = Y
  50++C549 3A 13 C0                             ld      a,(SBnKylo)                 ; .
  51++C54C 6F                                   ld      l,a                         ; .
  52++C54D ED 4B 10 C5                          ld      bc,(SunAlphaMulX+2)         ; BCH = Y sgn, hi, lo, we loose the C from result
  53++C551 3A 0F C5                             ld      a,(SunAlphaMulX+1)          ; Deal with sign in byte 4
  54++C554 67                                   ld      h,a                         ; .
  55++C555                                      MMUSelectMathsBankedFns
  55++C555 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
  56++C559 CD AF 00                             call    AddBCHtoDELsigned           ; DEL = y - (alpha * x)
  57++C55C 7D                                   ld      a,l                         ; K2  = DEA = DEL = y - (alpha * x)
  58++C55D 32 1A C5                             ld      (SunK2),a                   ; we also need to save l for teh beta k2 calc
  59++C560 ED 53 1B C5                          ld      (SunK2+1),de                ;
  60++C564 EB           .CalcBetaMulK2:         ex      de,hl                       ; HLE == DEA
  61++C565 5F                                   ld      e,a                         ; .
  62++C566 3A 74 7E                             ld      a,(BETA)                    ; D = BETA
  63++C569 57                                   ld      d,a                         ; .
  64++C56A CD FA 91                             call    mulHLEbyDSigned             ; DELC = Beta * K2, DEL = Beta/256 * K2
  65++C56D ED 4B 17 C0  .CalcZ:                 ld      bc,(SBnKzhi)                ; BCH = z
  66++C571 3A 16 C0                             ld      a,(SBnKzlo)                 ;
  67++C574 67                                   ld      h,a                         ;
  68++C575                                      MMUSelectMathsBankedFns
  68++C575 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
  69++C579 CD AF 00                             call    AddBCHtoDELsigned           ; DEL still = Beta * K2 so its z + Beta * K2
  70++C57C ED 53 17 C0                          ld      (SBnKzhi),de                ; z = resuklt
  71++C580 7D                                   ld      a,l                         ; .
  72++C581 32 16 C0                             ld      (SBnKzlo),a                 ; .
  73++C584 3A 74 7E     .CalcBetaZ:             ld      a,(BETA)
  74++C587 EE 80                                xor     SignOnly8Bit                ; d = -beta (Q value)
  75++C589 57                                   ld      d,a                         ; .
  76++C58A 3A 16 C0                             ld      a,(SBnKzlo)                 ; HLE = z
  77++C58D 5F                                   ld      e,a                         ; .
  78++C58E 2A 17 C0                             ld      hl,(SBnKzhi)                ; .
  79++C591 CD FA 91                             call    mulHLEbyDSigned             ; DELC = z * -beta, so DEL = Z * -beta / 256 where d = sign byte
  80++C594              .SaveAlphaMulZ:         ;ld      a,c                         ; a = upper byte of results which will have the sign             ONLY NEEDED FOR DEBUGGING TEST
  81++C594                                      ;ld      (SunBetaMulZ),a             ; save sign from result, ELC holds actual result                 ONLY NEEDED FOR DEBUGGING TEST
  82++C594                                      ;ld      a,l                         ; also save all of alpha *X as we will need it later             ONLY NEEDED FOR DEBUGGING TEST
  83++C594                                      ;ld      (SunBetaMulZ+1),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  84++C594                                      ;ld      a,e                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  85++C594                                      ;ld      (SunBetaMulZ+2),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  86++C594                                      ;ld      a,d                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  87++C594                                      ;ld      (SunBetaMulZ+3),a           ; we actually only want X1 X2 X3 later as its /256               ONLY NEEDED FOR DEBUGGING TEST
  88++C594 42 4B        .CalcY:                 ld      bc,de                       ; bch = - Beta * z
  89++C596 65                                   ld      h,l
  90++C597 ED 5B 1B C5                          ld      de,(SunK2+1)                ; DEL = k2
  91++C59B 3A 1A C5                             ld      a,(SunK2)
  92++C59E 6F                                   ld      l,a
  93++C59F                                      MMUSelectMathsBankedFns
  93++C59F ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
  94++C5A3 CD AF 00                             call    AddBCHtoDELsigned           ; DEL = K2 - Beta * Z
  95++C5A6 ED 53 14 C0                          ld      (SBnKyhi),de                ; y = DEL = K2 - Beta * Z
  96++C5AA 7D                                   ld      a,l                         ; .
  97++C5AB 32 13 C0                             ld      (SBnKylo),a                 ; .
  98++C5AE 3A 8A 7E     .CalcAlphaMulY:         ld      a,(ALPHA)
  99++C5B1 57                                   ld      d,a                         ; d = alpha (Q value)
 100++C5B2 3A 13 C0                             ld      a,(SBnKylo)                 ; HLE = x sgn, hi, lo
 101++C5B5 5F                                   ld      e,a                         ; .
 102++C5B6 2A 14 C0                             ld      hl,(SBnKyhi)                ; .
 103++C5B9 CD FA 91                             call    mulHLEbyDSigned             ; DELC = y * alpha, so DEL = Y * alpha / 256 where d = sign byte
 104++C5BC 79           .SaveAlphaMulY:         ld      a,c                         ; a = upper byte of results which will have the sign
 105++C5BD 32 12 C5                             ld      (SunAlphaMulY),a            ; save sign from result, ELC holds actual result
 106++C5C0 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
 107++C5C1 32 13 C5                             ld      (SunAlphaMulY+1),a
 108++C5C4 7B                                   ld      a,e
 109++C5C5 32 14 C5                             ld      (SunAlphaMulY+2),a
 110++C5C8 7A                                   ld      a,d
 111++C5C9 32 15 C5                             ld      (SunAlphaMulY+3),a
 112++C5CC 42 4B        .CalcxPLusAlphaY:       ld      bc,de                        ; BCH = Y sgn, hi, lo, we loose the C from result Deal with sign in byte 4
 113++C5CE 65                                   ld      h,l                         ; .
 114++C5CF ED 5B 11 C0                          ld      de,(SBnKxhi)                ; DEL = Y
 115++C5D3 3A 10 C0                             ld      a,(SBnKxlo)                 ; .
 116++C5D6 6F                                   ld      l,a                         ; .
 117++C5D7                                      MMUSelectMathsBankedFns
 117++C5D7 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 118++C5DB CD AF 00                             call    AddBCHtoDELsigned           ; DEL = x + alpha * Y
 119++C5DE 7A           .SaveResult1:           ld      a,d                         ; Result 1 (X) = AHL + DEL
 120++C5DF 63                                   ld      h,e                         ;
 121++C5E0 32 12 C0     .CopyResultTo2:         ld      (SBnKxlo+2),a               ; .
 122++C5E3 22 10 C0                             ld      (SBnKxlo) ,hl               ; .
 123++C5E6 C9                                   ret
 124++C5E7 3A 6B 7F     .NoRotation:            ld      a,(DELTA)                   ; BCH = - Delta
 125++C5EA                                      ReturnIfAIsZero
 125++C5EA A7          >                        and     a
 125++C5EB C8          >                        ret     z
 126++C5EC 0E 00                                ld      c,0                         ;
 127++C5EE 67                                   ld      h,a                         ;
 128++C5EF 06 80                                ld      b,$80                       ;
 129++C5F1 ED 5B 17 C0                          ld      de,(SBnKzhi)                ; DEL = z position
 130++C5F5 3A 16 C0                             ld      a,(SBnKzlo)                 ; .
 131++C5F8 6F                                   ld      l,a                         ; .
 132++C5F9                                      MMUSelectMathsBankedFns
 132++C5F9 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 133++C5FD CD AF 00                             call    AddBCHtoDELsigned           ; update speed
 134++C600 ED 53 17 C0                          ld      (SBnKzhi),DE                ; write back to zpos
 135++C604 7D                                   ld      a,l
 136++C605 32 16 C0                             ld      (SBnKzlo),a                ;
 137++C608 C9                                   ret
 138++C609              ;
 139++C609              ;SunApplyMyRollAndPitch: ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
 140++C609              ;                        ld      hl,BETA
 141++C609              ;                        or      (hl)
 142++C609              ;                        and     SignMask8Bit
 143++C609              ;                        ret     z
 144++C609              ;.CalcZ:                 ;break
 145++C609              ;                        ld      a,(ALPHA)                   ; get roll magnitude
 146++C609              ;                        xor     SignOnly8Bit                ; get Q = -alpha
 147++C609              ;                        ld      d,a                         ; d reg represents Q (abount to roll)
 148++C609              ;                        ld      a,(SBnKxlo)                 ; HLE = x sgn, hi, lo
 149++C609              ;                        ld      e,a                         ;
 150++C609              ;                        ld      hl,(SBnKxhi)                ;
 151++C609              ;                        call    mulHLEbyDSigned             ; DELC = x * -alpha, so DEL = X * -alpha / 256
 152++C609              ;                        ld      a,d
 153++C609              ;                        ld      (SunRollResultp4),a         ; save D (I guess we need the sign?)
 154++C609              ;.CalcYPlusDEL:          ld      a,(SBnKylo)                 ; BCH = Y sgn, hi, lo
 155++C609              ;                        ld      h,a
 156++C609              ;                        ld      bc,(SBnKyhi)
 157++C609              ;                        call    AddBCHtoDELsigned           ; DEL = Y - ( X *  alpha /256)
 158++C609              ;.SaveResult1:           ld      a,l                         ; SunPitchWork = DEL
 159++C609              ;                        ;ld      (SunRollResult), a          ; SunPitchWork + 0 = L
 160++C609              ;                        ex      de,hl                       ; SunPitchWork + 1 = E
 161++C609              ;.CopyResultTo2:         ld      (SunRollResult+1),a         ; SunPitchWork + 2 = D
 162++C609              ;                        ld      (SunRollResult+1) ,hl       ; Copy K to K2 (y - alpha * x)
 163++C609              ;                        ;ld      (SunRollResult2+1),hl       ; also HLA = result
 164++C609              ;                        ld      a,(SunRollResult)           ; .
 165++C609              ;                        ;ld      (SunRollResult2),a          ; .
 166++C609              ;.CalcY:                 ld      e,a                         ; so now HLE = result
 167++C609              ;                        ld      a,(BETA)                    ; get pitch
 168++C609              ;                        ld      d,a                         ; now D = BETA
 169++C609              ;                        call    mulHLEbyDSigned             ; DELC = (y - alpha * x /256 ) * Beta
 170++C609              ;                        ld      bc,(SBnKzhi)                ; BCH = z
 171++C609              ;                        ld      a,(SBnKzlo)                 ;
 172++C609              ;                        ld      h,a                         ;
 173++C609              ;                        call    AddBCHtoDELsigned           ; DEL = z + ((y - alpha * x /256 ) * Beta) /256
 174++C609              ;.SaveZResult:           ld      (SunZResult+1),de           ; We now have a z result which we save
 175++C609              ;                        ld      (SBnKzhi),de                ; .
 176++C609              ;                        ld      a,l                         ; .
 177++C609              ;                        ld      (SunZResult),a              ; .
 178++C609              ;                        ld      (SBnKzlo),a                 ; .
 179++C609              ;.CalcMinusBetaMulZ:     ex      de,hl                       ; HLE = DEL = z post calculation
 180++C609              ;                        ld      e,l                         ;
 181++C609              ;                        ld      a,(BETA)                    ; d = - BETA
 182++C609              ;                        ld      d,a                         ;
 183++C609              ;                        xor     SignOnly8Bit                ;
 184++C609              ;                        call    mulHLEbyDSigned             ; DELC = z * - BETA
 185++C609              ;                        ld      bc, (SunRollResult+1)       ; BCH = (y - alpha * x) (or K2)
 186++C609              ;                        ld      a,(SunRollResult)           ;
 187++C609              ;                        ld      h,a                         ;
 188++C609              ;                        call    AddBCHtoDELsigned           ; DEL = (y - alpha * x) - (Z * BETA)
 189++C609              ;                        ld      (SBnKyhi),de                ; y = (y - alpha * x) - (Z * BETA)
 190++C609              ;                        ld      a,l                         ;
 191++C609              ;                        ld      (SBnKylo),a                 ;
 192++C609              ;.CalcX:                 ex      de,hl                       ; HLE = DEL = Y
 193++C609              ;                        ld      e,l                         ;
 194++C609              ;                        ld      a,(ALPHA)
 195++C609              ;                        ld      d,a                         ; D = alpha
 196++C609              ;                        call    mulHLEbyDSigned             ; DELC = Y * alpha
 197++C609              ;                        ld      bc,(SBnKxhi)                ; BCH = x
 198++C609              ;                        ld      a,(SBnKxlo)                 ;
 199++C609              ;                        ld      h,a                         ;
 200++C609              ;                        call    AddBCHtoDELsigned           ; DEL = x + (alpha * y /256 )
 201++C609              ;                        ld      (SBnKxhi),de                ; x = x + (alpha * y /256 )
 202++C609              ;                        ld      a,h                         ;
 203++C609              ;                        ld      (SBnKxlo),a                 ;
 204++C609              ;                        ret
 205++C609              ;
# file closed: ././Universe/Sun/SunApplyMyRollAndPitch.asm
 554+ C609              ;            INCLUDE "./Universe/SunApplyShipRollAndPitch.asm"
 555+ C609
 556+ C609 00           SunOnScreen             DB 0
 557+ C60A 00 00        cLineArrayPtr            DW 0
 558+ C60C 00           LineCount               DB 0
 559+ C60D 00           RaggedSize              DB 0
 560+ C60E 00           MinYOffset              DB 0
 561+ C60F 00           MaxYOffSet              DB 0
 562+ C610 00 00        SunScrnX                DW  0       ; signed
 563+ C612 00 00        SunScrnY                DW  0       ; signed
 564+ C614 00           SunRadius               DB  0       ; unsigned
 565+ C615              ; draw circle
 566+ C615
 567+ C615              ;
 568+ C615              ;DIVD3B2 K(3 2 1 0) = (A P+1 P) / (z_sign z_hi z_lo)
 569+ C615
 570+ C615 00 00 00 00  SunVarK                 DS 4
 571+ C619 00 00 00     SunVarP                 DS 3
 572+ C61C 00           SunVarQ                 DS 1
 573+ C61D 00           SunVarR                 DS 1
 574+ C61E 00           SunVarS                 DS 1
 575+ C61F 00           SunVarT                 DS 1
 576+ C620
 577+ C620              ; Optimisation
 578+ C620              ; if a <> 0
 579+ C620              ;       divide AH by CD
 580+ C620              ; if h <> 0
 581+ C620              ;      if c <> 0 return 0
 582+ C620              ;      else
 583+ C620              ;        divide HL by DE
 584+ C620              ; if l <>0
 585+ C620              ;      if c or d <> 0 return 0
 586+ C620              ;      else
 587+ C620              ;        divide l by e
 588+ C620              ;
 589+ C620 47           SunAHLequAHLDivCDE:     ld      b,a                         ; save a reg
 590+ C621 79                                   ld      a,c                         ; check for divide by zero
 591+ C622 B2                                   or      d                           ; .
 592+ C623 B3                                   or      e                           ; .
 593+ C624                                      JumpIfZero      .divideByZero       ; .
 593+ C624 CA 3D C6    >                        jp	z,.divideByZero
 594+ C627 78                                   ld      a,b                         ; get a back
 595+ C628                                      JumpIfAIsNotZero    .divideAHLbyCDE
 595+ C628 A7          >                        and     a
 595+ C629 C2 44 C6    >                        jp	    nz,.divideAHLbyCDE
 596+ C62C 7C           .AIsZero:               ld      a,h
 597+ C62D                                      JumpIfAIsNotZero    .divideHLbyDE
 597+ C62D A7          >                        and     a
 597+ C62E C2 4B C6    >                        jp	    nz,.divideHLbyDE
 598+ C631 7D           .HIsZero:               ld      a,l
 599+ C632                                      JumpIfAIsNotZero    .divideLbyE
 599+ C632 A7          >                        and     a
 599+ C633 C2 5A C6    >                        jp	    nz,.divideLbyE
 600+ C636              .resultIsZero:          ZeroA
 600+ C636 AF          >                        xor a
 601+ C637 67                                   ld      h,a                        ; result is zero so set hlde
 602+ C638 6F                                   ld      l,a                        ; result is zero so set hlde
 603+ C639 54 5D                                ld      de,hl
 604+ C63B                                      ClearCarryFlag
 604+ C63B B7          >                        or a
 605+ C63C C9                                   ret
 606+ C63D 3E FF        .divideByZero:          ld      a,$FF
 607+ C63F 67                                   ld      h,a
 608+ C640 6F                                   ld      l,a
 609+ C641 54 5D                                ld      de,hl
 610+ C643                                      SetCarryFlag
 610+ C643 37          >                        scf
 611+ C644              ; AHL = ahl/cde, this could be a genuine 24 bit divide
 612+ C644              ; if AHL is large and cde small then the value will be big so will be off screen so we can risk 16 bit divide
 613+ C644 CD 41 90     .divideAHLbyCDE:        call    Div24by24
 614+ C647 EB                                   ex      hl,de                         ; ahl is result
 615+ C648 79                                   ld      a,c                           ; ahl is result
 616+ C649                                      ClearCarryFlag
 616+ C649 B7          >                        or a
 617+ C64A
 618+ C64A C9                                   ret
 619+ C64B              ; AHL = 0hl/0de as A is zero
 620+ C64B 79           .divideHLbyDE:          ld      a,c                         ;'if c = 0 then result must be zero
 621+ C64C                                      JumpIfAIsNotZero   .resultIsZero
 621+ C64C A7          >                        and     a
 621+ C64D C2 36 C6    >                        jp	    nz,.resultIsZero
 622+ C650 44 4D                                ld      bc,hl
 623+ C652 CD 6C 96                             call    BC_Div_DE                   ; BC = HL/DE
 624+ C655 60 69                                ld      hl,bc
 625+ C657                                      ZeroA                               ; so we can set A to Zero
 625+ C657 AF          >                        xor a
 626+ C658                                      ClearCarryFlag
 626+ C658 B7          >                        or a
 627+ C659 C9                                   ret
 628+ C65A              ; AHL = 00l/00e as A and H are zero
 629+ C65A 79           .divideLbyE:            ld      a,c                         ; if d = 0 then result must be zero
 630+ C65B B2                                   or      d
 631+ C65C                                      JumpIfAIsNotZero   .resultIsZero
 631+ C65C A7          >                        and     a
 631+ C65D C2 36 C6    >                        jp	    nz,.resultIsZero
 632+ C660 4B                                   ld      c,e
 633+ C661 5D                                   ld      e,l
 634+ C662 CD 2E 96                             call    E_Div_C
 635+ C665 6F                                   ld      l,a
 636+ C666                                      ZeroA
 636+ C666 AF          >                        xor a
 637+ C667 67                                   ld      h,a
 638+ C668                                      ClearCarryFlag
 638+ C668 B7          >                        or a
 639+ C669 C9                                   ret
 640+ C66A
 641+ C66A
 642+ C66A              ; Needs tuning for registers vs memroy
 643+ C66A 22 19 C6     SunKEquAHLDivCDE:       ld      (SunVarP),hl
 644+ C66D 32 1B C6                             ld      (SunVarP+2),a
 645+ C670 ED 53 1C C6                          ld      (SunVarQ),de
 646+ C674 79                                   ld      a,c
 647+ C675 32 1E C6                             ld      (SunVarS),a
 648+ C678 3A 19 C6     SunDivD3B:              ld      a,(SunVarP)                 ; Ensure P is at least 1
 649+ C67B F6 01                                or      1
 650+ C67D 32 19 C6                             ld      (SunVarP),a
 651+ C680 3A 1B C6                             ld      a,(SunVarP+2)               ; T = Sign xor Sign
 652+ C683 21 1E C6                             ld      hl,SunVarS
 653+ C686 AE                                   xor     (hl)
 654+ C687 E6 80                                and     SignOnly8Bit
 655+ C689 32 1F C6                             ld      (SunVarT),a
 656+ C68C 06 00                                ld      b,0                         ; b = y counter
 657+ C68E 3A 1B C6                             ld      a,(SunVarP+2)               ; a = abs high byte of p
 658+ C691 E6 7F                                and     SignMask8Bit                ; .
 659+ C693 2A 19 C6                             ld      hl,(SunVarP)                ; shift P left
 660+ C696              .SunDVL9:               JumpIfAGTENusng   64, .SunDV14      ; if high p > 64 then go to DV14
 660+ C696 FE 40       >                        cp     64
 660+ C698 D2 A5 C6    >                        jp		nc,.SunDV14
 661+ C69B                                      ShiftHLLeft1                        ;
 661+ C69B CB 25       >			   sla l
 661+ C69D CB 14       >			   rl  h
 662+ C69F CB 17                                rl      a                           ;
 663+ C6A1 04                                   inc     b                           ; increase shift count
 664+ C6A2 C3 96 C6                             jp      .SunDVL9
 665+ C6A5 22 19 C6     .SunDV14:               ld      (SunVarP),hl                ; save off var P
 666+ C6A8 32 1B C6                             ld      (SunVarP+2),a
 667+ C6AB 3A 1E C6                             ld      a,(SunVarS)                 ; a= ABS varS
 668+ C6AE E6 7F                                and     SignMask8Bit
 669+ C6B0 2A 1C C6                             ld      hl,(SunVarQ)                ; HL = vars Q & R
 670+ C6B3 05           .SunDVL6:               dec     b                           ; reduce b counter by 1
 671+ C6B4                                      ShiftHLLeft1                        ; varQRA  shift left
 671+ C6B4 CB 25       >			   sla l
 671+ C6B6 CB 14       >			   rl  h
 672+ C6B8 CB 17                                rl      a                           ;
 673+ C6BA F2 B3 C6                             jp      p, .SunDVL6                 ; keep shifting until bit 7 of a is set
 674+ C6BD 22 1C C6                             ld      (SunVarQ),hl                ; save QR
 675+ C6C0 32 1E C6     .SunDV9:                ld      (SunVarS),a                 ; save S
 676+ C6C3                                      ;ld      a,h
 677+ C6C3                                      ;ld      (varQ),a
 678+ C6C3 4F                                   ld      c,a
 679+ C6C4 3A 1B C6                             ld      a,(SunVarP+2)
 680+ C6C7 C5                                   push    bc                          ; save shift counter in b
 681+ C6C8 CD E0 95                             call    DIV16Amul256dCUNDOC
 682+ C6CB                                      ;call    RequAmul256divQ
 683+ C6CB 79                                   ld      a, c
 684+ C6CC 32 72 7F                             ld      (varR),a
 685+ C6CF C1                                   pop     bc                          ; retrieve shift counter
 686+ C6D0 21 00 00                             ld      hl,0                        ; set K to 0
 687+ C6D3 22 15 C6                             ld      (SunVarK),hl                ; .
 688+ C6D6 22 17 C6                             ld      (SunVarK+2),hl              ; .
 689+ C6D9 CB 78                                bit     7,b                         ; is counter positive
 690+ C6DB 28 32                                jr      z,.SunDV12                  ; .
 691+ C6DD 3A 72 7F                             ld      a,(varR)                    ;
 692+ C6E0 CB 27        .SunDVL8:               sla     a                           ; Shift K by 1 left
 693+ C6E2 21 16 C6                             ld      hl,SunVarK+1                ; .
 694+ C6E5 CB 16                                rl      (hl)                        ; .
 695+ C6E7 23                                   inc     hl                          ; .
 696+ C6E8 CB 16                                rl      (hl)                        ; .
 697+ C6EA 23                                   inc     hl                          ; .
 698+ C6EB CB 16                                rl      (hl)                        ; .
 699+ C6ED 04                                   inc     b
 700+ C6EE 20 F0                                jr      nz,.SunDVL8                 ; loop until K is shifted
 701+ C6F0 32 15 C6                             ld      (SunVarK),a
 702+ C6F3 3A 18 C6                             ld      a,(SunVarK+3)
 703+ C6F6 21 1F C6                             ld      hl,SunVarT
 704+ C6F9 B6                                   or      (hl)
 705+ C6FA 32 18 C6                             ld      (SunVarK+3),a
 706+ C6FD C9                                   ret
 707+ C6FE 3A 72 7F     .SunDV13:               ld      a,(varR)                    ; when we get here, shift is zero
 708+ C701 32 15 C6                             ld      (SunVarK),a
 709+ C704 3A 18 C6                             ld      a,(SunVarK+3)
 710+ C707 21 1F C6                             ld      hl,SunVarT
 711+ C70A B6                                   or      (hl)
 712+ C70B 32 18 C6                             ld      (SunVarK+3),a
 713+ C70E C9                                   ret
 714+ C70F 78           .SunDV12:               ld      a,b
 715+ C710 A7                                   and     a
 716+ C711 28 EB                                jr      z,.SunDV13
 717+ C713 3A 72 7F                             ld      a,(varR)                    ; it probably is already R so need to test
 718+ C716 CB 2F        .SunDVL10:              sra     a                           ; Shift K by 1 left
 719+ C718 05                                   dec     b
 720+ C719 20 FB                                jr      nz,.SunDVL10
 721+ C71B 32 15 C6                             ld      (SunVarK),a                 ; as original divide was onyl 8 bits K 1,2,3 don;t matter
 722+ C71E 3A 1F C6                             ld      a,(SunVarT)
 723+ C721 32 18 C6                             ld      (SunVarK+3),a
 724+ C724 C9                                   ret
 725+ C725
 726+ C725
 727+ C725
 728+ C725 47           SunProcessVertex:       ld      b,a                         ; save sign byte
 729+ C726 ED 5B 16 C0  .SunProjectToEye:       ld      de,(SBnKzlo)                ; X Pos = X / Z
 730+ C72A 3A 18 C0                             ld      a,(SBnKzsgn)                ; CDE = z
 731+ C72D FD 67                                ld      iyh,a                       ; save sign
 732+ C72F                                      ClearSignBitA
 732+ C72F E6 7F       >                        and     SignMask8Bit
 733+ C731                                      ; Addeed as it neds to be AHL/0CD to force * 256 and get correct screen position on scaling
 734+ C731              ;                        ld      c,a                         ;
 735+ C731 5A                                   ld      e,d
 736+ C732 57                                   ld      d,a
 737+ C733 0E 00                                ld      c,0
 738+ C735                                      ; added above to correct positioning as in reality its X/(Z/256)
 739+ C735 78                                   ld      a,b                         ; restore sign byte
 740+ C736 FD 6F                                ld      iyl,a                       ; save sign
 741+ C738                                      ClearSignBitA
 741+ C738 E6 7F       >                        and     SignMask8Bit
 742+ C73A CD 20 C6                             call SunAHLequAHLDivCDE             ; AHL = AHL/CDE unsigned
 743+ C73D              .CheckPosOnScreenX:     JumpIfAIsNotZero .IsOffScreen         ; if A has a value then its way too large regardless of sign
 743+ C73D A7          >                        and     a
 743+ C73E C2 5B C7    >                        jp	    nz,.IsOffScreen
 744+ C741                                      JumpOnLeadSignSet h, .IsOffScreen      ; or bit 7 set of h
 744+ C741 7C          >                        ld      a,h
 744+ C742 E6 80       >                        and     SignOnly8Bit
 744+ C744 C2 5B C7    >                        jp      nz,.IsOffScreen
 745+ C747 7C                                   ld      a,h
 746+ C748                                      ReturnIfAGTEusng 4                  ; if a > 1024 then its way too large regardless of sign
 746+ C748 FE 04       >                        cp    4
 746+ C74A D0          >                        ret	 nc
 747+ C74B FD 7C                                ld      a,iyh                       ; now deal with the sign
 748+ C74D FD AD                                xor     iyl
 749+ C74F                                      SignBitOnlyA                        ; a= resultant sign
 749+ C74F E6 80       >                        and     SignOnly8Bit
 750+ C751 28 06                                jr      z,.calculatedVert           ; result is positive so we don't 2's compliment it
 751+ C753              .XIsNegative:           NegHL                               ; make 2's c as negative
 751+ C753 AF          >                    xor a
 751+ C754 95          >                    sub l
 751+ C755 6F          >                    ld l,a
 751+ C756 9F          >                    sbc a,a
 751+ C757 94          >                    sub h
 751+ C758 67          >                    ld h,a
 752+ C759              .calculatedVert:        ClearCarryFlag
 752+ C759 B7          >                        or a
 753+ C75A C9                                   ret
 754+ C75B 21 FF 7F     .IsOffScreen:           ld      hl,$7FFF
 755+ C75E FD 7C                                ld      a,iyh
 756+ C760 FD AD                                xor     iyl
 757+ C762                                      SignBitOnlyA
 757+ C762 E6 80       >                        and     SignOnly8Bit
 758+ C764 28 02                                jr      z,.calculatedOffScreen
 759+ C766 23                                   inc     hl                          ; set hl to $8001 i.e. -32768
 760+ C767 23                                   inc     hl                          ; .
 761+ C768              .calculatedOffScreen:   SetCarryFlag
 761+ C768 37          >                        scf
 762+ C769 C9                                   ret
 763+ C76A
 764+ C76A
 765+ C76A              ; .........................................................................................................................
 766+ C76A              ; we only hit this if z is positive so we can ignore signs
 767+ C76A ED 4B 16 C0  SunCalculateRadius:     ld      bc,(SBnKzlo)                ; DBC = z position
 768+ C76E 3A 18 C0                             ld      a,(SBnKzsgn)                ;
 769+ C771 57                                   ld      d,a                         ;
 770+ C772 21 00 60                             ld      hl,$6000  ; was hl          ; planet radius at Z = 1 006000
 771+ C775 CD 0C 95                             call    Div16by24usgn               ; radius = HL/DBC = 24576 / distance z
 772+ C778 B4                                   or      h                           ; if A or H are not 0 then max Radius
 773+ C779                                      JumpIfAIsZero  .SaveRadius
 773+ C779 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 773+ C77A CA 7F C7    >                        jp	    z, .SaveRadius
 774+ C77D 1E F8        .MaxRadius:             ld      e,248                       ;set radius to 248 as maxed out
 775+ C77F 7D           .SaveRadius:            ld      a,l                         ; l = resultant radius
 776+ C780 F6 01                                or      1                           ; at least radius 1 (never even so need to test)
 777+ C782 32 14 C6                             ld      (SunRadius),a               ; save a copy of radius now for later
 778+ C785 5F                                   ld      e,a                         ; as later code expects it to be in e
 779+ C786 C9                                   ret
 780+ C787
 781+ C787              ; Shorter version when sun does not need to be processed to screen
 782+ C787 3A 12 C0     SunUpdateCompass:       ld      a,(SBnKxsgn)
 783+ C78A 2A 10 C0                             ld      hl,(SBnKxlo)
 784+ C78D CD 25 C7                             call    SunProcessVertex
 785+ C790 22 19 C0                             ld      (SunCompassX),hl
 786+ C793 3A 15 C0                             ld      a,(SBnKysgn)
 787+ C796 2A 13 C0                             ld      hl,(SBnKylo)
 788+ C799 CD 25 C7                             call    SunProcessVertex
 789+ C79C 22 1B C0                             ld      (SunCompassY),hl
 790+ C79F C9                                   ret
 791+ C7A0
 792+ C7A0                                 ; could probabyl set a variable say "varGood", default as 1 then set to 0 if we end up with a good calulation?? may not need it as we draw here
 793+ C7A0 CD 1D C5     SunUpdateAndRender:     call    SunApplyMyRollAndPitch
 794+ C7A3 3A 18 C0     .CheckDrawable:         ld      a,(SBnKzsgn)
 795+ C7A6                                      JumpIfAGTENusng 48,  SunUpdateCompass ; at a distance over 48 its too far away
 795+ C7A6 FE 30       >                        cp     48
 795+ C7A8 D2 87 C7    >                        jp		nc,SunUpdateCompass
 796+ C7AB 21 17 C0                             ld      hl,SBnKzhi                  ; if the two high bytes are zero then its too close
 797+ C7AE B6                                   or      (hl)
 798+ C7AF                                      JumpIfAIsZero       SunUpdateCompass
 798+ C7AF A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 798+ C7B0 CA 87 C7    >                        jp	    z, SunUpdateCompass
 799+ C7B3 3A 12 C0     .calculateX:            ld      a,(SBnKxsgn)
 800+ C7B6 2A 10 C0                             ld      hl,(SBnKxlo)
 801+ C7B9 CD 25 C7                             call    SunProcessVertex            ; now returns carry set for failure
 802+ C7BC 22 19 C0                             ld      (SunCompassX),hl
 803+ C7BF D8                                   ret     c
 804+ C7C0 1E 80        .calculatedX:           ld      e,ScreenCenterX
 805+ C7C2 16 00                                ld      d,0
 806+ C7C4                                      ClearCarryFlag
 806+ C7C4 B7          >                        or a
 807+ C7C5 ED 5A                                adc     hl,de
 808+ C7C7                                      ;call    HL2cEquHLSgnPlusAusgn       ; correct to center of screen
 809+ C7C7 22 10 C6                             ld      (SunScrnX),hl               ; save projected X Position, 2's compliment
 810+ C7CA 3A 15 C0     .calculateY:            ld      a,(SBnKysgn)
 811+ C7CD 2A 13 C0                             ld      hl,(SBnKylo)
 812+ C7D0 CD 25 C7                             call    SunProcessVertex            ; now returns carry set for failure
 813+ C7D3 22 1B C0                             ld      (SunCompassY),hl
 814+ C7D6 D8                                   ret     c
 815+ C7D7 1E 60        .calculatedY:           ld      e,ScreenCenterY
 816+ C7D9 16 00                                ld      d,0
 817+ C7DB EB                                   ex      de,hl
 818+ C7DC                                      ClearCarryFlag
 818+ C7DC B7          >                        or a
 819+ C7DD ED 52                                sbc     hl,de
 820+ C7DF                                      ;call    HL2cEquHLSgnPlusAusgn       ; correct to center of screen
 821+ C7DF 22 12 C6                             ld      (SunScrnY),hl               ; save projected Y Position, 2's compliment
 822+ C7E2              ; .........................................................................................................................
 823+ C7E2 CD 6A C7                             call    SunCalculateRadius
 824+ C7E5              ; .........................................................................................................................
 825+ C7E5 2A 10 C6     .CheckIfSunOnScreen:    ld      hl,(SunScrnX)               ; get x pixel position
 826+ C7E8 FD 26 00                             ld      iyh,0                       ; iyh holds draw status, 0= OK
 827+ C7EB 16 00                                ld      d,0                         ; e still holds radius
 828+ C7ED 7C                                   ld      a,h
 829+ C7EE                                      JumpOnLeadSignSet   h,.CheckXNegative
 829+ C7EE 7C          >                        ld      a,h
 829+ C7EF E6 80       >                        and     SignOnly8Bit
 829+ C7F1 C2 07 C8    >                        jp      nz,.CheckXNegative
 830+ C7F4 7C           .CheckXPositive:        ld      a,h
 831+ C7F5                                      JumpIfAIsZero   .XOnScreen          ; if high byte of h is not zero its definitly on screen
 831+ C7F5 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 831+ C7F6 CA 10 C8    >                        jp	    z, .XOnScreen
 832+ C7F9 16 00                                ld      d,0                         ; de = radius
 833+ C7FB                                      ClearCarryFlag
 833+ C7FB B7          >                        or a
 834+ C7FC ED 52                                sbc     hl,de
 835+ C7FE FA 10 C8                             jp      m   ,.XOnScreen             ; if result was negative then it spans screen
 836+ C801 7C                                   ld      a,h
 837+ C802                                      JumpIfAIsZero   .XOnScreen          ; if high byte of h is not zero then its partially on screen at least
 837+ C802 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 837+ C803 CA 10 C8    >                        jp	    z, .XOnScreen
 838+ C806 C9                                   ret                                 ; None of the X coordinates are on screen
 839+ C807 16 00        .CheckXNegative:        ld      d,0                         ; de = radius
 840+ C809                                      ClearCarryFlag
 840+ C809 B7          >                        or a
 841+ C80A ED 5A                                adc     hl,de                       ; so we have hl - de
 842+ C80C F2 10 C8                             jp      p,.XOnScreen                ; if result was positive then it spans screen so we are good
 843+ C80F C9                                   ret                                 ; else x is totally off the left side of the screen
 844+ C810              ; .........................................................................................................................
 845+ C810 2A 12 C6     .XOnScreen:             ld      hl,(SunScrnY)               ; now Check Y coordinate
 846+ C813                                      JumpOnLeadSignSet   h,.CheckYNegative
 846+ C813 7C          >                        ld      a,h
 846+ C814 E6 80       >                        and     SignOnly8Bit
 846+ C816 C2 37 C8    >                        jp      nz,.CheckYNegative
 847+ C819 7C           .CheckYPositive:        ld      a,h
 848+ C81A                                      JumpIfAIsNotZero   .PosYCheck2
 848+ C81A A7          >                        and     a
 848+ C81B C2 24 C8    >                        jp	    nz,.PosYCheck2
 849+ C81E 7D                                   ld      a,l
 850+ C81F E6 80                                and     %10000000
 851+ C821 CA 40 C8                             jp      z,YOnScreen                ; at least 1 row is on screen as > 128
 852+ C824 16 00        .PosYCheck2:            ld      d,0                         ; de = radius
 853+ C826                                      ClearCarryFlag
 853+ C826 B7          >                        or a
 854+ C827 ED 52                                sbc     hl,de
 855+ C829 FA 40 C8                             jp      m,YOnScreen                ; so if its -ve then it spans screen
 856+ C82C 7C                                   ld      a,h                         ; if h > 0 then off screen so did not span
 857+ C82D                                      ReturnIfANotZero                    ; .
 857+ C82D A7          >                        and     a
 857+ C82E C0          >                        ret     nz
 858+ C82F 7D                                   ld      a,l                         ; if l > 128 then off screen so did not span
 859+ C830 E6 80                                and     %10000000                   ; .
 860+ C832                                      ReturnIfANotZero                    ; .
 860+ C832 A7          >                        and     a
 860+ C833 C0          >                        ret     nz
 861+ C834 C3 40 C8                             jp      YOnScreen                  ; so Y at least spans
 862+ C837 16 00        .CheckYNegative:        ld      d,0                         ; de = radius
 863+ C839                                      ClearCarryFlag
 863+ C839 B7          >                        or a
 864+ C83A ED 5A                                adc     hl,de                       ; so we have hl - de
 865+ C83C F2 40 C8                             jp      p,YOnScreen                ; if result was positive then it spans screen so we are good
 866+ C83F C9                                   ret                                 ; else never gets above 0 so return
 867+ C840              ; .........................................................................................................................
 868+ C840 21 A3 C0     YOnScreen:             ld      hl,SBnKLineArray            ; we load start and end as 0
 869+ C843 11 00 01                             ld		de, SunLineArraySize        ; just if we get a 0,0 genuine we will not plot it
 870+ C846 3E 00                                ld		a,0
 871+ C848 CD 04 7E                             call	memfill_dma
 872+ C84B              ; .........................................................................................................................
 873+ C84B 11 00 00     .SetRaggedEdgeMax:      ld      de,0
 874+ C84E 3A 14 C6                             ld      a,(SunRadius)               ; get readius
 875+ C851 FE 60                                cp      96                          ; if > 96 then roll carry flag into e
 876+ C853                                      FlipCarryFlag
 876+ C853 3F          >                        ccf
 877+ C854 CB 13                                rl      e                           ; if > 40 then roll carry flag into e
 878+ C856 FE 28                                cp      40
 879+ C858                                      FlipCarryFlag
 879+ C858 3F          >                        ccf
 880+ C859 CB 13                                rl      e
 881+ C85B FE 10                                cp      16                          ; if > 16 then roll carry flag into e
 882+ C85D                                      FlipCarryFlag
 882+ C85D 3F          >                        ccf
 883+ C85E CB 13                                rl     e
 884+ C860 7B                                   ld      a,e                         ; a = ragged size from %00000111 to %00000000
 885+ C861 32 0D C6                             ld      (RaggedSize),a
 886+ C864              ; .........................................................................................................................
 887+ C864 21 A3 C0     .SkipSetK:              ld      hl,SBnKLineArray            ; prep line array details ready for filling
 888+ C867 22 A3 C1                             ld      (LineArrayPtr),hl
 889+ C86A AF                                   xor     a
 890+ C86B 32 0C C6                             ld      (LineCount),a
 891+ C86E              ; .........................................................................................................................
 892+ C86E 2A 12 C6     .GetMinY:               ld      hl,(SunScrnY)               ; now calculate start Y position
 893+ C871 3A 14 C6                             ld      a,(SunRadius)
 894+ C874 5F                                   ld      e,a
 895+ C875 16 00                                ld      d,0
 896+ C877                                      ClearCarryFlag
 896+ C877 B7          >                        or a
 897+ C878 ED 52                                sbc     hl,de
 898+ C87A F2 80 C8                             jp      p,.DoneMinY
 899+ C87D 21 00 00                             ld      hl,0                        ; if its negative then we start with 0 as it can only go up screen after radius
 900+ C880              .DoneMinY:              ReturnIfRegNotZero h                ; if h > 0 then off the screen
 900+ C880 7C          >                        ld      a, h
 900+ C881 A7          >                        and     a
 900+ C882 C0          >                        ret     nz
 901+ C883 7D                                   ld      a,l                         ; check if l > 127
 902+ C884 E6 80                                and     SignOnly8Bit                ; .
 903+ C886 C0                                   ret     nz                          ; if bit is set then > 128
 904+ C887 7D           .SetMinY:               ld      a,l
 905+ C888 32 0E C6                             ld      (MinYOffset),a              ; so now we have Y top of screen
 906+ C88B 2A 12 C6     .GetMaxY:               ld      hl,(SunScrnY)               ; get hl = Y + radius, note if we got here then this can never be a negative result but can go from -ve hl to +ve result
 907+ C88E 3A 14 C6                             ld      a,(SunRadius)               ; hl = hl + radius
 908+ C891 16 00                                ld      d,0                         ; .
 909+ C893 5F                                   ld      e,a                         ; .
 910+ C894                                      ClearCarryFlag                      ; .
 910+ C894 B7          >                        or a
 911+ C895 ED 5A                                adc     hl,de                       ; .
 912+ C897 7C                                   ld      a,h
 913+ C898 A7                                   and     a
 914+ C899 28 06                                jr      z,.YHiOK
 915+ C89B 21 7F 00     .YHiGTE127:             ld      hl,127
 916+ C89E C3 AA C8                             jp      .SetMaxY
 917+ C8A1 7D           .YHiOK:                 ld      a,l                         ; clamp at 127
 918+ C8A2 E6 80                                and     SignOnly8Bit                ; .
 919+ C8A4 CA AA C8                             jp      z,.SetMaxY
 920+ C8A7 21 7F 00                             ld      hl,127
 921+ C8AA 7D           .SetMaxY                ld      a,l
 922+ C8AB 32 0F C6                             ld      (MaxYOffSet),a              ; so now we have min and max Y coordinates and SunScrnX & Y holds center
 923+ C8AE CD B5 C8                             call    SunDrawCircle
 924+ C8B1 CD CF C1                             call    SunDraw
 925+ C8B4 C9                                   ret
 926+ C8B5                                      ; b8 04 00 02 00 00 60 01 00 gives a 0.5 so we have the cal wrong as its +-1 so should be * result of divide by 128
 927+ C8B5              ;.. Now we caluclate the circle of the star
 928+ C8B5              ;.. its from MinY down the screen to MaxY center ProjX,ProjY.
 929+ C8B5              ;.. We can use the circle draw logic gtom Bressenham's algorithm
 930+ C8B5              ; so now there are the following conditions to consider
 931+ C8B5              ; y min = 0   y center is negative radius <= ABS (Y center)             => Don't draw
 932+ C8B5              ; y min = 0   y center is negative radius > ABS (Y center)+1            => Draw bottom half only
 933+ C8B5              ; y max = 127 y center is > 127    radius <= y center - 127             => Don't draw
 934+ C8B5              ; y max = 127 y center is > 127    radius > y center - 127              => Draw top half only
 935+ C8B5              ; y min >= 0  y center > y min     we don't need to worry about radius  => Draw both halves
 936+ C8B5              ; x center + radius < 0                                                 => Don't draw
 937+ C8B5              ; x center - radius > 255                                               => Don't draw
 938+ C8B5              ; we won't consider x more here as the driver is the y coordinate but we will check if x is vaiable
 939+ C8B5              ; x point = max (x point, 0)   on left
 940+ C8B5              ; x point = min (x point, 255) on right
 941+ C8B5
 942+ C8B5              SetIYPlusOffset:        MACRO   reg
 943+ C8B5 ~                                    push    hl,,iy                          ; save hl, then hl = iy
 944+ C8B5 ~                                    pop     hl                              ;
 945+ C8B5 ~                                    ld      a,reg
 946+ C8B5 ~                                    add     hl,a
 947+ C8B5 ~                                    add     hl,a
 948+ C8B5 ~                                    push    hl
 949+ C8B5 ~                                    pop     iy
 950+ C8B5 ~                                    pop     hl
 951+ C8B5                                      ENDM
 952+ C8B5
 953+ C8B5              SetIYMinusOffset:       MACRO   reg
 954+ C8B5 ~                                    push    de,,hl,,iy                      ; save hl, then hl = iy
 955+ C8B5 ~                                    pop     hl                              ;
 956+ C8B5 ~                                    ld      a,reg
 957+ C8B5 ~                                    add     a,a
 958+ C8B5 ~                                    ld      e,a
 959+ C8B5 ~                                    ld      d,0
 960+ C8B5 ~                                    ClearCarryFlag
 961+ C8B5 ~                                    sbc     hl,de
 962+ C8B5 ~                                    push    hl
 963+ C8B5 ~                                    pop     iy
 964+ C8B5 ~                                    pop     de,,hl
 965+ C8B5                                      ENDM
 966+ C8B5
 967+ C8B5
 968+ C8B5              ;;;-SunDrawCircle:          ld      a,(SunRadius)
 969+ C8B5              ;;;-.CheckRadius:           ReturnIfAIsZero                         ; elimiate zero or single pixel
 970+ C8B5              ;;;-                        JumpIfAEqNusng  1, SunCircleSinglePixel
 971+ C8B5              ;;;-                       ; JumpIfAGTENusng 127, SunFullScreen      ; if its covering whole then just make it yellow
 972+ C8B5              ;;;-; already done .MakeCentreX2C:         MemSignedTo2C SunScrnX                   ; convert 16 bit signed to 2's compliment
 973+ C8B5              ;;;-; already done .MakeCentreY2C:         MemSignedTo2C SunScrnY                   ; .
 974+ C8B5              ;;;-.BoundsCheck            ld      hl,(SunScrnY)
 975+ C8B5              ;;;-                        push    hl
 976+ C8B5              ;;;-                        ld      a,(SunRadius)
 977+ C8B5              ;;;-                        add     hl,a
 978+ C8B5              ;;;-                        bit     7,h
 979+ C8B5              ;;;-                        ret     nz                              ; if Y + radius is negative then off the screen
 980+ C8B5              ;;;-                        pop     hl
 981+ C8B5              ;;;-                        ld      d,0
 982+ C8B5              ;;;-                        ld      e,a
 983+ C8B5              ;;;-                        ClearCarryFlag
 984+ C8B5              ;;;-                        sbc     hl,de
 985+ C8B5              ;;;-                        ld      a,h
 986+ C8B5              ;;;-                        ReturnIfAGTENusng  1                     ; really shoudl be signed TODO
 987+ C8B5              ;;;-
 988+ C8B5              ;;;-                        ld      hl,(SunScrnX)
 989+ C8B5              ;;;-                        push    hl
 990+ C8B5              ;;;-                        ld      a,(SunRadius)
 991+ C8B5              ;;;-                        add     hl,a
 992+ C8B5              ;;;-                        bit     7,h
 993+ C8B5              ;;;-                        ret     nz                              ; if Y + radius is negative then off the screen
 994+ C8B5              ;;;-                        pop     hl
 995+ C8B5              ;;;-                        ld      d,0
 996+ C8B5              ;;;-                        ld      e,a
 997+ C8B5              ;;;-                        ClearCarryFlag
 998+ C8B5              ;;;-                        sbc     hl,de
 999+ C8B5              ;;;-                        ld      a,h
1000+ C8B5              ;;;-
1001+ C8B5              ;;;-                        ReturnIfAGTENusng 1                      ; really shoudl be signed TODO
1002+ C8B5              SunDrawCircle
1003+ C8B5                                      ; ** BNOTE Ptuichj abnd roll has a bug as piitch increases z axis value
1004+ C8B5              .PrepCircleData:       ; ld      ixl,0
1005+ C8B5                                     ; ld		(.Plot1+1),bc			        ; save origin into DE reg in code
1006+ C8B5 3A 14 C6                             ld      a,(SunRadius)
1007+ C8B8 DD 67                                ld		ixh,a							; ixh = radius
1008+ C8BA DD 2E 00                             ld		ixl,0						    ; ixl = delta (y)
1009+ C8BD 26 00        .calcd:	                ld		h,0                             ; de = radius * 2
1010+ C8BF 6F                                   ld		l,a                             ; .
1011+ C8C0 29                                   add		hl,hl							; .
1012+ C8C1 EB                                   ex		de,hl							; .
1013+ C8C2 21 03 00                             ld		hl,3                            ; hl = 3 - (r * 2)
1014+ C8C5 A7                                   and		a                               ; .
1015+ C8C6 ED 52                                sbc		hl,de							; .
1016+ C8C8 44                                   ld		b,h                             ; bc = 3 - (r * 2) : d = 3 - 2r
1017+ C8C9 4D                                   ld		c,l								; .
1018+ C8CA 21 01 00     .calcdelta:             ld		hl,1                            ; set hl to 1
1019+ C8CD 16 00                                ld		d,0                             ; de = ixl
1020+ C8CF DD 5D                                ld		e,ixl                           ;
1021+ C8D1                                      ClearCarryFlag                          ;
1021+ C8D1 B7          >                        or a
1022+ C8D2 ED 52                                sbc		hl,de                           ; hl = 1 - ixl
1023+ C8D4 11 01 00     .Setde1:                ld		de,1                            ; del = 1
1024+ C8D7 DD 7C        .CircleLoop:            ld		a,ixh                           ; if x = y then exit
1025+ C8D9 DD BD                                cp		ixl                             ;
1026+ C8DB D8                                   ret		c                               ;
1027+ C8DC D9           .ProcessLoop:	        exx                                     ; save out registers
1028+ C8DD              ; Process CY+Y CX+X & CY+Y CX-X..................................
1029+ C8DD 2A 12 C6     .Plot1:                 ld      hl, (SunScrnY)
1030+ C8E0 DD 7C        .Get1YRow:              ld      a,ixh
1031+ C8E2 ED 31                                add     hl,a                            ; Check to see if CY+Y (note is add hl ,a usginedf only??)
1032+ C8E4              .Check1YRowOnScreen:    CheckRowHLOnScreen .NoTopPixelPair
1032+ C8E4 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1032+ C8E5 A7          >                        and     a                               ; .
1032+ C8E6 20 26       >                        jr      nz,.NoTopPixelPair                   ; h <> 0 so fails (covers <0 and > 255
1032+ C8E8 7D          >                        ld      a,l                             ; l bit 7 0?
1032+ C8E9 E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1032+ C8EB 20 21       >                        jr      nz,.NoTopPixelPair                   ;
1033+ C8ED              .Write1YCoord:          SetIYPlusOffset ixh                     ; IY = IY + ixh
1033+ C8ED E5 FD E5    >                        push    hl,,iy                          ; save hl, then hl = iy
1033+ C8F0 E1          >                        pop     hl                              ;
1033+ C8F1 DD 7C       >                        ld      a,ixh
1033+ C8F3 ED 31       >                        add     hl,a
1033+ C8F5 ED 31       >                        add     hl,a
1033+ C8F7 E5          >                        push    hl
1033+ C8F8 FD E1       >                        pop     iy
1033+ C8FA E1          >                        pop     hl
1034+ C8FB                                      IYEquRowN l                             ; IY = SBnkLineArray + (2 * l) - set up iy as target address
1034+ C8FB 7D          >                        ld      a,l
1034+ C8FC 21 A3 C0    >                        ld      hl,SBnKLineArray
1034+ C8FF ED 31       >                        add     hl,a
1034+ C901 ED 31       >                        add     hl,a
1034+ C903 E5          >                        push    hl
1034+ C904 FD E1       >                        pop     iy
1035+ C906 DD 7D                                ld      a,ixl
1036+ C908 CD DB C9                             call    ProcessXRowA
1037+ C90B C3 0E C9                             jp      .Plot2
1038+ C90E              .NoTopPixelPair:        ;break
1039+ C90E              ; Process CY-Y CX+X & CY-Y CX-X..................................
1040+ C90E 2A 12 C6     .Plot2:                 ld      hl, (SunScrnY)
1041+ C911 16 00        .Get2YRow:              ld      d,0
1042+ C913 DD 5C                                ld      e,ixh
1043+ C915                                      ClearCarryFlag
1043+ C915 B7          >                        or a
1044+ C916 ED 52                                sbc     hl,de
1045+ C918              .Check2YRowOnScreen:    CheckRowHLOnScreen .NoBottomPixelPair
1045+ C918 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1045+ C919 A7          >                        and     a                               ; .
1045+ C91A 20 2B       >                        jr      nz,.NoBottomPixelPair                   ; h <> 0 so fails (covers <0 and > 255
1045+ C91C 7D          >                        ld      a,l                             ; l bit 7 0?
1045+ C91D E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1045+ C91F 20 26       >                        jr      nz,.NoBottomPixelPair                   ;
1046+ C921                                      SetIYMinusOffset ixh
1046+ C921 D5 E5 FD E5 >                        push    de,,hl,,iy                      ; save hl, then hl = iy
1046+ C925 E1          >                        pop     hl                              ;
1046+ C926 DD 7C       >                        ld      a,ixh
1046+ C928 87          >                        add     a,a
1046+ C929 5F          >                        ld      e,a
1046+ C92A 16 00       >                        ld      d,0
1046+ C92C             >                        ClearCarryFlag
1046+ C92C B7          >                        or a
1046+ C92D ED 52       >                        sbc     hl,de
1046+ C92F E5          >                        push    hl
1046+ C930 FD E1       >                        pop     iy
1046+ C932 E1 D1       >                        pop     de,,hl
1047+ C934              .Write2YCoord:          IYEquRowN l                             ; set up iy as target address
1047+ C934 7D          >                        ld      a,l
1047+ C935 21 A3 C0    >                        ld      hl,SBnKLineArray
1047+ C938 ED 31       >                        add     hl,a
1047+ C93A ED 31       >                        add     hl,a
1047+ C93C E5          >                        push    hl
1047+ C93D FD E1       >                        pop     iy
1048+ C93F DD 7D                                ld      a,ixl
1049+ C941 CD DB C9                             call    ProcessXRowA
1050+ C944 C3 47 C9                             jp      .Plot3
1051+ C947              .NoBottomPixelPair:     ;break
1052+ C947              ; Process CY+X CX+Y & CY+X CX-Y..................................
1053+ C947 2A 12 C6     .Plot3:                 ld      hl, (SunScrnY)
1054+ C94A DD 7D        .Get3YRow:              ld      a,ixl
1055+ C94C ED 31                                add     hl,a                            ; Check to see if CY+Y
1056+ C94E              .Check3YRowOnScreen:    CheckRowHLOnScreen .NoTop3PixelPair
1056+ C94E 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1056+ C94F A7          >                        and     a                               ; .
1056+ C950 20 26       >                        jr      nz,.NoTop3PixelPair                   ; h <> 0 so fails (covers <0 and > 255
1056+ C952 7D          >                        ld      a,l                             ; l bit 7 0?
1056+ C953 E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1056+ C955 20 21       >                        jr      nz,.NoTop3PixelPair                   ;
1057+ C957                                      SetIYPlusOffset ixl
1057+ C957 E5 FD E5    >                        push    hl,,iy                          ; save hl, then hl = iy
1057+ C95A E1          >                        pop     hl                              ;
1057+ C95B DD 7D       >                        ld      a,ixl
1057+ C95D ED 31       >                        add     hl,a
1057+ C95F ED 31       >                        add     hl,a
1057+ C961 E5          >                        push    hl
1057+ C962 FD E1       >                        pop     iy
1057+ C964 E1          >                        pop     hl
1058+ C965              .Write3YCoord:          IYEquRowN l                             ; set up iy as target address
1058+ C965 7D          >                        ld      a,l
1058+ C966 21 A3 C0    >                        ld      hl,SBnKLineArray
1058+ C969 ED 31       >                        add     hl,a
1058+ C96B ED 31       >                        add     hl,a
1058+ C96D E5          >                        push    hl
1058+ C96E FD E1       >                        pop     iy
1059+ C970 DD 7C                                ld      a,ixh
1060+ C972 CD DB C9                             call    ProcessXRowA
1061+ C975 C3 78 C9                             jp      .Plot4
1062+ C978              .NoTop3PixelPair:       ;break
1063+ C978              ; Process CY-X CX+Y & CY-X CX-Y..................................
1064+ C978 2A 12 C6     .Plot4:                 ld      hl, (SunScrnY)
1065+ C97B 16 00        .Get4YRow:              ld      d,0
1066+ C97D DD 5D                                ld      e,ixl
1067+ C97F                                      ClearCarryFlag
1067+ C97F B7          >                        or a
1068+ C980 ED 52                                sbc     hl,de
1069+ C982              .Check4YRowOnScreen:    CheckRowHLOnScreen .NoBottom4PixelPair
1069+ C982 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1069+ C983 A7          >                        and     a                               ; .
1069+ C984 20 28       >                        jr      nz,.NoBottom4PixelPair                   ; h <> 0 so fails (covers <0 and > 255
1069+ C986 7D          >                        ld      a,l                             ; l bit 7 0?
1069+ C987 E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1069+ C989 20 23       >                        jr      nz,.NoBottom4PixelPair                   ;
1070+ C98B                                      SetIYMinusOffset ixl
1070+ C98B D5 E5 FD E5 >                        push    de,,hl,,iy                      ; save hl, then hl = iy
1070+ C98F E1          >                        pop     hl                              ;
1070+ C990 DD 7D       >                        ld      a,ixl
1070+ C992 87          >                        add     a,a
1070+ C993 5F          >                        ld      e,a
1070+ C994 16 00       >                        ld      d,0
1070+ C996             >                        ClearCarryFlag
1070+ C996 B7          >                        or a
1070+ C997 ED 52       >                        sbc     hl,de
1070+ C999 E5          >                        push    hl
1070+ C99A FD E1       >                        pop     iy
1070+ C99C E1 D1       >                        pop     de,,hl
1071+ C99E              .Write4YCoord:          IYEquRowN l                             ; set up iy as target address
1071+ C99E 7D          >                        ld      a,l
1071+ C99F 21 A3 C0    >                        ld      hl,SBnKLineArray
1071+ C9A2 ED 31       >                        add     hl,a
1071+ C9A4 ED 31       >                        add     hl,a
1071+ C9A6 E5          >                        push    hl
1071+ C9A7 FD E1       >                        pop     iy
1072+ C9A9 DD 7C                                ld      a,ixh
1073+ C9AB CD DB C9                             call    ProcessXRowA
1074+ C9AE              .NoBottom4PixelPair:
1075+ C9AE              ; Completed one iteration........................................
1076+ C9AE D9                                   exx
1077+ C9AF CB 7C        .IncrementCircle:	    bit     7,h				; Check for Hl<=0
1078+ C9B1 28 03                                jr z,   .draw_circle_1
1079+ C9B3 19                                   add hl,de			; Delta=Delta+D1
1080+ C9B4 18 05                                jr      .draw_circle_2		;
1081+ C9B6 09           .draw_circle_1:		    add     hl,bc			; Delta=Delta+D2
1082+ C9B7 03                                   inc     bc
1083+ C9B8 03                                   inc     bc				; D2=D2+2
1084+ C9B9 DD 25                                dec     ixh				; Y=Y-1
1085+ C9BB 03           .draw_circle_2:		    inc bc				    ; D2=D2+2
1086+ C9BC 03                                   inc bc
1087+ C9BD 13                                   inc de				    ; D1=D1+2
1088+ C9BE 13                                   inc de
1089+ C9BF DD 2C                                inc ixl				    ; X=X+1
1090+ C9C1 C3 D7 C8                             jp      .CircleLoop
1091+ C9C4 2A 10 C6     SunCircleSinglePixel:     ld      hl,(SunScrnX)
1092+ C9C7 7C                                   ld      a,h
1093+ C9C8 A7                                   and     a
1094+ C9C9 C0                                   ret     nz                  ; if the high byte is set then no pixel
1095+ C9CA 4D                                   ld      c,l
1096+ C9CB 2A 12 C6                             ld      hl,(SunScrnY)
1097+ C9CE 7C                                   ld      a,h
1098+ C9CF A7                                   and     a
1099+ C9D0 C0                                   ret     nz                  ; if the high byte is set then no pixel
1100+ C9D1 7D                                   ld      a,l
1101+ C9D2 CB 7F                                bit     7,a
1102+ C9D4 C0                                   ret     nz                  ; if l > 127 then no pixel
1103+ C9D5 47                                   ld      b,a
1104+ C9D6 7B                                   ld		a,e
1105+ C9D7 CD 08 E3                             call	l2_plot_pixel_y_test
1106+ C9DA C9                                   ret
1107+ C9DB
1108+ C9DB              ProcessXRowA:           ;break
1109+ C9DB 2A 10 C6                             ld      hl,(SunScrnX)                    ; get X Center
1110+ C9DE F5                                   push    af                              ; save A (curent offset +/- value
1111+ C9DF ED 31                                add     hl,a                            ; Hl = HL + offset
1112+ C9E1 7C                                   ld      a,h                             ; is HL negative?, if so then set C to 0
1113+ C9E2 CB 7F                                bit     7,a                             ;
1114+ C9E4 20 14                                jr      nz,.XCoordNegative              ; We can have this for non X + Radius i.e. the equater
1115+ C9E6 A7                                   and     a                               ; if H <> 0? (why by here must be +ve), set c to $FF
1116+ C9E7 20 16                                jr      nz,.XCoordMaxed                 ; .
1117+ C9E9 4D                                   ld      c,l                             ; else set c to l and do the -ve offset
1118+ C9EA C5           .AddFuzz:               push    bc
1119+ C9EB CD 0A 85                             call    doRandom                        ; c = c - random AND ragged Size
1120+ C9EE C1                                   pop     bc
1121+ C9EF 21 0D C6                             ld      hl,RaggedSize                   ;
1122+ C9F2 A6                                   and     (hl)                            ;
1123+ C9F3 81                                   add     c                               ;
1124+ C9F4 4F                                   ld      c,a                             ;
1125+ C9F5 38 08                                jr      c,.XCoordMaxed                  ; has fuzz caused a carry, if so > 255 to make 255
1126+ C9F7 C3 01 CA                             jp      .ProcessSubtract                ;
1127+ C9FA 0E 00        .XCoordNegative:        ld      c,0                             ; if it was negative then 0
1128+ C9FC C3 01 CA                             jp      .ProcessSubtract
1129+ C9FF 0E FF        .XCoordMaxed:           ld      c,255                           ; if it was +ve then 255
1130+ CA01 F1           .ProcessSubtract:       pop     af                              ; get offset back
1131+ CA02 5F                                   ld      e,a                             ; but goes into DE as its a subtract
1132+ CA03 16 00                                ld      d,0
1133+ CA05 2A 10 C6                             ld      hl,(SunScrnX)                    ; so do subtract
1134+ CA08                                      ClearCarryFlag                          ; .
1134+ CA08 B7          >                        or a
1135+ CA09 ED 52                                sbc     hl,de                           ; .
1136+ CA0B FA 28 CA                             jp      m,.XCoordLeftNegative           ; again test for min max
1137+ CA0E E5 C5        .AddFuzzSubtract:       push    hl,,bc
1138+ CA10 CD 0A 85                             call    doRandom                        ; c = c - random AND ragged Size
1139+ CA13 C1                                   pop     bc
1140+ CA14 21 0D C6                             ld      hl,RaggedSize                   ;
1141+ CA17 A6                                   and     (hl)                            ;
1142+ CA18 5F                                   ld      e,a
1143+ CA19 E1                                   pop     hl
1144+ CA1A ED 52                                sbc     hl,de
1145+ CA1C FA 28 CA                             jp      m,.XCoordLeftNegative           ; again test for min max
1146+ CA1F 7C                                   ld      a,h
1147+ CA20 A7                                   and     a
1148+ CA21 C2 2D CA                             jp      nz,.XCordLeftMaxed
1149+ CA24 45                                   ld      b,l
1150+ CA25 C3 2F CA                             jp      .CompletedXCoords
1151+ CA28 06 00        .XCoordLeftNegative:    ld      b,0
1152+ CA2A C3 2F CA                             jp      .CompletedXCoords
1153+ CA2D 06 FF        .XCordLeftMaxed:        ld      b,255
1154+ CA2F 78           .CompletedXCoords:      ld      a,b
1155+ CA30 FD 77 00     .RowSaveIY1             ld      (iy+0),a                        ; iy holds current line array index
1156+ CA33 79                                   ld      a,c
1157+ CA34 FD 77 01     .RowSaveIY3             ld      (iy+1),a
1158+ CA37 C9                                   ret
1159+ CA38
1160+ CA38              ; .....................................................
1161+ CA38              ; if the universe object is a planet or sun then do that instead
1162+ CA38              ;;TODOProcessPlanet:          cp      129
1163+ CA38              ;;TODO                        jr      nz, .ItsAPlanet
1164+ CA38              ;;TODO.ItsAStar:              ld      a,(SBnKzsgn)
1165+ CA38              ;;TODO                        cp      48                               ; if z > 48 (it must be positive to enter this routine)
1166+ CA38
1167+ CA38
1168+ CA38              ; Square Root using tables
1169+ CA38              ; DE = number to find
1170+ CA38 21 58 CC     SunLookupSqrtDE:        ld      hl,SunSquareRootTable
1171+ CA3B 7A           .LookupCorseJump:       ld      a,d
1172+ CA3C ED 31                                add     hl,a
1173+ CA3E ED 31                                add     hl,a
1174+ CA40 7E                                   ld      a,(hl)
1175+ CA41 23                                   inc     hl
1176+ CA42 66                                   ld      h,(hl)
1177+ CA43 6F                                   ld      l,a
1178+ CA44 7E           .FineSearchLoop:        ld      a,(hl)
1179+ CA45                                      JumpIfAEqNusng  e, .FoundByte
1179+ CA45 BB          >                        cp     e
1179+ CA46 CA 52 CA    >                        jp      z,.FoundByte
1180+ CA49                                      JumpIfAGTENusng e, .PreviousByte
1180+ CA49 BB          >                        cp     e
1180+ CA4A D2 55 CA    >                        jp		nc,.PreviousByte
1181+ CA4D 23           .NotFound:              inc     hl
1182+ CA4E 23                                   inc     hl
1183+ CA4F C3 44 CA                             jp      .FineSearchLoop
1184+ CA52 23           .FoundByte:             inc     hl
1185+ CA53 7E                                   ld      a,(hl)
1186+ CA54 C9                                   ret
1187+ CA55 2B           .PreviousByte:          dec     hl
1188+ CA56 7E                                   ld      a,(hl)
1189+ CA57 C9                                   ret
1190+ CA58
1191+ CA58 58 CC 6A CC  SunRootHighIndex:       DW SunSqr00,SunSqr01,SunSqr02,SunSqr03,SunSqr04,SunSqr05,SunSqr06,SunSqr07,SunSqr08,SunSqr09,SunSqr0A,SunSqr0B,SunSqr0C,SunSqr0D,SunSqr0E,SunSqr0F
1191+ CA5C 78 CC 84 CC
1191+ CA60 8E CC 96 CC
1191+ CA64 9E CC A6 CC
1191+ CA68 AE CC B4 CC
1191+ CA6C BC CC C2 CC
1191+ CA70 C6 CC CC CC
1191+ CA74 D2 CC D8 CC
1192+ CA78 DE CC E4 CC                          DW SunSqr10,SunSqr11,SunSqr12,SunSqr13,SunSqr14,SunSqr15,SunSqr16,SunSqr17,SunSqr18,SunSqr19,SunSqr1A,SunSqr1B,SunSqr1C,SunSqr1D,SunSqr1E,SunSqr1F
1192+ CA7C EA CC F0 CC
1192+ CA80 F6 CC FA CC
1192+ CA84 FE CC 00 CD
1192+ CA88 04 CD 08 CD
1192+ CA8C 0C CD 10 CD
1192+ CA90 14 CD 18 CD
1192+ CA94 1A CD 1E CD
1193+ CA98 20 CD 24 CD                          DW SunSqr20,SunSqr21,SunSqr22,SunSqr23,SunSqr24,SunSqr25,SunSqr26,SunSqr27,SunSqr28,SunSqr29,SunSqr2A,SunSqr2B,SunSqr2C,SunSqr2D,SunSqr2E,SunSqr2F
1193+ CA9C 28 CD 2A CD
1193+ CAA0 2C CD 30 CD
1193+ CAA4 32 CD 34 CD
1193+ CAA8 38 CD 3A CD
1193+ CAAC 3C CD 3E CD
1193+ CAB0 42 CD 44 CD
1193+ CAB4 46 CD 4A CD
1194+ CAB8 4E CD 52 CD                          DW SunSqr30,SunSqr31,SunSqr32,SunSqr33,SunSqr34,SunSqr35,SunSqr36,SunSqr37,SunSqr38,SunSqr39,SunSqr3A,SunSqr3B,SunSqr3C,SunSqr3D,SunSqr3E,SunSqr3F
1194+ CABC 56 CD 5A CD
1194+ CAC0 5C CD 60 CD
1194+ CAC4 64 CD 68 CD
1194+ CAC8 6A CD 6E CD
1194+ CACC 72 CD 76 CD
1194+ CAD0 7A CD 7E CD
1194+ CAD4 82 CD 86 CD
1195+ CAD8 8A CD 8E CD                          DW SunSqr40,SunSqr41,SunSqr42,SunSqr43,SunSqr44,SunSqr45,SunSqr46,SunSqr47,SunSqr48,SunSqr49,SunSqr4A,SunSqr4B,SunSqr4C,SunSqr4D,SunSqr4E,SunSqr4F
1195+ CADC 92 CD 96 CD
1195+ CAE0 9A CD 9E CD
1195+ CAE4 A2 CD A6 CD
1195+ CAE8 AA CD AE CD
1195+ CAEC B2 CD B6 CD
1195+ CAF0 BA CD BE CD
1195+ CAF4 C2 CD C6 CD
1196+ CAF8 CA CD CC CD                          DW SunSqr50,SunSqr51,SunSqr52,SunSqr53,SunSqr54,SunSqr55,SunSqr56,SunSqr57,SunSqr58,SunSqr59,SunSqr5A,SunSqr5B,SunSqr5C,SunSqr5D,SunSqr5E,SunSqr5F
1196+ CAFC D0 CD D4 CD
1196+ CB00 D8 CD DC CD
1196+ CB04 E0 CD E4 CD
1196+ CB08 E8 CD EA CD
1196+ CB0C EE CD F2 CD
1196+ CB10 F6 CD FA CD
1196+ CB14 FE CD 00 CE
1197+ CB18 04 CE 08 CE                          DW SunSqr60,SunSqr61,SunSqr62,SunSqr63,SunSqr64,SunSqr65,SunSqr66,SunSqr67,SunSqr68,SunSqr69,SunSqr6A,SunSqr6B,SunSqr6C,SunSqr6D,SunSqr6E,SunSqr6F
1197+ CB1C 0C CE 10 CE
1197+ CB20 12 CE 16 CE
1197+ CB24 1A CE 1E CE
1197+ CB28 22 CE 24 CE
1197+ CB2C 28 CE 2C CE
1197+ CB30 30 CE 32 CE
1197+ CB34 34 CE 38 CE
1198+ CB38 3C CE 40 CE                          DW SunSqr70,SunSqr71,SunSqr72,SunSqr73,SunSqr74,SunSqr75,SunSqr76,SunSqr77,SunSqr78,SunSqr79,SunSqr7A,SunSqr7B,SunSqr7C,SunSqr7D,SunSqr7E,SunSqr7F
1198+ CB3C 44 CE 48 CE
1198+ CB40 4C CE 50 CE
1198+ CB44 52 CE 56 CE
1198+ CB48 5A CE 5C CE
1198+ CB4C 60 CE 64 CE
1198+ CB50 68 CE 6A CE
1198+ CB54 6E CE 72 CE
1199+ CB58 76 CE 78 CE                          DW SunSqr80,SunSqr81,SunSqr82,SunSqr83,SunSqr84,SunSqr85,SunSqr86,SunSqr87,SunSqr88,SunSqr89,SunSqr8A,SunSqr8B,SunSqr8C,SunSqr8D,SunSqr8E,SunSqr8F
1199+ CB5C 7C CE 7E CE
1199+ CB60 82 CE 86 CE
1199+ CB64 8A CE 8C CE
1199+ CB68 90 CE 94 CE
1199+ CB6C 96 CE 9A CE
1199+ CB70 9E CE A0 CE
1199+ CB74 A4 CE A8 CE
1200+ CB78 AA CE AE CE                          DW SunSqr90,SunSqr91,SunSqr92,SunSqr93,SunSqr94,SunSqr95,SunSqr96,SunSqr97,SunSqr98,SunSqr99,SunSqr9A,SunSqr9B,SunSqr9C,SunSqr9D,SunSqr9E,SunSqr9F
1200+ CB7C B2 CE B4 CE
1200+ CB80 B8 CE BC CE
1200+ CB84 BE CE C2 CE
1200+ CB88 C6 CE C8 CE
1200+ CB8C CC CE D0 CE
1200+ CB90 D2 CE D6 CE
1200+ CB94 DA CE DC CE
1201+ CB98 E0 CE E4 CE                          DW SunSqrA0,SunSqrA1,SunSqrA2,SunSqrA3,SunSqrA4,SunSqrA5,SunSqrA6,SunSqrA7,SunSqrA8,SunSqrA9,SunSqrAA,SunSqrAB,SunSqrAC,SunSqrAD,SunSqrAE,SunSqrAF
1201+ CB9C E6 CE EA CE
1201+ CBA0 EC CE F0 CE
1201+ CBA4 F4 CE F6 CE
1201+ CBA8 FA CE FC CE
1201+ CBAC 00 CF 04 CF
1201+ CBB0 06 CF 0A CF
1201+ CBB4 0E CF 10 CF
1202+ CBB8 12 CF 14 CF                          DW SunSqrB0,SunSqrB1,SunSqrB2,SunSqrB3,SunSqrB4,SunSqrB5,SunSqrB6,SunSqrB7,SunSqrB8,SunSqrB9,SunSqrBA,SunSqrBB,SunSqrBC,SunSqrBD,SunSqrBE,SunSqrBF
1202+ CBBC 18 CF 1C CF
1202+ CBC0 1E CF 22 CF
1202+ CBC4 24 CF 28 CF
1202+ CBC8 2C CF 30 CF
1202+ CBCC 32 CF 34 CF
1202+ CBD0 38 CF 3A CF
1202+ CBD4 3E CF 42 CF
1203+ CBD8 44 CF 48 CF                          DW SunSqrC0,SunSqrC1,SunSqrC2,SunSqrC3,SunSqrC4,SunSqrC5,SunSqrC6,SunSqrC7,SunSqrC8,SunSqrC9,SunSqrCA,SunSqrCB,SunSqrCC,SunSqrCD,SunSqrCE,SunSqrCF
1203+ CBDC 4A CF 4E CF
1203+ CBE0 50 CF 54 CF
1203+ CBE4 58 CF 5A CF
1203+ CBE8 5C CF 5E CF
1203+ CBEC 62 CF 64 CF
1203+ CBF0 68 CF 6C CF
1203+ CBF4 6E CF 72 CF
1204+ CBF8 74 CF 78 CF                          DW SunSqrD0,SunSqrD1,SunSqrD2,SunSqrD3,SunSqrD4,SunSqrD5,SunSqrD6,SunSqrD7,SunSqrD8,SunSqrD9,SunSqrDA,SunSqrDB,SunSqrDC,SunSqrDD,SunSqrDE,SunSqrDF
1204+ CBFC 7A CF 7E CF
1204+ CC00 80 CF 84 CF
1204+ CC04 88 CF 8A CF
1204+ CC08 8E CF 90 CF
1204+ CC0C 94 CF 96 CF
1204+ CC10 9A CF 9C CF
1204+ CC14 9E CF A0 CF
1205+ CC18 A4 CF A8 CF                          DW SunSqrE0,SunSqrE1,SunSqrE2,SunSqrE3,SunSqrE4,SunSqrE5,SunSqrE6,SunSqrE7,SunSqrE8,SunSqrE9,SunSqrEA,SunSqrEB,SunSqrEC,SunSqrED,SunSqrEE,SunSqrEF
1205+ CC1C AC CF B0 CF
1205+ CC20 B4 CF B8 CF
1205+ CC24 BA CF BE CF
1205+ CC28 C2 CF C6 CF
1205+ CC2C C8 CF CC CF
1205+ CC30 CE CF D0 CF
1205+ CC34 D2 CF D6 CF
1206+ CC38 D8 CF DA CF                          DW SunSqrF0,SunSqrF1,SunSqrF2,SunSqrF3,SunSqrF4,SunSqrF5,SunSqrF6,SunSqrF7,SunSqrF8,SunSqrF9,SunSqrFA,SunSqrFB,SunSqrFC,SunSqrFD,SunSqrFE,SunSqrFF
1206+ CC3C DC CF E0 CF
1206+ CC40 E2 CF E6 CF
1206+ CC44 E8 CF EC CF
1206+ CC48 EE CF F2 CF
1206+ CC4C F4 CF F8 CF
1206+ CC50 FA CF FE CF
1206+ CC54 00 D0 02 D0
1207+ CC58
1208+ CC58              SunSquareRootTable:
1209+ CC58 00 00        SunSqr00:               DB $00,   0
1210+ CC5A 04 02                                DB $04,   2
1211+ CC5C 10 04                                DB $10,   4
1212+ CC5E 24 06                                DB $24,   6
1213+ CC60 40 08                                DB $40,   8
1214+ CC62 64 0A                                DB $64,  10
1215+ CC64 90 0C                                DB $90,  12
1216+ CC66 C4 0E                                DB $C4,  14
1217+ CC68 FF 0F                                DB $FF,  15
1218+ CC6A 00 10        SunSqr01:               DB $00,  16
1219+ CC6C 21 11                                DB $21,  17
1220+ CC6E 44 12                                DB $44,  18
1221+ CC70 69 13                                DB $69,  19
1222+ CC72 90 14                                DB $90,  20
1223+ CC74 B9 15                                DB $B9,  21
1224+ CC76 FF 16                                DB $FF,  22
1225+ CC78 11 17        SunSqr02:               DB $11,  23
1226+ CC7A 40 18                                DB $40,  24
1227+ CC7C 71 19                                DB $71,  25
1228+ CC7E A4 1A                                DB $A4,  26
1229+ CC80 D9 1B                                DB $D9,  27
1230+ CC82 FF 1B                                DB $FF,  27
1231+ CC84 10 1C        SunSqr03:               DB $10,  28
1232+ CC86 49 1D                                DB $49,  29
1233+ CC88 84 1E                                DB $84,  30
1234+ CC8A C1 1F                                DB $C1,  31
1235+ CC8C FF 1F                                DB $FF,  31
1236+ CC8E 00 20        SunSqr04:               DB $00,  32
1237+ CC90 41 21                                DB $41,  33
1238+ CC92 84 22                                DB $84,  34
1239+ CC94 FF 23                                DB $FF,  35
1240+ CC96 10 24        SunSqr05:               DB $10,  36
1241+ CC98 59 25                                DB $59,  37
1242+ CC9A A4 26                                DB $A4,  38
1243+ CC9C FF 27                                DB $FF,  39
1244+ CC9E 40 28        SunSqr06:               DB $40,  40
1245+ CCA0 91 29                                DB $91,  41
1246+ CCA2 E4 2A                                DB $E4,  42
1247+ CCA4 FF 2A                                DB $FF,  42
1248+ CCA6 39 2B        SunSqr07:               DB $39,  43
1249+ CCA8 90 2C                                DB $90,  44
1250+ CCAA E9 2D                                DB $E9,  45
1251+ CCAC FF 2D                                DB $FF,  45
1252+ CCAE 44 2E        SunSqr08:               DB $44,  46
1253+ CCB0 A1 2F                                DB $A1,  47
1254+ CCB2 FF 2F                                DB $FF,  47
1255+ CCB4 00 30        SunSqr09:               DB $00,  48
1256+ CCB6 61 31                                DB $61,  49
1257+ CCB8 C4 32                                DB $C4,  50
1258+ CCBA FF 32                                DB $FF,  50
1259+ CCBC 29 33        SunSqr0A:               DB $29,  51
1260+ CCBE 90 34                                DB $90,  52
1261+ CCC0 FF 35                                DB $FF,  53
1262+ CCC2 64 36        SunSqr0B:               DB $64,  54
1263+ CCC4 FF 37                                DB $FF,  55
1264+ CCC6 40 38        SunSqr0C:               DB $40,  56
1265+ CCC8 B1 39                                DB $B1,  57
1266+ CCCA FF 39                                DB $FF,  57
1267+ CCCC 24 3A        SunSqr0D:               DB $24,  58
1268+ CCCE 99 3B                                DB $99,  59
1269+ CCD0 FF 3B                                DB $FF,  59
1270+ CCD2 10 3C        SunSqr0E:               DB $10,  60
1271+ CCD4 89 3D                                DB $89,  61
1272+ CCD6 FF 3D                                DB $FF,  61
1273+ CCD8 04 3E        SunSqr0F:               DB $04,  62
1274+ CCDA 81 3F                                DB $81,  63
1275+ CCDC FF 3F                                DB $FF,  63
1276+ CCDE 00 40        SunSqr10:               DB $00,  64
1277+ CCE0 81 41                                DB $81,  65
1278+ CCE2 FF 41                                DB $FF,  65
1279+ CCE4 04 42        SunSqr11:               DB $04,  66
1280+ CCE6 89 43                                DB $89,  67
1281+ CCE8 FF 43                                DB $FF,  67
1282+ CCEA 10 44        SunSqr12:               DB $10,  68
1283+ CCEC 99 45                                DB $99,  69
1284+ CCEE FF 45                                DB $FF,  69
1285+ CCF0 24 46        SunSqr13:               DB $24,  70
1286+ CCF2 B1 47                                DB $B1,  71
1287+ CCF4 FF 47                                DB $FF,  71
1288+ CCF6 40 48        SunSqr14:               DB $40,  72
1289+ CCF8 FF 49                                DB $FF,  73
1290+ CCFA 64 4A        SunSqr15:               DB $64,  74
1291+ CCFC FF 4B                                DB $FF,  75
1292+ CCFE FF 4C        SunSqr16:               DB $FF,  76
1293+ CD00 C4 4D        SunSqr17:               DB $C4,  77
1294+ CD02 FF 4E                                DB $FF,  78
1295+ CD04 61 4F        SunSqr18:               DB $61,  79
1296+ CD06 FF 4F                                DB $FF,  79
1297+ CD08 00 50        SunSqr19:               DB $00,  80
1298+ CD0A FF 51                                DB $FF,  81
1299+ CD0C 44 52        SunSqr1A:               DB $44,  82
1300+ CD0E FF 53                                DB $FF,  83
1301+ CD10 90 54        SunSqr1B:               DB $90,  84
1302+ CD12 FF 54                                DB $FF,  84
1303+ CD14 39 55        SunSqr1C:               DB $39,  85
1304+ CD16 FF 56                                DB $FF,  86
1305+ CD18 FF 57        SunSqr1D:               DB $FF,  87
1306+ CD1A 40 58        SunSqr1E:               DB $40,  88
1307+ CD1C FF 59                                DB $FF,  89
1308+ CD1E FF 5A        SunSqr1F:               DB $FF,  90
1309+ CD20 59 5B        SunSqr20:               DB $59,  91
1310+ CD22 FF 5B                                DB $FF,  91
1311+ CD24 10 5C        SunSqr21:               DB $10,  92
1312+ CD26 FF 5D                                DB $FF,  93
1313+ CD28 FF 5E        SunSqr22:               DB $FF,  94
1314+ CD2A FF 5F        SunSqr23:               DB $FF,  95
1315+ CD2C 00 60        SunSqr24:               DB $00,  96
1316+ CD2E FF 61                                DB $FF,  97
1317+ CD30 84 62        SunSqr25:               DB $84,  98
1318+ CD32 49 63        SunSqr26:               DB $49,  99
1319+ CD34 10 64        SunSqr27:               DB $10, 100
1320+ CD36 FF 65                                DB $FF, 101
1321+ CD38 FF 66        SunSqr28:               DB $FF, 102
1322+ CD3A FF 67        SunSqr29:               DB $FF, 103
1323+ CD3C FF 68        SunSqr2A:               DB $FF, 104
1324+ CD3E 11 69        SunSqr2B:               DB $11, 105
1325+ CD40 FF 6A                                DB $FF, 106
1326+ CD42 FF 6B        SunSqr2C:               DB $FF, 107
1327+ CD44 FF 6C        SunSqr2D:               DB $FF, 108
1328+ CD46 69 6D        SunSqr2E:               DB $69, 109
1329+ CD48 FF 6E                                DB $FF, 110
1330+ CD4A 44 6E        SunSqr2F:               DB $44, 110
1331+ CD4C FF 6F                                DB $FF, 111
1332+ CD4E 21 6F        SunSqr30:               DB $21, 111
1333+ CD50 FF 70                                DB $FF, 112
1334+ CD52 00 70        SunSqr31:               DB $00, 112
1335+ CD54 FF 71                                DB $FF, 113
1336+ CD56 C4 72        SunSqr32:               DB $C4, 114
1337+ CD58 FF 72                                DB $FF, 114
1338+ CD5A FF 73        SunSqr33:               DB $FF, 115
1339+ CD5C 90 74        SunSqr34:               DB $90, 116
1340+ CD5E FF 75                                DB $FF, 117
1341+ CD60 79 75        SunSqr35:               DB $79, 117
1342+ CD62 FF 76                                DB $FF, 118
1343+ CD64 64 76        SunSqr36:               DB $64, 118
1344+ CD66 64 77                                DB $64, 119
1345+ CD68 51 77        SunSqr37:               DB $51, 119
1346+ CD6A 40 78        SunSqr38:               DB $40, 120
1347+ CD6C FF 79                                DB $FF, 121
1348+ CD6E 31 79        SunSqr39:               DB $31, 121
1349+ CD70 FF 7A                                DB $FF, 122
1350+ CD72 24 7A        SunSqr3A:               DB $24, 122
1351+ CD74 FF 7B                                DB $FF, 123
1352+ CD76 19 7B        SunSqr3B:               DB $19, 123
1353+ CD78 FF 7C                                DB $FF, 124
1354+ CD7A 10 7C        SunSqr3C:               DB $10, 124
1355+ CD7C FF 7D                                DB $FF, 125
1356+ CD7E 09 7D        SunSqr3D:               DB $09, 125
1357+ CD80 FF 7D                                DB $FF, 125
1358+ CD82 04 7E        SunSqr3E:               DB $04, 126
1359+ CD84 FF 7E                                DB $FF, 126
1360+ CD86 01 7F        SunSqr3F:               DB $01, 127
1361+ CD88 FF 7F                                DB $FF, 127
1362+ CD8A 00 80        SunSqr40:               DB $00, 128
1363+ CD8C FF 80                                DB $FF, 128
1364+ CD8E 01 81        SunSqr41:               DB $01, 129
1365+ CD90 FF 82                                DB $FF, 130
1366+ CD92 04 82        SunSqr42:               DB $04, 130
1367+ CD94 FF 83                                DB $FF, 131
1368+ CD96 09 83        SunSqr43:               DB $09, 131
1369+ CD98 FF 84                                DB $FF, 132
1370+ CD9A 10 84        SunSqr44:               DB $10, 132
1371+ CD9C FF 85                                DB $FF, 133
1372+ CD9E 19 85        SunSqr45:               DB $19, 133
1373+ CDA0 FF 86                                DB $FF, 134
1374+ CDA2 24 86        SunSqr46:               DB $24, 134
1375+ CDA4 FF 87                                DB $FF, 135
1376+ CDA6 31 87        SunSqr47:               DB $31, 135
1377+ CDA8 FF 88                                DB $FF, 136
1378+ CDAA 40 88        SunSqr48:               DB $40, 136
1379+ CDAC FF 89                                DB $FF, 137
1380+ CDAE 51 89        SunSqr49:               DB $51, 137
1381+ CDB0 FF 8A                                DB $FF, 138
1382+ CDB2 64 8A        SunSqr4A:               DB $64, 138
1383+ CDB4 FF 8A                                DB $FF, 138
1384+ CDB6 79 8B        SunSqr4B:               DB $79, 139
1385+ CDB8 FF 8B                                DB $FF, 139
1386+ CDBA 90 8C        SunSqr4C:               DB $90, 140
1387+ CDBC FF 8C                                DB $FF, 140
1388+ CDBE A9 8D        SunSqr4D:               DB $A9, 141
1389+ CDC0 FF 8D                                DB $FF, 141
1390+ CDC2 C4 8E        SunSqr4E:               DB $C4, 142
1391+ CDC4 FF 8E                                DB $FF, 142
1392+ CDC6 E1 8F        SunSqr4F:               DB $E1, 143
1393+ CDC8 FF 8F                                DB $FF, 143
1394+ CDCA FF 8F        SunSqr50:               DB $FF, 143
1395+ CDCC 00 90        SunSqr51:               DB $00, 144
1396+ CDCE FF 90                                DB $FF, 144
1397+ CDD0 21 91        SunSqr52:               DB $21, 145
1398+ CDD2 FF 91                                DB $FF, 145
1399+ CDD4 44 92        SunSqr53:               DB $44, 146
1400+ CDD6 FF 92                                DB $FF, 146
1401+ CDD8 69 93        SunSqr54:               DB $69, 147
1402+ CDDA FF 93                                DB $FF, 147
1403+ CDDC 90 94        SunSqr55:               DB $90, 148
1404+ CDDE FF 94                                DB $FF, 148
1405+ CDE0 B9 95        SunSqr56:               DB $B9, 149
1406+ CDE2 FF 95                                DB $FF, 149
1407+ CDE4 E4 96        SunSqr57:               DB $E4, 150
1408+ CDE6 FF 96                                DB $FF, 150
1409+ CDE8 FF 96        SunSqr58:               DB $FF, 150
1410+ CDEA 11 97        SunSqr59:               DB $11, 151
1411+ CDEC FF 97                                DB $FF, 151
1412+ CDEE 40 98        SunSqr5A:               DB $40, 152
1413+ CDF0 FF 98                                DB $FF, 152
1414+ CDF2 71 99        SunSqr5B:               DB $71, 153
1415+ CDF4 FF 99                                DB $FF, 153
1416+ CDF6 A4 9A        SunSqr5C:               DB $A4, 154
1417+ CDF8 FF 9A                                DB $FF, 154
1418+ CDFA D9 9B        SunSqr5D:               DB $D9, 155
1419+ CDFC FF 9B                                DB $FF, 155
1420+ CDFE FF 9B        SunSqr5E:               DB $FF, 155
1421+ CE00 10 9C        SunSqr5F:               DB $10, 156
1422+ CE02 FF 9C                                DB $FF, 156
1423+ CE04 49 9D        SunSqr60:               DB $49, 157
1424+ CE06 FF 9D                                DB $FF, 157
1425+ CE08 84 9E        SunSqr61:               DB $84, 158
1426+ CE0A FF 9E                                DB $FF, 158
1427+ CE0C C1 9F        SunSqr62:               DB $C1, 159
1428+ CE0E FF 9F                                DB $FF, 159
1429+ CE10 FF 9F        SunSqr63:               DB $FF, 159
1430+ CE12 00 A0        SunSqr64:               DB $00, 160
1431+ CE14 FF A0                                DB $FF, 160
1432+ CE16 41 A1        SunSqr65:               DB $41, 161
1433+ CE18 FF A1                                DB $FF, 161
1434+ CE1A 84 A2        SunSqr66:               DB $84, 162
1435+ CE1C FF A2                                DB $FF, 162
1436+ CE1E C9 A3        SunSqr67:               DB $C9, 163
1437+ CE20 FF A3                                DB $FF, 163
1438+ CE22 FF A3        SunSqr68:               DB $FF, 163
1439+ CE24 10 A4        SunSqr69:               DB $10, 164
1440+ CE26 FF A4                                DB $FF, 164
1441+ CE28 59 A5        SunSqr6A:               DB $59, 165
1442+ CE2A FF A5                                DB $FF, 165
1443+ CE2C A4 A6        SunSqr6B:               DB $A4, 166
1444+ CE2E FF A6                                DB $FF, 166
1445+ CE30 FF A7        SunSqr6C:               DB $FF, 167
1446+ CE32 FF A7        SunSqr6D:               DB $FF, 167
1447+ CE34 40 A8        SunSqr6E:               DB $40, 168
1448+ CE36 FF A8                                DB $FF, 168
1449+ CE38 91 A9        SunSqr6F:               DB $91, 169
1450+ CE3A FF A9                                DB $FF, 169
1451+ CE3C E4 AA        SunSqr70:               DB $E4, 170
1452+ CE3E FF AA                                DB $FF, 170
1453+ CE40 00 AA        SunSqr71:               DB $00, 170
1454+ CE42 FF AA                                DB $FF, 170
1455+ CE44 39 AB        SunSqr72:               DB $39, 171
1456+ CE46 FF AB                                DB $FF, 171
1457+ CE48 90 AC        SunSqr73:               DB $90, 172
1458+ CE4A FF AC                                DB $FF, 172
1459+ CE4C E9 AD        SunSqr74:               DB $E9, 173
1460+ CE4E FF AD                                DB $FF, 173
1461+ CE50 FF AD        SunSqr75:               DB $FF, 173
1462+ CE52 44 AE        SunSqr76:               DB $44, 174
1463+ CE54 FF AE                                DB $FF, 174
1464+ CE56 A1 AF        SunSqr77:               DB $A1, 175
1465+ CE58 FF AF                                DB $FF, 175
1466+ CE5A FF AF        SunSqr78:               DB $FF, 175
1467+ CE5C 00 B0        SunSqr79:               DB $00, 176
1468+ CE5E FF B0                                DB $FF, 176
1469+ CE60 61 B1        SunSqr7A:               DB $61, 177
1470+ CE62 FF B1                                DB $FF, 177
1471+ CE64 C4 B2        SunSqr7B:               DB $C4, 178
1472+ CE66 FF B2                                DB $FF, 178
1473+ CE68 FF B2        SunSqr7C:               DB $FF, 178
1474+ CE6A 29 B3        SunSqr7D:               DB $29, 179
1475+ CE6C FF B3                                DB $FF, 179
1476+ CE6E 90 B4        SunSqr7E:               DB $90, 180
1477+ CE70 FF B4                                DB $FF, 180
1478+ CE72 F9 B5        SunSqr7F:               DB $F9, 181
1479+ CE74 FF B5                                DB $FF, 181
1480+ CE76 FF B5        SunSqr80:               DB $FF, 181
1481+ CE78 64 B6        SunSqr81:               DB $64, 182
1482+ CE7A FF B6                                DB $FF, 182
1483+ CE7C D1 B7        SunSqr82:               DB $D1, 183
1484+ CE7E FF B7        SunSqr83:               DB $FF, 183
1485+ CE80 FF B7                                DB $FF, 183
1486+ CE82 40 B8        SunSqr84:               DB $40, 184
1487+ CE84 FF B8                                DB $FF, 184
1488+ CE86 B1 B9        SunSqr85:               DB $B1, 185
1489+ CE88 FF B9                                DB $FF, 185
1490+ CE8A FF B9        SunSqr86:               DB $FF, 185
1491+ CE8C 24 BA        SunSqr87:               DB $24, 186
1492+ CE8E FF BA                                DB $FF, 186
1493+ CE90 99 BB        SunSqr88:               DB $99, 187
1494+ CE92 FF BB                                DB $FF, 187
1495+ CE94 FF BB        SunSqr89:               DB $FF, 187
1496+ CE96 10 BC        SunSqr8A:               DB $10, 188
1497+ CE98 FF BC                                DB $FF, 188
1498+ CE9A 89 BD        SunSqr8B:               DB $89, 189
1499+ CE9C FF BD                                DB $FF, 189
1500+ CE9E FF BD        SunSqr8C:               DB $FF, 189
1501+ CEA0 04 BE        SunSqr8D:               DB $04, 190
1502+ CEA2 FF BE                                DB $FF, 190
1503+ CEA4 81 BF        SunSqr8E:               DB $81, 191
1504+ CEA6 FF BF                                DB $FF, 191
1505+ CEA8 FF BF        SunSqr8F:               DB $FF, 191
1506+ CEAA 00 C0        SunSqr90:               DB $00, 192
1507+ CEAC FF C0                                DB $FF, 192
1508+ CEAE 81 C1        SunSqr91:               DB $81, 193
1509+ CEB0 FF C1                                DB $FF, 193
1510+ CEB2 FF C1        SunSqr92:               DB $FF, 193
1511+ CEB4 04 C2        SunSqr93:               DB $04, 194
1512+ CEB6 FF C2                                DB $FF, 194
1513+ CEB8 89 C3        SunSqr94:               DB $89, 195
1514+ CEBA FF C3                                DB $FF, 195
1515+ CEBC FF C3        SunSqr95:               DB $FF, 195
1516+ CEBE 10 C4        SunSqr96:               DB $10, 196
1517+ CEC0 FF C4                                DB $FF, 196
1518+ CEC2 99 C5        SunSqr97:               DB $99, 197
1519+ CEC4 FF C5                                DB $FF, 197
1520+ CEC6 FF C5        SunSqr98:               DB $FF, 197
1521+ CEC8 24 C6        SunSqr99:               DB $24, 198
1522+ CECA FF C6                                DB $FF, 198
1523+ CECC B1 C7        SunSqr9A:               DB $B1, 199
1524+ CECE FF C7                                DB $FF, 199
1525+ CED0 FF C7        SunSqr9B:               DB $FF, 199
1526+ CED2 40 C8        SunSqr9C:               DB $40, 200
1527+ CED4 FF C8                                DB $FF, 200
1528+ CED6 D1 C9        SunSqr9D:               DB $D1, 201
1529+ CED8 FF C9                                DB $FF, 201
1530+ CEDA FF C9        SunSqr9E:               DB $FF, 201
1531+ CEDC 64 CA        SunSqr9F:               DB $64, 202
1532+ CEDE FF CA                                DB $FF, 202
1533+ CEE0 F9 CB        SunSqrA0:               DB $F9, 203
1534+ CEE2 FF CB                                DB $FF, 203
1535+ CEE4 FF CB        SunSqrA1:               DB $FF, 203
1536+ CEE6 90 CC        SunSqrA2:               DB $90, 204
1537+ CEE8 FF CC                                DB $FF, 204
1538+ CEEA FF CC        SunSqrA3:               DB $FF, 204
1539+ CEEC 29 CD        SunSqrA4:               DB $29, 205
1540+ CEEE FF CD                                DB $FF, 205
1541+ CEF0 C4 CE        SunSqrA5:               DB $C4, 206
1542+ CEF2 FF CE                                DB $FF, 206
1543+ CEF4 FF CE        SunSqrA6:               DB $FF, 206
1544+ CEF6 61 CF        SunSqrA7:               DB $61, 207
1545+ CEF8 FF CF                                DB $FF, 207
1546+ CEFA FF CF        SunSqrA8:               DB $FF, 207
1547+ CEFC 00 D0        SunSqrA9:               DB $00, 208
1548+ CEFE FF D0                                DB $FF, 208
1549+ CF00 A1 D1        SunSqrAA:               DB $A1, 209
1550+ CF02 FF D1                                DB $FF, 209
1551+ CF04 FF D1        SunSqrAB:               DB $FF, 209
1552+ CF06 44 D2        SunSqrAC:               DB $44, 210
1553+ CF08 FF D2                                DB $FF, 210
1554+ CF0A E9 D3        SunSqrAD:               DB $E9, 211
1555+ CF0C FF D3                                DB $FF, 211
1556+ CF0E FF D3        SunSqrAE:               DB $FF, 211
1557+ CF10 90 D4        SunSqrAF:               DB $90, 212
1558+ CF12 FF D4        SunSqrB0:               DB $FF, 212
1559+ CF14 39 D5        SunSqrB1:               DB $39, 213
1560+ CF16 FF D5                                DB $FF, 213
1561+ CF18 E4 D6        SunSqrB2:               DB $E4, 214
1562+ CF1A FF D6                                DB $FF, 214
1563+ CF1C FF D6        SunSqrB3:               DB $FF, 214
1564+ CF1E 91 D7        SunSqrB4:               DB $91, 215
1565+ CF20 FF D7                                DB $FF, 215
1566+ CF22 FF D7        SunSqrB5:               DB $FF, 215
1567+ CF24 40 D8        SunSqrB6:               DB $40, 216
1568+ CF26 FF D8                                DB $FF, 216
1569+ CF28 F1 D9        SunSqrB7:               DB $F1, 217
1570+ CF2A FF D9                                DB $FF, 217
1571+ CF2C FF D9        SunSqrB8:               DB $FF, 217
1572+ CF2E FF D9                                DB $FF, 217
1573+ CF30 A4 DA        SunSqrB9:               DB $A4, 218
1574+ CF32 FF DA        SunSqrBA:               DB $FF, 218 ; we can reuse SunSeqrBA as  $FF for B9 terminator as well as they have the same target
1575+ CF34 59 DB        SunSqrBB:               DB $59, 219
1576+ CF36 FF DB                                DB $FF, 219
1577+ CF38 FF DB        SunSqrBC:               DB $FF, 219
1578+ CF3A 10 DC        SunSqrBD:               DB $10, 220
1579+ CF3C FF DC                                DB $FF, 220
1580+ CF3E C9 DD        SunSqrBE:               DB $C9, 221
1581+ CF40 FF DD                                DB $FF, 221
1582+ CF42 FF DD        SunSqrBF:               DB $FF, 221
1583+ CF44 84 DE        SunSqrC0:               DB $84, 222
1584+ CF46 FF DE                                DB $FF, 222
1585+ CF48 FF DE        SunSqrC1:               DB $FF, 222
1586+ CF4A 41 DF        SunSqrC2:               DB $41, 223
1587+ CF4C FF DF                                DB $FF, 223
1588+ CF4E FF DF        SunSqrC3:               DB $FF, 223
1589+ CF50 00 E0        SunSqrC4:               DB $00, 224
1590+ CF52 FF E0                                DB $FF, 224
1591+ CF54 C1 E1        SunSqrC5:               DB $C1, 225
1592+ CF56 FF E1                                DB $FF, 225
1593+ CF58 FF E1        SunSqrC6:               DB $FF, 225
1594+ CF5A 84 E2        SunSqrC7:               DB $84, 226
1595+ CF5C FF E2        SunSqrC8:               DB $FF, 226
1596+ CF5E 49 E3        SunSqrC9:               DB $49, 227
1597+ CF60 FF E3                                DB $FF, 227
1598+ CF62 FF E4        SunSqrCA:               DB $FF, 228
1599+ CF64 10 E4        SunSqrCB:               DB $10, 228
1600+ CF66 FF E4                                DB $FF, 228
1601+ CF68 D9 E5        SunSqrCC:               DB $D9, 229
1602+ CF6A FF E5                                DB $FF, 229
1603+ CF6C FF E5        SunSqrCD:               DB $FF, 229
1604+ CF6E A4 E6        SunSqrCE:               DB $A4, 230
1605+ CF70 FF E6                                DB $FF, 230
1606+ CF72 FF E6        SunSqrCF:               DB $FF, 230
1607+ CF74 71 E7        SunSqrD0:               DB $71, 231
1608+ CF76 FF E7                                DB $FF, 231
1609+ CF78 FF E7        SunSqrD1:               DB $FF, 231
1610+ CF7A 40 E8        SunSqrD2:               DB $40, 232
1611+ CF7C FF E8                                DB $FF, 232
1612+ CF7E FF E8        SunSqrD3:               DB $FF, 232
1613+ CF80 11 E9        SunSqrD4:               DB $11, 233
1614+ CF82 FF E9                                DB $FF, 233
1615+ CF84 E4 EA        SunSqrD5:               DB $E4, 234
1616+ CF86 FF EA                                DB $FF, 234
1617+ CF88 FF EA        SunSqrD6:               DB $FF, 234
1618+ CF8A B9 EB        SunSqrD7:               DB $B9, 235
1619+ CF8C FF EB                                DB $FF, 235
1620+ CF8E FF EB        SunSqrD8:               DB $FF, 235
1621+ CF90 90 EC        SunSqrD9:               DB $90, 236
1622+ CF92 FF EC                                DB $FF, 236
1623+ CF94 FF EC        SunSqrDA:               DB $FF, 236
1624+ CF96 69 ED        SunSqrDB:               DB $69, 237
1625+ CF98 FF ED                                DB $FF, 237
1626+ CF9A FF ED        SunSqrDC:               DB $FF, 237
1627+ CF9C 44 EE        SunSqrDD:               DB $44, 238
1628+ CF9E FF EE        SunSqrDE:               DB $FF, 238
1629+ CFA0 21 EF        SunSqrDF:               DB $21, 239
1630+ CFA2 FF EF                                DB $FF, 239
1631+ CFA4 00 F0        SunSqrE0:               DB $00, 240
1632+ CFA6 FF F0                                DB $FF, 240
1633+ CFA8 00 F0        SunSqrE1:               DB $00, 240
1634+ CFAA FF F0                                DB $FF, 240
1635+ CFAC E1 F1        SunSqrE2:               DB $E1, 241
1636+ CFAE FF F1                                DB $FF, 241
1637+ CFB0 E1 F1        SunSqrE3:               DB $E1, 241
1638+ CFB2 FF F1                                DB $FF, 241
1639+ CFB4 C4 F2        SunSqrE4:               DB $C4, 242
1640+ CFB6 FF F2                                DB $FF, 242
1641+ CFB8 FF F2        SunSqrE5:               DB $FF, 242
1642+ CFBA A9 F3        SunSqrE6:               DB $A9, 243
1643+ CFBC FF F3                                DB $FF, 243
1644+ CFBE FF F3        SunSqrE7:               DB $FF, 243
1645+ CFC0 FF F3                                DB $FF, 243
1646+ CFC2 90 F3        SunSqrE8:               DB $90, 243
1647+ CFC4 FF F4                                DB $FF, 244
1648+ CFC6 FF F4        SunSqrE9:               DB $FF, 244
1649+ CFC8 79 F5        SunSqrEA:               DB $79, 245
1650+ CFCA FF F5                                DB $FF, 245
1651+ CFCC FF F5        SunSqrEB:               DB $FF, 245
1652+ CFCE 64 F6        SunSqrEC:               DB $64, 246
1653+ CFD0 FF F6        SunSqrED:               DB $FF, 246
1654+ CFD2 51 F7        SunSqrEE:               DB $51, 247
1655+ CFD4 FF F7                                DB $FF, 247
1656+ CFD6 FF F7        SunSqrEF:               DB $FF, 247
1657+ CFD8 40 F8        SunSqrF0:               DB $40, 248
1658+ CFDA FF F8        SunSqrF1:               DB $FF, 248
1659+ CFDC 31 F9        SunSqrF2:               DB $31, 249
1660+ CFDE FF F9                                DB $FF, 249
1661+ CFE0 FF F9        SunSqrF3:               DB $FF, 249
1662+ CFE2 24 FA        SunSqrF4:               DB $24, 250
1663+ CFE4 FF FA                                DB $FF, 250
1664+ CFE6 FF FA        SunSqrF5:               DB $FF, 250
1665+ CFE8 19 FB        SunSqrF6:               DB $19, 251
1666+ CFEA FF FB                                DB $FF, 251
1667+ CFEC FF FB        SunSqrF7:               DB $FF, 251
1668+ CFEE 10 FC        SunSqrF8:               DB $10, 252
1669+ CFF0 FF FC                                DB $FF, 252
1670+ CFF2 FF FC        SunSqrF9:               DB $FF, 252
1671+ CFF4 09 FD        SunSqrFA:               DB $09, 253
1672+ CFF6 FF FD                                DB $FF, 253
1673+ CFF8 FF FD        SunSqrFB:               DB $FF, 253
1674+ CFFA 04 FE        SunSqrFC:               DB $04, 254
1675+ CFFC FF FE                                DB $FF, 254
1676+ CFFE FF FE        SunSqrFD:               DB $FF, 254
1677+ D000 01 FF        SunSqrFE:               DB $01, 255
1678+ D002 FF FF        SunSqrFF:               DB $FF, 255
1679+ D004
1680+ D004
1681+ D004
1682+ D004              SunBankSize  EQU $ - StartOfSun
1683+ D004
1684+ D004
# file closed: ./Universe/Sun/sun_data.asm
1137  D004                                  DISPLAY "Bank ",BankSunData," - Bytes free ",/D, $2000 - ($-SunBankAddr), " - BankSunData"
1138  D004                                  ASSERT $-SunBankAddr <8912, Bank code leaks over 8K boundary
1139  D004              ; Bank 85  ------------------------------------------------------------------------------------------------------------------------
1140  D004                                  SLOT    PlanetBankAddr
1141  D004                                  PAGE    BankPlanetData
1142  D004                                  ORG	    PlanetBankAddr,BankPlanetData
1143  C000                                  INCLUDE "./Universe/Planet/planet_data.asm"
# file opened: ./Universe/Planet/planet_data.asm
   1+ C000
   2+ C000              ;- DEBUG CODE
   3+ C000                                      IFDEF BLINEDEBUG
   4+ C000 ~            TestBLINE:              ld  a,$FF
   5+ C000 ~                                    ld  (P_BnkFlag),a
   6+ C000 ~                                    ld  a,5
   7+ C000 ~                                    ld  (P_BnkSTP),a
   8+ C000 ~                                    ZeroA
   9+ C000 ~                                    ld  (P_BnkCNT),a
  10+ C000 ~            .DebugLoop:             ld  ix,(DataPointer)
  11+ C000 ~                                    ld  a,(ix+0)
  12+ C000 ~                                    ld  l,a
  13+ C000 ~                                    ld  a,(ix+1)
  14+ C000 ~                                    ld  h,a
  15+ C000 ~                                    ld  (P_NewXPos),hl
  16+ C000 ~                                    ld  a,(ix+2)
  17+ C000 ~                                    ld  l,a
  18+ C000 ~                                    ld  a,(ix+3)
  19+ C000 ~                                    ld  h,a
  20+ C000 ~                                    ld  (P_NewYPos),hl
  21+ C000 ~                                    call    BLINE
  22+ C000 ~                                    ld      a,(DataPointCounter)
  23+ C000 ~                                    inc     a
  24+ C000 ~                                    ld      hl,DataPointSize
  25+ C000 ~                                    cp      (hl)
  26+ C000 ~                                    ret     z
  27+ C000 ~                                    ld      (DataPointCounter),a
  28+ C000 ~                                    ld      hl,(DataPointer)
  29+ C000 ~                                    ld      a,4
  30+ C000 ~                                    add     hl,a
  31+ C000 ~                                    ld      (DataPointer),hl
  32+ C000 ~                                    jp      .DebugLoop
  33+ C000 ~
  34+ C000 ~            DataPoints:             DW  10,10, 20,60, 30,20, 40,50, 100,90, 150, 30
  35+ C000 ~            DataPointSize           DB  6
  36+ C000 ~            DataPointCounter        DB  0
  37+ C000 ~            DataPointer:            DW  DataPoints
  38+ C000                                      ENDIF
  39+ C000
  40+ C000                                      IFDEF TESTMERIDIAN
  41+ C000 ~            TestMeridian:           ld      hl,20        ; 20
  42+ C000 ~                                    ld      (P_BnkVx),hl ; vx
  43+ C000 ~                                    ld      hl,20        ; 20
  44+ C000 ~                                    ld      (P_BnkVy),hl ; vy
  45+ C000 ~                                    ld      hl,20        ; 20
  46+ C000 ~                                    ld      (P_BnkUx),hl ; ux
  47+ C000 ~                                    ld      hl, $8014    ; -20
  48+ C000 ~                                    ld      (P_BnkUy),hl ; uy
  49+ C000 ~                                    ld      de,120       ; 120
  50+ C000 ~                                    ld      (P_BnkCx),de ; cx
  51+ C000 ~                                    ld      de,69        ; 69
  52+ C000 ~                                    ld      (P_BnkCy),de ; cy
  53+ C000 ~                                    call    DrawMeridian
  54+ C000                                      ENDIF
  55+ C000
  56+ C000              ; In  flight ship data tables
  57+ C000              ; In  flight ship data tables
  58+ C000              ; In  flight ship data tables
  59+ C000              ; There can be upto &12 objects in flight.
  60+ C000              ; To avoid hassle of memory heap managment, the free list
  61+ C000              ; will correspond to a memory bank offset so data will be held in
  62+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
  63+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
  64+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
  65+ C000              ; This means each gets its own line list, inwork etc
  66+ C000
  67+ C000              ; "Runtime Ship Data paged into in Bank 7"
  68+ C000              ;                      0123456789ABCDEF
  69+ C000 50 6C 61 6E  StartOfPlanet:     DB "Planet Data....."
  69+ C004 65 74 20 44
  69+ C008 61 74 61 2E
  69+ C00C 2E 2E 2E 2E
  70+ C010              ; NOTE we can cheat and pre allocate segs just using a DS for now
  71+ C010              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  72+ C010              ; Universe map substibute for INWK
  73+ C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  74+ C010              P_BnkDataBlock:
  75+ C010                                      ;INCLUDE "./Universe/Planet/PlanetPosVars.asm"
  76+ C010                                      ;INCLUDE "./Universe/Planet/PlanetRotationMatrixVars.asm"
  77+ C010                                      ;INCLUDE "./Universe/Planet/PlanetAIRuntimeData.asm"
  78+ C010                                          UnivPosVarsMacro P
  78+ C010 00          >P_Bnkxlo                     DB  0                       ; INWK+0
  78+ C011 00          >P_Bnkxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
  78+ C012 00          >P_Bnkxsgn                    DB  0                       ; INWK+2
  78+ C013 00          >P_Bnkylo                     DB  0                       ; INWK+3 \ ylo
  78+ C014 00          >P_Bnkyhi                     DB  0                       ; INWK+4 \ yHi
  78+ C015 00          >P_Bnkysgn                    DB  0                       ; INWK +5
  78+ C016 00          >P_Bnkzlo                     DB  0                       ; INWK +6
  78+ C017 00          >P_Bnkzhi                     DB  0                       ; INWK +7
  78+ C018 00          >P_Bnkzsgn                    DB  0                       ; INWK +8
  78+ C019 00 00       >P_CompassX                   DW  0
  78+ C01B 00 00       >P_CompassY                   DW  0
  78+ C01D 00 00       >P_BnkElipseCenterX           DW  0
  78+ C01F 00 00       >P_BnkElipseCenterY           DW  0
  78+ C021 00 00       >P_BnkElipseRadiusU           DW  0
  78+ C023 00 00       >P_BnkElipseRadiusV           DW  0
  79+ C025                                          UnivRotationVarsMacro P
  79+ C025 00 00       >P_BnkrotmatSidevX            DW  0                       ; INWK +21
  79+ C027             >P_BnkrotmatSidev             equ P_BnkrotmatSidevX
  79+ C027 00 00       >P_BnkrotmatSidevY            DW  0                       ; INWK +23
  79+ C029 00 00       >P_BnkrotmatSidevZ            DW  0                       ; INWK +25
  79+ C02B 00 00       >P_BnkrotmatRoofvX            DW  0                       ; INWK +15
  79+ C02D             >P_BnkrotmatRoofv             equ P_BnkrotmatRoofvX
  79+ C02D 00 00       >P_BnkrotmatRoofvY            DW  0                       ; INWK +17
  79+ C02F 00 00       >P_BnkrotmatRoofvZ            DW  0                       ; INWK +19
  79+ C031 00 00       >P_BnkrotmatNosevX            DW  0                       ; INWK +9
  79+ C033             >P_BnkrotmatNosev             EQU P_BnkrotmatNosevX
  79+ C033 00 00       >P_BnkrotmatNosevY            DW  0                       ; INWK +11
  79+ C035 00 00       >P_BnkrotmatNosevZ            DW  0                       ; INWK +13
  80+ C037
  81+ C037                                      ;INCLUDE "./Universe/Planet/PlanetXX16Vars.asm"
  82+ C037                                      ;INCLUDE "./Universe/Planet/PlanetXX25Vars.asm"
  83+ C037                                      ;INCLUDE "./Universe/Planet/PlanetXX18Vars.asm"
  84+ C037                                          XX16DefineMacro P
  84+ C037             >;-- XX16 --------------------------------------------------------------------------------------------------------------------------")
  84+ C037 00 00       >P_BnkTransmatSidevX          DW  0               ; XX16+0
  84+ C039             >P_BnkTransmatSidev           EQU P_BnkTransmatSidevX
  84+ C039 00 00       >P_BnkTransmatSidevY          DW 0                ; XX16+2
  84+ C03B 00 00       >P_BnkTransmatSidevZ          DW 0                ; XX16+2
  84+ C03D 00 00       >P_BnkTransmatRoofvX          DW 0
  84+ C03F             >P_BnkTransmatRoofv           EQU P_BnkTransmatRoofvX
  84+ C03F 00 00       >P_BnkTransmatRoofvY          DW 0                ; XX16+2
  84+ C041 00 00       >P_BnkTransmatRoofvZ          DW 0                ; XX16+2
  84+ C043 00 00       >P_BnkTransmatNosevX          DW 0
  84+ C045             >P_BnkTransmatNosev           EQU P_BnkTransmatNosevX
  84+ C045 00 00       >P_BnkTransmatNosevY          DW 0                ; XX16+2
  84+ C047 00 00       >P_BnkTransmatNosevZ          DW 0                ; XX16+2
  84+ C049 00 00       >P_BnkTransmatTransX          DW 0
  84+ C04B 00 00       >P_BnkTransmatTransY          DW 0
  84+ C04D 00 00       >P_BnkTransmatTransZ          DW 0
  84+ C04F             >P_XX16                       equ P_BnkTransmatSidev
  84+ C04F             >;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  84+ C04F 00 00       >P_BnkTransInvRow0x0          DW 0
  84+ C051 00 00       >P_BnkTransInvRow0x1          DW 0
  84+ C053 00 00       >P_BnkTransInvRow0x2          DW 0
  84+ C055 00 00       >P_BnkTransInvRow0x3          DW 0
  84+ C057 00 00       >P_BnkTransInvRow1y0          DW 0
  84+ C059 00 00       >P_BnkTransInvRow1y1          DW 0
  84+ C05B 00 00       >P_BnkTransInvRow1y2          DW 0
  84+ C05D 00 00       >P_BnkTransInvRow1y3          DW 0
  84+ C05F 00 00       >P_BnkTransInvRow2z0          DW 0
  84+ C061 00 00       >P_BnkTransInvRow2z1          DW 0
  84+ C063 00 00       >P_BnkTransInvRow2z2          DW 0
  84+ C065 00 00       >P_BnkTransInvRow2z3          DW 0
  84+ C067             >P_XX16Inv                    equ P_BnkTransInvRow0x0
  85+ C067                                          XX25DefineMacro P
  85+ C067             >;-- XX25 --------------------------------------------------------------------------------------------------------------------------
  85+ C067 00          >P_BnkProjxLo                 DB  0
  85+ C068 00          >P_BnkProjxHi                 DB  0
  85+ C069 00          >P_BnkProjxSgn                DB  0
  85+ C06A             >P_BnkProjx                   EQU P_BnkProjxLo
  85+ C06A 00          >P_BnkProjyLo                 DB  0
  85+ C06B 00          >P_BnkProjyHi                 DB  0
  85+ C06C 00          >P_BnkProjySgn                DB  0
  85+ C06D             >P_BnkProjy                   EQU P_BnkProjyLo
  85+ C06D 00          >P_BnkProjzLo                 DB  0
  85+ C06E 00          >P_BnkProjzHi                 DB  0
  85+ C06F 00          >P_BnkProjzSgn                DB  0
  85+ C070             >P_BnkProjz                   EQU P_BnkProjzLo
  85+ C070             >P_XX25                       EQU P_BnkProjxLo
  86+ C070                                          XX18DefineMacro P
  86+ C070             >;-- XX18 --------------------------------------------------------------------------------------------------------------------------
  86+ C070 00          >P_BnkDrawCam0xLo         DB  0               ; XX18+0
  86+ C071 00          >P_BnkDrawCam0xHi         DB  0               ; XX18+1
  86+ C072 00          >P_BnkDrawCam0xSgn        DB  0               ; XX18+2
  86+ C073             >P_BnkDrawCam0x           equ P_BnkDrawCam0xLo
  86+ C073 00          >P_BnkDrawCam0yLo         DB  0               ; XX18+3
  86+ C074 00          >P_BnkDrawCam0yHi         DB  0               ; XX18+4
  86+ C075 00          >P_BnkDrawCam0ySgn        DB  0               ; XX18+5
  86+ C076             >P_BnkDrawCam0y           equ P_BnkDrawCam0yLo
  86+ C076 00          >P_BnkDrawCam0zLo         DB  0               ; XX18+6
  86+ C077 00          >P_BnkDrawCam0zHi         DB  0               ; XX18+7
  86+ C078 00          >P_BnkDrawCam0zSgn        DB  0               ; XX18+8
  86+ C079             >P_BnkDrawCam0z           equ P_BnkDrawCam0zLo
  86+ C079             >P_XX18                   equ P_BnkDrawCam0xLo
  87+ C079
  88+ C079                                          UnivCoreAIVarsMacro P
  88+ C079 00          >P_BnkShipType                DB  0
  88+ C07A             >; Used to make 16 bit reads a little cleaner in source code
  88+ C07A 00 00 00    >P_BnkzPoint                  DS  3
  88+ C07D             >P_BnkzPointLo                equ P_BnkzPoint
  88+ C07D             >P_BnkzPointHi                equ P_BnkzPoint+1
  88+ C07D             >P_BnkzPointSign              equ P_BnkzPoint+2
  88+ C07D             >
  88+ C07D             >; Used for medridan drawing routines
  88+ C07D 00 00       >P_BnkCx                      DW  0
  88+ C07F             >P_BnkCxSign                  EQU P_BnkCx+1
  88+ C07F 00 00       >P_BnkCy                      DW  0
  88+ C081             >P_BnkCySign                  EQU P_BnkCy+1
  88+ C081 00 00       >P_BnkUx                      DW  0
  88+ C083             >P_BnkUxSign                  EQU P_BnkUx+1
  88+ C083 00 00       >P_BnkUy                      DW  0
  88+ C085             >P_BnkUySign                  EQU P_BnkUy+1
  88+ C085 00 00       >P_BnkVx                      DW  0
  88+ C087             >P_BnkVxSign                  EQU P_BnkVx+1
  88+ C087 00 00       >P_BnkVy                      DW  0
  88+ C089             >P_BnkVySign                  EQU P_BnkVy+1
  88+ C089 00          >P_BnkSinCNT2                 DB  0
  88+ C08A 00          >P_BnkSinCNT2Sign             DB  0
  88+ C08B 00          >P_BnkCosCNT2                 DB  0
  88+ C08C 00          >P_BnkCosCNT2Sign             DB  0
  88+ C08D 00          >P_BnkUxCos                   DB  0
  88+ C08E 00          >P_BnkUxCosSign               DB  0
  88+ C08F 00          >P_BnkUyCos                   DB  0
  88+ C090 00          >P_BnkUyCosSign               DB  0
  88+ C091 00          >P_BnkVxSin                   DB  0
  88+ C092 00          >P_BnkVxSinSign               DB  0
  88+ C093 00          >P_BnkVySin                   DB  0
  88+ C094 00          >P_BnkVySinSign               DB  0
  88+ C095 00          >P_BnkVxVySinSign             DB  0
  88+ C096 00          >P_BnkUxUyCosSign             DB  0
  88+ C097 00 00       >P_BnkUxCosAddVxSin           DW  0
  88+ C099 00 00       >P_BnkUyCosSubVySin           DW  0
  88+ C09B 00          >P_BnkAngle                   DB  0
  88+ C09C             >
  88+ C09C             >; General local variables used in universe object
  88+ C09C 00          >P_BnkTGT                     DB  0
  88+ C09D 00          >P_BnkSTP                     DB  0
  88+ C09E 00 00 00... >P_BnkLSP                     DS  50              ; move to planet or L2 code ?
  88+ C0D0 00          >P_BnkCNT                     DB  0               ; 93
  88+ C0D1 00          >P_BnkCNT2                    DB  0               ; 93
  88+ C0D2             >; Replaced LSX2 and LSY2 with plot heaps of 64 x 2 bytes each + 1 pair for initial point
  88+ C0D2             >    IFDEF MERIDANLINEDEBUG
  88+ C0D2 ~           >p?_BnkPlotXHeap               DS  $82			   ; &0EC0	    \ LSX2 bline buffer size?
  88+ C0D2 ~           >p?_BnkPlotYHeap               DS  $82            ; &0F0E	    \ LSY2
  88+ C0D2             >    ENDIF
  88+ C0D2 00          >P_BnkPlotIndex               DB  0
  88+ C0D3             >    DISPLAY "TODO can we remove this and just use BnKCNT = 0 as the same thing?"
  88+ C0D3 00          >P_BnkFlag					DB  0
  88+ C0D4             >
  88+ C0D4             >; Post clipping the results are now 8 bit
  88+ C0D4 00          >P_BnkVisibility              DB  0               ; replaces general purpose xx4 in renderingW
  88+ C0D5 00          >P_BnkProjectedY              DB  0
  88+ C0D6 00          >P_BnkProjectedX              DB  0
  88+ C0D7             >P_BnkProjected               equ P_BnkProjectedY  ; resultant projected position
  88+ C0D7 00 00 00... >P_XX15Save                   DS  8
  88+ C0DF 00 00 00... >P_XX15Save2                  DS  8
  88+ C0E7 00          >P_Radius                     DB  0
  88+ C0E8             >; Used when drawing curves for the end value from previous calls to BLINE
  88+ C0E8             >; held as 16 bit values pre clipping
  88+ C0E8 00 00       >P_PrevXPos                   DW 0
  88+ C0EA 00 00       >P_PrevYPos                   DW 0
  88+ C0EC 00 00       >P_NewXPos                    DW 0
  88+ C0EE 00 00       >P_NewYPos                    DW 0
  88+ C0F0             >
  88+ C0F0             >; Colouration
  88+ C0F0             >; For planets, Colour 1 is main colour, Colour 2 is outer rim
  88+ C0F0             >; if we are going to do outer rim then may have colour thickeness as number of pixels to simulat atmosphere
  88+ C0F0 00          >P_Colour1                    DB 0
  88+ C0F1 00          >P_Colour2                    DB 0
  88+ C0F2 00          >P_Colour2Thickness           DB 0
  88+ C0F3             >;        -- _pl(prf .. "Radius                     DW  0
  88+ C0F3             >;        -- _pl(prf .. "RadiusHigh                 equ p?_Radius+1
  89+ C0F3                                          CoreRuntimeDataMacro P
  89+ C0F3             >P_BnkStartOfRuntimeData:
  89+ C0F3 00          >P_BnkSlotNumber              DB  0
  89+ C0F4 00          >P_BnkShipUnivBankNbr         DB  0                       ; Present ship universe bank number
  89+ C0F5 00          >P_BnkShipModelBank           DB  0                       ; Bank nbr ship was from
  89+ C0F6 00          >P_BnkShipModelNbr            DB  0                       ; Ship Id with in the bank
  89+ C0F7 00          >P_BnkShipModelId             DB  0                       ; Absolute ship id
  89+ C0F8             >; -- Ship AI data
  89+ C0F8 00          >P_BnkMissleHitToProcess      DB  0                       ; This is used for enquing missle blasts as we can only do one missile at a time, could make it multi but neeed to smooth CPU usage
  89+ C0F9 00          >P_BnkMissileTarget           DB  0                       ; This is the ship slot number for the target from 0 to n if the missile is not hostile to us, if the target is $FF then its us
  89+ C0FA 00          >P_BnkSpeed                   DB  0                       ; INWK +27
  89+ C0FB 00          >P_BnkAccel                   DB  0                       ; INWK +28
  89+ C0FC 00          >P_BnkRotXCounter             DB  0                       ; INWK +29
  89+ C0FD 00          >P_BnkRotZCounter             DB  0                       ; INWK +30
  89+ C0FE 00          >P_BnkRAT                     DB  0                       ; temporary for rotation magnitude or roll counter, for debugging state
  89+ C0FF 00          >P_BnkRAT2                    DB  0                       ; temporary for rotation threshold
  89+ C100 00          >P_RAT                        DB  0               ; 99
  89+ C101 00          >P_RAT2                       DB  0               ; 9A
  89+ C102 00          >P_RAT2Val                    DB  0               ; 9A
  89+ C103 00          >P_ALPHA                      DB  0
  89+ C104 00          >P_ALP1                       DB  0
  89+ C105 00          >P_ALP2                       DB  0
  89+ C106 00          >P_ALP2FLIP                   DB  0
  89+ C107 00          >P_BETA                       DB  0
  89+ C108 00          >P_BET1                       DB  0
  89+ C109 00          >P_BET2                       DB  0
  89+ C10A 00          >P_DELTA                      DB  0
  89+ C10B 00          >P_BnkexplDsp                 DB  0                       ; INWK +31 clear exploding/display state|missiles
  89+ C10C 00          >P_BnkDrawAllFaces            DB  0
  89+ C10D 00          >P_BnkShipAggression          DB  0                       ; calculated agression factor
  89+ C10E 00          >P_Bnkaiatkecm                DB  0                       ; INWK +32 ai_attack_univ_ecm i.e. AI type
  89+ C10F 00          >P_BnkSpawnObject             DB  0
  89+ C110 00          >P_BnkCam0yLo                 DB  0                       ; INWK +33 ????
  89+ C111 00          >P_BnkCam0yHi                 DB  0                       ; INWK +34?????
  89+ C112 00          >P_BnkEnergy                  DB  0                       ; INWK +35
  89+ C113 00          >P_BnkECMCountDown            DB  0                       ; counts down ECM usage if activated reducing energy too in update loop
  89+ C114 00          >P_BnkECMFitted               DB  0                       ; Does ship have ECM, true false
  89+ C115 00          >P_BnkLaserPower              DB  0                       ; Type of laser fitted
  89+ C116 00          >P_BnkMissilesLeft            DB  0
  89+ C117 00          >P_BnkFighterShipId           DB  0                       ; computed ship Id for any carriers
  89+ C118 00          >P_BnkFightersLeft            DB  0                       ; the number of ships left in hanger, 255 = infinite
  89+ C119 00          >P_BnkCloudCounter            DB  0                       ; cloud pixels
  89+ C11A 00          >P_BnkCloudRadius             DB  0                       ; cloud pixels
  89+ C11B             >P_BnkRuntimeSize             EQU $-P_BnkStartOfRuntimeData
  90+ C11B
  91+ C11B                                      ;INCLUDE "./Universe/Planet/PlanetXX15Vars.asm"
  92+ C11B                                          XX15DefineMacro P
  92+ C11B             >
  92+ C11B 00          >P_BnkXScaled                  DB  0               ; XX15+0Xscaled
  92+ C11C 00          >P_BnkXScaledSign              DB  0               ; XX15+1xsign
  92+ C11D 00          >P_BnkYScaled                  DB  0               ; XX15+2yscaled
  92+ C11E 00          >P_BnkYScaledSign              DB  0               ; XX15+3ysign
  92+ C11F 00          >P_BnkZScaled                  DB  0               ; XX15+4zscaled
  92+ C120 00          >P_BnkZScaledSign              DB  0               ; XX15+5zsign
  92+ C121 00 00       >P_XX1576                      DW  0    ; y2
  92+ C123             >
  92+ C123             >P_XX15:                       equ P_BnkXScaled
  92+ C123             >P_XX15VecX:                   equ P_XX15
  92+ C123             >P_XX15VecY:                   equ P_XX15+1
  92+ C123             >P_XX15VecZ:                   equ P_XX15+2
  92+ C123             >P_BnkXPoint:                  equ P_XX15
  92+ C123             >P_BnkXPointLo:                equ P_XX15+0
  92+ C123             >P_BnkXPointHi:                equ P_XX15+1
  92+ C123             >P_BnkXPointSign:              equ P_XX15+2
  92+ C123             >P_BnkYPoint:                  equ P_XX15+3
  92+ C123             >P_BnkYPointLo:                equ P_XX15+3
  92+ C123             >P_BnkYPointHi:                equ P_XX15+4
  92+ C123             >P_BnkYPointSign:              equ P_XX15+5
  92+ C123             >
  92+ C123             >P_XX1510                      EQU P_BnkXScaled    ; x1 as a 16-bit coordinate (x1_hi x1_lo)
  92+ C123             >P_XX1532                      EQU P_BnkYScaled   ; y1 as a 16-bit coordinate (y1_hi y1_lo)
  92+ C123             >P_XX1554                      EQU P_BnkZScaled   ; x2
  92+ C123             >P_XX1554p1                    EQU P_XX1554+1
  92+ C123             >P_XX15X1lo                    EQU P_XX1510
  92+ C123             >P_XX15X1hi                    EQU P_XX1510+1
  92+ C123             >P_XX15Y1lo                    EQU P_XX1532
  92+ C123             >P_XX15Y1hi                    EQU P_XX1532+1
  92+ C123             >P_XX15X2lo                    EQU P_XX1554
  92+ C123             >P_XX15X2hi                    EQU P_XX1554+1
  92+ C123             >P_XX15Y2lo                    EQU P_XX1210
  92+ C123             >P_XX15Y2hi                    EQU P_XX1210+1
  92+ C123             >P_XX15PlotX1                  EQU P_XX15
  92+ C123             >P_XX15PlotY1                  EQU P_XX15+1
  92+ C123             >P_XX15PlotX2                  EQU P_XX15+2
  92+ C123             >P_XX15PlotY2                  EQU P_XX15+3
  92+ C123             >
  92+ C123             >P_BnkX1                       equ P_XX15
  92+ C123             >P_Bnkx1Lo                     equ P_XX15
  92+ C123             >P_Bnkx1Hi                     equ P_XX15+1
  92+ C123             >P_BnkY1                       equ P_XX15+2
  92+ C123             >P_Bnky1Lo                     equ P_XX15+2
  92+ C123             >P_BnkY1Hi                     equ P_XX15+3
  92+ C123             >P_BnkX2                       equ P_XX15+4
  92+ C123             >P_BnkX2Lo                     equ P_XX15+4
  92+ C123             >P_BnkX2Hi                     equ P_XX15+5
  92+ C123             >
  92+ C123             >; Repurposed XX15 pre clip plines
  92+ C123             >P_BnkPreClipX1               equ P_XX15+0
  92+ C123             >P_BnkPreClipY1               equ P_XX15+2
  92+ C123             >P_BnkPreClipX2               equ P_XX15+4
  92+ C123             >P_BnkPreClipY2               equ P_XX15+6
  92+ C123             >; Repurposed XX15 post clip lines
  92+ C123             >P_BnkNewX1                   equ P_XX15+0
  92+ C123             >P_BnkNewY1                   equ P_XX15+1
  92+ C123             >P_BnkNewX2                   equ P_XX15+2
  92+ C123             >P_BnkNewY2                   equ P_XX15+3
  92+ C123             >
  93+ C123                                      ;INCLUDE "./Universe/Planet/PlanetXX12Vars.asm"
  94+ C123                                          XX12DefineMacro P
  94+ C123             >
  94+ C123             >;p?_XX1576                     DW  0
  94+ C123             >P_XX1210                     EQU P_XX1576
  94+ C123             >P_XX12p1                     EQU P_XX1210+1
  94+ C123             >;p?_XX12                       EQU p?_XX1210
  94+ C123             >
  94+ C123             >;-- transmat0 --------------------------------------------------------------------------------------------------------------------------")
  94+ C123             >; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines")
  94+ C123 00          >P_BnkXX12xLo                 DB  0               ; XX12+0
  94+ C124 00          >P_BnkXX12xSign               DB  0               ; XX12+1
  94+ C125 00          >P_BnkXX12yLo                 DB  0               ; XX12+2
  94+ C126 00          >P_BnkXX12ySign               DB  0               ; XX12+3
  94+ C127 00          >P_BnkXX12zLo                 DB  0               ; XX12+4
  94+ C128 00          >P_BnkXX12zSign               DB  0               ; XX12+5
  94+ C129 00 00 00... >P_XX12Save                   DS  6
  94+ C12F 00 00 00... >P_XX12Save2                  DS  6
  94+ C135             >P_XX12                       equ P_BnkXX12xLo
  94+ C135             >P_varXX12                    equ P_BnkXX12xLo
  94+ C135             >; Repurposed XX12 when plotting lines")
  94+ C135             >P_BnkY2                      equ P_XX12+0
  94+ C135             >P_Bnky2Lo                    equ P_XX12+0
  94+ C135             >P_BnkY2Hi                    equ P_XX12+1
  94+ C135             >P_BnkDeltaXLo                equ P_XX12+2
  94+ C135             >P_BnkDeltaXHi                equ P_XX12+3
  94+ C135             >P_BnkDeltaYLo                equ P_XX12+4
  94+ C135             >P_BnkDeltaYHi                equ P_XX12+5
  94+ C135             >P_BnkGradient                equ P_XX12+2
  94+ C135             >P_BnkTemp1                   equ P_XX12+2
  94+ C135             >P_BnkTemp1Lo                 equ P_XX12+2
  94+ C135             >P_BnkTemp1Hi                 equ P_XX12+3
  94+ C135             >P_BnkTemp2                   equ P_XX12+3
  94+ C135             >P_BnkTemp2Lo                 equ P_XX12+3
  94+ C135             >P_BnkTemp2Hi                 equ P_XX12+4
  95+ C135
  96+ C135                                          ClippingVarsMacro P
  96+ C135             >;-- Clipping code for universe objects -------------------------------------------
  96+ C135 00          >P_XX13        DB 0
  96+ C136             >
  96+ C136             >
  96+ C136 00 00 00 00 >P_varK3		 DS	4				; D2
  96+ C13A             >P_centreX     equ P_varK3
  96+ C13A 00          >P_varK3p2	 DB	0				; 42
  96+ C13B 00          >P_varK3p3	 DB	0				; 43
  96+ C13C             >P_varK3p1	 equ P_varK3+1			; D3
  96+ C13C 00 00 00 00 >P_varK4		 DS	4				; E0
  96+ C140             >P_centreY     equ P_varK4
  96+ C140             >P_varK4p1	 equ P_varK4+1			; D3
  96+ C140 00 00 00... >P_varK5       DS  6
  96+ C146             >P_varK5p2     equ P_varK5+2
  96+ C146 00 00 00... >P_varK6       DS  6
  96+ C14C             >P_varK6p2     equ P_varK6+2
  96+ C14C             >
  96+ C14C 00          >P_XX12p2      DB 0    ; The line's gradient * 256 (so 1.0 = 256)
  96+ C14D 00          >P_XX12p3      DB 0    ; The direction of slope ; + LT to BR; - TR to BL
  96+ C14E 00          >P_XX12p4      DB 0
  96+ C14F 00          >P_XX12p5      DB 0
  96+ C150             >P_Delta_x     EQU P_XX12p2
  96+ C150             >P_Delta_y     EQU P_XX12p4
  96+ C150 00          >P_Tvar        DB 0    ; The gradient of slope ; 0 if it's a shallow slope (DX > DY) ; &FF if it's a steep slope (DY > DX) Returns:  XX15        m         x1 as an 8-bit coordinate XX15+2               y1 as an 8-bit coordinate
  96+ C151 00          >P_Qvar        DB 0
  96+ C152 00          >P_Rvar        DB 0    ; general purpose for calcs  Paired with S must be done this way round for SUBHeightFromY1 etc to work
  96+ C153 00          >P_Svar        DB 0    ; sign variable
  96+ C154             >P_SRvarPair   EQU P_Rvar
  96+ C154 00          >P_Xreg        DB 0
  96+ C155 00          >P_Yreg        DB 0
  96+ C156             >P_YXregPair   EQU P_Xreg
  97+ C156
  98+ C156
  99+ C156              P_Bnk_Data_len               EQU $ - P_BnkDataBlock
 100+ C156
 101+ C156
 102+ C156                                          ClippingCodeLL28Macro P
 102+ C156 21 B6 F1    >P_LL28_6502:         ld      hl,Qvar                 ; CMP Q                  \ If A >= Q, then the answer will not fit in one byte,
 102+ C159 4E          >                            ld      c,(hl)                  ; using c as Q var
 102+ C15A B9          >                            cp      c
 102+ C15B             >                            FlipCarryFlag
 102+ C15B 3F          >                        ccf
 102+ C15C DA 84 C1    >                            jp      c, P_LL2_6502    ; BCS LL2                \ so jump to LL2 to return 255
 102+ C15F 06 FE       >                            ld      b,$FE                   ; LDX #%11111110         \ Set R to have bits 1-7 set, so we can rotate through 7 loop iterations, getting a 1 each time, and then we use b as Rvar
 102+ C161 CB 27       >P_LL31_6502:          sla     a                       ; ASL A                  \ Shift A to the left
 102+ C163 DA 78 C1    >                            jp      c, P_LL29_6502             ; BCS LL29               \ If bit 7 of A was set, then jump straight to the subtraction
 102+ C166             >                            FlipCarryFlag                   ;                          If A < N, then C flag is set.
 102+ C166 3F          >                        ccf
 102+ C167             >                            JumpIfALTNusng c, P_LL31_SKIPSUB_6502 ; CMP Q              \ If A < Q, skip the following subtraction
 102+ C167 B9          >                        cp      c
 102+ C168 DA 6D C1    >                        jp		c, P_LL31_SKIPSUB_6502
 102+ C16B             >                                                                ; BCC P%+4
 102+ C16B 91          >                            sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
 102+ C16C             >                            ClearCarryFlag
 102+ C16C B7          >                        or a
 102+ C16D             >P_LL31_SKIPSUB_6502:  FlipCarryFlag
 102+ C16D 3F          >                        ccf
 102+ C16E CB 10       >                            rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
 102+ C170 DA 61 C1    >                            jp      c, P_LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
 102+ C173 78          >                            ld      a,b
 102+ C174 32 B7 F1    >                            ld      (Rvar),a
 102+ C177 C9          >                            ret                             ; RTS                    \ R left with remainder of division
 102+ C178 91          >P_LL29_6502:          sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
 102+ C179             >                            SetCarryFlag                    ; SEC                    \ Set the C flag to rotate into the result in R
 102+ C179 37          >                        scf
 102+ C17A CB 10       >                            rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
 102+ C17C DA 61 C1    >                            jp      c, P_LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
 102+ C17F 78          >                            ld      a,b                     ; RTS                    \ Return from the subroutine with R containing the
 102+ C180 32 B7 F1    >                            ld      (Rvar),a                ; .
 102+ C183 C9          >                            ret                             ; .                      \ remainder of the division
 102+ C184 3E FF       >P_LL2_6502:          ld      a,$FF                   ; LDA #255               \ The division is very close to 1, so return the closest
 102+ C186 32 B7 F1    >                            ld      (Rvar),a                ; STA R                  \ possible answer to 256, i.e. R = 255
 102+ C189             >                            SetCarryFlag                    ; we failed so need carry flag set
 102+ C189 37          >                        scf
 102+ C18A C9          >                            ret                             ; RTS                    \ Return from the subroutine
 102+ C18B             >
 102+ C18B 3A B9 F1    >P_ADDXRegtoY1:       ld      a,(Xreg)                ; Set y1 = y1 + (Y X)
 102+ C18E 4F          >                            ld      c,a
 102+ C18F 06 00       >                            ld      b,0
 102+ C191 2A 1D C1    >                            ld      hl,(P_XX1532)
 102+ C194             >                            ClearCarryFlag
 102+ C194 B7          >                        or a
 102+ C195 ED 4A       >                            adc     hl,bc
 102+ C197 22 1D C1    >                            ld      (P_XX1532),hl
 102+ C19A C9          >                            ret
 102+ C19B             >
 102+ C19B ED 4B B9 F1 >P_ADDYXRegtoY1:      ld      bc,(YXregPair)          ; Set y1 = y1 + (Y X)
 102+ C19F 2A 1D C1    >                            ld      hl,(P_XX1532)
 102+ C1A2             >                            ClearCarryFlag
 102+ C1A2 B7          >                        or a
 102+ C1A3 ED 4A       >                            adc     hl,bc
 102+ C1A5 22 1D C1    >                            ld      (P_XX1532),hl
 102+ C1A8 C9          >                            ret
 102+ C1A9             >
 102+ C1A9 ED 4B B9 F1 >P_ADDYXRegtoX1:      ld      bc,(YXregPair)          ; Set x1 = x1 + (Y X)
 102+ C1AD 2A 1B C1    >                            ld      hl,(P_XX1510)
 102+ C1B0             >                            ClearCarryFlag
 102+ C1B0 B7          >                        or a
 102+ C1B1 ED 4A       >                            adc     hl,bc
 102+ C1B3 22 1B C1    >                            ld      (P_XX1510),hl
 102+ C1B6 C9          >                            ret
 102+ C1B7             >
 102+ C1B7 2A 1D C1    >P_SUBBCFromY1:       ld      hl,(P_XX1532)             ; Set (S R) = (y1_hi y1_lo) - BC where BC can be say screen height
 102+ C1BA             >                            ClearCarryFlag
 102+ C1BA B7          >                        or a
 102+ C1BB ED 42       >                            sbc     hl,bc
 102+ C1BD 22 B7 F1    >                            ld      (SRvarPair),hl
 102+ C1C0 C9          >                            ret
 102+ C1C1             >
 102+ C1C1 2A B9 F1    >P_AddSRToYX:         ld      hl,(YXregPair)
 102+ C1C4 ED 5B B7 F1 >                            ld      de,(SRvarPair)
 102+ C1C8             >                            ClearCarryFlag
 102+ C1C8 B7          >                        or a
 102+ C1C9 ED 5A       >                            adc     hl,de
 102+ C1CB 22 B9 F1    >                            ld      (YXregPair),hl
 102+ C1CE C9          >                            ret
 102+ C1CF             >
 102+ C1CF 7C          >P_ClampX:            ld      a,h
 102+ C1D0 A7          >                            and     a
 102+ C1D1 7D          >                            ld      a,l
 102+ C1D2 C8          >                            ret     z
 102+ C1D3 F2 D8 C1    >                            jp      p,.Max255
 102+ C1D6             >.ClampXMin0:                ZeroA
 102+ C1D6 AF          >                        xor a
 102+ C1D7 C9          >                            ret
 102+ C1D8 3E FF       >.Max255:                    ld      a,$FF
 102+ C1DA C9          >                            ret
 102+ C1DB             >
 102+ C1DB 7C          >P_ClampY:            ld      a,h
 102+ C1DC A7          >                            and     a
 102+ C1DD CA E8 C1    >                            jp      z,.ClampYlo
 102+ C1E0 F2 E5 C1    >                            jp      p,.Max127
 102+ C1E3             >.ClampYMin0:                ZeroA
 102+ C1E3 AF          >                        xor a
 102+ C1E4 C9          >                            ret
 102+ C1E5 3E 7F       >.Max127:                    ld      a,127
 102+ C1E7 C9          >                            ret
 102+ C1E8 7D          >.ClampYlo:                  ld      a,l
 102+ C1E9 A7          >                            and     a
 102+ C1EA F0          >                            ret     p
 102+ C1EB 3E 7F       >                            ld      a,127
 102+ C1ED C9          >                            ret
 103+ C1EE                                          ClippingCodeLL120Macro P
 103+ C1EE 3A 1B C1    >P_LL120_6502:        ld      a,(P_XX1510)              ;LDA XX15               \ Set R = x1_lo
 103+ C1F1 32 B7 F1    >                            ld      (Rvar),a                ;STA R
 103+ C1F4 CD A0 C2    >                            call    P_LL129_6502              ;JSR LL129              \ Call LL129 to do the following:  Q = XX12+2 = line gradient, A = S EOR XX12+3 = S EOR slope direction  (S R) = |S R|
 103+ C1F7 F5          >                            push    af                      ;PHA                    \ Store A on the stack so we can use it later
 103+ C1F8             >; DONT NEED PLUS MESSES UP FLAGS                    push    af                      ;LDX T                  \ If T is non-zero, then it's a steep slope, so jump
 103+ C1F8 3A B5 F1    >                            ld      a,(Tvar)                ; .
 103+ C1FB 32 B9 F1    >                            ld      (Xreg),a                ;. REDUNDANT REMOVE IN OPTIMISATION
 103+ C1FE A7          >                            and     a                       ;BNE LL121              \ down to LL121 to calculate this instead (Y X) = (S R) / Q
 103+ C1FF             >; DONT NEED PLUS MESSES UP FLAGS                    pop     af                      ;.                      (recover teh saved A before the cp)
 103+ C1FF 20 48       >                            jr      nz,P_LL121_6502           ;.
 103+ C201             >;..   (Y X) = (S R) * Q - must be ABS, sign determined by opposite of the sign of the value on top of stack
 103+ C201             >P_LL122_6502:         ZeroA                           ;LDA #0                 \ Set A = 0
 103+ C201 AF          >                        xor a
 103+ C202             >
 103+ C202             >                            IFDEF DEBUG_LL122_DIRECT"
 103+ C202 ~           >                                  DISPLAY "DIRECT CALL TO LL122 so dummy push a to stack with 0"
 103+ C202 ~           >                                  push    af
 103+ C202             >                            ENDIF
 103+ C202 32 B9 F1    >                            ld      (Xreg),a                ;TAX                    \ Set (Y X) = 0 so we can start building the answer here
 103+ C205 32 BA F1    >                            ld      (Yreg),a                ;TAY
 103+ C208 21 B8 F1    >                            ld      hl,Svar
 103+ C20B ED 4B B7 F1 >                            ld      bc,(SRvarPair)          ;LSR S                  \ Shift (S R) to the right, so we extract bit 0 of (S R)
 103+ C20F             >                            ShiftBCRight1                   ;ROR R                  \ into the C flag
 103+ C20F CB 38       >			   srl b
 103+ C211 CB 19       >			   rr  c
 103+ C213 ED 43 B7 F1 >                            ld      (SRvarPair),bc
 103+ C217 21 B6 F1    >                            ld      hl, Qvar                ;ASL Q                  \ Shift Q to the left, catching bit 7 in the C flag
 103+ C21A CB 26       >                            sla     (hl)                    ;.
 103+ C21C 30 03       >                            jr      nc, P_LL126_6502          ;BCC LL126              \ If C (i.e. the next bit from Q) is clear, do not do
 103+ C21E             >; the addition for this bit of Q, and instead skip to LL126 to just do the shifts
 103+ C21E CD 26 F2    >P_LL125_6502:        call    AddSRToYX               ;TXA                    \ Set (Y X) = (Y X) + (S R)  starting with the low bytes And then doing the high bytes
 103+ C221 ED 4B B7 F1 >P_LL126_6502:        ld      bc,(SRvarPair)          ;LSR S                  \ Shift (S R) to the right
 103+ C225             >                            ShiftBCRight1                   ;ROR R
 103+ C225 CB 38       >			   srl b
 103+ C227 CB 19       >			   rr  c
 103+ C229 ED 43 B7 F1 >                            ld      (SRvarPair),bc          ;.
 103+ C22D 21 B6 F1    >                            ld      hl, Qvar                ;ASL Q                  \ Shift Q to the left, catching bit 7 in the C flag
 103+ C230 CB 26       >                            sla     (hl)                    ;.
 103+ C232 38 EA       >                            jr      c,P_LL125_6502            ;BCS LL125              \ If C (i.e. the next bit from Q) is set, loop back to LL125 to do the addition for this bit of Q
 103+ C234 20 EB       >                            jr      nz,P_LL126_6502           ;BNE LL126              \ If Q has not yet run out of set bits, loop back to LL126 to do the \"shift\" part of shift-and-add until we have done additions for all the set bits in Q, to give us our multiplication result
 103+ C236 F1          >                            pop     af                      ;PLA                    \ Restore A, which we calculated above, from the stack
 103+ C237 A7          >                            and     a                       ;BPL LL133              \ If A is positive jump to LL133 to negate (Y X) and
 103+ C238 F2 91 C2    >                            jp      p,P_LL133_6502            ;.
 103+ C23B             >                            ;.. return from the subroutine using a tail call
 103+ C23B C9          >                            ret                             ;RTS                    \ Return from the subroutine
 104+ C23C                                          ClippingCodeLL122Macro P
 104+ C23C CD A0 C2    >P_LL123_6502:         call    P_LL129_6502              ;JSR LL129              \ Call LL129 to do the following   Q = XX12+2   = line gradient
 104+ C23F F5          >                             push    af                      ;PHA                    \ Store A on the stack so we can use it later
 104+ C240             >; DONT NEED PLUS MESSES UP FLAGS                    push    af                      ;LDX T                  \ If T is non-zero, then it's a steep slope, so jump up
 104+ C240 3A B5 F1    >                             ld      a,(Tvar)                ; .
 104+ C243 32 B9 F1    >                             ld      (Xreg),a                ;BNE LL122              \ to LL122 to calculate this instead:
 104+ C246 A7          >                             and     a                       ;.
 104+ C247             >;  DONT NEED PLUS MESSES UP FLAGS                    pop     af                      ;.
 104+ C247 20 B8       >                             jr      nz,P_LL122_6502           ;.
 104+ C249             >;--  The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2
 104+ C249 3E FF       >P_LL121_6502:         ld      a,$FF                   ;LDA #%11111111         \ Set Y = %11111111
 104+ C24B 32 BA F1    >                             ld      (Yreg),a                ;TAY
 104+ C24E CB 27       >                             sla     a                       ;ASL A                  \ Set X = %11111110
 104+ C250 32 B9 F1    >                             ld      (Xreg),a                ;TAX
 104+ C253             >;--  This sets (Y X) = %1111111111111110, so we can rotate through 15 loop iterations, getting a 1 each time, and then getting a 0 on the 16th iteration... and we can also use it to catch our result bits into bit 0 each time
 104+ C253 ED 4B B7 F1 >P_LL130_6502:         ld      bc,(SRvarPair)          ;ASL R                  \ Shift (S R) to the left
 104+ C257             >                            ShiftBCLeft1                    ;.
 104+ C257 CB 21       >			   sla c
 104+ C259 CB 10       >			   rl  b
 104+ C25B ED 43 B7 F1 >                            ld      (SRvarPair),bc          ;ROL S
 104+ C25F 3A B8 F1    >                            ld      a,(Svar)                ;LDA S                  \ Set A = S
 104+ C262 38 07       >                            jr      c, P_LL131_6502           ;BCS LL131              \ If bit 7 of S was set, then jump straight to the subtraction
 104+ C264 21 B6 F1    >                            ld      hl,Qvar                 ;CMP Q                  \ If A < Q (i.e. S < Q), skip the following subtractions
 104+ C267 BE          >                            cp      (hl)
 104+ C268             >                            FlipCarryFlag                   ; note flip carry flag here to simulate 6502 operation
 104+ C268 3F          >                        ccf
 104+ C269 30 12       >                            jr      nc,P_LL132A_6502          ;BCC LL132  (NOTE Carry flag reversed in Z80 for CP)
 104+ C26B             >P_LL131_6502:         FlipCarryFlag                   ;flip carry to make it act like a 6502 borrow
 104+ C26B 3F          >                        ccf
 104+ C26C 9E          >                            sbc     (hl)                    ;SBC Q                  \ A >= Q (i.e. S >= Q) so set:
 104+ C26D 32 B8 F1    >                            ld      (Svar),a                ;STA S
 104+ C270 3A B7 F1    >                            ld      a,(Rvar)                ;LDA R                  \ And then doing the high bytes
 104+ C273             >                            ClearCarryFlag                  ;\   S = (A R) - Q  = (S R) - Q starting with the low bytes (we know the C flag is set so the subtraction will be correct)
 104+ C273 B7          >                        or a
 104+ C274 DE 00       >                            sbc     0                       ;SBC #0
 104+ C276 32 B7 F1    >                            ld      (Rvar),a                ;STA R
 104+ C279             >                            SetCarryFlag                    ;SEC                    \ Set the C flag to rotate into the result in (Y X)
 104+ C279 37          >                        scf
 104+ C27A C3 7E C2    >                            jp      P_LL132_6502              ;added so that we can do a 6502 style carry above
 104+ C27D 00          >P_LL132A_6502:        nop; FlipCarryFlag
 104+ C27E ED 4B B9 F1 >P_LL132_6502:         ld      bc,(YXregPair)          ; Rotate the counter in (Y X) to the left, and catch the
 104+ C282             >                            RollBCLeft1                     ; ROL A                  \ result bit into bit 0 (which will be a 0 if we didn't
 104+ C282 CB 11       >               rl  c
 104+ C284 CB 10       >               rl  b
 104+ C286 ED 43 B9 F1 >                            ld      (YXregPair),bc          ; TAX                    \ do the subtraction, or 1 if we did)
 104+ C28A 38 C7       >                            jr      c, P_LL130_6502           ; BCS LL130              \ If we still have set bits in (Y X), loop back to LL130 to do the next iteration of 15, until we have done the whole division
 104+ C28C             >        IFDEF DEBUG_LL121_DIRECT
 104+ C28C ~           >              DISPLAY "DIRECT CALL TO LL121 so dummy push"
 104+ C28C ~           >                            push    af
 104+ C28C             >        ENDIF
 104+ C28C F1          >                            pop     af                      ; PLA                    \ Restore A, which we calculated above, from the stack
 104+ C28D A7          >                            and     a                       ; BMI LL128              \ If A is negative jump to LL128 to return from the
 104+ C28E FA 9F C2    >                            jp      m, P_LL128_6502           ; .                      \ subroutine with (Y X) as is
 104+ C291 ED 4B B9 F1 >P_LL133_6502:          ld      bc,(YXregPair)          ; TXA                    \ Otherwise negate (Y X) using two's complement by first
 104+ C295             >                            macronegate16bc                 ; EOR #%11111111         \ setting the low byte to ~X + 1
 104+ C295 AF          >					xor 	a
 104+ C296 91          >                    sub 	c
 104+ C297 4F          >                    ld 		c,a
 104+ C298 9F          >                    sbc 	a,a
 104+ C299 90          >                    sub 	b
 104+ C29A 47          >                    ld 		b,a
 104+ C29B ED 43 B9 F1 >                            ld      (YXregPair),bc          ; ADC #1                 \ The addition works as we know the C flag is clear from\ when we passed through the BCS above
 104+ C29F C9          >P_LL128_6502:          ret                             ; RTS                    \ Return from the subroutine
 104+ C2A0             >;-------------------------------------------------------------------------------------------------------
 104+ C2A0             >;..  Do the following, in this order: Q = XX12+2 A = S EOR XX12+3 (S R) = |S R|
 104+ C2A0             >;..  This sets up the variables required above to calculate (S R) / XX12+2 and give the result the opposite sign to XX13+3.
 104+ C2A0 F5          >P_LL129_6502:        push    af                      ;LDX XX12+2             \ Set Q = XX12+2
 104+ C2A1 3A 4C C1    >                            ld      a,(P_XX12p2)              ;.
 104+ C2A4 32 B9 F1    >                            ld      (Xreg),a                ;.
 104+ C2A7 32 B6 F1    >                            ld      (Qvar),a                ;STX Q
 104+ C2AA F1          >                            pop     af                      ;.
 104+ C2AB 3A B8 F1    >                            ld      a,(Svar)                ;LDA S                  \ If S is positive, jump to LL127
 104+ C2AE A7          >                            and     a                       ;BPL LL127
 104+ C2AF F2 C7 C2    >                            jp      p,P_LL127_6502            ;.
 104+ C2B2             >                            ZeroA                           ;.LDA #0                \ Otherwise set R = -R
 104+ C2B2 AF          >                        xor a
 104+ C2B3             >                            ClearCarryFlag                  ;SEC
 104+ C2B3 B7          >                        or a
 104+ C2B4 21 B7 F1    >                            ld      hl, Rvar                ;SBC R
 104+ C2B7 9E          >                            sbc     (hl)                    ;.
 104+ C2B8 32 B7 F1    >                            ld      (Rvar),a                ;STA R
 104+ C2BB 3A B8 F1    >                            ld      a,(Svar)                ;LDA S                  \ Push S onto the stack
 104+ C2BE F5          >                            push    af                      ;PHA
 104+ C2BF EE FF       >                            xor     $FF                     ;EOR #%11111111         \ Set S = ~S + 1 + C  ?? is this all just doing |Svar|?
 104+ C2C1 CE 00       >                            adc     0                       ;ADC #0
 104+ C2C3 32 B8 F1    >                            ld      (Svar),a                ;STA S
 104+ C2C6 F1          >                            pop     af                      ;PLA                    \ Pull the original, negative S from the stack into A
 104+ C2C7 21 4D C1    >P_LL127_6502:        ld      hl,P_XX12p3               ;EOR XX12+3             \ Set A = original argument S EOR'd with XX12+3
 104+ C2CA AE          >                            xor     (hl)                    ;.
 104+ C2CB C9          >                            ret                             ;RTS                    \ Return from the subroutine
 104+ C2CC             >;----------------------------------------------------------------------------------------------------------------
 104+ C2CC             >;--- LL118 Move along a point until on screen
 104+ C2CC             >; In XX1510 x1 as a 16-bit coordinate (x1_hi x1_lo)
 104+ C2CC             >;    XX1532 y1 as a 16-bit coordinate (y1_hi y1_lo)
 104+ C2CC             >;    XX12p2 The line's gradient * 256 (so 1.0 = 256)
 104+ C2CC             >;    XX12p3 The direction of slope: * Positive = top left to bottom right * Negative (bit 7 set) = top right to bottom left
 104+ C2CC             >;    T      The gradient of slope:* 0 if it's a shallow slope * &FF if it's a steep slope
 104+ C2CC             >;  Out  XX150               x1 as an 8-bit coordinate
 104+ C2CC             >;       XX152               y1 as an 8-bit coordinate
 104+ C2CC             >;----------------------------------------------------------------------------------------------------------------
 104+ C2CC             >
 104+ C2CC 3A 1C C1    >P_LL118_6502:         ld      a,(P_XX1510+1)            ; LDA XX15+1             \ If x1_hi is positive, jump down to LL119 to skip the
 104+ C2CF A7          >                            and     a                       ; BPL LL119              \ .
 104+ C2D0 F2 ED C2    >                            jp      p, P_LL119_6502           ;                        \ following
 104+ C2D3 32 B8 F1    >.X1Negative:                ld      (Svar),a                ; STA S                  \ Otherwise x1_hi is negative, i.e. off the left of the screen, so set S = x1_hi
 104+ C2D6 CD EE C1    >                            call    P_LL120_6502              ; Call LL120 to calculate:  (Y X) = (S x1_lo) * XX12+2      if T = 0   = x1 * gradient
 104+ C2D9             >                                                    ;                            (Y X) = (S x1_lo) / XX12+2      if T <> 0  = x1 / gradient
 104+ C2D9             >                                                    ; with the sign of (Y X) set to the opposite of the line's direction of slope
 104+ C2D9 CD 00 F2    >                            call    ADDYXRegtoY1             ; Set y1 = y1 + (Y X)
 104+ C2DC 22 1D C1    >                            ld      (P_XX1532),hl             ; .
 104+ C2DF 21 00 00    >                            ld      hl,0                    ; Set x1 = 0
 104+ C2E2 22 1B C1    >                            ld      (P_XX1510),hl             ; .
 104+ C2E5 3E 00       >                            ld      a,0                     ; set 0 up for replacemetn of the TAX and BEQ bit
 104+ C2E7 32 B9 F1    >                            ld      (Xreg),a                ; TAX                    \ Set X = 0 so the next BEQ becomes a jmp but we will do it anyway in next line
 104+ C2EA C3 03 C3    >                            jp      P_LL134_6502              ; just do the jump to LL134 rather than setting to equal flag and then jumping
 104+ C2ED             >;-- Entering LL119 a will always be the value of X1 Hi byte
 104+ C2ED CA 03 C3    >P_LL119_6502:         jp      z,P_LL134_6502            ; BEQ LL134              \ x1_hi = 0 then jump down to LL134 to skip the following, as the x-coordinate is already on-screen
 104+ C2F0             >                                                            ;                        \ (as 0 <= (x_hi x_lo) <= 255)
 104+ C2F0 32 B8 F1    >                            ld      (Svar),a                ; STA S                  \ Otherwise x1_hi is positive, i.e. x1 >= 256 and off
 104+ C2F3 3D          >                            dec     a                       ; DEC S                  \ the right side of the screen, so set S = x1_hi - 1
 104+ C2F4 32 B8 F1    >                            ld      (Svar),a                ;
 104+ C2F7 CD EE C1    >                            call    P_LL120_6502              ; JSR LL120              \ Call LL120 to calculate:  (Y X) = (S x1_lo) * XX12+2      if T = 0   = (x1 - 256) * gradient
 104+ C2FA             >                                                            ;                        \                           (Y X) = (S x1_lo) / XX12+2      if T <> 0 = (x1 - 256) / gradient
 104+ C2FA             >                                                            ;                        \ with the sign of (Y X) set to the opposite of the line's direction of slope
 104+ C2FA CD 00 F2    >                            call    ADDYXRegtoY1             ; TXA                    \ Set y1 = y1 + (Y X)
 104+ C2FD 21 FF 00    >                            ld      hl,255                  ; LDX #255               \ Set x1 = 255
 104+ C300 22 1B C1    >                            ld      ( P_XX1510 ),hl             ; STX XX15 ;INX; STX XX15+1
 104+ C303             >;--  We have moved the point so the x-coordinate is on  screen (i.e. in the range 0-255), so now for the  y-coordinate
 104+ C303 3A 1E C1    >P_LL134_6502:        ld      a,(P_XX1532+1)            ; LDA XX15+3             \ If y1_hi is positive, jump down to LL119 to skip
 104+ C306 A7          >                            and     a                       ; BPL LL135              \ the following
 104+ C307 F2 1F C3    >                            jp      p, P_LL135_6502           ; .
 104+ C30A 32 B8 F1    >                            ld      (Svar),a                ; STA S                  \ Otherwise y1_hi is negative, i.e. off the top of the screen, so set S = y1_hi
 104+ C30D 3A 1D C1    >                            ld      a, ( P_XX1532)             ; LDA XX15+2             \ Set R = y1_lo
 104+ C310 32 B7 F1    >                            ld      (Rvar),a                ; STA R
 104+ C313 CD 3C C2    >                            call    P_LL123_6502              ; JSR LL123              \ Call LL123 to calculate:  (Y X) = (S R) / XX12+2      if T = 0 = y1 / gradient
 104+ C316             >                                                            ;                        \                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 104+ C316             >                                                            ;                         with the sign of (Y X) set to the opposite of the line's direction of slope
 104+ C316 CD 0E F2    >                            call    ADDYXRegtoX1            ; TXA                    \ Set x1 = x1 + (Y X)
 104+ C319 21 00 00    >                            ld      hl,0                    ; LDA #0                 \ Set y1 = 0
 104+ C31C 22 1D C1    >                            ld      ( P_XX1532),hl             ; STA XX15+2, XX15+3
 104+ C31F 01 80 00    >P_LL135_6502:         ld      bc,128                  ; LDA XX15+2             \ Set (S R) = (y1_hi y1_lo) - screen height
 104+ C322 CD 1C F2    >                            call    SUBBCFromY1             ; .                      \ .
 104+ C325 38 0C       >                            jr      c, P_LL136_6502           ; BCC LL136              \ If the subtraction underflowed, i.e. if y1 < screen height, then y1 is already on-screen, so jump to LL136
 104+ C327             >                                                    ;                        \ to return from the subroutine, as we are done
 104+ C327             >;;-   If we get here then y1 >= screen height, i.e. off the bottom of the screen
 104+ C327 CD 3C C2    >P_LL139_6502:         call    P_LL123_6502              ; JSR LL123              \ Call LL123 to calculate:   (Y X) = (S R) / XX12+2      if T = 0  = (y1 - screen height) / gradient
 104+ C32A             >;                        \                            (Y X) = (S R) * XX12+2      if T <> 0 = (y1 - screen height) * gradient
 104+ C32A             >;                          with the sign of (Y X) set to the opposite of the line's direction of slope
 104+ C32A CD 0E F2    >                            call    ADDYXRegtoX1            ; TXA                    \ Set x1 = x1 + (Y X)
 104+ C32D 21 7F 00    >                            ld      hl, 127                 ; LDA #Y*2-1             \ Set y1 = 2 * #Y - 1. The constant #Y is 96, the y-coordinate of the mid-point of the space view (or in our case 127)
 104+ C330 22 1D C1    >                            ld      (P_XX1532),hl             ; STA XX15+3             \ pixel row of the space view
 104+ C333 C9          >P_LL136_6502:         ret                             ; RTS                    \ Return from the subroutine
 104+ C334             >;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 104+ C334             >;-- LL145 LINE CLIP
 104+ C334             >;-- OPTISIATIONS - VERTICAL HORZONTAL POINT |DX| = |DY| (and all the veriants for +/-)
 104+ C334             >;-- This routine clips the line from (x1, y1) to (x2, y2) so it fits on-screen, or returns an error if it can't be clipped to fit. The arguments are 16-bit coordinates, and the clipped line is returned using 8-bit screen coordinates.
 104+ C334             >;-- This part sets XX13 to reflect which of the two points are on-screen and off-screen.
 104+ C334             >;-- IN  : XX15(1 0) x1 XX15(3 2) y1 XX15(5 4) x2 XX12(1 0) y2
 104+ C334             >;-- OUT : (X1, Y1), (X2, Y2) Screen coordinate C flag  Clear if the clipped line fits on-screen, set if itdoesn't
 104+ C334             >;         XX13 The state of the original coordinates on-screen:* 0   = (x2, y2) on-screen* 95(64)  = (x1, y1) on-screen,  (x2, y2) off-screen* 191(128) = (x1, y1) off-screen, (x2, y2) off-screen
 104+ C334             >;              So XX13 is non-zero if the end of the line was clipped,meaning the next line sent to BLINE can't join onto the end but has to start a new segment
 104+ C334             >;         SWAP The swap status of the returned coordinates:* &FF if we swapped the values of (x1, y1) and(x2, y2) as part of the clipping process* 0 if the coordinates are still in the same order
 104+ C334             >; TODO treat horizonal/vert and single pixel as special cases
 105+ C334                                          ClippingCodeLL145Macro P
 105+ C334             >P_LL145_6502:        ZeroA                           ; LDA #0                 \ Set SWAP = 0
 105+ C334 AF          >                        xor a
 105+ C335 32 EB C9    >                            ld      (SWAP),a                ; STA SWAP
 105+ C338 3A 20 C1    >                            ld      a,(P_XX15X2hi)            ; LDA XX15+5             \ Set A = x2_hi (use b as a substibute for a)
 105+ C33B 47          >                            ld      b,a                     ; .
 105+ C33C             >; Note that as we are interested in the sign of XX113 then this needs to be >= 128 or < 128 or 0, we will use 191 as per bbc for now
 105+ C33C             >; for the screen coord we will use 127 though, we use c as a temporay X register
 105+ C33C 3E BF       >P_LL147_6502:        ld      a,191                   ; LDX #Y*2-1             \ Set X = #Y * 2 - 1. The constant #Y is 96, the y-coordinate of the mid-point of the space view, so this sets Y2 to 191, the y-coordinate of the bottom pixel row of the space view
 105+ C33E 32 B9 F1    >                            ld      (Xreg),a                ; .
 105+ C341             >;                    ld      a,127
 105+ C341             >;                    ld      c,a
 105+ C341 78          >.CheckX2Y2High:             ld      a,b                     ; ORA XX12+1             \ If one or both of x2_hi and y2_hi are non-zero, jump
 105+ C342 21 22 C1    >                            ld      hl,P_XX15Y2hi    ; .
 105+ C345 B6          >                            or      (hl)                    ; .
 105+ C346 C2 56 C3    >                            jp      nz,P_LL107_6502  ; BNE LL107              \ to LL107 to skip the following, leaving X at 191
 105+ C349 3E 7F       >.CheckY2Lo:                 ld      a,127 ;,c               ; get back the temporary x reg from c
 105+ C34B 21 21 C1    >                            ld      hl,P_XX15Y2lo    ; CPX XX12               \ If y2_lo > the y-coordinate of the bottom of screen (a is being used as X at this point still)
 105+ C34E BE          >                            cp      (hl)                    ; .
 105+ C34F DA 56 C3    >                            jp      c,P_LL107_6502   ; BCC LL107              \ then (x2, y2) is off the bottom of the screen, so skip the following instruction, leaving X at 127
 105+ C352             >                            ZeroA                           ; LDX #0                 \ Set X = 0
 105+ C352 AF          >                        xor a
 105+ C353 32 B9 F1    >                            ld      (Xreg),a
 105+ C356 3A B9 F1    >P_LL107_6502:        ld      a,(Xreg)                ; STX XX13               \ Set XX13 = X, so we have * XX13 = 0 if x2_hi = y2_hi = 0, y2_lo is on-screen* XX13 = 191 if x2_hi or y2_hi are non-zero or y2_lois off the bottom of the screen
 105+ C359 32 35 C1    >                            ld      ( P_XX13),a      ; now c is released as a temporary x reg
 105+ C35C 3A 1C C1    >                            ld      a,(P_XX15X1hi)   ; LDA XX15+1             \ If one or both of x1_hi and y1_hi are non-zero, jump
 105+ C35F 21 1E C1    >                            ld      hl,P_XX15Y1hi    ; ORA XX15+3             \ to LL83
 105+ C362 B6          >                            or      (hl)                    ; .
 105+ C363 C2 A3 C3    >                            jp      nz,P_LL83_6502            ; BNE LL83
 105+ C366             >; DEBUG SIMPLIFIED CODE, now we just compare y1 lo > 127
 105+ C366 3A AB F1    >                            ld      a,(XX1532)              ; If y1_lo > the y-coordinate of the bottom of screen (If A >= N, then C flag is reset.) ;ld      a,127                   ; LDA #Y*2-1             \ If y1_lo > the y-coordinate of the bottom of screen (If A >= N, then C flag is reset.)
 105+ C369 26 7F       >                            ld      h,127                   ; then (x1, y1) is off the bottom of the screen, so jump                                 ;ld      hl,XX1532               ; CMP XX15+2             \ then (x1, y1) is off the bottom of the screen, so jump
 105+ C36B BC          >                            cp      h                       ; to LL83                                                                                ;cp      (hl)                    ; .                      \ to LL83
 105+ C36C D2 A3 C3    >                            jp      nc, P_LL83_6502         ; BCC LL83               \ . (y1 > 127 jump, i.e. 127 <= y1 )
 105+ C36F 3A 35 C1    >                            ld      a,( P_XX13)                ; LDA XX13               \ If we get here, (x1, y1) is on-screen. If XX13 is non-zero, i.e. (x2, y2) is off-screen, jump
 105+ C372 A7          >                            and     a                       ; BNE LL108              \ to LL108 to halve it before continuing at LL83
 105+ C373 C2 9E C3    >                            jp      nz,P_LL108_6502
 105+ C376             >; If we get here, the high bytes are all zero, which means the x-coordinates are < 256 and therefore fit on screen, and neither coordinate is off the bottom of the screen. That means both coordinates are already on
 105+ C376             >; screen, so we don't need to do any clipping, all weneed to do is move the low bytes into (X1, Y1) and X2, Y2) and return
 105+ C376             >; X1 = XX15 (10)  Y1 = XX15+1 X2 = XX15+2 Y2 = XX15+3
 105+ C376 2A 1B C1    >P_LL146_6502:        ld      hl,(P_XX15X1lo)           ;  Save X1 to XX1510
 105+ C379 CD CF C1    >                            call    P_ClampX
 105+ C37C 32 1B C1    >                            ld      (P_XX15X1lo),a
 105+ C37F 2A 1D C1    >                            ld      hl,(P_XX15Y1lo)           ;  hl = y1
 105+ C382 CD DB C1    >                            call    P_ClampY
 105+ C385 32 1C C1    >                            ld      (P_XX1510+1),a            ;  XX1510... = [X1][Y1]
 105+ C388             >
 105+ C388 2A 1F C1    >                            ld      hl,(P_XX15X2lo)           ;  de = x2
 105+ C38B CD CF C1    >                            call    P_ClampX
 105+ C38E 32 1D C1    >                            ld      (P_XX1510+2),a            ;  XX1510... = [X1][Y1][X2]
 105+ C391             >
 105+ C391 2A 21 C1    >                            ld      hl,(P_XX15Y2lo)           ;  bc = y2
 105+ C394 CD DB C1    >                            call    P_ClampY
 105+ C397 32 1E C1    >                            ld      (P_XX1510+3),a            ;  XX1510... = [X1][Y1][X2][Y2]
 105+ C39A             >                            ClearCarryFlag                  ; CLC                    \ Clear the C flag as the clipped line fits on-screen
 105+ C39A B7          >                        or a
 105+ C39B C9          >                            ret                             ; RTS                    \ Return from the subroutine
 105+ C39C             >P_LL109_6502:        SetCarryFlag                    ; SEC                    \ Set the C flag to indicate the clipped line does not fit on-screen
 105+ C39C 37          >                        scf
 105+ C39D C9          >                            ret                             ; RTS                    \ Return from the subroutine
 105+ C39E 21 35 C1    >P_LL108_6502:        ld      hl, P_XX13                 ; LSR XX13               \ If we get here then (x2, y2) is off-screen and XX13 is
 105+ C3A1 CB 3E       >                            srl     (hl)                    ;                        \ 191, (128)  so shift XX13 right to halve it to 95 (64)
 105+ C3A3             >;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 105+ C3A3             >;-- LL145 (Part 2 of 4)
 105+ C3A3 3A 35 C1    >P_LL83_6502:         ld      a,( P_XX13)               ; LDA XX13               \ If XX13 < 128 then only one of the points is on-screen
 105+ C3A6 A7          >                            and     a                                ; BPL LL115              \ so jump down to LL115 to skip the checks of whether
 105+ C3A7 F2 F3 C3    >                            jp      p,P_LL115_6502            ;                        \ both points are in the strips to the right or bottom of the screen
 105+ C3AA             >;-- If we get here, both points are off-screen
 105+ C3AA 3A 1C C1    >                            ld      a,(P_XX15X1hi)            ; LDA XX15+1             \ If both x1_hi and x2_hi have bit 7 set, jump to LL109
 105+ C3AD 21 20 C1    >                            ld      hl,P_XX15X2hi             ; AND XX15+5             \ to return from the subroutine with the C flag set, as
 105+ C3B0 A6          >                            and     (hl)
 105+ C3B1 FA 9C C3    >                            jp      m, P_LL109_6502           ; BMI LL109              \ the entire line is above the top of the screen
 105+ C3B4 3A 1E C1    >                            ld      a,(P_XX15Y1hi)            ; LDA XX15+3             \ If both y1_hi and y2_hi have bit 7 set, jump to LL109
 105+ C3B7 21 22 C1    >                            ld      hl,P_XX15Y2hi             ; AND XX12+1             \ to return from the subroutine with the C flag set, as
 105+ C3BA A6          >                            and     (hl)                             ; BMI LL109              \ the entire line is to the left of the screen
 105+ C3BB FA 9C C3    >                            jp      m,P_LL109_6502            ; .
 105+ C3BE 3A 1C C1    >                            ld      a,(P_XX15X1hi)            ; LDX XX15+1             \ Set A = X = x1_hi - 1
 105+ C3C1 3D          >                            dec     a                                ; DEX
 105+ C3C2 32 B9 F1    >                            ld      (Xreg),a                         ; TXA
 105+ C3C5 F5          >                            push    af                               ; LDX XX15+5     SP+1    \ Set XX12+2 = x2_hi - 1, we need to save a register first
 105+ C3C6 3A 20 C1    >                            ld      a,(P_XX15X2hi)            ; .
 105+ C3C9 3D          >                            dec     a                                ; DEX
 105+ C3CA 32 B9 F1    >                            ld      (Xreg),a                         ; STX XX12+2
 105+ C3CD F1          >                            pop     af                               ; .              SP+0    restore a register
 105+ C3CE 21 22 C1    >                            ld      hl,P_XX15Y2hi             ; ORA XX12+2             \ If neither (x1_hi - 1) or (x2_hi - 1) have bit 7 set,
 105+ C3D1 B6          >                            or      (hl)                             ; .
 105+ C3D2 F2 9C C3    >                            jp      p, P_LL109_6502           ; BPL LL109              \ jump to LL109 to return from the subroutine with the C flag set, as the line doesn't fit on-screen
 105+ C3D5             >; for this bit, while z80 uses carry the opposite way to 6502, 6502 uses borrow, in effect inverting the flip
 105+ C3D5             >;NOTEFOUND A PATH WHERE IT DOES NOT DO THIS CHECK e.g. 90 B2 8D A2
 105+ C3D5 3A 1D C1    >P_LL83_DEBUG:          ld      a,(P_XX1532)              ; LDA XX15+2             \ If y1_lo < y-coordinate of screen bottom, clear the C
 105+ C3D8 FE 80       >                            cp      128                     ; CMP #Y*2               \ flag, otherwise set it (NOTE FLIPPED IN z80)
 105+ C3DA 3A 1E C1    >                            ld      a,(P_XX1532+1)            ; LDA XX15+3             \ Set XX12+2 = y1_hi - (1 - C), so:
 105+ C3DD DE 00       >                            sbc     0                       ; SBC #0                 \ .
 105+ C3DF 32 4C C1    >                            ld      (P_XX12p2),a              ; STA XX12+2             \  * Set XX12+2 = y1_hi - 1 if y1_lo is on-screen * Set XX12+2 = y1_hi  otherwise We do this subtraction because we are only interested
 105+ C3E2 3A 21 C1    >                            ld      a,(P_XX1576)              ; LDA XX12               \ If y2_lo < y-coordinate of screen bottom, clear the C
 105+ C3E5 FE 80       >                            cp      128                     ; CMP #Y*2               \ flag, otherwise set it
 105+ C3E7 3A 22 C1    >                            ld      a,(P_XX1576+1)            ; LDA XX12+1             \ Set XX12+2 = y2_hi - (1 - C), so:
 105+ C3EA DE 00       >                            sbc     0                       ; SBC #0                   * Set XX12+1 = y2_hi - 1 if y2_lo is on-screen  * Set XX12+1 = y2_hi     otherwise
 105+ C3EC 21 4C C1    >                            ld      hl,P_XX12p2               ; ORA XX12+2             \ If neither XX12+1 or XX12+2 have bit 7 set, jump to
 105+ C3EF B6          >                            or      (hl)                    ; .
 105+ C3F0 F2 9C C3    >                            jp      p,P_LL109_6502            ; BPL LL109              \ LL109 to return from the subroutine with the C flag set, as the line doesn't fit on-screen
 105+ C3F3             >;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 105+ C3F3             >;-- LL145 (Part 3 of 4) Summary: Clip line: Calculate the line's gradient
 105+ C3F3 3A BA F1    >P_LL115_6502:        ld      a,(Yreg)                ; TYA                    \ Store Y on the stack so we can preserve it through the call to this routine
 105+ C3F6 F5          >                            push    af                      ; PHA            SP+1    \ call to this subroutine
 105+ C3F7 2A 1F C1    >                            ld      hl,(P_XX15X2lo)             ; LDA XX15+4             \ Set XX12+2 = x2_lo - x1_lo
 105+ C3FA ED 5B 1B C1 >                            ld      de,(P_XX15X1lo)             ; LDA XX15+5             \ Set XX12+3 = x2_hi - x1_hi
 105+ C3FE             >                            ClearCarryFlag                  ; SBC XX15+1
 105+ C3FE B7          >                        or a
 105+ C3FF ED 52       >                            sbc     hl,de                   ; .
 105+ C401 22 02 F6    >                            ld      (delta_x),hl            ; .
 105+ C404 2A 21 C1    >                            ld      hl,(P_XX15Y2lo)             ; LDA XX12               \ Set XX12+4 = y2_lo - y1_lo
 105+ C407 ED 5B 1D C1 >                            ld      de,(P_XX15Y1lo)             ;
 105+ C40B             >                            ClearCarryFlag                  ; SBC XX15+2
 105+ C40B B7          >                        or a
 105+ C40C ED 52       >                            sbc     hl,de                   ; .
 105+ C40E 22 04 F6    >                            ld      (delta_y),hl            ; .
 105+ C411             >; So we now have:  delta_x in XX12(3 2)  delta_y in XX12(5 4) where the delta is (x1, y1) - (x2, y2))
 105+ C411 3A 05 F6    >                            ld      a,(delta_y+1)           ; EOR XX12+3             \ Set S = the sign of delta_x * the sign of delta_y, so
 105+ C414 21 03 F6    >                            ld      hl,delta_x+1
 105+ C417 AE          >                            xor     (hl)
 105+ C418 32 B8 F1    >                            ld      (Svar),a                ; STA S                  \ if bit 7 of S is set, the deltas have different signs (perhaps we should do bit 7 mask ?????????
 105+ C41B 2A 04 F6    >                            ld      hl,(delta_y)            ; LDA XX12+5             \ If delta_y_hi is positive, jump down to LL110 to skip
 105+ C41E 7C          >                            ld      a,h
 105+ C41F A7          >                            and     a
 105+ C420 F2 2C C4    >                            jp      p, P_LL110_6502  ; BPL LL110              \ the following
 105+ C423             >                            NegHL                           ; LDA #0                 \ Otherwise flip the sign of delta_y to make it
 105+ C423 AF          >                    xor a
 105+ C424 95          >                    sub l
 105+ C425 6F          >                    ld l,a
 105+ C426 9F          >                    sbc a,a
 105+ C427 94          >                    sub h
 105+ C428 67          >                    ld h,a
 105+ C429 22 04 F6    >                            ld      (delta_y),hl            ; positive, starting with the low bytes
 105+ C42C 2A 02 F6    >P_LL110_6502:        ld      hl,(delta_x)            ; LDA XX12+3             \ If delta_x_hi is positive, jump down to LL111 to skip
 105+ C42F 7C          >                            ld      a,h                     ; BPL LL111              \ the following
 105+ C430 A7          >                            and     a                       ; .
 105+ C431 F2 3D C4    >                            jp      p,P_LL111_6502            ; .
 105+ C434             >                            NegHL                           ; SEC                    \ Otherwise flip the sign of delta_x to make it
 105+ C434 AF          >                    xor a
 105+ C435 95          >                    sub l
 105+ C436 6F          >                    ld l,a
 105+ C437 9F          >                    sbc a,a
 105+ C438 94          >                    sub h
 105+ C439 67          >                    ld h,a
 105+ C43A 22 02 F6    >                            ld      (delta_x),hl            ; LDA #0                 \ positive, starting with the low bytes
 105+ C43D             >;--  We now keep halving |delta_x| and |delta_y| until both of them have zero in their high bytes
 105+ C43D 2A 02 F6    >P_LL111_6502:        ld      hl,(delta_x)
 105+ C440 ED 5B 04 F6 >                            ld      de,(delta_y)
 105+ C444 7C          >                            ld      a,h                     ; TAX                    \ If |delta_x_hi| is non-zero, skip the following
 105+ C445 B2          >                            or      d                       ; BNE LL112
 105+ C446 CA 5B C4    >                            jp      z,P_LL113_6502            ; LDX XX12+5             \ If |delta_y_hi| = 0, jump down to LL113 (as both |delta_x_hi| and |delta_y_hi| are 0)
 105+ C449             >P_LL112_6502:        ShiftHLRight1                   ; LSR A                  \ Halve the value of delta_x in (A XX12+2)
 105+ C449 CB 3C       >			   srl h
 105+ C44B CB 1D       >			   rr  l
 105+ C44D             >                            ShiftDERight1                   ; LSR XX12+5             \ Halve the value of delta_y XX12(5 4)
 105+ C44D CB 3A       >			   srl d
 105+ C44F CB 1B       >			   rr  e
 105+ C451 22 02 F6    >                            ld      (delta_x),hl
 105+ C454 ED 53 04 F6 >                            ld      (delta_y),de            ; write them back so we don't end up in an infinite loop
 105+ C458 C3 3D C4    >                            jp       P_LL111_6502                  ; JMP LL111              \ Loop back to LL111
 105+ C45B             >;-- By now, the high bytes of both |delta_x| and |delta_y| are zero
 105+ C45B             >P_LL113_6502:        ZeroA                           ; STX T                  \ We know that X = 0 as that's what we tested with a BEQ  above, so this sets T = 0
 105+ C45B AF          >                        xor a
 105+ C45C 32 B5 F1    >                            ld      (Tvar),a
 105+ C45F 3A 02 F6    >                            ld      a,(delta_x)             ; LDA XX12+2             \ If delta_x_lo < delta_y_lo, so our line is more
 105+ C462 21 04 F6    >                            ld      hl,delta_y              ; CMP XX12+4             \ vertical than horizontal, jump to LL114
 105+ C465 BE          >                            cp      (hl)
 105+ C466 DA 78 C4    >                            jp      c, P_LL114_6502  ; BCC LL114              ; if delta y > delta x then its a steep slope so we do 256*dy/dx
 105+ C469             >;-- If we get here then our line is more horizontal than vertical, so it is a shallow slope
 105+ C469 3A 02 F6    >                            ld      a,(delta_x)             ; STA Q                  \ Set Q = delta_x_lo
 105+ C46C 32 B6 F1    >                            ld      (Qvar),a                ; .
 105+ C46F 3A 04 F6    >                            ld      a,(delta_y)             ; LDA XX12+4             \ Set A = delta_y_lo
 105+ C472 CD 56 C1    >                            call    P_LL28_6502      ; JSR LL28               \ Call LL28 to calculate: R = 256 * A / Q = 256 * delta_y_lo / delta_x_lo
 105+ C475 C3 89 C4    >                            jp      P_LL116_6502     ; JMP LL116              \ Jump to LL116, as we now have the line's gradient in R
 105+ C478             >;-- If we get here then our line is more vertical than horizontal, so it is a steep slope
 105+ C478 3A 04 F6    >P_LL114_6502:        ld      a,(delta_y)             ; LDA XX12+4             \ Set Q = delta_y_lo
 105+ C47B 32 B6 F1    >                            ld      (Qvar),a                ; STA Q
 105+ C47E 3A 02 F6    >                            ld      a,(delta_x)             ; LDA XX12+2             \ Set A = delta_x_lo
 105+ C481 CD 56 C1    >                            call    P_LL28_6502               ; JSR LL28               \ Call LL28 to calculate: R = 256 * A / Q = 256 * delta_x_lo / delta_y_lo
 105+ C484 3E FF       >                            ld      a,$FF                   ; DEC T                  \ T was set to 0 above, so this sets T = &FF when our
 105+ C486 32 B5 F1    >                            ld      (Tvar),a                ;                        \ line is steep
 105+ C489             >;----------------------------------------------------------------------------------------------------------------
 105+ C489             >;--- LL116 This part sets things up to call the routine in LL188, which does the actual clipping.
 105+ C489             >;--  If we get here, then R has been set to the gradient of the line (x1, y1) to(x2, y2), with T indicating the gradient of slope: * 0   = shallow slope (more horizontal than vertical)
 105+ C489             >;--                                                                                                                                * &FF = steep slope (more vertical than horizontal)
 105+ C489             >;-- XX13 has been set as follows: * 0   = (x1, y1) off-screen, (x2, y2) on-screen * 95(64)  = (x1, y1) on-screen,  (x2, y2) off-screen * 191(128) = (x1, y1) off-screen, (x2, y2) off-screen
 105+ C489 3A B7 F1    >P_LL116_6502:        ld      a,(Rvar)                ; LDA R                  \ Store the gradient in XX12+2
 105+ C48C 32 4C C1    >                            ld      (P_XX12p2),a     ; STA XX12+2
 105+ C48F 3A B8 F1    >                            ld      a,(Svar)                ; LDA S                  \ Store the type of slope in XX12+3, bit 7 clear means
 105+ C492 32 4D C1    >                            ld      (P_XX12p3),a              ; STA XX12+3             \ top left to bottom right, bit 7 set means top right to bottom left
 105+ C495 3A 35 C1    >                            ld      a,( P_XX13)                ; LDA XX13               \ If XX13 = 0, skip the following instruction
 105+ C498 FE 00       >                            cp      0                       ; BEQ LL138
 105+ C49A CA A0 C4    >                            jp      z,P_LL138_6502            ; .
 105+ C49D F2 BC C4    >                            jp      p, P_LLX117_6502          ; If XX13 is positive, it must be 95 (64) as 128 would be negative). This means (x1, y1) is on-screen but (x2, y2) isn't, so we jump
 105+ C4A0             >;-- If we get here, XX13 = 0 or 191, so (x1, y1) is off-screen and needs clipping
 105+ C4A0 CD CC C2    >P_LL138_6502:          call    P_LL118_6502              ; JSR LL118              \ Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 105+ C4A3 3A 35 C1    >                            ld      a,( P_XX13)                ; LDA XX13               \ If XX13 = 0, i.e. (x2, y2) is on-screen, jump down to
 105+ C4A6 A7          >                            and     a
 105+ C4A7 F2 DF C4    >                            jp      p,P_LL124_6502            ; BPL LL124              \ LL124 to return with a successfully clipped line
 105+ C4AA             >;-- If we get here, XX13 = 191 (128) (both coordinates areoff-screen)
 105+ C4AA 3A 1C C1    >P_LL117_6502:          ld      a,(P_XX1510+1)            ; LDA XX15+1             \ If either of x1_hi or y1_hi are non-zero, jump to
 105+ C4AD 21 1E C1    >                            ld      hl,P_XX1532+1             ; ORA XX15+3             \ LL137 to return from the subroutine with the C flag
 105+ C4B0 B6          >                            or      (hl)
 105+ C4B1 C2 E7 C4    >                            jp      nz, P_LL137_6502          ; BNE LL137              \ set, as the line doesn't fit on-screen
 105+ C4B4 3A 1D C1    >                            ld      a,(P_XX1532)              ; LDA XX15+2             \ If y1_lo > y-coordinate of the bottom of the screen
 105+ C4B7 FE 80       >                            cp      128                     ; CMP #Y*2               \ jump to LL137 to return from the subroutine with the
 105+ C4B9 D2 E7 C4    >                            jp      nc, P_LL137_6502          ; BCS LL137              \ C flag set, as the line doesn't fit on-screen
 105+ C4BC             >;-- If we get here, XX13 = 95 or 191, and in both cases (x2, y2) is off-screen, so we now need to swap the (x1, y1) and (x2, y2) coordinates around before doing the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 105+ C4BC 2A 1B C1    >P_LLX117_6502:         ld      hl,( P_XX1510)             ; LDX XX15               \ Swap x1_lo = x2_lo
 105+ C4BF ED 5B 1F C1 >                            ld      de,( P_XX1554)
 105+ C4C3 ED 53 1B C1 >                            ld      ( P_XX1510),de
 105+ C4C7 22 1F C1    >                            ld      ( P_XX1554),hl
 105+ C4CA 2A 1D C1    >                            ld      hl,( P_XX1532)             ; LDX XX15+2             \ Swap y1_lo = y2_lo
 105+ C4CD ED 5B 21 C1 >                            ld      de,( P_XX1576)
 105+ C4D1 ED 53 1D C1 >                            ld      ( P_XX1532),de
 105+ C4D5 22 21 C1    >                            ld      ( P_XX1576),hl
 105+ C4D8 CD CC C2    >                            call    P_LL118_6502              ; JSR LL118              \ Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 105+ C4DB 21 EB C9    >                            ld      hl,SWAP
 105+ C4DE 35          >                            dec     (hl)                    ; DEC SWAP               \ Set SWAP = &FF to indicate that we just clipped the line at the (x2, y2) end by swapping the coordinates (the DEC does this as we set SWAP to 0 at the start of this subroutine)
 105+ C4DF F1          >P_LL124_6502:          pop     af                      ; PLA            SP+0    \ Restore Y from the stack so it gets preserved through
 105+ C4E0 32 BA F1    >                            ld      (Yreg),a                ; TAY                    \ the call to this subroutine
 105+ C4E3 CD 76 C3    >                            call    P_LL146_6502              ; JMP LL146              \ Jump up to LL146 to move the low bytes of (x1, y1) and (x2, y2) into (X1, Y1) and (X2, Y2), and return from the subroutine with a successfully clipped line
 105+ C4E6 C9          >                            ret                             ; then exit so we don't pop it twice
 105+ C4E7 F1          >P_LL137_6502:          pop     af                      ; PLA            SP+0    \ Restore Y from the stack so it gets preserved through
 105+ C4E8 32 BA F1    >                            ld      (Yreg),a                ; TAY                    \ the call to this subroutine
 105+ C4EB             >                            SetCarryFlag                    ; SEC                    \ Set the C flag to indicate the clipped line does not fit on-screen
 105+ C4EB 37          >                        scf
 105+ C4EC C9          >                            ret                             ; RTS                    \ Return from the subroutine
 105+ C4ED             >
 105+ C4ED             >
 105+ C4ED 21 D8 F5    >P_l2_draw_6502_line:   ld      hl,x1                           ; copy from currnet position to 6502 variables
 105+ C4F0 11 1B C1    >                            ld      de, P_XX1510
 105+ C4F3 01 08 00    >                            ld      bc,4*2
 105+ C4F6 ED B0       >                            ldir
 105+ C4F8 CD 34 C3    >                            call    P_LL145_6502                      ; perform 6502 version
 105+ C4FB D8          >                            ret     c                               ; returns if carry is set as its a no draw
 105+ C4FC 21 00 00    >.CopyBackResults:           ld      hl,0
 105+ C4FF 22 D8 F5    >                            ld      (x1),hl
 105+ C502 22 DA F5    >                            ld      (y1),hl
 105+ C505 22 DC F5    >                            ld      (x2),hl
 105+ C508 22 DE F5    >                            ld      (y2),hl
 105+ C50B 3A 1B C1    >                            ld      a,( P_XX1510)
 105+ C50E 32 D8 F5    >                            ld      (x1),a
 105+ C511 4F          >                            ld      c,a
 105+ C512 3A 1C C1    >                            ld      a,( P_XX1510+1)
 105+ C515 32 DA F5    >                            ld      (y1),a
 105+ C518 47          >                            ld      b,a
 105+ C519 3A 1D C1    >                            ld      a,( P_XX1510+2)
 105+ C51C 32 DC F5    >                            ld      (x2),a
 105+ C51F 5F          >                            ld      e,a
 105+ C520 3A 1E C1    >                            ld      a,( P_XX1510+3)
 105+ C523 32 DE F5    >                            ld      (y2),a
 105+ C526 57          >                            ld      d,a
 105+ C527 3E FF       >                            ld      a,$FF
 105+ C529             >                            ClearCarryFlag
 105+ C529 B7          >                        or a
 105+ C52A C9          >                            ret
 106+ C52B                                          InitialiseUniverseObjMacro P
 106+ C52B 21 00 00    >P_InitRotMat:    ld      hl, 0
 106+ C52E 22 27 C0    >                        ld      (P_BnkrotmatSidevY),hl       ; set the zeroes
 106+ C531 22 29 C0    >                        ld      (P_BnkrotmatSidevZ),hl       ; set the zeroes
 106+ C534 22 2B C0    >                        ld      (P_BnkrotmatRoofvX),hl       ; set the zeroes
 106+ C537 22 2F C0    >                        ld      (P_BnkrotmatRoofvZ),hl       ; set the zeroes
 106+ C53A 22 31 C0    >                        ld      (P_BnkrotmatNosevX),hl       ; set the zeroes
 106+ C53D 22 33 C0    >                        ld      (P_BnkrotmatNosevY),hl       ; set the zeroes
 106+ C540             >; Optimised as already have 0 in l
 106+ C540 26 60       >                        ld      h, $60	             				; 96 in hi byte
 106+ C542             >                        ;ld      hl,1
 106+ C542 22 25 C0    >                        ld      (P_BnkrotmatSidevX),hl
 106+ C545 22 2D C0    >                        ld      (P_BnkrotmatRoofvY),hl
 106+ C548             >; Optimised as already have 0 in l
 106+ C548 26 E0       >                        ld      h, $E0					            ; -96 in hi byte which is +96 with hl bit 7 set
 106+ C54A 22 35 C0    >                        ld      (P_BnkrotmatNosevZ),hl
 106+ C54D C9          >                        ret
 107+ C54E
 108+ C54E              ; --------------------------------------------------------------
 109+ C54E              ; clear out the planet data block
 110+ C54E 21 10 C0     ResetP_BnkData:         ld      hl,P_BnkDataBlock
 111+ C551 11 46 01                             ld      de,P_Bnk_Data_len
 112+ C554 AF                                   xor     a
 113+ C555 CD 04 7E                             call    memfill_dma
 114+ C558 C9                                   ret
 115+ C559              ; --------------------------------------------------------------
 116+ C559 21 10 C0     ResetP_BnkPosition:     ld      hl,P_Bnkxlo
 117+ C55C 06 09                                ld      b, 3*3
 118+ C55E AF                                   xor     a
 119+ C55F 77           .zeroLoop:              ld      (hl),a
 120+ C560 23                                   inc     hl
 121+ C561 10 FC                                djnz    .zeroLoop
 122+ C563 C9                                   ret
 123+ C564              ; --------------------------------------------------------------
 124+ C564              ; Normalise planet vectors
 125+ C564 21 48 C0     P_NormaliseRotMat:      ld      hl,P_BnkTransmatNosevZ+1   ; initialise loop
 126+ C567 0E C5                                ld      c,ConstNorm                 ; c = Q = norm = 197
 127+ C569 79                                   ld      a,c
 128+ C56A 32 71 7F                             ld      (varQ),a                    ; set up varQ
 129+ C56D 06 09                                ld      b,9                         ; total of 9 elements to transform
 130+ C56F 56           .LL21Loop:              ld      d,(hl)
 131+ C570 2B                                   dec     hl
 132+ C571 5E                                   ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
 133+ C572                                      ShiftDELeft1                        ; De = DE * 2
 133+ C572 CB 23       >			   sla e
 133+ C574 CB 12       >			   rl  d
 134+ C576 7A                                   ld      a,d                         ; a = hi byte after shifting
 135+ C577 E5                                   push	hl
 136+ C578 C5                                   push	bc
 137+ C579 CD DB CD                             call    Norm256mulAdivQ
 138+ C57C                                      ;===call    RequAmul256divC				; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
 139+ C57C 79                                   ld      a,c                         ; BFRDIV returns R also in l reg
 140+ C57D C1                                   pop		bc
 141+ C57E E1                                   pop		hl							; bc gets wrecked by BFRDIV
 142+ C57F 77                                   ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
 143+ C580 2B                                   dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
 144+ C581 10 EC                                djnz    .LL21Loop                    ; loop from 2zLo through to 0xLo
 145+ C583 C9                                   ret
 146+ C584
 147+ C584
 148+ C584              ; This uses UBnkNodeArray as the list
 149+ C584              ; the array is 256 * 2 bytes
 150+ C584              ; counter is current row y pos
 151+ C584              ; byte 1 is start x pos
 152+ C584              ; byte 2 is end x pos
 153+ C584              ; if they are both 0 then skip
 154+ C584              ; its always horizontal, yellow
 155+ C584              ; 16 different Planet Colours
 156+ C584              ; codes D<> Dark, M<> Mid, L<> Light B<> Brightest
 157+ C584              PlanetColour10DG        equ      40     ; Green
 158+ C584              PlanetColour20DG        equ      44
 159+ C584              PlanetColour11MG        equ      44
 160+ C584              PlanetColour21MG        equ      80
 161+ C584              PlanetColour12LG        equ      80
 162+ C584              PlanetColour22LG        equ      84
 163+ C584              PlanetColour13BG        equ      84
 164+ C584              PlanetColour23BG        equ      120
 165+ C584              PlanetColour14DB        equ      1      ; Blue
 166+ C584              PlanetColour24DB        equ      2
 167+ C584              PlanetColour15MB        equ      2
 168+ C584              PlanetColour25MB        equ      3
 169+ C584              PlanetColour16LB        equ      3
 170+ C584              PlanetColour26LB        equ      67
 171+ C584              PlanetColour17DO        equ      68     ; Orange
 172+ C584              PlanetColour27DO        equ      100
 173+ C584              PlanetColour18MO        equ      100
 174+ C584              PlanetColour28MO        equ      136
 175+ C584              PlanetColour19LO        equ      136
 176+ C584              PlanetColour29LO        equ      168
 177+ C584              PlanetColour1ABO        equ      168
 178+ C584              PlanetColour2ABO        equ      204
 179+ C584              PlanetColour1BDR        equ      64     ; Red
 180+ C584              PlanetColour2BDR        equ      96
 181+ C584              PlanetColour1CMR        equ      96
 182+ C584              PlanetColour2CMR        equ      128
 183+ C584              PlanetColour1DLR        equ      128
 184+ C584              PlanetColour2DLR        equ      160
 185+ C584              PlanetColour1EMC        equ      18     ; Cyan
 186+ C584              PlanetColour2EMC        equ      22
 187+ C584              PlanetColour1FMP        equ      163    ; Purple
 188+ C584              PlanetColour2FMP        equ      226    ; note avoiding transparent
 189+ C584
 190+ C584 28 2C 50 54  PlanetColour1Table:     DB       PlanetColour10DG, PlanetColour11MG, PlanetColour12LG, PlanetColour13BG
 191+ C588 01 02 03 44                          DB       PlanetColour14DB, PlanetColour15MB, PlanetColour16LB, PlanetColour17DO
 192+ C58C 64 88 A8 40                          DB       PlanetColour18MO, PlanetColour19LO, PlanetColour1ABO, PlanetColour1BDR
 193+ C590 60 80 12 A3                          DB       PlanetColour1CMR, PlanetColour1DLR, PlanetColour1EMC, PlanetColour1FMP
 194+ C594 2C 50 54 78  PlanetColour2Table:     DB       PlanetColour20DG, PlanetColour21MG, PlanetColour22LG, PlanetColour23BG
 195+ C598 02 03 43 64                          DB       PlanetColour24DB, PlanetColour25MB, PlanetColour26LB, PlanetColour27DO
 196+ C59C 88 A8 CC 60                          DB       PlanetColour28MO, PlanetColour29LO, PlanetColour2ABO, PlanetColour2BDR
 197+ C5A0 80 A0 16 E2                          DB       PlanetColour2CMR, PlanetColour2DLR, PlanetColour2EMC, PlanetColour2FMP
 198+ C5A4
 199+ C5A4              ; PLANET
 200+ C5A4
 201+ C5A4 21 18 C0     WarpPlanetCloser:       ld      hl,P_Bnkzsgn
 202+ C5A7 7E           .PositiveAxis:          ld      a,(hl)
 203+ C5A8                                      ReturnIfALTNusng 2                      ; hard liit along z axis
 203+ C5A8 FE 02       >                        cp    2
 203+ C5AA D8          >                        ret	 c
 204+ C5AB 35                                   dec     (hl)
 205+ C5AC C9                                   ret
 206+ C5AD
 207+ C5AD              ; It should normally be behind but someone could fly past a planet, turn aroudn and jump
 208+ C5AD 21 18 C0     WarpPlanetFurther:      ld      hl,P_Bnkzsgn
 209+ C5B0 7E                                   ld      a,(hl)
 210+ C5B1                                      ReturnIfAGTENusng $7F                   ; this is the hard limit else it woudl turn negative and flip to -0
 210+ C5B1 FE 7F       >                        cp    $7F
 210+ C5B3 D0          >                        ret	 nc
 211+ C5B4 34                                   inc     (hl)                           ; if its negative it will still increase as we will block insane values
 212+ C5B5 C9                                   ret
 213+ C5B6              ; --------------------------------------------------------------
 214+ C5B6              ; This sets current universe object to a planet,they use sign + 23 bit positions
 215+ C5B6              ; we need to have variable size and color
 216+ C5B6              ; Planet positon  z = (((seed.b & 7) + 7 )/2) shift left 16
 217+ C5B6              ;                 x    = seed f & 3  + 3      shift left 16 (if seed e is even x = x * -1)
 218+ C5B6              ;                 y    = x                    shift left 16 (if seed e is even y = y * -1)
 219+ C5B6
 220+ C5B6              CalculatePlanetWarpPositon:
 221+ C5B6 3A 02 80     .CalcZPosition:         ld      a,(WorkingSeeds+1)      ; seed d & 7
 222+ C5B9 E6 07                                and     %00000111               ; .
 223+ C5BB C6 07                                add     a,7                     ; + 7
 224+ C5BD CB 2F                                sra     a                       ; / 2
 225+ C5BF 32 18 C0     .SetZPosition:          ld      (P_Bnkzsgn),a            ; << 16 (i.e. load into z sign byte
 226+ C5C2 21 00 00                             ld      hl, $0000               ; now set z hi and lo
 227+ C5C5 22 16 C0                             ld      (P_Bnkzlo),hl            ;
 228+ C5C8 3A 06 80     .CalcXandYPosition:     ld      a,(WorkingSeeds+5)      ; seed f & 3
 229+ C5CB E6 03                                and     %00000011               ; .
 230+ C5CD C6 03                                add     a,3                     ; + 3
 231+ C5CF 47                                   ld      b,a
 232+ C5D0 3A 05 80                             ld      a,(WorkingSeeds+4)      ; get low bit of seed e
 233+ C5D3 E6 01                                and     %00000001
 234+ C5D5 1F                                   rra                             ; roll bit 0 into bit 7
 235+ C5D6 B0                                   or      b                       ; now calc is f & 3 * -1 if seed e is odd
 236+ C5D7 32 12 C0     .SetXandYPosition:      ld      (P_Bnkxsgn),a            ; set into x and y sign byte
 237+ C5DA 32 15 C0                             ld      (P_Bnkysgn),a            ; .
 238+ C5DD 78                                   ld      a,b                     ; we want just seed f & 3 here
 239+ C5DE 32 11 C0                             ld      (P_Bnkxhi),a             ; set into x and y high byte
 240+ C5E1 32 14 C0                             ld      (P_Bnkyhi),a             ; .
 241+ C5E4                                      ZeroA
 241+ C5E4 AF          >                        xor a
 242+ C5E5 32 10 C0                             ld      (P_Bnkxlo),a
 243+ C5E8 32 13 C0                             ld      (P_Bnkylo),a
 244+ C5EB C9                                   ret
 245+ C5EC
 246+ C5EC              CalculatePlanetLaunchedPosition:
 247+ C5EC              .CalcXPosition:         MMUSelectMathsBankedFns
 247+ C5EC ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 248+ C5F0 DD 21 39 80                          ld      ix,ParentPlanetX
 249+ C5F4 FD 21 10 C0                          ld      iy,P_Bnkxlo
 250+ C5F8 CD 8C 00                             call    AddAtIXtoAtIY24Signed
 251+ C5FB DD 21 3C 80  .CalcYPosition:         ld      ix,ParentPlanetY
 252+ C5FF FD 21 13 C0                          ld      iy,P_Bnkylo
 253+ C603 CD 8C 00                             call    AddAtIXtoAtIY24Signed
 254+ C606 DD 21 3F 80  .CalcZPosition:         ld      ix,ParentPlanetZ
 255+ C60A FD 21 16 C0                          ld      iy,P_Bnkzlo
 256+ C60E CD 8C 00                             call    AddAtIXtoAtIY24Signed
 257+ C611 C9                                   ret
 258+ C612
 259+ C612 CD 4E C5     CreatePlanet:           call    ResetP_BnkData          ; Clear out planet block
 260+ C615 3A 30 80                             ld      a,(DisplayTekLevel)
 261+ C618 E6 02                                and     %00000010               ; Set A = 128 or 130 depending on bit 1 of the system's tech level
 262+ C61A F6 80                                or      %10000000
 263+ C61C 32 79 C0                             ld      (P_BnkShipType),a       ; and load to ship type (synomous with planet type)
 264+ C61F                                      MaxUnivPitchAndRoll
 264+ C61F 3E 7F       >                        ld      a,127
 264+ C621 32 48 C0    >                        ld      (UBnkRotXCounter),a
 264+ C624 32 4A C0    >                        ld      (UBnkRotZCounter),a
 265+ C627 CD B6 C5                             call    CalculatePlanetWarpPositon
 266+ C62A 3A 30 80     .SetColour:             ld      a,(DisplayTekLevel)
 267+ C62D 21 31 80                             ld      hl,DisplayPopulation    ; add displaypopulation
 268+ C630 86                                   add     a, (hl)
 269+ C631 47                                   ld      b,a                     ; save for atmosphere level
 270+ C632 23                                   inc     hl                      ; move to DisplayProductivity
 271+ C633 86                                   add     a, (hl)
 272+ C634 E6 0F                                and     $0F                     ; limit to 0 to 16
 273+ C636 21 84 C5                             ld      hl,PlanetColour1Table
 274+ C639 ED 31                                add     hl,a
 275+ C63B 7E                                   ld      a,(hl)
 276+ C63C 32 F0 C0                             ld      (P_Colour1),a
 277+ C63F 3E 10                                ld      a,$10
 278+ C641 ED 31                                add     hl,a
 279+ C643 7E                                   ld      a,(hl)
 280+ C644 32 F1 C0                             ld      (P_Colour2),a
 281+ C647 78                                   ld      a,b
 282+ C648 E6 07                                and     %00000111               ; atmosphere can be 0 to  3 pixels thick
 283+ C64A CB 3F                                srl     a                       ;
 284+ C64C 32 F2 C0                             ld      (P_Colour2Thickness),a
 285+ C64F CD 2B C5     .SetOrientation:        call    P_InitRotMat
 286+ C652 C9                                   ret
 287+ C653
 288+ C653 CD 4E C5     CreatePlanetLaunched:   call    ResetP_BnkData
 289+ C656 CD 12 C6                             call    CreatePlanet
 290+ C659 21 00 00                             ld      hl,0
 291+ C65C 22 10 C0                             ld      (P_Bnkxlo),hl
 292+ C65F 22 13 C0                             ld      (P_Bnkylo),hl
 293+ C662 21 03 FF                             ld      hl,$FF03
 294+ C665 22 16 C0                             ld      (P_Bnkzlo),hl
 295+ C668                                      ZeroA
 295+ C668 AF          >                        xor a
 296+ C669 32 12 C0                             ld      (P_Bnkxsgn),a
 297+ C66C 32 15 C0                             ld      (P_Bnkysgn),a
 298+ C66F 32 18 C0                             ld      (P_Bnkzsgn),a
 299+ C672                                      MaxUnivPitchAndRoll
 299+ C672 3E 7F       >                        ld      a,127
 299+ C674 32 48 C0    >                        ld      (UBnkRotXCounter),a
 299+ C677 32 4A C0    >                        ld      (UBnkRotZCounter),a
 300+ C67A C9                                   ret
 301+ C67B              ; NEED FINSIHGING
 302+ C67B
 303+ C67B
 304+ C67B ED 4B 1F C1  ScalePlanetTo8Bit:		ld			bc,(P_BnkZScaled)
 305+ C67F 2A 1B C1                             ld			hl,(P_BnkXScaled)
 306+ C682 ED 5B 1D C1                          ld			de,(P_BnkYScaled)
 307+ C686 78           .SetABSbc:              ld			a,b
 308+ C687 DD 67                                ld			ixh,a
 309+ C689 E6 7F                                and			SignMask8Bit
 310+ C68B 47                                   ld			b,a									; bc = ABS bc
 311+ C68C 7C           .SetABShl:              ld			a,h
 312+ C68D DD 6F                                ld			ixl,a
 313+ C68F E6 7F                                and			SignMask8Bit
 314+ C691 67                                   ld			h,a									; hl = ABS hl
 315+ C692 7A           .SetABSde:              ld			a,d
 316+ C693 FD 67                                ld			iyh,a
 317+ C695 E6 7F                                and			SignMask8Bit
 318+ C697 57                                   ld			d,a									; de = ABS de
 319+ C698 78           .ScaleNodeTo8BitLoop:   ld          a,b		                            ; U	\ z hi
 320+ C699 B4                                   or			h                                   ; XX15+1	\ x hi
 321+ C69A B2                                   or			d                                   ; XX15+4	\ y hi
 322+ C69B 28 0F                                jr          z,.ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 323+ C69D                                      ShiftHLRight1
 323+ C69D CB 3C       >			   srl h
 323+ C69F CB 1D       >			   rr  l
 324+ C6A1                                      ShiftDERight1
 324+ C6A1 CB 3A       >			   srl d
 324+ C6A3 CB 1B       >			   rr  e
 325+ C6A5                                      ShiftBCRight1
 325+ C6A5 CB 38       >			   srl b
 325+ C6A7 CB 19       >			   rr  c
 326+ C6A9 C3 98 C6                             jp          .ScaleNodeTo8BitLoop
 327+ C6AC              ; now we have scaled values we have to deal with sign
 328+ C6AC DD 7C        .ScaleNodeDone:          ld			a,ixh								; get sign bit and or with b
 329+ C6AE E6 80                                and			SignOnly8Bit
 330+ C6B0 B0                                   or			b
 331+ C6B1 47                                   ld			b,a
 332+ C6B2 DD 7D        .SignforHL:              ld			a,ixl								; get sign bit and or with b
 333+ C6B4 E6 80                                and			SignOnly8Bit
 334+ C6B6 B4                                   or			h
 335+ C6B7 67                                   ld			h,a
 336+ C6B8 FD 7C        .SignforDE:              ld			a,iyh								; get sign bit and or with b
 337+ C6BA E6 80                                and			SignOnly8Bit
 338+ C6BC B2                                   or			d
 339+ C6BD 57                                   ld			d,a
 340+ C6BE ED 43 1F C1  .SignsDoneSaveResult:	ld			(P_BnkZScaled),bc
 341+ C6C2 22 1B C1                             ld			(P_BnkXScaled),hl
 342+ C6C5 ED 53 1D C1                          ld			(P_BnkYScaled),de
 343+ C6C9 78                                   ld			a,b
 344+ C6CA 32 70 7F                             ld			(varU),a
 345+ C6CD 79                                   ld			a,c
 346+ C6CE 32 8D 7F                             ld			(varT),a
 347+ C6D1 C9                                   ret
 348+ C6D2
 349+ C6D2              ;--------------------------------------------------------------------------------------------------------
 350+ C6D2                                      include "./Universe/Planet/CopyPlanetXX12ScaledToPlanetXX18.asm"
# file opened: ././Universe/Planet/CopyPlanetXX12ScaledToPlanetXX18.asm
   1++C6D2              CopyPSXX12ScaledToPXX18:
   2++C6D2              CopyResultToPDrawCam:
   3++C6D2                      ldCopyByte P_XX12         ,P_XX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++C6D2 3A 23 C1    >                        ld       a,(P_XX12)
   3++C6D5 32 70 C0    >                        ld       (P_XX18),a
   4++C6D8                      ldCopyByte P_XX12+1       ,P_XX18+2           ; XX12+1 => XX18+2
   4++C6D8 3A 24 C1    >                        ld       a,(P_XX12+1)
   4++C6DB 32 72 C0    >                        ld       (P_XX18+2),a
   5++C6DE                      ldCopyByte P_XX12+2       ,P_XX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++C6DE 3A 25 C1    >                        ld       a,(P_XX12+2)
   5++C6E1 32 73 C0    >                        ld       (P_XX18+3),a
   6++C6E4                      ldCopyByte P_XX12+3       ,P_XX18+5           ; XX12+3 => XX18+5
   6++C6E4 3A 26 C1    >                        ld       a,(P_XX12+3)
   6++C6E7 32 75 C0    >                        ld       (P_XX18+5),a
   7++C6EA                      ldCopyByte P_XX12+4       ,P_XX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++C6EA 3A 27 C1    >                        ld       a,(P_XX12+4)
   7++C6ED 32 76 C0    >                        ld       (P_XX18+6),a
   8++C6F0                      ldCopyByte P_XX12+5       ,P_XX18+8           ; XX12+5 => XX18+8
   8++C6F0 3A 28 C1    >                        ld       a,(P_XX12+5)
   8++C6F3 32 78 C0    >                        ld       (P_XX18+8),a
   9++C6F6 C9                   ret
  10++C6F7
# file closed: ././Universe/Planet/CopyPlanetXX12ScaledToPlanetXX18.asm
 351+ C6F7                                      include "./Universe/Planet/CopyPlanetPosToPlanetXX15.asm"
# file opened: ././Universe/Planet/CopyPlanetPosToPlanetXX15.asm
   1++C6F7              PlanetCopyPosToXX15:    ldCopyByte  P_Bnkxhi         ,P_BnkXScaled        ; xlo
   1++C6F7 3A 11 C0    >                        ld       a,(P_Bnkxhi)
   1++C6FA 32 1B C1    >                        ld       (P_BnkXScaled),a
   2++C6FD                                      ldCopyByte  P_Bnkxsgn        ,P_BnkXScaledSign    ; xsg
   2++C6FD 3A 12 C0    >                        ld       a,(P_Bnkxsgn)
   2++C700 32 1C C1    >                        ld       (P_BnkXScaledSign),a
   3++C703                                      ldCopyByte  P_Bnkyhi         ,P_BnkYScaled        ; xlo
   3++C703 3A 14 C0    >                        ld       a,(P_Bnkyhi)
   3++C706 32 1D C1    >                        ld       (P_BnkYScaled),a
   4++C709                                      ldCopyByte  P_Bnkysgn        ,P_BnkYScaledSign    ; xsg
   4++C709 3A 15 C0    >                        ld       a,(P_Bnkysgn)
   4++C70C 32 1E C1    >                        ld       (P_BnkYScaledSign),a
   5++C70F                                      ldCopyByte  P_Bnkzhi         ,P_BnkZScaled        ; xlo
   5++C70F 3A 17 C0    >                        ld       a,(P_Bnkzhi)
   5++C712 32 1F C1    >                        ld       (P_BnkZScaled),a
   6++C715                                      ldCopyByte  P_Bnkzsgn        ,P_BnkZScaledSign    ; xsg
   6++C715 3A 18 C0    >                        ld       a,(P_Bnkzsgn)
   6++C718 32 20 C1    >                        ld       (P_BnkZScaledSign),a
   7++C71B C9                                   ret
   8++C71C
# file closed: ././Universe/Planet/CopyPlanetPosToPlanetXX15.asm
 352+ C71C
 353+ C71C              ; ......................................................                                                         ;;;
 354+ C71C                          INCLUDE "./Universe/Planet/PlanetApplyMyRollAndPitch.asm"
# file opened: ././Universe/Planet/PlanetApplyMyRollAndPitch.asm
   1++C71C
   2++C71C              ;----------------------------------------------------------------------------------------------------------------------------------
   3++C71C              ; Planet version of pitch and roll is a 24 bit calculation 1 bit sign + 23 bit value
   4++C71C              ; Need to write a test routine for roll and pitchs
   5++C71C 00 00 00 00  PlanetAlphaMulX            DS 4
   6++C720 00 00 00 00  PlanetAlphaMulY            DS 4
   7++C724 00 00 00 00  PlanetBetaMulZ             DS 4
   8++C728 00 00 00     PlanetK2                   DS 3
   9++C72B
  10++C72B
  11++C72B              ; Roate around axis
  12++C72B              ; varAxis1 and varAxis2 point to the address of the axis to rotate
  13++C72B              ; so the axis x1 points to roofv  x , y or z
  14++C72B              ;             x2           nosev or sidev  x, y or z
  15++C72B              ;   Axis1 = Axis1 * (1 - 1/512)  + Axis2 / 16
  16++C72B              ;   Axis2 = Axis2 * (1 - 1/512)  - Axis1 / 16
  17++C72B              ; var RAT2 gives direction
  18++C72B              ; for pitch x we come in with Axis1 = roofv_x and Axis2 = nosev_x
  19++C72B              ;-Set up S R -----------------------------------------
  20++C72B              ; optimised we don't deal with sign here just the value of roof axis / 512
  21++C72B 2A 3F 7E     P_MVS5RotateAxis:       ld      hl,(varAxis1)   ; work on roofv axis to get (1- 1/152) * roofv axis
  22++C72E 5E                                   ld      e,(hl)
  23++C72F 23                                   inc     hl
  24++C730 56                                   ld      d,(hl)          ; de = Axis1 (roofv x for pitch x)
  25++C731 EB                                   ex      de,hl           ; hl = Axis1 (roofv x for pitch x)
  26++C732 7C                                   ld      a,h
  27++C733 E6 80                                and     SignOnly8Bit
  28++C735 FD 67                                ld      iyh,a           ; iyh = sign Axis1
  29++C737 7C                                   ld      a,h
  30++C738 E6 7F                                and     SignMask8Bit    ; a = Axis1 (roof hi axis  unsigned)
  31++C73A CB 3F                                srl     a               ; a = Axis1/2
  32++C73C 5F                                   ld      e,a             ;
  33++C73D FD 7C                                ld      a,iyh           ; A = Axis 1 sign
  34++C73F 57                                   ld      d,a             ; de = signed Axis1 / 512
  35++C740 B7                                   or      a               ; clear carry
  36++C741 CD BE 8F                             call    subHLDES15      ; hl = roof axis - (roof axis /512) which in effect is roof * (1-1/512)
  37++C744              ;-Push to stack roof axis - (roofaxis/152)  ----------------------------------------------------------------------------------
  38++C744 E5                                   push    hl              ; save hl on stack PUSH ID 1 (roof axis - roofv aixs /512)
  39++C745 7D                                   ld      a,l
  40++C746 32 72 7F                             ld      (varR),a
  41++C749 7C                                   ld      a,h
  42++C74A 32 73 7F                             ld      (varS),a        ;  RS now equals (1- 1/152) * roofv axis or (roof axis - roofv aixs /512)
  43++C74D              ;-calculate roofv latter half of calc
  44++C74D 2A 41 7E                             ld      hl,(varAxis2)   ; now work on nosev axis to get nosev axis / 16
  45++C750 5E                                   ld      e,(hl)
  46++C751 23                                   inc     hl
  47++C752 56                                   ld      d,(hl)          ; de = value of roof axis
  48++C753 7A                                   ld      a,d
  49++C754 E6 80                                and     SignOnly8Bit
  50++C756 FD 67                                ld      iyh,a           ; save sign
  51++C758 7A                                   ld      a,d
  52++C759 E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
  53++C75B 57                                   ld      d,a             ; de = abs (nosev)
  54++C75C                                      ShiftDERight1
  54++C75C CB 3A       >			   srl d
  54++C75E CB 1B       >			   rr  e
  55++C760                                      ShiftDERight1
  55++C760 CB 3A       >			   srl d
  55++C762 CB 1B       >			   rr  e
  56++C764                                      ShiftDERight1
  56++C764 CB 3A       >			   srl d
  56++C766 CB 1B       >			   rr  e
  57++C768                                      ShiftDERight1           ; de = nosev /16 unsigned
  57++C768 CB 3A       >			   srl d
  57++C76A CB 1B       >			   rr  e
  58++C76C 3A 50 C0                             ld      a,(univRAT2)     ; need to consider direction, so by defautl we use rat2, but flip via sign bit
  59++C76F FD AC                                xor     iyh             ; get the sign back we saveded from DE in so de = nosev axis / 16 signed
  60++C771 E6 80                                and     SignOnly8Bit
  61++C773 B2                                   or      d
  62++C774 57                                   ld      d,a             ; de = nosev /16 signed and ready as if we were doing a + or - based on RAT2
  63++C775              ;;; ld      a,e
  64++C775              ;;;     or      iyh
  65++C775              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
  66++C775              ;-now AP = nosev /16  --------------------------------------------------------------------------------------------------------
  67++C775 E1                                   pop     hl              ; get back RS POP ID 1
  68++C776                  ;ex     de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
  69++C776              ;-now DE = (roofaxis/512) hl - abs(nosevaxis) --------------------------------------------------------------------------------
  70++C776                                      MMUSelectMathsBankedFns
  70++C776 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
  71++C77A CD 52 00                             call    ADDHLDESignedV4 ; do add using hl and de
  72++C77D E5                                   push    hl              ; we use stack to represent var K here now varK = Nosev axis /16 + (1 - 1/512) * roofv axis PUSH ID 2
  73++C77E              ;-push to stack nosev axis + roofvaxis /512  which is what roofv axis will be ------------------------------------------------
  74++C77E              ;-- Set up SR = 1 - 1/512 * nosev-----------------------
  75++C77E 2A 41 7E                             ld      hl,(varAxis2)   ; work on nosev again to get nosev - novesv / 512
  76++C781 5E                                   ld      e,(hl)
  77++C782 23                                   inc     hl
  78++C783 56                                   ld      d,(hl)
  79++C784 EB                                   ex      de,hl
  80++C785 7C                                   ld      a,h
  81++C786 E6 80                                and     $80
  82++C788 FD 67                                ld      iyh,a
  83++C78A 7C                                   ld      a,h
  84++C78B E6 7F                                and     SignMask8Bit    ; a = roof hi axis  unsigned
  85++C78D CB 3F                                srl     a               ; now A = unsigned 15 bit nosev axis hi / 2 (or in effect nosev / 512
  86++C78F 5F                                   ld      e,a
  87++C790 FD 7C                                ld      a,iyh
  88++C792 57                                   ld      d,a
  89++C793 B7                                   or      a               ; clear carry
  90++C794 CD BE 8F                             call    subHLDES15
  91++C797              ;   sbc     hl,de           ; hl = nosev - novesv / 512
  92++C797 E5                                   push    hl              ; save hl on stack  PUSH ID 3
  93++C798 7D                                   ld      a,l
  94++C799 32 69 7E                             ld      (varP),a        ; p = low of resuilt
  95++C79C 7C                                   ld      a,h
  96++C79D E6 7F                                and     SignMask8Bit    ; a = roof hi axis  unsigned
  97++C79F 32 8D 7F                             ld      (varT),a        ; t = high of result
  98++C7A2              ;-- Set up TQ
  99++C7A2 2A 3F 7E                             ld      hl,(varAxis1)   ; now work on roofv axis / 16
 100++C7A5              ;   ld      hl,(varAxis2)   ; work on nosev again
 101++C7A5 5E                                   ld      e,(hl)
 102++C7A6 23                                   inc     hl
 103++C7A7 56                                   ld      d,(hl)
 104++C7A8 7A                                   ld      a,d
 105++C7A9 E6 80                                and     $80
 106++C7AB FD 67                                ld      iyh,a           ; save sign
 107++C7AD 7A                                   ld      a,d
 108++C7AE E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
 109++C7B0 57                                   ld      d,a             ; de = abs (nosev)
 110++C7B1                                      ShiftDERight1
 110++C7B1 CB 3A       >			   srl d
 110++C7B3 CB 1B       >			   rr  e
 111++C7B5                                      ShiftDERight1
 111++C7B5 CB 3A       >			   srl d
 111++C7B7 CB 1B       >			   rr  e
 112++C7B9                                      ShiftDERight1
 112++C7B9 CB 3A       >			   srl d
 112++C7BB CB 1B       >			   rr  e
 113++C7BD                                      ShiftDERight1           ; de = nosev /16 unsigned
 113++C7BD CB 3A       >			   srl d
 113++C7BF CB 1B       >			   rr  e
 114++C7C1 3A 50 C0                             ld      a,(univRAT2)
 115++C7C4 FD AC                                xor     iyh             ; get the sign back in so de = nosev axis / 16 signed
 116++C7C6 E6 80                                and     $80
 117++C7C8 B2                                   or      d
 118++C7C9 57                                   ld      d,a
 119++C7CA              ;;; ld      a,e
 120++C7CA              ;;;     or      iyh
 121++C7CA              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 122++C7CA E1                                   pop     hl              ; get back RS   POP ID 3
 123++C7CB              ;   ex      de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 124++C7CB CD BE 8F                             call    subHLDES15 ; do add using hl and de
 125++C7CE              ;-- Update nosev ---------------------------------------
 126++C7CE EB                                   ex      de,hl           ; save hl to de
 127++C7CF 2A 41 7E                             ld      hl,(varAxis2)
 128++C7D2 73                                   ld      (hl),e
 129++C7D3 23                                   inc     hl
 130++C7D4 72                                   ld      (hl),d          ; copy result into nosev
 131++C7D5              ;-- Update roofv ---------------------------------------
 132++C7D5 D1                                   pop     de              ; get calc saved on stack POP ID 2
 133++C7D6 2A 3F 7E                             ld      hl,(varAxis1)
 134++C7D9 73                                   ld      (hl),e
 135++C7DA 23                                   inc     hl
 136++C7DB 72                                   ld      (hl),d          ; copy result into nosev
 137++C7DC C9                                   ret
 138++C7DD
 139++C7DD 3A 4A C0     ApplyPlanetPitchOnly:   ld      a,(UBnkRotZCounter)
 140++C7E0 FE FF                                cp      $FF
 141++C7E2 21 2B C0     .PitchSAxes:            ld	    hl,P_BnkrotmatRoofvX; UBnkrotmatSidevY
 142++C7E5 22 3F 7E                             ld	    (varAxis1),hl
 143++C7E8 21 31 C0                             ld	    hl,P_BnkrotmatNosevX; UBnkrotmatSidevZ
 144++C7EB 22 41 7E                             ld	    (varAxis2),hl
 145++C7EE CD 2B C7                             call    P_MVS5RotateAxis
 146++C7F1 21 2D C0     .PitchRAxes:            ld	    hl,P_BnkrotmatRoofvY
 147++C7F4 22 3F 7E                             ld	    (varAxis1),hl
 148++C7F7 21 33 C0                             ld	    hl,P_BnkrotmatNosevY;UBnkrotmatRoofvZ
 149++C7FA 22 41 7E                             ld	    (varAxis2),hl
 150++C7FD CD 2B C7                             call    P_MVS5RotateAxis
 151++C800 21 2F C0     .PitchNAxes:            ld	    hl,P_BnkrotmatRoofvZ; UBnkrotmatNosevY
 152++C803 22 3F 7E                             ld	    (varAxis1),hl
 153++C806 21 35 C0                             ld	    hl,P_BnkrotmatNosevZ
 154++C809 22 41 7E                             ld	    (varAxis2),hl
 155++C80C CD 2B C7                             call    P_MVS5RotateAxis
 156++C80F C9                                   ret
 157++C810
 158++C810 3A 4A C0     ApplyPlanetRollAndPitch:ld      a,(UBnkRotZCounter)
 159++C813 FE FF                                cp      $FF
 160++C815 21 2B C0     .PitchSAxes:            ld	    hl,P_BnkrotmatRoofvX; UBnkrotmatSidevY
 161++C818 22 3F 7E                             ld	    (varAxis1),hl
 162++C81B 21 31 C0                             ld	    hl,P_BnkrotmatNosevX; UBnkrotmatSidevZ
 163++C81E 22 41 7E                             ld	    (varAxis2),hl
 164++C821 CD 2B C7                             call    P_MVS5RotateAxis
 165++C824 21 2D C0     .PitchRAxes:            ld	    hl,P_BnkrotmatRoofvY
 166++C827 22 3F 7E                             ld	    (varAxis1),hl
 167++C82A 21 33 C0                             ld	    hl,P_BnkrotmatNosevY;UBnkrotmatRoofvZ
 168++C82D 22 41 7E                             ld	    (varAxis2),hl
 169++C830 CD 2B C7                             call    P_MVS5RotateAxis
 170++C833 21 2F C0     .PitchNAxes:            ld	    hl,P_BnkrotmatRoofvZ; UBnkrotmatNosevY
 171++C836 22 3F 7E                             ld	    (varAxis1),hl
 172++C839 21 35 C0                             ld	    hl,P_BnkrotmatNosevZ
 173++C83C 22 41 7E                             ld	    (varAxis2),hl
 174++C83F CD 2B C7                             call    P_MVS5RotateAxis
 175++C842              ApplyPlanetRollOnly:
 176++C842 3A FC C0     .ProcessRoll:           ld      a,(P_BnkRotXCounter)
 177++C845 FE FF                                cp      $FF
 178++C847 21 2B C0     .RollSAxis:           	ld	    hl,P_BnkrotmatRoofvX; UBnkrotmatSidevX
 179++C84A 22 3F 7E                             ld	    (varAxis1),hl
 180++C84D 21 25 C0                             ld	    hl,P_BnkrotmatSidevX; UBnkrotmatSidevY
 181++C850 22 41 7E                             ld	    (varAxis2),hl
 182++C853 CD 2B C7                             call    P_MVS5RotateAxis
 183++C856 21 2D C0     .RollRAxis:             ld	    hl,P_BnkrotmatRoofvY; UBnkrotmatRoofvX
 184++C859 22 3F 7E                             ld	    (varAxis1),hl
 185++C85C 21 27 C0                             ld	    hl,P_BnkrotmatSidevY; UBnkrotmatRoofvY
 186++C85F 22 41 7E                             ld	    (varAxis2),hl
 187++C862 CD 2B C7                             call    P_MVS5RotateAxis
 188++C865 21 2F C0     .RollNAxis:             ld	    hl,P_BnkrotmatRoofvZ; UBnkrotmatNosevX
 189++C868 22 3F 7E                             ld	    (varAxis1),hl
 190++C86B 21 29 C0                             ld	    hl,P_BnkrotmatSidevZ; UBnkrotmatNosevY
 191++C86E 22 41 7E                             ld	    (varAxis2),hl
 192++C871 CD 2B C7                             call    P_MVS5RotateAxis
 193++C874 C9                                   ret
 194++C875
 195++C875
 196++C875 3A 8A 7E     PlanetApplyMyRollAndPitch: ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
 197++C878 21 74 7E                             ld      hl,BETA
 198++C87B B6                                   or      (hl)
 199++C87C E6 7F                                and     SignMask8Bit
 200++C87E CA 3F C9                             jp      z,.NoRotation
 201++C881 3A 8A 7E     .CalcAlphaMulX:         ld      a,(ALPHA)                   ; get roll magnitude
 202++C884 EE 80                                xor     SignOnly8Bit                ; d = -alpha (Q value)
 203++C886 57                                   ld      d,a                         ; .
 204++C887 3A 10 C0                             ld      a,(P_Bnkxlo)                 ; HLE = x sgn, hi, lo
 205++C88A 5F                                   ld      e,a                         ; .
 206++C88B 2A 11 C0                             ld      hl,(P_Bnkxhi)                ; .
 207++C88E CD FA 91                             call    mulHLEbyDSigned             ; DELC = x * -alpha, so DEL = X * -alpha / 256 where d = sign byte
 208++C891              .SaveAlphaMulX:         ;ld      a,c                         ; a = upper byte of results which will have the sign               ONLY NEEDED FOR DEBUGGING TEST
 209++C891                                      ;ld      (PlanetAlphaMulX),a            ; save sign from result, ELC holds actual result                   ONLY NEEDED FOR DEBUGGING TEST
 210++C891 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
 211++C892 32 1D C7                             ld      (PlanetAlphaMulX+1),a
 212++C895 7B                                   ld      a,e
 213++C896 32 1E C7                             ld      (PlanetAlphaMulX+2),a
 214++C899 7A                                   ld      a,d
 215++C89A 32 1F C7                             ld      (PlanetAlphaMulX+3),a          ; we actually only want X1 X2 X3 later as its /256
 216++C89D ED 5B 14 C0  .CalcK2:                ld      de,(P_Bnkyhi)                ; DEL = Y
 217++C8A1 3A 13 C0                             ld      a,(P_Bnkylo)                 ; .
 218++C8A4 6F                                   ld      l,a                         ; .
 219++C8A5 ED 4B 1E C7                          ld      bc,(PlanetAlphaMulX+2)         ; BCH = Y sgn, hi, lo, we loose the C from result
 220++C8A9 3A 1D C7                             ld      a,(PlanetAlphaMulX+1)          ; Deal with sign in byte 4
 221++C8AC 67                                   ld      h,a                         ; .
 222++C8AD                                      MMUSelectMathsBankedFns
 222++C8AD ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 223++C8B1 CD AF 00                             call    AddBCHtoDELsigned           ; DEL = y - (alpha * x)
 224++C8B4 7D                                   ld      a,l                         ; K2  = DEA = DEL = y - (alpha * x)
 225++C8B5 32 28 C7                             ld      (PlanetK2),a                   ; we also need to save l for teh beta k2 calc
 226++C8B8 ED 53 29 C7                          ld      (PlanetK2+1),de                ;
 227++C8BC EB           .CalcBetaMulK2:         ex      de,hl                       ; HLE == DEA
 228++C8BD 5F                                   ld      e,a                         ; .
 229++C8BE 3A 74 7E                             ld      a,(BETA)                    ; D = BETA
 230++C8C1 57                                   ld      d,a                         ; .
 231++C8C2 CD FA 91                             call    mulHLEbyDSigned             ; DELC = Beta * K2, DEL = Beta/256 * K2
 232++C8C5 ED 4B 17 C0  .CalcZ:                 ld      bc,(P_Bnkzhi)                ; BCH = z
 233++C8C9 3A 16 C0                             ld      a,(P_Bnkzlo)                 ;
 234++C8CC 67                                   ld      h,a                         ;
 235++C8CD                                      MMUSelectMathsBankedFns
 235++C8CD ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 236++C8D1 CD AF 00                             call    AddBCHtoDELsigned           ; DEL still = Beta * K2 so its z + Beta * K2
 237++C8D4 ED 53 17 C0                          ld      (P_Bnkzhi),de                ; z = resuklt
 238++C8D8 7D                                   ld      a,l                         ; .
 239++C8D9 32 16 C0                             ld      (P_Bnkzlo),a                 ; .
 240++C8DC 3A 74 7E     .CalcBetaZ:             ld      a,(BETA)
 241++C8DF EE 80                                xor     SignOnly8Bit                ; d = -beta (Q value)
 242++C8E1 57                                   ld      d,a                         ; .
 243++C8E2 3A 16 C0                             ld      a,(P_Bnkzlo)                 ; HLE = z
 244++C8E5 5F                                   ld      e,a                         ; .
 245++C8E6 2A 17 C0                             ld      hl,(P_Bnkzhi)                ; .
 246++C8E9 CD FA 91                             call    mulHLEbyDSigned             ; DELC = z * -beta, so DEL = Z * -beta / 256 where d = sign byte
 247++C8EC              .SaveAlphaMulZ:         ;ld      a,c                         ; a = upper byte of results which will have the sign             ONLY NEEDED FOR DEBUGGING TEST
 248++C8EC                                      ;ld      (PlanetBetaMulZ),a             ; save sign from result, ELC holds actual result                 ONLY NEEDED FOR DEBUGGING TEST
 249++C8EC                                      ;ld      a,l                         ; also save all of alpha *X as we will need it later             ONLY NEEDED FOR DEBUGGING TEST
 250++C8EC                                      ;ld      (PlanetBetaMulZ+1),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
 251++C8EC                                      ;ld      a,e                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
 252++C8EC                                      ;ld      (PlanetBetaMulZ+2),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
 253++C8EC                                      ;ld      a,d                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
 254++C8EC                                      ;ld      (PlanetBetaMulZ+3),a           ; we actually only want X1 X2 X3 later as its /256               ONLY NEEDED FOR DEBUGGING TEST
 255++C8EC 42 4B        .CalcY:                 ld      bc,de                       ; bch = - Beta * z
 256++C8EE 65                                   ld      h,l
 257++C8EF ED 5B 29 C7                          ld      de,(PlanetK2+1)                ; DEL = k2
 258++C8F3 3A 28 C7                             ld      a,(PlanetK2)
 259++C8F6 6F                                   ld      l,a
 260++C8F7                                      MMUSelectMathsBankedFns
 260++C8F7 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 261++C8FB CD AF 00                             call    AddBCHtoDELsigned           ; DEL = K2 - Beta * Z
 262++C8FE ED 53 14 C0                          ld      (P_Bnkyhi),de                ; y = DEL = K2 - Beta * Z
 263++C902 7D                                   ld      a,l                         ; .
 264++C903 32 13 C0                             ld      (P_Bnkylo),a                 ; .
 265++C906 3A 8A 7E     .CalcAlphaMulY:         ld      a,(ALPHA)
 266++C909 57                                   ld      d,a                         ; d = alpha (Q value)
 267++C90A 3A 13 C0                             ld      a,(P_Bnkylo)                 ; HLE = x sgn, hi, lo
 268++C90D 5F                                   ld      e,a                         ; .
 269++C90E 2A 14 C0                             ld      hl,(P_Bnkyhi)                ; .
 270++C911 CD FA 91                             call    mulHLEbyDSigned             ; DELC = y * alpha, so DEL = Y * alpha / 256 where d = sign byte
 271++C914 79           .SaveAlphaMulY:         ld      a,c                         ; a = upper byte of results which will have the sign
 272++C915 32 20 C7                             ld      (PlanetAlphaMulY),a            ; save sign from result, ELC holds actual result
 273++C918 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
 274++C919 32 21 C7                             ld      (PlanetAlphaMulY+1),a
 275++C91C 7B                                   ld      a,e
 276++C91D 32 22 C7                             ld      (PlanetAlphaMulY+2),a
 277++C920 7A                                   ld      a,d
 278++C921 32 23 C7                             ld      (PlanetAlphaMulY+3),a
 279++C924 42 4B        .CalcxPLusAlphaY:       ld      bc,de                        ; BCH = Y sgn, hi, lo, we loose the C from result Deal with sign in byte 4
 280++C926 65                                   ld      h,l                         ; .
 281++C927 ED 5B 11 C0                          ld      de,(P_Bnkxhi)                ; DEL = Y
 282++C92B 3A 10 C0                             ld      a,(P_Bnkxlo)                 ; .
 283++C92E 6F                                   ld      l,a                         ; .
 284++C92F                                      MMUSelectMathsBankedFns
 284++C92F ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 285++C933 CD AF 00                             call    AddBCHtoDELsigned           ; DEL = x + alpha * Y
 286++C936 7A           .SaveResult1:           ld      a,d                         ; Result 1 (X) = AHL + DEL
 287++C937 63                                   ld      h,e                         ;
 288++C938 32 12 C0     .CopyResultTo2:         ld      (P_Bnkxlo+2),a               ; .
 289++C93B 22 10 C0                             ld      (P_Bnkxlo) ,hl               ; .
 290++C93E C9                                   ret
 291++C93F 3A 6B 7F     .NoRotation:            ld      a,(DELTA)                   ; BCH = - Delta
 292++C942                                      ReturnIfAIsZero
 292++C942 A7          >                        and     a
 292++C943 C8          >                        ret     z
 293++C944 0E 00                                ld      c,0                         ;
 294++C946 67                                   ld      h,a                         ;
 295++C947 06 80                                ld      b,$80                       ;
 296++C949 ED 5B 17 C0                          ld      de,(P_Bnkzhi)                ; DEL = z position
 297++C94D 3A 16 C0                             ld      a,(P_Bnkzlo)                 ; .
 298++C950 6F                                   ld      l,a                         ; .
 299++C951                                      MMUSelectMathsBankedFns
 299++C951 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 300++C955 CD AF 00                             call    AddBCHtoDELsigned           ; update speed
 301++C958 ED 53 17 C0                          ld      (P_Bnkzhi),DE                ; write back to zpos
 302++C95C 7D                                   ld      a,l
 303++C95D 32 16 C0                             ld      (P_Bnkzlo),a                ;
 304++C960 C9                                   ret
 305++C961
# file closed: ././Universe/Planet/PlanetApplyMyRollAndPitch.asm
 355+ C961
 356+ C961 00           PlanetOnScreen          DB 0
 357+ C962 00 00        PlanetScrnX             DW  0       ; signed
 358+ C964 00 00        PlanetScrnY             DW  0       ; signed
 359+ C966              ;PlanetRadius            DW  0       ; unsigned
 360+ C966              ; draw circle
 361+ C966
 362+ C966              ;
 363+ C966              ;DIVD3B2 K(3 2 1 0) = (A P+1 P) / (z_sign z_hi z_lo)
 364+ C966
 365+ C966 00 00 00 00  PlanetVarK                 DS 4
 366+ C96A 00 00 00     PlanetVarP                 DS 3
 367+ C96D 00           PlanetVarQ                 DS 1
 368+ C96E 00           PlanetVarR                 DS 1
 369+ C96F 00           PlanetVarS                 DS 1
 370+ C970 00           PlanetVarT                 DS 1
 371+ C971
 372+ C971
 373+ C971 DD 4E 00     MaximiseHLVector:       ld      c,(ix+0)
 374+ C974 DD 46 01                             ld      b,(ix+1)
 375+ C977 DD 5E 02                             ld      e,(ix+2)
 376+ C97A DD 56 03                             ld      d,(ix+3)
 377+ C97D DD 6E 04                             ld      l,(ix+4)
 378+ C980 DD 66 05                             ld      h,(ix+5)
 379+ C983              MaxShiftOutSign:        ShiftBCLeft1
 379+ C983 CB 21       >			   sla c
 379+ C985 CB 10       >			   rl  b
 380+ C987                                      ShiftDELeft1
 380+ C987 CB 23       >			   sla e
 380+ C989 CB 12       >			   rl  d
 381+ C98B                                      ShiftHLLeft1
 381+ C98B CB 25       >			   sla l
 381+ C98D CB 14       >			   rl  h
 382+ C98F 78           MaximiseIXVector:       ld      a,b                 ; Now loop round until bit 7 is populated
 383+ C990 B2                                   or      d
 384+ C991 B3                                   or      e
 385+ C992 E6 80                                and     $80
 386+ C994 CA 83 C9                             jp      z,MaxShiftOutSign
 387+ C997              .MakeSpaceForSign:      ShiftBCRight1               ; Now go back 1 so sign bit is clear
 387+ C997 CB 38       >			   srl b
 387+ C999 CB 19       >			   rr  c
 388+ C99B                                      ShiftDERight1
 388+ C99B CB 3A       >			   srl d
 388+ C99D CB 1B       >			   rr  e
 389+ C99F                                      ShiftHLRight1
 389+ C99F CB 3C       >			   srl h
 389+ C9A1 CB 1D       >			   rr  l
 390+ C9A3 DD 7E 00                             ld      a,(ix+0)
 391+ C9A6 E6 80                                and     SignOnly8Bit
 392+ C9A8 B0                                   or      b
 393+ C9A9 DD 7E 01                             ld      a,(ix+1)
 394+ C9AC E6 80                                and     SignOnly8Bit
 395+ C9AE B2                                   or      d
 396+ C9AF DD 7E 03                             ld      a,(ix+3)
 397+ C9B2 E6 80                                and     SignOnly8Bit
 398+ C9B4 B3                                   or      e
 399+ C9B5 DD 71 00                             ld      (ix+0),c
 400+ C9B8 DD 70 01                             ld      (ix+1),b
 401+ C9BB DD 73 02                             ld      (ix+2),e
 402+ C9BE DD 72 03                             ld      (ix+3),d
 403+ C9C1 DD 74 04                             ld      (ix+4),h
 404+ C9C4 DD 75 05                             ld      (ix+5),l
 405+ C9C7 C9                                   ret
 406+ C9C8
 407+ C9C8
 408+ C9C8              ; Subroutine: SPS1 (Docked) Calculate the vector to the planet and store it in XX15
 409+ C9C8              ; calls SPS3 and falls into TAS2
 410+ C9C8
 411+ C9C8
 412+ C9C8 CD F7 C6     VectorToPlanet:         call    PlanetCopyPosToXX15 ; Perform all of SPS3
 413+ C9CB DD 21 1B C1                          ld      ix,P_XX15
 414+ C9CF CD 8F C9                             call    MaximiseIXVector
 415+ C9D2 CD 72 99                             call    NormaliseIXVector
 416+ C9D5
 417+ C9D5
 418+ C9D5              ;;INWORK
 419+ C9D5              ;;INWORK Main loop
 420+ C9D5              ;;INWORK
 421+ C9D5              ;;INWORK Subroutine: Main flight loop (Part 14 of 16) (Flight)
 422+ C9D5              ;;INWORK
 423+ C9D5              ;;INWORK Spawn a space station if we are close enough to the planet
 424+ C9D5              ;;INWORK
 425+ C9D5              ;;INWORK Main loop
 426+ C9D5              ;;INWORK
 427+ C9D5              ;;INWORK Subroutine: Main flight loop (Part 15 of 16) (Flight)
 428+ C9D5              ;;INWORK
 429+ C9D5              ;;INWORK Perform altitude checks with the planet and sun and process fuel scooping if appropriate
 430+ C9D5              ;;INWORK
 431+ C9D5              ;;INWORK Maths (Geometry)
 432+ C9D5              ;;INWORK
 433+ C9D5              ;;INWORK Subroutine: MAS2 (Flight)
 434+ C9D5              ;;INWORK
 435+ C9D5              ;;INWORK Calculate a cap on the maximum distance to the planet or sun
 436+ C9D5              ;;INWORK
 437+ C9D5              ;;INWORK Universe
 438+ C9D5              ;;INWORK
 439+ C9D5              ;;INWORK Subroutine: SOS1 (Flight)
 440+ C9D5              ;;INWORK
 441+ C9D5              ;;INWORK Update the missile indicators, set up the planet data block
 442+ C9D5              ;;INWORK
 443+ C9D5              ;;INWORK
 444+ C9D5              ;;INWORK Dashboard
 445+ C9D5              ;;INWORK
 446+ C9D5              ;;INWORK Subroutine: SP2 (Flight)
 447+ C9D5              ;;INWORK
 448+ C9D5              ;;INWORK Draw a dot on the compass, given the planet/station vector
 449+ C9D5
 450+ C9D5              ; Drawing planets Subroutine: PL2 (Flight) Remove the planet or sun from the screen
 451+ C9D5              ;                             PLANET (Flight) Draw the planet or sun
 452+ C9D5              ;                             PL9 (Part 1 of 3) (Flight) Draw the planet, with either an equator and meridian, or a crater
 453+ C9D5              ;                             PL9 (Part 2 of 3) (Flight) Draw the planet's equator and meridian
 454+ C9D5              ;                             PL9 (Part 3 of 3) (Flight) Draw the planet's crater
 455+ C9D5              ;                             PLS1 (Flight)  Calculate (Y A) = nosev_x / z
 456+ C9D5              ;                             PLS2 (Flight) Draw a half-ellipse
 457+ C9D5              ;                             PLS22 (Flight) Draw an ellipse or half-ellipse
 458+ C9D5
 459+ C9D5
 460+ C9D5              ; Drawing circles Subroutine: CIRCLE (Flight) Draw a circle for the planet
 461+ C9D5              ;                             CIRCLE2 (Flight) Draw a circle (for the planet or chart)
 462+ C9D5              ;                             WPLS2 (Flight) Remove the planet from the screen
 463+ C9D5              ;                             WP1 (Flight) Reset the ball line heap
 464+ C9D5              ; Drawing planets PL21 (Flight) Return from a planet/sun-drawing routine with a failure flag
 465+ C9D5              ;                 PLS3 (Flight) Calculate (Y A P) = 222 * roofv_x / z
 466+ C9D5              ;                 PLS4 (Flight) Calculate CNT2 = arctan(P / A) / 4
 467+ C9D5              ;                 PLS5 (Flight) Calculate roofv_x / z and roofv_y / z
 468+ C9D5              ;                 PLS6 (Flight) Calculate (X K) = (A P) / (z_sign z_hi z_lo)
 469+ C9D5              ; SPS1 (Flight) Calculate the vector to the planet and store it in XX15
 470+ C9D5              ; MV40 rate planet by our pitch
 471+ C9D5              ;
 472+ C9D5              ;look at PL9
 473+ C9D5
 474+ C9D5
 475+ C9D5              ; Optimisation
 476+ C9D5              ; if a <> 0
 477+ C9D5              ;       divide AH by CD
 478+ C9D5              ; if h <> 0
 479+ C9D5              ;      if c <> 0 return 0
 480+ C9D5              ;      else
 481+ C9D5              ;        divide HL by DE
 482+ C9D5              ; if l <>0
 483+ C9D5              ;      if c or d <> 0 return 0
 484+ C9D5              ;      else
 485+ C9D5              ;        divide l by e
 486+ C9D5              ;
 487+ C9D5 47           PlanetAHLequAHLDivCDE:  ld      b,a                         ; save a reg
 488+ C9D6 79                                   ld      a,c                         ; check for divide by zero
 489+ C9D7 B2                                   or      d                           ; .
 490+ C9D8 B3                                   or      e                           ; .
 491+ C9D9                                      JumpIfZero      .divideByZero       ; .
 491+ C9D9 CA F2 C9    >                        jp	z,.divideByZero
 492+ C9DC 78                                   ld      a,b                         ; get a back
 493+ C9DD                                      JumpIfAIsNotZero    .divideAHLbyCDE
 493+ C9DD A7          >                        and     a
 493+ C9DE C2 FA C9    >                        jp	    nz,.divideAHLbyCDE
 494+ C9E1 7C           .AIsZero:               ld      a,h
 495+ C9E2                                      JumpIfAIsNotZero    .divideHLbyDE
 495+ C9E2 A7          >                        and     a
 495+ C9E3 C2 01 CA    >                        jp	    nz,.divideHLbyDE
 496+ C9E6 7D           .HIsZero:               ld      a,l
 497+ C9E7                                      JumpIfAIsNotZero    .divideLbyE
 497+ C9E7 A7          >                        and     a
 497+ C9E8 C2 10 CA    >                        jp	    nz,.divideLbyE
 498+ C9EB              .resultIsZero:          ZeroA
 498+ C9EB AF          >                        xor a
 499+ C9EC 67                                   ld      h,a                        ; result is zero so set hlde
 500+ C9ED 6F                                   ld      l,a                        ; result is zero so set hlde
 501+ C9EE 54 5D                                ld      de,hl
 502+ C9F0                                      ClearCarryFlag
 502+ C9F0 B7          >                        or a
 503+ C9F1 C9                                   ret
 504+ C9F2 3E FF        .divideByZero:          ld      a,$FF
 505+ C9F4 67                                   ld      h,a
 506+ C9F5 6F                                   ld      l,a
 507+ C9F6 54 5D                                ld      de,hl
 508+ C9F8                                      SetCarryFlag
 508+ C9F8 37          >                        scf
 509+ C9F9 C9                                   ret
 510+ C9FA              ; AHL = ahl/cde, this could be a genuine 24 bit divide
 511+ C9FA              ; if AHL is large and cde small then the value will be big so will be off screen so we can risk 16 bit divide
 512+ C9FA CD 41 90     .divideAHLbyCDE:        call    Div24by24
 513+ C9FD EB                                   ex      hl,de                         ; ahl is result
 514+ C9FE 79                                   ld      a,c                           ; ahl is result
 515+ C9FF                                      ClearCarryFlag
 515+ C9FF B7          >                        or a
 516+ CA00 C9                                   ret
 517+ CA01              ; AHL = 0hl/0de as A is zero
 518+ CA01 79           .divideHLbyDE:          ld      a,c                         ;'if c = 0 then result must be zero
 519+ CA02                                      JumpIfAIsNotZero   .resultIsZero
 519+ CA02 A7          >                        and     a
 519+ CA03 C2 EB C9    >                        jp	    nz,.resultIsZero
 520+ CA06 44 4D                                ld      bc,hl
 521+ CA08 CD 6C 96                             call    BC_Div_DE                   ; BC = HL/DE
 522+ CA0B 60 69                                ld      hl,bc
 523+ CA0D                                      ZeroA                               ; so we can set A to Zero
 523+ CA0D AF          >                        xor a
 524+ CA0E                                      ClearCarryFlag
 524+ CA0E B7          >                        or a
 525+ CA0F C9                                   ret
 526+ CA10              ; AHL = 00l/00e as A and H are zero
 527+ CA10 79           .divideLbyE:            ld      a,c                         ; if d = 0 then result must be zero
 528+ CA11 B2                                   or      d
 529+ CA12                                      JumpIfAIsNotZero   .resultIsZero
 529+ CA12 A7          >                        and     a
 529+ CA13 C2 EB C9    >                        jp	    nz,.resultIsZero
 530+ CA16 4B                                   ld      c,e
 531+ CA17 5D                                   ld      e,l
 532+ CA18 CD 2E 96                             call    E_Div_C
 533+ CA1B 6F                                   ld      l,a
 534+ CA1C                                      ZeroA
 534+ CA1C AF          >                        xor a
 535+ CA1D 67                                   ld      h,a
 536+ CA1E                                      ClearCarryFlag
 536+ CA1E B7          >                        or a
 537+ CA1F C9                                   ret
 538+ CA20
 539+ CA20              ; Project XY to screen location
 540+ CA20 DD 26 00     ProjectPlanet:          ld      ixh,0
 541+ CA23 2A 10 C0                             ld      hl,(P_Bnkxlo)
 542+ CA26 3A 12 C0                             ld      a,(P_Bnkxsgn)
 543+ CA29 CD 3E CA                             call    PlanetProcessVertex         ; hl = PixelCentreY + (Y / Z)*-1 (as its 0 = top of screen)
 544+ CA2C 22 36 C1                             ld      (P_centreX),hl
 545+ CA2F DD 24                                inc     ixh
 546+ CA31 2A 13 C0                             ld      hl,(P_Bnkylo)
 547+ CA34 3A 15 C0                             ld      a,(P_Bnkysgn)
 548+ CA37 CD 3E CA                             call    PlanetProcessVertex         ; hl = PixelCentreY + (Y / Z)*-1 (as its 0 = top of screen)
 549+ CA3A 22 3C C1                             ld      (P_centreY),hl
 550+ CA3D C9                                   ret
 551+ CA3E
 552+ CA3E              ; PlanetProcessVertex AHL = X or Y position (sign in A)
 553+ CA3E              ;                     fetches z as this used in both calcs
 554+ CA3E 47           PlanetProcessVertex:    ld      b,a                         ; save sign/high byte
 555+ CA3F ED 5B 16 C0  .PlanetProjectToEye:    ld      de,(P_Bnkzlo)               ; B H L   = X or Y
 556+ CA43 3A 18 C0                             ld      a,(P_Bnkzsgn)               ; IYH D E = z
 557+ CA46 FD 67                                ld      iyh,a                       ; save sign
 558+ CA48                                      ClearSignBitA                       ; A D E   = | z |
 558+ CA48 E6 7F       >                        and     SignMask8Bit
 559+ CA4A                                      ; Addeed as it neds to be AHL/0CD to force * 256 and get correct screen position on scaling
 560+ CA4A 5A                                   ld      e,d                         ; C D E   = A D E * 256, i.e. 0 A D
 561+ CA4B 57                                   ld      d,a                         ; .
 562+ CA4C 0E 00                                ld      c,0                         ; .
 563+ CA4E                                      ; added above to correct positioning as in reality its X/(Z/256) to get +-256 rather than +- 1
 564+ CA4E 78                                   ld      a,b                         ; copy X or Y sign into iyl
 565+ CA4F FD 6F                                ld      iyl,a                       ; .
 566+ CA51                                      ClearSignBitA                       ; A H L = |X| (or |Y|)
 566+ CA51 E6 7F       >                        and     SignMask8Bit
 567+ CA53 CD D5 C9                             call PlanetAHLequAHLDivCDE          ; AHL = AHL/CDE unsigned
 568+ CA56 DA B5 CA                             jp      c,.IsOffScreen              ; carry flag indicates failure
 569+ CA59              .CheckPosOnScreen:      JumpIfAIsNotZero .IsOffScreen       ; if A has a value then its way too large regardless of sign
 569+ CA59 A7          >                        and     a
 569+ CA5A C2 B5 CA    >                        jp	    nz,.IsOffScreen
 570+ CA5D                                      JumpOnLeadSignSet h, .IsOffScreen   ; or bit 7 set of h
 570+ CA5D 7C          >                        ld      a,h
 570+ CA5E E6 80       >                        and     SignOnly8Bit
 570+ CA60 C2 B5 CA    >                        jp      nz,.IsOffScreen
 571+ CA63 DD 7C        .CheckXorY:             ld      a,ixh
 572+ CA65                                      JumpIfAIsNotZero .ProcessYCoord
 572+ CA65 A7          >                        and     a
 572+ CA66 C2 8C CA    >                        jp	    nz,.ProcessYCoord
 573+ CA69              ; Handle X Coord offset
 574+ CA69 FD 7C        .ProcessXCoord:         ld      a,iyh                       ; determine if its + or - value of AHL/CDE
 575+ CA6B FD AD                                xor     iyl
 576+ CA6D E6 80                                and     $80
 577+ CA6F CA 78 CA                             jp      z,.ProcessXPositive
 578+ CA72              .ProcessXNegative:      macronegate16hl
 578+ CA72 AF          >					xor 	a
 578+ CA73 95          >					sub 	l
 578+ CA74 6F          >					ld 		l,a
 578+ CA75 9F          >					sbc 	a,a
 578+ CA76 94          >					sub 	h
 578+ CA77 67          >					ld 		h,a
 579+ CA78 11 80 00     .ProcessXPositive:      ld      de,ViewCenterX
 580+ CA7B                                      ClearCarryFlag
 580+ CA7B B7          >                        or a
 581+ CA7C ED 5A                                adc     hl,de                       ; now X position is CenterX+ (X / Z) in 2's c
 582+ CA7E 54 5D                                ld      de,hl                       ; set de to | hl for +/- 1024 check
 583+ CA80 F2 AD CA                             jp      p,.CheckBoundaries          ; .
 584+ CA83                                      macronegate16de                     ; .
 584+ CA83 AF          >					xor 	a
 584+ CA84 93          >                    sub 	e
 584+ CA85 5F          >                    ld 		e,a
 584+ CA86 9F          >                    sbc 	a,a
 584+ CA87 92          >                    sub 	d
 584+ CA88 57          >                    ld 		d,a
 585+ CA89 C3 AD CA                             jp      .CheckBoundaries            ; .
 586+ CA8C              ; Handle Y Coord offset
 587+ CA8C FD 7C        .ProcessYCoord:         ld      a,iyh
 588+ CA8E FD AD                                xor     iyl
 589+ CA90 E6 80                                and     $80
 590+ CA92 CA 9B CA                             jp      z,.ProcessYPositive
 591+ CA95              .ProcessYNegative:      macronegate16hl
 591+ CA95 AF          >					xor 	a
 591+ CA96 95          >					sub 	l
 591+ CA97 6F          >					ld 		l,a
 591+ CA98 9F          >					sbc 	a,a
 591+ CA99 94          >					sub 	h
 591+ CA9A 67          >					ld 		h,a
 592+ CA9B 11 60 00     .ProcessYPositive:      ld      de,ViewCenterY              ; set hl to center Y and de to 2s'c Y/Z
 593+ CA9E EB                                   ex      de,hl
 594+ CA9F                                      ClearCarryFlag
 594+ CA9F B7          >                        or a
 595+ CAA0 ED 52                                sbc     hl,de                       ; now HL  position is CenterY - (Y / Z) in 2's c
 596+ CAA2 54 5D                                ld      de,hl                       ;
 597+ CAA4 F2 AD CA                             jp      p,.CheckBoundaries          ; .
 598+ CAA7                                      macronegate16de                     ; load DE with | result to simplify +-1024 check|
 598+ CAA7 AF          >					xor 	a
 598+ CAA8 93          >                    sub 	e
 598+ CAA9 5F          >                    ld 		e,a
 598+ CAAA 9F          >                    sbc 	a,a
 598+ CAAB 92          >                    sub 	d
 598+ CAAC 57          >                    ld 		d,a
 599+ CAAD 7A           .CheckBoundaries:       ld      a,d
 600+ CAAE                                      JumpIfAGTENusng 4, .IsOffScreen     ; if |position| > 1024 then way to large
 600+ CAAE FE 04       >                        cp     4
 600+ CAB0 D2 B5 CA    >                        jp		nc,.IsOffScreen
 601+ CAB3              .calculatedVert:        ClearCarryFlag
 601+ CAB3 B7          >                        or a
 602+ CAB4 C9                                   ret
 603+ CAB5 21 FF 7F     .IsOffScreen:           ld      hl,$7FFF
 604+ CAB8 FD 7C                                ld      a,iyh
 605+ CABA FD AD                                xor     iyl
 606+ CABC                                      SignBitOnlyA
 606+ CABC E6 80       >                        and     SignOnly8Bit
 607+ CABE 28 02                                jr      z,.calculatedOffScreen
 608+ CAC0 23                                   inc     hl                          ; set hl to $8001 i.e. -32768
 609+ CAC1 23                                   inc     hl                          ; .
 610+ CAC2              .calculatedOffScreen:   SetCarryFlag
 610+ CAC2 37          >                        scf
 611+ CAC3 C9                                   ret
 612+ CAC4
 613+ CAC4
 614+ CAC4              ; .........................................................................................................................
 615+ CAC4              ; we only hit this if z is positive so we can ignore signs
 616+ CAC4              ; calculates 24576/z, maxes at 248
 617+ CAC4 ED 4B 16 C0  PlanetCalculateRadius:  ld      bc,(P_Bnkzlo)                ; DBC = z position
 618+ CAC8 3A 18 C0                             ld      a,(P_Bnkzsgn)                ;
 619+ CACB 57                                   ld      d,a                         ;
 620+ CACC 21 00 60                             ld      hl,$6000  ; was hl          ; planet radius at Z = 1 006000
 621+ CACF CD 0C 95                             call    Div16by24usgn               ; radius = HL/DBC = 24576 / distance z
 622+ CAD2 B4                                   or      h                           ; if A or H are not 0 then max Radius
 623+ CAD3                                      JumpIfAIsZero  .SaveRadius
 623+ CAD3 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 623+ CAD4 CA DA CA    >                        jp	    z, .SaveRadius
 624+ CAD7 21 F8 00     .MaxRadius:             ld      hl,248                      ; set radius to 248 as maxed out
 625+ CADA 7D           .SaveRadius:            ld      a,l                         ; l = resultant radius
 626+ CADB F6 01                                or      1                           ; at least radius 1 (never even so need to test)
 627+ CADD                                      DISPLAY "DONE - Eliiminate the check to see if planet radius is > 255 as its already fixed in Planet Calculate Radius"
 628+ CADD                                      ;ld      l,a                        ;
 629+ CADD                                      ;ld      (P_Radius),hl              ; save a copy of radius now for later
 630+ CADD 32 E7 C0                             ld      (P_Radius),a
 631+ CAE0 5F                                   ld      e,a                         ; as later code expects it to be in e
 632+ CAE1 16 08        .CalculateStep:         ld      d,8
 633+ CAE3                                      JumpIfALTNusng 8, .DoneStepCalc
 633+ CAE3 FE 08       >                        cp      8
 633+ CAE5 DA F1 CA    >                        jp		c, .DoneStepCalc
 634+ CAE8 CB 3A                                srl     d                           ; d = d / 2
 635+ CAEA                                      JumpIfALTNusng 60, .DoneStepCalc
 635+ CAEA FE 3C       >                        cp      60
 635+ CAEC DA F1 CA    >                        jp		c, .DoneStepCalc
 636+ CAEF CB 3A                                srl     d                           ; d = d / 2
 637+ CAF1 7A           .DoneStepCalc:          ld      a,d
 638+ CAF2 32 9D C0                             ld      (P_BnkSTP),a
 639+ CAF5 C9                                   ret
 640+ CAF6
 641+ CAF6              ; Shorter version when sun does not need to be processed to screen
 642+ CAF6 3A 12 C0     PlanetUpdateCompass:    ld      a,(P_Bnkxsgn)
 643+ CAF9 2A 10 C0                             ld      hl,(P_Bnkxlo)
 644+ CAFC CD 3E CA                             call    PlanetProcessVertex
 645+ CAFF 22 19 C0                             ld      (P_CompassX),hl
 646+ CB02 3A 15 C0                             ld      a,(P_Bnkysgn)
 647+ CB05 2A 13 C0                             ld      hl,(P_Bnkylo)
 648+ CB08 CD 3E CA                             call    PlanetProcessVertex
 649+ CB0B 22 1B C0                             ld      (P_CompassY),hl
 650+ CB0E C9                                   ret
 651+ CB0F
 652+ CB0F                                 ; could probabyl set a variable say "varGood", default as 1 then set to 0 if we end up with a good calulation?? may not need it as we draw here
 653+ CB0F CD 75 C8     PlanetUpdateAndRender:  call    PlanetApplyMyRollAndPitch    ; not needed for solid as yet
 654+ CB12 3A 18 C0     .DrawSolidPlanet:       ld      a,(P_Bnkzsgn)                ; a = z sign of position
 655+ CB15 A7           .ElimiateBehind:        and     a
 656+ CB16 FA 6B CB                             jp      m,.SkipDrawPlanet            ; if its negative then behind so exit
 657+ CB19              .TooFarAway:            JumpIfAGTENusng   48,.SkipDrawPlanet ; if sign (high byte 2) > 48 then too far away to render
 657+ CB19 FE 30       >                        cp     48
 657+ CB1B D2 6B CB    >                        jp		nc,.SkipDrawPlanet
 658+ CB1E 21 17 C0                             ld      hl, P_Bnkzhi                 ; if |P_Bnkzsgn| or P_Bnkzhi or P_Bnkzlo upper byte are both 0 then the planet is too close so return
 659+ CB21 B6                                   or      (hl)                         ; .
 660+ CB22 2B                                   dec     hl
 661+ CB23 47                                   ld      b,a
 662+ CB24 7E                                   ld      a,(hl)
 663+ CB25 E6 F0                                and     $F0
 664+ CB27 B0                                   or      b
 665+ CB28 CA 6B CB                             jp      z,.SkipDrawPlanet            ; .
 666+ CB2B              ;                       loads P_centreX and Y with planet on screen centre
 667+ CB2B CD 20 CA     .Project                call    ProjectPlanet                ; Project the planet/sun onto the screen, returning the centre's coordinates in K3(1 0) and K4(1 0)
 668+ CB2E CD C4 CA     .CalcRadius:            call    PlanetCalculateRadius
 669+ CB31                                      DISPLAY "ASSMEBLING WITH SOLID PLANETS"
 670+ CB31                                      DISPLAY "TODO, pick colour based on galaxy map"
 671+ CB31 2A 36 C1                             ld      hl,(P_centreX)
 672+ CB34 ED 5B 3C C1                          ld      de,(P_centreY)
 673+ CB38 3A E7 C0                             ld      a,(P_Radius)
 674+ CB3B A7                                   and     a
 675+ CB3C CA 6B CB                             jp      z,.SkipDrawPlanet            ; skip 0 size
 676+ CB3F 4F                                   ld      c,a
 677+ CB40 3A F0 C0                             ld      a,(P_Colour1)
 678+ CB43 47                                   ld      b,a
 679+ CB44                                      MMUSelectLayer2
 679+ CB44 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 680+ CB48 CD 95 EE                             call    l2_draw_clipped_circle_filled
 681+ CB4B                                      JumpIfMemLTNusng P_Radius, 5, .SkipDrawPlanet
 681+ CB4B 3A E7 C0    >                        ld      a,(P_Radius)
 681+ CB4E FE 05       >                        cp      5
 681+ CB50 DA 6B CB    >                        jp	  c,.SkipDrawPlanet
 682+ CB53 FE 06                                cp      PlanetMinRadius             ; radius < min radius means no atmosphere
 683+ CB55 4F                                   ld      c,a                         ; as a holds radius from Jump Macro
 684+ CB56 CA 6B CB                             jp      z,.SkipDrawPlanet
 685+ CB59 2A 36 C1                             ld      hl,(P_centreX) ; just to test putting a rim there
 686+ CB5C ED 5B 3C C1                          ld      de,(P_centreY)
 687+ CB60 3A F1 C0                             ld      a,(P_Colour2)
 688+ CB63 47                                   ld      b,a
 689+ CB64                                      MMUSelectLayer2
 689+ CB64 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 690+ CB68 CD 99 EC                             call    l2_draw_clipped_circle
 691+ CB6B CD F6 CA     .SkipDrawPlanet:        call    PlanetUpdateCompass
 692+ CB6E C9                                   ret                                 ; else x is totally off the left side of the screen
 693+ CB6F              ;
 694+ CB6F              ; (PLS4)
 695+ CB6F              ; CNT2 =  = arctan(-nosev_z_hi / side_z_hi) / 4,  if nosev_z_hi >= 0 add PI
 696+ CB6F 3A 36 C0     CalcNoseSideArcTanPI:   ld      a, (P_BnkrotmatNosevZ + 1)   ; P = - nosevz hi
 697+ CB72 EE 80                                xor     $80
 698+ CB74 32 69 7E                             ld      (varP),a
 699+ CB77 3A 2A C0                             ld      a, (P_BnkrotmatSidevZ + 1)
 700+ CB7A C3 88 CB                             jp      CalcArcTanPiPA
 701+ CB7D              ;  CNT2 =  = arctan(-nosev_z_hi / roofv_z_hi) / 4,  if nosev_z_hi >= 0 add PI
 702+ CB7D 3A 36 C0     CalcNoseRoofArcTanPI:   ld      a, (P_BnkrotmatNosevZ + 1)   ; P = - nosevz hi
 703+ CB80 EE 80                                xor     $80
 704+ CB82 32 69 7E                             ld      (varP),a
 705+ CB85 3A 30 C0                             ld      a, (P_BnkrotmatRoofvZ + 1)
 706+ CB88              ; CNT2 = arctan(P / A) / 4
 707+ CB88 32 71 7F     CalcArcTanPiPA:         ld      (varQ),a                    ; STA Q                  \ Set Q = A
 708+ CB8B CD C8 92                             call    ARCTAN                      ; A = arctan(P / Q)
 709+ CB8E 4F                                   ld      c,a                         ; save a
 710+ CB8F 3A 36 C0                             ld      a,(P_BnkrotmatNosevZ+1)
 711+ CB92 E6 80                                and     $80
 712+ CB94 79                                   ld      a,c                         ; restore a as it doesn't affect flags doing an ld
 713+ CB95 FA 9A CB                             jp      m,.SkipFlipSign             ; If nosev_z_hi is negativeleave the angle in A as a positive
 714+ CB98              ; Adds 128 to the result (rather than makes it negative)
 715+ CB98 EE 80        .FlipSign:              xor     $80                         ; If we get here then nosev_z_hi is positive, so flip bit 7 of the angle in A, which is the same as adding 128
 716+ CB9A CB 3F        .SkipFlipSign:          srl     a                           ; Set CNT2 = A / 4
 717+ CB9C CB 3F                                srl     a                           ; .
 718+ CB9E 32 D1 C0                             ld      (P_BnkCNT2),a                ; .
 719+ CBA1 C9                                   ret
 720+ CBA2
 721+ CBA2              ; (PSL1)
 722+ CBA2              ; XX16 K2) = nosev_x / z
 723+ CBA2 2A 31 C0     CalcNoseXDivNoseZ:      ld      hl,(P_BnkrotmatNosevX)
 724+ CBA5 ED 5B 35 C0                          ld      de,(P_BnkrotmatNosevZ)
 725+ CBA9 C3 DB CB                             jp      CalcRotMatDivide
 726+ CBAC 2A 33 C0     CalcNoseYDivNoseZ:      ld      hl,(P_BnkrotmatNosevY)
 727+ CBAF ED 5B 35 C0                          ld      de,(P_BnkrotmatNosevZ)
 728+ CBB3 C3 DB CB                             jp      CalcRotMatDivide
 729+ CBB6 2A 2B C0     CalcRoofXDivRoofZ:      ld      hl,(P_BnkrotmatRoofvX)
 730+ CBB9 ED 5B 2F C0                          ld      de,(P_BnkrotmatRoofvZ)
 731+ CBBD C3 DB CB                             jp      CalcRotMatDivide
 732+ CBC0 2A 2D C0     CalcRoofYDivRoofZ:      ld      hl,(P_BnkrotmatRoofvY)
 733+ CBC3 ED 5B 2F C0                          ld      de,(P_BnkrotmatRoofvZ)
 734+ CBC7 C3 DB CB                             jp      CalcRotMatDivide
 735+ CBCA 2A 25 C0     CalcSideXDivSideZ:      ld      hl,(P_BnkrotmatSidevX)
 736+ CBCD ED 5B 29 C0                          ld      de,(P_BnkrotmatSidevZ)
 737+ CBD1 C3 DB CB                             jp      CalcRotMatDivide
 738+ CBD4 2A 27 C0     CalcSideYDivSideZ:      ld      hl,(P_BnkrotmatSidevY)
 739+ CBD7 ED 5B 29 C0                          ld      de,(P_BnkrotmatSidevZ)
 740+ CBDB              ; (PLS1) (Y A) = nosev_x / z where B = Y (also stores in regY), K+3 = sign of calculation
 741+ CBDB              ; stores result in BC now as well
 742+ CBDB              ; does not do increment of X as its not needed when directly loading verticies of rotation
 743+ CBDB              CalcRotMatDivide:
 744+ CBDB 7B           .LoadDEtoQRS:           ld      a,e                         ; Q
 745+ CBDC 32 71 7F                             ld      (varQ),a                    ;
 746+ CBDF 7A                                   ld      a,d                         ;
 747+ CBE0 E6 7F                                and     $7F                         ;
 748+ CBE2 32 72 7F                             ld      (varR),a                    ;
 749+ CBE5 7A                                   ld      a,d                         ;
 750+ CBE6 E6 80                                and     $80                         ;
 751+ CBE8 32 73 7F                             ld      (varS),a                    ;
 752+ CBEB 7D           .LoadHLtoP012:          ld      a,l                         ; set A P+1 P to (signnoseX) (|noseX|)
 753+ CBEC 32 69 7E                             ld      (varP),a                    ; set P to nosevX lo
 754+ CBEF 7C                                   ld      a,h                         ; set P_1 to |nosevX hi|
 755+ CBF0 44                                   ld      b,h                         ; .
 756+ CBF1 E6 7F                                and     $7F                         ; .
 757+ CBF3 32 6A 7E                             ld      (varP+1),a                  ; .
 758+ CBF6 78                                   ld      a,b                         ; set a to sign nosevX
 759+ CBF7 E6 80                                and     $80
 760+ CBF9 32 6B 7E                             ld      (varP+2),a
 761+ CBFC CD D5 93                             call    DVID3B                      ; call DVI3B2 variane where z is in de as 16 bit and needs expanding to 32
 762+ CBFF 3A 85 7F                             ld      a,(varK+1)                  ; get second byte into b
 763+ CC02 47                                   ld      b,a                         ; and also check to see if its
 764+ CC03 A7                                   and     a                           ; zero
 765+ CC04 3A 84 7F                             ld      a,(varK)
 766+ CC07 4F                                   ld      c,a                         ; so now BC = result too
 767+ CC08 CA 0E CC                             jp      z,.Skip254
 768+ CC0B 3E FE        .Force254Result:        ld      a,254                       ; if 2nd byte is non zero set a to 254 as our max 1 byte value to return
 769+ CC0D 4F                                   ld      c,a
 770+ CC0E F5           .Skip254:               push    af
 771+ CC0F 79                                   ld      a,c                         ; if a is 0 then force sign to be +ve
 772+ CC10 A7                                   and     a
 773+ CC11 C2 1A CC                             jp      nz,.DoNotForceSign
 774+ CC14 32 44 7E     .ForceSignPositive:     ld      (regY),a
 775+ CC17 47                                   ld      b,a
 776+ CC18 F1                                   pop     af
 777+ CC19 C9                                   ret
 778+ CC1A 3A 87 7F     .DoNotForceSign:        ld      a,(varK+3)                  ; set b to sign (which was Y in 6502)
 779+ CC1D 32 44 7E                             ld      (regY),a
 780+ CC20 47                                   ld      b,a                         ; bc also is result as c was a copy of a
 781+ CC21 F1                                   pop     af                          ; so c doesn't need to be pushed to stack
 782+ CC22 C9                                   ret
 783+ CC23
 784+ CC23              ; (PLS3)
 785+ CC23              ;  (Y A P) = 222 * roofv_x / z to give the x-coordinate of the crater offset
 786+ CC23 2A 2B C0     Cacl222MulRoofXDivRoofZ:ld      hl,(P_BnkrotmatRoofvX)
 787+ CC26 ED 5B 2F C0                          ld      de,(P_BnkrotmatRoofvZ)
 788+ CC2A C3 34 CC                             jp      Calc222MulHLDivDE
 789+ CC2D              ; (Y A P) = 222 * roofv_y / z to give the x-coordinate of the crater offset
 790+ CC2D 2A 2D C0     Cacl222MulRoofYDivRoofZ:ld      hl,(P_BnkrotmatRoofvY)
 791+ CC30 ED 5B 2F C0                          ld      de,(P_BnkrotmatRoofvZ)
 792+ CC34              ; Optimise, move result at the end into HL instead of YA (we can ignore P)
 793+ CC34 CD DB CB     Calc222MulHLDivDE:      call    CalcRotMatDivide            ; calculate (Y A) = nosev_x(orY) / z
 794+ CC37 57                                   ld      d,a                         ; P = |roofv_x / z|
 795+ CC38 1E DE                                ld      e,222                       ; LDA #222               \ Set Q = 222, the offset to the crater
 796+ CC3A                                      ; Not needed                        ; STA Q
 797+ CC3A                                      ; Not needed                        ; STX U                  \ Store the vector index X in U for retrieval after the  call to MULTU
 798+ CC3A ED 30                                mul     de                          ; call MULTU (unsigned multiply) de = 222 * |roofv_x / z|
 799+ CC3C 3A 87 7F                             ld      a,(varK+3)                  ; LDY K+3                \ If the sign of the result in K+3 is positive, skip to
 800+ CC3F A7                                   and     a
 801+ CC40 F2 60 CC                             jp      p,.PL12                     ; BPL PL12               \ PL12 to return with Y = 0
 802+ CC43 3E FF                                ld      a,$FF                       ; LDY #&FF               \ Set Y = &FF to be a negative high byte
 803+ CC45 32 44 7E                             ld      (regY),a                    ; .
 804+ CC48 47                                   ld      b,a                         ; .
 805+ CC49                                      macronegate16de                     ; Otherwise the result should be negative, so negate
 805+ CC49 AF          >					xor 	a
 805+ CC4A 93          >                    sub 	e
 805+ CC4B 5F          >                    ld 		e,a
 805+ CC4C 9F          >                    sbc 	a,a
 805+ CC4D 92          >                    sub 	d
 805+ CC4E 57          >                    ld 		d,a
 806+ CC4F 7B                                   ld      a,e                         ; now we have Y A P (with Y in b also)
 807+ CC50 32 69 7E                             ld      (varP),a                    ; .
 808+ CC53 7A                                   ld      a,d                         ; .
 809+ CC54 A7                                   and     a
 810+ CC55 CA 59 CC                             jp      z,.ForcePositive            ; if A is 0, special case to make +ve
 811+ CC58 C9                                   ret                                 ; RTS                    \ Return from the subroutine
 812+ CC59              .ForcePositive:         ZeroA                               ; set regY and b to 0
 812+ CC59 AF          >                        xor a
 813+ CC5A 32 44 7E                             ld      (regY),a
 814+ CC5D 47                                   ld      b,a
 815+ CC5E 7A                                   ld      a,d                         ; get d back into a again
 816+ CC5F C9                                   ret
 817+ CC60              .PL12:                  ZeroA                               ; set Y A P to be 0 D E from mul
 817+ CC60 AF          >                        xor a
 818+ CC61 47                                   ld      b,a
 819+ CC62 32 44 7E                             ld      (regY),a
 820+ CC65 7B                                   ld      a,e
 821+ CC66 32 69 7E                             ld      (varP),a
 822+ CC69 7A                                   ld      a,d
 823+ CC6A C9                                   ret
 824+ CC6B
 825+ CC6B
 826+ CC6B
 827+ CC6B              ;-- bc = bc * P_radius where bc = S.Fraction ,e.g nosex/nosey
 828+ CC6B 3A E7 C0     P_BCmulRadius:          ld      a,(P_Radius)                ; we probably don't have radius already
 829+ CC6E 57           P_BCmulRadiusInA:       ld      d,a                         ; d = radius already in a
 830+ CC6F 59                                   ld      e,c                         ; e = c (as we only hold 0.8 in bc, i.e. fractional +/- > 0)
 831+ CC70 ED 30                                mul     de                          ; mulitply raidus by c which will be fractional  generating a 8.X value)
 832+ CC72 4A                                   ld      c,d                         ; we only want the whole number, preserving sign in b
 833+ CC73 C9                                   ret
 834+ CC74
 835+ CC74                 ; DEFINE  PlanetDebugLocal 1
 836+ CC74              PlanetDraw:             INCLUDE "./Universe/Planet/PlanetDiagnostics.asm"
# file opened: ././Universe/Planet/PlanetDiagnostics.asm
   1++CC74                      IFDEF BLINEDEBUG
   2++CC74 ~                                            call    TestBLINE
   3++CC74                                      ENDIF
   4++CC74                                      IFDEF TESTMERIDIAN
   5++CC74 ~                                            call    TestMeridian
   6++CC74                                      ENDIF
   7++CC74                                      IFDEF PlanetDebugLocal
   8++CC74 ~                                            ZeroA
   9++CC74 ~                                            ; x 500, y 50, z 2000: 500/7,50/7 =>71,7 => 199,71 Yes
  10++CC74 ~                                            ; radius becomes 24576/2000 = 12 (13 is good enough yes)
  11++CC74 ~                                            ld      (P_Bnkxsgn),a
  12++CC74 ~                                            ld      (P_Bnkysgn),a
  13++CC74 ~                                            ld      (P_Bnkzsgn),a
  14++CC74 ~                                            ld      hl, 0
  15++CC74 ~                                            ld      (P_Bnkxlo),hl
  16++CC74 ~                                            ld      hl,0
  17++CC74 ~                                            ld      (P_Bnkylo),hl
  18++CC74 ~                                            ld      hl, 1500
  19++CC74 ~                                            ld      (P_Bnkzlo),hl
  20++CC74 ~                                            ld      hl,$C800
  21++CC74 ~                                            ld      bc,6144
  22++CC74 ~                                            ld      de,0
  23++CC74 ~                                            ld      (P_BnkrotmatNosevX),bc
  24++CC74 ~                                            ld      (P_BnkrotmatNosevY),de
  25++CC74 ~                                            ld      (P_BnkrotmatNosevZ),hl
  26++CC74 ~                                            ld      (P_BnkrotmatRoofvX),de
  27++CC74 ~                                            ld      (P_BnkrotmatRoofvY),hl
  28++CC74 ~                                            ld      (P_BnkrotmatRoofvZ),bc
  29++CC74 ~                                            ld      hl,18432
  30++CC74 ~                                            ld      bc,$9800
  31++CC74 ~                                            ld      (P_BnkrotmatSidevX),hl
  32++CC74 ~                                            ld      (P_BnkrotmatSidevY),de
  33++CC74 ~                                            ld      (P_BnkrotmatSidevZ),bc
  34++CC74 ~            ;                                ld      hl, 230
  35++CC74 ~            ;                                ld      de,100
  36++CC74 ~            ;                                ld      c,200
  37++CC74 ~            ;                                ld      b,$FF
  38++CC74 ~                                            call    ProjectPlanet               ;  Project the planet/sun onto the screen, returning the centre's coordinates in K3(1 0) and K4(1 0)
  39++CC74 ~                                            call    PlanetCalculateRadius
  40++CC74 ~
  41++CC74 ~                                            ld      hl, (P_centreX)
  42++CC74 ~                                            ld      de,(P_centreY)
  43++CC74 ~                                            ld      a,(P_Radius)
  44++CC74 ~                                            ld      c,a
  45++CC74 ~                                            ld      b,$FF
  46++CC74 ~                                            MMUSelectLayer2
  47++CC74 ~                                            break
  48++CC74 ~                                            call    l2_draw_clipped_circle
  49++CC74 ~                                            break
  50++CC74 ~            .DebugMeridian1:                xor     a
  51++CC74 ~                                            ld      (P_BnkCNT2),a
  52++CC74 ~                                            ld      hl,(P_centreX)
  52++CC74 ~               call    TwosCompToLeadingSign
  52++CC74 ~              ld      (P_BnkCx),hl
  53++CC74 ~                                            ld      hl,(P_centreY)
  53++CC74 ~               call    TwosCompToLeadingSign
  53++CC74 ~              ld      (P_BnkCy),hl
  54++CC74 ~                                            call    CalcNoseRoofArcTanPI        ; CNT2 =  = arctan(-nosev_z_hi / roofv_z_hi) / 4,  if nosev_z_hi >= 0 add PI
  55++CC74 ~                                            call    CalcNoseXDivNoseZ
  55++CC74 ~               call  P_BCmulRadius
  55++CC74 ~              ld      (P_BnkUx),bc
  56++CC74 ~                                            call    CalcNoseYDivNoseZ
  56++CC74 ~               call  P_BCmulRadius
  56++CC74 ~              ld      (P_BnkUy),bc
  57++CC74 ~                                            call    CalcRoofXDivRoofZ
  57++CC74 ~               call  P_BCmulRadius
  57++CC74 ~              ld      (P_BnkVx),bc
  58++CC74 ~                                            call    CalcRoofYDivRoofZ
  58++CC74 ~               call  P_BCmulRadius
  58++CC74 ~              ld      (P_BnkVy),bc
  59++CC74 ~                                            break
  60++CC74 ~
  61++CC74 ~                                            break
  62++CC74 ~                                            call    DrawMeridian
  63++CC74 ~                                            break
  64++CC74 ~            .DebugMeridian2:                xor     a
  65++CC74 ~                                            ld      (P_BnkCNT2),a
  66++CC74 ~                                            ld      hl,(P_centreX)
  66++CC74 ~               call    TwosCompToLeadingSign
  66++CC74 ~              ld      (P_BnkCx),hl
  67++CC74 ~                                            ld      hl,(P_centreY)
  67++CC74 ~               call    TwosCompToLeadingSign
  67++CC74 ~              ld      (P_BnkCy),hl
  68++CC74 ~                                            call    CalcNoseRoofArcTanPI        ; CNT2 =  = arctan(-nosev_z_hi / roofv_z_hi) / 4,  if nosev_z_hi >= 0 add PI
  69++CC74 ~                                            call    CalcNoseXDivNoseZ
  69++CC74 ~               call  P_BCmulRadius
  69++CC74 ~              ld      (P_BnkUx),bc
  70++CC74 ~                                            call    CalcNoseYDivNoseZ
  70++CC74 ~               call  P_BCmulRadius
  70++CC74 ~              ld      (P_BnkUy),bc
  71++CC74 ~                                            call    CalcSideXDivSideZ
  71++CC74 ~               call  P_BCmulRadius
  71++CC74 ~              ld      (P_BnkVx),bc
  72++CC74 ~                                            call    CalcSideYDivSideZ
  72++CC74 ~               call  P_BCmulRadius
  72++CC74 ~              ld      (P_BnkVy),bc
  73++CC74 ~                                            break
  74++CC74 ~                                            call    DrawMeridian
  75++CC74 ~                                            break
  76++CC74 ~                                            break
  77++CC74 ~
  78++CC74 ~
  79++CC74                                      ENDIF
  80++CC74
# file closed: ././Universe/Planet/PlanetDiagnostics.asm
 837+ CC74 3A 18 C0                             ld      a,(P_Bnkzsgn)                ; a = z sign of position
 838+ CC77 A7           .ElimiateBehind:        and     a
 839+ CC78 F8                                   ret     m                           ; if its negative then behind so exit
 840+ CC79              .TooFarAway:            ReturnIfAGTEusng   48               ; if sign (high byte 2) > 48 then too far away to render
 840+ CC79 FE 30       >                        cp    48
 840+ CC7B D0          >                        ret	 nc
 841+ CC7C 21 17 C0                             ld      hl, P_Bnkzhi                 ; if |P_Bnkzsgn| or P_Bnkzsgn are both 0 then the planet is too close so return
 842+ CC7F B6                                   or      (hl)                        ; .
 843+ CC80 C8                                   ret     z                           ; .
 844+ CC81              ;                       loads P_centreX and Y with planet on screen centre
 845+ CC81 CD 20 CA     .Project                call    ProjectPlanet               ;  Project the planet/sun onto the screen, returning the centre's coordinates in K3(1 0) and K4(1 0)
 846+ CC84 D8                                   ret     c                           ; If the C flag is set by PROJ then the planet/sun is  not visible on-screen, so return
 847+ CC85 CD C4 CA     .CalcRadius:            call    PlanetCalculateRadius
 848+ CC88                              IFDEF   PLANETSARESOLID
 849+ CC88                                      DISPLAY "ASSMEBLING WITH SOLID PLANETS"
 850+ CC88                                      DISPLAY "TODO, pick colour based on galaxy map"
 851+ CC88 2A 36 C1                             ld      hl,(P_centreX)
 852+ CC8B ED 5B 3C C1                          ld      de,(P_centreY)
 853+ CC8F 3A E7 C0                             ld      a,(P_Radius)
 854+ CC92 4F                                   ld      c,a
 855+ CC93 06 CF                                ld      b,$CF
 856+ CC95                                      MMUSelectLayer2
 856+ CC95 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 857+ CC99 CD 95 EE                             call    l2_draw_clipped_circle_filled
 858+ CC9C C9                                   ret
 859+ CC9D                              ELSE
 860+ CC9D ~                                    INCLUDE "./Universe/Planet/PlanetWireframe.asm"
 861+ CC9D                              ENDIF
 862+ CC9D
 863+ CC9D                              IFNDEF  PLANETSARESOLID
 864+ CC9D ~                                    INCLUDE "./Universe/Planet/PlanetMeridian.asm"
 865+ CC9D                              ENDIF
 866+ CC9D
 867+ CC9D
 868+ CC9D
 869+ CC9D              PlanetBankSize  EQU $ - StartOfPlanet
 870+ CC9D
 871+ CC9D
# file closed: ./Universe/Planet/planet_data.asm
1144  CC9D                                  DISPLAY "Bank ",BankPlanetData," - Bytes free ",/D, $2000 - ($-PlanetBankAddr), " - BankPlanetData"
1145  CC9D                                  ASSERT $-PlanetBankAddr <8912, Bank code leaks over 8K boundary
1146  CC9D
1147  CC9D              ;;;***; Bank 85  ------------------------------------------------------------------------------------------------------------------------
1148  CC9D              ;;;***                        SLOT    SpriteDataAAddr
1149  CC9D              ;;;***                        PAGE    BankSpriteDataA
1150  CC9D              ;;;***                        ORG     SpriteDataAAddr, BankSpriteDataA
1151  CC9D              ;;;***                        INCLUDE "./Layer3Sprites/sprite_loadA.asm"
1152  CC9D              ;;;***                        INCLUDE "./Layer3Sprites/SpriteSheetA.asm"
1153  CC9D              ;;;***                        DISPLAY "Bank ",BankSpriteDataA," - Bytes free ",/D, $2000 - ($-SpriteDataAAddr), " - BankSpriteDataA"
1154  CC9D              ;;;***; Bank 86  ------------------------------------------------------------------------------------------------------------------------
1155  CC9D              ;;;***                        SLOT    SpriteDataBAddr
1156  CC9D              ;;;***                        PAGE    BankSpriteDataB
1157  CC9D              ;;;***                        ORG     SpriteDataBAddr, BankSpriteDataB
1158  CC9D              ;;;***                        INCLUDE "./Layer3Sprites/sprite_loadB.asm"
1159  CC9D              ;;;***                        INCLUDE "./Layer3Sprites/SpriteSheetB.asm"
1160  CC9D              ;;;***                        DISPLAY "Bank ",BankSpriteDataB," - Bytes free ",/D, $2000 - ($-SpriteDataBAddr), " - BankSpriteDataB"
1161  CC9D              ; Bank 91  ------------------------------------------------------------------------------------------------------------------------
1162  CC9D                                  SLOT    GalaxyDataAddr
1163  CC9D                                  PAGE    BankGalaxyData0
1164  CC9D                                  ORG GalaxyDataAddr, BankGalaxyData0
1165  E000                                  INCLUDE "./Universe/Galaxy/galaxy_data.asm"
# file opened: ./Universe/Galaxy/galaxy_data.asm
   1+ E000 47 61 6C 61  galaxy_page_marker  DB "Galaxy      PG9"
   1+ E004 78 79 20 20
   1+ E008 20 20 20 20
   1+ E00C 50 47 39
   2+ E00F 30           galaxy_pg_cnt       DB "0"
   3+ E010 00 00 00...  galaxy_master_seed  DS 6
   4+ E016 00 00 00...  galaxy_data DS 8*256
   5+ E816 2D 2D 2D 2D  galaxy_code_end DB "-----------------------------------------------------------------"
   5+ E81A 2D 2D 2D 2D
   5+ E81E 2D 2D 2D 2D
   5+ E822 2D 2D 2D 2D
   5+ E826 2D 2D 2D 2D
   5+ E82A 2D 2D 2D 2D
   5+ E82E 2D 2D 2D 2D
   5+ E832 2D 2D 2D 2D
   5+ E836 2D 2D 2D 2D
   5+ E83A 2D 2D 2D 2D
   5+ E83E 2D 2D 2D 2D
   5+ E842 2D 2D 2D 2D
   5+ E846 2D 2D 2D 2D
   5+ E84A 2D 2D 2D 2D
   5+ E84E 2D 2D 2D 2D
   5+ E852 2D 2D 2D 2D
   5+ E856 2D
   6+ E857 00 00        GalaxyPresentSystem:     DW 0
   7+ E859 00 00        GalaxyDestinationSystem: DW 0
   8+ E85B 00 00        GalaxyTargetSystem:      DW 0
   9+ E85D              ; including a DB 0 as a catcher
  10+ E85D 00           GalaxySearchLength:      DB 0
  11+ E85E 00 00 00...  GalaxySearchString:      DS 32
  12+ E87E 00                                    DB 0
  13+ E87F 00 00 00...  GalaxyExpandedName:      DS 32
  14+ E89F 00                                    DB 0
  15+ E8A0 41 42 4F 55  GalaxyName_digrams	     DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION"
  15+ E8A4 53 45 49 54
  15+ E8A8 49 4C 45 54
  15+ E8AC 53 54 4F 4E
  15+ E8B0 4C 4F 4E 55
  15+ E8B4 54 48 4E 4F
  15+ E8B8 41 4C 4C 45
  15+ E8BC 58 45 47 45
  15+ E8C0 5A 41 43 45
  15+ E8C4 42 49 53 4F
  15+ E8C8 55 53 45 53
  15+ E8CC 41 52 4D 41
  15+ E8D0 49 4E 44 49
  15+ E8D4 52 45 41 3F
  15+ E8D8 45 52 41 54
  15+ E8DC 45 4E 42 45
  15+ E8E0 52 41 4C 41
  15+ E8E4 56 45 54 49
  15+ E8E8 45 44 4F 52
  15+ E8EC 51 55 41 4E
  15+ E8F0 54 45 49 53
  15+ E8F4 52 49 4F 4E
  16+ E8F8 00 00 00...  GalaxyWorkingSeed        DS 6
  17+ E8FE 00 00 00...  GalaxyNamingSeed         DS 6
  18+ E904 00 00 00...  GalaxySavedRandomSeed    DS 6
  19+ E90A
  20+ E90A 00           GalaxyDisplayGovernment         DB 0
  21+ E90B 00           GalaxyDisplayEconomy            DB 0
  22+ E90C 00           GalaxyDisplayTekLevel           DB 0
  23+ E90D 00           GalaxyDisplayPopulation         DB 0
  24+ E90E 00 00        GalaxyDisplayProductivity       DW 0
  25+ E910 00 00        GalaxyDisplayRadius             DW 0
  26+ E912
  27+ E912 66 61 62 6C  GalaxyDescList01A       DB "fabled",0
  27+ E916 65 64 00
  28+ E919 6E 6F 74 61  GalaxyDescList01B       DB "notable",0
  28+ E91D 62 6C 65 00
  29+ E921 77 65 6C 6C  GalaxyDescList01C       DB "well known",0
  29+ E925 20 6B 6E 6F
  29+ E929 77 6E 00
  30+ E92C 66 61 6D 6F  GalaxyDescList01D       DB "famous",0
  30+ E930 75 73 00
  31+ E933 6E 6F 74 65  GalaxyDescList01E       DB "noted",0
  31+ E937 64 00
  32+ E939 76 65 72 79  GalaxyDescList02A       DB "very",0
  32+ E93D 00
  33+ E93E 6D 69 6C 64  GalaxyDescList02B       DB "mildly",0
  33+ E942 6C 79 00
  34+ E945 6D 6F 73 74  GalaxyDescList02C       DB "most",0
  34+ E949 00
  35+ E94A 72 65 61 73  GalaxyDescList02D       DB "reasonably",0
  35+ E94E 6F 6E 61 62
  35+ E952 6C 79 00
  36+ E955 00           GalaxyDescList02E       DB 0
  37+ E956 61 6E 63 69  GalaxyDescList03A       DB "ancient",0
  37+ E95A 65 6E 74 00
  38+ E95E 3C 32 30 3E  GalaxyDescList03B       DB "<20>",0
  38+ E962 00
  39+ E963 67 72 65 61  GalaxyDescList03C       DB "great",0
  39+ E967 74 00
  40+ E969 76 61 73 74  GalaxyDescList03D       DB "vast",0
  40+ E96D 00
  41+ E96E 70 69 6E 6B  GalaxyDescList03E       DB "pink",0
  41+ E972 00
  42+ E973 3C 32 39 3E  GalaxyDescList04A       DB "<29> <28> plantations",0
  42+ E977 20 3C 32 38
  42+ E97B 3E 20 70 6C
  42+ E97F 61 6E 74 61
  42+ E983 74 69 6F 6E
  42+ E987 73 00
  43+ E989 6D 6F 75 6E  GalaxyDescList04B       DB "mountains",0
  43+ E98D 74 61 69 6E
  43+ E991 73 00
  44+ E993 3C 32 37 3E  GalaxyDescList04C       DB "<27>",0
  44+ E997 00
  45+ E998 3C 31 39 3E  GalaxyDescList04D       DB "<19> forests",0
  45+ E99C 20 66 6F 72
  45+ E9A0 65 73 74 73
  45+ E9A4 00
  46+ E9A5 6F 63 65 61  GalaxyDescList04E       DB "oceans",0
  46+ E9A9 6E 73 00
  47+ E9AC 73 68 79 6E  GalaxyDescList05A       DB "shyness",0
  47+ E9B0 65 73 73 00
  48+ E9B4 73 69 6C 6C  GalaxyDescList05B       DB "silliness",0
  48+ E9B8 69 6E 65 73
  48+ E9BC 73 00
  49+ E9BE 6D 61 74 69  GalaxyDescList05C       DB "mating traditions",0
  49+ E9C2 6E 67 20 74
  49+ E9C6 72 61 64 69
  49+ E9CA 74 69 6F 6E
  49+ E9CE 73 00
  50+ E9D0 6C 6F 61 74  GalaxyDescList05D       DB "loathing of <5>",0
  50+ E9D4 68 69 6E 67
  50+ E9D8 20 6F 66 20
  50+ E9DC 3C 35 3E 00
  51+ E9E0 6C 6F 76 65  GalaxyDescList05E       DB "love for <5>",0
  51+ E9E4 20 66 6F 72
  51+ E9E8 20 3C 35 3E
  51+ E9EC 00
  52+ E9ED 66 6F 6F 64  GalaxyDescList06A       DB "food blenders",0
  52+ E9F1 20 62 6C 65
  52+ E9F5 6E 64 65 72
  52+ E9F9 73 00
  53+ E9FB 74 6F 75 72  GalaxyDescList06B       DB "tourists",0
  53+ E9FF 69 73 74 73
  53+ EA03 00
  54+ EA04 70 6F 65 74  GalaxyDescList06C       DB "poetry",0
  54+ EA08 72 79 00
  55+ EA0B 64 69 73 63  GalaxyDescList06D       DB "discos",0
  55+ EA0F 6F 73 00
  56+ EA12 3C 31 33 3E  GalaxyDescList06E       DB "<13>",0
  56+ EA16 00
  57+ EA17 74 61 6C 6B  GalaxyDescList07A       DB "talking tree",0
  57+ EA1B 69 6E 67 20
  57+ EA1F 74 72 65 65
  57+ EA23 00
  58+ EA24 63 72 61 62  GalaxyDescList07B       DB "crab",0
  58+ EA28 00
  59+ EA29 62 61 74 00  GalaxyDescList07C       DB "bat",0
  60+ EA2D 6C 6F 62 73  GalaxyDescList07D       DB "lobst",0
  60+ EA31 74 00
  61+ EA33 25 52 00     GalaxyDescList07E       DB "%R",0
  62+ EA36 62 65 73 65  GalaxyDescList08A       DB "beset",0
  62+ EA3A 74 00
  63+ EA3C 70 6C 61 67  GalaxyDescList08B       DB "plagued",0
  63+ EA40 75 65 64 00
  64+ EA44 72 61 76 61  GalaxyDescList08C       DB "ravaged",0
  64+ EA48 67 65 64 00
  65+ EA4C 63 75 72 73  GalaxyDescList08D       DB "cursed",0
  65+ EA50 65 64 00
  66+ EA53 73 63 6F 75  GalaxyDescList08E       DB "scourged",0
  66+ EA57 72 67 65 64
  66+ EA5B 00
  67+ EA5C 3C 32 31 3E  GalaxyDescList09A       DB "<21> civil war",0
  67+ EA60 20 63 69 76
  67+ EA64 69 6C 20 77
  67+ EA68 61 72 00
  68+ EA6B 3C 32 36 3E  GalaxyDescList09B       DB "<26> <23> <24>s",0
  68+ EA6F 20 3C 32 33
  68+ EA73 3E 20 3C 32
  68+ EA77 34 3E 73 00
  69+ EA7B 61 20 3C 32  GalaxyDescList09C       DB "a <26> disease",0
  69+ EA7F 36 3E 20 64
  69+ EA83 69 73 65 61
  69+ EA87 73 65 00
  70+ EA8A 3C 32 31 3E  GalaxyDescList09D       DB "<21> earthquakes",0
  70+ EA8E 20 65 61 72
  70+ EA92 74 68 71 75
  70+ EA96 61 6B 65 73
  70+ EA9A 00
  71+ EA9B 3C 32 31 3E  GalaxyDescList09E       DB "<21> solar activity",0
  71+ EA9F 20 73 6F 6C
  71+ EAA3 61 72 20 61
  71+ EAA7 63 74 69 76
  71+ EAAB 69 74 79 00
  72+ EAAF 69 74 73 20  GalaxyDescList10A       DB "its <2> <3>",0
  72+ EAB3 3C 32 3E 20
  72+ EAB7 3C 33 3E 00
  73+ EABB 74 68 65 20  GalaxyDescList10B       DB "the %I <23> <24>",0
  73+ EABF 25 49 20 3C
  73+ EAC3 32 33 3E 20
  73+ EAC7 3C 32 34 3E
  73+ EACB 00
  74+ EACC 69 74 73 20  GalaxyDescList10C       DB "its inhabitants' <25> <4>",0
  74+ EAD0 69 6E 68 61
  74+ EAD4 62 69 74 61
  74+ EAD8 6E 74 73 27
  74+ EADC 20 3C 32 35
  74+ EAE0 3E 20 3C 34
  74+ EAE4 3E 00
  75+ EAE6 3C 33 32 3E  GalaxyDescList10D       DB "<32>",0
  75+ EAEA 00
  76+ EAEB 69 74 73 20  GalaxyDescList10E       DB "its <12> <13>",0
  76+ EAEF 3C 31 32 3E
  76+ EAF3 20 3C 31 33
  76+ EAF7 3E 00
  77+ EAF9 6A 75 69 63  GalaxyDescList11A       DB "juice",0
  77+ EAFD 65 00
  78+ EAFF 62 72 61 6E  GalaxyDescList11B       DB "brandy",0
  78+ EB03 64 79 00
  79+ EB06 77 61 74 65  GalaxyDescList11C       DB "water",0
  79+ EB0A 72 00
  80+ EB0C 62 72 65 77  GalaxyDescList11D       DB "brew",0
  80+ EB10 00
  81+ EB11 67 61 72 67  GalaxyDescList11E       DB "gargle blasters",0
  81+ EB15 6C 65 20 62
  81+ EB19 6C 61 73 74
  81+ EB1D 65 72 73 00
  82+ EB21 25 52 00     GalaxyDescList12A       DB "%R",0
  83+ EB24 25 49 20 3C  GalaxyDescList12B       DB "%I <24>",0
  83+ EB28 32 34 3E 00
  84+ EB2C 25 49 20 25  GalaxyDescList12C       DB "%I %R",0
  84+ EB30 52 00
  85+ EB32 25 49 20 3C  GalaxyDescList12D       DB "%I <26>",0
  85+ EB36 32 36 3E 00
  86+ EB3A 3C 32 36 3E  GalaxyDescList12E       DB "<26> %R",0
  86+ EB3E 20 25 52 00
  87+ EB42 66 61 62 75  GalaxyDescList13A       DB "fabulous",0
  87+ EB46 6C 6F 75 73
  87+ EB4A 00
  88+ EB4B 65 78 6F 74  GalaxyDescList13B       DB "exotic",0
  88+ EB4F 69 63 00
  89+ EB52 68 6F 6F 70  GalaxyDescList13C       DB "hoopy",0
  89+ EB56 79 00
  90+ EB58 75 6E 75 73  GalaxyDescList13D       DB "unusual",0
  90+ EB5C 75 61 6C 00
  91+ EB60 65 78 63 69  GalaxyDescList13E       DB "exciting",0
  91+ EB64 74 69 6E 67
  91+ EB68 00
  92+ EB69 63 75 69 73  GalaxyDescList14A       DB "cuisine",0
  92+ EB6D 69 6E 65 00
  93+ EB71 6E 69 67 68  GalaxyDescList14B       DB "night life",0
  93+ EB75 74 20 6C 69
  93+ EB79 66 65 00
  94+ EB7C 63 61 73 69  GalaxyDescList14C       DB "casinos",0
  94+ EB80 6E 6F 73 00
  95+ EB84 73 69 74 20  GalaxyDescList14D       DB "sit coms",0
  95+ EB88 63 6F 6D 73
  95+ EB8C 00
  96+ EB8D 20 3C 33 32  GalaxyDescList14E       DB " <32> ",0
  96+ EB91 3E 20 00
  97+ EB94 25 48 00     GalaxyDescList15A       DB "%H",0
  98+ EB97 54 68 65 20  GalaxyDescList15B       DB "The planet %H",0
  98+ EB9B 70 6C 61 6E
  98+ EB9F 65 74 20 25
  98+ EBA3 48 00
  99+ EBA5 54 68 65 20  GalaxyDescList15C       DB "The world %H",0
  99+ EBA9 77 6F 72 6C
  99+ EBAD 64 20 25 48
  99+ EBB1 00
 100+ EBB2 54 68 69 73  GalaxyDescList15D       DB "This planet",0
 100+ EBB6 20 70 6C 61
 100+ EBBA 6E 65 74 00
 101+ EBBE 54 68 69 73  GalaxyDescList15E       DB "This world",0
 101+ EBC2 20 77 6F 72
 101+ EBC6 6C 64 00
 102+ EBC9 6E 20 75 6E  GalaxyDescList16A       DB "n unremarkable",0
 102+ EBCD 72 65 6D 61
 102+ EBD1 72 6B 61 62
 102+ EBD5 6C 65 00
 103+ EBD8 20 62 6F 72  GalaxyDescList16B       DB " boring",0
 103+ EBDC 69 6E 67 00
 104+ EBE0 20 64 75 6C  GalaxyDescList16C       DB " dull",0
 104+ EBE4 6C 00
 105+ EBE6 20 74 65 64  GalaxyDescList16D       DB " tedious",0
 105+ EBEA 69 6F 75 73
 105+ EBEE 00
 106+ EBEF 20 72 65 76  GalaxyDescList16E       DB " revolting",0
 106+ EBF3 6F 6C 74 69
 106+ EBF7 6E 67 00
 107+ EBFA 70 6C 61 6E  GalaxyDescList17A       DB "planet",0
 107+ EBFE 65 74 00
 108+ EC01 77 6F 72 6C  GalaxyDescList17B       DB "world",0
 108+ EC05 64 00
 109+ EC07 70 6C 61 63  GalaxyDescList17C       DB "place",0
 109+ EC0B 65 00
 110+ EC0D 6C 69 74 74  GalaxyDescList17D       DB "little planet",0
 110+ EC11 6C 65 20 70
 110+ EC15 6C 61 6E 65
 110+ EC19 74 00
 111+ EC1B 64 75 6D 70  GalaxyDescList17E       DB "dump",0
 111+ EC1F 00
 112+ EC20 77 61 73 70  GalaxyDescList18A       DB "wasp",0
 112+ EC24 00
 113+ EC25 6D 6F 74 68  GalaxyDescList18B       DB "moth",0
 113+ EC29 00
 114+ EC2A 67 72 75 62  GalaxyDescList18C       DB "grub",0
 114+ EC2E 00
 115+ EC2F 61 6E 74 00  GalaxyDescList18D       DB "ant",0
 116+ EC33 25 52 00     GalaxyDescList18E       DB "%R",0
 117+ EC36 70 6F 65 74  GalaxyDescList19A       DB "poet",0
 117+ EC3A 00
 118+ EC3B 61 72 74 73  GalaxyDescList19B       DB "arts graduate",0
 118+ EC3F 20 67 72 61
 118+ EC43 64 75 61 74
 118+ EC47 65 00
 119+ EC49 79 61 6B 00  GalaxyDescList19C       DB "yak",0
 120+ EC4D 73 6E 61 69  GalaxyDescList19D       DB "snail",0
 120+ EC51 6C 00
 121+ EC53 73 6C 75 67  GalaxyDescList19E       DB "slug",0
 121+ EC57 00
 122+ EC58 74 72 6F 70  GalaxyDescList20A       DB "tropical",0
 122+ EC5C 69 63 61 6C
 122+ EC60 00
 123+ EC61 64 65 6E 73  GalaxyDescList20B       DB "dense",0
 123+ EC65 65 00
 124+ EC67 72 61 69 6E  GalaxyDescList20C       DB "rain",0
 124+ EC6B 00
 125+ EC6C 69 6D 70 65  GalaxyDescList20D       DB "impenetrable",0
 125+ EC70 6E 65 74 72
 125+ EC74 61 62 6C 65
 125+ EC78 00
 126+ EC79 65 78 75 62  GalaxyDescList20E       DB "exuberant",0
 126+ EC7D 65 72 61 6E
 126+ EC81 74 00
 127+ EC83 66 75 6E 6E  GalaxyDescList21A       DB "funny",0
 127+ EC87 79 00
 128+ EC89 77 69 65 72  GalaxyDescList21B       DB "wierd",0
 128+ EC8D 64 00
 129+ EC8F 75 6E 75 73  GalaxyDescList21C       DB "unusual",0
 129+ EC93 75 61 6C 00
 130+ EC97 73 74 72 61  GalaxyDescList21D       DB "strange",0
 130+ EC9B 6E 67 65 00
 131+ EC9F 70 65 63 75  GalaxyDescList21E       DB "peculiar",0
 131+ ECA3 6C 69 61 72
 131+ ECA7 00
 132+ ECA8 66 72 65 71  GalaxyDescList22A       DB "frequent",0
 132+ ECAC 75 65 6E 74
 132+ ECB0 00
 133+ ECB1 6F 63 63 61  GalaxyDescList22B       DB "occasional",0
 133+ ECB5 73 69 6F 6E
 133+ ECB9 61 6C 00
 134+ ECBC 75 6E 70 72  GalaxyDescList22C       DB "unpredictable",0
 134+ ECC0 65 64 69 63
 134+ ECC4 74 61 62 6C
 134+ ECC8 65 00
 135+ ECCA 64 72 65 61  GalaxyDescList22D       DB "dreadful",0
 135+ ECCE 64 66 75 6C
 135+ ECD2 00
 136+ ECD3 64 65 61 64  GalaxyDescList22E       DB "deadly",0
 136+ ECD7 6C 79 00
 137+ ECDA 3C 31 3E 20  GalaxyDescList23A       DB "<1> <0> for <9>",0
 137+ ECDE 3C 30 3E 20
 137+ ECE2 66 6F 72 20
 137+ ECE6 3C 39 3E 00
 138+ ECEA 3C 31 3E 20  GalaxyDescList23B       DB "<1> <0> for <9> and <9>",0
 138+ ECEE 3C 30 3E 20
 138+ ECF2 66 6F 72 20
 138+ ECF6 3C 39 3E 20
 138+ ECFA 61 6E 64 20
 138+ ECFE 3C 39 3E 00
 139+ ED02 3C 37 3E 20  GalaxyDescList23C       DB "<7> by <8>",0
 139+ ED06 62 79 20 3C
 139+ ED0A 38 3E 00
 140+ ED0D 3C 31 3E 20  GalaxyDescList23D       DB "<1> <0> for <9> but <7> by <8>",0
 140+ ED11 3C 30 3E 20
 140+ ED15 66 6F 72 20
 140+ ED19 3C 39 3E 20
 140+ ED1D 62 75 74 20
 140+ ED21 3C 37 3E 20
 140+ ED25 62 79 20 3C
 140+ ED29 38 3E 00
 141+ ED2C 61 3C 31 35  GalaxyDescList23E       DB "a<15> <16>",0
 141+ ED30 3E 20 3C 31
 141+ ED34 36 3E 00
 142+ ED37 3C 32 36 3E  GalaxyDescList24A       DB "<26>",0
 142+ ED3B 00
 143+ ED3C 6D 6F 75 6E  GalaxyDescList24B       DB "mountain",0
 143+ ED40 74 61 69 6E
 143+ ED44 00
 144+ ED45 65 64 69 62  GalaxyDescList24C       DB "edible",0
 144+ ED49 6C 65 00
 145+ ED4C 74 72 65 65  GalaxyDescList24D       DB "tree",0
 145+ ED50 00
 146+ ED51 73 70 6F 74  GalaxyDescList24E       DB "spotted",0
 146+ ED55 74 65 64 00
 147+ ED59 3C 33 30 3E  GalaxyDescList25A       DB "<30>",0
 147+ ED5D 00
 148+ ED5E 3C 33 31 3E  GalaxyDescList25B       DB "<31>",0
 148+ ED62 00
 149+ ED63 3C 36 3E 6F  GalaxyDescList25C       DB "<6>oid",0
 149+ ED67 69 64 00
 150+ ED6A 3C 31 38 3E  GalaxyDescList25D       DB "<18>",0
 150+ ED6E 00
 151+ ED6F 3C 31 37 3E  GalaxyDescList25E       DB "<17>",0
 151+ ED73 00
 152+ ED74 61 6E 63 69  GalaxyDescList26A       DB "ancient",0
 152+ ED78 65 6E 74 00
 153+ ED7C 65 78 63 65  GalaxyDescList26B       DB "exceptional",0
 153+ ED80 70 74 69 6F
 153+ ED84 6E 61 6C 00
 154+ ED88 65 63 63 65  GalaxyDescList26C       DB "eccentric",0
 154+ ED8C 6E 74 72 69
 154+ ED90 63 00
 155+ ED92 69 6E 67 72  GalaxyDescList26D       DB "ingrained",0
 155+ ED96 61 69 6E 65
 155+ ED9A 64 00
 156+ ED9C 3C 32 30 3E  GalaxyDescList26E       DB "<20>",0
 156+ EDA0 00
 157+ EDA1 6B 69 6C 6C  GalaxyDescList27A       DB "killer",0
 157+ EDA5 65 72 00
 158+ EDA8 64 65 61 64  GalaxyDescList27B       DB "deadly",0
 158+ EDAC 6C 79 00
 159+ EDAF 65 76 69 6C  GalaxyDescList27C       DB "evil",0
 159+ EDB3 00
 160+ EDB4 6C 65 74 68  GalaxyDescList27D       DB "lethal",0
 160+ EDB8 61 6C 00
 161+ EDBB 76 69 63 69  GalaxyDescList27E       DB "vicious",0
 161+ EDBF 6F 75 73 00
 162+ EDC3 70 61 72 6B  GalaxyDescList28A       DB "parking meters",0
 162+ EDC7 69 6E 67 20
 162+ EDCB 6D 65 74 65
 162+ EDCF 72 73 00
 163+ EDD2 64 75 73 74  GalaxyDescList28B       DB "dust clouds",0
 163+ EDD6 20 63 6C 6F
 163+ EDDA 75 64 73 00
 164+ EDDE 69 63 65 20  GalaxyDescList28C       DB "ice bergs",0
 164+ EDE2 62 65 72 67
 164+ EDE6 73 00
 165+ EDE8 72 6F 63 6B  GalaxyDescList28D       DB "rock formations",0
 165+ EDEC 20 66 6F 72
 165+ EDF0 6D 61 74 69
 165+ EDF4 6F 6E 73 00
 166+ EDF8 76 6F 6C 63  GalaxyDescList28E       DB "volcanoes",0
 166+ EDFC 61 6E 6F 65
 166+ EE00 73 00
 167+ EE02 70 6C 61 6E  GalaxyDescList29A       DB "plant",0
 167+ EE06 74 00
 168+ EE08 74 75 6C 69  GalaxyDescList29B       DB "tulip",0
 168+ EE0C 70 00
 169+ EE0E 62 61 6E 61  GalaxyDescList29C       DB "banana",0
 169+ EE12 6E 61 00
 170+ EE15 63 6F 72 6E  GalaxyDescList29D       DB "corn",0
 170+ EE19 00
 171+ EE1A 25 52 77 65  GalaxyDescList29E       DB "%Rweed",0
 171+ EE1E 65 64 00
 172+ EE21 25 52 00     GalaxyDescList30A       DB "%R",0
 173+ EE24 23 49 20 25  GalaxyDescList30B       DB "#I %R",0
 173+ EE28 52 00
 174+ EE2A 23 49 20 3C  GalaxyDescList30C       DB "#I <26>",0
 174+ EE2E 32 36 3E 00
 175+ EE32 69 6E 68 61  GalaxyDescList30D       DB "inhabitant",0
 175+ EE36 62 69 74 61
 175+ EE3A 6E 74 00
 176+ EE3D 25 49 20 25  GalaxyDescList30E       DB "%I %R",0
 176+ EE41 52 00
 177+ EE43 73 68 72 65  GalaxyDescList31A       DB "shrew",0
 177+ EE47 77 00
 178+ EE49 62 65 61 73  GalaxyDescList31B       DB "beast",0
 178+ EE4D 74 00
 179+ EE4F 62 69 73 6F  GalaxyDescList31C       DB "bison",0
 179+ EE53 6E 00
 180+ EE55 73 6E 61 6B  GalaxyDescList31D       DB "snake",0
 180+ EE59 65 00
 181+ EE5B 77 6F 6C 66  GalaxyDescList31E       DB "wolf",0
 181+ EE5F 00
 182+ EE60 6C 65 6F 70  GalaxyDescList32A       DB "leopard",0
 182+ EE64 61 72 64 00
 183+ EE68 63 61 74 00  GalaxyDescList32B       DB "cat",0
 184+ EE6C 6D 6F 6E 6B  GalaxyDescList32C       DB "monkey",0
 184+ EE70 65 79 00
 185+ EE73 67 6F 61 74  GalaxyDescList32D       DB "goat",0
 185+ EE77 00
 186+ EE78 66 69 73 68  GalaxyDescList32E       DB "fish",0
 186+ EE7C 00
 187+ EE7D 3C 31 31 3E  GalaxyDescList33A       DB "<11> <10>",0
 187+ EE81 20 3C 31 30
 187+ EE85 3E 00
 188+ EE87 23 49 20 3C  GalaxyDescList33B       DB "#I <30> <33>",0
 188+ EE8B 33 30 3E 20
 188+ EE8F 3C 33 33 3E
 188+ EE93 00
 189+ EE94 69 74 73 20  GalaxyDescList33C       DB "its <12> <31> <33>",0
 189+ EE98 3C 31 32 3E
 189+ EE9C 20 3C 33 31
 189+ EEA0 3E 20 3C 33
 189+ EEA4 33 3E 00
 190+ EEA7 3C 33 34 3E  GalaxyDescList33D       DB "<34> <35>",0
 190+ EEAB 20 3C 33 35
 190+ EEAF 3E 00
 191+ EEB1 3C 31 31 3E  GalaxyDescList33E       DB "<11> <10>",0
 191+ EEB5 20 3C 31 30
 191+ EEB9 3E 00
 192+ EEBB 6D 65 61 74  GalaxyDescList34A       DB "meat",0
 192+ EEBF 00
 193+ EEC0 63 75 74 6C  GalaxyDescList34B       DB "cutlet",0
 193+ EEC4 65 74 00
 194+ EEC7 73 74 65 61  GalaxyDescList34C       DB "steak",0
 194+ EECB 6B 00
 195+ EECD 62 75 72 67  GalaxyDescList34D       DB "burgers",0
 195+ EED1 65 72 73 00
 196+ EED5 73 6F 75 70  GalaxyDescList34E       DB "soup",0
 196+ EED9 00
 197+ EEDA 69 63 65 00  GalaxyDescList35A       DB "ice",0
 198+ EEDE 6D 75 64 00  GalaxyDescList35B       DB "mud",0
 199+ EEE2 5A 65 72 6F  GalaxyDescList35C       DB "Zero-G",0
 199+ EEE6 2D 47 00
 200+ EEE9 76 61 63 75  GalaxyDescList35D       DB "vacuum",0
 200+ EEED 75 6D 00
 201+ EEF0 25 49 20 75  GalaxyDescList35E       DB "%I ultra",0
 201+ EEF4 6C 74 72 61
 201+ EEF8 00
 202+ EEF9 68 6F 63 6B  GalaxyDescList36A       DB "hockey",0
 202+ EEFD 65 79 00
 203+ EF00 63 72 69 63  GalaxyDescList36B       DB "cricket",0
 203+ EF04 6B 65 74 00
 204+ EF08 6B 61 72 61  GalaxyDescList36C       DB "karate",0
 204+ EF0C 74 65 00
 205+ EF0F 70 6F 6C 6F  GalaxyDescList36D       DB "polo",0
 205+ EF13 00
 206+ EF14 74 65 6E 6E  GalaxyDescList36E       DB "tennis",0
 206+ EF18 69 73 00
 207+ EF1B
 208+ EF1B 12 E9 19 E9  GalaxyDescList          DW GalaxyDescList01A, GalaxyDescList01B, GalaxyDescList01C, GalaxyDescList01D, GalaxyDescList01E
 208+ EF1F 21 E9 2C E9
 208+ EF23 33 E9
 209+ EF25 39 E9 3E E9                          DW GalaxyDescList02A, GalaxyDescList02B, GalaxyDescList02C, GalaxyDescList02D, GalaxyDescList02E
 209+ EF29 45 E9 4A E9
 209+ EF2D 55 E9
 210+ EF2F 56 E9 5E E9                          DW GalaxyDescList03A, GalaxyDescList03B, GalaxyDescList03C, GalaxyDescList03D, GalaxyDescList03E
 210+ EF33 63 E9 69 E9
 210+ EF37 6E E9
 211+ EF39 73 E9 89 E9                          DW GalaxyDescList04A, GalaxyDescList04B, GalaxyDescList04C, GalaxyDescList04D, GalaxyDescList04E
 211+ EF3D 93 E9 98 E9
 211+ EF41 A5 E9
 212+ EF43 AC E9 B4 E9                          DW GalaxyDescList05A, GalaxyDescList05B, GalaxyDescList05C, GalaxyDescList05D, GalaxyDescList05E
 212+ EF47 BE E9 D0 E9
 212+ EF4B E0 E9
 213+ EF4D ED E9 FB E9                          DW GalaxyDescList06A, GalaxyDescList06B, GalaxyDescList06C, GalaxyDescList06D, GalaxyDescList06E
 213+ EF51 04 EA 0B EA
 213+ EF55 12 EA
 214+ EF57 17 EA 24 EA                          DW GalaxyDescList07A, GalaxyDescList07B, GalaxyDescList07C, GalaxyDescList07D, GalaxyDescList07E
 214+ EF5B 29 EA 2D EA
 214+ EF5F 33 EA
 215+ EF61 36 EA 3C EA                          DW GalaxyDescList08A, GalaxyDescList08B, GalaxyDescList08C, GalaxyDescList08D, GalaxyDescList08E
 215+ EF65 44 EA 4C EA
 215+ EF69 53 EA
 216+ EF6B 5C EA 6B EA                          DW GalaxyDescList09A, GalaxyDescList09B, GalaxyDescList09C, GalaxyDescList09D, GalaxyDescList09E
 216+ EF6F 7B EA 8A EA
 216+ EF73 9B EA
 217+ EF75 AF EA BB EA                          DW GalaxyDescList10A, GalaxyDescList10B, GalaxyDescList10C, GalaxyDescList10D, GalaxyDescList10E
 217+ EF79 CC EA E6 EA
 217+ EF7D EB EA
 218+ EF7F F9 EA FF EA                          DW GalaxyDescList11A, GalaxyDescList11B, GalaxyDescList11C, GalaxyDescList11D, GalaxyDescList11E
 218+ EF83 06 EB 0C EB
 218+ EF87 11 EB
 219+ EF89 21 EB 24 EB                          DW GalaxyDescList12A, GalaxyDescList12B, GalaxyDescList12C, GalaxyDescList12D, GalaxyDescList12E
 219+ EF8D 2C EB 32 EB
 219+ EF91 3A EB
 220+ EF93 42 EB 4B EB                          DW GalaxyDescList13A, GalaxyDescList13B, GalaxyDescList13C, GalaxyDescList13D, GalaxyDescList13E
 220+ EF97 52 EB 58 EB
 220+ EF9B 60 EB
 221+ EF9D 69 EB 71 EB                          DW GalaxyDescList14A, GalaxyDescList14B, GalaxyDescList14C, GalaxyDescList14D, GalaxyDescList14E
 221+ EFA1 7C EB 84 EB
 221+ EFA5 8D EB
 222+ EFA7 94 EB 97 EB                          DW GalaxyDescList15A, GalaxyDescList15B, GalaxyDescList15C, GalaxyDescList15D, GalaxyDescList15E
 222+ EFAB A5 EB B2 EB
 222+ EFAF BE EB
 223+ EFB1 C9 EB D8 EB                          DW GalaxyDescList16A, GalaxyDescList16B, GalaxyDescList16C, GalaxyDescList16D, GalaxyDescList16E
 223+ EFB5 E0 EB E6 EB
 223+ EFB9 EF EB
 224+ EFBB FA EB 01 EC                          DW GalaxyDescList17A, GalaxyDescList17B, GalaxyDescList17C, GalaxyDescList17D, GalaxyDescList17E
 224+ EFBF 07 EC 0D EC
 224+ EFC3 1B EC
 225+ EFC5 20 EC 25 EC                          DW GalaxyDescList18A, GalaxyDescList18B, GalaxyDescList18C, GalaxyDescList18D, GalaxyDescList18E
 225+ EFC9 2A EC 2F EC
 225+ EFCD 33 EC
 226+ EFCF 36 EC 3B EC                          DW GalaxyDescList19A, GalaxyDescList19B, GalaxyDescList19C, GalaxyDescList19D, GalaxyDescList19E
 226+ EFD3 49 EC 4D EC
 226+ EFD7 53 EC
 227+ EFD9 58 EC 61 EC                          DW GalaxyDescList20A, GalaxyDescList20B, GalaxyDescList20C, GalaxyDescList20D, GalaxyDescList20E
 227+ EFDD 67 EC 6C EC
 227+ EFE1 79 EC
 228+ EFE3 83 EC 89 EC                          DW GalaxyDescList21A, GalaxyDescList21B, GalaxyDescList21C, GalaxyDescList21D, GalaxyDescList21E
 228+ EFE7 8F EC 97 EC
 228+ EFEB 9F EC
 229+ EFED A8 EC B1 EC                          DW GalaxyDescList22A, GalaxyDescList22B, GalaxyDescList22C, GalaxyDescList22D, GalaxyDescList22E
 229+ EFF1 BC EC CA EC
 229+ EFF5 D3 EC
 230+ EFF7 DA EC EA EC                          DW GalaxyDescList23A, GalaxyDescList23B, GalaxyDescList23C, GalaxyDescList23D, GalaxyDescList23E
 230+ EFFB 02 ED 0D ED
 230+ EFFF 2C ED
 231+ F001 37 ED 3C ED                          DW GalaxyDescList24A, GalaxyDescList24B, GalaxyDescList24C, GalaxyDescList24D, GalaxyDescList24E
 231+ F005 45 ED 4C ED
 231+ F009 51 ED
 232+ F00B 59 ED 5E ED                          DW GalaxyDescList25A, GalaxyDescList25B, GalaxyDescList25C, GalaxyDescList25D, GalaxyDescList25E
 232+ F00F 63 ED 6A ED
 232+ F013 6F ED
 233+ F015 74 ED 7C ED                          DW GalaxyDescList26A, GalaxyDescList26B, GalaxyDescList26C, GalaxyDescList26D, GalaxyDescList26E
 233+ F019 88 ED 92 ED
 233+ F01D 9C ED
 234+ F01F A1 ED A8 ED                          DW GalaxyDescList27A, GalaxyDescList27B, GalaxyDescList27C, GalaxyDescList27D, GalaxyDescList27E
 234+ F023 AF ED B4 ED
 234+ F027 BB ED
 235+ F029 C3 ED D2 ED                          DW GalaxyDescList28A, GalaxyDescList28B, GalaxyDescList28C, GalaxyDescList28D, GalaxyDescList28E
 235+ F02D DE ED E8 ED
 235+ F031 F8 ED
 236+ F033 02 EE 08 EE                          DW GalaxyDescList29A, GalaxyDescList29B, GalaxyDescList29C, GalaxyDescList29D, GalaxyDescList29E
 236+ F037 0E EE 15 EE
 236+ F03B 1A EE
 237+ F03D 21 EE 24 EE                          DW GalaxyDescList30A, GalaxyDescList30B, GalaxyDescList30C, GalaxyDescList30D, GalaxyDescList30E
 237+ F041 2A EE 32 EE
 237+ F045 3D EE
 238+ F047 43 EE 49 EE                          DW GalaxyDescList31A, GalaxyDescList31B, GalaxyDescList31C, GalaxyDescList31D, GalaxyDescList31E
 238+ F04B 4F EE 55 EE
 238+ F04F 5B EE
 239+ F051 60 EE 68 EE                          DW GalaxyDescList32A, GalaxyDescList32B, GalaxyDescList32C, GalaxyDescList32D, GalaxyDescList32E
 239+ F055 6C EE 73 EE
 239+ F059 78 EE
 240+ F05B 7D EE 87 EE                          DW GalaxyDescList33A, GalaxyDescList33B, GalaxyDescList33C, GalaxyDescList33D, GalaxyDescList33E
 240+ F05F 94 EE A7 EE
 240+ F063 B1 EE
 241+ F065 BB EE C0 EE                          DW GalaxyDescList34A, GalaxyDescList34B, GalaxyDescList34C, GalaxyDescList34D, GalaxyDescList34E
 241+ F069 C7 EE CD EE
 241+ F06D D5 EE
 242+ F06F DA EE DE EE                          DW GalaxyDescList35A, GalaxyDescList35B, GalaxyDescList35C, GalaxyDescList35D, GalaxyDescList35E
 242+ F073 E2 EE E9 EE
 242+ F077 F0 EE
 243+ F079 F9 EE 00 EF                          DW GalaxyDescList36A, GalaxyDescList36B, GalaxyDescList36C, GalaxyDescList36D, GalaxyDescList36E
 243+ F07D 08 EF 0F EF
 243+ F081 14 EF
 244+ F083
 245+ F083 4C 61 72 67  GalaxyInhabitantDesc1   DB "Large ",0
 245+ F087 65 20 00
 246+ F08A 46 69 65 72  GalaxyInhabitantDesc1A  DB "Fierce ",0
 246+ F08E 63 65 20 00
 247+ F092 53 6D 61 6C  GalaxyInhabitantDesc1B  DB "Small ", 0
 247+ F096 6C 20 00
 248+ F099 47 72 65 65  GalaxyInhabitantDesc2   DB "Green ",0
 248+ F09D 6E 20 00
 249+ F0A0 52 65 64 20  GalaxyInhabitantDesc2A  DB "Red ",  0
 249+ F0A4 00
 250+ F0A5 59 65 6C 6C  GalaxyInhabitantDesc2B  DB "Yellow ",0
 250+ F0A9 6F 77 20 00
 251+ F0AD 42 6C 75 65  GalaxyInhabitantDesc2C  DB "Blue ",  0
 251+ F0B1 20 00
 252+ F0B3 42 6C 61 63  GalaxyInhabitantDesc2D  DB "Black ",0
 252+ F0B7 6B 20 00
 253+ F0BA 48 61 72 6D  GalaxyInhabitantDesc2E  DB "Harmless ",0
 253+ F0BE 6C 65 73 73
 253+ F0C2 20 00
 254+ F0C4 53 6C 69 6D  GalaxyInhabitantDesc3   DB "Slimy ",0
 254+ F0C8 79 20 00
 255+ F0CB 42 75 67 2D  GalaxyInhabitantDesc3A  DB "Bug-Eyed ", 0
 255+ F0CF 45 79 65 64
 255+ F0D3 20 00
 256+ F0D5 48 6F 72 6E  GalaxyInhabitantDesc3B  DB "Horned ",0
 256+ F0D9 65 64 20 00
 257+ F0DD 42 6F 6E 79  GalaxyInhabitantDesc3C  DB "Bony ",  0
 257+ F0E1 20 00
 258+ F0E3 46 61 74 20  GalaxyInhabitantDesc3D  DB "Fat ",  0
 258+ F0E7 00
 259+ F0E8 46 75 72 72  GalaxyInhabitantDesc3E  DB "Furry ",  0
 259+ F0EC 79 20 00
 260+ F0EF 52 6F 64 65  GalaxyInhabitantDesc4   DB "Rodent",0
 260+ F0F3 6E 74 00
 261+ F0F6 46 72 6F 67  GalaxyInhabitantDesc4A  DB "Frog",      0
 261+ F0FA 00
 262+ F0FB 4C 69 7A 61  GalaxyInhabitantDesc4B  DB "Lizard", 0
 262+ F0FF 72 64 00
 263+ F102 4C 6F 62 73  GalaxyInhabitantDesc4C  DB "Lobster",0
 263+ F106 74 65 72 00
 264+ F10A 42 69 72 64  GalaxyInhabitantDesc4D  DB "Bird",  0
 264+ F10E 00
 265+ F10F 48 75 6D 61  GalaxyInhabitantDesc4E  DB "Humanoid", 0
 265+ F113 6E 6F 69 64
 265+ F117 00
 266+ F118 46 65 6C 69  GalaxyInhabitantDesc4F  DB "Feline", 0
 266+ F11C 6E 65 00
 267+ F11F 49 6E 73 65  GalaxyInhabitantDesc4G  DB "Insect",0
 267+ F123 63 74 00
 268+ F126 48 75 6D 61  GalaxyInhabitantHuman   DB "Human Colonal",0
 268+ F12A 6E 20 43 6F
 268+ F12E 6C 6F 6E 61
 268+ F132 6C 00
 269+ F134
 270+ F134 83 F0 8A F0  GalaxyInhabitantDesc1Ix DW GalaxyInhabitantDesc1,GalaxyInhabitantDesc1A,GalaxyInhabitantDesc1B
 270+ F138 92 F0
 271+ F13A 99 F0 A0 F0  GalaxyInhabitantDesc2Ix DW GalaxyInhabitantDesc2,GalaxyInhabitantDesc2A,GalaxyInhabitantDesc2B,GalaxyInhabitantDesc2C,GalaxyInhabitantDesc2D,GalaxyInhabitantDesc2E
 271+ F13E A5 F0 AD F0
 271+ F142 B3 F0 BA F0
 272+ F146 C4 F0 CB F0  GalaxyInhabitantDesc3Ix DW GalaxyInhabitantDesc3,GalaxyInhabitantDesc3A,GalaxyInhabitantDesc3B,GalaxyInhabitantDesc3C,GalaxyInhabitantDesc3D,GalaxyInhabitantDesc3E
 272+ F14A D5 F0 DD F0
 272+ F14E E3 F0 E8 F0
 273+ F152 EF F0 F6 F0  GalaxyInhabitantDesc4Ix DW GalaxyInhabitantDesc4,GalaxyInhabitantDesc4A,GalaxyInhabitantDesc4B,GalaxyInhabitantDesc4C,GalaxyInhabitantDesc4D,GalaxyInhabitantDesc4E,GalaxyInhabitantDesc4F,GalaxyInhabitantDesc4G
 273+ F156 FB F0 02 F1
 273+ F15A 0A F1 0F F1
 273+ F15E 18 F1 1F F1
 274+ F162 26 F1        GalaxyInhabitantHumanIx DW GalaxyInhabitantHuman
 275+ F164 00 00 00...  GalaxySpecies           DS 32
 276+ F184 00                                   DB 0
 277+ F185 00 00 00...  GalaxyPlanetDescription DS 300
 278+ F2B1 00                                   DB 0
 279+ F2B2 00 00 00...  GalaxyPlanetSource      DS 300,0
 280+ F3DE 3C 31 34 3E  GalaxyPlanetDescStarter DB "<14> is <22>",0
 280+ F3E2 20 69 73 20
 280+ F3E6 3C 32 32 3E
 280+ F3EA 00
 281+ F3EB
 282+ F3EB
 283+ F3EB D3           GalaxyExtendedDescs:    DB 211                                                  ; System 211, Galaxy 0                Teorge = Token  1
 284+ F3EC 96                                   DB 150                                                  ; System 150, Galaxy 0, Mission 1       Xeer = Token  2
 285+ F3ED 24                                   DB 36                                                   ; System  36, Galaxy 0, Mission 1   Reesdice = Token  3
 286+ F3EE 1C                                   DB 28                                                   ; System  28, Galaxy 0, Mission 1      Arexe = Token  4
 287+ F3EF FD                                   DB 253                                                  ; System 253, Galaxy 1, Mission 1     Errius = Token  5
 288+ F3F0 4F                                   DB 79                                                   ; System  79, Galaxy 1, Mission 1     Inbibe = Token  6
 289+ F3F1 35                                   DB 53                                                   ; System  53, Galaxy 1, Mission 1      Ausar = Token  7
 290+ F3F2 76                                   DB 118                                                  ; System 118, Galaxy 1, Mission 1     Usleri = Token  8
 291+ F3F3 64                                   DB 100                                                  ; System 100, Galaxy 2                Arredi = Token  9
 292+ F3F4 20                                   DB 32                                                   ; System  32, Galaxy 1, Mission 1     Bebege = Token 10
 293+ F3F5 44                                   DB 68                                                   ; System  68, Galaxy 1, Mission 1     Cearso = Token 11
 294+ F3F6 A4                                   DB 164                                                  ; System 164, Galaxy 1, Mission 1     Dicela = Token 12
 295+ F3F7 DC                                   DB 220                                                  ; System 220, Galaxy 1, Mission 1     Eringe = Token 13
 296+ F3F8 6A                                   DB 106                                                  ; System 106, Galaxy 1, Mission 1     Gexein = Token 14
 297+ F3F9 10                                   DB 16                                                   ; System  16, Galaxy 1, Mission 1     Isarin = Token 15
 298+ F3FA A2                                   DB 162                                                  ; System 162, Galaxy 1, Mission 1   Letibema = Token 16
 299+ F3FB 03                                   DB 3                                                    ; System   3, Galaxy 1, Mission 1     Maisso = Token 17
 300+ F3FC 6B                                   DB 107                                                  ; System 107, Galaxy 1, Mission 1       Onen = Token 18
 301+ F3FD 1A                                   DB 26                                                   ; System  26, Galaxy 1, Mission 1     Ramaza = Token 19
 302+ F3FE C0                                   DB 192                                                  ; System 192, Galaxy 1, Mission 1     Sosole = Token 20
 303+ F3FF B8                                   DB 184                                                  ; System 184, Galaxy 1, Mission 1     Tivere = Token 21
 304+ F400 05                                   DB 5                                                    ; System   5, Galaxy 1, Mission 1     Veriar = Token 22
 305+ F401 65                                   DB 101                                                  ; System 101, Galaxy 2, Mission 1     Xeveon = Token 23
 306+ F402 C1                                   DB 193                                                  ; System 193, Galaxy 1, Mission 1     Orarra = Token 24
 307+ F403 29                                   DB 41                                                   ; System  41, Galaxy 2                Anreer = Token 25
 308+ F404 07                                   DB 7                                                    ; System   7, Galaxy 0                  Lave = Token 26
 309+ F405 2E                                   DB 46                                                   ; System  46, Galaxy 0              Riedquat = Token 27
 310+ F406
 311+ F406                  INCLUDE "./Data/EquipmentEquates.asm"
# file opened: ././Data/EquipmentEquates.asm
   1++F406
   2++F406              EQ_FUEL                 EQU 0
   3++F406              EQ_MISSILE              EQU 1
   4++F406              EQ_CARGO_BAY            EQU 2
   5++F406              EQ_ECM                  EQU 3
   6++F406              EQ_FUEL_SCOOPS          EQU 4
   7++F406              EQ_ESCAPE_POD           EQU 5
   8++F406              EQ_ENERGY_BOMB          EQU 6
   9++F406              EQ_ENERGY_UNIT          EQU 7
  10++F406              EQ_DOCK_COMP            EQU 8
  11++F406              EQ_GAL_DRIVE            EQU 9
  12++F406              EQ_FRONT_PULSE          EQU 10
  13++F406              EQ_REAR_PULSE           EQU 11
  14++F406              EQ_LEFT_PULSE           EQU 12
  15++F406              EQ_RIGHT_PULSE          EQU 13
  16++F406              EQ_FRONT_BEAM           EQU 14
  17++F406              EQ_REAR_BEAM            EQU 15
  18++F406              EQ_LEFT_BEAM            EQU 16
  19++F406              EQ_RIGHT_BEAM           EQU 17
  20++F406              EQ_FRONT_MINING         EQU 18
  21++F406              EQ_REAR_MINING          EQU 19
  22++F406              EQ_LEFT_MINING          EQU 20
  23++F406              EQ_RIGHT_MINING         EQU 21
  24++F406              EQ_FRONT_MILITARY       EQU 22
  25++F406              EQ_REAR_MILITARY        EQU 23
  26++F406              EQ_LEFT_MILITARY        EQU 24
  27++F406              EQ_RIGHT_MILITARY       EQU 25
  28++F406
  29++F406              EQ_ITEM_COUNT           EQU EQ_RIGHT_MILITARY+1
  30++F406
# file closed: ././Data/EquipmentEquates.asm
 312+ F406
 313+ F406              EquipNameTableRowLen    EQU 8
 314+ F406 B1 88 00 00  ShipEquipNameTable      DW  WordFuel,       0,              0,          0
 314+ F40A 00 00 00 00
 315+ F40E 4E 8C 00 00                          DW  WordMissile,    0,              0,          0
 315+ F412 00 00 00 00
 316+ F416 96 88 A7 88                          DW  WordLarge,      WordCargo,      WordBay,    0
 316+ F41A AD 88 00 00
 317+ F41E BD 88 C4 88                          DW  WordECM,        WordSystem,     0,          0
 317+ F422 00 00 00 00
 318+ F426 B1 88 B6 88                          DW  WordFuel,       WordScoops,     0,          0
 318+ F42A 00 00 00 00
 319+ F42E 9C 88 A3 88                          DW  WordEscape,     WordPod,        0,          0
 319+ F432 00 00 00 00
 320+ F436 CB 88 D2 88                          DW  WordEnergy,     WordBomb,       0,          0
 320+ F43A 00 00 00 00
 321+ F43E 30 89 CB 88                          DW  WordExtra,      WordEnergy,     WordUnit,   0
 321+ F442 FE 88 00 00
 322+ F446 0A 89 12 89                          DW  WordDocking,    WordComputers,  0,          0
 322+ F44A 00 00 00 00
 323+ F44E 27 89 66 8B                          DW  WordGalactic,   WordHyperdrive, 0,          0
 323+ F452 00 00 00 00
 324+ F456 80 88 DD 88                          DW  WordFront,      WordPulse,      WordLaser,  0
 324+ F45A D7 88 00 00
 325+ F45E 91 88 DD 88                          DW  WordRear,       WordPulse,      WordLaser,  0
 325+ F462 D7 88 00 00
 326+ F466 8C 88 DD 88                          DW  WordLeft,       WordPulse,      WordLaser,  0
 326+ F46A D7 88 00 00
 327+ F46E 86 88 DD 88                          DW  WordRight,      WordPulse,      WordLaser,  0
 327+ F472 D7 88 00 00
 328+ F476 80 88 E3 88                          DW  WordFront,      WordBeam,       WordLaser,  0
 328+ F47A D7 88 00 00
 329+ F47E 91 88 E3 88                          DW  WordRear,       WordBeam,       WordLaser,  0
 329+ F482 D7 88 00 00
 330+ F486 8C 88 E3 88                          DW  WordLeft,       WordBeam,       WordLaser,  0
 330+ F48A D7 88 00 00
 331+ F48E 86 88 E3 88                          DW  WordRight,      WordBeam,       WordLaser,  0
 331+ F492 D7 88 00 00
 332+ F496 80 88 F0 88                          DW  WordFront,      WordMining,     WordLaser,  0
 332+ F49A D7 88 00 00
 333+ F49E 91 88 F0 88                          DW  WordRear,       WordMining,     WordLaser,  0
 333+ F4A2 D7 88 00 00
 334+ F4A6 8C 88 F0 88                          DW  WordLeft,       WordMining,     WordLaser,  0
 334+ F4AA D7 88 00 00
 335+ F4AE 86 88 F0 88                          DW  WordRight,      WordMining,     WordLaser,  0
 335+ F4B2 D7 88 00 00
 336+ F4B6 80 88 71 8B                          DW  WordFront,      WordMilitary,   WordLaser,  0
 336+ F4BA D7 88 00 00
 337+ F4BE 91 88 71 8B                          DW  WordRear,       WordMilitary,   WordLaser,  0
 337+ F4C2 D7 88 00 00
 338+ F4C6 8C 88 71 8B                          DW  WordLeft,       WordMilitary,   WordLaser,  0
 338+ F4CA D7 88 00 00
 339+ F4CE 86 88 71 8B                          DW  WordRight,      WordMilitary,   WordLaser,  0
 339+ F4D2 D7 88 00 00
 340+ F4D6
 341+ F4D6              ;Each row is 7 bytes
 342+ F4D6              ;                                                               12345  6  789012345678901
 343+ F4D6              ;	canbuy;
 344+ F4D6              ;	y;
 345+ F4D6              ;	show;
 346+ F4D6              ;	level;
 347+ F4D6              ;	price 2 bytes;
 348+ F4D6              ;	type;
 349+ F4D6              ;ShipFrontWeapons        DB EQ_FRONT_PULSE,  EQ_FRONT_PULSE,     EQ_FRONT_MINING,    EQ_FRONT_MINING
 350+ F4D6              ;ShipRearWeapons         DB EQ_REAR_PULSE,   EQ_REAR_PULSE,      EQ_REAR_MINING,     EQ_REAR_MINING
 351+ F4D6              ;ShipLeftWeapons         DB EQ_LEFT_PULSE,   EQ_LEFT_PULSE,      EQ_LEFT_MINING,     EQ_LEFT_MINING
 352+ F4D6              ;ShipRightWeapons        DB EQ_RIGHT_PULSE,  EQ_RIGHT_PULSE,     EQ_RIGHT_MINING,    EQ_RIGHT_MINING
 353+ F4D6              ;                           c  y  s  t
 354+ F4D6              ;                           a  p  h  e                                            fi     P     Vi
 355+ F4D6              ;                           n  o  o  c                                            tt     o     ew
 356+ F4D6              ;                           B  s  w  h  price                  type               ed     s
 357+ F4D6 00 00 01 01  ShipEquipmentList       DB  0, 0, 1, 1, low     2, high     2, EQ_FUEL          , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 357+ F4DA 02 00 00 00
 357+ F4DE FF 00 00 00
 357+ F4E2 00 00 00 00
 358+ F4E6 00 01 01 01                          DB  0, 1, 1, 1, low   300, high   300, EQ_MISSILE       , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 358+ F4EA 2C 01 01 00
 358+ F4EE FF 00 00 00
 358+ F4F2 00 00 00 00
 359+ F4F6 00 02 01 01                          DB  0, 2, 1, 1, low  4000, high  4000, EQ_CARGO_BAY     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 359+ F4FA A0 0F 02 00
 359+ F4FE FF 00 00 00
 359+ F502 00 00 00 00
 360+ F506 00 03 01 02                          DB  0, 3, 1, 2, low  6000, high  6000, EQ_ECM           , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 360+ F50A 70 17 03 00
 360+ F50E FF 00 00 00
 360+ F512 00 00 00 00
 361+ F516 00 04 01 05                          DB  0, 4, 1, 5, low  5250, high  5250, EQ_FUEL_SCOOPS   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 361+ F51A 82 14 04 00
 361+ F51E FF 00 00 00
 361+ F522 00 00 00 00
 362+ F526 00 05 01 06                          DB  0, 5, 1, 6, low 10000, high 10000, EQ_ESCAPE_POD    , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 362+ F52A 10 27 05 00
 362+ F52E FF 00 00 00
 362+ F532 00 00 00 00
 363+ F536 00 06 01 07                          DB  0, 6, 1, 7, low  9000, high  9000, EQ_ENERGY_BOMB   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 363+ F53A 28 23 06 00
 363+ F53E FF 00 00 00
 363+ F542 00 00 00 00
 364+ F546 00 07 01 08                          DB  0, 7, 1, 8, low 15000, high 15000, EQ_ENERGY_UNIT   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 364+ F54A 98 3A 07 00
 364+ F54E FF 00 00 00
 364+ F552 00 00 00 00
 365+ F556 00 08 01 09                          DB  0, 8, 1, 9, low 15000, high 15000, EQ_DOCK_COMP     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 365+ F55A 98 3A 08 00
 365+ F55E FF 00 00 00
 365+ F562 00 00 00 00
 366+ F566 00 09 01 0A                          DB  0, 9, 1,10, low 50000, high 50000, EQ_GAL_DRIVE     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 366+ F56A 50 C3 09 00
 366+ F56E FF 00 00 00
 366+ F572 00 00 00 00
 367+ F576 00 0A 01 03                          DB  0,10, 1, 3, low  4000, high  4000, EQ_FRONT_PULSE   , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 367+ F57A A0 0F 0A 00
 367+ F57E 00 00 00 00
 367+ F582 00 00 00 00
 368+ F586 00 0B 01 03                          DB  0,11, 1, 3, low  4000, high  4000, EQ_REAR_PULSE    , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 368+ F58A A0 0F 0B 00
 368+ F58E 01 01 00 00
 368+ F592 00 00 00 00
 369+ F596 00 0C 01 03                          DB  0,12, 1, 3, low  4000, high  4000, EQ_LEFT_PULSE    , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 369+ F59A A0 0F 0C 00
 369+ F59E 02 02 00 00
 369+ F5A2 00 00 00 00
 370+ F5A6 00 0D 01 03                          DB  0,13, 1, 3, low  4000, high  4000, EQ_RIGHT_PULSE   , 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 370+ F5AA A0 0F 0D 00
 370+ F5AE 03 03 00 00
 370+ F5B2 00 00 00 00
 371+ F5B6 00 0E 00 04                          DB  0,14, 0, 4, low 10000, high 10000, EQ_FRONT_BEAM    , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 371+ F5BA 10 27 0E 00
 371+ F5BE 00 00 00 00
 371+ F5C2 00 00 00 00
 372+ F5C6 00 0F 00 04                          DB  0,15, 0, 4, low 10000, high 10000, EQ_REAR_BEAM     , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 372+ F5CA 10 27 0F 00
 372+ F5CE 01 01 00 00
 372+ F5D2 00 00 00 00
 373+ F5D6 00 10 00 04                          DB  0,16, 0, 4, low 10000, high 10000, EQ_LEFT_BEAM     , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 373+ F5DA 10 27 10 00
 373+ F5DE 02 02 00 00
 373+ F5E2 00 00 00 00
 374+ F5E6 00 11 00 04                          DB  0,17, 0, 4, low 10000, high 10000, EQ_RIGHT_BEAM    , 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 374+ F5EA 10 27 11 00
 374+ F5EE 03 03 00 00
 374+ F5F2 00 00 00 00
 375+ F5F6 00 12 00 0A                          DB  0,18, 0,10, low  8000, high  8000, EQ_FRONT_MINING  , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 375+ F5FA 40 1F 12 00
 375+ F5FE 00 00 00 00
 375+ F602 00 00 00 00
 376+ F606 00 13 00 0A                          DB  0,19, 0,10, low  8000, high  8000, EQ_REAR_MINING   , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 376+ F60A 40 1F 13 00
 376+ F60E 01 01 00 00
 376+ F612 00 00 00 00
 377+ F616 00 14 00 0A                          DB  0,20, 0,10, low  8000, high  8000, EQ_LEFT_MINING   , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 377+ F61A 40 1F 14 00
 377+ F61E 02 02 00 00
 377+ F622 00 00 00 00
 378+ F626 00 15 00 0A                          DB  0,21, 0,10, low  8000, high  8000, EQ_RIGHT_MINING  , 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 378+ F62A 40 1F 15 00
 378+ F62E 03 03 00 00
 378+ F632 00 00 00 00
 379+ F636 00 16 00 0A                          DB  0,22, 0,10, low 60000, high 60000, EQ_FRONT_MILITARY, 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 379+ F63A 60 EA 16 00
 379+ F63E 00 00 00 00
 379+ F642 00 00 00 00
 380+ F646 00 17 00 0A                          DB  0,23, 0,10, low 60000, high 60000, EQ_REAR_MILITARY , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 380+ F64A 60 EA 17 00
 380+ F64E 01 01 00 00
 380+ F652 00 00 00 00
 381+ F656 00 18 00 0A                          DB  0,24, 0,10, low 60000, high 60000, EQ_LEFT_MILITARY , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 381+ F65A 60 EA 18 00
 381+ F65E 02 02 00 00
 381+ F662 00 00 00 00
 382+ F666 00 19 00 0A                          DB  0,25, 0,10, low 60000, high 60000, EQ_RIGHT_MILITARY, 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 382+ F66A 60 EA 19 00
 382+ F66E 03 03 00 00
 382+ F672 00 00 00 00
 383+ F676              ShipEquipTableRowLen    EQU 16
 384+ F676              ShipEquipTableSize      EQU ($-ShipEquipmentList)/ShipEquipTableRowLen
 385+ F676
 386+ F676              ;------------------------------------------------------------------------------------------------------------------------------------
 387+ F676 2B           GalaxyRandSeed			DB	43	            ; Just some start values
 388+ F677 20           GalaxyRandSeed1			DB	32	            ; Just some start values
 389+ F678 0C           GalaxyRandSeed2			DB	12	            ; Just some start values
 390+ F679 42           GalaxyRandSeed3			DB	66	            ; Just some start values
 391+ F67A              GalaxySeedRandom:
 392+ F67A              ;------------------------------------------------------------------------------------------------------------------------------------
 393+ F67A CD 78 85     GetDigramGalaxySeed:    call	copy_galaxy_to_working
 394+ F67D 18 03                                jr		GetDigramWorkingSeed
 395+ F67F CD 90 85     GetDigramSystemSeed:    call	copy_system_to_working
 396+ F682 11 7C 8F     GetDigramWorkingSeed:   ld		de,name_expanded    ; ">GetDigram a = digram seed"
 397+ F685 06 03                                ld		b,3
 398+ F687 3A 01 80                             ld		a,(WorkingSeeds)
 399+ F68A E6 40                                and		$40
 400+ F68C 28 03                                jr		z,.SmallSizeName
 401+ F68E CD 9D 8F     .LargeSizeName:         call	NamingLoop
 402+ F691 CD 9D 8F     .SmallSizeName:         call	NamingLoop
 403+ F694 CD 9D 8F                             call	NamingLoop
 404+ F697 CD 9D 8F                             call	NamingLoop
 405+ F69A EB           .DoneName:              ex		de,hl
 406+ F69B 36 00                                ld		(hl),0
 407+ F69D EB                                   ex		de,hl
 408+ F69E C9                                   ret
 409+ F69F
 410+ F69F 11 76 F6     GalaxySetSeedFromHL:    ld      de,GalaxyRandSeed
 411+ F6A2              ; Uses registers a,b and hl
 412+ F6A2 B7           GalaxyDoRandom:         or      a                                               ; in 6502 this is called after a bcc instruction to will always be clear (see .detok2 and .dt6)
 413+ F6A3 3A 76 F6                             ld      a,(GalaxyRandSeed)
 414+ F6A6 CB 17        .Seed0Rolled:           rl      a                                               ; r0 << 1
 415+ F6A8 47                                   ld      b,a                                             ; b = reg x in 6502 so x = r0 << 1
 416+ F6A9 21 78 F6     .AddSeed2               ld      hl,GalaxyRandSeed2                              ;
 417+ F6AC 8E                                   adc     a,(hl)                                          ; a = r0 << 1 + r2
 418+ F6AD 32 76 F6     .SetRandSeed0:          ld		(GalaxyRandSeed),a					            ; set r0' = (r0 << 1) +  r2 + (r0 bit 7)
 419+ F6B0 78                                   ld      a,b
 420+ F6B1 32 78 F6     .SetRandSeed2:          ld      (GalaxyRandSeed2),a                             ; set r2' =  r0 << 1
 421+ F6B4 3A 77 F6     .GetRandSeed1:          ld      a,(GalaxyRandSeed1)
 422+ F6B7 47                                   ld      b,a                                             ; b = r1
 423+ F6B8 21 79 F6                             ld      hl,GalaxyRandSeed3
 424+ F6BB 8E                                   adc     a,(hl)                                          ; Adc from before may have set carry flag or may not, will be set if r0 << 1 + r2 + carry > 256
 425+ F6BC 32 77 F6                             ld      (GalaxyRandSeed1),a                             ; set r1' = r1 + r3 + carry
 426+ F6BF 4F                                   ld      c,a
 427+ F6C0 78                                   ld      a,b
 428+ F6C1 32 79 F6                             ld      (GalaxyRandSeed3),a                             ; set r3 = r1
 429+ F6C4 79                                   ld      a,c
 430+ F6C5 C9                                   ret
 431+ F6C6
 432+ F6C6              ;------------------------------------------------------------------------------------------------------------------------------------
 433+ F6C6 ED 31        galaxy_cpy_str_a_at_hl_to_de:add     hl,a
 434+ F6C8 ED 31                                add     hl,a
 435+ F6CA 7E                                   ld      a,(hl)              ;  Fetch low byte
 436+ F6CB 47                                   ld      b,a
 437+ F6CC 23                                   inc     hl
 438+ F6CD 7E                                   ld      a,(hl)              ;  Fetch high byte
 439+ F6CE 68                                   ld      l,b
 440+ F6CF 67                                   ld      h,a
 441+ F6D0 7E           GalaxyCopyLoop:         ld      a,(hl)
 442+ F6D1 FE 00                                cp      0
 443+ F6D3 28 05                                jr      z,.CopyDone
 444+ F6D5 12                                   ld      (de),a
 445+ F6D6 23                                   inc     hl
 446+ F6D7 13                                   inc     de
 447+ F6D8 18 F6                                jr      GalaxyCopyLoop
 448+ F6DA 12           .CopyDone:              ld      (de),a
 449+ F6DB C9                                   ret
 450+ F6DC              ;------------------------------------------------------------------------------------------------------------------------------------
 451+ F6DC 11 64 F1     galaxy_get_species:     ld      de,GalaxySpecies
 452+ F6DF 3E 28                                ld      a,"("
 453+ F6E1 12                                   ld      (de),a
 454+ F6E2 13                                   inc     de
 455+ F6E3 3A FC E8                             ld      a,(GalaxyWorkingSeed+4)
 456+ F6E6 CB 7F                                bit     7,a
 457+ F6E8 20 0A                                jr      nz,.NonHuman
 458+ F6EA 21 62 F1                             ld      hl,GalaxyInhabitantHumanIx
 459+ F6ED AF                                   xor     a
 460+ F6EE CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 461+ F6F1 C3 4F F7                             jp      .galaxy_species_exit
 462+ F6F4 3A FD E8     .NonHuman:              ld      a,(GalaxyWorkingSeed+5)
 463+ F6F7 CB 3F                                srl     a
 464+ F6F9 CB 3F                                srl     a
 465+ F6FB E6 07                                and     $07
 466+ F6FD FE 03                                cp      3
 467+ F6FF 30 0A                                jr      nc,.NotDesc1
 468+ F701 21 34 F1                             ld      hl,GalaxyInhabitantDesc1Ix
 469+ F704 CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 470+ F707 3E 20                                ld      a," "
 471+ F709 12                                   ld      (de),a
 472+ F70A 13                                   inc     de
 473+ F70B 3A FD E8     .NotDesc1:              ld      a,(GalaxyWorkingSeed+5)
 474+ F70E CB 3F                                srl     a
 475+ F710 CB 3F                                srl     a
 476+ F712 CB 3F                                srl     a
 477+ F714 CB 3F                                srl     a
 478+ F716 CB 3F                                srl     a
 479+ F718 FE 06                                cp      6
 480+ F71A 30 0A                                jr      nc,.NotDesc2
 481+ F71C 21 3A F1                             ld      hl,GalaxyInhabitantDesc2Ix
 482+ F71F CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 483+ F722 3E 20                                ld      a," "
 484+ F724 12                                   ld      (de),a
 485+ F725 13                                   inc     de
 486+ F726 3A F9 E8     .NotDesc2:              ld      a,(GalaxyWorkingSeed+1)
 487+ F729 47                                   ld      b,a
 488+ F72A 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 489+ F72D A8                                   xor     b
 490+ F72E E6 07                                and     $07
 491+ F730 F5                                   push    af
 492+ F731 FE 06                                cp      6
 493+ F733 30 0A                                jr      nc,.NotDesc3
 494+ F735 21 46 F1                             ld      hl,GalaxyInhabitantDesc3Ix
 495+ F738 CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 496+ F73B 3E 20                                ld      a," "
 497+ F73D 12                                   ld      (de),a
 498+ F73E 13                                   inc     de
 499+ F73F F1           .NotDesc3:              pop     af
 500+ F740 47                                   ld      b,a
 501+ F741 3A FD E8                             ld      a,(GalaxyWorkingSeed+5)
 502+ F744 E6 03                                and     $03
 503+ F746 80                                   add     a,b
 504+ F747 E6 07                                and     $07
 505+ F749 21 52 F1                             ld      hl,GalaxyInhabitantDesc4Ix
 506+ F74C CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 507+ F74F 3E 73        .galaxy_species_exit:   ld      a,"s"
 508+ F751 12                                   ld      (de),a
 509+ F752 13                                   inc     de
 510+ F753 3E 29                                ld      a,")"
 511+ F755 12                                   ld      (de),a
 512+ F756 13                                   inc     de
 513+ F757 AF                                   xor     a
 514+ F758 12                                   ld      (de),a
 515+ F759 C9                                   ret
 516+ F75A
 517+ F75A
 518+ F75A              ; To copy seed, loops from 3 to 0
 519+ F75A              ; copy seed X + 2 to target X
 520+ F75A              ; x = x -1
 521+ F75A
 522+ F75A              ; For lave we shoudl have "Lave is most famous for its vast rain forests and the Lavian tree grub"
 523+ F75A
 524+ F75A              GalaxyCapitaliseString: ; ">CapitaliseString hl = address"
 525+ F75A 23                                   inc		hl
 526+ F75B 7E                                   ld		a,(hl)
 527+ F75C FE 00                                cp		0
 528+ F75E C8                                   ret		z
 529+ F75F FE 5B                                cp		'Z'+1
 530+ F761 30 F7                                jr		nc,GalaxyCapitaliseString
 531+ F763 FE 41                                cp		'A'
 532+ F765 38 F3                                jr		c,GalaxyCapitaliseString
 533+ F767 C6 20        .LowerCase:             add		a,'a'-'A'
 534+ F769 77                                   ld		(hl),a
 535+ F76A 18 EE                                jr		GalaxyCapitaliseString
 536+ F76C
 537+ F76C
 538+ F76C              GalaxyGoatSoup:         ;ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 539+ F76C                                      ;call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 540+ F76C                                      ;cp      $FF
 541+ F76C                                      ;jr      z,.NoSystemFound
 542+ F76C 3A 03 80     .SeedGalaxy             ld      a,(WorkingSeeds+2)                              ;
 543+ F76F 32 76 F6                             ld      (GalaxyRandSeed),a                              ; r0 = Seed C
 544+ F772 3A 04 80                             ld      a,(WorkingSeeds+3)                              ;
 545+ F775 32 77 F6                             ld      (GalaxyRandSeed1),a                             ; r1 = Seeed D
 546+ F778 3A 05 80                             ld      a,(WorkingSeeds+4)                              ;
 547+ F77B 32 78 F6                             ld      (GalaxyRandSeed2),a                             ; r2 = Seed E
 548+ F77E 3A 06 80                             ld      a,(WorkingSeeds+5)                              ;
 549+ F781 32 79 F6                             ld      (GalaxyRandSeed3),a                             ; r3 = Seed F
 550+ F784 C9                                   ret
 551+ F785              ; For later......
 552+ F785 3E 05        .MarkExtendedDesc:      ld      a,5                                             ;  ("{lower case}{justify}{single cap}[86-90] IS [140-144].{cr}{left align}"
 553+ F787 F5           .GalaxyExpandDesc:      push    af
 554+ F788 47                                   ld      b,a                                             ; b = 6502 X reg
 555+ F789 C5                                   push    bc                                              ; save Y reg
 556+ F78A
 557+ F78A              ;------------------------------------------------------------------------------------------------------------------------------------
 558+ F78A              ; We enter here with BC = the Y and X Coordinates of the system to select in this galaxy
 559+ F78A              ; This is based on the docked BBC PDesc Pink Volcanoes version ratehr tha goat soup
 560+ F78A ED 43 5B E8  GalaxyPinkVolcano:      ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 561+ F78E CD 64 FC                             call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 562+ F791                                      ;cp      $FF
 563+ F791                                      ;jr      z,.NoSystemFound
 564+ F791              .SpecialDescs:          ; this is not implemented yet to read GalaxyExtendedDescs look at .PDL1
 565+ F791
 566+ F791
 567+ F791
 568+ F791              ;.NoSytemFound:          Print the "Unable to identify a system at present position"
 569+ F791
 570+ F791 00 00 00...  GalaxyNameCopy          DS      30
 571+ F7AF
 572+ F7AF 1E 00        ExpandAtHLToE:          ld      e,0
 573+ F7B1 7E           .ExpandTokenLoop:       ld      a,(hl)
 574+ F7B2 FE 3E                                cp      ">"
 575+ F7B4 C8                                   ret     z
 576+ F7B5 23                                   inc     hl
 577+ F7B6 16 0A                                ld      d,10
 578+ F7B8 ED 30                                mul
 579+ F7BA D6 30                                sub     "0"
 580+ F7BC 83                                   add     a,e
 581+ F7BD 5F                                   ld      e,a
 582+ F7BE 18 F1                                jr      .ExpandTokenLoop
 583+ F7C0
 584+ F7C0 E5           SelectTokenToHL:        push    hl                                          ;+1
 585+ F7C1 C5                                   push    bc                                          ;+2
 586+ F7C2 CD A2 F6                             call    GalaxyDoRandom
 587+ F7C5 C1                                   pop     bc                                          ;+1
 588+ F7C6 E1                                   pop     hl                                          ;+0
 589+ F7C7 16 00        .CalcOptionAToD:        ld      d,0
 590+ F7C9 FE 33                                cp      $33
 591+ F7CB DA CF F7                             jp      c,.Check66
 592+ F7CE 14           .IsGTE33:               inc     d
 593+ F7CF FE 66        .Check66:               cp      $66
 594+ F7D1 DA D5 F7                             jp      c,.Check99
 595+ F7D4 14           .IsGTE66:               inc     d
 596+ F7D5 FE 99        .Check99:               cp      $99
 597+ F7D7 DA DB F7     .IsGTE99:               jp      c,.CheckCC
 598+ F7DA 14                                   inc     d
 599+ F7DB FE CC        .CheckCC:               cp      $CC
 600+ F7DD 38 01                                jr      c,.TokenIdToAddress
 601+ F7DF 14           .ItGETCC:               inc     d
 602+ F7E0 21 1B EF     .TokenIdToAddress:      ld      hl,GalaxyDescList
 603+ F7E3 7B                                   ld      a,e
 604+ F7E4 CB 27                                sla     a                                               ; x 2
 605+ F7E6 ED 31                                add     hl,a                                            ; hl + a * 2
 606+ F7E8 ED 31                                add     hl,a                                            ; hl + a * 4
 607+ F7EA ED 31                                add     hl,a                                            ; hl + a * 6
 608+ F7EC ED 31                                add     hl,a                                            ; hl + a * 8
 609+ F7EE ED 31                                add     hl,a                                            ; hl + a * 10
 610+ F7F0 7A                                   ld      a,d
 611+ F7F1 ED 31                                add     hl,a
 612+ F7F3 ED 31                                add     hl,a                                            ; hl = desc array [e][d]
 613+ F7F5 7E           .LookUpDataFromTable:   ld      a,(hl)
 614+ F7F6 DD 6F                                ld      ixl,a
 615+ F7F8 23                                   inc     hl
 616+ F7F9 7E                                   ld      a,(hl)
 617+ F7FA DD 67                                ld      ixh,a                                           ; ix = address at (hl)
 618+ F7FC DD E5                                push    ix                                              ;+2
 619+ F7FE E1                                   pop     hl                                              ;+1
 620+ F7FF C9                                   ret
 621+ F800              ;------------------------------------------------------------------------------------------------------------------------------------
 622+ F800 E5           ProcessHSymbol:         push    hl                                              ;+1
 623+ F801 D5                                   push    de                                              ;+2
 624+ F802 C5                                   push    bc                                              ;+3
 625+ F803 21 91 F7     .CopyInNameH:           ld      hl, GalaxyNameCopy
 626+ F806 FD 54                                ld      d,iyh
 627+ F808 FD 5D                                ld      e,iyl
 628+ F80A CD D0 F6                             call    GalaxyCopyLoop
 629+ F80D FD 62                                ld      iyh,d
 630+ F80F FD 6B                                ld      iyl,e
 631+ F811 C1                                   pop     bc                                              ;+2
 632+ F812 D1                                   pop     de                                              ;+1
 633+ F813 E1                                   pop     hl
 634+ F814 C9                                   ret
 635+ F815              ;------------------------------------------------------------------------------------------------------------------------------------
 636+ F815 E5           ProcessISymbol:         push    hl                                              ;+1
 637+ F816 D5                                   push    de                                              ;+2
 638+ F817 C5                                   push    bc                                              ;+3
 639+ F818 21 91 F7     .CopyInNameI:           ld      hl, GalaxyNameCopy
 640+ F81B FD 54                                ld      d,iyh
 641+ F81D FD 5D                                ld      e,iyl
 642+ F81F CD D0 F6                             call    GalaxyCopyLoop
 643+ F822 FD 62                                ld      iyh,d
 644+ F824 FD 6B                                ld      iyl,e
 645+ F826 3E 69                                ld      a,"i"
 646+ F828 EB                                   ex      de,hl
 647+ F829 77                                   ld      (hl),a
 648+ F82A 23                                   inc     hl
 649+ F82B 3E 61                                ld      a,"a"
 650+ F82D 77                                   ld      (hl),a
 651+ F82E 23                                   inc     hl
 652+ F82F 3E 6E                                ld      a,"n"
 653+ F831 77                                   ld      (hl),a
 654+ F832 23                                   inc     hl
 655+ F833 E5                                   push    hl
 656+ F834 FD E1                                pop     iy
 657+ F836 C1                                   pop     bc                                              ;+2
 658+ F837 D1                                   pop     de                                              ;+1
 659+ F838 E1                                   pop     hl                                              ;+0
 660+ F839 C9                                   ret
 661+ F83A              ;------------------------------------------------------------------------------------------------------------------------------------
 662+ F83A E5           ProcessRSymbol:         push    hl                                              ;+1
 663+ F83B D5                                   push    de                                              ;+2
 664+ F83C CD A2 F6                             call    GalaxyDoRandom ;(Correct one or do we use teh clear carry version?)
 665+ F83F E6 03                                and     $03
 666+ F841 47                                   ld      b,a
 667+ F842 04                                   inc     b
 668+ F843 AF                                   xor     a
 669+ F844 4F                                   ld      c,a
 670+ F845 C5           .RLoop:                 push    bc                                              ;+3
 671+ F846 CD A2 F6                             call    GalaxyDoRandom
 672+ F849 C1                                   pop     bc                                              ;+2
 673+ F84A E6 3E                                and     $3E
 674+ F84C 21 A0 E8                             ld      hl,GalaxyName_digrams
 675+ F84F ED 31                                add     hl,a
 676+ F851 7E                                   ld      a,(hl)
 677+ F852 FE 41                                cp      "A"
 678+ F854 38 01                                jr      c,.NotLowercase
 679+ F856 81                                   add     a,c
 680+ F857 FD 77 00     .NotLowercase:          ld      (iy+0),a
 681+ F85A 23                                   inc     hl
 682+ F85B FD 23                                inc     iy
 683+ F85D 0E 20                                ld      c,$20               ; fixed force to lower case
 684+ F85F 7E                                   ld      a,(hl)
 685+ F860 FE 41                                cp      "A"
 686+ F862 38 01                                jr      c,.NotLowercase2
 687+ F864 81                                   add     a,c
 688+ F865 FD 77 00     .NotLowercase2:         ld      (iy+0),a
 689+ F868 FD 23                                inc     iy
 690+ F86A 10 D9                                djnz    .RLoop
 691+ F86C D1                                   pop     de                                              ;+1
 692+ F86D E1                                   pop     hl                                              ;+0
 693+ F86E C9                                   ret
 694+ F86F              ;------------------------------------------------------------------------------------------------------------------------------------
 695+ F86F ED 43 5B E8  GalaxyGenerateDesc:     ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 696+ F873 CD 64 FC                             call    galaxy_system_under_cursor
 697+ F876 CD BF FA     .CopySystemName:        call    galaxy_digram_seed                              ; make a local copy of system name
 698+ F879 21 7F E8                             ld      hl,GalaxyExpandedName
 699+ F87C 11 91 F7                             ld      de,GalaxyNameCopy
 700+ F87F CD D0 F6                             call    GalaxyCopyLoop
 701+ F882 21 91 F7     .CapitaliseName:        ld      hl,GalaxyNameCopy
 702+ F885 CD 5A F7                             call    GalaxyCapitaliseString
 703+ F888                                      ; we will also capitalise the local copy here later
 704+ F888 21 DE F3     .InitDescription:       ld      hl,GalaxyPlanetDescStarter                      ; Initialise galaxy description to  <14> is <22>
 705+ F88B 11 B2 F2                             ld      de,GalaxyPlanetSource
 706+ F88E CD D0 F6                             call    GalaxyCopyLoop
 707+ F891 AF           .ClearOutDescription:   xor     a
 708+ F892 21 85 F1                             ld      hl,GalaxyPlanetDescription
 709+ F895 77                                   ld      (hl),a
 710+ F896 11 86 F1                             ld      de,GalaxyPlanetDescription+1
 711+ F899 01 2C 01                             ld      bc,300                                          ; copy previous byte to current for 300 bytes (as we have DS 300 + 1)
 712+ F89C ED B0                                ldir                                                    ; zero it out, don't need this at the end but simplifies debugging
 713+ F89E CD 6C F7     .CopySeedToRandom:      call    GalaxyGoatSoup
 714+ F8A1 21 B2 F2                             ld      hl,GalaxyPlanetSource
 715+ F8A4 FD 21 85 F1                          ld      iy,GalaxyPlanetDescription
 716+ F8A8              ; At this point we are now prepped ready to expand the string to a full description
 717+ F8A8              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 718+ F8A8 7E           .ExpRecursive:          ld      a,(hl)
 719+ F8A9 FE 00                                cp      0
 720+ F8AB CA F0 F8                             jp      z,.ExpansionComplete
 721+ F8AE FE 3C                                cp      "<"
 722+ F8B0 C2 C3 F8                             jp      nz,.NotToken
 723+ F8B3 23           .ItIsAToken:            inc     hl
 724+ F8B4 CD AF F7     .ReadToken:             call    ExpandAtHLToE                                   ; here we have a <X> token
 725+ F8B7 23                                   inc     hl
 726+ F8B8 E5           .SaveCurrentPosition:   push    hl                                              ;+1 Save the current pointer to the text as we are now diverting off to another address
 727+ F8B9 CD C0 F7     .LookUpToken:           call    SelectTokenToHL                                 ; Get random token id by using d as list and e as offest against galaxydesc list and return address in hl
 728+ F8BC CD A8 F8                             call    .ExpRecursive
 729+ F8BF E1           .RestoreCurrentPosition:pop     hl                                              ;+0 get back our old HL we saved off
 730+ F8C0 C3 A8 F8     .TokenNextIteration:    jp      .ExpRecursive
 731+ F8C3              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 732+ F8C3 FE 25        .NotToken:              cp      "%"
 733+ F8C5 C2 E7 F8                             jp      nz,.RegularCharacter
 734+ F8C8 23                                   inc     hl                                              ; issue was that it was stuck on "%" and not reading the next character for the token to expand
 735+ F8C9 7E                                   ld      a,(hl)
 736+ F8CA FE 48                                cp      "H"
 737+ F8CC 20 07                                jr      nz,.IsItI
 738+ F8CE 23           .ItIsAnH:               inc     hl
 739+ F8CF CD 00 F8                             call    ProcessHSymbol
 740+ F8D2 C3 A8 F8                             jp      .ExpRecursive
 741+ F8D5 FE 49        .IsItI:                 cp      "I"
 742+ F8D7 20 07                                jr      nz,.ItIsR
 743+ F8D9 23           .ItIsAnI:               inc     hl
 744+ F8DA CD 15 F8                             call    ProcessISymbol
 745+ F8DD C3 A8 F8                             jp      .ExpRecursive
 746+ F8E0 CD 3A F8     .ItIsR:                 call    ProcessRSymbol
 747+ F8E3 23                                   inc     hl
 748+ F8E4 C3 A8 F8     .SystemNextIteration:   jp      .ExpRecursive
 749+ F8E7 FD 77 00     .RegularCharacter:      ld      (iy+0),a
 750+ F8EA FD 23                                inc     iy
 751+ F8EC 23                                   inc     hl
 752+ F8ED C3 A8 F8     .RegularNextIteration:  jp      .ExpRecursive
 753+ F8F0 AF           .ExpansionComplete:     xor     a
 754+ F8F1 FD 77 01                             ld      (iy+1),a    ; will thsi work as a bodge
 755+ F8F4 C9                                   ret
 756+ F8F5              ;----------------------------------------------------------------------------------------------------------------------------------
 757+ F8F5 3A 0C E9     galaxy_equip_market:    ld      a,(GalaxyDisplayTekLevel)
 758+ F8F8 3C                                   inc     a
 759+ F8F9 67                                   ld      h,a
 760+ F8FA 0E 00                                ld      c,0
 761+ F8FC 06 1A                                ld      b,ShipEquipTableSize            ;NO_OF_EQUIP_ITEMS
 762+ F8FE 11 10 00                             ld      de,ShipEquipTableRowLen         ; Bytes per row
 763+ F901 DD 21 D6 F4                          ld      ix,ShipEquipmentList
 764+ F905 DD 7E 06     .ItemCheckLoop:         ld      a,(ix+6)                        ; is it type fuel
 765+ F908 FE 00                                cp      0
 766+ F90A                                      ; Check Cash TODO
 767+ F90A 28 00                                jr      z,.CheckTechLevel
 768+ F90C DD 7E 03     .CheckTechLevel:        ld      a,(ix+3)                        ; ItemTech Level
 769+ F90F BC                                   cp      h
 770+ F910                                      ;jr      nc,.DoNotShowItem
 771+ F910 DD 7E 02     .CheckShowItem:         ld      a,(ix+2)
 772+ F913 FE 00                                cp      0
 773+ F915                                    ;  jr      z,.DoNotShowItem
 774+ F915 79           .ShowItem:              ld      a,c
 775+ F916 DD 71 01                             ld      (ix+1),c                        ; Show Item Row Id
 776+ F919 DD 7E 06     .CheckFitted:           ld      a,(ix+6)
 777+ F91C FE 00                                cp      EQ_FUEL
 778+ F91E 28 18                                jr      z,.FuelLevel
 779+ F920 FE 01                                cp      EQ_MISSILE
 780+ F922 28 25                                jr      z,.CountMissiles
 781+ F924 21 EE 84     .IsFitted:              ld      hl,EquipmentFitted
 782+ F927 ED 31                                add     hl,a
 783+ F929 7E                                   ld      a,(hl)
 784+ F92A FE 00                                cp      0
 785+ F92C 28 05                                jr      z,.NotFittedItem
 786+ F92E 3E 2A        .FittedItem:            ld      a,"*"
 787+ F930 C3 5A F9                             jp      .MoreToDoCheck
 788+ F933 3E 2D        .NotFittedItem:         ld      a,"-"
 789+ F935 C3 5A F9                             jp      .MoreToDoCheck
 790+ F938 3A D3 84     .FuelLevel:             ld      a,(Fuel)
 791+ F93B FE 46                                cp      MaxFuelLevel
 792+ F93D 28 05                                jr      z,.FullFuel
 793+ F93F 3E 2D        .NotFullFuel:           ld      a,"-"
 794+ F941 C3 5A F9                             jp      .MoreToDoCheck
 795+ F944 3E 2A        .FullFuel               ld      a,"*"                           ; later on do 3 starts low, med,full
 796+ F946 C3 5A F9                             jp      .MoreToDoCheck
 797+ F949 3A 20 80     .CountMissiles:         ld      a,(NbrMissiles)
 798+ F94C FE 00                                cp      0
 799+ F94E 28 05                                jr      z,.NoMissiles
 800+ F950 C6 30                                add     "0"
 801+ F952 C3 5A F9                             jp      .MoreToDoCheck
 802+ F955 3E 2D        .NoMissiles:            ld      a,"-"
 803+ F957 C3 5A F9                             jp      .MoreToDoCheck
 804+ F95A DD 77 07     .MoreToDoCheck:         ld      (ix+7),a                        ; update fitted status
 805+ F95D 0C                                   inc     c
 806+ F95E DD 19                                add     ix,de
 807+ F960 10 A3                                djnz    .ItemCheckLoop
 808+ F962 C9                                   ret
 809+ F963 3E FF        .DoNotShowItem          ld      a,$FF                           ; $FF = hide
 810+ F965 DD 77 01                             ld      (ix+1),a
 811+ F968 DD 19                                add     ix,de
 812+ F96A 10 99                                djnz    .ItemCheckLoop
 813+ F96C C9                                   ret
 814+ F96D              ;----------------------------------------------------------------------------------------------------------------------------------
 815+ F96D 3A FA E8     galaxy_planet_data:     ld      a,(GalaxyWorkingSeed+2)
 816+ F970 B7           .GenerateGovernment:    or      a
 817+ F971 CB 3F                                srl	    a                                               ; Government = seed2 / 8 & 7
 818+ F973 CB 3F                                srl	    a
 819+ F975 CB 3F                                srl	    a                                                   ;
 820+ F977 E6 07                                and     $07                                             ;
 821+ F979 32 0A E9                             ld      (GalaxyDisplayGovernment),a                     ;
 822+ F97C 3A F9 E8     .GenerateEconomy:       ld      a,(GalaxyWorkingSeed+1)
 823+ F97F E6 07                                and     $07
 824+ F981 47                                   ld      b,a
 825+ F982 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 826+ F985                                      JumpIfAGTENusng 1, .GreaterThan1
 826+ F985 FE 01       >                        cp     1
 826+ F987 D2 93 F9    >                        jp		nc,.GreaterThan1
 827+ F98A 78           .OneOrZero:             ld      a,b
 828+ F98B F6 02                                or      2
 829+ F98D 32 0B E9                             ld      (GalaxyDisplayEconomy),a
 830+ F990 C3 97 F9                             jp      .GenerateTechLevel
 831+ F993 78           .GreaterThan1:          ld      a,b
 832+ F994 32 0B E9                             ld      (GalaxyDisplayEconomy),a
 833+ F997 EE 07        .GenerateTechLevel:     xor     $07                                             ; tech = economy xor 7 + seed3 & 3 + government /2 + fovernemnt & 1
 834+ F999 47                                   ld      b,a
 835+ F99A 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 836+ F99D E6 03                                and     $03
 837+ F99F 80                                   add     b
 838+ F9A0 47                                   ld      b,a
 839+ F9A1 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 840+ F9A4 4F                                   ld      c,a
 841+ F9A5 CB 2F                                sra     a
 842+ F9A7 80                                   add     b
 843+ F9A8 47                                   ld      b,a
 844+ F9A9 79                                   ld      a,c
 845+ F9AA E6 01                                and     $1
 846+ F9AC 80                                   add     b
 847+ F9AD 32 0C E9                             ld      (GalaxyDisplayTekLevel),a
 848+ F9B0 CB 27        .GeneratePopulation:    sla     a                                               ; population = tech level * 4 + government + economy + 1
 849+ F9B2 CB 27                                sla     a
 850+ F9B4 21 0A E9                             ld      hl,GalaxyDisplayGovernment
 851+ F9B7 86                                   add     a,(hl)
 852+ F9B8 47                                   ld      b,a
 853+ F9B9 3A 0B E9                             ld      a,(GalaxyDisplayEconomy)
 854+ F9BC 80                                   add     a,b
 855+ F9BD 3C                                   inc     a
 856+ F9BE 32 0D E9                             ld      (GalaxyDisplayPopulation),a
 857+ F9C1 3A 0B E9     .GenerateProductivity:  ld      a,(GalaxyDisplayEconomy)
 858+ F9C4 EE 07                                xor     7
 859+ F9C6 C6 03                                add     3
 860+ F9C8 57                                   ld      d,a
 861+ F9C9 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 862+ F9CC C6 04                                add     4
 863+ F9CE 5F                                   ld      e,a
 864+ F9CF ED 30                                mul                                                     ; the next mulitply will be a 16 bit value
 865+ F9D1 3A 0D E9                             ld      a,(GalaxyDisplayPopulation)
 866+ F9D4 26 00                                ld      h,0
 867+ F9D6 6F                                   ld      l,a
 868+ F9D7 CD 98 91                             call    mulDEbyHL
 869+ F9DA EB                                   ex      de,hl
 870+ F9DB                                      ShiftDELeft1
 870+ F9DB CB 23       >			   sla e
 870+ F9DD CB 12       >			   rl  d
 871+ F9DF                                      ShiftDELeft1
 871+ F9DF CB 23       >			   sla e
 871+ F9E1 CB 12       >			   rl  d
 872+ F9E3                                      ShiftDELeft1
 872+ F9E3 CB 23       >			   sla e
 872+ F9E5 CB 12       >			   rl  d
 873+ F9E7 ED 53 0E E9                          ld      (GalaxyDisplayProductivity),de
 874+ F9EB 3A FD E8     .GenerateRadius:        ld		a,(GalaxyWorkingSeed+5)                         ;radius min = 256*11 = 2816 km
 875+ F9EE E6 0F                                and		$0F
 876+ F9F0 C6 0B                                add     11
 877+ F9F2 47                                   ld      b,a
 878+ F9F3 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 879+ F9F6 4F                                   ld      c,a
 880+ F9F7 ED 43 10 E9                          ld      (GalaxyDisplayRadius),bc
 881+ F9FB C9                                   ret
 882+ F9FC
 883+ F9FC              galaxy_master_seed_to_system:
 884+ F9FC 21 10 E0     		ld		hl,galaxy_master_seed
 885+ F9FF 11 E9 7F     		ld		de,SystemSeed
 886+ FA02              galaxy_copy_seed:
 887+ FA02 ED A0        		ldi
 888+ FA04 ED A0        		ldi
 889+ FA06 ED A0        		ldi
 890+ FA08 ED A0        		ldi
 891+ FA0A ED A0        		ldi
 892+ FA0C ED A0        		ldi
 893+ FA0E C9           		ret
 894+ FA0F
 895+ FA0F              galaxy_master_to_galaxy_working:
 896+ FA0F 21 10 E0     		ld		hl,galaxy_master_seed
 897+ FA12 11 F8 E8     		ld		de,GalaxyWorkingSeed
 898+ FA15 18 EB        		jr		galaxy_copy_seed
 899+ FA17
 900+ FA17              galaxy_master_to_galaxy_naming:
 901+ FA17 21 10 E0     		ld		hl,galaxy_master_seed
 902+ FA1A 11 FE E8     		ld		de,GalaxyNamingSeed
 903+ FA1D 18 E3        		jr		galaxy_copy_seed
 904+ FA1F
 905+ FA1F              working_seed_to_galaxy_working:
 906+ FA1F 21 01 80             ld      hl,WorkingSeeds
 907+ FA22 11 F8 E8     		ld		de,GalaxyWorkingSeed
 908+ FA25 18 DB        		jr		galaxy_copy_seed
 909+ FA27
 910+ FA27              working_seed_to_galaxy_naming:
 911+ FA27 21 01 80             ld      hl,WorkingSeeds
 912+ FA2A 11 FE E8     		ld		de,GalaxyNamingSeed
 913+ FA2D 18 D3        		jr		galaxy_copy_seed
 914+ FA2F
 915+ FA2F              galaxy_ix_seed_to_galaxy_naming:
 916+ FA2F DD E5                push    ix
 917+ FA31 E1                   pop     hl
 918+ FA32 11 FE E8     		ld		de,GalaxyNamingSeed
 919+ FA35 18 CB        		jr		galaxy_copy_seed
 920+ FA37
 921+ FA37
 922+ FA37              galaxy_working_seed_to_galaxy_naming:
 923+ FA37 21 F8 E8             ld      hl,GalaxyWorkingSeed
 924+ FA3A 11 FE E8     		ld		de,GalaxyNamingSeed
 925+ FA3D 18 C3        		jr		galaxy_copy_seed
 926+ FA3F
 927+ FA3F              galaxy_working_seed_to_system:
 928+ FA3F 21 F8 E8     		ld		hl,GalaxyWorkingSeed
 929+ FA42 11 E9 7F     		ld		de,SystemSeed
 930+ FA45 18 BB        		jr		galaxy_copy_seed
 931+ FA47
 932+ FA47              system_seed_to_galaxy_working:
 933+ FA47 21 E9 7F     		ld		hl,SystemSeed
 934+ FA4A 11 F8 E8     		ld		de,GalaxyWorkingSeed
 935+ FA4D 18 B3        		jr		galaxy_copy_seed
 936+ FA4F
 937+ FA4F
 938+ FA4F              system_seed_to_galaxy_naming:
 939+ FA4F 21 E9 7F     		ld		hl,SystemSeed
 940+ FA52 11 FE E8     		ld		de,GalaxyNamingSeed
 941+ FA55 18 AB        		jr		galaxy_copy_seed
 942+ FA57
 943+ FA57              ix_seed_to_galaxy_working:
 944+ FA57 DD E5                push    ix
 945+ FA59 E1                   pop     hl
 946+ FA5A 11 F8 E8     		ld		de,GalaxyWorkingSeed
 947+ FA5D 18 A3        		jr		galaxy_copy_seed
 948+ FA5F
 949+ FA5F              ; Here we twist just once rather than the usual4 for a system
 950+ FA5F 3A FE E8     NextGalaxyNamingSeed:   ld		a,(GalaxyNamingSeed)			; QQ15 ; x = a + c
 951+ FA62 B7                                   or		a							; clear carry flag
 952+ FA63 21 00 E9                             ld		hl,GalaxyNamingSeed+2			; hl -> qq+2 [c]
 953+ FA66 86                                   add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
 954+ FA67 47                                   ld		b,a							; partial sum lo [x]
 955+ FA68              ; y = b + d	+ carry
 956+ FA68 3A FF E8                             ld		a,(GalaxyNamingSeed+1)          ; [b]
 957+ FA6B 21 01 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
 958+ FA6E 8E                                   adc		a,(hl)						; note add with carry
 959+ FA6F 4F                                   ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
 960+ FA70 3A 00 E9                             ld		a,(GalaxyNamingSeed+2)
 961+ FA73 32 FE E8                             ld		(GalaxyNamingSeed+0),a			; copy qq152 to qq150 [a] = [c]
 962+ FA76 3A 01 E9                             ld		a,(GalaxyNamingSeed+3)
 963+ FA79 32 FF E8                             ld		(GalaxyNamingSeed+1),a			; copy qq153 to qq151 [b] = [d]
 964+ FA7C 3A 03 E9                             ld		a,(GalaxyNamingSeed+5)
 965+ FA7F 32 01 E9                             ld		(GalaxyNamingSeed+3),a			; copy qq155 to qq153 [d] = [f]
 966+ FA82 3A 02 E9                             ld		a,(GalaxyNamingSeed+4)
 967+ FA85 32 00 E9                             ld		(GalaxyNamingSeed+2),a			; copy qq154 to qq152 [c] = [e]
 968+ FA88 B7                                   or		a
 969+ FA89 78                                   ld		a,b
 970+ FA8A 21 00 E9                             ld		hl,GalaxyNamingSeed+2		    ; hl -> qq+2
 971+ FA8D 86                                   add	    a,(hl)
 972+ FA8E 32 02 E9                             ld		(GalaxyNamingSeed+4),a			; e = x + [c]
 973+ FA91 79                                   ld		a,c
 974+ FA92 21 01 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 )we don't inc as it affects carry)
 975+ FA95 8E                                   adc		a,(hl)
 976+ FA96 32 03 E9                             ld		(GalaxyNamingSeed+5),a			; f = y + [d] + carry
 977+ FA99 C9                                   ret
 978+ FA9A
 979+ FA9A
 980+ FA9A 3A 03 E9     GalaxyNamingLoop:       ld		a,(GalaxyNamingSeed+5)	        ; a = first byte of name seed
 981+ FA9D E6 1F                                and 	$1F					            ; Keep bottom 5 bits only
 982+ FA9F FE 00                                cp		0					            ; 0 = skip 2 chars
 983+ FAA1 28 12                                jr		z,.SkipPhrase
 984+ FAA3 C6 0C                                add		a,12
 985+ FAA5 CB 27                                sla		a					            ; phrase = (a+12)*2
 986+ FAA7 21 A0 E8                             ld		hl,GalaxyName_digrams
 987+ FAAA ED 31                                add		hl,a
 988+ FAAC ED A0                                ldi
 989+ FAAE 7E                                   ld		a,(hl)
 990+ FAAF FE 3F                                cp		'?'
 991+ FAB1 28 02                                jr		z,.SkipPhrase
 992+ FAB3 ED A0        .AddExtra:              ldi
 993+ FAB5 D5           .SkipPhrase:            push	de
 994+ FAB6 CD 5F FA                             call	NextGalaxyNamingSeed
 995+ FAB9 D1                                   pop		de
 996+ FABA C9                                   ret
 997+ FABB
 998+ FABB              ; takes location in BC, finds seed and expands the name
 999+ FABB ED 43 5B E8  galaxy_name_at_bc:      ld      (GalaxyTargetSystem),bc
1000+ FABF CD 64 FC     galaxy_digram_seed:     call    galaxy_system_under_cursor
1001+ FAC2 FE 00                                cp      0
1002+ FAC4 C8                                   ret     z
1003+ FAC5
1004+ FAC5 CD 27 FA     GalaxyDigramWorkings:   call    working_seed_to_galaxy_naming
1005+ FAC8 C3 E0 FA                             jp      GalaxyDigramNamingSeed
1006+ FACB
1007+ FACB CD 17 FA     GalaxyDigramSeed:       call    galaxy_master_to_galaxy_naming
1008+ FACE C3 E0 FA                             jp      GalaxyDigramNamingSeed
1009+ FAD1
1010+ FAD1 CD 37 FA     GalaxyDigramWorkingSeed:call    galaxy_working_seed_to_galaxy_naming
1011+ FAD4 C3 E0 FA                             jp      GalaxyDigramNamingSeed
1012+ FAD7
1013+ FAD7 CD 2F FA     GalaxyDigramWIXSeed:    call    galaxy_ix_seed_to_galaxy_naming
1014+ FADA C3 E0 FA                             jp      GalaxyDigramNamingSeed
1015+ FADD
1016+ FADD CD 4F FA     SystemGetDigramSeed:    call    system_seed_to_galaxy_naming
1017+ FAE0
1018+ FAE0 11 7F E8     GalaxyDigramNamingSeed: ld		de,GalaxyExpandedName
1019+ FAE3 06 03        GalaxyDigramToDE:       ld		b,3
1020+ FAE5 3A FE E8                             ld		a,(GalaxyNamingSeed)
1021+ FAE8 E6 40                                and		$40
1022+ FAEA 28 03                                jr		z,.SmallSizeName
1023+ FAEC CD 9A FA     .LargeSizeName:         call	GalaxyNamingLoop
1024+ FAEF CD 9A FA     .SmallSizeName:         call	GalaxyNamingLoop
1025+ FAF2 CD 9A FA                             call	GalaxyNamingLoop
1026+ FAF5 CD 9A FA                             call	GalaxyNamingLoop
1027+ FAF8 EB           .DoneName:              ex		de,hl
1028+ FAF9 36 00                                ld		(hl),0
1029+ FAFB EB                                   ex		de,hl
1030+ FAFC AF                                   xor     a
1031+ FAFD 3D                                   dec     a
1032+ FAFE C9                                   ret
1033+ FAFF              ;reorte X 13 Y 97
1034+ FAFF
1035+ FAFF              ;----------------------------------------------------------------------------------------------------------------------------------
1036+ FAFF 3A 5D E8     is_system_found:        ld      a,(GalaxySearchLength)
1037+ FB02                                      ;dec     a                       ; as we won't check the /0 just first match
1038+ FB02 4F                                   ld      c,a                     ; will always be max of 32 as that is what length routine does
1039+ FB03 06 00                                ld      b,0                     ; so we can use cpir
1040+ FB05 11 5E E8     .readyToSearch:         ld      de,GalaxySearchString   ; hl = string we are serching
1041+ FB08 21 7F E8                             ld      hl,GalaxyExpandedName   ; de = the expanded galaxy name
1042+ FB0B 7E           .searchLoop:            ld      a,(hl)                  ; if the string is too short then maybe there is a longer one to find
1043+ FB0C                                      JumpIfAIsZero   .noMatch        ; but
1043+ FB0C A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
1043+ FB0D CA 1B FB    >                        jp	    z, .noMatch
1044+ FB10 1A                                   ld      a,(de)                  ; get the character to search for
1045+ FB11 ED A1                                cpi                             ; compare with value in A from HL
1046+ FB13 20 06                                jr      nz,.noMatch
1047+ FB15 13                                   inc     de                      ; move to next search character
1048+ FB16 E2 1E FB                             jp      po, .matched            ; if c = 0 then we have hit the bingpot
1049+ FB19 18 F0                                jr      .searchLoop             ; else keep looping
1050+ FB1B              .noMatch:               SetAFalse
1050+ FB1B 3E FF       >                        ld      a,$FF
1051+ FB1D C9                                   ret
1052+ FB1E              .matched:               SetATrue
1052+ FB1E AF          >                        xor     a
1053+ FB1F C9                                   ret
1054+ FB20
1055+ FB20 21 5E E8     set_galaxy_search_len:  ld      hl,GalaxySearchString
1056+ FB23 06 00                                ld      b,0
1057+ FB25 0E 20                                ld      c,32                    ; limiter for missing /0
1058+ FB27 7E           .SearchLoop:            ld      a,(hl)
1059+ FB28                                      JumpIfAIsZero .foundLength
1059+ FB28 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
1059+ FB29 CA 34 FB    >                        jp	    z, .foundLength
1060+ FB2C 04                                   inc     b
1061+ FB2D 0D                                   dec     c
1062+ FB2E 28 04                                jr      z,.foundLength
1063+ FB30 23                                   inc     hl
1064+ FB31 C3 27 FB                             jp      .SearchLoop
1065+ FB34 78           .foundLength:           ld      a,b
1066+ FB35 32 5D E8                             ld      (GalaxySearchLength),a
1067+ FB38 C9                                   ret
1068+ FB39
1069+ FB39              ; find system by searching for GalaxySearchString
1070+ FB39 CD 20 FB     find_system_by_name:    call    set_galaxy_search_len
1071+ FB3C AF                                   xor     a
1072+ FB3D 32 76 7F                             ld      (XSAV),a
1073+ FB40 DD 21 16 E0                          ld      ix,galaxy_data
1074+ FB44 CD 57 FA     .nextSystem:            call    ix_seed_to_galaxy_working
1075+ FB47 CD D1 FA                             call    GalaxyDigramWorkingSeed
1076+ FB4A CD FF FA                             call    is_system_found
1077+ FB4D                                      JumpIfATrue .FoundAtIX
1077+ FB4D A7          >                        and     a
1077+ FB4E CA 6A FB    >                        jp      z, .FoundAtIX
1078+ FB51 3A 76 7F     .notFoundYet:           ld      a,(XSAV)
1079+ FB54 3D                                   dec     a
1080+ FB55 28 10                                jr      z,.NoMoreSystems
1081+ FB57 32 76 7F     .moreToSearch:          ld      (XSAV),a
1082+ FB5A DD E5                                push    ix
1083+ FB5C E1                                   pop     hl
1084+ FB5D ED 34 08 00                          add     hl,8
1085+ FB61 E5                                   push    hl
1086+ FB62 DD E1                                pop     ix
1087+ FB64 C3 44 FB                             jp      .nextSystem
1088+ FB67 3E FF        .NoMoreSystems:         ld      a,$FF
1089+ FB69 C9                                   ret
1090+ FB6A CD 57 FA     .FoundAtIX              call    ix_seed_to_galaxy_working
1091+ FB6D C9                                   ret
1092+ FB6E              ;----------------------------------------------------------------------------------------------------------------------------------
1093+ FB6E 00 00        nearestfound:           DW 0
1094+ FB70              ; In here de carries current nearest and loads into nearest found
1095+ FB70              ; does a basic distance check for x then y each under threshold, then does x+y under threshold  jsut in case we have an extreme like 0 x and high dist y
1096+ FB70 DD 21 16 E0  find_nearest_to_bc:     ld      ix,galaxy_data
1097+ FB74 FD 26 00                             ld      iyh,0
1098+ FB77 FD 2E 78                             ld      iyl,120
1099+ FB7A ED 43 6E FB                          ld      (nearestfound),bc
1100+ FB7E DD 7E 03     find_nearest_loop:      ld      a,(ix+3)                        ;
1101+ FB81 5F                                   ld      e,a                             ; e= current seed x
1102+ FB82                                      JumpIfALTNusng c, nearestXPosLT         ; not we need to know if its e - c or c - e we coudl do 2's compliement of course
1102+ FB82 B9          >                        cp      c
1102+ FB83 DA 94 FB    >                        jp		c, nearestXPosLT
1103+ FB86 D5           nearestXPosGTE:         push    de                              ;
1104+ FB87 26 00                                ld      h,0                             ;
1105+ FB89 6F                                   ld      l,a                             ; hl = seed x
1106+ FB8A 16 00                                ld      d,0                             ;
1107+ FB8C 59                                   ld      e,c                             ; de = nearest x
1108+ FB8D B7                                   or      a                               ;
1109+ FB8E ED 52                                sbc     hl,de                           ; hl = distance between the two
1110+ FB90 D1                                   pop     de
1111+ FB91 C3 9E FB                             jp      nearestDistXPos
1112+ FB94 D5           nearestXPosLT:          push    de                              ;
1113+ FB95 26 00                                ld      h,0                             ;
1114+ FB97 69                                   ld      l,c                             ; hl = nearest x
1115+ FB98 16 00                                ld      d,0                             ;
1116+ FB9A B7                                   or      a                               ; de = seed x
1117+ FB9B ED 52                                sbc     hl,de                           ;
1118+ FB9D D1                                   pop     de                              ; hl = distance between the two
1119+ FB9E 7D           nearestDistXPos:        ld      a,l                             ; so l = abs distance as does a
1120+ FB9F FD BD                                cp      iyl                             ; under initial threshold?
1121+ FBA1 30 3D                                jr      nc,find_nearest_miss            ; no so its a miss
1122+ FBA3               ;DEBUG                       ld      l,a                             ; l = distance (we can drop thsi as it was done above!)
1123+ FBA3 DD 7E 01                             ld      a,(ix+1)                        ;
1124+ FBA6 57                                   ld      d,a                             ; d = seed y
1125+ FBA7                                      JumpIfALTNusng b, nearestYPosLT         ; determine abs calc
1125+ FBA7 B8          >                        cp      b
1125+ FBA8 DA BC FB    >                        jp		c, nearestYPosLT
1126+ FBAB E5           nearestYPosGTE:         push    hl                              ; save current x distance
1127+ FBAC D5                                   push    de                              ;
1128+ FBAD 26 00                                ld      h,0                             ;
1129+ FBAF 6F                                   ld      l,a                             ; hl = seed y
1130+ FBB0 16 00                                ld      d,0                             ;
1131+ FBB2 58                                   ld      e,b                             ; de = nearest y
1132+ FBB3 B7                                   or      a                               ;
1133+ FBB4 ED 52                                sbc     hl,de                           ; hl = distance between the two
1134+ FBB6 7D                                   ld      a,l
1135+ FBB7 D1                                   pop     de
1136+ FBB8 E1                                   pop     hl
1137+ FBB9 C3 CA FB                             jp      nearestDistYPos
1138+ FBBC E5           nearestYPosLT:          push    hl                              ; save current x distance
1139+ FBBD D5                                   push    de                              ;
1140+ FBBE 26 00                                ld      h,0                             ;
1141+ FBC0 68                                   ld      l,b                             ; hl = nearest y
1142+ FBC1 5A                                   ld      e,d                             ;
1143+ FBC2 16 00                                ld      d,0                             ; de = seed y
1144+ FBC4 B7                                   or      a                               ;
1145+ FBC5 ED 52                                sbc     hl,de                           ; hl = distance between the two
1146+ FBC7 7D                                   ld      a,l
1147+ FBC8 D1                                   pop     de
1148+ FBC9 E1                                   pop     hl                              ; now we get distance in l back into hl, distance y is in a
1149+ FBCA FD BD        nearestDistYPos:        cp      iyl                             ; under initial threshold?
1150+ FBCC 30 12                                jr      nc, find_nearest_miss
1151+ FBCE 26 00                                ld      h,0                             ; hl = distance for x
1152+ FBD0 ED 31                                add     hl,a                            ; adding distance y
1153+ FBD2 7D                                   ld      a,l                             ; and copy it to l
1154+ FBD3 FD BD                                cp      iyl                             ; is the pair under distance
1155+ FBD5 30 09                                jr      nc, find_nearest_miss           ;
1156+ FBD7 FD 6F        nearest_found_a_hit:    ld      iyl,a                           ; so we have a hit
1157+ FBD9 ED 53 6E FB                          ld      (nearestfound),de               ;
1158+ FBDD                                      ReturnIfALTNusng 2                      ; exact match bail out, note 1 can be an exact match due to Y axis, as we are looking at seed pos then this is accurate enough and we won't hit dx 1 and dy 0 hopefully in any galaxy :)
1158+ FBDD FE 02       >                        cp    2
1158+ FBDF D8          >                        ret	 c
1159+ FBE0 DD E5        find_nearest_miss:      push     ix
1160+ FBE2 E1                                   pop      hl
1161+ FBE3 ED 34 08 00                          add      hl,8
1162+ FBE7 E5                                   push     hl
1163+ FBE8 DD E1                                pop      ix
1164+ FBEA FD 25                                dec     iyh
1165+ FBEC FD 7C                                ld      a,iyh
1166+ FBEE                                      JumpIfAIsNotZero find_nearest_loop
1166+ FBEE A7          >                        and     a
1166+ FBEF C2 7E FB    >                        jp	    nz,find_nearest_loop
1167+ FBF2 ED 4B 6E FB                          ld      bc ,(nearestfound)              ; if we hit here then after searching we have found a nearest
1168+ FBF6 C9                                   ret
1169+ FBF7              ;----------------------------------------------------------------------------------------------------------------------------------
1170+ FBF7              ; Does a sqare root distance
1171+ FBF7 16 00        galaxy_find_distance:   ld      d,0
1172+ FBF9 26 00                                ld      h,0
1173+ FBFB 3A 57 E8                             ld      a,(GalaxyPresentSystem)
1174+ FBFE 47                                   ld      b,a
1175+ FBFF 3A 59 E8                             ld      a,(GalaxyDestinationSystem)
1176+ FC02 B8                                   cp      b
1177+ FC03 20 0E                                jr      nz,.NotSame
1178+ FC05 C5           .XSame:                 push    bc
1179+ FC06 F5                                   push    af
1180+ FC07 3A 58 E8                             ld      a,(GalaxyPresentSystem+1)
1181+ FC0A 47                                   ld      b,a
1182+ FC0B 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1183+ FC0E B8                                   cp      b
1184+ FC0F C1                                   pop     bc
1185+ FC10 F1                                   pop     af
1186+ FC11 28 49                                jr      z,.ZeroDistance
1187+ FC13 30 08        .NotSame:               jr      nc,.DestinationGTEPresentX
1188+ FC15 68           .DestinationLTPresentX: ld      l,b
1189+ FC16 5F                                   ld      e,a
1190+ FC17 B7                                   or      a
1191+ FC18 ED 52                                sbc     hl,de
1192+ FC1A C3 22 FC                             jp      .SquareXDist
1193+ FC1D 6F           .DestinationGTEPresentX:ld      l,a
1194+ FC1E 58                                   ld      e,b
1195+ FC1F B7                                   or      a
1196+ FC20 ED 52                                sbc     hl,de
1197+ FC22 55           .SquareXDist:           ld      d,l
1198+ FC23 5D                                   ld      e,l
1199+ FC24 ED 30                                mul
1200+ FC26 3A 58 E8     .CalcYDistSq            ld      a,(GalaxyPresentSystem+1)
1201+ FC29 47                                   ld      b,a
1202+ FC2A 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1203+ FC2D B8                                   cp      b
1204+ FC2E 30 0B                                jr      nc,.DestinationGTEPresentY
1205+ FC30 4F           .DestinationLTPresentY: ld      c,a
1206+ FC31 68                                   ld      l,b
1207+ FC32 06 00                                ld      b,0
1208+ FC34 26 00                                ld      h,0
1209+ FC36 ED 42                                sbc     hl,bc
1210+ FC38 C3 43 FC                             jp      .DestinationYDone
1211+ FC3B 48           .DestinationGTEPresentY:ld      c,b
1212+ FC3C 6F                                   ld      l,a
1213+ FC3D 06 00                                ld      b,0
1214+ FC3F 26 00                                ld      h,0
1215+ FC41 ED 42                                sbc     hl,bc
1216+ FC43 CB 2D        .DestinationYDone:      sra     l                   ; divide L by 2 for galaxy size
1217+ FC45 7D                                   ld      a,l
1218+ FC46 EB                                   ex      de,hl
1219+ FC47 57                                   ld      d,a
1220+ FC48 5F                                   ld      e,a
1221+ FC49 ED 30        .SquareYDist:           mul
1222+ FC4B 19                                   add     hl,de
1223+ FC4C EB                                   ex      de,hl
1224+ FC4D CD 95 92                             call    asm_sqrt            ; distance via pythagoras in hl
1225+ FC50                                      ShiftHLLeft1
1225+ FC50 CB 25       >			   sla l
1225+ FC52 CB 14       >			   rl  h
1226+ FC54                                      ShiftHLLeft1                ; Multiply by 4 to get distance
1226+ FC54 CB 25       >			   sla l
1226+ FC56 CB 14       >			   rl  h
1227+ FC58 22 35 80                             ld      (Distance),hl       ; Distance is now caulated distance
1228+ FC5B C9                                   ret
1229+ FC5C AF           .ZeroDistance:          xor     a
1230+ FC5D 32 35 80                             ld      (Distance),a
1231+ FC60 32 36 80                             ld      (Distance+1),a
1232+ FC63 C9                                   ret
1233+ FC64              ;----------------------------------------------------------------------------------------------------------------------------------
1234+ FC64              ; Find the systems pointed to by GalaxyTargetSystem and loads it into WorkingSeeds
1235+ FC64              ; this needs to chagne to galaxyresultseed or galayxworkingseed
1236+ FC64 AF           galaxy_system_under_cursor:xor     a
1237+ FC65 32 76 7F                             ld		(XSAV),a
1238+ FC68 DD 21 16 E0                          ld      ix,galaxy_data
1239+ FC6C 2A 5B E8     .GCCounterLoop:         ld      hl,(GalaxyTargetSystem)
1240+ FC6F DD E5                                push    ix
1241+ FC71 7D                                   ld      a,l
1242+ FC72 DD BE 03                             cp      (ix+3)                          ; seed x
1243+ FC75 20 14                                jr      nz,.ItsNotThisX
1244+ FC77 7C                                   ld      a,h
1245+ FC78 DD BE 01                             cp      (ix+1)                          ; seed x
1246+ FC7B 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
1247+ FC7D DD E5                                push    ix
1248+ FC7F E1                                   pop     hl
1249+ FC80 11 01 80                             ld      de,WorkingSeeds                 ;' copy to wkring Seeds
1250+ FC83 CD 63 85                             call    copy_seed
1251+ FC86 3E FF                                ld      a,$FF
1252+ FC88 DD E1                                pop     ix
1253+ FC8A C9                                   ret
1254+ FC8B E1           .ItsNotThisX:           pop     hl
1255+ FC8C ED 34 08 00                          add     hl,8
1256+ FC90 E5                                   push    hl
1257+ FC91 DD E1                                pop     ix
1258+ FC93 3A 76 7F                             ld		a,(XSAV)
1259+ FC96 3D                                   dec		a
1260+ FC97 32 76 7F                             ld      (XSAV),a
1261+ FC9A FE 00                                cp		0
1262+ FC9C C8                                   ret		z
1263+ FC9D 18 CD                                jr		.GCCounterLoop
1264+ FC9F              ;----------------------------------------------------------------------------------------------------------------------------------
1265+ FC9F 21 E9 7F     SeedGalaxy:             ld      hl,SystemSeed                   ; First copy system seed to galaxy master
1266+ FCA2 11 10 E0                             ld      de,galaxy_master_seed           ; .
1267+ FCA5 ED A0                                ldi                                     ; .
1268+ FCA7 ED A0                                ldi                                     ; .
1269+ FCA9 ED A0                                ldi                                     ; .
1270+ FCAB ED A0                                ldi                                     ; .
1271+ FCAD ED A0                                ldi                                     ; .
1272+ FCAF ED A0                                ldi                                     ; .
1273+ FCB1 DD 21 16 E0                          ld      ix,galaxy_data                  ; Generate system seed data for each planet
1274+ FCB5 AF                                   xor		a                               ; .
1275+ FCB6 32 76 7F                             ld		(XSAV),a                        ; .
1276+ FCB9 DD E5        SeedGalaxyLoop:         push    ix                              ; .
1277+ FCBB D1                                   pop     de                              ; .
1278+ FCBC 21 E9 7F                             ld      hl,SystemSeed                   ; .
1279+ FCBF CD 63 85                             call    copy_seed                       ; .
1280+ FCC2 DD E5                                push    ix                              ; .
1281+ FCC4 E1                                   pop     hl                              ; .
1282+ FCC5 ED 34 08 00                          add     hl,8                            ; .
1283+ FCC9 E5                                   push    hl                              ; .
1284+ FCCA DD E1                                pop     ix                              ; .
1285+ FCCC CD 98 85                             call    next_system_seed                ; .
1286+ FCCF 3A 76 7F                             ld		a,(XSAV)                        ; .
1287+ FCD2 3D                                   dec		a                               ; .
1288+ FCD3 FE 00                                cp		0                               ; .
1289+ FCD5 C8                                   ret		z                               ; .
1290+ FCD6 32 76 7F                             ld		(XSAV),a                        ; .
1291+ FCD9 18 DE                                jr      SeedGalaxyLoop                  ; .
1292+ FCDB C9                                   ret
1293+ FCDC
1294+ FCDC              GalaxyBankSize   EQU $ - galaxy_page_marker
1295+ FCDC
# file closed: ./Universe/Galaxy/galaxy_data.asm
1166  FCDC                                  DISPLAY "Bank ",BankGalaxyData0," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData0"
1167  FCDC                                  ASSERT $-GalaxyDataAddr <8912, Bank code leaks over 8K boundary
1168  FCDC              ; Bank 92  ------------------------------------------------------------------------------------------------------------------------
1169  FCDC                                  SLOT    GalaxyDataAddr
1170  FCDC                                  PAGE    BankGalaxyData1
1171  FCDC                                  ORG GalaxyDataAddr, BankGalaxyData1
1172  E000 FF           GALAXYDATABlock1:   DB $FF
1173  E001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1174  0000                                  DISPLAY "Bank ",BankGalaxyData1," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData1"
1175  0000                                  ASSERT $-GalaxyDataAddr <8912, Bank code leaks over 8K boundary
1176  0000              ; Bank 93  ------------------------------------------------------------------------------------------------------------------------
1177  0000                                  SLOT    GalaxyDataAddr
1178  0000                                  PAGE    BankGalaxyData2
1179  0000                                  ORG GalaxyDataAddr, BankGalaxyData2
1180  E000 FF           GALAXYDATABlock2:   DB $FF
1181  E001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1182  0000                                  DISPLAY "Bank ",BankGalaxyData2," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData2"
1183  0000                                  ASSERT $-GalaxyDataAddr <8912, Bank code leaks over 8K boundary
1184  0000              ; Bank 94  ------------------------------------------------------------------------------------------------------------------------
1185  0000                                  SLOT    GalaxyDataAddr
1186  0000                                  PAGE    BankGalaxyData3
1187  0000                                  ORG GalaxyDataAddr, BankGalaxyData3
1188  E000 FF           GALAXYDATABlock3:   DB $FF
1189  E001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1190  0000                                  DISPLAY "Bank ",BankGalaxyData3," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData3"
1191  0000                                  ASSERT $-GalaxyDataAddr <8912, Bank code leaks over 8K boundary
1192  0000              ; Bank 95  ------------------------------------------------------------------------------------------------------------------------
1193  0000                                  SLOT    GalaxyDataAddr
1194  0000                                  PAGE    BankGalaxyData4
1195  0000                                  ORG GalaxyDataAddr, BankGalaxyData4
1196  E000 FF           GALAXYDATABlock4:   DB $FF
1197  E001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1198  0000                                  DISPLAY "Bank ",BankGalaxyData4," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData4"
1199  0000                                  ASSERT $-GalaxyDataAddr <8912, Bank code leaks over 8K boundary
1200  0000              ; Bank 96  ------------------------------------------------------------------------------------------------------------------------
1201  0000                                  SLOT    GalaxyDataAddr
1202  0000                                  PAGE    BankGalaxyData5
1203  0000                                  ORG GalaxyDataAddr,BankGalaxyData5
1204  E000 FF           GALAXYDATABlock5:   DB $FF
1205  E001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1206  0000                                  DISPLAY "Bank ",BankGalaxyData5," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData5"
1207  0000                                  ASSERT $-GalaxyDataAddr <8912, Bank code leaks over 8K boundary
1208  0000              ; Bank 97  ------------------------------------------------------------------------------------------------------------------------
1209  0000                                  SLOT    GalaxyDataAddr
1210  0000                                  PAGE    BankGalaxyData6
1211  0000                                  ORG GalaxyDataAddr,BankGalaxyData6
1212  E000 FF           GALAXYDATABlock6:   DB $FF
1213  E001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1214  0000                                  DISPLAY "Bank ",BankGalaxyData6," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData6"
1215  0000                                  ASSERT $-GalaxyDataAddr <8912, Bank code leaks over 8K boundary
1216  0000              ; Bank 98  ------------------------------------------------------------------------------------------------------------------------
1217  0000                                  SLOT    GalaxyDataAddr
1218  0000                                  PAGE    BankGalaxyData7
1219  0000                                  ORG GalaxyDataAddr,BankGalaxyData7
1220  E000 FF           GALAXYDATABlock7:   DB $FF
1221  E001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1222  0000                                  DISPLAY "Bank ",BankGalaxyData7," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData7"
1223  0000                                  ASSERT $-GalaxyDataAddr <8912, Bank code leaks over 8K boundary
1224  0000              ; Bank 99  ------------------------------------------------------------------------------------------------------------------------
1225  0000                                  SLOT    MathsTablesAddr
1226  0000                                  PAGE    BankMathsTables
1227  0000                                  ORG     MathsTablesAddr,BankMathsTables
1228  0000                                  INCLUDE "./Maths/logmaths.asm"
# file opened: ./Maths/logmaths.asm
   1+ 0000 4C 6F 67 4D  logmaths_page_marker    DB "LogMaths   PG99"
   1+ 0004 61 74 68 73
   1+ 0008 20 20 20 50
   1+ 000C 47 39 39
   2+ 000F
   3+ 000F EB           AntiLogHL:              ex      de,hl
   4+ 0010 21 83 05                             ld      hl,LogReverseHighByte
   5+ 0013 01 14 02                             ld      bc,LogReverseTableLen
   6+ 0016 7A                                   ld      a,d
   7+ 0017 ED A1        .SearchLoop:            cpi                                     ; first pass index into high byte
   8+ 0019 28 03                                jr      z,.FoundHighByte
   9+ 001B 23                                   inc     hl
  10+ 001C 18 F9                                jr      .SearchLoop
  11+ 001E 23           .FoundHighByte:         inc     hl                              ; now we have high double it for table of words
  12+ 001F 7E                                   ld      a,(hl)                          ; .
  13+ 0020 21 83 03                             ld      hl,LogTable                     ; .
  14+ 0023 ED 31                                add     hl,a                            ; .
  15+ 0025 ED 31                                add     hl,a                            ; .
  16+ 0027 7A           .LookForLowByteLoop:    ld      a,d                             ; search for low byte or change in high byte
  17+ 0028 BE                                   cp      (hl)
  18+ 0029 20 09                                jr      nz,.SkippedPastHigh
  19+ 002B 23                                   inc     hl
  20+ 002C 7B                                   ld      a,e
  21+ 002D                                      JumpIfAGTENusng (hl), .SkippedPastLow
  21+ 002D BE          >                        cp     (hl)
  21+ 002E D2 35 00    >                        jp		nc,.SkippedPastLow
  22+ 0031 C3 27 00                             jp      .LookForLowByteLoop
  23+ 0034
  24+ 0034 2B           .SkippedPastHigh:       dec     hl                              ; for high we are on next word
  25+ 0035 2B           .SkippedPastLow:        dec     hl                              ; for low we are no next byte
  26+ 0036 EB                                   ex      de,hl                           ; move address to de for subtract
  27+ 0037 21 83 03                             ld      hl,LogTable                     ; subtract from log table address
  28+ 003A                                      ClearCarryFlag
  28+ 003A B7          >                        or a
  29+ 003B ED 52                                sbc     hl,de                           ; so nwo we have nbr of words, i.e anito log * 2
  30+ 003D                                      ShiftHLRight1                           ; now must be >= 255
  30+ 003D CB 3C       >			   srl h
  30+ 003F CB 1D       >			   rr  l
  31+ 0041 7D                                   ld      a,l
  32+ 0042 C9                                   ret
  33+ 0043
  34+ 0043              ; calculates R = 256 * A / Q
  35+ 0043              Requ256mulAdivQ_Log:    JumpIfAGTEMemusng varQ, LL2             ; If A >= Q, then the answer will not fit in one byte, return 255
  35+ 0043 21 71 7F    >                        ld      hl,varQ
  35+ 0046 BE          >                        cp      (hl)
  35+ 0047 D2 BB 00    >                        jp		nc,LL2
  36+ 004A FD 6F                                ld      iyl,a                           ; STA widget             \ Store A in widget, so now widget = argument A
  37+ 004C DD 67                                ld      ixh,a                           ; TAX                    \ Transfer A into X, so now X = argument A
  38+ 004E                                      JumpIfAIsZero LLfix                     ; If A = 0, jump to LLfix to return a result of 0
  38+ 004E A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  38+ 004F CA B7 00    >                        jp	    z, LLfix
  39+ 0052              ; calculate log(A) - log(Q), first adding the low bytes (from the logL table), and then the high bytes (from the log table)
  40+ 0052              ; this determins if we branch to antilog or antilogodd for negative value
  41+ 0052 21 83 03     .GetLogA:               ld      hl,LogTable                     ; LDA logL,X             \ e = low byte of log(X)
  42+ 0055 ED 31                                add     hl,a                            ; have to add twice as ist 8 bit so cant shift
  43+ 0057 ED 31                                add     hl,a                            ;
  44+ 0059 5E                                   ld      e,(hl)                          ;
  45+ 005A 23                                   inc     hl                              ;
  46+ 005B 56                                   ld      d,(hl)                          ; de = logH[X] logL[X]
  47+ 005C 21 83 03                             ld      hl,LogTable                     ;
  48+ 005F 3A 71 7F                             ld      a,(varQ)                        ;
  49+ 0062 ED 31                                add     hl,a                            ;
  50+ 0064 ED 31                                add     hl,a                            ;
  51+ 0066 4E                                   ld      c,(hl)                          ;
  52+ 0067 23                                   inc     hl                              ;
  53+ 0068 46                                   ld      b,(hl)                          ; bc = logH[X] logL[X]
  54+ 0069 7B                                   ld      a,e                             ; SBC logL,X             \       = low byte of log(A) - low byte of log(Q)
  55+ 006A                                      ClearCarryFlag                          ; .
  55+ 006A B7          >                        or a
  56+ 006B 99                                   sbc     a,c                             ; .
  57+ 006C D2 93 00                             jp      nc,NoCarryBranch
  58+ 006F FA 83 00     CarryBranch:            jp      m,.noddlog                     ; BMI noddlog            \ If the subtraction is negative, jump to noddlog
  59+ 0072 5F                                   ld      e,a                             ; save logL[A] - logL[Q] in e, probabyl dont need this
  60+ 0073 7A                                   ld      a,d                             ; a = logH(a)
  61+ 0074              .CarryFlagPoint1:       SetCarryFlag
  61+ 0074 37          >                        scf
  62+ 0075 98                                   sbc     a,b                             ; a = high byte of logH[A] - logH[Q] note carry is not affected from prev sbc
  63+ 0076 D2 BB 00                             jp      nc,LL2                          ; If the subtraction fitted into one byte and didn't underflow, then log(A) - log(Q) < 256, so we jump to LL2 return a result of 255
  64+ 0079 21 83 01                             ld      hl,AntiLogTable                 ; TAX                    \ Otherwise we return the A-th entry from the antilog
  65+ 007C ED 31                                add     hl,a                            ; LDA antilog,X          \ table
  66+ 007E 7E                                   ld      a,(hl)
  67+ 007F 32 72 7F                             ld      (varR),a                        ; STA R                  \ Set the result in R to the value of A
  68+ 0082 C9                                   ret                                     ; RTS                    \ Return from the subroutine
  69+ 0083 7A           .noddlog:               ld      a,d                             ; LDX widget             \ Set d = high byte of log(A) - high byte of log(Q)
  70+ 0084              .CarryFlagPoint2:       SetCarryFlag
  70+ 0084 37          >                        scf
  71+ 0085 98                                   sbc     a,b
  72+ 0086 D2 BB 00                             jp      nc,LL2                          ; BCS LL2                \ If the subtraction fitted into one byte and didn't underflow, then log(A) - log(Q) < 256, so we jump to LL2 to return a result of 255
  73+ 0089 21 83 02                             ld      hl, AnitLogODDTable             ; TAX                    \ Otherwise we return the A-th entry from the antilogODD
  74+ 008C ED 31                                add     hl,a                            ; LDA antilogODD,X       \ table
  75+ 008E 7E                                   ld      a,(hl)
  76+ 008F 32 72 7F                             ld      (varR),a                        ; STA R                  \ Set the result in R to the value of A
  77+ 0092 C9                                   ret                                     ; RTS                    \ Return from the subroutine
  78+ 0093 FA A7 00     NoCarryBranch:          jp      m,.noddlog                     ; BMI noddlog            \ If the subtraction is negative, jump to noddlog
  79+ 0096 5F                                   ld      e,a                             ; save logL[A] - logL[Q] in e, probabyl dont need this
  80+ 0097 7A                                   ld      a,d                             ; a = logH(a)
  81+ 0098              .CarryFlagPoint1:       ClearCarryFlag
  81+ 0098 B7          >                        or a
  82+ 0099 98                                   sbc     a,b                             ; a = high byte of logH[A] - logH[Q] note carry is not affected from prev sbc
  83+ 009A D2 BB 00                             jp      nc,LL2                          ; If the subtraction fitted into one byte and didn't underflow, then log(A) - log(Q) < 256, so we jump to LL2 return a result of 255
  84+ 009D 21 83 01                             ld      hl,AntiLogTable                 ; TAX                    \ Otherwise we return the A-th entry from the antilog
  85+ 00A0 ED 31                                add     hl,a                            ; LDA antilog,X          \ table
  86+ 00A2 7E                                   ld      a,(hl)
  87+ 00A3 32 72 7F                             ld      (varR),a                        ; STA R                  \ Set the result in R to the value of A
  88+ 00A6 C9                                   ret                                     ; RTS                    \ Return from the subroutine
  89+ 00A7 7A           .noddlog:               ld      a,d                             ; LDX widget             \ Set d = high byte of log(A) - high byte of log(Q)
  90+ 00A8              .CarryFlagPoint2:       ClearCarryFlag
  90+ 00A8 B7          >                        or a
  91+ 00A9 98                                   sbc     a,b
  92+ 00AA D2 BB 00                             jp      nc,LL2                          ; BCS LL2                \ If the subtraction fitted into one byte and didn't underflow, then log(A) - log(Q) < 256, so we jump to LL2 to return a result of 255
  93+ 00AD 21 83 02                             ld      hl, AnitLogODDTable             ; TAX                    \ Otherwise we return the A-th entry from the antilogODD
  94+ 00B0 ED 31                                add     hl,a                            ; LDA antilogODD,X       \ table
  95+ 00B2 7E                                   ld      a,(hl)
  96+ 00B3 32 72 7F                             ld      (varR),a                        ; STA R                  \ Set the result in R to the value of A
  97+ 00B6 C9                                   ret                                     ; RTS                    \ Return from the subroutine
  98+ 00B7 32 72 7F     LLfix:                  ld      (varR),a                        ; Set the result in R to the value of A
  99+ 00BA C9                                   ret                                     ; RTS                    \ Return from the subroutine
 100+ 00BB 3E FF        LL2:                    ld      a,$FF
 101+ 00BD 32 72 7F                             ld      (varR),a
 102+ 00C0 C9                                   ret
 103+ 00C1
 104+ 00C1
 105+ 00C1              AEquAmul256DivBLogLT:   JumpIfAIsZero   .ResultIsZero
 105+ 00C1 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 105+ 00C2 CA EA 00    >                        jp	    z, .ResultIsZero
 106+ 00C5 21 83 03                             ld      hl,LogTable                     ; de = log a
 107+ 00C8 ED 31                                add     hl,a                            ; .
 108+ 00CA ED 31                                add     hl,a                            ; .
 109+ 00CC 5E                                   ld      e,(hl)                          ; .
 110+ 00CD 23                                   inc     hl                              ; .
 111+ 00CE 56                                   ld      d,(hl)                          ; .
 112+ 00CF 21 83 03                             ld      hl,LogTable                     ; hl = log b
 113+ 00D2 78                                   ld      a,b                             ; .
 114+ 00D3 ED 31                                add     hl,a                            ; .
 115+ 00D5 ED 31                                add     hl,a                            ; .
 116+ 00D7 7E                                   ld      a,(hl)                          ; .
 117+ 00D8 23                                   inc     hl                              ; .
 118+ 00D9 66                                   ld      h,(hl)                          ; .
 119+ 00DA 6F                                   ld      l,a                             ; .
 120+ 00DB                                      ClearCarryFlag                          ;
 120+ 00DB B7          >                        or a
 121+ 00DC EB                                   ex      de,hl                           ; now hl = log a and de = log b
 122+ 00DD ED 52                                sbc     hl,de                           ; hl = log a - log b
 123+ 00DF 7C                                   ld      a,h                             ; .
 124+ 00E0 21 83 02                             ld      hl,AnitLogODDTable               ; hl = anti log (log a - log b)
 125+ 00E3 ED 31                                add     hl,a                            ; which is also a / b
 126+ 00E5 ED 31                                add     hl,a                            ; .
 127+ 00E7 7E                                   ld      a,(hl)                          ; .
 128+ 00E8                                      ClearCarryFlag                          ;
 128+ 00E8 B7          >                        or a
 129+ 00E9 C9                                   ret
 130+ 00EA              .ResultIsZero:          ClearCarryFlag
 130+ 00EA B7          >                        or a
 131+ 00EB                                      ZeroA
 131+ 00EB AF          >                        xor a
 132+ 00EC C9                                   ret
 133+ 00ED
 134+ 00ED              AEquAmul256DivBLog:     JumpIfAIsZero   .ResultIsZero
 134+ 00ED A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 134+ 00EE CA 24 01    >                        jp	    z, .ResultIsZero
 135+ 00F1                                      JumpIfAGTENusng d, AEquAmul256DivBLogLT
 135+ 00F1 BA          >                        cp     d
 135+ 00F2 D2 C1 00    >                        jp		nc,AEquAmul256DivBLogLT
 136+ 00F5 21 83 03                             ld      hl,LogTable                     ; de = log a
 137+ 00F8 ED 31                                add     hl,a                            ; .
 138+ 00FA ED 31                                add     hl,a                            ; .
 139+ 00FC 5E                                   ld      e,(hl)                          ; .
 140+ 00FD 23                                   inc     hl                              ; .
 141+ 00FE 56                                   ld      d,(hl)                          ; .
 142+ 00FF 21 83 03                             ld      hl,LogTable                     ; hl = log b
 143+ 0102 78                                   ld      a,b                             ; .
 144+ 0103 ED 31                                add     hl,a                            ; .
 145+ 0105 ED 31                                add     hl,a                            ; .
 146+ 0107 7E                                   ld      a,(hl)                          ; .
 147+ 0108 23                                   inc     hl                              ; .
 148+ 0109 66                                   ld      h,(hl)                          ; .
 149+ 010A 6F                                   ld      l,a                             ; .
 150+ 010B                                      ClearCarryFlag                          ;
 150+ 010B B7          >                        or a
 151+ 010C EB                                   ex      de,hl                           ; now hl = log a and de = log b
 152+ 010D ED 52                                sbc     hl,de                           ; hl = log a - log b
 153+ 010F 38 0B                                jr      c,.ResultIsOne                  ; .
 154+ 0111 7C                                   ld      a,h                             ; .
 155+ 0112 21 83 01                             ld      hl,AntiLogTable                 ; hl = anti log (log a - log b)
 156+ 0115 ED 31                                add     hl,a                            ; which is also a / b
 157+ 0117 ED 31                                add     hl,a                            ; .
 158+ 0119 7E                                   ld      a,(hl)                          ; .
 159+ 011A                                      ClearCarryFlag                          ;
 159+ 011A B7          >                        or a
 160+ 011B C9                                   ret
 161+ 011C              .ResultIsOne:           ClearCarryFlag
 161+ 011C B7          >                        or a
 162+ 011D 3E FF                                ld      a,$FF
 163+ 011F C9                                   ret
 164+ 0120              .ResultIsInfinte:       SetCarryFlag
 164+ 0120 37          >                        scf
 165+ 0121 3E FF                                ld      a,$FF
 166+ 0123 C9                                   ret
 167+ 0124              .ResultIsZero:          ClearCarryFlag
 167+ 0124 B7          >                        or a
 168+ 0125 C9                                   ret
 169+ 0126
 170+ 0126              AEquAmul256Div197LogLT: JumpIfAIsZero   .ResultIsZero
 170+ 0126 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 170+ 0127 CA 46 01    >                        jp	    z, .ResultIsZero
 171+ 012A 21 83 03                             ld      hl,LogTable                     ; point to log a in LogTable
 172+ 012D ED 31                                add     hl,a                            ; Note we can't sla in case a > 127
 173+ 012F ED 31                                add     hl,a
 174+ 0131 5E                                   ld      e,(hl)                          ; de = log a
 175+ 0132 23                                   inc     hl                              ; .
 176+ 0133 56                                   ld      d,(hl)                          ; .
 177+ 0134 21 A9 F3                             ld      hl,$F3A9                        ; hl = $F3A9 = log 197
 178+ 0137                                      ClearCarryFlag
 178+ 0137 B7          >                        or a
 179+ 0138 EB                                   ex      hl,de                           ; hl = log a, de = log 197
 180+ 0139 ED 52                                sbc     hl,de
 181+ 013B 7C                                   ld      a,h
 182+ 013C 21 83 02                             ld      hl,AnitLogODDTable
 183+ 013F ED 31                                add     hl,a
 184+ 0141 ED 31                                add     hl,a
 185+ 0143 7E                                   ld      a,(hl)
 186+ 0144                                      ClearCarryFlag
 186+ 0144 B7          >                        or a
 187+ 0145 C9                                   ret
 188+ 0146              .ResultIsZero:          ClearCarryFlag
 188+ 0146 B7          >                        or a
 189+ 0147                                      ZeroA
 189+ 0147 AF          >                        xor a
 190+ 0148 C9                                   ret
 191+ 0149
 192+ 0149
 193+ 0149              AEquAmul256Div197Log:   JumpIfAIsZero   .ResultIsZero
 193+ 0149 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 193+ 014A CA 73 01    >                        jp	    z, .ResultIsZero
 194+ 014D                                      JumpIfAGTENusng d, AEquAmul256Div197LogLT
 194+ 014D BA          >                        cp     d
 194+ 014E D2 26 01    >                        jp		nc,AEquAmul256Div197LogLT
 195+ 0151 21 83 03                             ld      hl,LogTable                     ; point to log a in LogTable
 196+ 0154 ED 31                                add     hl,a                            ; Note we can't sla in case a > 127
 197+ 0156 ED 31                                add     hl,a
 198+ 0158 5E                                   ld      e,(hl)                          ; de = log a
 199+ 0159 23                                   inc     hl                              ; .
 200+ 015A 56                                   ld      d,(hl)                          ; .
 201+ 015B 21 A9 F3                             ld      hl,$F3A9                        ; hl = $F3A9 = log 197
 202+ 015E                                      ClearCarryFlag
 202+ 015E B7          >                        or a
 203+ 015F EB                                   ex      hl,de                           ; hl = log a, de = log 197
 204+ 0160 ED 52                                sbc     hl,de
 205+ 0162 38 0B                                jr      c,.ResultIsOne
 206+ 0164 7C                                   ld      a,h
 207+ 0165 21 83 01                             ld      hl,AntiLogTable
 208+ 0168 ED 31                                add     hl,a
 209+ 016A ED 31                                add     hl,a
 210+ 016C 7E                                   ld      a,(hl)
 211+ 016D                                      ClearCarryFlag
 211+ 016D B7          >                        or a
 212+ 016E C9                                   ret
 213+ 016F              .ResultIsOne:           ClearCarryFlag
 213+ 016F B7          >                        or a
 214+ 0170 3E FF                                ld      a,$FF
 215+ 0172 C9                                   ret
 216+ 0173              .ResultIsZero:          ClearCarryFlag
 216+ 0173 B7          >                        or a
 217+ 0174 C9                                   ret
 218+ 0175
 219+ 0175              AEquAmul256Div197LogSignA:
 220+ 0175 FD 67                                ld      iyh,a
 221+ 0177                                      ClearSignBitA
 221+ 0177 E6 7F       >                        and     SignMask8Bit
 222+ 0179 CD 49 01                             call    AEquAmul256Div197Log
 223+ 017C 47                                   ld      b,a
 224+ 017D FD 7C                                ld      a,iyh
 225+ 017F                                      SignBitOnlyA
 225+ 017F E6 80       >                        and     SignOnly8Bit
 226+ 0181 B0                                   or      b
 227+ 0182 C9                                   ret
# file closed: ./Maths/logmaths.asm
1229  0183                                  INCLUDE "./Tables/antilogtable.asm"
# file opened: ./Tables/antilogtable.asm
   1+ 0183 01 01 01 01  AntiLogTable:           DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 0 to 9
   1+ 0187 01 01 01 01
   1+ 018B 01 01
   2+ 018D 01 01 01 01                          DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 10 to 19
   2+ 0191 01 01 01 01
   2+ 0195 01 01
   3+ 0197 01 01 01 01                          DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 20 to 29
   3+ 019B 01 01 01 01
   3+ 019F 01 01
   4+ 01A1 01 01 02 02                          DB $01, $01, $02, $02, $02, $02, $02, $02, $02, $02 ; 30 to 39
   4+ 01A5 02 02 02 02
   4+ 01A9 02 02
   5+ 01AB 02 02 02 02                          DB $02, $02, $02, $02, $02, $02, $02, $02, $02, $02 ; 40 to 49
   5+ 01AF 02 02 02 02
   5+ 01B3 02 02
   6+ 01B5 02 03 03 03                          DB $02, $03, $03, $03, $03, $03, $03, $03, $03, $03 ; 50 to 59
   6+ 01B9 03 03 03 03
   6+ 01BD 03 03
   7+ 01BF 03 03 03 03                          DB $03, $03, $03, $03, $04, $04, $04, $04, $04, $04 ; 60 to 69
   7+ 01C3 04 04 04 04
   7+ 01C7 04 04
   8+ 01C9 04 04 04 04                          DB $04, $04, $04, $04, $04, $05, $05, $05, $05, $05 ; 70 to 79
   8+ 01CD 04 05 05 05
   8+ 01D1 05 05
   9+ 01D3 05 05 05 06                          DB $05, $05, $05, $06, $06, $06, $06, $06, $06, $06 ; 80 to 89
   9+ 01D7 06 06 06 06
   9+ 01DB 06 06
  10+ 01DD 07 07 07 07                          DB $07, $07, $07, $07, $07, $07, $08, $08, $08, $08 ; 90 to 99
  10+ 01E1 07 07 08 08
  10+ 01E5 08 08
  11+ 01E7 08 08 09 09                          DB $08, $08, $09, $09, $09, $09, $09, $0A, $0A, $0A ; 100 to 109
  11+ 01EB 09 09 09 0A
  11+ 01EF 0A 0A
  12+ 01F1 0A 0B 0B 0B                          DB $0A, $0B, $0B, $0B, $0B, $0C, $0C, $0C, $0C, $0D ; 110 to 119
  12+ 01F5 0B 0C 0C 0C
  12+ 01F9 0C 0D
  13+ 01FB 0D 0D 0E 0E                          DB $0D, $0D, $0E, $0E, $0E, $0E, $0F, $0F, $10, $10 ; 120 to 129
  13+ 01FF 0E 0E 0F 0F
  13+ 0203 10 10
  14+ 0205 10 11 11 11                          DB $10, $11, $11, $11, $12, $12, $13, $13, $13, $14 ; 130 to 139
  14+ 0209 12 12 13 13
  14+ 020D 13 14
  15+ 020F 14 15 15 16                          DB $14, $15, $15, $16, $16, $17, $17, $18, $18, $19 ; 140 to 149
  15+ 0213 16 17 17 18
  15+ 0217 18 19
  16+ 0219 19 1A 1A 1B                          DB $19, $1A, $1A, $1B, $1C, $1C, $1D, $1D, $1E, $1F ; 150 to 159
  16+ 021D 1C 1C 1D 1D
  16+ 0221 1E 1F
  17+ 0223 20 20 21 22                          DB $20, $20, $21, $22, $22, $23, $24, $25, $26, $26 ; 160 to 169
  17+ 0227 22 23 24 25
  17+ 022B 26 26
  18+ 022D 27 28 29 2A                          DB $27, $28, $29, $2A, $2B, $2C, $2D, $2E, $2F, $30 ; 170 to 179
  18+ 0231 2B 2C 2D 2E
  18+ 0235 2F 30
  19+ 0237 31 32 33 34                          DB $31, $32, $33, $34, $35, $36, $38, $39, $3A, $3B ; 180 to 189
  19+ 023B 35 36 38 39
  19+ 023F 3A 3B
  20+ 0241 3D 3E 40 41                          DB $3D, $3E, $40, $41, $42, $44, $45, $47, $48, $4A ; 190 to 199
  20+ 0245 42 44 45 47
  20+ 0249 48 4A
  21+ 024B 4C 4D 4F 51                          DB $4C, $4D, $4F, $51, $52, $54, $56, $58, $5A, $5C ; 200 to 219
  21+ 024F 52 54 56 58
  21+ 0253 5A 5C
  22+ 0255 5E 60 62 64                          DB $5E, $60, $62, $64, $67, $69, $6B, $6D, $70, $72 ; 210 to 229
  22+ 0259 67 69 6B 6D
  22+ 025D 70 72
  23+ 025F 75 77 7A 7D                          DB $75, $77, $7A, $7D, $80, $82, $85, $88, $8B, $8E ; 220 to 239
  23+ 0263 80 82 85 88
  23+ 0267 8B 8E
  24+ 0269 91 94 98 9B                          DB $91, $94, $98, $9B, $9E, $A2, $A5, $A9, $AD, $B1 ; 230 to 239
  24+ 026D 9E A2 A5 A9
  24+ 0271 AD B1
  25+ 0273 B5 B8 BD C1                          DB $B5, $B8, $BD, $C1, $C5, $C9, $CE, $D2, $D7, $DB ; 240 to 249
  25+ 0277 C5 C9 CE D2
  25+ 027B D7 DB
  26+ 027D E0 E5 EA EF                          DB $E0, $E5, $EA, $EF, $F5, $FA                     ; 250 to 255
  26+ 0281 F5 FA
  27+ 0283
  28+ 0283 01 01 01 01  AnitLogODDTable:        DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 0 to 9
  28+ 0287 01 01 01 01
  28+ 028B 01 01
  29+ 028D 01 01 01 01                          DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 10 to 19
  29+ 0291 01 01 01 01
  29+ 0295 01 01
  30+ 0297 01 01 01 01                          DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 20 to 29
  30+ 029B 01 01 01 01
  30+ 029F 01 01
  31+ 02A1 01 01 02 02                          DB $01, $01, $02, $02, $02, $02, $02, $02, $02, $02 ; 30 to 39
  31+ 02A5 02 02 02 02
  31+ 02A9 02 02
  32+ 02AB 02 02 02 02                          DB $02, $02, $02, $02, $02, $02, $02, $02, $02, $02 ; 40 to 49
  32+ 02AF 02 02 02 02
  32+ 02B3 02 02
  33+ 02B5 02 03 03 03                          DB $02, $03, $03, $03, $03, $03, $03, $03, $03, $03 ; 50 to 59
  33+ 02B9 03 03 03 03
  33+ 02BD 03 03
  34+ 02BF 03 03 03 03                          DB $03, $03, $03, $03, $04, $04, $04, $04, $04, $04 ; 60 to 69
  34+ 02C3 04 04 04 04
  34+ 02C7 04 04
  35+ 02C9 04 04 04 04                          DB $04, $04, $04, $04, $05, $05, $05, $05, $05, $05 ; 70 to 79
  35+ 02CD 05 05 05 05
  35+ 02D1 05 05
  36+ 02D3 05 05 05 06                          DB $05, $05, $05, $06, $06, $06, $06, $06, $06, $06 ; 80 to 89
  36+ 02D7 06 06 06 06
  36+ 02DB 06 06
  37+ 02DD 07 07 07 07                          DB $07, $07, $07, $07, $07, $07, $08, $08, $08, $08 ; 90 to 99
  37+ 02E1 07 07 08 08
  37+ 02E5 08 08
  38+ 02E7 08 09 09 09                          DB $08, $09, $09, $09, $09, $09, $0A, $0A, $0A, $0A ; 100 to 109
  38+ 02EB 09 09 0A 0A
  38+ 02EF 0A 0A
  39+ 02F1 0A 0B 0B 0B                          DB $0A, $0B, $0B, $0B, $0B, $0C, $0C, $0C, $0D, $0D ; 110 to 119
  39+ 02F5 0B 0C 0C 0C
  39+ 02F9 0D 0D
  40+ 02FB 0D 0D 0E 0E                          DB $0D, $0D, $0E, $0E, $0E, $0F, $0F, $0F, $10, $10 ; 120 to 129
  40+ 02FF 0E 0F 0F 0F
  40+ 0303 10 10
  41+ 0305 10 11 11 12                          DB $10, $11, $11, $12, $12, $12, $13, $13, $14, $14 ; 130 to 139
  41+ 0309 12 12 13 13
  41+ 030D 14 14
  42+ 030F 14 15 15 16                          DB $14, $15, $15, $16, $16, $17, $17, $18, $18, $19 ; 140 to 149
  42+ 0313 16 17 17 18
  42+ 0317 18 19
  43+ 0319 1A 1A 1B 1B                          DB $1A, $1A, $1B, $1B, $1C, $1D, $1D, $1E, $1E, $1F ; 150 to 159
  43+ 031D 1C 1D 1D 1E
  43+ 0321 1E 1F
  44+ 0323 20 21 21 22                          DB $20, $21, $21, $22, $23, $24, $24, $25, $26, $27 ; 160 to 169
  44+ 0327 23 24 24 25
  44+ 032B 26 27
  45+ 032D 28 29 29 2A                          DB $28, $29, $29, $2A, $2B, $2C, $2D, $2E, $2F, $30 ; 170 to 179
  45+ 0331 2B 2C 2D 2E
  45+ 0335 2F 30
  46+ 0337 31 32 34 35                          DB $31, $32, $34, $35, $36, $37, $38, $3A, $3B, $3C ; 180 to 189
  46+ 033B 36 37 38 3A
  46+ 033F 3B 3C
  47+ 0341 3D 3F 40 42                          DB $3D, $3F, $40, $42, $43, $45, $46, $48, $49, $4B ; 190 to 199
  47+ 0345 43 45 46 48
  47+ 0349 49 4B
  48+ 034B 4C 4E 50 52                          DB $4C, $4E, $50, $52, $53, $55, $57, $59, $5B, $5D ; 200 to 219
  48+ 034F 53 55 57 59
  48+ 0353 5B 5D
  49+ 0355 5F 61 63 65                          DB $5F, $61, $63, $65, $68, $6A, $6C, $6F, $71, $74 ; 210 to 229
  49+ 0359 68 6A 6C 6F
  49+ 035D 71 74
  50+ 035F 76 79 7B 7E                          DB $76, $79, $7B, $7E, $81, $84, $87, $8A, $8D, $90 ; 220 to 239
  50+ 0363 81 84 87 8A
  50+ 0367 8D 90
  51+ 0369 93 96 99 9D                          DB $93, $96, $99, $9D, $A0, $A4, $A7, $AB, $AF, $B3 ; 230 to 239
  51+ 036D A0 A4 A7 AB
  51+ 0371 AF B3
  52+ 0373 B6 BA BF C3                          DB $B6, $BA, $BF, $C3, $C7, $CB, $D0, $D4, $D9, $DE ; 240 to 249
  52+ 0377 C7 CB D0 D4
  52+ 037B D9 DE
  53+ 037D E3 E8 ED F2                          DB $E3, $E8, $ED, $F2, $F7, $FD                     ; 250 to 255
  53+ 0381 F7 FD
  54+ 0383
# file closed: ./Tables/antilogtable.asm
1230  0383                                  INCLUDE "./Tables/logtable.asm"
# file opened: ./Tables/logtable.asm
   1+ 0383 00 00        LogTable:               DW $0000                                                                   ; 0
   2+ 0385 00 00 00 20                          DW $0000, $2000, $32B8, $4000, $4A4D, $52B8, $59D6, $6000, $6570, $6A4D    ;   1 TO  10
   2+ 0389 B8 32 00 40
   2+ 038D 4D 4A B8 52
   2+ 0391 D6 59 00 60
   2+ 0395 70 65 4D 6A
   3+ 0399 B4 6E B8 72                          DW $6EB4, $72B8, $766A, $79D6, $7D05, $8000, $82CC, $8570, $87EF, $8A4D    ;  11 TO  20
   3+ 039D 6A 76 D6 79
   3+ 03A1 05 7D 00 80
   3+ 03A5 CC 82 70 85
   3+ 03A9 EF 87 4D 8A
   4+ 03AD 8E 8C B4 8E                          DW $8C8E, $8EB4, $90C1, $92B8, $949A, $966A, $9828, $99D6, $9B75, $9D05    ;  21 TO  30
   4+ 03B1 C1 90 B8 92
   4+ 03B5 9A 94 6A 96
   4+ 03B9 28 98 D6 99
   4+ 03BD 75 9B 05 9D
   5+ 03C1 89 9E 00 A0                          DW $9E89, $A000, $A16C, $A2CC, $A423, $A570, $A6B4, $A7EF, $A922, $AA4D    ;  31 TO  40
   5+ 03C5 6C A1 CC A2
   5+ 03C9 23 A4 70 A5
   5+ 03CD B4 A6 EF A7
   5+ 03D1 22 A9 4D AA
   6+ 03D5 71 AB 8E AC                          DW $AB71, $AC8E, $ADA4, $AEB4, $AFBD, $B0C1, $B1BF, $B2B8, $B3AC, $B49A    ;  41 TO  50
   6+ 03D9 A4 AD B4 AE
   6+ 03DD BD AF C1 B0
   6+ 03E1 BF B1 B8 B2
   6+ 03E5 AC B3 9A B4
   7+ 03E9 85 B5 6A B6                          DW $B585, $B66A, $B74B, $B828, $B901, $B9D6, $BAA7, $BB75, $BC3F, $BD05    ;  51 TO  60
   7+ 03ED 4B B7 28 B8
   7+ 03F1 01 B9 D6 B9
   7+ 03F5 A7 BA 75 BB
   7+ 03F9 3F BC 05 BD
   8+ 03FD C9 BD 89 BE                          DW $BDC9, $BE89, $BF46, $C000, $C0B7, $C16C, $C21D, $C2CC, $C379, $C423    ;  61 TO  70
   8+ 0401 46 BF 00 C0
   8+ 0405 B7 C0 6C C1
   8+ 0409 1D C2 CC C2
   8+ 040D 79 C3 23 C4
   9+ 0411 CB C4 70 C5                          DW $C4CB, $C570, $C613, $C6B4, $C752, $C7EF, $C88A, $C922, $C9B9, $CA4D    ;  71 TO  80
   9+ 0415 13 C6 B4 C6
   9+ 0419 52 C7 EF C7
   9+ 041D 8A C8 22 C9
   9+ 0421 B9 C9 4D CA
  10+ 0425 E0 CA 71 CB                          DW $CAE0, $CB71, $CC00, $CC8E, $CD1A, $CDA4, $CE2D, $CEB4, $CF39, $CFBD    ;  81 TO  90
  10+ 0429 00 CC 8E CC
  10+ 042D 1A CD A4 CD
  10+ 0431 2D CE B4 CE
  10+ 0435 39 CF BD CF
  11+ 0439 40 D0 C1 D0                          DW $D040, $D0C1, $D141, $D1BF, $D23C, $D2B8, $D332, $D3AC, $D424, $D49A    ;  91 TO 100
  11+ 043D 41 D1 BF D1
  11+ 0441 3C D2 B8 D2
  11+ 0445 32 D3 AC D3
  11+ 0449 24 D4 9A D4
  12+ 044D 10 D5 85 D5                          DW $D510, $D585, $D5F8, $D66A, $D6DB, $D74B, $D7BA, $D828, $D895, $D901    ; 101 TO 110
  12+ 0451 F8 D5 6A D6
  12+ 0455 DB D6 4B D7
  12+ 0459 BA D7 28 D8
  12+ 045D 95 D8 01 D9
  13+ 0461 6C D9 D6 D9                          DW $D96C, $D9D6, $DA3F, $DAA7, $DB0E, $DB75, $DBDA, $DC3F, $DCA2, $DD05    ; 111 TO 120
  13+ 0465 3F DA A7 DA
  13+ 0469 0E DB 75 DB
  13+ 046D DA DB 3F DC
  13+ 0471 A2 DC 05 DD
  14+ 0475 67 DD C9 DD                          DW $DD67, $DDC9, $DE29, $DE89, $DEE8, $DF46, $DFA3, $E000, $E05C, $E0B7    ; 121 TO 130
  14+ 0479 29 DE 89 DE
  14+ 047D E8 DE 46 DF
  14+ 0481 A3 DF 00 E0
  14+ 0485 5C E0 B7 E0
  15+ 0489 12 E1 6C E1                          DW $E112, $E16C, $E1C5, $E21D, $E275, $E2CC, $E323, $E379, $E3CE, $E423    ; 131 TO 140
  15+ 048D C5 E1 1D E2
  15+ 0491 75 E2 CC E2
  15+ 0495 23 E3 79 E3
  15+ 0499 CE E3 23 E4
  16+ 049D 77 E4 CB E4                          DW $E477, $E4CB, $E51E, $E570, $E5C2, $E613, $E664, $E6B4, $E703, $E752    ; 141 TO 150
  16+ 04A1 1E E5 70 E5
  16+ 04A5 C2 E5 13 E6
  16+ 04A9 64 E6 B4 E6
  16+ 04AD 03 E7 52 E7
  17+ 04B1 A1 E7 EF E7                          DW $E7A1, $E7EF, $E83D, $E88A, $E8D6, $E922, $E96E, $E9B9, $EA03, $EA4D    ; 151 TO 160
  17+ 04B5 3D E8 8A E8
  17+ 04B9 D6 E8 22 E9
  17+ 04BD 6E E9 B9 E9
  17+ 04C1 03 EA 4D EA
  18+ 04C5 97 EA E0 EA                          DW $EA97, $EAE0, $EB29, $EB71, $EBB9, $EC00, $EC47, $EC8E, $ECD4, $ED1A    ; 161 TO 170
  18+ 04C9 29 EB 71 EB
  18+ 04CD B9 EB 00 EC
  18+ 04D1 47 EC 8E EC
  18+ 04D5 D4 EC 1A ED
  19+ 04D9 5F ED A4 ED                          DW $ED5F, $EDA4, $EDE8, $EE2D, $EE70, $EEB4, $EEF7, $EF39, $EF7B, $EFBD    ; 171 TO 180
  19+ 04DD E8 ED 2D EE
  19+ 04E1 70 EE B4 EE
  19+ 04E5 F7 EE 39 EF
  19+ 04E9 7B EF BD EF
  20+ 04ED FF EF 40 F0                          DW $EFFF, $F040, $F081, $F0C1, $F101, $F141, $F180, $F1BF, $F1FE, $F23C    ; 181 TO 190
  20+ 04F1 81 F0 C1 F0
  20+ 04F5 01 F1 41 F1
  20+ 04F9 80 F1 BF F1
  20+ 04FD FE F1 3C F2
  21+ 0501 7A F2 B8 F2                          DW $F27A, $F2B8, $F2F5, $F332, $F36F, $F3AC, $F3E8, $F424, $F45F, $F49A    ; 191 TO 290
  21+ 0505 F5 F2 32 F3
  21+ 0509 6F F3 AC F3
  21+ 050D E8 F3 24 F4
  21+ 0511 5F F4 9A F4
  22+ 0515 D5 F4 10 F5                          DW $F4D5, $F510, $F54A, $F585, $F5BE, $F5F8, $F631, $F66A, $F6A3, $F6DB    ; 201 TO 210
  22+ 0519 4A F5 85 F5
  22+ 051D BE F5 F8 F5
  22+ 0521 31 F6 6A F6
  22+ 0525 A3 F6 DB F6
  23+ 0529 13 F7 4B F7                          DW $F713, $F74B, $F783, $F7BA, $F7F1, $F828, $F85F, $F895, $F8CB, $F901    ; 211 TO 220
  23+ 052D 83 F7 BA F7
  23+ 0531 F1 F7 28 F8
  23+ 0535 5F F8 95 F8
  23+ 0539 CB F8 01 F9
  24+ 053D 36 F9 6C F9                          DW $F936, $F96C, $F9A1, $F9D6, $FA0A, $FA3F, $FA73, $FAA7, $FADB, $FB0E    ; 221 TO 230
  24+ 0541 A1 F9 D6 F9
  24+ 0545 0A FA 3F FA
  24+ 0549 73 FA A7 FA
  24+ 054D DB FA 0E FB
  25+ 0551 42 FB 75 FB                          DW $FB42, $FB75, $FBA7, $FBDA, $FC0C, $FC3F, $FC71, $FCA2, $FCD4, $FD05    ; 231 TO 240
  25+ 0555 A7 FB DA FB
  25+ 0559 0C FC 3F FC
  25+ 055D 71 FC A2 FC
  25+ 0561 D4 FC 05 FD
  26+ 0565 36 FD 67 FD                          DW $FD36, $FD67, $FD98, $FDC9, $FDF9, $FE29, $FE59, $FE89, $FEB8, $FEE8    ; 241 TO 250
  26+ 0569 98 FD C9 FD
  26+ 056D F9 FD 29 FE
  26+ 0571 59 FE 89 FE
  26+ 0575 B8 FE E8 FE
  27+ 0579 17 FF 46 FF                          DW $FF17, $FF46, $FF75, $FFA3, $FFA3                                       ; 251 TO 255
  27+ 057D 75 FF A3 FF
  27+ 0581 A3 FF
  28+ 0583
  29+ 0583
  30+ 0583
  31+ 0583 00 00 00 00  LogReverseHighByte:     DW $00, 000, $20, 002, $32, 003, $40, 004, $4A, 005, $52, 006
  31+ 0587 20 00 02 00
  31+ 058B 32 00 03 00
  31+ 058F 40 00 04 00
  31+ 0593 4A 00 05 00
  31+ 0597 52 00 06 00
  32+ 059B 59 00 07 00                          DW $59, 007, $60, 008, $65, 009, $6A, 010, $6E, 011, $72, 012
  32+ 059F 60 00 08 00
  32+ 05A3 65 00 09 00
  32+ 05A7 6A 00 0A 00
  32+ 05AB 6E 00 0B 00
  32+ 05AF 72 00 0C 00
  33+ 05B3 76 00 0D 00                          DW $76, 013, $79, 014, $7D, 015, $80, 016, $82, 017, $85, 018
  33+ 05B7 79 00 0E 00
  33+ 05BB 7D 00 0F 00
  33+ 05BF 80 00 10 00
  33+ 05C3 82 00 11 00
  33+ 05C7 85 00 12 00
  34+ 05CB 87 00 13 00                          DW $87, 019, $8A, 020, $8C, 021, $8E, 022, $90, 023, $92, 024
  34+ 05CF 8A 00 14 00
  34+ 05D3 8C 00 15 00
  34+ 05D7 8E 00 16 00
  34+ 05DB 90 00 17 00
  34+ 05DF 92 00 18 00
  35+ 05E3 94 00 19 00                          DW $94, 025, $96, 026, $98, 027, $99, 028, $9B, 029, $9D, 030
  35+ 05E7 96 00 1A 00
  35+ 05EB 98 00 1B 00
  35+ 05EF 99 00 1C 00
  35+ 05F3 9B 00 1D 00
  35+ 05F7 9D 00 1E 00
  36+ 05FB 9E 00 1F 00                          DW $9E, 031, $A0, 032, $A1, 033, $A2, 034, $A4, 035, $A5, 036
  36+ 05FF A0 00 20 00
  36+ 0603 A1 00 21 00
  36+ 0607 A2 00 22 00
  36+ 060B A4 00 23 00
  36+ 060F A5 00 24 00
  37+ 0613 A6 00 25 00                          DW $A6, 037, $A7, 038, $A9, 039, $AA, 040, $AB, 041, $AC, 042
  37+ 0617 A7 00 26 00
  37+ 061B A9 00 27 00
  37+ 061F AA 00 28 00
  37+ 0623 AB 00 29 00
  37+ 0627 AC 00 2A 00
  38+ 062B AD 00 2B 00                          DW $AD, 043, $AE, 044, $AF, 045, $B0, 046, $B1, 047, $B2, 048
  38+ 062F AE 00 2C 00
  38+ 0633 AF 00 2D 00
  38+ 0637 B0 00 2E 00
  38+ 063B B1 00 2F 00
  38+ 063F B2 00 30 00
  39+ 0643 B3 00 31 00                          DW $B3, 049, $B4, 050, $B5, 051, $B6, 052, $B7, 053, $B8, 054
  39+ 0647 B4 00 32 00
  39+ 064B B5 00 33 00
  39+ 064F B6 00 34 00
  39+ 0653 B7 00 35 00
  39+ 0657 B8 00 36 00
  40+ 065B B9 00 38 00                          DW $B9, 056, $B9, 056, $BA, 057, $BB, 058, $BC, 059, $BD, 060
  40+ 065F B9 00 38 00
  40+ 0663 BA 00 39 00
  40+ 0667 BB 00 3A 00
  40+ 066B BC 00 3B 00
  40+ 066F BD 00 3C 00
  41+ 0673 BE 00 3E 00                          DW $BE, 062, $BF, 063, $C0, 064, $C1, 066, $C2, 067, $C3, 069
  41+ 0677 BF 00 3F 00
  41+ 067B C0 00 40 00
  41+ 067F C1 00 42 00
  41+ 0683 C2 00 43 00
  41+ 0687 C3 00 45 00
  42+ 068B C4 00 46 00                          DW $C4, 070, $C5, 072, $C6, 072, $C7, 074, $C8, 076, $C9, 077
  42+ 068F C5 00 48 00
  42+ 0693 C6 00 48 00
  42+ 0697 C7 00 4A 00
  42+ 069B C8 00 4C 00
  42+ 069F C9 00 4D 00
  43+ 06A3 CA 00 50 00                          DW $CA, 080, $CB, 082, $CC, 083, $CD, 085, $CE, 087, $CF, 088
  43+ 06A7 CB 00 52 00
  43+ 06AB CC 00 53 00
  43+ 06AF CD 00 55 00
  43+ 06B3 CE 00 57 00
  43+ 06B7 CF 00 58 00
  44+ 06BB D0 00 5A 00                          DW $D0, 090, $D1, 092, $D2, 094, $D3, 097, $D4, 100, $D5, 102
  44+ 06BF D1 00 5C 00
  44+ 06C3 D2 00 5E 00
  44+ 06C7 D3 00 61 00
  44+ 06CB D4 00 64 00
  44+ 06CF D5 00 66 00
  45+ 06D3 D6 00 68 00                          DW $D6, 104, $D6, 105, $D7, 106, $D7, 107, $D8, 108, $D8, 109
  45+ 06D7 D6 00 69 00
  45+ 06DB D7 00 6A 00
  45+ 06DF D7 00 6B 00
  45+ 06E3 D8 00 6C 00
  45+ 06E7 D8 00 6D 00
  46+ 06EB D9 00 6E 00                          DW $D9, 110, $D9, 111, $D9, 112, $DA, 113, $DB, 114, $DC, 117
  46+ 06EF D9 00 6F 00
  46+ 06F3 D9 00 70 00
  46+ 06F7 DA 00 71 00
  46+ 06FB DB 00 72 00
  46+ 06FF DC 00 75 00
  47+ 0703 DD 00 78 00                          DW $DD, 120, $DE, 123, $DF, 126, $E0, 128, $E1, 131, $E2, 134
  47+ 0707 DE 00 7B 00
  47+ 070B DF 00 7E 00
  47+ 070F E0 00 80 00
  47+ 0713 E1 00 83 00
  47+ 0717 E2 00 86 00
  48+ 071B E3 00 89 00                          DW $E3, 137, $E4, 140, $E5, 143, $E6, 146, $E7, 149, $E8, 153
  48+ 071F E4 00 8C 00
  48+ 0723 E5 00 8F 00
  48+ 0727 E6 00 92 00
  48+ 072B E7 00 95 00
  48+ 072F E8 00 99 00
  49+ 0733 E9 00 9C 00                          DW $E9, 156, $EA, 159, $EB, 163, $EC, 166, $ED, 170, $EE, 174
  49+ 0737 EA 00 9F 00
  49+ 073B EB 00 A3 00
  49+ 073F EC 00 A6 00
  49+ 0743 ED 00 AA 00
  49+ 0747 EE 00 AE 00
  50+ 074B EF 00 B2 00                          DW $EF, 178, $F0, 182, $F1, 185, $F2, 190, $F3, 194, $F4, 198
  50+ 074F F0 00 B6 00
  50+ 0753 F1 00 B9 00
  50+ 0757 F2 00 BE 00
  50+ 075B F3 00 C2 00
  50+ 075F F4 00 C6 00
  51+ 0763 F5 00 CA 00                          DW $F5, 202, $F6, 207, $F7, 211, $F8, 216, $F8, 217, $F9, 220
  51+ 0767 F6 00 CF 00
  51+ 076B F7 00 D3 00
  51+ 076F F8 00 D8 00
  51+ 0773 F8 00 D9 00
  51+ 0777 F9 00 DC 00
  52+ 077B FA 00 E1 00                          DW $FA, 225, $FB, 230, $FB, 233, $FC, 235, $FD, 240, $FE, 246
  52+ 077F FB 00 E6 00
  52+ 0783 FB 00 E9 00
  52+ 0787 FC 00 EB 00
  52+ 078B FD 00 F0 00
  52+ 078F FE 00 F6 00
  53+ 0793 FF 00 FB 00                          DW $FF, 251
  54+ 0797              LogReverseTableLen:     EQU $ - LogReverseHighByte
# file closed: ./Tables/logtable.asm
1231  0797                                  DISPLAY "Bank ",BankMathsTables," - Bytes free ",/D, $2000 - ($-MathsTablesAddr), " - BankMathsTables"
1232  0797                                  ASSERT $-MathsTablesAddr <8912, Bank code leaks over 8K boundary
1233  0797              ; Bank 100  -----------------------------------------------------------------------------------------------------------------------
1234  0797                                  SLOT    KeyboardAddr
1235  0797                                  PAGE    BankKeyboard
1236  0797                                  ORG SoundAddr, BankKeyboard
1237  E000                                  INCLUDE "./Hardware/keyboard.asm"
# file opened: ./Hardware/keyboard.asm
   1+ E000              ;
   2+ E000              ; $FEFE;65278 V, C, X, Z, Caps Shifts       4  3  2  1  0
   3+ E000              ; $FDFE;65022 G, F, D, S, A                 9  8  7  6  5
   4+ E000              ; $FBFE;64510 T, R, E, W, Q                14 13 12 11 10
   5+ E000              ; $F7FE;63486 5, 4, 3, 2, 1                19 18 17 16 15
   6+ E000              ; $EFFE;61438 6, 7, 8, 9, 0                24 23 22 23 20
   7+ E000              ; $DFFE;57342 Y, U, I, O, P                29 28 27 26 25
   8+ E000              ; $BFFE;49150 H, J, K, L, Enter            34 33 32 31 30
   9+ E000              ; $7FFE;32766 B, N, M, Symbol Shift, Space 39 38 37 36 35
  10+ E000              ;
  11+ E000              ; Keyboard
  12+ E000              ;
  13+ E000              ;   0      1       2       3       4       5        6       7       8       9
  14+ E000              ;  VK_CAPS, VK_Z,  VK_X,   VK_C,   VK_V,   VK_A,    VK_S,   VK_D,   VK_F,   VK_G
  15+ E000              ;   10     11      12      13      14      15       16      17      18      19
  16+ E000              ;  VK_Q,   VK_W,   VK_E,   VK_R,   VK_T,   VK_1,    VK_2,   VK_3,   VK_4,   VK_5
  17+ E000              ;   20     21      22      23      24      25       26      27      28      29
  18+ E000              ;  VK_0    VK_9,   VK_8,   VK_7,   VK_6,   VK_P ,    VK_O,  VK_I,   VK_U,   VK_Y
  19+ E000              ;   30     31      32      33      34      35       36      37      38      39
  20+ E000              ; VK_ENTER VK_L,   VK_K,   VK_J,   VK_H,   VK_SPACE VK_SYM, VK_M,   VK_N,   VK_B
  21+ E000              ;
  22+ E000              ; ZX Spectrum Next Compound keys
  23+ E000              ;   40     41       42       43      44      45       46       47
  24+ E000              ;  VK_SEMI VK_QUOTE VK_COMMA VK_STOP VK_UP   VK_DOWN  VK_LEFT  VK _RIGHT        $Register B0 bits 7 to 0    (Set to set ULA Register ($68) bit to to prevent default keystrokes
  25+ E000              ;   48       49      50       51         52          53       54      55
  26+ E000              ;  VK_DELETE VK_EDIT VK_BREAK VK_INV_VID VK_TRUE_VID VK_GRAPH VK_CAPS VK_EXTEND $Register B1 bits 7 to 0
  27+ E000              ; Default map
  28+ E000              ;-----------------------------------------------------------------------------------------------------------------------------------
  29+ E000              ;   0          1           2             3              4           5           6           7           8           9
  30+ E000              ;   VK_CAPS    VK_Z        VK_X,         VK_C,          VK_V,       VK_A        VK_S,       VK_D,       VK_F,       VK_G
  31+ E000              ;              GameSkip                  Equip          SelLCargo   Climb       Decelerate  Recentre    FireM       HomeCursor
  32+ E000              ;                                                                                                       Find System
  33+ E000              ;-----------------------------------------------------------------------------------------------------------------------------------
  34+ E000              ;   10         11          12            13             14          15          16          17          18          19
  35+ E000              ;   VK_Q       VK_W,       VK_E,         VK_R,          VK_T,       VK_1        VK_2        VK_3        VK_4        VK_5
  36+ E000              ;   Dive       Accelerate  ECM           UnarmMissile   TargetM     FrontV      AftV        LeftV       RightV      GalacticChart
  37+ E000              ;-----------------------------------------------------------------------------------------------------------------------------------
  38+ E000              ;   20         Accel       22            23             24          25          26          27          28          29
  39+ E000              ;   VK_0       VK_9,       VK_8,         VK_7,          VK_6,       VK_P ,      VK_O,       VK_I,       VK_U,       VK_Y
  40+ E000              ;   EscapePod  Inventory   Status        MarketPrices   LocalChart  RollRight   RolLLeft                EnergyBomb  Quit
  41+ E000              ;   PlanetData                                                      PauseGame   SaveGame
  42+ E000              ;-----------------------------------------------------------------------------------------------------------------------------------
  43+ E000              ;   30         31          32            33             34          Right       36          37          EnergyBomb  39
  44+ E000              ;   VK_ENTER   VK_L,       VK_K,         VK_J,          VK_H,       VK_SPACE    VK_SYM,     VK_M,       VK_N,       VK_B
  45+ E000              ;              Launch                    Distance       Hyperspace  Laser                               DockComp    BuyCargo
  46+ E000              ;              ResumeGame                WarpJump
  47+ E000              ;-----------------------------------------------------------------------------------------------------------------------------------
  48+ E000              ;   40         41          42            43             44          45          46          47          48          49
  49+ E000              ;   VK_SEMI    VK_QUOTE    VK_COMMA      VK_STOP        VK_UP       VK_DOWN     VK_LEFT     VK _RIGHT   VK_DELETE   VK_EDIT
  50+ E000              ;   Market     EquipShip   PlanetData    NearestObject  Map Cursor no auto repeat....................   Delete      Find System
  51+ E000              ;
  52+ E000              ;-----------------------------------------------------------------------------------------------------------------------------------
  53+ E000              ;   50         51          52            53             54          55
  54+ E000              ;   VK_BREAK   VK_INV_VID  VK_TRUE_VID   VK_GRAPH       VK_EXTCAPS  VK_EXTEND
  55+ E000              ;   EscapePod  Inventory   Status        GalacticChart  LocalChart  SystemJump
  56+ E000              ;
  57+ E000
  58+ E000              ; You can read address to check keystate by address KeyboardMap + c_Pressed corresponding key. There is also an addr_ helper too
  59+ E000
  60+ E000              c_Pressed_Front         equ 0  * 2
  61+ E000              c_Pressed_Aft           equ 1  * 2
  62+ E000              c_Pressed_Left          equ 2  * 2
  63+ E000              c_Pressed_Right         equ 3  * 2
  64+ E000              c_Pressed_RollLeft      equ 4  * 2
  65+ E000              c_Pressed_RollRight     equ 5  * 2
  66+ E000              c_Pressed_Dive          equ 6  * 2
  67+ E000              c_Pressed_Climb         equ 7  * 2
  68+ E000              c_Pressed_Accellerate   equ 8  * 2
  69+ E000              c_Pressed_Decellerate   equ 9  * 2
  70+ E000              c_Pressed_FireLaser     equ 10 * 2
  71+ E000              c_Pressed_TargetMissle  equ 11 * 2
  72+ E000              c_Pressed_FireMissile   equ 12 * 2
  73+ E000              c_Pressed_UnarmMissile  equ 13 * 2
  74+ E000              c_Pressed_ECM           equ 14 * 2
  75+ E000              c_Pressed_EnergyBomb    equ 15 * 2
  76+ E000              c_Pressed_EscapePod     equ 16 * 2
  77+ E000              c_Pressed_DockingComp   equ 17 * 2
  78+ E000              c_Pressed_Hyperspace    equ 18 * 2
  79+ E000              c_Pressed_Distance      equ 19 * 2
  80+ E000              c_Pressed_HomeCursor    equ 20 * 2
  81+ E000              c_Pressed_Launch        equ 21 * 2
  82+ E000              c_Pressed_BuyCargo      equ 22 * 2
  83+ E000              c_Pressed_SellCargo     equ 23 * 2
  84+ E000              c_Pressed_Equip         equ 24 * 2
  85+ E000              c_Pressed_GalacticChrt  equ 25 * 2
  86+ E000              c_Pressed_LocalChart    equ 26 * 2
  87+ E000              c_Pressed_MarketPrices  equ 27 * 2
  88+ E000              c_Pressed_Status        equ 28 * 2
  89+ E000              c_Pressed_Inventory     equ 29 * 2
  90+ E000              c_Pressed_GameSkip      equ 30 * 2
  91+ E000              c_Pressed_Save          equ 31 * 2
  92+ E000              c_Pressed_Freeze        equ 32 * 2
  93+ E000              c_Pressed_Resume        equ 33 * 2
  94+ E000              c_Pressed_Recentre      equ 34 * 2
  95+ E000              c_Pressed_Quit          equ 35 * 2
  96+ E000              c_Pressed_PlanetData    equ 36 * 2
  97+ E000              c_Pressed_CursorUp      equ 37 * 2
  98+ E000              c_Pressed_CursorDown    equ 38 * 2
  99+ E000              c_Pressed_Find          equ 39 * 2
 100+ E000              c_Pressed_Yes           equ 40 * 2
 101+ E000              c_Pressed_No            equ 41 * 2
 102+ E000              c_Pressed_Warp          equ 42 * 2
 103+ E000              c_Pressed_ExtMarket     equ 43 * 2
 104+ E000              c_Pressed_ExtEquip      equ 44 * 2
 105+ E000              c_Pressed_ExtPlanet     equ 45 * 2
 106+ E000              c_Pressed_ExtNearest    equ 46 * 2
 107+ E000              c_Pressed_ExtCurUp      equ 47 * 2
 108+ E000              c_Pressed_ExtCurDown    equ 48 * 2
 109+ E000              c_Pressed_ExtCurLeft    equ 49 * 2
 110+ E000              c_Pressed_ExtCurRight   equ 50 * 2
 111+ E000              c_Pressed_ExtDelete     equ 51 * 2
 112+ E000              c_Pressed_ExtFindSystem equ 52 * 2
 113+ E000              c_Pressed_ExtEscapePod  equ 53 * 2
 114+ E000              c_Pressed_ExtInventory  equ 54 * 2
 115+ E000              c_Pressed_ExtStatus     equ 55 * 2
 116+ E000              c_Pressed_ExtGlactic    equ 56 * 2
 117+ E000              c_Pressed_ExtLocal      equ 57 * 2
 118+ E000              c_Pressed_ExtSystemJump equ 58 * 2
 119+ E000
 120+ E000              ; half row 1
 121+ E000              VK_CAPS  				equ 0
 122+ E000              VK_Z  					equ 1
 123+ E000              VK_X  					equ 2
 124+ E000              VK_C  					equ 3
 125+ E000              VK_V  					equ 4
 126+ E000              ; half row 2
 127+ E000              VK_A  					equ 5
 128+ E000              VK_S  					equ 6
 129+ E000              VK_D  					equ 7
 130+ E000              VK_F					equ 8
 131+ E000              VK_G  					equ 9
 132+ E000              ; half row 3
 133+ E000              VK_Q  					equ 10
 134+ E000              VK_W  					equ 11
 135+ E000              VK_E  					equ 12
 136+ E000              VK_R  					equ 13
 137+ E000              VK_T  					equ 14
 138+ E000              ; half row 4
 139+ E000              VK_1  					equ 15
 140+ E000              VK_2  					equ 16
 141+ E000              VK_3  					equ 17
 142+ E000              VK_4  					equ 18
 143+ E000              VK_5  					equ 19
 144+ E000              ; half row 5
 145+ E000              VK_0 					equ 20
 146+ E000              VK_9 					equ 21
 147+ E000              VK_8 					equ 22
 148+ E000              VK_7 					equ 23
 149+ E000              VK_6 					equ 24
 150+ E000              ; half row 6
 151+ E000              VK_P  					equ 25
 152+ E000              VK_O  					equ 26
 153+ E000              VK_I  					equ 27
 154+ E000              VK_U  					equ 28
 155+ E000              VK_Y  					equ 29
 156+ E000              ; half row 7
 157+ E000              VK_ENTER 				equ 30
 158+ E000              VK_L  					equ 31
 159+ E000              VK_K  					equ 32
 160+ E000              VK_J  					equ 33
 161+ E000              VK_H  					equ 34
 162+ E000              ; half row 8
 163+ E000              VK_SPACE 				equ 35
 164+ E000              VK_SYM  				equ 36
 165+ E000              VK_M  					equ 37
 166+ E000              VK_N  					equ 38
 167+ E000              VK_B  					equ 39
 168+ E000              ; Extended Group B0
 169+ E000              VK_SEMI                 equ 40
 170+ E000              VK_QUOTE                equ 41
 171+ E000              VK_COMMA                equ 42
 172+ E000              VK_STOP                 equ 43
 173+ E000              VK_UP                   equ 44
 174+ E000              VK_DOWN                 equ 45
 175+ E000              VK_LEFT                 equ 46
 176+ E000              VK_RIGHT                equ 47
 177+ E000              ; Extended Group B1
 178+ E000              VK_DELETE               equ 48
 179+ E000              VK_EDIT                 equ 49
 180+ E000              VK_BREAK                equ 50
 181+ E000              VK_INV_VID              equ 51
 182+ E000              VK_TRUE_VID             equ 52
 183+ E000              VK_GRAPH                equ 53
 184+ E000              VK_EXTCAPS              equ 54
 185+ E000              VK_EXTEND               equ 55
 186+ E000              ;KeyboardMapping
 187+ E000              KeyCode_Front        	equ VK_1
 188+ E000              KeyCode_Aft          	equ VK_2
 189+ E000              KeyCode_Left         	equ VK_3
 190+ E000              KeyCode_Right        	equ VK_4
 191+ E000              KeyCode_RollLeft     	equ VK_O
 192+ E000              KeyCode_RollRight    	equ VK_P
 193+ E000              KeyCode_Dive         	equ VK_Q
 194+ E000              KeyCode_Climb        	equ VK_A
 195+ E000              KeyCode_Accellerate  	equ VK_W
 196+ E000              KeyCode_Decellerate  	equ VK_S
 197+ E000              KeyCode_FireLaser    	equ VK_SPACE
 198+ E000              KeyCode_TargetMissle 	equ VK_T
 199+ E000              KeyCode_FireMissile  	equ VK_STOP
 200+ E000              KeyCode_Find        	equ VK_F
 201+ E000              KeyCode_UnarmMissile 	equ VK_R
 202+ E000              KeyCode_ECM          	equ VK_E
 203+ E000              KeyCode_EnergyBomb   	equ VK_U
 204+ E000              KeyCode_EscapePod    	equ VK_CAPS
 205+ E000              KeyCode_DockingComp  	equ VK_N
 206+ E000              KeyCode_Hyperspace   	equ VK_H
 207+ E000              KeyCode_Distance     	equ VK_J
 208+ E000              KeyCode_HomeCursor   	equ VK_G
 209+ E000              KeyCode_Launch       	equ VK_L
 210+ E000              KeyCode_BuyCargo     	equ VK_B
 211+ E000              KeyCode_SellCargo    	equ VK_V
 212+ E000              KeyCode_Equip        	equ VK_C
 213+ E000              KeyCode_GalacticChrt 	equ VK_5
 214+ E000              KeyCode_LocalChart   	equ VK_6
 215+ E000              KeyCode_MarketPrices 	equ VK_7
 216+ E000              KeyCode_Status       	equ VK_8
 217+ E000              KeyCode_Inventory    	equ VK_9
 218+ E000              KeyCode_GameSkip     	equ VK_Z
 219+ E000              KeyCode_Save         	equ VK_O
 220+ E000              KeyCode_Freeze       	equ VK_B
 221+ E000              KeyCode_Resume       	equ VK_L
 222+ E000              KeyCode_Recentre     	equ VK_STOP
 223+ E000              KeyCode_Quit         	equ VK_Y
 224+ E000              KeyCode_PlanetData   	equ VK_0
 225+ E000              KeyCode_CursorUp        equ VK_Q
 226+ E000              KeyCode_CursorDown      equ VK_A
 227+ E000              KeyCode_PressedYes      equ VK_Y
 228+ E000              KeyCode_PressedNo       equ VK_N
 229+ E000              KeyCode_Warp            equ VK_J
 230+ E000              KeyCode_ExtMarket       equ VK_SEMI
 231+ E000              KeyCode_ExtEquip        equ VK_QUOTE
 232+ E000              KeyCode_ExtPlanet       equ VK_COMMA
 233+ E000              KeyCode_ExtNearest      equ VK_STOP
 234+ E000              KeyCode_ExtCurUp        equ VK_UP
 235+ E000              KeyCode_ExtCurDown      equ VK_DOWN
 236+ E000              KeyCode_ExtCurLeft      equ VK_LEFT
 237+ E000              KeyCode_ExtCurRight     equ VK_RIGHT
 238+ E000              KeyCode_ExtDelete       equ VK_DELETE
 239+ E000              KeyCode_ExtFindSystem   equ VK_EDIT
 240+ E000              KeyCode_ExtEscapePod    equ VK_BREAK
 241+ E000              KeyCode_ExtInventory    equ VK_INV_VID
 242+ E000              KeyCode_ExtStatus       equ VK_TRUE_VID
 243+ E000              KeyCode_ExtGlactic      equ VK_GRAPH
 244+ E000              KeyCode_ExtLocal        equ VK_EXTCAPS
 245+ E000              KeyCode_ExtSystemJump   equ VK_EXTEND
 246+ E000
 247+ E000 00 00 00...  Keys					DS	55          ; This is the list of key states for all the VK keys presssed i.e. VK_CAPS through to VK_B
 248+ E037              c_KeyBoardLen 			equ $ - Keys
 249+ E037 00 00 00...  RawKeys					DS	10          ; increased for extended keys
 250+ E041 FE FD FB F7  KeyAddrTab				DB	$FE, $FD, $FB, $F7, $EF, $DF, $BF, $7F
 250+ E045 EF DF BF 7F
 251+ E049              ; Now keyboard map lists each game key and the corresponding address in the Keys table to get the value. This way redefining keys is just a case
 252+ E049              ; of updating this table with the respective location to look up
 253+ E049              ; key list sequence is in table above
 254+ E049 0F E0 10 E0  KeyboardMap             DW  Keys+KeyCode_Front        ,Keys+KeyCode_Aft          ,Keys+KeyCode_Left         ,Keys+KeyCode_Right        ,Keys+KeyCode_RollLeft
 254+ E04D 11 E0 12 E0
 254+ E051 1A E0
 255+ E053 19 E0 0A E0                          DW  Keys+KeyCode_RollRight    ,Keys+KeyCode_Dive         ,Keys+KeyCode_Climb        ,Keys+KeyCode_Accellerate  ,Keys+KeyCode_Decellerate
 255+ E057 05 E0 0B E0
 255+ E05B 06 E0
 256+ E05D 23 E0 0E E0                          DW  Keys+KeyCode_FireLaser    ,Keys+KeyCode_TargetMissle ,Keys+KeyCode_FireMissile  ,Keys+KeyCode_UnarmMissile ,Keys+KeyCode_ECM
 256+ E061 2B E0 0D E0
 256+ E065 0C E0
 257+ E067 1C E0 00 E0                          DW  Keys+KeyCode_EnergyBomb   ,Keys+KeyCode_EscapePod    ,Keys+KeyCode_DockingComp  ,Keys+KeyCode_Hyperspace   ,Keys+KeyCode_Distance
 257+ E06B 26 E0 22 E0
 257+ E06F 21 E0
 258+ E071 09 E0 1F E0                          DW  Keys+KeyCode_HomeCursor   ,Keys+KeyCode_Launch       ,Keys+KeyCode_BuyCargo     ,Keys+KeyCode_SellCargo    ,Keys+KeyCode_Equip
 258+ E075 27 E0 04 E0
 258+ E079 03 E0
 259+ E07B 13 E0 18 E0                          DW  Keys+KeyCode_GalacticChrt ,Keys+KeyCode_LocalChart   ,Keys+KeyCode_MarketPrices ,Keys+KeyCode_Status       ,Keys+KeyCode_Inventory
 259+ E07F 17 E0 16 E0
 259+ E083 15 E0
 260+ E085 01 E0 1A E0                          DW  Keys+KeyCode_GameSkip     ,Keys+KeyCode_Save         ,Keys+KeyCode_Freeze       ,Keys+KeyCode_Resume       ,Keys+KeyCode_Recentre
 260+ E089 27 E0 1F E0
 260+ E08D 2B E0
 261+ E08F 1D E0 14 E0                          DW  Keys+KeyCode_Quit         ,Keys+KeyCode_PlanetData   ,Keys+KeyCode_CursorUp     ,Keys+KeyCode_CursorDown   ,Keys+KeyCode_Find
 261+ E093 0A E0 05 E0
 261+ E097 08 E0
 262+ E099 1D E0 26 E0                          DW  Keys+KeyCode_PressedYes   ,Keys+KeyCode_PressedNo    ,Keys+KeyCode_Warp         ,Keys+KeyCode_ExtMarket    ,Keys+KeyCode_ExtEquip
 262+ E09D 21 E0 28 E0
 262+ E0A1 29 E0
 263+ E0A3 2A E0 2B E0                          DW  Keys+KeyCode_ExtPlanet    ,Keys+KeyCode_ExtNearest   ,Keys+KeyCode_ExtCurUp     ,Keys+KeyCode_ExtCurDown   ,Keys+KeyCode_ExtCurLeft
 263+ E0A7 2C E0 2D E0
 263+ E0AB 2E E0
 264+ E0AD 2F E0 30 E0                          DW  Keys+KeyCode_ExtCurRight  ,Keys+KeyCode_ExtDelete    ,Keys+KeyCode_ExtFindSystem,Keys+KeyCode_ExtEscapePod ,Keys+KeyCode_ExtInventory
 264+ E0B1 31 E0 32 E0
 264+ E0B5 33 E0
 265+ E0B7 34 E0 35 E0                          DW  Keys+KeyCode_ExtStatus    ,Keys+KeyCode_ExtGlactic   ,Keys+KeyCode_ExtLocal     ,Keys+KeyCode_ExtSystemJump
 265+ E0BB 36 E0 37 E0
 266+ E0BF
 267+ E0BF
 268+ E0BF 3F 5A 58 43  ASCII_Map:              DB "?","Z","X","C","V"
 268+ E0C3 56
 269+ E0C4 41 53 44 46                          DB "A","S","D","F","G"
 269+ E0C8 47
 270+ E0C9 51 57 45 52                          DB "Q","W","E","R","T"
 270+ E0CD 54
 271+ E0CE 31 32 33 34                          DB "1","2","3","4","5"
 271+ E0D2 35
 272+ E0D3 30 39 38 37                          DB "0","9","8","7","6"
 272+ E0D7 36
 273+ E0D8 50 4F 49 55                          DB "P","O","I","U","Y"
 273+ E0DC 59
 274+ E0DD 3E 4C 4B 4A                          DB ">","L","K","J","H"
 274+ E0E1 48
 275+ E0E2 20 5E 4D 4E                          DB " ","^","M","N","B"
 275+ E0E6 42
 276+ E0E7 3B 22 2C 2E                          DB ";",'"',",",".","^","v","[","]"  ; Extended keys register 0 semicolon, quote, comman, fullstop, up, down, left, right
 276+ E0EB 5E 76 5B 5D
 277+ E0EF 23 65 62 69                          DB "#","e","b","i","t","g","c","x"  ; Extended keys register 1 delete, edit, break, inv video, true video graph, caps, extend
 277+ E0F3 74 67 63 78
 278+ E0F7              ; mapping of a code to the lookup table Keyboard map. So if you are using an addr_Pressed you can then fetch from KeyboardMap the address in Keys
 279+ E0F7              ; for the raw key press status
 280+ E0F7              addr_Pressed_Front         equ KeyboardMap+c_Pressed_Front
 281+ E0F7              addr_Pressed_Aft           equ KeyboardMap+c_Pressed_Aft
 282+ E0F7              addr_Pressed_Left          equ KeyboardMap+c_Pressed_Left
 283+ E0F7              addr_Pressed_Right         equ KeyboardMap+c_Pressed_Right
 284+ E0F7              addr_Pressed_RollLeft      equ KeyboardMap+c_Pressed_RollLeft
 285+ E0F7              addr_Pressed_RollRight     equ KeyboardMap+c_Pressed_RollRight
 286+ E0F7              addr_Pressed_Dive          equ KeyboardMap+c_Pressed_Dive
 287+ E0F7              addr_Pressed_Climb         equ KeyboardMap+c_Pressed_Climb
 288+ E0F7              addr_Pressed_Accellerate   equ KeyboardMap+c_Pressed_Accellerate
 289+ E0F7              addr_Pressed_Decellerate   equ KeyboardMap+c_Pressed_Decellerate
 290+ E0F7              addr_Pressed_FireLaser     equ KeyboardMap+c_Pressed_FireLaser
 291+ E0F7              addr_Pressed_TargetMissle  equ KeyboardMap+c_Pressed_TargetMissle
 292+ E0F7              addr_Pressed_FireMissile   equ KeyboardMap+c_Pressed_FireMissile
 293+ E0F7              addr_Pressed_UnarmMissile  equ KeyboardMap+c_Pressed_UnarmMissile
 294+ E0F7              addr_Pressed_ECM           equ KeyboardMap+c_Pressed_ECM
 295+ E0F7              addr_Pressed_EnergyBomb    equ KeyboardMap+c_Pressed_EnergyBomb
 296+ E0F7              addr_Pressed_EscapePod     equ KeyboardMap+c_Pressed_EscapePod
 297+ E0F7              addr_Pressed_DockingComp   equ KeyboardMap+c_Pressed_DockingComp
 298+ E0F7              addr_Pressed_Hyperspace    equ KeyboardMap+c_Pressed_Hyperspace
 299+ E0F7              addr_Pressed_Distance      equ KeyboardMap+c_Pressed_Distance
 300+ E0F7              addr_Pressed_HomeCursor    equ KeyboardMap+c_Pressed_HomeCursor
 301+ E0F7              addr_Pressed_Launch        equ KeyboardMap+c_Pressed_Launch
 302+ E0F7              addr_Pressed_BuyCargo      equ KeyboardMap+c_Pressed_BuyCargo
 303+ E0F7              addr_Pressed_SellCargo     equ KeyboardMap+c_Pressed_SellCargo
 304+ E0F7              addr_Pressed_Equip         equ KeyboardMap+c_Pressed_Equip
 305+ E0F7              addr_Pressed_GalacticChrt  equ KeyboardMap+c_Pressed_GalacticChrt
 306+ E0F7              addr_Pressed_LocalChart    equ KeyboardMap+c_Pressed_LocalChart
 307+ E0F7              addr_Pressed_MarketPrices  equ KeyboardMap+c_Pressed_MarketPrices
 308+ E0F7              addr_Pressed_Status        equ KeyboardMap+c_Pressed_Status
 309+ E0F7              addr_Pressed_Inventory     equ KeyboardMap+c_Pressed_Inventory
 310+ E0F7              addr_Pressed_GameSkip      equ KeyboardMap+c_Pressed_GameSkip
 311+ E0F7              addr_Pressed_Save          equ KeyboardMap+c_Pressed_Save
 312+ E0F7              addr_Pressed_Freeze        equ KeyboardMap+c_Pressed_Freeze
 313+ E0F7              addr_Pressed_Resume        equ KeyboardMap+c_Pressed_Resume
 314+ E0F7              addr_Pressed_Recentre      equ KeyboardMap+c_Pressed_Recentre
 315+ E0F7              addr_Pressed_Quit          equ KeyboardMap+c_Pressed_Quit
 316+ E0F7              addr_Pressed_PlanetData    equ KeyboardMap+c_Pressed_PlanetData
 317+ E0F7              addr_Pressed_CursorUp      equ KeyboardMap+c_Pressed_CursorUp
 318+ E0F7              addr_Pressed_CursorDown    equ KeyboardMap+c_Pressed_CursorDown
 319+ E0F7              addr_Pressed_Find          equ KeyboardMap+c_Pressed_Find
 320+ E0F7              addr_Pressed_Warp          equ KeyboardMap+c_Pressed_Warp
 321+ E0F7
 322+ E0F7
 323+ E0F7              MIsKeyPressed:          MACRO   keyaddress, misstarget
 324+ E0F7 ~                                    MMUSelectKeyboard
 325+ E0F7 ~                                    ld      hl,(keyaddress)
 326+ E0F7 ~                                    ld      a,(hl)
 327+ E0F7 ~                                    JumpIfAIsZero   misstarget
 328+ E0F7                                      ENDM
 329+ E0F7
 330+ E0F7
 331+ E0F7 21 00 E0     init_keyboard:          ld		hl,Keys                         ; no key s are pressed by default
 332+ E0FA 11 37 00                             ld		de, c_KeyBoardLen               ;
 333+ E0FD 3E 00                                ld		a,0                             ;
 334+ E0FF CD 04 7E                             call	memfill_dma                     ;
 335+ E102 C9                                   ret                                     ;
 336+ E103
 337+ E103
 338+ E103
 339+ E103 DD 21 37 E0  scan_keyboard:          ld		ix,RawKeys                      ; hl = table of raw IO port readings
 340+ E107 21 41 E0                             ld		hl,KeyAddrTab                   ; de = table of IO ports to read
 341+ E10A 0E 08                                ld		c,8                             ; 8 ports to ready
 342+ E10C 11 00 E0                             ld      de,Keys                         ; ix = table of key states from raw read
 343+ E10F 7E           .PortReadLoop:          ld		a,(hl)							; Set up port to read as (hl)$FE
 344+ E110 DB FE                                in		a,($FE)							; read port to a
 345+ E112 DD 77 00                             ld      (ix+0),a                        ; save raw scan
 346+ E115 DD 23                                inc     ix
 347+ E117 23                                   inc		hl                              ; and ready for next read
 348+ E118 06 05        .ProcessInputBits:      ld		b,5								; loop all bits (there are only 5 keys to a group)
 349+ E11A 1F           .ProcessBitsLoop:       rra                                     ; shit bit 0 into carry
 350+ E11B 30 08                                jr      nc,.SetKeyPressed               ; low bit means it was pressed
 351+ E11D FD 6F                                ld      iyl,a
 352+ E11F                                      ZeroA
 352+ E11F AF          >                        xor a
 353+ E120 C3 2D E1                             jp      .SetKey
 354+ E123 20 0B                                jr		nz,.SkipKeySet
 355+ E125 FD 6F        .SetKeyPressed:	        ld      iyl,a                           ; save current input byte
 356+ E127 1A                                   ld      a,(de)                          ; get current keystate
 357+ E128 FE 02                                cp      2
 358+ E12A 28 02                                jr      z,.AlreadyHeld
 359+ E12C 3C                                   inc     a                               ; and increment by 1 as its moved from previous state
 360+ E12D 12           .SetKey:                ld		(de),a				  	        ; save key Pressed state
 361+ E12E FD 7D        .AlreadyHeld:           ld      a,iyl                           ; and retrieve the current input byte
 362+ E130 13           .SkipKeySet:	        inc		de								; move to next key
 363+ E131 10 E7                                djnz	.ProcessBitsLoop				; Process all key group bits
 364+ E133 0D                                   dec     c                               ; thats one row of bits all processed
 365+ E134 20 D9                                jr      nz,.PortReadLoop				; Read next input port
 366+ E136              .ReadExtend0:           GetNextReg EXTENDED_KEYS_0_REGISTER
 366+ E136 01 3B 24    >            ld bc,$243B
 366+ E139 3E B0       >            ld a,EXTENDED_KEYS_0_REGISTER
 366+ E13B ED 79       >            out (c),a
 366+ E13D 04          >            inc b
 366+ E13E ED 78       >            in a,(c)
 367+ E140 32 3F E0                             ld      (RawKeys+8),a                   ; save to extended slot
 368+ E143 06 08                                ld      b,8
 369+ E145 21 28 E0                             ld      hl,Keys + VK_SEMI
 370+ E148 17           .ProcessExtend0:        rla                                     ; shift bits left into carry for extended keys
 371+ E149 30 04                                jr      nc,.SetExtend0KeyPressed
 372+ E14B              .Extend0NotPressed:     ZeroA
 372+ E14B AF          >                        xor a
 373+ E14C C3 55 E1                             jp      .SetExtend0Key
 374+ E14F 7E           .SetExtend0KeyPressed:  ld      a,(hl)
 375+ E150 FE 02                                cp      2
 376+ E152 28 02                                jr      z,.Extend0AlreadyHeld
 377+ E154 3C                                   inc     a
 378+ E155 77           .SetExtend0Key:         ld      (hl),a
 379+ E156 23           .Extend0AlreadyHeld:    inc     hl
 380+ E157 10 EF                                djnz    .ProcessExtend0
 381+ E159              .ReadExtend1:           GetNextReg EXTENDED_KEYS_1_REGISTER
 381+ E159 01 3B 24    >            ld bc,$243B
 381+ E15C 3E B1       >            ld a,EXTENDED_KEYS_1_REGISTER
 381+ E15E ED 79       >            out (c),a
 381+ E160 04          >            inc b
 381+ E161 ED 78       >            in a,(c)
 382+ E163 32 40 E0                             ld      (RawKeys+9),a                      ; save to extended slot
 383+ E166 06 08                                ld      b,8
 384+ E168 21 30 E0                             ld      hl,Keys + VK_DELETE
 385+ E16B 17           .ProcessExtend1:        rla                                     ; shift bits left into carry for extended keys
 386+ E16C 30 04                                jr      nc,.SetExtend1KeyPressed
 387+ E16E              .Extend1NotPressed:     ZeroA
 387+ E16E AF          >                        xor a
 388+ E16F C3 78 E1                             jp      .SetExtend1Key
 389+ E172 7E           .SetExtend1KeyPressed:  ld      a,(hl)
 390+ E173 FE 02                                cp      2
 391+ E175 28 02                                jr      z,.Extend1AlreadyHeld
 392+ E177 3C                                   inc     a
 393+ E178 77           .SetExtend1Key:         ld      (hl),a
 394+ E179 23           .Extend1AlreadyHeld:    inc     hl
 395+ E17A 10 EF                                djnz    .ProcessExtend1
 396+ E17C C9                                   ret
 397+ E17D
 398+ E17D
 399+ E17D
 400+ E17D              GetKeyStateAddressDE:   MACRO
 401+ E17D ~                                    ld      hl,KeyboardMap                  ; work our address to read from
 402+ E17D ~                                    add     hl,a
 403+ E17D ~                                    ld      e,(hl)
 404+ E17D ~                                    inc     hl
 405+ E17D ~                                    ld      d,(hl)                          ; now de = address in keypress list
 406+ E17D                                      ENDM
 407+ E17D
 408+ E17D              GetKeyStateAddressHL:   MACRO
 409+ E17D ~                                    ld      hl,KeyboardMap                  ; work our address to read from
 410+ E17D ~                                    add     hl,a
 411+ E17D ~                                    ld      a,(hl)
 412+ E17D ~                                    inc     hl
 413+ E17D ~                                    ld      h,(hl)                          ; now hl = address in keypress list
 414+ E17D ~                                    ld      l,a
 415+ E17D                                      ENDM
 416+ E17D
 417+ E17D
 418+ E17D              ;;old debug codeCurrentX            DB 0
 419+ E17D              ;;old debug codeCurrentY            DB 0
 420+ E17D              ;;old debug code
 421+ E17D              ;;old debug codedisplayKeyStatus:       xor         a
 422+ E17D              ;;old debug code                        ld          (CurrentX),a
 423+ E17D              ;;old debug code                        ld          hl,RawKeys
 424+ E17D              ;;old debug code                        ld          a,(hl)
 425+ E17D              ;;old debug code                        and         %00011111
 426+ E17D              ;;old debug code                        ld          b,5
 427+ E17D              ;;old debug code.displayLoop:           push        bc,,hl
 428+ E17D              ;;old debug code                        rra
 429+ E17D              ;;old debug code                        jr          c,.displayNoPress
 430+ E17D              ;;old debug code.displayPress:          push        af
 431+ E17D              ;;old debug code                        ld          a,(CurrentX)
 432+ E17D              ;;old debug code                        ld          e,a
 433+ E17D              ;;old debug code                        ld          a,(CurrentY)
 434+ E17D              ;;old debug code                        ld          d,a
 435+ E17D              ;;old debug code                        ld          a,'*'
 436+ E17D              ;;old debug code                        MMUSelectLayer1
 437+ E17D              ;;old debug code                        call        l1_print_char
 438+ E17D              ;;old debug code                        ld          a,(CurrentX)
 439+ E17D              ;;old debug code                        add         a,8
 440+ E17D              ;;old debug code                        ld          (CurrentX),a
 441+ E17D              ;;old debug code                        pop         af
 442+ E17D              ;;old debug code                        pop         bc,,hl
 443+ E17D              ;;old debug code                        djnz        .displayLoop
 444+ E17D              ;;old debug code                        ret
 445+ E17D              ;;old debug code.displayNoPress:        push        af
 446+ E17D              ;;old debug code                        ld          a,(CurrentX)
 447+ E17D              ;;old debug code                        ld          e,a
 448+ E17D              ;;old debug code                        ld          a,(CurrentY)
 449+ E17D              ;;old debug code                        ld          d,a
 450+ E17D              ;;old debug code                        ld          a,'O'
 451+ E17D              ;;old debug code                        MMUSelectLayer1
 452+ E17D              ;;old debug code                        call        l1_print_char
 453+ E17D              ;;old debug code                        ld          a,(CurrentX)
 454+ E17D              ;;old debug code                        add         a,8
 455+ E17D              ;;old debug code                        ld          (CurrentX),a
 456+ E17D              ;;old debug code                        pop         af
 457+ E17D              ;;old debug code                        pop         bc,,hl
 458+ E17D              ;;old debug code                        djnz        .displayLoop
 459+ E17D              ;;old debug code                        ret
 460+ E17D              ;;old debug code
 461+ E17D              ;;old debug codedisplayDownStatus:      ld  a,(Keys+      KeyCode_CursorUp)
 462+ E17D              ;;old debug code                        cp  0
 463+ E17D              ;;old debug code                        jr      z,.displayNoUp
 464+ E17D              ;;old debug code                        cp  1
 465+ E17D              ;;old debug code                        jr      z,.displayUp
 466+ E17D              ;;old debug code.displayHeld:           ld      de,8*15
 467+ E17D              ;;old debug code                        ld      a,"*"
 468+ E17D              ;;old debug code                        MMUSelectLayer1
 469+ E17D              ;;old debug code                        call        l1_print_char
 470+ E17D              ;;old debug code                        ret
 471+ E17D              ;;old debug code.displayUp:             ld      de,8*15
 472+ E17D              ;;old debug code                        ld      a,"+"
 473+ E17D              ;;old debug code                        MMUSelectLayer1
 474+ E17D              ;;old debug code                        call        l1_print_char
 475+ E17D              ;;old debug code                        ret
 476+ E17D              ;;old debug code.displayNoUp:             ld      de,8*15
 477+ E17D              ;;old debug code                        ld      a,"O"
 478+ E17D              ;;old debug code                        MMUSelectLayer1
 479+ E17D              ;;old debug code                        call        l1_print_char
 480+ E17D              ;;old debug code                        ret
 481+ E17D              ;;old debug code
 482+ E17D
 483+ E17D
 484+ E17D              ; call with a = c_Pressed key, will then read mapping does this with keyboard scan, waits until key gets to state 1, if it was already held then#
 485+ E17D              ; it will have to be let go to reset of 0 and scan again
 486+ E17D              ; Deprecated as not used as yet
 487+ E17D              ;;;;;;wait_for_key_a_press:   GetKeyStateAddressHL
 488+ E17D              ;;;;;;                        push    hl
 489+ E17D              ;;;;;;.wait_loop:             call    scan_keyboard
 490+ E17D              ;;;;;;                        pop     hl                              ; get key address into hl
 491+ E17D              ;;;;;;                        push    hl
 492+ E17D              ;;;;;;                        ld      a,(hl)
 493+ E17D              ;;;;;;                        JumpIfANENusng  1,.wait_loop             ; will also loop if held down when entering this routine
 494+ E17D              ;;;;;;                        pop     hl                              ; tidy up rogue push, less t states than detecting if we want to push or not
 495+ E17D              ;;;;;;                        ret
 496+ E17D              ;;;;;;; call with a = c_Pressed key, will then read mapping does this with keyboard scan waits until key gets to state 2
 497+ E17D              ;;;;;;wait_for_key_a_held:    GetKeyStateAddressDE
 498+ E17D              ;;;;;;                        push    hl
 499+ E17D              ;;;;;;.wait_loop:             call    scan_keyboard
 500+ E17D              ;;;;;;                        pop     hl
 501+ E17D              ;;;;;;                        push    hl
 502+ E17D              ;;;;;;                        ld      a,(hl)
 503+ E17D              ;;;;;;                        JumpIfALTNusng  2, .wait_loop
 504+ E17D              ;;;;;;                        pop     hl
 505+ E17D              ;;;;;;                        ret
 506+ E17D
 507+ E17D              ; Gets the current keystate of the c_Pressed Key in a register
 508+ E17D              get_key_a_state:        GetKeyStateAddressHL                    ; reads a mapped key and sets a to key staus, e.g. 0 1 or >=2 DOES NOT SCAN KEYBOARD
 508+ E17D 21 49 E0    >                        ld      hl,KeyboardMap                  ; work our address to read from
 508+ E180 ED 31       >                        add     hl,a
 508+ E182 7E          >                        ld      a,(hl)
 508+ E183 23          >                        inc     hl
 508+ E184 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 508+ E185 6F          >                        ld      l,a
 509+ E186 7E                                   ld      a,(hl)                          ; a = keystate
 510+ E187 C9                                   ret
 511+ E188
 512+ E188              ; sets they keystate of c pressed key in a register to 1 (pressed)
 513+ E188              ; This will be used by auto dock
 514+ E188              force_key_press:        GetKeyStateAddressHL                    ; read key locations
 514+ E188 21 49 E0    >                        ld      hl,KeyboardMap                  ; work our address to read from
 514+ E18B ED 31       >                        add     hl,a
 514+ E18D 7E          >                        ld      a,(hl)
 514+ E18E 23          >                        inc     hl
 514+ E18F 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 514+ E190 6F          >                        ld      l,a
 515+ E191 3E 01                                ld      a,1
 516+ E193 77                                   ld      (hl),a
 517+ E194 C9                                   ret
 518+ E195
 519+ E195              is_key_up_state:        GetKeyStateAddressHL
 519+ E195 21 49 E0    >                        ld      hl,KeyboardMap                  ; work our address to read from
 519+ E198 ED 31       >                        add     hl,a
 519+ E19A 7E          >                        ld      a,(hl)
 519+ E19B 23          >                        inc     hl
 519+ E19C 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 519+ E19D 6F          >                        ld      l,a
 520+ E19E 7E                                   ld      a,(hl)
 521+ E19F FE 00                                cp      0
 522+ E1A1 C9                                   ret
 523+ E1A2
 524+ E1A2              ; returns z is set if c_ key is pressed
 525+ E1A2              is_key_pressed:         GetKeyStateAddressHL
 525+ E1A2 21 49 E0    >                        ld      hl,KeyboardMap                  ; work our address to read from
 525+ E1A5 ED 31       >                        add     hl,a
 525+ E1A7 7E          >                        ld      a,(hl)
 525+ E1A8 23          >                        inc     hl
 525+ E1A9 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 525+ E1AA 6F          >                        ld      l,a
 526+ E1AB 7E                                   ld      a,(hl)                          ; a = keystate
 527+ E1AC FE 01                                cp      1                               ; we cant just test bit 0 as this may have been held long
 528+ E1AE C9                                   ret
 529+ E1AF
 530+ E1AF              ; returns nz is set if c_ key is held, if key was held then keystate would be 2 or 3, i.e. bit 1 set
 531+ E1AF              is_key_held:            GetKeyStateAddressHL
 531+ E1AF 21 49 E0    >                        ld      hl,KeyboardMap                  ; work our address to read from
 531+ E1B2 ED 31       >                        add     hl,a
 531+ E1B4 7E          >                        ld      a,(hl)
 531+ E1B5 23          >                        inc     hl
 531+ E1B6 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 531+ E1B7 6F          >                        ld      l,a
 532+ E1B8 7E                                   ld      a,(hl)                          ; a = keystate
 533+ E1B9 E6 02                                and     Bit1Only                        ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 534+ E1BB C9                                   ret
 535+ E1BC
 536+ E1BC              ; checks to see if any key is pressed in the key table
 537+ E1BC 21 00 E0     is_any_key_pressed:     ld      hl,Keys
 538+ E1BF 01 28 00                             ld      bc,40
 539+ E1C2 3E 01                                ld      a,1
 540+ E1C4 ED B1                                cpir                                    ; search for the value 1
 541+ E1C6 28 03                                jr      z,.KeyPressed                   ; if a key was pressed then handle press
 542+ E1C8                                      SetAFalse
 542+ E1C8 3E FF       >                        ld      a,$FF
 543+ E1CA C9                                   ret
 544+ E1CB 3E 27        .KeyPressed:            ld      a,39                            ; so c will be how many keys still to scan
 545+ E1CD 91                                   sub     c                               ; so a = 40 - c to get to result
 546+ E1CE C9                                   ret
 547+ E1CF
 548+ E1CF 21 00 E0     is_any_key_held:        ld      hl,Keys
 549+ E1D2 06 28                                ld      b,40
 550+ E1D4 0E 00                                ld      c,0
 551+ E1D6 7E           .KeyReadLoop:           ld      a,(hl)
 552+ E1D7 E6 02                                and     Bit1Only                        ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 553+ E1D9 C2 E3 E1                             jp      nz,.KeyPressed
 554+ E1DC 23                                   inc     hl
 555+ E1DD 0C                                   inc     c
 556+ E1DE 10 F6                                djnz    .KeyReadLoop
 557+ E1E0                                      SetAFalse
 557+ E1E0 3E FF       >                        ld      a,$FF
 558+ E1E2 C9                                   ret
 559+ E1E3 79           .KeyPressed:            ld      a,c
 560+ E1E4 C9                                   ret
 561+ E1E5
 562+ E1E5
 563+ E1E5 21 41 E0     WaitForNoKey:           ld      hl,KeyAddrTab                   ; de = table of IO ports to read
 564+ E1E8 06 08                                ld		b,8                             ; 8 ports to ready
 565+ E1EA 7E           .PortReadLoop:          ld		a,(hl)							; Set up port to read as (hl)$FE
 566+ E1EB DB FE                                in		a,($FE)							; read port to a
 567+ E1ED E6 1F                                and     %00011111
 568+ E1EF FE 1F                                cp      %00011111
 569+ E1F1 20 F2                                jr      nz ,WaitForNoKey
 570+ E1F3 23                                   inc		hl                              ; and ready for next read
 571+ E1F4 10 F4                                djnz    .PortReadLoop
 572+ E1F6 C9                                   ret
 573+ E1F7
 574+ E1F7 F5 D5 C5 E5  WaitForAnyKey:          push    af,,de,,bc,,hl
 575+ E1FB CD E5 E1                             call    WaitForNoKey
 576+ E1FE 21 41 E0     .waitKeyLoop:           ld		hl,KeyAddrTab                   ; de = table of IO ports to read
 577+ E201 06 08                                ld		b,8                             ; 8 ports to ready
 578+ E203 7E           .PortReadLoop:          ld		a,(hl)							; Set up port to read as (hl)$FE
 579+ E204 DB FE                                in		a,($FE)							; read port to a
 580+ E206 E6 1F                                and     %00011111
 581+ E208 FE 1F                                cp      %00011111
 582+ E20A C2 14 E2                             jp      nz,.WaitComplete
 583+ E20D C0                                   ret     nz
 584+ E20E 23                                   inc		hl                              ; and ready for next read
 585+ E20F 10 F2                                djnz    .PortReadLoop
 586+ E211 C3 FE E1                             jp      .waitKeyLoop
 587+ E214 E1 C1 D1 F1  .WaitComplete:          pop     af,,de,,bc,,hl
 588+ E218 C9                                   ret
 589+ E219
 590+ E219
 591+ E219 00 00 00...  InputString             DS  30              ; used for a 30 character input buffer
 592+ E237 00                                   DB  0               ; end of string marker as a safety
 593+ E238 00           InputLength             DB  0               ; Current String length
 594+ E239 00           InputCursor             DB  0               ; Current Cursor Position
 595+ E23A 00           EnterPressed            DB  0               ; zero notpressed FF pressed
 596+ E23B 00           InputChanged            DB  0
 597+ E23C 00           InsertMode              DB  0
 598+ E23D              InputLimit              EQU 20
 599+ E23D
 600+ E23D 21 19 E2     keyboard_copy_input_to_de:  ld      hl,InputString
 601+ E240 3A 39 E2                                 ld      a,(InputCursor)
 602+ E243 FE 00                                    cp      0
 603+ E245 28 05                                    jr      z,.NoString
 604+ E247 4F                                       ld      c,a
 605+ E248 06 00                                    ld      b,0
 606+ E24A ED B0                                    ldir
 607+ E24C 3E 00        .NoString                   ld      a,0
 608+ E24E 12                                       ld      (de),a
 609+ E24F C9                                       ret
 610+ E250
 611+ E250               ;Input routine logic
 612+ E250               ;Intialise input state
 613+ E250
 614+ E250              ; Scans the key pressed to determine if its an alpha, returns ascii code or 0 if not alpha
 615+ E250              ; Input a = key pressed, returns with carry set if no alpha else carry is clear
 616+ E250              isKeyAlpha:             JumpIfALTNusng  "A",   .NotAlpha
 616+ E250 FE 41       >                        cp      "A"
 616+ E252 DA 5C E2    >                        jp		c, .NotAlpha
 617+ E255                                      JumpIfAGTENusng "Z"+1, .NotAlpha
 617+ E255 FE 5B       >                        cp     "Z"+1
 617+ E257 D2 5C E2    >                        jp		nc,.NotAlpha
 618+ E25A                                      ClearCarryFlag
 618+ E25A B7          >                        or a
 619+ E25B C9                                   ret
 620+ E25C              .NotAlpha               SetCarryFlag
 620+ E25C 37          >                        scf
 621+ E25D C9                                   ret
 622+ E25E
 623+ E25E 3A 39 E2     InsertKeystroke:        ld      a,(InputCursor)                         ; Current Cursor position
 624+ E261 FE 1E                                cp      30                                      ; protect from buffer overflow
 625+ E263 C8                                   ret     z                                       ; .
 626+ E264 21 19 E2                             ld      hl,InputString                          ; position hl to position in input string
 627+ E267 ED 31                                add     hl,a                                    ; .
 628+ E269 E5                                   push    hl                                      ; save current cursor position
 629+ E26A 47                                   ld      b,a                                     ; as a quick optimisation
 630+ E26B                                      JumpIfMemFalse InsertMode, .NoCopyNeeded        ; if we are in overtype mode skip copy
 630+ E26B 3A 3C E2    >                        ld      a,(InsertMode)
 630+ E26E A7          >                        and     a
 630+ E26F C2 8F E2    >                        jp      nz, .NoCopyNeeded
 631+ E272 3A 38 E2                             ld      a,(InputLength)                         ; no need to shuffle string
 632+ E275 B8                                   cp      b                                       ; if we are at the end already
 633+ E276 78                                   ld      a,b                                     ; .
 634+ E277 CA 8F E2                             jp      z,.NoCopyNeeded                         ; so we can behave like overtype mode
 635+ E27A 11 36 E2                             ld      de,InputString+29                       ; now from the end of the string
 636+ E27D 21 35 E2                             ld      hl,InputString+28                       ; .
 637+ E280 06 1D                                ld      b,29                                    ; for up to 29 characters
 638+ E282 4F                                   ld      c,a                                     ; back to the current cursor position
 639+ E283 C5           .CopyLoop:              push    bc                                      ; save current position
 640+ E284 7E                                   ld      a,(hl)                                  ; now suffle from left char to right char
 641+ E285 12                                   ld      (de),a                                  ; .
 642+ E286 2B                                   dec     hl                                      ; moving back one byte at a time
 643+ E287 1B                                   dec     de                                      ;
 644+ E288 05                                   dec     b                                       ; and reducing the current copy position
 645+ E289 79                                   ld      a,c                                     ; have we reached the input cursor pos
 646+ E28A B8                                   cp      b                                       ;
 647+ E28B C1                                   pop     bc
 648+ E28C C2 83 E2                             jp      nz,.CopyLoop
 649+ E28F E1           .NoCopyNeeded:          pop     hl
 650+ E290 3A 9B E2                             ld      a,(LastKeyPressed)
 651+ E293 77                                   ld      (hl),a
 652+ E294 21 38 E2                             ld      hl,InputLength
 653+ E297 34                                   inc     (hl)
 654+ E298 23                                   inc     hl                                      ;  to input cursor as a short cut to logic
 655+ E299 34                                   inc     (hl)
 656+ E29A C9                                   ret
 657+ E29B
 658+ E29B
 659+ E29B              ; We won't have any auto repeat on input
 660+ E29B 00           LastKeyPressed:         db 0
 661+ E29C
 662+ E29C              initInputText:          ZeroA
 662+ E29C AF          >                        xor a
 663+ E29D 32 39 E2                             ld      (InputCursor),a
 664+ E2A0 32 9B E2                             ld      (LastKeyPressed),a
 665+ E2A3 32 38 E2                             ld      (InputLength),a
 666+ E2A6                                      SetMemTrue  InsertMode
 666+ E2A6 AF          >                        xor     a
 666+ E2A7 32 3C E2    >                        ld      (InsertMode),a
 667+ E2AA                                      SetMemFalse EnterPressed
 667+ E2AA 3E FF       >                        ld      a,$FF
 667+ E2AC 32 3A E2    >                        ld      (EnterPressed),a
 668+ E2AF                                      SetMemFalse InputChanged
 668+ E2AF 3E FF       >                        ld      a,$FF
 668+ E2B1 32 3B E2    >                        ld      (InputChanged),a
 669+ E2B4 21 19 E2                             ld      hl,InputString
 670+ E2B7 06 1E                                ld      b,30
 671+ E2B9 77           .wipeloop:              ld      (hl),a
 672+ E2BA 23                                   inc     hl
 673+ E2BB 10 FC                                djnz    .wipeloop
 674+ E2BD C9                                   ret
 675+ E2BE
 676+ E2BE              ;;;InputNameV2:            call    is_any_key_pressed              ; scan for key states
 677+ E2BE              ;;;                        cp      $FF                             ; no key means we reset auto repeat
 678+ E2BE              ;;;                        jp      z,.NoKeyPressed                 ;
 679+ E2BE              ;;;.IsItLastKeyHeld:       ld      hl,LastKeyPressed               ; is it the same key as before
 680+ E2BE              ;;;                        cp      (hl)                            ;
 681+ E2BE              ;;;                        ret     z                               ; if so just ignore it to avoid auto repeat
 682+ E2BE              ;;;.SetNewAntiRepeat:      ld      (LastKeyPressed),a
 683+ E2BE              ;;;.CheckKeyPressed:       call    isKeyAlpha
 684+ E2BE              ;;;                        jp      nc,.AlphaKeyPressed
 685+ E2BE              ;;;.CheckSpaceKeyPressed:  cp      " "
 686+ E2BE              ;;;                        jp      z,.SpacePressed
 687+ E2BE              ;;;.CheckEnterPressed:     cp      ">"
 688+ E2BE              ;;;                        jp      z,.EnterPressed
 689+ E2BE              ;;;.CheckLeftPressed:      cp      "["
 690+ E2BE              ;;;                        jp      z,.LeftPressed
 691+ E2BE              ;;;.CheckRightPressed:     cp      "]"
 692+ E2BE              ;;;                        jp      z,.RightPressed
 693+ E2BE              ;;;.CheckDeletePressed:    cp      "#"
 694+ E2BE              ;;;                        jp      z,.DeletePressed
 695+ E2BE              ;;;.AnyOtherKeyIsIgnored:  ret
 696+ E2BE              ;;;.AlphaKeyPressed:       ld      a,(InputLength)
 697+ E2BE              ;;;                        JumpIfAGTENusng 30,.MaxInputReached
 698+ E2BE              ;;;.InsertKey:             call    InsertKeystroke
 699+ E2BE              ;;;                        ret
 700+ E2BE              ;;;.SpacePressed:          call    InsertKeystroke
 701+ E2BE              ;;;                        ret
 702+ E2BE              ;;;.EnterPressed:
 703+ E2BE              ;;;
 704+ E2BE              ;;;.LeftPressed:           ld      a,(InputCusor)
 705+ E2BE              ;;;                        JumpIfAIsZero, .MaxInputReached
 706+ E2BE              ;;;                        dec     a
 707+ E2BE              ;;;                        ld      (InputCursor),a
 708+ E2BE              ;;;                        ret
 709+ E2BE              ;;;.RightPressed:          ld      a,(InputLength)
 710+ E2BE              ;;;                        inc     a
 711+ E2BE              ;;;                        ld      b,a
 712+ E2BE              ;;;                        ld      a,(InputCursor)
 713+ E2BE              ;;;                        JumpIfMemGTENusng b, .MaxInputReached
 714+ E2BE              ;;;                        inc     a
 715+ E2BE              ;;;                        ld      (InputCursor),a
 716+ E2BE              ;;;                        ret
 717+ E2BE              ;;;.DeletaPressed:         ld      a,(InputCusor)
 718+ E2BE              ;;;                        ld      c,a
 719+ E2BE              ;;;                        JumpIfAisZero, .MaxInputReached
 720+ E2BE              ;;;                        ld      a,(InputLength)
 721+ E2BE              ;;;                        JumpIfAisZero, .MaxInputReached
 722+ E2BE              ;;;                        ld      de,InputString
 723+ E2BE              ;;;                        ld      hl,de
 724+ E2BE              ;;;                        inc     hl
 725+ E2BE              ;;;                        ld      a,(InputLength)                 ; copy backwards
 726+ E2BE              ;;;                        dec     c                               ; for string length - curretn cursor
 727+ E2BE              ;;;                        ld      c,a
 728+ E2BE              ;;;                        ld      b,0
 729+ E2BE              ;;;                        ldir
 730+ E2BE              ;;;                        ret
 731+ E2BE              ;;;GOTTOHERE
 732+ E2BE
 733+ E2BE
 734+ E2BE
 735+ E2BE C9           .MaxInputReached:       ret ; will add a beep later
 736+ E2BF
 737+ E2BF
 738+ E2BF
 739+ E2BF
 740+ E2BF              .NoKeyPressed:          ZeroA
 740+ E2BF AF          >                        xor a
 741+ E2C0 32 9B E2                             ld      (LastKeyPressed),a              ; Clear last key pressed
 742+ E2C3
 743+ E2C3
 744+ E2C3              InputName:              SetMemFalse InputChanged
 744+ E2C3 3E FF       >                        ld      a,$FF
 744+ E2C5 32 3B E2    >                        ld      (InputChanged),a
 745+ E2C8 CD BC E1                             call    is_any_key_pressed
 746+ E2CB FE FF                                cp      $FF
 747+ E2CD C8                                   ret     z
 748+ E2CE 4F           .KeyPressed:            ld      c,a
 749+ E2CF 3A 39 E2                             ld      a,(InputCursor)                 ; No key so we can now look at if we are at the end of the buffer
 750+ E2D2 FE 14                                cp      InputLimit                      ; move to variable later and then cp (hl)
 751+ E2D4 28 0B                                jr      z,.DeleteOrEnterOnly            ;
 752+ E2D6 21 BF E0                             ld      hl,ASCII_Map
 753+ E2D9 79                                   ld      a,c
 754+ E2DA ED 31                                add     hl,a
 755+ E2DC 7E                                   ld      a,(hl)
 756+ E2DD FE 41                                cp      "A"
 757+ E2DF 30 09                                jr      nc,.AlphaPressed
 758+ E2E1              ; CAPS and Symbol act as delete for now
 759+ E2E1 FE 23        .DeleteOrEnterOnly      cp      "#"                             ; if space was  pressed (mapped to Hash in ASCII table))
 760+ E2E3 28 31                                jr      z,.SpacePressed                 ; for now we will ignore the shift and just assume delete
 761+ E2E5 FE 3E                                cp      ">"         ; ENTER
 762+ E2E7 28 17                                jr      z,.EnterPressed
 763+ E2E9 C9                                   ret
 764+ E2EA 47           .AlphaPressed:          ld      b,a
 765+ E2EB 3A 39 E2                             ld      a,(InputCursor)
 766+ E2EE 4F                                   ld      c,a
 767+ E2EF 21 19 E2                             ld      hl,InputString
 768+ E2F2 ED 31                                add     hl,a
 769+ E2F4 78                                   ld      a,b
 770+ E2F5 70                                   ld      (hl),b
 771+ E2F6 79                                   ld      a,c
 772+ E2F7 21 39 E2                             ld      hl,InputCursor
 773+ E2FA 34                                   inc     (hl)
 774+ E2FB                                      SetMemTrue InputChanged
 774+ E2FB AF          >                        xor     a
 774+ E2FC 32 3B E2    >                        ld      (InputChanged),a
 775+ E2FF C9                                   ret
 776+ E300 3A 39 E2     .EnterPressed:          ld      a,(InputCursor)
 777+ E303 21 19 E2                             ld      hl,InputString
 778+ E306 ED 31                                add     hl,a
 779+ E308                                      ZeroA
 779+ E308 AF          >                        xor a
 780+ E309 77                                   ld      (hl),a
 781+ E30A                                      SetMemTrue EnterPressed
 781+ E30A AF          >                        xor     a
 781+ E30B 32 3A E2    >                        ld      (EnterPressed),a
 782+ E30E                                      SetMemTrue InputChanged
 782+ E30E AF          >                        xor     a
 782+ E30F 32 3B E2    >                        ld      (InputChanged),a
 783+ E312 CD F7 E0                             call    init_keyboard           ; Flush keyboard status so futher inputs don't auto read the enter key as a second press
 784+ E315 C9                                   ret
 785+ E316 3A 39 E2     .SpacePressed:          ld      a,(InputCursor)         ; Space = delete
 786+ E319 FE 00                                cp      0                       ; if input is zero length then can not delete
 787+ E31B C8                                   ret     z
 788+ E31C 3D                                   dec     a                       ; move back one and update cursor pos
 789+ E31D 32 39 E2                             ld      (InputCursor),a         ;
 790+ E320 21 19 E2                             ld      hl,InputString          ; now update end of line to null
 791+ E323 ED 31                                add     hl,a                    ; .
 792+ E325                                      ZeroA                           ; .
 792+ E325 AF          >                        xor a
 793+ E326 77                                   ld      (hl),a                  ; .
 794+ E327                                      SetMemTrue InputChanged
 794+ E327 AF          >                        xor     a
 794+ E328 32 3B E2    >                        ld      (InputChanged),a
 795+ E32B C9                                   ret
 796+ E32C
 797+ E32C              TargetMissileTest:      AnyMissilesLeft
 797+ E32C 3A 20 80    >                        ld      a,(NbrMissiles)
 797+ E32F A7          >                        and     a
 798+ E330                                      JumpIfZero      .ClearTargetting
 798+ E330 CA 47 E3    >                        jp	z,.ClearTargetting
 799+ E333                                      IsMissileLaunchFlagged                      ; if we are comitted to launch
 799+ E333 3A F7 81    >                        ld      a,(MissileTargettingFlag)
 799+ E336 E6 80       >                        and     $80
 800+ E338 C8                                   ret             z                           ; then don't scan as it will be cleared on launch
 801+ E339 3E 16        .ScanForKey:            ld              a,c_Pressed_TargetMissle    ; if not pressed we are done
 802+ E33B CD A2 E1                             call            is_key_pressed              ; .
 803+ E33E C0                                   ret             nz                          ; .
 804+ E33F 3A F7 81     .TargetPressed:         ld              a,(MissileTargettingFlag)   ; get flag back
 805+ E342                                      JumpIfAEqNusng  StageMissileNotTargeting, .SetTargetting
 805+ E342 FE FF       >                        cp     StageMissileNotTargeting
 805+ E344 CA 4D E3    >                        jp      z,.SetTargetting
 806+ E347              .ClearTargetting:       ClearMissileTargetting
 806+ E347 3E FF       >                        ld      a,StageMissileNotTargeting
 806+ E349 32 F7 81    >                        ld      (MissileTargettingFlag),a
 807+ E34C C9                                   ret
 808+ E34D              .SetTargetting:         SetMissileTargetting
 808+ E34D 3E FE       >                        ld      a,StageMissileTargeting
 808+ E34F 32 F7 81    >                        ld      (MissileTargettingFlag),a
 809+ E352 C9                                   ret
 810+ E353
 811+ E353 AF           MovementKeyTest:        xor     a
 812+ E354 32 60 81                             ld      (CursorKeysPressed),a
 813+ E357 3A 7E 7F                             ld      a,(MenuIdMax)
 814+ E35A E6 FC                                and     $FC
 815+ E35C 20 26                                jr      nz,CursorKeys
 816+ E35E 2A 57 E0     ClimbDiveKeys:          ld      hl,(addr_Pressed_Climb)                 ; Check for Climb
 817+ E361 7E                                   ld      a,(hl)
 818+ E362                                      JumpIfAIsZero ScanDiveKey
 818+ E362 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 818+ E363 CA 71 E3    >                        jp	    z, ScanDiveKey
 819+ E366 3A 60 81                             ld      a,(CursorKeysPressed)
 820+ E369 F6 80                                or      CursorClimb
 821+ E36B 32 60 81                             ld      (CursorKeysPressed),a
 822+ E36E C3 A7 E3                             jp      ScanLeftKey
 823+ E371 2A 55 E0     ScanDiveKey:            ld      hl,(addr_Pressed_Dive)                  ; Check for Dive
 824+ E374 7E                                   ld      a,(hl)
 825+ E375                                      JumpIfAIsZero ScanLeftKey
 825+ E375 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 825+ E376 CA A7 E3    >                        jp	    z, ScanLeftKey
 826+ E379 3A 60 81                             ld      a,(CursorKeysPressed)
 827+ E37C F6 40                                or      CursorDive
 828+ E37E 32 60 81                             ld      (CursorKeysPressed),a
 829+ E381 C3 A7 E3                             jp      ScanLeftKey
 830+ E384 2A 93 E0     CursorKeys:             ld      hl,(addr_Pressed_CursorUp)              ; Check cursor keys
 831+ E387 7E                                   ld      a,(hl)
 832+ E388                                      JumpIfAIsZero ScanCursorDownKey
 832+ E388 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 832+ E389 CA 97 E3    >                        jp	    z, ScanCursorDownKey
 833+ E38C 3A 60 81                             ld      a,(CursorKeysPressed)
 834+ E38F F6 80                                or      CursorClimb
 835+ E391 32 60 81                             ld      (CursorKeysPressed),a
 836+ E394 C3 A7 E3                             jp      ScanLeftKey
 837+ E397 2A 95 E0     ScanCursorDownKey:      ld      hl,(addr_Pressed_CursorDown)
 838+ E39A 7E                                   ld      a,(hl)
 839+ E39B                                      JumpIfAIsZero ScanLeftKey
 839+ E39B A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 839+ E39C CA A7 E3    >                        jp	    z, ScanLeftKey
 840+ E39F 3A 60 81                             ld      a,(CursorKeysPressed)
 841+ E3A2 F6 40                                or      CursorDive
 842+ E3A4 32 60 81                             ld      (CursorKeysPressed),a
 843+ E3A7 2A 51 E0     ScanLeftKey:            ld      hl,(addr_Pressed_RollLeft)
 844+ E3AA 7E                                   ld      a,(hl)
 845+ E3AB                                      JumpIfAIsZero ScanRightKey
 845+ E3AB A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 845+ E3AC CA B8 E3    >                        jp	    z, ScanRightKey
 846+ E3AF 3A 60 81                             ld      a,(CursorKeysPressed)
 847+ E3B2 F6 20                                or      CursorLeft
 848+ E3B4 32 60 81                             ld      (CursorKeysPressed),a
 849+ E3B7 C9                                   ret
 850+ E3B8 2A 53 E0     ScanRightKey:           ld      hl,(addr_Pressed_RollRight)
 851+ E3BB 7E                                   ld      a,(hl)
 852+ E3BC                                      JumpIfAIsZero ScanHomeKey
 852+ E3BC A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 852+ E3BD CA C9 E3    >                        jp	    z, ScanHomeKey
 853+ E3C0 3A 60 81                             ld      a,(CursorKeysPressed)
 854+ E3C3 F6 10                                or      CursorRight
 855+ E3C5 32 60 81                             ld      (CursorKeysPressed),a
 856+ E3C8 C9                                   ret
 857+ E3C9 2A 71 E0     ScanHomeKey:            ld      hl,(addr_Pressed_HomeCursor)
 858+ E3CC 7E                                   ld      a,(hl)
 859+ E3CD                                      JumpIfAIsZero ScanRecentreKey
 859+ E3CD A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 859+ E3CE CA DA E3    >                        jp	    z, ScanRecentreKey
 860+ E3D1 3A 60 81                             ld      a,(CursorKeysPressed)
 861+ E3D4 F6 08                                or      CursorHome
 862+ E3D6 32 60 81                             ld      (CursorKeysPressed),a
 863+ E3D9 C9                                   ret
 864+ E3DA 2A 8D E0     ScanRecentreKey:        ld      hl,(addr_Pressed_Recentre)
 865+ E3DD 7E                                   ld      a,(hl)
 866+ E3DE                                      ReturnIfAIsZero
 866+ E3DE A7          >                        and     a
 866+ E3DF C8          >                        ret     z
 867+ E3E0 3A 60 81                             ld      a,(CursorKeysPressed)
 868+ E3E3 F6 04                                or      CursorRecenter
 869+ E3E5 32 60 81                             ld      (CursorKeysPressed),a
 870+ E3E8 C9                                   ret
 871+ E3E9
 872+ E3E9
# file closed: ./Hardware/keyboard.asm
1238  E3E9                                  DISPLAY "Keyboard ",BankKeyboard," - Bytes free ",/D, $2000 - ($-KeyboardAddr), " - BankKeyboard"
1239  E3E9                                  ASSERT $-KeyboardAddr <8912, Bank code leaks over 8K boundary
1240  E3E9              ; Bank 101  -----------------------------------------------------------------------------------------------------------------------
1241  E3E9                                  SLOT    SoundAddr
1242  E3E9                                  PAGE    BankSound
1243  E3E9                                  ORG SoundAddr, BankSound
1244  E000                                  INCLUDE "./Hardware/sound.asm"
# file opened: ./Hardware/sound.asm
   1+ E000
   2+ E000              ;-------------------------------------------------------------------------------------------------
   3+ E000              ;--- Equates for sounds
   4+ E000              ;       DEFINE          USETIMER 1
   5+ E000                     DEFINE          DANUBEATTACK 1
   6+ E000                                      IFDEF   USETIMER
   7+ E000 ~            SOUNDSTEPLENGTH             EQU     25
   8+ E000                                      ENDIF
   9+ E000
  10+ E000
  11+ E000              WriteTurboControlA:     MACRO
  12+ E000 ~                                    ld      bc,TURBO_SOUND_NEXT_CONTROL
  13+ E000 ~                                    out     (c),a
  14+ E000                                      ENDM
  15+ E000
  16+ E000              WriteTurboRegisterA:    MACRO   value
  17+ E000 ~                                    WriteTurboControlA
  18+ E000 ~                                    ld      b,$BF
  19+ E000 ~                                    ld      a,value
  20+ E000 ~                                    out     (c),a
  21+ E000                                      ENDM
  22+ E000
  23+ E000              WriteTurboRegister:     MACRO   register,value
  24+ E000 ~                                    ld      a,register
  25+ E000 ~                                    WriteTurboControlA
  26+ E000 ~                                    ld      b,$BF
  27+ E000 ~                                    ld      a,value
  28+ E000 ~                                    out     (c),a
  29+ E000                                      ENDM
  30+ E000
  31+ E000              WriteAToTurboRegister:  MACRO   register
  32+ E000 ~                                    ex      af,af'
  33+ E000 ~                                    ld      a,register
  34+ E000 ~                                    WriteTurboControlA
  35+ E000 ~                                    ld      b, $BF
  36+ E000 ~                                    ex      af,af'
  37+ E000 ~                                    out     (c),a
  38+ E000                                      ENDM
  39+ E000
  40+ E000              SelectAY:               MACRO   chipNbr
  41+ E000 ~                                    ld      a,TURBO_MANDATORY | TURBO_LEFT | TURBO_RIGHT | chipNbr
  42+ E000 ~                                    WriteTurboControlA
  43+ E000                                      ENDM
  44+ E000
  45+ E000              ;--- Interrupt handler, moved from main code
  46+ E000 3A 6B 7F     SoundInterruptHandler:  ld      a,(DELTA)
  47+ E003 21 06 B1                             ld      hl,LAST_DELTA
  48+ E006 BE                                   cp      (hl)
  49+ E007 C4 37 E2     .SpeedChange:           call    nz, UpdateEngineSound
  50+ E00A 3A 6E 7F     .NoSpeedChange:         ld      a,(SoundFxToEnqueue)        ; Check for new sound
  51+ E00D FE FF                                cp      $FF
  52+ E00F C4 4C E1                             call    nz,EnqueSound
  53+ E012              .NoNewSound:            IFDEF   USETIMER
  54+ E012 ~                                        ld      hl,SoundChannelTimer
  55+ E012                                      ENDIF
  56+ E012 11 D2 E2                             ld      de,SoundChannelSeq
  57+ E015 06 08                                ld      b,8
  58+ E017 1A           .ResetLoop:             ld      a,(de)                  ; we only update active channels
  59+ E018 FE FF                                cp      $FF
  60+ E01A 28 0A                                jr      z,.NextCounter
  61+ E01C                                      IFDEF   USETIMER
  62+ E01C ~                                        dec     (hl)                    ; so update channel timer
  63+ E01C ~                                        jr      nz,.NextCounter         ; if its not zero then continue
  64+ E01C                                      ENDIF
  65+ E01C 3E 08                                ld      a,8                     ; a now = channel to play
  66+ E01E 90                                   sub     a,b
  67+ E01F                                      IFDEF   USETIMER
  68+ E01F ~                                        push    bc,,de,,hl              ; save state
  69+ E01F                                      ELSE
  70+ E01F C5 D5                                    push    bc,,de
  71+ E021                                      ENDIF
  72+ E021 CD A7 E1                             call    PlaySound               ; play sound
  73+ E024                                      IFDEF   USETIMER
  74+ E024 ~                                        pop     bc,,de,,hl              ; restore state so de = correct timer & hl = correct channel, b = coutner
  75+ E024                                      ELSE
  76+ E024 D1 C1                                    pop     bc,,de              ; restore state so de = correct timer & hl = correct channel, b = coutner
  77+ E026                                      ENDIF
  78+ E026              ; If it went negative new sound update
  79+ E026                                      IFDEF   USETIMER
  80+ E026 ~            .ResetTimer:                ld      a,SOUNDSTEPLENGTH       ; as we fallin to this it will auto update counter
  81+ E026 ~                                        ld      (hl),a                  ; so may take it out of playsound routine
  82+ E026                                      ENDIF
  83+ E026              .NextCounter:
  84+ E026                                      IFDEF   USETIMER
  85+ E026 ~                                        inc     hl
  86+ E026                                      ENDIF
  87+ E026 13                                   inc     de
  88+ E027 10 EE                                djnz    .ResetLoop
  89+ E029 C9                                   ret
  90+ E02A
  91+ E02A
  92+ E02A              ; On entering here a = AY chip to select
  93+ E02A 21 BF FF     DefaultAYChip:          ld      hl,$FFBF            ; h = turbo control, l = turbo register
  94+ E02D 0E FD                                ld      c,$FD               ; bc = h$FD or l$FD
  95+ E02F 11 0E 00                             ld      de,$000E            ; d = value 0, e = counter
  96+ E032 F6 FC                                or      TURBO_MANDATORY | TURBO_LEFT | TURBO_RIGHT
  97+ E034 44                                   ld      b,h                 ; now select chip and set to stereo
  98+ E035 ED 79                                out     (c),a               ; .
  99+ E037 1D           .DefaultLoop:           dec     e                   ; loop down we set E 1 higher
 100+ E038 CA 44 E0                             jp      z,.Complete         ; On zero we complete, we
 101+ E03B 44                                   ld      b,h                 ; Set register to 0
 102+ E03C ED 59                                out     (c),e               ; .
 103+ E03E 45                                   ld      b,l                 ; .
 104+ E03F ED 51                                out     (c),d               ; .
 105+ E041 C3 37 E0     .DefaultDone:           jp      .DefaultLoop        ; and loop
 106+ E044 44           .Complete:              ld      b,h                 ; we set fine tone to 0
 107+ E045 ED 59                                out     (c),e               ; though as volume is 0
 108+ E047 45                                   ld      b,l                 ; it doesn't really
 109+ E048 ED 51                                out     (c),d               ; matter
 110+ E04A C9                                   ret
 111+ E04B
 112+ E04B              ;-- Initialise Audio channels to AY1 noise, AY2 and 3 tone, all channels to volume 0
 113+ E04B
 114+ E04B              ; For each AY channel, set everything to zero, then set up envelope and tone channels.
 115+ E04B              ; for now we are blocking noise channels whilst debugging
 116+ E04B 3E 01        InitAudio:              ld      a, TURBO_CHIP_AY1
 117+ E04D CD 2A E0                             call    DefaultAYChip
 118+ E050                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 118+ E050 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 118+ E052             >                        WriteTurboControlA
 118+ E052 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 118+ E055 ED 79       >                        out     (c),a
 118+ E057 06 BF       >                        ld      b,$BF
 118+ E059 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 118+ E05B ED 79       >                        out     (c),a
 119+ E05D                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 119+ E05D 3E 07       >                        ld      a,TONE_ENABLE
 119+ E05F             >                        WriteTurboControlA
 119+ E05F 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 119+ E062 ED 79       >                        out     (c),a
 119+ E064 06 BF       >                        ld      b,$BF
 119+ E066 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 119+ E068 ED 79       >                        out     (c),a
 120+ E06A 3E 02                                ld      a, TURBO_CHIP_AY2
 121+ E06C CD 2A E0                             call    DefaultAYChip
 122+ E06F                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 122+ E06F 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 122+ E071             >                        WriteTurboControlA
 122+ E071 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 122+ E074 ED 79       >                        out     (c),a
 122+ E076 06 BF       >                        ld      b,$BF
 122+ E078 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 122+ E07A ED 79       >                        out     (c),a
 123+ E07C                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 123+ E07C 3E 07       >                        ld      a,TONE_ENABLE
 123+ E07E             >                        WriteTurboControlA
 123+ E07E 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 123+ E081 ED 79       >                        out     (c),a
 123+ E083 06 BF       >                        ld      b,$BF
 123+ E085 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 123+ E087 ED 79       >                        out     (c),a
 124+ E089 3E 03                                ld      a, TURBO_CHIP_AY3
 125+ E08B CD 2A E0                             call    DefaultAYChip
 126+ E08E                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 126+ E08E 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 126+ E090             >                        WriteTurboControlA
 126+ E090 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 126+ E093 ED 79       >                        out     (c),a
 126+ E095 06 BF       >                        ld      b,$BF
 126+ E097 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 126+ E099 ED 79       >                        out     (c),a
 127+ E09B                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 127+ E09B 3E 07       >                        ld      a,TONE_ENABLE
 127+ E09D             >                        WriteTurboControlA
 127+ E09D 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 127+ E0A0 ED 79       >                        out     (c),a
 127+ E0A2 06 BF       >                        ld      b,$BF
 127+ E0A4 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 127+ E0A6 ED 79       >                        out     (c),a
 128+ E0A8 21 D2 E2                             ld      hl,SoundChannelSeq      ; now set up all the channel data to $FF
 129+ E0AB 21 D2 E2                             ld      hl,SoundChannelSeq      ; now set up all the channel data to $FF
 130+ E0AE 3E FF                                ld      a,$FF                   ; which means that it
 131+ E0B0 06 08                                ld      b,8                     ; has no data to play
 132+ E0B2 77           .InitLoop:              ld      (hl),a
 133+ E0B3 23                                   inc     hl
 134+ E0B4 10 FC                                djnz    .InitLoop
 135+ E0B6 C9                                   ret
 136+ E0B7
 137+ E0B7              ;Enable with no noise chanels active
 138+ E0B7 3E 01        InitAudioMusic:         ld      a, TURBO_CHIP_AY1
 139+ E0B9 CD 2A E0                             call    DefaultAYChip
 140+ E0BC                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 140+ E0BC 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 140+ E0BE             >                        WriteTurboControlA
 140+ E0BE 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 140+ E0C1 ED 79       >                        out     (c),a
 140+ E0C3 06 BF       >                        ld      b,$BF
 140+ E0C5 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 140+ E0C7 ED 79       >                        out     (c),a
 141+ E0C9                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 141+ E0C9 3E 07       >                        ld      a,TONE_ENABLE
 141+ E0CB             >                        WriteTurboControlA
 141+ E0CB 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 141+ E0CE ED 79       >                        out     (c),a
 141+ E0D0 06 BF       >                        ld      b,$BF
 141+ E0D2 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 141+ E0D4 ED 79       >                        out     (c),a
 142+ E0D6 3E 02                                ld      a, TURBO_CHIP_AY2
 143+ E0D8 CD 2A E0                             call    DefaultAYChip
 144+ E0DB                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 144+ E0DB 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 144+ E0DD             >                        WriteTurboControlA
 144+ E0DD 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 144+ E0E0 ED 79       >                        out     (c),a
 144+ E0E2 06 BF       >                        ld      b,$BF
 144+ E0E4 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 144+ E0E6 ED 79       >                        out     (c),a
 145+ E0E8                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 145+ E0E8 3E 07       >                        ld      a,TONE_ENABLE
 145+ E0EA             >                        WriteTurboControlA
 145+ E0EA 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 145+ E0ED ED 79       >                        out     (c),a
 145+ E0EF 06 BF       >                        ld      b,$BF
 145+ E0F1 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 145+ E0F3 ED 79       >                        out     (c),a
 146+ E0F5 3E 03                                ld      a, TURBO_CHIP_AY3
 147+ E0F7 CD 2A E0                             call    DefaultAYChip
 148+ E0FA                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 148+ E0FA 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 148+ E0FC             >                        WriteTurboControlA
 148+ E0FC 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 148+ E0FF ED 79       >                        out     (c),a
 148+ E101 06 BF       >                        ld      b,$BF
 148+ E103 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 148+ E105 ED 79       >                        out     (c),a
 149+ E107                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 149+ E107 3E 07       >                        ld      a,TONE_ENABLE
 149+ E109             >                        WriteTurboControlA
 149+ E109 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 149+ E10C ED 79       >                        out     (c),a
 149+ E10E 06 BF       >                        ld      b,$BF
 149+ E110 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 149+ E112 ED 79       >                        out     (c),a
 150+ E114 C9                                   ret
 151+ E115
 152+ E115              GetSoundAAddressToHL:   MACRO
 153+ E115 ~                                    ld      hl,SFXPointerList
 154+ E115 ~                                    add     a,a
 155+ E115 ~                                    add     hl,a
 156+ E115 ~                                    ld      a,(hl)
 157+ E115 ~                                    inc     hl
 158+ E115 ~                                    ld      h,(hl)
 159+ E115 ~                                    ld      l,a
 160+ E115                                      ENDM
 161+ E115
 162+ E115              SetIXToChannelA:        MACRO
 163+ E115 ~                                    ld      hl,SoundChannelSeq
 164+ E115 ~                                    add     hl,a
 165+ E115 ~                                    ld      ix,hl
 166+ E115                                      ENDM
 167+ E115
 168+ E115              SelectChannelMapping:   MACRO
 169+ E115 ~                                    ld      hl,SoundChipMapNumber
 170+ E115 ~                                    add     hl,a
 171+ E115 ~                                    ld      a,(hl)
 172+ E115                                      ENDM
 173+ E115
 174+ E115              ; This version ignores nooise and envelope setup so its always 0 atack hold and
 175+ E115              ; noise is pre-configured in channel
 176+ E115              ; The channel always holds a pointer to the next block of data to play
 177+ E115 DD 7E 18     PlayChannelD:           ld      a,(ix+SoundDataPointerOffset)    ; set hl to current data block
 178+ E118 6F                                   ld      l,a                              ; for SFX step
 179+ E119 DD 7E 19                             ld      a,(ix+SoundDataPointerOffset1)   ;
 180+ E11C 67                                   ld      h,a                              ;
 181+ E11D 7E                                   ld      a,(hl)                           ; get fine
 182+ E11E                                      WriteAToTurboRegister d
 182+ E11E 08          >                        ex      af,af'
 182+ E11F 7A          >                        ld      a,d
 182+ E120             >                        WriteTurboControlA
 182+ E120 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 182+ E123 ED 79       >                        out     (c),a
 182+ E125 06 BF       >                        ld      b, $BF
 182+ E127 08          >                        ex      af,af'
 182+ E128 ED 79       >                        out     (c),a
 183+ E12A 14                                   inc     d                                ; Move to channel coarse
 184+ E12B 23                                   inc     hl
 185+ E12C 7E                                   ld      a,(hl)
 186+ E12D                                      WriteAToTurboRegister d
 186+ E12D 08          >                        ex      af,af'
 186+ E12E 7A          >                        ld      a,d
 186+ E12F             >                        WriteTurboControlA
 186+ E12F 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 186+ E132 ED 79       >                        out     (c),a
 186+ E134 06 BF       >                        ld      b, $BF
 186+ E136 08          >                        ex      af,af'
 186+ E137 ED 79       >                        out     (c),a
 187+ E139 7A                                   ld      a,d
 188+ E13A C6 07                                add     a,7
 189+ E13C 57                                   ld      d,a
 190+ E13D 23                                   inc     hl                               ; Get Volume
 191+ E13E 7E                                   ld      a,(hl)
 192+ E13F                                      WriteAToTurboRegister d
 192+ E13F 08          >                        ex      af,af'
 192+ E140 7A          >                        ld      a,d
 192+ E141             >                        WriteTurboControlA
 192+ E141 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 192+ E144 ED 79       >                        out     (c),a
 192+ E146 06 BF       >                        ld      b, $BF
 192+ E148 08          >                        ex      af,af'
 192+ E149 ED 79       >                        out     (c),a
 193+ E14B C9                                   ret
 194+ E14C
 195+ E14C              ;--- Take the current sound to play, Put it in a noise or tone channel (if bit 1 is clear is a tone only)
 196+ E14C 3A 6E 7F     EnqueSound:             ld      a,(SoundFxToEnqueue)                ; Get Sound FX to Enque
 197+ E14F                                      JumpIfAGTENusng SFXEndOfList, .InvalidSound ; Invalid sounds get discarded quickly
 197+ E14F FE 01       >                        cp     SFXEndOfList
 197+ E151 D2 A1 E1    >                        jp		nc,.InvalidSound
 198+ E154 5F           .GetSoundData:          ld      e,a                                 ; save SoundFxToEnqeue
 199+ E155 E6 01                                and     $01                                 ; even numbers are tone only (Including 0)
 200+ E157 20 12                                jr      nz,.FindFreeNoiseChannel
 201+ E159 21 D4 E2     .FindFreeToneChannel:   ld      hl,SoundChannelSeq + 2              ; so we start at the first tone channel
 202+ E15C 16 FF                                ld      d,$FF                               ; d = marker for free slot cp d will be faster in the loop
 203+ E15E 0E 02                                ld      c,2                                 ; c= current slot
 204+ E160 06 07                                ld      b,7                                 ; b = nbr of slots
 205+ E162 7E           .ToneScanLoop:          ld      a,(hl)                              ; is channel occupied
 206+ E163 BA                                   cp      d
 207+ E164 28 16                                jr      z,.SaveSoundId                      ; if its free then move forward
 208+ E166 0C                                   inc     c                                   ; c is hunting for a free channel
 209+ E167 23                                   inc     hl                                  ; move tonext address in channel list
 210+ E168 10 F8                                djnz    .ToneScanLoop
 211+ E16A C9           .NoFreeSlot:            ret                                         ; no free slot, leave sound enqued
 212+ E16B 21 D2 E2     .FindFreeNoiseChannel:  ld      hl,SoundChannelSeq                  ; We only have 2 noise channels so no need to
 213+ E16E 0E 00                                ld      c,0                                 ; do a complex loop
 214+ E170 7E                                   ld      a,(hl)
 215+ E171 16 FF                                ld      d,$FF                               ; d = marker for free slot
 216+ E173 BA                                   cp      d
 217+ E174 28 06                                jr      z,.SaveSoundId
 218+ E176 23                                   inc     hl
 219+ E177 7E                                   ld      a,(hl)
 220+ E178 BA                                   cp      d
 221+ E179 C0           .NoNoiseSlot:           ret     nz                                  ; no free slot, leave sound enqued
 222+ E17A 0E 01        .NoiseChannel2:         ld      c,1                                 ; So we have channel 1 free
 223+ E17C 7B           .SaveSoundId:           ld      a,e                                 ; get back sound id
 224+ E17D                                      GetSoundAAddressToHL                        ; hl = pointer to sfx data
 224+ E17D 21 10 E3    >                        ld      hl,SFXPointerList
 224+ E180 87          >                        add     a,a
 224+ E181 ED 31       >                        add     hl,a
 224+ E183 7E          >                        ld      a,(hl)
 224+ E184 23          >                        inc     hl
 224+ E185 66          >                        ld      h,(hl)
 224+ E186 6F          >                        ld      l,a
 225+ E187 EB                                   ex      de,hl                               ; save pointer to data also makes loading to (ix) easier
 226+ E188 21 D2 E2     .SetIXToChannelPointer: ld      hl,SoundChannelSeq                  ; Get the sequence for the
 227+ E18B 79                                   ld      a,c                                 ; respective channel
 228+ E18C ED 31                                add     hl,a                                ; that we are looking at
 229+ E18E E5 DD E1                             ld      ix,hl                               ; now we can use indexed access
 230+ E191 EB           .GetSFXDataBack:        ex      de,hl                               ; hl = sound fx again
 231+ E192              .LoadSeqCount           ZeroA
 231+ E192 AF          >                        xor a
 232+ E193 DD 77 00                             ld      (ix+0),a                            ; set SoundChannelSeq[channel] to 0 as its starting
 233+ E196 7E                                   ld      a,(hl)                              ; get the nbr of steps
 234+ E197 DD 77 08                             ld      (ix+SoundLastSeqOffset),a           ; load SoundChannelLastSeq[channel]
 235+ E19A                                      IFDEF   USETIMER
 236+ E19A ~                                        ld      a,1                             ; for now we have separate timers, we enque with 1 so the loops starts immediatly
 237+ E19A ~                                        ld      (ix+SoundTimerOffset),a         a; load SoundChannelTimer[channel] with duration
 238+ E19A                                      ENDIF
 239+ E19A 23                                   inc     hl                                  ; move hl to first byte of data block
 240+ E19B DD 75 18                             ld      (ix+SoundDataPointerOffset),l       ; load SoundDataPointer[channel] with current data set
 241+ E19E DD 74 19                             ld      (ix+SoundDataPointerOffset1),h
 242+ E1A1 3E FF        .InvalidSound:          ld      a,$FF
 243+ E1A3 32 6E 7F                             ld      (SoundFxToEnqueue),a                ; ClearFXEnqeue
 244+ E1A6 C9                                   ret
 245+ E1A7
 246+ E1A7 5F           PlaySound:              ld      e,a                                 ; save channel number
 247+ E1A8                                      SetIXToChannelA                             ; We trap for debugging
 247+ E1A8 21 D2 E2    >                        ld      hl,SoundChannelSeq
 247+ E1AB ED 31       >                        add     hl,a
 247+ E1AD E5 DD E1    >                        ld      ix,hl
 248+ E1B0 DD 7E 00     .GetCurrentSeq:         ld      a,(ix+0)                            ; for optimisation we
 249+ E1B3 FE FF                                cp      $FF                                 ; will never call this if its $FF
 250+ E1B5 C8                                   ret     z                                   ; its just a belt n braces
 251+ E1B6              ;--- Play Next Step, we select chip, select channel, set up tone then step, timer & pointer
 252+ E1B6 DD 7E 28     .SelectChip             ld      a,(ix+SoundChipMapOffset)           ; get the mapping. bits 1 and 0 hold
 253+ E1B9 57                                   ld      d,a                                 ; .
 254+ E1BA F6 FC                                or      %11111100                           ; .
 255+ E1BC                                      WriteTurboControlA                          ; .
 255+ E1BC 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 255+ E1BF ED 79       >                        out     (c),a
 256+ E1C1 DD 7E 08     .CheckLastSeq:          ld      a,(ix+SoundLastSeqOffset)           ; get last in sequence
 257+ E1C4                                      JumpIfALTNusng  (ix+0),.CompletedSFX        ; if we have gone beyond last then done
 257+ E1C4 DD BE 00    >                        cp      (ix+0)
 257+ E1C7 DA E9 E1    >                        jp		c, .CompletedSFX
 258+ E1CA 7A           .PlayStep:              ld      a,d                                 ; Get the channel number
 259+ E1CB E6 30                                and     %00110000
 260+ E1CD ED 23                                swapnib                                     ; get channel to lower bits
 261+ E1CF 57                                   ld      d,a
 262+ E1D0 CD 15 E1                             call    PlayChannelD                        ; play channel D step ix is pointer to correct soundchannelseq
 263+ E1D3 DD 34 00     .UpdateStep:            inc     (ix+0)                              ; next stepssss
 264+ E1D6                                      IFDEF   USETIMER
 265+ E1D6 ~            .UpdateTimer:               ld      a,SOUNDSTEPLENGTH
 266+ E1D6 ~                                        ld      (ix+SoundTimerOffset),a
 267+ E1D6                                      ENDIF
 268+ E1D6 DD 5E 18     .UpdateStepPointer:     ld      e,(ix+SoundDataPointerOffset)       ; move pointer on by 7 bytes
 269+ E1D9 DD 56 19                             ld      d,(ix+SoundDataPointerOffset+1)     ;
 270+ E1DC EB                                   ex      de,hl                               ; hl = current pointer
 271+ E1DD 3E 03                                ld      a,SFXBlockLength                    ; move to next block
 272+ E1DF ED 31                                add     hl,a                                ; .
 273+ E1E1 EB                                   ex      de,hl                               ; move to de for load back
 274+ E1E2 DD 73 18                             ld      (ix+SoundDataPointerOffset),e       ;
 275+ E1E5 DD 72 19                             ld      (ix+SoundDataPointerOffset+1),d     ;
 276+ E1E8 C9                                   ret
 277+ E1E9 DD 7E 28     .CompletedSFX:          ld      a,(ix+SoundChipMapOffset)           ; channel number is in upper bits
 278+ E1EC ED 23                                swapnib                                     ; so we need it in
 279+ E1EE E6 03                                and     %00000011                           ; lower for selecting volume register
 280+ E1F0 C6 08                                add     a,CHANNEL_A_AMPLITUDE               ; select the register
 281+ E1F2                                      WriteTurboRegisterA 0                       ; set volume to 0
 281+ E1F2             >                        WriteTurboControlA
 281+ E1F2 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 281+ E1F5 ED 79       >                        out     (c),a
 281+ E1F7 06 BF       >                        ld      b,$BF
 281+ E1F9 3E 00       >                        ld      a,0
 281+ E1FB ED 79       >                        out     (c),a
 282+ E1FD                                      WriteTurboRegister ENVELOPE_PERIOD_FINE,0
 282+ E1FD 3E 0B       >                        ld      a,ENVELOPE_PERIOD_FINE
 282+ E1FF             >                        WriteTurboControlA
 282+ E1FF 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 282+ E202 ED 79       >                        out     (c),a
 282+ E204 06 BF       >                        ld      b,$BF
 282+ E206 3E 00       >                        ld      a,0
 282+ E208 ED 79       >                        out     (c),a
 283+ E20A                                      WriteTurboRegister ENVELOPE_PERIOD_COARSE,0
 283+ E20A 3E 0C       >                        ld      a,ENVELOPE_PERIOD_COARSE
 283+ E20C             >                        WriteTurboControlA
 283+ E20C 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 283+ E20F ED 79       >                        out     (c),a
 283+ E211 06 BF       >                        ld      b,$BF
 283+ E213 3E 00       >                        ld      a,0
 283+ E215 ED 79       >                        out     (c),a
 284+ E217                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 284+ E217 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 284+ E219             >                        WriteTurboControlA
 284+ E219 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 284+ E21C ED 79       >                        out     (c),a
 284+ E21E 06 BF       >                        ld      b,$BF
 284+ E220 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 284+ E222 ED 79       >                        out     (c),a
 285+ E224                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 285+ E224 3E 07       >                        ld      a,TONE_ENABLE
 285+ E226             >                        WriteTurboControlA
 285+ E226 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 285+ E229 ED 79       >                        out     (c),a
 285+ E22B 06 BF       >                        ld      b,$BF
 285+ E22D 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 285+ E22F ED 79       >                        out     (c),a
 286+ E231 3E FF                                ld      a,$FF                               ; set sequence to FF to denote
 287+ E233 DD 77 00                             ld      (ix+0),a                            ; channel is now free
 288+ E236 C9                                   ret
 289+ E237
 290+ E237              ; Engine Sound is always a priority so gets a dedicated channel
 291+ E237              ; this is only called if delta has changed
 292+ E237              UpdateEngineSound:      SelectAY TURBO_CHIP_AY1
 292+ E237 3E FD       >                        ld      a,TURBO_MANDATORY | TURBO_LEFT | TURBO_RIGHT | TURBO_CHIP_AY1
 292+ E239             >                        WriteTurboControlA
 292+ E239 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 292+ E23C ED 79       >                        out     (c),a
 293+ E23E 3A 6B 7F     .SetUpTone:             ld      a,(DELTA)
 294+ E241 A7                                   and     a
 295+ E242 CA 7D E2                             jp      z,.EngineOff    ; if speed is 0 the engine off as a = 0
 296+ E245 21 F3 08                             ld      hl,$08F3        ; base tone - delta * 15
 297+ E248 57                                   ld      d,a             ; we subtract as the tone is the
 298+ E249 1E 0F                                ld      e,15            ; time between pulses
 299+ E24B B7 ED 52                             sub     hl,de
 300+ E24E 3E 00                                ld      a,CHANNEL_A_FINE
 301+ E250 01 FD FF                             ld      bc,$FFFD
 302+ E253 ED 79                                out     (c),a
 303+ E255 06 BF                                ld      b,$BF
 304+ E257 ED 61                                out     (c),h
 305+ E259 3C                                   inc     a
 306+ E25A 06 FF                                ld      b,$FF
 307+ E25C ED 79                                out     (c),a
 308+ E25E 06 BF                                ld      b,$BF
 309+ E260 ED 69                                out     (c),l
 310+ E262 3A 6B 7F     .SetUpNoise:            ld      a,(DELTA)       ; l = DELTA / 4
 311+ E265 CB 3F                                srl     a
 312+ E267 57                                   ld      d,a             ;
 313+ E268 CB 3F                                srl     a
 314+ E26A CB 3F                                srl     a               ; a = DELTA / 8
 315+ E26C C6 1F                                add     a, $1F          ; more noise higher the speed
 316+ E26E 06 FF                                ld      b,$FF
 317+ E270 1E 06                                ld      e,NOISE_PERIOD
 318+ E272 ED 59                                out     (c),e
 319+ E274 06 BF                                ld      b,$BF
 320+ E276 ED 79                                out     (c),a
 321+ E278 7A                                   ld      a,d             ; get back delta / 4
 322+ E279 C6 05                                add     a,5
 323+ E27B CB 3F                                srl     a               ; calculate a scaled from 2 to 7
 324+ E27D 1E 08        .EngineOff:             ld      e,CHANNEL_A_AMPLITUDE
 325+ E27F 06 FF                                ld      b,$FF
 326+ E281 ED 59                                out     (c),e
 327+ E283 06 BF                                ld      b,$BF
 328+ E285 ED 79                                out     (c),a
 329+ E287                                      WriteTurboRegister ENVELOPE_PERIOD_FINE,0
 329+ E287 3E 0B       >                        ld      a,ENVELOPE_PERIOD_FINE
 329+ E289             >                        WriteTurboControlA
 329+ E289 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 329+ E28C ED 79       >                        out     (c),a
 329+ E28E 06 BF       >                        ld      b,$BF
 329+ E290 3E 00       >                        ld      a,0
 329+ E292 ED 79       >                        out     (c),a
 330+ E294                                      WriteTurboRegister ENVELOPE_PERIOD_COARSE,0
 330+ E294 3E 0C       >                        ld      a,ENVELOPE_PERIOD_COARSE
 330+ E296             >                        WriteTurboControlA
 330+ E296 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 330+ E299 ED 79       >                        out     (c),a
 330+ E29B 06 BF       >                        ld      b,$BF
 330+ E29D 3E 00       >                        ld      a,0
 330+ E29F ED 79       >                        out     (c),a
 331+ E2A1                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 331+ E2A1 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 331+ E2A3             >                        WriteTurboControlA
 331+ E2A3 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 331+ E2A6 ED 79       >                        out     (c),a
 331+ E2A8 06 BF       >                        ld      b,$BF
 331+ E2AA 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 331+ E2AC ED 79       >                        out     (c),a
 332+ E2AE                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 332+ E2AE 3E 07       >                        ld      a,TONE_ENABLE
 332+ E2B0             >                        WriteTurboControlA
 332+ E2B0 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 332+ E2B3 ED 79       >                        out     (c),a
 332+ E2B5 06 BF       >                        ld      b,$BF
 332+ E2B7 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 332+ E2B9 ED 79       >                        out     (c),a
 333+ E2BB 3A 6B 7F                             ld      a,(DELTA)
 334+ E2BE 32 06 B1                             ld      (LAST_DELTA),a
 335+ E2C1 C9                                   ret
 336+ E2C2
 337+ E2C2 53 6F 75 6E  SoundLabel              DB      "Sound Channels  "
 337+ E2C6 64 20 43 68
 337+ E2CA 61 6E 6E 65
 337+ E2CE 6C 73 20 20
 338+ E2D2 00 00 00...  SoundChannelSeq         DS      8   ; The current step in the SFX or $FX for empty
 339+ E2DA 00 00 00...  SoundChannelLastSeq     DS      8   ; A copy of SFX length to save an extra lookup, $FF means 1 step always on, $00 means off
 340+ E2E2 00 00 00...  SoundChannelTimer       DS      8   ; The count down to next sequence
 341+ E2EA 00 00 00...  SoundDataPointer        DS      2*8 ; pointer to current sound step
 342+ E2FA              ;                  Channel/Chip B/1  C/1  A/2  B/2  C/2  A/3  B/3  C/3
 343+ E2FA 11 21        SoundChipMapNumber      DB      $10 | TURBO_CHIP_AY1, $20 | TURBO_CHIP_AY1
 344+ E2FC 02 32                                DB      $00 | TURBO_CHIP_AY2, $10 | TURBO_CHIP_AY2 | $20 | TURBO_CHIP_AY2
 345+ E2FE 02 33                                DB      $00 | TURBO_CHIP_AY2, $10 | TURBO_CHIP_AY3 | $20 | TURBO_CHIP_AY3
 346+ E300              SoundLastSeqOffset      EQU     8
 347+ E300              SoundTimerOffset        EQU     SoundLastSeqOffset + 8
 348+ E300              SoundDataPointerOffset  EQU     SoundTimerOffset + 8
 349+ E300              SoundDataPointerOffset1 EQU     SoundTimerOffset + 9
 350+ E300              SoundChipMapOffset      EQU     SoundDataPointerOffset + 16
 351+ E300              ;Chip map is            bits 5,4 channel letter A = 0 B =1 C = 2    1,0 Chip Number
 352+ E300              ;Mapping                0 = 1B, 1 = 1C, 3=2A, 4 = 2B, 5=2C, 6 = 3A, 7 = 3B, 8 = 3C
 353+ E300              ;                       Chip 1 Engine, noise channel but engine noise period is priority
 354+ E300              ;                       Chip 2 General FX, no noise
 355+ E300              ;                       Chip 3 General FX, no noise
 356+ E300
 357+ E300              ;--- Data sets for Sound
 358+ E300              ;--- Sound Channels are 0 to 9 AY1 A B C AY2 A B C AY3 A B C
 359+ E300              ;--- Sounds can not enqueu, the find a free slot & SoundFxtoEnqueue gets zeroed or it gets left
 360+ E300              ;--- AY1 channel 1 is reserved for engine noise as its calculated on the fly
 361+ E300              ; Predefined value for each channel to load to $FFFD before setting up tone
 362+ E300              ; Hcops a copy of the 3 chips register 7
 363+ E300
 364+ E300
 365+ E300              ; StepLength            DB      1   ; $FF = 1 step forever else number of entries in StepListArray
 366+ E300              ; StepListArray
 367+ E300              ;     TonePitch         DW      4 bits unused + 12 bits
 368+ E300              ;     NoisePitch        DB      5 bit or $FF for no noise
 369+ E300              ;     Volume            DB      0 to 15
 370+ E300              ;     EnvelopePeriod    DW      0
 371+ E300              ;     WaveForm          DB      0
 372+ E300
 373+ E300              ; SFX Format
 374+ E300              ; SFXPointerList - Odd numbers are tone, Even Numbers have noise too, optimisation for channel handling
 375+ E300 53 6F 75 6E  SoundLabelSFX   DB      "Sound Data      "
 375+ E304 64 20 44 61
 375+ E308 74 61 20 20
 375+ E30C 20 20 20 20
 376+ E310 19 E3        SFXPointerList  dw      SFXLaser
 377+ E312              SFXEndOfList    EQU     1
 378+ E312              SFXBlockLength  EQU     3
 379+ E312              SFXFineOffset   EQU     0
 380+ E312              SFXCorseOffset  EQU     1
 381+ E312              SFXVolOffset    EQU     2
 382+ E312              ;                       Step Count
 383+ E312 4C 61 73 65  SoundLaser      DB      "Laser  "
 383+ E316 72 20 20
 384+ E319 0B           SFXLaser        db      11
 385+ E31A              ;                       Tone
 386+ E31A              ;                      Fine Crs  Vol
 387+ E31A 5F 00 0E                    db      $5F, $00, $0E
 388+ E31D 39 00 0E                    db      $39, $00, $0E
 389+ E320 47 00 0D                    db      $47, $00, $0D
 390+ E323 5E 00 0C                    db      $5E, $00, $0C
 391+ E326 6E 10 0A                    db      $6E, $10, $0A
 392+ E329 76 00 08                    db      $76, $00, $08
 393+ E32C 76 00 07                    db      $76, $00, $07
 394+ E32F 06 01 06                    db      $06, $01, $06
 395+ E332 2E 01 03                    db      $2E, $01, $03
 396+ E335 16 01 03                    db      $16, $01, $03
 397+ E338 03 00 01                    db      $03, $00, $01
 398+ E33B
 399+ E33B              ;
 400+ E33B              ;
 401+ E33B              ;Laser1:          db 14,14,13,12,10, 8, 7, 6, 3, 1
 402+ E33B              ;LaserFrameCount  db  5, 5, 5, 5, 5, 5, 5, 5, 5, 5
 403+ E33B              ;LaserLength:     db $-LaserFrameCount
 404+ E33B              ;LaserTone:       dw $05F, $089, $097, $0AE, $0CE, $0B6, $0E6, $106, $13E, $126, $136
 405+ E33B
 406+ E33B C5 E5        DanubePointer1:         DW BlueDanube1
 407+ E33D DA E6        DanubePointer2:         DW BlueDanube2
 408+ E33F EF E7        DanubePointer3:         DW BlueDanube3
 409+ E341 04 E9        DanubePointer4:         DW BlueDanube4
 410+ E343 19 EA        DanubePointer5:         DW BlueDanube5
 411+ E345 2E EB        DanubePointer6:         DW BlueDanube6
 412+ E347              ; Sustain reduces volume each cycle, playing a note resets it
 413+ E347 00           DanubeVolume1:          DB 0
 414+ E348 02           DanubeChip1:            DB TURBO_CHIP_AY2
 415+ E349 00           DanubeVolume2:          DB 0
 416+ E34A 02           DanubeChip2:            DB TURBO_CHIP_AY2
 417+ E34B 00           DanubeVolume3:          DB 0
 418+ E34C 02           DanubeChip3:            DB TURBO_CHIP_AY2
 419+ E34D 00           DanubeVolume4:          DB 0
 420+ E34E 03           DanubeChip4:            DB TURBO_CHIP_AY3
 421+ E34F 00           DanubeVolume5:          DB 0
 422+ E350 03           DanubeChip5:            DB TURBO_CHIP_AY3
 423+ E351 00           DanubeVolume6:          DB 0
 424+ E352 03           DanubeChip6:            DB TURBO_CHIP_AY3
 425+ E353              PointerVolOffset:       EQU 12
 426+ E353              PointerChipOffset:      EQU 13
 427+ E353 00 00        DanubeCounter:          DW 0
 428+ E355              DanubeMax:              EQU BlueDanube2 - BlueDanube1 +1
 429+ E355 16 01        DanubeMaxMem:           DW  DanubeMax
 430+ E357 0F           DanubeVolume:           DB $0F
 431+ E358 08           DanubePace:             DB 8
 432+ E359 08           DanubeTimer:            DB 8
 433+ E35A 00 00        DanubeAttackEnvelope    DW $0000
 434+ E35C
 435+ E35C F6 FC        SelectDanubeAYa:        or TURBO_MANDATORY | TURBO_LEFT | TURBO_RIGHT
 436+ E35E                                      WriteTurboControlA
 436+ E35E 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 436+ E361 ED 79       >                        out     (c),a
 437+ E363 C9                                   ret
 438+ E364
 439+ E364 08           WriteAToTurboRegisterD: ex      af,af'
 440+ E365 7A                                   ld      a,d
 441+ E366                                      WriteTurboControlA
 441+ E366 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 441+ E369 ED 79       >                        out     (c),a
 442+ E36B 06 BF                                ld      b,$BF
 443+ E36D 08                                   ex      af,af'
 444+ E36E ED 79                                out     (c),a
 445+ E370 C9                                   ret
 446+ E371
 447+ E371              SetChannelAVolume0:     WriteTurboControlA
 447+ E371 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 447+ E374 ED 79       >                        out     (c),a
 448+ E376 06 BF                                ld      b,$BF
 449+ E378                                      ZeroA
 449+ E378 AF          >                        xor a
 450+ E379 ED 79                                out     (c),a
 451+ E37B C9                                   ret
 452+ E37C
 453+ E37C 7A           SetChannelDNoteAtHL:    ld      a,d                 ; a is now 0 to 2
 454+ E37D CB 27                                sla     a                   ; multiply by 2 so now 0, 2, 4
 455+ E37F F5                                   push    af                  ; save fine adjust register nbr
 456+ E380                                      WriteTurboControlA          ; Send out fine adjust
 456+ E380 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 456+ E383 ED 79       >                        out     (c),a
 457+ E385 06 BF                                ld      b,$BF
 458+ E387 7E                                   ld      a,(hl)              ; get fine note
 459+ E388 ED 79                                out     (c),a               ; write fine note
 460+ E38A F1                                   pop     af                  ; get back fine adjust register
 461+ E38B 3C                                   inc     a
 462+ E38C                                      WriteTurboControlA
 462+ E38C 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 462+ E38F ED 79       >                        out     (c),a
 463+ E391 23                                   inc     hl                  ; move to coarse value
 464+ E392 06 BF                                ld      b,$BF
 465+ E394 7E                                   ld      a,(hl)
 466+ E395 ED 79                                out     (c),a
 467+ E397                                      ;IFDEF   DANUBEATTACK
 468+ E397              .SetAttack:             ;    ld      hl,(DanubeAttackEnvelope)
 469+ E397                                      ;    ld      a,ENVELOPE_PERIOD_FINE
 470+ E397                                      ;    WriteTurboControlA
 471+ E397                                      ;    ld      b,$BF
 472+ E397                                      ;    ld      a,l
 473+ E397                                      ;    out     (c),a
 474+ E397                                      ;    ld      a,ENVELOPE_PERIOD_COARSE
 475+ E397                                      ;    WriteTurboControlA
 476+ E397                                      ;    ld      b,$BF
 477+ E397                                      ;    ld      a,h
 478+ E397                                      ;    out     (c),a
 479+ E397                                      ;ENDIF
 480+ E397 7A           .SetVolume:             ld      a,d                 ; get back channel
 481+ E398 C6 08                                add     a,8
 482+ E39A                                      WriteTurboControlA
 482+ E39A 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 482+ E39D ED 79       >                        out     (c),a
 483+ E39F 06 BF                                ld      b,$BF
 484+ E3A1 3A 57 E3                             ld      a,(DanubeVolume)    ; could put in ixh but we have plenty of cycles
 485+ E3A4 ED 79                                out     (c),a
 486+ E3A6 C9                                   ret
 487+ E3A7
 488+ E3A7 DD 7E 06     SustainNote:            ld      a,(ix+6)
 489+ E3AA 3D                                   dec     a
 490+ E3AB 20 02                                jr      nz,.MinNoteSkip
 491+ E3AD 3E 01                                ld      a,1
 492+ E3AF DD 77 0C     .MinNoteSkip:           ld      (ix+PointerVolOffset),a
 493+ E3B2 78                                   ld      a,b          ; get back channel which is passed in via b
 494+ E3B3 C6 08                                add     a,8
 495+ E3B5                                      WriteTurboControlA
 495+ E3B5 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 495+ E3B8 ED 79       >                        out     (c),a
 496+ E3BA 06 BF                                ld      b,$BF
 497+ E3BC DD 7E 0C                             ld      a,(ix+PointerVolOffset)
 498+ E3BF ED 79                                out     (c),a
 499+ E3C1                                      IFDEF   DANUBEATTACK
 500+ E3C1 3E 0B        .SetAttack:                 ld      a,ENVELOPE_PERIOD_FINE
 501+ E3C3                                          WriteTurboControlA
 501+ E3C3 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 501+ E3C6 ED 79       >                        out     (c),a
 502+ E3C8 06 BF                                    ld      b,$BF
 503+ E3CA                                          ZeroA
 503+ E3CA AF          >                        xor a
 504+ E3CB ED 79                                    out     (c),a
 505+ E3CD 3E 0C                                    ld      a,ENVELOPE_PERIOD_COARSE
 506+ E3CF                                          WriteTurboControlA
 506+ E3CF 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 506+ E3D2 ED 79       >                        out     (c),a
 507+ E3D4 06 BF                                    ld      b,$BF
 508+ E3D6                                          ZeroA
 508+ E3D6 AF          >                        xor a
 509+ E3D7 ED 79                                    out     (c),a
 510+ E3D9                                      ENDIF
 511+ E3D9 C9                                   ret
 512+ E3DA
 513+ E3DA
 514+ E3DA              ; IN iyh = channel number, a = note, ix = pointer to danubepointer table corresponding to guitar string
 515+ E3DA DD 7E 0D     PlayDanubeNote:         ld      a,(ix+PointerChipOffset)
 516+ E3DD C5                                   push    bc
 517+ E3DE CD 5C E3                             call    SelectDanubeAYa
 518+ E3E1 C1                                   pop     bc
 519+ E3E2 DD 7E 00                             ld      a,(ix+0)
 520+ E3E5 6F                                   ld      l,a
 521+ E3E6 DD 7E 01                             ld      a,(ix+1)
 522+ E3E9 67                                   ld      h,a
 523+ E3EA 7E                                   ld      a,(hl)
 524+ E3EB A7                                   and     a
 525+ E3EC 28 26                                jr      z,  .NoNote
 526+ E3EE FE FF                                cp      $FF
 527+ E3F0 C8                                   ret     z
 528+ E3F1                                      ;jp      z,SustainNote
 529+ E3F1 21 1D E5                             ld      hl, TonesPitch
 530+ E3F4 5F                                   ld      e,a         ; save a
 531+ E3F5 E6 F0                                and     $F0         ; load octave to d
 532+ E3F7 ED 23                                swapnib             ;
 533+ E3F9 57                                   ld      d,a         ;
 534+ E3FA 7B                                   ld      a,e         ; get a back
 535+ E3FB 1E 0C                                ld      e,12        ; 12 semi tones so mul by 12
 536+ E3FD ED 30                                mul                 ;
 537+ E3FF E6 0F                                and     $0F         ; get semi tone
 538+ E401 EB                                   ex      de,hl       ; hl = octave * 12 + semi tone
 539+ E402 ED 31                                add     hl,a        ; .
 540+ E404                                      ShiftHLLeft1        ; multiply by 2 as we have 2 bytes per tone
 540+ E404 CB 25       >			   sla l
 540+ E406 CB 14       >			   rl  h
 541+ E408 11 1D E5                             ld      de,TonesPitch
 542+ E40B 19                                   add     hl,de       ; now we are pointing at table
 543+ E40C 50                                   ld      d,b         ; get channel number
 544+ E40D CD 7C E3                             call    SetChannelDNoteAtHL ; leaves with A = volume note
 545+ E410 DD 77 0C                             ld      (ix+PointerVolOffset),a    ;
 546+ E413 C9                                   ret
 547+ E414 78           .NoNote:                ld      a,b         ; a= channel number 0 to 3
 548+ E415 C6 08                                add     8           ; adjust to volume register
 549+ E417 CD 71 E3     .NoNoteOK               call    SetChannelAVolume0
 550+ E41A C9                                   ret
 551+ E41B
 552+ E41B 3A 59 E3     PlayDanube:             ld      a,(DanubeTimer)
 553+ E41E 3D                                   dec     a
 554+ E41F 28 04                                jr      z,.PlaySequence
 555+ E421 32 59 E3                             ld      (DanubeTimer),a
 556+ E424 C9                                   ret
 557+ E425 06 06        .PlaySequence:          ld      b,6
 558+ E427 DD 21 3B E3                          ld      ix,DanubePointer1
 559+ E42B 0E 00                                ld      c,0
 560+ E42D C5           .ChannelLoop:           push    bc
 561+ E42E 41                                   ld      b,c
 562+ E42F CD DA E3                             call    PlayDanubeNote
 563+ E432 C1                                   pop     bc
 564+ E433 DD 23                                inc     ix
 565+ E435 DD 23                                inc     ix
 566+ E437 0C                                   inc     c
 567+ E438 79                                   ld      a,c
 568+ E439 FE 03                                cp      3
 569+ E43B 20 02                                jr      nz,.SkipChannelMax
 570+ E43D 0E 00                                ld      c,0
 571+ E43F 10 EC        .SkipChannelMax:        djnz    .ChannelLoop
 572+ E441 C3 AE E4                             jp      UpdatePointers
 573+ E444              ;
 574+ E444              .sPlaySequence:
 575+ E444 3E 02        .PlayChannel1:          ld      a,TURBO_CHIP_AY2
 576+ E446 CD 5C E3                             call    SelectDanubeAYa
 577+ E449 DD 21 3B E3                          ld      ix,DanubePointer1
 578+ E44D DD 7E 00                             ld      a,(ix+0)
 579+ E450 2A 3B E3                             ld      hl,(DanubePointer1)
 580+ E453 7E                                   ld      a,(hl)
 581+ E454 06 00                                ld      b,0
 582+ E456 CD DA E3                             call    PlayDanubeNote
 583+ E459              .PlayChannel2:          ;break
 584+ E459 3E 02                                ld      a,TURBO_CHIP_AY2
 585+ E45B CD 5C E3                             call    SelectDanubeAYa
 586+ E45E DD 21 3D E3                          ld      ix,DanubePointer2
 587+ E462 DD 7E 00                             ld      a,(ix+0)
 588+ E465 06 01                                ld      b,1
 589+ E467 CD DA E3                             call    PlayDanubeNote
 590+ E46A 3E 02        .PlayChannel3:          ld      a,TURBO_CHIP_AY2
 591+ E46C CD 5C E3                             call    SelectDanubeAYa
 592+ E46F DD 21 3F E3                          ld      ix,DanubePointer3
 593+ E473 DD 7E 00                             ld      a,(ix+0)
 594+ E476 06 02                                ld      b,2
 595+ E478 CD DA E3                             call    PlayDanubeNote
 596+ E47B 3E 03        .PlayChannel4:          ld      a,TURBO_CHIP_AY3
 597+ E47D CD 5C E3                             call    SelectDanubeAYa
 598+ E480 DD 21 41 E3                          ld      ix,DanubePointer4
 599+ E484 DD 7E 00                             ld      a,(ix+0)
 600+ E487 06 00                                ld      b,0
 601+ E489 CD DA E3                             call    PlayDanubeNote
 602+ E48C 3E 03        .PlayChannel5:          ld      a,TURBO_CHIP_AY3
 603+ E48E CD 5C E3                             call    SelectDanubeAYa
 604+ E491 DD 21 43 E3                          ld      ix,DanubePointer5
 605+ E495 DD 7E 00                             ld      a,(ix+0)
 606+ E498 06 01                                ld      b,1
 607+ E49A CD DA E3                             call    PlayDanubeNote
 608+ E49D 3E 03        .PlayChannel6:          ld      a,TURBO_CHIP_AY3
 609+ E49F CD 5C E3                             call    SelectDanubeAYa
 610+ E4A2 DD 21 45 E3                          ld      ix,DanubePointer6
 611+ E4A6 DD 7E 00                             ld      a,(ix+0)
 612+ E4A9 06 02                                ld      b,2
 613+ E4AB CD DA E3                             call    PlayDanubeNote
 614+ E4AE 3A 58 E3     UpdatePointers:         ld      a,(DanubePace)
 615+ E4B1 32 59 E3                             ld      (DanubeTimer),a
 616+ E4B4 2A 53 E3                             ld      hl,(DanubeCounter)
 617+ E4B7 11 16 01                             ld      de,DanubeMax
 618+ E4BA E5           .compare16HLDE:         push    hl
 619+ E4BB A7                                   and     a
 620+ E4BC ED 52                                sbc     hl,de
 621+ E4BE E1                                   pop     hl
 622+ E4BF                                      ;break
 623+ E4BF 20 2A                                jr      nz,.MovePointersForward
 624+ E4C1 21 C5 E5     .ResetPointers:         ld      hl,BlueDanube1
 625+ E4C4 22 3B E3                             ld      (DanubePointer1),hl
 626+ E4C7 21 DA E6                             ld      hl,BlueDanube2
 627+ E4CA 22 3D E3                             ld      (DanubePointer2),hl
 628+ E4CD 21 EF E7                             ld      hl,BlueDanube3
 629+ E4D0 22 3F E3                             ld      (DanubePointer3),hl
 630+ E4D3 21 04 E9                             ld      hl,BlueDanube4
 631+ E4D6 22 41 E3                             ld      (DanubePointer4),hl
 632+ E4D9 21 19 EA                             ld      hl,BlueDanube5
 633+ E4DC 22 43 E3                             ld      (DanubePointer5),hl
 634+ E4DF 21 2E EB                             ld      hl,BlueDanube6
 635+ E4E2 22 45 E3                             ld      (DanubePointer6),hl
 636+ E4E5 21 00 00                             ld      hl,0
 637+ E4E8 22 53 E3                             ld      (DanubeCounter),hl
 638+ E4EB 23           .MovePointersForward:   inc     hl
 639+ E4EC 22 53 E3                             ld      (DanubeCounter),hl
 640+ E4EF 21 3B E3                             ld      hl,DanubePointer1
 641+ E4F2 CD 14 E5                             call    AdvancePointer
 642+ E4F5 21 3D E3                             ld      hl,DanubePointer2
 643+ E4F8 CD 14 E5                             call    AdvancePointer
 644+ E4FB 21 3F E3                             ld      hl,DanubePointer3
 645+ E4FE CD 14 E5                             call    AdvancePointer
 646+ E501 21 41 E3                             ld      hl,DanubePointer4
 647+ E504 CD 14 E5                             call    AdvancePointer
 648+ E507 21 43 E3                             ld      hl,DanubePointer5
 649+ E50A CD 14 E5                             call    AdvancePointer
 650+ E50D 21 45 E3                             ld      hl,DanubePointer6
 651+ E510 CD 14 E5                             call    AdvancePointer
 652+ E513 C9                                   ret
 653+ E514
 654+ E514 7E           AdvancePointer:         ld      a,(hl)
 655+ E515 23                                   inc     hl
 656+ E516 56                                   ld      d,(hl)
 657+ E517 5F                                   ld      e,a
 658+ E518 13                                   inc     de
 659+ E519 72                                   ld      (hl),d
 660+ E51A 2B                                   dec     hl
 661+ E51B 73                                   ld      (hl),e
 662+ E51C C9                                   ret
 663+ E51D
 664+ E51D
 665+ E51D
 666+ E51D
 667+ E51D BF 0F        TonesPitch       db  $BF,   $0F
 668+ E51F DC 0E                         db  $DC,   $0E
 669+ E521 07 0E                         db  $07,   $0E
 670+ E523 7B 1A                         db  $7B,   $1A
 671+ E525 FE 18                         db  $FE,   $18
 672+ E527 97 17                         db  $97,   $17
 673+ E529 44 16                         db  $44,   $16
 674+ E52B 04 15                         db  $04,   $15
 675+ E52D D6 13                         db  $D6,   $13
 676+ E52F B9 12                         db  $B9,   $12
 677+ E531 AC 11                         db  $AC,   $11
 678+ E533 AE 10                         db  $AE,   $10
 679+ E535 DF 07                         db  $DF,   $07
 680+ E537 6E 07                         db  $6E,   $07
 681+ E539 03 07                         db  $03,   $07
 682+ E53B 3D 0D                         db  $3D,   $0D
 683+ E53D 7F 0C                         db  $7F,   $0C
 684+ E53F CC 0B                         db  $CC,   $0B
 685+ E541 22 0B                         db  $22,   $0B
 686+ E543 82 0A                         db  $82,   $0A
 687+ E545 EB 09                         db  $EB,   $09
 688+ E547 5D 09                         db  $5D,   $09
 689+ E549 D6 08                         db  $D6,   $08
 690+ E54B 57 08                         db  $57,   $08
 691+ E54D F0 03                         db  $F0,   $03
 692+ E54F B7 03                         db  $B7,   $03
 693+ E551 82 03                         db  $82,   $03
 694+ E553 9F 06                         db  $9F,   $06
 695+ E555 40 06                         db  $40,   $06
 696+ E557 E6 05                         db  $E6,   $05
 697+ E559 91 05                         db  $91,   $05
 698+ E55B 41 05                         db  $41,   $05
 699+ E55D F6 04                         db  $F6,   $04
 700+ E55F AE 04                         db  $AE,   $04
 701+ E561 6B 04                         db  $6B,   $04
 702+ E563 2C 04                         db  $2C,   $04
 703+ E565 F8 01                         db  $F8,   $01
 704+ E567 DC 01                         db  $DC,   $01
 705+ E569 C1 01                         db  $C1,   $01
 706+ E56B 4F 03                         db  $4F,   $03
 707+ E56D 20 03                         db  $20,   $03
 708+ E56F F3 02                         db  $F3,   $02
 709+ E571 C9 02                         db  $C9,   $02
 710+ E573 A1 02                         db  $A1,   $02
 711+ E575 7B 02                         db  $7B,   $02
 712+ E577 57 02                         db  $57,   $02
 713+ E579 36 02                         db  $36,   $02
 714+ E57B 16 02                         db  $16,   $02
 715+ E57D FC 00                         db  $FC,   $00
 716+ E57F EE 00                         db  $EE,   $00
 717+ E581 E0 00                         db  $E0,   $00
 718+ E583 A8 01                         db  $A8,   $01
 719+ E585 90 01                         db  $90,   $01
 720+ E587 79 01                         db  $79,   $01
 721+ E589 64 01                         db  $64,   $01
 722+ E58B 50 01                         db  $50,   $01
 723+ E58D 3D 01                         db  $3D,   $01
 724+ E58F 2C 01                         db  $2C,   $01
 725+ E591 1B 01                         db  $1B,   $01
 726+ E593 0B 01                         db  $0B,   $01
 727+ E595 7E 00                         db  $7E,   $00
 728+ E597 77 00                         db  $77,   $00
 729+ E599 70 00                         db  $70,   $00
 730+ E59B D4 00                         db  $D4,   $00
 731+ E59D C8 00                         db  $C8,   $00
 732+ E59F BD 00                         db  $BD,   $00
 733+ E5A1 B2 00                         db  $B2,   $00
 734+ E5A3 A8 00                         db  $A8,   $00
 735+ E5A5 9F 00                         db  $9F,   $00
 736+ E5A7 96 00                         db  $96,   $00
 737+ E5A9 8D 00                         db  $8D,   $00
 738+ E5AB 85 00                         db  $85,   $00
 739+ E5AD 3F 00                         db  $3F,   $00
 740+ E5AF 3B 00                         db  $3B,   $00
 741+ E5B1 38 00                         db  $38,   $00
 742+ E5B3 6A 00                         db  $6A,   $00
 743+ E5B5 64 00                         db  $64,   $00
 744+ E5B7 5E 00                         db  $5E,   $00
 745+ E5B9 59 00                         db  $59,   $00
 746+ E5BB 54 00                         db  $54,   $00
 747+ E5BD 4F 00                         db  $4F,   $00
 748+ E5BF 4B 00                         db  $4B,   $00
 749+ E5C1 47 00                         db  $47,   $00
 750+ E5C3 43 00                         db  $43,   $00
 751+ E5C5
 752+ E5C5
 753+ E5C5              ; 1 Byte high nibble Octave, low note
 754+ E5C5              ; for now middle octave 3,
 755+ E5C5              ; low nibble mapping
 756+ E5C5              ;       0      1  2  3  4  5  6   7  8  9   A  B  C
 757+ E5C5              ;       None   A  A# B  C  C# D  D#  E  F  F#  G  G#
 758+ E5C5              ;BlueDanube1:     DB $00, $00, $00, $00, $00, $61, $61, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $61, $61, $5B, $5B, $00, $00, $00
 759+ E5C5              ;BlueDanube2:     DB $00, $00, $00, $00, $00, $5A, $5A, $5A, $5A, $00, $00, $00, $00, $00, $00, $00, $00, $58, $58, $55, $55, $00, $00, $00
 760+ E5C5              ;BlueDanube3:     DB $00, $00, $00, $41, $41, $00, $00, $56, $56, $00, $00, $00, $00, $00, $00, $41, $41, $00, $00, $00, $00, $00, $00, $00
 761+ E5C5              ;BlueDanube4:     DB $36, $36, $3A, $00, $00, $00, $00, $00, $00, $00, $00, $00, $36, $36, $3A, $00, $00, $00, $00, $00, $00, $00, $00, $00
 762+ E5C5
 763+ E5C5 00 00 00 48  BlueDanube1:          DB 	$00, 	$00, 	$00, 	$48, 	$00, 	$00, 	$00, 	$4A, 	$FF, 	$4A, 	$FF, 	$4A, 	$FF, 	$00, 	$00, 	$48, 	$00, 	$00, 	$00, 	$4B, 	$FF, 	$4B, 	$FF, 	$4B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 763+ E5C9 00 00 00 4A
 763+ E5CD FF 4A FF 4A
 763+ E5D1 FF 00 00 48
 763+ E5D5 00 00 00 4B
 763+ E5D9 FF 4B FF 4B
 763+ E5DD FF 00 00 00
 763+ E5E1 00 00 00 00
 763+ E5E5 00 00 00 00
 763+ E5E9 00 00 00 00
 763+ E5ED 00 00 00 00
 763+ E5F1 00 00 00 00
 763+ E5F5 00 00 00 00
 763+ E5F9 00 00 00 00
 763+ E5FD 00 00 00 00
 763+ E601 00 00 00 00
 764+ E605 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 764+ E609 00 00 00 00
 764+ E60D 00 00 00 00
 764+ E611 00 00 00 00
 764+ E615 00 00 00 00
 764+ E619 00 00 00 00
 764+ E61D 00 00 00 00
 764+ E621 00 00 00 00
 764+ E625 00 00 00 00
 764+ E629 00 00 00 00
 764+ E62D 00 00 00 00
 764+ E631 00 00 00 00
 764+ E635 00 00 00 00
 764+ E639 00 00 00 00
 764+ E63D 00 00 00 00
 764+ E641 00 00 00 00
 765+ E645 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$48, 	$FF, 	$48, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$48, 	$00, 	$48, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$4B, 	$FF, 	$4B, 	$FF, 	$00, 	$00
 765+ E649 00 00 00 00
 765+ E64D 00 00 48 FF
 765+ E651 48 FF 00 00
 765+ E655 00 00 00 00
 765+ E659 00 00 00 00
 765+ E65D 00 00 00 00
 765+ E661 00 00 00 00
 765+ E665 00 00 00 48
 765+ E669 00 48 00 00
 765+ E66D 00 00 00 00
 765+ E671 00 00 00 00
 765+ E675 00 00 00 00
 765+ E679 00 00 00 00
 765+ E67D 00 00 4B FF
 765+ E681 4B FF 00 00
 766+ E685 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$4B, 	$FF, 	$4B, 	$FF, 	$00, 	$00, 	$48, 	$FF, 	$48, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$4A, 	$FF, 	$4A, 	$FF, 	$4A, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$48
 766+ E689 00 00 00 00
 766+ E68D 00 00 00 00
 766+ E691 00 00 00 00
 766+ E695 00 4B FF 4B
 766+ E699 FF 00 00 48
 766+ E69D FF 48 FF 00
 766+ E6A1 00 00 00 00
 766+ E6A5 00 00 00 00
 766+ E6A9 00 00 00 4A
 766+ E6AD FF 4A FF 4A
 766+ E6B1 FF 00 00 00
 766+ E6B5 00 00 00 00
 766+ E6B9 00 00 00 00
 766+ E6BD 00 00 00 00
 766+ E6C1 00 00 00 48
 767+ E6C5 FF 00 00 00                        DB	$FF, 	$00, 	$00, 	$00, 	$00, 	$4A, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$4B, 	$FF, 	$4B, 	$FF, 	$00, 	$00, 	$4B, 	$FF, 	$49, 	$FF
 767+ E6C9 00 4A FF 00
 767+ E6CD 00 00 00 4B
 767+ E6D1 FF 4B FF 00
 767+ E6D5 00 4B FF 49
 767+ E6D9 FF
 768+ E6DA 00 44 46 00  BlueDanube2:          DB 	$00, 	$44, 	$46, 	$00, 	$00, 	$44, 	$FF, 	$44, 	$FF, 	$44, 	$FF, 	$44, 	$FF, 	$44, 	$46, 	$00, 	$00, 	$43, 	$FF, 	$43, 	$FF, 	$43, 	$FF, 	$43, 	$FF, 	$43, 	$44, 	$46, 	$00, 	$00, 	$00, 	$44, 	$00, 	$00, 	$00, 	$00, 	$00, 	$44, 	$00, 	$00, 	$00, 	$00, 	$00, 	$44, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 768+ E6DE 00 44 FF 44
 768+ E6E2 FF 44 FF 44
 768+ E6E6 FF 44 46 00
 768+ E6EA 00 43 FF 43
 768+ E6EE FF 43 FF 43
 768+ E6F2 FF 43 44 46
 768+ E6F6 00 00 00 44
 768+ E6FA 00 00 00 00
 768+ E6FE 00 44 00 00
 768+ E702 00 00 00 44
 768+ E706 00 00 00 00
 768+ E70A 00 00 00 00
 768+ E70E 00 00 00 00
 768+ E712 00 00 00 00
 768+ E716 00 00 00 00
 769+ E71A 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$46, 	$00, 	$46, 	$00, 	$00, 	$00, 	$43, 	$00, 	$43, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$46, 	$FF, 	$46, 	$FF, 	$00, 	$00, 	$44, 	$44, 	$00, 	$00, 	$00, 	$00
 769+ E71E 00 00 00 00
 769+ E722 00 00 00 00
 769+ E726 00 00 00 00
 769+ E72A 00 00 00 00
 769+ E72E 00 00 00 00
 769+ E732 00 00 00 00
 769+ E736 46 00 46 00
 769+ E73A 00 00 43 00
 769+ E73E 43 00 00 00
 769+ E742 00 00 00 00
 769+ E746 00 00 00 00
 769+ E74A 00 00 00 00
 769+ E74E 46 FF 46 FF
 769+ E752 00 00 44 44
 769+ E756 00 00 00 00
 770+ E75A 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$44, 	$FF, 	$44, 	$FF, 	$00, 	$00, 	$44, 	$FF, 	$44, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$43, 	$00, 	$43, 	$00, 	$00, 	$00, 	$43, 	$FF, 	$43, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$43, 	$FF, 	$43, 	$FF, 	$00, 	$46
 770+ E75E 00 00 00 00
 770+ E762 00 00 44 FF
 770+ E766 44 FF 00 00
 770+ E76A 44 FF 44 FF
 770+ E76E 00 00 00 00
 770+ E772 00 00 00 00
 770+ E776 00 00 00 00
 770+ E77A 00 00 00 43
 770+ E77E 00 43 00 00
 770+ E782 00 43 FF 43
 770+ E786 FF 00 00 00
 770+ E78A 00 00 00 00
 770+ E78E 00 00 00 00
 770+ E792 00 00 43 FF
 770+ E796 43 FF 00 46
 771+ E79A FF 46 FF 00                        DB	$FF, 	$46, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$48, 	$FF, 	$48, 	$FF, 	$00, 	$00, 	$44, 	$FF, 	$44, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$44, 	$FF, 	$44, 	$FF, 	$44, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$43, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$43, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$44
 771+ E79E 00 00 00 00
 771+ E7A2 00 00 00 00
 771+ E7A6 00 00 00 00
 771+ E7AA 00 48 FF 48
 771+ E7AE FF 00 00 44
 771+ E7B2 FF 44 FF 00
 771+ E7B6 00 00 00 00
 771+ E7BA 00 00 00 00
 771+ E7BE 00 00 00 44
 771+ E7C2 FF 44 FF 44
 771+ E7C6 FF 00 00 00
 771+ E7CA 00 43 FF 00
 771+ E7CE 00 00 00 43
 771+ E7D2 FF 00 00 00
 771+ E7D6 00 00 00 44
 772+ E7DA FF 00 00 00                        DB	$FF, 	$00, 	$00, 	$00, 	$00, 	$44, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$43, 	$FF, 	$43, 	$FF, 	$00, 	$00, 	$43, 	$FF, 	$00, 	$00
 772+ E7DE 00 44 FF 00
 772+ E7E2 00 00 00 43
 772+ E7E6 FF 43 FF 00
 772+ E7EA 00 43 FF 00
 772+ E7EE 00
 773+ E7EF 00 00 00 00  BlueDanube3:          DB 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$41, 	$FF, 	$41, 	$FF, 	$41, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$3B, 	$FF, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$41, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$41, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 773+ E7F3 00 00 00 41
 773+ E7F7 FF 41 FF 41
 773+ E7FB FF 00 00 00
 773+ E7FF 00 00 00 3B
 773+ E803 FF 3B FF 3B
 773+ E807 FF 00 00 00
 773+ E80B 00 41 00 00
 773+ E80F 00 00 00 3B
 773+ E813 00 00 00 00
 773+ E817 00 00 00 00
 773+ E81B 00 00 00 00
 773+ E81F 00 41 00 00
 773+ E823 00 00 00 3B
 773+ E827 00 00 00 00
 773+ E82B 00 00 00 00
 774+ E82F 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$43, 	$00, 	$43, 	$00, 	$00, 	$00, 	$3B, 	$00, 	$3B, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$41, 	$FF, 	$41, 	$FF, 	$00, 	$00, 	$41, 	$41, 	$00, 	$00, 	$00, 	$00
 774+ E833 00 00 00 00
 774+ E837 00 00 00 00
 774+ E83B 00 00 00 00
 774+ E83F 00 00 00 00
 774+ E843 00 00 00 00
 774+ E847 00 00 00 00
 774+ E84B 43 00 43 00
 774+ E84F 00 00 3B 00
 774+ E853 3B 00 00 00
 774+ E857 00 00 00 00
 774+ E85B 00 00 00 00
 774+ E85F 00 00 00 00
 774+ E863 41 FF 41 FF
 774+ E867 00 00 41 41
 774+ E86B 00 00 00 00
 775+ E86F 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$41, 	$FF, 	$41, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$3B
 775+ E873 00 00 00 00
 775+ E877 00 00 00 00
 775+ E87B 00 00 00 00
 775+ E87F 41 FF 41 FF
 775+ E883 00 00 00 00
 775+ E887 00 00 00 00
 775+ E88B 00 00 00 00
 775+ E88F 00 00 00 00
 775+ E893 00 00 00 00
 775+ E897 00 3B FF 3B
 775+ E89B FF 00 00 00
 775+ E89F 00 00 00 00
 775+ E8A3 00 00 3B FF
 775+ E8A7 FF FF FF FF
 775+ E8AB FF FF 00 3B
 776+ E8AF FF 3B FF 00                        DB	$FF, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$41, 	$FF, 	$41, 	$FF, 	$41, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$3B, 	$FF, 	$00, 	$00, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00
 776+ E8B3 00 00 00 00
 776+ E8B7 00 00 00 00
 776+ E8BB 00 3B FF 00
 776+ E8BF 00 00 00 3B
 776+ E8C3 FF 00 00 00
 776+ E8C7 00 00 00 00
 776+ E8CB 00 00 00 00
 776+ E8CF 00 00 00 00
 776+ E8D3 00 00 00 41
 776+ E8D7 FF 41 FF 41
 776+ E8DB FF 00 00 00
 776+ E8DF 00 00 00 3B
 776+ E8E3 FF 3B FF 00
 776+ E8E7 00 3B FF 00
 776+ E8EB 00 00 00 00
 777+ E8EF 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$3C, 	$FF
 777+ E8F3 00 00 00 00
 777+ E8F7 00 00 00 3B
 777+ E8FB FF 3B FF 00
 777+ E8FF 00 00 00 3C
 777+ E903 FF
 778+ E904 00 00 00 00  BlueDanube4:          DB 	$00, 	$00, 	$00, 	$00, 	$36, 	$00, 	$00, 	$36, 	$FF, 	$36, 	$FF, 	$36, 	$FF, 	$00, 	$00, 	$00, 	$36, 	$00, 	$00, 	$36, 	$FF, 	$36, 	$FF, 	$36, 	$FF, 	$00, 	$00, 	$00, 	$36, 	$36, 	$00, 	$00, 	$00, 	$36, 	$00, 	$36, 	$00, 	$00, 	$00, 	$36, 	$00, 	$3A, 	$00, 	$00, 	$00, 	$36, 	$00, 	$38, 	$00, 	$00, 	$00, 	$00, 	$00, 	$36, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3A, 	$00, 	$00
 778+ E908 36 00 00 36
 778+ E90C FF 36 FF 36
 778+ E910 FF 00 00 00
 778+ E914 36 00 00 36
 778+ E918 FF 36 FF 36
 778+ E91C FF 00 00 00
 778+ E920 36 36 00 00
 778+ E924 00 36 00 36
 778+ E928 00 00 00 36
 778+ E92C 00 3A 00 00
 778+ E930 00 36 00 38
 778+ E934 00 00 00 00
 778+ E938 00 36 00 00
 778+ E93C 00 00 00 00
 778+ E940 00 3A 00 00
 779+ E944 00 36 00 00                        DB	$00, 	$36, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$36, 	$FF, 	$36, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$36, 	$FF, 	$36, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$00, 	$00, 	$00
 779+ E948 00 00 00 00
 779+ E94C 00 00 00 00
 779+ E950 00 00 00 00
 779+ E954 00 00 00 00
 779+ E958 00 00 00 36
 779+ E95C FF 36 FF FF
 779+ E960 FF FF FF FF
 779+ E964 FF FF FF FF
 779+ E968 FF FF 00 00
 779+ E96C 00 00 00 00
 779+ E970 00 00 36 FF
 779+ E974 36 FF FF FF
 779+ E978 FF FF FF FF
 779+ E97C FF FF FF FF
 779+ E980 00 00 00 00
 780+ E984 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$38, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$38, 	$FF, 	$38, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$38, 	$FF, 	$38, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$36, 	$36, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$00
 780+ E988 38 FF FF FF
 780+ E98C FF FF FF FF
 780+ E990 FF FF FF FF
 780+ E994 38 FF 38 FF
 780+ E998 00 00 00 00
 780+ E99C 00 00 00 00
 780+ E9A0 00 38 FF 38
 780+ E9A4 FF FF FF FF
 780+ E9A8 FF FF FF 00
 780+ E9AC 00 00 00 00
 780+ E9B0 00 00 00 00
 780+ E9B4 00 00 00 00
 780+ E9B8 00 36 36 FF
 780+ E9BC FF FF FF FF
 780+ E9C0 FF FF 00 00
 781+ E9C4 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$36, 	$FF, 	$38, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$38, 	$FF, 	$38, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$36, 	$FF, 	$00, 	$00, 	$36, 	$FF, 	$36, 	$FF, 	$36, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 781+ E9C8 00 00 00 00
 781+ E9CC 00 00 00 36
 781+ E9D0 FF 38 FF 00
 781+ E9D4 00 00 00 00
 781+ E9D8 00 00 00 00
 781+ E9DC 00 00 00 00
 781+ E9E0 00 00 00 00
 781+ E9E4 00 00 00 38
 781+ E9E8 FF 38 FF 00
 781+ E9EC 00 00 00 00
 781+ E9F0 00 00 00 36
 781+ E9F4 FF 00 00 36
 781+ E9F8 FF 36 FF 36
 781+ E9FC FF 00 00 00
 781+ EA00 00 00 00 00
 782+ EA04 00 00 00 38                        DB	$00, 	$00, 	$00, 	$38, 	$FF, 	$00, 	$00, 	$36, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 782+ EA08 FF 00 00 36
 782+ EA0C FF 00 00 00
 782+ EA10 00 00 00 00
 782+ EA14 00 00 00 00
 782+ EA18 00
 783+ EA19 00 00 00 00  BlueDanube5:          DB 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$34, 	$00, 	$00, 	$00, 	$00, 	$00, 	$33, 	$00, 	$34, 	$00, 	$00, 	$00, 	$31
 783+ EA1D 00 00 00 00
 783+ EA21 00 00 00 00
 783+ EA25 00 00 00 00
 783+ EA29 00 00 00 00
 783+ EA2D 00 00 00 00
 783+ EA31 00 00 00 00
 783+ EA35 00 00 00 00
 783+ EA39 00 00 00 00
 783+ EA3D 00 00 00 00
 783+ EA41 00 00 00 00
 783+ EA45 00 00 00 00
 783+ EA49 00 00 00 34
 783+ EA4D 00 00 00 00
 783+ EA51 00 33 00 34
 783+ EA55 00 00 00 31
 784+ EA59 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$34, 	$00, 	$00, 	$00, 	$00, 	$00, 	$31, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$33, 	$FF, 	$00, 	$00, 	$33, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$33, 	$FF, 	$00, 	$00, 	$31, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 784+ EA5D 00 00 00 34
 784+ EA61 00 00 00 00
 784+ EA65 00 31 00 00
 784+ EA69 00 00 00 00
 784+ EA6D 00 33 FF 00
 784+ EA71 00 33 FF 00
 784+ EA75 00 00 00 00
 784+ EA79 00 00 00 00
 784+ EA7D 00 00 00 00
 784+ EA81 00 00 00 00
 784+ EA85 33 FF 00 00
 784+ EA89 31 FF 00 00
 784+ EA8D 00 00 00 00
 784+ EA91 00 00 00 00
 784+ EA95 00 00 00 00
 785+ EA99 00 00 31 FF                        DB	$00, 	$00, 	$31, 	$FF, 	$00, 	$00, 	$31, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$31, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$31, 	$FF, 	$00, 	$00, 	$33, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$33, 	$FF, 	$00, 	$33, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$33
 785+ EA9D 00 00 31 00
 785+ EAA1 00 00 00 00
 785+ EAA5 00 00 00 00
 785+ EAA9 00 00 31 FF
 785+ EAAD 00 00 00 00
 785+ EAB1 00 00 00 31
 785+ EAB5 FF 00 00 33
 785+ EAB9 FF FF FF FF
 785+ EABD FF FF FF 00
 785+ EAC1 00 00 00 00
 785+ EAC5 00 00 00 00
 785+ EAC9 00 00 00 33
 785+ EACD FF 00 33 FF
 785+ EAD1 FF FF FF FF
 785+ EAD5 FF FF 00 33
 786+ EAD9 FF 33 FF 00                        DB	$FF, 	$33, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$33, 	$FF, 	$00, 	$00, 	$34, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$31, 	$FF, 	$31, 	$FF, 	$34, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$35, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$33, 	$FF, 	$33, 	$FF, 	$00
 786+ EADD 00 00 00 00
 786+ EAE1 00 33 FF 00
 786+ EAE5 00 34 FF 00
 786+ EAE9 00 00 00 00
 786+ EAED 00 00 00 00
 786+ EAF1 00 00 00 00
 786+ EAF5 00 31 FF 31
 786+ EAF9 FF 34 FF 00
 786+ EAFD 00 00 00 00
 786+ EB01 00 00 00 00
 786+ EB05 00 35 FF 00
 786+ EB09 00 00 00 00
 786+ EB0D 00 00 00 00
 786+ EB11 00 00 00 33
 786+ EB15 FF 33 FF 00
 787+ EB19 00 31 FF 00                        DB	$00, 	$31, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 787+ EB1D 00 00 00 00
 787+ EB21 00 00 00 00
 787+ EB25 00 00 00 00
 787+ EB29 00 00 00 00
 787+ EB2D 00
 788+ EB2E 00 00 00 00  BlueDanube6:          DB 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 788+ EB32 00 00 00 00
 788+ EB36 00 00 00 00
 788+ EB3A 00 00 00 00
 788+ EB3E 00 00 00 00
 788+ EB42 00 00 00 00
 788+ EB46 00 00 00 00
 788+ EB4A 00 00 00 00
 788+ EB4E 00 00 00 00
 788+ EB52 00 00 00 00
 788+ EB56 00 00 00 00
 788+ EB5A 00 00 00 00
 788+ EB5E 00 00 00 00
 788+ EB62 00 00 00 00
 788+ EB66 00 00 00 00
 788+ EB6A 00 00 00 00
 789+ EB6E 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$2A, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2A, 	$FF
 789+ EB72 00 00 00 00
 789+ EB76 00 00 00 00
 789+ EB7A 00 00 00 00
 789+ EB7E 00 00 00 2B
 789+ EB82 FF 00 00 00
 789+ EB86 00 2B FF 00
 789+ EB8A 00 00 00 00
 789+ EB8E 00 00 00 00
 789+ EB92 00 00 00 00
 789+ EB96 2B FF 2B FF
 789+ EB9A 00 00 00 00
 789+ EB9E 2A FF 00 00
 789+ EBA2 00 00 00 00
 789+ EBA6 00 00 00 00
 789+ EBAA 00 00 2A FF
 790+ EBAE 2A FF 00 00                        DB	$2A, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2A, 	$FF, 	$2A, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 790+ EBB2 00 00 00 00
 790+ EBB6 00 00 00 00
 790+ EBBA 00 00 00 00
 790+ EBBE 00 00 00 00
 790+ EBC2 00 00 00 2A
 790+ EBC6 FF 2A FF 00
 790+ EBCA 00 00 00 2B
 790+ EBCE FF FF FF FF
 790+ EBD2 FF FF FF 00
 790+ EBD6 00 00 00 00
 790+ EBDA 00 00 00 2B
 790+ EBDE FF 2B FF 00
 790+ EBE2 00 00 00 00
 790+ EBE6 00 00 00 00
 790+ EBEA 00 00 00 00
 791+ EBEE 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 791+ EBF2 00 2B FF 2B
 791+ EBF6 FF 00 00 00
 791+ EBFA 00 00 00 00
 791+ EBFE 00 00 00 00
 791+ EC02 00 00 00 00
 791+ EC06 00 00 00 00
 791+ EC0A 00 00 00 00
 791+ EC0E 00 00 00 00
 791+ EC12 00 00 00 00
 791+ EC16 00 00 00 00
 791+ EC1A 00 00 00 00
 791+ EC1E 00 2B FF 00
 791+ EC22 00 00 00 00
 791+ EC26 00 00 00 00
 791+ EC2A 00 00 00 00
 792+ EC2E 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 792+ EC32 00 00 00 00
 792+ EC36 00 2B FF 00
 792+ EC3A 00 00 00 00
 792+ EC3E 00 00 00 00
 792+ EC42 00
 793+ EC43
# file closed: ./Hardware/sound.asm
1245  EC43                                  DISPLAY "Sound ",BankSound," - Bytes free ",/D, $2000 - ($-SoundAddr), " - BankSound"
1246  EC43                                  ASSERT $-SoundAddr <8912, Bank code leaks over 8K boundary
1247  EC43              ; Bank 102  -----------------------------------------------------------------------------------------------------------------------
1248  EC43                                  SLOT    MathsBankedFnsAddr
1249  EC43                                  PAGE    BankMathsBankedFns
1250  EC43                                  ORG     MathsBankedFnsAddr,BankMathsBankedFns
1251  0000                                  INCLUDE "./Maths/MathsBankedFns.asm"
# file opened: ./Maths/MathsBankedFns.asm
   1+ 0000
   2+ 0000              ; Adds DE to HL, in form S15 result will also be S15 rather than 2's C
   3+ 0000 7C           AddDEtoHLSigned:        ld      a,h                         ; extract h sign to b
   4+ 0001 E6 80                                and     $80                         ; hl = abs (hl)
   5+ 0003 47                                   ld      b,a
   6+ 0004 7C                                   ld      a,h
   7+ 0005 E6 7F                                and     $7F
   8+ 0007 67                                   ld      h,a
   9+ 0008 7A                                   ld      a,d                         ; extract d sign to c
  10+ 0009 E6 80                                and     $80                         ; de = abs (de)
  11+ 000B 4F                                   ld      c,a
  12+ 000C 7A                                   ld      a,d
  13+ 000D E6 7F                                and     $7F
  14+ 000F 57                                   ld      d,a
  15+ 0010 78                                   ld      a,b
  16+ 0011 A9                                   xor     c
  17+ 0012 C2 1A 00                             jp      nz,.OppositeSigns
  18+ 0015 19           .SameSigns              add     hl,de                       ; same signs so just add
  19+ 0016 78                                   ld      a,b                         ; and bring in the sign from b
  20+ 0017 B4                                   or      h                           ; note this has to be 15 bit result
  21+ 0018 67                                   ld      h,a                         ; but we can assume that
  22+ 0019 C9                                   ret
  23+ 001A              .OppositeSigns:         ClearCarryFlag
  23+ 001A B7          >                        or a
  24+ 001B ED 52                                sbc     hl,de
  25+ 001D 38 04                                jr      c,.OppsiteSignInvert
  26+ 001F 78           .OppositeSignNoInvert:  ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  27+ 0020 B4                                   or      h
  28+ 0021 67                                   ld      h,a                         ; set the previou sign value
  29+ 0022 C9                                   ret
  30+ 0023              .OppsiteSignInvert:     NegHL                              ; we need to flip the sign and 2'c the Hl result
  30+ 0023 AF          >                    xor a
  30+ 0024 95          >                    sub l
  30+ 0025 6F          >                    ld l,a
  30+ 0026 9F          >                    sbc a,a
  30+ 0027 94          >                    sub h
  30+ 0028 67          >                    ld h,a
  31+ 0029 78                                   ld      a,b
  32+ 002A EE 80                                xor     SignOnly8Bit               ; flip sign bit
  33+ 002C B4                                   or      h
  34+ 002D 67                                   ld      h,a                         ; recover sign
  35+ 002E C9                                   ret
  36+ 002F
  37+ 002F 78           ADDHLDESignBC:          ld      a,b
  38+ 0030 E6 80                                and     SignOnly8Bit
  39+ 0032 A9                                   xor     c                           ;if b sign and c sign were different then bit 7 of a will be 1 which means
  40+ 0033                                      JumpIfNegative .ADDHLDEsBCOppSGN     ;Signs are opposite there fore we can subtract to get difference
  40+ 0033 FA 41 00    >                        jp		m, .ADDHLDEsBCOppSGN
  41+ 0036 78           .ADDHLDEsBCSameSigns:   ld      a,b
  42+ 0037 B1                                   or      c
  43+ 0038                                      JumpIfNegative .ADDHLDEsBCSameNeg    ; optimisation so we can just do simple add if both positive
  43+ 0038 FA 3D 00    >                        jp		m, .ADDHLDEsBCSameNeg
  44+ 003B 19                                   add     hl,de                       ; both positive so a will already be zero
  45+ 003C C9                                   ret
  46+ 003D 19           .ADDHLDEsBCSameNeg:      add     hl,de
  47+ 003E 78                                   ld      a,b
  48+ 003F                                      DISPLAY "TODO: don't bother with overflow for now"
  49+ 003F B1                                   or      c                           ; now set bit for negative value, we won't bother with overflow for now TODO
  50+ 0040 C9                                   ret
  51+ 0041              .ADDHLDEsBCOppSGN:       ClearCarryFlag
  51+ 0041 B7          >                        or a
  52+ 0042 ED 52                                sbc     hl,de
  53+ 0044 38 02                                jr      c,.ADDHLDEsBCOppInvert
  54+ 0046 78           .ADDHLDEsBCOppSGNNoCarry:ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  55+ 0047 C9                                   ret
  56+ 0048              .ADDHLDEsBCOppInvert:   NegHL                               ; if result was zero then set sign to zero (which doing h or l will give us for free)
  56+ 0048 AF          >                    xor a
  56+ 0049 95          >                    sub l
  56+ 004A 6F          >                    ld l,a
  56+ 004B 9F          >                    sbc a,a
  56+ 004C 94          >                    sub h
  56+ 004D 67          >                    ld h,a
  57+ 004E 78                                   ld      a,b
  58+ 004F EE 80                                xor     SignOnly8Bit                ; flip sign bit
  59+ 0051 C9                                   ret
  60+ 0052
  61+ 0052 7C           ADDHLDESignedV4:        ld      a,h
  62+ 0053 E6 80                                and     SignOnly8Bit
  63+ 0055 47                                   ld      b,a                         ;save sign bit in b
  64+ 0056 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
  65+ 0057                                      JumpIfNegative .ADDHLDEOppSGN       ;Signs are opposite there fore we can subtract to get difference
  65+ 0057 FA 6F 00    >                        jp		m, .ADDHLDEOppSGN
  66+ 005A 78           .ADDHLDESameSigns:      ld      a,b
  67+ 005B B2                                   or      d
  68+ 005C                                      JumpIfNegative .ADDHLDESameNeg      ; optimisation so we can just do simple add if both positive
  68+ 005C FA 61 00    >                        jp		m, .ADDHLDESameNeg
  69+ 005F 19                                   add     hl,de
  70+ 0060 C9                                   ret
  71+ 0061 7C           .ADDHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  72+ 0062 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  73+ 0064 67                                   ld      h,a
  74+ 0065 7A                                   ld      a,d
  75+ 0066 E6 7F                                and     SignMask8Bit
  76+ 0068 57                                   ld      d,a
  77+ 0069 19                                   add     hl,de
  78+ 006A 3E 80                                ld      a,SignOnly8Bit
  79+ 006C                                      DISPLAY "TODO:  dont bother with overflow for now"
  80+ 006C B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
  81+ 006D 67                                   ld      h,a
  82+ 006E C9                                   ret
  83+ 006F 7C           .ADDHLDEOppSGN:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
  84+ 0070 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  85+ 0072 67                                   ld      h,a
  86+ 0073 7A                                   ld      a,d
  87+ 0074 E6 7F                                and     SignMask8Bit
  88+ 0076 57                                   ld      d,a
  89+ 0077                                      ClearCarryFlag
  89+ 0077 B7          >                        or a
  90+ 0078 ED 52                                sbc     hl,de
  91+ 007A 38 04                                jr      c,.ADDHLDEOppInvert
  92+ 007C 78           .ADDHLDEOppSGNNoCarry:  ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  93+ 007D B4                                   or      h
  94+ 007E 67                                   ld      h,a                         ; set the previou sign value
  95+ 007F C9                                   ret
  96+ 0080              .ADDHLDEOppInvert:      NegHL                                                   ; we need to flip the sign and 2'c the Hl result
  96+ 0080 AF          >                    xor a
  96+ 0081 95          >                    sub l
  96+ 0082 6F          >                    ld l,a
  96+ 0083 9F          >                    sbc a,a
  96+ 0084 94          >                    sub h
  96+ 0085 67          >                    ld h,a
  97+ 0086 78                                   ld      a,b
  98+ 0087 EE 80                                xor     SignOnly8Bit                ; flip sign bit
  99+ 0089 B4                                   or      h
 100+ 008A 67                                   ld      h,a                         ; recover sign
 101+ 008B C9                                   ret
 102+ 008C
 103+ 008C              ; extension to AddBCHtoDELsigned
 104+ 008C              ; takes ix as the address of the values to load into BCH
 105+ 008C              ;       iy as the address of the values to load into DEL
 106+ 008C DD 66 00     AddAtIXtoAtIY24Signed:  ld      h,(ix+0)
 107+ 008F DD 6E 01                             ld      l,(ix+1)
 108+ 0092 DD 46 02                             ld      b,(ix+2)
 109+ 0095 FD 56 00                             ld      d,(iy+0)
 110+ 0098 FD 5E 01                             ld      e,(iy+1)
 111+ 009B FD 6E 02                             ld      l,(iy+2)
 112+ 009E FD E5                                push    iy
 113+ 00A0 CD AF 00                             call    AddBCHtoDELsigned
 114+ 00A3 FD E1                                pop     iy
 115+ 00A5 FD 72 00                             ld      (iy+0),d
 116+ 00A8 FD 73 01                             ld      (iy+1),e
 117+ 00AB FD 75 02                             ld      (iy+2),l
 118+ 00AE C9                                   ret
 119+ 00AF
 120+ 00AF              ;tested mathstestsun2
 121+ 00AF              ; DEL = DEL + BCH signed, uses BC, DE, HL, IY, A
 122+ 00AF
 123+ 00AF 78           AddBCHtoDELsigned:      ld      a,b                 ; Are the values both the same sign?
 124+ 00B0 AA                                   xor     d                   ; .
 125+ 00B1 E6 80                                and     SignOnly8Bit        ; .
 126+ 00B3 20 19                                jr      nz,.SignDifferent   ; .
 127+ 00B5 78           .SignSame:              ld      a,b                 ; if they are then we only need 1 signe
 128+ 00B6 E6 80                                and     SignOnly8Bit        ; so store it in iyh
 129+ 00B8 FD 67                                ld      iyh,a               ;
 130+ 00BA 78                                   ld      a,b                 ; bch = abs bch
 131+ 00BB E6 7F                                and     SignMask8Bit        ; .
 132+ 00BD 47                                   ld      b,a                 ; .
 133+ 00BE 7A                                   ld      a,d                 ; del = abs del
 134+ 00BF E6 7F                                and     SignMask8Bit        ; .
 135+ 00C1 57                                   ld      d,a                 ; .
 136+ 00C2 7C                                   ld      a,h                 ; l = h + l
 137+ 00C3 85                                   add     l                   ; .
 138+ 00C4 6F                                   ld      l,a                 ; .
 139+ 00C5 79                                   ld      a,c                 ; e = e + c + carry
 140+ 00C6 8B                                   adc     e                   ; .
 141+ 00C7 5F                                   ld      e,a                 ; .
 142+ 00C8 78                                   ld      a,b                 ; d = b + d + carry (signed)
 143+ 00C9 8A                                   adc     d                   ;
 144+ 00CA FD B4                                or      iyh                 ; d = or back in sign bit
 145+ 00CC 57                                   ld      d,a                 ;
 146+ 00CD C9                                   ret                         ; done
 147+ 00CE 78           .SignDifferent:         ld      a,b                 ; bch = abs bch
 148+ 00CF FD 67                                ld      iyh,a               ; iyh = b sign
 149+ 00D1 E6 7F                                and     SignMask8Bit        ; .
 150+ 00D3 47                                   ld      b,a                 ; .
 151+ 00D4 7A                                   ld      a,d                 ; del = abs del
 152+ 00D5 FD 6F                                ld      iyl,a               ; iyl = d sign
 153+ 00D7 E6 7F                                and     SignMask8Bit        ; .
 154+ 00D9 57                                   ld      d,a                 ; .
 155+ 00DA E5                                   push    hl                  ; save hl
 156+ 00DB 60 69                                ld      hl,bc               ; hl = bc - de, if bc < de then there is a carry
 157+ 00DD ED 52                                sbc     hl,de               ;
 158+ 00DF E1                                   pop     hl                  ;
 159+ 00E0 38 0E                                jr      c,.BCHltDEL
 160+ 00E2 20 1C                                jr      nz,.DELltBCH        ; if the result was not zero then DEL > BCH
 161+ 00E4 7C           .BCeqDE:                ld      a,h                 ; if the result was zero then check lowest bits
 162+ 00E5                                      JumpIfALTNusng l,.BCHltDEL
 162+ 00E5 BD          >                        cp      l
 162+ 00E6 DA F0 00    >                        jp		c, .BCHltDEL
 163+ 00E9 20 15                                jr      nz,.DELltBCH
 164+ 00EB              ; The same so its just zero
 165+ 00EB AF           .BCHeqDEL:              xor     a                  ; its just zero
 166+ 00EC 57                                   ld      d,a                ; .
 167+ 00ED 5F                                   ld      e,a                ; .
 168+ 00EE 6F                                   ld      l,a                ; .
 169+ 00EF C9                                   ret                        ; .
 170+ 00F0              ;BCH is less than DEL so its DEL - BCH the sort out sign
 171+ 00F0 7D           .BCHltDEL:              ld      a,l                ; l = l - h                      ; ex
 172+ 00F1 94                                   sub     h                  ; .                              ;   01D70F DEL
 173+ 00F2 6F                                   ld      l,a                ; .                              ;  -000028 BCH
 174+ 00F3 7B                                   ld      a,e                ; e = e - c - carry              ;1.
 175+ 00F4 99                                   sbc     c                  ; .                              ;
 176+ 00F5 5F                                   ld      e,a                ; .                              ;
 177+ 00F6 7A                                   ld      a,d                ; d = d - b - carry              ;
 178+ 00F7 98                                   sbc     b                  ; .                              ;
 179+ 00F8 57                                   ld      d,a                ; .                              ;
 180+ 00F9 FD 7D                                ld      a,iyl              ; as d was larger, take d sign
 181+ 00FB E6 80                                and     SignOnly8Bit       ;
 182+ 00FD B2                                   or      d                  ;
 183+ 00FE 57                                   ld      d,a                ;
 184+ 00FF C9                                   ret
 185+ 0100 7C           .DELltBCH:              ld      a,h                ; l = h - l
 186+ 0101 95                                   sub     l                  ;
 187+ 0102 6F                                   ld      l,a                ;
 188+ 0103 79                                   ld      a,c                ; e = c - e - carry
 189+ 0104 9B                                   sbc     e                  ;
 190+ 0105 5F                                   ld      e,a                ;
 191+ 0106 78                                   ld      a,b                ; d = b - d - carry
 192+ 0107 9A                                   sbc     d                  ;
 193+ 0108 57                                   ld      d,a                ;
 194+ 0109 FD 7C                                ld      a,iyh              ; as b was larger, take b sign into d
 195+ 010B E6 80                                and     SignOnly8Bit       ;
 196+ 010D B2                                   or      d                  ;
 197+ 010E 57                                   ld      d,a                ;
 198+ 010F C9                                   ret
 199+ 0110
 200+ 0110
 201+ 0110
# file closed: ./Maths/MathsBankedFns.asm
1252  0110                                  DISPLAY "Bank ",MathsBankedFnsAddr," - Bytes free ",/D, $2000 - ($-MathsBankedFnsAddr), " - BankMathsBankedAdd"
1253  0110                                  ASSERT $-MathsBankedFnsAddr <8912, Bank code leaks over 8K boundary
1254  0110
1255  0110                  SAVENEX OPEN "EliteN.nex", EliteNextStartup , TopOfStack
1256  0110                  SAVENEX CFG  0,0,0,1
1257  0110                  SAVENEX AUTO
1258  0110                  SAVENEX CLOSE
1259  0110                  DISPLAY "Main Non Banked Code End ", MainNonBankedCodeEnd , " Bytes free ", 0B000H - MainNonBankedCodeEnd
1260  0110                  ASSERT MainNonBankedCodeEnd < 0B000H, Program code leaks in to interrup vector table
1261  0110
# file closed: eliteNext.asm
