# file opened: eliteNext.asm
   1  0000               DEVICE ZXSPECTRUMNEXT
   2  0000               DEVICE ZXSPECTRUMNEXT
   3  0000               DEVICE ZXSPECTRUMNEXT
   4  0000               DEFINE  DOUBLEBUFFER 1
   5  0000               CSPECTMAP eliteNext.map
   6  0000               OPT --zxnext=cspect --syntax=a
   7  0000
   8  0000              DEBUGSEGSIZE   equ 1
   9  0000              DEBUGLOGSUMMARY equ 1
  10  0000              ;DEBUGLOGDETAIL equ 1
  11  0000
  12  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  13  0000              ; Game Defines
  14  0000              ScreenLocal      EQU 0
  15  0000              ScreenGalactic   EQU ScreenLocal + 1
  16  0000              ScreenMarket     EQU ScreenGalactic + 1
  17  0000              ScreenMarketDsp  EQU ScreenMarket + 1
  18  0000              ScreenStatus     EQU ScreenMarketDsp + 1
  19  0000              ScreenInvent     EQU ScreenStatus + 1
  20  0000              ScreenPlanet     EQU ScreenInvent + 1
  21  0000              ScreenEquip      EQU ScreenPlanet + 1
  22  0000              ScreenLaunch     EQU ScreenEquip + 1
  23  0000              ScreenFront      EQU ScreenLaunch + 1
  24  0000              ScreenAft        EQU ScreenFront+1
  25  0000              ScreenLeft       EQU ScreenAft+1
  26  0000              ScreenRight      EQU ScreenLeft+1
  27  0000              ScreenDocking    EQU ScreenRight+1
  28  0000              ScreenHyperspace EQU ScreenDocking+1
  29  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  30  0000              ; Colour Defines
  31  0000                  INCLUDE "./Hardware/L2ColourDefines.asm"
# file opened: ./Hardware/L2ColourDefines.asm
   1+ 0000              L2ColourBLACK           EQU   0
   2+ 0000              L2ColourRED             EQU 224
   3+ 0000              L2ColourRED_MED         EQU 128
   4+ 0000              L2ColourRED_DRK         EQU  32
   5+ 0000              L2ColourRED_1           EQU L2ColourRED_MED
   6+ 0000              L2ColourRED_2           EQU  96
   7+ 0000              L2ColourRED_3           EQU  64
   8+ 0000              L2ColourRED_4           EQU L2ColourRED_DRK
   9+ 0000              L2ColourDARK_RED        EQU L2ColourRED_DRK
  10+ 0000              L2ColourYELLOW          EQU 252
  11+ 0000              L2ColourYELLOW_MED      EQU 144
  12+ 0000              L2ColourYELLOW_DRK      EQU  72
  13+ 0000              L2ColourYELLOW_1	    EQU L2ColourYELLOW_MED
  14+ 0000              L2ColourYELLOW_2        EQU L2ColourYELLOW_DRK
  15+ 0000              L2ColourGREEN           EQU  29
  16+ 0000              L2ColourGREEN_MED       EQU  16
  17+ 0000              L2ColourGREEN_DRK       EQU   8
  18+ 0000              L2ColourGREEN_1		    EQU L2ColourGREEN
  19+ 0000              L2ColourGREEN_2		    EQU L2ColourGREEN_MED
  20+ 0000              L2ColourGREEN_3		    EQU L2ColourGREEN_DRK
  21+ 0000              L2ColourWHITE           EQU 255
  22+ 0000              L2ColourWHITE_MED       EQU 146
  23+ 0000              L2ColourWHITE_DRK       EQU  73
  24+ 0000              L2ColourWHITE_1         EQU L2ColourWHITE_MED
  25+ 0000              L2ColourWHITE_2         EQU L2ColourWHITE_DRK
  26+ 0000              L2ColourGREY_1		    EQU 146
  27+ 0000              L2ColourGREY_2		    EQU 109
  28+ 0000              L2ColourGREY_3		    EQU  73
  29+ 0000              L2ColourGREY_4		    EQU  37
  30+ 0000              L2ColourMAGENTA         EQU 218
  31+ 0000              L2ColourMAGENTA_MED     EQU 130
  32+ 0000              L2ColourMAGENTA_DRK     EQU  65
  33+ 0000              L2ColourORANGE          EQU 236
  34+ 0000              L2ColourORANGE_MED      EQU 168
  35+ 0000              L2ColourORANGE_DRK      EQU  68
  36+ 0000              L2ColourBLUE            EQU   3
  37+ 0000              L2ColourBLUE_MED        EQU   2
  38+ 0000              L2ColourBLUE_DRK        EQU   1
  39+ 0000              L2ColourBLUE_1          EQU 111
  40+ 0000              L2ColourBLUE_2		    EQU  39
  41+ 0000              L2ColourBLUE_3		    EQU L2ColourBLUE_MED
  42+ 0000              L2ColourBLUE_4		    EQU L2ColourBLUE_DRK
  43+ 0000              L2ColourCYAN            EQU  31
  44+ 0000              L2ColourCYAN_MED        EQU  18
  45+ 0000              L2ColourCYAN_DRK        EQU   9
  46+ 0000              L2ColourPURPLE          EQU 109
  47+ 0000              L2ColourPURPLE_MED      EQU  66
  48+ 0000              L2ColourPURPLE_DRK      EQU  33
  49+ 0000              L2ColourPINK_1		    EQU 231
  50+ 0000              L2ColourPINK_2		    EQU 226
  51+ 0000              L2ColourPINK_3		    EQU 225
  52+ 0000              L2ColourPINK_4		    EQU 224
  53+ 0000              L2ColourTRANSPARENT     EQU $E3
  54+ 0000
# file closed: ./Hardware/L2ColourDefines.asm
  32  0000                  INCLUDE "./Hardware/L1ColourDefines.asm"
# file opened: ./Hardware/L1ColourDefines.asm
   1+ 0000
   2+ 0000              L1ColourInkBlack        EQU %00000000
   3+ 0000              L1ColourInkBlue         EQU %00000001
   4+ 0000              L1ColourInkRed          EQU %00000010
   5+ 0000              L1ColourInkMagenta      EQU %00000011
   6+ 0000              L1ColourInkGreen        EQU %00000100
   7+ 0000              L1ColourInkCyan         EQU %00000101
   8+ 0000              L1ColourInkYellow       EQU %00000110
   9+ 0000              L1ColourInkWhite        EQU %00000111
  10+ 0000              L1ColourPaperBlack      EQU %00000000
  11+ 0000              L1ColourPaperBlue       EQU %00001000
  12+ 0000              L1ColourPaperRed        EQU %00010000
  13+ 0000              L1ColourPaperMagenta    EQU %00011000
  14+ 0000              L1ColourPaperGreen      EQU %00100000
  15+ 0000              L1ColourPaperCyan       EQU %00101000
  16+ 0000              L1ColourPaperYellow     EQU %00110000
  17+ 0000              L1ColourPaperWhite      EQU %00111000
  18+ 0000              L1ColourFlash           EQU %10000000
  19+ 0000              L1ColourBright          EQU %01000000
  20+ 0000              ;----------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              ; Screen Specific Colour Defines
  22+ 0000              L1InvHighlight          EQU L1ColourBright | L1ColourPaperRed   | L1ColourInkYellow
  23+ 0000              L1InvLowlight           EQU                  L1ColourPaperBlack | L1ColourInkWhite
# file closed: ./Hardware/L1ColourDefines.asm
  33  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  34  0000              ; Total screen list
  35  0000              ; Local Chart
  36  0000              ; Galactic Chart
  37  0000              ; Market Prices
  38  0000              ; Inventory
  39  0000              ; Comander status
  40  0000              ; System Data
  41  0000              ; Mission Briefing
  42  0000              ; missio completion
  43  0000              ; Docked  Menu (only place otehr than pause you can load and save)
  44  0000              ; Pause Menu (only place you can load from )
  45  0000              ; byint and selling equipment
  46  0000              ; bying and selling stock
  47  0000
  48  0000                  INCLUDE "./Hardware/register_defines.asm"
# file opened: ./Hardware/register_defines.asm
   1+ 0000              IO_LAYER2_PORT                          EQU $123B
   2+ 0000              IO_EXT_BANK_PORT 			            EQU $DFFD ; 57341
   3+ 0000              IO_BANK_PORT                            EQU $7FFD ; 32765
   4+ 0000              REGISTER_NUMBER_PORT					EQU $243B
   5+ 0000              REGISTER_VALUE_PORT						EQU $253B
   6+ 0000              SPRITE_SLOT_PORT						EQU $303B
   7+ 0000              SPRITE_INFO_PORT                        EQU $0057
   8+ 0000              SPRITE_PATTERN_UPLOAD_PORT				EQU $005B
   9+ 0000
  10+ 0000              MACHINE_ID_REGISTER						EQU 0
  11+ 0000              VERSION_REGISTER						EQU 1
  12+ 0000              RESET_REGISTER		    				EQU 2
  13+ 0000              MACHINE_TYPE_REGISTER					EQU 3
  14+ 0000              PAGE_RAM_REGISTER						EQU 4
  15+ 0000              PERIPHERAL_1_REGISTER					EQU 5
  16+ 0000              PERIPHERAL_2_REGISTER					EQU 6
  17+ 0000              TURBO_MODE_REGISTER						EQU 7
  18+ 0000              PERIPHERAL_3_REGISTER					EQU 8
  19+ 0000              ANTI_BRICK_SYSTEM_REGISTER				EQU 10
  20+ 0000              LAYER2_RAM_PAGE_REGISTER				EQU 18
  21+ 0000              LAYER2_RAM_SHADOW_REGISTER      		EQU 19
  22+ 0000              TRANSPARENCY_COLOUR_REGISTER			EQU 20
  23+ 0000              SPRITE_LAYERS_SYSTEM_REGISTER			EQU 21
  24+ 0000              LAYER2_OFFSET_X_REGISTER				EQU 22
  25+ 0000              LAYER2_OFFSET_Y_REGISTER				EQU 23
  26+ 0000              CLIP_WINDOW_LAYER2_REGISTER				EQU 24
  27+ 0000              CLIP_WINDOW_SPRITES_REGISTER			EQU 25
  28+ 0000              CLIP_WINDOW_ULA_REGISTER				EQU 26
  29+ 0000              CLIP_WINDOW_CONTROL_REGISTER			EQU 28
  30+ 0000              ACTIVE_VIDEO_LINE_MSB_REGISTER			EQU 30
  31+ 0000              ACTIVE_VIDEO_LINE_LSB_REGISTER			EQU 31
  32+ 0000              LINE_INTERRUPT_CONTROL_REGISTER			EQU 34
  33+ 0000              LINE_INTERRUPT_VALUE_LSB_REGISTER		EQU 35
  34+ 0000              KEYMAP_HIGH_ADDRESS_REGISTER			EQU 40
  35+ 0000              KEYMAP_LOW_ADDRESS_REGISTER				EQU 41
  36+ 0000              KEYMAP_HIGH_DATA_REGISTER				EQU 42
  37+ 0000              KEYMAP_LOW_DATA_REGISTER				EQU 43
  38+ 0000              DAC_B_MIRROR_REGISTER                   EQU 44
  39+ 0000              DAC_AB_MIRROR_REGISTER                  EQU 45
  40+ 0000              DAC_C_MORROR_REGISTER                   EQU 46
  41+ 0000              TILEMAP_OFFSET_XMSB_REGISTER            EQU 47
  42+ 0000              TILEMAP_OFFSET_XLSB_REGISTER            EQU 48
  43+ 0000              TILEMAP_OFFSET_YMSB_REGISTER            EQU 49
  44+ 0000              LORES_OFFSET_X_REGISTER					EQU 50
  45+ 0000              LORES_OFFSET_Y_REGISTER					EQU 51
  46+ 0000              SPRITE_PORT_INDEX_REGISTER              EQU 52
  47+ 0000              SPRITE_PORT_ATTR0_REGISTER              EQU 53
  48+ 0000              SPRITE_PORT_ATTR1_REGISTER              EQU 54
  49+ 0000              SPRITE_PORT_ATTR2_REGISTER              EQU 55
  50+ 0000              SPRITE_PORT_ATTR3_REGISTER              EQU 56
  51+ 0000              SPRITE_PORT_ATTR4_REGISTER              EQU 57
  52+ 0000              PALETTE_INDEX_REGISTER					EQU 64
  53+ 0000              PALETTE_VALUE_8BIT_REGISTER				EQU 65
  54+ 0000              PALETTE_FORMAT_REGISTER					EQU 66
  55+ 0000              PALETTE_CONTROL_REGISTER				EQU 67
  56+ 0000              PALETTE_VALUE_9BIT_REGISTER				EQU 68
  57+ 0000              MMU_SLOT_0_REGISTER						EQU 80
  58+ 0000              MMU_SLOT_1_REGISTER						EQU 81
  59+ 0000              MMU_SLOT_2_REGISTER						EQU 82
  60+ 0000              MMU_SLOT_3_REGISTER						EQU 83
  61+ 0000              MMU_SLOT_4_REGISTER						EQU 84
  62+ 0000              MMU_SLOT_5_REGISTER						EQU 85
  63+ 0000              MMU_SLOT_6_REGISTER						EQU 86
  64+ 0000              MMU_SLOT_7_REGISTER						EQU 87
  65+ 0000              COPPER_DATA_REGISTER					EQU 96
  66+ 0000              COPPER_CONTROL_LOW_REGISTER				EQU 97
  67+ 0000              COPPER_CONTROL_HIGH_REGISTER			EQU 98
  68+ 0000              DISPLAY_CONTROL_1_REGISTER              EQU 105
  69+ 0000              LAYER_2_CONTROL_REGISTER                EQU 112
  70+ 0000              LAYER_2_X_OFFSET_MSB_REGISTER           EQU 113
  71+ 0000              DEBUG_LEDS_REGISTER						EQU 255
  72+ 0000
  73+ 0000
  74+ 0000              GetNextReg:	MACRO register
  75+ 0000 ~                        push bc
  76+ 0000 ~                            ld bc,$243B
  77+ 0000 ~                                ld a,register
  78+ 0000 ~                                out (c),a
  79+ 0000 ~                                inc b
  80+ 0000 ~                            in a,(c)
  81+ 0000 ~                        pop bc
  82+ 0000                          ENDM
  83+ 0000
# file closed: ./Hardware/register_defines.asm
  49  0000                  INCLUDE "./Layer2Graphics/layer2_defines.asm"
# file opened: ./Layer2Graphics/layer2_defines.asm
   1+ 0000
   2+ 0000
   3+ 0000              LAYER2_SHIFTED_SCREEN_TOP  	 equ 0
   4+ 0000              LAYER2_SHIFTED_SCREEN_MIDDLE equ $40
   5+ 0000              LAYER2_SHIFTED_SCREEN_BOTTOM equ $80
   6+ 0000
   7+ 0000              ; note hi byte is not decoded on DMA port so can out OUTIR
   8+ 0000              IO_DATAGEAR_DMA_PORT 		 equ 107
   9+ 0000              IO_SPRITE_SLOT_PORT 		 equ 12347
  10+ 0000              IO_SPRITE_PATTERN_PORT       equ 91
  11+ 0000              IO_SPRITE_ATTRIBUTES_PORT    equ 87
  12+ 0000
  13+ 0000              LAYER2_VISIBLE_MASK 		equ $02
  14+ 0000              ; DEBUG 0 for always write to primary 08 for double buffering
  15+ 0000                  IFDEF DOUBLEBUFFER
  16+ 0000              LAYER2_SHADOW_SCREEN_MASK 	equ $08
  17+ 0000                  ELSE
  18+ 0000 ~            LAYER2_SHADOW_SCREEN_MASK 	equ $00
  19+ 0000                  ENDIF
  20+ 0000              LAYER2_WRITE_ENABLE_MASK 	equ $01
  21+ 0000              LAYER2_SCREEN_SECTION_MASK 	equ $03
  22+ 0000              LAYER2_SCREEN_SECTION_SHIFT equ 6
  23+ 0000
  24+ 0000              LAYER2_SCREEN_BANK1          equ 8
  25+ 0000              LAYER2_SCREEN_BANK2          equ 9
  26+ 0000              LAYER2_SCREEN_BANK3          equ 10
  27+ 0000              LAYER2_SHADOW_BANK1          equ 11
  28+ 0000              LAYER2_SHADOW_BANK2          equ 12
  29+ 0000              LAYER2_SHADOW_BANK3          equ 13
  30+ 0000
  31+ 0000              SCREEN_HEIGHT 				 equ 192
  32+ 0000              SCREEN_RAM_BASE				 equ $0000
  33+ 0000              SCREEN_HOZ_MIN_PIX		     equ 10
  34+ 0000
  35+ 0000              SPRITES_VISIBLE_MASK         equ $01
  36+ 0000              SPRITES_ON_BORDER_MASK       equ $02
  37+ 0000              LAYER_PRIORITIES_MASK        equ $07
  38+ 0000              LORES_MODE_MASK              equ $80
  39+ 0000              LAYER_PRIORITIES_SHIFT       equ 2
  40+ 0000
  41+ 0000              LAYER_PRIORITIES_S_L_U 		equ 0
  42+ 0000              LAYER_PRIORITIES_L_S_U 		equ 1
  43+ 0000              LAYER_PRIORITIES_S_U_L  	equ 2
  44+ 0000              LAYER_PRIORITIES_L_U_S 		equ 3
  45+ 0000              LAYER_PRIORITIES_U_S_L 		equ 4
  46+ 0000              LAYER_PRIORITIES_U_L_S 		equ 5
  47+ 0000
  48+ 0000              DMA_WRO_BLOCK_PORTA_A2B_XFR  equ $7D
  49+ 0000              DMA_WRO_BLOCK_PORTA_B2A_XFR  equ $79
  50+ 0000              DMA_WR1_P1FIXED_MEMORY       equ $24
  51+ 0000              DMA_WR1_P1DEC_MEMORY         equ $04
  52+ 0000              DMA_WR1_P1INC_MEMORY         equ $14
  53+ 0000              DMA_WR2_P2FIXED_MEMORY       equ $20
  54+ 0000              DMA_WR2_P2DEC_MEMORY         equ $00
  55+ 0000              DMA_WR2_P2INC_MEMORY         equ $10
  56+ 0000              DMA_WR4_CONT_MODE            equ $AD
  57+ 0000              DMA_RESET                    equ $c3
  58+ 0000              DMA_RESET_PORT_A_TIMING      equ $c7
  59+ 0000              DMA_RESET_PORT_B_TIMING      equ $cb
  60+ 0000              DMA_LOAD                     equ $cf
  61+ 0000              DMA_CONTINUE                 equ $d3
  62+ 0000              DMA_DISABLE_INTERUPTS        equ $af
  63+ 0000              DMA_ENABLE_INTERUPTS         equ $ab
  64+ 0000              DMA_RESET_DISABLE_INTERUPTS  equ $a3
  65+ 0000              DMA_ENABLE_AFTER_RETI        equ $b7
  66+ 0000              DMA_READ_STATUS_BYTE         equ $bf
  67+ 0000              DMA_REINIT_STATUS_BYTE       equ $8b
  68+ 0000              DMA_START_READ_SEQUENCE      equ $a7
  69+ 0000              DMA_FORCE_READY              equ $b3
  70+ 0000              DMA_STOP_AT_END			     equ $82
  71+ 0000              DMA_DISABLE                  equ $83
  72+ 0000              DMA_ENABLE                   equ $87
  73+ 0000              DMA_WRITE_REGISTER_COMMAND   equ $bb
  74+ 0000              DMA_BURST                    equ $cd
  75+ 0000              DMA_CONTINUOUS               equ $ad
  76+ 0000              ZXN_DMA_PORT                 equ $6b
  77+ 0000
  78+ 0000
  79+ 0000              COLOUR_TRANSPARENT			 equ $E3
  80+ 0000
  81+ 0000
  82+ 0000
  83+ 0000
# file closed: ./Layer2Graphics/layer2_defines.asm
  50  0000                  INCLUDE	"./Hardware/memory_bank_defines.asm"
# file opened: ./Hardware/memory_bank_defines.asm
   1+ 0000
   2+ 0000              membanksize			    equ	$1FFF
   3+ 0000
   4+ 0000              StartOfBank     	    equ $0000
   5+ 0000
   6+ 0000              membank0 			    equ $0000
   7+ 0000              dmaCopySrcAddr		    equ	$0000
   8+ 0000              membank1 			    equ $2000
   9+ 0000              membank2 			    equ $4000
  10+ 0000              membank3 			    equ $6000
  11+ 0000              membank4 			    equ $8000
  12+ 0000              membank5 			    equ $a000
  13+ 0000              membank6 			    equ $c000
  14+ 0000              ScreenBank              equ $c000
  15+ 0000              MenuGalChtAddr          equ $c000
  16+ 0000              MenuEquipSAddr          equ $c000
  17+ 0000              MenuInventAddr          equ $c000
  18+ 0000              MenuMarketAddr          equ $c000
  19+ 0000              DispMarketAddr          equ $c000
  20+ 0000              MenuShrChtAddr          equ $c000
  21+ 0000              MenuStatusAddr          equ $c000
  22+ 0000              MenuSystemAddr          equ $c000
  23+ 0000              ViewFrontAddr           equ $c000
  24+ 0000              SunBankAddr             equ $c000
  25+ 0000              PlanetBankAddr          equ $c000
  26+ 0000              UniverseBankAddr	    equ $c000
  27+ 0000              LaunchShipAddr          equ $c000
  28+ 0000              membank7 			    equ $e000
  29+ 0000              L1membankAddr   	    equ $e000
  30+ 0000              L2membankAddr   	    equ $e000
  31+ 0000              ShipModelsAddr	        equ $e000
  32+ 0000              SpritemembankAddr       equ $e000
  33+ 0000              ResetUniverseAddr       equ $e000
  34+ 0000              StockTableAddr	        equ $e000
  35+ 0000              CMDRDATAAddr            equ $e000
  36+ 0000              LAYER2Addr              equ $e000
  37+ 0000              LAYER1Addr              equ $e000
  38+ 0000              SPRITEAddr              equ $e000
  39+ 0000              ConsoleImageAddr        equ $e000
  40+ 0000              GalaxyDataAddr          equ $e000
  41+ 0000
  42+ 0000              DMACpySourceMMU		    equ	MMU_SLOT_0_REGISTER
  43+ 0000              SunMMU 		            equ MMU_SLOT_6_REGISTER
  44+ 0000              PlanetMMU 		        equ MMU_SLOT_6_REGISTER
  45+ 0000              UniverseMMU 		    equ MMU_SLOT_6_REGISTER
  46+ 0000              ScreenBankMMU           equ MMU_SLOT_6_REGISTER
  47+ 0000              MenuEquipSMMU           equ MMU_SLOT_6_REGISTER
  48+ 0000              MenuShrChtMMU           equ MMU_SLOT_6_REGISTER
  49+ 0000              MenuGalChtMMU           equ MMU_SLOT_6_REGISTER
  50+ 0000              MenuInventMMU           equ MMU_SLOT_6_REGISTER
  51+ 0000              MenuSystemMMU           equ MMU_SLOT_6_REGISTER
  52+ 0000              MenuMarketMMU           equ MMU_SLOT_6_REGISTER
  53+ 0000              DispMarketMMU           equ MMU_SLOT_6_REGISTER
  54+ 0000              MenuStatusMMU           equ MMU_SLOT_6_REGISTER
  55+ 0000              LaunchShipMMU           equ MMU_SLOT_6_REGISTER
  56+ 0000              L1memMMU       		    equ MMU_SLOT_7_REGISTER
  57+ 0000              L2memMMU       		    equ MMU_SLOT_7_REGISTER
  58+ 0000              SpritememMMU   		    equ MMU_SLOT_7_REGISTER
  59+ 0000              ShipModelMMU  		    equ MMU_SLOT_7_REGISTER
  60+ 0000              ResetUniverseMMU	    equ MMU_SLOT_7_REGISTER
  61+ 0000              CmdrDataMMU			    equ MMU_SLOT_7_REGISTER
  62+ 0000              StockTableMMU		    equ MMU_SLOT_7_REGISTER
  63+ 0000              ConsoleImageDataMMU	    equ MMU_SLOT_7_REGISTER
  64+ 0000              GalaxyDataMMU	        equ MMU_SLOT_7_REGISTER
  65+ 0000
  66+ 0000              BankResetUniv           equ 49
  67+ 0000              BankMenuShrCht          equ 50
  68+ 0000              BankMenuGalCht          equ 51
  69+ 0000              BankMenuInvent          equ 52
  70+ 0000              BankMenuSystem          equ 53
  71+ 0000              BankMenuMarket          equ 54
  72+ 0000              BankStockTable          equ 55
  73+ 0000              BankCmdrData            equ 56
  74+ 0000              BankLAYER2              equ 57
  75+ 0000              BankLAYER1              equ 58
  76+ 0000              BankShipModels1         equ 59
  77+ 0000              BankSPRITE              equ 60
  78+ 0000              BankConsole             equ 61
  79+ 0000              BankFrontView           equ 62
  80+ 0000              BankMenuStatus          equ 63
  81+ 0000              BankMenuEquipS          equ 64
  82+ 0000              BankLaunchShip          equ 65
  83+ 0000              BankDispMarket          equ 66
  84+ 0000              BankShipModels2         equ 67
  85+ 0000              BankShipModels3         equ 68
  86+ 0000              BankShipModels4         equ 69
  87+ 0000
  88+ 0000              BankUNIVDATA0           equ 70
  89+ 0000              BankUNIVDATA1           equ 71
  90+ 0000              BankUNIVDATA2           equ 72
  91+ 0000              BankUNIVDATA3           equ 73
  92+ 0000              BankUNIVDATA4           equ 74
  93+ 0000              BankUNIVDATA5           equ 75
  94+ 0000              BankUNIVDATA6           equ 76
  95+ 0000              BankUNIVDATA7           equ 77
  96+ 0000              BankUNIVDATA8           equ 78
  97+ 0000              BankUNIVDATA9           equ 79
  98+ 0000              BankUNIVDATA10          equ 80
  99+ 0000              BankUNIVDATA11          equ 81
 100+ 0000              BankUNIVDATA12          equ 82
 101+ 0000              BankSunData             equ 83
 102+ 0000              BankPlanetData          equ 84
 103+ 0000
 104+ 0000              BankGalaxyData0         equ 91
 105+ 0000              BankGalaxyData1         equ 92
 106+ 0000              BankGalaxyData2         equ 93
 107+ 0000              BankGalaxyData3         equ 94
 108+ 0000              BankGalaxyData4         equ 95
 109+ 0000              BankGalaxyData5         equ 96
 110+ 0000              BankGalaxyData6         equ 97
 111+ 0000              BankGalaxyData7         equ 98
 112+ 0000
# file closed: ./Hardware/memory_bank_defines.asm
  51  0000                  INCLUDE "./Hardware/screen_equates.asm"
# file opened: ./Hardware/screen_equates.asm
   1+ 0000              ScreenHeight 		equ 192
   2+ 0000              ScreenLastRow       equ ScreenHeight -1
   3+ 0000              ScreenWidth  		equ 256
   4+ 0000              ScreenLastCol       equ ScreenWidth -1
   5+ 0000              ScreenHeightHalf	equ 96
   6+ 0000              ScreenWidthHalf  	equ 128
   7+ 0000              ScreenCenterY		equ 96
   8+ 0000              ScreenCenterX       equ 128
   9+ 0000              ViewHeight          equ 128
  10+ 0000              ViewHeightPlus1     equ 128+1
  11+ 0000              ViewLastRow       	equ ViewHeight -1
  12+ 0000              ViewWidth  			equ 256
  13+ 0000              ViewLastCol         equ ViewWidth -1
  14+ 0000              ViewHeightHalf      equ 63
  15+ 0000              ViewWidthHalf       equ 127
  16+ 0000              ViewCenterY         equ 64
  17+ 0000              ViewCenterX         equ 128
  18+ 0000              ShipColour			equ $FF		; place holder for debugging TODO
  19+ 0000              ScreenL1Bottom      equ $5000
  20+ 0000              ScreenL1BottomLen   equ 32 * 8 * 8
  21+ 0000              ScreenL1AttrBtm     equ $5A00
  22+ 0000              ScreenL1AttrBtmLen  equ 32 * 8
  23+ 0000
# file closed: ./Hardware/screen_equates.asm
  52  0000                  INCLUDE "./Data/ShipModelEquates.asm"
# file opened: ./Data/ShipModelEquates.asm
   1+ 0000              ScoopDebrisOffset	    equ	0                               ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
   2+ 0000              MissileLockLoOffset	    equ 1
   3+ 0000              MissileLockHiOffset	    equ 2
   4+ 0000              EdgeAddyOffset		    equ 3
   5+ 0000              LineX4Offset		    equ 5
   6+ 0000              GunVertexOffset		    equ 6
   7+ 0000              ExplosionCtOffset	    equ 7
   8+ 0000              VertexCtX6Offset	    equ 8
   9+ 0000              EdgeCountOffset		    equ 9
  10+ 0000              BountyLoOffset		    equ 10
  11+ 0000              BountyHiOffset		    equ 11
  12+ 0000              FaceCtX4Offset		    equ 12
  13+ 0000              DotOffset			    equ 13
  14+ 0000              EnergyOffset		    equ 14
  15+ 0000              SpeedOffset			    equ 15
  16+ 0000              FaceAddyOffset		    equ 16
  17+ 0000              QOffset				    equ 18
  18+ 0000              LaserOffset			    equ 19
  19+ 0000              VerticiesAddyOffset     equ 20
  20+ 0000              ShipTypeOffset          equ 22
  21+ 0000              ShipNewBitsOffset       equ 23
  22+ 0000              ShipDataLength          equ ShipNewBitsOffset+1
  23+ 0000
  24+ 0000              CobraTablePointer       equ 43
  25+ 0000              ;29 faulty
  26+ 0000              BankThreshold           equ 16
  27+ 0000
  28+ 0000              ShipTableALast          equ 23
  29+ 0000              ShipTableBLast          equ 39
  30+ 0000              ShipTableCLast          equ 55
  31+ 0000
# file closed: ./Data/ShipModelEquates.asm
  53  0000                  INCLUDE "./Macros/MMUMacros.asm"
# file opened: ./Macros/MMUMacros.asm
   1+ 0000              MMUSelectSpriteBank: MACRO
   2+ 0000 ~            					 nextreg SpritememMMU,	    BankSPRITE
   3+ 0000              					 ENDM
   4+ 0000
   5+ 0000              MMUSelectConsoleBank: MACRO
   6+ 0000 ~            					 nextreg ConsoleImageDataMMU,  BankConsole
   7+ 0000              					 ENDM
   8+ 0000
   9+ 0000              MMUSelectLayer1: 	 MACRO
  10+ 0000 ~            					 nextreg L1memMMU,		    BankLAYER1
  11+ 0000              					 ENDM
  12+ 0000
  13+ 0000              MMUSelectLayer2: 	 MACRO
  14+ 0000 ~            					 nextreg L2memMMU,		    BankLAYER2
  15+ 0000              					 ENDM
  16+ 0000
  17+ 0000              MMUSelectResetUniv:  MACRO
  18+ 0000 ~                                 nextreg  ResetUniverseMMU, BankResetUniv
  19+ 0000                                   ENDM
  20+ 0000
  21+ 0000              MMUSelectShipBank1:  MACRO
  22+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels1
  23+ 0000              					 ENDM
  24+ 0000              MMUSelectShipBank2:  MACRO
  25+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels2
  26+ 0000              					 ENDM
  27+ 0000              MMUSelectShipBank3:  MACRO
  28+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels3
  29+ 0000              					 ENDM
  30+ 0000              MMUSelectShipBank4:  MACRO
  31+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels4
  32+ 0000              					 ENDM
  33+ 0000
  34+ 0000              MMUSelectShipBankA   MACRO
  35+ 0000 ~            					 nextreg ShipModelMMU,	    a
  36+ 0000              					 ENDM
  37+ 0000
  38+ 0000              MMUSelectShipBankN:  MACRO value
  39+ 0000 ~            					 nextreg ShipModelMMU,	    value
  40+ 0000              					 ENDM
  41+ 0000
  42+ 0000              MMUSelectCmdrData:	 MACRO
  43+ 0000 ~                                 nextreg CmdrDataMMU,       BankCmdrData
  44+ 0000              					 ENDM
  45+ 0000
  46+ 0000              MMUSelectStockTable: MACRO
  47+ 0000 ~                                 nextreg StockTableMMU,     BankStockTable
  48+ 0000              					 ENDM
  49+ 0000
  50+ 0000              MMUSelectCpySrcA:    MACRO
  51+ 0000 ~                                 nextreg DMACpySourceMMU,	a
  52+ 0000              					 ENDM
  53+ 0000
  54+ 0000              MMUSelectCpySrcN:    MACRO value
  55+ 0000 ~                                 nextreg DMACpySourceMMU,	value
  56+ 0000              					 ENDM
  57+ 0000
  58+ 0000              MMUSelectSun:        MACRO
  59+ 0000 ~                                 nextreg SunMMU,            BankSunData
  60+ 0000                                   ENDM
  61+ 0000
  62+ 0000              MMUSelectPlanet:     MACRO
  63+ 0000 ~                                 nextreg PlanetMMU,         PlanetBankAddr
  64+ 0000                                   ENDM
  65+ 0000
  66+ 0000              MMUSelectUniverseA:  MACRO
  67+ 0000 ~                                 add    a,BankUNIVDATA0
  68+ 0000 ~                                 nextreg UniverseMMU,       a
  69+ 0000                                   ENDM
  70+ 0000
  71+ 0000              MMUSelectUniverseN:  MACRO value
  72+ 0000 ~                                 nextreg UniverseMMU,       BankUNIVDATA0+value
  73+ 0000                                   ENDM
  74+ 0000
  75+ 0000              MMUSelectGalaxyA:    MACRO
  76+ 0000 ~                                 nextreg GalaxyDataMMU,       a
  77+ 0000                                   ENDM
  78+ 0000
  79+ 0000              MMUSelectGalaxyN:    MACRO value
  80+ 0000 ~                                 nextreg GalaxyDataMMU,     BankGalaxyData0+value
  81+ 0000                                   ENDM
  82+ 0000              MMUSelectGalaxyACopy:MACRO
  83+ 0000 ~                                 nextreg UniverseMMU,       a
  84+ 0000                                   ENDM
  85+ 0000
  86+ 0000              MMUSelectUniverseAbs:MACRO value
  87+ 0000 ~                                 nextreg UniverseMMU,       value
  88+ 0000                                   ENDM
  89+ 0000
  90+ 0000              MMUSelectMenuGalCht: MACRO
  91+ 0000 ~                                 nextreg MenuGalChtMMU,		BankMenuGalCht
  92+ 0000              					 ENDM
  93+ 0000
  94+ 0000              MMUSelectMenuShrCht: MACRO
  95+ 0000 ~            					 nextreg MenuShrChtMMU,		BankMenuShrCht
  96+ 0000              					 ENDM
  97+ 0000
  98+ 0000              MMUSelectMenuInvent: MACRO
  99+ 0000 ~                                 nextreg MenuInventMMU,		BankMenuInvent
 100+ 0000              					 ENDM
 101+ 0000
 102+ 0000              MMUSelectMenuSystem: MACRO
 103+ 0000 ~                                 nextreg MenuSystemMMU,		BankMenuSystem
 104+ 0000              					 ENDM
 105+ 0000
 106+ 0000              MMUSelectMenuMarket: MACRO
 107+ 0000 ~                                 nextreg MenuMarketMMU,		BankMenuMarket
 108+ 0000              					 ENDM
 109+ 0000
 110+ 0000              MMUSelectMenuStatus: MACRO
 111+ 0000 ~                                 nextreg MenuStatusMMU,		BankMenuStatus
 112+ 0000              					 ENDM
 113+ 0000
 114+ 0000              MMUSelectViewFront:  MACRO
 115+ 0000 ~                                 nextreg ScreenBankMMU,		BankFrontView
 116+ 0000              					 ENDM
 117+ 0000
 118+ 0000              MMUSelectScreenA:    MACRO
 119+ 0000 ~                                 nextreg ScreenBankMMU,		a
 120+ 0000              					 ENDM
 121+ 0000
# file closed: ./Macros/MMUMacros.asm
  54  0000                  INCLUDE "./Macros/ShiftMacros.asm"
# file opened: ./Macros/ShiftMacros.asm
   1+ 0000              ShiftIYRight1: MACRO
   2+ 0000 ~            			   ld 	a,iyh
   3+ 0000 ~            			   srl 	a
   4+ 0000 ~            			   ld	iyh,a
   5+ 0000 ~            			   ld 	a,iyl
   6+ 0000 ~            			   rra
   7+ 0000 ~            			   ld	iyl,a
   8+ 0000              			   ENDM
   9+ 0000
  10+ 0000              ShiftHLRight1: MACRO
  11+ 0000 ~            			   srl h
  12+ 0000 ~            			   rr  l
  13+ 0000              			   ENDM
  14+ 0000
  15+ 0000              ShiftDERight1: MACRO
  16+ 0000 ~            			   srl d
  17+ 0000 ~            			   rr  e
  18+ 0000              			   ENDM
  19+ 0000
  20+ 0000              ShiftBCRight1: MACRO
  21+ 0000 ~            			   srl b
  22+ 0000 ~            			   rr  c
  23+ 0000              			   ENDM
  24+ 0000
  25+ 0000
  26+ 0000
  27+ 0000              ShiftHLDiv8:   MACRO
  28+ 0000 ~            			   srl h
  29+ 0000 ~            			   rr  l
  30+ 0000 ~            			   srl h
  31+ 0000 ~            			   rr  l
  32+ 0000 ~            			   srl h
  33+ 0000 ~            			   rr  l
  34+ 0000              			   ENDM
  35+ 0000
  36+ 0000              ShiftHLLeft1:  MACRO
  37+ 0000 ~            			   sla l
  38+ 0000 ~            			   rl  h
  39+ 0000              			   ENDM
  40+ 0000
  41+ 0000              ShiftDELeft1:  MACRO
  42+ 0000 ~            			   sla e
  43+ 0000 ~            			   rl  d
  44+ 0000              			   ENDM
  45+ 0000
  46+ 0000
  47+ 0000              RollDELeft1:   MACRO
  48+ 0000 ~                           rl  e
  49+ 0000 ~                           rl  d
  50+ 0000                             ENDM
  51+ 0000
  52+ 0000              ShiftBCLeft1:  MACRO
  53+ 0000 ~            			   sla c
  54+ 0000 ~            			   rl  b
  55+ 0000              			   ENDM
  56+ 0000
  57+ 0000              ShiftMem16Right1:   MACRO memaddr
  58+ 0000 ~                                ld    hl,(memaddr)
  59+ 0000 ~                                srl   h
  60+ 0000 ~                                rr    l
  61+ 0000 ~                                ld    (memaddr),hl
  62+ 0000                                  ENDM
  63+ 0000
  64+ 0000              ShiftMem8Right1:    MACRO memaddr
  65+ 0000 ~                                ld      a,(memaddr)
  66+ 0000 ~                                srl     a
  67+ 0000 ~                                ld      (memaddr),a
  68+ 0000                                  ENDM
  69+ 0000
  70+ 0000
  71+ 0000              ShiftMem8Left1A:    MACRO memaddr
  72+ 0000 ~                                ld      a,(memaddr)
  73+ 0000 ~                                sla     a
  74+ 0000 ~                                ld      (memaddr),a
  75+ 0000                                  ENDM
  76+ 0000
# file closed: ./Macros/ShiftMacros.asm
  55  0000                  INCLUDE "./Macros/MathsMacros.asm"
# file opened: ./Macros/MathsMacros.asm
   1+ 0000
   2+ 0000
   3+ 0000              ApplyMyRollToVector:    MACRO angle, vectorX, vectorY
   4+ 0000 ~                                    ldCopyByte angle,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
   5+ 0000 ~                                    ldCopy2Byte vectorY, varR           ; RS =  nosev_y
   6+ 0000 ~                                    ldCopyByte  vectorX, varP           ; set P to nosevX lo (may be redundant)
   7+ 0000 ~                                    ld a,(vectorX+1)                    ; Set A = -nosev_x_hi
   8+ 0000 ~                                    xor $80                             ;
   9+ 0000 ~                                    call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  10+ 0000 ~                                    ld  (vectorY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  11+ 0000 ~                                    ldCopy2Byte vectorX, varR           ; Set (S R) = nosev_x
  12+ 0000 ~                                    ld  a,(vectorY+1)                   ;  Set A = nosev_y_hi
  13+ 0000 ~                                    call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  14+ 0000 ~                                    ld  (vectorX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  15+ 0000                                      ENDM
  16+ 0000
# file closed: ./Macros/MathsMacros.asm
  56  0000                  INCLUDE "./Macros/CopyByteMacros.asm"
# file opened: ./Macros/CopyByteMacros.asm
   1+ 0000              CopyByteAtHLixToA:		MACRO memloc
   2+ 0000 ~            						ex          de,hl                               ; save hl
   3+ 0000 ~            						ld          hl,memloc
   4+ 0000 ~            						add         hl,a
   5+ 0000 ~            						ld          a,(hl)                              ; get XX2[x]
   6+ 0000 ~            						ex          de,hl                               ; get hl back as we need it in loop
   7+ 0000              						ENDM
   8+ 0000
   9+ 0000              ; Increments IYL
  10+ 0000              ; Increments IHL
  11+ 0000              ; Gets value at hl and loads into Parameter 1 address
  12+ 0000
  13+ 0000              CopyByteAtNextHLiyl: 	MACRO memloc
  14+ 0000 ~            						inc         iyl                                 ;
  15+ 0000 ~            						inc         hl                                  ; vertex byte#1
  16+ 0000 ~            						ld          a,(hl)                              ;
  17+ 0000 ~            						ld          (memloc),a                     ; XX15+2 = (V),Y
  18+ 0000              						ENDM
  19+ 0000
  20+ 0000              ;------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              CopyByteAtNextHL:   MACRO targetaddr
  22+ 0000 ~                                inc         hl                                  ; vertex byte#1
  23+ 0000 ~                                ld          a,(hl)                              ;
  24+ 0000 ~                                ld          (targetaddr),a                     ; SunXX15+2 = (V),Y
  25+ 0000                                  ENDM
# file closed: ./Macros/CopyByteMacros.asm
  57  0000                  INCLUDE "./Macros/GeneralMacros.asm"
# file opened: ./Macros/GeneralMacros.asm
   1+ 0000              JumpIfPositive:	        MACRO target
   2+ 0000 ~                                    jp		p, target
   3+ 0000                                      ENDM
   4+ 0000
   5+ 0000              JumpIfNegative:	        MACRO target
   6+ 0000 ~                                    jp		m, target
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000
  10+ 0000              JumpIfUnderflow:	    MACRO target
  11+ 0000 ~                                    jp		po, target
  12+ 0000                                      ENDM
  13+ 0000
  14+ 0000              JumpOnMemBitSet:        MACRO mem, bitnbr, target
  15+ 0000 ~                                    ld      a,(mem)
  16+ 0000 ~                                    bit 	bitnbr,a
  17+ 0000 ~                                    jp      nz,target
  18+ 0000                                      ENDM
  19+ 0000
  20+ 0000              JumpOnMemBitClear:      MACRO mem, bitnbr, target
  21+ 0000 ~                                    ld      a,(mem)
  22+ 0000 ~                                    bit 	bitnbr,a
  23+ 0000 ~                                    jp      z,target
  24+ 0000                                      ENDM
  25+ 0000
  26+ 0000
  27+ 0000              JumpOnBitSet:           MACRO  reg, bitnbr, target
  28+ 0000 ~                                    bit 	bitnbr,reg
  29+ 0000 ~                                    jp      nz,target
  30+ 0000                                      ENDM
  31+ 0000
  32+ 0000              JumpOnBitClear:         MACRO  reg, bitnbr, target
  33+ 0000 ~                                    bit 	bitnbr,reg
  34+ 0000 ~                                    jp      z,target
  35+ 0000                                      ENDM
  36+ 0000
  37+ 0000              ReturnOnBitSet:         MACRO  reg, bitnbr,
  38+ 0000 ~                                    bit 	bitnbr,reg
  39+ 0000 ~                                    ret     nz
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              ReturnOnMemBitSet:      MACRO mem, bitnbr
  43+ 0000 ~                                    ld   a,(mem)
  44+ 0000 ~                                    bit 	bitnbr,a
  45+ 0000 ~                                    ret     nz
  46+ 0000                                      ENDM
  47+ 0000
  48+ 0000              ReturnOnBitClear:       MACRO reg, bitnbr
  49+ 0000 ~                                    bit 	bitnbr,reg
  50+ 0000 ~                                    ret		z
  51+ 0000                                      ENDM
  52+ 0000
  53+ 0000              ReturnOnMemBitClear:    MACRO mem, bitnbr
  54+ 0000 ~                                    ld     a,(mem)
  55+ 0000 ~                                    bit 	bitnbr,a
  56+ 0000 ~                                    ret		z
  57+ 0000                                      ENDM
  58+ 0000
  59+ 0000              JumpIfAGTEusng:         MACRO
  60+ 0000 ~                                    jp		nc,target
  61+ 0000                                      ENDM
  62+ 0000
  63+ 0000              JumpIfAGTENusng:        MACRO reg,target
  64+ 0000 ~                                    cp     reg
  65+ 0000 ~                                    jp		nc,target
  66+ 0000                                      ENDM
  67+ 0000
  68+ 0000              JumpIfAGTEMemusng:      MACRO mem,target
  69+ 0000 ~                                    ld      hl,mem
  70+ 0000 ~                                    cp      (hl)
  71+ 0000 ~                                    jp		nc,target
  72+ 0000                                      ENDM
  73+ 0000
  74+ 0000              JumpIfALTMemusng:       MACRO mem,target
  75+ 0000 ~                                    ld      hl,mem
  76+ 0000 ~                                    cp      (hl)
  77+ 0000 ~                                    jp		c,target
  78+ 0000                                      ENDM
  79+ 0000
  80+ 0000              CallIfAGTENusng:        MACRO   reg,target
  81+ 0000 ~                                    cp      reg
  82+ 0000 ~                                    call	nc,target
  83+ 0000                                      ENDM
  84+ 0000
  85+ 0000              CallIfALTNusng:         MACRO   reg,target
  86+ 0000 ~                                    cp      reg
  87+ 0000 ~                                    call	c,target
  88+ 0000                                      ENDM
  89+ 0000
  90+ 0000              JumpIfMemGTENusng:      MACRO mem, value, target
  91+ 0000 ~                                    ld     a,(mem)
  92+ 0000 ~                                    cp     value
  93+ 0000 ~                                    jp	  nc,target
  94+ 0000                                      ENDM
  95+ 0000
  96+ 0000              JumpIfMemGTEMemusng:    MACRO mem, address, target
  97+ 0000 ~                                    ld   a,(mem)
  98+ 0000 ~                                    ld   hl,address
  99+ 0000 ~                                    cp   (hl)
 100+ 0000 ~                                    jp	  nc,target
 101+ 0000                                      ENDM
 102+ 0000
 103+ 0000              JumpIfMemEqMemusng:     MACRO mem, address, target
 104+ 0000 ~                                    ld   a,(mem)
 105+ 0000 ~                                    ld   hl,address
 106+ 0000 ~                                    cp   (hl)
 107+ 0000 ~                                    jp	  z,target
 108+ 0000                                      ENDM
 109+ 0000
 110+ 0000              CallIfMemEqMemusng:     MACRO mem, address, target
 111+ 0000 ~                                    ld   a,(mem)
 112+ 0000 ~                                    ld   hl,address
 113+ 0000 ~                                    cp   (hl)
 114+ 0000 ~                                    call    z,target
 115+ 0000                                      ENDM
 116+ 0000
 117+ 0000              JumpIfALTusng:          MACRO target
 118+ 0000 ~                                    jp		c,target
 119+ 0000                                      ENDM
 120+ 0000
 121+ 0000              JumpIfALTNusng:         MACRO value, target
 122+ 0000 ~                                    cp      value
 123+ 0000 ~                                    jp		c, target
 124+ 0000                                      ENDM
 125+ 0000
 126+ 0000              JumpIfMemLTNusng:       MACRO mem, value, target
 127+ 0000 ~                                    ld      a,(mem)
 128+ 0000 ~                                    cp      value
 129+ 0000 ~                                    jp	  c,target
 130+ 0000                                      ENDM
 131+ 0000
 132+ 0000              JumpIfMemLTMemusng:     MACRO mem, value, target
 133+ 0000 ~                                    ld    a,(mem)
 134+ 0000 ~                                    ld    hl,value
 135+ 0000 ~                                    cp    (hl)
 136+ 0000 ~                                    jp	  c,target
 137+ 0000                                      ENDM
 138+ 0000
 139+ 0000              JumpIfMemEqNusng:       MACRO mem,value,target
 140+ 0000 ~                                    ld  a,(mem)
 141+ 0000 ~                                    cp  value
 142+ 0000 ~                                    jp  z,target
 143+ 0000                                      ENDM
 144+ 0000
 145+ 0000              JumpIfMemNeNusng:       MACRO mem,value,target
 146+ 0000 ~                                    ld  a,(mem)
 147+ 0000 ~                                    cp  value
 148+ 0000 ~                                    jp  nz,target
 149+ 0000                                      ENDM
 150+ 0000
 151+ 0000              JumpIfMemZero:          MACRO mem,target
 152+ 0000 ~                                    ld  a,(mem)
 153+ 0000 ~                                    and a
 154+ 0000 ~                                    jr  z,target
 155+ 0000                                      ENDM
 156+ 0000
 157+ 0000              JumpIfALTMemHLusng:     MACRO target
 158+ 0000 ~                                    cp    (hl)
 159+ 0000 ~                                    jp	  c,target
 160+ 0000                                      ENDM
 161+ 0000
 162+ 0000              JumpIfANENusng: MACRO value, target
 163+ 0000 ~                            cp     value
 164+ 0000 ~                            jp      nz,target
 165+ 0000                              ENDM
 166+ 0000
 167+ 0000              JumpIfANEMemusng: MACRO  value, target
 168+ 0000 ~                              ld    hl,value
 169+ 0000 ~                              cp    (hl)
 170+ 0000 ~                              jp      nz,target
 171+ 0000                                ENDM
 172+ 0000
 173+ 0000              JumpIfAEqNusng: MACRO value, target
 174+ 0000 ~                            cp     value
 175+ 0000 ~                            jp      z,target
 176+ 0000                              ENDM
 177+ 0000
 178+ 0000              IfAIsZeroGoto:	MACRO target
 179+ 0000 ~            				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 180+ 0000 ~            				jp	z, target
 181+ 0000              				ENDM
 182+ 0000
 183+ 0000              IfANotZeroGoto:	MACRO target
 184+ 0000 ~            				cp	0
 185+ 0000 ~            				jp	nz,target
 186+ 0000              				ENDM
 187+ 0000
 188+ 0000              IfResultZeroGoto:	MACRO target
 189+ 0000 ~            					jp	z,target
 190+ 0000              					ENDM
 191+ 0000
 192+ 0000              IfResultNotZeroGoto:MACRO target
 193+ 0000 ~            					jp	nz,target
 194+ 0000              					ENDM
 195+ 0000
 196+ 0000              ReturnIfAIsZero:    MACRO
 197+ 0000 ~                                and a
 198+ 0000 ~                                ret    z
 199+ 0000                                  ENDM
 200+ 0000
 201+ 0000              ReturnIfMemisZero:  MACRO mem
 202+ 0000 ~                                ld   a,(mem)
 203+ 0000 ~                                and a
 204+ 0000 ~                                ret    z
 205+ 0000                                  ENDM
 206+ 0000
 207+ 0000              ReturnIfMemEquN:    MACRO mem, value
 208+ 0000 ~                                ld   a,(mem)
 209+ 0000 ~                                cp     value
 210+ 0000 ~                                ret    z
 211+ 0000                                  ENDM
 212+ 0000
 213+ 0000              ReturnIfANotZero:   MACRO
 214+ 0000 ~                                cp     0
 215+ 0000 ~                                ret    nz
 216+ 0000                                  ENDM
 217+ 0000
 218+ 0000              ReturnIfMemNotZero: MACRO mem
 219+ 0000 ~                                ld     a,(mem)
 220+ 0000 ~                                cp     0
 221+ 0000 ~                                ret    nz
 222+ 0000                                  ENDM
 223+ 0000
 224+ 0000              ReturnIfAGTEusng:   MACRO value
 225+ 0000 ~                                cp    value
 226+ 0000 ~                                ret	 nc
 227+ 0000                                  ENDM
 228+ 0000
 229+ 0000              ReturnIfALTNusng:   MACRO value
 230+ 0000 ~                                cp    value
 231+ 0000 ~                                ret	 c
 232+ 0000                                  ENDM
 233+ 0000
 234+ 0000              ReturnIfAGTENusng:  MACRO value
 235+ 0000 ~                                cp    value
 236+ 0000 ~                                ret	 nc
 237+ 0000                                  ENDM
 238+ 0000
 239+ 0000              ReturnIfANENusng:   MACRO value
 240+ 0000 ~                                cp      value
 241+ 0000 ~                                ret     nz
 242+ 0000                                  ENDM
 243+ 0000
 244+ 0000              ReturnIfAEqNusng:   MACRO value
 245+ 0000 ~                                cp      value
 246+ 0000 ~                                ret     z
 247+ 0000                                  ENDM
 248+ 0000
 249+ 0000              SetCarryFlag:       MACRO
 250+ 0000 ~                                scf
 251+ 0000                                  ENDM
 252+ 0000
 253+ 0000              ClearCarryFlag:	    MACRO
 254+ 0000 ~                                or a
 255+ 0000                                  ENDM
 256+ 0000
 257+ 0000              FlipCarryFalg:      MACRO
 258+ 0000 ~                                ccf
 259+ 0000                                  ENDM
 260+ 0000
 261+ 0000              pushbcde:		    MACRO
 262+ 0000 ~                                push	bc
 263+ 0000 ~                                push	de
 264+ 0000                                  ENDM
 265+ 0000
 266+ 0000              popdebc:		    MACRO
 267+ 0000 ~                                pop		de
 268+ 0000 ~                                pop		bc
 269+ 0000                                  ENDM
 270+ 0000
 271+ 0000              pushhlde:		    MACRO
 272+ 0000 ~                                push	hl
 273+ 0000 ~                                push	de
 274+ 0000                                  ENDM
 275+ 0000
 276+ 0000              popdehl:		    MACRO
 277+ 0000 ~                                pop		de
 278+ 0000 ~                                pop		hl
 279+ 0000                                  ENDM
 280+ 0000
 281+ 0000              pushbcdeaf:		    MACRO
 282+ 0000 ~                                push	bc
 283+ 0000 ~                                push	de
 284+ 0000 ~                                push	af
 285+ 0000                                  ENDM
 286+ 0000
 287+ 0000              popafdebc:		    MACRO
 288+ 0000 ~                                pop		af
 289+ 0000 ~                                pop		de
 290+ 0000 ~                                pop		bc
 291+ 0000                                  ENDM
 292+ 0000
 293+ 0000              NegIY:			    MACRO
 294+ 0000 ~                                xor a
 295+ 0000 ~                                sub iyl
 296+ 0000 ~                                ld iyl,a
 297+ 0000 ~                                sbc a,a
 298+ 0000 ~                                sub iyh
 299+ 0000 ~                                ld iyh,a
 300+ 0000                                  ENDM
 301+ 0000
 302+ 0000              NegHL:			    MACRO
 303+ 0000 ~                                xor a
 304+ 0000 ~                                sub l
 305+ 0000 ~                                ld l,a
 306+ 0000 ~                                sbc a,a
 307+ 0000 ~                                sub h
 308+ 0000 ~                                ld h,a
 309+ 0000                                  ENDM
 310+ 0000
 311+ 0000              NegDE:			    MACRO
 312+ 0000 ~                                xor a
 313+ 0000 ~                                sub e
 314+ 0000 ~                                ld e,a
 315+ 0000 ~                                sbc a,a
 316+ 0000 ~                                sub d
 317+ 0000 ~                                ld d,a
 318+ 0000                                  ENDM
 319+ 0000
 320+ 0000              NegBC:			    MACRO
 321+ 0000 ~                                xor a
 322+ 0000 ~                                sub c
 323+ 0000 ~                                ld c,a
 324+ 0000 ~                                sbc a,a
 325+ 0000 ~                                sub  b
 326+ 0000 ~                                ld b,a
 327+ 0000                                  ENDM
 328+ 0000
 329+ 0000              NegH                MACRO
 330+ 0000 ~                                ld      a,h
 331+ 0000 ~                                neg
 332+ 0000 ~                                ld      h,a
 333+ 0000                                  ENDM
 334+ 0000
 335+ 0000              NegD                MACRO
 336+ 0000 ~                                ld      a,d
 337+ 0000 ~                                neg
 338+ 0000 ~                                ld      d,a
 339+ 0000                                  ENDM
 340+ 0000
 341+ 0000              NegB                MACRO
 342+ 0000 ~                                ld      a,b
 343+ 0000 ~                                neg
 344+ 0000 ~                                ld      b,a
 345+ 0000                                  ENDM
 346+ 0000
 347+ 0000              FourLDIInstrunctions:   MACRO
 348+ 0000 ~                                    ldi
 349+ 0000 ~                                    ldi
 350+ 0000 ~                                    ldi
 351+ 0000 ~                                    ldi
 352+ 0000                                      ENDM
 353+ 0000
 354+ 0000              FiveLDIInstrunctions:   MACRO
 355+ 0000 ~                                    ldi
 356+ 0000 ~                                    ldi
 357+ 0000 ~                                    ldi
 358+ 0000 ~                                    ldi
 359+ 0000 ~                                    ldi
 360+ 0000                                      ENDM
 361+ 0000
 362+ 0000              SixLDIInstrunctions:    MACRO
 363+ 0000 ~                                    ldi
 364+ 0000 ~                                    ldi
 365+ 0000 ~                                    ldi
 366+ 0000 ~                                    ldi
 367+ 0000 ~                                    ldi
 368+ 0000 ~                                    ldi
 369+ 0000                                      ENDM
 370+ 0000
 371+ 0000              EightLDIInstrunctions:  MACRO
 372+ 0000 ~            		                ldi
 373+ 0000 ~            		                ldi
 374+ 0000 ~            		                ldi
 375+ 0000 ~            		                ldi
 376+ 0000 ~            		                ldi
 377+ 0000 ~            		                ldi
 378+ 0000 ~            		                ldi
 379+ 0000 ~            		                ldi
 380+ 0000                                      ENDM
 381+ 0000
 382+ 0000              NineLDIInstrunctions:  MACRO
 383+ 0000 ~            		                ldi
 384+ 0000 ~            		                ldi
 385+ 0000 ~            		                ldi
 386+ 0000 ~            		                ldi
 387+ 0000 ~            		                ldi
 388+ 0000 ~            		                ldi
 389+ 0000 ~            		                ldi
 390+ 0000 ~            		                ldi
 391+ 0000 ~            		                ldi
 392+ 0000                                      ENDM
 393+ 0000
 394+ 0000              FlipMemSign:        MACRO mem
 395+ 0000 ~                                ld  a,(mem)
 396+ 0000 ~                                xor SignOnly8Bit
 397+ 0000 ~                                ld  (mem),a
 398+ 0000                                  ENDM
 399+ 0000
# file closed: ./Macros/GeneralMacros.asm
  58  0000                  INCLUDE "./Macros/ldCopyMacros.asm"
# file opened: ./Macros/ldCopyMacros.asm
   1+ 0000              ZeroA:		   MACRO
   2+ 0000 ~            			   xor a
   3+ 0000              			   ENDM
   4+ 0000
   5+ 0000              ldCopyByte:    MACRO memfrom, memto
   6+ 0000 ~                           ld       a,(memfrom)
   7+ 0000 ~                           ld       (memto),a
   8+ 0000              			   ENDM
   9+ 0000
  10+ 0000
  11+ 0000              ldCopyByteABS: MACRO
  12+ 0000 ~                           ld       a,(memfrom)
  13+ 0000 ~            			   and		$7F
  14+ 0000 ~                           ld       (memto),a
  15+ 0000              			   ENDM
  16+ 0000
  17+ 0000              ldCopy2Byte    MACRO  memfrom, memto
  18+ 0000 ~                           ld       hl,(memfrom)
  19+ 0000 ~                           ld       (memto),hl
  20+ 0000                             ENDM
  21+ 0000
  22+ 0000              ldWriteConst   MACRO  memfrom, memto
  23+ 0000 ~                           ld       a,memfrom
  24+ 0000 ~                           ld       (memto),a
  25+ 0000                             ENDM
  26+ 0000
  27+ 0000              ldWriteZero    MACRO  memto
  28+ 0000 ~                           xor      a
  29+ 0000 ~                           ld       (memto),a
  30+ 0000                             ENDM
  31+ 0000
  32+ 0000              ldIXLaFromN:	MACRO memfrom
  33+ 0000 ~                            ld		a,(memfrom)
  34+ 0000 ~                            ld		ixl,a
  35+ 0000                              ENDM
  36+ 0000
  37+ 0000              ldIXHaFromN:	MACRO memfrom
  38+ 0000 ~                            ld		a,(memfrom)
  39+ 0000 ~                            ld		ixh,a
  40+ 0000                              ENDM
  41+ 0000
  42+ 0000              ldIYLaFromN:	MACRO memfrom
  43+ 0000 ~                            ld		a,(memfrom)
  44+ 0000 ~                            ld		iyl,a
  45+ 0000                              ENDM
  46+ 0000
  47+ 0000              ldIYHaFromN:	MACRO memfrom
  48+ 0000 ~                            ld		a,(memfrom)
  49+ 0000 ~                            ld		iyh,a
  50+ 0000                              ENDM
  51+ 0000
  52+ 0000              ldhlde:			MACRO
  53+ 0000 ~                            ld		h,d
  54+ 0000 ~                            ld		l,e
  55+ 0000                              ENDM
  56+ 0000
  57+ 0000              ldhlbc:			MACRO
  58+ 0000 ~                            ld		h,b
  59+ 0000 ~                            ld		l,c
  60+ 0000                              ENDM
  61+ 0000
  62+ 0000              ldbcde:			MACRO
  63+ 0000 ~                            ld		b,d
  64+ 0000 ~                            ld		c,e
  65+ 0000                              ENDM
  66+ 0000
  67+ 0000              lddebc:			MACRO
  68+ 0000 ~                            ld		d,b
  69+ 0000 ~                            ld		e,c
  70+ 0000                              ENDM
  71+ 0000
  72+ 0000              ldbchl:			MACRO
  73+ 0000 ~                            ld		b,h
  74+ 0000 ~                            ld		c,l
  75+ 0000                              ENDM
  76+ 0000
  77+ 0000              lddeiy:			MACRO
  78+ 0000 ~                            ld		d,iyh
  79+ 0000 ~                            ld		e,iyl
  80+ 0000                              ENDM
  81+ 0000
  82+ 0000              ldiyde:			MACRO
  83+ 0000 ~                            ld		iyh,d
  84+ 0000 ~                            ld		iyl,e
  85+ 0000                              ENDM
  86+ 0000
# file closed: ./Macros/ldCopyMacros.asm
  59  0000                  INCLUDE "./Macros/ldIndexedMacros.asm"
# file opened: ./Macros/ldIndexedMacros.asm
   1+ 0000              ldAToHLixl:			MACRO value
   2+ 0000 ~            					ld          hl,value
   3+ 0000 ~            					ex          af,af'
   4+ 0000 ~            					ld          a,ixl
   5+ 0000 ~            					add         hl,a
   6+ 0000 ~            					ex          af,af'
   7+ 0000 ~            					ld          (hl),a
   8+ 0000              					ENDM
   9+ 0000
  10+ 0000              ldAToHLiyl:			MACRO value
  11+ 0000 ~            					ld          hl,value
  12+ 0000 ~            					ex          af,af'
  13+ 0000 ~            					ld          a,iyl
  14+ 0000 ~            					add         hl,a
  15+ 0000 ~            					ex          af,af'
  16+ 0000 ~            					ld          (hl),a
  17+ 0000              					ENDM
  18+ 0000
  19+ 0000
  20+ 0000              ldHLixlToA:         MACRO value
  21+ 0000 ~                                ld          hl,value
  22+ 0000 ~                                ex          af,af'
  23+ 0000 ~                                ld          a,ixl
  24+ 0000 ~                                add         hl,a
  25+ 0000 ~                                ld          a,(hl)
  26+ 0000                                  ENDM
  27+ 0000
  28+ 0000              ldHLiylToA:         MACRO value
  29+ 0000 ~                                ld          hl,value
  30+ 0000 ~                                ex          af,af'
  31+ 0000 ~                                ld          a,iyl
  32+ 0000 ~                                add         hl,a
  33+ 0000 ~                                ld          a,(hl)
  34+ 0000                                  ENDM
  35+ 0000
  36+ 0000              ldHLIdxAToA:        MACRO value
  37+ 0000 ~                                ld          hl,value
  38+ 0000 ~                                add         hl,a
  39+ 0000 ~                                ld          a,(hl)
  40+ 0000                                  ENDM
  41+ 0000
# file closed: ./Macros/ldIndexedMacros.asm
  60  0000                  INCLUDE "./Variables/general_variables_macros.asm"
# file opened: ./Variables/general_variables_macros.asm
   1+ 0000
   2+ 0000
   3+ 0000
   4+ 0000              MakeInnocentMacro:		MACRO
   5+ 0000 ~            						xor		a
   6+ 0000 ~            						ld		(FugitiveInnocentStatus),a
   7+ 0000              						ENDM
   8+ 0000
   9+ 0000              NoEscapePodMacro:		MACRO
  10+ 0000 ~            						xor		a
  11+ 0000 ~            						ld		(EscapePod),a
  12+ 0000              						ENDM
  13+ 0000
  14+ 0000              MaxFuelLevel            EQU     70              ; 7.0 light years max
  15+ 0000              MaxFuelMacro:			MACRO
  16+ 0000 ~            						ld		a,MaxFuelLevel
  17+ 0000 ~            						ld		(Fuel),a
  18+ 0000              						ENDM
  19+ 0000
  20+ 0000              MaxThrottle:            MACRO
  21+ 0000 ~                                    ld      a,(SHIPMAXSPEED)
  22+ 0000 ~                                    ld      (DELTA),a
  23+ 0000 ~                                    ld      d,a
  24+ 0000 ~                                    ld      e,4
  25+ 0000 ~                                    mul
  26+ 0000 ~                                    ld      (DELT4Lo),de
  27+ 0000                                      ENDM
  28+ 0000
  29+ 0000              ZeroThrottle:           MACRO
  30+ 0000 ~                                    xor     a
  31+ 0000 ~                                    ld      (DELTA),a
  32+ 0000 ~                                    ld      (DELT4Lo),a
  33+ 0000 ~                                    ld      (DELT4Lo+1),a
  34+ 0000                                      ENDM
  35+ 0000
  36+ 0000              ZeroPitch:              MACRO
  37+ 0000 ~                                    xor     a
  38+ 0000 ~                                    ld      (BET2),a
  39+ 0000 ~                                    ld      (BET2FLIP),a
  40+ 0000 ~                                    ld      (JSTY),a
  41+ 0000 ~                                    ld      (BETA),a
  42+ 0000                                      ENDM
  43+ 0000
  44+ 0000              ZeroRoll:               MACRO
  45+ 0000 ~                                    xor     a                              ; zero roll and climb
  46+ 0000 ~                                    ld      (ALP2),a
  47+ 0000 ~                                    ld      (ALP2FLIP),a
  48+ 0000 ~                                    ld      (JSTX),a
  49+ 0000 ~                                    ld      (ALPHA),a
  50+ 0000                                      ENDM
  51+ 0000
  52+ 0000              CorrectPostJumpFuel:    MACRO
  53+ 0000 ~                                    ld      a,(Fuel)
  54+ 0000 ~                                    ld      hl,Distance
  55+ 0000 ~                                    sub     a,(hl)
  56+ 0000 ~                                    ld      (Fuel),a
  57+ 0000                                      ENDM
  58+ 0000
  59+ 0000              ClearMissileTarget:     MACRO
  60+ 0000 ~                                    xor     a
  61+ 0000 ~                                    dec     a
  62+ 0000 ~                                    ld      (MissileTarget),a
  63+ 0000                                      ENDM
  64+ 0000
  65+ 0000              ClearECM:               MACRO
  66+ 0000 ~                                    xor     a
  67+ 0000 ~                                    ld      (ECMLoopA),a
  68+ 0000 ~                                    ld      (ECMLoopB),a
  69+ 0000                                      ENDM
  70+ 0000
  71+ 0000              ChargeEnergyAndShields: MACRO
  72+ 0000 ~                                    ld      a,$FF
  73+ 0000 ~                                    ld      (PlayerEnergy),a
  74+ 0000 ~                                    ld      (ForeShield),a
  75+ 0000 ~                                    ld      (AftShield),a
  76+ 0000                                      ENDM
  77+ 0000
  78+ 0000              HalveFugitiveStatus:    MACRO
  79+ 0000 ~                                    ld      hl,FugitiveInnocentStatus
  80+ 0000 ~                                    srl     (hl)
  81+ 0000                                      ENDM
  82+ 0000
  83+ 0000              ClearForceTransition    MACRO
  84+ 0000 ~                                    ld      a,$FF
  85+ 0000 ~                                    ld      (ScreenTransitionForced),a
  86+ 0000                                      ENDM
  87+ 0000
  88+ 0000              ForceTransition:        MACRO newScreen
  89+ 0000 ~                                    ld      a,newScreen
  90+ 0000 ~                                    ld      (ScreenTransitionForced), a
  91+ 0000                                      ENDM
  92+ 0000
  93+ 0000
  94+ 0000
  95+ 0000
  96+ 0000
# file closed: ./Variables/general_variables_macros.asm
  61  0000
  62  0000
  63  0000              charactersetaddr		equ 15360
  64  0000              STEPDEBUG               equ 1
  65  0000
  66  0000
  67  0000                                      ORG         $8000
  68  8000 F3                                   di
  69  8001                                      ; "STARTUP"
  70  8001                                      MMUSelectLayer1
  70  8001 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  71  8005 CD 80 E0                             call		l1_cls
  72  8008 3E 07                                ld			a,7
  73  800A CD 9B E0                             call		l1_attr_cls_to_a
  74  800D 3E FF                                ld          a,$FF
  75  800F CD A5 E0                             call        l1_set_border
  76  8012                                      MMUSelectSpriteBank
  76  8012 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  77  8016 CD 86 E4                             call		sprite_load_sprite_data
  78  8019              Initialise:             MMUSelectLayer2
  78  8019 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  79  801D CD D0 E0                             call 		l2_initialise
  80  8020                                      ClearForceTransition
  80  8020 3E FF       >                        ld      a,$FF
  80  8022 32 27 86    >                        ld      (ScreenTransitionForced),a
  81  8025 3E 10        TidyDEBUG:              ld          a,16
  82  8027 32 F5 84                             ld          (TidyCounter),a
  83  802A
  84  802A AF           TestText:               xor			a
  85  802B 32 6E 92                             ld      (JSTX),a
  86  802E                                      MMUSelectCmdrData
  86  802E ED 91 57 38 >                     nextreg CmdrDataMMU,       BankCmdrData
  87  8032 CD 1F E0                             call		defaultCommander
  88  8035
  89  8035                                      MMUSelectSpriteBank
  89  8035 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  90  8039 CD 7E E4                             call		init_sprites
  91  803C
  92  803C                                      IFDEF DOUBLEBUFFER
  93  803C                                          MMUSelectLayer2
  93  803C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  94  8040 CD C9 E0                                 call        l2_cls
  95  8043 CD DD E0                                 call  l2_flip_buffers
  96  8046                                      ENDIF
  97  8046              ; Set up all 8 galaxies, 7later this will be pre built and loaded into memory from files
  98  8046 CD 28 86     InitialiseGalaxies:     call		ResetUniv                       ; Reset ship data
  99  8049 CD 50 86                             call        ResetGalaxy                     ; Reset each galaxy copying in code
 100  804C CD 79 86                             call        SeedAllGalaxies
 101  804F
 102  804F              .ClearLayer2Buffers:    MMUSelectLayer2
 102  804F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 103  8053 CD C9 E0                             call        l2_cls
 104  8056                                      IFDEF DOUBLEBUFFER
 105  8056                                          MMUSelectLayer2
 105  8056 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 106  805A CD DD E0                                 call  l2_flip_buffers
 107  805D                                      ENDIF
 108  805D
 109  805D
 110  805D              ;.Sa                        MMUSelectUniverseN 0
 111  805D
 112  805D              ;InitialiseDemoShip:     call    ClearFreeSlotList
 113  805D              ;                        call    FindNextFreeSlotInA
 114  805D              ;                        ld      b,a
 115  805D              ;                        ld      a,13 ;Coriolis station
 116  805D              ;                        call    InitialiseShipAUnivB
 117  805D              ;                        xor     a
 118  805D AF           InitialiseMainLoop:     xor     a
 119  805E 32 41 93                             ld      (CurrentUniverseAI),a
 120  8061 3E 03                                ld      a,3
 121  8063 32 C0 92                             ld      (MenuIdMax),a
 122  8066 3E FF                                ld      a,$FF                               ; Starts Docked
 123  8068 32 C5 92                             ld      (DockedFlag),a
 124  806B              ;                        call    InitialiseFrontView
 125  806B CD B9 86                             call    InitialiseCommander
 126  806E                                      MMUSelectUniverseN 2
 126  806E ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
 127  8072 CD 85 87                             call    SetInitialShipPosition
 128  8075
 129  8075                                      MMUSelectStockTable
 129  8075 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 130  8079 CD AA E0                             call    generate_stock_market
 131  807C              ;..................................................................................................................................
 132  807C CD 4E 97     MainLoop:	            call    doRandom                            ; redo the seeds every frame
 133  807F CD 16 90                             call    scan_keyboard
 134  8082              ;.. This bit allows cycling of ships on universe 0 in demo.........................................................................
 135  8082 CD BE 82     DemoOfShipsDEBUG:       call    TestForNextShip
 136  8085              ;.. Check if keyboard scanning is allowed by screen. If this is set then skip all keyboard and AI..................................
 137  8085 3E 00        InputBlockerCheck:      ld      a,$0
 138  8087                                      JumpIfAEqNusng $01, SkipInputHandlers       ; as we are in a transition the whole update AI is skipped
 138  8087 FE 01       >                cp     $01
 138  8089 CA AB 80    >                jp      z,SkipInputHandlers
 139  808C CD 1D 87                             call    ViewKeyTest
 140  808F CD 46 84                             call    TestPauseMode
 141  8092 3A C6 92                             ld      a,(GamePaused)
 142  8095 FE 00                                cp      0
 143  8097 20 E3                                jr      nz,MainLoop
 144  8099 CD A7 91                             call    MovementKeyTest
 145  809C              ;.. Process cursor keys for respective screen if the address is 0 then we skill just skip movement.................................
 146  809C 3A AA 80     HandleMovement:         ld      a,(CallCursorRoutine+2)
 147  809F                                      IfAIsZeroGoto     TestAreWeDocked
 147  809F A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 147  80A0 CA AB 80    >				jp	z, TestAreWeDocked
 148  80A3              ;.. Handle displaying correct screen ..............................................................................................
 149  80A3 3E 00        HandleBankSelect:       ld      a,$00
 150  80A5                                      MMUSelectScreenA
 150  80A5 ED 92 56    >                     nextreg ScreenBankMMU,		a
 151  80A8 CD 00 00     CallCursorRoutine:      call    $0000
 152  80AB              ;.. Check to see if we are docked as if we are (or are docking.launching then no AI/Ship updates occur.............................
 153  80AB              ;.. Also end up here if we have the screen input blocker set
 154  80AB              SkipInputHandlers:
 155  80AB              ;.. For Docked flag its - 0 = in free space, FF = Docked, FE transition, FD = Setup open space and transition to not docked
 156  80AB 3A C5 92     TestAreWeDocked:        ld      a,(DockedFlag)                                ; if if we are in free space do universe update
 157  80AE                                      JumpIfANENusng  0, SkipUniveseUpdate                  ; else we skip it. As we are also in dock/transition then no models should be updated so we dont; need to draw
 157  80AE FE 00       >                cp     0
 157  80B0 C2 FF 80    >                jp      nz,SkipUniveseUpdate
 158  80B3              ;.. If we get here then we are in game running mode regardless of which screen we are on, so update AI.............................
 159  80B3              ;.. we do one universe slot each loop update ......................................................................................
 160  80B3 CD 08 82                             call    UpdateUniverseObjects
 161  80B6                                      JumpIfMemNeNusng ScreenTransitionForced, $FF, BruteForceChange                          ; if we docked then a transition would have been forced
 161  80B6 3A 27 86    >                        ld  a,(ScreenTransitionForced)
 161  80B9 FE FF       >                        cp  $FF
 161  80BB C2 AA 81    >                        jp  nz,BruteForceChange
 162  80BE 3E 00        CheckIfViewUpdate:      ld      a,$00                                         ; if this is set to a view number then we process a view
 163  80C0 FE 00                                cp      0                                             ; .
 164  80C2 28 33                                jr      z, MenusLoop                                  ; This will change as more screens are added TODO
 165  80C4              ;..Processing a view...............................................................................................................
 166  80C4              ;..Display any message ............................................................................................................
 167  80C4 3A 76 92                             ld      a,(MessageCount)
 168  80C7 28 00                                jr      z,.NoMessages                                 ; note message end will tidy up display
 169  80C9 2A 68 92     .NoMessages:            ld      hl,(InnerHyperCount)
 170  80CC 7C                                   ld      a,h
 171  80CD B5                                   or      l
 172  80CE 28 03                                jr      z,.NoHyperspace                               ; note message end will tidy up display
 173  80D0 CD BB 81                             call    HyperSpaceMessage
 174  80D3              .NoHyperspace:          MMUSelectLayer2
 174  80D3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 175  80D7 CD C9 E0                             call   l2_cls
 176  80DA                                      MMUSelectLayer1
 176  80DA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 177  80DE              ;..Later this will be done via self modifying code to load correct stars routine for view..........................................
 178  80DE 3E DF        DrawStarsForwards:      ld     a,$DF
 179  80E0 32 E9 E8                             ld     (line_gfx_colour),a
 180  80E3              StarUpdateBank:         MMUSelectViewFront                                    ; This needs to be self modifying
 180  80E3 ED 91 56 3E >                     nextreg ScreenBankMMU,		BankFrontView
 181  80E7 CD 16 8D     StarUpdateRoutine:      call   StarsForward                                   ; This needs to be self modifying
 182  80EA              PrepLayer2:             MMUSelectLayer2                                       ; Clear layer 2 for graphics
 182  80EA ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 183  80EE                                    ;  call   l2_cls
 184  80EE              ;ProcessSun:             call    DrawForwardSun
 185  80EE              ProcessPlanet:
 186  80EE CD 9A 82     ProcessShipModels:      call    DrawForwardShips                              ; Draw all ships (this may need to be self modifying)
 187  80F1 CD 12 88                             call   UpdateConsole                                  ; Update display console on layer 1
 188  80F4 C3 0D 81                             jp LoopRepeatPoint                                    ; And we are done with views, so check if there was a special command to do
 189  80F7              ;..If we were not in views then we were in display screens/menus...................................................................
 190  80F7 2A 0B 81     MenusLoop:              ld      hl,(ScreenLoopJP+1)
 191  80FA 7C                                   ld      a,h
 192  80FB B5                                   or      l
 193  80FC CA 0D 81                             jp      z,LoopRepeatPoint
 194  80FF              ;..This is the screen update routine for menus.....................................................................................
 195  80FF              ;.. Also used by transition routines
 196  80FF              SkipUniveseUpdate:      JumpIfMemZero ScreenLoopJP+1,LoopRepeatPoint
 196  80FF 3A 0B 81    >                        ld  a,(ScreenLoopJP+1)
 196  8102 A7          >                        and a
 196  8103 28 08       >                        jr  z,LoopRepeatPoint
 197  8105 3E 00        ScreenLoopBank:         ld      a,$0
 198  8107                                      MMUSelectScreenA
 198  8107 ED 92 56    >                     nextreg ScreenBankMMU,		a
 199  810A CD 00 00     ScreenLoopJP:           call    $0000
 200  810D 3A C5 92     LoopRepeatPoint:        ld      a,(DockedFlag)
 201  8110              HandleLaunched:         JumpIfAEqNusng  $FD, WeHaveCompletedLaunch
 201  8110 FE FD       >                cp     $FD
 201  8112 CA 2C 81    >                jp      z,WeHaveCompletedLaunch
 202  8115                                      JumpIfAEqNusng  $FE, WeAreInTransition
 202  8115 FE FE       >                cp     $FE
 202  8117 CA 8F 81    >                jp      z,WeAreInTransition
 203  811A                                      JumpIfAEqNusng  $FC, WeAreHJumping
 203  811A FE FC       >                cp     $FC
 203  811C CA 32 81    >                jp      z,WeAreHJumping
 204  811F                                      JumpIfAEqNusng  $FB, WeAreHEntering
 204  811F FE FB       >                cp     $FB
 204  8121 CA 40 81    >                jp      z,WeAreHEntering
 205  8124                                      JumpIfAEqNusng  $FA, WeHaveCompletedHJump
 205  8124 FE FA       >                cp     $FA
 205  8126 CA 48 81    >                jp      z,WeHaveCompletedHJump
 206  8129 C3 8F 81                             jp  DoubleBufferCheck
 207  812C CD 8A 86     WeHaveCompletedLaunch:  call    LaunchedFromStation
 208  812F C3 8F 81                             jp      DoubleBufferCheck
 209  8132 CD DB C1     WeAreHJumping:          call        hyperspace_Lightning
 210  8135 DA 8F 81                             jp      c,DoubleBufferCheck
 211  8138 3E FB                                ld      a,$FB
 212  813A 32 C5 92                             ld      (DockedFlag),a
 213  813D C3 8F 81                             jp      DoubleBufferCheck
 214  8140 3E FA        WeAreHEntering:         ld      a,$FA
 215  8142 32 C5 92                             ld      (DockedFlag),a
 216  8145 C3 8F 81                             jp  DoubleBufferCheck
 217  8148 3A B8 93     WeHaveCompletedHJump:   ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 218  814B                                      MMUSelectGalaxyA
 218  814B ED 92 57    >                     nextreg GalaxyDataMMU,       a
 219  814E                                      ;break; not resettign system correctly
 220  814E 2A CD 93                             ld      hl,(TargetPlanetX)
 221  8151 22 CB 93                             ld      (PresentSystemX),hl
 222  8154 44                                   ld      b,h
 223  8155 4D                                   ld      c,l
 224  8156                                      CorrectPostJumpFuel
 224  8156 3A F7 96    >                        ld      a,(Fuel)
 224  8159 21 AD 93    >                        ld      hl,Distance
 224  815C 96          >                        sub     a,(hl)
 224  815D 32 F7 96    >                        ld      (Fuel),a
 225  8160                                      ForceTransition ScreenFront            ; This will also trigger stars
 225  8160 3E 09       >                        ld      a,ScreenFront
 225  8162 32 27 86    >                        ld      (ScreenTransitionForced), a
 226  8165 3E 00                                ld      a,$00
 227  8167 32 C5 92                             ld      (DockedFlag),a
 228  816A CD 6B F8                             call    GalaxyGenerateDesc             ; bc  holds new system to generate system
 229  816D CD B5 97                             call    copy_working_to_system         ; and propogate copies of seeds
 230  8170 CD AD 97                             call    copy_working_to_galaxy         ; .
 231  8173 CD 9B 98                             call    get_planet_data_working_seed   ; sort out system data
 232  8176                                      ;call    GetDigramGalaxySeed           ; .
 233  8176                                      MMUSelectStockTable                    ; .
 233  8176 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 234  817A CD AA E0                             call    generate_stock_market          ; generate new prices
 235  817D CD 80 96                             call    ClearUnivSlotList              ; clear out any ships
 236  8180 CD 08 96                             call    ResetPlayerShip
 237  8183                                      HalveFugitiveStatus                    ; halves status and brings bit into carry
 237  8183 21 83 93    >                        ld      hl,FugitiveInnocentStatus
 237  8186 CB 3E       >                        srl     (hl)
 238  8188                                      MMUSelectSun
 238  8188 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 239  818C CD 00 C5                             call    CreateSun                      ; create the local sun and set position based on seed
 240  818F              ;TODO                        call    generateSunAndPlanetPos        ; uses current carry state too
 241  818F              ;TODO.CreateSun:             call    SetSunSlot
 242  818F              ; PROBABLY NOT NEEDED NOW                      MMUSelectShipBank1
 243  818F              ; PROBABLY NOT NEEDED NOW                      call    GetShipBankId
 244  818F              ;;SELECT CORRECT BANK                        MMUSelectUniverseN 0
 245  818F              ;;TODO                        call    CopyBodyToUniverse
 246  818F              ;;TODO                        call    CreateSun
 247  818F              ;;TODOCreatePlanet:          call    SetPlanetSlot
 248  818F              ;;TODO                       MMUSelectShipBank1
 249  818F              ;;TODO                       call    GetShipBankId
 250  818F              ;;TODO                       MMUSelectUniverseBankN 1
 251  818F              ;;TODO                       call    CopyBodyToUniverse
 252  818F
 253  818F                                      ; reset main loop counters
 254  818F                                      ; from BBC TT18 jump code
 255  818F                                      ; need to set system corrodinates, flush out univere ships etc
 256  818F                                      ; set up new star system and landing location in system
 257  818F                                      ; reset ship speed etc (RES2)
 258  818F                                      ; update legal status, missle indicatrions, planet data block, sun data block (SOLAR)
 259  818F                                      ;   put planet into data blokc 1 of FRIN
 260  818F                                      ;   put sun inot data block (NWWSHIP)
 261  818F                                      ; need to look at in system warp code (WARP) - note we need to -reorg all to code for teh station as that will never be in slot 0
 262  818F              WeAreInTransition:
 263  818F 3E 00        DoubleBufferCheck:      ld      a,00
 264  8191                                      IFDEF DOUBLEBUFFER
 265  8191 FE 00                                    cp      0
 266  8193 CA A2 81                                 jp      z,TestTransition
 267  8196                                          MMUSelectLayer2
 267  8196 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 268  819A 3A 01 E0                                 ld     a,(varL2_BUFFER_MODE)
 269  819D FE 00                                    cp     0
 270  819F C4 DD E0                                 call   nz,l2_flip_buffers
 271  81A2                                      ENDIF
 272  81A2 3A 27 86     TestTransition:        ld      a,(ScreenTransitionForced)          ; was there a bruite force screen change in any update loop
 273  81A5 FE FF                                cp      $FF
 274  81A7 CA 7C 80                             jp      z,MainLoop
 275  81AA 57           BruteForceChange:      ld      d,a
 276  81AB 1E 10                                ld      e,ScreenMapRow
 277  81AD ED 30                                mul
 278  81AF DD 21 3A 85                          ld      ix,ScreenKeyMap
 279  81B3 DD 19                                add     ix,de                               ; Force screen transition
 280  81B5 CD CD 86                             call    SetScreenAIX
 281  81B8 C3 7C 80                             jp MainLoop
 282  81BB
 283  81BB              ;..Hyperspace counter............................................................................................................
 284  81BB              HyperSpaceMessage:      MMUSelectLayer1
 284  81BB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 285  81BF CD FC 83                             call    DisplayHyperCountDown
 286  81C2 2A 68 92     .UpdateHyperCountdown:  ld      hl,(InnerHyperCount)
 287  81C5 2D                                   dec     l
 288  81C6 20 24                                jr      nz,.decHyperInnerOnly
 289  81C8 25                                   dec     h
 290  81C9 F8                                   ret     m
 291  81CA 2E 0B        .resetHyperInner:       ld      l,$0B
 292  81CC E5                                   push    hl
 293  81CD 16 0C                                ld      d,12
 294  81CF 3E 06                                ld      a,L1ColourPaperBlack | L1ColourInkYellow
 295  81D1 CD 8B E0                             call    l1_attr_cls_2DlinesA
 296  81D4 16 60                                ld      d,12 * 8
 297  81D6 CD 74 E0                             call    l1_cls_2_lines_d
 298  81D9 11 00 60                             ld      de,$6000
 299  81DC 21 58 83                             ld      hl,Hyp_centeredTarget
 300  81DF CD C8 E0                             call    l1_print_at
 301  81E2 11 00 68                             ld      de,$6800
 302  81E5 21 99 83                             ld      hl,Hyp_centeredCharging
 303  81E8 CD C8 E0                             call    l1_print_at
 304  81EB E1                                   pop     hl
 305  81EC 22 68 92     .decHyperInnerOnly:     ld      (InnerHyperCount),hl
 306  81EF C9                                   ret
 307  81F0 21 00 00     .HyperCountDone:        ld      hl,0
 308  81F3 22 68 92                             ld      (InnerHyperCount),hl
 309  81F6 16 0C                                ld      d,12
 310  81F8 3E 00                                ld      a,L1ColourPaperBlack | L1ColourInkBlack
 311  81FA CD 8B E0                             call    l1_attr_cls_2DlinesA
 312  81FD 16 60                                ld      d,12 * 8
 313  81FF CD 74 E0                             call    l1_cls_2_lines_d
 314  8202                                      ForceTransition ScreenHyperspace                            ; transition to hyperspace
 314  8202 3E 0E       >                        ld      a,ScreenHyperspace
 314  8204 32 27 86    >                        ld      (ScreenTransitionForced), a
 315  8207 C9                                   ret
 316  8208              ;..................................................................................................................................
 317  8208              ;..Update Universe Objects.........................................................................................................
 318  8208 AF           UpdateUniverseObjects:  xor     a
 319  8209 32 42 93                             ld      (SelectedUniverseSlot),a
 320  820C 57           .UpdateUniverseLoop:     ld      d,a                                             ; d is unaffected by GetTypeInSlotA
 321  820D              ;.. If the slot is empty (FF) then skip this slot..................................................................................
 322  820D CD C9 96                             call    GetTypeAtSlotA
 323  8210 FE FF                                cp      $FF
 324  8212 28 2F                                jr      z,.ProcessedUniverseSlot
 325  8214 7A           .UniverseObjectFound:   ld      a,d                                             ; Get back Universe slot as we want it
 326  8215                                      MMUSelectUniverseA                                      ; and we apply roll and pitch
 326  8215 C6 46       >                     add    a,BankUNIVDATA0
 326  8217 ED 92 56    >                     nextreg UniverseMMU,       a
 327  821A CD 2A DA                             call    ApplyMyRollAndPitch
 328  821D CD 04 DB                             call    ApplyShipRollAndPitch
 329  8220              ;.. If its a space station then see if we are ready to dock........................................................................
 330  8220 3A 1A C3     .CheckIfDockable:       ld      a,(ShipTypeAddr)                                ; Now we have the correct bank
 331  8223                                      JumpIfANENusng  ShipTypeStation, .NotDockingCheck       ; if its not a station so we don't test docking
 331  8223 FE 02       >                cp     ShipTypeStation
 331  8225 C2 39 82    >                jp      nz,.NotDockingCheck
 332  8228              .IsDockableAngryCheck:  JumpOnMemBitSet ShipNewBitsAddr, 4, .NotDockingCheck    ; if it is angry then we dont test docking
 332  8228 3A 1B C3    >                        ld      a,(ShipNewBitsAddr)
 332  822B CB 67       >                        bit 	4,a
 332  822D C2 39 82    >                        jp      nz,.NotDockingCheck
 333  8230 CD 5F 82                             call    DockingCheck                                    ; So it is a candiate to test docking. Now we do the position and angle checks
 334  8233                                      ReturnIfMemEquN ScreenTransitionForced, $FF            ; if we docked then a transition would have been forced
 334  8233 3A 27 86    >                    ld   a,(ScreenTransitionForced)
 334  8236 FE FF       >                    cp     $FF
 334  8238 C8          >                    ret    z
 335  8239              .NotDockingCheck:       CallIfMemEqMemusng SelectedUniverseSlot, CurrentUniverseAI, UpdateShip
 335  8239 3A 42 93    >                        ld   a,(SelectedUniverseSlot)
 335  823C 21 41 93    >                        ld   hl,CurrentUniverseAI
 335  823F BE          >                        cp   (hl)
 335  8240 CC 71 84    >                        call    z,UpdateShip
 336  8243 3A 42 93     .ProcessedUniverseSlot: ld      a,(SelectedUniverseSlot)                        ; Move to next ship cycling if need be to 0
 337  8246 3C                                   inc     a                                               ; .
 338  8247                                      JumpIfAGTENusng   UniverseListSize, .UpdateAICounter    ; .
 338  8247 FE 0C       >                        cp     UniverseListSize
 338  8249 D2 52 82    >                        jp		nc,.UpdateAICounter
 339  824C 32 42 93                             ld      (SelectedUniverseSlot),a
 340  824F C3 0C 82                             jp      .UpdateUniverseLoop
 341  8252 3A 41 93     .UpdateAICounter:       ld      a,(CurrentUniverseAI)
 342  8255 3C                                   inc     a
 343  8256 FE 0C                                cp      12
 344  8258 38 01                                jr      c,.IterateAI
 345  825A AF                                   xor     a
 346  825B 32 41 93     .IterateAI:             ld      (CurrentUniverseAI),a
 347  825E C9                                   ret
 348  825F              ;..................................................................................................................................
 349  825F              ;.. Quickly eliminate space stations too far away..................................................................................
 350  825F ED 4B 0C C0  DockingCheck:           ld      bc,(UBnKxlo)
 351  8263 2A 0F C0                             ld      hl,(UBnKylo)
 352  8266 ED 5B 12 C0                          ld      de,(UBnKzlo)
 353  826A 78                                   ld      a,b
 354  826B B4                                   or      h
 355  826C B2                                   or      d
 356  826D C0                                   ret     nz
 357  826E 79           .CheckIfInRangeLo:      ld      a,c
 358  826F B5                                   or      l
 359  8270 B3                                   or      e
 360  8271 E6 C0                                and     %11000000                           ; Note we should make this 1 test for scoop or collision too
 361  8273 C0                                   ret     nz
 362  8274              ;.. Now check to see if we are comming in at a viable angle........................................................................
 363  8274 3A 26 C0     .CheckDockingAngle:     ld      a,(UBnkrotmatNosevZ+1)              ; get get high byte of rotmat
 364  8277                                      ReturnIfALTNusng 214                       ; this is the magic angle to be within 26 degrees +/-
 364  8277 FE D6       >                    cp    214
 364  8279 D8          >                    ret	 c
 365  827A CD 8F 84                             call    GetStationVectorToWork              ; Normalise position into XX15 as in effect its a vector from out ship to it given we are always 0,0,0, returns with A holding vector z
 366  827D CB 7F                                bit     7,a                                 ; if its negative
 367  827F C0                                   ret     nz                                  ; we are flying away from it
 368  8280                                      ReturnIfALTNusng 89                         ; if the axis <89 the we are not in the 22 degree angle
 368  8280 FE 59       >                    cp    89
 368  8282 D8          >                    ret	 c
 369  8283 3A 1C C0                             ld      a,(UBnkrotmatRoofvX+1)              ; get roof vector high
 370  8286 E6 7F                                and     SignMask8Bit
 371  8288                                      ReturnIfALTNusng 80                         ; note 80 decimal for 36.6 degrees
 371  8288 FE 50       >                    cp    80
 371  828A D8          >                    ret	 c
 372  828B              ;.. Its passed all validation and we are docking...................................................................................
 373  828B              .AreDocking:            MMUSelectLayer1
 373  828B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 374  828F 3E 06                                ld        a,$6
 375  8291 CD A5 E0                             call      l1_set_border
 376  8294              .EnterDockingBay:       ForceTransition ScreenDocking
 376  8294 3E 0D       >                        ld      a,ScreenDocking
 376  8296 32 27 86    >                        ld      (ScreenTransitionForced), a
 377  8299 C9                                   ret
 378  829A
 379  829A              ;..................................................................................................................................
 380  829A              ;; TODODrawForwardSun:         MMUSelectSun
 381  829A              ;; TODO                        ld      a,(SunKShipType)
 382  829A              ;; TODO.ProcessBody:           cp      129
 383  829A              ;; TODO                        jr      nz,.ProcessPlanet
 384  829A              ;; TODO.ProcessSun:            call    ProcessSun
 385  829A              ;; TODO
 386  829A              ;; TODOProcessSun:             call    CheckSunDistance
 387  829A              ;; TODO
 388  829A              ;; TODO                        ret
 389  829A              ;; TODO.ProcessPlanet:         call    ProcessPlanet
 390  829A              ;; TODO                        ret
 391  829A              ;..................................................................................................................................
 392  829A AF           DrawForwardShips:       xor     a
 393  829B 32 BD 82     DrawShipLoop:           ld      (CurrentShipUniv),a
 394  829E CD C9 96                             call    GetTypeAtSlotA
 395  82A1 FE FF                                cp      $FF
 396  82A3 28 0E                                jr      z,ProcessedDrawShip
 397  82A5              ; Add in a fast check for ship behind to process nodes and if behind jump to processed Draw ship
 398  82A5 3A BD 82     SelectShipToDraw:       ld      a,(CurrentShipUniv)
 399  82A8                                      MMUSelectUniverseA
 399  82A8 C6 46       >                     add    a,BankUNIVDATA0
 399  82AA ED 92 56    >                     nextreg UniverseMMU,       a
 400  82AD                                      ;break
 401  82AD                                      ; Need check for exploding here
 402  82AD CD 42 DC     .ProcessUnivShip:       call    ProcessShip             ;; call    ProcessUnivShip
 403  82B0              UpdateRadar:
 404  82B0              ;;;Does nothing                       ld      a,BankFrontView
 405  82B0              ;;;Does nothing                       MMUSelectScreenA
 406  82B0              ;;;Does nothing         ld      a,(CurrentShipUniv)
 407  82B0              ;;;Does nothing         MMUSelectUniverseA
 408  82B0 CD 57 89                             call    UpdateScannerShip
 409  82B3 3A BD 82     ProcessedDrawShip:      ld      a,(CurrentShipUniv)
 410  82B6 3C                                   inc     a
 411  82B7                                      JumpIfALTNusng   UniverseListSize, DrawShipLoop
 411  82B7 FE 0C       >                        cp      UniverseListSize
 411  82B9 DA 9B 82    >                        jp		c, DrawShipLoop
 412  82BC C9                                   ret
 413  82BD              ;..................................................................................................................................
 414  82BD 00           CurrentShipUniv:        DB      0
 415  82BE
 416  82BE              ;;;ProcessUnivShip:        call    CheckDistance               ; Will check for negative Z and skip (how do we deal with read and side views? perhaps minsky transformation handles that?)
 417  82BE              ;;;                        ret     c
 418  82BE              ;;;                        ld      a,(UbnkDrawAsDot)
 419  82BE              ;;;                        and     a
 420  82BE              ;;;                        jr      z,.CarryOnWithDraw
 421  82BE              ;;;.itsJustADot:           ld      bc,(UBnkNodeArray)          ; if its at dot range
 422  82BE              ;;;                        ld      a,$FF                       ; just draw a pixel
 423  82BE              ;;;                        MMUSelectLayer2                     ; then go to update radar
 424  82BE              ;;;                        call    l2_plot_pixel               ;
 425  82BE              ;;;                        ClearCarryFlag
 426  82BE              ;;;                        ret
 427  82BE              ;;;.ProcessShipNodes:      call    ProcessShip
 428  82BE              ;;;
 429  82BE              ;;;call    ProcessNodes ; it hink here we need the star and planet special cases
 430  82BE              ;;;.DrawShip:              call    CullV2				        ; culling but over aggressive backface assumes all 0 up front TOFIX
 431  82BE              ;;;                        call    PrepLines                   ; LL72, process lines and clip, ciorrectly processing face visibility now
 432  82BE              ;;;                        ld      a,(CurrentShipUniv)
 433  82BE              ;;;                        MMUSelectUniverseA
 434  82BE              ;;;                        call   DrawLines
 435  82BE              ;;;                        ClearCarryFlag
 436  82BE              ;;;                        ret
 437  82BE
 438  82BE
 439  82BE 3E 46        TestForNextShip:        ld      a,c_Pressed_Quit
 440  82C0 CD 9D 90                             call    is_key_pressed
 441  82C3 C0                                   ret     nz
 442  82C4 3A 70 84                             ld      a,(currentDemoShip)
 443  82C7 3C                                   inc     a
 444  82C8 FE 2C                                cp      44
 445  82CA 20 01                                jr      nz,.TestOK
 446  82CC AF                                   xor     a
 447  82CD 32 70 84     .TestOK:                ld      (currentDemoShip),a
 448  82D0 CD 80 96                             call    ClearUnivSlotList
 449  82D3 3A 70 84                             ld      a,(currentDemoShip)
 450  82D6 47                                   ld      b,a
 451  82D7 AF                                   xor     a
 452  82D8 CD 92 96                             call    SetSlotAToTypeB
 453  82DB                                      MMUSelectUniverseN 2
 453  82DB ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
 454  82DF CD 25 CA                             call    ResetUBnkData                         ; call the routine in the paged in bank, each universe bank will hold a code copy local to it
 455  82E2 3A 70 84                             ld      a,(currentDemoShip)
 456  82E5                                      MMUSelectShipBank1
 456  82E5 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 457  82E9 CD 0F E0                             call    GetShipBankId
 458  82EC                                      MMUSelectShipBankA
 458  82EC ED 92 57    >					 nextreg ShipModelMMU,	    a
 459  82EF 78                                   ld      a,b
 460  82F0 CD 6A E0                             call    CopyShipToUniverse
 461  82F3 CD 85 87                             call    SetInitialShipPosition
 462  82F6 CD F6 84                             call    DEBUGSETNODES
 463  82F9 C9                                   ret
 464  82FA
 465  82FA              ;----------------------------------------------------------------------------------------------------------------------------------
 466  82FA              NeedAMessageQueue:
 467  82FA
 468  82FA 3A 69 92     UpdateCountdownNumber:  ld		a,(OuterHyperCount)
 469  82FD 11 54 83                             ld		de,Hyp_counter
 470  8300 0E 9C                                ld	c, -100
 471  8302 CD 0C 83                             call	.Num1
 472  8305 0E F6                                ld	c,-10
 473  8307 CD 0C 83                             call	.Num1
 474  830A 0E FF                                ld	c,-1
 475  830C 06 2F        .Num1:	                ld	b,'0'-1
 476  830E 04           .Num2:	                inc		b
 477  830F 81                                   add		a,c
 478  8310 38 FC                                jr		c,.Num2
 479  8312 91                                   sub 	c
 480  8313 C5                                   push	bc
 481  8314 F5                                   push	af
 482  8315 79                                   ld		a,c
 483  8316 FE FF                                cp		-1
 484  8318 78                                   ld		a,b
 485  8319 12                                   ld		(de),a
 486  831A 13                                   inc		de
 487  831B F1                                   pop		af
 488  831C C1                                   pop		bc
 489  831D C9                                   ret
 490  831E
 491  831E              ;----------------------------------------------------------------------------------------------------------------------------------
 492  831E 54 6F 3A     Hyp_message             DB "To:"
 493  8321 00 00 00...  Hyp_to                  DS 32
 494  8341 20           Hyp_space1              DB " "
 495  8342 30 2E 30     Hyp_dist_amount         DB "0.0"
 496  8345 2E           Hyp_decimal             DB "."
 497  8346 30           Hyp_fraction            DB "0"
 498  8347 20 4C 59 00  Hyp_dis_ly              DB " LY",0
 499  834B 43 68 61 72  Hyp_charging            DB "Charging:"
 499  834F 67 69 6E 67
 499  8353 3A
 500  8354 30 30 30 00  Hyp_counter             DB "000",0
 501  8358 00 00 00...  Hyp_centeredTarget      DS 32
 502  8378 00           Hyp_centeredEol         DB 0
 503  8379 00 00 00...  Hyp_bufferpadding       DS 32   ; just in case we get a buffer ovverun. shoudl never get beyond 32 chars
 504  8399 00 00 00...  Hyp_centeredCharging    DS 32
 505  83B9 00           Hyp_centeredEol2        DB 0
 506  83BA 00 00 00...  Hyp_bufferpadding2      DS 32   ; just in case we get a buffer ovverun. shoudl never get beyond 32 chars
 507  83DA
 508  83DA 7E           MainCopyLoop:           ld      a,(hl)
 509  83DB FE 00                                cp      0
 510  83DD C8                                   ret     z
 511  83DE 12                                   ld      (de),a
 512  83DF 23                                   inc     hl
 513  83E0 13                                   inc     de
 514  83E1 18 F7                                jr      MainCopyLoop
 515  83E3
 516  83E3 06 00        CountLengthHL:          ld      b,0
 517  83E5 7E           .CountLenLoop:          ld      a,(hl)
 518  83E6 FE 00                                cp      0
 519  83E8 28 04                                jr      z,.DoneCount
 520  83EA 04                                   inc     b
 521  83EB 23                                   inc     hl
 522  83EC 18 F7                                jr      .CountLenLoop
 523  83EE 3E 20        .DoneCount:             ld      a,32
 524  83F0 90                                   sub     b
 525  83F1 CB 2F                                sra     a
 526  83F3 C9                                   ret
 527  83F4
 528  83F4 47           MainClearTextLoop:      ld      b,a
 529  83F5 3E 20                                ld      a,32
 530  83F7 77           .ClearLoop:             ld      (hl),a
 531  83F8 23                                   inc     hl
 532  83F9 10 FC                                djnz    .ClearLoop
 533  83FB C9                                   ret
 534  83FC
 535  83FC
 536  83FC 11 21 83     DisplayHyperCountDown:  ld      de,Hyp_to
 537  83FF 21 BB 9F                             ld      hl,name_expanded
 538  8402 CD DA 83                             call    MainCopyLoop
 539  8405 AF           .DoneName:              xor     a
 540  8406 12                                   ld      (de),a
 541  8407 32 3D 83                             ld      (Hyp_message+31),a      ; max out at 32 characters
 542  840A 21 1E 83     .CentreJustify:         ld      hl,Hyp_message
 543  840D CD E3 83                             call    CountLengthHL
 544  8410 21 58 83                             ld      hl,Hyp_centeredTarget
 545  8413 CD F4 83                             call    MainClearTextLoop
 546  8416 EB                                   ex      de,hl
 547  8417 21 1E 83                             ld      hl,Hyp_message
 548  841A CD DA 83                             call    MainCopyLoop
 549  841D AF                                   xor     a
 550  841E 32 78 83                             ld      (Hyp_centeredEol),a
 551  8421 21 54 83                             ld      hl,Hyp_counter           ; clear counter digits
 552  8424 3E 20                                ld      a,32                     ; clear counter digits
 553  8426 77                                   ld      (hl),a                   ; clear counter digits
 554  8427 23                                   inc     hl                       ; clear counter digits
 555  8428 77                                   ld      (hl),a                   ; clear counter digits
 556  8429 23                                   inc     hl                       ; clear counter digits
 557  842A 77                                   ld      (hl),a                   ; clear counter digits
 558  842B CD FA 82                             call    UpdateCountdownNumber
 559  842E 21 4B 83                             ld      hl,Hyp_charging
 560  8431 CD E3 83                             call    CountLengthHL
 561  8434 21 99 83                             ld      hl,Hyp_centeredCharging
 562  8437 CD F4 83                             call    MainClearTextLoop
 563  843A EB                                   ex      de,hl
 564  843B 21 4B 83                             ld      hl,Hyp_charging
 565  843E CD DA 83                             call    MainCopyLoop
 566  8441 AF                                   xor     a
 567  8442 32 B9 83                             ld      (Hyp_centeredEol2),a
 568  8445 C9                                   ret
 569  8446
 570  8446              ;DisplayTargetAndRange
 571  8446              ;DisplayCountDownNumber
 572  8446              ;----------------------------------------------------------------------------------------------------------------------------------
 573  8446 3A C6 92     TestPauseMode:          ld      a,(GamePaused)
 574  8449 FE 00                                cp      0
 575  844B 20 12                                jr      nz,.TestForResume
 576  844D 3A BD 92     .CheckViewMode:         ld      a,(ScreenIndex)                     ; we can only pause if not on screen view
 577  8450                                      ReturnIfAGTENusng       ScreenFront
 577  8450 FE 09       >                    cp    ScreenFront
 577  8452 D0          >                    ret	 nc
 578  8453 3E 40        .CheckPauseKey:         ld      a,c_Pressed_Freeze
 579  8455 CD 9D 90                             call    is_key_pressed
 580  8458 C0                                   ret     nz
 581  8459 3E FF        .PausePressed:          ld      a,$FF                               ; doesn't really matter if we were in pause already as resume is a different key
 582  845B 32 C6 92                             ld      (GamePaused),a
 583  845E C9                                   ret
 584  845F 3E 42        .TestForResume:         ld      a,c_Pressed_Resume                  ; In pause loop so we can check for resume key
 585  8461 CD 9D 90                             call    is_key_pressed
 586  8464 C0                                   ret     nz
 587  8465 AF           .ResumePressed:         xor     a
 588  8466 32 C6 92                             ld      (GamePaused),a                      ; Resume pressed to reset pause state
 589  8469 C9                                   ret
 590  846A
 591  846A 3E 46        TestQuit:               ld      a,c_Pressed_Quit
 592  846C CD 9D 90                             call    is_key_pressed
 593  846F C9                                   ret
 594  8470 0D           currentDemoShip:        DB      13;$12 ; 13 - corirollis
 595  8471
 596  8471
 597  8471              ;----------------------------------------------------------------------------------------------------------------------------------
 598  8471              UpdateShip:             ;  call    DEBUGSETNODES ;       call    DEBUGSETPOS
 599  8471 21 F5 84                             ld      hl,TidyCounter
 600  8474 35                                   dec     (hl)
 601  8475 C0                                   ret     nz
 602  8476 3E 10                                ld      a,16
 603  8478 32 F5 84                             ld      (TidyCounter),a
 604  847B                                      ; call    TIDY TIDY IS BROKEN
 605  847B                                     ; add AI in here too
 606  847B C9                                   ret
 607  847C
 608  847C F5           InitialiseShipAUnivB:   push    af
 609  847D 78                                   ld      a,b
 610  847E                                      MMUSelectUniverseA                          ; load up register into universe bank
 610  847E C6 46       >                     add    a,BankUNIVDATA0
 610  8480 ED 92 56    >                     nextreg UniverseMMU,       a
 611  8483 CD 25 CA                             call    ResetUBnkData                         ; call the routine in the paged in bank, each universe bank will hold a code copy local to it
 612  8486                                      MMUSelectShipBank1
 612  8486 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 613  848A F1                                   pop     af
 614  848B CD 6A E0                             call    CopyShipToUniverse
 615  848E C9                                   ret
 616  848F
 617  848F 21 0C C0     GetStationVectorToWork: ld      hl,UBnKxlo
 618  8492 11 D3 92                             ld      de,varVector9ByteWork
 619  8495 ED A0                                ldi
 620  8497 ED A0                                ldi
 621  8499 ED A0                                ldi
 622  849B ED A0                                ldi
 623  849D ED A0                                ldi
 624  849F ED A0                                ldi
 625  84A1 ED A0                                ldi
 626  84A3 ED A0                                ldi
 627  84A5 ED A0                                ldi
 628  84A7 2A D3 92     .CalcNormalToXX15:      ld      hl, (varVector9ByteWork)  ; X
 629  84AA ED 5B D6 92                          ld      de, (varVector9ByteWork+3); Y
 630  84AE ED 4B D9 92                          ld      bc, (varVector9ByteWork+6); Z
 631  84B2 7D                                   ld      a,l
 632  84B3 B3                                   or      e
 633  84B4 B1                                   or      c
 634  84B5 F6 01                                or      1
 635  84B7 DD 6F                                ld      ixl,a                   ; or all bytes and with 1 so we have at least a 1
 636  84B9 7C                                   ld      a,h
 637  84BA B2                                   or      d
 638  84BB B0                                   or      b                       ; or all high bytes but don't worry about 1 as its sorted on low bytes
 639  84BC C5           .MulBy2Loop:            push    bc
 640  84BD DD 45                                ld      b,ixl
 641  84BF CB 20                                sla     b                       ; Shift ixl left
 642  84C1 DD 68                                ld      ixl,b
 643  84C3 C1                                   pop     bc
 644  84C4 CB 17                                rl      a                       ; roll into a
 645  84C6 38 0E                                jr      c,.TA2                  ; if bit rolled out of rl a then we can't shift any more to the left
 646  84C8                                      ShiftHLLeft1                    ; Shift Left X
 646  84C8 CB 25       >			   sla l
 646  84CA CB 14       >			   rl  h
 647  84CC                                      ShiftDELeft1                    ; Shift Left Y
 647  84CC CB 23       >			   sla e
 647  84CE CB 12       >			   rl  d
 648  84D0                                      ShiftBCLeft1                    ; Shift Left Z
 648  84D0 CB 21       >			   sla c
 648  84D2 CB 10       >			   rl  b
 649  84D4 18 E6                                jr      .MulBy2Loop              ; no need to do jr nc as the first check looks for high bits across all X Y and Z
 650  84D6 3A D5 92     .TA2:                   ld      a,(varVector9ByteWork+2); x sign
 651  84D9 CB 3C                                srl     h
 652  84DB B4                                   or      h
 653  84DC 32 79 C0                             ld      (XX15VecX),a         ; note this is now a signed highbyte
 654  84DF 3A D8 92                             ld      a,(varVector9ByteWork+5); y sign
 655  84E2 CB 3A                                srl     d
 656  84E4 B2                                   or      d
 657  84E5 32 7A C0                             ld      (XX15VecY),a         ; note this is now a signed highbyte
 658  84E8 3A DB 92                             ld      a,(varVector9ByteWork+8); y sign
 659  84EB CB 38                                srl     b
 660  84ED B0                                   or      b
 661  84EE 32 7B C0                             ld      (XX15VecZ),a         ; note this is now a signed highbyte
 662  84F1 CD E7 A5                             call    normaliseXX1596fast
 663  84F4 C9                                   ret                             ; will return with a holding Vector Z
 664  84F5
 665  84F5 00           TidyCounter             DB  0
 666  84F6
 667  84F6                          INCLUDE "./debugMatrices.asm"
# file opened: ./debugMatrices.asm
   1+ 84F6
   2+ 84F6
   3+ 84F6 21 19 85     DEBUGSETNODES:          ld      hl,DEBUGUBNKDATA
   4+ 84F9 11 0C C0                             ld      de,UBnKxlo
   5+ 84FC 01 09 00                             ld      bc,9
   6+ 84FF ED B0                                ldir
   7+ 8501 21 22 85                             ld      hl,DEBUGROTMATDATA
   8+ 8504 11 15 C0                             ld      de,UBnkrotmatSidevX
   9+ 8507 01 12 00                             ld      bc,6*3
  10+ 850A ED B0                                ldir
  11+ 850C C9                                   ret
  12+ 850D
  13+ 850D 21 19 85     DEBUGSETPOS:            ld      hl,DEBUGUBNKDATA
  14+ 8510 11 0C C0                             ld      de,UBnKxlo
  15+ 8513 01 06 00                             ld      bc,9 - 3
  16+ 8516 ED B0                                ldir
  17+ 8518 C9                                   ret
  18+ 8519
  19+ 8519              ; culltest
  20+ 8519              ;DEBUGUBNKDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$31,	$03,	$00
  21+ 8519 00 00 00 00  DEBUGUBNKDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$5C,	$07,	$00
  21+ 851D 00 00 5C 07
  21+ 8521 00
  22+ 8522 00 60 00 00  DEBUGROTMATDATA:        db      $00,	$60,	$00,	$00,	$00,	$00
  22+ 8526 00 00
  23+ 8528 00 00 00 60                          db      $00,	$00,	$00,	$60,	$00,	$00
  23+ 852C 00 00
  24+ 852E 00 00 00 00                          db      $00,	$00,	$00,	$00,	$00,	$E0
  24+ 8532 00 E0
  25+ 8534
  26+ 8534              ; FAILS due to sharp angle, OK now
  27+ 8534              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$EF,	$03,	$00
  28+ 8534              ;DEBUGROTMATDATA:        db      $01,	$2F,	$B2,	$CC,	$4C,	$27
  29+ 8534              ;                        db      $17,	$46,	$87,	$3C,	$95,	$20
  30+ 8534              ;                        db      $E2,	$32,	$31,	$8C,	$EF,	$D1
  31+ 8534              ; TOP RIGHT CORNER Passes as python and cobra
  32+ 8534              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$5B,	$04,	$00
  33+ 8534              ;DEBUGROTMATDATA:        db      $E2,	$03,	$3A,	$16,	$F5,	$60
  34+ 8534              ;                        db      $D3,	$CE,	$F3,	$BA,	$4E,	$0F
  35+ 8534              ;                        db      $03,	$BE,	$4A,	$4B,	$DB,	$8C
  36+ 8534              ; Looks OK
  37+ 8534              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $EE,    $02,    $00
  38+ 8534              ;DEBUGROTMATDATA:        db      $35,    $d8,    $98,    $9f,    $b0,    $1a
  39+ 8534              ;                        db      $4B,    $26,    $CE,    $d6,    $60,    $16
  40+ 8534              ;                        db      $89,    $90,    $c4,    $9f,    $dd,    $d9
  41+ 8534              ;
  42+ 8534              ; Massive horizontal line
  43+ 8534              ; 15th line (or line 14 has corrodinates 05,00 to D8,00) which looks wrong
  44+ 8534              ; node array looks OK, looks liek its sorted as it was both -ve Y off screen fix added
  45+ 8534              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $BD,    $03,    $00
  46+ 8534              ;DEBUGROTMATDATA:        db      $59,    $CF,    $06,    $B6,    $61,    $8D
  47+ 8534              ;                        db      $AD,    $B1,    $97,    $4F,    $C9,    $98
  48+ 8534              ;                        db      $61,    $99,    $E0,    $0D,    $11,    $5C
  49+ 8534              ; Line lost in clipping
  50+ 8534              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $8B,    $04,    $00
  51+ 8534              ;DEBUGROTMATDATA:        db      $A3,    $4D,    $A9,    $28,    $F8,    $AF
  52+ 8534              ;                        db      $FB,    $97,    $8C,    $B5,    $FB,    $D0
  53+ 8534              ;                        db      $DB,    $3A,    $29,    $CA,    $29,    $1C
  54+ 8534              ;DEBUGUBNKDATA:          db      $5E,    $02,    $00,    $FE,    $00,    $FE,    $E5,    $09,    $00
  55+ 8534              ;DEBUGROTMATDATA:        db      $A6,    $88,    $89,    $BB,    $53,    $4D
  56+ 8534              ;                        db      $6D,    $D9,    $F0,    $99,    $BA,    $9E
  57+ 8534              ;                        db      $4A,    $A8,    $89,    $47,    $DF,    $33
  58+ 8534              ;
  59+ 8534              ;DEBUGUBNKDATA:          db      $ED,    $05,    $00,    $FE,    $00,    $FE,    $F1,    $0A,    $00
  60+ 8534              ;DEBUGROTMATDATA:        db      $1B,    $33,    $DE,    $B4,    $ED,    $C5
  61+ 8534              ;                        db      $73,    $C4,    $BC,    $1E,    $96,    $C4
  62+ 8534              ;                        db      $55,    $B9,    $35,    $D1,    $80,    $0F
  63+ 8534              ; top left off right issue
  64+ 8534              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $2F,    $03,    $00
  65+ 8534              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  66+ 8534              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  67+ 8534              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  68+ 8534              ; test middle of screen
  69+ 8534              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
  70+ 8534              ;
  71+ 8534              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  72+ 8534              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  73+ 8534              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  74+ 8534              ; test middle of screen futher away
  75+ 8534              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $02,    $00
  76+ 8534              ;
  77+ 8534              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  78+ 8534              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  79+ 8534              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  80+ 8534
  81+ 8534              ; Test left center clip still warping
  82+ 8534              ;DEBUGUBNKDATA:          db      $80,    $00,    $80,    $00,    $00,    $00,    $20,    $01,    $00
  83+ 8534              ;
  84+ 8534              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  85+ 8534              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  86+ 8534              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  87+ 8534              ; Test right center clip - seems to be warping values towards bottom of screen on clip
  88+ 8534              ;DEBUGUBNKDATA:          db      $80,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
  89+ 8534              ;
  90+ 8534              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  91+ 8534              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  92+ 8534              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  93+ 8534              ; Test top center clip test 1 - good test many ships fail
  94+ 8534              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $00,    $20,    $01,    $00
  95+ 8534              ;
  96+ 8534              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  97+ 8534              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  98+ 8534              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  99+ 8534              ; Test top center clip test 2 - Poss 2nd ship has an issue with a small line
 100+ 8534              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $60,    $00,    $00,    $2F,    $01,    $00
 101+ 8534              ;
 102+ 8534              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 103+ 8534              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 104+ 8534              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 105+ 8534              ; Test bottom center clip ; complet shambles as if its forcing cip to below 128
 106+ 8534              ; looks better now may have some clipping issues maybe ship data
 107+ 8534              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $80,    $20,    $01,    $00
 108+ 8534              ;
 109+ 8534              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 110+ 8534              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 111+ 8534 E6 01 81 AD                          db      $E6,    $01,    $81,    $AD,    $B0,    $55
 111+ 8538 B0 55
 112+ 853A              ; Test left top center clip
 113+ 853A
 114+ 853A              ; Test right top center clip
 115+ 853A              ; Test left bottom center clip
 116+ 853A              ; Test right bottom center clip
 117+ 853A
 118+ 853A              ; Tests with no clip
 119+ 853A              ;DEBUGUBNKDATA:          db      $39,    $00,    $00,    $43,    $00,    $00,    $2F,    $04,    $00
 120+ 853A              ;
 121+ 853A              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 122+ 853A              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 123+ 853A              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 124+ 853A              ;
 125+ 853A              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $1F,    $00,    $00
 126+ 853A              ;
 127+ 853A              ; UBNKPOs example 39,01,00,43,01,00,f4,03,00
 128+ 853A              ; rotmat  example b1, 83,ae,5d,b0,1a,5e,de,82,8a,69,16,70,99,52,19,dd,d9
 129+ 853A
# file closed: ./debugMatrices.asm
 668  853A
 669  853A
 670  853A              ;TODO Optimisation
 671  853A              ; Need this table to handle differnet events
 672  853A              ; 1-main loop update - just general updates specfic to that screen that are not galaxy or stars, e.g. update heat, console
 673  853A              ; cursor key, joystick press
 674  853A              ; cursor key, joystick press
 675  853A              ; non cursor keys presses
 676  853A              ;
 677  853A              ; First byte is now docked flag
 678  853A              ;
 679  853A              ; Padded to 8 bytes to allow a * 8 for addressing
 680  853A              ; Byte 0   - Docked flag  : 0 = not applicable (always read), 1 = only whilst docked, 2 = only when not docked, 3 = No keypress allowed
 681  853A              ; Byte 1   - Screen Id
 682  853A              ; Byte 2,3 - address of keypress table
 683  853A              ; Byte 4   - Bank with Display code
 684  853A              ; Byte 5,6 - Function for display
 685  853A              ; Byte 7,8 - Main loop update routine
 686  853A              ; Byte 9   - Draw stars Y/N
 687  853A              ; byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
 688  853A              ; byte 11  - Double Buffering 0 = no, 1 = yes
 689  853A              ; byte 12,13  - cursor key input routine
 690  853A              ; byte 14  - HyperspaceBlock - can not select this screen if in hyperpace - 00 can , 01 can not
 691  853A              ; byte 15    padding at the momnent (should add in an "AI enabled flag" for optimistation, hold previous value and on change create ships
 692  853A              ;                          0    1                 2                              3                               4                    5                            6                              7                     8                       9   10  11  12                          13                          14  15
 693  853A 00 00 C6 8F  ScreenKeyMap:           DB 0,   ScreenLocal     , low addr_Pressed_LocalChart,   high addr_Pressed_LocalChart,   BankMenuShrCht,      low draw_local_chart_menu,   high draw_local_chart_menu,    $00,                  $00,                    $00,$00,$00,low local_chart_cursors,    high local_chart_cursors,   $01,$00;low loop_local_chart_menu,   high loop_local_chart_menu
 693  853E 32 FC C3 00
 693  8542 00 00 00 00
 693  8546 5A C4 01 00
 694  854A 00 01 C4 8F  ScreenKeyGalactic:      DB 0,   ScreenGalactic  , low addr_Pressed_GalacticChrt, high addr_Pressed_GalacticChrt, BankMenuGalCht,      low draw_galactic_chart_menu,high draw_galactic_chart_menu, low loop_gc_menu,     high loop_gc_menu,      $00,$00,$00,low galctic_chart_cursors,  high galctic_chart_cursors, $01,$00
 694  854E 33 43 C1 62
 694  8552 C2 00 00 00
 694  8556 05 C3 01 00
 695  855A 01 02 C8 8F                          DB 1,   ScreenMarket    , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  low loop_market_menu, high loop_market_menu,  $00,$00,$00,$00,                        $00,                        $01,$00
 695  855E 36 43 C3 FA
 695  8562 C3 00 00 00
 695  8566 00 00 01 00
 696  856A 02 03 C8 8F                          DB 2,   ScreenMarketDsp , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00
 696  856E 36 43 C3 00
 696  8572 00 00 00 00
 696  8576 00 00 01 00
 697  857A 00 04 CA 8F  ScreenCmdr:             DB 0,   ScreenStatus    , low addr_Pressed_Status,       high addr_Pressed_Status,       BankMenuStatus,      low draw_status_menu,        high draw_status_menu,         low loop_STAT_menu,  high loop_STAT_menu,     $00,$00,$00,$00,                        $00,                        $01,$00
 697  857E 3F 1E CF 62
 697  8582 CF 00 00 00
 697  8586 00 00 01 00
 698  858A 00 05 CC 8F                          DB 0,   ScreenInvent    , low addr_Pressed_Inventory,    high addr_Pressed_Inventory,    BankMenuInvent,      low draw_inventory_menu,     high draw_inventory_menu,      $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00
 698  858E 34 F5 C1 00
 698  8592 00 00 00 00
 698  8596 00 00 01 00
 699  859A 00 06 DA 8F                          DB 0,   ScreenPlanet    , low addr_Pressed_PlanetData,   high addr_Pressed_PlanetData,   BankMenuSystem,      low draw_system_data_menu,   high draw_system_data_menu,    $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00
 699  859E 35 F0 C2 00
 699  85A2 00 00 00 00
 699  85A6 00 00 01 00
 700  85AA 01 07 C2 8F                          DB 1,   ScreenEquip     , low addr_Pressed_Equip,        high addr_Pressed_Equip,        BankMenuEquipS,      low draw_eqshp_menu,         high draw_eqshp_menu,          low loop_eqshp_menu,  high loop_eqshp_menu,   $00,$00,$00,$00,                        $00,                        $01,$00
 700  85AE 40 EA D3 86
 700  85B2 D4 00 00 00
 700  85B6 00 00 01 00
 701  85BA 01 08 BC 8F                          DB 1,   ScreenLaunch    , low addr_Pressed_Launch,       high addr_Pressed_Launch,       BankLaunchShip,      low draw_launch_ship,        high draw_launch_ship,         low loop_launch_ship, high loop_launch_ship,  $00,$01,$01,$00,                        $00,                        $01,$00
 701  85BE 41 79 C1 63
 701  85C2 C2 00 01 01
 701  85C6 00 00 01 00
 702  85CA 02 09 92 8F  ScreenKeyFront:         DB 2,   ScreenFront     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 702  85CE 3E 6A C0 00
 702  85D2 00 01 00 01
 702  85D6 72 C2 00 00
 703  85DA 02 0A 92 8F                          DB 2,   ScreenAft       , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 703  85DE 3E 6A C0 00
 703  85E2 00 01 00 01
 703  85E6 72 C2 00 00
 704  85EA 02 0B 92 8F                          DB 2,   ScreenLeft      , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 704  85EE 3E 6A C0 00
 704  85F2 00 01 00 01
 704  85F6 72 C2 00 00
 705  85FA 02 0C 92 8F                          DB 2,   ScreenRight     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 705  85FE 3E 6A C0 00
 705  8602 00 01 00 01
 705  8606 72 C2 00 00
 706  860A 03 0D FF FF                          DB 3,   ScreenDocking   , $FF,                           $FF,                            BankLaunchShip,      low draw_docking_ship,       high draw_docking_ship,        low loop_docking_ship,high loop_docking_ship, $00,$01,$01,$00,                        $00,                        $01,$00
 706  860E 41 F5 C1 98
 706  8612 C2 00 01 01
 706  8616 00 00 01 00
 707  861A 01 0E FF FF                          DB 1,   ScreenHyperspace, $FF,                           $FF,                            BankFrontView,       low draw_hyperspace,         high draw_hyperspace,          low loop_hyperspace,  high loop_hyperspace,   $00,$01,$01,$00
 707  861E 3E 2A C2 70
 707  8622 C2 00 01 01
 707  8626 00
 708  8627
 709  8627              ;               DB low addr_Pressed_Aft,          high addr_Pressed_Aft,          BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 710  8627              ;               DB low addr_Pressed_Left,         high addr_Pressed_Left,         BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 711  8627              ;               DB low addr_Pressed_Right,        high addr_Pressed_Right,        BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 712  8627              ScreenMapRow        EQU ScreenKeyGalactic - ScreenKeyMap
 713  8627              ScreenMapLen        EQU ($ - ScreenKeyMap) / ScreenMapRow
 714  8627              ScreenViewsStart    EQU (ScreenKeyFront - ScreenKeyMap)/ScreenMapRow
 715  8627 FF           ScreenTransitionForced  DB $FF
 716  8628                  INCLUDE "./GameEngine/resetUniverse.asm"
# file opened: ./GameEngine/resetUniverse.asm
   1+ 8628              ; Use bank 0 as source and bank 7 as write target
   2+ 8628              ResetUniv:              MODULE ResetUniv
   3+ 8628              ; Move bank 70 into page 0
   4+ 8628                                      MMUSelectCpySrcN BankUNIVDATA0	         ; master universe def in bank 0
   4+ 8628 ED 91 50 46 >                     nextreg DMACpySourceMMU,	BankUNIVDATA0
   5+ 862C 3E 01                                ld		a,1             				 ; we can read bank 0 as if it was rom
   6+ 862E 06 0C                                ld		b,12
   7+ 8630 C5           ResetCopyLoop:          push	bc
   8+ 8631                                      MMUSelectUniverseA			             ; copy from bank 0 to 71 to 12
   8+ 8631 C6 46       >                     add    a,BankUNIVDATA0
   8+ 8633 ED 92 56    >                     nextreg UniverseMMU,       a
   9+ 8636 F5                                   push	af
  10+ 8637 21 00 C0                             ld		hl,UniverseBankAddr
  11+ 863A 11 00 00                             ld		de,dmaCopySrcAddr
  12+ 863D 01 A6 1D                             ld		bc,UnivBankSize
  13+ 8640 CD 3D 8F                             call	memcopy_dma
  14+ 8643 F1                                   pop		af
  15+ 8644 C1                                   pop		bc
  16+ 8645 3C                                   inc		a
  17+ 8646 57                                   ld      d,a
  18+ 8647 C6 41                                add     "A"
  19+ 8649 32 0B C0                             ld      (StartOfUnivN),a
  20+ 864C 7A                                   ld      a,d
  21+ 864D 10 E1                                djnz	ResetCopyLoop
  22+ 864F C9                                   ret
  23+ 8650                                      ENDMODULE
  24+ 8650
  25+ 8650              ; Use bank 0 as source and bank 7 as write target
  26+ 8650              ResetGalaxy:            MODULE ResetGalaxy
  27+ 8650              ; Move bank 70 into page 0
  28+ 8650                                      MMUSelectCpySrcN BankGalaxyData0	     ; master universe def in bank 0 we can read bank 0 as if it was rom
  28+ 8650 ED 91 50 5B >                     nextreg DMACpySourceMMU,	BankGalaxyData0
  29+ 8654 3E 5C                                ld		a,BankGalaxyData1 			   	 ; and write to real location for galaxy data
  30+ 8656 06 07                                ld		b,7                              ; 8 galaxies but we start with galaxy 0
  31+ 8658 0E 01                                ld      c,1                              ;
  32+ 865A F5           ResetCopyLoop:          push	af                               ;
  33+ 865B C5                                   push	bc                               ;
  34+ 865C                                      MMUSelectGalaxyA    	                 ; copy from bank 0 to galaxy 1 to 7
  34+ 865C ED 92 57    >                     nextreg GalaxyDataMMU,       a
  35+ 865F 21 00 E0                             ld		hl,GalaxyDataAddr                ; using dma transfer
  36+ 8662 11 00 00                             ld		de,dmaCopySrcAddr                ; .
  37+ 8665 01 CD 1C                             ld		bc,GalaxyBankSize                ; .
  38+ 8668 CD 3D 8F                             call	memcopy_dma                      ; .
  39+ 866B C1                                   pop		bc                               ; .
  40+ 866C 21 0F E0                             ld      hl, galaxy_pg_cnt                ; write out the galaxy page nbr to the page so we can diagnose page swapping
  41+ 866F 79                                   ld      a,c                              ;
  42+ 8670 C6 30                                add     a, $30                           ; add $30 (48) to get ascii of galaxy nbr
  43+ 8672 77                                   ld      (hl),a                           ; .
  44+ 8673 0C                                   inc     c                                ; Do next bank
  45+ 8674 F1                                   pop     af                               ; .
  46+ 8675 3C                                   inc		a                                ; .
  47+ 8676 10 E2                                djnz	ResetCopyLoop                    ; .
  48+ 8678 C9                                   ret
  49+ 8679                                      ENDMODULE
  50+ 8679
  51+ 8679 06 08        SeedAllGalaxies:        ld          b,8
  52+ 867B 0E 5B                                ld          c,BankGalaxyData0
  53+ 867D C5           .SeedAllGalaxiesLoop:   push        bc
  54+ 867E 79                                   ld          a,c
  55+ 867F                                      MMUSelectGalaxyA
  55+ 867F ED 92 57    >                     nextreg GalaxyDataMMU,       a
  56+ 8682 CD 90 FC                             call        SeedGalaxy
  57+ 8685 C1                                   pop         bc
  58+ 8686 0C                                   inc         c
  59+ 8687 10 F4                                djnz        .SeedAllGalaxiesLoop
  60+ 8689 C9                                   ret
# file closed: ./GameEngine/resetUniverse.asm
 717  868A
 718  868A
 719  868A              ;----------------------------------------------------------------------------------------------------------------------------------
 720  868A CD 80 96     LaunchedFromStation:    call    ClearUnivSlotList
 721  868D 3E 01                                ld      a,1
 722  868F CD 8C 96                             call    SetSlot1ToSpaceStation              ; set slot 1 to space station
 723  8692                                      MMUSelectUniverseA                          ; Prep Target universe
 723  8692 C6 46       >                     add    a,BankUNIVDATA0
 723  8694 ED 92 56    >                     nextreg UniverseMMU,       a
 724  8697                                      MMUSelectShipBank1                          ; Bank in the ship model code
 724  8697 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 725  869B 3E 0D                                ld      a,CoriloisStation
 726  869D CD 0F E0                             call    GetShipBankId
 727  86A0                                      MMUSelectShipBankA                          ; Select the correct bank found
 727  86A0 ED 92 57    >					 nextreg ShipModelMMU,	    a
 728  86A3 78                                   ld      a,b                                 ; Select the correct ship
 729  86A4 CD 6A E0                             call    CopyShipToUniverse
 730  86A7 CD 3B CA     .BuiltStation:          call    ResetStationLaunch
 731  86AA AF           .NowInFlight:           xor     a
 732  86AB 32 C5 92                             ld      (DockedFlag),a
 733  86AE                                      ForceTransition ScreenFront
 733  86AE 3E 09       >                        ld      a,ScreenFront
 733  86B0 32 27 86    >                        ld      (ScreenTransitionForced), a
 734  86B3 CD 08 96                             call    ResetPlayerShip
 735  86B6 DD 01                                break
 736  86B8 C9                                   ret
 737  86B9
 738  86B9 3A 7B 85     InitialiseCommander:    ld      a,(ScreenCmdr+1)
 739  86BC DD 21 7A 85                          ld      ix,ScreenCmdr
 740  86C0 C3 CD 86                             jp      SetScreenAIX
 741  86C3
 742  86C3 3A CB 85     InitialiseFrontView:    ld      a,(ScreenKeyFront+1)
 743  86C6 DD 21 CA 85                          ld      ix,ScreenKeyFront
 744  86CA C3 CD 86                             jp      SetScreenAIX
 745  86CD              ; false ret here as we get it free from jp
 746  86CD
 747  86CD              ;----------------------------------------------------------------------------------------------------------------------------------
 748  86CD 32 BD 92     SetScreenAIX:           ld      (ScreenIndex),a                 ; Set screen index to a
 749  86D0                                      ClearForceTransition                    ; In case it was called by a brute force change in an update loop
 749  86D0 3E FF       >                        ld      a,$FF
 749  86D2 32 27 86    >                        ld      (ScreenTransitionForced),a
 750  86D5 32 BC 92                             ld      (ScreenChanged),a               ; Set screen changed to FF
 751  86D8 DD 7E 04                             ld      a,(ix+4)                        ; Screen Map Byte 4   - Bank with Display code
 752  86DB 32 06 81                             ld      (ScreenLoopBank+1),a            ; setup loop
 753  86DE 32 A4 80                             ld      (HandleBankSelect+1),a          ; setup cursor keys
 754  86E1                                      MMUSelectScreenA
 754  86E1 ED 92 56    >                     nextreg ScreenBankMMU,		a
 755  86E4 DD 7E 05                             ld      a,(ix+5)                        ; Screen Map Byte 5 - Function for display
 756  86E7 32 1B 87                             ld      (ScreenUpdateAddr+1),a
 757  86EA DD 7E 06                             ld      a,(ix+6)                        ; Screen Map Byte 6 - Function for display
 758  86ED 32 1C 87                             ld      (ScreenUpdateAddr+2),a
 759  86F0 DD 7E 07                             ld      a,(ix+7)                        ; Screen Map Byte 7 - Main loop update routine
 760  86F3 32 0B 81                             ld      (ScreenLoopJP+1),a
 761  86F6 DD 7E 08                             ld      a,(ix+8)                        ; Screen Map Byte 8 - Main loop update routine
 762  86F9 32 0C 81                             ld      (ScreenLoopJP+2),a
 763  86FC DD 7E 09                             ld      a,(ix+9)                        ; Screen Map Byte 9  - Draw stars Y/N
 764  86FF 32 BF 80                             ld      (CheckIfViewUpdate+1),a         ; Set flag to determine if we are on an exterior view
 765  8702 DD 7E 0A                             ld      a,(ix+10)                       ; Screen Map Byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
 766  8705 32 86 80                             ld      (InputBlockerCheck+1),a          ; Set flag to block transitions as needed e.g. launch screen
 767  8708 DD 7E 0B                             ld      a,(ix+11)                       ; Screen Map Byte 11  - Double Buffering 0 = no, 1 = yes
 768  870B 32 90 81                             ld      (DoubleBufferCheck+1),a
 769  870E DD 7E 0C                             ld      a,(ix+12)
 770  8711 32 A9 80                             ld      (CallCursorRoutine+1),a
 771  8714 DD 7E 0D                             ld      a,(ix+13)
 772  8717 32 AA 80                             ld      (CallCursorRoutine+2),a
 773  871A
 774  871A C3 00 00     ScreenUpdateAddr:       jp      $0000                          ; We can just drop out now and also get a free ret from caller
 775  871D              ;----------------------------------------------------------------------------------------------------------------------------------
 776  871D 3A BD 92     ViewKeyTest:            ld      a,(ScreenIndex)
 777  8720 4F                                   ld      c,a
 778  8721 06 0E                                ld      b,ScreenMapLen                  ; For now until add screens are added
 779  8723 DD 21 3A 85                          ld      ix,ScreenKeyMap
 780  8727 2A 68 92                             ld      hl,(InnerHyperCount)
 781  872A 7C                                   ld      a,h
 782  872B B5                                   or      l
 783  872C FD 67                                ld      iyh,a
 784  872E FD 7C        ViewScanLoop:           ld      a,iyh
 785  8730 A7           .HyperspaceCountdown:   and     a
 786  8731 28 08                                jr      z,.DockedFlag
 787  8733 DD 7E 0E                             ld      a,(ix+14)
 788  8736 FE 01                                cp      1
 789  8738 CA 7D 87                             jp      z,NotReadNextKey
 790  873B DD 7E 00     .DockedFlag:            ld      a,(ix+0)                        ; Screen Map Byte 0 Docked flag
 791  873E              ; 0 = not applicable (always read), 1 = only whilst docked, 2 = only when not docked, 3 = No keypress allowed
 792  873E FE 03                                cp      3                               ; if not selectable then don't scan this (becuase its a transition screen)
 793  8740 28 3B                                jr      z,NotReadNextKey                ;
 794  8742 FE 00                                cp      0                               ; if itr a always read skip docking check
 795  8744 28 14                                jr      z,.NoDocCheck
 796  8746 57           .DocCheck:              ld      d,a
 797  8747 3A C5 92                             ld      a,(DockedFlag)
 798  874A FE 00                                cp      0                               ; if we are docked
 799  874C 28 07                                jr      z,.NotDockedCheck
 800  874E 7A           .DockedCheck:           ld      a,d
 801  874F FE 01                                cp      1                               ; if we are docked and its a dock only then scan
 802  8751 20 2A                                jr      nz,NotReadNextKey
 803  8753 18 05                                jr      .NoDocCheck
 804  8755 7A           .NotDockedCheck:        ld      a,d
 805  8756 FE 02                                cp      2                               ; if we are not docked and its a flight only then scan
 806  8758 20 23                                jr      nz,NotReadNextKey
 807  875A DD 7E 01     .NoDocCheck:            ld      a,(ix+1)                        ; Screen Map Byte 1 Screen Id
 808  875D B9                                   cp      c                               ; is the index the current screen, if so skip the scan
 809  875E 5F                                   ld      e,a
 810  875F 28 1C                                jr      z,NotReadNextKey
 811  8761 DD 7E 02                             ld      a,(ix+2)                        ; Screen Map Byte 2 - address of keypress table
 812  8764 FE FF                                cp      $FF                             ; if upper byte is FF then we do not respond
 813  8766 28 15                                jr      z,NotReadNextKey
 814  8768 32 72 87                             ld      (ReadKeyAddr+1),a               ; Poke address into the ld hl,(....) below
 815  876B DD 7E 03                             ld      a,(ix+3)                        ; Screen Map Byte 3 - address of keypress table
 816  876E 32 73 87                             ld      (ReadKeyAddr+2),a
 817  8771 2A 00 00     ReadKeyAddr:            ld      hl,($0000)                      ; address is entry in the pointer table to the actual keypress
 818  8774 7E                                   ld      a,(hl)                          ; now fetch the actual keypress
 819  8775                                      IfAIsZeroGoto NotReadNextKey
 819  8775 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 819  8776 CA 7D 87    >				jp	z, NotReadNextKey
 820  8779 7B           .ValidScreenChange:     ld      a,e
 821  877A C3 CD 86                             jp      SetScreenAIX
 822  877D              ;--- CODE WILL NOT FALL TO HERE ---
 823  877D 11 10 00     NotReadNextKey:         ld      de,ScreenMapRow
 824  8780 DD 19                                add     ix,de                           ; we have only processed 3 of 8 bytes at here
 825  8782 10 AA                                djnz    ViewScanLoop
 826  8784 C9                                   ret
 827  8785
 828  8785 21 00 00     SetInitialShipPosition: ld      hl,$0000
 829  8788 22 0C C0                             ld      (UBnKxlo),hl
 830  878B 21 00 00                             ld      hl,$0000
 831  878E 22 0F C0                             ld      (UBnKylo),hl
 832  8791 21 B4 03                             ld      hl,$03B4
 833  8794 22 12 C0                             ld      (UBnKzlo),hl
 834  8797 AF                                   xor     a
 835  8798 32 0E C0                             ld      (UBnKxsgn),a
 836  879B 32 11 C0                             ld      (UBnKysgn),a
 837  879E 32 14 C0                             ld      (UBnKzsgn),a
 838  87A1              ;    call    Reset TODO
 839  87A1 CD BD CB                             call	InitialiseOrientation            ;#00;
 840  87A4 3E 01                                ld      a,1
 841  87A6 32 B0 92                             ld      (DELTA),a
 842  87A9 21 04 00                             ld      hl,4
 843  87AC 22 B1 92                             ld      (DELTA4),hl
 844  87AF C9                                   ret
 845  87B0
 846  87B0
 847  87B0                          INCLUDE "./Views/ConsoleDrawing.asm"
# file opened: ./Views/ConsoleDrawing.asm
   1+ 87B0              ; bc = start position, d = length, e = colour
   2+ 87B0 1E 10        Draw3LineBar:           ld      e,16
   3+ 87B2 C5 D5                                push    bc,,de
   4+ 87B4                                      MMUSelectLayer2
   4+ 87B4 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   5+ 87B8 CD 62 E2                             call    l2_draw_horz_line
   6+ 87BB D1 C1                                pop     bc,,de
   7+ 87BD 05                                   dec     b
   8+ 87BE C5 D5                                push    bc,,de
   9+ 87C0 1E 14                                ld      e,20
  10+ 87C2                                      MMUSelectLayer2
  10+ 87C2 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  11+ 87C6 CD 62 E2                             call    l2_draw_horz_line
  12+ 87C9 D1 C1                                pop     bc,,de
  13+ 87CB 05                                   dec     b
  14+ 87CC                                      MMUSelectLayer2
  14+ 87CC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  15+ 87D0 CD 62 E2                             call    l2_draw_horz_line
  16+ 87D3 C9                                   ret
  17+ 87D4
  18+ 87D4 1E 7C        DrawColourCodedBar:     ld      e,124
  19+ 87D6 FE 28                                cp      40
  20+ 87D8 30 18                                jr      nc,DrawColourEBar
  21+ 87DA 1E 54                                ld      e,84
  22+ 87DC FE 1E                                cp      30
  23+ 87DE 30 12                                jr      nc,DrawColourEBar
  24+ 87E0 1E D8                                ld      e,216
  25+ 87E2 FE 14                                cp      20
  26+ 87E4 1E EC                                ld      e,236
  27+ 87E6 FE 0A                                cp      10
  28+ 87E8 30 08                                jr      nc,DrawColourEBar
  29+ 87EA 1E E1                                ld      e,225
  30+ 87EC FE 05                                cp      5
  31+ 87EE 30 02                                jr      nc,DrawColourEBar
  32+ 87F0 1E E0                                ld      e,224
  33+ 87F2 C5 D5        DrawColourEBar:         push    bc,,de
  34+ 87F4                                      MMUSelectLayer2
  34+ 87F4 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  35+ 87F8 CD 62 E2                             call    l2_draw_horz_line
  36+ 87FB D1 C1                                pop     bc,,de
  37+ 87FD 05                                   dec     b
  38+ 87FE C5 D5                                push    bc,,de
  39+ 8800                                      MMUSelectLayer2
  39+ 8800 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  40+ 8804 CD 62 E2                             call    l2_draw_horz_line
  41+ 8807 D1 C1                                pop     bc,,de
  42+ 8809 05                                   dec     b
  43+ 880A                                      MMUSelectLayer2
  43+ 880A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  44+ 880E CD 62 E2                             call    l2_draw_horz_line
  45+ 8811 C9                                   ret
  46+ 8812
  47+ 8812                                      ; no ret needed as jp handles it
  48+ 8812
  49+ 8812
  50+ 8812
  51+ 8812
  52+ 8812 3A B0 92     UpdateConsole:          ld      a,(DELTA)
  53+ 8815 FE 00                                cp      0                           ; don't draw if there is nothing to draw
  54+ 8817 28 0C                                jr      z,.UpdateRoll
  55+ 8819 01 D1 84                             ld      bc,SpeedoStart
  56+ 881C 21 DF 95                             ld      hl,SpeedoMapping
  57+ 881F ED 31                                add     hl,a
  58+ 8821 56                                   ld      d,(hl)
  59+ 8822 CD B0 87                             call    Draw3LineBar
  60+ 8825 3A 71 92     .UpdateRoll:            ld      a,(ALP1)
  61+ 8828 FE 00                                cp      0
  62+ 882A CA 5E 88                             jp      z,.UpdatePitch
  63+ 882D 21 E0 8C                             ld      hl,RollMiddle
  64+ 8830 3A 72 92                             ld      a,(ALP2)
  65+ 8833 FE 00                                cp      0
  66+ 8835 CA 50 88                             jp     z,.PosRoll
  67+ 8838 16 00        .NegRoll:               ld      d,0
  68+ 883A 3A 71 92                             ld      a,(ALP1)
  69+ 883D CB 27                                sla     a
  70+ 883F 5F                                   ld      e,a
  71+ 8840 B7                                   or      a
  72+ 8841 ED 52                                sbc     hl,de
  73+ 8843 44 4D                                ld      bc,hl
  74+ 8845 3E E1                                ld      a,DialMiddleXPos
  75+ 8847 91                                   sub     c
  76+ 8848 57                                   ld      d,a
  77+ 8849 1E FF                                ld      e,$FF
  78+ 884B CD B0 87                             call    Draw3LineBar
  79+ 884E 18 0E                                jr      .UpdatePitch
  80+ 8850 01 E0 8C     .PosRoll:               ld      bc,RollMiddle
  81+ 8853 3A 71 92                             ld      a,(ALP1)
  82+ 8856 CB 27                                sla     a
  83+ 8858 57                                   ld      d,a
  84+ 8859 1E FF                                ld      e,$FF
  85+ 885B CD B0 87                             call    Draw3LineBar
  86+ 885E 3A 61 92     .UpdatePitch:           ld      a,(BET1)
  87+ 8861 FE 00                                cp      0
  88+ 8863 CA 98 88                             jp      z,.Fuel
  89+ 8866 21 E0 94                             ld      hl,PitchMiddle
  90+ 8869 3A 62 92                             ld      a,(BET2)
  91+ 886C FE 00                                cp      0
  92+ 886E CA 8A 88                             jp      z,.PosPitch
  93+ 8871 16 00        .NegPitch:              ld      d,0
  94+ 8873 3A 61 92                             ld      a,(BET1)
  95+ 8876 CB 27                                sla     a
  96+ 8878 5F                                   ld      e,a
  97+ 8879 B7                                   or      a
  98+ 887A ED 52                                sbc     hl,de
  99+ 887C 44 4D                                ld      bc,hl
 100+ 887E 3E E1                                ld      a,DialMiddleXPos
 101+ 8880 91                                   sub     c
 102+ 8881 57                                   ld      d,a
 103+ 8882 1E FF                                ld      e,$FF
 104+ 8884 CD B0 87                             call    Draw3LineBar
 105+ 8887 C3 98 88                             jp      .Fuel
 106+ 888A 01 E0 94     .PosPitch:              ld      bc,PitchMiddle
 107+ 888D 3A 61 92                             ld      a,(BET1)
 108+ 8890 CB 27                                sla     a
 109+ 8892 57                                   ld      d,a
 110+ 8893 1E FF                                ld      e,$FF
 111+ 8895 CD B0 87                             call    Draw3LineBar
 112+ 8898 3A F7 96     .Fuel:                  ld      a,(Fuel)
 113+ 889B CB 3F                                srl     a               ; divide by 4 to get range on screen
 114+ 889D 21 BA 95                             ld      hl,FuelMapping
 115+ 88A0 ED 31                                add     hl,a
 116+ 88A2 7E                                   ld      a,(hl)
 117+ 88A3 01 10 94                             ld      bc,FuelStart
 118+ 88A6 57                                   ld      d,a
 119+ 88A7 CD D4 87                             call    DrawColourCodedBar
 120+ 88AA 3A 9A 93     .ForeShield:            ld      a,(ForeShield)
 121+ 88AD CB 3F                                srl     a
 122+ 88AF CB 3F                                srl     a
 123+ 88B1 CB 3F                                srl     a
 124+ 88B3 01 10 84                             ld      bc,FShieldStart
 125+ 88B6 CD D4 87                             call    DrawColourCodedBar
 126+ 88B9 3A 9B 93     .AftShield:             ld      a,(AftShield)
 127+ 88BC CB 3F                                srl     a
 128+ 88BE CB 3F                                srl     a
 129+ 88C0 CB 3F                                srl     a
 130+ 88C2 01 10 8D                             ld      bc,AShieldStart
 131+ 88C5 57                                   ld      d,a
 132+ 88C6 CD D4 87                             call    DrawColourCodedBar  ;ld		(ForeShield),a
 133+ 88C9 3A 9C 93     .EnergyBars:            ld      a,(PlayerEnergy)
 134+ 88CC CB 3F                                srl     a                   ; energy = energy / 2 so 31 per bar
 135+ 88CE                                      CallIfALTNusng  31 + 1,.Draw1EnergyBar
 135+ 88CE FE 20       >                        cp      31 + 1
 135+ 88D0 DC 09 89    >                        call	c,.Draw1EnergyBar
 136+ 88D3                                      CallIfALTNusng  (31*2) + 1,.Draw2EnergyBars
 136+ 88D3 FE 3F       >                        cp      (31*2) + 1
 136+ 88D5 DC 15 89    >                        call	c,.Draw2EnergyBars
 137+ 88D8                                      CallIfALTNusng  (31*3) + 1,.Draw3EnergyBars
 137+ 88D8 FE 5E       >                        cp      (31*3) + 1
 137+ 88DA DC 2D 89    >                        call	c,.Draw3EnergyBars
 138+ 88DD 1E 18        .Draw4EnergyBars:       ld      e,24
 139+ 88DF D6 60                                sub     (32*3)
 140+ 88E1 57                                   ld      d,a
 141+ 88E2 01 D5 A5                             ld      bc,EnergyBar4Start
 142+ 88E5 CD F2 87                             call    DrawColourEBar
 143+ 88E8 16 1F                                ld      d,31
 144+ 88EA 1E 18                                ld      e,24
 145+ 88EC 01 D5 AD                             ld      bc,EnergyBar3Start
 146+ 88EF CD F2 87                             call    DrawColourEBar
 147+ 88F2 16 1F                                ld      d,31
 148+ 88F4 1E 18                                ld      e,24
 149+ 88F6 01 D5 B5                             ld      bc,EnergyBar2Start
 150+ 88F9 CD F2 87                             call    DrawColourEBar
 151+ 88FC 16 1F                                ld      d,31
 152+ 88FE 1E 18                                ld      e,24
 153+ 8900 01 D5 BD                             ld      bc,EnergyBar1Start
 154+ 8903 CD F2 87                             call    DrawColourEBar
 155+ 8906 C3 4E 89                             jp      .DoneEnergyBars
 156+ 8909 1E E0        .Draw1EnergyBar:        ld      e,224
 157+ 890B 57                                   ld      d,a
 158+ 890C 01 D5 BD                             ld      bc,EnergyBar1Start
 159+ 890F CD F2 87                             call    DrawColourEBar
 160+ 8912 C3 4E 89                             jp      .DoneEnergyBars
 161+ 8915 1E D8        .Draw2EnergyBars:       ld      e,216
 162+ 8917 D6 1F                                sub     31
 163+ 8919 57                                   ld      d,a
 164+ 891A 01 D5 B5                             ld      bc,EnergyBar2Start
 165+ 891D CD F2 87                             call    DrawColourEBar
 166+ 8920 16 1F                                ld      d,31
 167+ 8922 1E D8                                ld      e,216
 168+ 8924 01 D5 BD                             ld      bc,EnergyBar1Start
 169+ 8927 CD F2 87                             call    DrawColourEBar
 170+ 892A C3 4E 89                             jp      .DoneEnergyBars
 171+ 892D 1E 14        .Draw3EnergyBars:       ld      e,20
 172+ 892F D6 3E                                sub     31*2
 173+ 8931 57                                   ld      d,a
 174+ 8932 1E 14                                ld      e,20
 175+ 8934 01 D5 AD                             ld      bc,EnergyBar3Start
 176+ 8937 CD F2 87                             call    DrawColourEBar
 177+ 893A 16 1F                                ld      d,31
 178+ 893C 1E 14                                ld      e,20
 179+ 893E 01 D5 B5                             ld      bc,EnergyBar2Start
 180+ 8941 CD F2 87                             call    DrawColourEBar
 181+ 8944 16 1F                                ld      d,31
 182+ 8946 1E 14                                ld      e,20
 183+ 8948 01 D5 BD                             ld      bc,EnergyBar1Start
 184+ 894B CD F2 87                             call    DrawColourEBar
 185+ 894E              .DoneEnergyBars:
 186+ 894E
 187+ 894E
 188+ 894E
 189+ 894E              ; NEED ENERGY BAR
 190+ 894E              ;PlayerEnergy
 191+ 894E              ; BNEED LASER temp
 192+ 894E              ; NEED CABIN TEMP
 193+ 894E              ;NEED ALTITUDE
 194+ 894E              ; Draw compas - if in range draw station, else do planet
 195+ 894E C9           .DoneConsole:           ret
 196+ 894F
 197+ 894F              ScannerX                equ 128
 198+ 894F              ScannerY                equ 171
 199+ 894F              ScannerBottom           equ 190
 200+ 894F              ScannerTypeMissle       equ 2
 201+ 894F              ScannerXRangeOffset     equ $35
 202+ 894F              ScannerCenter           equ 127
 203+ 894F
 204+ 894F              ScannerDefault          equ 0
 205+ 894F              ScannerMissile          equ 2
 206+ 894F              ScannerStation          equ 4
 207+ 894F              ScannerEnemy            equ 6
 208+ 894F
 209+ 894F 10 1C 90 FC  ScannerColourTable:     DB  16,28,144,252,18,31,128,224
 209+ 8953 12 1F 80 E0
 210+ 8957
 211+ 8957              GetShipColor:           MACRO
 212+ 8957 ~                                    ld      a,(ShipTypeAddr)
 213+ 8957 ~                                    sla     a                            ; as its byte pairs * 2
 214+ 8957 ~                                    ld      hl,ScannerColourTable
 215+ 8957 ~                                    add     hl,a
 216+ 8957 ~                                    ld      a,(hl)
 217+ 8957                                      ENDM
 218+ 8957              GetShipColorBright:     MACRO
 219+ 8957 ~                                    ld      a,(ShipTypeAddr)
 220+ 8957 ~                                    sla     a                            ; as its byte pairs * 2
 221+ 8957 ~                                    inc     a
 222+ 8957 ~                                    ld      hl,ScannerColourTable
 223+ 8957 ~                                    add     hl,a
 224+ 8957 ~                                    ld      a,(hl)
 225+ 8957                                      ENDM
 226+ 8957
 227+ 8957              ; This will go though all the universe ship data banks and plot, for now we will just work on one bank
 228+ 8957              UpdateScannerShip:
 229+ 8957 3A 2C C0                             ld      a,(UBnKexplDsp)             ; if bit 4 is clear then ship should not be drawn
 230+ 895A CB 67                                bit     4,a                         ; .
 231+ 895C                                      ;DEBUG ret     z                           ; .
 232+ 895C 3A 1A C3                             ld      a,(ShipTypeAddr)            ; if its a planet or sun, do not display
 233+ 895F CB 7F                                bit     7,a
 234+ 8961 C0                                   ret     nz
 235+ 8962              ; DEBUG Add in station types later
 236+ 8962 2A 12 C0     .NotMissile:            ld      hl,(UBnKzlo)
 237+ 8965 ED 5B 0C C0                          ld      de,(UBnKxlo)
 238+ 8969 ED 4B 0F C0                          ld      bc,(UBnKylo)
 239+ 896D 7C                                   ld      a,h
 240+ 896E B2                                   or      d
 241+ 896F B0                                   or      b
 242+ 8970 E6 C0                                and     %11000000
 243+ 8972 C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 244+ 8973 3A 0E C0     .MakeX2Compliment:      ld      a,(UBnKxsgn)
 245+ 8976 CB 7F                                bit     7,a
 246+ 8978 28 04                                jr      z,.absXHi
 247+ 897A                                      NegD
 247+ 897A 7A          >                    ld      a,d
 247+ 897B ED 44       >                    neg
 247+ 897D 57          >                    ld      d,a
 248+ 897E 7A           .absXHi:                ld      a,d
 249+ 897F C6 80                                add     ScannerX
 250+ 8981 DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 251+ 8983 CB 3C        .ProcessZCoord:         srl     h
 252+ 8985 CB 3C                                srl     h
 253+ 8987 3A 14 C0     .MakeZ2Compliment:      ld      a,(UBnKzsgn)
 254+ 898A CB 7F                                bit     7,a
 255+ 898C 28 04                                jr      z,.absZHi
 256+ 898E                                      NegH
 256+ 898E 7C          >                    ld      a,h
 256+ 898F ED 44       >                    neg
 256+ 8991 67          >                    ld      h,a
 257+ 8992 3E AB        .absZHi:                ld      a,ScannerY
 258+ 8994 94                                   sub     h
 259+ 8995 FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 260+ 8997 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 261+ 8999 20 19                                jr      nz,.StickHasLength
 262+ 899B FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 263+ 899D FD 6F                                ld      iyl,a
 264+ 899F DD 7D                                ld      a,ixl
 265+ 89A1                                      GetShipColorBright
 265+ 89A1 3A 1A C3    >                        ld      a,(ShipTypeAddr)
 265+ 89A4 CB 27       >                        sla     a                            ; as its byte pairs * 2
 265+ 89A6 3C          >                        inc     a
 265+ 89A7 21 4F 89    >                        ld      hl,ScannerColourTable
 265+ 89AA ED 31       >                        add     hl,a
 265+ 89AC 7E          >                        ld      a,(hl)
 266+ 89AD                                      MMUSelectLayer2
 266+ 89AD ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 267+ 89B1 C3 EB 89                             jp      .NoStick
 268+ 89B4 3A 11 C0     .StickHasLength:        ld      a,(UBnKysgn)                ; if b  =  0 then no line
 269+ 89B7 CB 7F                                bit     7,a
 270+ 89B9 28 04                                jr      z,.absYHi
 271+ 89BB                                      NegB
 271+ 89BB 78          >                    ld      a,b
 271+ 89BC ED 44       >                    neg
 271+ 89BE 47          >                    ld      b,a
 272+ 89BF FD 7C        .absYHi:                ld      a,iyh
 273+ 89C1 90           .SetStickPos:           sub     b
 274+ 89C2                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
 274+ 89C2 FE BE       >                        cp      ScannerBottom
 274+ 89C4 DA C9 89    >                        jp		c, .StickOnScreen
 275+ 89C7 3E BE                                ld      a,ScannerBottom
 276+ 89C9 FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
 277+ 89CB                                      GetShipColor
 277+ 89CB 3A 1A C3    >                        ld      a,(ShipTypeAddr)
 277+ 89CE CB 27       >                        sla     a                            ; as its byte pairs * 2
 277+ 89D0 21 4F 89    >                        ld      hl,ScannerColourTable
 277+ 89D3 ED 31       >                        add     hl,a
 277+ 89D5 7E          >                        ld      a,(hl)
 278+ 89D6 DD 6F                                ld      ixl,a
 279+ 89D8 FD 44                                ld      b,iyh                       ; from row
 280+ 89DA DD 4C                                ld      c,ixh                       ; from col
 281+ 89DC FD 55                                ld      d,iyl                       ; to row
 282+ 89DE DD 5D                                ld      e,ixl                       ; colur will only be green or yellow for now
 283+ 89E0 E5                                   push    hl
 284+ 89E1                                      MMUSelectLayer2
 284+ 89E1 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 285+ 89E5 CD 0D E3                             call    l2_draw_vert_line_to
 286+ 89E8 E1                                   pop     hl
 287+ 89E9 23                                   inc     hl
 288+ 89EA 7E                                   ld      a,(hl)
 289+ 89EB FD 45        .NoStick:               ld      b,iyl                       ; row
 290+ 89ED DD 4C                                ld      c,ixh                       ; col
 291+ 89EF F5                                   push    af
 292+ 89F0 CD FF E0                             call    l2_plot_pixel
 293+ 89F3 F1                                   pop     af
 294+ 89F4 FD 45                                ld      b,iyl
 295+ 89F6 DD 4C                                ld      c,ixh
 296+ 89F8 0C                                   inc     c
 297+ 89F9 CD FF E0                             call    l2_plot_pixel
 298+ 89FC C9                                   ret
 299+ 89FD
 300+ 89FD
# file closed: ./Views/ConsoleDrawing.asm
 848  89FD
 849  89FD
 850  89FD
 851  89FD              ;.absXhi:
 852  89FD              ;                        ld      a,ScannerX
 853  89FD              ;                        JumpOnBitSet d,7,ScannerNegX
 854  89FD              ;                        add     a,e
 855  89FD              ;                        jp      ScannerZCoord
 856  89FD              ;ScannerNegX:            sub     e
 857  89FD              ;ScannerZCoord:          ld      e,a
 858  89FD              ;                        srl     c
 859  89FD              ;                        srl     c
 860  89FD              ;                        ld      a,ScannerY
 861  89FD              ;                        JumpOnBitSet b,7,ScannerNegZ
 862  89FD              ;                        sub     c
 863  89FD              ;                        jp      ScannerYCoord
 864  89FD              ;ScannerNegZ:            add     a,c
 865  89FD              ;ScannerYCoord:          ld      d,a                     ; now de = pixel pos d = y e = x  for base of stick X & Z , so need Y Stick height
 866  89FD              ;                        JumpOnBitSet h,7,ScannerStickDown
 867  89FD              ;                        sub     l                       ; a already holds actual Y
 868  89FD              ;                        JumpIfAGTENusng 128,ScannerHeightDone
 869  89FD              ;                        ld      a,128
 870  89FD              ;                        jp      ScannerHeightDone
 871  89FD              ;ScannerStickDown:       add     a,l
 872  89FD              ;                        JumpIfAGTENusng 191,ScannerHeightDone
 873  89FD              ;                        ld      a,191
 874  89FD              ;ScannerHeightDone:      ld      c,e            ; Now sort out line from point DE horzontal by a
 875  89FD              ;                        ld      b,d
 876  89FD              ;                        ld      d,a
 877  89FD              ;                        cp      b
 878  89FD              ;                        jp      z,Scanner0Height
 879  89FD              ;                        ld      e,194 ; Should be coloured based on status but this will do for now
 880  89FD              ;                        push    bc
 881  89FD              ;                        push    de
 882  89FD              ;                        MMUSelectLayer2
 883  89FD              ;                        call    l2_draw_vert_line_to
 884  89FD              ;                        pop     de
 885  89FD              ;                        pop     bc
 886  89FD              ;Scanner0Height:         ld      b,d
 887  89FD              ;                       push    bc
 888  89FD              ;                       ld      a,255
 889  89FD              ;                       MMUSelectLayer2
 890  89FD              ;                       call    l2_plot_pixel
 891  89FD              ;                       pop     bc
 892  89FD              ;                       inc     c
 893  89FD              ;                       ld      a,255
 894  89FD              ;                       MMUSelectLayer2
 895  89FD              ;                       call    l2_plot_pixel
 896  89FD C9                                   ret
 897  89FE
 898  89FE
 899  89FE AF           SeedGalaxy0:            xor     a
 900  89FF                                      MMUSelectGalaxyA
 900  89FF ED 92 57    >                     nextreg GalaxyDataMMU,       a
 901  8A02 DD 21 16 E0                          ld      ix,galaxy_data
 902  8A06 AF                                   xor		a
 903  8A07 32 B9 92                             ld		(XSAV),a
 904  8A0A CD 8A 97                             call    copy_galaxy_to_system
 905  8A0D DD E5        SeedGalaxy0Loop:        push    ix
 906  8A0F D1                                   pop     de
 907  8A10 21 A0 92                             ld      hl,SystemSeed
 908  8A13 CD 90 97                             call    copy_seed
 909  8A16 DD E5                                push    ix
 910  8A18 E1                                   pop     hl
 911  8A19 ED 34 08 00                          add     hl,8
 912  8A1D E5                                   push    hl
 913  8A1E DD E1                                pop     ix
 914  8A20 CD C5 97                             call    next_system_seed
 915  8A23 3A B9 92                             ld		a,(XSAV)
 916  8A26 3D                                   dec		a
 917  8A27 FE 00                                cp		0
 918  8A29 C8                                   ret		z
 919  8A2A 32 B9 92                             ld		(XSAV),a
 920  8A2D 20 DE                                jr      nz,SeedGalaxy0Loop
 921  8A2F C9                                   ret
 922  8A30
 923  8A30
 924  8A30
 925  8A30
 926  8A30                  ;include "./ModelRender/testdrawing.asm"
 927  8A30 00 00        XX12PVarQ			DW 0
 928  8A32 00 00        XX12PVarR			DW 0
 929  8A34 00 00        XX12PVarS			DW 0
 930  8A36 00 00        XX12PVarResult1		DW 0
 931  8A38 00 00        XX12PVarResult2		DW 0
 932  8A3A 00 00        XX12PVarResult3		DW 0
 933  8A3C 00           XX12PVarSign2		DB 0
 934  8A3D 00           XX12PVarSign1		DB 0								; Note reversed so BC can do a little endian fetch
 935  8A3E 00           XX12PVarSign3		DB 0
 936  8A3F
 937  8A3F                  include "./Maths/Utilities/XX12EquNodeDotOrientation.asm"
# file opened: ./Maths/Utilities/XX12EquNodeDotOrientation.asm
   1+ 8A3F              ; We enter here with hl pointing at XX16 and bc = XX15 value
   2+ 8A3F              ; so xx12 = XX15 * XX16 row
   3+ 8A3F              XX12ProcessOneRow:
   4+ 8A3F              XX12CalcXCell:
   5+ 8A3F ED 4B 79 C0          ld		bc,(UBnkXScaled)
   6+ 8A43 5E           		ld		e,(hl)								    ; get orientation ZX
   7+ 8A44 23           		inc		hl
   8+ 8A45 56           		ld		d,(hl)                                  ; so now e = xx16 value d = xx16 sign
   9+ 8A46 7A           		ld		a,d
  10+ 8A47 A8                   xor     b
  11+ 8A48 E6 80        		and		SignOnly8Bit                            ; a = XX 16 sign
  12+ 8A4A DD 67        		ld		ixh,a								    ; orientation sign to ixh
  13+ 8A4C 78           		ld		a,b                                     ; now make bc abs bc
  14+ 8A4D E6 7F        		and		SignMask8Bit
  15+ 8A4F 47           		ld		b,a                                     ; bc = abs(bc) now
  16+ 8A50 E5           		push	hl
  17+ 8A51 16 00                ld      d,0                                     ; d = value
  18+ 8A53 60           		ld		h,b
  19+ 8A54 69           		ld		l,c
  20+ 8A55 CD AB A2     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  21+ 8A58 22 36 8A     		ld		(XX12PVarResult1),hl				    ; T = 16 bit result, we only want to use high byte later
  22+ 8A5B DD 7C        		ld		a,ixh
  23+ 8A5D 32 3D 8A     		ld		(XX12PVarSign1),a					    ; S = sign  not sign 1 and 2 are reversed in memory so that fetchign back will put 1 in high byte 2 in low byte
  24+ 8A60 E1           		pop		hl
  25+ 8A61              XX12CalcYCell:
  26+ 8A61 ED 4B 7B C0          ld		bc,(UBnkYScaled)
  27+ 8A65 23           		inc		hl
  28+ 8A66 5E           		ld		e,(hl)							    	; get orientation ZX
  29+ 8A67 23           		inc		hl
  30+ 8A68 56           		ld		d,(hl)
  31+ 8A69 7A           		ld		a,d
  32+ 8A6A A8                   xor     b
  33+ 8A6B E6 80        		and		SignOnly8Bit
  34+ 8A6D DD 67        		ld		ixh,a								    ; XX16 orientation sign to ixh
  35+ 8A6F 78           		ld		a,b                                     ; now make bc abs bc
  36+ 8A70 E6 7F        		and		SignMask8Bit
  37+ 8A72 47           		ld		b,a                                     ; bc = abs(bc) now
  38+ 8A73 E5           		push	hl
  39+ 8A74 16 00                ld      d,0                                     ; d = value
  40+ 8A76 60           		ld		h,b
  41+ 8A77 69           		ld		l,c
  42+ 8A78 CD AB A2     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  43+ 8A7B 22 38 8A     		ld		(XX12PVarResult2),hl				    ; T = 16 bit result
  44+ 8A7E DD 7C        		ld		a,ixh
  45+ 8A80 32 3C 8A     		ld		(XX12PVarSign2),a					    ; S = sign
  46+ 8A83 E1           		pop		hl
  47+ 8A84              XX12CalcZCell:
  48+ 8A84 ED 4B 7D C0          ld		bc,(UBnkZScaled)
  49+ 8A88 23           		inc		hl
  50+ 8A89 5E           		ld		e,(hl)								    ; get orientation ZX
  51+ 8A8A 23           		inc		hl
  52+ 8A8B 56           		ld		d,(hl)
  53+ 8A8C 7A           		ld		a,d
  54+ 8A8D A8                   xor     b
  55+ 8A8E E6 80        		and		SignOnly8Bit
  56+ 8A90 DD 67        		ld		ixh,a								    ; orientation sign to ixh
  57+ 8A92 78           		ld		a,b                                     ; now make bc abs bc
  58+ 8A93 E6 7F        		and		SignMask8Bit
  59+ 8A95 47           		ld		b,a                                     ; bc = abs(bc) now
  60+ 8A96 16 00                ld      d,0                                     ; d = value
  61+ 8A98 60           		ld		h,b
  62+ 8A99 69           		ld		l,c
  63+ 8A9A CD AB A2     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  64+ 8A9D 22 3A 8A     		ld		(XX12PVarResult3),hl				    ; T = 16 bit result
  65+ 8AA0 DD 7C        		ld		a,ixh
  66+ 8AA2 32 3E 8A     		ld		(XX12PVarSign3),a					    ; S = sign
  67+ 8AA5              XX12CalcCellResult:
  68+ 8AA5 2A 36 8A     		ld		hl,(XX12PVarResult1)				    ; X Cell Result
  69+ 8AA8 ED 5B 38 8A  		ld		de,(XX12PVarResult2)				    ; Y Cell Result
  70+ 8AAC ED 4B 3C 8A  		ld		bc,(XX12PVarSign2)					    ; b = var 1 result sign c = var 2 result signs
  71+ 8AB0              XX12MSBOnly:
  72+ 8AB0 6C           		ld		l,h									    ; now move results into lower byte so / 256
  73+ 8AB1 5A           		ld		e,d									    ; for both results
  74+ 8AB2 AF           		xor		a									    ;
  75+ 8AB3 67           		ld		h,a									    ;
  76+ 8AB4 57           		ld		d,a									    ; so set high byte to 0
  77+ 8AB5 CD E6 A7     		call	ADDHLDESignBC                           ;  XX12ProcessCalcHLPlusDESignBC		; returns with HL = result1 + result 2 signed in a
  78+ 8AB8 47           		ld		b,a									    ; move sign into b ready for next calc
  79+ 8AB9 3A 3E 8A     		ld		a,(XX12PVarSign3)					    ; result of the calcZ cell
  80+ 8ABC 4F           		ld		c,a									    ; goes into c to align with DE
  81+ 8ABD ED 5B 3A 8A  		ld		de,(XX12PVarResult3)				    ; now add result to Result 3
  82+ 8AC1 5A           		ld		e,d                                     ; d = result /256
  83+ 8AC2 16 00        		ld		d,0									    ; and only us high byte
  84+ 8AC4 CD E6 A7     		call	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; returns with HL = result and a = sign
  85+ 8AC7 C9           		ret											    ; hl = result, a = sign
  86+ 8AC8              								    ; hl = result, a = sign
  87+ 8AC8
  88+ 8AC8              XX12EquNodeDotTransMat:							    ; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
  89+ 8AC8              ;...X cell
  90+ 8AC8 21 4C C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
  91+ 8ACB CD 3F 8A             call    XX12ProcessOneRow                   ; hl = result, a = sign
  92+ 8ACE 47           		ld		b,a                                 ; b = sign
  93+ 8ACF 7C           		ld		a,h                                 ; a = high byte
  94+ 8AD0 B0           		or		b
  95+ 8AD1 32 80 C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
  96+ 8AD4 7D           		ld		a,l                                 ; the result will be in the lower byte now
  97+ 8AD5 32 7F C0             ld      (UBnkXX12xLo),a						; that is result done for
  98+ 8AD8              ;...Y cell
  99+ 8AD8 21 54 C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 100+ 8ADB CD 3F 8A             call    XX12ProcessOneRow
 101+ 8ADE 47           		ld		b,a
 102+ 8ADF 7C           		ld		a,h
 103+ 8AE0              ;		ld		a,l
 104+ 8AE0 B0           		or		b
 105+ 8AE1 32 82 C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 106+ 8AE4 7D           		ld		a,l                                 ; the result will be in the lower byte now
 107+ 8AE5 32 81 C0             ld      (UBnkXX12yLo),a						; that is result done for
 108+ 8AE8              ;...Z cell
 109+ 8AE8 21 5C C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 110+ 8AEB CD 3F 8A             call    XX12ProcessOneRow
 111+ 8AEE 47           		ld		b,a
 112+ 8AEF 7C                   ld		a,h
 113+ 8AF0              ;		ld		a,l
 114+ 8AF0 B0           		or		b
 115+ 8AF1 32 84 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 116+ 8AF4 7D           		ld		a,l                                 ; the result will be in the lower byte now
 117+ 8AF5 32 83 C0             ld      (UBnkXX12zLo),a						; that is result done for
 118+ 8AF8 C9                   ret
 119+ 8AF9
 120+ 8AF9              XX12EquNodeDotOrientation:							; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 121+ 8AF9              ;...X cell
 122+ 8AF9 21 4C C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
 123+ 8AFC CD 3F 8A             call    XX12ProcessOneRow                   ; hl = result, a = sign
 124+ 8AFF 47           		ld		b,a                                 ; b = sign
 125+ 8B00 7C           		ld		a,h                                 ; a = high byte
 126+ 8B01 B0           		or		b
 127+ 8B02 32 80 C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 128+ 8B05 7D           		ld		a,l                                 ; the result will be in the lower byte now
 129+ 8B06 32 7F C0             ld      (UBnkXX12xLo),a						; that is result done for
 130+ 8B09              ;...Y cell
 131+ 8B09 21 54 C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 132+ 8B0C CD 3F 8A             call    XX12ProcessOneRow
 133+ 8B0F 47           		ld		b,a
 134+ 8B10 7C           		ld		a,h
 135+ 8B11              ;		ld		a,l
 136+ 8B11 B0           		or		b
 137+ 8B12 32 82 C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 138+ 8B15 7D           		ld		a,l                                 ; the result will be in the lower byte now
 139+ 8B16 32 81 C0             ld      (UBnkXX12yLo),a						; that is result done for
 140+ 8B19              ;...Z cell
 141+ 8B19 21 5C C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 142+ 8B1C CD 3F 8A             call    XX12ProcessOneRow
 143+ 8B1F 47           		ld		b,a
 144+ 8B20 7C                   ld		a,h
 145+ 8B21              ;		ld		a,l
 146+ 8B21 B0           		or		b
 147+ 8B22 32 84 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 148+ 8B25 7D           		ld		a,l                                 ; the result will be in the lower byte now
 149+ 8B26 32 83 C0             ld      (UBnkXX12zLo),a						; that is result done for
 150+ 8B29 C9                   ret
 151+ 8B2A
 152+ 8B2A              XX12EquNodeDotXX16:					         		; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 153+ 8B2A              ;...X cell
 154+ 8B2A 21 34 C0     		ld		hl,UBnkTransmatSidevX     			; process orientation matrix row 0
 155+ 8B2D CD 3F 8A             call    XX12ProcessOneRow                   ; hl = result, a = sign
 156+ 8B30 47           		ld		b,a                                 ; b = sign
 157+ 8B31 7C           		ld		a,h                                 ; a = high byte
 158+ 8B32 B0           		or		b
 159+ 8B33 32 80 C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 160+ 8B36 7D           		ld		a,l                                 ; the result will be in the lower byte now
 161+ 8B37 32 7F C0             ld      (UBnkXX12xLo),a						; that is result done for
 162+ 8B3A              ;...Y cell
 163+ 8B3A 21 3A C0     		ld		hl,UBnkTransmatRoofvX     			; process orientation matrix row 1
 164+ 8B3D CD 3F 8A             call    XX12ProcessOneRow
 165+ 8B40 47           		ld		b,a
 166+ 8B41 7C           		ld		a,h
 167+ 8B42              ;		ld		a,l
 168+ 8B42 B0           		or		b
 169+ 8B43 32 82 C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 170+ 8B46 7D           		ld		a,l                                 ; the result will be in the lower byte now
 171+ 8B47 32 81 C0             ld      (UBnkXX12yLo),a						; that is result done for
 172+ 8B4A              ;...Z cell
 173+ 8B4A 21 40 C0     		ld		hl,UBnkTransmatNosevX     			; process orientation matrix row 1
 174+ 8B4D CD 3F 8A             call    XX12ProcessOneRow
 175+ 8B50 47           		ld		b,a
 176+ 8B51 7C                   ld		a,h
 177+ 8B52              ;		ld		a,l
 178+ 8B52 B0           		or		b
 179+ 8B53 32 84 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 180+ 8B56 7D           		ld		a,l                                 ; the result will be in the lower byte now
 181+ 8B57 32 83 C0             ld      (UBnkXX12zLo),a						; that is result done for
 182+ 8B5A C9                   ret
# file closed: ./Maths/Utilities/XX12EquNodeDotOrientation.asm
 938  8B5B                  include "ModelRender/CopyXX12ToXX15.asm"
# file opened: ModelRender/CopyXX12ToXX15.asm
   1+ 8B5B 21 7F C0     CopyXX12ToXX15:         ld      hl,XX12
   2+ 8B5E 11 79 C0                             ld      de,XX15
   3+ 8B61 01 06 00                             ld      bc,6
   4+ 8B64 ED B0                                ldir
   5+ 8B66 C9                                   ret
   6+ 8B67
   7+ 8B67 21 7F C0     CopyXX12ToXX12Save:     ld      hl,XX12
   8+ 8B6A 11 85 C0                             ld      de,XX12Save
   9+ 8B6D 01 06 00                             ld      bc,6
  10+ 8B70 ED B0                                ldir
  11+ 8B72 C9                                   ret
  12+ 8B73
  13+ 8B73 21 85 C0     CopyXX12SaveToXX12:     ld      hl,XX12Save
  14+ 8B76 11 7F C0                             ld      de,XX12
  15+ 8B79 01 06 00                             ld      bc,6
  16+ 8B7C ED B0                                ldir
  17+ 8B7E C9                                   ret
  18+ 8B7F
  19+ 8B7F 21 7F C0     CopyXX12ToXX12Save2:    ld      hl,XX12
  20+ 8B82 11 8B C0                             ld      de,XX12Save2
  21+ 8B85 01 06 00                             ld      bc,6
  22+ 8B88 ED B0                                ldir
  23+ 8B8A C9                                   ret
  24+ 8B8B
  25+ 8B8B 21 8B C0     CopyXX12Save2ToXX12:    ld      hl,XX12Save2
  26+ 8B8E 11 7F C0                             ld      de,XX12
  27+ 8B91 01 06 00                             ld      bc,6
  28+ 8B94 ED B0                                ldir
  29+ 8B96 C9                                   ret
  30+ 8B97
# file closed: ModelRender/CopyXX12ToXX15.asm
 939  8B97                  include "ModelRender/CopyXX15ToXX12.asm"
# file opened: ModelRender/CopyXX15ToXX12.asm
   1+ 8B97 21 79 C0     CopyXX15ToXX12:         ld		hl,XX15
   2+ 8B9A 11 7F C0                             ld      de,XX12
   3+ 8B9D 01 06 00                             ld      bc,6
   4+ 8BA0 ED B0                                ldir
   5+ 8BA2 C9                                   ret
   6+ 8BA3
   7+ 8BA3
   8+ 8BA3
   9+ 8BA3 21 79 C0     CopyXX15ToXX15Save:     ld		hl,XX15
  10+ 8BA6 11 95 C0                             ld      de,XX15Save
  11+ 8BA9 01 06 00                             ld      bc,6
  12+ 8BAC ED B0                                ldir
  13+ 8BAE C9                                   ret
  14+ 8BAF
  15+ 8BAF 21 95 C0     CopyXX15SaveToXX15:     ld		hl,XX15Save
  16+ 8BB2 11 79 C0                             ld      de,XX15
  17+ 8BB5 01 06 00                             ld      bc,6
  18+ 8BB8 ED B0                                ldir
  19+ 8BBA C9                                   ret
  20+ 8BBB
  21+ 8BBB 21 79 C0     CopyXX15ToXX15Save2:    ld		hl,XX15
  22+ 8BBE 11 9D C0                             ld      de,XX15Save2
  23+ 8BC1 01 06 00                             ld      bc,6
  24+ 8BC4 ED B0                                ldir
  25+ 8BC6 C9                                   ret
  26+ 8BC7
  27+ 8BC7 21 9D C0     CopyXX15Save2ToXX15:    ld		hl,XX15Save2
  28+ 8BCA 11 79 C0                             ld      de,XX15
  29+ 8BCD 01 06 00                             ld      bc,6
  30+ 8BD0 ED B0                                ldir
  31+ 8BD2 C9                                   ret
  32+ 8BD3
# file closed: ModelRender/CopyXX15ToXX12.asm
 940  8BD3                  include "./Maths/Utilities/ScaleXX16Matrix197.asm"
# file opened: ./Maths/Utilities/ScaleXX16Matrix197.asm
   1+ 8BD3              ScaleXX16Matrix197:
   2+ 8BD3 06 09        	ld		b,9                 ; Interate though all 9 matrix elements
   3+ 8BD5 0E C5        	ld		c,ConstNorm         ; c = 197
   4+ 8BD7 21 34 C0     	ld		hl,UBnkTransmatSidev ; within XX16 (transmat)
   5+ 8BDA              .ScaleXX16Loop:
   6+ 8BDA 7E           	ld		a,(hl)              ; set DE = matrix value
   7+ 8BDB 5F           	ld		e,a                 ;
   8+ 8BDC 23           	inc		hl                  ;
   9+ 8BDD 7E           	ld		a,(hl)              ;
  10+ 8BDE 57           	ld		d,a                 ;
  11+ 8BDF E6 80            and     SignOnly8Bit        ; A holds high still to we can strip out sign bit
  12+ 8BE1 DD 6F        	ld		ixl,a				; retain for sign bit
  13+ 8BE3              	ShiftDELeft1				; carry now holds sign bit and DE = De * 2, this will in effect strip off the sign bit automatically
  13+ 8BE3 CB 23       >			   sla e
  13+ 8BE5 CB 12       >			   rl  d
  14+ 8BE7 7A               ld      a,d                 ; a = high byte after x 2
  15+ 8BE8 C5           	push	bc                  ; save BC  counter and constant 197
  16+ 8BE9 E5           	push	hl                  ; save HL
  17+ 8BEA CD E5 A3     	call	DIV16Amul256dCUNDOC	; result in BC = A*256 / 197 or D *512 / 197 = 2.6 * vector element, effectivley the result will always be in c
  18+ 8BED E1           	pop		hl
  19+ 8BEE 2B               dec     hl                  ; move back to low byte
  20+ 8BEF 71               ld      (hl),c              ; save result in low byte as we want to preserve high byte sign
  21+ 8BF0 23               inc     hl                  ; move back to high byte
  22+ 8BF1              ;    ld      a,(hl)
  23+ 8BF1              ;    and     $80
  24+ 8BF1 DD 7D            ld      a,ixl
  25+ 8BF3 77               ld      (hl),a              ; write back just sign bit
  26+ 8BF4 C1           	pop		bc                  ; retrieve both counter and constant 197
  27+ 8BF5 23               inc     hl                  ; no to next vertex value
  28+ 8BF6 10 E2        	djnz	.ScaleXX16Loop
  29+ 8BF8 C9           	ret
  30+ 8BF9
# file closed: ./Maths/Utilities/ScaleXX16Matrix197.asm
 941  8BF9
 942  8BF9                  include "./Universe/StarRoutines.asm"
# file opened: ./Universe/StarRoutines.asm
   1+ 8BF9              ;note: DIV16Amul256dCUNDOC as per
   2+ 8BF9              ;                                   BC = A0
   3+ 8BF9              ;                                   DE = 0C
   4+ 8BF9              ;                                   so BC = a * 256 / C
   5+ 8BF9
   6+ 8BF9              ; We can cheat here, Speed is always 0 or positive
   7+ 8BF9              ; z postion will always be positive if we can see it
   8+ 8BF9
   9+ 8BF9 EB           InitStarAtHL:           ex      de,hl
  10+ 8BFA CD 4E 97                             call    doRND
  11+ 8BFD EB                                   ex      de,hl
  12+ 8BFE F6 08                                or      8
  13+ 8C00 77                                   ld      (hl),a
  14+ 8C01 E6 7F                                and     $7F
  15+ 8C03 23                                   inc     hl
  16+ 8C04 77                                   ld      (hl),a
  17+ 8C05 EB                                   ex      de,hl
  18+ 8C06 CD 4E 97                             call    doRND
  19+ 8C09 EB                                   ex      de,hl
  20+ 8C0A 0F                                   rrca
  21+ 8C0B E6 80                                and     $80
  22+ 8C0D B6                                   or      (hl)
  23+ 8C0E 77                                   ld      (hl),a
  24+ 8C0F 23                                   inc     hl
  25+ 8C10 EB                                   ex      de,hl
  26+ 8C11 CD 4E 97                             call    doRND
  27+ 8C14 EB                                   ex      de,hl
  28+ 8C15 F6 04                                or      4
  29+ 8C17 77                                   ld      (hl),a
  30+ 8C18 23                                   inc     hl
  31+ 8C19 E6 7F                                and     $7F
  32+ 8C1B 77                                   ld      (hl),a
  33+ 8C1C EB                                   ex      de,hl
  34+ 8C1D CD 4E 97                             call    doRND
  35+ 8C20 EB                                   ex      de,hl
  36+ 8C21 0F                                   rrca
  37+ 8C22 E6 80                                and     $80
  38+ 8C24 B6                                   or      (hl)
  39+ 8C25 77                                   ld      (hl),a
  40+ 8C26 23                                   inc     hl
  41+ 8C27 EB                                   ex      de,hl
  42+ 8C28 CD 4E 97                             call    doRND
  43+ 8C2B EB                                   ex      de,hl
  44+ 8C2C F6 90                                or      144
  45+ 8C2E 77                                   ld      (hl),a
  46+ 8C2F 23                                   inc     hl
  47+ 8C30 F6 70                                or      %01110000
  48+ 8C32 E6 7F                                and     $7f     ; bodge
  49+ 8C34 77                                   ld      (hl),a
  50+ 8C35 23                                   inc     hl
  51+ 8C36 C9                                   ret
  52+ 8C37
  53+ 8C37 EB           InitHyperStarAtHL:      ex      de,hl
  54+ 8C38 CD 4E 97                             call    doRND
  55+ 8C3B CB 27                                sla     a
  56+ 8C3D CB 27                                sla     a                ; so its * 4 as we have a blank spot
  57+ 8C3F EB                                   ex      de,hl
  58+ 8C40 E6 F8                                and     %11111000
  59+ 8C42 77                                   ld      (hl),a
  60+ 8C43 E6 7F                                and     $7F
  61+ 8C45 23                                   inc     hl
  62+ 8C46 77                                   ld      (hl),a
  63+ 8C47 EB                                   ex      de,hl
  64+ 8C48 CD 4E 97                             call    doRND
  65+ 8C4B EB                                   ex      de,hl
  66+ 8C4C 0F                                   rrca
  67+ 8C4D E6 80                                and     $80
  68+ 8C4F B6                                   or      (hl)
  69+ 8C50 77                                   ld      (hl),a
  70+ 8C51 23                                   inc     hl
  71+ 8C52 EB                                   ex      de,hl
  72+ 8C53 CD 4E 97                             call    doRND
  73+ 8C56 CB 27                                sla     a
  74+ 8C58 CB 27                                sla     a               ; so its * 4 as we have a blank spot
  75+ 8C5A EB                                   ex      de,hl
  76+ 8C5B E6 F8                                and     %11111000
  77+ 8C5D 77                                   ld      (hl),a
  78+ 8C5E 23                                   inc     hl
  79+ 8C5F E6 7F                                and     $7F
  80+ 8C61 77                                   ld      (hl),a
  81+ 8C62 EB                                   ex      de,hl
  82+ 8C63 CD 4E 97                             call    doRND
  83+ 8C66 EB                                   ex      de,hl
  84+ 8C67 0F                                   rrca
  85+ 8C68 E6 80                                and     $80
  86+ 8C6A B6                                   or      (hl)
  87+ 8C6B 77                                   ld      (hl),a
  88+ 8C6C 23                                   inc     hl
  89+ 8C6D EB                                   ex      de,hl
  90+ 8C6E CD 4E 97                             call    doRND
  91+ 8C71 EB                                   ex      de,hl
  92+ 8C72 F6 5F                                or      95
  93+ 8C74 77                                   ld      (hl),a
  94+ 8C75 23                                   inc     hl
  95+ 8C76 F6 70                                or      %01110000
  96+ 8C78 E6 7F                                and     $7f     ; bodge
  97+ 8C7A 77                                   ld      (hl),a
  98+ 8C7B 23                                   inc     hl
  99+ 8C7C C9                                   ret
 100+ 8C7D
 101+ 8C7D              ; we could cheat, flip the sign of DE and just add but its not very optimised
 102+ 8C7D 7C           StarsSUBHLDESigned:     ld      a,h
 103+ 8C7E E6 80                                and     SignOnly8Bit
 104+ 8C80 47                                   ld      b,a                         ;save sign bit in b
 105+ 8C81 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 106+ 8C82                                      JumpIfNegative .SUBHLDEOppSGN        ;Signs are opposite therefore we can add
 106+ 8C82 FA B0 8C    >                        jp		m, .SUBHLDEOppSGN
 107+ 8C85 78           .SUBHLDESameSigns:      ld      a,b
 108+ 8C86 B2                                   or      d
 109+ 8C87                                      JumpIfNegative .SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 109+ 8C87 FA 91 8C    >                        jp		m, .SUBHLDESameNeg
 110+ 8C8A B7                                   or      a
 111+ 8C8B ED 52                                sbc     hl,de
 112+ 8C8D                                      JumpIfNegative .SUBHLDESameOvrFlw
 112+ 8C8D FA A4 8C    >                        jp		m, .SUBHLDESameOvrFlw
 113+ 8C90 C9                                   ret
 114+ 8C91 7C           .SUBHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 115+ 8C92 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 116+ 8C94 67                                   ld      h,a
 117+ 8C95 7A                                   ld      a,d
 118+ 8C96 E6 7F                                and     SignMask8Bit
 119+ 8C98 57                                   ld      d,a
 120+ 8C99 B7                                   or      a
 121+ 8C9A ED 52                                sbc     hl,de
 122+ 8C9C                                      JumpIfNegative .SUBHLDESameOvrFlw
 122+ 8C9C FA A4 8C    >                        jp		m, .SUBHLDESameOvrFlw
 123+ 8C9F 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 124+ 8CA0 F6 80                                or      SignOnly8Bit
 125+ 8CA2 67                                   ld      h,a
 126+ 8CA3 C9                                   ret
 127+ 8CA4              .SUBHLDESameOvrFlw:     NegHL
 127+ 8CA4 AF          >                    xor a
 127+ 8CA5 95          >                    sub l
 127+ 8CA6 6F          >                    ld l,a
 127+ 8CA7 9F          >                    sbc a,a
 127+ 8CA8 94          >                    sub h
 127+ 8CA9 67          >                    ld h,a
 128+ 8CAA 78                                   ld      a,b
 129+ 8CAB EE 80                                xor     SignOnly8Bit                ; flip sign bit
 130+ 8CAD B4                                   or      h
 131+ 8CAE 67                                   ld      h,a                         ; recover sign
 132+ 8CAF C9                                   ret
 133+ 8CB0 B7           .SUBHLDEOppSGN:         or      a
 134+ 8CB1 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 135+ 8CB2 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 136+ 8CB4 67                                   ld      h,a
 137+ 8CB5 7A                                   ld      a,d
 138+ 8CB6 E6 7F                                and     SignMask8Bit
 139+ 8CB8 57                                   ld      d,a
 140+ 8CB9 19                                   add     hl,de
 141+ 8CBA 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 142+ 8CBB B4                                   or      h
 143+ 8CBC 67                                   ld      h,a                         ; set the previou sign value
 144+ 8CBD C9                                   ret
 145+ 8CBE
 146+ 8CBE 7C           StarsADDHLDESigned:     ld      a,h
 147+ 8CBF E6 80                                and     SignOnly8Bit
 148+ 8CC1 47                                   ld      b,a                         ;save sign bit in b
 149+ 8CC2 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 150+ 8CC3                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
 150+ 8CC3 FA DB 8C    >                        jp		m, .ADDHLDEOppSGN
 151+ 8CC6 78           .ADDHLDESameSigns:      ld      a,b
 152+ 8CC7 B2                                   or      d
 153+ 8CC8                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
 153+ 8CC8 FA CD 8C    >                        jp		m, .ADDHLDESameNeg
 154+ 8CCB 19                                   add     hl,de
 155+ 8CCC C9                                   ret
 156+ 8CCD 7C           .ADDHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 157+ 8CCE E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 158+ 8CD0 67                                   ld      h,a
 159+ 8CD1 7A                                   ld      a,d
 160+ 8CD2 E6 7F                                and     SignMask8Bit
 161+ 8CD4 57                                   ld      d,a
 162+ 8CD5 19                                   add     hl,de
 163+ 8CD6 3E 80                                ld      a,SignOnly8Bit
 164+ 8CD8 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 165+ 8CD9 67                                   ld      h,a
 166+ 8CDA C9                                   ret
 167+ 8CDB 7C           .ADDHLDEOppSGN:         ld      a,h                         ; here HL and DE are opposite  so if we enter here then signs are the same so we clear the 16th bit
 168+ 8CDC E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 169+ 8CDE 67                                   ld      h,a
 170+ 8CDF 7A                                   ld      a,d
 171+ 8CE0 E6 7F                                and     SignMask8Bit
 172+ 8CE2 57                                   ld      d,a
 173+ 8CE3 B7                                   or      a
 174+ 8CE4 ED 52                                sbc     hl,de
 175+ 8CE6 38 04                                jr      c,.ADDHLDEOppInvert
 176+ 8CE8 78           .ADDHLDEOppSGNNoCarry:  ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 177+ 8CE9 B4                                   or      h
 178+ 8CEA 67                                   ld      h,a                         ; set the previou sign value
 179+ 8CEB C9                                   ret
 180+ 8CEC              .ADDHLDEOppInvert:      NegHL
 180+ 8CEC AF          >                    xor a
 180+ 8CED 95          >                    sub l
 180+ 8CEE 6F          >                    ld l,a
 180+ 8CEF 9F          >                    sbc a,a
 180+ 8CF0 94          >                    sub h
 180+ 8CF1 67          >                    ld h,a
 181+ 8CF2 78                                   ld      a,b
 182+ 8CF3 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 183+ 8CF5 B4                                   or      h
 184+ 8CF6 67                                   ld      h,a                         ; recover sign
 185+ 8CF7 C9                                   ret
 186+ 8CF8              ;----------------------------------------------------------------------------------------------------------------------------------
 187+ 8CF8 06 0B        InitialiseStars:        ld      b,MaxNumberOfStars
 188+ 8CFA 78                                   ld      a,b
 189+ 8CFB 32 D1 93                             ld      (NumberOfStarsNOSTM),a
 190+ 8CFE 21 1E 95                             ld      hl,varDust
 191+ 8D01 CD F9 8B     .InitStarsLoop:         call    InitStarAtHL
 192+ 8D04 10 FB                                djnz    .InitStarsLoop
 193+ 8D06 C9                                   ret
 194+ 8D07              ;----------------------------------------------------------------------------------------------------------------------------------
 195+ 8D07 06 0B        InitialiseHyperStars:   ld      b,MaxNumberOfStars
 196+ 8D09 78                                   ld      a,b
 197+ 8D0A 32 D1 93                             ld      (NumberOfStarsNOSTM),a
 198+ 8D0D 21 1E 95                             ld      hl,varDust
 199+ 8D10 CD 37 8C     .InitStarsLoop:         call    InitHyperStarAtHL
 200+ 8D13 10 FB                                djnz    .InitStarsLoop
 201+ 8D15 C9                                   ret
 202+ 8D16              ;----------------------------------------------------------------------------------------------------------------------------------
 203+ 8D16              StarsForward:          ; break
 204+ 8D16 3A D1 93                             ld      a,(NumberOfStarsNOSTM)
 205+ 8D19 47                                   ld      b,a                                 ; get the number of stars to process
 206+ 8D1A FD 21 1E 95                          ld      iy,varDust                          ; hl is now a pointer to the dust array
 207+ 8D1E C5           StarProcessLoop:        push    bc                                  ; save counter +1
 208+ 8D1F FD 7E 05     .Qequ64XSpeedDivZHi:    ld      a,(iy+5)
 209+ 8D22 5F                                   ld      e,a
 210+ 8D23 16 00                                ld      d,0                                 ; de = zhi/256
 211+ 8D25 3A B0 92                             ld      a,(DELTA)
 212+ 8D28 FE 00                                cp      0
 213+ 8D2A 20 01                                jr      nz,.NormalSpeed
 214+ 8D2C 3C                                   inc     a                                   ; so the is at lest some dust movement
 215+ 8D2D 47           .NormalSpeed:           ld      b,a
 216+ 8D2E 0E 00                                ld      c,0                                 ; bc = delta * 256
 217+ 8D30 CD 59 A4                             call    BC_Div_DE                           ; BC = BC.DE , HL = remainder
 218+ 8D33                                      ShiftHLRight1
 218+ 8D33 CB 3C       >			   srl h
 218+ 8D35 CB 1D       >			   rr  l
 219+ 8D37                                      ShiftHLRight1                               ; hl = remainder/2 so now 64 * speed / zhi
 219+ 8D37 CB 3C       >			   srl h
 219+ 8D39 CB 1D       >			   rr  l
 220+ 8D3B 7D                                   ld      a,l                                 ;
 221+ 8D3C F6 01                                or      1                                   ; so ensure A is at least 1 for ambient movement
 222+ 8D3E DD 6F                                ld      ixl,a                               ; preserve A which is also VarQ = 64 * speed / zhi
 223+ 8D40 FD 6E 04 FD  .ZequZMinusSpeedX64:    ld      hl,(iy+4)                           ; hl = z
 223+ 8D44 66 05
 224+ 8D46 ED 5B B1 92                          ld      de, (DELTA4)                         ; de = delta4 i.e. speed * 64 pre computed
 225+ 8D4A CD 7D 8C                             call    StarsSUBHLDESigned
 226+ 8D4D                                      JumpOnBitSet h,7,ResetStar
 226+ 8D4D CB 7C       >                        bit 	7,h
 226+ 8D4F C2 A4 8E    >                        jp      nz,ResetStar
 227+ 8D52 FD 75 04 FD                          ld      (iy+4),hl
 227+ 8D56 74 05
 228+ 8D58 FD 6E 00 FD  .XEquXPlusXhiMulQ       ld      hl,(iy+0)                           ; hl  = x
 228+ 8D5C 66 01
 229+ 8D5E 7C                                   ld      a,h                                 ;
 230+ 8D5F E6 7F                                and     $7F                                 ;
 231+ 8D61 57                                   ld      d,a                                 ; d = abs(x hi)
 232+ 8D62 DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 233+ 8D64 ED 30                                mul                                         ; de =  abs(x hi) * Q
 234+ 8D66 7C                                   ld      a,h                                 ;
 235+ 8D67 E6 80                                and     $80                                 ;
 236+ 8D69 B2                                   or      d                                   ; set sign bit in d
 237+ 8D6A 57                                   ld      d,a                                 ;
 238+ 8D6B CD BE 8C                             call    StarsADDHLDESigned                  ; x = x + (x hi/256 * Q)
 239+ 8D6E 7C                                   ld      a,h
 240+ 8D6F E6 7F                                and     $7F
 241+ 8D71                                      JumpIfAGTENusng $70, ResetStar
 241+ 8D71 FE 70       >                        cp     $70
 241+ 8D73 D2 A4 8E    >                        jp		nc,ResetStar
 242+ 8D76 FD 75 00 FD                          ld      (iy+0),hl                           ;
 242+ 8D7A 74 01
 243+ 8D7C FD 6E 02 FD  .YEquYPlusYhiMulQ       ld      hl,(iy+2)                           ; hl  = y
 243+ 8D80 66 03
 244+ 8D82 7C                                   ld      a,h                                 ;
 245+ 8D83 E6 7F                                and     $7F                                 ;
 246+ 8D85 57                                   ld      d,a                                 ; d = abs(y hi)
 247+ 8D86 DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 248+ 8D88 ED 30                                mul                                         ; de =  abs(y hi) * Q
 249+ 8D8A 7C                                   ld      a,h                                 ;
 250+ 8D8B E6 80                                and     $80                                 ;
 251+ 8D8D B2                                   or      d                                   ; set sign bit in d
 252+ 8D8E 57                                   ld      d,a                                 ;
 253+ 8D8F CD BE 8C                             call    StarsADDHLDESigned                  ; y = y + (x hi/256 * Q)
 254+ 8D92 7C                                   ld      a,h
 255+ 8D93 E6 7F                                and     $7F
 256+ 8D95                                      JumpIfAGTENusng $60, ResetStar
 256+ 8D95 FE 60       >                        cp     $60
 256+ 8D97 D2 A4 8E    >                        jp		nc,ResetStar
 257+ 8D9A 7C                                   ld      a,h
 258+ 8D9B E6 80                                and     $80
 259+ 8D9D 20 06                                jr      nz,.NoSecondCheck
 260+ 8D9F 7C                                   ld      a,h
 261+ 8DA0                                      JumpIfAGTENusng $20, ResetStar
 261+ 8DA0 FE 20       >                        cp     $20
 261+ 8DA2 D2 A4 8E    >                        jp		nc,ResetStar
 262+ 8DA5 FD 75 02 FD  .NoSecondCheck:         ld      (iy+2),hl                           ;
 262+ 8DA9 74 03
 263+ 8DAB              ; Now roll
 264+ 8DAB              ;  6. x = x - alpha * y / 256
 265+ 8DAB 2A 71 92     .XRoll:                 ld      hl,(ALP1)                           ; h = sign, l = magnitude
 266+ 8DAE 7D                                   ld      a,l
 267+ 8DAF FE 00                                cp      0
 268+ 8DB1 28 4C                                jr      z,.NoRoll                           ; don;t roll if magnitude is 0
 269+ 8DB3                                      ;break
 270+ 8DB3                                      ;ld      a,$80
 271+ 8DB3                                      ;xor     l                                   ; l = flipped sign as we are rotating stars not us
 272+ 8DB3 E5                                   push    hl
 273+ 8DB4 7C                                   ld      a,h
 274+ 8DB5 E6 80                                and     $80
 275+ 8DB7 4F           .rxSaveAlphaSign:       ld      c,a                                 ; save alpha sign in c
 276+ 8DB8 55           .rxDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 277+ 8DB9 FD 7E 03                             ld      a,(iy+3)                            ; get high byte from x coord
 278+ 8DBC 5F                                   ld      e,a
 279+ 8DBD E6 80                                and     $80
 280+ 8DBF 47           .rxBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 281+ 8DC0 7B           .rxEEquABSignX:         ld      a,e
 282+ 8DC1 E6 7F                                and     $7F
 283+ 8DC3 5F                                   ld      e,a                                 ; save abs x hi in e
 284+ 8DC4 ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 285+ 8DC6 79                                   ld      a,c
 286+ 8DC7 A8                                   xor     b                                   ; handle muliple sign bits
 287+ 8DC8 B2                                   or      d
 288+ 8DC9 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 289+ 8DCA FD 6E 00 FD                          ld      hl,(iy+0)                           ; h = iy+1, l = iy+0
 289+ 8DCE 66 01
 290+ 8DD0 CD 7D 8C                             call    StarsSUBHLDESigned                  ; we are usign add, so may need to fip sign?
 291+ 8DD3 FD 75 00 FD                          ld      (iy+0),hl
 291+ 8DD7 74 01
 292+ 8DD9              ;  5. y = y + alpha * x / 256
 293+ 8DD9              .YRoll:                 ;break
 294+ 8DD9 E1                                   pop     hl                                  ; h = sign, l = magnitude
 295+ 8DDA 7C                                   ld      a,h
 296+ 8DDB E6 80                                and     $80
 297+ 8DDD 4F           .rySaveAlphaSign:       ld      c,a                                 ; save alpha sign in c
 298+ 8DDE 55           .ryDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 299+ 8DDF FD 7E 01                             ld      a,(iy+1)                            ; get high byte from x coord
 300+ 8DE2 5F                                   ld      e,a
 301+ 8DE3 E6 80                                and     $80
 302+ 8DE5 47           .ryBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 303+ 8DE6 7B           .ryEEquABSignX:         ld      a,e
 304+ 8DE7 E6 7F                                and     $7F
 305+ 8DE9 5F                                   ld      e,a                                 ; save abs x hi in e
 306+ 8DEA ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 307+ 8DEC 79                                   ld      a,c
 308+ 8DED A8                                   xor     b                                   ; handle muliple sign bits
 309+ 8DEE B2                                   or      d
 310+ 8DEF 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 311+ 8DF0 FD 6E 02 FD                          ld      hl,(iy+2)                           ; h = iy+1, l = iy+0
 311+ 8DF4 66 03
 312+ 8DF6 CD BE 8C                             call    StarsADDHLDESigned                  ; we are usign add, so may need to fip sign?
 313+ 8DF9 FD 75 02 FD                          ld      (iy+2),hl
 313+ 8DFD 74 03
 314+ 8DFF 3A 61 92     .NoRoll:                ld      a,(BET1)
 315+ 8E02 FE 00                                cp      0
 316+ 8E04 28 22                                jr      z,.NoPitch
 317+ 8E06              ;  8. y = y - beta * 256
 318+ 8E06 57           .YPitch:                ld      d,a                                 ; d = BET1
 319+ 8E07 FD 7E 02                             ld      a,(iy+2)
 320+ 8E0A 5F                                   ld      e,a                                 ; e = Y HI
 321+ 8E0B ED 30                                mul                                         ; de = BET1 * YHi so now D = BETA & YHI / 256
 322+ 8E0D 5F                                   ld      e,a
 323+ 8E0E ED 30                                mul                                         ; so now de = (BETA & Yhi) ^ 2
 324+ 8E10                                      ShiftDELeft1                                ; de = 2 * ((BETA & Yhi) ^ 2)
 324+ 8E10 CB 23       >			   sla e
 324+ 8E12 CB 12       >			   rl  d
 325+ 8E14 3A 63 92                             ld      a,(BET2FLIP)                        ; get inverted Sign
 326+ 8E17 B2                                   or      d
 327+ 8E18 57                                   ld      d,a                                 ; de = - (2 * ((BETA & Yhi) ^ 2))
 328+ 8E19 FD 6E 02 FD                          ld      hl,(iy+2)
 328+ 8E1D 66 03
 329+ 8E1F CD BE 8C                             call    StarsADDHLDESigned
 330+ 8E22 FD 75 02 FD                          ld      (iy+2),hl
 330+ 8E26 74 03
 331+ 8E28              ; now work out screen pos
 332+ 8E28              ; Note two optimistations, write to layer 2 - we get a free removal via double buffer cls
 333+ 8E28              ; read z dept than determine hw many pixesl to plot, e.g. 1,2,3,4
 334+ 8E28              ;        pop     de
 335+ 8E28               ;       call    ProjectStarXToScreen
 336+ 8E28                                      ;pop     de
 337+ 8E28              .NoPitch:
 338+ 8E28 FD 7E 01     .ProjectStar:           ld      a,(iy+1)
 339+ 8E2B 6F                                   ld      l,a
 340+ 8E2C E6 7F                                and     $7F
 341+ 8E2E                                      JumpOnBitSet l,7,StarNegXPt
 341+ 8E2E CB 7D       >                        bit 	7,l
 341+ 8E30 C2 39 8E    >                        jp      nz,StarNegXPt
 342+ 8E33 C6 80                                add     a,$80
 343+ 8E35 4F                                   ld      c,a
 344+ 8E36 C3 3E 8E                             jp      StarDoneX
 345+ 8E39 47           StarNegXPt:             ld      b,a
 346+ 8E3A 3E 80                                ld      a,$80
 347+ 8E3C 90                                   sub     b
 348+ 8E3D 4F                                   ld      c,a
 349+ 8E3E FD 7E 03     StarDoneX:              ld      a,(iy+3)
 350+ 8E41 6F                                   ld      l,a
 351+ 8E42 E6 7F                                and     $7F
 352+ 8E44                                      JumpOnBitSet l,7,StarNegYPt
 352+ 8E44 CB 7D       >                        bit 	7,l
 352+ 8E46 C2 4F 8E    >                        jp      nz,StarNegYPt
 353+ 8E49 C6 60                                add     a,$60
 354+ 8E4B 47                                   ld      b,a
 355+ 8E4C C3 54 8E                             jp      StarDoneY
 356+ 8E4F 47           StarNegYPt:             ld      b,a
 357+ 8E50 3E 60                                ld      a,$60
 358+ 8E52 90                                   sub     b
 359+ 8E53 47                                   ld      b,a
 360+ 8E54 3E FC        StarDoneY:              ld      a,$FC
 361+ 8E56 C5                                   push    bc
 362+ 8E57              .DrawStar:              MMUSelectLayer2
 362+ 8E57 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 363+ 8E5B CD FF E0                             call    l2_plot_pixel
 364+ 8E5E FD 7E 05                             ld      a,(iy+5)
 365+ 8E61 C1                                   pop    bc
 366+ 8E62                                      JumpIfAGTENusng $60,EndofStarsLoop
 366+ 8E62 FE 60       >                        cp     $60
 366+ 8E64 D2 94 8E    >                        jp		nc,EndofStarsLoop
 367+ 8E67 3E D8                                ld      a,$D8
 368+ 8E69 0C                                   inc     c
 369+ 8E6A C5                                   push    bc
 370+ 8E6B                                      MMUSelectLayer2
 370+ 8E6B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 371+ 8E6F CD FF E0                             call    l2_plot_pixel
 372+ 8E72 FD 7E 05                             ld      a,(iy+5)
 373+ 8E75 C1                                   pop    bc
 374+ 8E76                                      JumpIfAGTENusng $37,EndofStarsLoop
 374+ 8E76 FE 37       >                        cp     $37
 374+ 8E78 D2 94 8E    >                        jp		nc,EndofStarsLoop
 375+ 8E7B 3E B4                                ld      a,$B4
 376+ 8E7D 04                                   inc     b
 377+ 8E7E C5                                   push    bc
 378+ 8E7F                                      MMUSelectLayer2
 378+ 8E7F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 379+ 8E83 CD FF E0                             call    l2_plot_pixel
 380+ 8E86 FD 7E 05                             ld      a,(iy+5)
 381+ 8E89 C1                                   pop    bc
 382+ 8E8A 3E B4                                ld      a,$B4
 383+ 8E8C 0D                                   dec     c
 384+ 8E8D                                      MMUSelectLayer2
 384+ 8E8D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 385+ 8E91 CD FF E0                             call    l2_plot_pixel
 386+ 8E94 C1           EndofStarsLoop:         pop     bc                                      ;  0
 387+ 8E95 FD E5                                push    iy                                      ; +1
 388+ 8E97 E1                                   pop     hl                                      ;  0
 389+ 8E98 ED 34 06 00                          add     hl,6
 390+ 8E9C E5           NextStarLoop2:          push    hl                                      ; +1
 391+ 8E9D FD E1                                pop     iy                                      ;  0
 392+ 8E9F 05                                   dec     b
 393+ 8EA0 C2 1E 8D                             jp      nz,StarProcessLoop
 394+ 8EA3 C9                                   ret
 395+ 8EA4              ResetStar:              ;break
 396+ 8EA4                                      ;pop     de
 397+ 8EA4 C1                                   pop     bc                                      ; 0
 398+ 8EA5 3A D1 93                             ld      a,(NumberOfStarsNOSTM)
 399+ 8EA8 90                                   sub     b
 400+ 8EA9 57                                   ld      d,a
 401+ 8EAA 1E 06                                ld      e,6
 402+ 8EAC ED 30                                mul
 403+ 8EAE 21 1E 95                             ld      hl,varDust
 404+ 8EB1 19                                   add     hl,de
 405+ 8EB2 CD F9 8B                             call    InitStarAtHL
 406+ 8EB5 C3 9C 8E                             jp      NextStarLoop2
 407+ 8EB8              ;----------------------------------------------------------------------------------------------------------------------------------
 408+ 8EB8 FD 4E 00     ProjectStarXToScreen:   ld      c,(iy+0)
 409+ 8EBB FD 7E 01                             ld      a,(iy+1)
 410+ 8EBE 6F                                   ld      l,a
 411+ 8EBF E6 7F                                and     $7F
 412+ 8EC1 47                                   ld      b,a
 413+ 8EC2 CD FC A3                             call    DIV16BCDivDEUNDOC
 414+ 8EC5 7D                                   ld      a,l
 415+ 8EC6                                      JumpOnBitSet a,7,StarXNegativePoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 415+ 8EC6 CB 7F       >                        bit 	7,a
 415+ 8EC8 C2 D3 8E    >                        jp      nz,StarXNegativePoint
 416+ 8ECB              ;StarXPositivePoint:									; x was positive result
 417+ 8ECB 2E 80                                ld          l,ScreenCenterX						;
 418+ 8ECD 26 00                                ld          h,0
 419+ 8ECF 09                                   add         hl,bc								; hl = Screen Centre + X
 420+ 8ED0 C3 DA 8E                             jp          StarStoreXPoint
 421+ 8ED3              StarXNegativePoint:                                 ; x < 0 so need to subtract from the screen centre position
 422+ 8ED3 2E 80                                ld          l,ScreenCenterX
 423+ 8ED5 26 00                                ld          h,0
 424+ 8ED7                                      ClearCarryFlag
 424+ 8ED7 B7          >                    or a
 425+ 8ED8 ED 42                                sbc         hl,bc                               ; hl = Screen Centre - X
 426+ 8EDA              StarStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 427+ 8EDA 7D                                   ld          a,l
 428+ 8EDB 32 76 95                             ld          (varStarX),a
 429+ 8EDE C9                                   ret
 430+ 8EDF
 431+ 8EDF FD 46 02     ProjectStarYToScreen:   ld          b,(iy+2)
 432+ 8EE2 FD 7E 03                             ld          a,(iy+3)
 433+ 8EE5 6F                                   ld          l,a
 434+ 8EE6 E6 7F                                and         $7F
 435+ 8EE8 47                                   ld          b,a
 436+ 8EE9 CD FC A3                             call        DIV16BCDivDEUNDOC
 437+ 8EEC 7D                                   ld          a,l                                 ; XX15+2 \ sign of X dist
 438+ 8EED                                      JumpOnBitSet a,7,StarNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
 438+ 8EED CB 7F       >                        bit 	7,a
 438+ 8EEF C2 FA 8E    >                        jp      nz,StarNegativeYPoint
 439+ 8EF2                                  ;StarPositiveYPoint:									; Y is positive so above the centre line
 440+ 8EF2 2E 60                               ld          l,ScreenCenterY
 441+ 8EF4                                      ClearCarryFlag
 441+ 8EF4 B7          >                    or a
 442+ 8EF5 ED 42                                sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
 443+ 8EF7 C3 FF 8E                             jp          StarStoreYPoint
 444+ 8EFA              StarNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
 445+ 8EFA 2E 60                                ld          l,ScreenCenterY
 446+ 8EFC 26 00                                ld          h,0
 447+ 8EFE 09                                   add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
 448+ 8EFF              StarStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 449+ 8EFF 7D                                   ld          a,l
 450+ 8F00 32 77 95                             ld          (varStarY),a
 451+ 8F03 C9                                   ret
 452+ 8F04
 453+ 8F04
# file closed: ./Universe/StarRoutines.asm
 943  8F04              ;    include "Universe/move_object-MVEIT.asm"
 944  8F04              ;    include "./ModelRender/draw_object.asm"
 945  8F04              ;    include "./ModelRender/draw_ship_point.asm"
 946  8F04              ;    include "./ModelRender/drawforwards-LL17.asm"
 947  8F04
 948  8F04                  INCLUDE	"./Hardware/memfill_dma.asm"
# file opened: ./Hardware/memfill_dma.asm
   1+ 8F04
   2+ 8F04 00           memfillvalue		DB 0
   3+ 8F05 83 C3 C7 CB  memfill        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   3+ 8F09 7D
   4+ 8F0A 04 8F        memfill_astrt  		DW memfillvalue
   5+ 8F0C 00 40        memfill_length 		DB $00,$40
   6+ 8F0E 24 10 AD     					DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   7+ 8F11 00 00        memfill_bstrt  		DB $00,$00
   8+ 8F13 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   9+ 8F17              memfill_cmd_len	  	EQU $ - memfill
  10+ 8F17
  11+ 8F17              memfill_dma:
  12+ 8F17              ; "memfill_dma, hl = address to fill, a = value, de = length"
  13+ 8F17              .set_fill_value:
  14+ 8F17 32 04 8F     	ld 		(memfillvalue),a
  15+ 8F1A              .set_target:
  16+ 8F1A 22 11 8F     	ld		(memfill_bstrt),hl
  17+ 8F1D              .set_length:
  18+ 8F1D ED 53 0C 8F  	ld		(memfill_length),de
  19+ 8F21              .write_dma:
  20+ 8F21 21 05 8F     	ld 		hl, memfill
  21+ 8F24 06 12        	ld 		b, memfill_cmd_len
  22+ 8F26 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  23+ 8F28 ED B3        	otir
  24+ 8F2A C9           	ret
  25+ 8F2B
# file closed: ./Hardware/memfill_dma.asm
 949  8F2B                  INCLUDE	"./Hardware/memcopy_dma.asm"
# file opened: ./Hardware/memcopy_dma.asm
   1+ 8F2B
   2+ 8F2B 83 C3 C7 CB  memcopy        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   2+ 8F2F 7D
   3+ 8F30 00 00        memcopy_astrt  		DB $00,$00
   4+ 8F32 00 40        memcopy_length 		DB $00,$40
   5+ 8F34 14 10 AD     					DB DMA_WR1_P1INC_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   6+ 8F37 00 00        memcopy_bstrt  		DB $00,$00
   7+ 8F39 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   8+ 8F3D              memcopy_cmd_len	  	equ $ - memcopy
   9+ 8F3D
  10+ 8F3D              memcopy_dma:
  11+ 8F3D              ; "memcopy_dma, hl = target address de = source address to copy, bc = length"
  12+ 8F3D              .set_target:
  13+ 8F3D 22 37 8F     	ld		(memcopy_bstrt),hl
  14+ 8F40              .set_source:
  15+ 8F40 ED 53 30 8F  	ld		(memcopy_astrt),de
  16+ 8F44              .set_length:
  17+ 8F44 ED 43 32 8F  	ld		(memcopy_length),bc
  18+ 8F48              .write_dma:
  19+ 8F48 21 2B 8F     	ld 		hl, memcopy
  20+ 8F4B 06 12        	ld 		b, memcopy_cmd_len
  21+ 8F4D 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  22+ 8F4F ED B3        	otir
  23+ 8F51 C9           	ret
  24+ 8F52
# file closed: ./Hardware/memcopy_dma.asm
 950  8F52                  INCLUDE "./Hardware/keyboard.asm"
# file opened: ./Hardware/keyboard.asm
   1+ 8F52              ;
   2+ 8F52              ; $FEFE;65278 V, C, X, Z, Caps Shifts       4  3  2  1  0
   3+ 8F52              ; $FDFE;65022 G, F, D, S, A                 9  8  7  6  5
   4+ 8F52              ; $FBFE;64510 T, R, E, W, Q                14 13 12 11 10
   5+ 8F52              ; $F7FE;63486 5, 4, 3, 2, 1                19 18 17 16 15
   6+ 8F52              ; $EFFE;61438 6, 7, 8, 9, 0                24 23 22 23 20
   7+ 8F52              ; $DFFE;57342 Y, U, I, O, P                29 28 27 26 25
   8+ 8F52              ; $BFFE;49150 H, J, K, L, Enter            34 33 32 31 30
   9+ 8F52              ; $7FFE;32766 B, N, M, Symbol Shift, Space 39 38 37 36 35
  10+ 8F52              ;
  11+ 8F52              ; Keyboard
  12+ 8F52              ;
  13+ 8F52              ;   0      1       2       3       4       5        6       7       8       9
  14+ 8F52              ;  VK_CAPS, VK_Z,  VK_X,   VK_C,   VK_V,   VK_A,    VK_S,   VK_D,   VK_F,   VK_G
  15+ 8F52              ;   10     11      12      13      14      15       16      17      18      19
  16+ 8F52              ;  VK_Q,   VK_W,   VK_E,   VK_R,   VK_T,   VK_1,    VK_2,   VK_3,   VK_4,   VK_5
  17+ 8F52              ;   20     21      22      23      24      25       26      27      28      29
  18+ 8F52              ;  VK_0    VK_9,   VK_8,   VK_7,   VK_6,   VK_P ,    VK_O,  VK_I,   VK_U,   VK_Y
  19+ 8F52              ;   30     31      32      33      34      35       36      37      38      39
  20+ 8F52              ; VK_ENTER VK_L,   VK_K,   VK_J,   VK_H,   VK_SPACE VK_SYM, VK_M,   VK_N,   VK_B
  21+ 8F52              ;
  22+ 8F52              ; Default map
  23+ 8F52              ;-----------------------------------------------------------------------------------------------------------------------------------
  24+ 8F52              ;   0          1           2             3              4           5           6           7           8           9
  25+ 8F52              ;   VK_CAPS    VK_Z        VK_X,         VK_C,          VK_V,       VK_A        VK_S,       VK_D,       VK_F,       VK_G
  26+ 8F52              ;              GameSkip                  Equip          SelLCargo   Climb       Decelerate  Recentre    FireM       HomeCursor
  27+ 8F52              ;                                                                                                       Find System
  28+ 8F52              ;-----------------------------------------------------------------------------------------------------------------------------------
  29+ 8F52              ;   10         11          12            13             14          15          16          17          18          19
  30+ 8F52              ;   VK_Q       VK_W,       VK_E,         VK_R,          VK_T,       VK_1        VK_2        VK_3        VK_4        VK_5
  31+ 8F52              ;   Dive       Accelerate  ECM           UnarmMissile   TargetM     FrontV      AftV        LeftV       RightV      GalacticChart
  32+ 8F52              ;-----------------------------------------------------------------------------------------------------------------------------------
  33+ 8F52              ;   20         Accel       22            23             24          25          26          27          28          29
  34+ 8F52              ;   VK_0       VK_9,       VK_8,         VK_7,          VK_6,       VK_P ,      VK_O,       VK_I,       VK_U,       VK_Y
  35+ 8F52              ;   EscapePod  Inventory   Status        MarketPrices   LocalChart  RollRight   RolLLeft                EnergyBomb  Quit
  36+ 8F52              ;   PlanetData                                                      PauseGame   SaveGame
  37+ 8F52              ;-----------------------------------------------------------------------------------------------------------------------------------
  38+ 8F52              ;   30         31          32            33             34          Right       36          37          EnergyBomb  39
  39+ 8F52              ;   VK_ENTER   VK_L,       VK_K,         VK_J,          VK_H,       VK_SPACE    VK_SYM,     VK_M,       VK_N,       VK_B
  40+ 8F52              ;              Launch                    Distance       Hyperspace  Laser                               DockComp    BuyCargo
  41+ 8F52              ;              ResumeGame
  42+ 8F52
  43+ 8F52              ; You can read address to check keystate by address KeyboardMap + c_Pressed corresponding key. There is also an addr_ helper too
  44+ 8F52
  45+ 8F52              c_Pressed_Front         equ 0  * 2
  46+ 8F52              c_Pressed_Aft           equ 1  * 2
  47+ 8F52              c_Pressed_Left          equ 2  * 2
  48+ 8F52              c_Pressed_Right         equ 3  * 2
  49+ 8F52              c_Pressed_RollLeft      equ 4  * 2
  50+ 8F52              c_Pressed_RollRight     equ 5  * 2
  51+ 8F52              c_Pressed_Dive          equ 6  * 2
  52+ 8F52              c_Pressed_Climb         equ 7  * 2
  53+ 8F52              c_Pressed_Accellerate   equ 8  * 2
  54+ 8F52              c_Pressed_Decellerate   equ 9  * 2
  55+ 8F52              c_Pressed_FireLaser     equ 10 * 2
  56+ 8F52              c_Pressed_TargetMissle  equ 11 * 2
  57+ 8F52              c_Pressed_FireMissile   equ 12 * 2
  58+ 8F52              c_Pressed_UnarmMissile  equ 13 * 2
  59+ 8F52              c_Pressed_ECM           equ 14 * 2
  60+ 8F52              c_Pressed_EnergyBomb    equ 15 * 2
  61+ 8F52              c_Pressed_EscapePod     equ 16 * 2
  62+ 8F52              c_Pressed_DockingComp   equ 17 * 2
  63+ 8F52              c_Pressed_Hyperspace    equ 18 * 2
  64+ 8F52              c_Pressed_Distance      equ 19 * 2
  65+ 8F52              c_Pressed_HomeCursor    equ 20 * 2
  66+ 8F52              c_Pressed_Launch        equ 21 * 2
  67+ 8F52              c_Pressed_BuyCargo      equ 22 * 2
  68+ 8F52              c_Pressed_SellCargo     equ 23 * 2
  69+ 8F52              c_Pressed_Equip         equ 24 * 2
  70+ 8F52              c_Pressed_GalacticChrt  equ 25 * 2
  71+ 8F52              c_Pressed_LocalChart    equ 26 * 2
  72+ 8F52              c_Pressed_MarketPrices  equ 27 * 2
  73+ 8F52              c_Pressed_Status        equ 28 * 2
  74+ 8F52              c_Pressed_Inventory     equ 29 * 2
  75+ 8F52              c_Pressed_GameSkip      equ 30 * 2
  76+ 8F52              c_Pressed_Save          equ 31 * 2
  77+ 8F52              c_Pressed_Freeze        equ 32 * 2
  78+ 8F52              c_Pressed_Resume        equ 33 * 2
  79+ 8F52              c_Pressed_Recentre      equ 34 * 2
  80+ 8F52              c_Pressed_Quit          equ 35 * 2
  81+ 8F52              c_Pressed_PlanetData    equ 36 * 2
  82+ 8F52              c_Pressed_CursorUp      equ 37 * 2
  83+ 8F52              c_Pressed_CursorDown    equ 38 * 2
  84+ 8F52              c_Pressed_Find          equ 39 * 2
  85+ 8F52
  86+ 8F52              ; half row 1
  87+ 8F52              VK_CAPS  				equ 0
  88+ 8F52              VK_Z  					equ 1
  89+ 8F52              VK_X  					equ 2
  90+ 8F52              VK_C  					equ 3
  91+ 8F52              VK_V  					equ 4
  92+ 8F52              ; half row 2
  93+ 8F52              VK_A  					equ 5
  94+ 8F52              VK_S  					equ 6
  95+ 8F52              VK_D  					equ 7
  96+ 8F52              VK_F  					equ 8
  97+ 8F52              VK_G  					equ 9
  98+ 8F52              ; half row 3
  99+ 8F52              VK_Q  					equ 10
 100+ 8F52              VK_W  					equ 11
 101+ 8F52              VK_E  					equ 12
 102+ 8F52              VK_R  					equ 13
 103+ 8F52              VK_T  					equ 14
 104+ 8F52              ; half row 4
 105+ 8F52              VK_1  					equ 15
 106+ 8F52              VK_2  					equ 16
 107+ 8F52              VK_3  					equ 17
 108+ 8F52              VK_4  					equ 18
 109+ 8F52              VK_5  					equ 19
 110+ 8F52              ; half row 5
 111+ 8F52              VK_0 					equ 20
 112+ 8F52              VK_9 					equ 21
 113+ 8F52              VK_8 					equ 22
 114+ 8F52              VK_7 					equ 23
 115+ 8F52              VK_6 					equ 24
 116+ 8F52              ; half row 6
 117+ 8F52              VK_P  					equ 25
 118+ 8F52              VK_O  					equ 26
 119+ 8F52              VK_I  					equ 27
 120+ 8F52              VK_U  					equ 28
 121+ 8F52              VK_Y  					equ 29
 122+ 8F52              ; half row 7
 123+ 8F52              VK_ENTER 				equ 30
 124+ 8F52              VK_L  					equ 31
 125+ 8F52              VK_K  					equ 32
 126+ 8F52              VK_J  					equ 33
 127+ 8F52              VK_H  					equ 34
 128+ 8F52              ; half row 8
 129+ 8F52              VK_SPACE 				equ 35
 130+ 8F52              VK_SYM  				equ 36
 131+ 8F52              VK_M  					equ 37
 132+ 8F52              VK_N  					equ 38
 133+ 8F52              VK_B  					equ 39
 134+ 8F52
 135+ 8F52              ;KeyboardMapping
 136+ 8F52              KeyCode_Front        	equ VK_1
 137+ 8F52              KeyCode_Aft          	equ VK_2
 138+ 8F52              KeyCode_Left         	equ VK_3
 139+ 8F52              KeyCode_Right        	equ VK_4
 140+ 8F52              KeyCode_RollLeft     	equ VK_O
 141+ 8F52              KeyCode_RollRight    	equ VK_P
 142+ 8F52              KeyCode_Dive         	equ VK_Q
 143+ 8F52              KeyCode_Climb        	equ VK_A
 144+ 8F52              KeyCode_Accellerate  	equ VK_W
 145+ 8F52              KeyCode_Decellerate  	equ VK_S
 146+ 8F52              KeyCode_FireLaser    	equ VK_SPACE
 147+ 8F52              KeyCode_TargetMissle 	equ VK_T
 148+ 8F52              KeyCode_FireMissile  	equ VK_F
 149+ 8F52              KeyCode_Find        	equ VK_F
 150+ 8F52              KeyCode_UnarmMissile 	equ VK_R
 151+ 8F52              KeyCode_ECM          	equ VK_E
 152+ 8F52              KeyCode_EnergyBomb   	equ VK_U
 153+ 8F52              KeyCode_EscapePod    	equ VK_CAPS
 154+ 8F52              KeyCode_DockingComp  	equ VK_N
 155+ 8F52              KeyCode_Hyperspace   	equ VK_H
 156+ 8F52              KeyCode_Distance     	equ VK_J
 157+ 8F52              KeyCode_HomeCursor   	equ VK_G
 158+ 8F52              KeyCode_Launch       	equ VK_L
 159+ 8F52              KeyCode_BuyCargo     	equ VK_B
 160+ 8F52              KeyCode_SellCargo    	equ VK_V
 161+ 8F52              KeyCode_Equip        	equ VK_C
 162+ 8F52              KeyCode_GalacticChrt 	equ VK_5
 163+ 8F52              KeyCode_LocalChart   	equ VK_6
 164+ 8F52              KeyCode_MarketPrices 	equ VK_7
 165+ 8F52              KeyCode_Status       	equ VK_8
 166+ 8F52              KeyCode_Inventory    	equ VK_9
 167+ 8F52              KeyCode_GameSkip     	equ VK_Z
 168+ 8F52              KeyCode_Save         	equ VK_O
 169+ 8F52              KeyCode_Freeze       	equ VK_B
 170+ 8F52              KeyCode_Resume       	equ VK_L
 171+ 8F52              KeyCode_Recentre     	equ VK_D
 172+ 8F52              KeyCode_Quit         	equ VK_Y
 173+ 8F52              KeyCode_PlanetData   	equ VK_0
 174+ 8F52              KeyCode_CursorUp        equ VK_Q
 175+ 8F52              KeyCode_CursorDown      equ VK_A
 176+ 8F52
 177+ 8F52 00 00 00...  Keys					DS	40
 178+ 8F7A              c_KeyBoardLen 			equ $ - Keys
 179+ 8F7A 00 00 00...  RawKeys					DS	8
 180+ 8F82 FE FE FE FD  KeyAddrTab				DW	$FEFE, $FDFE, $FBFE, $F7FE, $EFFE, $DFFE, $BFFE, $7FFE
 180+ 8F86 FE FB FE F7
 180+ 8F8A FE EF FE DF
 180+ 8F8E FE BF FE 7F
 181+ 8F92              ; Now keyboard map lists each game key and the corresponding address in the Keys table to get the value. This way redefining keys is just a case
 182+ 8F92              ; of updating this table with the respective location to look up
 183+ 8F92              ; key list sequence is in table above
 184+ 8F92 61 8F 62 8F  KeyboardMap             DW  Keys+KeyCode_Front        ,Keys+KeyCode_Aft          ,Keys+KeyCode_Left         ,Keys+KeyCode_Right        ,Keys+KeyCode_RollLeft
 184+ 8F96 63 8F 64 8F
 184+ 8F9A 6C 8F
 185+ 8F9C 6B 8F 5C 8F                          DW  Keys+KeyCode_RollRight    ,Keys+KeyCode_Dive         ,Keys+KeyCode_Climb        ,Keys+KeyCode_Accellerate  ,Keys+KeyCode_Decellerate
 185+ 8FA0 57 8F 5D 8F
 185+ 8FA4 58 8F
 186+ 8FA6 75 8F 60 8F                          DW  Keys+KeyCode_FireLaser    ,Keys+KeyCode_TargetMissle ,Keys+KeyCode_FireMissile  ,Keys+KeyCode_UnarmMissile ,Keys+KeyCode_ECM
 186+ 8FAA 5A 8F 5F 8F
 186+ 8FAE 5E 8F
 187+ 8FB0 6E 8F 52 8F                          DW  Keys+KeyCode_EnergyBomb   ,Keys+KeyCode_EscapePod    ,Keys+KeyCode_DockingComp  ,Keys+KeyCode_Hyperspace   ,Keys+KeyCode_Distance
 187+ 8FB4 78 8F 74 8F
 187+ 8FB8 73 8F
 188+ 8FBA 5B 8F 71 8F                          DW  Keys+KeyCode_HomeCursor   ,Keys+KeyCode_Launch       ,Keys+KeyCode_BuyCargo     ,Keys+KeyCode_SellCargo    ,Keys+KeyCode_Equip
 188+ 8FBE 79 8F 56 8F
 188+ 8FC2 55 8F
 189+ 8FC4 65 8F 6A 8F                          DW  Keys+KeyCode_GalacticChrt ,Keys+KeyCode_LocalChart   ,Keys+KeyCode_MarketPrices ,Keys+KeyCode_Status       ,Keys+KeyCode_Inventory
 189+ 8FC8 69 8F 68 8F
 189+ 8FCC 67 8F
 190+ 8FCE 53 8F 6C 8F                          DW  Keys+KeyCode_GameSkip     ,Keys+KeyCode_Save         ,Keys+KeyCode_Freeze       ,Keys+KeyCode_Resume       ,Keys+KeyCode_Recentre
 190+ 8FD2 79 8F 71 8F
 190+ 8FD6 59 8F
 191+ 8FD8 6F 8F 66 8F                          DW  Keys+KeyCode_Quit         ,Keys+KeyCode_PlanetData   ,Keys+KeyCode_CursorUp     ,Keys+KeyCode_CursorDown   ,Keys+KeyCode_Find
 191+ 8FDC 5C 8F 57 8F
 191+ 8FE0 5A 8F
 192+ 8FE2
 193+ 8FE2 23 5A 58 43  ASCII_Map:              DB "#","Z","X","C","V"
 193+ 8FE6 56
 194+ 8FE7 41 53 44 46                          DB "A","S","D","F","G"
 194+ 8FEB 47
 195+ 8FEC 51 57 45 52                          DB "Q","W","E","R","T"
 195+ 8FF0 54
 196+ 8FF1 31 32 33 34                          DB "1","2","3","4","5"
 196+ 8FF5 35
 197+ 8FF6 30 39 38 37                          DB "0","9","8","7","6"
 197+ 8FFA 36
 198+ 8FFB 50 4F 49 55                          DB "P","O","I","U","Y"
 198+ 8FFF 59
 199+ 9000 3E 4C 4B 4A                          DB ">","L","K","J","H"
 199+ 9004 48
 200+ 9005 20 5E 4D 4E                          DB " ","^","M","N","B"
 200+ 9009 42
 201+ 900A
 202+ 900A
 203+ 900A              addr_Pressed_Front         equ KeyboardMap+c_Pressed_Front
 204+ 900A              addr_Pressed_Aft           equ KeyboardMap+c_Pressed_Aft
 205+ 900A              addr_Pressed_Left          equ KeyboardMap+c_Pressed_Left
 206+ 900A              addr_Pressed_Right         equ KeyboardMap+c_Pressed_Right
 207+ 900A              addr_Pressed_RollLeft      equ KeyboardMap+c_Pressed_RollLeft
 208+ 900A              addr_Pressed_RollRight     equ KeyboardMap+c_Pressed_RollRight
 209+ 900A              addr_Pressed_Dive          equ KeyboardMap+c_Pressed_Dive
 210+ 900A              addr_Pressed_Climb         equ KeyboardMap+c_Pressed_Climb
 211+ 900A              addr_Pressed_Accellerate   equ KeyboardMap+c_Pressed_Accellerate
 212+ 900A              addr_Pressed_Decellerate   equ KeyboardMap+c_Pressed_Decellerate
 213+ 900A              addr_Pressed_FireLaser     equ KeyboardMap+c_Pressed_FireLaser
 214+ 900A              addr_Pressed_TargetMissle  equ KeyboardMap+c_Pressed_TargetMissle
 215+ 900A              addr_Pressed_FireMissile   equ KeyboardMap+c_Pressed_FireMissile
 216+ 900A              addr_Pressed_UnarmMissile  equ KeyboardMap+c_Pressed_UnarmMissile
 217+ 900A              addr_Pressed_ECM           equ KeyboardMap+c_Pressed_ECM
 218+ 900A              addr_Pressed_EnergyBomb    equ KeyboardMap+c_Pressed_EnergyBomb
 219+ 900A              addr_Pressed_EscapePod     equ KeyboardMap+c_Pressed_EscapePod
 220+ 900A              addr_Pressed_DockingComp   equ KeyboardMap+c_Pressed_DockingComp
 221+ 900A              addr_Pressed_Hyperspace    equ KeyboardMap+c_Pressed_Hyperspace
 222+ 900A              addr_Pressed_Distance      equ KeyboardMap+c_Pressed_Distance
 223+ 900A              addr_Pressed_HomeCursor    equ KeyboardMap+c_Pressed_HomeCursor
 224+ 900A              addr_Pressed_Launch        equ KeyboardMap+c_Pressed_Launch
 225+ 900A              addr_Pressed_BuyCargo      equ KeyboardMap+c_Pressed_BuyCargo
 226+ 900A              addr_Pressed_SellCargo     equ KeyboardMap+c_Pressed_SellCargo
 227+ 900A              addr_Pressed_Equip         equ KeyboardMap+c_Pressed_Equip
 228+ 900A              addr_Pressed_GalacticChrt  equ KeyboardMap+c_Pressed_GalacticChrt
 229+ 900A              addr_Pressed_LocalChart    equ KeyboardMap+c_Pressed_LocalChart
 230+ 900A              addr_Pressed_MarketPrices  equ KeyboardMap+c_Pressed_MarketPrices
 231+ 900A              addr_Pressed_Status        equ KeyboardMap+c_Pressed_Status
 232+ 900A              addr_Pressed_Inventory     equ KeyboardMap+c_Pressed_Inventory
 233+ 900A              addr_Pressed_GameSkip      equ KeyboardMap+c_Pressed_GameSkip
 234+ 900A              addr_Pressed_Save          equ KeyboardMap+c_Pressed_Save
 235+ 900A              addr_Pressed_Freeze        equ KeyboardMap+c_Pressed_Freeze
 236+ 900A              addr_Pressed_Resume        equ KeyboardMap+c_Pressed_Resume
 237+ 900A              addr_Pressed_Recentre      equ KeyboardMap+c_Pressed_Recentre
 238+ 900A              addr_Pressed_Quit          equ KeyboardMap+c_Pressed_Quit
 239+ 900A              addr_Pressed_PlanetData    equ KeyboardMap+c_Pressed_PlanetData
 240+ 900A              addr_Pressed_CursorUp      equ KeyboardMap+c_Pressed_CursorUp
 241+ 900A              addr_Pressed_CursorDown    equ KeyboardMap+c_Pressed_CursorDown
 242+ 900A              addr_Pressed_Find          equ KeyboardMap+c_Pressed_Find
 243+ 900A
 244+ 900A
 245+ 900A              MIsKeyPressed:      MACRO   keyaddress, misstarget
 246+ 900A ~                                ld      hl,(keyaddress)
 247+ 900A ~                                ld      a,(hl)
 248+ 900A ~                                IfAIsZeroGoto   misstarget
 249+ 900A                                  ENDM
 250+ 900A
 251+ 900A 21 52 8F     init_keyboard:      ld		hl,Keys
 252+ 900D 11 28 00                         ld		de, c_KeyBoardLen
 253+ 9010 3E 00                            ld		a,0
 254+ 9012 CD 17 8F                         call	memfill_dma
 255+ 9015 C9                               ret
 256+ 9016
 257+ 9016 21 7A 8F     scan_keyboard:      ld		hl,RawKeys
 258+ 9019 11 82 8F                         ld		de,KeyAddrTab
 259+ 901C AF                               xor		a
 260+ 901D FD 2E 08                         ld		iyl,8
 261+ 9020 DD 21 52 8F                      ld      ix,Keys
 262+ 9024 1A           .PortReadLoop:      ld		a,(de)							; Set up BC as port to read
 263+ 9025 4F                               ld		c,a
 264+ 9026 13                               inc		de
 265+ 9027 1A                               ld      a,(de)
 266+ 9028 47                               ld		b,a
 267+ 9029 13                               inc		de
 268+ 902A ED 78                            in		a,(c)							; read port to a
 269+ 902C 77                               ld		(hl),a							; set raw keys to value
 270+ 902D 23                               inc		hl								; and ready for next element
 271+ 902E 06 05                            ld		b,5								; loop all bits (there are only 5 keys to a group)
 272+ 9030 CB 47        .ProcessBitsLoop:   bit		0,a								; is bit set
 273+ 9032 28 07                            jr      z,.SetKeyPressed
 274+ 9034 08                               ex      af,af'
 275+ 9035 AF                               xor     a
 276+ 9036 C3 42 90                         jp      .SetKey
 277+ 9039 20 0B                            jr		nz,.SkipKeySet
 278+ 903B 08           .SetKeyPressed:	    ex		af,af'
 279+ 903C DD 7E 00                         ld      a,(ix+0)
 280+ 903F 3C                               inc     a
 281+ 9040 E6 03                            and     $3                              ; so bit 0 set is pressed, bit 1 set is repeat pressed, i.e. 0 = no, 1 = yes 2,3 = held
 282+ 9042 DD 77 00     .SetKey:            ld		(ix+0),a							; Key Pressed
 283+ 9045 08                               ex		af,af'
 284+ 9046 DD 23        .SkipKeySet:	    inc		ix								; move to next key
 285+ 9048 CB 3F                            srl		a								; move next key into bit 0
 286+ 904A 10 E4                            djnz	.ProcessBitsLoop				; Process all key group bits
 287+ 904C FD 2D                            dec     iyl
 288+ 904E 20 D4                            jr      nz,.PortReadLoop				; Read next input port
 289+ 9050 C9                               ret
 290+ 9051
 291+ 9051              GetKeyStateAddressDE: MACRO
 292+ 9051 ~                                  ld      hl,KeyboardMap                  ; work our address to read from
 293+ 9051 ~                                  add     hl,a
 294+ 9051 ~                                  ld      a,(hl)
 295+ 9051 ~                                  ld      e,a
 296+ 9051 ~                                  inc     hl
 297+ 9051 ~                                  ld      a,(hl)
 298+ 9051 ~                                  ld      d,a                             ; now de = address in keypress list
 299+ 9051                                    ENDM
 300+ 9051
 301+ 9051
 302+ 9051              ; call with a = c_Pressed key, will then read mapping
 303+ 9051              wait_for_key_a_press:       GetKeyStateAddressDE
 303+ 9051 21 92 8F    >                      ld      hl,KeyboardMap                  ; work our address to read from
 303+ 9054 ED 31       >                      add     hl,a
 303+ 9056 7E          >                      ld      a,(hl)
 303+ 9057 5F          >                      ld      e,a
 303+ 9058 23          >                      inc     hl
 303+ 9059 7E          >                      ld      a,(hl)
 303+ 905A 57          >                      ld      d,a                             ; now de = address in keypress list
 304+ 905B D5                                       push    de
 305+ 905C CD 16 90     wait_for_key_press_loop:    call    scan_keyboard
 306+ 905F E1                                       pop     hl                              ; get key address into hl
 307+ 9060 E5                                       push    hl
 308+ 9061 7E                                       ld      a,(hl)
 309+ 9062                                          JumpIfANENusng  1,wait_for_key_press_loop         ; will also loop if held down when entering this routine
 309+ 9062 FE 01       >                cp     1
 309+ 9064 C2 5C 90    >                jp      nz,wait_for_key_press_loop
 310+ 9067 E1                                       pop     hl                              ; tidy up rogue push, less t states than detecting if we want to push or not
 311+ 9068 C9                                       ret
 312+ 9069
 313+ 9069              wait_for_key_a_held:        GetKeyStateAddressDE
 313+ 9069 21 92 8F    >                      ld      hl,KeyboardMap                  ; work our address to read from
 313+ 906C ED 31       >                      add     hl,a
 313+ 906E 7E          >                      ld      a,(hl)
 313+ 906F 5F          >                      ld      e,a
 313+ 9070 23          >                      inc     hl
 313+ 9071 7E          >                      ld      a,(hl)
 313+ 9072 57          >                      ld      d,a                             ; now de = address in keypress list
 314+ 9073 D5                                       push    de
 315+ 9074 CD 16 90     wait_for_key_a_held_loop:   call    scan_keyboard
 316+ 9077 E1                                       pop     hl
 317+ 9078 E5                                       push    hl
 318+ 9079 7E                                       ld      a,(hl)
 319+ 907A                                          JumpIfALTNusng  2,wait_for_key_a_held_loop
 319+ 907A FE 02       >                        cp      2
 319+ 907C DA 74 90    >                        jp		c, wait_for_key_a_held_loop
 320+ 907F E1                                       pop     hl
 321+ 9080 C9                                       ret
 322+ 9081
 323+ 9081              get_key_a_state:            GetKeyStateAddressDE                 ; reads a mapped key and sets a to key staus, e.g. 0 1 or >=2 DOES NOT SCAN KEYBOARD
 323+ 9081 21 92 8F    >                      ld      hl,KeyboardMap                  ; work our address to read from
 323+ 9084 ED 31       >                      add     hl,a
 323+ 9086 7E          >                      ld      a,(hl)
 323+ 9087 5F          >                      ld      e,a
 323+ 9088 23          >                      inc     hl
 323+ 9089 7E          >                      ld      a,(hl)
 323+ 908A 57          >                      ld      d,a                             ; now de = address in keypress list
 324+ 908B EB                                       ex      de,hl
 325+ 908C 7E                                       ld      a,(hl)                        ; a = keystate
 326+ 908D C9                                       ret
 327+ 908E
 328+ 908E              force_key_press:            GetKeyStateAddressDE
 328+ 908E 21 92 8F    >                      ld      hl,KeyboardMap                  ; work our address to read from
 328+ 9091 ED 31       >                      add     hl,a
 328+ 9093 7E          >                      ld      a,(hl)
 328+ 9094 5F          >                      ld      e,a
 328+ 9095 23          >                      inc     hl
 328+ 9096 7E          >                      ld      a,(hl)
 328+ 9097 57          >                      ld      d,a                             ; now de = address in keypress list
 329+ 9098 EB                                       ex      de,hl
 330+ 9099 3E 01                                    ld      a,1
 331+ 909B 77                                       ld      (hl),a
 332+ 909C C9                                       ret
 333+ 909D
 334+ 909D              ; returns z is set if c_ key is pressed
 335+ 909D              is_key_pressed:             GetKeyStateAddressDE
 335+ 909D 21 92 8F    >                      ld      hl,KeyboardMap                  ; work our address to read from
 335+ 90A0 ED 31       >                      add     hl,a
 335+ 90A2 7E          >                      ld      a,(hl)
 335+ 90A3 5F          >                      ld      e,a
 335+ 90A4 23          >                      inc     hl
 335+ 90A5 7E          >                      ld      a,(hl)
 335+ 90A6 57          >                      ld      d,a                             ; now de = address in keypress list
 336+ 90A7 EB                                       ex      de,hl
 337+ 90A8 7E                                       ld      a,(hl)                          ; a = keystate
 338+ 90A9 FE 01                                    cp      1
 339+ 90AB C9                                       ret
 340+ 90AC
 341+ 90AC              ; returns z is set if c_ key is held
 342+ 90AC              is_key_held:                GetKeyStateAddressDE
 342+ 90AC 21 92 8F    >                      ld      hl,KeyboardMap                  ; work our address to read from
 342+ 90AF ED 31       >                      add     hl,a
 342+ 90B1 7E          >                      ld      a,(hl)
 342+ 90B2 5F          >                      ld      e,a
 342+ 90B3 23          >                      inc     hl
 342+ 90B4 7E          >                      ld      a,(hl)
 342+ 90B5 57          >                      ld      d,a                             ; now de = address in keypress list
 343+ 90B6 EB                                       ex      de,hl
 344+ 90B7 7E                                       ld      a,(hl)                          ; a = keystate
 345+ 90B8 E6 02                                    and     2                               ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 346+ 90BA FE 02                                    cp      2
 347+ 90BC C9                                       ret
 348+ 90BD
 349+ 90BD              is_any_key_pressed:
 350+ 90BD 21 52 8F         ld      hl,Keys
 351+ 90C0 06 28            ld      b,40
 352+ 90C2 0E 00            ld      c,0
 353+ 90C4              .KeyReadLoop:
 354+ 90C4 7E               ld      a,(hl)
 355+ 90C5 FE 01            cp      1
 356+ 90C7 CA D1 90         jp      z,.KeyPressed
 357+ 90CA 23               inc     hl
 358+ 90CB 0C               inc     c
 359+ 90CC 10 F6            djnz    .KeyReadLoop
 360+ 90CE 3E FF            ld      a,$FF
 361+ 90D0 C9               ret
 362+ 90D1              .KeyPressed:
 363+ 90D1 79               ld      a,c
 364+ 90D2 C9               ret
 365+ 90D3
 366+ 90D3              is_any_key_held:
 367+ 90D3 21 52 8F         ld      hl,Keys
 368+ 90D6 06 28            ld      b,40
 369+ 90D8 0E 00            ld      c,0
 370+ 90DA              .KeyReadLoop:
 371+ 90DA 7E               ld      a,(hl)
 372+ 90DB E6 02            and     2                               ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 373+ 90DD FE 02            cp      2
 374+ 90DF CA E9 90         jp      z,.KeyPressed
 375+ 90E2 23               inc     hl
 376+ 90E3 0C               inc     c
 377+ 90E4 10 F4            djnz    .KeyReadLoop
 378+ 90E6 3E FF            ld      a,$FF
 379+ 90E8 C9               ret
 380+ 90E9              .KeyPressed:
 381+ 90E9 79               ld      a,c
 382+ 90EA C9               ret
 383+ 90EB
 384+ 90EB
 385+ 90EB 00 00 00...  InputString             DS  30              ; used for a 30 character input buffer
 386+ 9109 00                                   DB  0               ; end of string marker as a safety
 387+ 910A 00           InputCursor             DB  0
 388+ 910B 00           EnterPressed            DB  0               ; zero notpressed FF pressed
 389+ 910C 00           InputChanged            DB  0
 390+ 910D              InputLimit              EQU 20
 391+ 910D
 392+ 910D              keyboard_copy_input_to_de:
 393+ 910D 21 EB 90         ld      hl,InputString
 394+ 9110 3A 0A 91         ld      a,(InputCursor)
 395+ 9113 FE 00            cp      0
 396+ 9115 28 05            jr      z,.NoString
 397+ 9117 4F               ld      c,a
 398+ 9118 06 00            ld      b,0
 399+ 911A ED B0            ldir
 400+ 911C              .NoString
 401+ 911C 3E 00            ld      a,0
 402+ 911E 12               ld      (de),a
 403+ 911F C9               ret
 404+ 9120
 405+ 9120              initInputText:
 406+ 9120 AF               xor     a
 407+ 9121 32 0A 91         ld      (InputCursor),a
 408+ 9124 32 0B 91         ld      (EnterPressed),a
 409+ 9127 32 0C 91         ld      (InputChanged),a
 410+ 912A 21 EB 90         ld      hl,InputString
 411+ 912D 06 1E            ld      b,30
 412+ 912F              .wipeloop:
 413+ 912F 77               ld      (hl),a
 414+ 9130 23               inc     hl
 415+ 9131 10 FC            djnz    .wipeloop
 416+ 9133 C9               ret
 417+ 9134
 418+ 9134 AF           InputName:                  xor     a
 419+ 9135 32 0C 91                                 ld      (InputChanged),a
 420+ 9138 CD BD 90                                 call    is_any_key_pressed
 421+ 913B FE FF                                    cp      $FF
 422+ 913D C8                                       ret     z
 423+ 913E              .KeyPressed:
 424+ 913E 4F               ld      c,a
 425+ 913F 3A 0A 91         ld      a,(InputCursor)                 ; No key so we can now look at if we are at the end of the buffer
 426+ 9142 FE 14            cp      InputLimit                      ; move to variable later and then cp (hl)
 427+ 9144 28 0B            jr      z,.DeleteOrEnterOnly            ;
 428+ 9146 21 E2 8F         ld      hl,ASCII_Map
 429+ 9149 79               ld      a,c
 430+ 914A ED 31            add     hl,a
 431+ 914C 7E               ld      a,(hl)
 432+ 914D FE 41            cp      "A"
 433+ 914F 30 15            jr      nc,.AlphaPressed
 434+ 9151              .DeleteOrEnterOnly                          ; CAPS and Symbol act as delete for now
 435+ 9151 FE 30            cp      "0"                             ; if 0 was preseed check caps shift too
 436+ 9153 28 3B            jr      z,.CheckShiftDelete             ; for now we will ignore the shift and just assume delete
 437+ 9155 FE 3E            cp      ">"         ; ENTER
 438+ 9157 28 24            jr      z,.EnterPressed
 439+ 9159 FE 23            cp      "#"         ; CAPS
 440+ 915B 28 33            jr      z,.CapsPressed
 441+ 915D FE 5E            cp      "^"         ; SYMBOLSHIFT
 442+ 915F 28 2F            jr      z,.SymbolPressed
 443+ 9161 FE 20            cp      " "         ; space
 444+ 9163 28 2B            jr      z,.SpacePressed
 445+ 9165 C9               ret
 446+ 9166              .AlphaPressed:
 447+ 9166 47               ld      b,a
 448+ 9167 3A 0A 91         ld      a,(InputCursor)
 449+ 916A 4F               ld      c,a
 450+ 916B 21 EB 90         ld      hl,InputString
 451+ 916E ED 31            add     hl,a
 452+ 9170 78               ld      a,b
 453+ 9171 70               ld      (hl),b
 454+ 9172 79               ld      a,c
 455+ 9173 21 0A 91         ld      hl,InputCursor
 456+ 9176 34               inc     (hl)
 457+ 9177 3E FF            ld      a,$FF
 458+ 9179 32 0C 91         ld      (InputChanged),a
 459+ 917C C9               ret
 460+ 917D              .EnterPressed:
 461+ 917D 3A 0A 91         ld      a,(InputCursor)
 462+ 9180 3C               inc     a
 463+ 9181 21 EB 90         ld      hl,InputString
 464+ 9184 ED 31            add     hl,a
 465+ 9186 AF               xor     a
 466+ 9187 77               ld      (hl),a
 467+ 9188 3D               dec     a
 468+ 9189 32 0B 91         ld      (EnterPressed),a
 469+ 918C 32 0C 91         ld      (InputChanged),a
 470+ 918F C9               ret
 471+ 9190              .CheckShiftDelete:
 472+ 9190              .CapsPressed:                               ; act as a delete key for now
 473+ 9190              .SymbolPressed:
 474+ 9190              .SpacePressed:
 475+ 9190 3A 0A 91         ld      a,(InputCursor)
 476+ 9193 FE 00            cp      0
 477+ 9195 C8               ret     z
 478+ 9196 3D               dec     a
 479+ 9197 32 0A 91         ld      (InputCursor),a
 480+ 919A 21 EB 90         ld      hl,InputString
 481+ 919D ED 31            add     hl,a
 482+ 919F AF               xor     a
 483+ 91A0 77               ld      (hl),a
 484+ 91A1 3E FF            ld      a,$FF
 485+ 91A3 32 0C 91         ld      (InputChanged),a
 486+ 91A6 C9               ret
 487+ 91A7
 488+ 91A7              MovementKeyTest:
 489+ 91A7              ;DBG1:jp dbg1
 490+ 91A7              ;dbx1:
 491+ 91A7 AF               xor     a
 492+ 91A8 32 BE 92         ld      (CursorKeysPressed),a
 493+ 91AB 3A C0 92         ld      a,(MenuIdMax)
 494+ 91AE E6 FC            and     $FC
 495+ 91B0 20 26            jr      nz,CursorKeys
 496+ 91B2              ClimbDiveKeys:
 497+ 91B2 2A A0 8F         ld      hl,(addr_Pressed_Climb)
 498+ 91B5 7E               ld      a,(hl)
 499+ 91B6                  IfAIsZeroGoto ScanDiveKey
 499+ 91B6 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 499+ 91B7 CA C5 91    >				jp	z, ScanDiveKey
 500+ 91BA 3A BE 92         ld      a,(CursorKeysPressed)
 501+ 91BD F6 80            or      $80
 502+ 91BF 32 BE 92         ld      (CursorKeysPressed),a
 503+ 91C2 C3 FB 91         jp      ScanLeftKey
 504+ 91C5              ScanDiveKey:
 505+ 91C5 2A 9E 8F         ld      hl,(addr_Pressed_Dive)
 506+ 91C8 7E               ld      a,(hl)
 507+ 91C9                  IfAIsZeroGoto ScanLeftKey
 507+ 91C9 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 507+ 91CA CA FB 91    >				jp	z, ScanLeftKey
 508+ 91CD 3A BE 92         ld      a,(CursorKeysPressed)
 509+ 91D0 F6 40            or      $40
 510+ 91D2 32 BE 92         ld      (CursorKeysPressed),a
 511+ 91D5 C3 FB 91         jp      ScanLeftKey
 512+ 91D8              CursorKeys:
 513+ 91D8 2A DC 8F         ld      hl,(addr_Pressed_CursorUp)
 514+ 91DB 7E               ld      a,(hl)
 515+ 91DC                  IfAIsZeroGoto ScanCursorDownKey
 515+ 91DC A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 515+ 91DD CA EB 91    >				jp	z, ScanCursorDownKey
 516+ 91E0 3A BE 92         ld      a,(CursorKeysPressed)
 517+ 91E3 F6 80            or      $80
 518+ 91E5 32 BE 92         ld      (CursorKeysPressed),a
 519+ 91E8 C3 FB 91         jp      ScanLeftKey
 520+ 91EB              ScanCursorDownKey
 521+ 91EB 2A DE 8F         ld      hl,(addr_Pressed_CursorDown)
 522+ 91EE 7E               ld      a,(hl)
 523+ 91EF                  IfAIsZeroGoto ScanLeftKey
 523+ 91EF A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 523+ 91F0 CA FB 91    >				jp	z, ScanLeftKey
 524+ 91F3 3A BE 92         ld      a,(CursorKeysPressed)
 525+ 91F6 F6 40            or      $40
 526+ 91F8 32 BE 92         ld      (CursorKeysPressed),a
 527+ 91FB              ScanLeftKey:
 528+ 91FB 2A 9A 8F         ld      hl,(addr_Pressed_RollLeft)
 529+ 91FE 7E               ld      a,(hl)
 530+ 91FF                  IfAIsZeroGoto ScanRightKey
 530+ 91FF A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 530+ 9200 CA 0C 92    >				jp	z, ScanRightKey
 531+ 9203 3A BE 92         ld      a,(CursorKeysPressed)
 532+ 9206 F6 20            or      $20
 533+ 9208 32 BE 92         ld      (CursorKeysPressed),a
 534+ 920B C9               ret
 535+ 920C              ScanRightKey:
 536+ 920C 2A 9C 8F         ld      hl,(addr_Pressed_RollRight)
 537+ 920F 7E               ld      a,(hl)
 538+ 9210                  IfAIsZeroGoto ScanHomeKey
 538+ 9210 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 538+ 9211 CA 1D 92    >				jp	z, ScanHomeKey
 539+ 9214 3A BE 92         ld      a,(CursorKeysPressed)
 540+ 9217 F6 10            or      $10
 541+ 9219 32 BE 92         ld      (CursorKeysPressed),a
 542+ 921C C9               ret
 543+ 921D              ScanHomeKey:
 544+ 921D 2A BA 8F         ld      hl,(addr_Pressed_HomeCursor)
 545+ 9220 7E               ld      a,(hl)
 546+ 9221                  IfAIsZeroGoto ScanRecentreKey
 546+ 9221 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 546+ 9222 CA 2E 92    >				jp	z, ScanRecentreKey
 547+ 9225 3A BE 92         ld      a,(CursorKeysPressed)
 548+ 9228 F6 08            or      $08
 549+ 922A 32 BE 92         ld      (CursorKeysPressed),a
 550+ 922D C9               ret
 551+ 922E              ScanRecentreKey:
 552+ 922E 2A D6 8F         ld      hl,(addr_Pressed_Recentre)
 553+ 9231 7E               ld      a,(hl)
 554+ 9232                  ReturnIfAIsZero
 554+ 9232 A7          >                    and a
 554+ 9233 C8          >                    ret    z
 555+ 9234 3A BE 92         ld      a,(CursorKeysPressed)
 556+ 9237 F6 04            or      $04
 557+ 9239 32 BE 92         ld      (CursorKeysPressed),a
 558+ 923C C9               ret
 559+ 923D
 560+ 923D
# file closed: ./Hardware/keyboard.asm
 951  923D
 952  923D                  INCLUDE "./Variables/constant_equates.asm"
# file opened: ./Variables/constant_equates.asm
   1+ 923D              ;Contants
   2+ 923D
   3+ 923D              SignMask8Bit		equ %01111111
   4+ 923D              SignMask16Bit		equ %0111111111111111
   5+ 923D              SignOnly8Bit		equ $80
   6+ 923D              SignOnly16Bit		equ $8000
   7+ 923D
   8+ 923D              ConstPi				equ $80
   9+ 923D              ConstNorm           equ 197
  10+ 923D
  11+ 923D              ;Text Tokens
  12+ 923D              EliteToken			equ $1E			; Token ID for text messsage ---- E L I T E ----
  13+ 923D              BrabenBellToken 	equ $0D
  14+ 923D              AcorToken			equ $0C
  15+ 923D
  16+ 923D              ; Intro Screen
  17+ 923D              TitleShip			equ	$8C
  18+ 923D              RotationUnity		equ $60
  19+ 923D              DBCheckCode			equ $DB
  20+ 923D              MaxVisibility		equ $1F
  21+ 923D              FarInFront			equ $C0
  22+ 923D
  23+ 923D              ; Universe Managment
  24+ 923D              ShipTypeStation     equ 2
  25+ 923D              ShipTypeMissile     equ 1
  26+ 923D              ShipTypeNormal      equ 0
  27+ 923D              ShipMaxDistance     equ 192
  28+ 923D              HyperSpaceTimers    equ $0B0B
  29+ 923D
  30+ 923D
  31+ 923D              MaxNumberOfStars	equ 11
  32+ 923D              UniverseListSize    equ	12
  33+ 923D              ShipTypeSize		equ	32 			;??????? just a guess for now
  34+ 923D              ShipSST				equ 4			; its a space station
  35+ 923D              UniverseBasePage 	equ 70			; Base memory bank for universe Item #0
  36+ 923D              ShipDataBasePage	equ	90			; Needs 2mb upgrade but what the heck
  37+ 923D              ShipCountMax		equ	2			; For now just 2 ships to debug
  38+ 923D              LineLimitPerShip	equ 70			; Max lines per ship
  39+ 923D              FaceLimitPerShip	equ	70			; Same as line limit to simplify some logic
  40+ 923D              ; "NEED TO DEFINE SHIPTYPESIZE TODO"
  41+ 923D              PlayerDocked		equ	$FF
  42+ 923D
  43+ 923D              ; Memory page managment	(Refers to a memory slot as a place to access data)
  44+ 923D              ShipDataSlot		equ	6			; this may move into rom swap out space later
  45+ 923D              UniverseObjectSlot	equ	7
  46+ 923D
  47+ 923D              KeyForwardsView		equ	$20
  48+ 923D
  49+ 923D              ; Ship Data
  50+ 923D              ;;;;	.XX21	\ -> &5600 \ Table of pointers to ships' data given to XX0
  51+ 923D              ;;;;00 7F			 EQUW &7F00 \ type  1 is #MSL  Missile data on page off bottom of screen
  52+ 923D              ;;;;00 00			 EQUW 0     \ type  2 is #SST  Space Station, Coriolis or Dodo.
  53+ 923D              ;;;;00 00			 EQUW 0     \ type  3 is #ESC  Escape capsule
  54+ 923D              ;;;;00 00			 EQUW 0     \ type  4 is #PLT  Plate, alloys
  55+ 923D              ;;;;00 00			 EQUW 0     \ type  5 is #OIL  Cargo cannister
  56+ 923D              ;;;;00 00			 EQUW 0     \ type  6 is       Boulder
  57+ 923D              ;;;;00 00			 EQUW 0     \ type  7 is #AST  Asteroid
  58+ 923D              ;;;;00 00			 EQUW 0     \ type  8 is #SPL  Splinter, rock.
  59+ 923D              ;;;;00 00			 EQUW 0     \ type  9 is #SHU  Shuttle
  60+ 923D              ;;;;00 00			 EQUW 0     \ type 10 is       Transporter
  61+ 923D              ;;;;00 00			 EQUW 0     \ type 11 is #CYL  Cobra Mk III,  Boa
  62+ 923D              ;;;;00 00			 EQUW 0     \ type 12 is       Python
  63+ 923D              ;;;;00 00			 EQUW 0     \ type 13 is       Last of three traders
  64+ 923D              ;;;;00 00			 EQUW 0     \ type 14 is #ANA  Anaconda
  65+ 923D              ;;;;00 00			 EQUW 0     \ type 15 is #WRM  Worm with Anaconda
  66+ 923D              ;;;;00 00			 EQUW 0     \ type 16 is #COP  Viper
  67+ 923D              ;;;;00 00			 EQUW 0     \ type 17 is       First pirate
  68+ 923D              ;;;;00 00			 EQUW 0     \ type 18 is
  69+ 923D              ;;;;00 00			 EQUW 0     \ type 19 is #KRA  Krait small pirate
  70+ 923D              ;;;;00 00			 EQUW 0     \ type 20 is #ADA  Adder
  71+ 923D              ;;;;00 00			 EQUW 0     \ type 21 is
  72+ 923D              ;;;;00 00			 EQUW 0     \ type 22 is
  73+ 923D              ;;;;00 00			 EQUW 0     \ type 23 is
  74+ 923D              ;;;;00 00			 EQUW 0     \ type 24 is #CYL2 Last strong pirate
  75+ 923D              ;;;;00 00			 EQUW 0     \ type 25 is #ASP  Asp Mk II
  76+ 923D              ;;;;00 00			 EQUW 0     \ type 26 is #FER  Fer de Lance
  77+ 923D              ;;;;00 00			 EQUW 0     \ type 27 is
  78+ 923D              ;;;;00 00			 EQUW 0     \ type 28 is	Last of three bounty hunters
  79+ 923D              ;;;;00 00			 EQUW 0     \ type 29 is #THG  Thargoid
  80+ 923D              ;;;;00 00			 EQUW 0     \ type 30 is #TGL  Thargon
  81+ 923D              ;;;;00 00			 EQUW 0     \ type 31 is #CON  Constrictor
  82+ 923D              ;;;;	.E%	\ -> &563E \ Hull NEWB bits are escpod, cop, inno, ?, pirate, angry, hunter, trader.
  83+ 923D              ;;;;			\ NEWB examples
  84+ 923D              ;;;;\ 21			EQUB &21    \ 0010 0001    9 Shuttle has no escape pod, inno, trader.
  85+ 923D              ;;;;\ 61			EQUB &61    \ 0110 0001   10 Tansporter no escape pod, Cop, inno, trader.
  86+ 923D              ;;;;\ A0			EQUB &A0    \ 1010 0000   11 Cobra has Escape pod, inno, not a trader.
  87+ 923D              ;;;;\ C2			EQUB &C2    \ 1100 0010   16 Viper has Escape pod, Cop, hunter.
  88+ 923D              ;;;;\ 8C			EQUB &8C    \ 1000 1100   19 Krait pirate has escape pod, is pirate and angry.
  89+ 923D
# file closed: ./Variables/constant_equates.asm
 953  923D                  INCLUDE "./Variables/general_variables.asm"
# file opened: ./Variables/general_variables.asm
   1+ 923D              ;	PAGE 0 Map to variable anmes
   2+ 923D              ;	PAGE 0 Map to variable anmes
   3+ 923D              ;
   4+ 923D              ;
   5+ 923D              ;
   6+ 923D              ;	06		T1
   7+ 923D              ;	07
   8+ 923D              ;	08		SC1					Screen Hi
   9+ 923D              ;	09							XX16 Matrix
  10+ 923D              ;	0A							XX16+1
  11+ 923D              ;	0B							XX16+2
  12+ 923D              ;	0C							XX16+3
  13+ 923D              ;	0D                          XX16+4
  14+ 923D              ;	0E                          XX16+5
  15+ 923D              ;	0F							XX16+6
  16+ 923D              ;	10		varP				XX16+7
  17+ 923D              ;	11		varP				XX16+8
  18+ 923D              ;	12                          XX16+9
  19+ 923D              ;	13                          XX16+10
  20+ 923D              ;	14							XX16+11
  21+ 923D              ;	15                          XX16+12
  22+ 923D              ;	16                          XX16+13
  23+ 923D              ;	17                          XX16+14
  24+ 923D              ;	17                          XX16+14
  25+ 923D              ;	18                          XX16+15
  26+ 923D              ;	19
  27+ 923D              ;	1A
  28+ 923D              ;	1B
  29+ 923D              ;	1C
  30+ 923D              ;	1D
  31+ 923D              ;	1E							XX0
  32+ 923D              ;	1F                          XX0+1
  33+ 923D              ;	20		INF                 XX0+2
  34+ 923D              ;	21      INF+1               XX0+3
  35+ 923D              ;	22      varV                XX0+4
  36+ 923D              ;	23      varV +1             XX0+5
  37+ 923D              ;	24		XXlo                XX0+6
  38+ 923D              ;	25		XXHi
  39+ 923D              ;	26		YYlo
  40+ 923D              ;	27		YYHi
  41+ 923D              ;	28
  42+ 923D              ;	29
  43+ 923D              ;	2A		BETA (pitch done)
  44+ 923D              ;	2B		BET1 lower7 magnitude
  45+ 923D              ;	2C		XC
  46+ 923D              ;	2D		YC
  47+ 923D              ;	2E		QQ22				Outer Hyperspace Countdown
  48+ 923D              ;	2E		QQ22				Outer Hyperspace Countdown
  49+ 923D              ;	2F		QQ22+1				Inner Hyperspace Countdown
  50+ 923D              ;	30		ECM Active
  51+ 923D              ;	31		ALP1
  52+ 923D              ;	32		ALP2
  53+ 923D              ;	33		ALP2FLIP
  54+ 923D
  55+ 923D              ;	36		Z1					XX15+2yscaled
  56+ 923D              ;	37		                    XX15+3ysign
  57+ 923D              ;	38		                    XX15+4zscaled
  58+ 923D              ;	39							XX15+5zsign
  59+ 923D              ;	3A		XX12				xplot for star
  60+ 923D              ;	3B
  61+ 923D              ;	3C
  62+ 923D              ;	3D
  63+ 923D              ;	3E
  64+ 923D              ;	3F
  65+ 923D              ;	40		varKlo
  66+ 923D              ;	41		varKmid
  67+ 923D              ;	42		varKHi
  68+ 923D              ;	43		varKVeryHi+Sign
  69+ 923D              ;	44
  70+ 923D              ;	45		MSTG				MissileTarget
  71+ 923D              ;	46		INWK				; Inner working space of 37 bytes
  72+ 923D              ;	47		INWK
  73+ 923D              ;	48		INWK
  74+ 923D              ;	49		INWK
  75+ 923D              ;	4A		INWK
  76+ 923D              ;	4B		INWK
  77+ 923D              ;	4C		INWK
  78+ 923D              ;	4D		INWK
  79+ 923D              ;	4E		INWK
  80+ 923D              ;	4F		INWK+9
  81+ 923D              ;	50		INWK
  82+ 923D              ;	51		INWK
  83+ 923D              ;	52		INWK
  84+ 923D              ;	53		INWK
  85+ 923D              ;	54		INWK
  86+ 923D              ;	55		INWK
  87+ 923D              ;	56		INWK
  88+ 923D              ;	57		INWK
  89+ 923D              ;	58		INWK
  90+ 923D              ;	59		INWK
  91+ 923D              ;	5A		INWK
  92+ 923D              ;	5B		INWK
  93+ 923D              ;	5C		INWK
  94+ 923D              ;	5D		INWK
  95+ 923D              ;	5E		INWK
  96+ 923D              ;	5F		INWK
  97+ 923D              ;	60		INWK
  98+ 923D              ;	61		INWK
  99+ 923D              ;	62		INWK
 100+ 923D              ;	63		INWK
 101+ 923D              ;	64		INWK
 102+ 923D              ;	65		INWK31				 clear exploding/display state|missiles
 103+ 923D              ;	66		INWK
 104+ 923D              ;	67		INWK				XX19
 105+ 923D              ;	68		INWK
 106+ 923D              ;	69		INWK
 107+ 923D              ;	6A		INWK36
 108+ 923D              ;	6B
 109+ 923D              ;	6C		QQ15				Current Seed
 110+ 923D              ;	6D		QQ15+1
 111+ 923D              ;	6E		QQ15+2
 112+ 923D              ;	6F		QQ15+3
 113+ 923D              ;	70		QQ15+4
 114+ 923D              ;	71
 115+ 923D              ;	72		XX18   xlo			QQ17
 116+ 923D              ;	73		XX18+1 xhi
 117+ 923D              ;	74		XX18+2 xsgn
 118+ 923D              ;	75		XX18   ylo
 119+ 923D              ;	76		XX18+1 yhi
 120+ 923D              ;	77		XX18+2 ysgn
 121+ 923D              ;	78		XX18   zlo
 122+ 923D              ;	79		XX18+1 zhi
 123+ 923D              ;	7A		XX18+2 zsgn
 124+ 923D              ;	7B		BET2				Pitch Sign
 125+ 923D              ;	7C		BET2FLIP
 126+ 923D              ;	7D		DELTA
 127+ 923D              ;	7E		DELT4Lo
 128+ 923D              ;	7F		DELT4Hi
 129+ 923D              ;	80
 130+ 923D              ;	81		varQ
 131+ 923D              ;	82		varR
 132+ 923D              ;	83		varS
 133+ 923D              ;	84		XSAV
 134+ 923D              ;	85		YSAV
 135+ 923D              ;	86		XX17
 136+ 923D              ;	87		MenuIdMax		QQ11
 137+ 923D              ;	88		ZZDust
 138+ 923D              ;	89
 139+ 923D              ;	8A		MCNT			Move Count
 140+ 923D              ;	8B		ALPHA
 141+ 923D              ;	8C		TYPE
 142+ 923D              ;	8D
 143+ 923D              ;	8E		DockedFlag		QQ12
 144+ 923D              ;	8F
 145+ 923D              ;	96		XX4				Nbr of Normals Visible
 146+ 923D              ;
 147+ 923D              ;   9F      POINT
 148+ 923D              ;	D0
 149+ 923D              ;	D1		varT
 150+ 923D              ;array list of each face during draw flagged visible or not
 151+ 923D              ;	D2      XX2
 152+ 923D              ;	D3      XX2+1
 153+ 923D              ;	D4      XX2+2
 154+ 923D              ;	D5      XX2+3
 155+ 923D              ;	D6      XX2+4
 156+ 923D              ;	D7      XX2+5
 157+ 923D              ;	D8      XX2+6
 158+ 923D              ;	D9      XX2+7
 159+ 923D              ;	DA      XX2+8
 160+ 923D              ;	DB      XX2+9
 161+ 923D              ;	DC      XX2+10
 162+ 923D              ;	DD      XX2+11
 163+ 923D              ;	DE      XX2+12
 164+ 923D              ;	DF		XX2+13
 165+ 923D              ;	E0		XX2+14
 166+ 923D              ;	E1		XX2+15
 167+ 923D              ;	E2
 168+ 923D              ;	E3
 169+ 923D              ;	E4
 170+ 923D              ;	E5
 171+ 923D              ;	E6
 172+ 923D              ;	E7
 173+ 923D              ;	E8
 174+ 923D              ;	E9
 175+ 923D              ;	EA
 176+ 923D              ;	EB
 177+ 923D              ;	EC
 178+ 923D              ;	ED
 179+ 923D              ;	EE
 180+ 923D              ;	8F
 181+ 923D
 182+ 923D 00 00        varAxis1	DW 	0				; address of first axis in a rotation action
 183+ 923F 00 00        varAxis2	DW	0				; address of 2nd axis in a roation action
 184+ 9241              ; Variables to simulate 6502 registers until code fixed
 185+ 9241              ; These must be here in this order as reading Y and X can then be a 16 bit read
 186+ 9241 00           regX		DB	0               ; using 16 bit read into BC this would go into C
 187+ 9242 00           regY		DB	0               ; using 16 bit read into BC this would go into B
 188+ 9243 00           regA		DB	0
 189+ 9244
 190+ 9244
 191+ 9244 00           varGPLoopA	DB	0				; General Purpose innermost loop variable
 192+ 9245 00 00        INF			DW	0				; page 0 &20 Used to get address from UNIV array
 193+ 9247 00 00        INF28		DW	0				; page 0 &20 Used to get address from UNIV array
 194+ 9249
 195+ 9249
 196+ 9249
 197+ 9249              ;XX16		DS	16				; 16 byte Matrix
 198+ 9249
 199+ 9249              P0INWK							; page 0 & 46
 200+ 9249              p0INWK31						; page 0 & 65
 201+ 9249              P0INWK36						; PAGE 0 &6A
 202+ 9249
 203+ 9249 00           XX4			DB	0				; XX4 page 0 &96 last Normal Found to be visible
 204+ 924A              LastNormalVisible	equ	XX4
 205+ 924A              varXX4              equ XX4
 206+ 924A
 207+ 924A
 208+ 924A
 209+ 924A 00           PATG		DB	0				; 6502 &03C9
 210+ 924B 00 00        SLSP 		DW	0				; &03B0 \ SLSP \ ship lines pointer
 211+ 924D
 212+ 924D
 213+ 924D              ;UNIV		DS FreeListSize*2	; Array of Universe Pointers
 214+ 924D              ;HULLINDEX	DS ShipTypeSize*2	; hull index for table at XX21= &5600 XX21-1,Y
 215+ 924D
 216+ 924D              ; Present System Variables
 217+ 924D
 218+ 924D 2B           RandomSeed				DB	43			; 00 DEBUG JUST SOME START VALUES
 219+ 924E 20           RandomSeed1				DB	32	; 01
 220+ 924F 0C           RandomSeed2				DB	12			; 02
 221+ 9250 42           RandomSeed3				DB	66			; 03
 222+ 9251
 223+ 9251 00           varT1					DB	0				; 06
 224+ 9252 00           SClo					DB 0				; 07
 225+ 9253 00           SChi					DB 0				; 08
 226+ 9254 00           varP					DB 0 				; 10	XX16+7
 227+ 9255 00           varPhi					DB 0 				; 11	XX16+8
 228+ 9256 00           varPhi2					DB 0 				; 12	XX16+9
 229+ 9257              varPp1                  equ varPhi
 230+ 9257              varPp2                  equ varPhi2
 231+ 9257 00           UnivPointerLo			DB	0				; 20		INF                 XX0+2
 232+ 9258 00           UnivPointerHi			DB	0				; 21      INF+1               XX0+3
 233+ 9259              UnivPointer				equ	UnivPointerLo
 234+ 9259 00           varV					DB 0				; 22                          XX0+4
 235+ 925A 00           varVHi					DB 0				; 23                          XX0+5
 236+ 925B 00           varXXlo                 DB 0                ; 24
 237+ 925C 00           varXXHi                 DB 0                ; 25
 238+ 925D              varXX					equ	varXXlo
 239+ 925D 00           YYlo                    DB 0                ; 26
 240+ 925E 00           YYHi                    DB 0                ; 27
 241+ 925F              varYY					equ	YYlo
 242+ 925F              											;	28
 243+ 925F              											;	29
 244+ 925F              ;PlayerShipPositionData - Must be contiguous for setup
 245+ 925F 00           BETA 					DB	0               ; 2A        (pitch done)
 246+ 9260 00           JSTY                    DB  0               ; Joystick analog
 247+ 9261 00           BET1 					DB	0               ; 2B        lower7 magnitude
 248+ 9262 00           BET2                    DB  0               ;            climb sign
 249+ 9263 00           BET2FLIP				DB	0				; 7C		BET 2 pitch Sign negated
 250+ 9264 1F           BET1MAXC                DB  31              ; max climb
 251+ 9265 E1           BET1MAXD                DB  -31             ; max dive
 252+ 9266 00           XC						DB	0               ; 2C
 253+ 9267 00           YC						DB 	0               ; 2D
 254+ 9268 00           InnerHyperCount			DB 	0				; 2F QQ22+1
 255+ 9269 00           OuterHyperCount			DB 	0				; 2E QQ22
 256+ 926A 00           HyperCircle             DB  0
 257+ 926B 00           ECMActive				DB 	0				; 30		ECM Active flag
 258+ 926C 00           ECMLoopA                DB  0
 259+ 926D 00           ECMLoopB                DB  0
 260+ 926E 00 00        JSTX                    DW  0               ;           Joystick analog value
 261+ 9270 00           ALPHA					DB	0				; 8D        Alpha with bit 7 sign
 262+ 9271 00           ALP1					DB 	0				; 31		ALP1	Roll magnitude Also Apha
 263+ 9272 00           ALP2					DB  0				; 32		ALP2	Roll Sign
 264+ 9273 00           ALP2FLIP				DB  0				; 33		ALP2	negated roll sign
 265+ 9274 1F           ALP1MAXR                DB  31               ;   Maximum roll, added becuase we may allow different ship types
 266+ 9275 E1           ALP1MAXL                DB  -31             ;   Maximum roll, added becuase we may allow different ship types
 267+ 9276
 268+ 9276 00           MessageCount            DB 0                ; used for enquing messages later
 269+ 9277 00           MessageTimout           DB 0                ; count down before current message is erased
 270+ 9278 00 00        MissileTarget			DW	0				; 45
 271+ 927A 00 00 00...  IndexedWork				DS	37				; General purpose work space when doing temp arrays
 272+ 929F
 273+ 929F              ; MOVED TO Universe XX19					DB	0				; page 0 &67
 274+ 929F              ; MOVED TO Universe XX20					DB	0				; page 0 &67 also used as XX19+1 for XX19 being a word
 275+ 929F              NormalCountCopyBy4		equ	XX20			; Also used for normal * 4 holding variable
 276+ 929F 00           XX21					DB  0				; this may be part of XX20/xx21 accordign to spawn new shipXX21		DW	0				; Ah XX21 is hull pointer  hull pointer lo as it can;t hold HULLINDX as 16bit array
 277+ 92A0              ;XX21 is the pointer table to the pages for ship types. this will be repalaced by paging so just need an equate for first page
 278+ 92A0
 279+ 92A0
 280+ 92A0 00 00 00...  SystemSeed				DS  5				;	6C		QQ15	Current Galaxy Seed
 281+ 92A5              											;	6D		QQ15+1
 282+ 92A5              											;	6E		QQ15+2
 283+ 92A5              											;	6F		QQ15+3
 284+ 92A5              											;	70		QQ15+4
 285+ 92A5              											;	71		QQ15+5
 286+ 92A5 00           QQ17					DB	0				;   72
 287+ 92A6 00           XX18xlo                 DB  0               ;	72		XX18   xlo
 288+ 92A7 00           XX18xhi                 DB  0               ;	73		XX18+1 xhi
 289+ 92A8 00           XX18xsg                 DB  0               ;	74		XX18+2 xsgn
 290+ 92A9 00           XX18ylo                 DB  0               ;	75		XX18   ylo
 291+ 92AA 00           XX18yhi                 DB  0               ;	76		XX18+1 yhi
 292+ 92AB 00           XX18ysg                 DB  0               ;	77		XX18+2 ysgn
 293+ 92AC 00           XX18zlo                 DB  0               ;	78		XX18   zlo
 294+ 92AD 00           XX18zhi                 DB  0               ;	79		XX18+1 zhi
 295+ 92AE 00           XX18zsg                 DB  0               ;	7A		XX18+2 zsgn
 296+ 92AF
 297+ 92AF 28           SHIPMAXSPEED            DB  40              ; variable to facilitate ship editing later
 298+ 92B0 00           DELTA					DB 	0				; 7D 		DELTA  \ bpl -2 inserted here to stall from title code if byte check fails
 299+ 92B1 00           DELT4Lo					DB 	0				; 7E
 300+ 92B2 00           DELT4Hi					DB 	0				; 7F
 301+ 92B3              DELTA4                  equ                 DELT4Lo
 302+ 92B3
 303+ 92B3
 304+ 92B3              ; Not thise must be in this order else 16 bit fetches will fail
 305+ 92B3 00           varU                    DB  0               ;   80
 306+ 92B4 00           varQ					DB  0 				;	81
 307+ 92B5 00           varR					DB  0 				;	82
 308+ 92B6 00           varS					DB  0 				;	83
 309+ 92B7              varRS                   equ varR
 310+ 92B7
 311+ 92B7 00 00        varU16                  DW  0               ; 16 bit variant on varU as I can't use above for this
 312+ 92B9
 313+ 92B9 00           XSAV					DB	0				; 84	   XSAV usef for nearby ship count outer
 314+ 92BA 00           YSAV                    DB  0               ; 85
 315+ 92BB 00           XX17					DB	0				; 86
 316+ 92BC              RequiredScale			equ  XX17			; use to hold calculated scale in drawing ship
 317+ 92BC              varXX17                 equ  XX17
 318+ 92BC 00           ScreenChanged           DB  0
 319+ 92BD 00           ScreenIndex             DB  0
 320+ 92BE 00           CursorKeysPressed       DB  0               ; mapping of the current key presses
 321+ 92BF                                                          ; 7    6    5    4     3    2        1    0
 322+ 92BF                                                          ; Up   Down Left Right Home Recentre
 323+ 92BF 00           InvertedYAxis           DB  0
 324+ 92C0 00           MenuIdMax				DB	0				;	87		MenuIdMax		QQ11
 325+ 92C1              											; Bit 7 Set  ShortRangeChart    $80
 326+ 92C1              											; Bit 6 Set  Galactic Chart     $40
 327+ 92C1              											; Bit 5 Set  Market Place       $20
 328+ 92C1              											; Bit 4 Set  Status Screen      $10
 329+ 92C1              											; Bit 3 Set  Display Inventory  $08
 330+ 92C1                                                          ; Bit 2 Set  Planet Data        $04
 331+ 92C1                                                          ; View bit combinations if the ones above not matched
 332+ 92C1                                                          ; bits 1 0
 333+ 92C1                                                          ;      1 1  Front view , i.e. $03
 334+ 92C1                                                          ;      1 0  Aft View          $02
 335+ 92C1                                                          ;      0 1  Left View         $01
 336+ 92C1                                                          ;      0 0  Right view        $00
 337+ 92C1              											; Bit 0 Set  Data On System
 338+ 92C1              											; 0  Space View (Not a menu)
 339+ 92C1 00           ZZDust					DB	0				;	88		ZZDust (Poss 16 bit need to check)
 340+ 92C2 00           XX13                    DB  0               ;   89
 341+ 92C3 00           MCNT					DB 	0				; 8A
 342+ 92C4 00           TYPE					DB	0				; 8C used for ship type in drawing
 343+ 92C5              ;Docked flag = 00 = in free space
 344+ 92C5              ;              FF = Docked
 345+ 92C5              ;              FE = transition
 346+ 92C5              ;              FD = Setup open space and transition to not docked
 347+ 92C5              ;              FC = Hyperspace manimation
 348+ 92C5              ;              FB = Hyperspace complete
 349+ 92C5 00           DockedFlag				DB	0				; 8E -
 350+ 92C6 00           GamePaused              DB  0
 351+ 92C7 00           varSWAP                 DB  0               ; 90 , general purpose swap variable
 352+ 92C8 00           varCNT                  DB  0               ; 93
 353+ 92C9
 354+ 92C9 00           varK					DB	0				; 40
 355+ 92CA 00           varKp1					DB	0				; 41
 356+ 92CB 00           varKp2					DB	0				; 42
 357+ 92CC 00           varKp3					DB	0				; 43
 358+ 92CD
 359+ 92CD 00           varK2                   DB  0               ; 9B
 360+ 92CE 00           varK2p1                 DB  0               ; 9C K2 plus 1
 361+ 92CF 00           varK2p2                 DB  0               ; 9D K2 plus 2
 362+ 92D0 00           varK2p3                 DB  0               ; 9E K2 plus 3
 363+ 92D1
 364+ 92D1 00           Point                   DB  0               ; 9F      POINT
 365+ 92D2
 366+ 92D2 00           varT					DB	0				; D1
 367+ 92D3
 368+ 92D3 00 00 00...  varVector9ByteWork      DS  9
 369+ 92DC
 370+ 92DC 00 00 00 00  varK3					DS	4				; D2
 371+ 92E0 00           varK3p2					DB	0				; 42
 372+ 92E1 00           varK3p3					DB	0				; 43
 373+ 92E2              varK3p1					equ varK3+1			; D3
 374+ 92E2 00 00 00 00  varK4					DS	4				; E0
 375+ 92E6              varK4p1					equ varK4+1			; D3
 376+ 92E6
 377+ 92E6              ;PlayerData:
 378+ 92E6 00           PlayerForwardSheild0	DB	0 ; ?????
 379+ 92E7 00           PlayerForwardSheild1    DB	0
 380+ 92E8 00           PlayerForwardSheild2    DB	0
 381+ 92E9
 382+ 92E9
 383+ 92E9              ;Heap
 384+ 92E9
 385+ 92E9 00 00        HeapStart				DS	2				; &0100 XX3 50 bytes for now
 386+ 92EB 00 00 00...  HeapData				DS	50
 387+ 931D              ; Contains 				X 16 bit, Y 16 bit
 388+ 931D              ;RuntimeData:
 389+ 931D              HeapHead				equ HeapStart
 390+ 931D
 391+ 931D              ; For the UniverseSlot list, for an optimisation the type slot will be the ship type, e.g. ship type this will optimise searching for a station or star
 392+ 931D              ; bit 7 will be set for a sun or planet so we can only ever have 128 types of ship, in relality there are about 3 types
 393+ 931D              ; note this is ship type as it space station, transporter, pirate etc not model of ship
 394+ 931D              ; This replaces FRIN
 395+ 931D              ; slot 0 always equals the planet
 396+ 931D              ; slot 1 is the space station or sun depending on if we are in the space station safe zone)
 397+ 931D 00 00 00...  UniverseSlotList		DS UniverseListSize		; &0311 for 12 bytes Array of Free Index - Now array of while universe pages are occupied
 398+ 9329 00 00 00...  UniverseSlotCount       DS UniverseListSize * 2 ; To be implemented, keeps a count of each slot type, may merge into slot list and set as a DW
 399+ 9341 00           CurrentUniverseAI       DB  0               ; used to cycle ships in each iterations of main loop
 400+ 9342 00           SelectedUniverseSlot    DB  0
 401+ 9343 00           SUN						DB	0				; &031D Actually MANY -1? As we can only have 1?
 402+ 9344 00           MANY					DB	0				; &031E array of ship types???
 403+ 9345 00           SpaceStationPresent		DB	0				; &0320	Wonder if many is counter of type in univ objects?
 404+ 9346 00           						DB	0				; &0321	Speculative?
 405+ 9347 00           						DB	0				; &0322	Speculative?
 406+ 9348 00           						DB	0				; &0323	Speculative?
 407+ 9349 00           						DB	0				; &0324	Speculative?
 408+ 934A 00           						DB	0				; &0325	Speculative?
 409+ 934B 00           						DB	0				; &0326	Speculative?
 410+ 934C 00           						DB	0				; &0327	Speculative?
 411+ 934D 00           TransporterPresent		DB	0				; &0328	MANY + 10 (or #SHU + 1)
 412+ 934E 00           						DB	0				; &0329	MANY + 11 Speculative?
 413+ 934F 00           				        DB	0				; &032A	MANY + 12 Speculative?
 414+ 9350 00           				        DB	0				; &032B	MANY + 13 Speculative?
 415+ 9351 00           				        DB	0				; &032C	MANY + 14 Speculative?
 416+ 9352 00           				        DB	0				; &032D	MANY + 15 Speculative?
 417+ 9353 00           				        DB	0				; &032E	MANY+COPS #COP Confirmed in code
 418+ 9354 00           				        DB	0				; &032F	MANY + 17 Speculative?
 419+ 9355 00           				        DB	0				; &0330	MANY + 18 Speculative?
 420+ 9356 00           				        DB	0				; &0331	MANY + 19 Speculative?
 421+ 9357 00           						DB	0				; &0332	MANY + 20 Speculative?
 422+ 9358 00           				        DB	0				; &0333	MANY + 21 Speculative?
 423+ 9359 00           				        DB	0				; &0334	MANY + 22 Speculative?
 424+ 935A 00           				        DB	0				; &0335	MANY + 23 Speculative?
 425+ 935B 00           				        DB	0				; &0336	MANY + 24 Speculative?
 426+ 935C 00           				        DB	0				; &0337	MANY + 25 Speculative?
 427+ 935D 00           				        DB	0				; &0338	MANY + 26 Speculative?
 428+ 935E 00           				        DB	0				; &0339	MANY + 27 Speculative?
 429+ 935F 00           				        DB	0				; &033A	MANY + 28 Speculative?
 430+ 9360 00           				        DB	0				; &033B	MANY + 29 Speculative?
 431+ 9361 00           				        DB	0				; &033C	MANY + 30 Thargoids
 432+ 9362 00           				        DB	0				; &033D	MANY + 31 Constrictor?
 433+ 9363 00           JunkCount				DB  0				; $033E
 434+ 9364 00           PlayerMisJump			DB	0				; $0341 witchspace misjump
 435+ 9365 00           CabinTemp				DB	0				; $0342
 436+ 9366 00           MissileArmedStatus		DB	0				; 0344 MSAR
 437+ 9367 00           View					DB	0				; 0345 Index for laser mount and screen view, 1 = front 2 = aft = 4 left 8 = right
 438+ 9368 00           GunTemperature			DB	0				; 0347	GNTMP
 439+ 9369 00           HyperSpaceFX			DB	0				; 0348 HFX (probabyl BBC specific
 440+ 936A 00           ExtraVessels			DB	0				; 0349 EV Use d by cops, extra vessels still to spawn?
 441+ 936B 00           Delay					DB	0				; 034A Delay general purpose eg. spawing EV or when printign messages
 442+ 936C 00           MessageForDestroyed		DB	0				; 034B Message flag for item + destroyed
 443+ 936D 00           JoystickX				DB	0				; 034C JSTX
 444+ 936E 00           JoystickY				DB	0				; 034D JSTY
 445+ 936F 00           XSAV2 					DB	0				; 034E used to temporary save 6502 X reg
 446+ 9370 00           YSAV2 					DB	0				; 034F used to temporary save 6502 Y reg
 447+ 9371 00 00 00...  CommanderName			DS  8				; 0350 - 3057 Commander Name
 448+ 9379 00           CommanderName0			DB	0				; Sneaky little 0 to allow use of print name directly
 449+ 937A 00           VarTP					DB	0				; 0358 TP? The Plan  \ mission uses lower 4 bits
 450+ 937B              											; Bit mask XXXX10XX - Thargoid plan mission
 451+ 937B              ;036C to D???
 452+ 937B 00 00 00...  DampingKeys				DS  7				; 0387 - 038D
 453+ 9382              ;  #&6 Does K toggle keyboard/joystick control -  03CD certainly makes keyboard not work anymore.
 454+ 9382              ;  #&5 Does J reverse both joystick channels
 455+ 9382              ;  #&4 Does Y reverse joystick Y channel			03CB
 456+ 9382              ;  #&2 Does X toggle startup message display ? PATG?	03C9
 457+ 9382              ;  #&3 Does F toggle flashing information			03CA
 458+ 9382              ;  #&1 Does A toggle keyboard auto-recentering ?
 459+ 9382              ;  #&0 Caps-lock toggles keyboard flight damping
 460+ 9382 00           NbrMissiles				DB	0				; 038B	Does this clash with Dampingkeys?
 461+ 9383 00           FugitiveInnocentStatus	DB	0				; 038C	FIST
 462+ 9384 00 00 00...  StockAvaliabiliy		DS 	16				; 038D - 039C Stock inventory in station
 463+ 9394 00           AlienItemsAvaliability  DB	0				; 039D
 464+ 9395 00           RandomMarketSeed		DB	0				; 039E   \ QQ26	\ random byte for each system vist (for market)
 465+ 9396 00 00        KillTally  				DW	0				; 039F - 03A0 \ TALLY   \ kills lo hi
 466+ 9398 00           COMP     				DB	0				; 03A1 2nd competion byte used for save integrity checks?
 467+ 9399              											;
 468+ 9399 00           MCH						DB	0				; 03A4  \ MCH  \ old message to erase
 469+ 939A 00           ForeShield				DB	0				; 03A5
 470+ 939B 00           AftShield				DB	0				; 03A6
 471+ 939C 00           PlayerEnergy			DB	0				; 03A7
 472+ 939D 00           CompassX				DB	0				; 03A8
 473+ 939E 00           CompassY				DB	0				; 03A9
 474+ 939F 00           MarketPrice				DB	0				; 03AA QQ24
 475+ 93A0 00           MaxStockAvaliable		DB  0				; 03AB   \ QQ25     \ max available
 476+ 93A1 00           SystemEconomy			DB  0				; 03AC \ QQ28   \ the economy byte of present system (0 is Rich Ind.)
 477+ 93A2 00           CargoItem				DB	0				; 03AD (I think its item type just scooped) QQ29
 478+ 93A3 00 00        ShipLineStackPointer	DW	0				; 03B0 & 03B1 ship Lines pointer reset to top LS% = &0CFF (make DW for z80 and direct hl pointer)
 479+ 93A5              											; this is ship lines stack pointer so may be redundant with paging
 480+ 93A5              											; LS = line stack so we will have one for now to remove later
 481+ 93A5 00           COK						DB	0				; 0366 Competition Byte what ? Does some file check and accelleration check
 482+ 93A6 00           DisplayEcononmy			DB	0				; 03B8
 483+ 93A7 00           DisplayGovernment		DB  0				; 03B9 Is it target? 03B9 \ QQ4	 \ Government, 0 is Anarchy.
 484+ 93A8 00           DisplayTekLevel			DB	0				; 03BA   \ QQ5	\ Tech
 485+ 93A9 00 00        DisplayPopulation		DW	0				; 03BB \ QQ6  \ population*10
 486+ 93AB 00 00        DisplayProductivity		DW	0				; 03BD \ QQ7   \ productivity*10
 487+ 93AD 00 00        Distance          		DW	0				; 03BE \ QQ8 distince in 0.1LY units
 488+ 93AF 00 00        DisplayRadius			DW	0
 489+ 93B1              ; --- Used in creation of sun and planet----;
 490+ 93B1 00           PlanetXPos     DS  1
 491+ 93B2 00           PlanetYPos     DS  1
 492+ 93B3 00           PlanetZPos     DS  1
 493+ 93B4 00           PlanetType     DS  1
 494+ 93B5 00           SunXPos        DS  1
 495+ 93B6 00           SunYPos        DS  1
 496+ 93B7 00           SunZPos        DS  1
 497+ 93B8              ; --- Galaxy Data --------------------------;
 498+ 93B8 00           Galaxy      			DB	0				; 0367 Galaxy (incremented with galactiv drive
 499+ 93B9 00 00 00...  WorkingSeeds			DS	6
 500+ 93BF 00 00 00...  PresentSystemSeeds		DS	6				; 03B2 - 03B7
 501+ 93C5 00 00 00...  GalaxySeeds				DS	6				; 035B - 0360 QQ21
 502+ 93CB 00           PresentSystemX			DB	0				; 0359 - 035A QQ0 X Y
 503+ 93CC 00           PresentSystemY			DB  0
 504+ 93CD 00           TargetPlanetX			DB	0               ; 03C1
 505+ 93CE 00           TargetPlanetY			DB	0               ; 03C2
 506+ 93CF 00           GovPresentSystem		DB	0				; 03AE Govenment
 507+ 93D0 00           TekPresentSystem		DB	0				; 03AF Technology
 508+ 93D1              ;SRCTargetPlanetX		DB	0               ; Used for short range chart cursor
 509+ 93D1              ;SRCTargetPlanetY		DB	0               ; then divided down to target planet for compatibilit with galactic chart routines
 510+ 93D1 00           NumberOfStarsNOSTM		DB	0				; 03C3 NOSTM  \ number of stars, dust.
 511+ 93D2
 512+ 93D2 00           CompassColor			DB	0				; 03C5
 513+ 93D3 00           SoundToggle				DB	0				; 03C6
 514+ 93D4 00           KeyboardRecenterToggle	DB	0				; 03C8
 515+ 93D5 00           PATGMask				DB	0				; &03C9    \ PATG	\ Mask to scan keyboard X-key, for misjump
 516+ 93D6 00           FlashToggle				DB  0				; 03CA \ FLH \ flash toggle
 517+ 93D7 00           ReverseJoystick			DB	0				; 03CB \ JSTGY \ Y reverse joystick Y channel
 518+ 93D8 00           JoystickToggle			DB	0				; 03CD  \ JSTK    \ K toggle keyboard/joystick
 519+ 93D9 00           DigitalJoystick			DB	0				; 03CE \ JDB   \ . = toggle between keyboard and bitpaddle
 520+ 93DA 00           DiskReadFailFlag		DB	0				; 03CF \ CATF \ Disk catalog fail flag
 521+ 93DB
 522+ 93DB              ; Working Data
 523+ 93DB
 524+ 93DB              ;UniverseTable			DS	26				; 1741  \ address pointers for 13 ships INF on pages &9. 37 bytes each.
 525+ 93DB              ; $0900 =	EQUW page9+37* 0 \ copied to inner worskpace INWK on zero-page when needed
 526+ 93DB              ; $0925 =	EQUW page9+37* 1
 527+ 93DB              ; $094A =	EQUW page9+37* 2
 528+ 93DB              ; $096F =	EQUW page9+37* 3
 529+ 93DB              ; $0994 =	EQUW page9+37* 4
 530+ 93DB              ; $09B9 =	EQUW page9+37* 5
 531+ 93DB              ; $09DE =	EQUW page9+37* 6
 532+ 93DB              ; $0A03 =	EQUW page9+37* 7
 533+ 93DB              ; $0A28 =	EQUW page9+37* 8
 534+ 93DB              ; $0A4D =	EQUW page9+37* 9
 535+ 93DB              ; $0A72 =	EQUW page9+37*10
 536+ 93DB              ; $0A97 =	EQUW page9+37*11
 537+ 93DB              ; $0ABC =	EQUW page9+37*12 \ allwk up to &0ABC while heap for edges working down from &CFF.
 538+ 93DB
 539+ 93DB
 540+ 93DB
 541+ 93DB              ; 0b00 is start address of data to save
 542+ 93DB 00           MissionData				DB	0				; &0B00	  \ look at data, first byte is TP mission bits
 543+ 93DC
 544+ 93DC 00 00        FileNameStringPointer	DW	0				;0C00	   \ pointer to filename string
 545+ 93DE 00 00        CommanderLoadAddress	DW	0				;0C03
 546+ 93E0 00 00        LengthOfFile			DW	0				;0C0B
 547+ 93E2 00 00        SaveDataEndAddress		DW	0				;&0C0F	      \ &0C00 is end address of data to save
 548+ 93E4
 549+ 93E4 00 00 00...  EdgesBuffer				DS 50
 550+ 9416              EdgesBufferSP			equ	$				; Was $0CFF			; Heap pointer for edges buffer
 551+ 9416              ShipLinesBufferSP		equ EdgesBufferSP	; was $0CFF
 552+ 9416
 553+ 9416 00 00 00...  ShipLineStack			DS  70			; For now but will be in the page later
 554+ 945C              ShipLineStackTop		equ $ - ShipLineStack
 555+ 945C
 556+ 945C 00 00 00...  LSO						DS 	$C0				;0E00 Line Buffer Solar of 192 lines (may be 191 in reality)
 557+ 951C              ; LSX vector overlaps with LSO
 558+ 951C 00           LSX2					DB	0				; &0EC0	    \ LSX2 bline buffer size?
 559+ 951D 00           LSY2					DB	0           	; &0F0E	    \ LSY2
 560+ 951E
 561+ 951E              ; Star Positions are 16 bit 3d coordinates
 562+ 951E 00 00 00...  varDust                 DS  MaxNumberOfStars * 6
 563+ 9560 00 00 00...  varDustSceen            DS  MaxNumberOfStars * 2 ; To optimise star list to wipe from screen
 564+ 9576 00           varStarX                DB  0
 565+ 9577 00           varStarY                DB  0
 566+ 9578 00 00 00...  varDustX                DS MaxNumberOfStars *2
 567+ 958E 00 00 00...  varDustY                DS MaxNumberOfStars *2
 568+ 95A4 00 00 00...  varDustZ                DS MaxNumberOfStars *2
 569+ 95BA
 570+ 95BA              FShieldStart            equ $8410
 571+ 95BA              AShieldStart            equ $8D10
 572+ 95BA              FuelStart               equ $9410
 573+ 95BA
 574+ 95BA              EnergyBar4Start         equ $A5D5
 575+ 95BA              EnergyBar3Start         equ $ADD5
 576+ 95BA              EnergyBar2Start         equ $B5D5
 577+ 95BA              EnergyBar1Start         equ $BDD5
 578+ 95BA              ; 70 /2 = 35 values
 579+ 95BA              ;                            0                             1                             2                             3
 580+ 95BA              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6
 581+ 95BA 01 02 02 03  FuelMapping             DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,19,20,21,21,22,23,24,25,26,27,28,30,31,31
 581+ 95BE 04 04 05 06
 581+ 95C2 06 07 08 09
 581+ 95C6 0A 0A 0B 0C
 581+ 95CA 0D 0E 0E 0F
 581+ 95CE 10 10 11 13
 581+ 95D2 14 15 15 16
 581+ 95D6 17 18 19 1A
 581+ 95DA 1B 1C 1E 1F
 581+ 95DE 1F
 582+ 95DF              SpeedoStart             equ $84D1
 583+ 95DF              ;                            0                             1                             2                             3                             4
 584+ 95DF              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0
 585+ 95DF 01 02 02 03  SpeedoMapping           DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,18,19,20,20,21,22,23,24,24,25,26,26,27,28,28,29,30,31
 585+ 95E3 04 04 05 06
 585+ 95E7 06 07 08 09
 585+ 95EB 0A 0A 0B 0C
 585+ 95EF 0D 0E 0E 0F
 585+ 95F3 10 10 11 12
 585+ 95F7 13 14 14 15
 585+ 95FB 16 17 18 18
 585+ 95FF 19 1A 1A 1B
 585+ 9603 1C 1C 1D 1E
 585+ 9607 1F
 586+ 9608
 587+ 9608              DialMiddleXPos          equ $E1
 588+ 9608              RollMiddle              equ $8CE0
 589+ 9608              PitchMiddle             equ $94E0
 590+ 9608
 591+ 9608
 592+ 9608              ResetPlayerShip:        ZeroThrottle
 592+ 9608 AF          >                        xor     a
 592+ 9609 32 B0 92    >                        ld      (DELTA),a
 592+ 960C 32 B1 92    >                        ld      (DELT4Lo),a
 592+ 960F 32 B2 92    >                        ld      (DELT4Lo+1),a
 593+ 9612                                      ZeroPitch
 593+ 9612 AF          >                        xor     a
 593+ 9613 32 62 92    >                        ld      (BET2),a
 593+ 9616 32 63 92    >                        ld      (BET2FLIP),a
 593+ 9619 32 60 92    >                        ld      (JSTY),a
 593+ 961C 32 5F 92    >                        ld      (BETA),a
 594+ 961F                                      ZeroRoll
 594+ 961F AF          >                        xor     a                              ; zero roll and climb
 594+ 9620 32 72 92    >                        ld      (ALP2),a
 594+ 9623 32 73 92    >                        ld      (ALP2FLIP),a
 594+ 9626 32 6E 92    >                        ld      (JSTX),a
 594+ 9629 32 70 92    >                        ld      (ALPHA),a
 595+ 962C                                      ClearMissileTarget
 595+ 962C AF          >                        xor     a
 595+ 962D 3D          >                        dec     a
 595+ 962E 32 78 92    >                        ld      (MissileTarget),a
 596+ 9631                                      ClearECM
 596+ 9631 AF          >                        xor     a
 596+ 9632 32 6C 92    >                        ld      (ECMLoopA),a
 596+ 9635 32 6D 92    >                        ld      (ECMLoopB),a
 597+ 9638                                      ChargeEnergyAndShields
 597+ 9638 3E FF       >                        ld      a,$FF
 597+ 963A 32 9C 93    >                        ld      (PlayerEnergy),a
 597+ 963D 32 9A 93    >                        ld      (ForeShield),a
 597+ 9640 32 9B 93    >                        ld      (AftShield),a
 598+ 9643 C9                                   ret
 599+ 9644
# file closed: ./Variables/general_variables.asm
 954  9644
 955  9644                  INCLUDE "./Variables/UniverseSlotRoutines.asm"
# file opened: ./Variables/UniverseSlotRoutines.asm
   1+ 9644 AF           ClearSlotCount:         xor     a
   2+ 9645 21 29 93                             ld      hl,UniverseSlotCount
   3+ 9648 06 18                                ld      b, UniverseListSize * 2
   4+ 964A 77           .fillLoop:              ld      (hl),a
   5+ 964B 23                                   inc     hl
   6+ 964C 10 FC                                djnz    .fillLoop
   7+ 964E C9                                   ret
   8+ 964F
   9+ 964F              ; Initialises all types to a count of 1 where there is an occupied universe slot
  10+ 964F              ; this needs expanding to cater for a missing type, find type and increment count (use cpir?)
  11+ 964F CD 44 96     CorrectSlotCount:       call    ClearSlotCount
  12+ 9652 21 29 93                             ld      hl,UniverseSlotCount
  13+ 9655 11 1D 93                             ld      de,UniverseSlotList
  14+ 9658 06 0C                                ld      b,UniverseListSize
  15+ 965A 1A           .fillLoop:              ld      a,(de)
  16+ 965B FE FF                                cp      $FF
  17+ 965D 28 05                                jr      z,.SkipSlot
  18+ 965F 77           .CorrectSlot:           ld      (hl),a
  19+ 9660 23                                   inc     hl
  20+ 9661 36 01                                ld      (hl),1
  21+ 9663 23                                   inc     hl
  22+ 9664 13           .SkipSlot               inc     de
  23+ 9665 10 F3                                djnz    .fillLoop
  24+ 9667 C9                                   ret
  25+ 9668
  26+ 9668 3E FF        ClearUnivExceptSun:     ld      a,$FF
  27+ 966A 21 1E 93                             ld      hl,UniverseSlotList + 1
  28+ 966D 06 0B                                ld      b, UniverseListSize - 1
  29+ 966F 77           .fillLoop:              ld      (hl),a
  30+ 9670 23                                   inc     hl
  31+ 9671 10 FC                                djnz    .fillLoop
  32+ 9673 C9                                   ret
  33+ 9674
  34+ 9674 3E 81        SetSunSlot:             ld      a,129
  35+ 9676 32 1D 93                             ld      (UniverseSlotList),a
  36+ 9679 C9                                   ret
  37+ 967A
  38+ 967A 3E 81        SetPlanetSlot:          ld      a,129
  39+ 967C 32 1E 93                             ld      (UniverseSlotList+1),a
  40+ 967F C9                                   ret
  41+ 9680
  42+ 9680              ; Wipe all items
  43+ 9680 3E FF        ClearUnivSlotList:      ld      a,$FF
  44+ 9682 21 1D 93                             ld      hl,UniverseSlotList
  45+ 9685 06 0C                                ld      b, UniverseListSize
  46+ 9687 77           .fillLoop:              ld      (hl),a
  47+ 9688 23                                   inc     hl
  48+ 9689 10 FC                                djnz    .fillLoop
  49+ 968B C9                                   ret
  50+ 968C
  51+ 968C 21 1E 93     SetSlot1ToSpaceStation: ld      hl,UniverseSlotList+1
  52+ 968F 36 02                                ld      (hl),ShipTypeStation
  53+ 9691 C9                                   ret
  54+ 9692
  55+ 9692 21 1D 93     SetSlotAToTypeB:        ld      hl,UniverseSlotList
  56+ 9695 ED 31                                add     hl,a
  57+ 9697 70                                   ld      (hl),b
  58+ 9698 C9                                   ret
  59+ 9699
  60+ 9699              ; Clears all except slot A, used when say restarting a space station post launch
  61+ 9699 57           ClearFreeSlotListSaveA: ld      d,a
  62+ 969A 0E 00                                ld      c,0
  63+ 969C 21 1D 93                             ld      hl,UniverseSlotList
  64+ 969F 06 0C                                ld      b, UniverseListSize
  65+ 96A1 79           .fillLoop:              ld      a,c
  66+ 96A2 BA                                   cp      d
  67+ 96A3 28 03                                jr      z,.SkipSlot
  68+ 96A5 3E FF                                ld      a,$FF
  69+ 96A7 77                                   ld      (hl),a
  70+ 96A8 23           .SkipSlot:              inc     hl
  71+ 96A9 10 F6                                djnz    .fillLoop
  72+ 96AB C9                                   ret
  73+ 96AC
  74+ 96AC 21 1D 93     SetSlotAOccupiedByB:    ld      hl,UniverseSlotList
  75+ 96AF ED 31                                add     hl,a
  76+ 96B1 78                                   ld      a,b
  77+ 96B2 70                                   ld      (hl),b
  78+ 96B3 C9                                   ret
  79+ 96B4
  80+ 96B4 21 1D 93     FindSpaceStationSlotInC:ld      hl,UniverseSlotList
  81+ 96B7 06 0C                                ld      b,UniverseListSize
  82+ 96B9 0E 00                                ld      c,0
  83+ 96BB 7E           .SearchLoop:            ld      a,(hl)
  84+ 96BC                                      JumpIfAEqNusng ShipTypeStation, .FoundSlot
  84+ 96BC FE 02       >                cp     ShipTypeStation
  84+ 96BE CA C7 96    >                jp      z,.FoundSlot
  85+ 96C1 0C                                   inc     c
  86+ 96C2 23                                   inc     hl
  87+ 96C3 10 F6                                djnz    .SearchLoop
  88+ 96C5                                      SetCarryFlag
  88+ 96C5 37          >                    scf
  89+ 96C6 C9                                   ret
  90+ 96C7              .FoundSlot:             ClearCarryFlag
  90+ 96C7 B7          >                    or a
  91+ 96C8 C9                                   ret
  92+ 96C9
  93+ 96C9 21 1D 93     GetTypeAtSlotA:         ld      hl,UniverseSlotList
  94+ 96CC ED 31                                add     hl,a
  95+ 96CE 7E                                   ld      a,(hl)
  96+ 96CF C9                                   ret
  97+ 96D0
  98+ 96D0 21 1E 93     IsPlanetOrSpaceStation: ld      hl,UniverseSlotList+1
  99+ 96D3 7E                                   ld      a,(hl)
 100+ 96D4 C9                                   ret
 101+ 96D5
 102+ 96D5
 103+ 96D5 21 1D 93     FindNextFreeSlotInC:    ld      hl,UniverseSlotList
 104+ 96D8 06 0C                                ld      b, UniverseListSize
 105+ 96DA 0E 00                                ld      c, 0
 106+ 96DC 7E           .SearchLoop:            ld      a,(hl)
 107+ 96DD                                      JumpIfAEqNusng $FF, .FoundSlot
 107+ 96DD FE FF       >                cp     $FF
 107+ 96DF CA E8 96    >                jp      z,.FoundSlot
 108+ 96E2 0C                                   inc     c
 109+ 96E3 23                                   inc     hl
 110+ 96E4 10 F6                                djnz    .SearchLoop
 111+ 96E6                                      SetCarryFlag
 111+ 96E6 37          >                    scf
 112+ 96E7 C9                                   ret
 113+ 96E8              .FoundSlot:             ClearCarryFlag
 113+ 96E8 B7          >                    or a
 114+ 96E9 C9                                   ret
 115+ 96EA
 116+ 96EA CD D5 96     FindNextFreeSlotInA:    call    FindNextFreeSlotInC
 117+ 96ED 79                                   ld      a,c
 118+ 96EE C9                                   ret
 119+ 96EF
# file closed: ./Variables/UniverseSlotRoutines.asm
 956  96EF
 957  96EF                  INCLUDE "./Variables/EquipmentVariables.asm"
# file opened: ./Variables/EquipmentVariables.asm
   1+ 96EF 00           AutoDocking				DB	0				; $033F
   2+ 96F0 00           PlayerECM				DB	0				; $0340
   3+ 96F1 00           Laser2					DB	0				; 0343 laser Power? Not sure
   4+ 96F2 00           LaserCount				DB	0				; 0346  LASCT  \ laser count =9 for pulse, cooled off?
   5+ 96F3 00 00 00 00  Cash					DB  0,0,0,0			; 0361 - 0364 Cash now litte endian
   6+ 96F7 19           Fuel					DB	25				; 0365  QQ14
   7+ 96F8 05 02 03 01  LaserList				DB	5,2,3,1			; View Lasers $0368 to $036B
   8+ 96FC 46           CargoBaySize			DB	70				; 036E
   9+ 96FD 00           CargoRunningLoad        DB  0
  10+ 96FE 00 00 00 00  CargoTonnes             DB  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  10+ 9702 00 00 00 00
  10+ 9706 00 00 00 00
  10+ 970A 00 00 00 00
  11+ 970E              ;CargoTonnes		    DB	16,1,2,3,4,5,6,7,6,9,10,11,12,13,14,15			; 036F - 037F	QQ20
  12+ 970E              SlaveCargoTonnes		equ CargoTonnes+3
  13+ 970E              NarcoticsCargoTonnes	equ CargoTonnes+6
  14+ 970E              FirearmsCargoTonnes		equ CargoTonnes+10
  15+ 970E              ; For each view laser a localised copy of the stats
  16+ 970E              ; TODO - need to add code to maintain on load/save/equipment transactions
  17+ 970E 00 00 00 00  LaserType               DS  4               ; quick reference to laser type
  18+ 9712 00 00 00 00  LaserDamagedFlag        DS  4               ; probabiliy out of 255 that it will no fire, 0 = good, 255 = will not fire
  19+ 9716 00 00 00 00  LaserPulsePause         DS  4               ; time before next pulse - 0 = beam
  20+ 971A 00 00 00 00  LaserPulseDuration      DS  4               ; time laser is on per shot
  21+ 971E 00 00 00 00  LaserDamageOutput       DS  4               ; amount of damage for a laser hit
  22+ 9722 00 00 00 00  LaserEnergyDrain        DS  4               ; amount of energy drained by cycle
  23+ 9726 00 00 00 00  LaserHeat               DS  4               ; amount of heat generated
  24+ 972A 00 00 00 00  LaserDurability         DS  4               ; probabability out of 255 that a hit on unshielded will add random amount of damage
  25+ 972E 00 00 00 00  LaserDurabilityAmount   DS  4               ; max amount of damagage can be sustained in one damage hit
  26+ 9732
  27+ 9732
  28+ 9732              QQ20                    equ CargoTonnes
  29+ 9732 00 00 00...  EquipmentFitted         DS  EQ_ITEM_COUNT    ; Series of flags for if each item is fitted
  30+ 974C              ECMPresent				EQU EquipmentFitted + EQ_ECM				; 0380
  31+ 974C              EnergyBomb				EQU EquipmentFitted + EQ_ENERGY_BOMB		; 0382	Also random hyperspeace in Elite A
  32+ 974C              ExtraEnergyUnit			EQU EquipmentFitted + EQ_ENERGY_UNIT        ; 0383
  33+ 974C              DockingComputer 		EQU EquipmentFitted + EQ_DOCK_COMP    		; 0384
  34+ 974C              GalacticHyperDrive		EQU EquipmentFitted + EQ_GAL_DRIVE   		; 0385
  35+ 974C              EscapePod				EQU EquipmentFitted + EQ_ESCAPE_POD  		; 0386
  36+ 974C 01           FuelScoopsBarrelStatus	DB	1				; 0381
  37+ 974D
# file closed: ./Variables/EquipmentVariables.asm
 958  974D
 959  974D                  INCLUDE "./Variables/random_number.asm"
# file opened: ./Variables/random_number.asm
   1+ 974D              doRandom2:									; .DORND2	\ -> &3F85 \ Restricted for explosion dust.
   2+ 974D              doRND2:
   3+ 974D A7           	and		a								; fast clear carry  leave bit0 of RAND+2 at 0.
   4+ 974E              doRandom:									;.DORND	\ -> &3F86 \ do random, new A, X.
   5+ 974E              ; "doRandom, Random Seed update, new value in A & B)"
   6+ 974E 3A 4D 92     doRND:                  ld		a,(RandomSeed)					; Get Seed 0
   7+ 9751 CB 17                                rl		a								; Rotate L including carry
   8+ 9753 4F                                   ld		c,a								; c =  double lo
   9+ 9754 21 4F 92     .AddSeed2:              ld		hl,RandomSeed2
  10+ 9757 8E                                   adc		a,(hl)							; RAND+2
  11+ 9758 32 4D 92     .SaveAtoSeed:           ld		(RandomSeed),a					; and save RAND
  12+ 975B 08           .SaveBtoSeed2:          ex		af,af'
  13+ 975C 79                                   ld		a,c
  14+ 975D 32 4F 92                             ld		(RandomSeed2),a
  15+ 9760 08                                   ex		af,af'
  16+ 9761 3A 4E 92                             ld		a,(RandomSeed1)
  17+ 9764 4F                                   ld		c,a								; C = Seed1
  18+ 9765 21 50 92     .AddSeed3:              ld		hl,RandomSeed3
  19+ 9768 8E                                   adc		a,(hl)
  20+ 9769 32 4E 92                             ld		(RandomSeed1),a
  21+ 976C 08                                   ex		af,af'
  22+ 976D 79                                   ld		a,c
  23+ 976E 32 50 92                             ld		(RandomSeed3),a
  24+ 9771 08                                   ex		af,af'
  25+ 9772 C9                                   ret
  26+ 9773
  27+ 9773              fillHeapRandom4Points:                      ; counter Y, 4 rnd bytes to edge heap
  28+ 9773 06 04        	ld		b,4
  29+ 9775 21 04 C2     	ld		hl,UbnkLineArray				; line data
  30+ 9778              FillRandom:                                 ; Writes random bytes hl = start address, b = nbr bytes to fill
  31+ 9778              EE55:
  32+ 9778 CD 4E 97     	call	doRND							; get random
  33+ 977B 77           	ld		(hl),a							; (XX19),Y
  34+ 977C 23           	inc		hl
  35+ 977D 10 F9        	djnz	FillRandom						; 3to6 = random bytes for seed
  36+ 977F C9               ret
  37+ 9780
# file closed: ./Variables/random_number.asm
 960  9780                  INCLUDE "./Variables/galaxy_seed.asm"
# file opened: ./Variables/galaxy_seed.asm
   1+ 9780 47 41 4C 41  GALAXYSEED DB "GALAXYSEED"
   1+ 9784 58 59 53 45
   1+ 9788 45 44
   2+ 978A 21 C5 93     copy_galaxy_to_system:  ld		hl,GalaxySeeds
   3+ 978D 11 A0 92                             ld		de,SystemSeed
   4+ 9790 ED A0        copy_seed:		        ldi
   5+ 9792 ED A0                                ldi
   6+ 9794 ED A0                                ldi
   7+ 9796 ED A0                                ldi
   8+ 9798 ED A0                                ldi
   9+ 979A ED A0                                ldi
  10+ 979C C9                                   ret
  11+ 979D
  12+ 979D 21 A0 92     copy_system_to_galaxy:  ld		hl,SystemSeed
  13+ 97A0 11 C5 93                             ld		de,GalaxySeeds
  14+ 97A3 18 EB                                jr		copy_seed
  15+ 97A5
  16+ 97A5 21 C5 93     copy_galaxy_to_working: ld		hl,GalaxySeeds
  17+ 97A8 11 B9 93                             ld		de,WorkingSeeds
  18+ 97AB 18 E3                                jr		copy_seed
  19+ 97AD
  20+ 97AD 21 B9 93     copy_working_to_galaxy: ld		hl,WorkingSeeds
  21+ 97B0 11 C5 93                             ld		de,GalaxySeeds
  22+ 97B3 18 DB                                jr		copy_seed
  23+ 97B5
  24+ 97B5 21 B9 93     copy_working_to_system: ld		hl,WorkingSeeds
  25+ 97B8 11 A0 92                             ld		de,SystemSeed
  26+ 97BB 18 D3                                jr		copy_seed
  27+ 97BD
  28+ 97BD 21 A0 92     copy_system_to_working: ld		hl,SystemSeed
  29+ 97C0 11 B9 93                             ld		de,WorkingSeeds
  30+ 97C3 18 CB                                jr		copy_seed
  31+ 97C5
  32+ 97C5              next_system_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  33+ 97C5 CD C8 97     		call	.NextStep					; This logic means we hard code x4
  34+ 97C8              .NextStep:
  35+ 97C8 CD CB 97     		call	process_seed				; This logic means we hard code x2
  36+ 97CB              process_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  37+ 97CB 3A A0 92     		ld		a,(SystemSeed)				; QQ15
  38+ 97CE B7           		or		a							; clear carry flag
  39+ 97CF 21 A2 92     		ld		hl,SystemSeed+2				; hl -> qq+2
  40+ 97D2 86           		add		a,(hl)						; a= QQ15 + QQ152
  41+ 97D3 47           		ld		b,a							; partial sum lo
  42+ 97D4 3A A1 92     		ld		a,(SystemSeed+1)
  43+ 97D7 21 A3 92     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  44+ 97DA 8E           		adc		a,(hl)						; note add with carry
  45+ 97DB 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  46+ 97DC 3A A2 92     		ld		a,(SystemSeed+2)
  47+ 97DF 32 A0 92     		ld		(SystemSeed+0),a			; copy qq152 to qq150
  48+ 97E2 3A A3 92     		ld		a,(SystemSeed+3)
  49+ 97E5 32 A1 92     		ld		(SystemSeed+1),a			; copy qq153 to qq151
  50+ 97E8 3A A5 92     		ld		a,(SystemSeed+5)
  51+ 97EB 32 A3 92     		ld		(SystemSeed+3),a			; copy qq155 to qq153
  52+ 97EE 3A A4 92     		ld		a,(SystemSeed+4)
  53+ 97F1 32 A2 92     		ld		(SystemSeed+2),a			; copy qq154 to qq152
  54+ 97F4 B7           		or		a
  55+ 97F5 78           		ld		a,b
  56+ 97F6 21 A2 92     		ld		hl,SystemSeed+2				; hl -> qq+2
  57+ 97F9 86           		add	    a,(hl)
  58+ 97FA 32 A4 92     		ld		(SystemSeed+4),a
  59+ 97FD 79           		ld		a,c
  60+ 97FE 21 A3 92     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  61+ 9801 8E           		adc		a,(hl)
  62+ 9802 32 A5 92     		ld		(SystemSeed+5),a
  63+ 9805 C9           		ret
  64+ 9806
  65+ 9806              next_working_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  66+ 9806 CD 09 98     		call	.NextStep					; This logic means we hard code x4
  67+ 9809              .NextStep:
  68+ 9809 CD 0C 98     		call	working_seed				; This logic means we hard code x2
  69+ 980C              working_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  70+ 980C              ; x = a + c
  71+ 980C 3A B9 93     		ld		a,(WorkingSeeds)			; QQ15
  72+ 980F B7           		or		a							; clear carry flag
  73+ 9810 21 BB 93     		ld		hl,WorkingSeeds+2			; hl -> qq+2 [c]
  74+ 9813 86           		add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
  75+ 9814 47           		ld		b,a							; partial sum lo [x]
  76+ 9815              ; y = b + d	+ carry
  77+ 9815 3A BA 93     		ld		a,(WorkingSeeds+1)          ; [b]
  78+ 9818 21 BC 93     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
  79+ 981B 8E           		adc		a,(hl)						; note add with carry
  80+ 981C 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  81+ 981D 3A BB 93     		ld		a,(WorkingSeeds+2)
  82+ 9820 32 B9 93     		ld		(WorkingSeeds+0),a			; copy qq152 to qq150 [a] = [c]
  83+ 9823 3A BC 93     		ld		a,(WorkingSeeds+3)
  84+ 9826 32 BA 93     		ld		(WorkingSeeds+1),a			; copy qq153 to qq151 [b] = [d]
  85+ 9829 3A BE 93     		ld		a,(WorkingSeeds+5)
  86+ 982C 32 BC 93     		ld		(WorkingSeeds+3),a			; copy qq155 to qq153 [d] = [f]
  87+ 982F 3A BD 93     		ld		a,(WorkingSeeds+4)
  88+ 9832 32 BB 93     		ld		(WorkingSeeds+2),a			; copy qq154 to qq152 [c] = [e]
  89+ 9835 B7           		or		a
  90+ 9836 78           		ld		a,b
  91+ 9837 21 BB 93     		ld		hl,WorkingSeeds+2		    ; hl -> qq+2
  92+ 983A 86           		add	    a,(hl)
  93+ 983B 32 BD 93     		ld		(WorkingSeeds+4),a			; e = x + [c]
  94+ 983E 79           		ld		a,c
  95+ 983F 21 BC 93     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 )we don't inc as it affects carry)
  96+ 9842 8E           		adc		a,(hl)
  97+ 9843 32 BE 93     		ld		(WorkingSeeds+5),a			; f = y + [d] + carry
  98+ 9846 C9           		ret
  99+ 9847
 100+ 9847 32           working_distX	DB 50
 101+ 9848 32           working_distY	DB 50
 102+ 9849 00           current_distY	DB 0
 103+ 984A
 104+ 984A AF           find_present_system:    xor		a
 105+ 984B 32 B9 92                             ld		(XSAV),a
 106+ 984E 3A A1 92     .CounterLoop:           ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 107+ 9851 4F                                   ld		c,a
 108+ 9852 3A CC 93     .calcLocaldy:           ld		a,(PresentSystemY)
 109+ 9855 47                                   ld		b,a								; so b holds Y ccord
 110+ 9856 79                                   ld		a,c
 111+ 9857 90                                   sub		b
 112+ 9858 CB 7F                                bit		7,a
 113+ 985A 28 02                                jr		z,.positivedy
 114+ 985C ED 44        .negativedy:            neg
 115+ 985E 32 49 98     .positivedy:            ld		(current_distY),a				; save cuirrent_dist Y as we need it maybe
 116+ 9861 ED 5B 47 98                          ld		de,(working_distX)
 117+ 9865 BA                                   cp		d
 118+ 9866 30 24                                jr		nc,.toofar
 119+ 9868 3A A3 92     .calcLocaldx:           ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 120+ 986B 4F                                   ld		c,a
 121+ 986C 3A CB 93                             ld		a,(PresentSystemX)
 122+ 986F 47                                   ld		b,a								; so b holds Y ccord
 123+ 9870 79                                   ld		a,c
 124+ 9871 90                                   sub		b
 125+ 9872 CB 7F                                bit		7,a
 126+ 9874 28 02                                jr		z,.positivedx
 127+ 9876 ED 44        .negativedx:            neg
 128+ 9878 4F           .positivedx:            ld		c,a
 129+ 9879 BB                                   cp		e
 130+ 987A 30 10                                jr		nc,.toofar
 131+ 987C 3A 49 98     .Nearer:			    ld		a,(current_distY) 				; we have a closer system
 132+ 987F 47                                   ld		b,a								; we have c to recall Y into b
 133+ 9880 ED 43 47 98                          ld		(working_distX),bc
 134+ 9884 C5                                   push	bc
 135+ 9885 CD BD 97                             call 	copy_system_to_working
 136+ 9888 C1                                   pop		bc
 137+ 9889 78                                   ld		a,b								;
 138+ 988A B1                                   or		c								;
 139+ 988B C8                                   ret		z								; if we have distance 0 then bang on
 140+ 988C CD C5 97     .toofar:                call	next_system_seed
 141+ 988F 3A B9 92                             ld		a,(XSAV)
 142+ 9892 3D                                   dec		a
 143+ 9893 FE 00                                cp		0
 144+ 9895 C8                                   ret		z
 145+ 9896 32 B9 92                             ld		(XSAV),a
 146+ 9899 18 B3                                jr		.CounterLoop
 147+ 989B
 148+ 989B              get_planet_data_working_seed:
 149+ 989B 3A BA 93     		ld		a, (WorkingSeeds+1)
 150+ 989E E6 07        		and		7
 151+ 98A0 32 A6 93     		ld		(DisplayEcononmy),a
 152+ 98A3 3A BB 93     		ld		a, (WorkingSeeds+2)
 153+ 98A6 CB 3F        		srl	a
 154+ 98A8 CB 3F        		srl	a
 155+ 98AA CB 3F        		srl	a
 156+ 98AC CB 3F        		srl	a								; c/8
 157+ 98AE E6 07        		and		7
 158+ 98B0 32 A7 93     		ld		(DisplayGovernment),a
 159+ 98B3 CB 3F        		srl	a
 160+ 98B5 FE 00        		cp		0
 161+ 98B7 20 08        		jr		nz,.CanBeRich
 162+ 98B9              .Fedual:
 163+ 98B9 3A A6 93     		ld		a,(DisplayEcononmy)
 164+ 98BC F6 02        		or		2							; Adjust Eco for Anarchy and Feudal, set bit 1.
 165+ 98BE 32 A6 93     		ld		(DisplayEcononmy),a
 166+ 98C1              .CanBeRich:
 167+ 98C1 3A A6 93     		ld		a,(DisplayEcononmy)
 168+ 98C4 EE 07        		xor		7							; flip economy so Rich is now 7
 169+ 98C6 32 A8 93     		ld		(DisplayTekLevel),a			; Flipped Eco, EcoEOR7, Rich Ind = 7
 170+ 98C9 47           		ld		b,a
 171+ 98CA 3A BC 93     		ld		a,(WorkingSeeds+3)
 172+ 98CD E6 03        		and		3
 173+ 98CF 80           		add		a,b
 174+ 98D0 32 A8 93     		ld		(DisplayTekLevel),a			; Tek Level += seed d & 3
 175+ 98D3 3A A7 93     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 176+ 98D6 CB 3F        		srl		a 							; gov/2
 177+ 98D8 47           		ld		b,a
 178+ 98D9 3A A8 93     		ld		a,(DisplayTekLevel)
 179+ 98DC 80           		add		a,b
 180+ 98DD 32 A8 93     		ld		(DisplayTekLevel),a			; Tek += gov /2
 181+ 98E0 CB 27        		sla		a
 182+ 98E2 CB 27        		sla		a							; Onto Population (TL-1)*= 4
 183+ 98E4 47           		ld		b,a
 184+ 98E5 3A A6 93     		ld		a,(DisplayEcononmy)
 185+ 98E8 80           		add		a,b                  		; TechLevel*4 + Eco   7-56
 186+ 98E9 47           		ld		b,a
 187+ 98EA 3A A7 93     		ld		a,(DisplayGovernment)
 188+ 98ED 3C           		inc		a  							; +Government, 0 is Anarchy + 1
 189+ 98EE 32 A9 93     		ld		(DisplayPopulation),a
 190+ 98F1 3A A6 93     		ld		a,(DisplayEcononmy)
 191+ 98F4 EE 07        		xor		7							; Onto productivity
 192+ 98F6 C6 03        		add		3							;  (Flipped eco +3)
 193+ 98F8 57           		ld		d,a
 194+ 98F9 3A A7 93     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 195+ 98FC C6 04        		add		4
 196+ 98FE 5F           		ld		e,a
 197+ 98FF ED 30        		mul									; ; DE = d*e, Productivity part 1. has hsb in A, lsb in P.
 198+ 9901 3A A9 93     		ld		a,(DisplayPopulation)		; then we use d for radius
 199+ 9904 57           		ld		d,a
 200+ 9905 ED 30        		mul
 201+ 9907 CB 23        		sla		e
 202+ 9909 CB 1A        		rr		d
 203+ 990B CB 23        		sla		e
 204+ 990D CB 1A        		rr		d
 205+ 990F CB 23        		sla		e
 206+ 9911 CB 1A        		rr		d							; de * 8
 207+ 9913 ED 53 AB 93  		ld		(DisplayProductivity),de
 208+ 9917              .DoRadius:
 209+ 9917 3A BC 93     		ld		a,(WorkingSeeds+3)
 210+ 991A 4F           		ld		c,a
 211+ 991B 3A BE 93     		ld		a,(WorkingSeeds+5)
 212+ 991E E6 0F        		and		$0F							;  lower 4 bits of w2_h determine planet radius
 213+ 9920 C6 0B        		add		11							;  radius min = 256*11 = 2816 km
 214+ 9922 47           		ld		b,a							;
 215+ 9923 ED 43 AF 93  		ld		(DisplayRadius),bc
 216+ 9927 C9           		ret
 217+ 9928
# file closed: ./Variables/galaxy_seed.asm
 961  9928                  INCLUDE "./Tables/text_tables.asm"
# file opened: ./Tables/text_tables.asm
   1+ 9928 50 75 6C 73  StatusLaserName1	DB	"Pulse",0
   1+ 992C 65 00
   2+ 992E 42 65 61 6D  StatusLaserName2	DB	"Beam",0
   2+ 9932 00
   3+ 9933 4D 69 6C 69  StatusLaserName3    DB  "Military",0
   3+ 9937 74 61 72 79
   3+ 993B 00
   4+ 993C 4D 69 6E 69  StatusLaserName4    DB  "Mining",0
   4+ 9940 6E 67 00
   5+ 9943 43 75 73 74  StatusLaserName5    DB  "Custom",0
   5+ 9947 6F 6D 00
   6+ 994A
   7+ 994A 28 99 2E 99  StatusLaserNameIdx	DW	StatusLaserName1,StatusLaserName2,StatusLaserName3,StatusLaserName4,StatusLaserName5
   7+ 994E 33 99 3C 99
   7+ 9952 43 99
   8+ 9954              StatusLaserNameIdxLen EQU $ - StatusLaserNameIdx
   9+ 9954
  10+ 9954 44 6F 63 6B  ConditionName1		DB "Docked",0
  10+ 9958 65 64 00
  11+ 995B 47 72 65 65  ConditionName2		DB "Green",0
  11+ 995F 6E 00
  12+ 9961 59 65 6C 6C  ConditionName3		DB "Yellow",0
  12+ 9965 6F 77 00
  13+ 9968 52 65 64 00  ConditionName4		DB "Red",0
  14+ 996C
  15+ 996C 54 99 5B 99  ConditionNameIdx	DW ConditionName1,ConditionName2,ConditionName3,ConditionName4
  15+ 9970 61 99 68 99
  16+ 9974              ConditionNameIdxLen EQU $ - ConditionNameIdx
  17+ 9974
  18+ 9974 41 42 4F 55  StatusDiagrams		DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION",0
  18+ 9978 53 45 49 54
  18+ 997C 49 4C 45 54
  18+ 9980 53 54 4F 4E
  18+ 9984 4C 4F 4E 55
  18+ 9988 54 48 4E 4F
  18+ 998C 41 4C 4C 45
  18+ 9990 58 45 47 45
  18+ 9994 5A 41 43 45
  18+ 9998 42 49 53 4F
  18+ 999C 55 53 45 53
  18+ 99A0 41 52 4D 41
  18+ 99A4 49 4E 44 49
  18+ 99A8 52 45 41 3F
  18+ 99AC 45 52 41 54
  18+ 99B0 45 4E 42 45
  18+ 99B4 52 41 4C 41
  18+ 99B8 56 45 54 49
  18+ 99BC 45 44 4F 52
  18+ 99C0 51 55 41 4E
  18+ 99C4 54 45 49 53
  18+ 99C8 52 49 4F 4E
  18+ 99CC 00
  19+ 99CD
  20+ 99CD 00 00 08 00  RankingTable		DW	$0000,$0008,$0010,$0020,$0040,$0080,$0200,$0A00,$1900,$4900,$FFFF
  20+ 99D1 10 00 20 00
  20+ 99D5 40 00 80 00
  20+ 99D9 00 02 00 0A
  20+ 99DD 00 19 00 49
  20+ 99E1 FF FF
  21+ 99E3
  22+ 99E3 48 61 72 6D  RankingName1		DB 	"Harmless",0
  22+ 99E7 6C 65 73 73
  22+ 99EB 00
  23+ 99EC 4D 6F 73 74  RankingName2		DB 	"Mostly Harmless",0
  23+ 99F0 6C 79 20 48
  23+ 99F4 61 72 6D 6C
  23+ 99F8 65 73 73 00
  24+ 99FC 50 6F 6F 72  RankingName3		DB 	"Poor",0
  24+ 9A00 00
  25+ 9A01 41 76 65 72  RankingName4		DB 	"Average",0
  25+ 9A05 61 67 65 00
  26+ 9A09 41 62 6F 76  RankingName5		DB 	"Above Average",0
  26+ 9A0D 65 20 41 76
  26+ 9A11 65 72 61 67
  26+ 9A15 65 00
  27+ 9A17 43 6F 6D 70  RankingName6		DB 	"Competent",0
  27+ 9A1B 65 74 65 6E
  27+ 9A1F 74 00
  28+ 9A21 44 61 6E 67  RankingName7		DB 	"Dangerous",0
  28+ 9A25 65 72 6F 75
  28+ 9A29 73 00
  29+ 9A2B 44 65 61 64  RankingName8		DB 	"Deadly",0
  29+ 9A2F 6C 79 00
  30+ 9A32 2D 2D 2D 2D  RankingName9		DB 	"---- E L I T E ---",0
  30+ 9A36 20 45 20 4C
  30+ 9A3A 20 49 20 54
  30+ 9A3E 20 45 20 2D
  30+ 9A42 2D 2D 00
  31+ 9A45 53 6B 6F 6C  RankingName10		DB 	"Skollobsgod",0
  31+ 9A49 6C 6F 62 73
  31+ 9A4D 67 6F 64 00
  32+ 9A51 4E 75 74 74  RankingName11		DB 	"Nutter",0
  32+ 9A55 65 72 00
  33+ 9A58
  34+ 9A58 E3 99 EC 99  RankingNameIdx		dw RankingName1,RankingName2,RankingName3,RankingName4,RankingName5,RankingName6,RankingName7,RankingName8,RankingName9,RankingName10,RankingName11
  34+ 9A5C FC 99 01 9A
  34+ 9A60 09 9A 17 9A
  34+ 9A64 21 9A 2B 9A
  34+ 9A68 32 9A 45 9A
  34+ 9A6C 51 9A
  35+ 9A6E              RankingNameIdxLen EQU $ - RankingNameIdx
  36+ 9A6E
  37+ 9A6E
  38+ 9A6E              getTableText:
  39+ 9A6E              ; ">getTableText, hl = indexlist, a = textnbr, returns with hl = porinter to head of text"
  40+ 9A6E              ; ">Note for ranking first 2 bytes are target rank"
  41+ 9A6E D5           	push	de								; save DE as we will likley need it in caller
  42+ 9A6F ED 31        	add		hl,a							; 0 based ref, and its 2 bytes
  43+ 9A71 ED 31        	add		hl,a
  44+ 9A73 5E           	ld		e,(hl)
  45+ 9A74 23           	inc		hl
  46+ 9A75 56           	ld		d,(hl)							; de = indexed address
  47+ 9A76 EB           	ex		de,hl							; flip it to hl
  48+ 9A77 D1           	pop		de								; retrieve de
  49+ 9A78 C9           	ret										; return with hl as start entry
  50+ 9A79
  51+ 9A79
  52+ 9A79              ;               CF      ZF      Result
  53+ 9A79              ;               -----------------------------------
  54+ 9A79              ;               0       0       HL > DE
  55+ 9A79              ;               0       1       HL == DE
  56+ 9A79              ;               1       0       HL < DE
  57+ 9A79              ;               1       1       Impossible
  58+ 9A79              getRankIndex:
  59+ 9A79              ; ">getRank, de = kill count, returns a = index,hl destroyed"
  60+ 9A79              ; ">Note for ranking first 2 bytes are target rank"
  61+ 9A79 7A           	ld		a,d
  62+ 9A7A B3           	or		e
  63+ 9A7B FE 00        	cp		0
  64+ 9A7D C8           	ret		z								; quicks skip for 0 kills
  65+ 9A7E AF           	xor 	a
  66+ 9A7F 21 CD 99     	ld		hl,RankingTable
  67+ 9A82              .testLoop:
  68+ 9A82 4E           	ld		c,(hl)
  69+ 9A83 23           	inc		hl
  70+ 9A84 46           	ld		b,(hl)							; bc = ranking
  71+ 9A85 E5           	push	hl
  72+ 9A86 60           	ld		h,b
  73+ 9A87 69           	ld		l,c
  74+ 9A88 CD 9D A5     	call	compare16HLDE
  75+ 9A8B 38 06        	jr		c,.HLLTDE
  76+ 9A8D              .HLGTEDE									; Found the correct rank
  77+ 9A8D E1           	pop		hl
  78+ 9A8E 23           	inc		hl								; move to next value
  79+ 9A8F 23           	inc		hl
  80+ 9A90 3C           	inc		a								; we canloop forever as if kills was $FFFF then hits nutter rank but also +1 = 0000 as its 16 bit
  81+ 9A91 18 EF        	jr		.testLoop
  82+ 9A93              .HLLTDE:									; HL < Kills so found correct rank
  83+ 9A93 E1           	pop		hl
  84+ 9A94 C9           	ret
  85+ 9A95
# file closed: ./Tables/text_tables.asm
 962  9A95                  INCLUDE "./Tables/dictionary.asm"
# file opened: ./Tables/dictionary.asm
   1+ 9A95 58 00        WordDummy					DB  "X",0
   2+ 9A97 46 72 6F 6E  WordFront					DB	"Front",0              ;1
   2+ 9A9B 74 00
   3+ 9A9D 52 69 67 68  WordRight					DB	"Right",0              ;2
   3+ 9AA1 74 00
   4+ 9AA3 4C 65 66 74  WordLeft 					DB	"Left",0               ;3
   4+ 9AA7 00
   5+ 9AA8 52 65 61 72  WordRear   	 				DB	"Rear",0               ;4
   5+ 9AAC 00
   6+ 9AAD 4C 61 72 67  WordLarge           		DB  "Large",0              ;5
   6+ 9AB1 65 00
   7+ 9AB3 45 73 63 61  WordEscape          		DB  "Escape",0             ;6
   7+ 9AB7 70 65 00
   8+ 9ABA 50 6F 64 00  WordPod             		DB  "Pod",0                ;7
   9+ 9ABE 43 61 72 67  WordCargo           		DB  "Cargo",0              ;8
   9+ 9AC2 6F 00
  10+ 9AC4 42 61 79 00  WordBay             		DB  "Bay",0                ;9
  11+ 9AC8 46 75 65 6C  WordFuel            		DB  "Fuel",0               ;10
  11+ 9ACC 00
  12+ 9ACD 53 63 6F 6F  WordScoops          		DB  "Scoops",0             ;11
  12+ 9AD1 70 73 00
  13+ 9AD4 45 2E 43 2E  WordECM             		DB  "E.C.M.",0             ;12
  13+ 9AD8 4D 2E 00
  14+ 9ADB 53 79 73 74  WordSystem          		DB  "System",0             ;13
  14+ 9ADF 65 6D 00
  15+ 9AE2 45 6E 65 72  WordEnergy					DB  "Energy",0             ;14
  15+ 9AE6 67 79 00
  16+ 9AE9 42 6F 6D 62  WordBomb					DB  "Bomb",0               ;15
  16+ 9AED 00
  17+ 9AEE 4C 61 73 65  WordLaser					DB  "Laser",0              ;16
  17+ 9AF2 72 00
  18+ 9AF4 50 75 6C 73  WordPulse           		DB  "Pulse",0              ;17
  18+ 9AF8 65 00
  19+ 9AFA 42 65 61 6D  WordBeam            		DB  "Beam",0               ;18
  19+ 9AFE 00
  20+ 9AFF 4D 69 6C 69  WordMiliary         		DB  "Miliary",0            ;19
  20+ 9B03 61 72 79 00
  21+ 9B07 4D 69 6E 69  WordMining          		DB  "Mining",0             ;20
  21+ 9B0B 6E 67 00
  22+ 9B0E 43 75 73 74  WordCustom          		DB  "Custom",0             ;21
  22+ 9B12 6F 6D 00
  23+ 9B15 55 6E 69 74  WordUnit            		DB  "Unit",0               ;22
  23+ 9B19 00
  24+ 9B1A 53 68 69 65  WordShield          		DB  "Shield",0             ;23
  24+ 9B1E 6C 64 00
  25+ 9B21 44 6F 63 6B  WordDocking         		DB  "Docking",0            ;24
  25+ 9B25 69 6E 67 00
  26+ 9B29 43 6F 6D 70  WordComputers       		DB  "Computers",0          ;25
  26+ 9B2D 75 74 65 72
  26+ 9B31 73 00
  27+ 9B33 48 79 70 65  WordHyperspace      		DB  "Hyperspace",0         ;26
  27+ 9B37 72 73 70 61
  27+ 9B3B 63 65 00
  28+ 9B3E 47 61 6C 61  WordGalactic        		DB  "Galactic",0           ;27
  28+ 9B42 63 74 69 63
  28+ 9B46 00
  29+ 9B47 45 78 74 72  WordExtra           		DB  "Extra",0              ;28
  29+ 9B4B 61 00
  30+ 9B4D 43 6C 65 61  WordClean           		DB  "Clean",0              ;29
  30+ 9B51 6E 00
  31+ 9B53 4F 66 66 65  WordOffender        		DB  "Offender",0           ;30
  31+ 9B57 6E 64 65 72
  31+ 9B5B 00
  32+ 9B5C 46 75 67 69  WordFugitive        		DB  "Fugitive",0           ;31
  32+ 9B60 74 69 76 65
  32+ 9B64 00
  33+ 9B65 46 6F 6F 64  WordFood					DB	"Food",0               ;32
  33+ 9B69 00
  34+ 9B6A 54 65 78 74  WordTextiles				DB 	"Textiles",0           ;33
  34+ 9B6E 69 6C 65 73
  34+ 9B72 00
  35+ 9B73 52 61 64 69  WordRadioactives			DB  "Radioactives",0       ;34
  35+ 9B77 6F 61 63 74
  35+ 9B7B 69 76 65 73
  35+ 9B7F 00
  36+ 9B80 53 6C 61 76  WordSlaves					DB  "Slaves",0             ;35
  36+ 9B84 65 73 00
  37+ 9B87 4C 69 71 75  WordLiquorWines     		DB  "Liquor/Wines",0       ;36
  37+ 9B8B 6F 72 2F 57
  37+ 9B8F 69 6E 65 73
  37+ 9B93 00
  38+ 9B94 4C 75 78 75  WordLuxuries  	    		DB  "Luxuries",0	       ;37
  38+ 9B98 72 69 65 73
  38+ 9B9C 00
  39+ 9B9D 4E 61 72 63  WordNarcotics  	    		DB  "Narcotics",0	       ;38
  39+ 9BA1 6F 74 69 63
  39+ 9BA5 73 00
  40+ 9BA7 4D 61 63 68  WordMachinery  	    		DB  "Machinery",0	       ;39
  40+ 9BAB 69 6E 65 72
  40+ 9BAF 79 00
  41+ 9BB1 41 6C 6C 6F  WordAlloys  				DB  "Alloys",0		       ;40
  41+ 9BB5 79 73 00
  42+ 9BB8 46 69 72 65  WordFirearms  	    		DB  "Firearms",0	       ;41
  42+ 9BBC 61 72 6D 73
  42+ 9BC0 00
  43+ 9BC1 46 75 72 73  WordFurs  		    		DB  "Furs",0	           ;42
  43+ 9BC5 00
  44+ 9BC6 4D 69 6E 65  WordMinerals  	    		DB  "Minerals",0           ;43
  44+ 9BCA 72 61 6C 73
  44+ 9BCE 00
  45+ 9BCF 47 6F 6C 64  WordGold  		    		DB  "Gold",0	           ;44
  45+ 9BD3 00
  46+ 9BD4 50 6C 61 74  WordPlatinum  	    		DB  "Platinum",0           ;45
  46+ 9BD8 69 6E 75 6D
  46+ 9BDC 00
  47+ 9BDD 47 65 6D 2D  WordGemStones  				DB  "Gem-Stones",0         ;46
  47+ 9BE1 53 74 6F 6E
  47+ 9BE5 65 73 00
  48+ 9BE8 41 6C 69 65  WordAlienItems      		DB  "Alien Items",0        ;47
  48+ 9BEC 6E 20 49 74
  48+ 9BF0 65 6D 73 00
  49+ 9BF4 54 6F 6E 6E  WordTonnes          		DB  "Tonnes",0             ;48
  49+ 9BF8 65 73 00
  50+ 9BFB 4B 69 6C 6F  WordKilograms       		DB  "Kilograms",0          ;49
  50+ 9BFF 67 72 61 6D
  50+ 9C03 73 00
  51+ 9C05 47 72 61 6D  WordGrams           		DB  "Grams",0			   ;50
  51+ 9C09 73 00
  52+ 9C0B 53 68 6F 72  WordShort           		DB  "Short",0			   ;51
  52+ 9C0F 74 00
  53+ 9C11 52 61 6E 67  WordRange           		DB  "Range",0			   ;52
  53+ 9C15 65 00
  54+ 9C17 43 68 61 72  WordChart	        		DB  "Chart",0			   ;53
  54+ 9C1B 74 00
  55+ 9C1D 44 61 74 61  WordData					DB	"Data",0			   ;54
  55+ 9C21 00
  56+ 9C22 4F 6E 00     WordOn						DB  "On",0                 ;55
  57+ 9C25 44 69 73 74  WordDistance        		DB  "Distance",0           ;56
  57+ 9C29 61 6E 63 65
  57+ 9C2D 00
  58+ 9C2E 45 63 6F 6E  WordEconomy         		DB  "Economy",0            ;57
  58+ 9C32 6F 6D 79 00
  59+ 9C36 47 6F 76 65  WordGovernment      		DB  "Government",0         ;58
  59+ 9C3A 72 6E 6D 65
  59+ 9C3E 6E 74 00
  60+ 9C41 54 65 63 68  WordTechLevel       		DB  "TechLevel",0          ;59
  60+ 9C45 4C 65 76 65
  60+ 9C49 6C 00
  61+ 9C4B 50 6F 70 75  WordPopulation      		DB  "Population",0         ;60
  61+ 9C4F 6C 61 74 69
  61+ 9C53 6F 6E 00
  62+ 9C56 4D 69 6C 6C  WordMillion         		DB  "Million",0            ;61
  62+ 9C5A 69 6F 6E 00
  63+ 9C5E 42 69 6C 6C  WordBillion         		DB  "Billion",0            ;62
  63+ 9C62 69 6F 6E 00
  64+ 9C66 47 72 6F 73  WordGross           		DB  "Gross",0              ;63
  64+ 9C6A 73 00
  65+ 9C6C 50 72 6F 64  WordProductivity    		DB  "Productivity",0       ;64
  65+ 9C70 75 63 74 69
  65+ 9C74 76 69 74 79
  65+ 9C78 00
  66+ 9C79 41 76 65 72  WordAverage         		DB  "Average",0            ;65
  66+ 9C7D 61 67 65 00
  67+ 9C81 52 61 64 69  WordRadius          		DB  "Radius",0             ;66
  67+ 9C85 75 73 00
  68+ 9C88 4B 4D 00     WordKM              		DB  "KM",0                 ;67
  69+ 9C8B 4D 20 43 52  WordMCR             		DB  "M CR",0               ;68
  69+ 9C8F 00
  70+ 9C90 52 69 63 68  WordRich					DB  "Rich",0               ;69
  70+ 9C94 00
  71+ 9C95 41 76 67 00  WordAvg         			DB  "Avg",0            	   ;70
  72+ 9C99 4D 61 69 6E  WordMainly          		DB  "Mainly",0             ;71
  72+ 9C9D 6C 79 00
  73+ 9CA0 50 6F 6F 72  WordPoor            		DB  "Poor",0               ;72
  73+ 9CA4 00
  74+ 9CA5 49 6E 64 75  WordIndustrial      		DB  "Industrial",0         ;73
  74+ 9CA9 73 74 72 69
  74+ 9CAD 61 6C 00
  75+ 9CB0 41 67 72 69  WordAgricultural    		DB  "Agricultural",0       ;74
  75+ 9CB4 63 75 6C 74
  75+ 9CB8 75 72 61 6C
  75+ 9CBC 00
  76+ 9CBD 41 6E 61 72  WordAnarchy                 DB  "Anarchy",0            ;75
  76+ 9CC1 63 68 79 00
  77+ 9CC5 46 65 75 64  WordFeudal                  DB  "Feudal",0             ;76
  77+ 9CC9 61 6C 00
  78+ 9CCC 4D 75 6C 74  WordMultiGovernment         DB  "Multi-Government",0   ;77
  78+ 9CD0 69 2D 47 6F
  78+ 9CD4 76 65 72 6E
  78+ 9CD8 6D 65 6E 74
  78+ 9CDC 00
  79+ 9CDD 44 69 63 74  WordDictatorship            DB  "Dictatorship",0       ;78
  79+ 9CE1 61 74 6F 72
  79+ 9CE5 73 68 69 70
  79+ 9CE9 00
  80+ 9CEA 43 6F 6D 6D  WordCommunist               DB  "Communist",0          ;79
  80+ 9CEE 75 6E 69 73
  80+ 9CF2 74 00
  81+ 9CF4 43 6F 6E 66  WordConfederacy             DB  "Confederacy",0        ;80
  81+ 9CF8 65 64 65 72
  81+ 9CFC 61 63 79 00
  82+ 9D00 44 65 6D 6F  WordDemocracy               DB  "Democracy",0          ;81
  82+ 9D04 63 72 61 63
  82+ 9D08 79 00
  83+ 9D0A 43 6F 72 70  WordCorporate               DB  "Corporate State",0    ;82
  83+ 9D0E 6F 72 61 74
  83+ 9D12 65 20 53 74
  83+ 9D16 61 74 65 00
  84+ 9D1A 53 74 61 74  WordState 					DB  "State",0              ;83
  84+ 9D1E 65 00
  85+ 9D20 4C 69 67 68  WordLight 					DB  "Light",0              ;84
  85+ 9D24 74 00
  86+ 9D26 59 65 61 72  WordYears 					DB  "Years",0              ;85
  86+ 9D2A 73 00
  87+ 9D2C 30 00        Word0						DB  "0",0				   ;86
  88+ 9D2E 4D 61 72 6B  WordMarket					DB  "Market",0			   ;87
  88+ 9D32 65 74 00
  89+ 9D35 50 72 69 63  WordPrices					DB  "Prices",0			   ;88
  89+ 9D39 65 73 00
  90+ 9D3C 50 72 6F 64  WordProduct    				DB  "Product",0  		   ;89
  90+ 9D40 75 63 74 00
  91+ 9D44 55 6F 4D 00  WordUoM						DB  "UoM",0                ;90
  92+ 9D48 50 72 69 63  WordPrice					DB  "Price",0              ;91
  92+ 9D4C 65 00
  93+ 9D4E 46 6F 72 00  WordFor                     DB  "For",0                ;92
  94+ 9D52 53 61 6C 65  WordSale                    DB  "Sale",0               ;93
  94+ 9D56 00
  95+ 9D57 74 00        Wordt						DB  "t",0                  ;94
  96+ 9D59 6B 67 00     Wordkg						DB  "kg",0                 ;95
  97+ 9D5C 67 00        Wordg						DB  "g",0                  ;96
  98+ 9D5E 51 75 61 6E  WordQuantity				DB  "Quanitity",0		   ;97
  98+ 9D62 69 74 69 74
  98+ 9D66 79 00
  99+ 9D68 49 6E 76 00  WordInv                     DB  "Inv",0                ;98
 100+ 9D6C 53 74 6F 63  WordStock                   DB  "Stock",0              ;99
 100+ 9D70 6B 00
 101+ 9D72 45 71 75 69  WordEquip                   DB  "Equip",0              ;100
 101+ 9D76 70 00
 102+ 9D78 53 68 69 70  WordShip                    DB  "Ship",0               ;101
 102+ 9D7C 00
 103+ 9D7D 4D 69 73 73  WordMissile                 DB  "Missile",0            ;102
 103+ 9D81 69 6C 65 00
 104+ 9D85 48 79 70 65  WordHyperdrive              DB  "Hyperdrive",0
 104+ 9D89 72 64 72 69
 104+ 9D8D 76 65 00
 105+ 9D90 4D 69 6C 69  WordMilitary                DB  "Military",0
 105+ 9D94 74 61 72 79
 105+ 9D98 00
 106+ 9D99
 107+ 9D99 95 9A 97 9A  WordIdx				DW  WordDummy,          WordFront,        WordRight,        WordLeft		;0-3
 107+ 9D9D 9D 9A A3 9A
 108+ 9DA1 A8 9A AD 9A  					DW  WordRear,           WordLarge,        WordEscape,       WordPod      	;4-7
 108+ 9DA5 B3 9A BA 9A
 109+ 9DA9 BE 9A C4 9A  					DW  WordCargo,          WordBay,          WordFuel,         WordScoops   	;8
 109+ 9DAD C8 9A CD 9A
 110+ 9DB1 D4 9A DB 9A  					DW  WordECM,            WordSystem,       WordEnergy,       WordBomb     	;12
 110+ 9DB5 E2 9A E9 9A
 111+ 9DB9 EE 9A F4 9A  					DW  WordLaser,          WordPulse,        WordBeam,         WordMiliary  	;16
 111+ 9DBD FA 9A FF 9A
 112+ 9DC1 07 9B 0E 9B  					DW  WordMining,         WordCustom,       WordUnit,         WordShield   	;20
 112+ 9DC5 15 9B 1A 9B
 113+ 9DC9 21 9B 29 9B  					DW  WordDocking,        WordComputers,    WordHyperspace,   WordGalactic 	;24
 113+ 9DCD 33 9B 3E 9B
 114+ 9DD1 47 9B 4D 9B  					DW  WordExtra,          WordClean,        WordOffender,     WordFugitive	;28
 114+ 9DD5 53 9B 5C 9B
 115+ 9DD9 65 9B 6A 9B  					DW  WordFood,           WordTextiles,     WordRadioactives, WordSlaves		;32
 115+ 9DDD 73 9B 80 9B
 116+ 9DE1 87 9B 94 9B  					DW  WordLiquorWines,    WordLuxuries,     WordNarcotics,    WordMachinery   ;36
 116+ 9DE5 9D 9B A7 9B
 117+ 9DE9 B1 9B B8 9B  					DW  WordAlloys,         WordFirearms,     WordFurs,         WordMinerals    ;40
 117+ 9DED C1 9B C6 9B
 118+ 9DF1 CF 9B D4 9B  					DW  WordGold,           WordPlatinum,     WordGemStones,    WordAlienItems  ;44               ;
 118+ 9DF5 DD 9B E8 9B
 119+ 9DF9 F4 9B FB 9B  WordIdxUoMFull		DW  WordTonnes,         WordKilograms,    WordGrams,		WordShort		;48
 119+ 9DFD 05 9C 0B 9C
 120+ 9E01 11 9C 17 9C  					DW	WordRange,		    WordChart,        WordData,         WordOn          ;52
 120+ 9E05 1D 9C 22 9C
 121+ 9E09 25 9C 2E 9C  					DW  WordDistance,       WordEconomy,      WordGovernment,   WordTechLevel   ;56
 121+ 9E0D 36 9C 41 9C
 122+ 9E11 4B 9C 56 9C  					DW  WordPopulation,     WordMillion,      WordBillion,      WordGross       ;60
 122+ 9E15 5E 9C 66 9C
 123+ 9E19 6C 9C 79 9C  					DW  WordProductivity,   WordAverage,      WordRadius,       WordKM          ;64
 123+ 9E1D 81 9C 88 9C
 124+ 9E21 8B 9C        					DW  WordMCR																	;68
 125+ 9E23 90 9C 95 9C  WordIdxEconomy		DW  WordRich,           WordAvg,      	  WordMainly,       WordPoor        ;69
 125+ 9E27 99 9C A0 9C
 126+ 9E2B A5 9C B0 9C                      DW  WordIndustrial,     WordAgricultural									;73
 127+ 9E2F BD 9C C5 9C  WordIdxGovernment	DW  WordAnarchy,        WordFeudal,       WordMultiGovernment, WordDictatorship ;75
 127+ 9E33 CC 9C DD 9C
 128+ 9E37 EA 9C F4 9C                      DW  WordCommunist,      WordConfederacy,  WordDemocracy,       WordCorporate ;79
 128+ 9E3B 00 9D 0A 9D
 129+ 9E3F 1A 9D 20 9D  					DW  WordState,          WordLight,        WordYears,           Word0         ; 83
 129+ 9E43 26 9D 2C 9D
 130+ 9E47 2E 9D 35 9D  WordIdxMarketmenu	DW  WordMarket,         WordPrices,       WordProduct,         WordUoM	    ;87
 130+ 9E4B 3C 9D 44 9D
 131+ 9E4F 48 9D 4E 9D                      DW  WordPrice,          WordFor,          WordSale                          ;91
 131+ 9E53 52 9D
 132+ 9E55 57 9D 59 9D  WordIdxUomAbbrev	DW	Wordt,				Wordkg,           Wordg                 		    ;94
 132+ 9E59 5C 9D
 133+ 9E5B 5E 9D 68 9D  					DW  WordQuantity,       WordInv,          WordStock,           WordEquip	;97
 133+ 9E5F 6C 9D 72 9D
 134+ 9E63 78 9D 7D 9D                      DW  WordShip,           WordMissile       ; 101
 135+ 9E67
 136+ 9E67              ; Phrases
 137+ 9E67 05 08 09 00  TextLargeCargoBay			DB 	5,8,9,0          ;0
 138+ 9E6B 06 07 00     TextEscapePod				DB	6,7,0            ;1
 139+ 9E6E 0A 0B 00     TextFuelScoops				DB	10,11,0          ;2
 140+ 9E71 0C 0D 00     TextECMSystem				DB	12,13,0          ;3
 141+ 9E74 0E 0F 00     TextEnergyBomb				DB	14,15,0          ;4
 142+ 9E77 0E 16 00     TextEnergyUnit				DB	14,22,0          ;5
 143+ 9E7A 18 19 00     TextDockingComp     		DB  24,25,0          ;6
 144+ 9E7D 1B 1A 00     TextGalacticHyper			DB	27,26,0          ;7
 145+ 9E80 01 12 10 00  TextFrontLaser      		DB  01,18,16,0       ;8
 146+ 9E84 03 12 10 00  TextLeftLaser       		DB  03,18,16,0       ;9
 147+ 9E88 02 12 10 00  TextRightLaser      		DB  02,18,16,0       ;10
 148+ 9E8C 04 12 10 00  TextRearLaser       		DB  04,18,16,0       ;11
 149+ 9E90 33 34 35 00  TextShortRangeChart 		DB	51,52,53,0       ;12
 150+ 9E94 1B 35 00     TextGalacticChart   		DB	27,53,0          ;13
 151+ 9E97 36 37 00     TextDataOn					DB	54,55,0          ;14
 152+ 9E9A 45 49 00     TextRichIndustrial          DB  69,73,0          ;15
 153+ 9E9D 46 49 00     TextAvgIndustrial           DB  70,73,0			 ;16
 154+ 9EA0 47 49 00     TextMainIndustrial          DB  71,73,0          ;17
 155+ 9EA3 48 49 00     TextPoorIndustrial          DB  72,73,0          ;18
 156+ 9EA6 45 4A 00     TextRichAgricultural        DB  69,74,0          ;19
 157+ 9EA9 46 4A 00     TextAvgAgricultural         DB  70,74,0          ;20
 158+ 9EAC 47 4A 00     TextMainAgricultural        DB  71,74,0          ;21
 159+ 9EAF 48 4A 00     TextPoorAgricultural        DB  72,74,0          ;22
 160+ 9EB2 54 55 00     TextLightYears				DB  84,85,0			 ;23
 161+ 9EB5 56 54 55 00  Text0LightYears				DB  86,84,85,0		 ;24
 162+ 9EB9 57 58 00     TextMarketPrices			DB  87,88,0			 ;25
 163+ 9EBC 64 65        TextEquipShip               DB  100,101          ;26
 164+ 9EBE
 165+ 9EBE 00           TextDummy					DB  0
 166+ 9EBF
 167+ 9EBF 67 9E 6B 9E  TextTokens			DW  TextLargeCargoBay, TextEscapePod, TextFuelScoops				; 0 2
 167+ 9EC3 6E 9E
 168+ 9EC5 71 9E 74 9E  					DW  TextECMSystem, TextEnergyBomb, TextEnergyUnit					; 3 5
 168+ 9EC9 77 9E
 169+ 9ECB 7A 9E 7D 9E  					DW  TextDockingComp, TextGalacticHyper  							; 6 7
 170+ 9ECF 80 9E 84 9E  					DW	TextFrontLaser, TextLeftLaser, TextRightLaser, TextRearLaser	; 8 11
 170+ 9ED3 88 9E 8C 9E
 171+ 9ED7 90 9E 94 9E  					DW  TextShortRangeChart, TextGalacticChart, TextDataOn				; 12 14
 171+ 9EDB 97 9E
 172+ 9EDD 9A 9E 9D 9E  TextTokenEconomy	DW  TextRichIndustrial, TextAvgIndustrial, TextPoorIndustrial, TextMainIndustrial, TextMainAgricultural, TextRichAgricultural, TextAvgAgricultural,  TextPoorAgricultural
 172+ 9EE1 A3 9E A0 9E
 172+ 9EE5 AC 9E A6 9E
 172+ 9EE9 A9 9E AF 9E
 173+ 9EED B2 9E        					DW  TextLightYears		                                            ; 21 23
 174+ 9EEF B5 9E B9 9E  					DW  Text0LightYears, TextMarketPrices
 175+ 9EF3 BE 9E        					DW  TextDummy;  25
 176+ 9EF5 00 00 00...  TextBuffer			DS	33
 177+ 9F16
 178+ 9F16              TextEconomyOffset   EQU (TextTokenEconomy - TextTokens)/2
 179+ 9F16              TextGovOffset       EQU (WordIdxGovernment - WordIdx)/2
 180+ 9F16
 181+ 9F16              CapitaliseString:
 182+ 9F16              ; ">CapitaliseString hl = address"
 183+ 9F16              .CapLoop:
 184+ 9F16 23           	inc		hl
 185+ 9F17 7E           	ld		a,(hl)
 186+ 9F18 FE 00        	cp		0
 187+ 9F1A C8           	ret		z
 188+ 9F1B FE 5B        	cp		'Z'+1
 189+ 9F1D 30 F7        	jr		nc,.CapLoop
 190+ 9F1F FE 41        	cp		'A'
 191+ 9F21 38 F3        	jr		c,.CapLoop
 192+ 9F23              .LowerCase:
 193+ 9F23 C6 20        	add		a,'a'-'A'
 194+ 9F25 77           	ld		(hl),a
 195+ 9F26 18 EE        	jr		.CapLoop
 196+ 9F28
 197+ 9F28              WordIndexToAddress:
 198+ 9F28 21 99 9D     	ld		hl,WordIdx
 199+ 9F2B ED 31        	add		hl,a
 200+ 9F2D ED 31        	add		hl,a
 201+ 9F2F D5           	push	de
 202+ 9F30 5E           	ld		e,(hl)
 203+ 9F31 23           	inc		hl
 204+ 9F32 56           	ld		d,(hl)
 205+ 9F33 EB           	ex		de,hl
 206+ 9F34 D1           	pop		de
 207+ 9F35 C9           	ret
 208+ 9F36
 209+ 9F36
 210+ 9F36              expandTokenToString:
 211+ 9F36              ; ">expandTokenToString a = texttoken"
 212+ 9F36 21 BF 9E     	ld		hl,TextTokens
 213+ 9F39 CD 6E 9A     	call	getTableText
 214+ 9F3C 11 F5 9E     	ld		de,TextBuffer
 215+ 9F3F              .ReadLoop:
 216+ 9F3F 7E           	ld		a,(hl)
 217+ 9F40 FE 00        	cp		0
 218+ 9F42 28 1B        	jr		z,.ReadDone
 219+ 9F44 E5           	push	hl
 220+ 9F45 D5           	push	de
 221+ 9F46 21 99 9D     	ld		hl,WordIdx
 222+ 9F49 CD 6E 9A     	call	getTableText
 223+ 9F4C D1           	pop		de
 224+ 9F4D              .WordExpandLoop:
 225+ 9F4D 7E           	ld		a,(hl)
 226+ 9F4E FE 00        	cp		0
 227+ 9F50 28 05        	jr		z,.AddSpace
 228+ 9F52              ;.GetChar:
 229+ 9F52 12           	ld		(de),a
 230+ 9F53 13           	inc		de
 231+ 9F54 23           	inc		hl
 232+ 9F55 18 F6        	jr		.WordExpandLoop
 233+ 9F57              .AddSpace:
 234+ 9F57 3E 20        	ld		a,' '
 235+ 9F59 12           	ld		(de),a
 236+ 9F5A 13           	inc		de
 237+ 9F5B E1           	pop		hl
 238+ 9F5C 23           	inc		hl
 239+ 9F5D 18 E0        	jr		.ReadLoop
 240+ 9F5F              .ReadDone:
 241+ 9F5F 1B           	dec		de
 242+ 9F60 AF           	xor		a
 243+ 9F61 12           	ld		(de),a
 244+ 9F62 C9           	ret
 245+ 9F63
# file closed: ./Tables/dictionary.asm
 963  9F63                  INCLUDE "./Tables/name_digrams.asm"
# file opened: ./Tables/name_digrams.asm
   1+ 9F63 41 42 4F 55  name_digrams	DB "ABOUSEITILETSTONLONUTHNO"
   1+ 9F67 53 45 49 54
   1+ 9F6B 49 4C 45 54
   1+ 9F6F 53 54 4F 4E
   1+ 9F73 4C 4F 4E 55
   1+ 9F77 54 48 4E 4F
   2+ 9F7B 41 4C 4C     name_digrams2   DB "ALL"
   3+ 9F7E 45 58 45 47  				DB "EXEGEZACEBISOUSESARMAINDIREA"
   3+ 9F82 45 5A 41 43
   3+ 9F86 45 42 49 53
   3+ 9F8A 4F 55 53 45
   3+ 9F8E 53 41 52 4D
   3+ 9F92 41 49 4E 44
   3+ 9F96 49 52 45 41
   4+ 9F9A 3F 45 52 41  				DB "?ERATENBERALAVETIEDORQUANTEISRION"
   4+ 9F9E 54 45 4E 42
   4+ 9FA2 45 52 41 4C
   4+ 9FA6 41 56 45 54
   4+ 9FAA 49 45 44 4F
   4+ 9FAE 52 51 55 41
   4+ 9FB2 4E 54 45 49
   4+ 9FB6 53 52 49 4F
   4+ 9FBA 4E
   5+ 9FBB
   6+ 9FBB              ; TODO Moveinto galaxy data module
   7+ 9FBB 00 00 00...  name_expanded	DS 32
   8+ 9FDB 00           				DB 0
   9+ 9FDC
  10+ 9FDC
  11+ 9FDC
  12+ 9FDC              NamingLoop:
  13+ 9FDC 3A BE 93     	ld		a,(WorkingSeeds+5)	; a = first byte of name seed
  14+ 9FDF E6 1F        	and 	$1F					; Keep bottom 5 bits only
  15+ 9FE1 FE 00        	cp		0					; 0 = skip 2 chars
  16+ 9FE3 28 12        	jr		z,.SkipPhrase
  17+ 9FE5 C6 0C        	add		a,12
  18+ 9FE7 CB 27        	sla		a					; phrase = (a+12)*2
  19+ 9FE9 21 63 9F     	ld		hl,name_digrams
  20+ 9FEC ED 31        	add		hl,a
  21+ 9FEE ED A0        	ldi
  22+ 9FF0 7E           	ld		a,(hl)
  23+ 9FF1 FE 3F        	cp		'?'
  24+ 9FF3 28 02        	jr		z,.SkipPhrase
  25+ 9FF5              .AddExtra:
  26+ 9FF5 ED A0        	ldi
  27+ 9FF7              .SkipPhrase:
  28+ 9FF7 D5           	push	de
  29+ 9FF8 CD 0C 98     	call	working_seed
  30+ 9FFB D1           	pop		de
  31+ 9FFC C9           	ret
  32+ 9FFD
  33+ 9FFD              ;GetDigramGalaxySeed:
  34+ 9FFD              ;	call	copy_galaxy_to_working
  35+ 9FFD              ;	jr		GetDigramWorkingSeed
  36+ 9FFD              ;GetDigramSystemSeed:
  37+ 9FFD              ;	call	copy_system_to_working
  38+ 9FFD              ;GetDigramWorkingSeed:
  39+ 9FFD              ;; ">GetDigram a = digram seed"
  40+ 9FFD              ;	ld		de,name_expanded
  41+ 9FFD              ;	ld		b,3
  42+ 9FFD              ;	ld		a,(WorkingSeeds)
  43+ 9FFD              ;	and		$40
  44+ 9FFD              ;	jr		z,.SmallSizeName
  45+ 9FFD              ;.LargeSizeName:
  46+ 9FFD              ;	call	NamingLoop
  47+ 9FFD              ;.SmallSizeName:
  48+ 9FFD              ;	call	NamingLoop
  49+ 9FFD              ;	call	NamingLoop
  50+ 9FFD              ;	call	NamingLoop
  51+ 9FFD              ;.DoneName:
  52+ 9FFD              ;	ex		de,hl
  53+ 9FFD              ;	ld		(hl),0
  54+ 9FFD              ;	ex		de,hl
  55+ 9FFD              ;	ret
  56+ 9FFD
  57+ 9FFD
  58+ 9FFD
  59+ 9FFD              ;GetDigramWorkingSeed:
  60+ 9FFD              ;	MESSAGE ">GetDigram a = digram seed b = length"
  61+ 9FFD              ;	ld		b,5					; working seed
  62+ 9FFD              ;	ld		de,name_expanded
  63+ 9FFD              ;.ExpansionLoop:
  64+ 9FFD              ;	push	bc
  65+ 9FFD              ;	ld		hl,WorkingSeeds
  66+ 9FFD              ;	ld		a,b
  67+ 9FFD              ;	add		hl,a
  68+ 9FFD              ;	ld		a,(hl)	; a = first byte of name seed
  69+ 9FFD              ;	and 	$1F					; Keep bottom 5 bits only
  70+ 9FFD              ;	cp		0					; 0 = skip 2 chars
  71+ 9FFD              ;	jr		z,.SkipPhrase
  72+ 9FFD              ;	or		&80					; set buit 7 high (probabtyl capitalisation)
  73+ 9FFD              ;	call	TT27
  74+ 9FFD              ;.SkipPhrase:
  75+ 9FFD              ;	push	de
  76+ 9FFD              ;	call	next_working_seed
  77+ 9FFD              ;	pop		de
  78+ 9FFD              ;	pop		bc
  79+ 9FFD              ;	djnz	GetDigramWorkingSeed
  80+ 9FFD              ;.DoneName:
  81+ 9FFD              ;	ex		de,hl
  82+ 9FFD              ;	ld		(hl),0
  83+ 9FFD              ;	ex		de,hl
  84+ 9FFD              ;	ret
  85+ 9FFD              ;
  86+ 9FFD              ;ExpandToken:
  87+ 9FFD              ;	DE = target
  88+ 9FFD              ;	a = token
  89+ 9FFD              ;
  90+ 9FFD              ;PlanetDigram:
  91+ 9FFD              ;	cp		&A0							; >- 160
  92+ 9FFD              ;	jr		c,MorePage4
  93+ 9FFD              ;	and		$7F							; 128 to 159 now 0 to 31
  94+ 9FFD              ;	asl		2							; Multiply by 2
  95+ 9FFD              ;	ld		hl, name_digrams2
  96+ 9FFD              ;	add		hl,a
  97+ 9FFD              ;	ld		a,(hl)
  98+ 9FFD              ;	call	ProcessTextToken
  99+ 9FFD              ;	inc		hl
 100+ 9FFD              ;	ld		a,(hl)
 101+ 9FFD              ;	cp		'?'
 102+ 9FFD              ;	ret		z
 103+ 9FFD              ;	call	ProcessTextToken
 104+ 9FFD              ;	ret
 105+ 9FFD              ;MorePage4:
 106+ 9FFD              ;	sub		$A0
 107+ 9FFD              ;ExtraTokenCheck:
 108+ 9FFD              ;	push	de							; save target address
 109+ 9FFD              ;	push	bc
 110+ 9FFD              ;	ld		b,a
 111+ 9FFD              ;	ld		hl,varV
 112+ 9FFD              ;	ld		(VarV),0400
 113+ 9FFD              ;	ld		(varV),a
 114+ 9FFD              ;	ld
 115+ 9FFD              ;
 116+ 9FFD              ;		.TT43	\ Token > 127 page4 token or planet digram.
 117+ 9FFD              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 118+ 9FFD              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 119+ 9FFD              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 120+ 9FFD              ;0A                      ASL A		      \ *= 2
 121+ 9FFD              ;A8                      TAY 		      \ digram index = 0to62
 122+ 9FFD              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 123+ 9FFD              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 124+ 9FFD              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 125+ 9FFD              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 126+ 9FFD              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 127+ 9FFD              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 128+ 9FFD              ;
 129+ 9FFD              ;	.TT47	\ more page4, subtract #160
 130+ 9FFD              ;E9 A0                   SBC #&A0	\ -= 160
 131+ 9FFD              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 132+ 9FFD              ;AA                      TAX 		\ copy of word index
 133+ 9FFD              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 134+ 9FFD              ;85 22                   STA &22		\ V
 135+ 9FFD              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 136+ 9FFD              ;85 23                   STA &23		\ V+1
 137+ 9FFD              ;A0 00                   LDY #0
 138+ 9FFD              ;8A                      TXA 		\ token = word index
 139+ 9FFD              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 140+ 9FFD              ;	.TT51	\ counters Y letter, X token
 141+ 9FFD              ;B1 22                   LDA (&22),Y	\ (V),Y
 142+ 9FFD              ;F0 07                   BEQ TT49	\ exit as word ended
 143+ 9FFD              ;C8                      INY 		\ letter count
 144+ 9FFD              ;D0 F9                   BNE TT51	\ loop Y
 145+ 9FFD              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 146+ 9FFD              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 147+ 9FFD              ;	.TT49	\ word ended
 148+ 9FFD              ;C8                      INY
 149+ 9FFD              ;D0 02                   BNE TT59    	\ next word
 150+ 9FFD              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 151+ 9FFD              ;	.TT59	\ next word
 152+ 9FFD              ;CA                      DEX 		\ token count
 153+ 9FFD              ;D0 ED                   BNE TT51	\ loop X token
 154+ 9FFD              ;	.TT50	\ token X = 0, counter Y offset to word correct
 155+ 9FFD              ;98                      TYA
 156+ 9FFD              ;48                      PHA 		\ store Yindex
 157+ 9FFD              ;A5 23                   LDA &23		\ V+1
 158+ 9FFD              ;48                      PHA 		\ correct pointer hi
 159+ 9FFD              ;B1 22                   LDA (&22),Y 	\ (V),Y
 160+ 9FFD              ;49 23                   EOR #&23	\ decode '#'
 161+ 9FFD              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 162+ 9FFD              ;68                      PLA 		\ restore this depth's Vhi
 163+ 9FFD              ;85 23                   STA &23		\ V+1
 164+ 9FFD              ;68                      PLA
 165+ 9FFD              ;A8                      TAY 		\ restore this depth's Yindex
 166+ 9FFD              ;C8                      INY 		\ next letter
 167+ 9FFD              ;D0 02                   BNE P%+4	\ not zero so skip next page
 168+ 9FFD              ;E6 23                   INC &23		\ V+1
 169+ 9FFD              ;B1 22                   LDA (&22),Y	\ (V),Y
 170+ 9FFD              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 171+ 9FFD              ;	.TT48 	\ rts
 172+ 9FFD              ;60                      RTS 		\ end of flight token printing TT27
 173+ 9FFD              ;
 174+ 9FFD              ;
 175+ 9FFD              ;
 176+ 9FFD              ;
 177+ 9FFD              ;
 178+ 9FFD              ;
 179+ 9FFD              ;		.TT27	\ -> &36E0 \ process flight text Token in Acc
 180+ 9FFD              ;;AA                      TAX		\ copy token to count down
 181+ 9FFD              ;;F0 DE                   BEQ csh		\ Acc = 0, up to Cash
 182+ 9FFD              ;30 74                   BMI TT43	\ if token is >  127 down, page4 token or digram
 183+ 9FFD              ;CA                      DEX
 184+ 9FFD              ;F0 BC                   BEQ tal		\ Acc == 1, up, print Galaxy number.
 185+ 9FFD              ;CA                      DEX
 186+ 9FFD              ;F0 A3                   BEQ ypl		\ Acc == 2, up, present planet in QQ2.
 187+ 9FFD              ;CA                      DEX
 188+ 9FFD              ;D0 03                   BNE P%+5	\ hop over, else X == 0
 189+ 9FFD              ;4C 0A 33                JMP &330A \ cpl \ Acc = 3 print Planet name for seed QQ15
 190+ 9FFD              ;CA                      DEX
 191+ 9FFD              ;F0 8A                   BEQ cmn		\ Acc == 4, up, commander name.
 192+ 9FFD              ;CA                      DEX
 193+ 9FFD              ;F0 B5                   BEQ fwl		\ Acc == 5, up, fuel followed by cash.
 194+ 9FFD              ;CA                      DEX
 195+ 9FFD              ;D0 05                   BNE  P%+7	\ hop over, else X == 0
 196+ 9FFD              ;A9 80                   LDA #&80	\ Acc == 6, set bit 7 TT27m
 197+ 9FFD              ;85 72                   STA &72	 	\ QQ17
 198+ 9FFD              ;60                      RTS
 199+ 9FFD              ;CA                      DEX 		\ skip Acc ==7
 200+ 9FFD              ;CA                      DEX
 201+ 9FFD              ;D0 03                   BNE P%+5	\ hop over to continue Acc 9to127
 202+ 9FFD              ;86 72                   STX &72	 \ QQ17	\ else Acc ==8, QQ17 set to X = 0
 203+ 9FFD              ;60                      RTS
 204+ 9FFD              ;CA                      DEX 		\ continue 9to127 tokens
 205+ 9FFD              ;F0 38                   BEQ crlf	\ Acc == 9, down, colon on right.
 206+ 9FFD              ;C9 60                   CMP #&60	\ discard X, look at Acc = token >= 96
 207+ 9FFD              ;B0 66                   BCS ex   	\ extra >= #&60, far down
 208+ 9FFD              ;C9 0E                   CMP #14		\ < 14 ?
 209+ 9FFD              ;90 04                   BCC P%+6	\ goes to Token < 14 or > 31
 210+ 9FFD              ;C9 20                   CMP #32		\ < 32 ?
 211+ 9FFD              ;90 28                   BCC qw   	\ 14 <= token A < 32 becomes 128to145 page4 digram
 212+ 9FFD              ;		\ Token  < 14 or > 31
 213+ 9FFD              ;A6 72                   LDX &72	 	\ QQ17
 214+ 9FFD              ;F0 3D                   BEQ TT74 	\ if QQ17 = 0 Upper case, jmp TT26, print character.
 215+ 9FFD              ;30 11                   BMI TT41 	\ if bit7 set
 216+ 9FFD              ;24 72                   BIT &72		\ QQ17 has bit6 set too
 217+ 9FFD              ;70 30                   BVS TT46 	\ If only bit6 set, clear bit6 and print as Upper
 218+ 9FFD              ;	.TT42	\ Uppercase to lowercase
 219+ 9FFD              ;C9 41                   CMP #&41	\ < ascii 'A'
 220+ 9FFD              ;90 06                   BCC TT44 	\ jmp TT26, print character
 221+ 9FFD              ;C9 5B                   CMP #&5B	\ >= ascii 'Z'+1
 222+ 9FFD              ;B0 02                   BCS TT44 	\ jmp TT26, print character
 223+ 9FFD              ;69 20                   ADC #&20	\ else Upper to lowercase
 224+ 9FFD              ;	.TT44	\ print character as is with TT26
 225+ 9FFD              ;4C FC 1E                JMP &1EFC \ TT26 \ print character
 226+ 9FFD              ;
 227+ 9FFD              ;	.TT41	\ QQ17 bit7 set
 228+ 9FFD              ;24 72                   BIT &72		\ QQ17
 229+ 9FFD              ;70 17                   BVS TT45	\ bit6 set too, Nothing or lower.
 230+ 9FFD              ;C9 41                   CMP #&41	\ < ascii 'A'
 231+ 9FFD              ;90 22                   BCC TT74 	\ print as is using TT26
 232+ 9FFD              ;48                      PHA 		\ else store token Acc
 233+ 9FFD              ;8A                      TXA 		\ QQ17 copy
 234+ 9FFD              ;09 40                   ORA #&40	\ set bit6 in QQ17 so subsequent ones lower
 235+ 9FFD              ;85 72                   STA &72	 	\ QQ17
 236+ 9FFD              ;68                      PLA 		\ restore token
 237+ 9FFD              ;D0 EC                   BNE TT44	\ guaranteed up, print as Uppercase with TT26.
 238+ 9FFD              ;
 239+ 9FFD              ;	.qw	\ Acc = 14to31 becomes 128to145 page4 digram
 240+ 9FFD              ;69 72                   ADC #&72	\ A+=114 becomes 128to145 page4 digram
 241+ 9FFD              ;D0 32                   BNE ex		\ guaranteed down, extra.
 242+ 9FFD              ;
 243+ 9FFD              ;	.crlf	\ Acc == 9,  colon on right
 244+ 9FFD              ;A9 15                   LDA #21		\ on right
 245+ 9FFD              ;85 2C                   STA &2C		\ XC
 246+ 9FFD              ;D0 97                   BNE TT73	\ guaranteed up, print colon.
 247+ 9FFD              ;
 248+ 9FFD              ;	.TT45	\ QQ17 bits 7,6 set. Nothing or lower.
 249+ 9FFD              ;E0 FF                   CPX #&FF	\ if QQ17 = #&FF
 250+ 9FFD              ;F0 63                   BEQ TT48	\ rts
 251+ 9FFD              ;C9 41                   CMP #&41	\ >= ascii 'A' ?
 252+ 9FFD              ;B0 D0                   BCS TT42	\ Uppercase to lowercase, up.
 253+ 9FFD              ;	.TT46	\ clear bit6 QQ17 and print as is using TT26
 254+ 9FFD              ;48                      PHA 		\ push token
 255+ 9FFD              ;8A                      TXA 		\ QQ17 copy
 256+ 9FFD              ;29 BF                   AND #&BF	\ clear bit6
 257+ 9FFD              ;85 72                   STA &72	 	\ QQ17
 258+ 9FFD              ;68                      PLA 		\ pull token
 259+ 9FFD              ;	.TT74	\ TT26, print character.
 260+ 9FFD              ;4C FC 1E                JMP &1EFC	\ TT26
 261+ 9FFD              ;
 262+ 9FFD              ;	.TT43	\ Token > 127 page4 token or planet digram.
 263+ 9FFD              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 264+ 9FFD              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 265+ 9FFD              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 266+ 9FFD              ;0A                      ASL A		      \ *= 2
 267+ 9FFD              ;A8                      TAY 		      \ digram index = 0to62
 268+ 9FFD              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 269+ 9FFD              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 270+ 9FFD              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 271+ 9FFD              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 272+ 9FFD              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 273+ 9FFD              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 274+ 9FFD              ;
 275+ 9FFD              ;	.TT47	\ more page4, subtract #160
 276+ 9FFD              ;E9 A0                   SBC #&A0	\ -= 160
 277+ 9FFD              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 278+ 9FFD              ;AA                      TAX 		\ copy of word index
 279+ 9FFD              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 280+ 9FFD              ;85 22                   STA &22		\ V
 281+ 9FFD              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 282+ 9FFD              ;85 23                   STA &23		\ V+1
 283+ 9FFD              ;A0 00                   LDY #0
 284+ 9FFD              ;8A                      TXA 		\ token = word index
 285+ 9FFD              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 286+ 9FFD              ;	.TT51	\ counters Y letter, X token
 287+ 9FFD              ;B1 22                   LDA (&22),Y	\ (V),Y
 288+ 9FFD              ;F0 07                   BEQ TT49	\ exit as word ended
 289+ 9FFD              ;C8                      INY 		\ letter count
 290+ 9FFD              ;D0 F9                   BNE TT51	\ loop Y
 291+ 9FFD              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 292+ 9FFD              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 293+ 9FFD              ;	.TT49	\ word ended
 294+ 9FFD              ;C8                      INY
 295+ 9FFD              ;D0 02                   BNE TT59    	\ next word
 296+ 9FFD              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 297+ 9FFD              ;	.TT59	\ next word
 298+ 9FFD              ;CA                      DEX 		\ token count
 299+ 9FFD              ;D0 ED                   BNE TT51	\ loop X token
 300+ 9FFD              ;	.TT50	\ token X = 0, counter Y offset to word correct
 301+ 9FFD              ;98                      TYA
 302+ 9FFD              ;48                      PHA 		\ store Yindex
 303+ 9FFD              ;A5 23                   LDA &23		\ V+1
 304+ 9FFD              ;48                      PHA 		\ correct pointer hi
 305+ 9FFD              ;B1 22                   LDA (&22),Y 	\ (V),Y
 306+ 9FFD              ;49 23                   EOR #&23	\ decode '#'
 307+ 9FFD              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 308+ 9FFD              ;68                      PLA 		\ restore this depth's Vhi
 309+ 9FFD              ;85 23                   STA &23		\ V+1
 310+ 9FFD              ;68                      PLA
 311+ 9FFD              ;A8                      TAY 		\ restore this depth's Yindex
 312+ 9FFD              ;C8                      INY 		\ next letter
 313+ 9FFD              ;D0 02                   BNE P%+4	\ not zero so skip next page
 314+ 9FFD              ;E6 23                   INC &23		\ V+1
 315+ 9FFD              ;B1 22                   LDA (&22),Y	\ (V),Y
 316+ 9FFD              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 317+ 9FFD              ;	.TT48 	\ rts
 318+ 9FFD              ;60                      RTS 		\ end of flight token printing TT27
 319+ 9FFD              ;
 320+ 9FFD              ;
 321+ 9FFD              ;
# file closed: ./Tables/name_digrams.asm
 964  9FFD              ;INCLUDE "Tables/inwk_table.asm" This is no longer needed as we will write to univer object bank
 965  9FFD
 966  9FFD              ; Include all maths libraries to test assembly
 967  9FFD
 968  9FFD                  INCLUDE "./Maths/addhldesigned.asm"
# file opened: ./Maths/addhldesigned.asm
   1+ 9FFD              addhldesigned:
   2+ 9FFD CB 7C                bit     7,h
   3+ 9FFF 20 03                jr      nz,.noneghl
   4+ A001 CD B3 A5             call    negate16hl
   5+ A004              .noneghl:
   6+ A004 CB 7A                bit     7,d
   7+ A006 20 03                jr      nz,.nonegde
   8+ A008 CD BA A5             call    negate16de
   9+ A00B              .nonegde:
  10+ A00B 19                   add     hl,de                       ; do 2'd c add
  11+ A00C AF                   xor     a                           ; assume positive
  12+ A00D CB 7C                bit     7,h
  13+ A00F C8                   ret     z                           ; if not set then can exit early
  14+ A010 CD B3 A5             call    negate16hl
  15+ A013 3E FF                ld      a,$FF
  16+ A015 C9                   ret
  17+ A016
# file closed: ./Maths/addhldesigned.asm
 969  A016                  INCLUDE "./Maths/addhlasigned.asm"
# file opened: ./Maths/addhlasigned.asm
   1+ A016
   2+ A016              ; a = value to add
   3+ A016              ; b = offset (equivalent to regX)
   4+ A016              ; returns INWK [x] set to new value
   5+ A016              addINWKbasigned:
   6+ A016 21 0C C0     		ld 		hl,UBnKxlo                  ; hl = INWK 0
   7+ A019 4F           		ld      c,a                         ; preserve a
   8+ A01A 78           		ld		a,b
   9+ A01B ED 31        		add		hl,a                        ; hl = INWK[x]
  10+ A01D 79                   ld      a,c                         ; get back a value
  11+ A01E E6 80                and     $80                         ; get sign bit from a
  12+ A020 47                   ld      b,a                         ; now b = sign bit of a
  13+ A021 79                   ld      a,c                         ; a = original value
  14+ A022 E6 7F                and     SignMask8Bit                ; a = unsigned version of original value
  15+ A024              ; hl = unsigned version of INWK0[b]
  16+ A024              ; a = value to add, also in c which will optimise later code
  17+ A024              ; b = sign bit of a ( in old code was varT)
  18+ A024              addhlcsigned:
  19+ A024 5E                   ld      e,(hl)                      ; de = INKK value
  20+ A025 23                   inc     hl
  21+ A026 56                   ld      d,(hl)
  22+ A027 23                   inc     hl                          ; now pointing a sign
  23+ A028 7E                   ld      a,(hl)                      ; a = sign bit
  24+ A029 EB                   ex      de,hl                       ; hl = value now and de = pointer to sign
  25+ A02A A8                   xor     b                           ; a = resultant sign
  26+ A02B CB 7F                bit     7,a                         ; is it negative?
  27+ A02D 28 28                jr      z,.postivecalc
  28+ A02F              .negativecalc:
  29+ A02F 7C                   ld      a,h
  30+ A030 E6 7F                and     SignMask8Bit
  31+ A032 67                   ld      h,a                         ; strip high bit
  32+ A033 DD 68                ld      ixl,b                       ; save sign bit from b into d
  33+ A035 06 00                ld      b,0                         ; c = value to subtract so now bc = value to subtract
  34+ A037 ED 42                sbc     hl,bc
  35+ A039 DD 45                ld      b,ixl                       ; get sign back
  36+ A03B EB                   ex      de,hl                       ; de = value hl = pointer to sign
  37+ A03C 7E                   ld      a,(hl)                      ;
  38+ A03D E6 7F                and     SignMask8Bit
  39+ A03F DE 00                sbc     a,0                         ; subtract carry which could flip sign bit
  40+ A041 F6 80                or      $80                         ; set bit 0
  41+ A043 A8                   xor     b                           ; flip bit on sign (var T)
  42+ A044 77                   ld      (hl),a
  43+ A045 2B                   dec     hl
  44+ A046 72                   ld      (hl),d
  45+ A047 2B                   dec     hl
  46+ A048 73                   ld      (hl),e                      ; write out DE to INKW[x]0,1
  47+ A049 EB                   ex      de,hl                       ; hl = value de = pointer to start if INKW[x]
  48+ A04A D8                   ret     c                           ; if carry was set then we can exit now
  49+ A04B              .nocarry:
  50+ A04B CD B3 A5             call    negate16hl                  ; get hl back to positive, a is still inkw+2
  51+ A04E B0                   or      b                           ; b is still varT
  52+ A04F EB                   ex      de,hl                       ; de = value hl = pointer to start if INKW[x]
  53+ A050 73                   ld      (hl),e
  54+ A051 23                   inc     hl
  55+ A052 72                   ld      (hl),d
  56+ A053 23                   inc     hl
  57+ A054 77                   ld      (hl),a                      ; set sign bit in INKK[x]+2
  58+ A055 EB                   ex      de,hl                       ; hl = value de = pointer to sign
  59+ A056 C9                   ret
  60+ A057              .postivecalc:
  61+ A057 DD 68                ld      ixl,b
  62+ A059 06 00                ld      b,0
  63+ A05B 19                   add     hl,de
  64+ A05C EB                   ex      de,hl
  65+ A05D DD B5                or      ixl                         ; we don;t need to recover b here
  66+ A05F 77                   ld      (hl),a                      ; push sign into INWK[x]
  67+ A060 2B                   dec     hl
  68+ A061 72                   ld      (hl),d
  69+ A062 2B                   dec     hl
  70+ A063 73                   ld      (hl),e
  71+ A064 C9                   ret
  72+ A065
  73+ A065              ;a = a AND 80 (i.e. bit 7) =>carry       so value is -
  74+ A065              ;MVT1
  75+ A065              ;    S = bits 6 to 0 of A
  76+ A065              ;    A = sign bit => T
  77+ A065              ;    xor sign bit with ink[x] Sign
  78+ A065              ;    if negative thn its not an add
  79+ A065              ;
  80+ A065              ;        and h, 7F
  81+ A065              ;        b = 0
  82+ A065              ;        c = varS
  83+ A065              ;        subtract INW[X]hilo, bc
  84+ A065              ;        retain carry
  85+ A065              ;        get INKW[x]Sign
  86+ A065              ;        and 7F
  87+ A065              ;        subtract carry (so will go negtive if negative)
  88+ A065              ;        xor bit 7 of h with T to flip bit
  89+ A065              ;        write to INKW[x]Sign
  90+ A065              ;
  91+ A065              ;    else
  92+ A065              ;MV10.
  93+ A065              ;        add INWK[x]hi,lo, varS
  94+ A065              ;        or      sign bit
  95+ A065
  96+ A065
# file closed: ./Maths/addhlasigned.asm
 970  A065                  INCLUDE "./Maths/Utilities/AddDEtoCash.asm"
# file opened: ./Maths/Utilities/AddDEtoCash.asm
   1+ A065              ; Note its big endian
   2+ A065 2A F3 96     addDEtoCash:            ld      hl,(Cash)
   3+ A068 19                                   add     hl,de
   4+ A069 22 F3 96                             ld      (Cash),hl
   5+ A06C 11 00 00                             ld      de,0
   6+ A06F 2A F5 96                             ld      hl,(Cash+2)
   7+ A072 ED 5A                                adc     hl,de
   8+ A074 22 F5 96                             ld      (Cash+2),hl
   9+ A077 C9                                   ret
  10+ A078
  11+ A078 2A F3 96     subDEfromCash:          ld      hl,(Cash)
  12+ A07B 7C                                   ld      a,h
  13+ A07C B5                                   or      l
  14+ A07D 2A F5 96                             ld      hl,(Cash+2)
  15+ A080 B4                                   or      h
  16+ A081 B5                                   or      l
  17+ A082 C8                                   ret     z               ; No cash return
  18+ A083 B7                                   or      a
  19+ A084 2A F3 96                             ld      hl,(Cash)
  20+ A087 ED 52                                sbc     hl,de
  21+ A089 22 F3 96                             ld      (Cash),hl
  22+ A08C 11 00 00                             ld      de,0
  23+ A08F 2A F5 96                             ld      hl,(Cash+2)
  24+ A092 ED 52                                sbc     hl,de
  25+ A094 22 F5 96                             ld      (Cash+2),hl
  26+ A097                                      JumpOnBitSet h,7,.ZeroCash
  26+ A097 CB 7C       >                        bit 	7,h
  26+ A099 C2 9D A0    >                        jp      nz,.ZeroCash
  27+ A09C C9                                   ret
  28+ A09D 21 00 00     .ZeroCash:              ld      hl,0
  29+ A0A0 22 F3 96                             ld      (Cash),hl
  30+ A0A3 22 F5 96                             ld      (Cash+2),hl
  31+ A0A6 C9                                   ret
  32+ A0A7
# file closed: ./Maths/Utilities/AddDEtoCash.asm
 971  A0A7                  INCLUDE "./Maths/DIVD3B2.asm"
# file opened: ./Maths/DIVD3B2.asm
   1+ A0A7              ;INPUTS: ahl = dividend cde = divisor
   2+ A0A7              ;OUTPUTS: cde = quotient ahl = remainder
   3+ A0A7 47           Div24by24:              ld b,a
   4+ A0A8 E5                                   push hl
   5+ A0A9 DD E1                                pop ix
   6+ A0AB 2E 18                                ld l,24
   7+ A0AD E5                                   push hl
   8+ A0AE AF                                   xor a
   9+ A0AF 67                                   ld h,a
  10+ A0B0 6F                                   ld l,a
  11+ A0B1 DD 29        .Div24by24loop:         add ix,ix
  12+ A0B3 CB 10                                rl b
  13+ A0B5 ED 6A                                adc hl,hl
  14+ A0B7 17                                   rla
  15+ A0B8 B9                                   cp c
  16+ A0B9 38 0C                                jr c,.Div24by24skip
  17+ A0BB 20 05                                jr nz,.Div24by24setbit
  18+ A0BD ED 52                                sbc hl,de
  19+ A0BF 19                                   add hl,de
  20+ A0C0 38 05                                jr c,.Div24by24skip
  21+ A0C2 ED 52        .Div24by24setbit:       sbc hl,de
  22+ A0C4 99                                   sbc a,c
  23+ A0C5 DD 23                                inc ix
  24+ A0C7 E3           .Div24by24skip:         ex (sp),hl
  25+ A0C8 2D                                   dec l
  26+ A0C9 E3                                   ex (sp),hl
  27+ A0CA 20 E5                                jr nz,.Div24by24loop
  28+ A0CC D1                                   pop de
  29+ A0CD 48                                   ld c,b
  30+ A0CE DD E5                                push ix
  31+ A0D0 D1                                   pop de
  32+ A0D1 C9                                   ret
  33+ A0D2
  34+ A0D2 FD 67        Div24by24LeadSign:      ld      iyh,a           ; Preserve signed in IYL
  35+ A0D4 A9                                   xor     c               ; flip sign if negative
  36+ A0D5 E6 80                                and     SignOnly8Bit    ; .
  37+ A0D7 FD 6F                                ld      iyl,a           ; .
  38+ A0D9 79                                   ld      a,c             ; make both values ABS
  39+ A0DA E6 7F                                and     SignMask8Bit    ; .
  40+ A0DC 4F                                   ld      c,a             ; .
  41+ A0DD FD 7C                                ld      a,iyh           ; .
  42+ A0DF E6 7F                                and     SignMask8Bit    ; .
  43+ A0E1 CD A7 A0                             call    Div24by24       ; do abs divide
  44+ A0E4 FD B5                                or      iyl             ; bring in sign bit
  45+ A0E6 FD 67                                ld      iyh,a           ; save a
  46+ A0E8 79                                   ld      a,c             ; sort sign for c
  47+ A0E9 FD B5                                or      iyl             ;
  48+ A0EB 4F                                   ld      c,a             ;
  49+ A0EC FD 7C                                ld      a,iyh           ; sort sign of a
  50+ A0EE C9                                   ret
  51+ A0EF
  52+ A0EF              ; --------------------------------------------------------------
  53+ A0EF              ;divdide by 16 using undocumented instrunctions
  54+ A0EF              ;Input: BC = Dividend, DE = Divisor, HL = 0
  55+ A0EF              ;Output: BC = Quotient, HL = Remainder
  56+ A0EF 47           PROJ256mulAdivQ:        ld      b,a
  57+ A0F0 0E 00                                ld      c,0
  58+ A0F2 16 00                                ld      d,0
  59+ A0F4 3A B4 92                             ld      a,(varQ)
  60+ A0F7 5F                                   ld      e,a
  61+ A0F8 21 00 00     PROJDIV16UNDOC:         ld      hl,0
  62+ A0FB 78                                   ld      a,b
  63+ A0FC 06 10                                ld      b,16
  64+ A0FE CB 31        PROJDIV16UNDOCLOOP:     sll     c       ; unroll 16 times
  65+ A100 17                                   rla             ; ...
  66+ A101 ED 6A                                adc     hl,hl       ; ...
  67+ A103 ED 52                                sbc     hl,de       ; ...
  68+ A105 30 02                                jr      nc,PROJDIV16UNDOCSKIP       ; ...
  69+ A107 19                                   add     hl,de       ; ...
  70+ A108 0D                                   dec     c       ; ...
  71+ A109 10 F3        PROJDIV16UNDOCSKIP:     djnz    PROJDIV16UNDOCLOOP
  72+ A10B 79                                   ld      a,c
  73+ A10C 32 B5 92                             ld      (varR),a
  74+ A10F C9                                   ret
  75+ A110
  76+ A110              ;INPUTS:    bhl = dividend  cde = divisor where b and c are sign bytes
  77+ A110              ;OUTPUTS:   cahl = quotient cde = divisor
  78+ A110 32 56 92     DVID3B2:                ld      (varPhi2),a                     ;DVID3B2 \ Divide 3 bytes by 2, K = [P(HiLo).A]/[INWK_z HiLo], for planet radius, Xreg protected. ; P+2    \ num sg
  79+ A113                                      ldCopy2Byte UBnKzlo, varQ               ; [QR} = Ubnk zlohi  (i.e. Inwk_z HiLo)
  79+ A113 2A 12 C0    >               ld       hl,(UBnKzlo)
  79+ A116 22 B4 92    >               ld       (varQ),hl
  80+ A119 3A 14 C0                             ld      a,(UBnKzsgn)                    ;
  81+ A11C 32 B6 92                             ld      (varS),a                        ; S = inkw z sign
  82+ A11F ED 5B 54 92  DVID3B:                 ld      de,(varP)                       ; K (3bytes)=P(Lo Hi Hi2)/S.R.Q approx  Acc equiv K(0).; get P and P+1 into de
  83+ A123 7B                                   ld      a,e                             ; num lo
  84+ A124 F6 01                                or      1                               ; must be at least 1
  85+ A126 32 54 92                             ld      (varP),a                        ; store
  86+ A129 5F                                   ld      e,a                             ; update DE too
  87+ A12A 3A 56 92                             ld      a,(varPhi2)                     ; varP Sign     E.D.A = P Lo Hi Hi2
  88+ A12D 21 B6 92                             ld      hl,varS                         ; hl = address of VarS
  89+ A130 AE                                   xor     (hl)                            ; A = PHi2 Xor S Signs
  90+ A131 E6 80                                and     $80                             ;
  91+ A133 32 D2 92                             ld      (varT),a                        ; T = Sign bit of A
  92+ A136 FD 2E 00                             ld      iyl,0                           ; iyl = yReg = counter
  93+ A139 3A 56 92                             ld      a,(varPhi2)                     ;
  94+ A13C E6 7F                                and     $7F                             ; A = Ph2 again but minus sign bit
  95+ A13E              DVL9:                   JumpIfAGTENusng $40,DV14                ; counter Y up; if object is over $40 away then scaled and exit Y count
  95+ A13E FE 40       >                        cp     $40
  95+ A140 D2 4E A1    >                        jp		nc,DV14
  96+ A143                                      ShiftDELeft1                            ; de (or P,P1) > 1
  96+ A143 CB 23       >			   sla e
  96+ A145 CB 12       >			   rl  d
  97+ A147 CB 17                                rl      a                               ; and accumulator as 3rd byte
  98+ A149 FD 2C                                inc     iyl
  99+ A14B C2 3E A1                             jp      nz,DVL9                         ; loop again with a max of 256 iterations
 100+ A14E 32 56 92     DV14:                   ld      (varPhi2),a                     ; scaled, exited Ycount
 101+ A151 ED 53 54 92                          ld      (varP),de                       ; store off the value so far
 102+ A155 3A B6 92                             ld      a,(varS)                        ; zsign
 103+ A158 E6 7F                                and     $7F                             ; denom sg7
 104+ A15A                                      ; jp mi,DV9                             ; this can never happen as bit 7 is and'ed out
 105+ A15A 2A B4 92                             ld      hl,(varQ)                       ; demon lo
 106+ A15D FD 2D        DVL6:                   dec     iyl                             ; counter Y back down, roll S. ;  scale Y back
 107+ A15F                                      ShiftHLLeft1
 107+ A15F CB 25       >			   sla l
 107+ A161 CB 14       >			   rl  h
 108+ A163 CB 17                                rl      a                               ; mulitply QRS by 2
 109+ A165 F2 5D A1                             jp      p,DVL6                          ; loop roll S until Abit7 set.
 110+ A168 22 B4 92     DV9:                    ld      (varQ),hl                       ; bmi cant enter here from above ; save off so far
 111+ A16B 32 B4 92                             ld      (varQ),a                        ; Q \ mostly empty so now reuse as hi denom
 112+ A16E 3E FE                                ld      a,$FE                           ;  Xreg protected so can't LL28+4
 113+ A170 32 B5 92                             ld      (varR),a                        ;  R
 114+ A173 3A 56 92                             ld      a,(varPhi2)                     ; P+2 \ big numerator
 115+ A176 CD EF A0                             call    PROJ256mulAdivQ                 ; TODO LL31\ R now =A*256/Q
 116+ A179 3E 00                                ld      a,0
 117+ A17B 32 CA 92                             ld      (varKp1),a
 118+ A17E 32 CB 92                             ld      (varKp2),a
 119+ A181 32 CC 92                             ld      (varKp3),a                      ; clear out K+1 to K+3
 120+ A184 FD 7D                                ld      a,iyl                           ; Y counter for scale
 121+ A186                                      JumpOnBitClear a,7,DV12                 ; Ycount +ve
 121+ A186 CB 7F       >                        bit 	7,a
 121+ A188 CA B3 A1    >                        jp      z,DV12
 122+ A18B 3A B5 92                             ld      a,(varR)                        ; R     \ else Y count is -ve, Acc = remainder.
 123+ A18E ED 5B C9 92                          ld      de,(varK)                       ; d= k1
 124+ A192 2A CD 92                             ld      hl,(varK2)                      ; h = k3, l = k2
 125+ A195 5F                                   ld      e,a                             ; use e to hold K0 pulled from a
 126+ A196 CB 27        DVL8:                   sla     a                               ; boost up a                     ;  counter Y up
 127+ A198 CB 12                                rl      d                               ; k1
 128+ A19A CB 15                                rl      l                               ; k2
 129+ A19C CB 14                                rl      h                               ; k3
 130+ A19E FD 2C                                inc     iyl
 131+ A1A0 20 F4                                jr      nz,DVL8                         ;
 132+ A1A2 ED 53 C9 92  DVL8Save:               ld      (varK),de
 133+ A1A6 22 CD 92                             ld      (varK2),hl                      ; save back K0 to k3
 134+ A1A9 3A D2 92                             ld      a,(varT)
 135+ A1AC 4F                                   ld      c,a                             ; get varT into c reg
 136+ A1AD 7C                                   ld      a,h                             ; a= k3 (sign)
 137+ A1AE B1                                   or      c                               ; merge in varT (sign)that was saved much earlier up)
 138+ A1AF 32 DC 92                             ld      (varK3),a                       ; load sign bit back into K3
 139+ A1B2 C9                                   ret
 140+ A1B3              DV12:                   IfAIsZeroGoto   DV13                    ; Y Count zerp, go to DV13
 140+ A1B3 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 140+ A1B4 CA CB A1    >				jp	z, DV13
 141+ A1B7 3A B5 92                             ld      a,(varR)                        ; Reduce Remainder
 142+ A1BA CB 3F        DVL10:                  srl     a                               ; divide by 2                     ; counter Y reduce
 143+ A1BC FD 2D                                dec     iyl
 144+ A1BE C2 BA A1                             jp      nz,DVL10                        ; loop y reduce until y is zero
 145+ A1C1 32 C9 92                             ld      (varK),a                        ; k Lo
 146+ A1C4                                      ldCopyByte  varT,varKp3                 ; Copy sign to K+3
 146+ A1C4 3A D2 92    >               ld       a,(varT)
 146+ A1C7 32 CC 92    >               ld       (varKp3),a
 147+ A1CA C9                                   ret
 148+ A1CB              DV13:                   ldCopyByte  varR,varK                   ; R \ already correct so copy to K lo;DV13   \ Ycount zero \ K(1to2) already = 0
 148+ A1CB 3A B5 92    >               ld       a,(varR)
 148+ A1CE 32 C9 92    >               ld       (varK),a
 149+ A1D1                                      ldCopyByte  varT,varKp3                 ; Copy sign to K+3
 149+ A1D1 3A D2 92    >               ld       a,(varT)
 149+ A1D4 32 CC 92    >               ld       (varKp3),a
 150+ A1D7 C9                                   ret
 151+ A1D8
 152+ A1D8
 153+ A1D8 CD 10 A1     PLS6:                   call    DVID3B2                         ; Returns AHL K ( 2 1 0 )
 154+ A1DB 3A CC 92                             ld      a,(varKp3)
 155+ A1DE E6 7F                                and     $7F
 156+ A1E0 21 CB 92                             ld      hl,varKp2
 157+ A1E3 B6                                   or      (hl)
 158+ A1E4 C2 F9 A1                             jp      nz,PL44TooBig
 159+ A1E7 3A CA 92                             ld      a,(varKp1)
 160+ A1EA FE 04                                cp      4                               ; if high byte > 4 then total > 1024 so too big
 161+ A1EC 30 0B                                jr      nc,PL44TooBig
 162+ A1EE                                      ClearCarryFlag                          ; we have a good result regardless
 162+ A1EE B7          >                    or a
 163+ A1EF 2A C9 92                             ld      hl,(varK)                       ; get K (0 1)
 164+ A1F2 3A CC 92                             ld      a,(varKp3)                      ; if sign bit high?
 165+ A1F5 CB 7F                                bit     7,a
 166+ A1F7 C8                                   ret     z                               ; no so we can just return
 167+ A1F8 C9           PL44:                   ret
 168+ A1F9 37           PL44TooBig:             scf
 169+ A1FA C9                                   ret
 170+ A1FB
# file closed: ./Maths/DIVD3B2.asm
 972  A1FB                  INCLUDE "./Maths/multiply.asm"
# file opened: ./Maths/multiply.asm
   1+ A1FB              HLequSRmulQdiv256:      ;X.Y=x1lo.S*M/256  	\ where M/256 is gradient
   2+ A1FB 2A B5 92                             ld  hl,(varRS)
   3+ A1FE 3A B4 92                             ld  a,(varQ)
   4+ A201 C5 D5        HLeqyHLmulAdiv256:      push    bc,,de
   5+ A203 11 00 00                             ld  de,0        ; de = XY
   6+ A206 47                                   ld  b,a         ; b = Q
   7+ A207                                      ShiftHLRight1
   7+ A207 CB 3C       >			   srl h
   7+ A209 CB 1D       >			   rr  l
   8+ A20B CB 20                                sla b
   9+ A20D 30 03                                jr  nc,.LL126
  10+ A20F EB           .LL125:                 ex de,hl
  11+ A210 19                                   add hl,de
  12+ A211 EB                                   ex  de,hl       ; de = de + rs
  13+ A212              .LL126:                 ShiftHLRight1
  13+ A212 CB 3C       >			   srl h
  13+ A214 CB 1D       >			   rr  l
  14+ A216 CB 20                                sla b
  15+ A218 38 F5                                jr      c,.LL125
  16+ A21A 20 F6                                jr      nz,.LL126
  17+ A21C EB                                   ex      de,hl   ; hl = result
  18+ A21D D1 C1                                pop     bc,,de
  19+ A21F C9                                   ret
  20+ A220
  21+ A220
  22+ A220              MacroDEEquQmulASigned:  MACRO
  23+ A220 ~                                    ld      d,a                         ; save a into d
  24+ A220 ~                                    ld      a,(varQ)
  25+ A220 ~                                    ld      e,a
  26+ A220 ~                                    xor     d                           ; a = a xor var Q
  27+ A220 ~                                    and     SignOnly8Bit
  28+ A220 ~                                    ld      b,a                         ; b = sign of a xor q
  29+ A220 ~                                    ld      a,d                         ; d = abs d (or a reg)
  30+ A220 ~                                    and     SignMask8Bit
  31+ A220 ~                                    ld      d,a
  32+ A220 ~                                    ld      a,e                         ; e = abs e (or varQ)
  33+ A220 ~                                    and     SignMask8Bit
  34+ A220 ~                                    ld      e,a
  35+ A220 ~                                    mul                                 ; de = a * Q
  36+ A220 ~                                    ld      a,d
  37+ A220 ~                                    or      b                           ; de = a * Q leading sign bit
  38+ A220 ~                                    ld      d,a
  39+ A220                                      ENDM
  40+ A220
  41+ A220
  42+ A220
  43+ A220                                 ; .MAD	\ -> &22AD  \ Multiply and Add  (DE also) X.A(Lo.Hi) = Q*A + R.S (Lo.Hi)
  44+ A220              madXAequQmulAaddRS:     MacroDEEquQmulASigned
  44+ A220 57          >                        ld      d,a                         ; save a into d
  44+ A221 3A B4 92    >                        ld      a,(varQ)
  44+ A224 5F          >                        ld      e,a
  44+ A225 AA          >                        xor     d                           ; a = a xor var Q
  44+ A226 E6 80       >                        and     SignOnly8Bit
  44+ A228 47          >                        ld      b,a                         ; b = sign of a xor q
  44+ A229 7A          >                        ld      a,d                         ; d = abs d (or a reg)
  44+ A22A E6 7F       >                        and     SignMask8Bit
  44+ A22C 57          >                        ld      d,a
  44+ A22D 7B          >                        ld      a,e                         ; e = abs e (or varQ)
  44+ A22E E6 7F       >                        and     SignMask8Bit
  44+ A230 5F          >                        ld      e,a
  44+ A231 ED 30       >                        mul                                 ; de = a * Q
  44+ A233 7A          >                        ld      a,d
  44+ A234 B0          >                        or      b                           ; de = a * Q leading sign bit
  44+ A235 57          >                        ld      d,a
  45+ A236 2A B5 92     madDEaddRS:             ld		hl,(varR)
  46+ A239 CD 42 A2                             call	madXAAddHLDESigned
  47+ A23C EB                                   ex      de,hl                       ; de = R.S + DE
  48+ A23D                                      ClearCarryFlag
  48+ A23D B7          >                    or a
  49+ A23E DD 6B                                ld      ixl,e
  50+ A240 7A                                   ld      a,d
  51+ A241 C9                                   ret
  52+ A242
  53+ A242
  54+ A242 7C           madXAAddHLDESigned:     ld      a,h
  55+ A243 E6 80                                and     SignOnly8Bit
  56+ A245 47                                   ld      b,a                         ;save sign bit in b
  57+ A246 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
  58+ A247                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
  58+ A247 FA 5F A2    >                        jp		m, .ADDHLDEOppSGN
  59+ A24A 78           .ADDHLDESameSigns:       ld      a,b
  60+ A24B B2                                   or      d
  61+ A24C                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
  61+ A24C FA 51 A2    >                        jp		m, .ADDHLDESameNeg
  62+ A24F 19                                   add     hl,de
  63+ A250 C9                                   ret
  64+ A251 7C           .ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  65+ A252 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  66+ A254 67                                   ld      h,a
  67+ A255 7A                                   ld      a,d
  68+ A256 E6 7F                                and     SignMask8Bit
  69+ A258 57                                   ld      d,a
  70+ A259 19                                   add     hl,de
  71+ A25A 3E 80                                ld      a,SignOnly8Bit
  72+ A25C B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
  73+ A25D 67                                   ld      h,a
  74+ A25E C9                                   ret
  75+ A25F 7C           .ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
  76+ A260 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  77+ A262 67                                   ld      h,a
  78+ A263 7A                                   ld      a,d
  79+ A264 E6 7F                                and     SignMask8Bit
  80+ A266 57                                   ld      d,a
  81+ A267 B7                                   or      a
  82+ A268 ED 52                                sbc     hl,de
  83+ A26A 38 04                                jr      c,.ADDHLDEOppInvert
  84+ A26C 78           .ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  85+ A26D B4                                   or      h
  86+ A26E 67                                   ld      h,a                         ; set the previou sign value
  87+ A26F C9                                   ret
  88+ A270              .ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
  88+ A270 AF          >                    xor a
  88+ A271 95          >                    sub l
  88+ A272 6F          >                    ld l,a
  88+ A273 9F          >                    sbc a,a
  88+ A274 94          >                    sub h
  88+ A275 67          >                    ld h,a
  89+ A276 78                                   ld      a,b
  90+ A277 EE 80                                xor     SignOnly8Bit                ; flip sign bit
  91+ A279 B4                                   or      h
  92+ A27A 67                                   ld      h,a                         ; recover sign
  93+ A27B C9                                   ret
  94+ A27C
  95+ A27C
  96+ A27C                  ; multiplication of 16-bit number and 8-bit number into a 24-bit product
  97+ A27C                  ;
  98+ A27C                  ; enter : hl = 16-bit multiplier   = x
  99+ A27C                  ;          e =  8-bit multiplicand = y
 100+ A27C                  ;
 101+ A27C                  ; exit  : ahl = 24-bit product
 102+ A27C                  ;         carry reset
 103+ A27C                  ;
 104+ A27C                  ; uses  : af, de, hl
 105+ A27C 54           AHLequHLmulE:           ld d,h                      ; xh
 106+ A27D 63                                   ld h,e                      ; yl
 107+ A27E ED 30                                mul de                      ; xh*yl
 108+ A280 EB                                   ex de,hl
 109+ A281 ED 30                                mul de                      ; yl*xl, hl = xh*yl
 110+ A283
 111+ A283 7A                                   ld  a,d                     ; sum products
 112+ A284 85                                   add a,l
 113+ A285 57                                   ld  d,a
 114+ A286 EB                                   ex de,hl
 115+ A287
 116+ A287 7A                                   ld  a,d
 117+ A288 CE 00                                adc a,0
 118+ A28A C9                                   ret
 119+ A28B
 120+ A28B
 121+ A28B
 122+ A28B                 ; multiplication of two 16-bit numbers into a 32-bit product
 123+ A28B                 ;
 124+ A28B                 ; enter : de = 16-bit multiplicand = y
 125+ A28B                 ;         hl = 16-bit multiplicand = x
 126+ A28B                 ;
 127+ A28B                 ; exit  : dehl = 32-bit product
 128+ A28B                 ;         carry reset
 129+ A28B                 ;
 130+ A28B                 ; uses  : af, bc, de, hl
 131+ A28B
 132+ A28B
 133+ A28B
 134+ A28B 45           DEHLequDEmulHL:         ld b,l                      ; x0
 135+ A28C 4B                                   ld c,e                      ; y0
 136+ A28D 5D                                   ld e,l                      ; x0
 137+ A28E 6A                                   ld l,d
 138+ A28F E5                                   push hl                     ; x1 y1
 139+ A290 69                                   ld l,c                      ; y0
 140+ A291              ; bc = x0 y0, de = y1 x0,  hl = x1 y0,  stack = x1 y1
 141+ A291 ED 30                                mul de                      ; y1*x0
 142+ A293 EB                                   ex de,hl
 143+ A294 ED 30                                mul de                      ; x1*y0
 144+ A296
 145+ A296 AF                                   xor a                       ; zero A
 146+ A297 19                                   add hl,de                   ; sum cross products p2 p1
 147+ A298 8F                                   adc a,a                     ; capture carry p3
 148+ A299
 149+ A299 59                                   ld e,c                      ; x0
 150+ A29A 50                                   ld d,b                      ; y0
 151+ A29B ED 30                                mul de                      ; y0*x0
 152+ A29D
 153+ A29D 47                                   ld b,a                      ; carry from cross products
 154+ A29E 4C                                   ld c,h                      ; LSB of MSW from cross products
 155+ A29F
 156+ A29F 7A                                   ld a,d
 157+ A2A0 85                                   add a,l
 158+ A2A1 67                                   ld h,a
 159+ A2A2 6B                                   ld l,e                      ; LSW in HL p1 p0
 160+ A2A3
 161+ A2A3 D1                                   pop de
 162+ A2A4 ED 30                                mul de                      ; x1*y1
 163+ A2A6
 164+ A2A6 EB                                   ex de,hl
 165+ A2A7 ED 4A                                adc hl,bc
 166+ A2A9 EB                                   ex de,hl                    ; de = final MSW
 167+ A2AA
 168+ A2AA C9                                   ret
 169+ A2AB
 170+ A2AB              ; multiplication of two 16-bit numbers into a 16-bit product
 171+ A2AB              ; enter : de = 16-bit multiplicand
 172+ A2AB              ;         hl = 16-bit multiplicand
 173+ A2AB              ; exit  : hl = 16-bit product
 174+ A2AB              ;         carry reset
 175+ A2AB              ; maths is
 176+ A2AB              ;        hl = y , de= x
 177+ A2AB              ;        hl = xhi,ylo + (yhigh * xlow)
 178+ A2AB              ;        hl = yhih & xlo + x
 179+ A2AB              ;
 180+ A2AB              ;
 181+ A2AB              ; uses  : af, bc, de, hl
 182+ A2AB C5           mulDEbyHL:              push    bc
 183+ A2AC 7A                                   ld a,d                      ; a = xh
 184+ A2AD 54                                   ld d,h                      ; d = yh
 185+ A2AE 67                                   ld h,a                      ; h = xh
 186+ A2AF 4B                                   ld c,e                      ; c = xl
 187+ A2B0 45                                   ld b,l                      ; b = yl
 188+ A2B1 ED 30                                mul                         ; yh * yl
 189+ A2B3 EB                                   ex de,hl
 190+ A2B4 ED 30                                mul                         ; xh * yl
 191+ A2B6 19                                   add hl,de                   ; add cross products
 192+ A2B7 59                                   ld e,c
 193+ A2B8 50                                   ld d,b
 194+ A2B9 ED 30                                mul                         ; yl * xl
 195+ A2BB 7D                                   ld a,l                      ; cross products lsb
 196+ A2BC 82                                   add a,d                     ; add to msb final
 197+ A2BD 67                                   ld h,a
 198+ A2BE 6B                                   ld l,e                      ; hl = final
 199+ A2BF                                      ; 83 cycles, 19 bytes
 200+ A2BF AF                                   xor a                       ; reset carry
 201+ A2C0 C1                                   pop     bc
 202+ A2C1 C9                                   ret
 203+ A2C2
 204+ A2C2              ; multiplication of two S156-bit numbers into a 16-bit 2'd compliment product
 205+ A2C2              ; enter : de = 16-bit multiplicand
 206+ A2C2              ;         hl = 16-bit multiplicand
 207+ A2C2              ; exit  : hl = 16-bit product
 208+ A2C2              ;         carry reset
 209+ A2C2              ;
 210+ A2C2              ; uses  : af, bc, de, hl
 211+ A2C2 00           mulDEbyHLSignByte       DB      0
 212+ A2C3 AF           mulDEbyHLSgnTo2c:       xor     a
 213+ A2C4 32 C2 A2                             ld      (mulDEbyHLSignByte),a
 214+ A2C7 7A           .SignDE:                ld      a,d
 215+ A2C8 ED 27 80                             test    $80
 216+ A2CB 28 08                                jr      z,.SignHL
 217+ A2CD E6 7F        .NegativeDE:            and     $7F
 218+ A2CF 57                                   ld      d,a
 219+ A2D0 3E 80                                ld      a,$80
 220+ A2D2 32 C2 A2                             ld      (mulDEbyHLSignByte),a
 221+ A2D5 7C           .SignHL:                ld      a,h
 222+ A2D6 ED 27 80                             test    $80
 223+ A2D9 28 0B                                jr      z,.AbsoluteMultiply
 224+ A2DB E6 7F        .NegativeHL:            and     $7F
 225+ A2DD 67                                   ld      h,a
 226+ A2DE 3A C2 A2                             ld      a,(mulDEbyHLSignByte)
 227+ A2E1 EE 80                                xor     $80
 228+ A2E3 32 C2 A2                             ld      (mulDEbyHLSignByte),a
 229+ A2E6 CD AB A2     .AbsoluteMultiply:      call    mulDEbyHL
 230+ A2E9 3A C2 A2     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 231+ A2EC ED 27 80                             test    $80
 232+ A2EF C8                                   ret     z
 233+ A2F0 AF           .Negateghl: 				xor 	a
 234+ A2F1 95                                   sub 	l
 235+ A2F2 6F                                   ld 		l,a
 236+ A2F3 9F                                   sbc 	a,a
 237+ A2F4 94                                   sub 	h
 238+ A2F5 67                                   ld 		h,a
 239+ A2F6 C9                                   ret
 240+ A2F7
 241+ A2F7 AF           mulDESgnbyHLUnsgnTo2c:  xor     a
 242+ A2F8 32 C2 A2                             ld      (mulDEbyHLSignByte),a
 243+ A2FB 7A           .SignDE:                ld      a,d
 244+ A2FC ED 27 80                             test    $80
 245+ A2FF 28 08                                jr      z,.AbsoluteMultiply
 246+ A301 E6 7F        .NegativeDE:            and     $7F
 247+ A303 57                                   ld      d,a
 248+ A304 3E 80                                ld      a,$80
 249+ A306 32 C2 A2                             ld      (mulDEbyHLSignByte),a
 250+ A309 CD AB A2     .AbsoluteMultiply:      call    mulDEbyHL
 251+ A30C 3A C2 A2     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 252+ A30F ED 27 80                             test    $80
 253+ A312 C8                                   ret     z
 254+ A313 AF           .Negateghl:             xor 	a
 255+ A314 95                                   sub 	l
 256+ A315 6F                                   ld 		l,a
 257+ A316 9F                                   sbc 	a,a
 258+ A317 94                                   sub 	h
 259+ A318 67                                   ld 		h,a
 260+ A319 C9                                   ret
 261+ A31A
 262+ A31A
# file closed: ./Maths/multiply.asm
 973  A31A                  INCLUDE "./Maths/asm_square.asm"
# file opened: ./Maths/asm_square.asm
   1+ A31A              ; "ASM_SQUA : TESTGOOD"
   2+ A31A              ; "AP = A^2 A = low,P = hi"
   3+ A31A
   4+ A31A              inline_squde: MACRO
   5+ A31A ~            			ld	e,a
   6+ A31A ~            			ld  d,a
   7+ A31A ~            			mul
   8+ A31A              			ENDM
   9+ A31A
  10+ A31A              inline_squa: MACRO
  11+ A31A ~            			ld	e,a
  12+ A31A ~            			ld  d,a
  13+ A31A ~            			mul
  14+ A31A ~            			ld	a,e
  15+ A31A              			ENDM
  16+ A31A
  17+ A31A
  18+ A31A              asm_squa:
  19+ A31A E6 7F        	and SignMask8Bit
  20+ A31C              ; "ASM SQUA2 : TESTGOOD"
  21+ A31C              ; "AP = A^2 A = low,P = hi singed"
  22+ A31C              asm_squa2:
  23+ A31C 5F           	ld e, a
  24+ A31D 57           	ld d,a
  25+ A31E ED 30        	mul
  26+ A320 ED 53 54 92  	ld (varP),de
  27+ A324 7B           	ld a,e
  28+ A325 C9           	ret
# file closed: ./Maths/asm_square.asm
 974  A326                  INCLUDE "./Maths/asm_sqrt.asm"
# file opened: ./Maths/asm_sqrt.asm
   1+ A326              ; "ASM SQRT : TESTGOOD"
   2+ A326              ; "16-bit integer square root"
   3+ A326              ; "call with de = number to square root"
   4+ A326              ; "returns   hl = square root"
   5+ A326              ; "corrupts  bc, de"
   6+ A326              asm_sqrt:
   7+ A326 01 00 80     	ld bc,$8000
   8+ A329 61           	ld h,c
   9+ A32A 69           	ld l,c
  10+ A32B              .sqrloop:
  11+ A32B CB 38        	srl b
  12+ A32D CB 19        	rr c
  13+ A32F 09           	add hl,bc
  14+ A330 EB           	ex de,hl
  15+ A331 ED 52        	sbc hl,de
  16+ A333 38 04        	jr c,.sqrbit
  17+ A335 EB           	ex de,hl
  18+ A336 09           	add hl,bc
  19+ A337 18 05        	jr .sqrfi
  20+ A339              .sqrbit:
  21+ A339 19           	add hl,de
  22+ A33A EB           	ex de,hl
  23+ A33B B7           	or a
  24+ A33C ED 42        	sbc hl,bc
  25+ A33E              .sqrfi:
  26+ A33E CB 3C        	srl h
  27+ A340 CB 1D        	rr l
  28+ A342 CB 38        	srl b
  29+ A344 CB 19        	rr c
  30+ A346 30 E3        	jr nc,.sqrloop
  31+ A348 C9           	ret
  32+ A349
  33+ A349
  34+ A349              sqrtQR:					; Q = SQR(Qlo.Rhi) Q <~127
  35+ A349 3A B4 92     	ld		a,(varQ)
  36+ A34C 5F           	ld		e,a
  37+ A34D 3A B5 92     	ld		a,(varR)
  38+ A350 57           	ld		d,a
  39+ A351 CD 26 A3     	call	asm_sqrt
  40+ A354 7D               ld      a,l
  41+ A355 32 B4 92     	ld		(varQ),a
  42+ A358 C9           	ret
  43+ A359
# file closed: ./Maths/asm_sqrt.asm
 975  A359                  INCLUDE "./Maths/asm_divide.asm"
# file opened: ./Maths/asm_divide.asm
   1+ A359              ; Divide 8-bit values
   2+ A359              ; In: Divide E by divider C
   3+ A359              ; Out: A = result, B = rest
   4+ A359              ;
   5+ A359              ;;;Div8:
   6+ A359              ;;;    xor a
   7+ A359              ;;;    ld b,8
   8+ A359              ;;;Div8_Loop:
   9+ A359              ;;;    rl e
  10+ A359              ;;;    rla
  11+ A359              ;;;    sub c
  12+ A359              ;;;    jr nc,Div8_NoAdd
  13+ A359              ;;;    add a,c
  14+ A359              ;;;Div8_NoAdd:
  15+ A359              ;;;    djnz Div8_Loop
  16+ A359              ;;;    ld b,a
  17+ A359              ;;;    ld a,e
  18+ A359              ;;;    rla
  19+ A359              ;;;    cpl
  20+ A359              ;;;    ret
  21+ A359
  22+ A359              ;;Inputs: DE is the numerator, BC is the divisor
  23+ A359              ;;Outputs: DE is the result
  24+ A359              ;;         A is a copy of E
  25+ A359              ;;         HL is the remainder
  26+ A359              ;;         BC is not changed
  27+ A359              ;; so DE = DE /BC
  28+ A359              ;140 bytes
  29+ A359              ;145cc
  30+ A359
  31+ A359              MacroDEDivBC:       MACRO
  32+ A359 ~                                rla
  33+ A359 ~                                adc     hl,hl
  34+ A359 ~                                sbc     hl,bc
  35+ A359 ~                                jr      nc,$+3
  36+ A359 ~                                add     hl,bc
  37+ A359                                  ENDM
  38+ A359
  39+ A359              DEequDEDivBC:
  40+ A359 AF               xor a
  41+ A35A ED 62            sbc hl,hl
  42+ A35C 7A               ld a,d
  43+ A35D                  MacroDEDivBC
  43+ A35D 17          >                    rla
  43+ A35E ED 6A       >                    adc     hl,hl
  43+ A360 ED 42       >                    sbc     hl,bc
  43+ A362 30 01       >                    jr      nc,$+3
  43+ A364 09          >                    add     hl,bc
  44+ A365                  MacroDEDivBC
  44+ A365 17          >                    rla
  44+ A366 ED 6A       >                    adc     hl,hl
  44+ A368 ED 42       >                    sbc     hl,bc
  44+ A36A 30 01       >                    jr      nc,$+3
  44+ A36C 09          >                    add     hl,bc
  45+ A36D                  MacroDEDivBC
  45+ A36D 17          >                    rla
  45+ A36E ED 6A       >                    adc     hl,hl
  45+ A370 ED 42       >                    sbc     hl,bc
  45+ A372 30 01       >                    jr      nc,$+3
  45+ A374 09          >                    add     hl,bc
  46+ A375                  MacroDEDivBC
  46+ A375 17          >                    rla
  46+ A376 ED 6A       >                    adc     hl,hl
  46+ A378 ED 42       >                    sbc     hl,bc
  46+ A37A 30 01       >                    jr      nc,$+3
  46+ A37C 09          >                    add     hl,bc
  47+ A37D                  MacroDEDivBC
  47+ A37D 17          >                    rla
  47+ A37E ED 6A       >                    adc     hl,hl
  47+ A380 ED 42       >                    sbc     hl,bc
  47+ A382 30 01       >                    jr      nc,$+3
  47+ A384 09          >                    add     hl,bc
  48+ A385                  MacroDEDivBC
  48+ A385 17          >                    rla
  48+ A386 ED 6A       >                    adc     hl,hl
  48+ A388 ED 42       >                    sbc     hl,bc
  48+ A38A 30 01       >                    jr      nc,$+3
  48+ A38C 09          >                    add     hl,bc
  49+ A38D                  MacroDEDivBC
  49+ A38D 17          >                    rla
  49+ A38E ED 6A       >                    adc     hl,hl
  49+ A390 ED 42       >                    sbc     hl,bc
  49+ A392 30 01       >                    jr      nc,$+3
  49+ A394 09          >                    add     hl,bc
  50+ A395                  MacroDEDivBC
  50+ A395 17          >                    rla
  50+ A396 ED 6A       >                    adc     hl,hl
  50+ A398 ED 42       >                    sbc     hl,bc
  50+ A39A 30 01       >                    jr      nc,$+3
  50+ A39C 09          >                    add     hl,bc
  51+ A39D 17               rla
  52+ A39E 2F               cpl
  53+ A39F 57               ld d,a
  54+ A3A0
  55+ A3A0 7B               ld a,e
  56+ A3A1                  MacroDEDivBC
  56+ A3A1 17          >                    rla
  56+ A3A2 ED 6A       >                    adc     hl,hl
  56+ A3A4 ED 42       >                    sbc     hl,bc
  56+ A3A6 30 01       >                    jr      nc,$+3
  56+ A3A8 09          >                    add     hl,bc
  57+ A3A9                  MacroDEDivBC
  57+ A3A9 17          >                    rla
  57+ A3AA ED 6A       >                    adc     hl,hl
  57+ A3AC ED 42       >                    sbc     hl,bc
  57+ A3AE 30 01       >                    jr      nc,$+3
  57+ A3B0 09          >                    add     hl,bc
  58+ A3B1                  MacroDEDivBC
  58+ A3B1 17          >                    rla
  58+ A3B2 ED 6A       >                    adc     hl,hl
  58+ A3B4 ED 42       >                    sbc     hl,bc
  58+ A3B6 30 01       >                    jr      nc,$+3
  58+ A3B8 09          >                    add     hl,bc
  59+ A3B9                  MacroDEDivBC
  59+ A3B9 17          >                    rla
  59+ A3BA ED 6A       >                    adc     hl,hl
  59+ A3BC ED 42       >                    sbc     hl,bc
  59+ A3BE 30 01       >                    jr      nc,$+3
  59+ A3C0 09          >                    add     hl,bc
  60+ A3C1                  MacroDEDivBC
  60+ A3C1 17          >                    rla
  60+ A3C2 ED 6A       >                    adc     hl,hl
  60+ A3C4 ED 42       >                    sbc     hl,bc
  60+ A3C6 30 01       >                    jr      nc,$+3
  60+ A3C8 09          >                    add     hl,bc
  61+ A3C9                  MacroDEDivBC
  61+ A3C9 17          >                    rla
  61+ A3CA ED 6A       >                    adc     hl,hl
  61+ A3CC ED 42       >                    sbc     hl,bc
  61+ A3CE 30 01       >                    jr      nc,$+3
  61+ A3D0 09          >                    add     hl,bc
  62+ A3D1                  MacroDEDivBC
  62+ A3D1 17          >                    rla
  62+ A3D2 ED 6A       >                    adc     hl,hl
  62+ A3D4 ED 42       >                    sbc     hl,bc
  62+ A3D6 30 01       >                    jr      nc,$+3
  62+ A3D8 09          >                    add     hl,bc
  63+ A3D9                  MacroDEDivBC
  63+ A3D9 17          >                    rla
  63+ A3DA ED 6A       >                    adc     hl,hl
  63+ A3DC ED 42       >                    sbc     hl,bc
  63+ A3DE 30 01       >                    jr      nc,$+3
  63+ A3E0 09          >                    add     hl,bc
  64+ A3E1 17               rla
  65+ A3E2 2F               cpl
  66+ A3E3 5F               ld e,a
  67+ A3E4 C9               ret
  68+ A3E5
  69+ A3E5
  70+ A3E5
  71+ A3E5              ;divdide by 16 using undocumented instrunctions
  72+ A3E5              ;Input: BC = Dividend, DE = Divisor, HL = 0
  73+ A3E5              ;Output: BC = Quotient, HL = Remainder
  74+ A3E5              ; Our use
  75+ A3E5              ; BC = A0
  76+ A3E5              ; DE = 0C
  77+ A3E5              ; so BC = a * 256 / C
  78+ A3E5              DIV16Amul256dCUNDOC:    JumpIfAGTENusng	  c,DEV16ATooLarge                                          ; first off if a > c ten return 255
  78+ A3E5 B9          >                        cp     c
  78+ A3E6 D2 11 A4    >                        jp		nc,DEV16ATooLarge
  79+ A3E9 47                                   ld      b,a
  80+ A3EA 59                                   ld      e,c
  81+ A3EB 0E 00                                ld      c,0
  82+ A3ED 16 00                                ld      d,0
  83+ A3EF C3 FC A3                             jp      DIV16UNDOC
  84+ A3F2 47           DIV16Amul256dQUNDOC:    ld      b,a
  85+ A3F3 0E 00                                ld      c,0
  86+ A3F5 21 B4 92                             ld      hl,varQ
  87+ A3F8 7E                                   ld      a,(hl)
  88+ A3F9 16 00                                ld      d,0
  89+ A3FB 5F                                   ld      e,a
  90+ A3FC              DIV16BCDivDEUNDOC:
  91+ A3FC 21 00 00     DIV16UNDOC:             ld      hl,0
  92+ A3FF 78                                   ld      a,b
  93+ A400 06 10                                ld      b,16
  94+ A402 CB 31        DIV16UNDOCLOOP:         sll	c		; unroll 16 times
  95+ A404 17                                   rla			; ...
  96+ A405 ED 6A                                adc	hl,hl		; ...
  97+ A407 ED 52                                sbc	hl,de		; ...
  98+ A409 30 02                                jr	nc,DIV16UNDOCSKIP		; ...
  99+ A40B 19                                   add	hl,de		; ...
 100+ A40C 0D                                   dec	c		; ...
 101+ A40D 10 F3        DIV16UNDOCSKIP:         djnz DIV16UNDOCLOOP
 102+ A40F 47                                   ld   b,a
 103+ A410 C9                                   ret
 104+ A411 01 FF 00     DEV16ATooLarge:         ld     bc,$00FF
 105+ A414 C9                                   ret
 106+ A415
 107+ A415              ; "> asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
 108+ A415 06 08        asm_div8:               ld b,8
 109+ A417 AF                                   xor a
 110+ A418 CB 21        div8_loop:	            sla c
 111+ A41A 17                                   rla
 112+ A41B BA                                   cp d
 113+ A41C 38 02                                jr c,div8_skip
 113+ A41E
 114+ A41E 0C                                   inc c
 115+ A41F 92                                   sub d
 116+ A420 10 F6        div8_skip:	            djnz div8_loop
 117+ A422 C9                                   ret
 118+ A423              ; ">asm_div16: HL_Div_C: HL is the numerator,  C is the denominator, output A is the remainder, B is 0, C,DE is not changedHL is the quotient"
 119+ A423 06 10        asm_div16:              ld b,16
 120+ A425 AF                                   xor a
 121+ A426 CB 25        div16_loop:	            sla l
 122+ A428 CB 14                                rl	h
 123+ A42A              ;    add hl,hl
 124+ A42A 17                                   rla
 125+ A42B B9                                   cp c
 126+ A42C 38 02                                jr c,div16_skip
 127+ A42E 2C                                   inc l
 128+ A42F 91                                   sub c
 129+ A430 10 F4        div16_skip:		        djnz div16_loop
 130+ A432 C9                                   ret
 131+ A433              ;
 132+ A433              ; Divide 16-bit values (with 16-bit result)
 133+ A433              ; In: Divide BC by divider DE
 134+ A433              ; Out: BC = result, HL = rest
 135+ A433              ;
 136+ A433              HLDivC_Iteration: 	MACRO
 137+ A433 ~            					add	hl,hl		; unroll 16 times
 138+ A433 ~            					rla				; ...
 139+ A433 ~            					cp	c			; ...
 140+ A433 ~            					jr	1F
 141+ A433 ~            					sub	c			; ...
 142+ A433 ~            1:
 143+ A433 ~            					inc	l			; ...
 144+ A433              					ENDM
 145+ A433
 146+ A433
 147+ A433
 148+ A433              ; ">div1616: BC = BC / DE. HL = remainder"
 149+ A433 21 00 00     Div1616:            ld hl,0
 150+ A436 78                               ld a,b
 151+ A437 06 08                            ld b,8
 152+ A439 17           .Div16_Loop1:       rla
 153+ A43A ED 6A                            adc hl,hl
 154+ A43C ED 52                            sbc hl,de
 155+ A43E 30 01                            jr nc,.Div16_NoAdd1
 156+ A440 19                               add hl,de
 157+ A441 10 F6        .Div16_NoAdd1:      djnz .Div16_Loop1
 158+ A443 17                               rla
 159+ A444 2F                               cpl
 160+ A445 47                               ld b,a
 161+ A446 79                               ld a,c
 162+ A447 48                               ld c,b
 163+ A448 06 08                            ld b,8
 164+ A44A 17           .Div16_Loop2:       rla
 165+ A44B ED 6A                            adc hl,hl
 166+ A44D ED 52                            sbc hl,de
 167+ A44F 30 01                            jr nc,.Div16_NoAdd2
 168+ A451 19                               add hl,de
 169+ A452 10 F6        .Div16_NoAdd2:      djnz .Div16_Loop2
 170+ A454 17                               rla
 171+ A455 2F                               cpl
 172+ A456 41                               ld b,c
 173+ A457 4F                               ld c,a
 174+ A458 C9                               ret
 175+ A459
 176+ A459
 177+ A459
 178+ A459              BCDIVDE_Iteration: MACRO
 179+ A459 ~            				   rla
 180+ A459 ~            				   adc	hl,hl
 181+ A459 ~            				   add	hl,de
 182+ A459 ~            				   jr	c,1F
 183+ A459 ~            				   sbc	hl,de
 184+ A459 ~            1:
 185+ A459              				   ENDM
 186+ A459
 187+ A459
 188+ A459              ; ">BC_Div_DE: BC = BC / DE. HL = remainder fast divide with unrolled loop"
 189+ A459              ;BC/DE ==> BC, remainder in HL
 190+ A459              ;NOTE: BC/0 returns 0 as the quotient.
 191+ A459              ;min: 738cc
 192+ A459              ;max: 898cc
 193+ A459              ;avg: 818cc
 194+ A459              ;144 bytes
 195+ A459 AF           BC_Div_DE:              xor a
 196+ A45A 67                                   ld h,a
 197+ A45B 6F                                   ld l,a
 198+ A45C 93                                   sub e
 199+ A45D 5F                                   ld e,a
 200+ A45E 9F                                   sbc a,a
 201+ A45F 92                                   sub d
 202+ A460 57                                   ld d,a
 203+ A461 78                                   ld a,b
 204+ A462                                      BCDIVDE_Iteration
 204+ A462 17          >				   rla
 204+ A463 ED 6A       >				   adc	hl,hl
 204+ A465 19          >				   add	hl,de
 204+ A466 38 02       >				   jr	c,1F
 204+ A468 ED 52       >				   sbc	hl,de
 204+ A46A             >1:
 205+ A46A                                      BCDIVDE_Iteration
 205+ A46A 17          >				   rla
 205+ A46B ED 6A       >				   adc	hl,hl
 205+ A46D 19          >				   add	hl,de
 205+ A46E 38 02       >				   jr	c,1F
 205+ A470 ED 52       >				   sbc	hl,de
 205+ A472             >1:
 206+ A472                                      BCDIVDE_Iteration
 206+ A472 17          >				   rla
 206+ A473 ED 6A       >				   adc	hl,hl
 206+ A475 19          >				   add	hl,de
 206+ A476 38 02       >				   jr	c,1F
 206+ A478 ED 52       >				   sbc	hl,de
 206+ A47A             >1:
 207+ A47A                                      BCDIVDE_Iteration
 207+ A47A 17          >				   rla
 207+ A47B ED 6A       >				   adc	hl,hl
 207+ A47D 19          >				   add	hl,de
 207+ A47E 38 02       >				   jr	c,1F
 207+ A480 ED 52       >				   sbc	hl,de
 207+ A482             >1:
 208+ A482                                      BCDIVDE_Iteration
 208+ A482 17          >				   rla
 208+ A483 ED 6A       >				   adc	hl,hl
 208+ A485 19          >				   add	hl,de
 208+ A486 38 02       >				   jr	c,1F
 208+ A488 ED 52       >				   sbc	hl,de
 208+ A48A             >1:
 209+ A48A                                      BCDIVDE_Iteration
 209+ A48A 17          >				   rla
 209+ A48B ED 6A       >				   adc	hl,hl
 209+ A48D 19          >				   add	hl,de
 209+ A48E 38 02       >				   jr	c,1F
 209+ A490 ED 52       >				   sbc	hl,de
 209+ A492             >1:
 210+ A492                                      BCDIVDE_Iteration
 210+ A492 17          >				   rla
 210+ A493 ED 6A       >				   adc	hl,hl
 210+ A495 19          >				   add	hl,de
 210+ A496 38 02       >				   jr	c,1F
 210+ A498 ED 52       >				   sbc	hl,de
 210+ A49A             >1:
 211+ A49A                                      BCDIVDE_Iteration
 211+ A49A 17          >				   rla
 211+ A49B ED 6A       >				   adc	hl,hl
 211+ A49D 19          >				   add	hl,de
 211+ A49E 38 02       >				   jr	c,1F
 211+ A4A0 ED 52       >				   sbc	hl,de
 211+ A4A2             >1:
 212+ A4A2 17                                   rla
 213+ A4A3 47                                   ld b,a
 214+ A4A4
 215+ A4A4 79                                   ld a,c
 216+ A4A5                                      BCDIVDE_Iteration
 216+ A4A5 17          >				   rla
 216+ A4A6 ED 6A       >				   adc	hl,hl
 216+ A4A8 19          >				   add	hl,de
 216+ A4A9 38 02       >				   jr	c,1F
 216+ A4AB ED 52       >				   sbc	hl,de
 216+ A4AD             >1:
 217+ A4AD                                      BCDIVDE_Iteration
 217+ A4AD 17          >				   rla
 217+ A4AE ED 6A       >				   adc	hl,hl
 217+ A4B0 19          >				   add	hl,de
 217+ A4B1 38 02       >				   jr	c,1F
 217+ A4B3 ED 52       >				   sbc	hl,de
 217+ A4B5             >1:
 218+ A4B5                                      BCDIVDE_Iteration
 218+ A4B5 17          >				   rla
 218+ A4B6 ED 6A       >				   adc	hl,hl
 218+ A4B8 19          >				   add	hl,de
 218+ A4B9 38 02       >				   jr	c,1F
 218+ A4BB ED 52       >				   sbc	hl,de
 218+ A4BD             >1:
 219+ A4BD                                      BCDIVDE_Iteration
 219+ A4BD 17          >				   rla
 219+ A4BE ED 6A       >				   adc	hl,hl
 219+ A4C0 19          >				   add	hl,de
 219+ A4C1 38 02       >				   jr	c,1F
 219+ A4C3 ED 52       >				   sbc	hl,de
 219+ A4C5             >1:
 220+ A4C5                                      BCDIVDE_Iteration
 220+ A4C5 17          >				   rla
 220+ A4C6 ED 6A       >				   adc	hl,hl
 220+ A4C8 19          >				   add	hl,de
 220+ A4C9 38 02       >				   jr	c,1F
 220+ A4CB ED 52       >				   sbc	hl,de
 220+ A4CD             >1:
 221+ A4CD                                      BCDIVDE_Iteration
 221+ A4CD 17          >				   rla
 221+ A4CE ED 6A       >				   adc	hl,hl
 221+ A4D0 19          >				   add	hl,de
 221+ A4D1 38 02       >				   jr	c,1F
 221+ A4D3 ED 52       >				   sbc	hl,de
 221+ A4D5             >1:
 222+ A4D5                                      BCDIVDE_Iteration
 222+ A4D5 17          >				   rla
 222+ A4D6 ED 6A       >				   adc	hl,hl
 222+ A4D8 19          >				   add	hl,de
 222+ A4D9 38 02       >				   jr	c,1F
 222+ A4DB ED 52       >				   sbc	hl,de
 222+ A4DD             >1:
 223+ A4DD                                      BCDIVDE_Iteration
 223+ A4DD 17          >				   rla
 223+ A4DE ED 6A       >				   adc	hl,hl
 223+ A4E0 19          >				   add	hl,de
 223+ A4E1 38 02       >				   jr	c,1F
 223+ A4E3 ED 52       >				   sbc	hl,de
 223+ A4E5             >1:
 224+ A4E5 17                                   rla
 225+ A4E6 4F                                   ld c,a
 226+ A4E7 C9                                   ret
 227+ A4E8
 228+ A4E8              ;Inputs:
 229+ A4E8              ;     DE,BC are 8.8 Fixed Point numbers
 230+ A4E8              ;Outputs:
 231+ A4E8              ;     DE is the 8.8 Fixed Point result (rounded to the least significant bit)
 232+ A4E8              ;if DE is 0 : 122cc or 136cc if BC is negative
 233+ A4E8              ;if |BC|>=128*|DE| : 152cc or 166cc if BC is negative
 234+ A4E8              ;Otherwise:
 235+ A4E8              ;min: 1107cc
 236+ A4E8              ;max: 1319cc
 237+ A4E8              ;avg: 1201cc
 238+ A4E8 78           BC_Div_DE_88:           ld a,b  ; First, find out if the output is positive or negative
 239+ A4E9 AA                                   xor d
 240+ A4EA F5                                   push af   ;sign bit is the result sign bit
 241+ A4EB              ; Now make sure the inputs are positive
 242+ A4EB A8                                   xor b     ;A now has the value of B, since I XORed it with D twice (cancelling)
 243+ A4EC F2 F5 A4                             jp p,BC_Div_DE_88_lbl1   ;if Positive, don't negate
 244+ A4EF AF                                   xor a
 245+ A4F0 91                                   sub c
 246+ A4F1 4F                                   ld c,a
 247+ A4F2 9F                                   sbc a,a
 248+ A4F3 90                                   sub b
 249+ A4F4 47                                   ld b,a
 250+ A4F5 7A           BC_Div_DE_88_lbl1:      ld a,d  ;now make DE negative to optimize the remainder comparison
 251+ A4F6 B2                                   or d
 252+ A4F7 FA 00 A5                             jp m,BC_Div_DE_88_lbl2
 253+ A4FA AF                                   xor a
 254+ A4FB 93                                   sub e
 255+ A4FC 5F                                   ld e,a
 256+ A4FD 9F                                   sbc a,a
 257+ A4FE 92                                   sub d
 258+ A4FF 57                                   ld d,a
 259+ A500 B3           BC_Div_DE_88_lbl2:      or e      ;if DE is 0, we can call it an overflow ;A is the current value of D
 260+ A501 28 1D                                jr z,div_fixed88_overflow
 261+ A503 26 00                                ld h,0          ;The accumulator gets set to B if no overflow.;We can use H=0 to save a few cc in the meantime
 262+ A505 78                                   ld a,b;if B+DE>=0, then we'll have overflow
 263+ A506 83                                   add a,e
 264+ A507 7A                                   ld a,d
 265+ A508 8C                                   adc a,h
 266+ A509 38 15                                jr c,div_fixed88_overflow
 267+ A50B 68                                   ld l,b  ;Now we can load the accumulator/remainder with B;H is already 0
 268+ A50C 79                                   ld a,c
 269+ A50D CD 28 A5                             call div_fixed88_sub
 270+ A510 4F                                   ld c,a
 271+ A511 78                                   ld a,b      ;A is now 0
 272+ A512 CD 28 A5                             call div_fixed88_sub
 273+ A515 51                                   ld d,c
 274+ A516 5F                                   ld e,a
 275+ A517 F1                                   pop af
 276+ A518 F0                                   ret p
 277+ A519 AF                                   xor a
 278+ A51A 93                                   sub e
 279+ A51B 5F                                   ld e,a
 280+ A51C 9F                                   sbc a,a
 281+ A51D 92                                   sub d
 282+ A51E 57                                   ld d,a
 283+ A51F C9                                   ret
 284+ A520
 285+ A520 11 FF 7F     div_fixed88_overflow:   ld de,$7FFF
 286+ A523 F1                                   pop af
 287+ A524 F0                                   ret p
 288+ A525 13                                   inc de
 289+ A526 1C                                   inc e
 290+ A527 C9                                   ret
 291+ A528
 292+ A528              ;min: 456cc
 293+ A528              ;max: 536cc
 294+ A528              ;avg: 496cc
 295+ A528 06 08        div_fixed88_sub:        ld b,8
 296+ A52A 17           BC_Div_DE_88_lbl3:      rla
 297+ A52B ED 6A                                adc hl,hl
 298+ A52D 19                                   add hl,de
 299+ A52E 38 02                                jr c,$+4
 300+ A530 ED 52                                sbc hl,de
 301+ A532 10 F6                                djnz BC_Div_DE_88_lbl3
 302+ A534 8F                                   adc a,a
 303+ A535 C9                                   ret
 304+ A536
# file closed: ./Maths/asm_divide.asm
 976  A536                  INCLUDE "./Maths/asm_unitvector.asm"
# file opened: ./Maths/asm_unitvector.asm
   1+ A536              asm_tis2:
   2+ A536              ; ">TIS2 A = (A / Q * 96) so A = -96 ---- 96  range "
   3+ A536              ; ">DOES NOT DO SIGNED YET"
   4+ A536 F5           	push af
   5+ A537 E6 7F            and SignMask8Bit
   6+ A539 57           	ld d,a				;; d = A
   7+ A53A 3A B4 92     	ld a,(varQ)
   8+ A53D 5F           	ld e,a
   9+ A53E 7A           	ld a,d
  10+ A53F BB           	cp e
  11+ A540 30 11        	jr nc, .tis2_set96	;; jump if a >= Q
  12+ A542 1E 60        	ld e, 96
  13+ A544 ED 30        	mul				; de = d * 96 (also a * 96 )
  14+ A546 EB           	ex de,hl
  15+ A547 3A B4 92     	ld a,(varQ)
  16+ A54A 4F           	ld c,a
  17+ A54B CD 23 A4     	call asm_div16
  18+ A54E F1           	pop af
  19+ A54F E6 80        	and $80
  20+ A551 B5           	or l
  21+ A552 C9           	ret
  22+ A553              .tis2_set96:
  23+ A553 F1           	pop af
  24+ A554 E6 80        	and $80
  25+ A556 F6 96        	or $96
  26+ A558 C9           	ret
  27+ A559
  28+ A559
  29+ A559              asm_unit_vector:
  30+ A559              squareregfx:
  31+ A559 3A 79 C0     	ld a,(UBnkXScaled)
  32+ A55C 57           	ld d,a
  33+ A55D 5F           	ld e,a
  34+ A55E ED 30        	mul
  35+ A560 EB           	ex de,hl
  36+ A561              squareregfy:
  37+ A561 3A 7B C0     	ld a, (UBnkYScaled)
  38+ A564 57           	ld d,a
  39+ A565 5F           	ld e,a
  40+ A566 ED 30        	mul
  41+ A568 19           	add hl,de
  42+ A569              squareregfz:
  43+ A569 3A 7D C0     	ld a, (UBnkZScaled)
  44+ A56C 57           	ld d,a
  45+ A56D 5F           	ld e,a
  46+ A56E ED 30        	mul
  47+ A570 19           	add hl,de
  48+ A571 EB           	ex de,hl			; de de to number to root
  49+ A572              hlequsquareroot:
  50+ A572 CD 26 A3     	call asm_sqrt		; hl = sqrt (fx^2 + fy^2 + fx^2)
  51+ A575 E5           	push hl				; save it for work 3 copies
  52+ A576 E5           	push hl				; save it for work
  53+ A577 E5           	push hl				; save it for work
  54+ A578              normfx:
  55+ A578 3A 79 C0     	ld a,(UBnkXScaled)
  56+ A57B E1           	pop hl				; get copy #1
  57+ A57C 7D           	ld a,l				; we assume only l had worthwhile data but could spill into h
  58+ A57D 4F           	ld c,a
  59+ A57E CD 36 A5     	call asm_tis2
  60+ A581 32 79 C0     	ld (UBnkXScaled),a
  61+ A584              normfy:
  62+ A584 3A 7B C0     	ld a,(UBnkYScaled)
  63+ A587 E1           	pop hl				; get copy #2
  64+ A588 7D           	ld a,l
  65+ A589 4F           	ld c,a
  66+ A58A CD 36 A5     	call asm_tis2
  67+ A58D 32 7B C0     	ld (UBnkYScaled),a
  68+ A590              normfz:
  69+ A590 3A 7D C0     	ld a,(UBnkZScaled)
  70+ A593 E1           	pop hl				; get copy #2
  71+ A594 7D           	ld a,l
  72+ A595 4F           	ld c,a
  73+ A596 CD 36 A5     	call asm_tis2
  74+ A599 32 7D C0     	ld (UBnkZScaled),a
  75+ A59C              asm_unit_vector_end:
  76+ A59C C9           	ret
  77+ A59D
# file closed: ./Maths/asm_unitvector.asm
 977  A59D                  INCLUDE "./Maths/compare16.asm"
# file opened: ./Maths/compare16.asm
   1+ A59D              ; Input:
   2+ A59D              ;       HL = 1st value
   3+ A59D              ;       DE = 2nd value
   4+ A59D              ; Output:
   5+ A59D              ;       CF, ZF = results of comparison:
   6+ A59D              ;
   7+ A59D              ;               CF      ZF      Result
   8+ A59D              ;               -----------------------------------
   9+ A59D              ;               0       0       HL > DE
  10+ A59D              ;               0       1       HL == DE
  11+ A59D              ;               1       0       HL < DE
  12+ A59D              ;               1       1       Impossible
  13+ A59D              ;
  14+ A59D
  15+ A59D E5           compare16HLDE:      push    hl
  16+ A59E A7                               and     a
  17+ A59F ED 52                            sbc     hl,de
  18+ A5A1 E1                               pop     hl
  19+ A5A2 C9                               ret
  20+ A5A3
  21+ A5A3              ; With compare signed we do ABS comparison
  22+ A5A3              ; this is used for view ports as we just want to know if its +/- out side of 90 degrees
  23+ A5A3
  24+ A5A3 E5 D5        compare16HLDEABS:   push    hl,,de
  25+ A5A5 7C                               ld      a,h                                     ; Quick pass see of both the same sign
  26+ A5A6 E6 7F                            and     SignMask8Bit
  27+ A5A8 67                               ld      h,a
  28+ A5A9 7A                               ld      a,d                                     ; Quick pass see of both the same sign
  29+ A5AA E6 7F                            and     SignMask8Bit
  30+ A5AC 57                               ld      d,a
  31+ A5AD A7                               and     a
  32+ A5AE ED 52                            sbc     hl,de
  33+ A5B0 D1 E1                            pop     hl,,de
  34+ A5B2 C9                               ret
  35+ A5B3
  36+ A5B3
# file closed: ./Maths/compare16.asm
 978  A5B3                  INCLUDE "./Maths/negate16.asm"
# file opened: ./Maths/negate16.asm
   1+ A5B3              ;;----------------------------------------------------------------------------------------------------------------------
   2+ A5B3              ;; 16-bit negate
   3+ A5B3              negate16:
   4+ A5B3              negate16hl:
   5+ A5B3                      ; Input:
   6+ A5B3                      ;       HL = value
   7+ A5B3                      ; Output:
   8+ A5B3                      ;       HL = -value
   9+ A5B3                      ; Destroys:
  10+ A5B3                      ;       AF
  11+ A5B3                      ;
  12+ A5B3 AF           	xor 	a
  13+ A5B4 95           	sub 	l
  14+ A5B5 6F           	ld 		l,a
  15+ A5B6 9F           	sbc 	a,a
  16+ A5B7 94           	sub 	h
  17+ A5B8 67           	ld 		h,a
  18+ A5B9 C9           	ret
  19+ A5BA
  20+ A5BA              negate16de:
  21+ A5BA AF           	xor 	a
  22+ A5BB 93           	sub 	e
  23+ A5BC 5F           	ld 		e,a
  24+ A5BD 9F           	sbc 	a,a
  25+ A5BE 92           	sub 	d
  26+ A5BF 57           	ld 		d,a
  27+ A5C0 C9           	ret
  28+ A5C1
  29+ A5C1              negate16bc:
  30+ A5C1 AF           	xor 	a
  31+ A5C2 91           	sub 	c
  32+ A5C3 4F           	ld 		c,a
  33+ A5C4 9F           	sbc 	a,a
  34+ A5C5 90           	sub 	b
  35+ A5C6 47           	ld 		b,a
  36+ A5C7 C9           	ret
  37+ A5C8
  38+ A5C8
  39+ A5C8              macronegate16hl:	MACRO
  40+ A5C8 ~            					xor 	a
  41+ A5C8 ~            					sub 	l
  42+ A5C8 ~            					ld 		l,a
  43+ A5C8 ~            					sbc 	a,a
  44+ A5C8 ~            					sub 	h
  45+ A5C8 ~            					ld 		h,a
  46+ A5C8              					ENDM
  47+ A5C8
  48+ A5C8              macronegate16de:	MACRO
  49+ A5C8 ~            					xor 	a
  50+ A5C8 ~                                sub 	e
  51+ A5C8 ~                                ld 		e,a
  52+ A5C8 ~                                sbc 	a,a
  53+ A5C8 ~                                sub 	d
  54+ A5C8 ~                                ld 		d,a
  55+ A5C8              					ENDM
  56+ A5C8              macronegate16bc:	MACRO
  57+ A5C8 ~            					xor 	a
  58+ A5C8 ~                                sub 	c
  59+ A5C8 ~                                ld 		c,a
  60+ A5C8 ~                                sbc 	a,a
  61+ A5C8 ~                                sub 	b
  62+ A5C8 ~                                ld 		b,a
  63+ A5C8              					ENDM
  64+ A5C8
  65+ A5C8              macronegate16ix:	MACRO
  66+ A5C8 ~            					xor 	a
  67+ A5C8 ~                                sub 	ixl
  68+ A5C8 ~                                ld 		ixl,a
  69+ A5C8 ~                                sbc 	a,a
  70+ A5C8 ~                                sub 	ixh
  71+ A5C8 ~                                ld 		ixh,a
  72+ A5C8              					ENDM
# file closed: ./Maths/negate16.asm
 979  A5C8                  INCLUDE "./Maths/normalise96.asm"
# file opened: ./Maths/normalise96.asm
   1+ A5C8 DD 68        AequAdivDmul96Unsg:     ld			ixl,b						; Get sign bit passed in as bit 7 in b
   2+ A5CA                                      JumpIfAGTENusng d, TISXAccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
   2+ A5CA BA          >                        cp     d
   2+ A5CB D2 E0 A5    >                        jp		nc,TISXAccGTEQ
   3+ A5CE 4F                                   ld			c,a
   4+ A5CF CD 15 A4                             call		asm_div8
   5+ A5D2 79                                   ld			a,c							; a = result
   6+ A5D3 CB 3F                                srl			a							; result / 4
   7+ A5D5 47                                   ld			b,a							; t = t /4
   8+ A5D6 CB 3F                                srl			a							; result / 8
   9+ A5D8 80                                   add			a,b							; result /8 + result /4
  10+ A5D9 47                                   ld			b,a							; b = 3/8*Acc (max = 96)
  11+ A5DA DD 7D                                ld			a,ixl						; copy of Acc to look at sign bit
  12+ A5DC E6 80                                and			$80							; recover sign only
  13+ A5DE B0                                   or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
  14+ A5DF C9                                   ret
  15+ A5E0              TISXAccGTEQ:
  16+ A5E0              ;TI4:										;\ clean to +/- unity
  17+ A5E0 DD 7D                                ld			a,ixl     					; get saved sign from b
  18+ A5E2 E6 80                                and			$80							; copy of Acc
  19+ A5E4 F6 60                                or			$60							; unity
  20+ A5E6 C9                                   ret
  21+ A5E7
  22+ A5E7
  23+ A5E7
  24+ A5E7
  25+ A5E7              normaliseXX1596fast:
  26+ A5E7                  ; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
  27+ A5E7 3A 79 C0     	ld		a,(XX15)		    ; XX15+0
  28+ A5EA DD 67        	ld		ixh,a               ; ixh = signed x component
  29+ A5EC E6 7F        	and		SignMask8Bit                 ; a = unsigned version
  30+ A5EE              N96SQX:
  31+ A5EE              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  31+ A5EE 5F          >			ld	e,a
  31+ A5EF 57          >			ld  d,a
  31+ A5F0 ED 30       >			mul
  32+ A5F2 62           	ld		h,d					; h == varR d = varO e= varA
  33+ A5F3 6B           	ld		l,e					; l == varQ  															:: so HL = XX15[x]^2
  34+ A5F4              N96SQY:
  35+ A5F4 3A 7A C0     	ld		a,(XX15+1)
  36+ A5F7 DD 6F        	ld		ixl,a               ; ixl = signed y componet
  37+ A5F9 E6 7F        	and		SignMask8Bit                 ; = abs
  38+ A5FB              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[y]^2
  38+ A5FB 5F          >			ld	e,a
  38+ A5FC 57          >			ld  d,a
  38+ A5FD ED 30       >			mul
  39+ A5FF 19           	add		hl,de				; hl = XX15[x]^2 + XX15[y]^2
  40+ A600              N96SQZ:
  41+ A600 3A 7B C0     	ld		a,(XX15+2)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
  42+ A603 FD 67        	ld		iyh,a               ; iyh = signed
  43+ A605 E6 7F        	and		SignMask8Bit                 ; unsigned
  44+ A607              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[z]^2
  44+ A607 5F          >			ld	e,a
  44+ A608 57          >			ld  d,a
  44+ A609 ED 30       >			mul
  45+ A60B              N96SQADD:
  46+ A60B 19           	add		hl,de				; hl = XX15[x]^2 + XX15[y]^2 + XX15[z]^2
  47+ A60C EB           	ex		de,hl				; hl => de ready for square root
  48+ A60D              N96SQRT:
  49+ A60D CD 26 A3     	call	asm_sqrt			; hl = sqrt(XX15[x]^2 + XX15[y]^2 + XX15[z]^2), we just are interested in l which is the new Q
  50+ A610              N96NORMX:
  51+ A610 3A 79 C0     	ld		a,(XX15+0)
  52+ A613 E6 7F        	and		SignMask8Bit
  53+ A615 4F           	ld		c,a
  54+ A616 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  55+ A617 CD 17 A8     	call	AequAdivDmul96	; does not use HL so we can retain it
  56+ A61A 47           	ld		b,a				;++SGN
  57+ A61B DD 7C        	ld		a,ixh			;++SGN
  58+ A61D E6 80        	and		$80				;++SGN
  59+ A61F B0           	or		b				;++SGN
  60+ A620 32 79 C0     	ld		(XX15+0),a
  61+ A623              N96NORMY:
  62+ A623 3A 7A C0     	ld		a,(XX15+1)
  63+ A626 E6 7F        	and		SignMask8Bit
  64+ A628 4F           	ld		c,a
  65+ A629 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  66+ A62A CD 17 A8     	call	AequAdivDmul96     	; does not use HL so we can retain it
  67+ A62D 47           	ld		b,a				;++SGN
  68+ A62E DD 7D        	ld		a,ixl			;++SGN
  69+ A630 E6 80        	and		$80				;++SGN
  70+ A632 B0           	or		b				;++SGN
  71+ A633 32 7A C0     	ld		(XX15+1),a
  72+ A636              N96NORMZ:
  73+ A636 3A 7B C0     	ld		a,(XX15+2)
  74+ A639 E6 7F        	and		SignMask8Bit
  75+ A63B 4F           	ld		c,a
  76+ A63C 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  77+ A63D CD 17 A8     	call	AequAdivDmul96	; does not use HL so we can retain it
  78+ A640 47           	ld		b,a				;++SGN
  79+ A641 FD 7C        	ld		a,iyh			;++SGN
  80+ A643 E6 80        	and		$80				;++SGN
  81+ A645 B0           	or		b				;++SGN
  82+ A646 32 7B C0     	ld		(XX15+2),a
  83+ A649 C9           	ret
  84+ A64A
  85+ A64A              ; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
  86+ A64A 3A 79 C0     normaliseXX1596:        ld		a,(XX15)		    ; XX15+0
  87+ A64D                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  87+ A64D 5F          >			ld	e,a
  87+ A64E 57          >			ld  d,a
  87+ A64F ED 30       >			mul
  88+ A651 7A                                   ld		a,d
  89+ A652 32 B5 92                             ld		(varR),a			; R	 \ hi sum later use b
  90+ A655 7B                                   ld		a,e
  91+ A656 32 B4 92                             ld		(varQ),a			; Q	 \ lo sum later use c
  92+ A659 32 54 92                             ld		(varP),a			; P	 \ lo sum later just drop
  93+ A65C 3A 7A C0                             ld		a,(XX15+1)
  94+ A65F                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  94+ A65F 5F          >			ld	e,a
  94+ A660 57          >			ld  d,a
  94+ A661 ED 30       >			mul
  95+ A663 7A                                   ld		a,d
  96+ A664 32 D2 92                             ld		(varT),a			; T	 \ hi sum
  97+ A667 7B                                   ld		a,e
  98+ A668 32 54 92                             ld		(varP),a			; P	 \ lo sum
  99+ A66B 21 B4 92                             ld		hl,varQ
 100+ A66E 8E                                   adc		a,(hl)				; +Q
 101+ A66F 32 B4 92                             ld		(varQ),a			; =>Q
 102+ A672 3A D2 92                             ld		a,(varT)			;
 103+ A675 21 B5 92                             ld		hl,varR
 104+ A678 8E                                   adc		a,(hl)				;  R
 105+ A679 32 B5 92                             ld		(varR),a			; R
 106+ A67C 3A 7B C0                             ld		a,(XX15+2)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
 107+ A67F                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
 107+ A67F 5F          >			ld	e,a
 107+ A680 57          >			ld  d,a
 107+ A681 ED 30       >			mul
 108+ A683 7A                                   ld		a,d
 109+ A684 32 D2 92                             ld		(varT),a			; T	 \ hi sum
 110+ A687 7B                                   ld		a,e
 111+ A688 32 54 92                             ld		(varP),a			; P	 \ lo sum
 112+ A68B 21 B4 92                             ld		hl,varQ
 113+ A68E 8E                                   adc		a,(hl)				; +Q
 114+ A68F 32 B4 92                             ld		(varQ),a			; =>Q  xlo2 + ylo2 + zlo2
 115+ A692 3A D2 92                             ld		a,(varT)			; T temp Hi
 116+ A695 21 B5 92                             ld		hl,varR
 117+ A698 8E                                   adc		a,(hl)				; +R
 118+ A699 32 B5 92                             ld		(varR),a			; R
 119+ A69C CD 49 A3                             call	sqrtQR				; Q = SQR(Qlo.Rhi) Q <~127
 120+ A69F 3A 79 C0                             ld		a,(XX15+0)
 121+ A6A2 CD 11 A8                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 122+ A6A5 32 79 C0                             ld		(XX15+0),a
 123+ A6A8 3A 7A C0                             ld		a,(XX15+1)
 124+ A6AB CD 11 A8                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 125+ A6AE 32 7A C0                             ld		(XX15+1),a
 126+ A6B1 3A 7A C0                             ld		a,(XX15+1)
 127+ A6B4 CD 11 A8                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 128+ A6B7 32 7A C0                             ld		(XX15+1),a
 129+ A6BA C9                                   ret
 130+ A6BB
 131+ A6BB
# file closed: ./Maths/normalise96.asm
 980  A6BB                  INCLUDE "./Maths/binary_to_decimal.asm"
# file opened: ./Maths/binary_to_decimal.asm
   1+ A6BB              ;Number in hl to decimal ASCII
   2+ A6BB              ;Thanks to z80 Bits
   3+ A6BB              ;inputs:	hl = number to ASCII
   4+ A6BB              ;example: hl=300 outputs '00300'
   5+ A6BB              ;destroys: af, bc, hl, de used
   6+ A6BB              DispHLtoDE:
   7+ A6BB              ; "DispHL, writes HL to DE address"
   8+ A6BB 01 F0 D8     	ld	bc,-10000
   9+ A6BE CD D4 A6     	call	Num1
  10+ A6C1 01 18 FC     	ld	bc,-1000
  11+ A6C4 CD D4 A6     	call	Num1
  12+ A6C7 01 9C FF     	ld	bc,-100
  13+ A6CA CD D4 A6     	call	Num1
  14+ A6CD 0E F6        	ld	c,-10
  15+ A6CF CD D4 A6     	call	Num1
  16+ A6D2 0E FF        	ld	c,-1
  17+ A6D4              Num1:
  18+ A6D4 3E 2F        	ld	a,'0'-1
  19+ A6D6              .Num2:
  20+ A6D6 3C           	inc	a
  21+ A6D7 09           	add	hl,bc
  22+ A6D8 38 FC        	jr	c,.Num2
  23+ A6DA ED 42        	sbc	hl,bc
  24+ A6DC 12           	ld	(de),a
  25+ A6DD 13           	inc	de
  26+ A6DE C9           	ret
  27+ A6DF
  28+ A6DF              DispAtoDE:
  29+ A6DF 26 00        	ld h,0
  30+ A6E1 6F           	ld l,a
  31+ A6E2 C3 BB A6     	jp DispHLtoDE
  32+ A6E5
  33+ A6E5              DispPriceAtoDE:
  34+ A6E5 26 00        	ld h,0
  35+ A6E7 6F           	ld l,a
  36+ A6E8 01 9C FF     	ld	bc,-100
  37+ A6EB CD FB A6     	call	.NumLeadBlank1
  38+ A6EE 0E F6        	ld	c,-10
  39+ A6F0 CD D4 A6     	call	Num1
  40+ A6F3 3E 2E        	ld		a,'.'					; we could assume preformat but
  41+ A6F5 12           	ld		(de),a					; we can optimse that later TODO
  42+ A6F6 13           	inc		de						; with just an inc De
  43+ A6F7 0E FF        	ld	c,-1
  44+ A6F9 18 D9        	jr		Num1
  45+ A6FB              .NumLeadBlank1:
  46+ A6FB 3E 2F        	ld	a,'0'-1
  47+ A6FD              .NumLeadBlank2:
  48+ A6FD 3C           	inc	a
  49+ A6FE 09           	add	hl,bc
  50+ A6FF 38 FC        	jr	c,.NumLeadBlank2
  51+ A701 FE 30        	cp	'0'
  52+ A703 20 02        	jr	nz,.DontBlank
  53+ A705              .Blank:
  54+ A705 3E 20        	ld	a,' '
  55+ A707              .DontBlank:
  56+ A707 ED 42        	sbc	hl,bc
  57+ A709 12           	ld	(de),a
  58+ A70A 13           	inc	de
  59+ A70B C9           	ret
  60+ A70C
  61+ A70C              DispQtyAtoDE:
  62+ A70C FE 00        	cp	0
  63+ A70E 28 23        	jr	z,.NoStock
  64+ A710 26 00        	ld h,0
  65+ A712 6F           	ld l,a
  66+ A713 01 9C FF     	ld	bc,-100
  67+ A716 CD 22 A7     	call	.NumLeadBlank1
  68+ A719 0E F6        	ld	c,-10
  69+ A71B CD 22 A7     	call	.NumLeadBlank1
  70+ A71E 0E FF        	ld	c,-1
  71+ A720 18 B2        	jr		Num1
  72+ A722              .NumLeadBlank1:
  73+ A722 3E 2F        	ld	a,'0'-1
  74+ A724              .NumLeadBlank2:
  75+ A724 3C           	inc	a
  76+ A725 09           	add	hl,bc
  77+ A726 38 FC        	jr	c,.NumLeadBlank2
  78+ A728 FE 30        	cp	'0'
  79+ A72A 20 02        	jr	nz,.DontBlank
  80+ A72C              .Blank:
  81+ A72C 3E 20        	ld	a,' '
  82+ A72E              .DontBlank:
  83+ A72E ED 42        	sbc	hl,bc
  84+ A730 12           	ld	(de),a
  85+ A731 13           	inc	de
  86+ A732 C9           	ret
  87+ A733              .NoStock:
  88+ A733 3E 20        	ld	a,' '
  89+ A735 12           	ld	(de),a
  90+ A736 13           	inc	de
  91+ A737 12           	ld	(de),a
  92+ A738 13           	inc	de
  93+ A739 3E 2D        	ld	a,'-'
  94+ A73B 12           	ld	(de),a
  95+ A73C 13           	inc de
  96+ A73D C9           	ret
  97+ A73E
  98+ A73E
  99+ A73E              ;### CLCN32 -> Converts 32Bit-Value in ASCII-String (terminated by 0)
 100+ A73E              ;### Input      DE,IX=32bit value, IY=destination address
 101+ A73E              ;### Output     IY=last char in destination string
 102+ A73E              ;### Destroyed AF,BC,DE,HL,IX
 103+ A73E 01 00 00 00  clcn32t dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 103+ A742 0A 00 00 00
 103+ A746 64 00 00 00
 103+ A74A E8 03 00 00
 103+ A74E 10 27 00 00
 104+ A752 A0 86 01 00          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 104+ A756 40 42 0F 00
 104+ A75A 80 96 98 00
 104+ A75E 00 E1 F5 05
 104+ A762 00 CA 9A 3B
 105+ A766 00 00 00 00  clcn32z ds 4
 106+ A76A
 107+ A76A              ; As per display but shifts final digit by 1 and puts in "." for 1 decimal place
 108+ A76A CD 79 A7     DispDEIXtoIY1DP:        call    DispDEIXtoIY
 109+ A76D FD 7E 00                             ld      a,(IY+0)
 110+ A770 FD 77 01                             ld      (IY+1),a
 111+ A773 3E 2E                                ld      a,"."
 112+ A775 FD 77 00                             ld      (IY+0),a
 113+ A778 C9                                   ret
 114+ A779
 115+ A779 DD 22 66 A7  DispDEIXtoIY:           ld (clcn32z),ix
 116+ A77D ED 53 68 A7                          ld (clcn32z+2),de
 117+ A781 DD 21 62 A7                          ld ix,clcn32t+36
 118+ A785 06 09                                ld b,9
 119+ A787 0E 00                                ld c,0
 120+ A789 3E 30        .clcn321:               ld a,'0'
 121+ A78B B7                                   or a
 122+ A78C DD 5E 00     .clcn322:               ld e,(ix+0)
 123+ A78F DD 56 01                             ld d,(ix+1)
 124+ A792 2A 66 A7                             ld hl,(clcn32z)
 125+ A795 ED 52                                sbc hl,de
 126+ A797 22 66 A7                             ld (clcn32z),hl
 127+ A79A DD 5E 02                             ld e,(ix+2)
 128+ A79D DD 56 03                             ld d,(ix+3)
 129+ A7A0 2A 68 A7                             ld hl,(clcn32z+2)
 130+ A7A3 ED 52                                sbc hl,de
 131+ A7A5 22 68 A7                             ld (clcn32z+2),hl
 132+ A7A8 38 04                                jr c,.clcn325
 133+ A7AA 0C                                   inc c
 134+ A7AB 3C                                   inc a
 135+ A7AC 18 DE                                jr .clcn322
 136+ A7AE DD 5E 00     .clcn325:               ld e,(ix+0)
 137+ A7B1 DD 56 01                             ld d,(ix+1)
 138+ A7B4 2A 66 A7                             ld hl,(clcn32z)
 139+ A7B7 19                                   add hl,de
 140+ A7B8 22 66 A7                             ld (clcn32z),hl
 141+ A7BB DD 5E 02                             ld e,(ix+2)
 142+ A7BE DD 56 03                             ld d,(ix+3)
 143+ A7C1 2A 68 A7                             ld hl,(clcn32z+2)
 144+ A7C4 ED 5A                                adc hl,de
 145+ A7C6 22 68 A7                             ld (clcn32z+2),hl
 146+ A7C9 11 FC FF                             ld de,-4
 147+ A7CC DD 19                                add ix,de
 148+ A7CE 0C                                   inc c
 149+ A7CF 0D                                   dec c
 150+ A7D0 28 05                                jr z,.clcn323
 151+ A7D2 FD 77 00                             ld (iy+0),a
 152+ A7D5 FD 23                                inc iy
 153+ A7D7 10 B0        .clcn323:               djnz .clcn321
 154+ A7D9 3A 66 A7                             ld a,(clcn32z)
 155+ A7DC C6 30                                add A,'0'
 156+ A7DE FD 77 00                             ld (iy+0),a
 157+ A7E1 FD 36 01 00                          ld (iy+1),0
 158+ A7E5 C9                                   ret
 159+ A7E6
# file closed: ./Maths/binary_to_decimal.asm
 981  A7E6                  include "./Maths/ADDHLDESignBC.asm"
# file opened: ./Maths/ADDHLDESignBC.asm
   1+ A7E6              ;; calcs HLB + DEC where B and C are signs
   2+ A7E6              ;; result HL with A as sign
   3+ A7E6              ;; special handling if result is zero forcign sign bit to be zero
   4+ A7E6 78           ADDHLDESignBC:          ld      a,b
   5+ A7E7 E6 80                                and     SignOnly8Bit
   6+ A7E9 A9                                   xor     c                           ;if b sign and c sign were different then bit 7 of a will be 1 which means
   7+ A7EA                                      JumpIfNegative ADDHLDEsBCOppSGN     ;Signs are opposite there fore we can subtract to get difference
   7+ A7EA FA F8 A7    >                        jp		m, ADDHLDEsBCOppSGN
   8+ A7ED 78           ADDHLDEsBCSameSigns:    ld      a,b
   9+ A7EE B1                                   or      c
  10+ A7EF                                      JumpIfNegative ADDHLDEsBCSameNeg        ; optimisation so we can just do simple add if both positive
  10+ A7EF FA F4 A7    >                        jp		m, ADDHLDEsBCSameNeg
  11+ A7F2 19                                   add     hl,de                       ; both positive so a will already be zero
  12+ A7F3 C9                                   ret
  13+ A7F4 19           ADDHLDEsBCSameNeg:      add     hl,de
  14+ A7F5 78                                   ld      a,b
  15+ A7F6 B1                                   or      c                           ; now set bit for negative value, we won't bother with overflow for now TODO
  16+ A7F7 C9                                   ret
  17+ A7F8 B7           ADDHLDEsBCOppSGN:       or      a
  18+ A7F9 ED 52                                sbc     hl,de
  19+ A7FB 38 02                                jr      c,ADDHLDEsBCOppInvert
  20+ A7FD 78           ADDHLDEsBCOppSGNNoCarry: ld      a,b                                               ; we got here so hl > de therefore we can just take hl's previous sign bit
  21+ A7FE C9                                   ret
  22+ A7FF              ADDHLDEsBCOppInvert:    NegHL                         ; if result was zero then set sign to zero (which doing h or l will give us for free)
  22+ A7FF AF          >                    xor a
  22+ A800 95          >                    sub l
  22+ A801 6F          >                    ld l,a
  22+ A802 9F          >                    sbc a,a
  22+ A803 94          >                    sub h
  22+ A804 67          >                    ld h,a
  23+ A805 78                                   ld      a,b
  24+ A806 EE 80                                xor     SignOnly8Bit                ; flip sign bit
  25+ A808 C9                                   ret
  26+ A809
# file closed: ./Maths/ADDHLDESignBC.asm
 982  A809              ;INCLUDE "badd_ll38.asm"
 983  A809              ;;INCLUDE "XX12equXX15byXX16.asm"
 984  A809                  INCLUDE "./Maths/Utilities/AequAdivQmul96-TIS2.asm"
# file opened: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
   1+ A809
   2+ A809              ; USES 			A DE BC
   3+ A809              ; DOES NOT USE 	HL
   4+ A809              TIS2962C:		; two's compliment entry point, exits not 2's compliment
   5+ A809 CB 7F        	bit			7,a
   6+ A80B 28 04        	jr			z,AequAdivQmul96
   7+ A80D ED 44        	neg										; revers 2s'c and just set neg bit
   8+ A80F CB FF        	set			7,a
   9+ A811              ; Note negative numbers are bit 7 set not 2's compliment
  10+ A811              AequAdivQmul96:								; TIS296:			; .tis2 A = A /Q *96 (or A = A * 3/8 * Q) Reduce Acc in NORM routine i.e. *96/Q clamps at +- 96
  11+ A811              TIS2:
  12+ A811 4F           	ld			c,a							; copy of Acc
  13+ A812 3A B4 92     	ld			a,(varQ)
  14+ A815 57           	ld			d,a							; d = varQ
  15+ A816 79           	ld			a,c							; recover a
  16+ A817              AequAdivDmul96:
  17+ A817 4F           	ld			c,a							; copy of Acc as we need the sign, alternate entry point assuming D preloaded, wastes an "ld c,a" but simplifies code
  18+ A818 E6 7F        	and			SignMask8Bit				; ignore sign
  19+ A81A              	JumpIfAGTENusng d, TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
  19+ A81A BA          >                        cp     d
  19+ A81B D2 3B A8    >                        jp		nc,TIS2AccGTEQ
  20+ A81E 06 FE        	ld			b,$FE						; division roll (replaced varT)
  21+ A820              TIS2RollTLoop:									; .TIL2	; roll T
  22+ A820 CB 27        	sla			a
  23+ A822              	JumpIfALTNusng d,TIS2SkipSub            ; a < d so don;t subtract
  23+ A822 BA          >                        cp      d
  23+ A823 DA 41 A8    >                        jp		c, TIS2SkipSub
  24+ A826 9A           	sbc			a,d							; do subtraction with carry
  25+ A827 37           	scf
  26+ A828 CB 10        	rl			b							; T rolled left to push bit out the end
  27+ A82A 38 F4        	jr			c,TIS2RollTLoop				; if we still have not hit the empty marker continue
  28+ A82C              TIS2SKIPCont:
  29+ A82C 78           	ld			a,b							; T
  30+ A82D CB 3F        	srl			a							; result / 2
  31+ A82F CB 3F        	srl			a							; result / 4
  32+ A831 47           	ld			b,a							; t = t /4
  33+ A832 CB 3F        	srl			a							; result / 8
  34+ A834 80           	add			a,b							; result /8 + result /4
  35+ A835 47           	ld			b,a							; b = 3/8*Acc (max = 96)
  36+ A836 79           	ld			a,c							; copy of Acc to look at sign bit
  37+ A837 E6 80        	and			$80							; recover sign only
  38+ A839 B0           	or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
  39+ A83A C9           	ret
  40+ A83B              TIS2AccGTEQ:
  41+ A83B              ;TI4:										;\ clean to +/- unity
  42+ A83B 79           	ld			a,c
  43+ A83C E6 80        	and			$80							; copy of Acc
  44+ A83E F6 60        	or			$60							; unity
  45+ A840 C9           	ret
  46+ A841              TIS2SkipSub:
  47+ A841 B7           	or			a
  48+ A842 CB 10        	rl			b							; T rolled left to push bit out the end
  49+ A844 38 DA        	jr			c,TIS2RollTLoop				; if we still have not hit the empty marker continue
  50+ A846 C3 2C A8     	jp			TIS2SKIPCont
  51+ A849
# file closed: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
 985  A849                  INCLUDE "./Maths/Utilities/AequAmulQdiv256-FMLTU.asm"
# file opened: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
   1+ A849              fmltu:
   2+ A849              AequAmulQdiv256:
   3+ A849              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=A*Q/256unsg  Fast multiply"
   4+ A849 57           	ld	d,a
   5+ A84A 3A B4 92     	ld	a,(varQ)
   6+ A84D 5F           	ld	e,a
   7+ A84E ED 30        	mul
   8+ A850 7A           	ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   9+ A851 C9           	ret
  10+ A852
# file closed: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
 986  A852                  INCLUDE "./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm"
# file opened: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
   1+ A852              ; "DV42,DV42IYH DE = P.R, c = R"
   2+ A852              DV42IYH:									; as per DV42 but using iyl for Y reg
   3+ A852 21 A4 95     		ld		hl,varDustZ
   4+ A855 FD 7D        		ld		a,iyl
   5+ A857 ED 31        		add		hl,a
   6+ A859 7E           		ld		a,(hl)
   7+ A85A C3 66 A8     		jp		DV41
   8+ A85D              DV42:										; travel step of dust particle front/rear
   9+ A85D 21 A4 95     		ld		hl,varDustZ
  10+ A860 3A 42 92     		ld		a,(regY)
  11+ A863 ED 31        		add		hl,a
  12+ A865 7E           		ld		a,(hl)						; a = SZ[y]
  13+ A866              DV41:										; P.R = speed/ (ZZ/8) dust left/right
  14+ A866 5F           		ld		e,a							; using E as Q var replacement
  15+ A867 3A B0 92     		ld		a,(DELTA)					; DELTA \ speed, how far has dust moved based on its z-coord.
  16+ A86A              DVID4:										; P-R=A/Qunsg  \P.R = A/Q unsigned called by Hall
  17+ A86A 06 08        		ld		b,8							; counter
  18+ A86C CB 27        		sla		a							;
  19+ A86E 57           		ld		d,a							; use d for - p = delta * 2
  20+ A86F AF           		xor		a
  21+ A870              DVL4:										; counter x loop (b reg)
  22+ A870 CB 17        		rl		a							; a = a * 2
  23+ A872 38 03        		jr		c,DV8						; jump on carry
  24+ A874 BB           		cp		e							; var Q
  25+ A875 38 02        		jr		c,DV5						; skip subtraction
  26+ A877              DV8:
  27+ A877 9B           		sbc		a,e							; a = a - q (with carry)
  28+ A878 37           		scf									;  carry gets set
  29+ A879              DV5:										; skipped subtraction
  30+ A879 CB 12        		rl		d							; d (P hi)
  31+ A87B 10 F3        		djnz	DVL4						; dec b and loop loop X, hi left in P.
  32+ A87D              .CalcRemainder:								; BFRDIV R=A*256/Q
  33+ A87D              ; Note we are not going to call LL28+4 but inline code here:
  34+ A87D 06 FE        		ld		b,$FE						; remainder R for AofQ *256/Q
  35+ A87F 4F           		ld		c,a							; use c as R var
  36+ A880              .RollRemainder:
  37+ A880 CB 27        		sla		a
  38+ A882 38 11        		jr		c,.Reduce					; if a >> generates carry reduce
  39+ A884 B8           		cp		b							; a < q?
  40+ A885 30 01        		jr		nc,.DontSBC
  41+ A887              .DoSBC:										; a is < q
  42+ A887 98           		sbc		a,b							; 	a -= q
  43+ A888              .DontSBC:
  44+ A888 CB 11        		rl		c							; r << 1
  45+ A88A 38 F4        		jr		c, .RollRemainder			; if rol generated a carry, continue
  46+ A88C 79           		ld		a,c
  47+ A88D 32 B5 92     		ld		(varR),a					; for backwards compat
  48+ A890 7A           		ld		a,d
  49+ A891 32 54 92     		ld		(varP),a
  50+ A894 C9           		ret									; R (c) left with remainder
  51+ A895              .Reduce:									; a geneated a carry
  52+ A895 98           		sbc		a,b							; a = a - (q +1)
  53+ A896 37           		scf									; set carry flag for rl
  54+ A897 CB 11        		rl		c							; r << 1 briging in carry
  55+ A899 38 E5        		jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  56+ A89B 79           		ld		a,c
  57+ A89C 32 B5 92     		ld		(varR),a					; for backwards compat
  58+ A89F 7A           		ld		a,d
  59+ A8A0 32 54 92     		ld		(varP),a
  60+ A8A3 C9           		ret
  61+ A8A4              .AnswerTooBig:
  62+ A8A4 0E FF        		ld		c,$FF						; arse its too big
  63+ A8A6 79           		ld		a,c
  64+ A8A7 32 B5 92     		ld		(varR),a					; for backwards compat
  65+ A8AA 7A           		ld		a,d
  66+ A8AB 32 54 92     		ld		(varP),a
  67+ A8AE C9           		ret
  68+ A8AF
# file closed: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
 987  A8AF                  INCLUDE "./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm"
# file opened: ./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm
   1+ A8AF
   2+ A8AF              asm_defmutl:
   3+ A8AF              AequDmulEdiv256usgn:
   4+ A8AF              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=D*E/256unsg  Fast multiply"
   5+ A8AF ED 30        	mul
   6+ A8B1 7A           	ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   7+ A8B2 C9           	ret
   8+ A8B3
   9+ A8B3
# file closed: ./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm
 988  A8B3              ;INCLUDE "AP2equAPmulQunsgEorP-MLTU2.asm"
 989  A8B3              ;INCLUDE "APequPmulQUnsg-MULTU.asm"
 990  A8B3              ;INCLUDE "APequPmulX-MU11.asm"
 991  A8B3                  INCLUDE "./Maths/Utilities/APequQmulA-MULT1.asm"
# file opened: ./Maths/Utilities/APequQmulA-MULT1.asm
   1+ A8B3              APequQmulA:
   2+ A8B3              asm_mult1:
   3+ A8B3              ; "ASM_MULT1 (DE) A(hi).P(lo) = Q * A first part of MAD, multiply and add. Visited Quite often. A=hi P = lo also returns result in DE"
   4+ A8B3 FE 00        	cp	0
   5+ A8B5 28 1F        	jr	z,.mul0			; quick exit if its Q * 0
   6+ A8B7 5F           	ld	e,a
   7+ A8B8 3A B4 92     	ld	a,(varQ)
   8+ A8BB 57           	ld	d,a
   9+ A8BC FE 00        	cp	0				; compare a
  10+ A8BE 28 16        	jr	z,.mul0			; quick exit if its 0 * a
  11+ A8C0 AB           	xor	e				; -- = + +- = - -+ = - ++ = +
  12+ A8C1 E6 80        	and $80				; get the resultant sign and save into b
  13+ A8C3 47           	ld	b,a
  14+ A8C4 7A           	ld	a,d
  15+ A8C5 E6 7F        	and	SignMask8Bit	; now strip off sign bits
  16+ A8C7 57           	ld	d,a
  17+ A8C8 7B           	ld	a,e
  18+ A8C9 E6 7F        	and SignMask8Bit
  19+ A8CB 5F           	ld	e,a
  20+ A8CC ED 30        	mul					; zxn de = d * e
  21+ A8CE 7B           	ld	a,e
  22+ A8CF 32 54 92     	ld	(varP),a		; p = lo
  23+ A8D2 7A           	ld	a,d				; a = hi
  24+ A8D3 B0           	or	b				; de goes to a and varP also re-do sign bit
  25+ A8D4 57           	ld	d,a				; we will work with de having result as we may bin vars later
  26+ A8D5 C9           	ret
  27+ A8D6              .mul0:
  28+ A8D6 AF           	xor	a
  29+ A8D7 32 54 92     	ld	(varP),a
  30+ A8DA 57           	ld	d,a
  31+ A8DB 5F           	ld  e,a
  32+ A8DC C9           	ret
  33+ A8DD
# file closed: ./Maths/Utilities/APequQmulA-MULT1.asm
 992  A8DD                  INCLUDE "./Maths/Utilities/badd_ll38.asm"
# file opened: ./Maths/Utilities/badd_ll38.asm
   1+ A8DD              baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
   2+ A8DD              SAEquSRPlusAQ:
   3+ A8DD              ; Calculate the following between sign-magnitude numbers:
   4+ A8DD              ;   (S A) = (S R) + (A Q)
   5+ A8DD              ; where the sign bytes only contain the sign bits, not magnitudes.
   6+ A8DD              ; note goes wrong at <-127 >128 so need 16 bit version
   7+ A8DD              ; so need to fix the issue with carry flag not returning a fault correctly
   8+ A8DD              LL38:
   9+ A8DD              ;	ld		d,a
  10+ A8DD              ;	ld		a,(varQ)
  11+ A8DD              ;	ld		e,a
  12+ A8DD              ;	ld		a,(varS)
  13+ A8DD              ;	ld		h,a
  14+ A8DD              ;	ld		a,(varR)
  15+ A8DD              ;	ld		l,a
  16+ A8DD              ;	call	ADDHLDESignedv3
  17+ A8DD              ;	ld		a,h
  18+ A8DD              ;	ld		(varS),a
  19+ A8DD              ;	ld		a,l
  20+ A8DD              ;	ret
  21+ A8DD              ; calculation table
  22+ A8DD              ;   R     Q    Op            Sign calc
  23+ A8DD              ;	10    5    Add           +    sign same add R sign
  24+ A8DD              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  25+ A8DD              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  26+ A8DD              ;	-10  -5    ABS Add       -    sign same add R sign
  27+ A8DD              ;   5    10    Add           +    sign same add R sign
  28+ A8DD              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  29+ A8DD              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  30+ A8DD              ;   -5   -10   ABS  add      -    sign same add R sign
  31+ A8DD
  32+ A8DD              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  33+ A8DD              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  34+ A8DD              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  35+ A8DD              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  36+ A8DD
  37+ A8DD
  38+ A8DD              ; Calculate sign for Q from A and varS
  39+ A8DD 21 B6 92     	ld		hl,varS							;
  40+ A8E0 AE           	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  41+ A8E1 FA EC A8     	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  42+ A8E4 3A B4 92     	ld		a,(varQ)						; Q	\ else addition, S already correct
  43+ A8E7 21 B5 92     	ld		hl,varR
  44+ A8EA 86           	add		a,(hl)							; a = Q + R
  45+ A8EB C9           	ret										; Done carry set if overflow
  46+ A8EC              .LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
  47+ A8EC 3A B5 92     	ld		a,(varR)						; a = R
  48+ A8EF 21 B4 92     	ld		hl,varQ                         ; Q
  49+ A8F2              ;--	JumpIfALTMemHLusng LL39SwapSubtraction	; if a < (hl) then do LL39SwapSubtraction
  50+ A8F2              	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
  50+ A8F2 B7          >                    or a
  51+ A8F3 9E           	sbc		a,(hl)							; A = R - Q which as R >= Q will always be a positive result
  52+ A8F4 38 01            jr      c,.LL39SignCorrection
  53+ A8F6              ;--    jr      a,.LL39ResultZero
  54+ A8F6              ;--   JumpIfNegative LL39SignCorrection		; if there was underflow we have to correct sign
  55+ A8F6              ;--	or		a								; Clear carry flag to say result is correct
  56+ A8F6 C9           	ret
  57+ A8F7              .LL39SignCorrection:
  58+ A8F7 FE 00            cp      0                               ; if its 0 then neg will affect flag so we just zero result to save compute
  59+ A8F9 28 0E            jr      z,.LL39ResultZero
  60+ A8FB ED 44            neg                                     ; flip A 2'c value to positive
  61+ A8FD 08           	ex		af,af'							; save A temporarily
  62+ A8FE 3A B6 92     	ld		a,(varS)						; Flip Sign bit in varS
  63+ A901 EE 80        	xor		$80							    ;
  64+ A903 32 B6 92     	ld		(varS),a                        ; flip sign bit of a
  65+ A906 08           	ex		af,af'                          ; get back a which is the result
  66+ A907                  ClearCarryFlag                          ; clear carry as NEG instrunction sets it for non zero
  66+ A907 B7          >                    or a
  67+ A908 C9           	ret
  68+ A909              .LL39ResultZero:
  69+ A909 32 B6 92         ld      (varS),a                        ; a is zero at this stage so set sign as well
  70+ A90C                  ClearCarryFlag                          ; clear carry
  70+ A90C B7          >                    or a
  71+ A90D C9               ret
  72+ A90E              ;--LL39SwapSubtraction:
  73+ A90E              ;--	push	bc
  74+ A90E              ;--	ld		b,a
  75+ A90E              ;--	ld		a,(hl)
  76+ A90E              ;--	sub		b
  77+ A90E              ;--	pop		bc
  78+ A90E              ;--	ex		af,af'							; do we flip here or negate. i think its flip as its overflowed unsigned
  79+ A90E              ;--	ld		a,(varS)
  80+ A90E              ;--	xor		$80
  81+ A90E              ;--	ld		(varS),a
  82+ A90E              ;--	ex		af,af'
  83+ A90E              ;--	ret
  84+ A90E
  85+ A90E              ;;;;	baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
  86+ A90E              ;;;;; Calculate the following between sign-magnitude numbers:
  87+ A90E              ;;;;;   (S A) = (S R) + (A Q)
  88+ A90E              ;;;;; where the sign bytes only contain the sign bits, not magnitudes.
  89+ A90E              ;;;;; note goes wrong at <-127 >128 so need 16 bit version
  90+ A90E              ;;;;LL38:
  91+ A90E              ;;;;; Calculate sign for Q from A and varS
  92+ A90E              ;;;;	ld		hl,varS							;
  93+ A90E              ;;;;	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  94+ A90E              ;;;;	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  95+ A90E              ;;;;	ld		a,(varQ)						; Q	\ else addition, S already correct
  96+ A90E              ;;;;	ld		hl,varR
  97+ A90E              ;;;;	add		a,(hl)							; a = Q + R
  98+ A90E              ;;;;	ret										; Done
  99+ A90E              ;;;;.LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
 100+ A90E              ;;;;	ld		hl,varQ                         ;
 101+ A90E              ;;;;	ld		a,(hl)
 102+ A90E              ;;;;	JumpIfAGTENusng 128,LL39Sub16bit		; does this need to be 16 bit
 103+ A90E              ;;;;	ld		a,(varR)						;
 104+ A90E              ;;;;	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
 105+ A90E              ;;;;	sbc		a,(hl)							; A = R - Q
 106+ A90E              ;;;;	jr		c,.SignCorrection				; if there was underflow we have to correct sign
 107+ A90E              ;;;;	or		a								; Clear carry flag to say result is correct
 108+ A90E              ;;;;	ret
 109+ A90E              ;;;;.SignCorrection:
 110+ A90E              ;;;;    neg                                     ; flip A 2'c value to positive
 111+ A90E              ;;;;	ex		af,af'							; save A temporarily
 112+ A90E              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 113+ A90E              ;;;;	xor		$80							    ;
 114+ A90E              ;;;;	ld		(varS),a                        ; flip sign bit of a
 115+ A90E              ;;;;	ex		af,af'                          ; get back a which is the result
 116+ A90E              ;;;;	ret
 117+ A90E              ;;;;LL39Sub16Bit:
 118+ A90E              ;;;;	ld		e,a
 119+ A90E              ;;;;	ld		d,0
 120+ A90E              ;;;;	ld		a,(varR)
 121+ A90E              ;;;;	ld		l,a
 122+ A90E              ;;;;	ld		h,0
 123+ A90E              ;;;;	ClearCarryFlag
 124+ A90E              ;;;;	sbc		hl,de
 125+ A90E              ;;;;	jr		c,.SignCorrection16bit
 126+ A90E              ;;;;	bit		7,h
 127+ A90E              ;;;;	jr		z,.GoodToReturn
 128+ A90E              ;;;;.Needtonegate:
 129+ A90E              ;;;;	macronegate16hl
 130+ A90E              ;;;;.GoodToReturn
 131+ A90E              ;;;;	ld		a,l
 132+ A90E              ;;;;	or		a
 133+ A90E              ;;;;	ret
 134+ A90E              ;;;;.SignCorrection16bit:
 135+ A90E              ;;;;	macronegate16hl
 136+ A90E              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 137+ A90E              ;;;;	xor		$80							    ;
 138+ A90E              ;;;;	ld		(varS),a                        ; flip sign bit of a
 139+ A90E              ;;;;	ld		a,l
 140+ A90E              ;;;;	ret
 141+ A90E
 142+ A90E
# file closed: ./Maths/Utilities/badd_ll38.asm
 993  A90E                  INCLUDE "./Maths/Utilities/moveship4-MVS4.asm"
# file opened: ./Maths/Utilities/moveship4-MVS4.asm
   1+ A90E              ; Note comparing hl vs iY, you need at least 3 incs or decs for hl to be slower
   2+ A90E              ; it may be faster though if we can use hl to avoid memory actions if needed
   3+ A90E              ; need to optimise mad as push hl pop hl and use de doesn't really improve speed
   4+ A90E
   5+ A90E
   6+ A90E              moveship4Yreg:
   7+ A90E 3A 42 92     		ld		a,(regY)
   8+ A911 47           		ld		b,a
   9+ A912              moveship4breg:
  10+ A912              		; b = Y index, 9 = nosev, 15 = roofv 21 = sidev
  11+ A912              MVS4PitchAlphaRollBeta:
  12+ A912              MVS4:										;.MVS4	\ -> &52A1 \ Moveship4, Y is matrix row, pitch&roll update to coordinates
  13+ A912 3A 70 92     		ld		a,(ALPHA)					;  ALPHA
  14+ A915 32 B4 92     		ld		(varQ),a					; player ship's roll Q = Alpha
  15+ A918 21 0E C0     		ld		hl,UBnKxsgn
  16+ A91B 78           		ld		a,b							; from
  17+ A91C ED 31        		add		hl,a
  18+ A91E 7E           		ld		a,(hl)						; INWK+2,Y
  19+ A91F 32 B5 92     		ld		(varR),a					; R  \ lo
  20+ A922 23           		inc		hl
  21+ A923 7E           		ld		a,(hl)						; INWK+3,Y
  22+ A924 32 B6 92     		ld		(varS),a					; S  \ hi		SR = nosev_y (or axis y)
  23+ A927 2B           		dec		hl
  24+ A928 2B           		dec		hl
  25+ A929 2B           		dec		hl							;
  26+ A92A 7E           		ld		a,(hl)						; INWK+0,Y
  27+ A92B 32 54 92     		ld		(varP),a					; P  \ over-written	 P = nosevx lo
  28+ A92E 23           		inc		hl
  29+ A92F 7E           		ld		a,(hl)						; INWK+1,Y
  30+ A930 EE 80        		xor		$80							; flip sign  AP = nosevx * - 1
  31+ A932 CD 20 A2     		call	madXAequQmulAaddRS			; MAD	\ DE = X.A = alpha*INWK+1,Y + INWK+2to3,Y
  32+ A935 23                   inc     hl
  33+ A936 23                   inc     hl
  34+ A937 77                   ld      (hl),a                      ; INWK+3,Y \ hi
  35+ A938 2B                   dec     hl
  36+ A939 3A 41 92             ld      a,(regX)
  37+ A93C 77                   ld      (hl),a                      ; INWK+2,Y \ Y=Y-aX   \ their comment
  38+ A93D 32 54 92             ld      (varP),a                    ;  P
  39+ A940 2B                   dec     hl
  40+ A941 2B                   dec     hl
  41+ A942 7E                   ld      a,(hl)                      ; INWK+0,Y
  42+ A943 32 B5 92             ld      (varR),a                    ;  R	\ lo
  43+ A946 23                   inc     hl
  44+ A947 7E                   ld      a,(hl)                      ;  INWK+1,Y
  45+ A948 32 B6 92             ld      (varS),a                    ; S	\ hi
  46+ A94B 23                   inc     hl
  47+ A94C 23                   inc     hl
  48+ A94D 7E                   ld      a,(hl)                      ; INWK+3,Y
  49+ A94E CD 20 A2             call    madXAequQmulAaddRS          ; MAD	\ X.A = alpha*INWK+3,Y + INWK+0to1,Y
  50+ A951 2B                   dec     hl
  51+ A952 2B                   dec     hl
  52+ A953 77                   ld      (hl),a                      ; INWK+1,Y  \ hi
  53+ A954 3A 41 92             ld      a,(regX)
  54+ A957 2B                   dec     hl
  55+ A958 77                   ld      (hl),a                      ; INWK+0,Y  \ X=X+aY   \ their comment
  56+ A959 32 54 92             ld      (varP),a                    ; P
  57+ A95C 3A 5F 92             ld      a,(BETA)                    ; BETA
  58+ A95F 32 B4 92             ld      (varQ),a                    ; Q	\ player ship's pitch
  59+ A962 23                   inc     hl
  60+ A963 23                   inc     hl
  61+ A964 7E                   ld      a,(hl)                      ; INWK+2,Y
  62+ A965 32 B5 92             ld      (varR),a                    ; R	\ lo
  63+ A968 23                   inc     hl
  64+ A969 7E                   ld      a,(hl)                      ; INWK+3,Y
  65+ A96A 32 B6 92             ld      (varS),a                    ; S	\ hi
  66+ A96D 23                   inc     hl
  67+ A96E 7E                   ld      a,(hl)                      ; INWK+4,Y
  68+ A96F 32 54 92             ld      (varP),a                    ; P	\ lo
  69+ A972 23                   inc     hl
  70+ A973 7E                   ld      a,(hl)                      ; INWK+5,Y
  71+ A974 EE 80                xor     $80                         ; flip sign hi
  72+ A976 CD 20 A2             call    madXAequQmulAaddRS          ; MAD	\ X.A =-beta*INWK+5,Y + INWK+2to3,Y
  73+ A979 2B                   dec     hl
  74+ A97A 2B                   dec     hl
  75+ A97B 77                   ld      (hl),a                      ; INWK+3,Y \ hi
  76+ A97C 3A 41 92             ld      a,(regX)
  77+ A97F 2B                   dec     hl
  78+ A980 77                   ld      (hl),a                      ; INWK+2,Y \ Y=Y-bZ  \ their comment
  79+ A981 32 54 92             ld      (varP),a                    ; P
  80+ A984 23                   inc     hl
  81+ A985 23                   inc     hl
  82+ A986 7E                   ld      a,(hl)                      ; INWK+4,Y
  83+ A987 32 B5 92             ld      (varR),a                    ; R	\ lo
  84+ A98A 23                   inc     hl
  85+ A98B 7E                   ld      a,(hl)                      ; INWK+5,Y
  86+ A98C 32 B6 92             ld      (varS),a                    ; S	\ hi
  87+ A98F 2B                   dec     hl
  88+ A990 2B                   dec     hl
  89+ A991 7E                   ld      a,(hl)                      ; INWK+3,Y
  90+ A992 CD 20 A2             call    madXAequQmulAaddRS          ; MAD	\ X.A = beta*INWK+3,Y + INWK+4,5,Y
  91+ A995 23                   inc     hl
  92+ A996 23                   inc     hl
  93+ A997 77                   ld      (hl),a                      ; INWK+5,Y \ hi
  94+ A998 3A 41 92             ld      a,(regX)
  95+ A99B 2B                   dec     hl
  96+ A99C 77                   ld      (hl),a                      ; INWK+4,Y \ Z=Z+bY   \ their comment
  97+ A99D C9                   ret
  98+ A99E
  99+ A99E
# file closed: ./Maths/Utilities/moveship4-MVS4.asm
 994  A99E              ;INCLUDE "MoveShip5-MVS5.asm"
 995  A99E              ;INCLUDE "PAequAmulQusgn-MLU2.asm"
 996  A99E              ;INCLUDE "PAequDustYIdxYmulQ-MLU1.asm"
 997  A99E              ;INCLUDE "PlanetP12addInwkX-MVT6.asm"
 998  A99E                  INCLUDE "./Maths/Utilities/RequAmul256divQ-BFRDIV.asm"
# file opened: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
   1+ A99E              ;;;LL28:
   2+ A99E              ;;;    ld      c,a                         ;
   3+ A99E              ;;;    ld      a,(varQ)                    ;
   4+ A99E              ;;;    ld      b,a                         ;
   5+ A99E              ;;;    ld      a,c                         ; Get varQ into b and retain c
   6+ A99E              ;;;RequAmul256divB:                        ;
   7+ A99E              ;;;LL28Breg:
   8+ A99E              ;;;; "BFRDIV R = (A * 256 / Q)  byte from remainder of division, not signed a = a, b = q, c = r"
   9+ A99E              ;;;	cp		b							; Check A >= Q
  10+ A99E              ;;;	jr		nc, .AnswerTooBig			; A >= Q? yes too big
  11+ A99E              ;;;.CalcRemainder:
  12+ A99E              ;;;	ld		c, 	$FE						; set R to $FE
  13+ A99E              ;;;.RollRemainder:
  14+ A99E              ;;;	sla		a
  15+ A99E              ;;;	jr		c,.Reduce					; if a >> generates carry reduce
  16+ A99E              ;;;	cp		b							; a < q?
  17+ A99E              ;;;	jr		nc,.DontSBC
  18+ A99E              ;;;.DoSBC:									; a is < q
  19+ A99E              ;;;	sbc		a,b							; 	a -= q
  20+ A99E              ;;;.DontSBC:
  21+ A99E              ;;;	rl		c							; r << 1
  22+ A99E              ;;;	jr		c, .RollRemainder			; if rol generated a carry, continue
  23+ A99E              ;;;    ld      a,c
  24+ A99E              ;;;    ld      (varR),a
  25+ A99E              ;;;	ret									; R (c) left with remainder
  26+ A99E              ;;;.Reduce:								; a geneated a carry
  27+ A99E              ;;;	sbc		a,b							; a = a - (q +1)
  28+ A99E              ;;;	scf									; set carry flag for rl
  29+ A99E              ;;;	rl		c							; r << 1 briging in carry
  30+ A99E              ;;;	jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  31+ A99E              ;;;    ld      a,c
  32+ A99E              ;;;    ld      (varR),a
  33+ A99E              ;;;	ret
  34+ A99E              ;;;.AnswerTooBig:
  35+ A99E              ;;;	ld	    c,$FF							; arse its too big
  36+ A99E              ;;;    ld      a,c
  37+ A99E              ;;;    ld      (varR),a
  38+ A99E              ;;;	ret
  39+ A99E
  40+ A99E              BCequAmul256DivC:
  41+ A99E 59             ld    e,c
  42+ A99F 67             ld    h,a
  43+ A9A0 2E 00          ld    l,0
  44+ A9A2              AdivEDivide:                             ; this routine performs the operation BC=HL/E
  45+ A9A2 7B             ld a,e                                 ; checking the divisor; returning if it is zero
  46+ A9A3 B7             or a                                   ; from this time on the carry is cleared
  47+ A9A4 C8             ret z
  48+ A9A5 01 FF FF       ld bc,-1                               ; BC is used to accumulate the result
  49+ A9A8 16 00          ld d,0                                 ; clearing D, so DE holds the divisor
  50+ A9AA              AdivEDivLoop:                            ; subtracting DE from HL until the first overflow
  51+ A9AA ED 52          sbc hl,de                              ; since the carry is zero, SBC works as if it was a SUB
  52+ A9AC 03             inc bc                                 ;  note that this instruction does not alter the flags
  53+ A9AD 30 FB          jr nc,AdivEDivLoop                     ; no carry means that there was no overflow
  54+ A9AF C9             ret
  55+ A9B0
  56+ A9B0              HL_Div_C:
  57+ A9B0              ; Integer divides HL by C
  58+ A9B0              ; Result in HL, remainder in A
  59+ A9B0              ; Clobbers F, B
  60+ A9B0 06 10                ld b,16
  61+ A9B2 AF                   xor a
  62+ A9B3              HL_Div_C_Loop:
  63+ A9B3 29                   add hl,hl
  64+ A9B4 17                   rla
  65+ A9B5 B9                   cp c
  66+ A9B6 38 02                jr c,HL_DivC_Skip
  67+ A9B8 91                   sub c
  68+ A9B9 2C                   inc l
  69+ A9BA              HL_DivC_Skip:
  70+ A9BA 10 F7                djnz HL_Div_C_Loop
  71+ A9BC 7D                   ld   a,l
  72+ A9BD 32 B5 92             ld  (varR),a
  73+ A9C0 C9                   ret
  74+ A9C1
  75+ A9C1
  76+ A9C1
  77+ A9C1              ; Entry point if varQ is populated with demoninator
  78+ A9C1              RequAmul256divQ:
  79+ A9C1              BFRDIV:
  80+ A9C1 F5           		push	af
  81+ A9C2 3A B4 92     		ld		a,(varQ)
  82+ A9C5 4F           		ld		c,a
  83+ A9C6 F1           		pop		af
  84+ A9C7 FE 00        		cp		0
  85+ A9C9 CA E0 A9     		jp		z, HLDIVC_0_BY	; fast exit if numerator is 0
  86+ A9CC              RequAmul256divC:
  87+ A9CC 2E 00        		ld		l,0
  88+ A9CE 67           		ld		h,a
  89+ A9CF              HL_Div_Cold:						; fast entry point if C and HL are already set
  90+ A9CF 06 10        		ld b,16
  91+ A9D1 AF           		xor a
  92+ A9D2              LOOPPOINT:
  93+ A9D2 29           		add hl,hl
  94+ A9D3 17           		rla
  95+ A9D4 B9           		cp c
  96+ A9D5 38 02        		jr c,SKIPINCSUB
  97+ A9D7 2C           		inc l
  98+ A9D8 91           		sub c
  99+ A9D9              SKIPINCSUB:
 100+ A9D9 10 F7        		djnz LOOPPOINT
 101+ A9DB 7D           		ld		a,l
 102+ A9DC 32 B5 92     		ld 		(varR),a
 103+ A9DF C9           		ret
 104+ A9E0              HLDIVC_0_BY:
 105+ A9E0 32 B5 92     		ld		(varR),a
 106+ A9E3 C9           		ret
 107+ A9E4              ;	push	af
 108+ A9E4              ;	ld		a,b
 109+ A9E4              ;	ld		(varQ),a
 110+ A9E4              ;	pop		af
 111+ A9E4              ;RequAmul256divQ:
 112+ A9E4              ;BFRDIV:									;BFRDIV R=A*256/Q   byte from remainder of division
 113+ A9E4              ;	ld		hl,varQ
 114+ A9E4              ;	JumpIfAGTENusng	(hl),LL2			;  is A >=  Q ?, if yes, answer too big for 1 byte, R=#&FF
 115+ A9E4              ;	ld		b,$FE						; b = X
 116+ A9E4              ;	ld		c,a							; c = R	div roll counter
 117+ A9E4              ;LL31:									; roll R
 118+ A9E4              ;	sla		a
 119+ A9E4              ;	jr		c,LL29						; hop to Reduce
 120+ A9E4              ;	JumpIfALTNusng (hl)					; Q skip sbc if a < Q
 121+ A9E4              ;	sbc		a,(hl)						; a = a - Q
 122+ A9E4              ;	rl		c							; rotate R left
 123+ A9E4              ;	jr		c,LL31						; loop if R poped out a carry bit
 124+ A9E4              ;	jr		LL2Good
 125+ A9E4              ;LL29:									; Reduce
 126+ A9E4              ;	sbc		a,(hl)
 127+ A9E4              ;	scf
 128+ A9E4              ;	rl		c							; roll a carry flag into R
 129+ A9E4              ;	jr		c,LL31						;  loop R
 130+ A9E4              ;	jr		LL2Good
 131+ A9E4              ;LL2:
 132+ A9E4              ;	ld		c,$FF
 133+ A9E4              ;LL2Good:
 134+ A9E4              ;	ld		a,c
 135+ A9E4              ;	ld		(varR),a
 136+ A9E4              ;	ret
 137+ A9E4
# file closed: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
 999  A9E4                  INCLUDE "./Maths/Utilities/RequAdivQ-LL61.asm"
# file opened: ./Maths/Utilities/RequAdivQ-LL61.asm
   1+ A9E4              RequAdivQ:
   2+ A9E4              	; R = A/Q, U = remainder, code looked a little odd as if R is reminader and U = result
   3+ A9E4              LL61:										; Handling division R=A/Q for case further down
   4+ A9E4 4F           	ld		c,a								; c = A
   5+ A9E5 3A B4 92     	ld		a,(varQ)						; test for divide by 0
   6+ A9E8 FE 00        	cp		0
   7+ A9EA 28 16        	jr		z,LL84							; divide by zero error
   8+ A9EC 57           	ld		d,a								; now we can do C/D
   9+ A9ED 06 08            ld b,8
  10+ A9EF AF               xor a
  11+ A9F0              LL63:										; roll divide loop
  12+ A9F0 CB 21            sla c
  13+ A9F2 17               rla
  14+ A9F3 BA               cp d
  15+ A9F4 38 02            jr c,LL64
  16+ A9F6 0C               inc c
  17+ A9F7 92               sub d
  18+ A9F8              LL64:
  19+ A9F8 10 F6            djnz LL63
  20+ A9FA 32 B3 92     	ld	(varU),a							; store remainder in U
  21+ A9FD 79           	ld	a,c
  22+ A9FE 32 B5 92     	ld	(varR),a							; store remainder in R
  23+ AA01 C9               ret
  24+ AA02              LL84:										; div error  R=U=#5
  25+ AA02 3E 32        	ld		a,50
  26+ AA04 32 B5 92     	ld		(varR),a
  27+ AA07 32 B3 92     	ld		(varU),a
  28+ AA0A C9           	ret
  29+ AA0B
# file closed: ./Maths/Utilities/RequAdivQ-LL61.asm
1000  AA0B              ;    INCLUDE "./Maths/Utilities/RSequABSrs-LL129.asm"
1001  AA0B                  INCLUDE "./Maths/Utilities/RSequQmulA-MULT12.asm"
# file opened: ./Maths/Utilities/RSequQmulA-MULT12.asm
   1+ AA0B              asm_mult12:
   2+ AA0B              RSequQmulA:
   3+ AA0B              ; "asm_ult12  R.S = Q * A \ visited quite often S = hi, R = lo, odd that its opposite to mult1"
   4+ AA0B CD B3 A8     	call APequQmulA
   5+ AA0E 08           	ex 	af,af'
   6+ AA0F 7A           	ld	a,d
   7+ AA10 32 B6 92     	ld	(varS),a
   8+ AA13 7B           	ld	a,e
   9+ AA14 32 B5 92     	ld	(varR),a
  10+ AA17 08           	ex 	af,af'
  11+ AA18 C9           	ret
  12+ AA19
# file closed: ./Maths/Utilities/RSequQmulA-MULT12.asm
1002  AA19              ;INCLUDE "SwapRotmapXY-PUS1.asm"
1003  AA19                  INCLUDE "./Maths/Utilities/tidy.asm"
# file opened: ./Maths/Utilities/tidy.asm
   1+ AA19              ;rotmap0xLo: DB	0				; INWK +9
   2+ AA19              ;rotmap0xHi: DB	0				; INWK +10
   3+ AA19              ;rotmat0yLo: DB	0				; INWK +11
   4+ AA19              ;rotmat0yHi: DB	0				; INWK +12
   5+ AA19              ;rotmat0zLo:	DB 	0				; INWK +13
   6+ AA19              ;rotmat0zHi:	DB 	0				; INWK +14
   7+ AA19              ;rotmap1xLo: DB	0				; INWK +15
   8+ AA19              ;rotmap1xHi:	DB	0				; INWK +16
   9+ AA19              ;rotmat1yLo:	DB	0				; INWK +17
  10+ AA19              ;rotmat1yHi:	DB	0				; INWK +18
  11+ AA19              ;rotmat1zLo:	DB	0				; INWK +19
  12+ AA19              ;rotmat1zHi:	DB	0				; INWK +20
  13+ AA19              ;rotmat2xLo: DB	0				; INWK +21
  14+ AA19              ;rotmat2xHi:	DB	0				; INWK +22
  15+ AA19              ;rotmat2yLo:	DB	0				; INWK +23
  16+ AA19              ;rotmat2yHi:	DB	0				; INWK +24
  17+ AA19              ;rotmat2zLo:	DB	0				; INWK +25
  18+ AA19              ;rotmat2zHi:	DB	0				; INWK +26
  19+ AA19              ;
  20+ AA19              ;rotmatFx	equ	rotmat0xHi
  21+ AA19              ;rotmatFy	equ	rotmat0yHi
  22+ AA19              ;rotmatFz	equ	rotmat0zHi
  23+ AA19              ;rotmatUx	equ	rotmat1xHi
  24+ AA19              ;rotmatUy	equ	rotmat1yHi
  25+ AA19              ;rotmatUz	equ	rotmat1zHi
  26+ AA19              ;
  27+ AA19              ;inwkarray			equ		INWK+10
  28+ AA19
  29+ AA19                  include "./Variables/CopyRotMattoXX15.asm"
# file opened: ././Variables/CopyRotMattoXX15.asm
   1++AA19              CopyRotMatNoseVtoXX15:
   2++AA19                      ldCopyByte  UBnkrotmatNosevX+1 ,XX15VecX
   2++AA19 3A 22 C0    >               ld       a,(UBnkrotmatNosevX+1)
   2++AA1C 32 79 C0    >               ld       (XX15VecX),a
   3++AA1F                      ldCopyByte  UBnkrotmatNosevY+1, XX15VecY
   3++AA1F 3A 24 C0    >               ld       a,(UBnkrotmatNosevY+1)
   3++AA22 32 7A C0    >               ld       (XX15VecY),a
   4++AA25                      ldCopyByte  UBnkrotmatNosevZ+1 ,XX15VecZ
   4++AA25 3A 26 C0    >               ld       a,(UBnkrotmatNosevZ+1)
   4++AA28 32 7B C0    >               ld       (XX15VecZ),a
   5++AA2B C9                   ret
   6++AA2C
   7++AA2C              CopyRotMatRoofVtoXX15:
   8++AA2C                      ldCopyByte  UBnkrotmatRoofvX+1 ,XX15VecX
   8++AA2C 3A 1C C0    >               ld       a,(UBnkrotmatRoofvX+1)
   8++AA2F 32 79 C0    >               ld       (XX15VecX),a
   9++AA32                      ldCopyByte  UBnkrotmatRoofvY+1, XX15VecY
   9++AA32 3A 1E C0    >               ld       a,(UBnkrotmatRoofvY+1)
   9++AA35 32 7A C0    >               ld       (XX15VecY),a
  10++AA38                      ldCopyByte  UBnkrotmatRoofvZ+1 ,XX15VecZ
  10++AA38 3A 20 C0    >               ld       a,(UBnkrotmatRoofvZ+1)
  10++AA3B 32 7B C0    >               ld       (XX15VecZ),a
  11++AA3E C9                   ret
  12++AA3F
  13++AA3F              CopyRotMatSideVtoXX15:
  14++AA3F                      ldCopyByte  UBnkrotmatSidevX+1 ,XX15VecX
  14++AA3F 3A 16 C0    >               ld       a,(UBnkrotmatSidevX+1)
  14++AA42 32 79 C0    >               ld       (XX15VecX),a
  15++AA45                      ldCopyByte  UBnkrotmatSidevY+1, XX15VecY
  15++AA45 3A 18 C0    >               ld       a,(UBnkrotmatSidevY+1)
  15++AA48 32 7A C0    >               ld       (XX15VecY),a
  16++AA4B                      ldCopyByte  UBnkrotmatSidevZ+1 ,XX15VecZ
  16++AA4B 3A 1A C0    >               ld       a,(UBnkrotmatSidevZ+1)
  16++AA4E 32 7B C0    >               ld       (XX15VecZ),a
  17++AA51 C9                   ret
  18++AA52
# file closed: ././Variables/CopyRotMattoXX15.asm
  30+ AA52
  31+ AA52                  include "./Variables/CopyXX15toRotMat.asm"
# file opened: ././Variables/CopyXX15toRotMat.asm
   1++AA52              CopyXX15toRotMatNoseV:
   2++AA52                      ldCopyByte  XX15VecX, UBnkrotmatNosevX+1
   2++AA52 3A 79 C0    >               ld       a,(XX15VecX)
   2++AA55 32 22 C0    >               ld       (UBnkrotmatNosevX+1),a
   3++AA58                      ldCopyByte  XX15VecY, UBnkrotmatNosevY+1
   3++AA58 3A 7A C0    >               ld       a,(XX15VecY)
   3++AA5B 32 24 C0    >               ld       (UBnkrotmatNosevY+1),a
   4++AA5E                      ldCopyByte  XX15VecZ, UBnkrotmatNosevZ+1
   4++AA5E 3A 7B C0    >               ld       a,(XX15VecZ)
   4++AA61 32 26 C0    >               ld       (UBnkrotmatNosevZ+1),a
   5++AA64 C9                   ret
   6++AA65
   7++AA65              CopyXX15toRotMatRoofV:
   8++AA65                      ldCopyByte  XX15VecX, UBnkrotmatRoofvX+1
   8++AA65 3A 79 C0    >               ld       a,(XX15VecX)
   8++AA68 32 1C C0    >               ld       (UBnkrotmatRoofvX+1),a
   9++AA6B                      ldCopyByte  XX15VecY, UBnkrotmatRoofvY+1
   9++AA6B 3A 7A C0    >               ld       a,(XX15VecY)
   9++AA6E 32 1E C0    >               ld       (UBnkrotmatRoofvY+1),a
  10++AA71                      ldCopyByte  XX15VecZ, UBnkrotmatRoofvZ+1
  10++AA71 3A 7B C0    >               ld       a,(XX15VecZ)
  10++AA74 32 20 C0    >               ld       (UBnkrotmatRoofvZ+1),a
  11++AA77 C9                   ret
  12++AA78
  13++AA78              CopyXX15toRotMatSideV:
  14++AA78                      ldCopyByte  XX15VecX, UBnkrotmatSidevX+1
  14++AA78 3A 79 C0    >               ld       a,(XX15VecX)
  14++AA7B 32 16 C0    >               ld       (UBnkrotmatSidevX+1),a
  15++AA7E                      ldCopyByte  XX15VecY, UBnkrotmatSidevY+1
  15++AA7E 3A 7A C0    >               ld       a,(XX15VecY)
  15++AA81 32 18 C0    >               ld       (UBnkrotmatSidevY+1),a
  16++AA84                      ldCopyByte  XX15VecZ, UBnkrotmatSidevZ+1
  16++AA84 3A 7B C0    >               ld       a,(XX15VecZ)
  16++AA87 32 1A C0    >               ld       (UBnkrotmatSidevZ+1),a
  17++AA8A C9                   ret
  18++AA8B
# file closed: ././Variables/CopyXX15toRotMat.asm
  32+ AA8B
  33+ AA8B              TidySub1:									;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
  34+ AA8B              		; b = regX on entry
  35+ AA8B              TIS1Prep:									;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
  36+ AA8B 08           		ex		af,af'
  37+ AA8C 78           		ld		a,b
  38+ AA8D 32 B4 92     		ld		(varQ),a
  39+ AA90 08           		ex		af,af'
  40+ AA91 EE 80        		xor		$80							;	 flip sign of Acc
  41+ AA93 CD 20 A2     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
  42+ AA96              ; USES 				A BC E
  43+ AA96              ; DOES NOT USE		D HL
  44+ AA96              Tis1Div96:							   		; .DVID96	\ Their comment A=A/96: answer is A*255/96
  45+ AA96 4F           		ld		c,a							; Store sign bit in  ct (we use e reg for that)
  46+ AA97 E6 80        		and		SignOnly8Bit						; ..
  47+ AA99 5F           		ld		e,a							; ..
  48+ AA9A 79           		ld		a,c							; a = high byte again with sign bit cleared
  49+ AA9B E6 7F        		and		SignMask8Bit							; ..
  50+ AA9D 06 FE        		ld		b,$FE						; slide counter T1
  51+ AA9F              TIS1RollTLoop								; roll T1  clamp Acc to #96 for rotation matrix unity
  52+ AA9F CB 27        		sla		a
  53+ AAA1              		JumpIfALTNusng $60, TIS1SkipSub
  53+ AAA1 FE 60       >                        cp      $60
  53+ AAA3 DA B0 AA    >                        jp		c, TIS1SkipSub
  54+ AAA6 DE 60        		sbc		a,$60							; subtract 96
  55+ AAA8 37           		scf
  56+ AAA9 CB 10        		rl		b							;  T1
  57+ AAAB 38 F2        		jr		c,TIS1RollTLoop
  58+ AAAD              TIS1KIPCont:
  59+ AAAD 78           		ld		a,b							;   T1
  60+ AAAE B3           		or		e							;   restore T sign
  61+ AAAF C9           		ret
  62+ AAB0              TIS1SkipSub:
  63+ AAB0 B7           	or			a
  64+ AAB1 CB 10        	rl			b							; T rolled left to push bit out the end
  65+ AAB3 38 EA        	jr			c,TIS1RollTLoop				; if we still have not hit the empty marker continue
  66+ AAB5 C3 AD AA     	jp			TIS1KIPCont
  67+ AAB8
  68+ AAB8              ;.TIDY	\ -> &4679 \ Orthogonalize rotation matrix that uses 0x60 as unity returns INWK(16,18,20) = INWK(12*18+14*20, 10*16+14*20, 10*16+12*18) / INWK(10,12,14)
  69+ AAB8              ; Ux,Uy,Uz = -(FyUy+FzUz, FxUx+FzUz, FxUx+FyUy)/ Fx,Fy,Fz
  70+ AAB8
  71+ AAB8
  72+ AAB8
  73+ AAB8
  74+ AAB8              TidyRotYSmall:
  75+ AAB8 CD E3 AB     		call	CalcRoofvZ
  76+ AABB 32 20 C0     		ld		(UBnkrotmatRoofvZ+1),a			; set roofvy hi?? Says roofz TODO
  77+ AABE C3 F4 AA     		jp		NormaliseRoofV
  78+ AAC1
  79+ AAC1              TidyRotXSmall:
  80+ AAC1 AF           		xor		a
  81+ AAC2 47           		ld		b,a
  82+ AAC3 3A 24 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev_y
  83+ AAC6 E6 60        		and		%01100000
  84+ AAC8 CA B8 AA     		jp		z,TidyRotYSmall
  85+ AACB 3A 26 C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
  86+ AACE 47           		ld		b,a							; b = regX for now
  87+ AACF 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
  88+ AAD2 CD A9 AB     		call	CalcRoofvY					; Set (roofvy= (nosev_x * roofv_x + nosev_z * roofv_z) / nosev_y, Q -= nosev_z
  89+ AAD5 32 1E C0     		ld		(UBnkrotmatRoofvY+1),a			; set roofvy hi
  90+ AAD8 C3 F4 AA     		jp		NormaliseRoofV
  91+ AADB              ; TIDY is broken
  92+ AADB              TIDY:
  93+ AADB DD 01                break
  94+ AADD              ORTHOGALISE:
  95+ AADD              ;-- NormaliseNosev
  96+ AADD CD 19 AA     		call	CopyRotMatNoseVtoXX15
  97+ AAE0 CD E7 A5     		call	normaliseXX1596fast			; normalise z hi, its really TIS3
  98+ AAE3 CD 52 AA     		call	CopyXX15toRotMatNoseV
  99+ AAE6              .CheckNXSmall:
 100+ AAE6 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)
 101+ AAE9 E6 60        		and		%01100000					; check top two magnitude bits
 102+ AAEB CA C1 AA     		jp		z,TidyRotXSmall
 103+ AAEE              .RotXIsBig:
 104+ AAEE CD 6F AB             call	CalcRoofvX
 105+ AAF1 32 1C C0     		ld		(UBnkrotmatRoofvX+1),a    	; set roofvx hi
 106+ AAF4              NormaliseRoofV:
 107+ AAF4 CD 2C AA     		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 108+ AAF7 CD E7 A5     		call	normaliseXX1596fast			; normalise roof
 109+ AAFA              ;calc sidev x
 110+ AAFA CD 65 AA     		call	CopyXX15toRotMatRoofV		; get back normalised version
 111+ AAFD 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)
 112+ AB00 32 B4 92     		ld		(varQ),a					; q = nosev_y
 113+ AB03 3A 20 C0     		ld		a,(UBnkrotmatRoofvZ+1)	     ;roov z
 114+ AB06 CD 0B AA     		call	RSequQmulA
 115+ AB09 3A 26 C0     		ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 116+ AB0C 47           		ld		b,a							; b = regX for now
 117+ AB0D 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)	    ; roofv y
 118+ AB10 CD 8B AA     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 119+ AB13                      IfAIsZeroGoto NormSideXNoNeg
 119+ AB13 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 119+ AB14 CA 19 AB    >				jp	z, NormSideXNoNeg
 120+ AB17 EE 80        		xor		$80							; flip a to get -sidev_x
 121+ AB19              NormSideXNoNeg:
 122+ AB19 32 16 C0     		ld		(UBnkrotmatSidevX+1),a
 123+ AB1C              ;calc sidev y
 124+ AB1C 3A 26 C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
 125+ AB1F 32 B4 92     		ld		(varQ),a
 126+ AB22 3A 1C C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 127+ AB25 CD 0B AA     		call	RSequQmulA
 128+ AB28 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)			        ; nosev x
 129+ AB2B 47           		ld		b,a							; b = regX for now
 130+ AB2C 3A 20 C0     		ld		a,(UBnkrotmatRoofvZ+1)			; roofv z
 131+ AB2F CD 8B AA     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 132+ AB32                      IfAIsZeroGoto NormSideYNoNeg
 132+ AB32 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 132+ AB33 CA 38 AB    >				jp	z, NormSideYNoNeg
 133+ AB36 EE 80        		xor		$80							; flip a to get -sidev_y
 134+ AB38              NormSideYNoNeg:
 135+ AB38 32 24 C0     		ld		(UBnkrotmatNosevY+1),a
 136+ AB3B              ;calc sidev z
 137+ AB3B 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)			; nosev x
 138+ AB3E 32 B4 92     		ld		(varQ),a
 139+ AB41 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
 140+ AB44 CD 0B AA     		call	RSequQmulA
 141+ AB47 3A 24 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev y
 142+ AB4A 47           		ld		b,a							; b = regX for now
 143+ AB4B 3A 1C C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 144+ AB4E CD 8B AA     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 145+ AB51                      IfAIsZeroGoto NormSideZNoNeg
 145+ AB51 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 145+ AB52 CA 57 AB    >				jp	z, NormSideZNoNeg
 146+ AB55 EE 80        		xor		$80							; flip a to get -sidev_y
 147+ AB57              NormSideZNoNeg:
 148+ AB57 32 18 C0     		ld		(UBnkrotmatSidevY+1),a ;TODO SHoudl this be Y??
 149+ AB5A              .ClearLoBytes:
 150+ AB5A 21 21 C0     		ld		hl,UBnkrotmatNosevX
 151+ AB5D 06 09        		ld		b,9
 152+ AB5F AF                   xor     a
 153+ AB60              .ClearLoLoop:
 154+ AB60 77           		ld		(hl),a						; zero out lo bytes
 155+ AB61 23           		inc		hl
 156+ AB62 23           		inc		hl
 157+ AB63 10 FB        		djnz	.ClearLoLoop
 158+ AB65 CD 3F AA     		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 159+ AB68 CD E7 A5     		call	normaliseXX1596fast			; normalise roof
 160+ AB6B              ;calc sidev x
 161+ AB6B CD 78 AA     		call	CopyXX15toRotMatSideV		; get back normalised version
 162+ AB6E
 163+ AB6E C9           		ret
 164+ AB6F
 165+ AB6F
 166+ AB6F
 167+ AB6F              ;;;;;;;;.CheckNYSmall:
 168+ AB6F              ;;;;;;;;		ld		a,(XX15+2)					; first check z zero, if so we have to do Y
 169+ AB6F              ;;;;;;;;		and		$7F
 170+ AB6F              ;;;;;;;;		cp		0
 171+ AB6F              ;;;;;;;;		jp		z,Tidy1RZ
 172+ AB6F              ;;;;;;;;		ld		a,(XX15+1)					; now we can do a realistic check of RY
 173+ AB6F              ;;;;;;;;		cp 		0							; we can't end up with divide by 0 for RY
 174+ AB6F              ;;;;;;;;		jp		z,Tidy1RZ					; We can't have all values of vector 0 so we must do RZ
 175+ AB6F              ;;;;;;;;		and		%01100000					; check top two magnitude bits
 176+ AB6F              ;;;;;;;;		jp		z,Tidy1RY					; and tidy based on roofy
 177+ AB6F              ;;;;;;;;.DoNZ:
 178+ AB6F              ;;;;;;;;		jp		Tidy1RZ						; else we tidy based on roofz
 179+ AB6F              ;;;;;;;;;---RE ENTRY POINT -------------------------------------
 180+ AB6F              ;;;;;;;;NormaliseRoofv:
 181+ AB6F              ;;;;;;;;		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 182+ AB6F              ;;;;;;;;		push	bc
 183+ AB6F              ;;;;;;;;		call	normaliseXX1596fast			; normalise
 184+ AB6F              ;;;;;;;;		pop		bc
 185+ AB6F              ;;;;;;;;		call	CopyXX15toRotMatRoofV		; get back normalised version
 186+ AB6F              ;;;;;;;;ProcessSidev:
 187+ AB6F              ;;;;;;;;; -- SIDEV X
 188+ AB6F              ;;;;;;;;		ldCopyByte	nosev_z+1, varQ         ; use ixh as Q later
 189+ AB6F              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)				; a = roofv_hi
 190+ AB6F              ;;;;;;;;		push	bc
 191+ AB6F              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12
 192+ AB6F              ;;;;;;;;		pop		bc
 193+ AB6F              ;;;;;;;;		ld		a,(UBnkrotmatNosevY+1)
 194+ AB6F              ;;;;;;;;		ld		b,a							; set x (b) to value of nosev_z
 195+ AB6F              ;;;;;;;;		ld		a,(UBnkrotmatRoofvZ+1)				; a = roofv_y hi
 196+ AB6F              ;;;;;;;;		push	bc
 197+ AB6F              ;;;;;;;;		call	TidySub1					; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z TIS1
 198+ AB6F              ;;;;;;;;		pop		bc
 199+ AB6F              ;;;;;;;;		ld		(UBnkrotmatSidevX+1),a				; sidev_x = = (nosev_z * roofv_y - nosev_y * roofv_z) / 96
 200+ AB6F              ;;;;;;;;; -- SIDEV Y
 201+ AB6F              ;;;;;;;;		ldCopyByte	UBnkrotmatNosevX+1, varQ         ; use ixh as Q later
 202+ AB6F              ;;;;;;;;		ld		a,(UBnkrotmatRoofvZ+1)				;
 203+ AB6F              ;;;;;;;;		push	bc
 204+ AB6F              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12 MULT12
 205+ AB6F              ;;;;;;;;		pop		bc
 206+ AB6F              ;;;;;;;;		ld		a,(UBnkrotmatNosevZ+1)
 207+ AB6F              ;;;;;;;;		ld		b,a
 208+ AB6F              ;;;;;;;;		ld		a,(UBnkrotmatRoofvX+1)
 209+ AB6F              ;;;;;;;;		push	bc
 210+ AB6F              ;;;;;;;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 211+ AB6F              ;;;;;;;;		pop		bc
 212+ AB6F              ;;;;;;;;		ld		(sidev_y+1),a				; sidev_y  = (nosev_x * roofv_z - nosev_z * roofv_x) / 96
 213+ AB6F              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)
 214+ AB6F              ;;;;;;;;		push	bc
 215+ AB6F              ;;;;;;;;; -- SIDEV Z
 216+ AB6F              ;;;;;;;;		ldCopyByte	UBnkrotmatNosevY+1, varQ         ; use ixh as Q later
 217+ AB6F              ;;;;;;;;		ld		a,(UBnkrotmatRoofvX+1)				;
 218+ AB6F              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12
 219+ AB6F              ;;;;;;;;		pop		bc
 220+ AB6F              ;;;;;;;;		ld		a,(UBnkrotmatNosevX+1)
 221+ AB6F              ;;;;;;;;		ld		b,a
 222+ AB6F              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)
 223+ AB6F              ;;;;;;;;		push	bc
 224+ AB6F              ;;;;;;;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 225+ AB6F              ;;;;;;;;		pop		bc
 226+ AB6F              ;;;;;;;;		ld		(sidev_z+1),a
 227+ AB6F              ;;;;;;;;		xor		a							; set a = 0 so we can clear orientation low bytes
 228+ AB6F              ;;;;;;;;		ld		hl,sidev_z
 229+ AB6F              ;;;;;;;;		ld		b,9							; only on 6 cells (3 x row 0 and row 1)
 230+ AB6F              ;;;;;;;;		ld		hl,UBnkrotmatNosevX
 231+ AB6F              ;;;;;;;;NormaliseSideV:
 232+ AB6F              ;;;;;;;;		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 233+ AB6F              ;;;;;;;;		push	bc
 234+ AB6F              ;;;;;;;;		call	normaliseXX1596fast			; normalise
 235+ AB6F              ;;;;;;;;		pop		bc
 236+ AB6F              ;;;;;;;;		call	CopyXX15toRotMatSideV		; get back normalised version
 237+ AB6F              ;;;;;;;;
 238+ AB6F
 239+ AB6F
 240+ AB6F              CalcRoofvX:
 241+ AB6F              Tidy1RX:										; roofv_x´ = -(nosev_y´ * roofv_y + nosev_z´ * roofv_z) / nosev_x´
 242+ AB6F              		ldCopyByte UBnkrotmatNosevZ+1,varQ
 242+ AB6F 3A 26 C0    >               ld       a,(UBnkrotmatNosevZ+1)
 242+ AB72 32 B4 92    >               ld       (varQ),a
 243+ AB75 3A 20 C0     		ld		a,(UBnkrotmatRoofvZ+1)
 244+ AB78 CD 0B AA     		call	RSequQmulA						; rs = nosez hi * roofz hi
 245+ AB7B              		ldCopyByte UBnkrotmatNosevY+1,varQ
 245+ AB7B 3A 24 C0    >               ld       a,(UBnkrotmatNosevY+1)
 245+ AB7E 32 B4 92    >               ld       (varQ),a
 246+ AB81 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)
 247+ AB84 CD 20 A2     		call	madXAequQmulAaddRS				; DE = nosey hi * roofy hi + rs
 248+ AB87 7A           		ld		a,d
 249+ AB88 E6 80        		and 	$80
 250+ AB8A FD 67        		ld		iyh,a
 251+ AB8C              ;DEBUG		ld		c,a
 252+ AB8C 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)					; get nosev x sign
 253+ AB8F 4F           		ld		c,a								; temp save
 254+ AB90 E6 80        		and		$80
 255+ AB92 FD AC        		xor		iyh								; flip from saved multiply sign result
 256+ AB94 FD 67        		ld		iyh,a							; save nosesev sign to iyh
 257+ AB96 79           		ld		a,c								; recover a
 258+ AB97 E6 7F        		and		$7F								; a is unsigned nosev x
 259+ AB99 42           		ld		b,d
 260+ AB9A 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 261+ AB9B 57           		ld		d,a								; de = nosev x hi
 262+ AB9C 1E 00        		ld		e,0
 263+ AB9E CD 59 A4     		call	BC_Div_DE
 264+ ABA1 FD 7C        		ld		a,iyh							; get back sign from nosevx
 265+ ABA3 EE 80        		xor		$80								; flip sign
 266+ ABA5 E6 80        		and		$80								; keep sign bit only
 267+ ABA7 B0           		or		b
 268+ ABA8 C9           		ret
 269+ ABA9
 270+ ABA9
 271+ ABA9              CalcRoofvY:
 272+ ABA9              Tidy1RY:										; roofv_y´ = -(nosev_x´ * roofv_x + nosev_z´ * roofv_z) / nosev_y´
 273+ ABA9              		ldCopyByte UBnkrotmatNosevZ+1,varQ				;                  A        Q              RS
 273+ ABA9 3A 26 C0    >               ld       a,(UBnkrotmatNosevZ+1)
 273+ ABAC 32 B4 92    >               ld       (varQ),a
 274+ ABAF 3A 20 C0     		ld		a,(UBnkrotmatRoofvZ+1)
 275+ ABB2 CD 0B AA     		call	RSequQmulA
 276+ ABB5              		ldCopyByte UBnkrotmatNosevX+1,varQ
 276+ ABB5 3A 22 C0    >               ld       a,(UBnkrotmatNosevX+1)
 276+ ABB8 32 B4 92    >               ld       (varQ),a
 277+ ABBB 3A 1C C0     		ld		a,(UBnkrotmatRoofvX+1)
 278+ ABBE CD 20 A2     		call	madXAequQmulAaddRS
 279+ ABC1 7A           		ld		a,d
 280+ ABC2 E6 80        		and 	$80
 281+ ABC4 FD 67        		ld		iyh,a
 282+ ABC6 3A 24 C0     		ld		a,(UBnkrotmatNosevY+1)					; get nosev x sign
 283+ ABC9 4F           		ld		c,a								; temp save
 284+ ABCA E6 80        		and		$80
 285+ ABCC FD AC        		xor		iyh								; flip from saved multiply sign result
 286+ ABCE FD 67        		ld		iyh,a							; save nosesev sign to iyh
 287+ ABD0 79           		ld		a,c								; recover a
 288+ ABD1 E6 7F        		and		$7F								; a is unsigned nosev x
 289+ ABD3 42           		ld		b,d
 290+ ABD4 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 291+ ABD5 57           		ld		d,a								; de = nosev x hi
 292+ ABD6 1E 00        		ld		e,0
 293+ ABD8 CD 59 A4     		call	BC_Div_DE
 294+ ABDB FD 7C        		ld		a,iyh
 295+ ABDD EE 80        		xor		$80
 296+ ABDF E6 80        		and		$80
 297+ ABE1 B0           		or		b
 298+ ABE2 C9           		ret
 299+ ABE3
 300+ ABE3              CalcRoofvZ:
 301+ ABE3              Tidy1RZ:										; roofv_z´ = -(nosev_x´ * roofv_x + nosev_y´ * roofv_y) / nosev_z´
 302+ ABE3              		ldCopyByte UBnkrotmatNosevY+1,varQ
 302+ ABE3 3A 24 C0    >               ld       a,(UBnkrotmatNosevY+1)
 302+ ABE6 32 B4 92    >               ld       (varQ),a
 303+ ABE9 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)
 304+ ABEC CD 0B AA     		call	RSequQmulA						; rs = NOSEy * ROOFy
 305+ ABEF              		ldCopyByte UBnkrotmatNosevX+1,varQ
 305+ ABEF 3A 22 C0    >               ld       a,(UBnkrotmatNosevX+1)
 305+ ABF2 32 B4 92    >               ld       (varQ),a
 306+ ABF5 3A 1C C0     		ld		a,(UBnkrotmatRoofvX+1)
 307+ ABF8 CD 20 A2     		call	madXAequQmulAaddRS				; de (A,ixl) = NOSEx * ROOFx + RS
 308+ ABFB 7A           		ld		a,d
 309+ ABFC E6 80        		and 	$80
 310+ ABFE FD 67        		ld		iyh,a
 311+ AC00 3A 26 C0     		ld		a,(UBnkrotmatNosevZ+1)					; get nosev x sign
 312+ AC03 4F           		ld		c,a								; temp save
 313+ AC04 E6 80        		and		$80
 314+ AC06 FD AC        		xor		iyh								; flip from saved multiply sign result
 315+ AC08 FD 67        		ld		iyh,a							; save nosesev sign to iyh
 316+ AC0A 79           		ld		a,c								; recover a
 317+ AC0B E6 7F        		and		$7F								; a is unsigned nosev x
 318+ AC0D 42           		ld		b,d
 319+ AC0E 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 320+ AC0F 57           		ld		d,a								; de = nosev x hi
 321+ AC10 1E 00        		ld		e,0
 322+ AC12 CD 59 A4     		call	BC_Div_DE
 323+ AC15 FD 7C        		ld		a,iyh
 324+ AC17 EE 80        		xor		$80
 325+ AC19 E6 80        		and		$80
 326+ AC1B B0           		or		b
 327+ AC1C C9           		ret
 328+ AC1D
 329+ AC1D
 330+ AC1D
 331+ AC1D              ;;ProcessSidev:
 332+ AC1D              ;;		ldCopyByte	UBnkrotmatNosevZ+1, varQ         ; use ixh as Q later
 333+ AC1D              ;;		ld		a,(UBnkrotmatRoofvY+1)				; a = roofv_hi
 334+ AC1D              ;;		push	bc
 335+ AC1D              ;;		call	RSequQmulA					; RS = Q * A MULT12
 336+ AC1D              ;;		pop		bc
 337+ AC1D              ;;		ld		a,(UBnkrotmatNosevY+1)
 338+ AC1D              ;;		ld		b,a							; set x (b) to value of nosev_z
 339+ AC1D              ;;		ld		a,(UBnkrotmatRoofvZ+1)				; a = roofv_y hi
 340+ AC1D              ;;		push	bc
 341+ AC1D              ;;		call	TidySub1					; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z TIS1
 342+ AC1D              ;;		pop		bc
 343+ AC1D              ;;		xor		$80							; sidev_x = -a by flipping sign bit
 344+ AC1D              ;;		ld		(UBnkrotmatSidevX+1),a				; sidev_x = = (nosev_z * roofv_y - nosev_y * roofv_z) / 96
 345+ AC1D              ;;		ldCopyByte	UBnkrotmatNosevX+1, varQ         ; use ixh as Q later
 346+ AC1D              ;;		ld		a,(UBnkrotmatRoofvZ+1)				;
 347+ AC1D              ;;		push	bc
 348+ AC1D              ;;		call	RSequQmulA					; RS = Q * A MULT12 MULT12
 349+ AC1D              ;;		pop		bc
 350+ AC1D              ;;		ld		a,(UBnkrotmatNosevZ+1)
 351+ AC1D              ;;		ld		b,a
 352+ AC1D              ;;		ld		a,(UBnkrotmatNosevY+1)
 353+ AC1D              ;;		push	bc
 354+ AC1D              ;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 355+ AC1D              ;;		pop		bc
 356+ AC1D              ;;		xor		$80							; a *= -1
 357+ AC1D              ;;		ld		(UBnkrotmatSidevY+1),a				; sidev_y  = (nosev_x * roofv_z - nosev_z * roofv_x) / 96
 358+ AC1D              ;;		ld		a,(UBnkrotmatRoofvY+1)
 359+ AC1D              ;;		push	bc
 360+ AC1D              ;;		ldCopyByte	UBnkrotmatNosevY+1, varQ         ; use ixh as Q later
 361+ AC1D              ;;		ld		a,(UBnkrotmatRoofvX+1)				;
 362+ AC1D              ;;		call	RSequQmulA					; RS = Q * A MULT12
 363+ AC1D              ;;		pop		bc
 364+ AC1D              ;;		ld		a,(UBnkrotmatNosevX+1)
 365+ AC1D              ;;		ld		b,a
 366+ AC1D              ;;		ld		a,(UBnkrotmatRoofvY+1)
 367+ AC1D              ;;		push	bc
 368+ AC1D              ;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 369+ AC1D              ;;		pop		bc
 370+ AC1D              ;;		xor		$80
 371+ AC1D              ;;		ld		(UBnkrotmatSidevZ+1),a
 372+ AC1D              ;;		xor		a							; set a = 0 so we can clear orientation low bytes
 373+ AC1D              ;;		ld		hl,UBnkrotmatSidevZ
 374+ AC1D              ;;		ld		b,9							; only on 6 cells (3 x row 0 and row 1)
 375+ AC1D              ;;		ld		hl,UBnkrotmatNosevX
 376+ AC1D
 377+ AC1D
 378+ AC1D
 379+ AC1D
 380+ AC1D
 381+ AC1D
 382+ AC1D              ;;;;;;;;;-- Check to see if the top two magnitude bits are clear in nosev_x, if so jump to TI1
 383+ AC1D              ;;;;;;;;.ProcessRoofv:
 384+ AC1D              ;;;;;;;;		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 385+ AC1D              ;;;;;;;;		push	bc
 386+ AC1D              ;;;;;;;;		call	normaliseXX1596fast			; normalise roof
 387+ AC1D              ;;;;;;;;		pop		bc
 388+ AC1D              ;;;;;;;;		call	CopyXX15toRotMatRoofV		; get back normalised version
 389+ AC1D              ;;;;;;;;.ProcessSidev:
 390+ AC1D              ;;;;;;;;		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 391+ AC1D              ;;;;;;;;		push	bc
 392+ AC1D              ;;;;;;;;		call	normaliseXX1596fast			; normalise roof
 393+ AC1D              ;;;;;;;;		pop		bc
 394+ AC1D              ;;;;;;;;		call	CopyXX15toRotMatSideV		; get back normalised version
 395+ AC1D
# file closed: ./Maths/Utilities/tidy.asm
1004  AC1D                  INCLUDE "./Maths/Utilities/LL28AequAmul256DivD.asm"
# file opened: ./Maths/Utilities/LL28AequAmul256DivD.asm
   1+ AC1D
   2+ AC1D              LL28Amul256DivD:        JumpIfAGTENusng  d, .Ll28Exit255
   2+ AC1D BA          >                        cp     d
   2+ AC1E D2 3C AC    >                        jp		nc,.Ll28Exit255
   3+ AC21 1E FE                                ld      e,%11111110                 ; Set R to have bits 1-7 set, so we can rotate through 7
   4+ AC23 CB 27        .LL31:                  sla     a
   5+ AC25 38 0D                                jr      c,.LL29
   6+ AC27                                      JumpIfALTNusng  d, .SkipSub         ; will jump if carry set, so we need to reset on the rol
   6+ AC27 BA          >                        cp      d
   6+ AC28 DA 2D AC    >                        jp		c, .SkipSub
   7+ AC2B 92                                   sub     d
   8+ AC2C                                      ClearCarryFlag                      ; reset clarry as it will be complimented for rotate as 6502 does carry flags inverted
   8+ AC2C B7          >                    or a
   9+ AC2D 3F           .SkipSub:               ccf                                 ; if we did the subtract the carry will be clear so we need to invert to roll in.
  10+ AC2E CB 13                                rl      e
  11+ AC30 38 F1                                jr      c,.LL31
  12+ AC32 7B                                   ld      a,e
  13+ AC33 C9                                   ret
  14+ AC34 92           .LL29:                  sub     d                           ; A >= Q, so set A = A - Q
  15+ AC35 37                                   scf                                 ; Set the C flag to rotate into the result in R
  16+ AC36 CB 13                                rl      e                           ; rotate counter e left
  17+ AC38 38 E9                                jr      c,.LL31                     ; if a bit was spat off teh end then loop
  18+ AC3A 7B                                   ld      a,e                         ; stick result in a
  19+ AC3B C9                                   ret
  20+ AC3C 3E FF        .Ll28Exit255:           ld  a,255                           ; Fail with FF as result
  21+ AC3E C9                                   ret
  22+ AC3F
# file closed: ./Maths/Utilities/LL28AequAmul256DivD.asm
1005  AC3F                  INCLUDE "./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm"
# file opened: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
   1+ AC3F              XAequMinusXAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
   2+ AC3F              TIS1:
   3+ AC3F 08           		ex		af,af'
   4+ AC40 3A 41 92     		ld		a,(regX)
   5+ AC43 47           		ld		b,a
   6+ AC44 08           		ex		af,af'
   7+ AC45              BAequMinusBAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
   8+ AC45 08           		ex		af,af'
   9+ AC46 78           		ld		a,b
  10+ AC47 32 B4 92     		ld		(varQ),a
  11+ AC4A 08           		ex		af,af'
  12+ AC4B EE 80        		xor		$80							;	 flip sign of Acc
  13+ AC4D CD 20 A2     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
  14+ AC50              ; USES 				A BC E
  15+ AC50              ; DOES NOT USE		D HL
  16+ AC50              Div96:										; .DVID96	\ Their comment A=A/96: answer is A*255/96
  17+ AC50 47           		ld		b,a
  18+ AC51 E6 80        		and		$80							;	hi sign
  19+ AC53 5F           		ld		e,a							;   e = varT
  20+ AC54 78           		ld		a,b
  21+ AC55 E6 7F        		and		$7F							;	hi A7
  22+ AC57 06 FE        		ld		b,$FE						;   slide counter
  23+ AC59 48           		ld		c,b							;   c == T1 ::  T1
  24+ AC5A              .DVL3:										;   roll T1  clamp Acc to #96 for rotation matrix unity
  25+ AC5A CB 27        		sla		a
  26+ AC5C FE 60        		cp		$60							; max 96
  27+ AC5E 30 02        		jr		nc,.DV4
  28+ AC60 DE 60        		sbc		a,$60							;  SBC #&60
  29+ AC62              .DV4:										; skip subtraction
  30+ AC62 CB 11        		rl		c							;  T1
  31+ AC64 38 F4        		jr		c,.DVL3
  32+ AC66 79           		ld		a,c							;   T1
  33+ AC67 B3           		or		e							;   restore T sign
  34+ AC68 C9           		ret
  35+ AC69
# file closed: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
1006  AC69              ;INCLUDE "XAequQmuilAaddRS-MAD-ADD.asm"
1007  AC69              ;INCLUDE "XHiYLoequPA-gc3.asm"
1008  AC69              ;INCLUDE "XHiYLoequPmulAmul4-gc2.asm"
1009  AC69              ;INCLUDE "XLoYHiequPmulQmul4-gcash.asm"
1010  AC69              ;INCLUDE "XX12equXX15byXX16-LL51.asm"
1011  AC69                ;  INCLUDE "./Maths/Utilities/XYeqyx1loSmulMdiv256-Ll120-LL123.asm"
1012  AC69
1013  AC69
1014  AC69                  INCLUDE "./Drive/drive_access.asm"
# file opened: ./Drive/drive_access.asm
   1+ AC69              M_GETSETDRV             equ $89
   2+ AC69              F_OPEN                  equ $9a
   3+ AC69              F_CLOSE                 equ $9b
   4+ AC69              F_READ                  equ $9d
   5+ AC69              F_WRITE                 equ $9e
   6+ AC69              F_SEEK                  equ $9f
   7+ AC69
   8+ AC69              FA_READ                 equ $01
   9+ AC69              FA_APPEND               equ $06
  10+ AC69              FA_OVERWRITE            equ $0C
  11+ AC69
  12+ AC69 F5 C5 D5 E5  GetDefaultDrive:        push	af,,bc,,de,,hl,,ix
  12+ AC6D DD E5
  13+ AC6F AF                                   xor	    a	; set drive. 0 is default
  14+ AC70 CF                                   rst	    $08
  15+ AC71 89                                   db	    $89
  16+ AC72 32 7C AC                             ld	    (DefaultDrive),a
  17+ AC75 DD E1 E1 D1                          pop		af,,bc,,de,,hl,,ix
  17+ AC79 C1 F1
  18+ AC7B C9                                   ret
  19+ AC7C 00           DefaultDrive:	        db	0
  20+ AC7D
  21+ AC7D              ; *******************************************************************************************************
  22+ AC7D              ;	Function:	Open a file read for reading/writing
  23+ AC7D              ;	In:		ix = filename
  24+ AC7D              ;			b  = Open filemode
  25+ AC7D              ;	ret		a  = handle, 0 on error
  26+ AC7D              ; *******************************************************************************************************
  27+ AC7D E5 DD E5     fOpen:	                push	hl,,ix
  28+ AC80 DD E5                                push	ix
  29+ AC82 3A 7C AC                             ld	    a,(DefaultDrive)
  30+ AC85 CF                                   rst	    $08
  31+ AC86 9A                                   db	    F_OPEN
  32+ AC87 DD E1 E1                             pop	    hl,,ix
  33+ AC8A C9                                   ret
  34+ AC8B
  35+ AC8B              ; *******************************************************************************************************
  36+ AC8B              ;	Function	Read bytes from the open file
  37+ AC8B              ;	In:		ix  = address to read into
  38+ AC8B              ;			bc  = amount to read
  39+ AC8B              ;	ret:		carry set = error
  40+ AC8B              ; *******************************************************************************************************
  41+ AC8B B7           fRead:                  or   	a             ; is it zero?
  42+ AC8C C8                                   ret  	z             ; if so return
  43+ AC8D E5 DD E5                             push	hl,,ix   	 ; load ix into hl and save hl for later
  44+ AC90 E1                                   pop		hl
  45+ AC91 CF                                   rst	    $08
  46+ AC92 9D                                   db	    F_READ
  47+ AC93 E1                                   pop	    hl
  48+ AC94 C9                                   ret
  49+ AC95
  50+ AC95              ; *******************************************************************************************************
  51+ AC95              ;	Function	Read bytes from the open file
  52+ AC95              ;	In:		ix  = address to read into
  53+ AC95              ;			bc  = amount to read
  54+ AC95              ;	ret:		carry set = error
  55+ AC95              ; *******************************************************************************************************
  56+ AC95 B7           fWrite:                 or   	a             ; is it zero?
  57+ AC96 C8                                   ret  	z             ; if so return
  58+ AC97 E5 DD E5                             push	hl,,ix
  59+ AC9A E1                                   pop	    hl
  60+ AC9B CF                                   rst	    $08
  61+ AC9C 9E                                   db	    F_WRITE
  62+ AC9D E1                                   pop	    hl
  63+ AC9E C9                                   ret
  64+ AC9F
  65+ AC9F              ; *******************************************************************************************************
  66+ AC9F              ;	Function:	Close open file
  67+ AC9F              ;	In:		a  = handle
  68+ AC9F              ;	ret		a  = handle, 0 on error
  69+ AC9F              ; *******************************************************************************************************
  70+ AC9F B7           fClose:		            or   	a             ; is it zero?
  71+ ACA0 C8                                   ret  	z             ; if so return
  72+ ACA1 CF                                   rst	    $08
  73+ ACA2 9B                                   db	    F_CLOSE
  74+ ACA3 C9                                   ret
  75+ ACA4
  76+ ACA4              ; *******************************************************************************************************
  77+ ACA4              ;	Function	Read bytes from the open file
  78+ ACA4              ;	In:		a   = file handle
  79+ ACA4              ;			L   = Seek mode (0=start, 1=rel, 2=-rel)
  80+ ACA4              ;			BCDE = bytes to seek
  81+ ACA4              ;	ret:		BCDE = file pos from start
  82+ ACA4              ; *******************************************************************************************************
  83+ ACA4 DD E5 E5     fSeek:                  push	ix,,hl
  84+ ACA7 CF                                   rst	    $08
  85+ ACA8 9F                                   db	    F_SEEK
  86+ ACA9 E1 DD E1                             pop	    ix,,hl
  87+ ACAC C9                                   ret
  88+ ACAD
  89+ ACAD              ; *******************************************************************************************************
  90+ ACAD              ; Init the file system
  91+ ACAD              ; *******************************************************************************************************
  92+ ACAD CD 69 AC     InitFileSystem:         call    GetDefaultDrive
  93+ ACB0 C9                                   ret
  94+ ACB1
  95+ ACB1              ; *******************************************************************************************************
  96+ ACB1              ; Function:	Load a whole file into memory	(confirmed working on real machine)
  97+ ACB1              ; In:		hl = file data pointer
  98+ ACB1              ;		ix = address to load to
  99+ ACB1              ; *******************************************************************************************************
 100+ ACB1 CD 69 AC     FileLoad:	            call    GetDefaultDrive		; need to do this each time?!?!?
 101+ ACB4 C5 D5 F5                             push	bc,,de,,af
 102+ ACB7                                      ; get file size
 103+ ACB7 4E                                   ld	    c,(hl)
 104+ ACB8 2C                                   inc	    l
 105+ ACB9 46                                   ld	    b,(hl)
 106+ ACBA 2C                                   inc	    l
 107+ ACBB C5 DD E5                             push	bc,,ix			; store size, load address,
 108+ ACBE E5                                   push	hl				; get name into ix
 109+ ACBF DD E1                                pop	    ix
 110+ ACC1 06 01                                ld      b,FA_READ		; mode open for reading
 111+ ACC3 CD 7D AC                             call    fOpen
 112+ ACC6 38 17                                jr	    c,.error_opening; carry set? so there was an error opening and A=error code
 113+ ACC8 FE 00                                cp	    0				; was file handle 0?
 114+ ACCA 28 13                                jr	    z,.error_opening; of so there was an error opening.
 115+ ACCC DD E1 C1                             pop     bc,,ix          ; get load address back and size back
 116+ ACCF F5                                   push	af				; remember handle
 117+ ACD0 CD 8B AC                             call	fRead			; read data from A to address IX of length BC
 118+ ACD3 38 0C                                jr	    c,.error_reading
 119+ ACD5 F1                                   pop	    af			    ; get handle back
 120+ ACD6 CD 9F AC                             call	fClose			; close file
 121+ ACD9 38 07                                jr	    c,.error_closing
 122+ ACDB F1 D1 C1                             pop     bc,,de,,af      ; normal exit
 123+ ACDE C9                                   ret
 124+ ACDF              ;
 125+ ACDF              ; On error, display error code an lock up so we can see it
 126+ ACDF              ;
 127+ ACDF DD E1        .error_opening:         pop	ix
 128+ ACE1 C1           .error_reading:		    pop	bc	; don't pop a, need error code
 129+ ACE2
 130+ ACE2              .error_closing:
 131+ ACE2 C1           .NormalError:  	        pop	bc	; don't pop into A, return with error code
 132+ ACE3 D1                                   pop	de
 133+ ACE4 C1                                   pop	bc
 134+ ACE5 C9                                   ret
 135+ ACE6
 136+ ACE6              ; *******************************************************************************************************
 137+ ACE6              ; Function:	Save a whole file into memory	(confirmed working on real machine)
 138+ ACE6              ; In:		hl = file data pointer
 139+ ACE6              ;		ix = address to save from
 140+ ACE6              ;		bc = size
 141+ ACE6              ; *******************************************************************************************************
 142+ ACE6 CD 69 AC     FileSave:	            call    GetDefaultDrive		; need to do this each time?!?!?
 143+ ACE9 C5 E5                                push	bc,,hl   			; store size& save address
 144+ ACEB E5                                   push	hl		        	; get name into ix
 145+ ACEC DD E1                                pop	    ix
 146+ ACEE 06 0C                                ld      b,FA_OVERWRITE		; mode open for writing
 147+ ACF0 CD 7D AC                             call    fOpen
 148+ ACF3 38 12                                jr	    c,.error_opening	; carry set? so there was an error opening and A=error code
 149+ ACF5 FE 00                                cp	    0			        ; was file handle 0?
 150+ ACF7 28 0E                                jr	    z,.error_opening	; of so there was an error opening.
 151+ ACF9 DD E1                                pop	    ix			        ; get save address back
 152+ ACFB C1                                   pop	    bc			        ; get size back
 153+ ACFC F5                                   push	af			        ; remember handle
 154+ ACFD CD 95 AC                             call	fWrite			    ; read data from A to address IX of length BC
 155+ AD00 38 04                                jr	c,.error
 156+ AD02 F1                                   pop	af			            ; get handle back
 157+ AD03 CD 9F AC                             call	fClose			    ; close file
 158+ AD06 C9           .error:                 ret
 159+ AD07              ;
 160+ AD07              ; On error, display error code an lock up so we can see it
 161+ AD07              ;
 162+ AD07 DD E1        .error_opening:         pop	ix
 163+ AD09 C1                                   pop	bc	; don't pop a, need error code
 164+ AD0A C9                                   ret
 165+ AD0B
# file closed: ./Drive/drive_access.asm
1015  AD0B
1016  AD0B                  INCLUDE "./Menus/common_menu.asm"
# file opened: ./Menus/common_menu.asm
   1+ AD0B 43 4F 4D 4D  txt_commander 			DB "COMMANDER",0
   1+ AD0F 41 4E 44 45
   1+ AD13 52 00
   2+ AD15 49 4E 56 45  txt_inventory 			DB "INVENTORY",0
   2+ AD19 4E 54 4F 52
   2+ AD1D 59 00
   3+ AD1F 50 72 65 73  txt_present_system		DB "Present System   :",0
   3+ AD23 65 6E 74 20
   3+ AD27 53 79 73 74
   3+ AD2B 65 6D 20 20
   3+ AD2F 20 3A 00
   4+ AD32 48 79 70 65  txt_hyperspace_system	DB "Hyperspace System:",0
   4+ AD36 72 73 70 61
   4+ AD3A 63 65 20 53
   4+ AD3E 79 73 74 65
   4+ AD42 6D 3A 00
   5+ AD45 43 6F 6E 64  txt_condition			DB "Condition   :",0
   5+ AD49 69 74 69 6F
   5+ AD4D 6E 20 20 20
   5+ AD51 3A 00
   6+ AD53 46 75 65 6C  txt_fuel				DB "Fuel        :",0
   6+ AD57 20 20 20 20
   6+ AD5B 20 20 20 20
   6+ AD5F 3A 00
   7+ AD61 43 61 73 68  txt_cash				DB "Cash        :",0
   7+ AD65 20 20 20 20
   7+ AD69 20 20 20 20
   7+ AD6D 3A 00
   8+ AD6F 4C 65 67 61  txt_legal_status		DB "Legal Status:",0
   8+ AD73 6C 20 53 74
   8+ AD77 61 74 75 73
   8+ AD7B 3A 00
   9+ AD7D 52 61 74 69  txt_rating				DB "Rating      :",0
   9+ AD81 6E 67 20 20
   9+ AD85 20 20 20 20
   9+ AD89 3A 00
  10+ AD8B 45 51 55 49  txt_equipment			DB "EQUIPMENT:",0
  10+ AD8F 50 4D 45 4E
  10+ AD93 54 3A 00
  11+ AD96
  12+ AD96 30 30 2E 30  txt_fuel_level			DB "00.0 Light Years",0
  12+ AD9A 20 4C 69 67
  12+ AD9E 68 74 20 59
  12+ ADA2 65 61 72 73
  12+ ADA6 00
  13+ ADA7 58 58 58 58  txt_cash_amount			DB "XXXXXXXXXX",0
  13+ ADAB 58 58 58 58
  13+ ADAF 58 58 00
  14+ ADB2 2E           txt_cash_decimal        DB "."
  15+ ADB3 58 20 43 72  txt_cash_fraction       DB "X Cr",0
  15+ ADB7 00
  16+ ADB8
  17+ ADB8              txt_status_colour		equ $FF
  18+ ADB8
  19+ ADB8              print_boiler_text_l2:
  20+ ADB8              ; ">print_boilder_text hl = text structure, b = message count"
  21+ ADB8              BoilerTextLoop:
  22+ ADB8 C5           	push		bc			; Save Message Count loop value
  23+ ADB9 4E           	ld			c,(hl)		; Get Row into b
  24+ ADBA 23           	inc			hl
  25+ ADBB 46           	ld			b,(hl)		; Get Col into b
  26+ ADBC 23           	inc			hl
  27+ ADBD 5E           	ld			e,(hl)		; Get text address Lo into E
  28+ ADBE 23           	inc			hl
  29+ ADBF 56           	ld			d,(hl)		; Get text address Hi into E
  30+ ADC0 23           	inc			hl
  31+ ADC1 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  32+ ADC2 EB           	ex			de,hl		; now hl = address of text data
  33+ ADC3 1E FF        	ld			e,txt_status_colour
  34+ ADC5                  MMUSelectLayer2
  34+ ADC5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  35+ ADC9 CD C8 E0     	call		l1_print_at
  36+ ADCC E1           	pop			hl
  37+ ADCD C1           	pop			bc
  38+ ADCE 10 E8        	djnz		BoilerTextLoop
  39+ ADD0 C9           	ret
  40+ ADD1
  41+ ADD1
  42+ ADD1              print_boiler_text:
  43+ ADD1              ; ">print_boilder_text hl = text structure, b = message count"
  44+ ADD1              .BoilerTextLoop:
  45+ ADD1 C5           	push		bc			; Save Message Count loop value
  46+ ADD2 4E           	ld			c,(hl)		; Get Row into b
  47+ ADD3 23           	inc			hl
  48+ ADD4 46           	ld			b,(hl)		; Get Col into b
  49+ ADD5 23           	inc			hl
  50+ ADD6 5E           	ld			e,(hl)		; Get text address Lo into E
  51+ ADD7 23           	inc			hl
  52+ ADD8 56           	ld			d,(hl)		; Get text address Hi into E
  53+ ADD9 23           	inc			hl
  54+ ADDA E5           	push		hl			; Save present HL to stack as this is the address for the next message
  55+ ADDB EB           	ex			de,hl		; now hl = address of text data
  56+ ADDC 1E FF        	ld			e,txt_status_colour
  57+ ADDE C5           	push		bc
  58+ ADDF D1           	pop			de
  59+ ADE0 CD C8 E0     	call		l1_print_at
  60+ ADE3 E1           	pop			hl
  61+ ADE4 C1           	pop			bc
  62+ ADE5 10 EA        	djnz		.BoilerTextLoop
  63+ ADE7 C9           	ret
  64+ ADE8
  65+ ADE8              GetFuelLevel:           INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++ADE8
   2++ADE8
   3++ADE8 3A F7 96     	ld		a,(Fuel)
   4++ADEB 11 96 AD     	ld		de,txt_fuel_level
   5++ADEE 0E 9C        	ld	c, -100
   6++ADF0 CD FA AD     	call	.Num1
   7++ADF3 0E F6        	ld	c,-10
   8++ADF5 CD FA AD     	call	.Num1
   9++ADF8 0E FF        	ld	c,-1
  10++ADFA              .Num1:
  11++ADFA 06 2F        	ld	b,'0'-1
  12++ADFC              .Num2:
  13++ADFC 04           	inc		b
  14++ADFD 81           	add		a,c
  15++ADFE 38 FC        	jr		c,.Num2
  16++AE00 91           	sub 	c
  17++AE01 C5           	push	bc
  18++AE02 F5           	push	af
  19++AE03 79           	ld		a,c
  20++AE04 FE FF        	cp		-1
  21++AE06 CC 0F AE     	call	z,.InsertDot
  22++AE09 78           	ld		a,b
  23++AE0A 12           	ld		(de),a
  24++AE0B 13           	inc		de
  25++AE0C F1           	pop		af
  26++AE0D C1           	pop		bc
  27++AE0E C9           	ret
  28++AE0F              .InsertDot:
  29++AE0F 3E 2E        	ld		a,'.'
  30++AE11 12           	ld		(de),a
  31++AE12 13           	inc		de
  32++AE13 C9           	ret
  33++AE14
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
  66+ AE14
  67+ AE14 2A F3 96     GetCash:                ld      hl,(Cash)
  68+ AE17 EB                                   ex      de,hl
  69+ AE18 DD 2A F5 96                          ld      ix,(Cash+2)
  70+ AE1C FD 21 A7 AD                          ld		iy,txt_cash_amount
  71+ AE20 CD 79 A7                             call 	DispDEIXtoIY	; This will write out with 0 termination after last digit
  72+ AE23 FD 7E 00     .ShiftDecimalDigit:     ld		a,(IY+0)				;Push last digit to post decimal
  73+ AE26 32 B3 AD                             ld		(txt_cash_fraction),a
  74+ AE29 21 A8 AD     .UpdateInteger:         ld		hl,txt_cash_amount+1	; Now was there only 1 digit
  75+ AE2C 7E                                   ld		a,(hl)					; if so we leave it alone so its "0.0"
  76+ AE2D FE 00                                cp		0
  77+ AE2F C8                                   ret		z
  78+ AE30 FD 36 00 00                          ld		(IY),0					; Else we erase last digit as it went to fraction
  79+ AE34 C9                                   ret
  80+ AE35
# file closed: ./Menus/common_menu.asm
1017  AE35              ; ARCHIVED INCLUDE "Menus/draw_fuel_and_crosshair.asm"
1018  AE35              ;INCLUDE "./title_page.asm"
1019  AE35
1020  AE35              ; Blocks dependent on variables in Universe Banks
1021  AE35              ; Bank 49
1022  AE35              ;    SEG RESETUNIVSEG
1023  AE35              ;seg     CODE_SEG,       4:              $0000,       $8000                 ; flat address
1024  AE35              ;seg     RESETUNIVSEG,   BankResetUniv:  StartOfBank, ResetUniverseAddr
1025  AE35
1026  AE35              ;	ORG ResetUniverseAddr
1027  AE35              ;INCLUDE "./GameEngine/resetUniverse.asm"
1028  AE35              ; Bank 50
1029  AE35
1030  AE35
1031  AE35
1032  AE35                  SLOT    MenuShrChtAddr
1033  AE35                  PAGE    BankMenuShrCht
1034  AE35              	ORG     MenuShrChtAddr,BankMenuShrCht
1035  C000                  INCLUDE "./Menus/short_range_chart_menu.asm"
# file opened: ./Menus/short_range_chart_menu.asm
   1+ C000
   2+ C000 53 68 6F 72  short_range_page_marker  DB "ShortRange  PG50"
   2+ C004 74 52 61 6E
   2+ C008 67 65 20 20
   2+ C00C 50 47 35 30
   3+ C010
   4+ C010 30 02 F5 9E  short_range_boiler_text	DW $0230,TextBuffer
   5+ C014              short_range_header		equ 12
   6+ C014              src_xy_centre			equ $6080
   7+ C014              src_x_centre			equ $80
   8+ C014              src_y_centre			equ $60
   9+ C014              local_chart_star_colour	equ 216
  10+ C014 00 00        local_dx				dw 0
  11+ C016 00 00        local_dy				dw 0
  12+ C018              local_max_range_x		equ 20
  13+ C018              local_max_range_y		equ $26
  14+ C018 00           local_name_row			db	0
  15+ C019 00           local_name_col			db	0
  16+ C01A              local_label_shift_x		equ	3
  17+ C01A              local_label_shift_y		equ	5
  18+ C01A
  19+ C01A 44 69 73 74  src_distance            DB "Distance: "
  19+ C01E 61 6E 63 65
  19+ C022 3A 20
  20+ C024 30 30 30     src_dist_amount         DB "000"
  21+ C027 2E           src_decimal             DB "."
  22+ C028 30           src_fraction            DB "0"
  23+ C029 20 4C 69 67  src_dis_ly              DB " Light Years",0
  23+ C02D 68 74 20 59
  23+ C031 65 61 72 73
  23+ C035 00
  24+ C036 20 20 30 2E  src_default_dist        DB "  0.0"
  24+ C03A 30
  25+ C03B
  26+ C03B 00 00 00...  src_distance_val        DS  6
  27+ C041              src_fill_buffer_len     EQU 32
  28+ C041              src_fill_buffer_size    EQU 4 * src_fill_buffer_len                          ; up to 32 labels topx topy lengthx spare
  29+ C041 00 00 00...  src_printed_text        DS  src_fill_buffer_size                             ; space for occupied cells may move to bit flags later TODO
  30+ C0C1 00           src_buffer_size         DB  0
  31+ C0C2              ;----------------------------------------------------------------------------------------------------------------------------------
  32+ C0C2              SRM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C0C2
   2++C0C2              ;">print_boilder_text hl = text structure, b = message count"
   3++C0C2              .BoilerTextLoop:
   4++C0C2 C5           	push		bc			; Save Message Count loop value
   5++C0C3 4E           	ld			c,(hl)		; Get Row into b
   6++C0C4 23           	inc			hl
   7++C0C5 46           	ld			b,(hl)		; Get Col into b
   8++C0C6 23           	inc			hl
   9++C0C7 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C0C8 23           	inc			hl
  11++C0C9 56           	ld			d,(hl)		; Get text address Hi into E
  12++C0CA 23           	inc			hl
  13++C0CB E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C0CC EB           	ex			de,hl		; now hl = address of text data
  15++C0CD 1E FF        	ld			e,txt_status_colour
  16++C0CF C5           	push		bc
  17++C0D0 D1           	pop			de
  18++C0D1                  MMUSelectLayer1
  18++C0D1 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C0D5 CD C8 E0     	call		l1_print_at
  20++C0D8 E1           	pop			hl
  21++C0D9 C1           	pop			bc
  22++C0DA 10 E6        	djnz		.BoilerTextLoop
  23++C0DC C9           	ret
  24++C0DD
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  33+ C0DD              ;----------------------------------------------------------------------------------------------------------------------------------
  34+ C0DD              SRM_draw_chart_circle_and_crosshair:
  35+ C0DD ED 4B CB 93                          ld		bc,(PresentSystemX)				; bc = present system
  36+ C0E1 01 80 60                             ld		bc,src_xy_centre					; must be ordered x y in data
  37+ C0E4                                      MMUSelectSpriteBank
  37+ C0E4 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  38+ C0E8 CD CB E0                             call	sprite_local_cursor
  39+ C0EB 3A F7 96                             ld		a,(Fuel)
  40+ C0EE 57                                   ld		d,a
  41+ C0EF 1E FF                                ld		e,$FF
  42+ C0F1                                      MMUSelectLayer2
  42+ C0F1 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  43+ C0F5 CD 58 E7                             call	l2_draw_circle
  44+ C0F8 C9                                   ret
  45+ C0F9              ; TODO MOVE CURSOR CODE
  46+ C0F9              ;----------------------------------------------------------------------------------------------------------------------------------
  47+ C0F9              SRM_draw_hyperspace_cross_hair:
  48+ C0F9 ED 4B CD 93                          ld		bc,(TargetPlanetX)              ; bc = selected jump
  49+ C0FD ED 5B CB 93                          ld		de,(PresentSystemX)
  50+ C101 0E 80                                ld		c,src_x_centre
  51+ C103 06 60                                ld		b,src_y_centre
  52+ C105                                      MMUSelectSpriteBank
  52+ C105 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  53+ C109 CD D3 E0                             call	sprite_local_hyper_cursor
  54+ C10C C9                                   ret
  55+ C10D              ;----------------------------------------------------------------------------------------------------------------------------------
  56+ C10D 3A B8 93     src_get_name:           ld      a,(Galaxy)
  57+ C110                                      MMUSelectGalaxyA
  57+ C110 ED 92 57    >                     nextreg GalaxyDataMMU,       a
  58+ C113 ED 4B CD 93                          ld      bc,(TargetPlanetX)
  59+ C117 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
  60+ C11B CD 55 FC                             call    galaxy_system_under_cursor
  61+ C11E FE 00                                cp      0
  62+ C120 C8                                   ret     z
  63+ C121 CD 81 F6                             call	GetDigramWorkingSeed
  64+ C124 21 BB 9F                             ld		hl,name_expanded
  65+ C127 CD 16 9F                             call	CapitaliseString
  66+ C12A 21 BB 9F                             ld		hl, name_expanded
  67+ C12D 3E FF                                ld      a,$FF
  68+ C12F C9                                   ret
  69+ C130              ;----------------------------------------------------------------------------------------------------------------------------------
  70+ C130              SRM_update_hyperspace_cross_hair:
  71+ C130 ED 4B CD 93                          ld		bc,(TargetPlanetX)              ; bc = selected jump
  72+ C134 ED 5B CB 93                          ld		de,(PresentSystemX)
  73+ C138 79                                   ld		a,c
  74+ C139 93                                   sub		e
  75+ C13A F2 4B C1                             jp      p,.NoFlipX
  76+ C13D ED 44                                neg
  77+ C13F CB 27                                sla		a
  78+ C141 CB 27                                sla		a
  79+ C143 4F                                   ld      c,a
  80+ C144 3E 80                                ld      a,src_x_centre
  81+ C146 91                                   sub     c
  82+ C147 4F                                   ld      c,a
  83+ C148 C3 52 C1                             jp      .fixY
  84+ C14B CB 27        .NoFlipX:               sla		a
  85+ C14D CB 27                                sla		a
  86+ C14F C6 80                                add		a,src_x_centre
  87+ C151 4F                                   ld      c,a
  88+ C152 78           .fixY:                  ld		a,b
  89+ C153 92                                   sub		d
  90+ C154 F2 63 C1                             jp      p,.NoFlipY
  91+ C157 ED 44                                neg
  92+ C159 CB 27                                sla     a
  93+ C15B 47                                   ld      b,a
  94+ C15C 3E 60                                ld      a,src_y_centre
  95+ C15E 90                                   sub     b
  96+ C15F 47                                   ld      b,a
  97+ C160 C3 68 C1                             jp      .RedrawSprite
  98+ C163 CB 27        .NoFlipY                sla		a
  99+ C165 C6 60                                add		a,src_y_centre
 100+ C167 47                                   ld		b,a
 101+ C168              .RedrawSprite:          MMUSelectSpriteBank
 101+ C168 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 102+ C16C CD A6 E0                             call	sprite_lhc_move
 103+ C16F CD A1 C1                             call    src_name_current
 104+ C172 C9                                   ret
 105+ C173
 106+ C173 26 08        src_clear_name_area:    ld      h,8
 107+ C175 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 108+ C178 01 0A A8                             ld      bc,$A80A
 109+ C17B E5           .ClearLoop:             push    hl
 110+ C17C D5                                   push    de
 111+ C17D C5                                   push    bc
 112+ C17E                                      MMUSelectLayer2
 112+ C17E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 113+ C182 CD 62 E2                             call	l2_draw_horz_line
 114+ C185 C1                                   pop     bc
 115+ C186 D1                                   pop     de
 116+ C187 E1                                   pop     hl
 117+ C188 04                                   inc     b
 118+ C189 25                                   dec     h
 119+ C18A 20 EF                                jr      nz,.ClearLoop
 120+ C18C C9                                   ret
 121+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 122+ C18D 3A B8 93     src_system_undercursor: ld      a,(Galaxy)
 123+ C190                                      MMUSelectGalaxyA
 123+ C190 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 124+ C193 ED 4B CD 93                          ld      bc,(TargetPlanetX)
 125+ C197 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 126+ C19B CD 55 FC                             call    galaxy_system_under_cursor
 127+ C19E FE 00                                cp      0
 128+ C1A0 C8                                   ret     z
 129+ C1A1 CD 0D C1     src_name_current:       call    src_get_name
 130+ C1A4 FE 00                                cp      0
 131+ C1A6 C8                                   ret     z
 132+ C1A7 E5                                   push    hl
 133+ C1A8 F5                                   push    af
 134+ C1A9 CD 73 C1                             call    src_clear_name_area
 135+ C1AC F1                                   pop     af
 136+ C1AD E1                                   pop     hl
 137+ C1AE 01 0A A8                             ld      bc,$A80A
 138+ C1B1 1E FF                                ld		e,$FF
 139+ C1B3                                      MMUSelectLayer2
 139+ C1B3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 140+ C1B7 CD CF E1                             call	l2_print_7at
 141+ C1BA CD CD C1                             call    src_calc_distance
 142+ C1BD 21 1A C0                             ld      hl,src_distance
 143+ C1C0 01 0A B0                             ld      bc,$B00A
 144+ C1C3 1E FF                                ld		e,$FF
 145+ C1C5                                      MMUSelectLayer2
 145+ C1C5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 146+ C1C9 CD CF E1                             call	l2_print_7at
 147+ C1CC C9                                   ret
 148+ C1CD              ;----------------------------------------------------------------------------------------------------------------------------------
 149+ C1CD 3A B8 93     src_calc_distance:      ld      a,(Galaxy)                                      ; Default in 0 distance
 150+ C1D0                                      MMUSelectGalaxyA
 150+ C1D0 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 151+ C1D3 11 24 C0                             ld      de,src_dist_amount
 152+ C1D6 21 36 C0                             ld      hl,src_default_dist
 153+ C1D9 ED A0                                ldi
 154+ C1DB ED A0                                ldi
 155+ C1DD ED A0                                ldi
 156+ C1DF ED A0                                ldi
 157+ C1E1 ED A0                                ldi
 158+ C1E3 ED 4B CB 93                          ld      bc,(PresentSystemX)
 159+ C1E7 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 160+ C1EB ED 4B CD 93                          ld      bc,(TargetPlanetX)
 161+ C1EF ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 162+ C1F3 CD E8 FB                             call    galaxy_find_distance                            ; get distance into HL
 163+ C1F6 DD 2A AD 93                          ld      ix,(Distance)
 164+ C1FA 11 00 00                             ld      de,0
 165+ C1FD FD 21 3B C0                          ld      iy,src_distance_val
 166+ C201 CD 79 A7                             call    DispDEIXtoIY                                    ; use DEIX as distance and write to string at location IY
 167+ C204 FD E5                                push    iy
 168+ C206 E1                                   pop     hl                                              ; hl = iy
 169+ C207 11 3B C0                             ld      de,src_distance_val
 170+ C20A 7E                                   ld		a,(hl)				                            ;Push last digit to post decimal
 171+ C20B 32 28 C0                             ld		(src_fraction),a
 172+ C20E 2B                                   dec     hl
 173+ C20F CD 9D A5                             call    compare16HLDE
 174+ C212 38 18                                jr      c,.done_number
 175+ C214 7E                                   ld      a,(hl)
 176+ C215 32 26 C0                             ld      (src_dist_amount+2),a
 177+ C218 2B                                   dec     hl
 178+ C219 CD 9D A5                             call    compare16HLDE
 179+ C21C 38 0E                                jr      c,.done_number
 180+ C21E 7E                                   ld      a,(hl)
 181+ C21F 32 25 C0                             ld      (src_dist_amount+1),a
 182+ C222 2B                                   dec     hl
 183+ C223 CD 9D A5                             call    compare16HLDE
 184+ C226 38 04                                jr      c,.done_number
 185+ C228 7E                                   ld      a,(hl)
 186+ C229 32 24 C0                             ld      (src_dist_amount),a
 187+ C22C C9           .done_number:           ret
 188+ C22D
 189+ C22D 00 00        PosScan1                DW      0
 190+ C22F 00 00        PosScan2                DW      0
 191+ C231              ; bc = row col, d = xlength e = y length
 192+ C231              ; Check logic simplies to , if 1 = bc and 2 = de:
 193+ C231              ; 12   X1            X2    OK         2 LT X1
 194+ C231              ; 1    X1  2         X2    FAIL       1 LT X1 && 2 GT X1 && 2 LT X2
 195+ C231              ;      X1  12        X2    FAIL       1 GT X1 && 1 LT X2 && 2 GT X1 && 2 LT X2
 196+ C231              ;      X1  1         X2 2  FAIL       1 GT X1 && 1 LT X2 && 2 GT X2
 197+ C231              ;      X1            X2 12 OK         1 GT X2
 198+ C231 16 07        FreeSlotCheck:          ld      d,7
 199+ C233 ED 30                                mul
 200+ C235 79                                   ld      a,c
 201+ C236 83                                   add     e
 202+ C237 30 02                                jr      nc,.NoOverflow
 203+ C239 3E FF        .Overflow:              ld      a,$FF
 204+ C23B 5F           .NoOverflow:            ld      e,a                     ; e now equals max length in pixels
 205+ C23C 78                                   ld      a,b
 206+ C23D C6 08                                add     8
 207+ C23F 57                                   ld      d,a                     ; e = max height
 208+ C240 ED 43 2D C2                          ld      (PosScan1),bc
 209+ C244 ED 53 2F C2                          ld      (PosScan2),de
 210+ C248 DD 21 41 C0  .CheckBoxes:            ld      ix,src_printed_text
 211+ C24C 3A C1 C0                             ld      a,(src_buffer_size)
 212+ C24F FE 00                                cp      0
 213+ C251 28 3C                                jr      z,.SafeToPrint
 214+ C253 60                                   ld      h,b                     ; h will substite for row b as b is used in dnjz
 215+ C254 47                                   ld      b,a
 216+ C255 DD 7E 02     .CheckBoxLoop:          ld      a,(ix+2)
 217+ C258 FE 00                                cp      0                       ; zerolength, not applicable
 218+ C25A 28 29                                jr      z,.NoBox
 219+ C25C 3A 2D C2     .CheckRow:              ld      a,(PosScan1)
 220+ C25F 3C                                   inc     a
 221+ C260                                      JumpIfAGTENusng (ix+2), .NoBox  ; X1 >= BottomLeftX
 221+ C260 DD BE 02    >                        cp     (ix+2)
 221+ C263 D2 85 C2    >                        jp		nc,.NoBox
 222+ C266 3A 2F C2                             ld      a,(PosScan2)
 223+ C269                                      JumpIfALTNusng (ix+0),  .NoBox   ; X2 <= TopRightX
 223+ C269 DD BE 00    >                        cp      (ix+0)
 223+ C26C DA 85 C2    >                        jp		c, .NoBox
 224+ C26F 3A 2E C2     .SafeToPrintX:          ld      a,(PosScan1+1)
 225+ C272 3C                                   inc     a
 226+ C273                                      JumpIfAGTENusng (ix+3), .NoBox  ; Y1 >= BottomLeftY
 226+ C273 DD BE 03    >                        cp     (ix+3)
 226+ C276 D2 85 C2    >                        jp		nc,.NoBox
 227+ C279 3A 30 C2                             ld      a,(PosScan2+1)
 228+ C27C                                      JumpIfALTNusng (ix+1),  .NoBox  ; Y2 <= TopRightY
 228+ C27C DD BE 01    >                        cp      (ix+1)
 228+ C27F DA 85 C2    >                        jp		c, .NoBox
 229+ C282 3E FF        .MatchedBox:            ld      a,$FF
 230+ C284 C9                                   ret
 231+ C285 DD 23        .NoBox:                 inc     ix
 232+ C287 DD 23                                inc     ix
 233+ C289 DD 23                                inc     ix
 234+ C28B DD 23                                inc     ix
 235+ C28D 10 C6                                djnz    .CheckBoxLoop
 236+ C28F 21 41 C0     .SafeToPrint:           ld      hl,src_printed_text
 237+ C292 3A C1 C0                             ld      a,(src_buffer_size)
 238+ C295 57                                   ld      d,a
 239+ C296 1E 04                                ld      e,4
 240+ C298 ED 30                                mul
 241+ C29A 19                                   add     hl,de
 242+ C29B ED 5B 2D C2                          ld      de,(PosScan1)
 243+ C29F 73 23 72 2B                          ld      (hl),de
 244+ C2A3 23                                   inc     hl
 245+ C2A4 23                                   inc     hl
 246+ C2A5 ED 5B 2F C2                          ld      de,(PosScan2)
 247+ C2A9 73 23 72 2B                          ld      (hl),de
 248+ C2AD 21 C1 C0                             ld      hl,src_buffer_size
 249+ C2B0 34                                   inc     (hl)
 250+ C2B1 AF                                   xor     a
 251+ C2B2 C9                                   ret
 252+ C2B3
 253+ C2B3 CD BD 97     src_label_ssytem:       call	copy_system_to_working
 254+ C2B6 3A B8 93                             ld      a,(Galaxy)
 255+ C2B9                                      MMUSelectGalaxyA
 255+ C2B9 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 256+ C2BC CD 81 F6                             call	GetDigramWorkingSeed
 257+ C2BF 21 BB 9F                             ld		hl,name_expanded
 258+ C2C2 CD 16 9F                             call	CapitaliseString
 259+ C2C5 3A 18 C0                             ld		a,(local_name_row)
 260+ C2C8 D6 05                                sub		local_label_shift_y
 261+ C2CA 47                                   ld		b,a					    ; b = effective pixel row
 262+ C2CB 3A 19 C0                             ld		a,(local_name_col)
 263+ C2CE C6 03                                add		a,local_label_shift_x
 264+ C2D0 4F                                   ld		c,a                     ; c = effective pixel col
 265+ C2D1 1E 00        .GetStringName:         ld      e,0
 266+ C2D3 21 BB 9F                             ld      hl,name_expanded
 267+ C2D6 7E           .getStringLoop:         ld      a,(hl)
 268+ C2D7 23                                   inc     hl
 269+ C2D8 1C                                   inc     e
 270+ C2D9 FE 00                                cp      0                       ; String must have a terminator to work
 271+ C2DB 20 F9                                jr      nz,.getStringLoop
 272+ C2DD 16 08                                ld      d,8
 273+ C2DF C5                                   push    bc
 274+ C2E0 CD 31 C2                             call    FreeSlotCheck           ; first attemps
 275+ C2E3 C1                                   pop     bc
 276+ C2E4 FE 00                                cp      0
 277+ C2E6 28 19                                jr      z,.OKToPrint
 278+ C2E8 78                                   ld      a,b
 279+ C2E9 C6 08                                add     8
 280+ C2EB 47                                   ld      b,a
 281+ C2EC C5                                   push    bc
 282+ C2ED CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 283+ C2F0 C1                                   pop     bc
 284+ C2F1 FE 00                                cp      0
 285+ C2F3 28 0C                                jr      z,.OKToPrint
 286+ C2F5 78                                   ld      a,b
 287+ C2F6 D6 10                                sub     16
 288+ C2F8 47                                   ld      b,a
 289+ C2F9 C5                                   push    bc
 290+ C2FA CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 291+ C2FD C1                                   pop     bc
 292+ C2FE FE 00                                cp      0
 293+ C300 C0                                   ret     nz
 294+ C301 1E FF        .OKToPrint:             ld		e,$FF
 295+ C303 21 BB 9F                             ld		hl,name_expanded
 296+ C306                                      MMUSelectLayer2
 296+ C306 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 297+ C30A CD CF E1                             call	l2_print_7at
 298+ C30D C9                                   ret
 299+ C30E
 300+ C30E              name_if_possible:
 301+ C30E 3A 18 C0     SRCpixelRowToRefRow:    ld		a,(local_name_row)
 302+ C311 D6 05                                sub		local_label_shift_y
 303+ C313 47                                   ld		b,a					; b = effective pixel row
 304+ C314 CB 3F                                srl		a
 305+ C316 CB 3F                                srl		a
 306+ C318 CB 3F                                srl		a					; divide by 8 to get character row
 307+ C31A                                  ;	sub		2					; don;t write over header TODO tweaks
 308+ C31A 21 7A 92                             ld		hl,IndexedWork
 309+ C31D ED 31                                add		hl,a
 310+ C31F 7E                                   ld		a,(hl)
 311+ C320 FE 00                                cp		0
 312+ C322 20 04                                jr		nz, SRCtryAbove		; if its not empty don't print *(need to test +-1 row TODO)
 313+ C324 36 01                                ld		(hl),1				; flag as in use
 314+ C326 18 12                                jr		SRCFoundRow
 315+ C328 2B           SRCtryAbove:            dec		hl
 316+ C329 7E                                   ld		a,(hl)
 317+ C32A FE 00                                cp		0
 318+ C32C 20 04                                jr		nz, SRCtryBelow		; if its not empty don't print *(need to test +-1 row TODO)
 319+ C32E 36 01                                ld		(hl),1				; flag as in use
 320+ C330 18 08                                jr		SRCFoundRow
 321+ C332 23           SRCtryBelow:            inc		hl
 322+ C333 23                                   inc		hl
 323+ C334 7E                                   ld		a,(hl)
 324+ C335 FE 00                                cp		0
 325+ C337 C8                                   ret		z
 326+ C338 36 01                                ld		(hl),1				; flag as in use
 327+ C33A CD BD 97     SRCFoundRow:            call	copy_system_to_working
 328+ C33D 3A B8 93     SRCSmallSizeName:       ld      a,(Galaxy)
 329+ C340                                      MMUSelectGalaxyA
 329+ C340 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 330+ C343 CD 81 F6                             call	GetDigramWorkingSeed
 331+ C346 21 BB 9F     SRCCapitaliseName:      ld		hl,name_expanded
 332+ C349 CD 16 9F                             call	CapitaliseString
 333+ C34C 21 BB 9F     SRCPrintName:           ld		hl, name_expanded
 334+ C34F 3A 18 C0                             ld		a,(local_name_row)
 335+ C352 D6 05                                sub		local_label_shift_y
 336+ C354 47                                   ld		b,a					; b = effective pixel row
 337+ C355 3A 19 C0                             ld		a,(local_name_col)
 338+ C358 C6 03                                add		a,local_label_shift_x
 339+ C35A 4F                                   ld		c,a
 340+ C35B 1E FF                                ld		e,$FF
 341+ C35D                                      MMUSelectLayer2
 341+ C35D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 342+ C361 CD CF E1                             call	l2_print_7at
 343+ C364 C9                                   ret
 344+ C365
 345+ C365 AF           plot_local_stars:       xor		a
 346+ C366 32 B9 92                             ld		(XSAV),a
 347+ C369 DD 21 16 E0                          ld      ix,galaxy_data
 348+ C36D 32 C1 C0                             ld      (src_buffer_size),a
 349+ C370 21 41 C0     SRCClearNameList:       ld		hl,src_printed_text
 350+ C373 11 80 00                             ld		de,src_fill_buffer_size
 351+ C376 CD 17 8F                             call	memfill_dma
 351+ C379
 352+ C379 AF           SRCCounterLoop:         xor		a
 353+ C37A 3A B8 93                             ld      a,(Galaxy)
 354+ C37D                                      MMUSelectGalaxyA
 354+ C37D ED 92 57    >                     nextreg GalaxyDataMMU,       a
 355+ C380 DD E5                                push    ix
 356+ C382 DD E5                                push    ix
 357+ C384 E1                                   pop     hl
 358+ C385 11 A0 92                             ld      de,SystemSeed
 359+ C388 CD 90 97                             call    copy_seed
 360+ C38B 3A A1 92                             ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 361+ C38E 4F                                   ld		c,a
 362+ C38F 3A CC 93     SRCcalcLocaldy:         ld		a,(PresentSystemY)
 363+ C392 47                                   ld		b,a								; so b holds Y ccord
 364+ C393 79                                   ld		a,c
 365+ C394 90                                   sub		b
 366+ C395 CB 7F                                bit		7,a
 367+ C397 28 02                                jr		z,SRCpositivedy
 368+ C399 ED 44        SRCnegativedy:          neg
 369+ C39B FE 26        SRCpositivedy:          cp		local_max_range_y
 370+ C39D 30 48                                jr		nc,SRCtoofar
 371+ C39F 3A A3 92     SRCcalcLocaldx:         ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 372+ C3A2 4F                                   ld		c,a
 373+ C3A3 3A CB 93                             ld		a,(PresentSystemX)
 374+ C3A6 47                                   ld		b,a								; so b holds Y ccord
 375+ C3A7 79                                   ld		a,c
 376+ C3A8 90                                   sub		b
 377+ C3A9 CB 7F                                bit		7,a
 378+ C3AB 28 02                                jr		z,SRCpositivedx
 379+ C3AD ED 44        SRCnegativedx:          neg
 380+ C3AF FE 14        SRCpositivedx:          cp		local_max_range_x
 381+ C3B1 30 34                                jr		nc,SRCtoofar
 382+ C3B3 3A A1 92     SRCOKToPlot             ld		a,(SystemSeed+1)
 383+ C3B6 21 CC 93                             ld		hl,PresentSystemY
 384+ C3B9 96                                   sub		(hl)
 385+ C3BA CB 27                                sla		a								; * 2
 386+ C3BC C6 60                                add		src_y_centre
 387+ C3BE 32 18 C0                             ld		(local_name_row),a
 388+ C3C1 47                                   ld		b,a
 389+ C3C2 3A A3 92                             ld		a,(SystemSeed+3)
 390+ C3C5 21 CB 93                             ld		hl,PresentSystemX
 391+ C3C8 96                                   sub		(hl)
 392+ C3C9 CB 27                                sla		a
 393+ C3CB CB 27                                sla		a								; * 4
 394+ C3CD C6 80                                add		src_x_centre
 395+ C3CF 32 19 C0                             ld		(local_name_col),a
 396+ C3D2 4F                                   ld		c,a
 397+ C3D3 3A A5 92                             ld		a,(SystemSeed+5)
 398+ C3D6 E6 01                                and		$01
 399+ C3D8 C6 02                                add		a,2
 400+ C3DA 57                                   ld		d,a
 401+ C3DB 1E D8                                ld		e,local_chart_star_colour
 402+ C3DD                                      MMUSelectLayer2
 402+ C3DD ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 403+ C3E1 CD 11 E8                             call	l2_draw_circle_fill
 404+ C3E4                                     ; call    src_get_name
 405+ C3E4 CD B3 C2                             call	src_label_ssytem
 406+ C3E7 E1           SRCtoofar:              pop     hl
 407+ C3E8 ED 34 08 00                          add     hl,8
 408+ C3EC E5                                   push    hl
 409+ C3ED DD E1                                pop     ix
 410+ C3EF 3A B9 92                             ld		a,(XSAV)
 411+ C3F2 3D                                   dec		a
 412+ C3F3 FE 00                                cp		0
 413+ C3F5 C8                                   ret		z
 414+ C3F6 32 B9 92                             ld		(XSAV),a
 415+ C3F9 C3 79 C3                             jp		SRCCounterLoop
 416+ C3FC              ;----------------------------------------------------------------------------------------------------------------------------------
 417+ C3FC              draw_local_chart_menu:  INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C3FC
   2++C3FC                  MMUSelectLayer1
   2++C3FC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C400 CD 80 E0     	call	l1_cls
   4++C403 3E 07        	ld		a,7
   5++C405 CD 9B E0     	call	l1_attr_cls_to_a
   6++C408                  MMUSelectLayer2
   6++C408 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C40C CD 08 E0     	call    asm_l2_double_buffer_off
   8++C40F CD C9 E0     	call	l2_cls	; Get some space
   9++C412              	MMUSelectSpriteBank
   9++C412 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C416 CD 6E E4     	call    sprite_cls_cursors
  11++C419
  12++C419
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 418+ C419 3E 80                                ld      a,$80
 419+ C41B 32 C0 92                             ld      (MenuIdMax),a
 420+ C41E 2A CB 93                             ld		hl,(PresentSystemX)
 421+ C421 22 CD 93                             ld		(TargetPlanetX),hl              ; bc = selected jump
 422+ C424 01 01 01     SRCDrawbox:             ld		bc,$0101
 423+ C427 11 FD BE                             ld		de,$BEFD
 424+ C42A 3E C0                                ld		a,$C0
 425+ C42C                                      MMUSelectLayer2
 425+ C42C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 426+ C430 CD F6 E1                             call	l2_draw_box
 427+ C433 01 01 0A                             ld		bc,$0A01
 428+ C436 11 C0 FE                             ld		de,$FEC0
 429+ C439                                      MMUSelectLayer2
 429+ C439 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 430+ C43D CD 62 E2                             call	l2_draw_horz_line
 431+ C440 3E 0C        SRCStaticText:          ld		a,short_range_header
 432+ C442 CD 36 9F                             call	expandTokenToString
 433+ C445 06 01                                ld		b,1
 434+ C447 21 10 C0                             ld		hl,short_range_boiler_text
 435+ C44A CD C2 C0                             call	SRM_print_boiler_text
 436+ C44D CD 8A 97     SRCSetUpChart:          call	copy_galaxy_to_system
 437+ C450 CD 65 C3                             call	plot_local_stars
 438+ C453 CD DD C0     .CircleandCrosshair:    call	SRM_draw_chart_circle_and_crosshair
 439+ C456 CD F9 C0                             call	SRM_draw_hyperspace_cross_hair
 440+ C459 C9                                   ret
 441+ C45A              ;----------------------------------------------------------------------------------------------------------------------------------
 442+ C45A 3A BE 92     local_chart_cursors:    ld     a,(CursorKeysPressed)
 443+ C45D FE 00                                cp      0
 444+ C45F C8                                   ret     z
 445+ C460 17                                   rla
 446+ C461 DC 79 C4                             call   c,src_UpPressed
 447+ C464 17                                   rla
 448+ C465 DC 89 C4                             call   c,src_DownPressed
 449+ C468 17                                   rla
 450+ C469 DC 99 C4                             call   c,src_LeftPressed
 451+ C46C 17                                   rla
 452+ C46D DC A9 C4                             call   c,src_RightPressed
 453+ C470 17                                   rla
 454+ C471 DC B9 C4                             call   c,src_HomePressed
 455+ C474 17                                   rla
 456+ C475 DC C3 C4                             call   c,src_RecenterPressed
 457+ C478 C9                                   ret
 458+ C479              ;----------------------------------------------------------------------------------------------------------------------------------
 459+ C479 3A CE 93     src_UpPressed:          ld     a,(TargetPlanetY)
 460+ C47C                                      JumpIfAEqNusng 1,src_BoundsLimit
 460+ C47C FE 01       >                cp     1
 460+ C47E CA DA C4    >                jp      z,src_BoundsLimit
 461+ C481 3D                                   dec     a
 462+ C482 32 CE 93                             ld      (TargetPlanetY),a
 463+ C485 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 464+ C488 C9                                   ret
 465+ C489              ;----------------------------------------------------------------------------------------------------------------------------------
 466+ C489 3A CE 93     src_DownPressed:        ld     a,(TargetPlanetY)
 467+ C48C                                      JumpIfAEqNusng 255,src_BoundsLimit
 467+ C48C FE FF       >                cp     255
 467+ C48E CA DA C4    >                jp      z,src_BoundsLimit
 468+ C491 3C                                   inc    a
 469+ C492 32 CE 93                             ld      (TargetPlanetY),a
 470+ C495 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 471+ C498 C9                                   ret
 472+ C499              ;----------------------------------------------------------------------------------------------------------------------------------
 473+ C499 3A CD 93     src_LeftPressed:        ld     a,(TargetPlanetX)
 474+ C49C                                      JumpIfAEqNusng 2,src_BoundsLimit
 474+ C49C FE 02       >                cp     2
 474+ C49E CA DA C4    >                jp      z,src_BoundsLimit
 475+ C4A1 3D                                   dec    a
 476+ C4A2 32 CD 93                             ld      (TargetPlanetX),a
 477+ C4A5 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 478+ C4A8 C9                                   ret
 479+ C4A9              ;----------------------------------------------------------------------------------------------------------------------------------
 480+ C4A9 3A CD 93     src_RightPressed:       ld     a,(TargetPlanetX)
 481+ C4AC                                      JumpIfAEqNusng 253,src_BoundsLimit
 481+ C4AC FE FD       >                cp     253
 481+ C4AE CA DA C4    >                jp      z,src_BoundsLimit
 482+ C4B1 3C                                   inc    a
 483+ C4B2 32 CD 93                             ld      (TargetPlanetX),a
 484+ C4B5 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 485+ C4B8 C9                                   ret
 486+ C4B9              ;----------------------------------------------------------------------------------------------------------------------------------
 487+ C4B9 2A CB 93     src_HomePressed:        ld      hl,(PresentSystemX)
 488+ C4BC 22 CD 93                             ld      (TargetPlanetX),hl
 489+ C4BF CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 490+ C4C2 C9                                   ret
 491+ C4C3              ;----------------------------------------------------------------------------------------------------------------------------------
 492+ C4C3 DD 01        src_RecenterPressed:    break
 493+ C4C5 3A B8 93                             ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 494+ C4C8                                      MMUSelectGalaxyA
 494+ C4C8 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 495+ C4CB ED 4B CD 93                          ld      bc,(TargetPlanetX)
 496+ C4CF CD 60 FB                             call    find_nearest_to_bc
 497+ C4D2 ED 43 CD 93                          ld      (TargetPlanetX),bc
 498+ C4D6 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 499+ C4D9 C9                                   ret
 500+ C4DA              ;----------------------------------------------------------------------------------------------------------------------------------
 501+ C4DA AF           src_BoundsLimit:        xor     a
 502+ C4DB C9                                   ret
 503+ C4DC
# file closed: ./Menus/short_range_chart_menu.asm
1036  C4DC              ; Bank 51
1037  C4DC
1038  C4DC                  SLOT    MenuGalChtAddr
1039  C4DC                  PAGE    BankMenuGalCht
1040  C4DC              	ORG     MenuGalChtAddr
1041  C000                  INCLUDE "./Menus//galactic_chart_menu.asm"
# file opened: ./Menus//galactic_chart_menu.asm
   1+ C000
   2+ C000 47 61 6C 61  galactic_chart_page_marker  DB "GalacticChrtPG51"
   2+ C004 63 74 69 63
   2+ C008 43 68 72 74
   2+ C00C 50 47 35 31
   3+ C010 40 02 F5 9E  galactic_chart_boiler_text	DW $0240,TextBuffer
   4+ C014              galactic_chart_header		equ 13
   5+ C014              galactic_star_colour		equ 216
   6+ C014              galactic_star_colour2		equ 108
   7+ C014              galactic_chart_y_offset		equ $18
   8+ C014 44 69 73 74  galactic_chart_distance     DB "Distance: "
   8+ C018 61 6E 63 65
   8+ C01C 3A 20
   9+ C01E 30 30 30     galactic_chart_dist_amount  DB "000"
  10+ C021 2E           galactic_chart_decimal      DB "."
  11+ C022 30           galactic_chart_fraction     DB "0"
  12+ C023 20 4C 69 67  galactic_chart_dis_ly       DB " Light Years",0
  12+ C027 68 74 20 59
  12+ C02B 65 61 72 73
  12+ C02F 00
  13+ C030 20 20 30 2E  galactic_default_dist       DB "  0.0",0
  13+ C034 30 00
  14+ C036
  15+ C036 00 00 00...  galactic_distance           DS  6
  16+ C03C
  17+ C03C              galactic_find_position      equ $B008
  18+ C03C 46 69 6E 64  galactic_find_message       DB "Find: ",0
  18+ C040 3A 20 00
  19+ C043              galactic_find_text          equ $B038
  20+ C043 20 20 20 20  galactic_blank_message      DB  "                    ",0
  20+ C047 20 20 20 20
  20+ C04B 20 20 20 20
  20+ C04F 20 20 20 20
  20+ C053 20 20 20 20
  20+ C057 00
  21+ C058 2A 2A 2D 2D  galactic_find_no_match      DB "**-- System Not Found --**",0
  21+ C05C 20 53 79 73
  21+ C060 74 65 6D 20
  21+ C064 4E 6F 74 20
  21+ C068 46 6F 75 6E
  21+ C06C 64 20 2D 2D
  21+ C070 2A 2A 00
  22+ C073 20 20 2A 2A  galactic_find_match         DB "  **-- System Found --**  ",0
  22+ C077 2D 2D 20 53
  22+ C07B 79 73 74 65
  22+ C07F 6D 20 46 6F
  22+ C083 75 6E 64 20
  22+ C087 2D 2D 2A 2A
  22+ C08B 20 20 00
  23+ C08E
  24+ C08E              GCM_print_boiler_text:
  25+ C08E                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C08E
   2++C08E              ;">print_boilder_text hl = text structure, b = message count"
   3++C08E              .BoilerTextLoop:
   4++C08E C5           	push		bc			; Save Message Count loop value
   5++C08F 4E           	ld			c,(hl)		; Get Row into b
   6++C090 23           	inc			hl
   7++C091 46           	ld			b,(hl)		; Get Col into b
   8++C092 23           	inc			hl
   9++C093 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C094 23           	inc			hl
  11++C095 56           	ld			d,(hl)		; Get text address Hi into E
  12++C096 23           	inc			hl
  13++C097 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C098 EB           	ex			de,hl		; now hl = address of text data
  15++C099 1E FF        	ld			e,txt_status_colour
  16++C09B C5           	push		bc
  17++C09C D1           	pop			de
  18++C09D                  MMUSelectLayer1
  18++C09D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C0A1 CD C8 E0     	call		l1_print_at
  20++C0A4 E1           	pop			hl
  21++C0A5 C1           	pop			bc
  22++C0A6 10 E6        	djnz		.BoilerTextLoop
  23++C0A8 C9           	ret
  24++C0A9
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  26+ C0A9              GCM_draw_chart_circle_and_crosshair:
  27+ C0A9 ED 4B CB 93  	ld		bc,(PresentSystemX)				; bc = present system
  28+ C0AD              .OnGalacticChart:
  29+ C0AD CB 38        	srl		b								; but row is row / 2
  30+ C0AF C5           	push  	bc
  31+ C0B0              	MMUSelectSpriteBank
  31+ C0B0 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  32+ C0B4 CD 65 E0     	call	sprite_galactic_cursor
  33+ C0B7 C1           	pop		bc
  34+ C0B8 78           	ld		a,b
  35+ C0B9 C6 18        	add		a,galactic_chart_y_offset
  36+ C0BB 47           	ld		b,a
  37+ C0BC 3A F7 96     	ld		a,(Fuel)
  38+ C0BF CB 3F        	srl		a
  39+ C0C1 CB 3F        	srl		a								; divide range of fuel by 4 for galactic chart
  40+ C0C3 57           	ld		d,a
  41+ C0C4 1E FF        	ld		e,$FF
  42+ C0C6              	MMUSelectLayer2
  42+ C0C6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  43+ C0CA CD 58 E7     	call	l2_draw_circle
  44+ C0CD C9           	ret
  45+ C0CE              ; TODO MOVE CURSOR CODE
  46+ C0CE
  47+ C0CE              GCM_draw_hyperspace_cross_hair:
  48+ C0CE ED 4B CD 93  	ld		bc,(TargetPlanetX)              ; bc = selected jump
  49+ C0D2              .OnGalacticChart:
  50+ C0D2 CB 38        	srl		b								; but row is row / 2
  51+ C0D4              	MMUSelectSpriteBank
  51+ C0D4 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  52+ C0D8 CD 71 E0     	call	sprite_galactic_hyper_cursor
  53+ C0DB C9           	ret
  54+ C0DC
  55+ C0DC
  56+ C0DC              plot_gc_stars:
  57+ C0DC AF           	xor		a
  58+ C0DD 32 B9 92     	ld		(XSAV),a
  59+ C0E0 DD 21 16 E0      ld      ix,galaxy_data
  60+ C0E4              .CounterLoop:
  61+ C0E4 3A B8 93         ld      a,(Galaxy)
  62+ C0E7                  MMUSelectGalaxyA
  62+ C0E7 ED 92 57    >                     nextreg GalaxyDataMMU,       a
  63+ C0EA DD E5            push    ix
  64+ C0EC E1               pop     hl
  65+ C0ED 11 A0 92         ld      de,SystemSeed
  66+ C0F0 CD 90 97     	call    copy_seed
  67+ C0F3 3A A3 92     	ld		a,(SystemSeed+3)				; QQ15+3 \ seed w1_h is Xcoord of star
  68+ C0F6 4F           	ld		c,a								; c = X Coord
  69+ C0F7 3A A1 92     	ld		a,(SystemSeed+1)
  70+ C0FA CB 3F        	srl		a								; Ycoord /2
  71+ C0FC C6 18        	add		a,galactic_chart_y_offset		; add offset to Y coord of star
  72+ C0FE 47           	ld		b,a								; b = row
  73+ C0FF C5           	push	bc
  74+ C100 3E D8        	ld		a,galactic_star_colour
  75+ C102                  MMUSelectLayer2
  75+ C102 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  76+ C106 CD FF E0     	call	l2_plot_pixel
  77+ C109 C1           	pop		bc
  78+ C10A 3A A4 92     	ld		a,(SystemSeed+4)
  79+ C10D F6 50        	or		$50								; minimum distance away
  80+ C10F FE 90        	cp		$90
  81+ C111 30 0A        	jr		nc,.NoSecondPixel
  82+ C113              .SecondPixel:
  83+ C113 0C           	inc		c
  84+ C114 3E 6C        	ld		a,galactic_star_colour2
  85+ C116                  MMUSelectLayer2
  85+ C116 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  86+ C11A CD FF E0     	call	l2_plot_pixel
  87+ C11D              .NoSecondPixel:
  88+ C11D DD E5            push    ix
  89+ C11F E1               pop     hl
  90+ C120 ED 34 08 00      add     hl,8
  91+ C124 E5               push    hl
  92+ C125 DD E1            pop     ix
  93+ C127 3A B9 92     	ld		a,(XSAV)
  94+ C12A 3D           	dec		a
  95+ C12B FE 00        	cp		0
  96+ C12D C8           	ret		z
  97+ C12E 32 B9 92     	ld		(XSAV),a
  98+ C131 18 B1        	jr		.CounterLoop
  99+ C133
 100+ C133 2A 2A 2A 2A  GALDP       DB "********++++++++"
 100+ C137 2A 2A 2A 2A
 100+ C13B 2B 2B 2B 2B
 100+ C13F 2B 2B 2B 2B
 101+ C143              draw_galactic_chart_menu:
 102+ C143                  INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C143
   2++C143                  MMUSelectLayer1
   2++C143 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C147 CD 80 E0     	call	l1_cls
   4++C14A 3E 07        	ld		a,7
   5++C14C CD 9B E0     	call	l1_attr_cls_to_a
   6++C14F                  MMUSelectLayer2
   6++C14F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C153 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C156 CD C9 E0     	call	l2_cls	; Get some space
   9++C159              	MMUSelectSpriteBank
   9++C159 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C15D CD 6E E4     	call    sprite_cls_cursors
  11++C160
  12++C160
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 103+ C160 DD 2E DC         ld      ixl,$DC
 104+ C163 3E 40            ld      a,$40
 105+ C165 32 C0 92         ld      (MenuIdMax),a
 106+ C168 2A CB 93         ld      hl,(PresentSystemX)
 107+ C16B 22 CD 93         ld      (TargetPlanetX),hl
 108+ C16E CD 54 C4         call    gc_present_system               ; Set up the seed for present system
 109+ C171              .Drawbox:
 110+ C171 01 01 01     	ld		bc,$0101
 111+ C174 11 FD BE     	ld		de,$BEFD
 112+ C177 3E C0        	ld		a,$C0
 113+ C179              	MMUSelectLayer2
 113+ C179 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 114+ C17D CD F6 E1     	call	l2_draw_box
 115+ C180 01 01 0A     	ld		bc,$0A01
 116+ C183 11 C0 FE     	ld		de,$FEC0
 117+ C186 CD 62 E2     	call	l2_draw_horz_line
 118+ C189              .StaticText:
 119+ C189 3E 0D        	ld		a,galactic_chart_header
 120+ C18B CD 36 9F     	call	expandTokenToString
 121+ C18E 06 01        	ld		b,1
 122+ C190 21 10 C0     	ld		hl,galactic_chart_boiler_text
 123+ C193 CD 8E C0     	call	GCM_print_boiler_text
 124+ C196              .CircleandCrosshair:
 125+ C196 CD A9 C0     	call	GCM_draw_chart_circle_and_crosshair
 126+ C199 CD CE C0     	call	GCM_draw_hyperspace_cross_hair
 127+ C19C CD DC C0     	call	plot_gc_stars
 128+ C19F 3A B8 93         ld      a,(Galaxy)
 129+ C1A2                  MMUSelectGalaxyA
 129+ C1A2 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 130+ C1A5 ED 4B CD 93      ld      bc,(TargetPlanetX)
 131+ C1A9 ED 43 5B E8      ld      (GalaxyTargetSystem),bc
 132+ C1AD CD 55 FC         call    galaxy_system_under_cursor
 133+ C1B0 CD AC C3         call    gc_name_if_possible
 134+ C1B3 AF               xor     a
 135+ C1B4 32 B8 C1         ld      (gcFindInputMode),a
 136+ C1B7              ;IFDEF DOUBLEBUFFER
 137+ C1B7              ;    MMUSelectLayer2
 138+ C1B7              ;    call  l2_flip_buffers
 139+ C1B7              ;ENDIF
 140+ C1B7 C9           	ret
 141+ C1B8
 142+ C1B8              gcDelayVal        equ $0A
 143+ C1B8              gcBlinkVal        equ $10
 144+ C1B8
 145+ C1B8 00           gcFindInputMode   DB  0
 146+ C1B9 10           gcCursorBlink     DB  gcBlinkVal
 147+ C1BA 20           gcCursorChar      DB  " "
 148+ C1BB 00           gcEndOfString     DB  0
 149+ C1BC 00 00 00...  gcInputText       DS  31
 150+ C1DB 00 00 00...  gcInputDelay      DS  gcDelayVal
 151+ C1E5 00 00 00 00                    DB  0,0,0,0,0
 151+ C1E9 00
 152+ C1EA 00 00 00...  gcBlank           DS  32
 153+ C20A
 154+ C20A              ;----------------------------------------------------------------------------------------------------------------------------------
 155+ C20A              gc_display_find_text:
 156+ C20A 11 08 B0      	ld		de,galactic_find_position   ; Wipe input area on screen
 157+ C20D 21 3C C0         ld      hl,galactic_find_message
 158+ C210                  MMUSelectLayer1
 158+ C210 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 159+ C214 CD C8 E0     	call	l1_print_at
 160+ C217 C9               ret
 161+ C218              ;----------------------------------------------------------------------------------------------------------------------------------
 162+ C218              gc_display_find_string:
 163+ C218 11 BC C1         ld      de,gcInputText
 164+ C21B CD 0D 91         call    keyboard_copy_input_to_de
 165+ C21E 21 BA C1         ld      hl,gcCursorChar         ; Now just copy cursor char too
 166+ C221 ED A0            ldi                             ; Copy cursor to local
 167+ C223 3A 0A 91         ld      a,(InputCursor)
 168+ C226 3C               inc     a
 169+ C227 47               ld      b,a
 170+ C228 3E 14            ld      a,20
 171+ C22A 90               sub     b
 172+ C22B 47               ld      b,a
 173+ C22C 3E 20            ld      a," "
 174+ C22E              .SpacePad
 175+ C22E 12               ld      (de),a
 176+ C22F 13               inc     de
 177+ C230 10 FC            djnz    .SpacePad
 178+ C232 AF               xor     a
 179+ C233 12               ld      (de),a
 180+ C234 11 38 B0     	ld		de,galactic_find_text    ; Display text
 181+ C237 21 BC C1         ld      hl,gcInputText
 182+ C23A                  MMUSelectLayer1
 182+ C23A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 183+ C23E CD C8 E0     	call	l1_print_at
 184+ C241 C9               ret
 185+ C242
 186+ C242              blink_cursor:
 187+ C242 3A B9 C1         ld      a,(gcCursorBlink)
 188+ C245 3D               dec     a
 189+ C246 32 B9 C1         ld      (gcCursorBlink),a
 190+ C249 C0               ret     nz
 191+ C24A              .FlashCursor:
 192+ C24A 3E 10            ld      a,gcBlinkVal
 193+ C24C 32 B9 C1         ld      (gcCursorBlink),a
 194+ C24F 3A BA C1         ld      a,(gcCursorChar)
 195+ C252 FE 20            cp      " "
 196+ C254 28 06            jr      z,.ChangeToStar
 197+ C256 3E 20            ld      a," "
 198+ C258 32 BA C1         ld      (gcCursorChar),a
 199+ C25B C9               ret
 200+ C25C              .ChangeToStar:
 201+ C25C 3E 2A            ld      a,"*"
 202+ C25E 32 BA C1         ld      (gcCursorChar),a
 203+ C261 C9               ret
 204+ C262              ;----------------------------------------------------------------------------------------------------------------------------------
 205+ C262 3A B8 C1     loop_gc_menu:           ld      a,(gcFindInputMode)
 206+ C265 FE 00                                cp      0
 207+ C267 20 1C                                jr      nz,AlreadyInInputMode
 208+ C269 3E 4E        .StartFindCheck:        ld      a,c_Pressed_Find                        ;Is F pressed
 209+ C26B CD 9D 90                             call    is_key_pressed
 210+ C26E C0                                   ret     nz
 211+ C26F CD 20 91                             call    initInputText                           ;Initialise find input
 212+ C272 3E FF                                ld      a,$FF
 213+ C274 32 B8 C1                             ld      (gcFindInputMode),a                     ; Set input mode to FF
 214+ C277 3E 10                                ld      a,gcBlinkVal
 215+ C279 32 B9 C1                             ld      (gcCursorBlink),a                       ; Set up Blink
 216+ C27C 3E 0A                                ld      a,gcDelayVal
 217+ C27E 32 DB C1                             ld     (gcInputDelay),a                         ; And keyboard rescan delay
 218+ C281 CD 0A C2     .DisplayInputbar:       call    gc_display_find_text
 219+ C284 C9                                   ret
 220+ C285              ;Already in input mode post pressing find
 221+ C285 3A DB C1     AlreadyInInputMode:     ld      a,(gcInputDelay)                    ; keyboard next press delay
 222+ C288 FE 00                                cp      0                                   ; can no read until its zero
 223+ C28A 20 17                                jr      nz,.blinkCursor                     ; so re just go to blink cursor routine if not permitted
 224+ C28C CD 34 91     .HasKeyBeenPressed:     call    InputName                           ; else we are ready to read input
 225+ C28F 3A 0C 91                             ld      a,(InputChanged)
 226+ C292 47                                   ld      b,a
 227+ C293 FE 00                                cp      0
 228+ C295 28 13                                jr      z,.blinkNoDelay                     ; when we go hear the input delay could be zero a flip over
 229+ C297 3E 0A                                ld      a,gcDelayVal
 230+ C299 32 DB C1                             ld     (gcInputDelay),a
 231+ C29C 3A 0B 91     .WasItEnter:            ld      a,(EnterPressed)
 232+ C29F FE 00                                cp      0
 233+ C2A1 20 1A                                jr      nz,.FindEnterPressed
 234+ C2A3 3A DB C1     .blinkCursor:           ld      a,(gcInputDelay)
 235+ C2A6 3D                                   dec     a
 236+ C2A7 32 DB C1                             ld     (gcInputDelay),a
 237+ C2AA CD 42 C2     .blinkNoDelay:          call    blink_cursor
 238+ C2AD 3A B9 C1                             ld      a,(gcCursorBlink)
 239+ C2B0 FE 10                                cp      gcBlinkVal
 240+ C2B2 CC 18 C2                             call    z,gc_display_find_string
 241+ C2B5 C9                                   ret
 242+ C2B6 78           .FindDone:              ld      a,b
 243+ C2B7 FE 00                                cp      0
 244+ C2B9 C4 18 C2                             call    nz,gc_display_find_string
 245+ C2BC C9                                   ret
 246+ C2BD AF           .FindEnterPressed:      xor     a
 247+ C2BE 32 0B 91                             ld      (EnterPressed),a                    ; reset enter
 248+ C2C1 32 B8 C1                             ld      (gcFindInputMode),a
 249+ C2C4 3A B8 93                             ld      a,(Galaxy)                          ; Fetch correct galaxy seed bank into memory
 250+ C2C7                                      MMUSelectGalaxyA
 250+ C2C7 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 251+ C2CA 21 EB 90                             ld      hl,InputString
 252+ C2CD 11 5D E8                             ld      de,GalaxySearchString
 253+ C2D0 CD CF F6                             call    GalaxyCopyLoop
 254+ C2D3 CD 2C FB                             call    find_system_by_name
 255+ C2D6 FE FF                                cp      $FF                                 ; 0 denotes found FF, failure
 256+ C2D8 28 1D                                jr      z,.FindNoMatch
 257+ C2DA 3A FA E8                             ld      a,(GalaxyWorkingSeed+3)
 258+ C2DD 4F                                   ld      c,a
 259+ C2DE 3A F8 E8                             ld      a,(GalaxyWorkingSeed+1)
 260+ C2E1 47                                   ld      b,a
 261+ C2E2 ED 43 CD 93                          ld      (TargetPlanetX),bc
 262+ C2E6 CD 8B C3                             call    UpdateGalacticCursor
 263+ C2E9 11 08 B0                             ld		de,galactic_find_position   ; Wipe input area on screen
 264+ C2EC 21 73 C0                             ld      hl,galactic_find_match
 265+ C2EF                                      MMUSelectLayer1
 265+ C2EF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 266+ C2F3 CD C8 E0                             call	l1_print_at
 267+ C2F6 C9                                   ret
 268+ C2F7              .FindNoMatch:           ; if not found display "Not found"
 269+ C2F7                                      ; move curor if found
 270+ C2F7 11 08 B0                             ld		de,galactic_find_position   ; Wipe input area on screen
 271+ C2FA 21 58 C0                             ld      hl,galactic_find_no_match
 272+ C2FD                                      MMUSelectLayer1
 272+ C2FD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 273+ C301 CD C8 E0                             call	l1_print_at
 274+ C304 C9                                   ret; DOSTUFFHERE
 275+ C305              ;----------------------------------------------------------------------------------------------------------------------------------
 276+ C305 3A B8 C1     galctic_chart_cursors:  ld      a,(gcFindInputMode)
 277+ C308 FE 00                                cp      0
 278+ C30A C0                                   ret     nz
 279+ C30B 3A BE 92                             ld      a,(CursorKeysPressed)
 280+ C30E FE 00                                cp      0
 281+ C310 C8                                   ret     z
 282+ C311 17                                   rla
 283+ C312 DC 2A C3                             call   c,gc_UpPressed
 284+ C315 17                                   rla
 285+ C316 DC 3A C3                             call   c,gc_DownPressed
 286+ C319 17                                   rla
 287+ C31A DC 4A C3                             call   c,gc_LeftPressed
 288+ C31D 17                                   rla
 289+ C31E DC 5A C3                             call   c,gc_RightPressed
 290+ C321 17                                   rla
 291+ C322 DC 6A C3                             call   c,gc_HomePressed
 292+ C325 17                                   rla
 293+ C326 DC 74 C3                             call   c,gc_RecenterPressed
 294+ C329 C9                                   ret
 295+ C32A              ;----------------------------------------------------------------------------------------------------------------------------------
 296+ C32A 3A CE 93     gc_UpPressed:           ld     a,(TargetPlanetX+1)
 297+ C32D                                      JumpIfAEqNusng 1,gc_BoundsLimit
 297+ C32D FE 01       >                cp     1
 297+ C32F CA 89 C3    >                jp      z,gc_BoundsLimit
 298+ C332 3D                                   dec     a
 299+ C333 32 CE 93                             ld      (TargetPlanetX+1),a
 300+ C336 CD 8B C3                             call    UpdateGalacticCursor
 301+ C339 C9                                   ret
 302+ C33A              ;----------------------------------------------------------------------------------------------------------------------------------
 303+ C33A 3A CE 93     gc_DownPressed:         ld     a,(TargetPlanetX+1)
 304+ C33D                                      JumpIfAEqNusng 255,gc_BoundsLimit
 304+ C33D FE FF       >                cp     255
 304+ C33F CA 89 C3    >                jp      z,gc_BoundsLimit
 305+ C342 3C                                   inc    a
 306+ C343 32 CE 93                             ld      (TargetPlanetX+1),a
 307+ C346 CD 8B C3                             call    UpdateGalacticCursor
 308+ C349 C9                                   ret
 309+ C34A              ;----------------------------------------------------------------------------------------------------------------------------------
 310+ C34A 3A CD 93     gc_LeftPressed:         ld     a,(TargetPlanetX)
 311+ C34D                                      JumpIfAEqNusng 2,gc_BoundsLimit
 311+ C34D FE 02       >                cp     2
 311+ C34F CA 89 C3    >                jp      z,gc_BoundsLimit
 312+ C352 3D                                   dec    a
 313+ C353 32 CD 93                             ld      (TargetPlanetX),a
 314+ C356 CD 8B C3                             call    UpdateGalacticCursor
 315+ C359 C9                                   ret
 316+ C35A              ;----------------------------------------------------------------------------------------------------------------------------------
 317+ C35A 3A CD 93     gc_RightPressed:        ld     a,(TargetPlanetX)
 318+ C35D                                      JumpIfAEqNusng 253,gc_BoundsLimit
 318+ C35D FE FD       >                cp     253
 318+ C35F CA 89 C3    >                jp      z,gc_BoundsLimit
 319+ C362 3C                                   inc    a
 320+ C363 32 CD 93                             ld      (TargetPlanetX),a
 321+ C366 CD 8B C3                             call    UpdateGalacticCursor
 322+ C369 C9                                   ret
 323+ C36A              ;----------------------------------------------------------------------------------------------------------------------------------
 324+ C36A 2A CB 93     gc_HomePressed:         ld      hl,(PresentSystemX)
 325+ C36D 22 CD 93                             ld      (TargetPlanetX),hl
 326+ C370 CD 8B C3                             call    UpdateGalacticCursor
 327+ C373 C9                                   ret
 328+ C374              ;----------------------------------------------------------------------------------------------------------------------------------
 329+ C374 3A B8 93     gc_RecenterPressed:     ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 330+ C377                                      MMUSelectGalaxyA
 330+ C377 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 331+ C37A ED 4B CD 93                          ld      bc,(TargetPlanetX)
 332+ C37E CD 60 FB                             call    find_nearest_to_bc
 333+ C381 ED 43 CD 93                          ld      (TargetPlanetX),bc
 334+ C385 CD 8B C3                             call    UpdateGalacticCursor
 335+ C388 C9                                   ret
 336+ C389              ;----------------------------------------------------------------------------------------------------------------------------------
 337+ C389 AF           gc_BoundsLimit          xor     a
 338+ C38A C9                                   ret
 339+ C38B
 340+ C38B              ;----------------------------------------------------------------------------------------------------------------------------------
 341+ C38B ED 4B CD 93  UpdateGalacticCursor:   ld		bc,(TargetPlanetX)              ; bc = selected jump
 342+ C38F CB 38        OnGalacticChart:        srl		b								; but row is row / 2
 343+ C391                                      MMUSelectSpriteBank
 343+ C391 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 344+ C395 CD 7D E0                             call	sprite_ghc_move
 345+ C398 3A B8 93                             ld      a,(Galaxy)
 346+ C39B                                      MMUSelectGalaxyA
 346+ C39B ED 92 57    >                     nextreg GalaxyDataMMU,       a
 347+ C39E ED 4B CD 93                          ld      bc,(TargetPlanetX)
 348+ C3A2 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 349+ C3A6 CD 55 FC                             call    galaxy_system_under_cursor
 350+ C3A9 FE 00                                cp      0
 351+ C3AB C8                                   ret     z
 352+ C3AC              ; just fall into gc_name_if_possible
 353+ C3AC CD 81 F6     gc_name_if_possible:    call	GetDigramWorkingSeed
 354+ C3AF CD DA C3                             call    gc_clear_name_area
 355+ C3B2 21 BB 9F                             ld		hl,name_expanded
 356+ C3B5 CD 16 9F                             call	CapitaliseString
 357+ C3B8 21 BB 9F                             ld		hl, name_expanded
 358+ C3BB 01 0A A0                             ld      bc,$A00A
 359+ C3BE 1E FF                                ld		e,$FF
 360+ C3C0                                      MMUSelectLayer2
 360+ C3C0 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 361+ C3C4 CD CF E1                             call	l2_print_7at
 362+ C3C7 CD F4 C3                             call    gc_calc_distance
 363+ C3CA 21 14 C0                             ld      hl,galactic_chart_distance
 364+ C3CD 01 0A A8                             ld      bc,$A80A
 365+ C3D0 1E FF                                ld		e,$FF
 366+ C3D2                                      MMUSelectLayer2
 366+ C3D2 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 367+ C3D6 CD CF E1                             call	l2_print_7at
 368+ C3D9 C9                                   ret
 369+ C3DA              ;----------------------------------------------------------------------------------------------------------------------------------
 370+ C3DA 26 08        gc_clear_name_area:     ld      h,8
 371+ C3DC 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 372+ C3DF 01 0A A0                             ld      bc,$A00A
 373+ C3E2 E5           .ClearLoop:             push    hl
 374+ C3E3 D5                                   push    de
 375+ C3E4 C5                                   push    bc
 376+ C3E5                                      MMUSelectLayer2
 376+ C3E5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 377+ C3E9 CD 62 E2                             call	l2_draw_horz_line
 378+ C3EC C1                                   pop     bc
 379+ C3ED D1                                   pop     de
 380+ C3EE E1                                   pop     hl
 381+ C3EF 04                                   inc     b
 382+ C3F0 25                                   dec     h
 383+ C3F1 20 EF                                jr      nz,.ClearLoop
 384+ C3F3 C9                                   ret
 385+ C3F4              ;----------------------------------------------------------------------------------------------------------------------------------
 386+ C3F4 3A B8 93     gc_calc_distance:       ld      a,(Galaxy)
 387+ C3F7                                      MMUSelectGalaxyA
 387+ C3F7 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 388+ C3FA 11 1E C0                             ld      de,galactic_chart_dist_amount
 389+ C3FD 21 30 C0                             ld      hl,galactic_default_dist
 390+ C400 ED A0                                ldi
 391+ C402 ED A0                                ldi
 392+ C404 ED A0                                ldi
 393+ C406 ED A0                                ldi
 394+ C408 ED A0                                ldi
 395+ C40A ED 4B CB 93                          ld      bc,(PresentSystemX)
 396+ C40E ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 397+ C412 ED 4B CD 93                          ld      bc,(TargetPlanetX)
 398+ C416 ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 399+ C41A CD E8 FB                             call    galaxy_find_distance            ; get distance into HL
 400+ C41D DD 2A AD 93                          ld      ix,(Distance)
 401+ C421 11 00 00                             ld      de,0
 402+ C424 FD 21 36 C0                          ld      iy,galactic_distance
 403+ C428 CD 79 A7                             call    DispDEIXtoIY
 404+ C42B FD E5                                push    iy
 405+ C42D E1                                   pop     hl
 406+ C42E 11 36 C0                             ld      de,galactic_distance
 407+ C431 7E                                   ld		a,(hl)				;Push last digit to post decimal
 408+ C432 32 22 C0                             ld		(galactic_chart_fraction),a
 409+ C435 2B                                   dec     hl
 410+ C436 CD 9D A5                             call    compare16HLDE
 411+ C439 38 18                                jr      c,.done_number
 412+ C43B 7E                                   ld      a,(hl)
 413+ C43C 32 20 C0                             ld      (galactic_chart_dist_amount+2),a
 414+ C43F 2B                                   dec     hl
 415+ C440 CD 9D A5                             call    compare16HLDE
 416+ C443 38 0E                                jr      c,.done_number
 417+ C445 7E                                   ld      a,(hl)
 418+ C446 32 1F C0                             ld      (galactic_chart_dist_amount+1),a
 419+ C449 2B                                   dec     hl
 420+ C44A CD 9D A5                             call    compare16HLDE
 421+ C44D 38 04                                jr      c,.done_number
 422+ C44F 7E                                   ld      a,(hl)
 423+ C450 32 1E C0                             ld      (galactic_chart_dist_amount),a
 424+ C453 C9           .done_number:           ret
 425+ C454              ;----------------------------------------------------------------------------------------------------------------------------------
 426+ C454 AF           gc_present_system:      xor     a
 427+ C455 32 B9 92                             ld		(XSAV),a
 428+ C458 DD 21 16 E0                          ld      ix,galaxy_data
 429+ C45C 3A B8 93     GCCounterLoop:          ld      a,(Galaxy)
 430+ C45F                                      MMUSelectGalaxyA
 430+ C45F ED 92 57    >                     nextreg GalaxyDataMMU,       a
 431+ C462 2A CB 93                             ld      hl,(PresentSystemX)
 432+ C465 DD E5                                push    ix
 433+ C467 7D                                   ld      a,l
 434+ C468 DD BE 03                             cp      (ix+3)                          ; seed x
 435+ C46B 20 14                                jr      nz,.ItsNotThisX
 436+ C46D 7C                                   ld      a,h
 437+ C46E DD BE 01                             cp      (ix+1)                          ; seed x
 438+ C471 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
 439+ C473 DD E5                                push    ix
 440+ C475 E1                                   pop     hl
 441+ C476 11 BF 93                             ld      de,PresentSystemSeeds
 442+ C479 CD 90 97                             call    copy_seed
 443+ C47C 3E FF                                ld      a,$FF
 444+ C47E DD E1                                pop     ix
 445+ C480 C9                                   ret
 446+ C481 E1           .ItsNotThisX:           pop     hl
 447+ C482 ED 34 08 00                          add     hl,8
 448+ C486 E5                                   push    hl
 449+ C487 DD E1                                pop     ix
 450+ C489 3A B9 92                             ld		a,(XSAV)
 451+ C48C 3D                                   dec		a
 452+ C48D 32 B9 92                             ld      (XSAV),a
 453+ C490 FE 00                                cp		0
 454+ C492 C8                                   ret		z
 455+ C493 18 C7                                jr		GCCounterLoop
 456+ C495
# file closed: ./Menus//galactic_chart_menu.asm
1042  C495              ; Bank 52
1043  C495
1044  C495                  SLOT    MenuInventAddr
1045  C495                  PAGE    BankMenuInvent
1046  C495              	ORG     MenuInventAddr
1047  C000                  INCLUDE "./Menus/inventory_menu.asm"
# file opened: ./Menus/inventory_menu.asm
   1+ C000 49 6E 76 65  ivnentory_page_marker   DB "Inventory   PG52"
   1+ C004 6E 74 6F 72
   1+ C008 79 20 20 20
   1+ C00C 50 47 35 32
   2+ C010 48 02 1C C0  inventory_boiler_text	DW $0248,INM_inventory
   3+ C014 08 0B 26 C0  						DW $0B08,INM_fuel
   4+ C018 08 13 2C C0  						DW $1308,INM_cash
   5+ C01C
   6+ C01C 49 4E 56 45  INM_inventory 			DB "INVENTORY",0
   6+ C020 4E 54 4F 52
   6+ C024 59 00
   7+ C026 46 75 65 6C  INM_fuel				DB "Fuel:",0
   7+ C02A 3A 00
   8+ C02C 43 61 73 68  INM_cash				DB "Cash:",0
   8+ C030 3A 00
   9+ C032
  10+ C032 30 30 30 30  txt_inventory_amount	DB "00000",0
  10+ C036 30 00
  11+ C038 00 00        inventory_cursor		DW $0000
  12+ C03A              inv_fuel_position		equ	$0B30
  13+ C03A              inv_cash_position		equ	$1330
  14+ C03A
  15+ C03A              inventory_position		equ $2008
  16+ C03A              inventory_amount		equ $80
  17+ C03A              inventory_uom			equ	$B0
  18+ C03A 00           inv_selected_row        DB 0
  19+ C03B
  20+ C03B 00 00 00...  INM_cash_amount			DS 10
  21+ C045 20 43 72 00  INM_cash_UoM            DB " Cr",0
  22+ C049
  23+ C049 26 00        INM_DispAtoDE:          ld h,0
  24+ C04B 6F                                   ld l,a
  25+ C04C 01 F0 D8                             ld	bc,-10000
  26+ C04F CD 65 C0                             call	.Num1
  27+ C052 01 18 FC                             ld	bc,-1000
  28+ C055 CD 65 C0                             call	.Num1
  29+ C058 01 9C FF                             ld	bc,-100
  30+ C05B CD 65 C0                             call	.Num1
  31+ C05E 0E F6                                ld	c,-10
  32+ C060 CD 65 C0                             call	.Num1
  33+ C063 0E FF                                ld	c,-1
  34+ C065 3E 2F        .Num1:	                ld	a,'0'-1
  35+ C067 3C           .Num2:	                inc	a
  36+ C068 09                                   add	hl,bc
  37+ C069 38 FC                                jr	c,.Num2
  38+ C06B ED 42                                sbc	hl,bc
  39+ C06D 12                                   ld	(de),a
  40+ C06E 13                                   inc	de
  41+ C06F C9                                   ret
  42+ C070
  43+ C070              INM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C070
   2++C070              ;">print_boilder_text hl = text structure, b = message count"
   3++C070              .BoilerTextLoop:
   4++C070 C5           	push		bc			; Save Message Count loop value
   5++C071 4E           	ld			c,(hl)		; Get Row into b
   6++C072 23           	inc			hl
   7++C073 46           	ld			b,(hl)		; Get Col into b
   8++C074 23           	inc			hl
   9++C075 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C076 23           	inc			hl
  11++C077 56           	ld			d,(hl)		; Get text address Hi into E
  12++C078 23           	inc			hl
  13++C079 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C07A EB           	ex			de,hl		; now hl = address of text data
  15++C07B 1E FF        	ld			e,txt_status_colour
  16++C07D C5           	push		bc
  17++C07E D1           	pop			de
  18++C07F                  MMUSelectLayer1
  18++C07F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C083 CD C8 E0     	call		l1_print_at
  20++C086 E1           	pop			hl
  21++C087 C1           	pop			bc
  22++C088 10 E6        	djnz		.BoilerTextLoop
  23++C08A C9           	ret
  24++C08B
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  44+ C08B
  45+ C08B DD 22 2F C1  INM_DispDEIXtoIY:       ld (.inmclcn32z),ix
  46+ C08F ED 53 31 C1                          ld (.inmclcn32zIX),de
  47+ C093 DD 21 2B C1                          ld ix,.inmclcn32t+36
  48+ C097 06 09                                ld b,9
  49+ C099 0E 00                                ld c,0
  50+ C09B 3E 30        .inmclcn321:            ld a,'0'
  51+ C09D B7                                   or a
  52+ C09E DD 5E 00     .inmclcn322:            ld e,(ix+0)
  53+ C0A1 DD 56 01                             ld d,(ix+1)
  54+ C0A4 2A 2F C1                             ld hl,(.inmclcn32z)
  55+ C0A7 ED 52                                sbc hl,de
  56+ C0A9 22 2F C1                             ld (.inmclcn32z),hl
  57+ C0AC DD 5E 02                             ld e,(ix+2)
  58+ C0AF DD 56 03                             ld d,(ix+3)
  59+ C0B2 2A 31 C1                             ld hl,(.inmclcn32zIX)
  60+ C0B5 ED 52                                sbc hl,de
  61+ C0B7 22 31 C1                             ld (.inmclcn32zIX),hl
  62+ C0BA 38 04                                jr c,.inmclcn325
  63+ C0BC 0C                                   inc c
  64+ C0BD 3C                                   inc a
  65+ C0BE 18 DE                                jr .inmclcn322
  66+ C0C0 DD 5E 00     .inmclcn325:            ld e,(ix+0)
  67+ C0C3 DD 56 01                             ld d,(ix+1)
  68+ C0C6 2A 2F C1                             ld hl,(.inmclcn32z)
  69+ C0C9 19                                   add hl,de
  70+ C0CA 22 2F C1                             ld (.inmclcn32z),hl
  71+ C0CD DD 5E 02                             ld e,(ix+2)
  72+ C0D0 DD 56 03                             ld d,(ix+3)
  73+ C0D3 2A 31 C1                             ld hl,(.inmclcn32zIX)
  74+ C0D6 ED 5A                                adc hl,de
  75+ C0D8 22 31 C1                             ld (.inmclcn32zIX),hl
  76+ C0DB 11 FC FF                             ld de,-4
  77+ C0DE DD 19                                add ix,de
  78+ C0E0 0C                                   inc c
  79+ C0E1 0D                                   dec c
  80+ C0E2 28 05                                jr z,.inmclcn323
  81+ C0E4 FD 77 00                             ld (iy+0),a
  82+ C0E7 FD 23                                inc iy
  83+ C0E9 10 B0        .inmclcn323:            djnz .inmclcn321
  84+ C0EB 3A 2F C1                             ld a,(.inmclcn32z)
  85+ C0EE C6 30                                add A,'0'
  86+ C0F0 FD 77 00                             ld (iy+0),a
  87+ C0F3 FD 36 02 00                          ld (iy+2),0
  88+ C0F7 FD 7E 00                             ld      a,(IY+0)
  89+ C0FA FD 77 01                             ld      (IY+1),a
  90+ C0FD 3E 2E                                ld      a,"."
  91+ C0FF FD 77 00                             ld      (IY+0),a
  92+ C102 FD 23                                inc     IY
  93+ C104 FD 23                                inc     IY
  94+ C106 C9                                   ret
  95+ C107 01 00 00 00  .inmclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  95+ C10B 0A 00 00 00
  95+ C10F 64 00 00 00
  95+ C113 E8 03 00 00
  95+ C117 10 27 00 00
  96+ C11B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
  96+ C11F 40 42 0F 00
  96+ C123 80 96 98 00
  96+ C127 00 E1 F5 05
  96+ C12B 00 CA 9A 3B
  97+ C12F 00 00        .inmclcn32z             ds 2
  98+ C131 00 00        .inmclcn32zIX           ds 2
  99+ C133
 100+ C133              INM_GetFuelLevel:       INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++C133
   2++C133
   3++C133 3A F7 96     	ld		a,(Fuel)
   4++C136 11 96 AD     	ld		de,txt_fuel_level
   5++C139 0E 9C        	ld	c, -100
   6++C13B CD 45 C1     	call	.Num1
   7++C13E 0E F6        	ld	c,-10
   8++C140 CD 45 C1     	call	.Num1
   9++C143 0E FF        	ld	c,-1
  10++C145              .Num1:
  11++C145 06 2F        	ld	b,'0'-1
  12++C147              .Num2:
  13++C147 04           	inc		b
  14++C148 81           	add		a,c
  15++C149 38 FC        	jr		c,.Num2
  16++C14B 91           	sub 	c
  17++C14C C5           	push	bc
  18++C14D F5           	push	af
  19++C14E 79           	ld		a,c
  20++C14F FE FF        	cp		-1
  21++C151 CC 5A C1     	call	z,.InsertDot
  22++C154 78           	ld		a,b
  23++C155 12           	ld		(de),a
  24++C156 13           	inc		de
  25++C157 F1           	pop		af
  26++C158 C1           	pop		bc
  27++C159 C9           	ret
  28++C15A              .InsertDot:
  29++C15A 3E 2E        	ld		a,'.'
  30++C15C 12           	ld		(de),a
  31++C15D 13           	inc		de
  32++C15E C9           	ret
  33++C15F
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
 101+ C15F
 102+ C15F              ; "A = stock item number"
 103+ C15F              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C15F 47           PrintInvItem:           ld		b,a
 105+ C160 21 FE 96                             ld		hl,CargoTonnes
 106+ C163 ED 31                                add		hl,a
 107+ C165 7E                                   ld		a,(hl)
 108+ C166 4F                                   ld		c,a
 109+ C167 FE 00                                cp		0
 110+ C169 C8                                   ret		z
 111+ C16A 78                                   ld		a,b
 112+ C16B C5                                   push	bc						; push item nbr + quantity
 113+ C16C                                      MMUSelectStockTable
 113+ C16C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 114+ C170 21 88 E0                             ld		hl, StockItemTable
 115+ C173 CD 6E 9A                             call	getTableText
 116+ C176 7E           .ItemItemName           ld		a,(hl)
 117+ C177 21 99 9D                             ld		hl, WordIdx
 118+ C17A CD 6E 9A                             call	getTableText
 119+ C17D ED 5B 38 C0                          ld		de,(inventory_cursor)
 120+ C181                                      MMUSelectLayer1
 120+ C181 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 121+ C185 CD C8 E0                             call	l1_print_at
 122+ C188 C1           .ItemAmount:            pop		bc						; b = item number, c = quantity
 123+ C189 C5                                   push	bc
 124+ C18A 79                                   ld		a,c
 125+ C18B 11 32 C0                             ld		de,txt_inventory_amount
 126+ C18E CD 49 C0                             call	INM_DispAtoDE
 127+ C191 21 32 C0                             ld		hl,txt_inventory_amount
 128+ C194 E5                                   push	hl
 129+ C195 7E           .ZeroLoop:              ld		a,(hl)
 130+ C196 FE 30                                cp		'0'
 131+ C198 20 05                                jr		nz,.NotZero
 132+ C19A 36 20        .ZeroDigit:             ld		(hl),' '
 133+ C19C 23                                   inc		hl
 134+ C19D 18 F6                                jr		.ZeroLoop
 135+ C19F ED 5B 38 C0  .NotZero:               ld		de,(inventory_cursor)
 136+ C1A3 E1                                   pop		hl
 137+ C1A4 1E 80                                ld		e,inventory_amount
 138+ C1A6                                      MMUSelectLayer1
 138+ C1A6 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 139+ C1AA CD C8 E0                             call	l1_print_at
 140+ C1AD              .ItemMeasure:	        MMUSelectStockTable
 140+ C1AD ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 141+ C1B1 21 88 E0                             ld		hl, StockItemTable
 142+ C1B4 C1                                   pop		bc
 143+ C1B5 78                                   ld		a,b
 144+ C1B6 CD 6E 9A                             call	getTableText
 145+ C1B9 ED 34 07 00                          add		hl,7
 146+ C1BD 7E                                   ld		a,(hl)
 147+ C1BE 21 99 9D                             ld		hl,WordIdx
 148+ C1C1 CD 6E 9A                             call	getTableText
 149+ C1C4 ED 5B 38 C0                          ld		de,(inventory_cursor)
 150+ C1C8 1E B0                                ld		e,inventory_uom
 151+ C1CA                                      MMUSelectLayer1
 151+ C1CA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 152+ C1CE CD C8 E0                             call	l1_print_at
 153+ C1D1 3A 39 C0                             ld 		a,(inventory_cursor+1)
 154+ C1D4 C6 08                                add		a,8
 155+ C1D6 32 39 C0                             ld 		(inventory_cursor+1),a
 156+ C1D9 C9                                   ret
 157+ C1DA              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ C1DA 2A F5 96     INM_GetCash:            ld		hl,(Cash+2)
 159+ C1DD EB                                   ex      de,hl
 160+ C1DE DD 2A F3 96                          ld      ix,(Cash)
 161+ C1E2 FD 21 3B C0                          ld		iy,INM_cash_amount
 162+ C1E6 CD 8B C0                             call 	INM_DispDEIXtoIY
 163+ C1E9 FD E5                                push    IY
 164+ C1EB D1                                   pop     de
 165+ C1EC 21 45 C0                             ld      hl,INM_cash_UoM
 166+ C1EF 01 04 00                             ld      bc,4
 167+ C1F2 ED B0                                ldir
 168+ C1F4 C9                                   ret
 169+ C1F5              ;----------------------------------------------------------------------------------------------------------------------------------
 170+ C1F5              draw_inventory_menu:    INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C1F5
   2++C1F5                  MMUSelectLayer1
   2++C1F5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C1F9 CD 80 E0     	call	l1_cls
   4++C1FC 3E 07        	ld		a,7
   5++C1FE CD 9B E0     	call	l1_attr_cls_to_a
   6++C201                  MMUSelectLayer2
   6++C201 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C205 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C208 CD C9 E0     	call	l2_cls	; Get some space
   9++C20B              	MMUSelectSpriteBank
   9++C20B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C20F CD 6E E4     	call    sprite_cls_cursors
  11++C212
  12++C212
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 171+ C212 3E 08                                ld      a,$08
 172+ C214 32 C0 92                             ld      (MenuIdMax),a
 173+ C217                                      MMUSelectSpriteBank
 173+ C217 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 174+ C21B CD 6E E4                             call        sprite_cls_cursors
 175+ C21E 01 01 01     .Drawbox:               ld		bc,$0101
 176+ C221 11 FD BE                             ld		de,$BEFD
 177+ C224 3E C0                                ld		a,$C0
 178+ C226                                      MMUSelectLayer2
 178+ C226 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 179+ C22A CD F6 E1                             call	l2_draw_box
 180+ C22D 01 01 0A                             ld		bc,$0A01
 181+ C230 11 C0 FE                             ld		de,$FEC0
 182+ C233 CD 62 E2                             call	l2_draw_horz_line
 183+ C236 06 03        .StaticText:	        ld		b,3
 184+ C238 21 10 C0                             ld		hl,inventory_boiler_text
 185+ C23B CD 70 C0                             call	INM_print_boiler_text
 186+ C23E CD 33 C1     .DisplayFuel:           call	INM_GetFuelLevel
 187+ C241 21 96 AD                             ld		hl, txt_fuel_level
 188+ C244 7E                                   ld		a,(hl)
 189+ C245 FE 30                                cp		'0'
 190+ C247 20 01                                jr		nz,.PrintFuel
 191+ C249 23           .SkipLeadingZero:	    inc		hl
 192+ C24A 1E FF        .PrintFuel:             ld		e,txt_status_colour
 193+ C24C 01 30 0B                             ld		bc,inv_fuel_position
 194+ C24F                                      MMUSelectLayer2
 194+ C24F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 195+ C253 CD 6F E1                             call	l2_print_at
 196+ C256 CD DA C1     .DisplayCash:           call	INM_GetCash
 197+ C259 21 3B C0                             ld		hl,INM_cash_amount
 198+ C25C 1E FF                                ld		e,txt_status_colour
 199+ C25E 01 30 13                             ld		bc,inv_cash_position
 200+ C261                                      MMUSelectLayer2
 200+ C261 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 201+ C265 CD 6F E1                             call	l2_print_at						; now we have the correct integer
 202+ C268 01 30 13                             ld		bc,inv_cash_position
 203+ C26B 21 3B C0                             ld		hl,INM_cash_amount
 204+ C26E 3E 00        .DisplayInventory:      ld		a,0
 205+ C270 21 08 20                             ld		hl,inventory_position
 206+ C273 22 38 C0                             ld		(inventory_cursor),hl
 207+ C276 F5           .InvLoop:	            push	af
 208+ C277 CD 5F C1                             call	PrintInvItem
 209+ C27A F1                                   pop		af
 210+ C27B 3C                                   inc		a
 211+ C27C FE 11                                cp		17
 212+ C27E 38 F6                                jr		c,.InvLoop
 213+ C280 C9                                   ret
 214+ C281
# file closed: ./Menus/inventory_menu.asm
1048  C281
1049  C281              ; Bank 53
1050  C281
1051  C281                  SLOT    MenuSystemAddr
1052  C281                  PAGE    BankMenuSystem
1053  C281              	ORG     MenuSystemAddr
1054  C000                  INCLUDE "./Menus/system_data_menu.asm"
# file opened: ./Menus/system_data_menu.asm
   1+ C000 53 79 73 74  system_data_page_marker DB "System      PG53"
   1+ C004 65 6D 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 35 33
   2+ C010
   3+ C010 40 02 F5 9E  plant_boiler_text		DW $0240,TextBuffer
   4+ C014 80 02 BB 9F  						DW $0280,name_expanded
   5+ C018 08 0B 25 9C  						DW $0B08,WordDistance
   6+ C01C 08 13 2E 9C  						DW $1308,WordEconomy
   7+ C020 08 1B 36 9C  						DW $1B08,WordGovernment
   8+ C024 08 23 41 9C  						DW $2308,WordTechLevel
   9+ C028 08 2B 4B 9C  						DW $2B08,WordPopulation
  10+ C02C 08 3B 66 9C  						DW $3B08,WordGross
  11+ C030 38 3B 6C 9C  						DW $3B38,WordProductivity
  12+ C034 08 43 79 9C  						DW $4308,WordAverage
  13+ C038 48 43 81 9C  						DW $4348,WordRadius
  14+ C03C 60 0B F5 9E  planet_zero_dist		DW $0B60,TextBuffer
  15+ C040 60 13 F5 9E  planet_economy_disp		DW $1360,TextBuffer
  16+ C044 0A 00        techlevel_value			DB 10,0
  17+ C046 00 00 00...  distance_value          DS 20,0
  18+ C05A 20 4C 69 67  distance_uom            DB " Light Years",0
  18+ C05E 68 74 20 59
  18+ C062 65 61 72 73
  18+ C066 00
  19+ C067 00 00 00...  radius_value            DS 20
  20+ C07B 00                                   DB 0
  21+ C07C 20 6B 6D 00  radius_uom              DB " km",0
  22+ C080 00 00 00...  population_value        DS 20
  23+ C094 00                                   DB 0
  24+ C095 20 42 69 6C  population_uom          DB " Billion",0
  24+ C099 6C 69 6F 6E
  24+ C09D 00
  25+ C09E 00 00 00...  productivity_value      DS 20
  26+ C0B2 00                                   DB 0
  27+ C0B3 20 4D 20 43  productivity_uom        DB " M CR",0
  27+ C0B7 52 00
  28+ C0B9
  29+ C0B9              GovernmentIndexOffset	EQU 75
  30+ C0B9              DistanceScreenPos       EQU $0B60
  31+ C0B9              GovernmentScreenPos		EQU $1B60
  32+ C0B9              TechLevelScreenPos		EQU $2360
  33+ C0B9              SpeciesScreenPos        EQU $3308
  34+ C0B9
  35+ C0B9 00           system_present_or_target DB 0
  36+ C0BA 00 00        saved_present			 DW 0
  37+ C0BC
  38+ C0BC
  39+ C0BC 00 00 00...  SD_present_name         DS  30
  40+ C0DA 00                                   DB  0
  41+ C0DB 00 00 00...  SD_target_name          DS  30
  42+ C0F9 00                                   DB  0
  43+ C0FA 00 00 00...  SD_species              DS 30
  44+ C118 00                                   DB 0
  45+ C119 00 00 00...  SD_planet_description   DS 300,0
  46+ C245
  47+ C245 00           SDDisplayGovernment     DB 0
  48+ C246 00           SDDisplayEconomy        DB 0
  49+ C247 00           SDDisplayTekLevel       DB 0
  50+ C248 00           SDDisplayPopulation     DB 0
  51+ C249 00 00        SDDisplayProductivity   DW 0
  52+ C24B 00 00        SDDisplayRadius         DW 0
  53+ C24D              SDDataLength            EQU $ - SDDisplayEconomy
  54+ C24D
  55+ C24D 21 09 E9     SD_copy_system_data:    ld      hl,GalaxyDisplayGovernment
  56+ C250 11 45 C2                             ld      de,SDDisplayGovernment
  57+ C253 01 07 00                             ld      bc,SDDataLength
  58+ C256 ED B0                                ldir
  59+ C258 21 47 C2     .DisplayTechPlus1:      ld     hl,SDDisplayTekLevel
  60+ C25B 34                                   inc    (hl)
  61+ C25C C9                                   ret
  62+ C25D
  63+ C25D 21 7E E8     SD_copy_to_name:        ld      hl,GalaxyExpandedName
  64+ C260 01 1E 00                             ld      bc,30
  65+ C263 ED B0                                ldir
  66+ C265 C9                                   ret
  67+ C266
  68+ C266 21 63 F1     SD_copy_species:        ld      hl,GalaxySpecies
  69+ C269 11 FA C0                             ld      de,SD_species
  70+ C26C 01 1E 00                             ld      bc,30
  71+ C26F ED B0                                ldir
  72+ C271 C9                                   ret
  73+ C272
  74+ C272 21 84 F1     SD_copy_description:    ld      hl,GalaxyPlanetDescription
  75+ C275 11 19 C1                             ld      de,SD_planet_description
  76+ C278 7E           SDCopyLoop:             ld      a,(hl)
  77+ C279 FE 00                                cp      0
  78+ C27B 28 05                                jr      z,.SD_Copy_Done
  79+ C27D ED A0                                ldi
  80+ C27F C3 78 C2                             jp      SDCopyLoop
  81+ C282 12           .SD_Copy_Done:          ld      (de),a
  82+ C283 C9                                   ret
  83+ C284
  84+ C284 26 00        SDM_DispAtoDE:          ld h,0
  85+ C286 6F                                   ld l,a
  86+ C287 01 F0 D8                             ld	bc,-10000
  87+ C28A CD A0 C2                             call	.Num1
  88+ C28D 01 18 FC                             ld	bc,-1000
  89+ C290 CD A0 C2                             call	.Num1
  90+ C293 01 9C FF                             ld	bc,-100
  91+ C296 CD A0 C2                             call	.Num1
  92+ C299 0E F6                                ld	c,-10
  93+ C29B CD A0 C2                             call	.Num1
  94+ C29E 0E FF                                ld	c,-1
  95+ C2A0 3E 2F        .Num1:	                ld	a,'0'-1
  96+ C2A2 3C           .Num2:	                inc	a
  97+ C2A3 09                                   add	hl,bc
  98+ C2A4 38 FC                                jr	c,.Num2
  99+ C2A6 ED 42                                sbc	hl,bc
 100+ C2A8 12                                   ld	(de),a
 101+ C2A9 13                                   inc	de
 102+ C2AA C9                                   ret
 103+ C2AB
 104+ C2AB
 105+ C2AB 3A B8 93     sdm_calc_distance:      ld      a,(Galaxy)
 106+ C2AE                                      MMUSelectGalaxyA
 106+ C2AE ED 92 57    >                     nextreg GalaxyDataMMU,       a
 107+ C2B1 ED 4B CB 93                          ld      bc,(PresentSystemX)
 108+ C2B5 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 109+ C2B9 ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 110+ C2BD ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 111+ C2C1 CD E8 FB                             call    galaxy_find_distance            ; get distance into HL
 112+ C2C4 C9           .done_number:           ret
 113+ C2C5
 114+ C2C5
 115+ C2C5              SDM_print_boiler_text:
 116+ C2C5                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C2C5
   2++C2C5              ;">print_boilder_text hl = text structure, b = message count"
   3++C2C5              .BoilerTextLoop:
   4++C2C5 C5           	push		bc			; Save Message Count loop value
   5++C2C6 4E           	ld			c,(hl)		; Get Row into b
   6++C2C7 23           	inc			hl
   7++C2C8 46           	ld			b,(hl)		; Get Col into b
   8++C2C9 23           	inc			hl
   9++C2CA 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C2CB 23           	inc			hl
  11++C2CC 56           	ld			d,(hl)		; Get text address Hi into E
  12++C2CD 23           	inc			hl
  13++C2CE E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C2CF EB           	ex			de,hl		; now hl = address of text data
  15++C2D0 1E FF        	ld			e,txt_status_colour
  16++C2D2 C5           	push		bc
  17++C2D3 D1           	pop			de
  18++C2D4                  MMUSelectLayer1
  18++C2D4 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C2D8 CD C8 E0     	call		l1_print_at
  20++C2DB E1           	pop			hl
  21++C2DC C1           	pop			bc
  22++C2DD 10 E6        	djnz		.BoilerTextLoop
  23++C2DF C9           	ret
  24++C2E0
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 117+ C2E0
 118+ C2E0 7E           PlanetLeftJustifyLoop:  ld      a,(hl)
 119+ C2E1 FE 30                                cp      "0"
 120+ C2E3 C0                                   ret      nz
 121+ C2E4 23                                   inc     hl
 122+ C2E5 10 F9                                djnz    PlanetLeftJustifyLoop
 123+ C2E7 C9                                   ret
 124+ C2E8
 125+ C2E8 00 00        SD_working_cursor       DW   0
 126+ C2EA
 127+ C2EA 00 00 00...  sd_copy_of_seed         DS 6
 128+ C2F0
 129+ C2F0              draw_system_data_menu:  INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C2F0
   2++C2F0                  MMUSelectLayer1
   2++C2F0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C2F4 CD 80 E0     	call	l1_cls
   4++C2F7 3E 07        	ld		a,7
   5++C2F9 CD 9B E0     	call	l1_attr_cls_to_a
   6++C2FC                  MMUSelectLayer2
   6++C2FC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C300 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C303 CD C9 E0     	call	l2_cls	; Get some space
   9++C306              	MMUSelectSpriteBank
   9++C306 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C30A CD 6E E4     	call    sprite_cls_cursors
  11++C30D
  12++C30D
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 130+ C30D AF                                   xor     a
 131+ C30E 32 B9 C0                             ld      (system_present_or_target),a
 132+ C311 3E 08                                ld		a,8
 133+ C313 32 C0 92                             ld		(MenuIdMax),a
 134+ C316 3A B8 93     .SelectGalaxy:          ld      a,(Galaxy)
 135+ C319                                      MMUSelectGalaxyA
 135+ C319 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 136+ C31C ED 4B CD 93  .CheckCursorOrHome:     ld      bc,(TargetPlanetX)              ; Find out if we have to work on hyperspace or normal cursor
 137+ C320 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 138+ C324 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 139+ C328 CD 55 FC                             call    galaxy_system_under_cursor
 140+ C32B FE FF        .IsCursorOnSystem:      cp      $FF                               ; if a = 0 then failed
 141+ C32D 28 0F                                jr      z,.FoundASystem
 142+ C32F ED 4B CB 93  .UsePresentSystem:      ld      bc,(PresentSystemX)
 143+ C333 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 144+ C337 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 145+ C33B CD 55 FC                             call    galaxy_system_under_cursor
 146+ C33E ED 4B CD 93  .FoundASystem:          ld      bc,(TargetPlanetX)
 147+ C342 2A CB 93                             ld      hl,(PresentSystemX)
 148+ C345 78                                   ld      a,b
 149+ C346 BC                                   cp      h
 150+ C347 20 04                                jr      nz,.DiffCoord
 151+ C349 79                                   ld      a,c
 152+ C34A BD                                   cp      l
 153+ C34B 28 05                                jr      z,.SameCoord
 154+ C34D 3E FF        .DiffCoord:             ld      a,$FF
 155+ C34F 32 B9 C0                             ld      (system_present_or_target),a
 156+ C352 21 B9 93     .SameCoord:             ld      hl,WorkingSeeds            ; found a system so save it
 157+ C355 11 EA C2                             ld      de,sd_copy_of_seed
 158+ C358 CD FE F9                             call    galaxy_copy_seed
 159+ C35B CD C1 FA     .GetSystemName:         call    GalaxyDigramWorkings       ; we have galaxy working seed populated now
 160+ C35E 01 01 01     .Drawbox:               ld		bc,$0101
 161+ C361 11 FD BE                             ld		de,$BEFD
 162+ C364 3E C0                                ld		a,$C0
 163+ C366                                      MMUSelectLayer2
 163+ C366 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 164+ C36A CD F6 E1                             call	l2_draw_box
 165+ C36D 01 01 0A                             ld		bc,$0A01
 166+ C370 11 C0 FE                             ld		de,$FEC0
 167+ C373 CD 62 E2                             call	l2_draw_horz_line
 168+ C376 3E 0E        .ExpandStatic:          ld		a,14
 169+ C378 CD 36 9F                             call	expandTokenToString
 170+ C37B 3A B8 93     .TargetSystem:          ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 171+ C37E                                      MMUSelectGalaxyA
 171+ C37E ED 92 57    >                     nextreg GalaxyDataMMU,       a
 172+ C381 ED 4B E8 C2                          ld      bc, (SD_working_cursor)
 173+ C385               ;   call    galaxy_name_at_bc
 174+ C385                ;  cp      $FF               ; if we didn't get a
 175+ C385 21 EA C2                             ld      hl,sd_copy_of_seed
 176+ C388 11 F7 E8                             ld      de,GalaxyWorkingSeed
 177+ C38B CD FE F9                             call    galaxy_copy_seed
 178+ C38E CD 69 F9                             call    galaxy_planet_data                              ; Geneate galaxy data from working seed
 179+ C391 CD 4D C2                             call    SD_copy_system_data
 180+ C394 11 BB 9F                             ld      de,name_expanded
 181+ C397 CD 5D C2                             call    SD_copy_to_name
 181+ C39A
 182+ C39A 11 98 13                             ld      de,hyperspace_position
 183+ C39D 21 BB 9F                             ld      hl,name_expanded
 184+ C3A0 06 0B        .StaticText:	        ld		b,11
 185+ C3A2 21 10 C0                             ld		hl,plant_boiler_text
 186+ C3A5 CD C5 C2                             call	SDM_print_boiler_text
 187+ C3A8 3A B9 C0     .CalcDistance:          ld		a,(system_present_or_target)
 188+ C3AB FE 00                                cp		0
 189+ C3AD 28 2B                                jr		z,.ZeroDistance
 190+ C3AF CD AB C2     .NotZero:               call    sdm_calc_distance
 191+ C3B2 DD 2A AD 93  .DisplayDistance:       ld      ix,(Distance)
 192+ C3B6 11 00 00                             ld      de,0
 193+ C3B9 FD 21 46 C0                          ld      iy,distance_value
 194+ C3BD CD 6A A7                             call    DispDEIXtoIY1DP
 195+ C3C0 FD E5        .AddDistUo              push    iy
 196+ C3C2 E1                                   pop     hl
 197+ C3C3 23                                   inc     hl
 198+ C3C4 11 5A C0                             ld      de,distance_uom
 199+ C3C7 CD F0 C4                             call    SDTackOnUOMtoHL
 200+ C3CA 11 60 0B                             ld      de,DistanceScreenPos
 201+ C3CD 21 46 C0                             ld      hl,distance_value
 202+ C3D0                                      MMUSelectLayer1
 202+ C3D0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 203+ C3D4 CD C8 E0                             call	l1_print_at
 204+ C3D7 C3 E7 C3                             jp      .DisplayEconomy
 205+ C3DA 3E 18        .ZeroDistance:          ld		a,24						; print literal zero dist
 206+ C3DC CD 36 9F                             call	expandTokenToString
 207+ C3DF 06 01                                ld		b,1
 208+ C3E1 21 3C C0                             ld		hl,planet_zero_dist
 209+ C3E4 CD C5 C2                             call	SDM_print_boiler_text
 210+ C3E7 3A 46 C2     .DisplayEconomy:        ld		a,(SDDisplayEconomy)
 211+ C3EA C6 0F                                add     a,TextEconomyOffset
 212+ C3EC CD 36 9F                             call	expandTokenToString
 213+ C3EF 06 01                                ld		b,1
 214+ C3F1 21 40 C0                             ld		hl,planet_economy_disp
 215+ C3F4 CD C5 C2                             call	SDM_print_boiler_text
 216+ C3F7 3A 45 C2     .DisplayGovernment:     ld		a,(SDDisplayGovernment)
 217+ C3FA C6 4B                                add		a,TextGovOffset
 218+ C3FC CD 28 9F                             call	WordIndexToAddress
 219+ C3FF 11 60 1B                             ld		de,GovernmentScreenPos
 220+ C402                                      MMUSelectLayer1
 220+ C402 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 221+ C406 CD C8 E0                             call	l1_print_at
 222+ C409 3A 47 C2     .DisplayTechLevel:      ld		a,(SDDisplayTekLevel)
 223+ C40C 11 44 C0                             ld		de,techlevel_value
 224+ C40F CD 84 C2                             call    SDM_DispAtoDE
 225+ C412 AF                                   xor     a
 226+ C413 12                                   ld      (de),a
 227+ C414 21 44 C0                             ld      hl,techlevel_value
 228+ C417 06 05                                ld      b,5
 229+ C419 CD E0 C2                             call    PlanetLeftJustifyLoop
 230+ C41C 11 60 23                             ld		de,TechLevelScreenPos
 231+ C41F                                      MMUSelectLayer1
 231+ C41F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 232+ C423 CD C8 E0                             call	l1_print_at
 233+ C426 3A 48 C2     .DisplayPopulation:     ld      a,(SDDisplayPopulation)
 234+ C429 DD 26 00                             ld      ixh,0
 235+ C42C DD 6F                                ld      ixl,a
 236+ C42E 11 00 00                             ld      de,0
 237+ C431 FD 21 80 C0                          ld      iy,population_value
 238+ C435 CD 6A A7                             call    DispDEIXtoIY1DP
 239+ C438 FD E5        .AddUoM:                push    iy
 240+ C43A E1                                   pop     hl
 241+ C43B 23                                   inc     hl
 242+ C43C 11 95 C0                             ld      de,population_uom
 243+ C43F CD F0 C4                             call    SDTackOnUOMtoHL
 244+ C442 11 60 2B                             ld      de,$2B60
 245+ C445 21 80 C0                             ld      hl,population_value
 246+ C448                                      MMUSelectLayer1
 246+ C448 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 247+ C44C CD C8 E0                             call	l1_print_at
 248+ C44F              ;SDDisplayPopulation     DB 0
 249+ C44F 3A B8 93     .DisplayPopulationType: ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 250+ C452                                      MMUSelectGalaxyA
 250+ C452 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 251+ C455 CD D8 F6                             call    galaxy_get_species
 252+ C458 CD 66 C2                             call    SD_copy_species
 253+ C45B 21 FA C0                             ld		hl,SD_species
 254+ C45E 11 08 33                             ld		de,SpeciesScreenPos
 255+ C461                                      MMUSelectLayer1
 255+ C461 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 256+ C465 CD C8 E0                             call	l1_print_at
 257+ C468 2A 49 C2     .DisplayProductivity:   ld      hl,(SDDisplayProductivity)
 258+ C46B E5                                   push    hl
 259+ C46C DD E1                                pop     ix
 260+ C46E 11 00 00                             ld      de,0
 261+ C471 FD 21 9E C0                          ld      iy,productivity_value
 262+ C475 CD 79 A7                             call    DispDEIXtoIY
 263+ C478 FD E5        .AddProdUoM:            push    iy
 264+ C47A E1                                   pop     hl
 265+ C47B 23                                   inc     hl
 266+ C47C 11 B3 C0                             ld      de,productivity_uom
 267+ C47F CD F0 C4                             call    SDTackOnUOMtoHL
 268+ C482 11 A0 3B                             ld      de,$3BA0
 269+ C485 21 9E C0                             ld      hl,productivity_value
 270+ C488                                      MMUSelectLayer1
 270+ C488 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 271+ C48C CD C8 E0                             call	l1_print_at
 272+ C48F 3A B8 93     .DisplayRadius:         ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 273+ C492                                      MMUSelectGalaxyA
 273+ C492 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 274+ C495 2A 0F E9                             ld      hl,(GalaxyDisplayRadius)
 275+ C498 E5                                   push    hl
 276+ C499 DD E1                                pop     ix
 277+ C49B 11 00 00                             ld      de,0
 278+ C49E FD 21 67 C0                          ld      iy,radius_value
 279+ C4A2 CD 79 A7                             call    DispDEIXtoIY
 280+ C4A5 FD E5        .AddRadiusUoM:          push    iy
 281+ C4A7 E1                                   pop     hl
 282+ C4A8 23                                   inc     hl
 283+ C4A9 11 7C C0                             ld      de,radius_uom
 284+ C4AC CD F0 C4                             call    SDTackOnUOMtoHL
 285+ C4AF 21 67 C0                             ld      hl,radius_value
 286+ C4B2 11 A0 43                             ld      de,$43A0
 287+ C4B5                                      MMUSelectLayer1
 287+ C4B5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 288+ C4B9 CD C8 E0                             call	l1_print_at
 289+ C4BC 3A B8 93     .DisplayDescription:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 290+ C4BF                                      MMUSelectGalaxyA
 290+ C4BF ED 92 57    >                     nextreg GalaxyDataMMU,       a
 291+ C4C2 11 F7 E8     .CopySaveToGal:         ld      de,GalaxyWorkingSeed
 292+ C4C5 21 EA C2                             ld      hl,sd_copy_of_seed
 293+ C4C8 CD FE F9                             call    galaxy_copy_seed
 294+ C4CB ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 295+ C4CF CD 6B F8                             call     GalaxyGenerateDesc
 296+ C4D2 CD 72 C2                             call    SD_copy_description
 297+ C4D5 11 08 57                             ld      de,$5708
 298+ C4D8 21 19 C1                             ld      hl,SD_planet_description
 299+ C4DB                                      MMUSelectLayer1
 299+ C4DB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 300+ C4DF CD 15 E1                             call	l1_print_at_wrap
 301+ C4E2 C9                                   ret
 302+ C4E3
 303+ C4E3              ; HL = value to add on
 304+ C4E3              ; de = Unit of Measure
 305+ C4E3 7E           SDAddUoMtoHL:           ld      a,(hl)
 306+ C4E4 FE 00                                cp      0
 307+ C4E6 28 03                                jr      z,.FoundEnd
 308+ C4E8 23                                   inc     hl
 309+ C4E9 18 F8                                jr      SDAddUoMtoHL
 310+ C4EB EB           .FoundEnd:              ex      de,hl
 311+ C4EC CD 78 C2                             call    SDCopyLoop
 312+ C4EF C9                                   ret
 313+ C4F0
 314+ C4F0              ; works on HL already being at end
 315+ C4F0              ; de = Unit of Measure
 316+ C4F0 23           SDTackOnUOMtoHL:        inc     hl
 317+ C4F1 EB                                   ex      hl,de
 318+ C4F2 CD 78 C2                             call    SDCopyLoop
 319+ C4F5 C9                                   ret
 320+ C4F6              ;
 321+ C4F6              ;
 322+ C4F6              ;    SDDisplayEconomy        DB 0
 323+ C4F6              ;SDDisplayGovernment     DB 0
 324+ C4F6              ;SDDisplayEcononmy       DB 0
 325+ C4F6              ;SDDisplayTekLevel       DB 0
 326+ C4F6              ;
 327+ C4F6              ;SDDisplayProductivity   DW 0
 328+ C4F6              ;SDDisplayRadius         DW 0
 329+ C4F6              ;SDDataLength            EQU $ - SDDisplayEconomy
 330+ C4F6              ;
 331+ C4F6
 332+ C4F6
 333+ C4F6
 334+ C4F6
 335+ C4F6
 336+ C4F6              ;; PREsent ssytem
 337+ C4F6              ;; hyperspace systrem
 338+ C4F6              ;.StatusText:
 339+ C4F6              ;	; get closet ssytem to cursor
 340+ C4F6              ;	call	get_cmdr_condition
 341+ C4F6              ;	ld		hl, ConditionNameIdx
 342+ C4F6              ;	call	getTableText
 343+ C4F6              ;	ld		de,condition_position
 344+ C4F6              ;	call	l1_print_at
 345+ C4F6              ;.DisplayFuel:
 346+ C4F6              ;	call	GetFuelLevel
 347+ C4F6              ;	ld		hl, txt_fuel_level
 348+ C4F6              ;	ld		a,(hl)
 349+ C4F6              ;	cp		'0'
 350+ C4F6              ;	jr		nz,.PrintFuel
 351+ C4F6              ;.SkipLeadingZero:
 352+ C4F6              ;	inc		hl
 353+ C4F6              ;.PrintFuel:
 354+ C4F6              ;	ld		de,fuel_position
 355+ C4F6              ;	call	l1_print_at
 356+ C4F6              ;.DisplayCash:
 357+ C4F6              ;	call	GetCash
 358+ C4F6              ;	ld		hl,txt_cash_amount
 359+ C4F6              ;	ld		de,cash_position
 360+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 361+ C4F6              ;	ld		bc,cash_position
 362+ C4F6              ;	ld		hl,txt_cash_amount
 363+ C4F6              ;.CorrectPosition:
 364+ C4F6              ;	ld		a,(hl)
 365+ C4F6              ;	cp		0
 366+ C4F6              ;	jr		z,.DoneCorrection
 367+ C4F6              ;.StillDigits:
 368+ C4F6              ;	ld		a,c
 369+ C4F6              ;	add		a,8								; its 1 character forwards
 370+ C4F6              ;	ld		c,a
 371+ C4F6              ;	inc		hl
 372+ C4F6              ;	jr		.CorrectPosition
 373+ C4F6              ;.DoneCorrection:
 374+ C4F6              ;	ld		hl,txt_cash_decimal
 375+ C4F6              ;	ld		d,b
 376+ C4F6              ;	ld		e,c
 377+ C4F6              ;	call	l1_print_at
 378+ C4F6              ;.PrintLegalStatus:
 379+ C4F6              ;	ld		a,(FugitiveInnocentStatus)
 380+ C4F6              ;	cp		0
 381+ C4F6              ;	jr		nz,.Naughty
 382+ C4F6              ;	ld		hl,WordClean
 383+ C4F6              ;	jr		.DisplayLegalStatus
 384+ C4F6              ;.Naughty:
 385+ C4F6              ;	cp		50
 386+ C4F6              ;	jr		c,.JustOffender
 387+ C4F6              ;.VeryNaughty:
 388+ C4F6              ;	ld		hl,WordFugitive
 389+ C4F6              ;	jr		.DisplayLegalStatus
 390+ C4F6              ;.JustOffender:
 391+ C4F6              ;	ld		hl,WordOffender
 392+ C4F6              ;.DisplayLegalStatus:
 393+ C4F6              ;	ld		de,legal_status_position
 394+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 395+ C4F6              ;
 396+ C4F6 C9           	ret
 397+ C4F7
# file closed: ./Menus/system_data_menu.asm
1055  C4F7
1056  C4F7              ; Bank 54
1057  C4F7
1058  C4F7                  SLOT    MenuMarketAddr
1059  C4F7                  PAGE    BankMenuMarket
1060  C4F7                  ORG     MenuMarketAddr
1061  C000                  INCLUDE "./Menus/market_prices_menu.asm"
# file opened: ./Menus/market_prices_menu.asm
   1+ C000 4D 61 72 6B  market_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 F5 9E  market_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 BB 9F  						DW $0220,name_expanded
   4+ C018 80 0B 15 9B  						DW $0B80,WordUnit
   5+ C01C B0 0B 5E 9D  						DW $0BB0,WordQuantity
   6+ C020 08 13 3C 9D  						DW $1308,WordProduct
   7+ C024 60 13 44 9D  						DW $1360,WordUoM
   8+ C028 80 13 48 9D  						DW $1380,WordPrice
   9+ C02C B0 13 6C 9D  						DW $13B0,WordStock
  10+ C030 E0 13 68 9D  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_market_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_market_quantity     DB "999",0
  24+ C03D 39 39 39 00  txt_market_cargo        DB "999",0
  25+ C041 00 00        market_cursor			DW  $0000
  26+ C043              market_position			equ $2008
  27+ C043              market_uom				equ	$68
  28+ C043              market_price 			equ $88
  29+ C043              market_Quantity			equ	$B0
  30+ C043              market_Cargo            equ $E0
  31+ C043              market_UomOffset		equ 46
  32+ C043 20 20 20 20  market_blank_line       DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mkt_hold_level          DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mkt_cash				DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mkt_selected_row        db  0
  36+ C075
  37+ C075              mkt_cash_position       equ $B048
  38+ C075 00 00 00...  mkt_cash_amount			DS 20
  39+ C089 20 43 72 20  mkt_cash_UoM            DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mkt_cargo_position      equ $A848
  41+ C094 00 00 00...  mkt_cargo_amount		DS 20
  42+ C0A8 20 54 6F 6E  mkt_cargo_UoM           DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ C0B3 3A 74 C0     mkt_highlight_row:      ld      a,(mkt_selected_row)
  47+ C0B6 C6 04                                add     a,4
  48+ C0B8 57                                   ld      d,a
  49+ C0B9 1E 56                                ld      e,L1InvHighlight
  50+ C0BB                                      MMUSelectLayer1
  50+ C0BB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ C0BF CD 30 E0                             call    l1_hilight_row
  52+ C0C2 C9                                   ret
  53+ C0C3              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ C0C3 3A 74 C0     mkt_lowlight_row        ld      a,(mkt_selected_row)
  55+ C0C6 C6 04                                add     a,4
  56+ C0C8 57                                   ld      d,a
  57+ C0C9 1E 07                                ld      e,L1InvLowlight
  58+ C0CB                                      MMUSelectLayer1
  58+ C0CB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  59+ C0CF CD 30 E0                             call    l1_hilight_row
  60+ C0D2 C9                                   ret
  61+ C0D3              ;----------------------------------------------------------------------------------------------------------------------------------
  62+ C0D3 CD EA C0     MKT_DispDEIXtoIY1DP:    call    MKT_DispDEIXtoIY
  63+ C0D6 FD 36 02 00                          ld (iy+2),0
  64+ C0DA FD 7E 00                             ld      a,(IY+0)
  65+ C0DD FD 77 01                             ld      (IY+1),a
  66+ C0E0 3E 2E                                ld      a,"."
  67+ C0E2 FD 77 00                             ld      (IY+0),a
  68+ C0E5 FD 23                                inc     IY
  69+ C0E7 FD 23                                inc     IY
  70+ C0E9 C9                                   ret
  71+ C0EA              ;----------------------------------------------------------------------------------------------------------------------------------
  72+ C0EA DD 22 7F C1  MKT_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  73+ C0EE ED 53 81 C1                          ld (.MKTclcn32zIX),de
  74+ C0F2 DD 21 7B C1                          ld ix,.MKTclcn32t+36
  75+ C0F6 06 09                                ld b,9
  76+ C0F8 0E 00                                ld c,0
  77+ C0FA 3E 30        .MKTclcn321:            ld a,'0'
  78+ C0FC B7                                   or a
  79+ C0FD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  80+ C100 DD 56 01                             ld d,(ix+1)
  81+ C103 2A 7F C1                             ld hl,(.MKTclcn32z)
  82+ C106 ED 52                                sbc hl,de
  83+ C108 22 7F C1                             ld (.MKTclcn32z),hl
  84+ C10B DD 5E 02                             ld e,(ix+2)
  85+ C10E DD 56 03                             ld d,(ix+3)
  86+ C111 2A 81 C1                             ld hl,(.MKTclcn32zIX)
  87+ C114 ED 52                                sbc hl,de
  88+ C116 22 81 C1                             ld (.MKTclcn32zIX),hl
  89+ C119 38 04                                jr c,.MKTclcn325
  90+ C11B 0C                                   inc c
  91+ C11C 3C                                   inc a
  92+ C11D 18 DE                                jr .MKTclcn322
  93+ C11F DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  94+ C122 DD 56 01                             ld d,(ix+1)
  95+ C125 2A 7F C1                             ld hl,(.MKTclcn32z)
  96+ C128 19                                   add hl,de
  97+ C129 22 7F C1                             ld (.MKTclcn32z),hl
  98+ C12C DD 5E 02                             ld e,(ix+2)
  99+ C12F DD 56 03                             ld d,(ix+3)
 100+ C132 2A 81 C1                             ld hl,(.MKTclcn32zIX)
 101+ C135 ED 5A                                adc hl,de
 102+ C137 22 81 C1                             ld (.MKTclcn32zIX),hl
 103+ C13A 11 FC FF                             ld de,-4
 104+ C13D DD 19                                add ix,de
 105+ C13F 0C                                   inc c
 106+ C140 0D                                   dec c
 107+ C141 28 05                                jr z,.MKTclcn323
 108+ C143 FD 77 00                             ld (iy+0),a
 109+ C146 FD 23                                inc iy
 110+ C148 10 B0        .MKTclcn323:            djnz .MKTclcn321
 111+ C14A 3A 7F C1                             ld a,(.MKTclcn32z)
 112+ C14D C6 30                                add A,'0'
 113+ C14F FD 77 00                             ld (iy+0),a
 114+ C152 FD 36 01 00                          ld (iy+1),0
 115+ C156 C9                                   ret
 116+ C157 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 116+ C15B 0A 00 00 00
 116+ C15F 64 00 00 00
 116+ C163 E8 03 00 00
 116+ C167 10 27 00 00
 117+ C16B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 117+ C16F 40 42 0F 00
 117+ C173 80 96 98 00
 117+ C177 00 E1 F5 05
 117+ C17B 00 CA 9A 3B
 118+ C17F 00 00        .MKTclcn32z             ds 2
 119+ C181 00 00        .MKTclcn32zIX           ds 2
 120+ C183              ;----------------------------------------------------------------------------------------------------------------------------------
 121+ C183              ; "DispHL, writes HL to DE address"
 122+ C183 01 F0 D8     MPM_DispHLtoDE:         ld	bc,-10000
 123+ C186 CD 9C C1                             call	MPM_Num1
 124+ C189 01 18 FC                             ld	bc,-1000
 125+ C18C CD 9C C1                             call	MPM_Num1
 126+ C18F 01 9C FF                             ld	bc,-100
 127+ C192 CD 9C C1                             call	MPM_Num1
 128+ C195 0E F6                                ld	c,-10
 129+ C197 CD 9C C1                             call	MPM_Num1
 130+ C19A 0E FF                                ld	c,-1
 131+ C19C 3E 2F        MPM_Num1:	            ld	a,'0'-1
 132+ C19E 3C           .Num2:	                inc	a
 133+ C19F 09                                   add	hl,bc
 134+ C1A0 38 FC                                jr	c,.Num2
 135+ C1A2 ED 42                                sbc	hl,bc
 136+ C1A4 12                                   ld	(de),a
 137+ C1A5 13                                   inc	de
 138+ C1A6 C9                                   ret
 139+ C1A7              ;----------------------------------------------------------------------------------------------------------------------------------
 140+ C1A7 26 00        MPM_DispAtoDE:          ld h,0
 141+ C1A9 6F                                   ld l,a
 142+ C1AA C3 83 C1                             jp MPM_DispHLtoDE
 143+ C1AD              ;----------------------------------------------------------------------------------------------------------------------------------
 144+ C1AD 26 00        MPM_DispPriceAtoDE:     ld h,0
 145+ C1AF 6F                                   ld l,a
 146+ C1B0 01 9C FF                             ld	bc,-100
 147+ C1B3 CD C3 C1                             call	.NumLeadBlank1
 148+ C1B6 0E F6                                ld	c,-10
 149+ C1B8 CD 9C C1                             call	MPM_Num1
 150+ C1BB 3E 2E                                ld		a,'.'					; we could assume preformat but
 151+ C1BD 12                                   ld		(de),a					; we can optimse that later TODO
 152+ C1BE 13                                   inc		de						; with just an inc De
 153+ C1BF 0E FF                                ld	c,-1
 154+ C1C1 18 D9                                jr		MPM_Num1
 155+ C1C3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 156+ C1C5 3C           .NumLeadBlank2:	        inc	a
 157+ C1C6 09                                   add	hl,bc
 158+ C1C7 38 FC                                jr	c,.NumLeadBlank2
 159+ C1C9 FE 30                                cp	'0'
 160+ C1CB 20 02                                jr	nz,.DontBlank
 161+ C1CD 3E 20        .Blank:                 ld	a,' '
 162+ C1CF ED 42        .DontBlank:	            sbc	hl,bc
 163+ C1D1 12                                   ld	(de),a
 164+ C1D2 13                                   inc	de
 165+ C1D3 C9                                   ret
 166+ C1D4              ;----------------------------------------------------------------------------------------------------------------------------------
 167+ C1D4 FE 00        MPM_DispQtyAtoDE:       cp	0
 168+ C1D6 28 30                                jr	z,.NoStock
 169+ C1D8 26 00                                ld h,0
 170+ C1DA 6F                                   ld l,a
 171+ C1DB 01 9C FF                             ld	bc,-100
 172+ C1DE CD F7 C1                             call	.NumLeadBlank1
 173+ C1E1 FE 20        .WasLead0:              cp      ' '
 174+ C1E3 20 09                                jr      nz,.NotHundredsZero
 175+ C1E5 0E F6                                ld	c,-10
 176+ C1E7 CD F7 C1                             call	.NumLeadBlank1
 177+ C1EA 0E FF                                ld	c,-1
 178+ C1EC 18 AE                                jr		MPM_Num1
 179+ C1EE 0E F6        .NotHundredsZero:       ld	c,-10
 180+ C1F0 CD 9C C1                             call	MPM_Num1
 181+ C1F3 0E FF                                ld	c,-1
 182+ C1F5 18 A5                                jr		MPM_Num1
 183+ C1F7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 184+ C1F9 3C           .NumLeadBlank2:	        inc	a
 185+ C1FA 09                                   add	hl,bc
 186+ C1FB 38 FC                                jr	c,.NumLeadBlank2
 187+ C1FD FE 30                                cp	'0'
 188+ C1FF 20 02                                jr	nz,.DontBlank
 189+ C201 3E 20        .Blank:                 ld	a,' '
 190+ C203 ED 42        .DontBlank:	            sbc	hl,bc
 191+ C205 12                                   ld	(de),a
 192+ C206 13                                   inc	de
 193+ C207 C9                                   ret
 194+ C208 3E 20        .NoStock:               ld	a,' '
 195+ C20A 12                                   ld	(de),a
 196+ C20B 13                                   inc	de
 197+ C20C 12                                   ld	(de),a
 198+ C20D 13                                   inc	de
 199+ C20E 3E 2D                                ld	a,'-'
 200+ C210 12                                   ld	(de),a
 201+ C211 13                                   inc de
 202+ C212 C9                                   ret
 203+ C213              ;----------------------------------------------------------------------------------------------------------------------------------
 204+ C213              MPM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C213
   2++C213              ;">print_boilder_text hl = text structure, b = message count"
   3++C213              .BoilerTextLoop:
   4++C213 C5           	push		bc			; Save Message Count loop value
   5++C214 4E           	ld			c,(hl)		; Get Row into b
   6++C215 23           	inc			hl
   7++C216 46           	ld			b,(hl)		; Get Col into b
   8++C217 23           	inc			hl
   9++C218 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C219 23           	inc			hl
  11++C21A 56           	ld			d,(hl)		; Get text address Hi into E
  12++C21B 23           	inc			hl
  13++C21C E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C21D EB           	ex			de,hl		; now hl = address of text data
  15++C21E 1E FF        	ld			e,txt_status_colour
  16++C220 C5           	push		bc
  17++C221 D1           	pop			de
  18++C222                  MMUSelectLayer1
  18++C222 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C226 CD C8 E0     	call		l1_print_at
  20++C229 E1           	pop			hl
  21++C22A C1           	pop			bc
  22++C22B 10 E6        	djnz		.BoilerTextLoop
  23++C22D C9           	ret
  24++C22E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 205+ C22E              ;----------------------------------------------------------------------------------------------------------------------------------
 206+ C22E 2A F5 96     MKT_GetCash:            ld		hl,(Cash+2)
 207+ C231 EB                                   ex      de,hl
 208+ C232 DD 2A F3 96                          ld      ix,(Cash)
 209+ C236 FD 21 75 C0                          ld		iy,mkt_cash_amount
 210+ C23A CD D3 C0                             call 	MKT_DispDEIXtoIY1DP
 211+ C23D FD E5                                push    IY
 212+ C23F D1                                   pop     de
 213+ C240 21 89 C0                             ld      hl,mkt_cash_UoM
 214+ C243 01 0B 00                             ld      bc,11
 215+ C246 ED B0                                ldir
 216+ C248 C9                                   ret
 217+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 218+ C249 11 00 00     MKT_GetCargo:   	    ld      de,0
 219+ C24C DD 21 00 00                          ld      ix,0
 220+ C250 3A FD 96                             ld      a,(CargoRunningLoad)
 221+ C253 DD 6F                                ld      ixl,a
 222+ C255 FD 21 94 C0                          ld		iy,mkt_cargo_amount
 223+ C259 CD EA C0                             call 	MKT_DispDEIXtoIY
 224+ C25C FD E5                                push    IY
 225+ C25E D1                                   pop     de
 226+ C25F 13                                   inc     de
 227+ C260 21 A8 C0                             ld      hl,mkt_cargo_UoM
 228+ C263 01 0B 00                             ld      bc,11
 229+ C266 ED B0                                ldir
 230+ C268 C9                                   ret
 231+ C269              ;----------------------------------------------------------------------------------------------------------------------------------
 232+ C269 CD 49 C2     MKT_DisplayCargo:       call	MKT_GetCargo
 233+ C26C 21 94 C0                             ld		hl,mkt_cargo_amount
 234+ C26F 11 48 A8                             ld      de,mkt_cargo_position
 235+ C272                                      MMUSelectLayer1
 235+ C272 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 236+ C276 CD C8 E0                             call	l1_print_at
 237+ C279 C9                                   ret
 238+ C27A              ;----------------------------------------------------------------------------------------------------------------------------------
 239+ C27A CD 2E C2     MKT_DisplayCash:        call	MKT_GetCash
 240+ C27D 21 75 C0                             ld		hl,mkt_cash_amount
 241+ C280 11 48 B0                             ld      de,mkt_cash_position
 242+ C283                                      MMUSelectLayer1
 242+ C283 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 243+ C287 CD C8 E0                             call	l1_print_at
 244+ C28A C9                                   ret
 245+ C28B              ;----------------------------------------------------------------------------------------------------------------------------------
 246+ C28B              ; "A = stock item number"
 247+ C28B F5           PrintMarketItem:        push     af
 248+ C28C 21 08 20                             ld      hl,market_position  ; hl = base cursor position + row number * 8
 249+ C28F 57                                   ld      d,a                 ; .
 250+ C290 1E 08                                ld      e,8                 ; .
 251+ C292 ED 30                                mul                         ; .
 252+ C294 53                                   ld      d,e                 ; .
 253+ C295 1E 00                                ld      e,0                 ; .
 254+ C297 19                                   add     hl,de               ; .
 255+ C298 22 41 C0                             ld      (market_cursor),hl  ; save in market cursor and copy to de
 256+ C29B EB                                   ex      hl,de               ; .
 257+ C29C 21 43 C0                             ld      hl,market_blank_line; hl = blank line text
 258+ C29F                                      MMUSelectLayer1             ; print blank line (hl) and position DE
 258+ C29F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 259+ C2A3 CD C8 E0                             call	l1_print_at         ; .
 260+ C2A6 F1                                   pop     af
 261+ C2A7 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 262+ C2AB FD 21 FE 96                          ld      iy,CargoTonnes
 263+ C2AF 1E 08                                ld		e,8
 264+ C2B1 57                                   ld		d,a
 265+ C2B2 ED 30                                mul
 266+ C2B4 DD 19                                add		ix,de				; Move down a row ix += a * 8
 267+ C2B6 16 00                                ld      d,0
 268+ C2B8 5F                                   ld      e,a
 269+ C2B9 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 270+ C2BB              .GetName:               MMUSelectStockTable
 270+ C2BB ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 271+ C2BF DD 7E 00                             ld		a,(ix+0)
 272+ C2C2 21 99 9D                             ld		hl,WordIdx
 273+ C2C5 CD 6E 9A                             call	getTableText
 274+ C2C8 ED 5B 41 C0                          ld		de,(market_cursor)
 275+ C2CC                                      MMUSelectLayer1
 275+ C2CC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 276+ C2D0 CD C8 E0                             call	l1_print_at
 277+ C2D3              .GetUom                 MMUSelectStockTable
 277+ C2D3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 278+ C2D7 DD 7E 07                             ld		a,(ix+7)
 279+ C2DA C6 2E                                add		a,market_UomOffset
 280+ C2DC 21 99 9D                             ld		hl,WordIdx
 281+ C2DF CD 6E 9A                             call	getTableText
 282+ C2E2 ED 5B 41 C0                          ld		de,(market_cursor)
 283+ C2E6 1E 68                                ld		e,market_uom
 284+ C2E8                                      MMUSelectLayer1
 284+ C2E8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 285+ C2EC CD C8 E0                             call	l1_print_at
 286+ C2EF              .GetPrice:              MMUSelectStockTable
 286+ C2EF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 287+ C2F3 DD 7E 02                             ld		a,(ix+2)
 288+ C2F6 11 34 C0                             ld		de,txt_market_amount
 289+ C2F9 CD AD C1                             call	MPM_DispPriceAtoDE
 290+ C2FC 21 34 C0                             ld		hl,txt_market_amount
 291+ C2FF ED 5B 41 C0                          ld		de,(market_cursor)
 292+ C303 1E 88                                ld		e,market_price
 293+ C305                                      MMUSelectLayer1
 293+ C305 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 294+ C309 CD C8 E0                             call	l1_print_at
 295+ C30C              .GetQty:                MMUSelectStockTable
 295+ C30C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 296+ C310 DD 7E 01                             ld		a,(ix+1)
 297+ C313 11 39 C0                             ld		de,txt_market_quantity
 298+ C316 CD D4 C1                             call	MPM_DispQtyAtoDE
 299+ C319 21 39 C0                             ld		hl,txt_market_quantity
 300+ C31C ED 5B 41 C0                          ld		de,(market_cursor)
 301+ C320 1E B0                                ld		e,market_Quantity
 302+ C322                                      MMUSelectLayer1
 302+ C322 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 303+ C326 CD C8 E0                             call	l1_print_at
 304+ C329 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 305+ C32C 11 3D C0                             ld      de,txt_market_cargo
 306+ C32F CD D4 C1                             call	MPM_DispQtyAtoDE
 307+ C332 21 3D C0                             ld      hl,txt_market_cargo
 308+ C335 ED 5B 41 C0                          ld      de,(market_cursor)
 309+ C339 1E E0                                ld      e,market_Cargo
 310+ C33B                                      MMUSelectLayer1
 310+ C33B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 311+ C33F CD C8 E0                             call	l1_print_at
 312+ C342 C9                                   ret
 313+ C343
 314+ C343              draw_market_prices_menu:INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C343
   2++C343                  MMUSelectLayer1
   2++C343 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C347 CD 80 E0     	call	l1_cls
   4++C34A 3E 07        	ld		a,7
   5++C34C CD 9B E0     	call	l1_attr_cls_to_a
   6++C34F                  MMUSelectLayer2
   6++C34F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C353 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C356 CD C9 E0     	call	l2_cls	; Get some space
   9++C359              	MMUSelectSpriteBank
   9++C359 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C35D CD 6E E4     	call    sprite_cls_cursors
  11++C360
  12++C360
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 315+ C360 3E 20                                ld      a,$20
 316+ C362 32 C0 92                             ld      (MenuIdMax),a
 317+ C365 01 01 01     .Drawbox:               ld		bc,$0101
 318+ C368 11 FD BE                             ld		de,$BEFD
 319+ C36B 3E C0                                ld		a,$C0
 320+ C36D                                      MMUSelectLayer2
 320+ C36D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 321+ C371 CD F6 E1                             call	l2_draw_box
 322+ C374 01 01 0A                             ld		bc,$0A01
 323+ C377 11 C0 FE                             ld		de,$FEC0
 324+ C37A CD 62 E2                             call	l2_draw_horz_line
 325+ C37D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 326+ C380 11 C0 50                             ld		de,$50C0
 327+ C383 CD 62 E2                             call	l2_draw_horz_line
 328+ C386 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 329+ C389 11 C0 18                             ld		de,$18C0
 330+ C38C CD 62 E2                             call	l2_draw_horz_line
 331+ C38F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 332+ C392 11 C0 28                             ld		de,$28C0
 333+ C395 CD 62 E2                             call	l2_draw_horz_line
 334+ C398 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 335+ C39B 11 C0 28                             ld		de,$28C0
 336+ C39E CD 62 E2                             call	l2_draw_horz_line
 337+ C3A1 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 338+ C3A4 11 C0 18                             ld		de,$18C0
 339+ C3A7 CD 62 E2                             call	l2_draw_horz_line
 340+ C3AA 3A B8 93     .StaticText:	        ld      a,(Galaxy)
 341+ C3AD                                      MMUSelectGalaxyA
 341+ C3AD ED 92 57    >                     nextreg GalaxyDataMMU,       a
 342+ C3B0 3E 19                                ld		a,25
 343+ C3B2 CD 36 9F                             call	expandTokenToString
 344+ C3B5 CD 79 F6                             call	GetDigramGalaxySeed
 345+ C3B8 06 09                                ld		b,9
 346+ C3BA 21 10 C0                             ld		hl,market_boiler_text
 347+ C3BD CD 13 C2                             call	MPM_print_boiler_text
 348+ C3C0              ; Generate the market list on screen
 349+ C3C0 3E 00        .DisplayPrices:         ld		a,0
 350+ C3C2 21 08 20                             ld		hl,market_position          ; set current cursor position on screen
 351+ C3C5 22 41 C0                             ld		(market_cursor),hl          ; .
 352+ C3C8 F5           MarketLoop:	            push	af
 353+ C3C9 CD 8B C2                             call	PrintMarketItem             ; display a single market item
 354+ C3CC F1                                   pop		af
 355+ C3CD 3C                                   inc		a
 356+ C3CE FE 11                                cp		17
 357+ C3D0 20 F6                                jr		nz,MarketLoop
 358+ C3D2 AF           .InitialHighlight:      xor     a
 359+ C3D3 32 74 C0                             ld      (mkt_selected_row),a        ; assume on row zero
 360+ C3D6 CD B3 C0                             call    mkt_highlight_row
 361+ C3D9 21 64 C0     .DisCargo:              ld      hl,mkt_hold_level
 362+ C3DC 11 10 A8                             ld      de,$A810
 363+ C3DF                                      MMUSelectLayer1
 363+ C3DF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 364+ C3E3 CD C8 E0                             call	l1_print_at
 365+ C3E6 CD 69 C2                             call    MKT_DisplayCargo
 366+ C3E9 21 6C C0     .DisCash:               ld      hl,mkt_cash
 367+ C3EC 11 10 B0                             ld      de,$B010
 368+ C3EF                                      MMUSelectLayer1
 368+ C3EF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 369+ C3F3 CD C8 E0                             call	l1_print_at
 370+ C3F6 CD 7A C2                             call    MKT_DisplayCash
 371+ C3F9 C9                                   ret
 372+ C3FA
 373+ C3FA
 374+ C3FA              ;----------------------------------------------------------------------------------------------------------------------------------
 375+ C3FA              ; Handles all the input whilst in the market menu
 376+ C3FA 3E 4A        loop_market_menu:       ld      a,c_Pressed_CursorUp
 377+ C3FC CD 9D 90                             call    is_key_pressed
 378+ C3FF CC 1B C4                             call    z,mkt_UpPressed
 379+ C402 3E 4C                                ld      a,c_Pressed_CursorDown
 380+ C404 CD 9D 90                             call    is_key_pressed
 381+ C407 CC 2C C4                             call    z,mkt_DownPressed
 382+ C40A 3E 08                                ld      a,c_Pressed_RollLeft
 383+ C40C CD 9D 90                             call    is_key_pressed
 384+ C40F CC 3D C4                             call    z,mkt_LeftPressed
 385+ C412 3E 0A                                ld      a,c_Pressed_RollRight
 386+ C414 CD 9D 90                             call    is_key_pressed
 387+ C417 CC 80 C4                             call    z,mkt_RightPressed
 388+ C41A C9                                   ret
 389+ C41B
 390+ C41B              ;----------------------------------------------------------------------------------------------------------------------------------
 391+ C41B 3A 74 C0     mkt_UpPressed:          ld      a,(mkt_selected_row)
 392+ C41E FE 00                                cp      0
 393+ C420 C8                                   ret     z
 394+ C421 CD C3 C0                             call    mkt_lowlight_row
 395+ C424 21 74 C0                             ld      hl,mkt_selected_row
 396+ C427 35                                   dec     (hl)
 397+ C428 CD B3 C0                             call    mkt_highlight_row
 398+ C42B C9                                   ret
 399+ C42C              ;----------------------------------------------------------------------------------------------------------------------------------
 400+ C42C 3A 74 C0     mkt_DownPressed:        ld      a,(mkt_selected_row)
 401+ C42F FE 10                                cp      16
 402+ C431 C8                                   ret     z
 403+ C432 CD C3 C0                             call    mkt_lowlight_row
 404+ C435 21 74 C0                             ld      hl,mkt_selected_row
 405+ C438 34                                   inc     (hl)
 406+ C439 CD B3 C0                             call    mkt_highlight_row
 407+ C43C C9                                   ret
 408+ C43D              ;----------------------------------------------------------------------------------------------------------------------------------
 409+ C43D 3A 74 C0     mkt_LeftPressed:        ld      a,(mkt_selected_row)
 410+ C440 21 FE 96                             ld      hl,CargoTonnes
 411+ C443 ED 31                                add     hl,a
 412+ C445 7E                                   ld      a,(hl)
 413+ C446 FE 00                                cp      0
 414+ C448 C8                                   ret     z
 415+ C449 35                                   dec     (hl)
 416+ C44A DD 21 00 E0                          ld      ix,StockFood
 417+ C44E 3A 74 C0                             ld      a,(mkt_selected_row)
 418+ C451 16 08                                ld      d,8
 419+ C453 5F                                   ld      e,a
 420+ C454 ED 30                                mul
 421+ C456 DD 19                                add     ix,de
 422+ C458                                      MMUSelectStockTable
 422+ C458 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 423+ C45C DD 34 01                             inc     (ix+1)
 424+ C45F DD 7E 07                             ld      a,(ix+7)
 425+ C462 FE 30                                cp      48
 426+ C464 20 04                                jr      nz,.UnderATonne
 427+ C466 21 FD 96                             ld      hl,CargoRunningLoad
 428+ C469 35                                   dec     (hl)            ; We need to cosider UoM
 429+ C46A DD 7E 02     .UnderATonne:           ld      a,(ix+2)
 430+ C46D 16 00                                ld      d,0
 431+ C46F 5F                                   ld      e,a
 432+ C470 CD 65 A0                             call    addDEtoCash
 433+ C473                                      ; DO ADD CASH
 434+ C473 3A 74 C0                             ld      a,(mkt_selected_row)
 435+ C476 CD 8B C2                             call    PrintMarketItem
 436+ C479 CD 69 C2                             call    MKT_DisplayCargo
 437+ C47C CD 7A C2                             call    MKT_DisplayCash
 438+ C47F C9                                   ret
 439+ C480              ;----------------------------------------------------------------------------------------------------------------------------------
 440+ C480              mkt_RightPressed:       MMUSelectStockTable
 440+ C480 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 441+ C484 DD 21 00 E0                          ld      ix,StockFood
 442+ C488 3A 74 C0                             ld      a,(mkt_selected_row)
 443+ C48B 16 08                                ld      d,8
 444+ C48D 5F                                   ld      e,a
 445+ C48E ED 30                                mul
 446+ C490 DD 19                                add     ix,de
 447+ C492 4F                                   ld      c,a
 448+ C493 DD 7E 01                             ld      a,(ix+1)
 449+ C496 FE 00                                cp      0
 450+ C498 C8                                   ret     z
 451+ C499 DD 7E 07     .CheckUoM:              ld      a,(ix+7)
 452+ C49C FE 30                                cp      48
 453+ C49E 28 0F                                jr      z,.CheckCargo                       ; cargo is in tonnes
 454+ C4A0 3A 74 C0     .NotTonnage:            ld      a,(mkt_selected_row)
 455+ C4A3 21 FE 96                             ld      hl,CargoTonnes
 456+ C4A6 ED 31                                add     hl,a
 457+ C4A8 7E                                   ld      a,(hl)
 458+ C4A9 FE C8                                cp      200
 459+ C4AB C8                                   ret     z                                   ; else its a 200 UoM limit
 460+ C4AC C3 B5 C4                             jp      .CheckCash
 461+ C4AF 2A FC 96     .CheckCargo:            ld      hl,(CargoBaySize)                   ; = h = runningload l = cargo bay size
 462+ C4B2 7C                                   ld      a,h
 463+ C4B3 BD                                   cp      l
 464+ C4B4 C8                                   ret     z                                   ; return if we have already maxed out
 465+ C4B5 2A F5 96     .CheckCash:             ld      hl,(Cash+2)
 466+ C4B8 7C                                   ld      a,h
 467+ C4B9 B5                                   or      l
 468+ C4BA 20 0F                                jr      nz,.MoreThanRequired
 469+ C4BC 2A F3 96                             ld      hl,(Cash)
 470+ C4BF 7C                                   ld      a,h
 471+ C4C0 FE 00                                cp      0
 472+ C4C2 20 07                                jr      nz,.MoreThanRequired
 473+ C4C4 DD 7E 02                             ld      a,(ix+2)
 474+ C4C7 BD                                   cp      l
 475+ C4C8 30 01                                jr      nc,.MoreThanRequired
 476+ C4CA C9                                   ret                         ; Insufficient Funds
 477+ C4CB 19           .MoreThanRequired:      add     hl,de
 478+ C4CC 7C                                   ld      a,h
 479+ C4CD B3                                   or      e
 480+ C4CE                                      ; check cash can we buy, and cargo capacity
 481+ C4CE DD 35 01                             dec     (ix+1)
 482+ C4D1 3A 74 C0                             ld      a,(mkt_selected_row)
 483+ C4D4 21 FE 96                             ld      hl,CargoTonnes
 484+ C4D7 ED 31                                add     hl,a
 485+ C4D9 34                                   inc     (hl)
 486+ C4DA DD 7E 07                             ld      a,(ix+7)
 487+ C4DD 47                                   ld      b,a
 488+ C4DE FE 30                                cp      48
 489+ C4E0 20 05                                jr      nz,.UnderOneTonne
 490+ C4E2 78                                   ld      a,b
 491+ C4E3 21 FD 96                             ld      hl,CargoRunningLoad
 492+ C4E6 34                                   inc     (hl)
 493+ C4E7 DD 7E 02     .UnderOneTonne:         ld      a,(ix+2)
 494+ C4EA 16 00                                ld      d,0
 495+ C4EC 5F                                   ld      e,a
 496+ C4ED CD 78 A0                             call    subDEfromCash
 497+ C4F0 3A 74 C0                             ld      a,(mkt_selected_row)
 498+ C4F3 CD 8B C2                             call    PrintMarketItem
 499+ C4F6 CD 69 C2                             call    MKT_DisplayCargo
 500+ C4F9 CD 7A C2                             call    MKT_DisplayCash
 501+ C4FC C9                                   ret
# file closed: ./Menus/market_prices_menu.asm
1062  C4FD
1063  C4FD              ; Bank 66
1064  C4FD
1065  C4FD                  SLOT    DispMarketAddr
1066  C4FD                  PAGE    BankDispMarket
1067  C4FD                  ORG     DispMarketAddr
1068  C000                  INCLUDE "./Menus/market_prices_disp.asm"
# file opened: ./Menus/market_prices_disp.asm
   1+ C000 4D 61 72 6B  mktdisp_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 F5 9E  mktdisp_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 BB 9F  						DW $0220,name_expanded
   4+ C018 80 0B 15 9B  						DW $0B80,WordUnit
   5+ C01C B0 0B 5E 9D  						DW $0BB0,WordQuantity
   6+ C020 08 13 3C 9D  						DW $1308,WordProduct
   7+ C024 60 13 44 9D  						DW $1360,WordUoM
   8+ C028 80 13 48 9D  						DW $1380,WordPrice
   9+ C02C B0 13 6C 9D  						DW $13B0,WordStock
  10+ C030 E0 13 68 9D  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_mktdisp_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_mktdisp_quantity    DB "999",0
  24+ C03D 39 39 39 00  txt_mktdisp_cargo       DB "999",0
  25+ C041 00 00        mktdisp_cursor			DW  $0000
  26+ C043              mktdisp_position		equ $2008
  27+ C043              mktdisp_uom				equ	$68
  28+ C043              mktdisp_price 			equ $88
  29+ C043              mktdisp_Quantity		equ	$B0
  30+ C043              mktdisp_Cargo           equ $E0
  31+ C043              mktdisp_UomOffset		equ 46
  32+ C043 20 20 20 20  mktdisp_blank_line      DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mktdisp_hold_level      DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mktdisp_cash			DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mktdisp_selected_row    db  0
  36+ C075
  37+ C075              mktdisp_cash_position   equ $B048
  38+ C075 00 00 00...  mktdisp_cash_amount		DS 20
  39+ C089 20 43 72 20  mktdisp_cash_UoM        DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mktdisp_cargo_position  equ $A848
  41+ C094 00 00 00...  mktdisp_cargo_amount	DS 20
  42+ C0A8 20 54 6F 6E  mktdisp_cargo_UoM       DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3 CD CA C0     mktdisp_DispDEIXtoIY1DP:    call    mktdisp_DispDEIXtoIY
  46+ C0B6 FD 36 02 00                          ld (iy+2),0
  47+ C0BA FD 7E 00                             ld      a,(IY+0)
  48+ C0BD FD 77 01                             ld      (IY+1),a
  49+ C0C0 3E 2E                                ld      a,"."
  50+ C0C2 FD 77 00                             ld      (IY+0),a
  51+ C0C5 FD 23                                inc     IY
  52+ C0C7 FD 23                                inc     IY
  53+ C0C9 C9                                   ret
  54+ C0CA              ;----------------------------------------------------------------------------------------------------------------------------------
  55+ C0CA DD 22 5F C1  mktdisp_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  56+ C0CE ED 53 61 C1                          ld (.MKTclcn32zIX),de
  57+ C0D2 DD 21 5B C1                          ld ix,.MKTclcn32t+36
  58+ C0D6 06 09                                ld b,9
  59+ C0D8 0E 00                                ld c,0
  60+ C0DA 3E 30        .MKTclcn321:            ld a,'0'
  61+ C0DC B7                                   or a
  62+ C0DD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  63+ C0E0 DD 56 01                             ld d,(ix+1)
  64+ C0E3 2A 5F C1                             ld hl,(.MKTclcn32z)
  65+ C0E6 ED 52                                sbc hl,de
  66+ C0E8 22 5F C1                             ld (.MKTclcn32z),hl
  67+ C0EB DD 5E 02                             ld e,(ix+2)
  68+ C0EE DD 56 03                             ld d,(ix+3)
  69+ C0F1 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  70+ C0F4 ED 52                                sbc hl,de
  71+ C0F6 22 61 C1                             ld (.MKTclcn32zIX),hl
  72+ C0F9 38 04                                jr c,.MKTclcn325
  73+ C0FB 0C                                   inc c
  74+ C0FC 3C                                   inc a
  75+ C0FD 18 DE                                jr .MKTclcn322
  76+ C0FF DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  77+ C102 DD 56 01                             ld d,(ix+1)
  78+ C105 2A 5F C1                             ld hl,(.MKTclcn32z)
  79+ C108 19                                   add hl,de
  80+ C109 22 5F C1                             ld (.MKTclcn32z),hl
  81+ C10C DD 5E 02                             ld e,(ix+2)
  82+ C10F DD 56 03                             ld d,(ix+3)
  83+ C112 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  84+ C115 ED 5A                                adc hl,de
  85+ C117 22 61 C1                             ld (.MKTclcn32zIX),hl
  86+ C11A 11 FC FF                             ld de,-4
  87+ C11D DD 19                                add ix,de
  88+ C11F 0C                                   inc c
  89+ C120 0D                                   dec c
  90+ C121 28 05                                jr z,.MKTclcn323
  91+ C123 FD 77 00                             ld (iy+0),a
  92+ C126 FD 23                                inc iy
  93+ C128 10 B0        .MKTclcn323:            djnz .MKTclcn321
  94+ C12A 3A 5F C1                             ld a,(.MKTclcn32z)
  95+ C12D C6 30                                add A,'0'
  96+ C12F FD 77 00                             ld (iy+0),a
  97+ C132 FD 36 01 00                          ld (iy+1),0
  98+ C136 C9                                   ret
  99+ C137 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  99+ C13B 0A 00 00 00
  99+ C13F 64 00 00 00
  99+ C143 E8 03 00 00
  99+ C147 10 27 00 00
 100+ C14B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 100+ C14F 40 42 0F 00
 100+ C153 80 96 98 00
 100+ C157 00 E1 F5 05
 100+ C15B 00 CA 9A 3B
 101+ C15F 00 00        .MKTclcn32z             ds 2
 102+ C161 00 00        .MKTclcn32zIX           ds 2
 103+ C163              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C163              ; "DispHL, writes HL to DE address"
 105+ C163 01 F0 D8     MPD_DispHLtoDE:         ld	bc,-10000
 106+ C166 CD 7C C1                             call	MPD_Num1
 107+ C169 01 18 FC                             ld	bc,-1000
 108+ C16C CD 7C C1                             call	MPD_Num1
 109+ C16F 01 9C FF                             ld	bc,-100
 110+ C172 CD 7C C1                             call	MPD_Num1
 111+ C175 0E F6                                ld	c,-10
 112+ C177 CD 7C C1                             call	MPD_Num1
 113+ C17A 0E FF                                ld	c,-1
 114+ C17C 3E 2F        MPD_Num1:	            ld	a,'0'-1
 115+ C17E 3C           .Num2:	                inc	a
 116+ C17F 09                                   add	hl,bc
 117+ C180 38 FC                                jr	c,.Num2
 118+ C182 ED 42                                sbc	hl,bc
 119+ C184 12                                   ld	(de),a
 120+ C185 13                                   inc	de
 121+ C186 C9                                   ret
 122+ C187              ;----------------------------------------------------------------------------------------------------------------------------------
 123+ C187 26 00        MPD_DispAtoDE:          ld h,0
 124+ C189 6F                                   ld l,a
 125+ C18A C3 63 C1                             jp MPD_DispHLtoDE
 126+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 127+ C18D 26 00        MPD_DispPriceAtoDE:     ld h,0
 128+ C18F 6F                                   ld l,a
 129+ C190 01 9C FF                             ld	bc,-100
 130+ C193 CD A3 C1                             call	.NumLeadBlank1
 131+ C196 0E F6                                ld	c,-10
 132+ C198 CD 7C C1                             call	MPD_Num1
 133+ C19B 3E 2E                                ld		a,'.'					; we could assume preformat but
 134+ C19D 12                                   ld		(de),a					; we can optimse that later TODO
 135+ C19E 13                                   inc		de						; with just an inc De
 136+ C19F 0E FF                                ld	c,-1
 137+ C1A1 18 D9                                jr		MPD_Num1
 138+ C1A3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 139+ C1A5 3C           .NumLeadBlank2:	        inc	a
 140+ C1A6 09                                   add	hl,bc
 141+ C1A7 38 FC                                jr	c,.NumLeadBlank2
 142+ C1A9 FE 30                                cp	'0'
 143+ C1AB 20 02                                jr	nz,.DontBlank
 144+ C1AD 3E 20        .Blank:                 ld	a,' '
 145+ C1AF ED 42        .DontBlank:	            sbc	hl,bc
 146+ C1B1 12                                   ld	(de),a
 147+ C1B2 13                                   inc	de
 148+ C1B3 C9                                   ret
 149+ C1B4              ;----------------------------------------------------------------------------------------------------------------------------------
 150+ C1B4 FE 00        MPD_DispQtyAtoDE:       cp	0
 151+ C1B6 28 30                                jr	z,.NoStock
 152+ C1B8 26 00                                ld h,0
 153+ C1BA 6F                                   ld l,a
 154+ C1BB 01 9C FF                             ld	bc,-100
 155+ C1BE CD D7 C1                             call	.NumLeadBlank1
 156+ C1C1 FE 20        .WasLead0:              cp      ' '
 157+ C1C3 20 09                                jr      nz,.NotHundredsZero
 158+ C1C5 0E F6                                ld	c,-10
 159+ C1C7 CD D7 C1                             call	.NumLeadBlank1
 160+ C1CA 0E FF                                ld	c,-1
 161+ C1CC 18 AE                                jr		MPD_Num1
 162+ C1CE 0E F6        .NotHundredsZero:       ld	c,-10
 163+ C1D0 CD 7C C1                             call	MPD_Num1
 164+ C1D3 0E FF                                ld	c,-1
 165+ C1D5 18 A5                                jr		MPD_Num1
 166+ C1D7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 167+ C1D9 3C           .NumLeadBlank2:	        inc	a
 168+ C1DA 09                                   add	hl,bc
 169+ C1DB 38 FC                                jr	c,.NumLeadBlank2
 170+ C1DD FE 30                                cp	'0'
 171+ C1DF 20 02                                jr	nz,.DontBlank
 172+ C1E1 3E 20        .Blank:                 ld	a,' '
 173+ C1E3 ED 42        .DontBlank:	            sbc	hl,bc
 174+ C1E5 12                                   ld	(de),a
 175+ C1E6 13                                   inc	de
 176+ C1E7 C9                                   ret
 177+ C1E8 3E 20        .NoStock:               ld	a,' '
 178+ C1EA 12                                   ld	(de),a
 179+ C1EB 13                                   inc	de
 180+ C1EC 12                                   ld	(de),a
 181+ C1ED 13                                   inc	de
 182+ C1EE 3E 2D                                ld	a,'-'
 183+ C1F0 12                                   ld	(de),a
 184+ C1F1 13                                   inc de
 185+ C1F2 C9                                   ret
 186+ C1F3              ;----------------------------------------------------------------------------------------------------------------------------------
 187+ C1F3              MPD_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C1F3
   2++C1F3              ;">print_boilder_text hl = text structure, b = message count"
   3++C1F3              .BoilerTextLoop:
   4++C1F3 C5           	push		bc			; Save Message Count loop value
   5++C1F4 4E           	ld			c,(hl)		; Get Row into b
   6++C1F5 23           	inc			hl
   7++C1F6 46           	ld			b,(hl)		; Get Col into b
   8++C1F7 23           	inc			hl
   9++C1F8 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C1F9 23           	inc			hl
  11++C1FA 56           	ld			d,(hl)		; Get text address Hi into E
  12++C1FB 23           	inc			hl
  13++C1FC E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C1FD EB           	ex			de,hl		; now hl = address of text data
  15++C1FE 1E FF        	ld			e,txt_status_colour
  16++C200 C5           	push		bc
  17++C201 D1           	pop			de
  18++C202                  MMUSelectLayer1
  18++C202 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C206 CD C8 E0     	call		l1_print_at
  20++C209 E1           	pop			hl
  21++C20A C1           	pop			bc
  22++C20B 10 E6        	djnz		.BoilerTextLoop
  23++C20D C9           	ret
  24++C20E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 188+ C20E              ;----------------------------------------------------------------------------------------------------------------------------------
 189+ C20E 2A F5 96     mktdisp_GetCash:            ld		hl,(Cash+2)
 190+ C211 EB                                   ex      de,hl
 191+ C212 DD 2A F3 96                          ld      ix,(Cash)
 192+ C216 FD 21 75 C0                          ld		iy,mktdisp_cash_amount
 193+ C21A CD B3 C0                             call 	mktdisp_DispDEIXtoIY1DP
 194+ C21D FD E5                                push    IY
 195+ C21F D1                                   pop     de
 196+ C220 21 89 C0                             ld      hl,mktdisp_cash_UoM
 197+ C223 01 0B 00                             ld      bc,11
 198+ C226 ED B0                                ldir
 199+ C228 C9                                   ret
 200+ C229              ;----------------------------------------------------------------------------------------------------------------------------------
 201+ C229 11 00 00     mktdisp_GetCargo:   	ld      de,0
 202+ C22C DD 21 00 00                          ld      ix,0
 203+ C230 3A FD 96                             ld      a,(CargoRunningLoad)
 204+ C233 DD 6F                                ld      ixl,a
 205+ C235 FD 21 94 C0                          ld		iy,mktdisp_cargo_amount
 206+ C239 CD CA C0                             call 	mktdisp_DispDEIXtoIY
 207+ C23C FD E5                                push    IY
 208+ C23E D1                                   pop     de
 209+ C23F 13                                   inc     de
 210+ C240 21 A8 C0                             ld      hl,mktdisp_cargo_UoM
 211+ C243 01 0B 00                             ld      bc,11
 212+ C246 ED B0                                ldir
 213+ C248 C9                                   ret
 214+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 215+ C249 CD 29 C2     mktdisp_DisplayCargo:   call	mktdisp_GetCargo
 216+ C24C 21 94 C0                             ld		hl,mktdisp_cargo_amount
 217+ C24F 11 48 A8                             ld      de,mktdisp_cargo_position
 218+ C252                                      MMUSelectLayer1
 218+ C252 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 219+ C256 CD C8 E0                             call	l1_print_at
 220+ C259 C9                                   ret
 221+ C25A              ;----------------------------------------------------------------------------------------------------------------------------------
 222+ C25A CD 0E C2     mktdisp_DisplayCash:        call	mktdisp_GetCash
 223+ C25D 21 75 C0                             ld		hl,mktdisp_cash_amount
 224+ C260 11 48 B0                             ld      de,mktdisp_cash_position
 225+ C263                                      MMUSelectLayer1
 225+ C263 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 226+ C267 CD C8 E0                             call	l1_print_at
 227+ C26A C9                                   ret
 228+ C26B              ;----------------------------------------------------------------------------------------------------------------------------------
 229+ C26B              ; "A = stock item number"
 230+ C26B F5           PrintMktDispItem:       push     af
 231+ C26C 21 08 20                             ld      hl,mktdisp_position
 232+ C26F 57                                   ld      d,a
 233+ C270 1E 08                                ld      e,8
 234+ C272 ED 30                                mul
 235+ C274 53                                   ld      d,e
 236+ C275 1E 00                                ld      e,0
 237+ C277 19                                   add     hl,de
 238+ C278 22 41 C0                             ld      (mktdisp_cursor),hl
 239+ C27B EB                                   ex      hl,de
 240+ C27C 21 43 C0                             ld      hl,mktdisp_blank_line
 241+ C27F                                      MMUSelectLayer1
 241+ C27F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 242+ C283 CD C8 E0                             call	l1_print_at
 243+ C286 F1                                   pop     af
 244+ C287 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 245+ C28B FD 21 FE 96                          ld      iy,CargoTonnes
 246+ C28F 1E 08                                ld		e,8
 247+ C291 57                                   ld		d,a
 248+ C292 ED 30                                mul
 249+ C294 DD 19                                add		ix,de				; Move down a row ix += a * 8
 250+ C296 16 00                                ld      d,0
 251+ C298 5F                                   ld      e,a
 252+ C299 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 253+ C29B              .GetName:               MMUSelectStockTable
 253+ C29B ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 254+ C29F DD 7E 00                             ld		a,(ix+0)
 255+ C2A2 21 99 9D                             ld		hl,WordIdx
 256+ C2A5 CD 6E 9A                             call	getTableText
 257+ C2A8 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 258+ C2AC                                      MMUSelectLayer1
 258+ C2AC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 259+ C2B0 CD C8 E0                             call	l1_print_at
 260+ C2B3              .GetUom                 MMUSelectStockTable
 260+ C2B3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 261+ C2B7 DD 7E 07                             ld		a,(ix+7)
 262+ C2BA C6 2E                                add		a,mktdisp_UomOffset
 263+ C2BC 21 99 9D                             ld		hl,WordIdx
 264+ C2BF CD 6E 9A                             call	getTableText
 265+ C2C2 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 266+ C2C6 1E 68                                ld		e,mktdisp_uom
 267+ C2C8                                      MMUSelectLayer1
 267+ C2C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 268+ C2CC CD C8 E0                             call	l1_print_at
 269+ C2CF              .GetPrice:              MMUSelectStockTable
 269+ C2CF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 270+ C2D3 DD 7E 02                             ld		a,(ix+2)
 271+ C2D6 11 34 C0                             ld		de,txt_mktdisp_amount
 272+ C2D9 CD 8D C1                             call	MPD_DispPriceAtoDE
 273+ C2DC 21 34 C0                             ld		hl,txt_mktdisp_amount
 274+ C2DF ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 275+ C2E3 1E 88                                ld		e,mktdisp_price
 276+ C2E5                                      MMUSelectLayer1
 276+ C2E5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 277+ C2E9 CD C8 E0                             call	l1_print_at
 278+ C2EC              .GetQty:                MMUSelectStockTable
 278+ C2EC ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 279+ C2F0 DD 7E 01                             ld		a,(ix+1)
 280+ C2F3 11 39 C0                             ld		de,txt_mktdisp_quantity
 281+ C2F6 CD B4 C1                             call	MPD_DispQtyAtoDE
 282+ C2F9 21 39 C0                             ld		hl,txt_mktdisp_quantity
 283+ C2FC ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 284+ C300 1E B0                                ld		e,mktdisp_Quantity
 285+ C302                                      MMUSelectLayer1
 285+ C302 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 286+ C306 CD C8 E0                             call	l1_print_at
 287+ C309 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 288+ C30C 11 3D C0                             ld      de,txt_mktdisp_cargo
 289+ C30F CD B4 C1                             call	MPD_DispQtyAtoDE
 290+ C312 21 3D C0                             ld      hl,txt_mktdisp_cargo
 291+ C315 ED 5B 41 C0                          ld      de,(mktdisp_cursor)
 292+ C319 1E E0                                ld      e,mktdisp_Cargo
 293+ C31B                                      MMUSelectLayer1
 293+ C31B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 294+ C31F CD C8 E0                             call	l1_print_at
 295+ C322 C9                                   ret
 296+ C323
 297+ C323              draw_mktdisp_prices_menu:INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C323
   2++C323                  MMUSelectLayer1
   2++C323 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C327 CD 80 E0     	call	l1_cls
   4++C32A 3E 07        	ld		a,7
   5++C32C CD 9B E0     	call	l1_attr_cls_to_a
   6++C32F                  MMUSelectLayer2
   6++C32F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C333 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C336 CD C9 E0     	call	l2_cls	; Get some space
   9++C339              	MMUSelectSpriteBank
   9++C339 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C33D CD 6E E4     	call    sprite_cls_cursors
  11++C340
  12++C340
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 298+ C340 3E 20                                ld      a,$20
 299+ C342 32 C0 92                             ld      (MenuIdMax),a
 300+ C345 01 01 01     .Drawbox:               ld		bc,$0101
 301+ C348 11 FD BE                             ld		de,$BEFD
 302+ C34B 3E C0                                ld		a,$C0
 303+ C34D                                      MMUSelectLayer2
 303+ C34D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 304+ C351 CD F6 E1                             call	l2_draw_box
 305+ C354 01 01 0A                             ld		bc,$0A01
 306+ C357 11 C0 FE                             ld		de,$FEC0
 307+ C35A CD 62 E2                             call	l2_draw_horz_line
 308+ C35D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 309+ C360 11 C0 50                             ld		de,$50C0
 310+ C363 CD 62 E2                             call	l2_draw_horz_line
 311+ C366 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 312+ C369 11 C0 18                             ld		de,$18C0
 313+ C36C CD 62 E2                             call	l2_draw_horz_line
 314+ C36F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 315+ C372 11 C0 28                             ld		de,$28C0
 316+ C375 CD 62 E2                             call	l2_draw_horz_line
 317+ C378 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 318+ C37B 11 C0 28                             ld		de,$28C0
 319+ C37E CD 62 E2                             call	l2_draw_horz_line
 320+ C381 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 321+ C384 11 C0 18                             ld		de,$18C0
 322+ C387 CD 62 E2                             call	l2_draw_horz_line
 323+ C38A 3A B8 93     .StaticText:	        ld      a,(Galaxy)
 324+ C38D                                      MMUSelectGalaxyA
 324+ C38D ED 92 57    >                     nextreg GalaxyDataMMU,       a
 325+ C390 3E 19                                ld		a,25
 326+ C392 CD 36 9F                             call	expandTokenToString
 327+ C395 CD 79 F6                             call	GetDigramGalaxySeed
 328+ C398 06 09                                ld		b,9
 329+ C39A 21 10 C0                             ld		hl,mktdisp_boiler_text
 330+ C39D CD F3 C1                             call	MPD_print_boiler_text
 331+ C3A0 3E 00        .DisplayPrices:         ld		a,0
 332+ C3A2 21 08 20                             ld		hl,mktdisp_position
 333+ C3A5 22 41 C0                             ld		(mktdisp_cursor),hl
 334+ C3A8 F5           .MarketLoop:	        push	af
 335+ C3A9 CD 6B C2                             call	PrintMktDispItem
 336+ C3AC F1                                   pop		af
 337+ C3AD 3C                                   inc		a
 338+ C3AE FE 11                                cp		17
 339+ C3B0 20 F6                                jr		nz,.MarketLoop
 340+ C3B2 21 64 C0     .DisCargo:              ld      hl,mktdisp_hold_level
 341+ C3B5 11 10 A8                             ld      de,$A810
 342+ C3B8                                      MMUSelectLayer1
 342+ C3B8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 343+ C3BC CD C8 E0                             call	l1_print_at
 344+ C3BF CD 49 C2                             call    mktdisp_DisplayCargo
 345+ C3C2 21 6C C0     .DisCash:               ld      hl,mktdisp_cash
 346+ C3C5 11 10 B0                             ld      de,$B010
 347+ C3C8                                      MMUSelectLayer1
 347+ C3C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 348+ C3CC CD C8 E0                             call	l1_print_at
 349+ C3CF CD 5A C2                             call    mktdisp_DisplayCash
 350+ C3D2 C9                                   ret
 351+ C3D3
 352+ C3D3
# file closed: ./Menus/market_prices_disp.asm
1069  C3D3
1070  C3D3              ; Bank 55
1071  C3D3
1072  C3D3                  SLOT    StockTableAddr
1073  C3D3                  PAGE    BankStockTable
1074  C3D3                  ORG     StockTableAddr
1075  E000                  INCLUDE "./Tables/stock_table.asm"
# file opened: ./Tables/stock_table.asm
   1+ E000
   2+ E000
   3+ E000              ;                       Can Buy
   4+ E000              ;                       computed row on screen considering what stock is visible
   5+ E000              ;                       Show
   6+ E000              ;                       Tech Level
   7+ E000              ;                       Price
   8+ E000              ;                       Name
   9+ E000              ;                       TypeId
  10+ E000
  11+ E000
  12+ E000              ;char name[16];
  13+ E000              ;current_quantity;
  14+ E000              ;current_price;
  15+ E000              ;base_price;
  16+ E000              ;eco_adjust;
  17+ E000              ;base_quantity;
  18+ E000              ;mask;
  19+ E000              ;units;
  20+ E000
  21+ E000              ;						nam	currr   CR  Ecadj  Qty  Msk  UoM
  22+ E000 20 00 00 13  StockFood			DB  32,  0, 0,  19, -2,      6, $01, 48
  22+ E004 FE 06 01 30
  23+ E008 21 00 00 14  StockTextiles		DB	33,  0, 0,  20, -1,     10, $03, 48
  23+ E00C FF 0A 03 30
  24+ E010 22 00 00 41  StockRadioactives	DB  34,  0, 0,  65, -3,      2, $07, 48
  24+ E014 FD 02 07 30
  25+ E018 23 00 00 28  StockSlaves			DB  35,  0, 0,  40, -5,    226, $1F, 48
  25+ E01C FB E2 1F 30
  26+ E020 24 00 00 53  StockLiquorWines	DB  36,  0, 0,  83, -5,    251, $0F, 48
  26+ E024 FB FB 0F 30
  27+ E028 25 00 00 C4  StockLuxuries		DB  37,  0, 0, 196,  8,     54, $03, 48
  27+ E02C 08 36 03 30
  28+ E030 26 00 00 EB  StockNarcotics		DB  38,  0, 0, 235, 29,      8, $78, 48
  28+ E034 1D 08 78 30
  29+ E038 19 00 00 9A  StockComputers		DB  25,  0, 0, 154, 14,     56, $03, 48
  29+ E03C 0E 38 03 30
  30+ E040 27 00 00 75  StockMachinery		DB  39,  0, 0, 117,  6,     40, $07, 48
  30+ E044 06 28 07 30
  31+ E048 28 00 00 4E  StockAlloys			DB  40,  0, 0,  78,  1,     17, $1F, 48
  31+ E04C 01 11 1F 30
  32+ E050 29 00 00 7C  StockFirearms   	DB  41,  0, 0, 124, 13,     29, $07, 48
  32+ E054 0D 1D 07 30
  33+ E058 2A 00 00 B0  StockFurs       	DB  42,  0, 0, 176, -9,    220, $3F, 48
  33+ E05C F7 DC 3F 30
  34+ E060 2B 00 00 20  StockMinerals   	DB  43,  0, 0,  32, -1,     53, $03, 48
  34+ E064 FF 35 03 30
  35+ E068 2C 00 00 61  StockGold       	DB  44,  0, 0,  97, -1,     66, $07, 49
  35+ E06C FF 42 07 31
  36+ E070 2D 00 00 AB  StockPlatinum   	DB  45,  0, 0, 171, -2,     55, $1F, 49
  36+ E074 FE 37 1F 31
  37+ E078 2E 00 00 2D  StockGemStones 		DB  46,  0, 0,  45, -1,    250, $0F, 50
  37+ E07C FF FA 0F 32
  38+ E080 2F 00 00 35  StockAlienItems		DB  47,  0, 0,  53, 15,    192, $07, 48
  38+ E084 0F C0 07 30
  39+ E088
  40+ E088
  41+ E088              ;.QQ23	\Prxs -> &3DA6 \  Market prices info
  42+ E088              ;\ base_price, gradient sign+5bits, base_quantity, mask, units 2bits
  43+ E088              ;13 82 06 01			EQUD &01068213 \ Food
  44+ E088              ;14 81 0A 03 		EQUD &030A8114 \ Textiles
  45+ E088              ;41 83 02 07 		EQUD &07028341 \ Radioactives
  46+ E088              ;28 85 E2 1F 		EQUD &1FE28528 \ Slaves
  47+ E088              ;53 85 FB 0F 		EQUD &0FFB8553 \ Liquor/Wines
  48+ E088              ;C4 08 36 03 		EQUD &033608C4 \ Luxuries
  49+ E088              ;EB 1D 08 78 		EQUD &78081DEB \ Narcotics
  50+ E088              ;9A 0E 38 03 		EQUD &03380E9A \ Computers
  51+ E088              ;75 06 28 07 		EQUD &07280675 \ Machinery
  52+ E088              ;4E 01 11 1F 		EQUD &1F11014E \ Alloys
  53+ E088              ;7C 0D 1D 07 		EQUD &071D0D7C \ Firearms
  54+ E088              ;B0 89 DC 3F 		EQUD &3FDC89B0 \ Furs
  55+ E088              ;20 81 35 03 		EQUD &03358120 \ Minerals
  56+ E088              ;61 A1 42 07 		EQUD &0742A161 \ Gold
  57+ E088              ;AB A2 37 1F 		EQUD &1F37A2AB \ Platinum
  58+ E088              ;2D C1 FA 0F 		EQUD &0FFAC12D \ Gem-Stones
  59+ E088              ;35 0F C0 07 		EQUD &07C00F35 \ Alien Items
  60+ E088
  61+ E088
  62+ E088
  63+ E088
  64+ E088
  65+ E088              AlienItemsIndex		    equ 16
  66+ E088              StockListLen		    equ	17
  67+ E088
  68+ E088 00 E0 08 E0  StockItemTable		    DW 	StockFood,  StockTextiles,	   StockRadioactives
  68+ E08C 10 E0
  69+ E08E 18 E0 20 E0                          DW 	StockSlaves, StockLiquorWines, StockLuxuries
  69+ E092 28 E0
  70+ E094 30 E0 38 E0                          DW 	StockNarcotics, StockComputers, StockMachinery
  70+ E098 40 E0
  71+ E09A 48 E0 50 E0                          DW	StockAlloys, StockFirearms, StockFurs
  71+ E09E 58 E0
  72+ E0A0 60 E0 68 E0                          DW  StockMinerals, StockGold, StockPlatinum
  72+ E0A4 70 E0
  73+ E0A6 78 E0 80 E0                          DW  StockGemStones, StockAlienItems
  74+ E0AA
  75+ E0AA 06 FF        generate_stock_market:  ld		b,$FF				; so the first iteration puts it at 0
  76+ E0AC CD 8A 97                             call	copy_galaxy_to_system
  77+ E0AF DD 21 F8 DF                          ld		ix,StockFood-8		; start 8 bytes before index as first add will shift
  78+ E0B3 11 08 00     .generate_stock_loop:   ld		de,8
  79+ E0B6 DD 19                                add		ix,de				; Move down a row
  80+ E0B8 04                                   inc		b
  81+ E0B9 DD 4E 03     .CalcPrice:	            ld		c,(ix+3);			; c = base price
  82+ E0BC 3A 95 93                             ld		a,(RandomMarketSeed)
  83+ E0BF DD A6 06                             and		(ix+6)				; and with market mask
  84+ E0C2 81                                   add		a,c
  85+ E0C3 4F                                   ld		c,a					; c = base + rand & market mask
  86+ E0C4 3A A6 93                             ld		a,(DisplayEcononmy)	; d= economy
  87+ E0C7 57                                   ld		d,a
  88+ E0C8 DD 7E 04                             ld		a,(ix+4)
  89+ E0CB 5F                                   ld		e,a					; e  = economy adjust
  90+ E0CC CB 7B                                bit		7,e
  91+ E0CE 20 04                                jr		nz,.PosMul			; it could be negative and we onnly want
  92+ E0D0              ;.NegMul:						; e reg from mulitply not a 2'c 16 bit word
  93+ E0D0 7B                                   ld		a,e
  94+ E0D1 ED 44                                neg
  95+ E0D3 5F                                   ld		e,a
  96+ E0D4              .PosMul:
  97+ E0D4 7B                                   ld		a,e
  98+ E0D5 ED 44                                neg
  99+ E0D7 5F                                   ld		e,a
 100+ E0D8 ED 30                                mul
 101+ E0DA 79                                   ld		a,c
 102+ E0DB 83                                   add		a,e
 103+ E0DC CB 27                                sla		a
 104+ E0DE CB 27                                sla		a					; Multply price by 4
 105+ E0E0 DD 77 02                             ld		(ix+2),a			; Now have set price
 106+ E0E3 DD 4E 05     .CalcQty:	            ld		c,(ix+5);			; c = base price
 107+ E0E6 3A 95 93                             ld		a,(RandomMarketSeed)
 108+ E0E9 DD A6 06                             and		(ix+6)				; and with market mask
 109+ E0EC 81                                   add		a,c
 110+ E0ED 4F                                   ld		c,a					; c = base + rand & market mask
 111+ E0EE 3A A6 93                             ld		a,(DisplayEcononmy)	; d= economy
 112+ E0F1 57                                   ld		d,a
 113+ E0F2 DD 7E 04                             ld		a,(ix+4)
 114+ E0F5 5F                                   ld		e,a					; e  = economy adjust
 115+ E0F6 CB 7B                                bit		7,e
 116+ E0F8 20 04                                jr		nz,.PosQtyMul			; it could be negative and we onnly want
 117+ E0FA 7B           .NegQtyMul:				ld		a,e		; e reg from mulitply not a 2'c 16 bit word
 118+ E0FB ED 44                                neg
 119+ E0FD 5F                                   ld		e,a
 120+ E0FE 7B           .PosQtyMul:             ld		a,e
 121+ E0FF ED 44                                neg
 122+ E101 5F                                   ld		e,a
 123+ E102 ED 30                                mul
 124+ E104 79                                   ld		a,c
 125+ E105 93                                   sub		e
 126+ E106 DD 77 01                             ld		(ix+1),a			; Now have set quanity
 127+ E109 78                                   ld		a,b
 128+ E10A FE 10                                cp		AlienItemsIndex
 129+ E10C 20 A5                                jr		nz,.generate_stock_loop
 130+ E10E AF                                   xor		a
 131+ E10F DD 77 01                             ld		(ix+1),a			; Now have set quanity of alient items to always 0 in stock
 132+ E112 C9                                   ret
 133+ E113
# file closed: ./Tables/stock_table.asm
1076  E113
1077  E113              ; Bank 57
1078  E113
1079  E113                  SLOT    LAYER2Addr
1080  E113                  PAGE    BankLAYER2
1081  E113                  ORG     LAYER2Addr
1082  E000
1083  E000                  INCLUDE "./Layer2Graphics/layer2_bank_select.asm"
# file opened: ./Layer2Graphics/layer2_bank_select.asm
   1+ E000
   2+ E000 00           varL2_BANK_SELECTED			 DB	0
   3+ E001 00           varL2_BUFFER_MODE            DB 0
   4+ E002
   5+ E002 3E 08        asm_l2_double_buffer_on:    ld      a,8
   6+ E004 32 01 E0                                 ld      (varL2_BUFFER_MODE),a
   7+ E007 C9                                       ret
   8+ E008
   9+ E008 AF           asm_l2_double_buffer_off:   xor     a
  10+ E009 32 01 E0                                 ld      (varL2_BUFFER_MODE),a
  11+ E00C C9                                       ret
  12+ E00D
  13+ E00D
  14+ E00D              ; "asm_l2_bank_select"
  15+ E00D              ; " a = sepecific bank mask value to select, does not set varL2_BANK_SELECTED"
  16+ E00D 57           asm_l2_bank_select:         ld      d,a
  17+ E00E 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  18+ E011 F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK
  19+ E013 B2                                       or      d; | LAYER2_SHADOW_SCREEN_MASK
  20+ E014 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  21+ E017 ED 79                                    out 	(c),a
  22+ E019 C9                                       ret
  23+ E01A              ;  "asm_l2_bank_select a = sepecific bank number to select, dsets varL2_BANK_SELECTED"
  24+ E01A 32 00 E0     asm_l2_bank_n_select:       ld		(varL2_BANK_SELECTED),a
  25+ E01D FE 00                                    cp		0
  26+ E01F 20 04                                    jr 		nz,.nottopbank
  27+ E021 3E 00        .topbank:                   ld		a,LAYER2_SHIFTED_SCREEN_TOP
  28+ E023 18 E8                                    jr		asm_l2_bank_select
  29+ E025 FE 01        .nottopbank:                cp		1
  30+ E027 20 04                                    jr 		nz,.notmiddlebank
  31+ E029 3E 40        .middlebank:                ld		a,LAYER2_SHIFTED_SCREEN_MIDDLE
  32+ E02B 18 E0                                    jr		asm_l2_bank_select
  33+ E02D 3E 80        .notmiddlebank:             ld		a,LAYER2_SHIFTED_SCREEN_BOTTOM ; default to bottom
  34+ E02F 18 DC                                    jr		asm_l2_bank_select
  35+ E031              		; Note no ret as its handled by above routines
  36+ E031
  37+ E031              ; "asm_l2_row_bank_select"
  38+ E031              ; "A (unsinged) = y row of pixel line from top, sets the bank to top middle or bottom and adjusts a reg to row memory address"
  39+ E031              ; "Could optimise by holding the previous bank but given its only an out statement it may not save T states at all"
  40+ E031              ; "destroys BC call de is safe a = adjusted poke pixel row"
  41+ E031 FE 40        asm_l2_row_bank_select:     cp 		64			; row < 64?
  42+ E033 30 11                                    jr 		nc, .l2rowGTE64
  43+ E035 08           .l2rowLT64:                 ex		af,af'
  44+ E036                                          ;ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP | LAYER2_SHADOW_SCREEN_MASK
  45+ E036 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  46+ E039 F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  47+ E03B 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  48+ E03E ED 79                                    out 	(c),a
  49+ E040 AF                                       xor		a						; set a to 0
  50+ E041 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  51+ E044 08                                       ex		af,af'					; return pixel poke unharmed
  52+ E045 C9                                       ret
  53+ E046 FE 80        .l2rowGTE64:                cp 		128
  54+ E048 30 14                                    jr 		nc, .l2rowGTE128
  55+ E04A 08           .l2row64to127:              ex		af,af'
  56+ E04B                                  ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE | LAYER2_SHADOW_SCREEN_MASK
  57+ E04B 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  58+ E04E F6 43                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  59+ E050 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  60+ E053 ED 79                                    out 	(c),a
  61+ E055 3E 01                                    ld		a,1						; set a to 1
  62+ E057 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank
  63+ E05A 08                                       ex		af,af'
  64+ E05B D6 40                                    sub		64
  65+ E05D C9                                       ret
  66+ E05E 08           .l2rowGTE128:               ex		af,af'
  67+ E05F                                  ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM | LAYER2_SHADOW_SCREEN_MASK
  68+ E05F 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  69+ E062 F6 83                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
  70+ E064
  71+ E064 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  72+ E067 ED 79                                    out 	(c),a
  73+ E069 3E 01                                    ld		a,1						; set a to 2
  74+ E06B 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank
  75+ E06E 08                                       ex		af,af'
  76+ E06F D6 80                                    sub		128
  77+ E071 C9                                       ret
  78+ E072
# file closed: ./Layer2Graphics/layer2_bank_select.asm
1084  E072                  INCLUDE "./Layer2Graphics/layer2_cls.asm"
# file opened: ./Layer2Graphics/layer2_cls.asm
   1+ E072
   2+ E072 00           l2_cls_byte	            DB 0
   3+ E073              ; ">DMA Command BLOCK"
   4+ E073
   5+ E073 83 C3 C7 CB  l2_fill                 DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E077 7D
   6+ E078 72 E0        l2_fill_astrt           DW l2_cls_byte
   7+ E07A 00 40        l2_fill_length          DB $00,$40
   8+ E07C 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   9+ E07F 00 00        l2_fill_bstrt           DB $00,$00
  10+ E081 82 CF B3 87                          DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
  11+ E085              l2_fill_cmd_len	        EQU $ - l2_fill
  12+ E085
  13+ E085              l2_cls_dma_bank:
  14+ E085              ; ">l2_cls_dma_bank"
  15+ E085              ; ">sets a bank to"
  16+ E085 32 72 E0     .set_colour:            ld (l2_cls_byte),a
  17+ E088 21 73 E0     .write_dma:             ld hl, l2_fill
  18+ E08B 06 12                                ld b, l2_fill_cmd_len
  19+ E08D 0E 6B                                ld	c,IO_DATAGEAR_DMA_PORT
  20+ E08F ED B3                                otir
  21+ E091 C9                                   ret
  22+ E092
  23+ E092 3E 00        l2_set_color_upper2:    ld      a,0
  24+ E094 CD 31 E0                             call asm_l2_row_bank_select
  25+ E097 3A 72 E0                             ld      a,(l2_cls_byte)
  26+ E09A CD 85 E0                             call l2_cls_dma_bank
  27+ E09D 3E 40                                ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  28+ E09F CD 31 E0                             call asm_l2_row_bank_select
  29+ E0A2 3A 72 E0                             ld      a,(l2_cls_byte)
  30+ E0A5 CD 85 E0                             call l2_cls_dma_bank
  31+ E0A8 C9                                   ret
  32+ E0A9
  33+ E0A9
  34+ E0A9 3E 00        l2_cls_upper_two_thirds:ld a,0								; pretend we are plotting pixel on row 0 to force top selection
  35+ E0AB CD 31 E0                             call asm_l2_row_bank_select
  36+ E0AE 3E E3                                ld 	a,COLOUR_TRANSPARENT
  37+ E0B0 CD 85 E0                             call l2_cls_dma_bank
  38+ E0B3 3E 40                                ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  39+ E0B5 CD 31 E0                             call asm_l2_row_bank_select
  40+ E0B8 3E E3                                ld 	a,COLOUR_TRANSPARENT
  41+ E0BA CD 85 E0                             call l2_cls_dma_bank
  42+ E0BD C9                                   ret
  43+ E0BE
  44+ E0BE 3E 80        l2_cls_lower_third:     ld a,128							; pretend we are plotting pixel on row 64 to force mid selection
  45+ E0C0 CD 31 E0                             call asm_l2_row_bank_select
  46+ E0C3 3E E3                                ld 	a,COLOUR_TRANSPARENT
  47+ E0C5 CD 85 E0                             call l2_cls_dma_bank
  48+ E0C8 C9                                   ret
  49+ E0C9
  50+ E0C9 CD A9 E0     l2_cls:                 call l2_cls_upper_two_thirds
  51+ E0CC CD BE E0                             call l2_cls_lower_third
  52+ E0CF C9                                   ret
  53+ E0D0
# file closed: ./Layer2Graphics/layer2_cls.asm
1085  E0D0                  INCLUDE "./Layer2Graphics/layer2_initialise.asm"
# file opened: ./Layer2Graphics/layer2_initialise.asm
   1+ E0D0
   2+ E0D0 ED 91 12 08  l2_initialise:          nextreg		LAYER2_RAM_PAGE_REGISTER,          	LAYER2_SCREEN_BANK1
   3+ E0D4 ED 91 13 0B                          nextreg		LAYER2_RAM_SHADOW_REGISTER,     	LAYER2_SHADOW_BANK1
   4+ E0D8 ED 91 14 E3                          nextreg		TRANSPARENCY_COLOUR_REGISTER, 		COLOUR_TRANSPARENT
   5+ E0DC C9                                   ret
   6+ E0DD
# file closed: ./Layer2Graphics/layer2_initialise.asm
1086  E0DD                  INCLUDE "./Layer2Graphics/l2_flip_buffers.asm"
# file opened: ./Layer2Graphics/l2_flip_buffers.asm
   1+ E0DD              l2_flip_buffers:        GetNextReg LAYER2_RAM_PAGE_REGISTER
   1+ E0DD C5          >            push bc
   1+ E0DE 01 3B 24    >                ld bc,$243B
   1+ E0E1 3E 12       >                    ld a,LAYER2_RAM_PAGE_REGISTER
   1+ E0E3 ED 79       >                    out (c),a
   1+ E0E5 04          >                    inc b
   1+ E0E6 ED 78       >                in a,(c)
   1+ E0E8 C1          >            pop bc
   2+ E0E9 57                                   ld      d,a
   3+ E0EA                                      GetNextReg LAYER2_RAM_SHADOW_REGISTER
   3+ E0EA C5          >            push bc
   3+ E0EB 01 3B 24    >                ld bc,$243B
   3+ E0EE 3E 13       >                    ld a,LAYER2_RAM_SHADOW_REGISTER
   3+ E0F0 ED 79       >                    out (c),a
   3+ E0F2 04          >                    inc b
   3+ E0F3 ED 78       >                in a,(c)
   3+ E0F5 C1          >            pop bc
   4+ E0F6 5F                                   ld      e,a
   5+ E0F7 ED 92 12                             nextreg LAYER2_RAM_PAGE_REGISTER, a
   6+ E0FA 7A                                   ld      a,d
   7+ E0FB ED 92 13                             nextreg LAYER2_RAM_SHADOW_REGISTER, a
   8+ E0FE C9                                   ret
   9+ E0FF
# file closed: ./Layer2Graphics/l2_flip_buffers.asm
1087  E0FF                  INCLUDE "./Layer2Graphics/layer2_plot_pixel.asm"
# file opened: ./Layer2Graphics/layer2_plot_pixel.asm
   1+ E0FF              l2_plot_pixel:
   2+ E0FF              ; ">l2_plot_pixel b= row number, c = column number, a = pixel col"
   3+ E0FF F5           	push    af
   4+ E100 78               ld      a,b
   5+ E101              l2_pp_row_valid:
   6+ E101                  JumpIfAGTENusng ScreenHeight,l2_pp_dont_plot
   6+ E101 FE C0       >                        cp     ScreenHeight
   6+ E103 D2 11 E1    >                        jp		nc,l2_pp_dont_plot
   7+ E106 C5           	push    bc								; bank select destroys bc so need to save it
   8+ E107              ;	ld      a,b
   9+ E107 CD 31 E0     	call    asm_l2_row_bank_select
  10+ E10A C1           	pop     bc
  11+ E10B 47           	ld      b,a
  12+ E10C 60           	ld      h,b								; hl now holds ram address after bank select
  13+ E10D 69           	ld      l,c
  14+ E10E F1           	pop     af								; a = colour to plott
  15+ E10F 77           	ld      (hl),a
  16+ E110 C9           	ret
  17+ E111              l2_pp_dont_plot:
  18+ E111 F1               pop     af
  19+ E112 C9               ret
  20+ E113
  21+ E113              l2_plot_pixel_no_bank:
  22+ E113              ; ">l2_plot_pixel_no_bank b= row number, c = column number, a = pixel col"
  23+ E113              ; This version assues pixel is in the same bank as previously plotted ones. optimised for horizontal lines
  24+ E113 E5           	push 	hl
  25+ E114 60           	ld 		h,b								; hl now holds ram address after bank select
  26+ E115 69           	ld 		l,c
  27+ E116 77           	ld 		(hl),a
  28+ E117 E1           	pop		hl
  29+ E118 C9           	ret
  30+ E119
  31+ E119              l2_plot_pixel_y_test:
  32+ E119 F5           	push	af
  33+ E11A 78           	ld		a,b
  34+ E11B FE C0        	cp		192
  35+ E11D 30 03        	jr		nc,.clearup
  36+ E11F F1           	pop		af
  37+ E120 18 DD        	jr		l2_plot_pixel
  38+ E122              .clearup:
  39+ E122 F1           	pop		af
  40+ E123 C9           	ret
  41+ E124
  42+ E124              l2_point_pixel_y_safe:	MACRO
  43+ E124 ~            						push	hl
  44+ E124 ~            						push	bc
  45+ E124 ~            						call	l2_plot_pixel
  46+ E124 ~            						pop		bc
  47+ E124 ~            						pop		hl
  48+ E124              						ENDM
  49+ E124
# file closed: ./Layer2Graphics/layer2_plot_pixel.asm
1088  E124                  INCLUDE "./Layer2Graphics/layer2_print_character.asm"
# file opened: ./Layer2Graphics/layer2_print_character.asm
   1+ E124
   2+ E124              l2_print_chr_at:
   3+ E124              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
   4+ E124              ; "Need a version that also prints absence of character"
   5+ E124 7A           	ld		a,d
   6+ E125 FE 20        	cp		32
   7+ E127 38 3F        	jr		c,.InvalidCharacter		; Must be between 32 and 127
   8+ E129 FE 7F        	cp		127
   9+ E12B 30 3B        	jr		nc,.InvalidCharacter
  10+ E12D              .ValidCharater:
  11+ E12D 26 00        	ld		h,0
  12+ E12F 6A           	ld		l,d
  13+ E130 29           	add		hl,hl						; * 2
  14+ E131 29           	add		hl,hl						; * 4
  15+ E132 29           	add		hl,hl						; * 8 to get byte address
  16+ E133 ED 34 00 3C  	add		hl,charactersetaddr			; hl = address of rom char
  17+ E137 04           	inc		b							; start + 1 pixel x and y as we only print 7x7
  18+ E138 23           	inc		hl							; skip first byte
  19+ E139 16 07        	ld		d,7
  20+ E13B              .PrintCharLoop:
  21+ E13B D5           	push	de
  22+ E13C 7E           	ld		a,(hl)
  23+ E13D FE 00        	cp		0
  24+ E13F 28 21        	jr		z,.NextRowNoBCPop
  25+ E141              .PrintARow:
  26+ E141 C5           	push	bc							; save row col
  27+ E142 16 07        	ld		d,7							; d is loop row number now
  28+ E144              .PrintPixelLoop:
  29+ E144 0C           	inc		c							; we start at col 1 not 0 so can move inc here
  30+ E145              .PrintTheRow:
  31+ E145 CB 27        	sla		a							; scroll char 1 pixel as we read from bit 7
  32+ E147 F5           	push	af							; save character byte
  33+ E148 CB 7F        	bit		7,a							; If left most pixel set then plot
  34+ E14A 20 04        	jr		nz,.PixelToPrint
  35+ E14C              .NoPixelToPrint:
  36+ E14C 3E E3        	ld		a,$E3
  37+ E14E 18 01        	jr		.HaveSetPixelColour
  38+ E150              .PixelToPrint:
  39+ E150 7B           	ld		a,e							; Get Colour
  40+ E151              .HaveSetPixelColour
  41+ E151 E5           	push	hl
  42+ E152              ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
  43+ E152              .BankOnFirstOnly:
  44+ E152 F5           	push	af
  45+ E153 7A           	ld		a,d
  46+ E154 FE 07        	cp		7
  47+ E156 28 11        	jr		z,.PlotWithBank
  48+ E158              .PlotNoBank:
  49+ E158 F1           	pop		af
  50+ E159 60           	ld 		h,b								; hl now holds ram address after bank select
  51+ E15A 69           	ld 		l,c
  52+ E15B 77           	ld 		(hl),a
  53+ E15C              .IterateLoop:
  54+ E15C              ;	pop		bc
  55+ E15C E1           	pop		hl
  56+ E15D F1           	pop		af							; a= current byte shifted
  57+ E15E 15           	dec		d						 	; do dec after inc as we amy
  58+ E15F 20 E3        	jr		nz,.PrintPixelLoop
  59+ E161              .NextRow:
  60+ E161 C1           	pop		bc							; Current Col Row
  61+ E162              .NextRowNoBCPop:
  62+ E162 D1           	pop		de							; d= row loop
  63+ E163 04           	inc		b							; Down 1 row
  64+ E164 23           	inc		hl							; Next character byte
  65+ E165 15           	dec		d							; 1 done now
  66+ E166 20 D3        	jr		nz,.PrintCharLoop
  67+ E168              .InvalidCharacter:
  68+ E168 C9           	ret
  69+ E169              .PlotWithBank:
  70+ E169 F1           	pop		af
  71+ E16A CD FF E0     	call	l2_plot_pixel				; This will shift bc to poke row
  72+ E16D 18 ED        	jr		.IterateLoop
  73+ E16F
  74+ E16F              l2_print_at:
  75+ E16F              ; "l2_print_at bc= colrow, hl = addr of message, e = colour"
  76+ E16F              ; "No error trapping, if there is no null is will just cycle on the line"
  77+ E16F 7E           	ld	a,(hl)							; Return if empty string
  78+ E170 FE 00        	cp	0
  79+ E172 C8           	ret	z
  80+ E173 E5           	push	hl
  81+ E174 D5           	push	de
  82+ E175 C5           	push	bc
  83+ E176 57           	ld		d,a							; bc = pos, de = char and colour
  84+ E177 CD 24 E1     	call 	l2_print_chr_at
  85+ E17A C1           	pop		bc
  86+ E17B D1           	pop		de
  87+ E17C E1           	pop		hl
  88+ E17D              .Move8Pixlestoright:
  89+ E17D 08           	ex		af,af'
  90+ E17E 79           	ld		a,c
  91+ E17F C6 08        	add		8
  92+ E181 4F           	ld		c,a
  93+ E182 08           	ex		af,af'
  94+ E183 23           	inc		hl
  95+ E184 18 E9        	jr		l2_print_at					; Just loop until 0 found
  96+ E186
  97+ E186
  98+ E186              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
  99+ E186              ; "Need a version that also prints absence of character"
 100+ E186              ; removed blank line optimisation as we need spaces printed
 101+ E186 7A           l2_print_7chr_at:       ld		a,d
 102+ E187 FE 1F                                cp		31
 103+ E189 38 3D                                jr		c,.InvalidCharacter		; Must be between 32 and 127
 104+ E18B FE 7F                                cp		127
 105+ E18D 30 39                                jr		nc,.InvalidCharacter
 106+ E18F 26 00        .ValidCharater:         ld		h,0
 107+ E191 6A                                   ld		l,d
 108+ E192 29                                   add		hl,hl						; * 2
 109+ E193 29                                   add		hl,hl						; * 4
 110+ E194 29                                   add		hl,hl						; * 8 to get byte address
 111+ E195 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
 112+ E199 04                                   inc		b							; start + 1 pixel x and y as we only print 7x7
 113+ E19A 23                                   inc		hl							; skip first byte
 114+ E19B 16 07                                ld		d,7
 115+ E19D D5           .PrintCharLoop:         push	de
 116+ E19E 7E                                   ld		a,(hl)
 117+ E19F                                      ;cp		0
 118+ E19F                                      ;jr		z,.NextRowNoBCPop
 119+ E19F C5           .PrintARow:             push	bc							; save row col
 120+ E1A0 16 06                                ld		d,6							; d is loop row number now
 121+ E1A2 0C           .PrintPixelLoop:        inc		c							; we start at col 1 not 0 so can move inc here
 122+ E1A3 28 1C                                jr		z,.NextRow
 123+ E1A5 CB 27                                sla		a							; scroll char 1 pixel as we read from bit 7
 124+ E1A7 F5                                   push	af							; save character byte
 125+ E1A8 CB 7F                                bit		7,a							; If left most pixel set then plot
 126+ E1AA 20 04                                jr		nz,.PixelToPrint
 127+ E1AC 3E E3        .NoPixelToPrint:        ld		a,$E3
 128+ E1AE 18 01                                jr		.HaveSetPixelColour
 129+ E1B0 7B           .PixelToPrint:          ld		a,e							; Get Colour
 130+ E1B1 E5           .HaveSetPixelColour		push	hl
 131+ E1B2                                      ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
 132+ E1B2 F5           .BankOnFirstOnly:       push	af
 133+ E1B3 7A                                   ld		a,d
 134+ E1B4 FE 06                                cp		6
 135+ E1B6 28 11                                jr		z,.PlotWithBank
 136+ E1B8 F1           .PlotNoBank:            pop		af
 137+ E1B9 60                                   ld 		h,b								; hl now holds ram address after bank select
 138+ E1BA 69                                   ld 		l,c
 139+ E1BB 77                                   ld 		(hl),a
 140+ E1BC              .IterateLoop:	        ;	pop		bc
 141+ E1BC E1                                   pop		hl
 142+ E1BD F1                                   pop		af							; a= current byte shifted
 143+ E1BE 15                                   dec		d						 	; do dec after inc as we amy
 144+ E1BF 20 E1                                jr		nz,.PrintPixelLoop
 145+ E1C1 C1           .NextRow:               pop		bc							; Current Col Row
 146+ E1C2 D1           .NextRowNoBCPop:	    pop		de							; d= row loop
 147+ E1C3 04                                   inc		b							; Down 1 row
 148+ E1C4 23                                   inc		hl							; Next character byte
 149+ E1C5 15                                   dec		d							; 1 done now
 150+ E1C6 20 D5                                jr		nz,.PrintCharLoop
 151+ E1C8 C9           .InvalidCharacter:      ret
 152+ E1C9 F1           .PlotWithBank:          pop		af
 153+ E1CA CD FF E0                             call	l2_plot_pixel				; This will shift bc to poke row
 154+ E1CD 18 ED                                jr		.IterateLoop
 155+ E1CF
 156+ E1CF              ; "l2_print_7at bc= colrow, hl = addr of message, e = colour"
 157+ E1CF              ; "No error trapping, if there is no null is will just cycle on the line"
 158+ E1CF 7E           l2_print_7at:           ld	a,(hl)							; Return if empty string
 159+ E1D0 FE 00                                cp	0
 160+ E1D2 C8                                   ret	z
 161+ E1D3 E5                                   push	hl
 162+ E1D4 D5                                   push	de
 163+ E1D5 C5                                   push	bc
 164+ E1D6 57                                   ld		d,a							; bc = pos, de = char and colour
 165+ E1D7 CD 86 E1                             call 	l2_print_7chr_at
 166+ E1DA C1                                   pop		bc
 167+ E1DB D1                                   pop		de
 168+ E1DC E1                                   pop		hl
 169+ E1DD 08           .Move7Pixlestoright:	ex		af,af'
 170+ E1DE 79                                   ld		a,c
 171+ E1DF C6 07                                add		7
 172+ E1E1 4F                                   ld		c,a
 173+ E1E2 08                                   ex		af,af'
 174+ E1E3 23                                   inc		hl
 175+ E1E4 18 E9                                jr		l2_print_7at					; Just loop until 0 found
 176+ E1E6
 177+ E1E6
# file closed: ./Layer2Graphics/layer2_print_character.asm
1089  E1E6                  INCLUDE "./Layer2Graphics/layer2_draw_box.asm"
# file opened: ./Layer2Graphics/layer2_draw_box.asm
   1+ E1E6              ; "l2_draw_thick_box bc=rowcol, de=heightwidth h=color"
   2+ E1E6              ; TODO DMA Optimise
   3+ E1E6 C5 D5 E5     l2_draw_fill_box:       push    bc,,de,,hl
   4+ E1E9 53                                   ld      d,e
   5+ E1EA 5C                                   ld      e,h
   6+ E1EB CD 62 E2                             call    l2_draw_horz_line           ; "bc = left side row,col, d = length, e = color"
   7+ E1EE E1 D1 C1                             pop     bc,,de,,hl
   8+ E1F1 04                                   inc     b
   9+ E1F2 15                                   dec     d
  10+ E1F3 C8                                   ret     z
  11+ E1F4 18 F0                                jr      l2_draw_fill_box
  12+ E1F6
  13+ E1F6              ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
  14+ E1F6 C5 D5 F5     l2_draw_box:            push	bc,,de,,af
  15+ E1F9 53                                   ld		d,e
  16+ E1FA 5F                                   ld		e,a
  17+ E1FB 14                                   inc		d
  18+ E1FC CD 62 E2                             call	l2_draw_horz_line
  19+ E1FF F1 D1 C1                             pop		bc,,de,,af
  20+ E202 C5 D5 F5     .bottomhorzline:	    push	bc,,de,,af
  21+ E205 67                                   ld		h,a							;save color whilst b = row + height
  22+ E206 78                                   ld		a,b
  23+ E207 82                                   add		a,d
  24+ E208 47                                   ld		b,a
  25+ E209 53                                   ld		d,e							; d = width
  26+ E20A 14                                   inc		d							; Extra pixel for width
  27+ E20B 5C                                   ld		e,h							; e = colour
  28+ E20C CD 62 E2                             call	l2_draw_horz_line
  29+ E20F F1 D1 C1                             pop		bc,,de,,af
  30+ E212 C5 D5 F5     .leftvertline:          push	bc,,de,,af
  31+ E215 04                                   inc		b							; save 2 pixles
  32+ E216 15                                   dec		d
  33+ E217 5F                                   ld		e,a							; e = color
  34+ E218 CD B3 E2                             call	l2_draw_vert_line
  35+ E21B F1 D1 C1                             pop		bc,,de,,af
  36+ E21E 04           .rightvertline:         inc		b							; save 2 pixles
  37+ E21F 15                                   dec		d
  38+ E220 67                                   ld		h,a							;save color whilst c = col + width
  39+ E221 79                                   ld		a,c
  40+ E222 83                                   add		a,e
  41+ E223 4F                                   ld		c,a
  42+ E224 5C                                   ld		e,h							; e = color
  43+ E225 CD B3 E2                             call	l2_draw_vert_line
  44+ E228 C9                                   ret
  45+ E229
# file closed: ./Layer2Graphics/layer2_draw_box.asm
1090  E229                  INCLUDE "./Layer2Graphics/asm_l2_plot_horizontal.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_horizontal.asm
   1+ E229
   2+ E229              ;; NOTE DMA is little endian
   3+ E229 00           l2_horz_pixel           DB 0
   4+ E22A
   5+ E22A 83 C3 C7 CB  l2_horz_line            DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E22E 7D
   6+ E22F 29 E2        l2_horz_colr            DW l2_horz_pixel
   7+ E231 00           l2_horz_lenlo           DB 0
   8+ E232 00           l2_horz_lenhi           DB 0
   9+ E233 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY, DMA_WR2_P2INC_MEMORY, DMA_WR4_CONT_MODE
  10+ E236 00 00        l2_horz_target          DB $00, $00
  11+ E238 CF 87                                DB DMA_LOAD, DMA_ENABLE
  12+ E23A              l2_horz_cmd_len	        EQU $ - l2_horz_line
  13+ E23A
  14+ E23A
  15+ E23A              ; "l2_draw_horz_dma"
  16+ E23A              ; "plot at bc for length d colour e using dma, assumes bank already selected"
  17+ E23A 7B           l2_draw_horz_dma:       ld		a,e
  18+ E23B 32 29 E2                             ld		(l2_horz_pixel),a
  19+ E23E 7A                                   ld		a,d
  20+ E23F 32 31 E2                             ld 		(l2_horz_lenlo),a
  21+ E242 AF                                   xor 	a
  22+ E243 32 32 E2                             ld 		(l2_horz_lenhi),a
  23+ E246 60                                   ld		h,b
  24+ E247 69                                   ld		l,c
  25+ E248 22 36 E2                             ld		(l2_horz_target),hl
  26+ E24B 21 2A E2     .write_dma:             ld 		hl, l2_horz_line
  27+ E24E 06 10                                ld 		b, l2_horz_cmd_len
  28+ E250 0E 6B                                ld		c,IO_DATAGEAR_DMA_PORT
  29+ E252 ED B3                                otir
  30+ E254 C9                                   ret
  31+ E255
  32+ E255              ; "bc = left side row,col, d = length, e = color"
  33+ E255 D5           l2_draw_horz_dma_bank:  push 	de							; save length and colour
  34+ E256 C5                                   push 	bc							; save row col
  35+ E257 78                                   ld   	a,b
  36+ E258 CD 31 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  37+ E25B C1                                   pop  	bc
  38+ E25C 47                                   ld	 	b,a	       					; fixed row by the call we can go straight into HL with row col
  39+ E25D D1                                   pop  	de							; get length back
  40+ E25E CD 3A E2                             call    l2_draw_horz_dma
  41+ E261 C9                                   ret
  42+ E262
  43+ E262              ; "l2_draw_horz_line"
  44+ E262              ; "bc = left side row,col, d = length, e = color"
  45+ E262              ; "optimisation if above min pix is will use dma call SCREEN_HOZ_MIN_PIX not implemented yet"
  46+ E262 7A           l2_draw_horz_line:      ld		a,d
  47+ E263 FE 00                                cp 		0							; if its zero length then just return
  48+ E265 C8           .zerolengthexit:        ret		z
  49+ E266 FE 01        .isitlen1:              cp 		1
  50+ E268 CA 8A E2                             jp 		z,.l2_draw_horz_line_1
  51+ E26B FE 0A        .longenoughtfordma:     cp  10
  52+ E26D C3 55 E2                             jp  l2_draw_horz_dma_bank
  53+ E270 D5 C5        .plottableline:         push 	de,,bc  					; save length and colour an d row col
  54+ E272 78                                   ld   	a,b
  55+ E273 CD 31 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  56+ E276 C1                                   pop  	bc
  57+ E277 67                                   ld	 	h,a	       					; fixed row by the call we can go straight into HL with row col
  58+ E278 69                                   ld   	l,c
  59+ E279 D1                                   pop  	de							; get length back
  60+ E27A 79           .cliptest:              ld	 	a,c							; get column + length
  61+ E27B 42                                   ld  	b,d  						; speculate that we don't clip by pre-loading b with length
  62+ E27C 82                                   add  	a,d
  63+ E27D 30 06                                jr   	nc, .l2_draw_horz_plot_loop	; if carry is set c+d > 255
  64+ E27F 3E FF        .clipat255:             ld   	a,$FF
  65+ E281 91                                   sub  	c							; a holds clipped length
  66+ E282 47                                   ld 		b, a 						; so now hl holds poke address  b = clipped length e = colour
  67+ E283 18 00                                jr		.l2_draw_horz_plot_loop
  68+ E285 73           .l2_draw_horz_plot_loop:ld (hl),e							; loop poking hl with e for b pixels
  69+ E286 23                                   inc hl
  70+ E287 10 FC                                djnz .l2_draw_horz_plot_loop
  71+ E289 C9                                   ret
  72+ E28A 7B           .l2_draw_horz_line_1:   ld		a,e
  73+ E28B C3 FF E0                             jp		l2_plot_pixel				; hijack return
  74+ E28E
  75+ E28E              ; "l2_draw_horz_line_to"
  76+ E28E              ; "bc = left side row,col, d right pixel, e = color"
  77+ E28E 7A           l2_draw_horz_line_to:   ld 		a,d
  78+ E28F B9                                   cp 		c
  79+ E290 30 04                                jr		nc, .noswap
  80+ E292 28 07                                jr      z, .singlepixel
  81+ E294 51           .swap:                  ld		d,c
  82+ E295 4F                                   ld		c,a
  83+ E296 7A           .noswap:                ld		a,d
  84+ E297 91                                   sub		c
  85+ E298              ;                        dec		a							; so now its length not offset
  86+ E298 57                                   ld		d,a
  87+ E299 18 C7                                jr 		l2_draw_horz_line			; hijack routine and return statements
  88+ E29B 7B           .singlepixel:           ld		a,e
  89+ E29C C3 FF E0                             jp		l2_plot_pixel				; hijack return
  90+ E29F
# file closed: ./Layer2Graphics/asm_l2_plot_horizontal.asm
1091  E29F                  INCLUDE "./Layer2Graphics/asm_l2_plot_vertical.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_vertical.asm
   1+ E29F              ; ">l2_draw_vert_segment"
   2+ E29F              ; ">hl = bank adjusted pixel poke address d = length, e = color"
   3+ E29F              ; ">will always clip once h = 64 even if length > 64 destroys a and hl, d = resudual length not plotted"
   4+ E29F 7A           l2_draw_vert_segment:   ld		a,d
   5+ E2A0 FE 00        .emptylinecheck:	    cp 		0
   6+ E2A2 C8                                   ret		z
   7+ E2A3 FE 01        .justonepixel	        cp		1
   8+ E2A5 20 02                                jr		nz, .multiplepixelsLoop
   9+ E2A7 73                                   ld		(hl),e
  10+ E2A8 C9                                   ret
  11+ E2A9              .multiplepixelsLoop:
  12+ E2A9 7C           .endofbankcheck:        ld   	a,h
  13+ E2AA FE 40                                cp   	64
  14+ E2AC D0                                   ret		nc							; check before we poke data if we have hit a boundary
  15+ E2AD 73           .canplotapixel:         ld   	(hl),e						; set colour
  16+ E2AE 24                                   inc 	h							; we don't check here else we would need a dec d on ret could do for optimisation of loop though
  17+ E2AF 15                                   dec		d
  18+ E2B0 C8                                   ret		z
  19+ E2B1 18 F6                                jr		.multiplepixelsLoop
  20+ E2B3
  21+ E2B3              ; ">l2_draw_vert_line"
  22+ E2B3              ; ">bc = row col d = length, e = color"
  23+ E2B3 78           l2_draw_vert_line:      ld 		a,b
  24+ E2B4 FE C0        .offscreencheck:        cp 		SCREEN_HEIGHT
  25+ E2B6 D0                                   ret 	nc							; can't start off the screen
  26+ E2B7 7A           .emptylinecheck:        ld		a,d
  27+ E2B8 FE 00                                cp		0
  28+ E2BA C8                                   ret		z
  29+ E2BB FE 01                                cp		1
  30+ E2BD 20 04                                jr		nz,.multiplepixels
  31+ E2BF CD FF E0     .itsonepixel:           call	l2_plot_pixel
  32+ E2C2 C9                                   ret
  33+ E2C3              .multiplepixels:						; so now we have at least 2 pixels to plot
  34+ E2C3 7A           .clipto192:             ld		a,d							; get length
  35+ E2C4 80                                   add		a,b							; a= row + length
  36+ E2C5 38 04                                jr		c,.needtoclip				; if it was > 255 then there is a definite need
  37+ E2C7 FE C0                                cp		SCREEN_HEIGHT
  38+ E2C9 38 08                                jr		c, .noclipneeded
  39+ E2CB 78           .needtoclip             ld		a,b
  40+ E2CC 82                                   add		a,d
  41+ E2CD D6 C0                                sub		SCREEN_HEIGHT
  42+ E2CF 67                                   ld		h,a							; use h as a temp holding for (row + length) - 192
  43+ E2D0 7A                                   ld		a,d
  44+ E2D1 94                                   sub		h
  45+ E2D2 57                                   ld		d,a							; d = length - ((row + length) - 192)
  46+ E2D3              ; so now BC = row col, d = length clipped, e = color
  47+ E2D3 78           .noclipneeded:          ld		a,b
  48+ E2D4 C5 D5                                push	bc,,de
  49+ E2D6 CD 31 E0                             call 	asm_l2_row_bank_select
  49+ E2D9               	 	; we now have poke address and a variable holding current bank number
  50+ E2D9 D1 C1                                pop		bc,,de
  51+ E2DB 67                                   ld		h,a							; b now tolds target pixel for first plot
  52+ E2DC 69                                   ld		l,c  						; and c holds pixel column for plotting
  53+ E2DD CD 9F E2                             call 	l2_draw_vert_segment		; draw seg, d = pixels remaining
  54+ E2E0 7A                                   ld		a,d							; a and d = nbr pixels remaining
  55+ E2E1 FE 00                                cp		0
  56+ E2E3 28 27                                jr		z, .doneplotting
  57+ E2E5 3A 00 E0     .anotherbank:           ld		a, (varL2_BANK_SELECTED)
  58+ E2E8 3C                                   inc		a
  59+ E2E9 06 00                                ld		b,0
  60+ E2EB C5 D5                                push	bc,,de
  61+ E2ED CD 1A E0                             call 	asm_l2_bank_n_select
  62+ E2F0 D1 C1                                pop     bc,,de
  63+ E2F2 60                                   ld		h,b							; b now tolds target pixel for first plot
  64+ E2F3 69                                   ld		l,c  						; and c holds pixel column for plotting
  65+ E2F4 CD 9F E2                             call	l2_draw_vert_segment
  66+ E2F7 7A                                   ld		a,d
  67+ E2F8 FE 00                                cp		0
  68+ E2FA 28 10                                jr		z,.doneplotting
  69+ E2FC 3A 00 E0     .yetanotherbank:        ld		a, (varL2_BANK_SELECTED)
  70+ E2FF 3C                                   inc		a
  71+ E300 06 00                                ld		b,0
  72+ E302 C5 D5                                push	bc,,de
  73+ E304 CD 1A E0                             call 	asm_l2_bank_n_select
  74+ E307 D1                                   pop		de
  75+ E308 E1                                   pop		hl							; hl = bc
  76+ E309 CD 9F E2                             call	l2_draw_vert_segment		; we have now hit 192 pixels so done
  77+ E30C C9           .doneplotting:	        ret
  78+ E30D
  79+ E30D              ; ">l2_draw_vert_line_to"
  80+ E30D              ; ">bc = row col d = to position, e = color"
  81+ E30D 78           l2_draw_vert_line_to:   ld		a,b
  82+ E30E BA                                   cp		d
  83+ E30F 38 02                                jr		c, .noyswap
  84+ E311 42           .yswap:                 ld		b,d			; Swap round row numbers so we are always incrementing
  85+ E312 57                                   ld		d,a			; now we have a top to bottom to we we can calc length from bc
  86+ E313 7A           .noyswap:               ld		a,d 		; we still may have d in a but only if it was bottom to top
  87+ E314 90                                   sub		b
  88+ E315 3C                                   inc		a			; so now its length not offset
  89+ E316 57                                   ld		d,a
  90+ E317 18 9A                                jr		l2_draw_vert_line	; we can hijack its clipping, 0 check and return logic
  91+ E319                                      ; no return needed
  92+ E319
# file closed: ./Layer2Graphics/asm_l2_plot_vertical.asm
1092  E319                  INCLUDE "./Layer2Graphics/layer2_plot_diagonal.asm"
# file opened: ./Layer2Graphics/layer2_plot_diagonal.asm
   1+ E319
   2+ E319              l2_draw_box_to:
   3+ E319              ; ">l2_draw_box_to bc=rowcol, de=torowcol a=color"
   4+ E319              ; ">NOT IMPLEMENTED YET"
   5+ E319 C9           	ret
   6+ E31A
   7+ E31A              ;; Note l2stepx is done via self modifying code rather than an if for speed
   8+ E31A              ;; l2stepx1 and l2stepx2 are the addresses to stick the inc or dec in
   9+ E31A              l2decbstep	EQU $05
  10+ E31A              l2incbstep	EQU	$04
  11+ E31A              l2deccstep	EQU $0D
  12+ E31A              l2inccstep	EQU	$0C
  13+ E31A              		; l2 deltas are signed
  14+ E31A 00 00        l2deltaY	DW	0
  15+ E31C 00 00        l2deltaX	DW	0
  16+ E31E 00           l2deltaYsq	db	0
  17+ E31F 00           l2deltaXsq	db	0
  18+ E320 00           l2deltaYn	db	0
  19+ E321 00           l2deltaXn	db	0
  20+ E322 00           l2deltaYsqn	db	0
  21+ E323 00           l2deltaXsqn	db	0
  22+ E324 00           l2linecolor	db	0
  23+ E325 00 00        l2fraction	dw	0
  24+ E327 00 00        l2e2		dw	0
  25+ E329 00           l2way		db	0
  26+ E32A 00 00        l2targetPtr	dw	0
  27+ E32C              ;; These arrays should be 192 but if we use 256 then getting array2 value is just inc h rather than indexing again.
  28+ E32C 00 00 00...  l2targetArray1 ds	256
  29+ E42C 00 00 00...  l2targetArray2 ds	256
  30+ E52C              ;; Using Bresenham Algorithm draw a diagonal line top to bottom. First we must sort of course
  31+ E52C              ;;plotLine(int x0, int y0, int x1, int y1)
  32+ E52C              ;;    dx =  abs(x1-x0);
  33+ E52C              ;;    sx = x0<x1 ? 1 : -1;
  34+ E52C              ;;    dy = -abs(y1-y0);
  35+ E52C              ;;    sy = y0<y1 ? 1 : -1;
  36+ E52C              ;;    err = dx+dy;  /* error value e_xy */
  37+ E52C              ;;    while (true)   /* loop */
  38+ E52C              ;;        plot(x0, y0);
  39+ E52C              ;;        if (x0==x1 && y0==y1) break;
  40+ E52C              ;;        e2 = 2*err;
  41+ E52C              ;;        if (e2 >= dy) /* e_xy+e_x > 0 */
  42+ E52C              ;;            err += dy;
  43+ E52C              ;;            x0 += sx;
  44+ E52C              ;;        end if
  45+ E52C              ;;        if (e2 <= dx) /* e_xy+e_y < 0 */
  46+ E52C              ;;            err += dx;
  47+ E52C              ;;            y0 += sy;
  48+ E52C              ;;        end if
  49+ E52C              ;;    end while
  50+ E52C              ; ">l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
  51+ E52C              ; ">hl will be either l2targetArray1 or 2"
  52+ E52C              ; NOTE IF WE INTERLEAVE THESE TWO TABLES WE COUDL READ BOTH X POS as a 16 bit read
  53+ E52C FE 01        l2_draw_diagonal_save:  cp		1
  54+ E52E 28 06                                jr		z,l2S_ItsArray1
  55+ E530 21 2C E4                             ld		hl,l2targetArray2
  56+ E533 C3 39 E5                             jp		l2S_setTarget
  57+ E536 21 2C E3     l2S_ItsArray1:	        ld		hl,l2targetArray1
  58+ E539 22 2A E3     l2S_setTarget:	        ld		(l2targetPtr),hl
  59+ E53C              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
  60+ E53C 32 24 E3                             ld		(l2linecolor),a					;save colour for later
  61+ E53F 21 00 00                             ld		hl,0                            ;
  62+ E542 22 1C E3                             ld		(l2deltaX),hl                   ;
  63+ E545 22 1A E3                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
  64+ E548 78           l2S_preSort:            ld		a,b								;
  65+ E549                                      JumpIfALTNusng	d,l2S_noYSort			; we must have Y1 < Y2 (if eqyal then verical line picked up earlier
  65+ E549 BA          >                        cp      d
  65+ E54A DA 52 E5    >                        jp		c, l2S_noYSort
  66+ E54D              l2S_SortBasedOnY:	    ldhlbc									;
  66+ E54D 60          >                ld		h,b
  66+ E54E 69          >                ld		l,c
  67+ E54F EB                                   ex		de,hl                           ;
  68+ E550                                      ldbchl									; swap over bc and de using hl as an intermediate
  68+ E550 44          >                ld		b,h
  68+ E551 4D          >                ld		c,l
  69+ E552 DD 62        l2S_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
  70+ E554 DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
  71+ E556 79           l2S_setXLen:            ld		a,c                             ;
  72+ E557                                      JumpIfALTNusng e,l2S_PosXLen			; if x1 < x2 then we have a positive increment
  72+ E557 BB          >                        cp      e
  72+ E558 DA 64 E5    >                        jp		c, l2S_PosXLen
  73+ E55B 79           l2S_NegXLen:            ld		a,c                             ;
  74+ E55C 93                                   sub     e                               ;
  75+ E55D 32 1C E3                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
  76+ E560 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
  77+ E562 18 07                                jr		l2S_XINCDEC
  78+ E564 7B           l2S_PosXLen:	        ld		a,e                             ;
  79+ E565 91                                   sub		c                               ;
  80+ E566 32 1C E3                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
  81+ E569 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
  82+ E56B              l2S_XINCDEC:
  83+ E56B 32 D7 E5     	ld		(l2S_adjustCol),a				;
  84+ E56E 32 07 E6     	ld		(l2S_adjustCol2),a				; update self modifying code for X update with inc or dec from above
  85+ E571              l2S_setYLen
  86+ E571 7A           	ld		a,d							 	; presorted on Y so it is now always positive
  87+ E572 90           	sub		b
  88+ E573 32 1A E3     	ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
  89+ E576              l2S_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
  90+ E576              ldS_FracDYltDX:								;
  91+ E576 2A 1A E3     	ld		hl,(l2deltaY)					; Fraction = dY - dX
  92+ E579 ED 5B 1C E3  	ld		de,(l2deltaX)
  93+ E57D              	ClearCarryFlag
  93+ E57D B7          >                    or a
  94+ E57E ED 52        	sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
  95+ E580 EB           	ex		de,hl
  96+ E581 FD 62        	ld		iyh,d							; we will use IY reg for fractions
  97+ E583 FD 6B        	ld		iyl,e
  98+ E585 F2 AA E5     	jp		p,l2S_fracIsPositive
  99+ E588              l2S_fracIsNegative:
 100+ E588              	NegIY
 100+ E588 AF          >                    xor a
 100+ E589 FD 95       >                    sub iyl
 100+ E58B FD 6F       >                    ld iyl,a
 100+ E58D 9F          >                    sbc a,a
 100+ E58E FD 94       >                    sub iyh
 100+ E590 FD 67       >                    ld iyh,a
 101+ E592              	ShiftIYRight1
 101+ E592 FD 7C       >			   ld 	a,iyh
 101+ E594 CB 3F       >			   srl 	a
 101+ E596 FD 67       >			   ld	iyh,a
 101+ E598 FD 7D       >			   ld 	a,iyl
 101+ E59A 1F          >			   rra
 101+ E59B FD 6F       >			   ld	iyl,a
 102+ E59D              	NegIY
 102+ E59D AF          >                    xor a
 102+ E59E FD 95       >                    sub iyl
 102+ E5A0 FD 6F       >                    ld iyl,a
 102+ E5A2 9F          >                    sbc a,a
 102+ E5A3 FD 94       >                    sub iyh
 102+ E5A5 FD 67       >                    ld iyh,a
 103+ E5A7 C3 B5 E5     	jp		l2S_SkipCalcInc					; so we have a negative frac
 104+ E5AA              l2S_fracIsPositive:
 105+ E5AA              	ShiftIYRight1
 105+ E5AA FD 7C       >			   ld 	a,iyh
 105+ E5AC CB 3F       >			   srl 	a
 105+ E5AE FD 67       >			   ld	iyh,a
 105+ E5B0 FD 7D       >			   ld 	a,iyl
 105+ E5B2 1F          >			   rra
 105+ E5B3 FD 6F       >			   ld	iyl,a
 106+ E5B5              l2S_SkipCalcInc:
 107+ E5B5              l2S_Loop:									; As we loop, bc = to plot current XY
 108+ E5B5 2A 2A E3     	ld		hl,(l2targetPtr)				; Insert into respective array
 109+ E5B8 78           	ld		a,b
 110+ E5B9 ED 31        	add		hl,a
 111+ E5BB 71           	ld		(hl),c
 112+ E5BC              l2S_CheckIfEnd:
 113+ E5BC DD 7C        	ld		a,ixh
 114+ E5BE              	JumpIfAGTENusng	  b,l2S_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 114+ E5BE B8          >                        cp     b
 114+ E5BF D2 C5 E5    >                        jp		nc,l2S_CheckXPos
 115+ E5C2 C3 C9 E5     	jp		l2S_Continue
 116+ E5C5              l2S_CheckXPos:
 117+ E5C5 79           	ld		a,c
 118+ E5C6              	ReturnIfAGTENusng ixl					; if X1 has reached or exceeded X2 then we are done
 118+ E5C6 DD BD       >                    cp    ixl
 118+ E5C8 D0          >                    ret	 nc
 119+ E5C9              l2S_Continue:
 120+ E5C9              l2S_HNegative:
 121+ E5C9 FD 7C        	ld		a,iyh
 122+ E5CB CB 7F        	bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 123+ E5CD 28 0B        	jr		z,l2S_ErrNotNegative			;
 124+ E5CF              l2S_ErrNegative:								; if its a negative error update X
 125+ E5CF 3A 1A E3     	ld		a,(l2deltaY)
 126+ E5D2 16 00        	ld		d,0
 127+ E5D4 5F           	ld		e,a
 128+ E5D5 FD 19        	add		iy,de							; add deltaY(unsinged) to l2fraction
 129+ E5D7              l2S_adjustCol:
 130+ E5D7 00           	nop										; this is our inc/dec of X
 131+ E5D8 18 DB        	jr		l2S_Loop							; repeat loop
 132+ E5DA              l2S_ErrNotNegative:
 133+ E5DA FD 7C        	ld		a,iyh
 134+ E5DC FD B5        	or		iyl
 135+ E5DE              	IfAIsZeroGoto l2S_ErrZero					; if there is no error then goto zeroerror
 135+ E5DE A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 135+ E5DF CA F8 E5    >				jp	z, l2S_ErrZero
 136+ E5E2              l2S_ErrPositive:								; if its a positive error then we update Y
 137+ E5E2              	lddeiy
 137+ E5E2 FD 54       >                ld		d,iyh
 137+ E5E4 FD 5D       >                ld		e,iyl
 138+ E5E6 EB           	ex		de,hl
 139+ E5E7 16 00        	ld		d,0
 140+ E5E9 3A 1C E3     	ld		a,(l2deltaX)
 141+ E5EC 5F           	ld		e,a
 142+ E5ED              	ClearCarryFlag
 142+ E5ED B7          >                    or a
 143+ E5EE ED 52        	sbc		hl,de
 144+ E5F0 EB           	ex		de,hl
 145+ E5F1              	ldiyde
 145+ E5F1 FD 62       >                ld		iyh,d
 145+ E5F3 FD 6B       >                ld		iyl,e
 146+ E5F5              l2S_adjustRow:									; move Y down by one
 147+ E5F5 04           	inc		b
 148+ E5F6 18 BD        	jr		l2S_Loop
 149+ E5F8              l2S_ErrZero:
 150+ E5F8 2A 1C E3     	ld		hl,(l2deltaX)
 151+ E5FB EB           	ex		de,hl
 152+ E5FC 2A 1A E3     	ld		hl,(l2deltaY)
 153+ E5FF              	ClearCarryFlag
 153+ E5FF B7          >                    or a
 154+ E600 ED 52        	sbc		hl,de
 155+ E602 EB           	ex		de,hl
 156+ E603              	ldiyde
 156+ E603 FD 62       >                ld		iyh,d
 156+ E605 FD 6B       >                ld		iyl,e
 157+ E607              l2S_adjustCol2:
 158+ E607 00           	nop										; update X and Y
 159+ E608 04           	inc		b
 160+ E609 18 AA        	jr		l2S_Loop
 161+ E60B
 162+ E60B              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
 163+ E60B 32 24 E3     l2_draw_diagonal:       ld		(l2linecolor),a					;save colour for later
 164+ E60E 21 00 00                             ld		hl,0                            ;
 165+ E611 22 1C E3                             ld		(l2deltaX),hl                   ;
 166+ E614 22 1A E3                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
 167+ E617 78           l2D_preSort:            ld		a,b								;
 168+ E618                                      JumpIfALTNusng	d,l2D_noYSort			; we must have Y1 < Y2 (if eqyal then verical line picked up earlier
 168+ E618 BA          >                        cp      d
 168+ E619 DA 21 E6    >                        jp		c, l2D_noYSort
 169+ E61C              l2D_SortBasedOnY:	    ldhlbc									;
 169+ E61C 60          >                ld		h,b
 169+ E61D 69          >                ld		l,c
 170+ E61E EB                                   ex		de,hl                           ;
 171+ E61F                                      ldbchl									; swap over bc and de using hl as an intermediate
 171+ E61F 44          >                ld		b,h
 171+ E620 4D          >                ld		c,l
 172+ E621 DD 62        l2D_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
 173+ E623 DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
 174+ E625 79           l2D_setXLen:            ld		a,c                             ;
 175+ E626                                      JumpIfALTNusng e,l2D_PosXLen			; if x1 < x2 then we have a positive increment
 175+ E626 BB          >                        cp      e
 175+ E627 DA 33 E6    >                        jp		c, l2D_PosXLen
 176+ E62A 79           l2D_NegXLen:            ld		a,c                             ;
 177+ E62B 93                                   sub     e                               ;
 178+ E62C 32 1C E3                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
 179+ E62F 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
 180+ E631 18 07                                jr		l2D_XINCDEC
 181+ E633 7B           l2D_PosXLen:	        ld		a,e                             ;
 182+ E634 91                                   sub		c                               ;
 183+ E635 32 1C E3                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
 184+ E638 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
 185+ E63A 32 A9 E6     l2D_XINCDEC:	        ld		(l2D_adjustCol),a				;
 186+ E63D 32 D9 E6                             ld		(l2D_adjustCol2),a				; update self modifying code for X update with inc or dec from above
 187+ E640 7A           l2D_setYLen				ld		a,d							 	; presorted on Y so it is now always positive
 188+ E641 90                                   sub		b
 189+ E642 32 1A E3                             ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
 190+ E645              l2D_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
 191+ E645 2A 1A E3     ldD_FracDYltDX:			ld		hl,(l2deltaY)					; Fraction = dY - dX
 192+ E648 ED 5B 1C E3                          ld		de,(l2deltaX)
 193+ E64C                                      ClearCarryFlag
 193+ E64C B7          >                    or a
 194+ E64D ED 52                                sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
 195+ E64F EB                                   ex		de,hl
 196+ E650 FD 62                                ld		iyh,d							; we will use IY reg for fractions
 197+ E652 FD 6B                                ld		iyl,e
 198+ E654 F2 79 E6                             jp		p,l2D_fracIsPositive
 199+ E657              l2D_fracIsNegative:     NegIY
 199+ E657 AF          >                    xor a
 199+ E658 FD 95       >                    sub iyl
 199+ E65A FD 6F       >                    ld iyl,a
 199+ E65C 9F          >                    sbc a,a
 199+ E65D FD 94       >                    sub iyh
 199+ E65F FD 67       >                    ld iyh,a
 200+ E661                                      ShiftIYRight1
 200+ E661 FD 7C       >			   ld 	a,iyh
 200+ E663 CB 3F       >			   srl 	a
 200+ E665 FD 67       >			   ld	iyh,a
 200+ E667 FD 7D       >			   ld 	a,iyl
 200+ E669 1F          >			   rra
 200+ E66A FD 6F       >			   ld	iyl,a
 201+ E66C                                      NegIY
 201+ E66C AF          >                    xor a
 201+ E66D FD 95       >                    sub iyl
 201+ E66F FD 6F       >                    ld iyl,a
 201+ E671 9F          >                    sbc a,a
 201+ E672 FD 94       >                    sub iyh
 201+ E674 FD 67       >                    ld iyh,a
 202+ E676 C3 84 E6                             jp		l2D_SkipCalcInc					; so we have a negative frac
 203+ E679              l2D_fracIsPositive:     ShiftIYRight1
 203+ E679 FD 7C       >			   ld 	a,iyh
 203+ E67B CB 3F       >			   srl 	a
 203+ E67D FD 67       >			   ld	iyh,a
 203+ E67F FD 7D       >			   ld 	a,iyl
 203+ E681 1F          >			   rra
 203+ E682 FD 6F       >			   ld	iyl,a
 204+ E684              l2D_SkipCalcInc:
 205+ E684 C5 D5        l2D_Loop:				push	bc,,de                 			; l2DeltaY and l2DeltaX are set
 206+ E686 3A 24 E3                             ld		a,(l2linecolor)     			;
 207+ E689 CD FF E0                             call	l2_plot_pixel       			; Plot Pixel
 208+ E68C D1 C1                                pop     bc,,de
 209+ E68E DD 7C        l2D_CheckIfEnd:	        ld		a,ixh
 210+ E690                                      JumpIfAGTENusng	  b,l2D_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 210+ E690 B8          >                        cp     b
 210+ E691 D2 97 E6    >                        jp		nc,l2D_CheckXPos
 211+ E694 C3 9B E6                             jp		l2D_Continue
 212+ E697 79           l2D_CheckXPos:          ld		a,c
 213+ E698                                      ReturnIfAEqNusng ixl					; if X1 has reached or exceeded X2 then we are done
 213+ E698 DD BD       >                    cp      ixl
 213+ E69A C8          >                    ret     z
 214+ E69B              l2D_Continue:
 215+ E69B FD 7C        l2D_HNegative:			ld		a,iyh
 216+ E69D CB 7F                                bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 217+ E69F 28 0B                                jr		z,l2D_ErrNotNegative			;
 218+ E6A1 3A 1A E3     l2D_ErrNegative:		ld		a,(l2deltaY)
 219+ E6A4 16 00                                ld		d,0
 220+ E6A6 5F                                   ld		e,a
 221+ E6A7 FD 19                                add		iy,de							; add deltaY(unsinged) to l2fraction
 222+ E6A9 00           l2D_adjustCol:          nop										; this is our inc/dec of X
 223+ E6AA 18 D8                                jr		l2D_Loop							; repeat loop
 224+ E6AC FD 7C        l2D_ErrNotNegative:     ld		a,iyh
 225+ E6AE FD B5                                or		iyl
 226+ E6B0                                      IfAIsZeroGoto l2D_ErrZero					; if there is no error then goto zeroerror
 226+ E6B0 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 226+ E6B1 CA CA E6    >				jp	z, l2D_ErrZero
 227+ E6B4              l2D_ErrPositive:		lddeiy
 227+ E6B4 FD 54       >                ld		d,iyh
 227+ E6B6 FD 5D       >                ld		e,iyl
 228+ E6B8 EB                                   ex		de,hl
 229+ E6B9 16 00                                ld		d,0
 230+ E6BB 3A 1C E3                             ld		a,(l2deltaX)
 231+ E6BE 5F                                   ld		e,a
 232+ E6BF                                      ClearCarryFlag
 232+ E6BF B7          >                    or a
 233+ E6C0 ED 52                                sbc		hl,de
 234+ E6C2 EB                                   ex		de,hl
 235+ E6C3                                      ldiyde
 235+ E6C3 FD 62       >                ld		iyh,d
 235+ E6C5 FD 6B       >                ld		iyl,e
 236+ E6C7 04           l2D_adjustRow:			inc		b
 237+ E6C8 18 BA                                jr		l2D_Loop
 238+ E6CA 2A 1C E3     l2D_ErrZero:            ld		hl,(l2deltaX)
 239+ E6CD EB                                   ex		de,hl
 240+ E6CE 2A 1A E3                             ld		hl,(l2deltaY)
 241+ E6D1                                      ClearCarryFlag
 241+ E6D1 B7          >                    or a
 242+ E6D2 ED 52                                sbc		hl,de
 243+ E6D4 EB                                   ex		de,hl
 244+ E6D5                                      ldiyde
 244+ E6D5 FD 62       >                ld		iyh,d
 244+ E6D7 FD 6B       >                ld		iyl,e
 245+ E6D9 00           l2D_adjustCol2:         nop										; update X and Y
 246+ E6DA 04                                   inc		b
 247+ E6DB 18 A7                                jr		l2D_Loop
 248+ E6DD              ;----------------------------------------------------------------------------------------------------------------------------------
 249+ E6DD
 250+ E6DD
 251+ E6DD
 252+ E6DD
 253+ E6DD              ;Loin:				; BBC version of line draw
 254+ E6DD              ;; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 255+ E6DD              ;	ld		(l2linecolor),a					; save colour as a reg gets used alot, coudl move this into interrupt flag and disable interrups
 256+ E6DD              ;	ld		ixh,0							; ixh = s
 257+ E6DD              ;	ld		iyh,0							; iyh = swap
 258+ E6DD              ;	ld		l,0								; l will hold delta sign flags
 259+ E6DD              ;LoinCalcDeltaX:
 260+ E6DD              ;	ld		a,e
 261+ E6DD              ;	sub		c								; a = deltaX
 262+ E6DD              ;	JumpIfPositive LoinPosDx
 263+ E6DD              ;LoinNegDx:
 264+ E6DD              ;	neg										; carry flag will indicate deltaX was negative
 265+ E6DD              ;	ld		l,$80							; set bit 7 of l for negative
 266+ E6DD              ;LoinPosDx:
 267+ E6DD              ;	ld		ixl,a							; ixl = varP = deltaX
 268+ E6DD              ;LoinCalcDeltaY:
 269+ E6DD              ;	ld		a,d
 270+ E6DD              ;	sub		b								; a= deltaY
 271+ E6DD              ;	JumpIfPositive LoinPosDy
 272+ E6DD              ;LoinNegDy:
 273+ E6DD              ;	neg
 274+ E6DD              ;	set		6,l								; set bit 6 of l for negative deltaY
 275+ E6DD              ;LoinPosDy:
 276+ E6DD              ;	ld		iyl,a							; iyl = varQ = deltaY
 277+ E6DD              ;	JumpIfAGTENusng ixl, LoinSTPy			; if deltaY >= DeltaX then step along Y
 278+ E6DD              ;LoinSTPx:									; step along X
 279+ E6DD              ;	JumpOnBitClear l,7						; if l flags were clear then X2 < X2
 280+ E6DD              ;LoinSTPxSwapCoords:
 281+ E6DD              ;	dec		iyh								; swap flag now becomes FF
 282+ E6DD              ;	ld		a,l								; save l flags
 283+ E6DD              ;	ex		de,hl							; save de to hl
 284+ E6DD              ;	lddebc									; Point2 = point1
 285+ E6DD              ;	ldbchl									; Point1 = point2 that was saved
 286+ E6DD              ;	ld		l,a								; get back l flags
 287+ E6DD              ;LoinSTPxCorrectOrder:
 288+ E6DD              ;	l2_point_pixel_y_safe					; call plot pixel preseving bc hl
 289+ E6DD              ;	ld		a,iyl							; get delta Y back
 290+ E6DD              ;	ld		iy1,$FE							; roll counter
 291+ E6DD              ;LionSTPxRollQ:
 292+ E6DD              ;	sla		a								; highest bit of delta-Y
 293+ E6DD              ;	jp		c,LoinSTPxSteep
 294+ E6DD              ;	cp		ixl								; compare with DeltaX
 295+ E6DD              ;	jp		cs,LoinSTPxShallow
 296+ E6DD              ;LoinSTPxSteep:								;; LI4
 297+ E6DD              ;	sbc		a,ixl							; deltaYwork -= (deltaX+1)
 298+ E6DD              ;	scf										; force carry flag set
 299+ E6DD              ;LoinSTPxShallow:							;; LI5
 300+ E6DD              ;	rl		iyl								; rotate iyl which started as FE
 301+ E6DD              ;	jp		c,LionSTPxRollQ					; so we are doing a 6 bit loop
 302+ E6DD              ;	inc		ihl								; DeltaX += 1
 303+ E6DD              ;LoinSTPxYDirection:							; change this to self modifying code
 304+ E6DD              ;	ld		a,d
 305+ E6DD              ;	JumpIfAGTEn	b,LionDOWN:
 306+ E6DD              ;	ld		a,iyh							; swap flag
 307+ E6DD              ;	JumpIfANotZero	X1Inc  					; if swap flag was not set then no need to update R
 308+ E6DD              ;LoinSTPxX1Dec:
 309+ E6DD              ;	dec		c								; move left 1 pixel as we sawped
 310+ E6DD              ;LoinSTPxXCounter:							;; LIL2
 311+ E6DD              ;	sub		b
 312+ E6DD              ;	if
 313+ E6DD              ;
 314+ E6DD              ;85 82                   STA &82	   \ R	\ mask byte
 315+ E6DD              ;A5 81                   LDA &81	   \ Q	\ delta-Y
 316+ E6DD              ;A2 FE                   LDX #&FE	\ roll counter
 317+ E6DD              ;86 81                   STX &81		\ Q
 318+ E6DD              ;.LIL1	\ roll Q
 319+ E6DD              ;0A                      ASL A		\ highest bit of delta-Y
 320+ E6DD              ;B0 04                   BCS LI4		\ steep
 321+ E6DD              ;C5 1B                   CMP &1B	   \ P	\ delta-X
 322+ E6DD              ;90 03                   BCC LI5		\ shallow
 323+ E6DD              ;.LI4	\ steep
 324+ E6DD              ;E5 1B                   SBC &1B		\ P
 325+ E6DD              ;38                      SEC
 326+ E6DD              ;.LI5	\ shallow
 327+ E6DD              ;26 81                   ROL &81	   \ Q	\ #&FE
 328+ E6DD              ;B0 F2                   BCS LIL1 	\ loop Q, end with some low bits in Q
 329+ E6DD              ;A6 1B                   LDX &1B		\ P
 330+ E6DD              ;E8                      INX 		\ Xreg is width
 331+ E6DD              ;A5 37                   LDA &37		\ Y2
 332+ E6DD              ;E5 35                   SBC &35		\ Y1
 333+ E6DD              ;B0 2C                   BCS DOWN	\ draw line to the right and down
 334+ E6DD              ;A5 90                   LDA &90		\ SWAP
 335+ E6DD              ;D0 07                   BNE LI6		\ else Xreg was correct after all, no need to update R
 336+ E6DD              ;CA                      DEX
 337+ E6DD              ;.LIL2	\ counter X width
 338+ E6DD              ;A5 82                   LDA &82	   \ R	\ mask byte
 339+ E6DD              ;51 07                   EOR (&07),Y	\ (SC),Y
 340+ E6DD              ;91 07                   STA (&07),Y	\ (SC),Y
 341+ E6DD              ;.LI6	\ Xreg correct
 342+ E6DD              ;46 82                   LSR &82	   \ R	\ mask byte
 343+ E6DD              ;90 08                   BCC LI7   	\ else moving to next column to right. Bring carry in back
 344+ E6DD              ;66 82                   ROR &82		\ R
 345+ E6DD              ;A5 07                   LDA &07		\ SC
 346+ E6DD              ;69 08                   ADC #8		\ next column
 347+ E6DD              ;85 07                   STA &07		\ SC
 348+ E6DD              ;.LI7	\ S += Q. this is like an overflow monitor to update Y
 349+ E6DD              ;A5 83                   LDA &83		\ S
 350+ E6DD              ;65 81                   ADC &81	   \ Q	\ some low bits
 351+ E6DD              ;85 83                   STA &83		\ S
 352+ E6DD              ;90 07                   BCC LIC2	\ skip Y adjustment
 353+ E6DD              ;88                      DEY
 354+ E6DD              ;10 04                   BPL LIC2	\ skip Y adjustment
 355+ E6DD              ;C6 08                   DEC &08		\ SC+1
 356+ E6DD              ;A0 07                   LDY #7
 357+ E6DD              ;.LIC2	\ skip Y adjustment
 358+ E6DD              ;CA                      DEX
 359+ E6DD              ;D0 DC                   BNE LIL2	\ loop X width
 360+ E6DD              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 361+ E6DD              ;60                      RTS
 362+ E6DD              ;
 363+ E6DD              ;.DOWN	\ Line is going to the right and down
 364+ E6DD              ;A5 90                   LDA &90		\ SWAP
 365+ E6DD              ;F0 07                   BEQ LI9		\ no swap
 366+ E6DD              ;CA                      DEX
 367+ E6DD              ;.LIL3	\ counter X width
 368+ E6DD              ;A5 82                   LDA &82	    \ R \ mask byte
 369+ E6DD              ;51 07                   EOR (&07),Y	\ (SC),Y
 370+ E6DD              ;91 07                   STA (&07),Y	\ (SC),Y
 371+ E6DD              ;.LI9	\ no swap
 372+ E6DD              ;46 82                   LSR &82		\ R
 373+ E6DD              ;90 08                   BCC LI10	\ still in correct column, hop
 374+ E6DD              ;66 82                   ROR &82		\ R
 375+ E6DD              ;A5 07                   LDA &07		\ SC
 376+ E6DD              ;69 08                   ADC #8		\ next column
 377+ E6DD              ;85 07                   STA &07		\ SC
 378+ E6DD              ;.LI10	\ this is like an overflow monitor to update Y
 379+ E6DD              ;A5 83                   LDA &83		\ S
 380+ E6DD              ;65 81                   ADC &81		\ Q
 381+ E6DD              ;85 83                   STA &83		\ S
 382+ E6DD              ;90 09                   BCC LIC3	\ skip Y adjustment
 383+ E6DD              ;C8                      INY
 384+ E6DD              ;C0 08                   CPY #8
 385+ E6DD              ;D0 04                   BNE LIC3	\ have not reached bottom byte of char, hop
 386+ E6DD              ;E6 08                   INC &08		\ SC+1
 387+ E6DD              ;A0 00                   LDY #0
 388+ E6DD              ;.LIC3	\ skipped Y adjustment
 389+ E6DD              ;CA                      DEX
 390+ E6DD              ;D0 DA                   BNE LIL3	\ loop X width
 391+ E6DD              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 392+ E6DD              ;60                      RTS
 393+ E6DD              ;
 394+ E6DD              ;.STPY	\ -> &1797 \ Step along y for line, goes down and to right
 395+ E6DD              ;A4 35                   LDY &35		\ Y1
 396+ E6DD              ;98                      TYA
 397+ E6DD              ;A6 34                   LDX &34		\ X1
 398+ E6DD              ;C4 37                   CPY &37		\ Y2
 399+ E6DD              ;B0 10                   BCS LI15	\ skip swap if Y1 >= Y2
 400+ E6DD              ;C6 90                   DEC &90		\ SWAP
 401+ E6DD              ;A5 36                   LDA &36		\ X2
 402+ E6DD              ;85 34                   STA &34		\ X1
 403+ E6DD              ;86 36                   STX &36		\ X2
 404+ E6DD              ;AA                      TAX
 405+ E6DD              ;A5 37                   LDA &37		\ Y2
 406+ E6DD              ;85 35                   STA &35		\ Y1
 407+ E6DD              ;84 37                   STY &37		\ Y2
 408+ E6DD              ;A8                      TAY
 409+ E6DD              ;.LI15	\ Y1 Y2 order is now correct
 410+ E6DD              ;4A                      LSR A
 411+ E6DD              ;4A                      LSR A
 412+ E6DD              ;4A                      LSR A
 413+ E6DD              ;09 60                   ORA #&60
 414+ E6DD              ;85 08                   STA &08	 \ SC+1	\ screen hi
 415+ E6DD              ;8A                      TXA 		\ X1
 416+ E6DD              ;29 F8                   AND #&F8
 417+ E6DD              ;85 07                   STA &07	  \ SC	\ screen lo
 418+ E6DD              ;8A                      TXA
 419+ E6DD              ;29 07                   AND #7		\ mask index
 420+ E6DD              ;AA                      TAX
 421+ E6DD              ;BD AF 16                LDA &16AF,X \ TWOS,X \ Mode4 single pixel
 422+ E6DD              ;85 82                   STA &82	    \ R	\ mask
 423+ E6DD              ;A5 35                   LDA &35		\ Y1
 424+ E6DD              ;29 07                   AND #7
 425+ E6DD              ;A8                      TAY
 426+ E6DD              ;A5 1B                   LDA &1B	    \ P	\ delta-X
 427+ E6DD              ;A2 01                   LDX #1		\ roll counter
 428+ E6DD              ;86 1B                   STX &1B	    	\ P
 429+ E6DD              ;.LIL4	\ roll P
 430+ E6DD              ;0A                      ASL A
 431+ E6DD              ;B0 04                   BCS LI13	\ do subtraction
 432+ E6DD              ;C5 81                   CMP &81	    \ Q	\ delta-Y
 433+ E6DD              ;90 03                   BCC LI14	\ less than Q
 434+ E6DD              ;.LI13	\ do subtraction
 435+ E6DD              ;E5 81                   SBC &81		\ Q
 436+ E6DD              ;38                      SEC
 437+ E6DD              ;.LI14	\ less than Q
 438+ E6DD              ;26 1B                   ROL &1B		\ P
 439+ E6DD              ;90 F2                   BCC LIL4	\ loop P, end with some low bits in P
 440+ E6DD              ;A6 81                   LDX &81		\ Q
 441+ E6DD              ;E8                      INX 		\ adjust height
 442+ E6DD              ;A5 36                   LDA &36		\ X2
 443+ E6DD              ;E5 34                   SBC &34		\ X1
 444+ E6DD              ;90 2D                   BCC LFT		\ if C cleared then line moving to the left - hop down
 445+ E6DD              ;18                      CLC
 446+ E6DD              ;A5 90                   LDA &90		\ SWAP
 447+ E6DD              ;F0 07                   BEQ LI17 	\ skip first point
 448+ E6DD              ;CA                      DEX
 449+ E6DD              ;.LIL5	\ skipped first point, counter X
 450+ E6DD              ;A5 82                   LDA &82	    \ R \ mask byte
 451+ E6DD              ;51 07                   EOR (&07),Y	\ (SC),Y
 452+ E6DD              ;91 07                   STA (&07),Y	\ (SC),Y
 453+ E6DD              ;.LI17	\ skipped first point
 454+ E6DD              ;88                      DEY
 455+ E6DD              ;10 04                   BPL LI16	\ skip hi adjust
 456+ E6DD              ;C6 08                   DEC &08		\ SC+1
 457+ E6DD              ;A0 07                   LDY #7		\ new char
 458+ E6DD              ;	.LI16	\ skipped hi adjust
 459+ E6DD              ;A5 83                   LDA &83		\ S
 460+ E6DD              ;65 1B                   ADC &1B		\ P
 461+ E6DD              ;85 83                   STA &83		\ S
 462+ E6DD              ;90 0C                   BCC LIC5	\ skip, still in same column
 463+ E6DD              ;46 82                   LSR &82	  \ R	\ mask
 464+ E6DD              ;90 08                   BCC LIC5  	\ no mask bit hop
 465+ E6DD              ;66 82                   ROR &82   \ R	\ else moved over to next column, reset mask
 466+ E6DD              ;A5 07                   LDA &07	  \ SC  \ screen lo
 467+ E6DD              ;69 08                   ADC #8		\ next char below
 468+ E6DD              ;85 07                   STA &07		\ SC
 469+ E6DD              ;.LIC5	\ same column
 470+ E6DD              ;CA                      DEX
 471+ E6DD              ;D0 DC                   BNE LIL5	\ loop X height
 472+ E6DD              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 473+ E6DD              ;60                      RTS
 474+ E6DD              ;
 475+ E6DD              ;.LFT	\ going left
 476+ E6DD              ;A5 90                   LDA &90		\ SWAP
 477+ E6DD              ;F0 07                   BEQ LI18	\ skip first point
 478+ E6DD              ;CA                      DEX 		\ reduce height
 479+ E6DD              ;.LIL6	\ counter X height
 480+ E6DD              ;A5 82                   LDA &82	   \ R	\ mask byte
 481+ E6DD              ;51 07                   EOR (&07),Y	\ (SC),Y
 482+ E6DD              ;91 07                   STA (&07),Y	\ (SC),Y
 483+ E6DD              ;.LI18
 484+ E6DD              ;88                      DEY
 485+ E6DD              ;10 04                   BPL LI19	\ skip hi adjust
 486+ E6DD              ;C6 08                   DEC &08		\ SC+1
 487+ E6DD              ;A0 07                   LDY #7		\ rest char row
 488+ E6DD              ;.LI19	\ skipped hi adjust
 489+ E6DD              ;A5 83                   LDA &83		\ S
 490+ E6DD              ;65 1B                   ADC &1B	    \ P \ some low bits
 491+ E6DD              ;85 83                   STA &83		\ S
 492+ E6DD              ;90 0D                   BCC LIC6	\ no overflow
 493+ E6DD              ;06 82                   ASL &82	    \ R \ else move byte mask to the left
 494+ E6DD              ;90 09                   BCC LIC6	\ no overflow
 495+ E6DD              ;26 82                   ROL &82		\ R
 496+ E6DD              ;A5 07                   LDA &07		\ SC
 497+ E6DD              ;E9 07                   SBC #7		\ down 1 char
 498+ E6DD              ;85 07                   STA &07		\ SC
 499+ E6DD              ;18                      CLC
 500+ E6DD              ;.LIC6	\ no overflow
 501+ E6DD              ;CA                      DEX 		\ height
 502+ E6DD              ;D0 DB                   BNE LIL6	\ loop X
 503+ E6DD              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 504+ E6DD              ;.HL6
 505+ E6DD              ;60                      RTS 		\ end Line drawing
 506+ E6DD
 507+ E6DD
 508+ E6DD              ;;l2_draw_diagonalopt:
 509+ E6DD              	; ">TODO l2_draw_diagonalopt fast horz vert optmisation"
 510+ E6DD              ;;	push	af
 511+ E6DD              ;;	ld		a,b
 512+ E6DD              ;;	cp		d
 513+ E6DD              ;;	jr		z,.RegularDiagnonal
 514+ E6DD              ;;.CheckHorz:
 515+ E6DD              ;;	ld		a,c
 516+ E6DD              ;;	cp		e
 517+ E6DD              ;;	jr		z,.horizontalLine
 518+ E6DD              ;;.RegularDiagnonal:
 519+ E6DD              ;;	pop		af
 520+ E6DD              ;;	call diag
 521+ E6DD
 522+ E6DD
 523+ E6DD              ;;l2_signed_mul2a:
 524+ E6DD              ;;; ">l2_signed_mul2a - Signed a = a * 2 using shift)"
 525+ E6DD              ;;	TEST	$80
 526+ E6DD              ;;	jr		nz, .negativecalc
 527+ E6DD              ;;.positivecalc:
 528+ E6DD              ;;	ccf
 529+ E6DD              ;;	rla
 530+ E6DD              ;;	ret
 531+ E6DD              ;;.negativecalc:
 532+ E6DD              ;;	neg
 533+ E6DD              ;;	ccf
 534+ E6DD              ;;	rla
 535+ E6DD              ;;	neg
 536+ E6DD              ;;	ret
 537+ E6DD              ;;
 538+ E6DD              ;;l2_signed_mul2atohl:
 539+ E6DD              ;;; ">l2_signed_mul2ahl - Signed hl = a * 2 using shift)"
 540+ E6DD              ;;	TEST	$80
 541+ E6DD              ;;	jr		nz, .negativecalc
 542+ E6DD              ;;.positivecalc:
 543+ E6DD              ;;	ld		hl,0
 544+ E6DD              ;;	ld		l,a
 545+ E6DD              ;;	add		hl,a
 546+ E6DD              ;;	ret
 547+ E6DD              ;;.negativecalc:
 548+ E6DD              ;;	neg
 549+ E6DD              ;;	ld		hl,0
 550+ E6DD              ;;	ld		l,a
 551+ E6DD              ;;	neghl
 552+ E6DD              ;;	ret
 553+ E6DD              ;;
 554+ E6DD              ;;l2_e2fractionby2:
 555+ E6DD              ;;	ld 		hl,(l2fraction)
 556+ E6DD              ;;	push	de
 557+ E6DD              ;;	ld		d,h
 558+ E6DD              ;;	ld		e,l
 559+ E6DD              ;;	add		hl,de
 560+ E6DD              ;;	pop		de
 561+ E6DD              ;;	ld		(l2e2),hl
 562+ E6DD              ;;	ret
 563+ E6DD
 564+ E6DD
 565+ E6DD
 566+ E6DD
 567+ E6DD
 568+ E6DD              ;;//	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 569+ E6DD              ;;//.catchLoop:
 570+ E6DD              ;;//	jp .catchLoop
 571+ E6DD              ;;//.continue:
 572+ E6DD              ;;//    ld      A,D
 573+ E6DD              ;;//    sub     H
 574+ E6DD              ;;//    jr      NC,.DXpositive    ;delta_x > 0
 575+ E6DD              ;;//.DXNegative:
 576+ E6DD              ;;//    neg
 577+ E6DD              ;;//.DXPositive:
 578+ E6DD              ;;//    ld      B,A              ;B <- |delta_x|
 579+ E6DD              ;;//    ld      A,E
 580+ E6DD              ;;//    sub     L
 581+ E6DD              ;;//    jr      NC,.DYpositive    ;delta_y > 0
 582+ E6DD              ;;//.DYNegative:
 583+ E6DD              ;;//    neg
 584+ E6DD              ;;//.DYPositive:
 585+ E6DD              ;;//    sub     B               ;|delta_y|
 586+ E6DD              ;;//	push	af
 587+ E6DD              ;;//	jr		c,.DeltaX
 588+ E6DD              ;;//.DeltaY
 589+ E6DD              ;;//	ld      A,H             			;if |delta_x| < |delta_y| then
 590+ E6DD              ;;//    ld      H,L             			;then values x and y are swapped
 591+ E6DD              ;;//    ld      L,A             			;so the loop will always be performed on the
 592+ E6DD              ;;//    ld      A,D             			;x value. A flag must be set to
 593+ E6DD              ;;//    ld      D,E             			;remind that data must be drawn (y,x)
 594+ E6DD              ;;//    ld      E,A             			;instead of (x,y)
 595+ E6DD              ;;//.DeltaX:
 596+ E6DD              ;;//	ld		a,d
 597+ E6DD              ;;//	sub		h
 598+ E6DD              ;;//	jr		nc,.TestDY					; x1 < x2
 599+ E6DD              ;;//.TestDX:
 600+ E6DD              ;;//	ex		de,hl
 601+ E6DD              ;;//.TestDY:
 602+ E6DD              ;;//	ld		a,e
 603+ E6DD              ;;//	sub		l
 604+ E6DD              ;;//    ld      A,$01
 605+ E6DD              ;;//    jr      NC,.StoreA
 606+ E6DD              ;;//    neg                     ;y1 > y2 : in case2 the 'y' variable
 607+ E6DD              ;;//.StoreA:
 608+ E6DD              ;;//        ld      (l2way),A
 609+ E6DD              ;;//.InitLine:
 610+ E6DD              ;;//        ld      B,H
 611+ E6DD              ;;//        ld      C,L
 612+ E6DD              ;;//        ld      A,E
 613+ E6DD              ;;//        sub     L
 614+ E6DD              ;;//        jr      NC,.EndInit
 615+ E6DD              ;;//        ld      A,L
 616+ E6DD              ;;//        ld      L,E
 617+ E6DD              ;;//        ld      E,A
 618+ E6DD              ;;//.EndInit:
 619+ E6DD              ;;//        ld      A,E
 620+ E6DD              ;;//        sub     L
 621+ E6DD              ;;//        rla
 622+ E6DD              ;;//        ld      L,A             ;value to add in case1 (d < 0)
 623+ E6DD              ;;//        add     A,H
 624+ E6DD              ;;//        sub     D
 625+ E6DD              ;;//        ld      E,A             ;'d' variable is initialised
 626+ E6DD              ;;//        add     A,H
 627+ E6DD              ;;//        sub     D
 628+ E6DD              ;;//        ld      H,A             ;value to add in case2 (d >= 0)
 629+ E6DD              ;;//.Loop:
 630+ E6DD              ;;//        ld      A,B
 631+ E6DD              ;;//        sub     D
 632+ E6DD              ;;//        jr      NC,.EndLine       ;the line is completely drawn.
 633+ E6DD              ;;//        pop     AF
 634+ E6DD              ;;//        bit     7,A
 635+ E6DD              ;;//        push    AF
 636+ E6DD              ;;//        push    AF
 637+ E6DD              ;;//        push    BC
 638+ E6DD              ;;//        jr      Z,.DrawPoint
 639+ E6DD              ;;//        ld      A,B
 640+ E6DD              ;;//        ld      B,C
 641+ E6DD              ;;//        ld      C,A
 642+ E6DD              ;;//.DrawPoint:
 643+ E6DD              ;;//		push	hl
 644+ E6DD              ;;//		pushbcdeaf
 645+ E6DD              ;;//		ld		b,e
 646+ E6DD              ;;//		ld		c,d
 647+ E6DD              ;;//	ld 		a,(l2linecolor)
 648+ E6DD              ;;//	call	l2_plot_pixel
 649+ E6DD              ;;//		popafdebc
 650+ E6DD              ;;//		pop		hl
 651+ E6DD              ;;//        pop     BC
 652+ E6DD              ;;//        pop     AF
 653+ E6DD              ;;//.TestD:
 654+ E6DD              ;;//        bit     7,E
 655+ E6DD              ;;//        jr      NZ,.Case1
 656+ E6DD              ;;//.Case2:                          ;d >= 0
 657+ E6DD              ;;//        ld      A,E
 658+ E6DD              ;;//        add     A,H
 659+ E6DD              ;;//        ld      E,A
 660+ E6DD              ;;//        ld      A,(l2way)
 661+ E6DD              ;;//        add     A,C
 662+ E6DD              ;;//        ld      C,A
 663+ E6DD              ;;//        jr      .EndLoop
 664+ E6DD              ;;//.Case1:                          ;d < 0
 665+ E6DD              ;;//        ld      A,E
 666+ E6DD              ;;//        add     A,L
 667+ E6DD              ;;//        ld      E,A
 668+ E6DD              ;;//.EndLoop:
 669+ E6DD              ;;//        inc     B
 670+ E6DD              ;;//        jr      .Loop
 671+ E6DD              ;;//.EndLine:
 672+ E6DD              ;;//        pop     AF              ;MUST NOT BE REMOVED
 673+ E6DD              ;;//        pop     HL              ;can be removed
 674+ E6DD              ;;//        pop     DE              ;can be removed
 675+ E6DD              ;;//        ret
 676+ E6DD
 677+ E6DD              ;;	ld		(.l2yadjust),a
 678+ E6DD              ;;	call	calcdeltax:
 679+ E6DD              ;;	ld		(.l2xadjust),a
 680+ E6DD              ;;.calcfraction:							; err(or fraction) = dx+dy;
 681+ E6DD              ;;	push	hl
 682+ E6DD              ;;	push	de
 683+ E6DD              ;;	ld		hl,(l2deltaX)
 684+ E6DD              ;;	ld		de,(l2deltaY)
 685+ E6DD              ;;	add		hl,de
 686+ E6DD              ;;	ld		(l2fraction),hl
 687+ E6DD              ;;	pop		de
 688+ E6DD              ;;	pop		hl
 689+ E6DD              ;;.mainloop:
 690+ E6DD              ;;	push	bc
 691+ E6DD              ;;	push	de
 692+ E6DD              ;;	ld 		a,(l2linecolor)
 693+ E6DD              ;;	call	l2_plot_pixel
 694+ E6DD              ;;	pop		de
 695+ E6DD              ;;	pop		bc
 696+ E6DD              ;;.arewefinishedtest
 697+ E6DD              ;;	ld		a,b
 698+ E6DD              ;;	cp		d
 699+ E6DD              ;;	jr		nz,.notthereyet
 700+ E6DD              ;;	ld		a,c
 701+ E6DD              ;;	cp		e
 702+ E6DD              ;;	ret		z
 703+ E6DD              ;;.notthereyet:
 704+ E6DD              ;;	push	de
 705+ E6DD              ;;	call	l2_e2fractionby2			; e2 = 2*err;
 706+ E6DD              ;;	pop		de
 707+ E6DD              ;;.e2dytest:								; if (e2 >= dy) /* e_xy+e_x > 0 */  then S and P/V are the same
 708+ E6DD              ;;	push	de							; so if m & pe  or p & po calc (m = sign set p = 0)
 709+ E6DD              ;;	ld		de,(l2deltaY)				;    if m & po  or p & pe skip  (pe = pv set po = pv 0)
 710+ E6DD              ;;	or		a							;
 711+ E6DD              ;;	sbc		hl,de						;
 712+ E6DD              ;;	pop		de
 713+ E6DD              ;;	jr		z,  .dodycalc				; if equal then calc
 714+ E6DD              ;;	jp		p,	.dodycalc				; sign clear to H>D even with negtives
 715+ E6DD              ;;	jr		.skipdycalc         		; sign = 0     so  skip as pe
 716+ E6DD              ;;.dodycalc:
 717+ E6DD              ;;	ld		hl,(l2fraction)
 718+ E6DD              ;;	push	de
 719+ E6DD              ;;	ld		de,(l2deltaY)
 720+ E6DD              ;;	add		hl,de
 721+ E6DD              ;;	ld		(l2fraction),de
 722+ E6DD              ;;	pop		de
 723+ E6DD              ;;.l2yadjust:
 724+ E6DD              ;;	nop
 725+ E6DD              ;;.skipdycalc:
 726+ E6DD              ;;.e2dxtest:								;  if (e2 <= dx) /* e_xy+e_y < 0 */ then S and P/V are different.
 727+ E6DD              ;;	ld		hl,(l2e2)
 728+ E6DD              ;;	push	de							;
 729+ E6DD              ;;	ld		de,(l2deltaX)				;
 730+ E6DD              ;;	or		a							; clear carry flag
 731+ E6DD              ;;	sbc		hl,de						; hl = hl - de is if de > hl will get pv and signed different?
 732+ E6DD              ;;	pop		de
 733+ E6DD              ;;	jr		z,.dodxcalc					; e2 == dx so do calc
 734+ E6DD              ;;	jp		m,.dodxcalc					; was sign bit set
 735+ E6DD              ;;	jr		.skipdxcalc         	    ; diff so skip ; pvclear = po        pvset = pe
 736+ E6DD              ;;.dodxcalc:
 737+ E6DD              ;;	ld		hl,(l2fraction)
 738+ E6DD              ;;	push	de
 739+ E6DD              ;;	ld		de,(l2deltaX)
 740+ E6DD              ;;	add		hl,de
 741+ E6DD              ;;	ld		(l2fraction),de
 742+ E6DD              ;;	pop		de
 743+ E6DD              ;;.l2xadjust:
 744+ E6DD              ;;	nop
 745+ E6DD              ;;.skipdxcalc:
 746+ E6DD              ;;	jr 		.mainloop
 747+ E6DD
 748+ E6DD
 749+ E6DD              ;;/l2_draw_diagonalold:
 750+ E6DD              ;;/MESSAGE ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 751+ E6DD              ;;/	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 752+ E6DD              ;;/.sortycoords:
 753+ E6DD              ;;/	ld		a,b							; Sort to Y0 is always > y1 so we don't have to deal with step y and only step x
 754+ E6DD              ;;/	cp		d
 755+ E6DD              ;;/	jr		nc, .nocoordswap
 756+ E6DD              ;;/.swapcoords:
 757+ E6DD              ;;/	ex		de,hl						; save de to hl ! effective code line 98 after macros
 758+ E6DD              ;;/	lddebc
 759+ E6DD              ;;/	ldbchl
 760+ E6DD              ;;/.nocoordswap:
 761+ E6DD              ;;/	ld		a,d							; l2_dy = -ABS(l2_vy1 - l2_vy0)
 762+ E6DD              ;;/	sub		b							; we have already sorted  so y1 > y0
 763+ E6DD              ;;/	ld		(l2deltaY),a
 764+ E6DD              ;;/	neg									; DEBUG
 765+ E6DD              ;;/	ld		(l2deltaYn),a				; DEBUG
 766+ E6DD              ;;/	neg									; DEBUG
 767+ E6DD              ;;/.deltaxequABSx0Minusx1:						; we need to set l2dx to abs x1-x0 and set
 768+ E6DD              ;;/    ld		a,c
 769+ E6DD              ;;/	cp		e
 770+ E6DD              ;;/	jr		c, .x1GTx0
 771+ E6DD              ;;/.x1LTx0
 772+ E6DD              ;;/	ld		a,c
 773+ E6DD              ;;/	sub		e
 774+ E6DD              ;;/	ld		(l2deltaX),a				; just 8 bit for now should it be 16?
 775+ E6DD              ;;/	neg									; DEBUG
 776+ E6DD              ;;/	ld		(l2deltaXn),a				; DEBUG
 777+ E6DD              ;;/	neg									; DEBUG
 778+ E6DD              ;;/	ld		a,l2incbstep
 779+ E6DD              ;;/	jr		.setlayershift0
 780+ E6DD              ;;/.x1GTx0:
 781+ E6DD              ;;/	ld		a,e
 782+ E6DD              ;;/	sub		c
 783+ E6DD              ;;/	ld		(l2deltaX),a					; just 8 bit for now should it be 16?
 784+ E6DD              ;;/	neg									; DEBUG
 785+ E6DD              ;;/	ld		(l2deltaXn),a				; DEBUG
 786+ E6DD              ;;/	neg									; DEBUG
 787+ E6DD              ;;/	ld		a,l2decbstep
 788+ E6DD              ;;/.setlayershift0:
 789+ E6DD              ;;/	ld		a,0
 790+ E6DD              ;;/	pushbcde
 791+ E6DD              ;;/	call	asm_l2_bank_n_select		; l2_layer_shift = 0 and bank 0 selected
 792+ E6DD              ;;/	popdebc
 793+ E6DD              ;;/; so now we have set inc or dec instruction, l2dy, l2dx and on bank 0,
 794+ E6DD              ;;/.dymuliplyby2:
 795+ E6DD              ;;/	ld		a, (l2deltaY)				; dy *= 2
 796+ E6DD              ;;/	call	l2_signed_mul2a
 797+ E6DD              ;;/	ld		(l2deltaYsq),a
 798+ E6DD              ;;/	neg									; DEBUG
 799+ E6DD              ;;/	ld		(l2deltaYsqn),a				; DEBUG
 800+ E6DD              ;;/	neg									; DEBUG
 801+ E6DD              ;;/.dxmuliplyby2:
 802+ E6DD              ;;/	ld		a, (l2deltaX)				; dx *= 2
 803+ E6DD              ;;/	call	l2_signed_mul2a
 804+ E6DD              ;;/	ld		(l2deltaXsq),a
 805+ E6DD              ;;/	neg									; DEBUG
 806+ E6DD              ;;/	ld		(l2deltaXsqn),a				; DEBUG
 807+ E6DD              ;;/	neg									; DEBUG
 808+ E6DD              ;;/.plotfirstpixel:
 809+ E6DD              ;;/	pushbcde
 810+ E6DD              ;;/	ld a,(l2linecolor)
 811+ E6DD              ;;/	call	l2_plot_pixel
 812+ E6DD              ;;/	popdebc
 813+ E6DD              ;;/.mainloop:								; if (l2_dx > l2_dy) signed
 814+ E6DD              ;;/	ld		a,(l2deltaX)				;If A < N, then S and P/V are different.
 815+ E6DD              ;;/	ld		hl,l2deltaY					;A >= N, then S and P/V are the same
 816+ E6DD              ;;/	cp		(hl)
 817+ E6DD              ;;/	jp		m,	.signset
 818+ E6DD              ;;/.signclear:
 819+ E6DD              ;;/	jp		pe,	.dxLTEdybranch
 820+ E6DD              ;;/	jr		.dxGTdybranch
 821+ E6DD              ;;/.signset:
 822+ E6DD              ;;/	jp		po,	.dxLTEdybranch
 823+ E6DD              ;;/.dxGTdybranch:
 824+ E6DD              ;;/	ld		a,(l2deltaYsq)
 825+ E6DD              ;;/	ld		hl,l2deltaX
 826+ E6DD              ;;/	sub		(hl)
 827+ E6DD              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 dx
 828+ E6DD              ;;/.BranchAwhile							; while (l2_vx0 != l2_vx1)
 829+ E6DD              ;;/	ld		a,c
 830+ E6DD              ;;/	cp		e
 831+ E6DD              ;;/	ret		z							; if x0 = x1 then done
 832+ E6DD              ;;/.BranchAtestfraction:					; if (l2_fraction >= 0)
 833+ E6DD              ;;/	ld		a,(l2fraction)
 834+ E6DD              ;;/	TEST	$80
 835+ E6DD              ;;/	jr		nz,.BranchAskipYstep
 836+ E6DD              ;;/	inc		b							; 		++l2_vy0;
 837+ E6DD              ;;/	ld		hl,l2deltaXsq
 838+ E6DD              ;;/	sub		(hl)						; 		l2_fraction -= l2_dx;
 839+ E6DD              ;;/	ld		(l2fraction),a
 840+ E6DD              ;;/.BranchAskipYstep:
 841+ E6DD              ;;/.l2stepx1:
 842+ E6DD              ;;/	inc		b							; this is self modifying code point 1 l2_vx0 += l2_stepx
 843+ E6DD              ;;/	ld		a,(l2fraction)				; l2_fraction += l2_dy can optimise later as a already has this?
 844+ E6DD              ;;/	ld		hl,l2deltaYsq
 845+ E6DD              ;;/	add		a,(hl)
 846+ E6DD              ;;/	ld		(l2fraction),a
 847+ E6DD              ;;/.BranchAplotBCColA:						; l2_plot_pixel(l2_vx0,l2_vy0,color);
 848+ E6DD              ;;/	pushbcde
 849+ E6DD              ;;/	ld a,(l2linecolor)
 850+ E6DD              ;;/	call	l2_plot_pixel
 851+ E6DD              ;;/	popdebc
 852+ E6DD              ;;/.BranchAloop:
 853+ E6DD              ;;/	jr		.BranchAwhile
 854+ E6DD              ;;/.dxLTEdybranch:
 855+ E6DD              ;;/	ld		a,(l2deltaXsq)				; l2_fraction = l2_dx - (l2_dy >> 1);
 856+ E6DD              ;;/	ld		hl, l2deltaY
 857+ E6DD              ;;/	sub		(hl)
 858+ E6DD              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 d
 859+ E6DD              ;;/.BranchBwhile:							; while (l2_vy0 != l2_vy1)
 860+ E6DD              ;;/	ld		a,b
 861+ E6DD              ;;/	cp		d
 862+ E6DD              ;;/	ret		z							; if x0 = x1 then done
 863+ E6DD              ;;/.BranchBtestfraction:					; if (l2_fraction >= 0)
 864+ E6DD              ;;/	ld		a,(l2fraction)
 865+ E6DD              ;;/	TEST	$80
 866+ E6DD              ;;/	jr		nz,.BranchBskipYstep
 867+ E6DD              ;;/.l2stepx2
 868+ E6DD              ;;/	inc		b							; l2_vx0 += l2_stepx; this is self modifying code point 2
 869+ E6DD              ;;/	ld		a,(l2fraction)				; l2_fraction -= l2_dy
 870+ E6DD              ;;/	ld		hl,l2deltaYsq
 871+ E6DD              ;;/	sub		(hl)
 872+ E6DD              ;;/	ld		(l2fraction),a
 873+ E6DD              ;;/.BranchBskipYstep:
 874+ E6DD              ;;/	ld		hl, l2deltaYsq
 875+ E6DD              ;;/	add		a,(hl)
 876+ E6DD              ;;/	ld		(l2fraction),a
 877+ E6DD              ;;/	inc		b							; ++l2_vy0;
 878+ E6DD              ;;/.BranchBplotBCColA:
 879+ E6DD              ;;/	pushbcde
 880+ E6DD              ;;/	ld a,(l2linecolor)
 881+ E6DD              ;;/	call	l2_plot_pixel
 882+ E6DD              ;;/	popdebc
 883+ E6DD              ;;/.BranchBloop:
 884+ E6DD              ;;/	jr		.BranchBwhile
 885+ E6DD
# file closed: ./Layer2Graphics/layer2_plot_diagonal.asm
1093  E6DD                  INCLUDE "./Layer2Graphics/asm_l2_plot_triangle.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_triangle.asm
   1+ E6DD
   2+ E6DD
   3+ E6DD
   4+ E6DD 00 00        l2trianglebc	        DW 0
   5+ E6DF 00 00        l2trianglede	        DW 0
   6+ E6E1 00 00        l2trianglehl	        DW 0
   7+ E6E3
   8+ E6E3              ; "l2_draw_triangle, BC = y1x1, DE=y2x2, HL=y3x3 a = Color"
   9+ E6E3 C5 D5 E5 F5  l2_draw_triangle:       push	bc,,de,,hl,,af
  10+ E6E7 CD 0B E6                             call	l2_draw_diagonal		; BC to DE
  11+ E6EA F1                                   pop		af
  12+ E6EB D1                                   pop		de						; swap DE and HL
  13+ E6EC E1                                   pop		hl						; so BC to DE is really to HL
  14+ E6ED C1                                   pop		bc
  15+ E6EE D5 E5                                push    de,,hl                    ; which is pushing original hl then original de
  16+ E6F0 F5                                   push	af
  17+ E6F1 CD 0B E6                             call	l2_draw_diagonal		; BC to HL (leaving DE and HL swapped)
  18+ E6F4 F1                                   pop		af
  19+ E6F5 C1                                   pop		bc						; Now bc = original de
  20+ E6F6 D1                                   pop		de						; de = original hl
  21+ E6F7 CD 0B E6                             call	l2_draw_diagonal		; BC to HL (leaving DE and HL swapped)
  22+ E6FA C9                                   ret
  23+ E6FB
  24+ E6FB
  25+ E6FB
  26+ E6FB
  27+ E6FB
# file closed: ./Layer2Graphics/asm_l2_plot_triangle.asm
1094  E6FB                  INCLUDE "./Layer2Graphics/asm_l2_fill_triangle.asm"
# file opened: ./Layer2Graphics/asm_l2_fill_triangle.asm
   1+ E6FB              ; ">l2_fillBottomFlatTriangle BC y0x0 DE x1x2, H YCommon, L Colour"
   2+ E6FB              ; "note >l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
   3+ E6FB              ; "note line to   bc = left side row,col, d right pixel, e = color"
   4+ E6FB DD 01        l2_fillBottomFlatTriangle:break
   5+ E6FD 7D                                   ld		a,l
   6+ E6FE 32 24 E3                             ld		(l2linecolor),a
   7+ E701 79                                   ld		a,c
   8+ E702 BB                                   cp		e
   9+ E703 30 08                                jr		nc, .x2gtex1
  10+ E705 DD 26 01     .x1ltx2:                ld		ixh,1                           ; list 1 holds x0 down to x1
  11+ E708 DD 2E 02                             ld		ixl,2                           ; list 2 hols  x0 down to x2
  12+ E70B 18 06                                jr		.storepoints
  13+ E70D DD 26 02     .x2gtex1:               ld		ixh,2
  14+ E710 DD 2E 01                             ld		ixl,1
  15+ E713 C5 D5 E5     .storepoints:           push	bc,,de,,hl
  16+ E716 DD 7C                                ld		a,ixh
  17+ E718 5A                                   ld		e,d                             ; we alreay have bc so its now bc -> hd
  18+ E719 54                                   ld		d,h
  19+ E71A CD 2C E5                             call	l2_draw_diagonal_save			;l2_store_diagonal(x0,y0,x1,ycommon,l2_LineMinX);
  20+ E71D E1 D1 C1                             pop		bc,,de,,hl
  21+ E720 C5 E5                                push	bc,,hl
  22+ E722 54                                   ld		d,h                             ; now its bc -> he
  23+ E723 DD 7D                                ld		a,ixl
  24+ E725 CD 2C E5                             call	l2_draw_diagonal_save			;l2_store_diagonal(x0,y0,x2,ycommon,l2_LineMaxX);
  25+ E728 E1 C1                                pop		bc,,hl
  26+ E72A 50           .SaveForLoop:           ld		d,b
  27+ E72B 5C                                   ld		e,h								; save loop counters
  28+ E72C D5                                   push	de								; de = y0ycommon
  29+ E72D 21 2C E3     .GetFirstHorizontalRow:	ld		hl,l2targetArray1               ; get first row for loop
  30+ E730 78                                   ld		a,b
  31+ E731 ED 31                                add		hl,a							; hl = l2targetArray1 row b
  32+ E733 7E                                   ld		a,(hl)							;
  33+ E734 4F                                   ld		c,a								; c = col1 i.e. l2targetarray1[b]
  34+ E735 21 2C E4                             ld      hl,l2targetArray2
  35+ E738 78                                   ld      a,b
  36+ E739 ED 31                                add     hl,a
  37+ E73B              ;                        inc		h								; hl = l2targetArray2 row b if we interleave
  38+ E73B 7E                                   ld		a,(hl)
  39+ E73C 57                                   ld		d,a								; d = col2 i.e. l2targetarray2[b]
  40+ E73D 3A 24 E3     .SetColour:             ld		a,(l2linecolor)
  41+ E740 5F                                   ld		e,a								; de = to colour
  42+ E741 C5           .SavePoints:            push	bc								; bc = rowcol
  43+ E742 25                                   dec		h
  44+ E743 E5                                   push	hl								; hl = l2targetArray1[b]
  45+ E744 CD 8E E2     .DoLine:	            call	l2_draw_horz_line_to
  46+ E747 E1                                   pop		hl
  47+ E748 C1                                   pop		bc
  48+ E749 04                                   inc		b								; down a rowc
  49+ E74A D1                                   pop		de								; de = from to (and b also = current)
  50+ E74B 14                                   inc		d
  51+ E74C 7B                                   ld		a,e								; while e >= d
  52+ E74D BA                                   cp		d
  53+ E74E 30 DA                                jr 		nc,.SaveForLoop					; Is this the right point??
  54+ E750 C9                                   ret
  55+ E751
# file closed: ./Layer2Graphics/asm_l2_fill_triangle.asm
1095  E751                  INCLUDE "./Layer2Graphics/layer2_plot_circle.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle.asm
   1+ E751
   2+ E751 00 00        l2_circle_pos		DW 0
   3+ E753 00           l2_circle_colour	DB 0
   4+ E754 00           l2_circle_radius	DB 0
   5+ E755 00           l2_circle_x			DB 0
   6+ E756 00           l2_circle_y			DB 0
   7+ E757 00           l2_circle_d			DB 0
   8+ E758
   9+ E758              ; ">l2_draw_circle BC = center row col, d = radius, e = colour"
  10+ E758 7B           l2_draw_circle:     ld		a,e
  11+ E759 32 FF E7                         ld		(.PlotPixel+1),a
  12+ E75C 7A                               ld		a,d								; get radius
  13+ E75D A7                               and		a
  14+ E75E C8                               ret		z
  15+ E75F FE 01                            cp		1
  16+ E761 CA 0A E8                         jp		z,CircleSinglepixel
  17+ E764 ED 43 8E E7                      ld		(.Plot1+1),bc					; save origin into DE reg in code
  18+ E768 DD 67                            ld		ixh,a							; ixh = raidus
  19+ E76A DD 2E 00                         ld		ixl,0
  20+ E76D 26 00        .calcd:	            ld		h,0
  21+ E76F 6F                               ld		l,a
  22+ E770 29                               add		hl,hl							; hl = r * 2
  23+ E771 EB                               ex		de,hl							; de = r * 2
  24+ E772 21 03 00                         ld		hl,3
  25+ E775 A7                               and		a
  26+ E776 ED 52                            sbc		hl,de							; hl = 3 - (r * 2)
  27+ E778 44                               ld		b,h
  28+ E779 4D                               ld		c,l								; bc = 3 - (r * 2)
  29+ E77A 21 01 00     .calcdelta:         ld		hl,1
  30+ E77D 16 00                            ld		d,0
  31+ E77F DD 5D                            ld		e,ixl
  32+ E781 A7                               and		a
  33+ E782 ED 52                            sbc		hl,de
  34+ E784 11 01 00     .Setde1:            ld		de,1
  35+ E787 DD 7C        .CircleLoop:        ld		a,ixh
  36+ E789 DD BD                            cp		ixl
  37+ E78B D8                               ret		c
  38+ E78C D9           .ProcessLoop:	    exx
  39+ E78D 11 00 00     .Plot1:             ld		de,0
  40+ E790 7B                               ld		a,e
  41+ E791 DD 85                            add		a,ixl
  42+ E793 4F                               ld		c,a
  43+ E794 7A                               ld		a,d
  44+ E795 DD 84                            add		a,ixh
  45+ E797 47                               ld		b,a
  46+ E798 CD FE E7                         call	.PlotPixel			;CX+X,CY+Y
  47+ E79B 7B           .Plot2:             ld 		a,e
  48+ E79C DD 95                            sub 	ixl
  49+ E79E 4F                               ld 		c,a
  50+ E79F 7A                               ld 		a,d
  51+ E7A0 DD 84                            add 	a,ixh
  52+ E7A2 47                               ld		b,a
  53+ E7A3 CD FE E7                         call	.PlotPixel			;CX-X,CY+Y
  54+ E7A6 7B           .Plot3:             ld 		a,e
  55+ E7A7 DD 85                            add		a,ixl
  56+ E7A9 4F                               ld 		c,a
  57+ E7AA 7A                               ld 		a,d
  58+ E7AB DD 94                            sub 	ixh
  59+ E7AD 47                               ld 		b,a
  60+ E7AE CD FE E7                         call	.PlotPixel			;CX+X,CY-Y
  61+ E7B1 7B           .Plot4:             ld 		a,e
  62+ E7B2 DD 95                            sub 	ixl
  63+ E7B4 4F                               ld 		c,a
  64+ E7B5 7A                               ld 		a,d
  65+ E7B6 DD 94                            sub 	ixh
  66+ E7B8 47                               ld 		b,a
  67+ E7B9 CD FE E7                         call	.PlotPixel			;CY+X,CX-Y
  68+ E7BC 7A           .Plot5:	            ld 		a,d
  69+ E7BD DD 85                            add 	a,ixl
  70+ E7BF 47                               ld 		b,a
  71+ E7C0 7B                               ld 		a,e
  72+ E7C1 DD 84                            add 	a,ixh
  73+ E7C3 4F                               ld 		c,a
  74+ E7C4 CD FE E7                         call	.PlotPixel			;CY+X,CX+Y
  75+ E7C7 7A           .Plot6:	            ld 		a,d
  76+ E7C8 DD 95                            sub 	ixl
  77+ E7CA 47                               ld 		b,a
  78+ E7CB 7B                               ld 		a,e
  79+ E7CC DD 84                            add 	a,ixh
  80+ E7CE 4F                               ld 		c,a
  81+ E7CF CD FE E7                         call	.PlotPixel			;CY-X,CX+Y
  82+ E7D2 7A           .Plot7:	            ld 		a,d
  83+ E7D3 DD 85                            add 	a,ixl
  84+ E7D5 47                               ld 		b,a
  85+ E7D6 7B                               ld 		a,e
  86+ E7D7 DD 94                            sub 	ixh
  87+ E7D9 4F                               ld 		c,a
  88+ E7DA CD FE E7                         call	.PlotPixel			;CY+X,CX-Y
  89+ E7DD 7A           .Plot8:	            ld 		a,d
  90+ E7DE DD 95                            sub 	ixl
  91+ E7E0 47                               ld		b,a
  92+ E7E1 7B                               ld 		a,e
  93+ E7E2 DD 94                            sub 	ixh
  94+ E7E4 4F                               ld 		c,a
  95+ E7E5 CD FE E7                         call	.PlotPixel			;CX+X,CY-Y
  96+ E7E8 D9                               exx
  97+ E7E9 CB 7C        .IncrementCircle:	bit     7,h				; Check for Hl<=0
  98+ E7EB 28 03                            jr z,   .draw_circle_1
  99+ E7ED 19                               add hl,de			; Delta=Delta+D1
 100+ E7EE 18 05                            jr      .draw_circle_2		;
 101+ E7F0 09           .draw_circle_1:		add     hl,bc			; Delta=Delta+D2
 102+ E7F1 03                               inc     bc
 103+ E7F2 03                               inc     bc				; D2=D2+2
 104+ E7F3 DD 25                            dec     ixh				; Y=Y-1
 105+ E7F5 03           .draw_circle_2:		inc bc				; D2=D2+2
 106+ E7F6 03                               inc bc
 107+ E7F7 13                               inc de				; D1=D1+2
 108+ E7F8 13                               inc de
 109+ E7F9 DD 2C                            inc ixl				; X=X+1
 110+ E7FB C3 87 E7                         jp      .CircleLoop
 111+ E7FE 3E 00        .PlotPixel:         ld		a,0                  ; This was originally indirect, where as it neeed to be value
 112+ E800 D5 C5 E5                         push	de,,bc,,hl
 113+ E803 CD 19 E1                         call 	l2_plot_pixel_y_test
 114+ E806 E1 C1 D1                         pop		de,,bc,,hl
 115+ E809 C9                               ret
 116+ E80A 7B           CircleSinglepixel:  ld		a,e
 117+ E80B CD 19 E1                         call	l2_plot_pixel_y_test
 118+ E80E C9                               ret
 119+ E80F
# file closed: ./Layer2Graphics/layer2_plot_circle.asm
1096  E80F                  INCLUDE "./Layer2Graphics/layer2_plot_circle_fill.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle_fill.asm
   1+ E80F
   2+ E80F 00           l2_circle_dblx		DB 0
   3+ E810 00           l2_circle_dbly		DB 0
   4+ E811
   5+ E811              ; ">l2_draw_circle_fill BC = center row col, d = radius, e = colour"
   6+ E811 7B           l2_draw_circle_fill:    ld		a,e
   7+ E812 32 A8 E8                             ld		(.LineColour+1),a
   8+ E815 7A                                   ld		a,d								; get radius
   9+ E816 A7                                   and		a
  10+ E817 C8                                   ret		z
  11+ E818 FE 01                                cp		1
  12+ E81A CA 0A E8                             jp		z,CircleSinglepixel
  13+ E81D ED 43 47 E8                          ld		(.Line1+1),bc					; save origin into DE reg in code
  14+ E821 DD 67                                ld		ixh,a							; ixh = raidus (x)
  15+ E823 DD 2E 00                             ld		ixl,0							; ihy = y
  16+ E826 26 00        .calcd:	                ld		h,0
  17+ E828 6F                                   ld		l,a
  18+ E829 29                                   add		hl,hl							; hl = r * 2
  19+ E82A EB                                   ex		de,hl							; de = r * 2
  20+ E82B 21 03 00                             ld		hl,3
  21+ E82E A7                                   and		a
  22+ E82F ED 52                                sbc		hl,de							; hl = 3 - (r * 2)
  23+ E831 44                                   ld		b,h
  24+ E832 4D                                   ld		c,l								; bc = 3 - (r * 2)
  25+ E833 21 01 00     .calcdelta              ld		hl,1
  26+ E836 16 00                                ld		d,0
  27+ E838 DD 5D                                ld		e,ixl
  28+ E83A A7                                   and		a
  29+ E83B ED 52                                sbc		hl,de
  30+ E83D 11 01 00     .Setde1	                ld		de,1
  31+ E840 DD 7C        .CircleLoop:            ld		a,ixh
  32+ E842 DD BD                                cp		ixl
  33+ E844 D8                                   ret		c
  34+ E845 D9           .ProcessLoop:	        exx
  35+ E846 11 00 00     .Line1:                 ld		de,0
  36+ E849 7B                                   ld 		a,e
  37+ E84A DD 95                                sub 	ixl
  38+ E84C 4F                                   ld 		c,a
  39+ E84D 7A                                   ld 		a,d
  40+ E84E DD 84                                add 	a,ixh
  41+ E850 47                                   ld		b,a
  42+ E851                                      ;; TODO ADD DOUBLE X CALC
  43+ E851 D5                                   push	de
  44+ E852 DD 55                                ld		d,ixl
  45+ E854 CB 22                                sla		d
  46+ E856 CD A3 E8                             call	.PlotLine			;CX-X,CY+Y
  47+ E859 D1                                   pop		de
  48+ E85A 7B           .Line2:                 ld 		a,e
  49+ E85B DD 95                                sub		ixl
  50+ E85D 4F                                   ld 		c,a
  51+ E85E 7A                                   ld 		a,d
  52+ E85F DD 94                                sub 	ixh
  53+ E861 47                                   ld 		b,a
  54+ E862                                      ;; TODO ADD DOUBLE X CALC
  55+ E862 D5                                   push	de
  56+ E863 DD 55                                ld		d,ixl
  57+ E865 CB 22                                sla		d
  58+ E867 CD A3 E8                             call	.PlotLine			;CX-X,CY-Y
  59+ E86A D1                                   pop		de
  60+ E86B 7B           .Line3:	                ld 		a,e
  61+ E86C DD 94                                sub		ixh
  62+ E86E 4F                                   ld 		c,a
  63+ E86F 7A                                   ld 		a,d
  64+ E870 DD 85                                add 	a,ixl
  65+ E872 47                                   ld 		b,a
  66+ E873                                      ;; TODO ADD DOUBLE Y CALC
  67+ E873 D5                                   push	de
  68+ E874 DD 54                                ld		d,ixh
  69+ E876 CB 22                                sla		d
  70+ E878 CD A3 E8                             call	.PlotLine			;CX-Y,CY+x
  71+ E87B D1                                   pop		de
  72+ E87C 7B           .Line4:	                ld 		a,e
  73+ E87D DD 94                                sub		ixh
  74+ E87F 4F                                   ld 		c,a
  75+ E880 7A                                   ld 		a,d
  76+ E881 DD 95                                sub 	ixl
  77+ E883 47                                   ld 		b,a
  78+ E884                                      ;; TODO ADD DOUBLE Y CALC
  79+ E884 D5                                   push	de
  80+ E885 DD 54                                ld		d,ixh
  81+ E887 CB 22                                sla		d
  82+ E889 CD A3 E8                             call	.PlotLine			;CX-Y,CY+x
  83+ E88C D1                                   pop		de
  84+ E88D D9                                   exx
  85+ E88E CB 7C        .IncrementCircle:	    bit 7,h				; Check for Hl<=0
  86+ E890 28 03                                jr z,.draw_circle_1
  87+ E892 19                                   add hl,de			; Delta=Delta+D1
  88+ E893 18 05                                jr .draw_circle_2		;
  89+ E895 09           .draw_circle_1:		    add hl,bc			; Delta=Delta+D2
  90+ E896 03                                   inc bc
  91+ E897 03                                   inc bc				; D2=D2+2
  92+ E898 DD 25                                dec ixh				; Y=Y-1
  93+ E89A 03           .draw_circle_2:		    inc bc				; D2=D2+2
  94+ E89B 03                                   inc bc
  95+ E89C 13                                   inc de				; D1=D1+2
  96+ E89D 13                                   inc de
  97+ E89E DD 2C                                inc ixl				; X=X+1
  98+ E8A0 C3 40 E8                             jp .CircleLoop
  99+ E8A3 D5 C5 E5 F5  .PlotLine:              push	de,,bc,,hl,,af
 100+ E8A7 3E 00        .LineColour:	        ld		a,0         ; circle colur
 101+ E8A9 5F                                   ld      e,a
 102+ E8AA CD 62 E2                             call 	l2_draw_horz_line
 103+ E8AD F1 E1 C1 D1                          pop     de,,bc,,hl,,af
 104+ E8B1 C9                                   ret
 105+ E8B2
# file closed: ./Layer2Graphics/layer2_plot_circle_fill.asm
1097  E8B2                  INCLUDE "./Layer2Graphics/l2_draw_any_line.asm"
# file opened: ./Layer2Graphics/l2_draw_any_line.asm
   1+ E8B2              ; ">l2_draw_any_line, bc = y0,x0 de=y1,x1,a=color: determines if its horizontal, vertical or diagonal then hands off the work"
   2+ E8B2 08           l2_draw_any_line:       ex		af,af'
   3+ E8B3 79                                   ld		a,c
   4+ E8B4 BB                                   cp		e
   5+ E8B5 28 08                                jr		z,.HorizontalLine
   6+ E8B7 78                                   ld		a,b
   7+ E8B8 BA                                   cp		d
   8+ E8B9 28 0A                                jr		z,.VerticalLine
   9+ E8BB              ; use jp and get a free ret instruction optimisation
  10+ E8BB 08           .DiagonalLine:		    ex		af,af'			; get colour back into a
  11+ E8BC C3 0B E6                             jp		l2_draw_diagonal
  12+ E8BF
  13+ E8BF 08           .HorizontalLine:        ex		af,af'
  14+ E8C0 53                                   ld		d,e				; set d as target right pixel
  15+ E8C1 5F                                   ld		e,a				; e holds colour on this call
  16+ E8C2 C3 8E E2                             jp		l2_draw_horz_line_to
  17+ E8C5 08           .VerticalLine:          ex		af,af'
  18+ E8C6 5F                                   ld		e,a				; e holds colour on this call
  19+ E8C7 C3 0D E3                             jp		l2_draw_vert_line_to
  20+ E8CA
  21+ E8CA
# file closed: ./Layer2Graphics/l2_draw_any_line.asm
1098  E8CA                  INCLUDE "./Layer2Graphics/clearLines-LL155.asm"
# file opened: ./Layer2Graphics/clearLines-LL155.asm
   1+ E8CA              ; ClearLines (LL155)
   2+ E8CA              ;   y = 0
   3+ E8CA              ; 	XX20 = UbnkEdgeHeapSize
   4+ E8CA              ;   exit if XX20 < 4
   5+ E8CA              ;   ++y
   6+ E8CA              ;   do
   7+ E8CA              ;		X1 = XX19(Y) ;	Y1 = XX19(++Y) ;	X2 = XX19(++Y);	Y2 = XX19(++Y)
   8+ E8CA              ;   	call DrawLine (x1,y1 to x2,y2) two's compliment (we will do 0)
   9+ E8CA              ;		++y
  10+ E8CA              ;	until Y > XX20
  11+ E8CA
  12+ E8CA              clearLines:
  13+ E8CA              layer2_clearLines:
  14+ E8CA 3A F6 C2     LL155cl:                ld		a,(UbnkLineArrayLen)
  15+ E8CD 47                                   ld		b,a
  16+ E8CE 21 04 C2                             ld		hl,UbnkLineArray
  17+ E8D1 C5           clearLinesLoop:         push	bc
  18+ E8D2 7E                                   ld		a,(hl)
  19+ E8D3 23                                   inc		hl
  20+ E8D4 4F                                   ld		c,a
  21+ E8D5 7E                                   ld		a,(hl)
  22+ E8D6 23                                   inc		hl
  23+ E8D7 47                                   ld		b,a
  24+ E8D8 7E                                   ld		a,(hl)
  25+ E8D9 23                                   inc		hl
  26+ E8DA 5F                                   ld		e,a
  27+ E8DB 7E                                   ld		a,(hl)
  28+ E8DC 23                                   inc		hl
  29+ E8DD 57                                   ld		d,a
  30+ E8DE 3E E3                                ld		a,COLOUR_TRANSPARENT		; we erase here
  31+ E8E0 E5                                   push	hl
  32+ E8E1 CD B2 E8                             call    l2_draw_any_line
  33+ E8E4 E1                                   pop		hl
  34+ E8E5 C1                                   pop		bc
  35+ E8E6 10 E9                                djnz	clearLinesLoop
  36+ E8E8 C9                                   ret
  37+ E8E9
# file closed: ./Layer2Graphics/clearLines-LL155.asm
1099  E8E9                  INCLUDE "./Layer2Graphics/l2_draw_line_v2.asm"
# file opened: ./Layer2Graphics/l2_draw_line_v2.asm
   1+ E8E9              ; ******************************************************************************
   2+ E8E9              ;
   3+ E8E9              ;	Draw a pixel line from (x0,y0) defined in (COORDS) - the current plot
   4+ E8E9              ;	coordinate, to the relative distance points (x0+x,y0+y).
   5+ E8E9              ;
   6+ E8E9              ;	Design & programming by Gunther Strube,	Copyright (C) InterLogic 1995
   7+ E8E9              ;
   8+ E8E9              ;	The (COORDS+0)	pointer contains the current y coordinate, (COORDS+1) the
   9+ E8E9              ;	current x coordinate. The main program should reset the (COORDS) variables
  10+ E8E9              ;	before using line drawing.
  11+ E8E9              ;
  12+ E8E9              ;	The routine checks the range of specified coordinates which is the
  13+ E8E9              ;	boundaries of the graphics area (256x64	pixels).
  14+ E8E9              ;	If a boundary error occurs the routine exits automatically.	This may be
  15+ E8E9              ;	useful if you are trying to draw a line longer than allowed. Only the
  16+ E8E9              ;	visible part will be drawn.
  17+ E8E9              ;
  18+ E8E9              ;	The hardware graphics memory is organized as (0,0) in the top left corner.
  19+ E8E9              ;
  20+ E8E9              ;	The plot routine is	defined by an address pointer	in IX.
  21+ E8E9              ;
  22+ E8E9              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
  23+ E8E9              ;		DE =	move	relative y vertical	points (maximum +/-	255).
  24+ E8E9              ;		IX =	pointer to plot routine that uses HL = (x,y)	of plot coordinate.
  25+ E8E9              ;
  26+ E8E9              ;	OUT:	None.
  27+ E8E9              ;
  28+ E8E9              ;	Registers	used	by routine:
  29+ E8E9              ;		   N	:	B, loop counter
  30+ E8E9              ;		   i	:	line	balance variable
  31+ E8E9              ;		   x	:	H/L,	horisontal, vertical distance	variables
  32+ E8E9              ;		   y	:	H/L,	horisontal, vertical distance	variables
  33+ E8E9              ;	  (x0,y0)	:	(h,l)
  34+ E8E9              ;	  direc_x	:	d, horisontal step increment
  35+ E8E9              ;	  direc_y	:	e, vertical step increment
  36+ E8E9              ;		 ddx	:	b, horisontal step increment
  37+ E8E9              ;		 ddy	:	c, vertical step increment
  38+ E8E9              ;
  39+ E8E9              ;		DE, A work registers.
  40+ E8E9              ;
  41+ E8E9              ; The algorithm in pseudo-code:
  42+ E8E9              ;
  43+ E8E9              ;	direc_x =	SGN x: direc_y	= SGN y
  44+ E8E9              ;	x = ABS x: y =	ABS y
  45+ E8E9              ;
  46+ E8E9              ;	if x	>= y
  47+ E8E9              ;		if x+y=0 then return
  48+ E8E9              ;		H = x
  49+ E8E9              ;		L = y
  50+ E8E9              ;		ddx = direc_x
  51+ E8E9              ;		ddy = 0
  52+ E8E9              ;	else
  53+ E8E9              ;		H = y
  54+ E8E9              ;		L = x
  55+ E8E9              ;		ddx = 0
  56+ E8E9              ;		ddy = direc_y
  57+ E8E9              ;	endif
  58+ E8E9              ;
  59+ E8E9              ;	B = H
  60+ E8E9              ;	i = INT(B/2)
  61+ E8E9              ;	FOR N=B TO 1 STEP -1
  62+ E8E9              ;		i = i + L
  63+ E8E9              ;		if i	< H
  64+ E8E9              ;			ix =	ddx
  65+ E8E9              ;			iy =	ddy
  66+ E8E9              ;		else
  67+ E8E9              ;			i = i - H
  68+ E8E9              ;			ix =	direc_x
  69+ E8E9              ;			iy =	direc_y
  70+ E8E9              ;		endif
  71+ E8E9              ;		x0 =	x0 +	ix
  72+ E8E9              ;		y0 =	y0 +	iy
  73+ E8E9              ;		plot	(x0,y0)
  74+ E8E9              ;	NEXT	N
  75+ E8E9              ;
  76+ E8E9              ;
  77+ E8E9              ;	Registers	changed after return:
  78+ E8E9              ;		..BCDEHL/IXIY/af......	same
  79+ E8E9              ;		AF....../..../..bcdehl	different
  80+ E8E9              ;
  81+ E8E9 DF           line_gfx_colour db $DF
  82+ E8EA 00 00        line_gfx_coords	dw 0
  83+ E8EC              LineHLtoDE:
  84+ E8EC 7C           TestMaxY:               ld	a,h ; were h = y or l = y?
  85+ E8ED FE C0                                cp	192
  86+ E8EF 30 26                                jr	nc, exit_line		; y0	coordinate out	of range
  87+ E8F1 7A                                   ld	a,d
  88+ E8F2 FE C0                                cp	192
  89+ E8F4 30 21                                jr	nc, exit_line		; y1	coordinate out	of range
  90+ E8F6 22 EA E8                             ld	(line_gfx_coords),hl		; the starting	point is now default
  91+ E8F9 E5                                   push	hl
  92+ E8FA D5                                   push	de
  93+ E8FB 6C                                   ld	l,h				; L = x0
  94+ E8FC 62                                   ld	h,d				; H = x1
  95+ E8FD 7C           distanceX:		        ld	a,h
  96+ E8FE 95                                   sub	l
  97+ E8FF 6F                                   ld	l,a
  98+ E900 26 00                                ld	h,0
  99+ E902 30 02                                jr	nc, distanceXDone
 100+ E904 26 FF                                ld	h,-1
 101+ E906 D1           distanceXDone:          pop	de
 102+ E907 E3                                   ex	(sp),hl			; L = y0
 103+ E908 63                                   ld	h,e				; H = y1
 104+ E909 7C           distanceY:		        ld	a,h
 105+ E90A 95                                   sub	l
 106+ E90B 6F                                   ld	l,a
 107+ E90C 26 00                                ld	h,0
 108+ E90E 30 02                                jr	nc, distanceYDone
 109+ E910 26 FF                                ld	h,-1
 110+ E912 D1           distanceYDone:          pop	de
 111+ E913 EB                                   ex	de,hl			; h.dist.	= HL, v.dist. = DE
 112+ E914 CD 18 E9                             call	DrawLineRelative			; draw line...
 113+ E917 C9           exit_line:              ret
 114+ E918
 115+ E918              ; ***************************************************************************
 116+ E918              ;
 117+ E918              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
 118+ E918              ;		DE =	move	relative y vertical	points (maximum +/-	255).
 119+ E918              ;
 120+ E918              ; OUT: h - l distance in	HL
 121+ E918              ;
 122+ E918
 123+ E918 D5           DrawLineRelative:       push	de
 124+ E919 E5                                   push	hl
 125+ E91A D9                                   exx
 126+ E91B E1                                   pop	hl					; get relative	horisontal movement
 127+ E91C CD 87 E9                             call	sgn
 128+ E91F 57                                   ld	d,a					; direc_x	= SGN(x) installed d = +/-1 for horizontal update
 129+ E920 CD 94 E9                             call	absValue
 130+ E923 45                                   ld	b,l					; x = ABS(x)
 131+ E924 E1           DrawLineGetVertRelative:pop	hl					; get relative	vertical movement
 132+ E925 CD 87 E9                             call	sgn
 133+ E928 5F                                   ld	e,a					; direc_y	= SGN(y) installed  = +/-1 for vertical update
 134+ E929 CD 94 E9                             call	absValue
 135+ E92C 4D                                   ld	c,l					; y = ABS(y) so now bc = dxdy
 136+ E92D              ; so by here BC = dx dy HL in increment/decrement x y
 137+ E92D C5                                   push	bc
 138+ E92E D9                                   exx
 139+ E92F E1                                   pop	hl					; H = absolute	x dist., L = absolute y distance
 140+ E930 7C                                   ld	a,h
 141+ E931 BD                                   cp	l
 142+ E932 38 0A                                jr	c, x_smaller_y		; if	x >=	y
 143+ E934 B4           areXandYZero:           or	h					;	if x+y = 0
 144+ E935 28 4F                                jr	z, exit_draw		;		return
 145+ E937 D9           y_lessorequal_x:        exx						;	else
 146+ E938 42                                   ld	b,d					;		ddx = direc_x
 147+ E939 0E 00                                ld	c,0					;		ddy = 0
 148+ E93B D9                                   exx
 149+ E93C 18 08                                jr	init_drawloop		; else
 150+ E93E 7C           x_smaller_y:	        ld	a,h
 151+ E93F 65                                   ld	h,l					;	H = y
 152+ E940 6F                                   ld	l,a					;	L = x
 153+ E941 D9                                   exx
 154+ E942 06 00                                ld	b,0					;	ddx = 0
 155+ E944 4B                                   ld	c,e					;	ddy = direc_y
 156+ E945 D9                                   exx
 157+ E946 44           init_drawloop:	        ld	b,h
 158+ E947 4C                                   ld	c,h					; B = H
 159+ E948 CB 39                                srl	c					; i = INT(B/2)
 160+ E94A              										; FOR N=B	TO 1	STEP	-1
 161+ E94A 79           drawloop:		        ld	a,c
 162+ E94B 85                                   add	a,l
 163+ E94C 38 09                                jr	c, i_greater		;	i + L > 255  (i > H)
 164+ E94E BC                                   cp	h
 165+ E94F 30 06                                jr	nc, i_greater		;	if i	< H
 166+ E951 4F                                   ld	c,a					;		i = i + L
 167+ E952 D9                                   exx
 168+ E953 C5                                   push	bc				;		ix =	ddx:	iy =	ddy
 169+ E954 D9                                   exx
 170+ E955 18 05                                jr	check_plot			;	else
 171+ E957 94           i_greater:		        sub	h					;		i = i - H
 172+ E958 4F                                   ld	c,a
 173+ E959 D9                                   exx
 174+ E95A D5                                   push	de				;		ix =	direc_x: iy = direc_y
 175+ E95B D9                                   exx						;	endif
 176+ E95C E3           check_plot:		        ex	(sp),hl				;	preserve H,L distances on stack
 177+ E95D EB                                   ex	de,hl				;	D,E = ix,	iy
 178+ E95E 2A EA E8                             ld	hl,(line_gfx_coords)
 179+ E961 7D                                   ld	a,l
 180+ E962 83                                   add	a,e					;
 181+ E963 6F                                   ld	l,a					;	y0 =	y0 +	iy (y0 is	checked by plot)
 182+ E964 7A                                   ld	a,d
 183+ E965 3C                                   inc	a
 184+ E966 84                                   add	a,h
 185+ E967 38 04                                jr	c, check_range		;	check out	of range
 186+ E969 28 1A                                jr	z, range_error		;	Fz=1	& Fc=0 denotes	x0 <	0
 187+ E96B 18 02                                jr	plot_point
 188+ E96D 20 16        check_range:            jr	nz, range_error	;	Fz=0	& Fc=1 denotes	x0 >	255
 189+ E96F
 190+ E96F 3D           plot_point:             dec	a
 191+ E970 C5                                   push	bc
 192+ E971 F5                                   push	af
 193+ E972 47                                   ld	    b,a					;	x0 =	x0 +	ix
 194+ E973 4D                                   ld		c,l
 195+ E974 3A E9 E8                             ld		a,(line_gfx_colour)
 196+ E977 ED 43 EA E8                          ld      (line_gfx_coords),bc
 197+ E97B CD FF E0                             call	l2_plot_pixel
 197+ E97E
 198+ E97E F1                                   pop		af
 199+ E97F C1                                   pop		bc
 200+ E980 E1           plot_RET:		        pop	hl					;	restore H,L distances...
 201+ E981 10 C7                                djnz	drawloop		; NEXT N
 202+ E983 18 01                                jr	exit_draw
 203+ E985
 204+ E985 E1           range_error:	        pop	hl					; remove H,L distances...
 205+ E986 C9           exit_draw:		        ret
 206+ E987
 207+ E987
 208+ E987              ; ******************************************************************************
 209+ E987              ;
 210+ E987              ;	SGN (Signum value) of 16	bit signed integer.
 211+ E987              ;
 212+ E987              ;	IN:		HL =	integer
 213+ E987              ;	OUT:		A = result: 0,1,-1 (if zero, positive, negative)
 214+ E987              ;
 215+ E987              ;	Registers	changed after return:
 216+ E987              ;	..BCDEHL/IXIY	same
 217+ E987              ;	AF....../....	different
 218+ E987              ;
 219+ E987 7C           sgn:				    ld	a,h
 220+ E988 B5                                   or	l
 221+ E989 C8                                   ret	z				; integer	is zero, return 0...
 222+ E98A CB 7C                                bit	7,h
 223+ E98C 20 03                                jr	nz, negative_int
 224+ E98E 3E 01                                ld	a,1
 225+ E990 C9                                   ret
 226+ E991 3E FF        negative_int:		    ld	a,-1
 227+ E993 C9                                   ret
 228+ E994
 229+ E994
 230+ E994              ; ******************************************************************************
 231+ E994              ;
 232+ E994              ;	ABS (Absolute value) of 16 bit signed integer.
 233+ E994              ;
 234+ E994              ;	IN:		HL =	integer
 235+ E994              ;	OUT:		HL =	converted	integer
 236+ E994              ;
 237+ E994              ;	Registers	changed after return:
 238+ E994              ;	A.BCDE../IXIY	same
 239+ E994              ;	.F....HL/....	different
 240+ E994              ;
 241+ E994 CB 7C        absValue:			    bit	7,h
 242+ E996 C8                                   ret	z				; integer	is positive...
 243+ E997 D5                                   push	de
 244+ E998 EB                                   ex	de,hl
 245+ E999 21 00 00                             ld	hl,0
 246+ E99C BF                                   cp	a				; Fc	= 0,	may not be used...
 247+ E99D ED 52                                sbc	hl,de			; convert	negative integer
 248+ E99F D1                                   pop	de
 249+ E9A0 C9                                   ret
 250+ E9A1
# file closed: ./Layer2Graphics/l2_draw_line_v2.asm
1100  E9A1              ; Bank 56  ------------------------------------------------------------------------------------------------------------------------
1101  E9A1                  SLOT    CMDRDATAAddr
1102  E9A1                  PAGE    BankCmdrData
1103  E9A1                  ORG     CMDRDATAAddr, BankCmdrData
1104  E000                  INCLUDE "./Commander/CommanderData.asm"
# file opened: ./Commander/CommanderData.asm
   1+ E000
   2+ E000 4A 41 4D 45  defaultName		        DB	"JAMESON",0
   2+ E004 53 4F 4E 00
   3+ E008 10 0F 11 00  defaultStock	        DB $10, $0F, $11, $00, $03, $1C,$0E, $00, $00, $0A, $00, $11,$3A, $07, $09, $08, $00;
   3+ E00C 03 1C 0E 00
   3+ E010 00 0A 00 11
   3+ E014 3A 07 09 08
   3+ E018 00
   4+ E019 4A 5A 48 02  defaultSeeds	        DB $4a, $5a, $48, $02, $53, $b7
   4+ E01D 53 B7
   5+ E01F              defaultHomeX	        equ $14
   6+ E01F              defaultHomeY	        equ $AD
   7+ E01F
   8+ E01F               ; For now hard laod, later correctlt sequence gneeral vars and dma fill with 0 for a start
   9+ E01F 11 71 93     defaultCommander:       ld		de,CommanderName				;set commander name
  10+ E022 21 00 E0                             ld		hl,defaultName
  11+ E025 01 08 00                             ld		bc,8
  12+ E028 ED B0                                ldir
  13+ E02A 11 C5 93                             ld		de,GalaxySeeds
  14+ E02D 21 19 E0                             ld		hl,defaultSeeds
  15+ E030 01 08 00                             ld		bc,8
  16+ E033 ED B0                                ldir
  17+ E035 3E 14                                ld		a,defaultHomeX
  18+ E037 32 CB 93                             ld		(PresentSystemX),a
  19+ E03A 32 CD 93                             ld		(TargetPlanetX),a
  20+ E03D 3E AD                                ld		a,defaultHomeY
  21+ E03F 32 CC 93                             ld		(PresentSystemY),a
  22+ E042 32 CE 93                             ld		(TargetPlanetY),a
  23+ E045              	; testing
  24+ E045 21 7A 92                             ld		hl,IndexedWork
  25+ E048 CD 8A 97                             call	copy_galaxy_to_system
  26+ E04B CD 4A 98                             call	find_present_system
  27+ E04E CD AD 97                             call	copy_working_to_galaxy
  28+ E051 01 60 EA                             ld      bc,60000
  29+ E054 ED 43 F3 96                          ld      (Cash),bc
  30+ E058 01 00 00                             ld		bc,0
  31+ E05B ED 43 F5 96                          ld		(Cash+2), bc                    ; cash no longer big endian
  32+ E05F 3E 46                                ld		a,MaxFuelLevel
  33+ E061 32 F7 96                             ld		(Fuel),a
  34+ E064 3E 5B                                ld      a,BankGalaxyData0
  35+ E066 32 B8 93                             ld		(Galaxy),a
  36+ E069 AF                                   xor		a
  37+ E06A 21 32 97                             ld      hl,EquipmentFitted
  38+ E06D 06 1A                                ld      b, EQ_ITEM_COUNT
  39+ E06F 77           .ClearFittedLooop:      ld      (hl),a
  40+ E070 23                                   inc     hl
  41+ E071 10 FC                                djnz    .ClearFittedLooop
  42+ E073 21 3C 97                             ld      hl,EquipmentFitted+EQ_FRONT_PULSE
  43+ E076 3E FF                                ld      a,$FF
  44+ E078 77                                   ld      (hl),a
  45+ E079 32 7A 93                             ld		(VarTP),a						;The Plan/Mission
  46+ E07C AF                                   xor     a
  47+ E07D 32 F9 96                             ld		(LaserList+1),a
  48+ E080 32 FA 96                             ld		(LaserList+2),a
  49+ E083 32 FB 96                             ld		(LaserList+3),a
  50+ E086 3E 0A                                ld      a,EQ_FRONT_PULSE
  51+ E088 32 F8 96                             ld		(LaserList),a
  52+ E08B AF                                   xor     a
  53+ E08C 32 35 97                             ld		(ECMPresent),a
  54+ E08F 32 4C 97                             ld		(FuelScoopsBarrelStatus),a
  55+ E092 32 38 97                             ld		(EnergyBomb),a
  56+ E095 32 39 97                             ld		(ExtraEnergyUnit),a
  57+ E098 32 3A 97                             ld		(DockingComputer),a
  58+ E09B 32 3B 97                             ld		(GalacticHyperDrive),a
  59+ E09E 32 37 97                             ld		(EscapePod),a
  60+ E0A1 32 83 93                             ld      (FugitiveInnocentStatus),a
  61+ E0A4 32 96 93                             ld		(KillTally),a
  62+ E0A7 32 69 92                             ld      (OuterHyperCount),a
  63+ E0AA 32 68 92                             ld      (InnerHyperCount),a
  64+ E0AD 3D                                   dec		a								; now a = 255
  65+ E0AE 32 9A 93                             ld		(ForeShield),a
  66+ E0B1 32 9B 93                             ld		(AftShield),a
  67+ E0B4 32 9C 93                             ld		(PlayerEnergy),a
  68+ E0B7 3E 14                                ld		a,20
  69+ E0B9 32 FC 96                             ld		(CargoBaySize),a
  70+ E0BC CD C0 E0                             call	ZeroCargo						; Clear out cargo
  71+ E0BF                                      ; more to DO
  72+ E0BF C9                                   ret
  73+ E0C0
# file closed: ./Commander/CommanderData.asm
1105  E0C0                  INCLUDE "./Commander/zero_player_cargo.asm"
# file opened: ./Commander/zero_player_cargo.asm
   1+ E0C0              ZeroCargo:
   2+ E0C0 AF           		xor		a							;zero-out cargo, including gems.
   3+ E0C1 06 10        		ld		b,16						;all the way up to alien items
   4+ E0C3 21 FE 96     		ld		hl,CargoTonnes   			; cargo levels
   5+ E0C6              .ZeroLoop:
   6+ E0C6 77                   ld      (hl),a
   7+ E0C7 23           		inc		hl
   8+ E0C8 10 FC        		djnz	.ZeroLoop
   9+ E0CA C9           		ret
  10+ E0CB
# file closed: ./Commander/zero_player_cargo.asm
1106  E0CB              ; Bank 58  ------------------------------------------------------------------------------------------------------------------------
1107  E0CB                  SLOT    LAYER1Addr
1108  E0CB                  PAGE    BankLAYER1
1109  E0CB                  ORG     LAYER1Addr, BankLAYER1
1110  E000
1111  E000                  INCLUDE "./Layer1Graphics/layer1_attr_utils.asm"
# file opened: ./Layer1Graphics/layer1_attr_utils.asm
   1+ E000
   2+ E000 00 58        L1AttrRow00:            DW $5800                    ;Row 1    */
   3+ E002 20 58        L1AttrRow01:            DW $5820                    ;Row 2    */
   4+ E004 40 58        L1AttrRow02:            DW $5840                    ;Row 3    */
   5+ E006 60 58        L1AttrRow03:            DW $5860                    ;Row 4    */
   6+ E008 80 58        L1AttrRow04:            DW $5880                    ;Row 5    */
   7+ E00A A0 58        L1AttrRow05:            DW $58A0                    ;Row 6    */
   8+ E00C C0 58        L1AttrRow06:            DW $58C0                    ;Row 7    */
   9+ E00E E0 58        L1AttrRow07:            DW $58E0                    ;Row 8    */
  10+ E010 00 59        L1AttrRow08:            DW $5900                    ;Row 9    */
  11+ E012 20 59        L1AttrRow09:            DW $5920                    ;Row 10   */
  12+ E014 40 59        L1AttrRow10:            DW $5940                    ;Row 11   */
  13+ E016 60 59        L1AttrRow11:            DW $5960                    ;Row 12   */
  14+ E018 80 59        L1AttrRow12:            DW $5980                    ;Row 13   */
  15+ E01A A0 59        L1AttrRow13:            DW $59A0                    ;Row 14   */
  16+ E01C C0 59        L1AttrRow14:            DW $59C0                    ;Row 15   */
  17+ E01E E0 59        L1AttrRow15:            DW $59E0                    ;Row 16   */
  18+ E020 00 5A        L1AttrRow16:            DW $5A00                    ;Row 17   */
  19+ E022 20 5A        L1AttrRow17:            DW $5A20                    ;Row 18   */
  20+ E024 40 5A        L1AttrRow18:            DW $5A40                    ;Row 19   */
  21+ E026 60 5A        L1AttrRow19:            DW $5A60                    ;Row 20   */
  22+ E028 80 5A        L1AttrRow20:            DW $5A80                    ;Row 21   */
  23+ E02A A0 5A        L1AttrRow21:            DW $5AA0                    ;Row 22   */
  24+ E02C C0 5A        L1AttrRow22:            DW $5AC0                    ;Row 23   */
  25+ E02E E0 5A        L1AttrRow23:            DW $5AE0                    ;Row 23   */
  26+ E030
  27+ E030              ; "l2_hilight_row, d = row, e = colour"
  28+ E030 21 00 E0     l1_hilight_row:         ld      hl, L1AttrRow00
  29+ E033 4B                                   ld      c,e
  30+ E034 7A                                   ld      a,d
  31+ E035 CB 27                                sla     a
  32+ E037 ED 31                                add     hl,a
  33+ E039 7E                                   ld      a,(hl)
  34+ E03A 5F                                   ld      e,a
  35+ E03B 23                                   inc     hl
  36+ E03C 7E                                   ld      a,(hl)
  37+ E03D 57                                   ld      d,a
  38+ E03E EB                                   ex      hl,de
  39+ E03F 79                                   ld		a,c
  40+ E040 11 20 00                             ld		de, 32
  41+ E043 CD 17 8F                             call	memfill_dma
  42+ E046 C9                                   ret
  43+ E047
# file closed: ./Layer1Graphics/layer1_attr_utils.asm
1112  E047                  INCLUDE "./Layer1Graphics/layer1_cls.asm"
# file opened: ./Layer1Graphics/layer1_cls.asm
   1+ E047 AF           l1_cls_top:             xor     a
   2+ E048 21 00 40                             ld      hl, $4000
   3+ E04B 11 00 08                             ld      de, $0800
   4+ E04E CD 17 8F                             call    memfill_dma
   5+ E051 C9                                   ret
   6+ E052
   7+ E052 AF           l1_cls_mid:             xor     a
   8+ E053 21 00 48                             ld      hl, $4800
   9+ E056 11 00 08                             ld      de, $0800
  10+ E059 CD 17 8F                             call    memfill_dma
  11+ E05C C9                                   ret
  12+ E05D
  13+ E05D AF           l1_cls_bottom:          xor     a
  14+ E05E 21 00 50                             ld      hl, $5000
  15+ E061 11 00 08                             ld      de, $0800
  16+ E064 CD 17 8F                             call    memfill_dma
  17+ E067 C9                                   ret
  18+ E068
  19+ E068              ; Designed specifically to clear a whole character aligned line
  20+ E068 1E 00        l1_cls_line_d:          ld      e,0
  21+ E06A ED 94                                pixelad
  22+ E06C 11 00 01                             ld      de,32 * 8
  23+ E06F AF                                   xor     a
  24+ E070 CD 17 8F                             call    memfill_dma
  25+ E073 C9                                   ret
  26+ E074
  27+ E074              ; Designed specifically to clear a whole character aligned 2 lines line, used for say clearing hyperspace message
  28+ E074 1E 00        l1_cls_2_lines_d:       ld      e,0
  29+ E076 ED 94                                pixelad
  30+ E078 11 00 02                             ld      de,32 * 16
  31+ E07B AF                                   xor     a
  32+ E07C CD 17 8F                             call    memfill_dma
  33+ E07F C9                                   ret
  34+ E080
  35+ E080 AF           l1_cls:                 xor		a
  36+ E081 21 00 40     l1_cls_to_a:            ld		hl,	$4000
  37+ E084 11 00 18                             ld		de, $1800
  38+ E087 CD 17 8F                             call	memfill_dma
  39+ E08A C9                                   ret
  40+ E08B
  41+ E08B 21 00 58     l1_attr_cls_2DlinesA:   ld		hl,	$5800
  42+ E08E 1E 20                                ld      e,32
  43+ E090 ED 30                                mul
  44+ E092 19                                   add     hl,de
  45+ E093 11 40 00                             ld		de, 32 * 2
  46+ E096 CD 17 8F                             call	memfill_dma
  47+ E099 C9                                   ret
  48+ E09A
  49+ E09A
  50+ E09A AF           l1_attr_cls:            xor		a
  51+ E09B 21 00 58     l1_attr_cls_to_a:       ld		hl,	$5800
  52+ E09E 11 00 03                             ld		de, $0300
  53+ E0A1 CD 17 8F                             call	memfill_dma
  54+ E0A4 C9                                   ret
  55+ E0A5
  56+ E0A5 01 FE FE     l1_set_border:          ld	    bc, 0xFEFE
  57+ E0A8 ED 79                                out		(c),a
  58+ E0AA C9                                   ret
# file closed: ./Layer1Graphics/layer1_cls.asm
1113  E0AB                  INCLUDE "./Layer1Graphics/layer1_print_at.asm"
# file opened: ./Layer1Graphics/layer1_print_at.asm
   1+ E0AB              ; "l1 print char a = character, de = Ypixel Xchar of print"
   2+ E0AB D5 E5        l1_print_char:          push	de,,hl
   3+ E0AD ED 94                                pixelad								; hl = address of de
   4+ E0AF E5                                   push	hl							; save hl for loop
   5+ E0B0 26 00                                ld		h,0
   6+ E0B2 6F                                   ld		l,a
   7+ E0B3 29                                   add		hl,hl						; * 2
   8+ E0B4 29                                   add		hl,hl						; * 4
   9+ E0B5 29                                   add		hl,hl						; * 8 to get byte address
  10+ E0B6 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
  11+ E0BA EB                                   ex		de,hl						; save address into de
  12+ E0BB E1                                   pop		hl							; get back hl for loop
  13+ E0BC 06 08                                ld		b,8							; do 8 rows
  14+ E0BE 1A           .PrintCharLoop:         ld		a,(de)						; row byte
  15+ E0BF 13                                   inc		de							; next byte
  16+ E0C0 77                                   ld		(hl),a						; poke to screen
  17+ E0C1 ED 93                                pixeldn								; Down 1 row
  18+ E0C3 10 F9                                djnz	.PrintCharLoop				; loop for 8 bytes
  19+ E0C5 E1 D1                                pop		de,,hl					    ; restore hl
  20+ E0C7 C9                                   ret
  21+ E0C8
  22+ E0C8              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  23+ E0C8              ; now skips ascii code < 32 but moves on cursor by 1 char
  24+ E0C8              l1_print_at:
  25+ E0C8 7E           .PrintLoop:             ld		a,(hl)
  26+ E0C9 FE 00                                cp		0
  27+ E0CB C8                                   ret		z
  28+ E0CC                                      CallIfAGTENusng " ", l1_print_char
  28+ E0CC FE 20       >                        cp      " "
  28+ E0CE D4 AB E0    >                        call	nc,l1_print_char
  29+ E0D1 23                                   inc		hl							; move 1 message character right
  30+ E0D2 7B                                   ld		a,e
  31+ E0D3 C6 08                                add		a,8
  32+ E0D5 5F                                   ld		e,a							; move 1 screen character right
  33+ E0D6 18 F0                                jr		.PrintLoop
  34+ E0D8              .Clearstackandfinish:   ;pop		de                      ; TODO LOOOKS TO BE A ROGUE POPDE
  35+ E0D8 C9                                   ret
  36+ E0D9
  37+ E0D9              ;l1_print_at_wrap:
  38+ E0D9              ;; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  39+ E0D9              ;	ld      iyh,e
  40+ E0D9              ;.PrintLoop:
  41+ E0D9              ;	ld		a,(hl)
  42+ E0D9              ;	cp		0
  43+ E0D9              ;	ret		z
  44+ E0D9              ;.CountWordCharLen
  45+ E0D9              ;; Need to change to word wrap, so it will loop through string as before
  46+ E0D9              ;; but read up until a null or space, take the character count * 8 for pixels
  47+ E0D9              ;; if that is > 238 then force a premature line wrap
  48+ E0D9              ;
  49+ E0D9              ;
  50+ E0D9              ;    push    iy
  51+ E0D9              ;    call	l1_print_char
  52+ E0D9              ;    pop     iy
  53+ E0D9              ;	inc		hl							; move 1 message character right
  54+ E0D9              ;	ld		a,e
  55+ E0D9              ;    cp      238
  56+ E0D9              ;    jr      nc,.NextLine
  57+ E0D9              ;	add		a,8
  58+ E0D9              ;	ld		e,a							; move 1 screen character right
  59+ E0D9              ;	jr		.PrintLoop
  60+ E0D9              ;.Clearstackandfinish:
  61+ E0D9              ;	pop		de
  62+ E0D9              ;	ret
  63+ E0D9              ;.NextLine:
  64+ E0D9              ;    ld      a,(hl)
  65+ E0D9              ;    cp      " "
  66+ E0D9              ;    ld      e,iyh
  67+ E0D9              ;    ld      a,d
  68+ E0D9              ;    add     a,8
  69+ E0D9              ;    ld      d,a
  70+ E0D9              ;    jr		.PrintLoop
  71+ E0D9
  72+ E0D9              ; Counts next word at hl, uses e and forces a wrap if it would over flow puts value in c
  73+ E0D9 E5           L1LenWordAtHL:          push    hl
  74+ E0DA D5                                   push    de
  75+ E0DB 7E           .CountLoop:             ld      a,(hl)
  76+ E0DC FE 00                                cp      0
  77+ E0DE 28 0F                                jr      z,.CountDone
  78+ E0E0 FE 20                                cp      32
  79+ E0E2 28 0B                                jr      z,.CountDone
  80+ E0E4 7B                                   ld      a,e
  81+ E0E5 C6 08                                add     a,8
  82+ E0E7 5F                                   ld      e,a
  83+ E0E8 FE EE                                cp      238
  84+ E0EA 30 07                                jr      nc,.TooLong
  85+ E0EC 23                                   inc     hl
  86+ E0ED 18 EC                                jr      .CountLoop
  87+ E0EF D1           .CountDone:             pop     de
  88+ E0F0 E1                                   pop     hl
  89+ E0F1 AF                                   xor     a
  90+ E0F2 C9                                   ret
  91+ E0F3 D1           .TooLong                pop     de
  92+ E0F4 E1                                   pop     hl
  93+ E0F5 3E FF                                ld      a,$FF
  94+ E0F7 C9                                   ret
  95+ E0F8
  96+ E0F8 7E           L1PrintWordAtHL:        ld      a,(hl)
  97+ E0F9 FE 00                                cp      0
  98+ E0FB C8                                   ret     z
  99+ E0FC FE 20                                cp      32
 100+ E0FE 28 0F                                jr      z,.ItsASpace
 101+ E100 FD E5                                push    iy
 102+ E102 CD AB E0                             call	l1_print_char
 103+ E105 FD E1                                pop     iy
 104+ E107 7B                                   ld      a,e
 105+ E108 C6 08                                add     a,8
 106+ E10A 5F                                   ld      e,a
 107+ E10B 23                                   inc     hl
 108+ E10C C3 F8 E0                             jp      L1PrintWordAtHL
 109+ E10F 23           .ItsASpace:             inc     hl      ;  Just a bodge for now
 110+ E110 7B                                   ld      a,e
 111+ E111 C6 08                                add     a,8
 112+ E113 5F                                   ld      e,a
 113+ E114 C9                                   ret
 114+ E115
 115+ E115
 116+ E115              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 117+ E115              ; Now has full word level wrapping
 118+ E115 FD 63        l1_print_at_wrap:       ld      iyh,e
 119+ E117 7E           .PrintLoop:             ld		a,(hl)
 120+ E118 FE 00                                cp		0
 121+ E11A C8                                   ret		z
 122+ E11B CD D9 E0     .CountWordCharLen:      call    L1LenWordAtHL
 123+ E11E FE FF                                cp      $FF
 124+ E120 28 06                                jr      z,.WrapNextLine
 125+ E122 CD F8 E0     .NotTooLong:            call    L1PrintWordAtHL
 126+ E125              ; Need to change to word wrap, so it will loop through string as before
 127+ E125              ; but read up until a null or space, take the character count * 8 for pixels
 128+ E125              ; if that is > 238 then force a premature line wrap
 129+ E125 18 F0                                jr		.PrintLoop
 130+ E127              .Clearstackandfinish:   ;op		de
 131+ E127 C9                                   ret
 132+ E128              .WrapNextLine:
 133+ E128 FD 5C        .NextLine:              ld      e,iyh
 134+ E12A 7A                                   ld      a,d
 135+ E12B C6 08                                add     a,8
 136+ E12D 57                                   ld      d,a
 137+ E12E 18 E7                                jr		.PrintLoop
 138+ E130
 139+ E130
# file closed: ./Layer1Graphics/layer1_print_at.asm
1114  E130              ; Bank 59  ------------------------------------------------------------------------------------------------------------------------
1115  E130              ; In the first copy of the banks the "Non number" labels exist. They will map directly in other banks
1116  E130              ; as the is aligned and data tables are after that
1117  E130              ; need to make the ship index tables same size in each to simplify further
1118  E130                  SLOT    ShipModelsAddr
1119  E130                  PAGE    BankShipModels1
1120  E130              	ORG     ShipModelsAddr, BankShipModels1
1121  E000                  INCLUDE "./Data/ShipModelMacros.asm"
# file opened: ./Data/ShipModelMacros.asm
   1+ E000              MShipBankTable          MACRO
   2+ E000 ~                                    DW      BankShipModels1
   3+ E000 ~                                    DW      BankShipModels2
   4+ E000 ~                                    DW      BankShipModels3
   5+ E000 ~                                    DW      BankShipModels4
   6+ E000                                      ENDM
   7+ E000              ; For ship number A fetch
   8+ E000              ;           the adjusted ship number in B , C = original number
   9+ E000              ;           bank number in A for the respective ship based on the ship table
  10+ E000              MGetShipBankId:         MACRO   banktable
  11+ E000 ~                                    ld      b,0
  12+ E000 ~                                    ld      c,a                                 ; c= original ship id
  13+ E000 ~            .ShiftLoop:             srl     a
  14+ E000 ~                                    srl     a
  15+ E000 ~                                    srl     a
  16+ E000 ~                                    srl     a                                   ; divide by 16
  17+ E000 ~                                    ld      b,a                                 ; b = bank nbr
  18+ E000 ~                                    ld      a,c
  19+ E000 ~                                    ld      d,b
  20+ E000 ~                                    ld      e,16
  21+ E000 ~                                    mul                                         ; de = 16 * bank number (max is about 15 banks)
  22+ E000 ~                                    sub     e                                   ; a= actual model id now
  23+ E000 ~            .SelectedBank:          ld      d,b                                 ; save current bank number
  24+ E000 ~                                    ld      b,a                                 ; b = adjusted ship nbr
  25+ E000 ~                                    ld      a,d                                 ; a = bank number
  26+ E000 ~            ;.. Now b = bank and a = adjusted ship nbr
  27+ E000 ~                                    ld      hl,banktable                        ; a= bank index
  28+ E000 ~                                    add     hl,a
  29+ E000 ~                                    add     hl,a
  30+ E000 ~                                    ld      a,(hl)                              ; a = actual bank now
  31+ E000 ~                                    ClearCarryFlag
  32+ E000 ~                                    ret
  33+ E000                                      ENDM
  34+ E000
  35+ E000              McopyVertsToUniverse:   MACRO
  36+ E000 ~                                    ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
  37+ E000 ~                                    ld          de,UBnkHullVerticies
  38+ E000 ~                                    ld          b,0
  39+ E000 ~                                    ld			a,(VertexCtX6Addr)
  40+ E000 ~                                    ld          c,a
  41+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  42+ E000 ~                                    call        memcopy_dma
  43+ E000 ~                                    ret
  44+ E000                                      ENDM
  45+ E000
  46+ E000              McopyEdgesToUniverse:   MACRO
  47+ E000 ~                                    ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
  48+ E000 ~                                    ld          de,UBnkHullEdges
  49+ E000 ~                                    ld          b,0
  50+ E000 ~                                    ld			a,(LineX4Addr)
  51+ E000 ~                                    ld          c,a
  52+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  53+ E000 ~                                    call        memcopy_dma
  54+ E000 ~                                    ret
  55+ E000                                      ENDM
  56+ E000
  57+ E000              McopyNormsToUniverse:   MACRO
  58+ E000 ~                                    ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
  59+ E000 ~                                    ld          de,UBnkHullNormals
  60+ E000 ~                                    ld          b,0
  61+ E000 ~                                    ld          a,(FaceCtX4Addr)
  62+ E000 ~                                    ld          c,a
  63+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  64+ E000 ~                                    call        memcopy_dma
  65+ E000 ~                                    ret
  66+ E000                                      ENDM
  67+ E000
  68+ E000              ; Passes in ship nbr in A and bank is part of MACRO
  69+ E000              MCopyShipToUniverse:    MACRO       banklabel
  70+ E000 ~                                    ld          hl,UBnkShipModelBank
  71+ E000 ~                                    ld          (hl),banklabel
  72+ E000 ~                                    ld          (UBnkShipModelNbr),a
  73+ E000 ~            .GetHullDataLength:     ld          hl,ShipModelSizeTable
  74+ E000 ~                                    add         hl,a
  75+ E000 ~                                    add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
  76+ E000 ~                                    ld          c,(hl)
  77+ E000 ~                                    inc         hl
  78+ E000 ~                                    ld          b,(hl)                      ; bc now equals length of data set
  79+ E000 ~            .GetHullDataAddress:    ld          hl,ShipModelTable
  80+ E000 ~                                    add         hl,a
  81+ E000 ~                                    add         hl,a                        ; now hl = address of ship data value
  82+ E000 ~                                    ld          a,(hl)
  83+ E000 ~                                    inc         hl
  84+ E000 ~                                    ld          h,(hl)
  85+ E000 ~                                    ld          l,a                         ; now hl = address of ship hull data
  86+ E000 ~                                    ld          de,UBnkHullCopy             ; Universe bank
  87+ E000 ~                                    ld          bc,ShipDataLength
  88+ E000 ~                                    ldir
  89+ E000 ~                                    call        CopyVertsToUniv
  90+ E000 ~                                    call        CopyEdgesToUniv
  91+ E000 ~                                    call        CopyNormsToUniv
  92+ E000 ~                                    ret
  93+ E000                                      ENDM
  94+ E000
  95+ E000              MCopyBodyToUniverse:    MACRO       copyRoutine
  96+ E000 ~                                    ld          a,13
  97+ E000 ~                                    call        copyRoutine
  98+ E000 ~                                    ret
  99+ E000                                      ENDM
 100+ E000
 101+ E000
 102+ E000              MCopyShipIdToUniverse:  MACRO
 103+ E000 ~                                    call        GetShipModelId
 104+ E000 ~                                    MMUSelectShipBankA
 105+ E000 ~                                    ld          a,b
 106+ E000 ~                                    jp          CopyShipToUniverse
 107+ E000                                      ENDM
# file closed: ./Data/ShipModelMacros.asm
1122  E000                  INCLUDE "./Data/ShipBank1Label.asm"
# file opened: ./Data/ShipBank1Label.asm
   1+ E000 53 68 69 70  ShipBank1Label:         DB  "ShipBank1      "
   1+ E004 42 61 6E 6B
   1+ E008 31 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank1Label.asm
1123  E00F              GetShipBankId:
1124  E00F              GetShipBank1Id:        MGetShipBankId ShipBankTable
1124  E00F 06 00       >                        ld      b,0
1124  E011 4F          >                        ld      c,a                                 ; c= original ship id
1124  E012 CB 3F       >.ShiftLoop:             srl     a
1124  E014 CB 3F       >                        srl     a
1124  E016 CB 3F       >                        srl     a
1124  E018 CB 3F       >                        srl     a                                   ; divide by 16
1124  E01A 47          >                        ld      b,a                                 ; b = bank nbr
1124  E01B 79          >                        ld      a,c
1124  E01C 50          >                        ld      d,b
1124  E01D 1E 10       >                        ld      e,16
1124  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
1124  E021 93          >                        sub     e                                   ; a= actual model id now
1124  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
1124  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
1124  E024 7A          >                        ld      a,d                                 ; a = bank number
1124  E025             >;.. Now b = bank and a = adjusted ship nbr
1124  E025 21 62 E0    >                        ld      hl,ShipBankTable                        ; a= bank index
1124  E028 ED 31       >                        add     hl,a
1124  E02A ED 31       >                        add     hl,a
1124  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
1124  E02D             >                        ClearCarryFlag
1124  E02D B7          >                    or a
1124  E02E C9          >                        ret
1125  E02F              CopyVertsToUniv:
1126  E02F              CopyVertsToUniv1:       McopyVertsToUniverse
1126  E02F 2A 18 C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
1126  E032 11 1C C3    >                        ld          de,UBnkHullVerticies
1126  E035 06 00       >                        ld          b,0
1126  E037 3A 0C C3    >                        ld			a,(VertexCtX6Addr)
1126  E03A 4F          >                        ld          c,a
1126  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1126  E03C CD 3D 8F    >                        call        memcopy_dma
1126  E03F C9          >                        ret
1127  E040              CopyEdgesToUniv:
1128  E040              CopyEdgesToUniv1:       McopyEdgesToUniverse
1128  E040 2A 07 C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
1128  E043 11 48 C4    >                        ld          de,UBnkHullEdges
1128  E046 06 00       >                        ld          b,0
1128  E048 3A 09 C3    >                        ld			a,(LineX4Addr)
1128  E04B 4F          >                        ld          c,a
1128  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1128  E04D CD 3D 8F    >                        call        memcopy_dma
1128  E050 C9          >                        ret
1129  E051              CopyNormsToUniv:
1130  E051              CopyNormsToUniv1:       McopyNormsToUniverse
1130  E051 2A 14 C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
1130  E054 11 F8 C8    >                        ld          de,UBnkHullNormals
1130  E057 06 00       >                        ld          b,0
1130  E059 3A 10 C3    >                        ld          a,(FaceCtX4Addr)
1130  E05C 4F          >                        ld          c,a
1130  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1130  E05E CD 3D 8F    >                        call        memcopy_dma
1130  E061 C9          >                        ret
1131  E062              ShipBankTable:
1132  E062              ShipBankTable1:         MShipBankTable
1132  E062 3B 00       >                        DW      BankShipModels1
1132  E064 43 00       >                        DW      BankShipModels2
1132  E066 44 00       >                        DW      BankShipModels3
1132  E068 45 00       >                        DW      BankShipModels4
1133  E06A              CopyShipToUniverse:
1134  E06A              CopyShipToUniverse1     MCopyShipToUniverse     BankShipModels1
1134  E06A 21 02 C3    >                        ld          hl,UBnkShipModelBank
1134  E06D 36 3B       >                        ld          (hl),BankShipModels1
1134  E06F 32 03 C3    >                        ld          (UBnkShipModelNbr),a
1134  E072 21 1F E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
1134  E075 ED 31       >                        add         hl,a
1134  E077 ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
1134  E079 4E          >                        ld          c,(hl)
1134  E07A 23          >                        inc         hl
1134  E07B 46          >                        ld          b,(hl)                      ; bc now equals length of data set
1134  E07C 21 9F E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
1134  E07F ED 31       >                        add         hl,a
1134  E081 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
1134  E083 7E          >                        ld          a,(hl)
1134  E084 23          >                        inc         hl
1134  E085 66          >                        ld          h,(hl)
1134  E086 6F          >                        ld          l,a                         ; now hl = address of ship hull data
1134  E087 11 04 C3    >                        ld          de,UBnkHullCopy             ; Universe bank
1134  E08A 01 18 00    >                        ld          bc,ShipDataLength
1134  E08D ED B0       >                        ldir
1134  E08F CD 2F E0    >                        call        CopyVertsToUniv
1134  E092 CD 40 E0    >                        call        CopyEdgesToUniv
1134  E095 CD 51 E0    >                        call        CopyNormsToUniv
1134  E098 C9          >                        ret
1135  E099              CopyBodyToUniverse:
1136  E099              CopyBodyToUniverse1:    MCopyBodyToUniverse     CopyShipToUniverse1
1136  E099 3E 0D       >                        ld          a,13
1136  E09B CD 6A E0    >                        call        CopyShipToUniverse1
1136  E09E C9          >                        ret
1137  E09F                  INCLUDE "./Data/ShipModelMetaData1.asm"
# file opened: ./Data/ShipModelMetaData1.asm
   1+ E09F              ShipModelTable:
   2+ E09F 3F E1        ShipModelTable1:         DW Adder                                   ;00
   3+ E0A1 73 E2                                 DW Anaconda                                ;01
   4+ E0A3 79 E3                                 DW Asp_Mk_2                                ;02
   5+ E0A5 A3 E4                                 DW Asteroid                                ;03
   6+ E0A7 7D E5                                 DW Boa                                     ;04
   7+ E0A9 73 E6                                 DW Boulder                                 ;05
   8+ E0AB 19 E7                                 DW Bushmaster                              ;06
   9+ E0AD E9 E7                                 DW CargoType5                              ;07
  10+ E0AF 95 E8                                 DW Chameleon                               ;08
  11+ E0B1 C1 E9                                 DW CobraMk3                                ;09
  12+ E0B3 4D EB                                 DW Cobra_Mk_1                              ;10
  13+ E0B5 17 EC                                 DW Cobra_Mk_3_P                            ;11
  14+ E0B7 A3 ED                                 DW Constrictor                             ;12
  15+ E0B9 A9 EE                                 DW Coriolis                                ;13
  16+ E0BB C9 EF                                 DW Cougar                                  ;14
  17+ E0BD CF F0                                 DW Dodo                                    ;15
  18+ E0BF              ShipVertexTable:
  19+ E0BF 57 E1        ShipVertexTable1:        DW AdderVertices
  20+ E0C1 8B E2                                 DW AnacondaVertices
  21+ E0C3 91 E3                                 DW Asp_Mk_2Vertices
  22+ E0C5 BB E4                                 DW AsteroidVertices
  23+ E0C7 95 E5                                 DW BoaVertices
  24+ E0C9 8B E6                                 DW BoulderVertices
  25+ E0CB 31 E7                                 DW BushmasterVertices
  26+ E0CD 01 E8                                 DW CargoType5Vertices
  27+ E0CF AD E8                                 DW ChameleonVertices
  28+ E0D1 D9 E9                                 DW CobraMk3Vertices
  29+ E0D3 65 EB                                 DW Cobra_Mk_1Vertices
  30+ E0D5 2F EC                                 DW Cobra_Mk_3_PVertices
  31+ E0D7 BB ED                                 DW ConstrictorVertices
  32+ E0D9 C1 EE                                 DW CoriolisVertices
  33+ E0DB E1 EF                                 DW CougarVertices
  34+ E0DD E7 F0                                 DW DodoVertices
  35+ E0DF              ShipEdgeTable:
  36+ E0DF C3 E1        ShipEdgeTable1:          DW AdderEdges
  37+ E0E1 E5 E2                                 DW AnacondaEdges
  38+ E0E3 03 E4                                 DW Asp_Mk_2Edges
  39+ E0E5 F1 E4                                 DW AsteroidEdges
  40+ E0E7 E3 E5                                 DW BoaEdges
  41+ E0E9 B5 E6                                 DW BoulderEdges
  42+ E0EB 79 E7                                 DW BushmasterEdges
  43+ E0ED 3D E8                                 DW CargoType5Edges
  44+ E0EF 19 E9                                 DW ChameleonEdges
  45+ E0F1 81 EA                                 DW CobraMk3Edges
  46+ E0F3 A7 EB                                 DW Cobra_Mk_1Edges
  47+ E0F5 D7 EC                                 DW Cobra_Mk_3_PEdges
  48+ E0F7 21 EE                                 DW ConstrictorEdges
  49+ E0F9 21 EF                                 DW CoriolisEdges
  50+ E0FB 53 F0                                 DW CougarEdges
  51+ E0FD 77 F1                                 DW DodoEdges
  52+ E0FF              ShipNormalTable:
  53+ E0FF 37 E2        ShipNormalTable1:        DW AdderNormals
  54+ E101 49 E3                                 DW AnacondaNormals
  55+ E103 73 E4                                 DW Asp_Mk_2Normals
  56+ E105 45 E5                                 DW AsteroidNormals
  57+ E107 43 E6                                 DW BoaNormals
  58+ E109 F1 E6                                 DW BoulderNormals
  59+ E10B C5 E7                                 DW BushmasterNormals
  60+ E10D 79 E8                                 DW CargoType5Normals
  61+ E10F 8D E9                                 DW ChameleonNormals
  62+ E111 19 EB                                 DW CobraMk3Normals
  63+ E113 EF EB                                 DW Cobra_Mk_1Normals
  64+ E115 6F ED                                 DW Cobra_Mk_3_PNormals
  65+ E117 81 EE                                 DW ConstrictorNormals
  66+ E119 91 EF                                 DW CoriolisNormals
  67+ E11B B7 F0                                 DW CougarNormals
  68+ E11D FF F1                                 DW DodoNormals
  69+ E11F              ShipModelSizeTable:
  70+ E11F 34 01        ShipModelSizeTable1:     DW AdderLen
  71+ E121 06 01                                 DW AnacondaLen
  72+ E123 2A 01                                 DW Asp_Mk_2Len
  73+ E125 DA 00                                 DW AsteroidLen
  74+ E127 F6 00                                 DW BoaLen
  75+ E129 A6 00                                 DW BoulderLen
  76+ E12B D0 00                                 DW BushmasterLen
  77+ E12D AC 00                                 DW CargoType5Len
  78+ E12F 2C 01                                 DW ChameleonLen
  79+ E131 8C 01                                 DW CobraMk3Len
  80+ E133 CA 00                                 DW Cobra_Mk_1Len
  81+ E135 8C 01                                 DW Cobra_Mk_3_PLen
  82+ E137 06 01                                 DW ConstrictorLen
  83+ E139 20 01                                 DW CoriolisLen
  84+ E13B 06 01                                 DW CougarLen
  85+ E13D 60 01                                 DW DodoLen
  86+ E13F
  87+ E13F                                      include "Data/Ships/Adder.asm"
# file opened: ./Data/Ships/Adder.asm
   1++E13F 00 09 C4     Adder:	                DB $00, $09, $C4
   2++E142 C3 E1                                DW AdderEdges
   3++E144 74                                   DB AdderEdgesSize
   4++E145 00 16                                DB $00, $16
   5++E147 6C                                   DB AdderVertSize
   6++E148 1D                                   DB AdderEdgesCnt
   7++E149 00 28                                DB $00, $28
   8++E14B 3C                                   DB AdderNormalsSize
   9++E14C 17 48 18                             DB $17, $48, $18
  10++E14F 37 E2                                DW AdderNormals
  11++E151 02 21                                DB $02, $21
  12++E153 57 E1                                DW AdderVertices
  13++E155 00 00                                DB 0,0                      ; Type and Tactics
  14++E157 12 00 28 9F  AdderVertices:	        DB $12, $00, $28, $9F, $01, $BC
  14++E15B 01 BC
  15++E15D 12 00 28 1F                          DB $12, $00, $28, $1F, $01, $23
  15++E161 01 23
  16++E163 1E 00 18 3F                          DB $1E, $00, $18, $3F, $23, $45
  16++E167 23 45
  17++E169 1E 00 28 3F                          DB $1E, $00, $28, $3F, $45, $66
  17++E16D 45 66
  18++E16F 12 07 28 7F                          DB $12, $07, $28, $7F, $56, $7E
  18++E173 56 7E
  19++E175 12 07 28 FF                          DB $12, $07, $28, $FF, $78, $AE
  19++E179 78 AE
  20++E17B 1E 00 28 BF                          DB $1E, $00, $28, $BF, $89, $AA
  20++E17F 89 AA
  21++E181 1E 00 18 BF                          DB $1E, $00, $18, $BF, $9A, $BC
  21++E185 9A BC
  22++E187 12 07 28 BF                          DB $12, $07, $28, $BF, $78, $9D
  22++E18B 78 9D
  23++E18D 12 07 28 3F                          DB $12, $07, $28, $3F, $46, $7D
  23++E191 46 7D
  24++E193 12 07 0D 9F                          DB $12, $07, $0D, $9F, $09, $BD
  24++E197 09 BD
  25++E199 12 07 0D 1F                          DB $12, $07, $0D, $1F, $02, $4D
  25++E19D 02 4D
  26++E19F 12 07 0D DF                          DB $12, $07, $0D, $DF, $1A, $CE
  26++E1A3 1A CE
  27++E1A5 12 07 0D 5F                          DB $12, $07, $0D, $5F, $13, $5E
  27++E1A9 13 5E
  28++E1AB 0B 03 1D 85                          DB $0B, $03, $1D, $85, $00, $00
  28++E1AF 00 00
  29++E1B1 0B 03 1D 05                          DB $0B, $03, $1D, $05, $00, $00
  29++E1B5 00 00
  30++E1B7 0B 04 18 04                          DB $0B, $04, $18, $04, $00, $00
  30++E1BB 00 00
  31++E1BD 0B 04 18 84                          DB $0B, $04, $18, $84, $00, $00
  31++E1C1 00 00
  32++E1C3              AdderVertSize:          equ $ - AdderVertices
  33++E1C3 1F 01 00 04  AdderEdges:	            DB $1F, $01, $00, $04
  34++E1C7 07 23 04 08                          DB $07, $23, $04, $08
  35++E1CB 1F 45 08 0C                          DB $1F, $45, $08, $0C
  36++E1CF 1F 56 0C 10                          DB $1F, $56, $0C, $10
  37++E1D3 1F 7E 10 14                          DB $1F, $7E, $10, $14
  38++E1D7 1F 8A 14 18                          DB $1F, $8A, $14, $18
  39++E1DB 1F 9A 18 1C                          DB $1F, $9A, $18, $1C
  40++E1DF 07 BC 1C 00                          DB $07, $BC, $1C, $00
  41++E1E3 1F 46 0C 24                          DB $1F, $46, $0C, $24
  42++E1E7 1F 7D 24 20                          DB $1F, $7D, $24, $20
  43++E1EB 1F 89 20 18                          DB $1F, $89, $20, $18
  44++E1EF 1F 0B 00 28                          DB $1F, $0B, $00, $28
  45++E1F3 1F 9B 1C 28                          DB $1F, $9B, $1C, $28
  46++E1F7 1F 02 04 2C                          DB $1F, $02, $04, $2C
  47++E1FB 1F 24 08 2C                          DB $1F, $24, $08, $2C
  48++E1FF 1F 1C 00 30                          DB $1F, $1C, $00, $30
  49++E203 1F AC 1C 30                          DB $1F, $AC, $1C, $30
  50++E207 1F 13 04 34                          DB $1F, $13, $04, $34
  51++E20B 1F 35 08 34                          DB $1F, $35, $08, $34
  52++E20F 1F 0D 28 2C                          DB $1F, $0D, $28, $2C
  53++E213 1F 1E 30 34                          DB $1F, $1E, $30, $34
  54++E217 1F 9D 20 28                          DB $1F, $9D, $20, $28
  55++E21B 1F 4D 24 2C                          DB $1F, $4D, $24, $2C
  56++E21F 1F AE 14 30                          DB $1F, $AE, $14, $30
  57++E223 1F 5E 10 34                          DB $1F, $5E, $10, $34
  58++E227 05 00 38 3C                          DB $05, $00, $38, $3C
  59++E22B 03 00 3C 40                          DB $03, $00, $3C, $40
  60++E22F 04 00 40 44                          DB $04, $00, $40, $44
  61++E233 03 00 44 38                          DB $03, $00, $44, $38
  62++E237              AdderEdgesSize:         equ $ - AdderEdges
  63++E237              AdderEdgesCnt:          equ AdderEdgesSize/4
  64++E237 1F 00 27 0A  AdderNormals:	        DB $1F, $00, $27, $0A
  65++E23B 5F 00 27 0A                          DB $5F, $00, $27, $0A
  66++E23F 1F 45 32 0D                          DB $1F, $45, $32, $0D
  67++E243 5F 45 32 0D                          DB $5F, $45, $32, $0D
  68++E247 1F 1E 34 00                          DB $1F, $1E, $34, $00
  69++E24B 5F 1E 34 00                          DB $5F, $1E, $34, $00
  70++E24F 3F 00 00 A0                          DB $3F, $00, $00, $A0
  71++E253 3F 00 00 A0                          DB $3F, $00, $00, $A0
  72++E257 3F 00 00 A0                          DB $3F, $00, $00, $A0
  73++E25B 9F 1E 34 00                          DB $9F, $1E, $34, $00
  74++E25F DF 1E 34 00                          DB $DF, $1E, $34, $00
  75++E263 9F 45 32 0D                          DB $9F, $45, $32, $0D
  76++E267 DF 45 32 0D                          DB $DF, $45, $32, $0D
  77++E26B 1F 00 1C 00                          DB $1F, $00, $1C, $00
  78++E26F 5F 00 1C 00                          DB $5F, $00, $1C, $00
  79++E273
  80++E273              AdderNormalsSize:       equ $ - AdderNormals
  81++E273              AdderLen:                equ $ - Adder
  82++E273
# file closed: ./Data/Ships/Adder.asm
  88+ E273                                      include "Data/Ships/Anaconda.asm"
# file opened: ./Data/Ships/Anaconda.asm
   1++E273 07 27 10     Anaconda:	            DB $07, $27, $10
   2++E276 E5 E2                                DW AnacondaEdges
   3++E278 64                                   DB AnacondaEdgesSize
   4++E279 30 2E                                DB $30, $2E
   5++E27B 5A                                   DB AnacondaVertSize
   6++E27C 19                                   DB AnacondaEdgesCnt
   7++E27D 00 00                                DB $00, $00
   8++E27F 30                                   DB AnacondaNormalsSize
   9++E280 24 FC 0E                             DB $24, $FC, $0E
  10++E283 49 E3                                DW AnacondaNormals
  11++E285 01 3F                                DB $01, $3F
  12++E287 8B E2                                DW AnacondaVertices
  13++E289 00 00                                DB 0,0                      ; Type and Tactics
  14++E28B 00 07 3A 3E  AnacondaVertices:	    DB $00, $07, $3A, $3E, $01, $55
  14++E28F 01 55
  15++E291 2B 0D 25 FE                          DB $2B, $0D, $25, $FE, $01, $22
  15++E295 01 22
  16++E297 1A 2F 03 FE                          DB $1A, $2F, $03, $FE, $02, $33
  16++E29B 02 33
  17++E29D 1A 2F 03 7E                          DB $1A, $2F, $03, $7E, $03, $44
  17++E2A1 03 44
  18++E2A3 2B 0D 25 7E                          DB $2B, $0D, $25, $7E, $04, $55
  18++E2A7 04 55
  19++E2A9 00 30 31 3E                          DB $00, $30, $31, $3E, $15, $66
  19++E2AD 15 66
  20++E2AF 45 0F 0F BE                          DB $45, $0F, $0F, $BE, $12, $77
  20++E2B3 12 77
  21++E2B5 2B 27 28 DF                          DB $2B, $27, $28, $DF, $23, $88
  21++E2B9 23 88
  22++E2BB 2B 27 28 5F                          DB $2B, $27, $28, $5F, $34, $99
  22++E2BF 34 99
  23++E2C1 45 0F 0F 3E                          DB $45, $0F, $0F, $3E, $45, $AA
  23++E2C5 45 AA
  24++E2C7 2B 35 17 BF                          DB $2B, $35, $17, $BF, $FF, $FF
  24++E2CB FF FF
  25++E2CD 45 01 20 DF                          DB $45, $01, $20, $DF, $27, $88
  25++E2D1 27 88
  26++E2D3 00 00 FE 1F                          DB $00, $00, $FE, $1F, $FF, $FF
  26++E2D7 FF FF
  27++E2D9 45 01 20 5F                          DB $45, $01, $20, $5F, $49, $AA
  27++E2DD 49 AA
  28++E2DF 2B 35 17 3F                          DB $2B, $35, $17, $3F, $FF, $FF
  28++E2E3 FF FF
  29++E2E5              AnacondaVertSize:       equ $ - AnacondaVertices
  30++E2E5 1E 01 00 04  AnacondaEdges:	        DB $1E, $01, $00, $04
  31++E2E9 1E 02 04 08                          DB $1E, $02, $04, $08
  32++E2ED 1E 03 08 0C                          DB $1E, $03, $08, $0C
  33++E2F1 1E 04 0C 10                          DB $1E, $04, $0C, $10
  34++E2F5 1E 05 00 10                          DB $1E, $05, $00, $10
  35++E2F9 1D 15 00 14                          DB $1D, $15, $00, $14
  36++E2FD 1D 12 04 18                          DB $1D, $12, $04, $18
  37++E301 1D 23 08 1C                          DB $1D, $23, $08, $1C
  38++E305 1D 34 0C 20                          DB $1D, $34, $0C, $20
  39++E309 1D 45 10 24                          DB $1D, $45, $10, $24
  40++E30D 1E 16 14 28                          DB $1E, $16, $14, $28
  41++E311 1E 17 18 28                          DB $1E, $17, $18, $28
  42++E315 1E 27 18 2C                          DB $1E, $27, $18, $2C
  43++E319 1E 28 1C 2C                          DB $1E, $28, $1C, $2C
  44++E31D 1F 38 1C 30                          DB $1F, $38, $1C, $30
  45++E321 1F 39 20 30                          DB $1F, $39, $20, $30
  46++E325 1E 49 20 34                          DB $1E, $49, $20, $34
  47++E329 1E 4A 24 34                          DB $1E, $4A, $24, $34
  48++E32D 1E 5A 24 38                          DB $1E, $5A, $24, $38
  49++E331 1E 56 14 38                          DB $1E, $56, $14, $38
  50++E335 1E 6B 28 38                          DB $1E, $6B, $28, $38
  51++E339 1F 7B 28 30                          DB $1F, $7B, $28, $30
  52++E33D 1F 78 2C 30                          DB $1F, $78, $2C, $30
  53++E341 1F 9A 30 34                          DB $1F, $9A, $30, $34
  54++E345 1F AB 30 38                          DB $1F, $AB, $30, $38
  55++E349              AnacondaEdgesSize:      equ $ - AnacondaEdges
  56++E349              AnacondaEdgesCnt:       equ AnacondaEdgesSize/4
  57++E349 7E 00 33 31  AnacondaNormals:	    DB $7E, $00, $33, $31
  58++E34D BE 33 12 57                          DB $BE, $33, $12, $57
  59++E351 FE 4D 39 13                          DB $FE, $4D, $39, $13
  60++E355 5F 00 5A 10                          DB $5F, $00, $5A, $10
  61++E359 7E 4D 39 13                          DB $7E, $4D, $39, $13
  62++E35D 3E 33 12 57                          DB $3E, $33, $12, $57
  63++E361 3E 00 6F 14                          DB $3E, $00, $6F, $14
  64++E365 9F 61 48 18                          DB $9F, $61, $48, $18
  65++E369 DF 6C 44 22                          DB $DF, $6C, $44, $22
  66++E36D 5F 6C 44 22                          DB $5F, $6C, $44, $22
  67++E371 1F 61 48 18                          DB $1F, $61, $48, $18
  68++E375 1F 00 5E 12                          DB $1F, $00, $5E, $12
  69++E379              AnacondaNormalsSize:    equ $ - AnacondaNormals
  70++E379              AnacondaLen:            equ $ - Anaconda
  71++E379
# file closed: ./Data/Ships/Anaconda.asm
  89+ E379                                      include "Data/Ships/Asp_Mk_2.asm"
# file opened: ./Data/Ships/Asp_Mk_2.asm
   1++E379 00 0E 10     Asp_Mk_2:	           DB $00, $0E, $10
   2++E37C 03 E4                                DW Asp_Mk_2Edges
   3++E37E 70                                   DB Asp_Mk_2EdgesSize
   4++E37F 20 1A                                DB $20, $1A
   5++E381 72                                   DB Asp_Mk_2VertSize
   6++E382 1C                                   DB Asp_Mk_2EdgesCnt
   7++E383 00 C8                                DB $00, $C8
   8++E385 30                                   DB Asp_Mk_2NormalsSize
   9++E386 28 96 28                             DB $28, $96, $28
  10++E389 73 E4                                DW Asp_Mk_2Normals
  11++E38B 01 29                                DB $01, $29
  12++E38D 91 E3                                DW Asp_Mk_2Vertices
  13++E38F 00 00                                DB 0,0                      ; Type and Tactics
  14++E391 00 12 00 56  Asp_Mk_2Vertices:	    DB $00, $12, $00, $56, $01, $22
  14++E395 01 22
  15++E397 00 09 2D 7F                          DB $00, $09, $2D, $7F, $12, $BB
  15++E39B 12 BB
  16++E39D 2B 00 2D 3F                          DB $2B, $00, $2D, $3F, $16, $BB
  16++E3A1 16 BB
  17++E3A3 45 03 00 5F                          DB $45, $03, $00, $5F, $16, $79
  17++E3A7 16 79
  18++E3A9 2B 0E 1C 5F                          DB $2B, $0E, $1C, $5F, $01, $77
  18++E3AD 01 77
  19++E3AF 2B 00 2D BF                          DB $2B, $00, $2D, $BF, $25, $BB
  19++E3B3 25 BB
  20++E3B5 45 03 00 DF                          DB $45, $03, $00, $DF, $25, $8A
  20++E3B9 25 8A
  21++E3BB 2B 0E 1C DF                          DB $2B, $0E, $1C, $DF, $02, $88
  21++E3BF 02 88
  22++E3C1 1A 07 49 5F                          DB $1A, $07, $49, $5F, $04, $79
  22++E3C5 04 79
  23++E3C7 1A 07 49 DF                          DB $1A, $07, $49, $DF, $04, $8A
  23++E3CB 04 8A
  24++E3CD 2B 0E 1C 1F                          DB $2B, $0E, $1C, $1F, $34, $69
  24++E3D1 34 69
  25++E3D3 2B 0E 1C 9F                          DB $2B, $0E, $1C, $9F, $34, $5A
  25++E3D7 34 5A
  26++E3D9 00 09 2D 3F                          DB $00, $09, $2D, $3F, $35, $6B
  26++E3DD 35 6B
  27++E3DF 11 00 2D AA                          DB $11, $00, $2D, $AA, $BB, $BB
  27++E3E3 BB BB
  28++E3E5 11 00 2D 29                          DB $11, $00, $2D, $29, $BB, $BB
  28++E3E9 BB BB
  29++E3EB 00 04 2D 6A                          DB $00, $04, $2D, $6A, $BB, $BB
  29++E3EF BB BB
  30++E3F1 00 04 2D 28                          DB $00, $04, $2D, $28, $BB, $BB
  30++E3F5 BB BB
  31++E3F7 00 07 49 4A                          DB $00, $07, $49, $4A, $04, $04
  31++E3FB 04 04
  32++E3FD 00 07 53 4A                          DB $00, $07, $53, $4A, $04, $04
  32++E401 04 04
  33++E403              Asp_Mk_2VertSize:       equ $ - Asp_Mk_2Vertices
  34++E403 16 12 00 04  Asp_Mk_2Edges:	        DB $16, $12, $00, $04
  35++E407 16 01 00 10                          DB $16, $01, $00, $10
  36++E40B 16 02 00 1C                          DB $16, $02, $00, $1C
  37++E40F 1F 1B 04 08                          DB $1F, $1B, $04, $08
  38++E413 1F 16 08 0C                          DB $1F, $16, $08, $0C
  39++E417 10 79 0C 20                          DB $10, $79, $0C, $20
  40++E41B 1F 04 20 24                          DB $1F, $04, $20, $24
  41++E41F 10 8A 18 24                          DB $10, $8A, $18, $24
  42++E423 1F 25 14 18                          DB $1F, $25, $14, $18
  43++E427 1F 2B 04 14                          DB $1F, $2B, $04, $14
  44++E42B 1F 17 0C 10                          DB $1F, $17, $0C, $10
  45++E42F 1F 07 10 20                          DB $1F, $07, $10, $20
  46++E433 1F 28 18 1C                          DB $1F, $28, $18, $1C
  47++E437 1F 08 1C 24                          DB $1F, $08, $1C, $24
  48++E43B 1F 6B 08 30                          DB $1F, $6B, $08, $30
  49++E43F 1F 5B 14 30                          DB $1F, $5B, $14, $30
  50++E443 16 36 28 30                          DB $16, $36, $28, $30
  51++E447 16 35 2C 30                          DB $16, $35, $2C, $30
  52++E44B 16 34 28 2C                          DB $16, $34, $28, $2C
  53++E44F 1F 5A 18 2C                          DB $1F, $5A, $18, $2C
  54++E453 1F 4A 24 2C                          DB $1F, $4A, $24, $2C
  55++E457 1F 69 0C 28                          DB $1F, $69, $0C, $28
  56++E45B 1F 49 20 28                          DB $1F, $49, $20, $28
  57++E45F 0A BB 34 3C                          DB $0A, $BB, $34, $3C
  58++E463 09 BB 3C 38                          DB $09, $BB, $3C, $38
  59++E467 08 BB 38 40                          DB $08, $BB, $38, $40
  60++E46B 08 BB 40 34                          DB $08, $BB, $40, $34
  61++E46F 0A 04 48 44                          DB $0A, $04, $48, $44
  62++E473              Asp_Mk_2EdgesSize:      equ $ - Asp_Mk_2Edges
  63++E473              Asp_Mk_2EdgesCnt:       equ Asp_Mk_2EdgesSize/4
  64++E473 5F 00 23 05  Asp_Mk_2Normals:	    DB $5F, $00, $23, $05
  65++E477 7F 08 26 07                          DB $7F, $08, $26, $07
  66++E47B FF 08 26 07                          DB $FF, $08, $26, $07
  67++E47F 36 00 18 01                          DB $36, $00, $18, $01
  68++E483 1F 00 2B 13                          DB $1F, $00, $2B, $13
  69++E487 BF 06 1C 02                          DB $BF, $06, $1C, $02
  70++E48B 3F 06 1C 02                          DB $3F, $06, $1C, $02
  71++E48F 5F 3B 40 1F                          DB $5F, $3B, $40, $1F
  72++E493 DF 3B 40 1F                          DB $DF, $3B, $40, $1F
  73++E497 1F 50 2E 32                          DB $1F, $50, $2E, $32
  74++E49B 9F 50 2E 32                          DB $9F, $50, $2E, $32
  75++E49F 3F 00 00 5A                          DB $3F, $00, $00, $5A
  76++E4A3              Asp_Mk_2NormalsSize:    equ $ - Asp_Mk_2Normals
  77++E4A3              Asp_Mk_2Len:            equ $ - Asp_Mk_2
  78++E4A3
# file closed: ./Data/Ships/Asp_Mk_2.asm
  90+ E4A3                                      include "Data/Ships/Asteroid.asm"
# file opened: ./Data/Ships/Asteroid.asm
   1++E4A3 00 19 00     Asteroid:	            DB $00, $19, $00
   2++E4A6 F1 E4                                DW AsteroidEdges
   3++E4A8 54                                   DB AsteroidEdgesSize
   4++E4A9 00 22                                DB $00, $22
   5++E4AB 36                                   DB AsteroidVertSize
   6++E4AC 15                                   DB AsteroidEdgesCnt
   7++E4AD 00 05                                DB $00, $05
   8++E4AF 38                                   DB AsteroidNormalsSize
   9++E4B0 32 3C 1E                             DB $32, $3C, $1E
  10++E4B3 45 E5                                DW AsteroidNormals
  11++E4B5 01 00                                DB $01, $00
  12++E4B7 BB E4                                DW AsteroidVertices
  13++E4B9 00 00                                DB 0,0                      ; Type and Tactics
  14++E4BB 00 50 00 1F  AsteroidVertices:	    DB $00, $50, $00, $1F, $FF, $FF
  14++E4BF FF FF
  15++E4C1 50 0A 00 DF                          DB $50, $0A, $00, $DF, $FF, $FF
  15++E4C5 FF FF
  16++E4C7 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF
  16++E4CB FF FF
  17++E4CD 46 28 00 5F                          DB $46, $28, $00, $5F, $FF, $FF
  17++E4D1 FF FF
  18++E4D3 3C 32 00 1F                          DB $3C, $32, $00, $1F, $65, $DC
  18++E4D7 65 DC
  19++E4D9 32 00 3C 1F                          DB $32, $00, $3C, $1F, $FF, $FF
  19++E4DD FF FF
  20++E4DF 28 00 46 9F                          DB $28, $00, $46, $9F, $10, $32
  20++E4E3 10 32
  21++E4E5 00 1E 4B 3F                          DB $00, $1E, $4B, $3F, $FF, $FF
  21++E4E9 FF FF
  22++E4EB 00 32 3C 7F                          DB $00, $32, $3C, $7F, $98, $BA
  22++E4EF 98 BA
  23++E4F1              AsteroidVertSize:       equ $ - AsteroidVertices
  24++E4F1 1F 72 00 04  AsteroidEdges:	        DB $1F, $72, $00, $04
  25++E4F5 1F D6 00 10                          DB $1F, $D6, $00, $10
  26++E4F9 1F C5 0C 10                          DB $1F, $C5, $0C, $10
  27++E4FD 1F B4 08 0C                          DB $1F, $B4, $08, $0C
  28++E501 1F A3 04 08                          DB $1F, $A3, $04, $08
  29++E505 1F 32 04 18                          DB $1F, $32, $04, $18
  30++E509 1F 31 08 18                          DB $1F, $31, $08, $18
  31++E50D 1F 41 08 14                          DB $1F, $41, $08, $14
  32++E511 1F 10 14 18                          DB $1F, $10, $14, $18
  33++E515 1F 60 00 14                          DB $1F, $60, $00, $14
  34++E519 1F 54 0C 14                          DB $1F, $54, $0C, $14
  35++E51D 1F 20 00 18                          DB $1F, $20, $00, $18
  36++E521 1F 65 10 14                          DB $1F, $65, $10, $14
  37++E525 1F A8 04 20                          DB $1F, $A8, $04, $20
  38++E529 1F 87 04 1C                          DB $1F, $87, $04, $1C
  39++E52D 1F D7 00 1C                          DB $1F, $D7, $00, $1C
  40++E531 1F DC 10 1C                          DB $1F, $DC, $10, $1C
  41++E535 1F C9 0C 1C                          DB $1F, $C9, $0C, $1C
  42++E539 1F B9 0C 20                          DB $1F, $B9, $0C, $20
  43++E53D 1F BA 08 20                          DB $1F, $BA, $08, $20
  44++E541 1F 98 1C 20                          DB $1F, $98, $1C, $20
  45++E545
  46++E545              AsteroidEdgesSize:      equ $ - AsteroidEdges
  47++E545              AsteroidEdgesCnt:       equ AsteroidEdgesSize/4
  48++E545 1F 09 42 51  AsteroidNormals:	    DB $1F, $09, $42, $51
  49++E549 5F 09 42 51                          DB $5F, $09, $42, $51
  50++E54D 9F 48 40 1F                          DB $9F, $48, $40, $1F
  51++E551 DF 40 49 2F                          DB $DF, $40, $49, $2F
  52++E555 5F 2D 4F 41                          DB $5F, $2D, $4F, $41
  53++E559 1F 87 0F 23                          DB $1F, $87, $0F, $23
  54++E55D 1F 26 4C 46                          DB $1F, $26, $4C, $46
  55++E561 BF 42 3B 27                          DB $BF, $42, $3B, $27
  56++E565 FF 43 0F 50                          DB $FF, $43, $0F, $50
  57++E569 7F 42 0E 4B                          DB $7F, $42, $0E, $4B
  58++E56D FF 46 50 28                          DB $FF, $46, $50, $28
  59++E571 7F 3A 66 33                          DB $7F, $3A, $66, $33
  60++E575 3F 51 09 43                          DB $3F, $51, $09, $43
  61++E579 3F 2F 5E 3F                          DB $3F, $2F, $5E, $3F
  62++E57D              AsteroidNormalsSize:    equ $ - AsteroidNormals
  63++E57D              AsteroidLen:            equ $ - Asteroid
  64++E57D
# file closed: ./Data/Ships/Asteroid.asm
  91+ E57D                                      include "Data/Ships/Boa.asm"
# file opened: ./Data/Ships/Boa.asm
   1++E57D 05 13 24     Boa:	                DB $05, $13, $24
   2++E580 E3 E5                                DW BoaEdges
   3++E582 60                                   DB BoaEdgesSize
   4++E583 00 26                                DB $00, $26
   5++E585 4E                                   DB BoaVertSize
   6++E586 18                                   DB BoaEdgesCnt
   7++E587 00 00                                DB $00, $00
   8++E589 30                                   DB BoaNormalsSize
   9++E58A 28 FA 18                             DB $28, $FA, $18
  10++E58D 43 E6                                DW BoaNormals
  11++E58F 00 1C                                DB $00, $1C
  12++E591 95 E5                                DW BoaVertices
  13++E593 00 00                                DB 0,0                      ; Type and Tactics
  14++E595 00 00 5D 1F  BoaVertices:	        DB $00, $00, $5D, $1F, $FF, $FF
  14++E599 FF FF
  15++E59B 00 28 57 38                          DB $00, $28, $57, $38, $02, $33
  15++E59F 02 33
  16++E5A1 26 19 63 78                          DB $26, $19, $63, $78, $01, $44
  16++E5A5 01 44
  17++E5A7 26 19 63 F8                          DB $26, $19, $63, $F8, $12, $55
  17++E5AB 12 55
  18++E5AD 26 28 3B BF                          DB $26, $28, $3B, $BF, $23, $69
  18++E5B1 23 69
  19++E5B3 26 28 3B 3F                          DB $26, $28, $3B, $3F, $03, $6B
  19++E5B7 03 6B
  20++E5B9 3E 00 43 3F                          DB $3E, $00, $43, $3F, $04, $8B
  20++E5BD 04 8B
  21++E5BF 18 41 4F 7F                          DB $18, $41, $4F, $7F, $14, $8A
  21++E5C3 14 8A
  22++E5C5 18 41 4F FF                          DB $18, $41, $4F, $FF, $15, $7A
  22++E5C9 15 7A
  23++E5CB 3E 00 43 BF                          DB $3E, $00, $43, $BF, $25, $79
  23++E5CF 25 79
  24++E5D1 00 07 6B 36                          DB $00, $07, $6B, $36, $02, $AA
  24++E5D5 02 AA
  25++E5D7 0D 09 6B 76                          DB $0D, $09, $6B, $76, $01, $AA
  25++E5DB 01 AA
  26++E5DD 0D 09 6B F6                          DB $0D, $09, $6B, $F6, $12, $CC
  26++E5E1 12 CC
  27++E5E3              BoaVertSize:            equ $ - BoaVertices
  28++E5E3 1F 6B 00 14  BoaEdges:	            DB $1F, $6B, $00, $14
  29++E5E7 1F 8A 00 1C                          DB $1F, $8A, $00, $1C
  30++E5EB 1F 79 00 24                          DB $1F, $79, $00, $24
  31++E5EF 1D 69 00 10                          DB $1D, $69, $00, $10
  32++E5F3 1D 8B 00 18                          DB $1D, $8B, $00, $18
  33++E5F7 1D 7A 00 20                          DB $1D, $7A, $00, $20
  34++E5FB 1F 36 10 14                          DB $1F, $36, $10, $14
  35++E5FF 1F 0B 14 18                          DB $1F, $0B, $14, $18
  36++E603 1F 48 18 1C                          DB $1F, $48, $18, $1C
  37++E607 1F 1A 1C 20                          DB $1F, $1A, $1C, $20
  38++E60B 1F 57 20 24                          DB $1F, $57, $20, $24
  39++E60F 1F 29 10 24                          DB $1F, $29, $10, $24
  40++E613 18 23 04 10                          DB $18, $23, $04, $10
  41++E617 18 03 04 14                          DB $18, $03, $04, $14
  42++E61B 18 25 0C 24                          DB $18, $25, $0C, $24
  43++E61F 18 15 0C 20                          DB $18, $15, $0C, $20
  44++E623 18 04 08 18                          DB $18, $04, $08, $18
  45++E627 18 14 08 1C                          DB $18, $14, $08, $1C
  46++E62B 16 02 04 28                          DB $16, $02, $04, $28
  47++E62F 16 01 08 2C                          DB $16, $01, $08, $2C
  48++E633 16 12 0C 30                          DB $16, $12, $0C, $30
  49++E637 0E 0C 28 2C                          DB $0E, $0C, $28, $2C
  50++E63B 0E 1C 2C 30                          DB $0E, $1C, $2C, $30
  51++E63F 0E 2C 30 28                          DB $0E, $2C, $30, $28
  52++E643              BoaEdgesSize:           equ $ - BoaEdges
  53++E643              BoaEdgesCnt:            equ BoaEdgesSize/4
  54++E643 3F 2B 25 3C  BoaNormals:	            DB $3F, $2B, $25, $3C
  55++E647 7F 00 2D 59                          DB $7F, $00, $2D, $59
  56++E64B BF 2B 25 3C                          DB $BF, $2B, $25, $3C
  57++E64F 1F 00 28 00                          DB $1F, $00, $28, $00
  58++E653 7F 3E 20 14                          DB $7F, $3E, $20, $14
  59++E657 FF 3E 20 14                          DB $FF, $3E, $20, $14
  60++E65B 1F 00 17 06                          DB $1F, $00, $17, $06
  61++E65F DF 17 0F 09                          DB $DF, $17, $0F, $09
  62++E663 5F 17 0F 09                          DB $5F, $17, $0F, $09
  63++E667 9F 1A 0D 0A                          DB $9F, $1A, $0D, $0A
  64++E66B 5F 00 1F 0C                          DB $5F, $00, $1F, $0C
  65++E66F 1F 1A 0D 0A                          DB $1F, $1A, $0D, $0A
  66++E673              BoaNormalsSize:         equ $ - BoaNormals
  67++E673              BoaLen:                 equ $ - Boa
  68++E673
# file closed: ./Data/Ships/Boa.asm
  92+ E673                                      include "Data/Ships/Boulder.asm"
# file opened: ./Data/Ships/Boulder.asm
   1++E673 00 03 84     Boulder:	            DB $00, $03, $84
   2++E676 B5 E6                                DW BoulderEdges
   3++E678 3C                                   DB BoulderEdgesSize
   4++E679 00 0E                                DB $00, $0E
   5++E67B 2A                                   DB BoulderVertSize
   6++E67C 0F                                   DB BoulderEdgesCnt
   7++E67D 00 01                                DB $00, $01
   8++E67F 28                                   DB BoulderNormalsSize
   9++E680 14 14 1E                             DB $14, $14, $1E
  10++E683 F1 E6                                DW BoulderNormals
  11++E685 02 00                                DB $02, $00
  12++E687 8B E6                                DW BoulderVertices
  13++E689 00 00                                DB 0,0                      ; Type and Tactics
  14++E68B 12 25 0B BF  BoulderVertices:	    DB $12, $25, $0B, $BF, $01, $59
  14++E68F 01 59
  15++E691 1E 07 0C 1F                          DB $1E, $07, $0C, $1F, $12, $56
  15++E695 12 56
  16++E697 1C 07 0C 7F                          DB $1C, $07, $0C, $7F, $23, $67
  16++E69B 23 67
  17++E69D 02 00 27 3F                          DB $02, $00, $27, $3F, $34, $78
  17++E6A1 34 78
  18++E6A3 1C 22 1E BF                          DB $1C, $22, $1E, $BF, $04, $89
  18++E6A7 04 89
  19++E6A9 05 0A 0D 5F                          DB $05, $0A, $0D, $5F, $FF, $FF
  19++E6AD FF FF
  20++E6AF 14 11 1E 3F                          DB $14, $11, $1E, $3F, $FF, $FF
  20++E6B3 FF FF
  21++E6B5              BoulderVertSize:        equ $ - BoulderVertices
  22++E6B5 1F 15 00 04  BoulderEdges:	        DB $1F, $15, $00, $04
  23++E6B9 1F 26 04 08                          DB $1F, $26, $04, $08
  24++E6BD 1F 37 08 0C                          DB $1F, $37, $08, $0C
  25++E6C1 1F 48 0C 10                          DB $1F, $48, $0C, $10
  26++E6C5 1F 09 10 00                          DB $1F, $09, $10, $00
  27++E6C9 1F 01 00 14                          DB $1F, $01, $00, $14
  28++E6CD 1F 12 04 14                          DB $1F, $12, $04, $14
  29++E6D1 1F 23 08 14                          DB $1F, $23, $08, $14
  30++E6D5 1F 34 0C 14                          DB $1F, $34, $0C, $14
  31++E6D9 1F 04 10 14                          DB $1F, $04, $10, $14
  32++E6DD 1F 59 00 18                          DB $1F, $59, $00, $18
  33++E6E1 1F 56 04 18                          DB $1F, $56, $04, $18
  34++E6E5 1F 67 08 18                          DB $1F, $67, $08, $18
  35++E6E9 1F 78 0C 18                          DB $1F, $78, $0C, $18
  36++E6ED 1F 89 10 18                          DB $1F, $89, $10, $18
  37++E6F1              BoulderEdgesSize:       equ $ - BoulderEdges
  38++E6F1              BoulderEdgesCnt:        equ BoulderEdgesSize/4
  39++E6F1 DF 0F 03 08  BoulderNormals:	        DB $DF, $0F, $03, $08
  40++E6F5 9F 07 0C 1E                          DB $9F, $07, $0C, $1E
  41++E6F9 5F 20 2F 18                          DB $5F, $20, $2F, $18
  42++E6FD FF 03 27 07                          DB $FF, $03, $27, $07
  43++E701 FF 05 04 01                          DB $FF, $05, $04, $01
  44++E705 1F 31 54 08                          DB $1F, $31, $54, $08
  45++E709 3F 70 15 15                          DB $3F, $70, $15, $15
  46++E70D 7F 4C 23 52                          DB $7F, $4C, $23, $52
  47++E711 3F 16 38 89                          DB $3F, $16, $38, $89
  48++E715 3F 28 6E 26                          DB $3F, $28, $6E, $26
  49++E719              BoulderNormalsSize:     equ $ - BoulderNormals
  50++E719              BoulderLen:             equ $ - Boulder
  51++E719
# file closed: ./Data/Ships/Boulder.asm
  93+ E719                                      include "Data/Ships/Bushmaster.asm"
# file opened: ./Data/Ships/Bushmaster.asm
   1++E719 00 10 9A     Bushmaster:	            DB $00, $10, $9A
   2++E71C 79 E7                                DW BushmasterEdges
   3++E71E 4C                                   DB BushmasterEdgesSize
   4++E71F 00 1E                                DB $00, $1E
   5++E721 48                                   DB BushmasterVertSize
   6++E722 13                                   DB BushmasterEdgesCnt
   7++E723 00 96                                DB $00, $96
   8++E725 24                                   DB BushmasterNormalsSize
   9++E726 14 4A 23                             DB $14, $4A, $23
  10++E729 C5 E7                                DW BushmasterNormals
  11++E72B 02 21                                DB $02, $21
  12++E72D 31 E7                                DW BushmasterVertices
  13++E72F 00 00                                DB 0,0                      ; Type and Tactics
  14++E731 00 00 3C 1F  BushmasterVertices:	    DB $00, $00, $3C, $1F, $23, $01
  14++E735 23 01
  15++E737 32 00 14 1F                          DB $32, $00, $14, $1F, $57, $13
  15++E73B 57 13
  16++E73D 32 00 14 9F                          DB $32, $00, $14, $9F, $46, $02
  16++E741 46 02
  17++E743 00 14 00 1F                          DB $00, $14, $00, $1F, $45, $01
  17++E747 45 01
  18++E749 00 14 28 7F                          DB $00, $14, $28, $7F, $FF, $FF
  18++E74D FF FF
  19++E74F 00 0E 28 3F                          DB $00, $0E, $28, $3F, $88, $45
  19++E753 88 45
  20++E755 28 00 28 3F                          DB $28, $00, $28, $3F, $88, $57
  20++E759 88 57
  21++E75B 28 00 28 BF                          DB $28, $00, $28, $BF, $88, $46
  21++E75F 88 46
  22++E761 00 04 28 2A                          DB $00, $04, $28, $2A, $88, $88
  22++E765 88 88
  23++E767 0A 00 28 2A                          DB $0A, $00, $28, $2A, $88, $88
  23++E76B 88 88
  24++E76D 00 04 28 6A                          DB $00, $04, $28, $6A, $88, $88
  24++E771 88 88
  25++E773 0A 00 28 AA                          DB $0A, $00, $28, $AA, $88, $88
  25++E777 88 88
  26++E779              BushmasterVertSize:     equ $ - BushmasterVertices
  27++E779 1F 13 00 04  BushmasterEdges:	    DB $1F, $13, $00, $04
  28++E77D 1F 02 00 08                          DB $1F, $02, $00, $08
  29++E781 1F 01 00 0C                          DB $1F, $01, $00, $0C
  30++E785 1F 23 00 10                          DB $1F, $23, $00, $10
  31++E789 1F 45 0C 14                          DB $1F, $45, $0C, $14
  32++E78D 1F 04 08 0C                          DB $1F, $04, $08, $0C
  33++E791 1F 15 04 0C                          DB $1F, $15, $04, $0C
  34++E795 1F 46 08 1C                          DB $1F, $46, $08, $1C
  35++E799 1F 57 04 18                          DB $1F, $57, $04, $18
  36++E79D 1F 26 08 10                          DB $1F, $26, $08, $10
  37++E7A1 1F 37 04 10                          DB $1F, $37, $04, $10
  38++E7A5 1F 48 14 1C                          DB $1F, $48, $14, $1C
  39++E7A9 1F 58 14 18                          DB $1F, $58, $14, $18
  40++E7AD 1F 68 10 1C                          DB $1F, $68, $10, $1C
  41++E7B1 1F 78 10 18                          DB $1F, $78, $10, $18
  42++E7B5 0A 88 20 24                          DB $0A, $88, $20, $24
  43++E7B9 0A 88 24 28                          DB $0A, $88, $24, $28
  44++E7BD 0A 88 28 2C                          DB $0A, $88, $28, $2C
  45++E7C1 0A 88 2C 20                          DB $0A, $88, $2C, $20
  46++E7C5              BushmasterEdgesSize:    equ $ - BushmasterEdges
  47++E7C5              BushmasterEdgesCnt:     equ BushmasterEdgesSize/4
  48++E7C5 9F 17 58 1D  BushmasterNormals:	    DB $9F, $17, $58, $1D
  49++E7C9 1F 17 58 1D                          DB $1F, $17, $58, $1D
  50++E7CD DF 0E 5D 12                          DB $DF, $0E, $5D, $12
  51++E7D1 5F 0E 5D 12                          DB $5F, $0E, $5D, $12
  52++E7D5 BF 1F 59 0D                          DB $BF, $1F, $59, $0D
  53++E7D9 3F 1F 59 0D                          DB $3F, $1F, $59, $0D
  54++E7DD FF 2A 55 07                          DB $FF, $2A, $55, $07
  55++E7E1 7F 2A 55 07                          DB $7F, $2A, $55, $07
  56++E7E5 3F 00 00 60                          DB $3F, $00, $00, $60
  57++E7E9              BushmasterNormalsSize:  equ $ - BushmasterNormals
  58++E7E9              BushmasterLen:          equ $ - Bushmaster
  59++E7E9
# file closed: ./Data/Ships/Bushmaster.asm
  94+ E7E9                                      include "Data/Ships/CargoType5.asm"
# file opened: ./Data/Ships/CargoType5.asm
   1++E7E9              ;	\ Transporter hull data header info 37 vertices  6*37  = &DE
   2++E7E9              ; Corrected pointers
   3++E7E9              ;                      0    1    2  3  4  5   6   7   8   9   10  11  12   13  14  15   16 17 18 19    20    21
   4++E7E9              ;					   Scp  Missile Edge  Lin Gun Exp Vtx Edg Bounty  Face              Face           Vertices
   5++E7E9              ;                      Deb  Lock    Lo Hi x4  Vtx Cnt x6  X1  lo  hi  x4   Dot Erg Spd  Lo Hi Q  Laser Lo    hi
   6++E7E9              ;;;				 Example of cargo
   7++E7E9              ;;;
   8++E7E9              ;;;		Points (nodes, vetices)		6 bytes per vertex
   9++E7E9              ;;;     Byte 0 = X magnitide with origin at middle of ship
  10++E7E9              ;;;		Byte 1 = Y magnitide with origin at middle of ship
  11++E7E9              ;;;		Byte 2 = Z magnitide with origin at middle of ship
  12++E7E9              ;;;		Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
  13++E7E9              ;;;		Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  14++E7E9              ;;;		Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
  15++E7E9              ;;;		Edges
  16++E7E9              ;;;		Byte 0 = Edge visbility Distance if > XX4 distance then won't show
  17++E7E9              ;;;		Byte 1 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  18++E7E9              ;;;		Byte 2 = Byte offset to Point 1 (divide by 4 for index)
  19++E7E9              ;;;		Byte 3 = Byte offset to Point 2 (divide by 4 for index)
  20++E7E9              ;;;	  	Normals (Faces)
  21++E7E9              ;;;		Byte 0 = Sign Bits of Vertex 7=X 6=Y 5 = Z, bits 4 to 0 are distance for always visible
  22++E7E9              ;;;		Byte 1 = X Lo
  23++E7E9              ;;;		Byte 2 = Y Lo
  24++E7E9              ;;;		Byte 3 = Z Lo
  25++E7E9
  26++E7E9 00 90 01     CargoType5              DB $00, $90, $01
  27++E7EC 3D E8                                DW CargoType5Edges
  28++E7EE 3C                                   DB CargoType5EdgesSize
  29++E7EF 00 12 3C 0F                          DB $00,$12,CargoType5VertSize,CargoType5EdgesCnt
  30++E7F3 00 00 1C 0C                          DB $00,$00,$1C,$0C,$11,$0F
  30++E7F7 11 0F
  31++E7F9 79 E8                                DW CargoType5Normals
  32++E7FB 02 00                                DB $02,$00
  33++E7FD 01 E8                                DW CargoType5Vertices
  34++E7FF 00 00                                DB 0,0                      ; Type and Tactics
  35++E801              ; So cargo is               Edge offset $0050  Face Offset $008C, Verices will alwys be +20, LineMax 31 -> 4  EdgeCnt 15  VertexCnt 60 -> 10     FaceCn 28 -> 7
  36++E801 18 10 00 1F  CargoType5Vertices		DB $18,$10,$00,$1F,$10,$55 	; 60 bytes in total for data
  36++E805 10 55
  37++E807 18 05 0F 1F                          DB $18,$05,$0F,$1F,$10,$22
  37++E80B 10 22
  38++E80D 18 0D 09 5F                          DB $18,$0D,$09,$5F,$20,$33
  38++E811 20 33
  39++E813 18 0D 09 7F                          DB $18,$0D,$09,$7F,$30,$44
  39++E817 30 44
  40++E819 18 05 0F 3F                          DB $18,$05,$0F,$3F,$40,$55   ; end of left pentagon
  40++E81D 40 55
  41++E81F 18 10 00 9F                          DB $18,$10,$00,$9F,$51,$66   ; start of right pentagon
  41++E823 51 66
  42++E825 18 05 0F 9F                          DB $18,$05,$0F,$9F,$21,$66
  42++E829 21 66
  43++E82B 18 0D 09 DF                          DB $18,$0D,$09,$DF,$32,$66
  43++E82F 32 66
  44++E831 18 0D 09 FF                          DB $18,$0D,$09,$FF,$43,$66
  44++E835 43 66
  45++E837 18 05 0F BF                          DB $18,$05,$0F,$BF,$54,$66
  45++E83B 54 66
  46++E83D              CargoType5VertSize      equ $  - CargoType5Vertices
  47++E83D 1F 10 00 04  CargoType5Edges			DB $1F,$10,$00,$04,$1F,$20,$04,$08 	; 8 x 7 = 60 bytes
  47++E841 1F 20 04 08
  48++E845 1F 30 08 0C                          DB $1F,$30,$08,$0C,$1F,$40,$0C,$10
  48++E849 1F 40 0C 10
  49++E84D 1F 50 00 10                          DB $1F,$50,$00,$10,$1F,$51,$00,$14
  49++E851 1F 51 00 14
  50++E855 1F 21 04 18                          DB $1F,$21,$04,$18,$1F,$32,$08,$1C
  50++E859 1F 32 08 1C
  51++E85D 1F 43 0C 20                          DB $1F,$43,$0C,$20,$1F,$54,$10,$24
  51++E861 1F 54 10 24
  52++E865 1F 61 14 18                          DB $1F,$61,$14,$18,$1F,$62,$18,$1C
  52++E869 1F 62 18 1C
  53++E86D 1F 63 1C 20                          DB $1F,$63,$1C,$20,$1F,$64,$20,$24
  53++E871 1F 64 20 24
  54++E875 1F 65 24 14                          DB $1F,$65,$24,$14
  55++E879              CargoType5EdgesSize     equ $  - CargoType5Edges
  56++E879              CargoType5EdgesCnt      equ CargoType5EdgesSize / 4
  57++E879 1F 60 00 00  CargoType5Normals    	DB $1F,$60,$00,$00
  58++E87D 1F 00 29 1E                          DB $1F,$00,$29,$1E,$5F,$00,$12,$30
  58++E881 5F 00 12 30
  59++E885 5F 00 33 00                          DB $5F,$00,$33,$00,$7F,$00,$12,$30
  59++E889 7F 00 12 30
  60++E88D 3F 00 29 1E                          DB $3F,$00,$29,$1E,$9F,$60,$00,$00   ; end Cargo cannister
  60++E891 9F 60 00 00
  61++E895              CargoType5NormalsSize   equ $  - CargoType5Normals
  62++E895              CargoType5Len           equ $  - CargoType5
# file closed: ./Data/Ships/CargoType5.asm
  95+ E895                                      include "Data/Ships/Chameleon.asm"
# file opened: ./Data/Ships/Chameleon.asm
   1++E895 03 0F A0     Chameleon:	            DB $03, $0F, $A0
   2++E898 19 E9                                DW ChameleonEdges
   3++E89A 74                                   DB ChameleonEdgesSize
   4++E89B 00 1A                                DB $00, $1A
   5++E89D 6C                                   DB ChameleonVertSize
   6++E89E 1D                                   DB ChameleonEdgesCnt
   7++E89F 00 C8                                DB $00, $C8
   8++E8A1 34                                   DB ChameleonNormalsSize
   9++E8A2 0A 64 1D                             DB $0A, $64, $1D
  10++E8A5 8D E9                                DW ChameleonNormals
  11++E8A7 01 23                                DB $01, $23
  12++E8A9 AD E8                                DW ChameleonVertices
  13++E8AB 00 00                                DB 0,0                      ; Type and Tactics
  14++E8AD 12 00 6E 9F  ChameleonVertices:	    DB $12, $00, $6E, $9F, $25, $01
  14++E8B1 25 01
  15++E8B3 12 00 6E 1F                          DB $12, $00, $6E, $1F, $34, $01
  15++E8B7 34 01
  16++E8B9 28 00 00 9F                          DB $28, $00, $00, $9F, $8B, $25
  16++E8BD 8B 25
  17++E8BF 08 18 00 9F                          DB $08, $18, $00, $9F, $68, $22
  17++E8C3 68 22
  18++E8C5 08 18 00 1F                          DB $08, $18, $00, $1F, $69, $33
  18++E8C9 69 33
  19++E8CB 28 00 00 1F                          DB $28, $00, $00, $1F, $9A, $34
  19++E8CF 9A 34
  20++E8D1 08 18 00 5F                          DB $08, $18, $00, $5F, $7A, $44
  20++E8D5 7A 44
  21++E8D7 08 18 00 DF                          DB $08, $18, $00, $DF, $7B, $55
  21++E8DB 7B 55
  22++E8DD 00 18 28 1F                          DB $00, $18, $28, $1F, $36, $02
  22++E8E1 36 02
  23++E8E3 00 18 28 5F                          DB $00, $18, $28, $5F, $57, $14
  23++E8E7 57 14
  24++E8E9 20 00 28 BF                          DB $20, $00, $28, $BF, $BC, $88
  24++E8ED BC 88
  25++E8EF 00 18 28 3F                          DB $00, $18, $28, $3F, $9C, $68
  25++E8F3 9C 68
  26++E8F5 20 00 28 3F                          DB $20, $00, $28, $3F, $AC, $99
  26++E8F9 AC 99
  27++E8FB 00 18 28 7F                          DB $00, $18, $28, $7F, $BC, $7A
  27++E8FF BC 7A
  28++E901 08 00 28 AA                          DB $08, $00, $28, $AA, $CC, $CC
  28++E905 CC CC
  29++E907 00 08 28 2A                          DB $00, $08, $28, $2A, $CC, $CC
  29++E90B CC CC
  30++E90D 08 00 28 2A                          DB $08, $00, $28, $2A, $CC, $CC
  30++E911 CC CC
  31++E913 00 08 28 6A                          DB $00, $08, $28, $6A, $CC, $CC
  31++E917 CC CC
  32++E919              ChameleonVertSize:      equ $ - ChameleonVertices
  33++E919 1F 01 00 04  ChameleonEdges:	        DB $1F, $01, $00, $04
  34++E91D 1F 02 00 20                          DB $1F, $02, $00, $20
  35++E921 1F 15 00 24                          DB $1F, $15, $00, $24
  36++E925 1F 03 04 20                          DB $1F, $03, $04, $20
  37++E929 1F 14 04 24                          DB $1F, $14, $04, $24
  38++E92D 1F 34 04 14                          DB $1F, $34, $04, $14
  39++E931 1F 25 00 08                          DB $1F, $25, $00, $08
  40++E935 1F 26 0C 20                          DB $1F, $26, $0C, $20
  41++E939 1F 36 10 20                          DB $1F, $36, $10, $20
  42++E93D 1F 75 1C 24                          DB $1F, $75, $1C, $24
  43++E941 1F 74 18 24                          DB $1F, $74, $18, $24
  44++E945 1F 39 10 14                          DB $1F, $39, $10, $14
  45++E949 1F 4A 14 18                          DB $1F, $4A, $14, $18
  46++E94D 1F 28 08 0C                          DB $1F, $28, $08, $0C
  47++E951 1F 5B 08 1C                          DB $1F, $5B, $08, $1C
  48++E955 1F 8B 08 28                          DB $1F, $8B, $08, $28
  49++E959 1F 9A 14 30                          DB $1F, $9A, $14, $30
  50++E95D 1F 68 0C 2C                          DB $1F, $68, $0C, $2C
  51++E961 1F 7B 1C 34                          DB $1F, $7B, $1C, $34
  52++E965 1F 69 10 2C                          DB $1F, $69, $10, $2C
  53++E969 1F 7A 18 34                          DB $1F, $7A, $18, $34
  54++E96D 1F 8C 28 2C                          DB $1F, $8C, $28, $2C
  55++E971 1F BC 28 34                          DB $1F, $BC, $28, $34
  56++E975 1F 9C 2C 30                          DB $1F, $9C, $2C, $30
  57++E979 1F AC 30 34                          DB $1F, $AC, $30, $34
  58++E97D 0A CC 38 3C                          DB $0A, $CC, $38, $3C
  59++E981 0A CC 3C 40                          DB $0A, $CC, $3C, $40
  60++E985 0A CC 40 44                          DB $0A, $CC, $40, $44
  61++E989 0A CC 44 38                          DB $0A, $CC, $44, $38
  62++E98D              ChameleonEdgesSize:     equ $ - ChameleonEdges
  63++E98D              ChameleonEdgesCnt:      equ ChameleonEdgesSize/4
  64++E98D 1F 00 5A 1F  ChameleonNormals:	    DB $1F, $00, $5A, $1F
  65++E991 5F 00 5A 1F                          DB $5F, $00, $5A, $1F
  66++E995 9F 39 4C 0B                          DB $9F, $39, $4C, $0B
  67++E999 1F 39 4C 0B                          DB $1F, $39, $4C, $0B
  68++E99D 5F 39 4C 0B                          DB $5F, $39, $4C, $0B
  69++E9A1 DF 39 4C 0B                          DB $DF, $39, $4C, $0B
  70++E9A5 1F 00 60 00                          DB $1F, $00, $60, $00
  71++E9A9 5F 00 60 00                          DB $5F, $00, $60, $00
  72++E9AD BF 39 4C 0B                          DB $BF, $39, $4C, $0B
  73++E9B1 3F 39 4C 0B                          DB $3F, $39, $4C, $0B
  74++E9B5 7F 39 4C 0B                          DB $7F, $39, $4C, $0B
  75++E9B9 FF 39 4C 0B                          DB $FF, $39, $4C, $0B
  76++E9BD 3F 00 00 60                          DB $3F, $00, $00, $60
  77++E9C1              ChameleonNormalsSize:   equ $ - ChameleonNormals
  78++E9C1              ChameleonLen:           equ $ - Chameleon
  79++E9C1
# file closed: ./Data/Ships/Chameleon.asm
  96+ E9C1                                      include "Data/Ships/CobraMk3.asm"
# file opened: ./Data/Ships/CobraMk3.asm
   1++E9C1              ; Corrected pointers
   2++E9C1              ;                      0    1    2  3  4  5   6   7   8   9   10  11  12   13  14  15   16 17 18 19    20    21
   3++E9C1              ;					   Scp  Missile Edge  Lin Gun Exp Vtx Edg Bounty  Face              Face           Vertices
   4++E9C1              ;                      Deb  Lock    Lo Hi x4  Vtx Cnt x6  X1  lo  hi  x4   Dot Erg Spd  Lo Hi Q  Laser Lo    hi
   5++E9C1 03 41 23     CobraMk3    		    DB $03, $41, $23
   6++E9C4 81 EA                                DW CobraMk3Edges
   7++E9C6 98                                   DB CobraMkEdgesSize
   8++E9C7 54 2A                                DB $54,$2A
   9++E9C9 A8                                   DB CobraMkVertSize
  10++E9CA 26                                   DB CobraMkEdgesCnt
  11++E9CB 00 00                                DB $00,$00
  12++E9CD 34                                   DB CobraMk3NormalsSize
  13++E9CE 32 96 1C                             DB $32,$96,$1C
  14++E9D1 19 EB                                DW CobraMk3Normals
  15++E9D3 01 13                                DB $01,$13
  16++E9D5 D9 E9                                DW CobraMk3Vertices
  17++E9D7 00 00                                DB 0,0                      ; Type and Tactics
  18++E9D9                                  ; missiles = 3
  19++E9D9 20 00 4C 1F  CobraMk3Vertices	    DB $20,$00,$4C,$1F,$FF,$FF
  19++E9DD FF FF
  20++E9DF 20 00 4C 9F                          DB $20,$00,$4C,$9F,$FF,$FF
  20++E9E3 FF FF
  21++E9E5 00 1A 18 1F                          DB $00,$1A,$18,$1F,$FF,$FF
  21++E9E9 FF FF
  22++E9EB 78 03 08 FF                          DB $78,$03,$08,$FF,$73,$AA
  22++E9EF 73 AA
  23++E9F1 78 03 08 7F                          DB $78,$03,$08,$7F,$84,$CC
  23++E9F5 84 CC
  24++E9F7 58 10 28 BF                          DB $58,$10,$28,$BF,$FF,$FF
  24++E9FB FF FF
  25++E9FD 58 10 28 3F                          DB $58,$10,$28,$3F,$FF,$FF
  25++EA01 FF FF
  26++EA03 80 08 28 7F                          DB $80,$08,$28,$7F,$98,$CC
  26++EA07 98 CC
  27++EA09 80 08 28 FF                          DB $80,$08,$28,$FF,$97,$AA
  27++EA0D 97 AA
  28++EA0F 00 1A 28 3F                          DB $00,$1A,$28,$3F,$65,$99
  28++EA13 65 99
  29++EA15 20 18 28 FF                          DB $20,$18,$28,$FF,$A9,$BB
  29++EA19 A9 BB
  30++EA1B 20 18 28 7F                          DB $20,$18,$28,$7F,$B9,$CC
  30++EA1F B9 CC
  31++EA21 24 08 28 B4                          DB $24,$08,$28,$B4,$99,$99
  31++EA25 99 99
  32++EA27 08 0C 28 B4                          DB $08,$0C,$28,$B4,$99,$99
  32++EA2B 99 99
  33++EA2D 08 0C 28 34                          DB $08,$0C,$28,$34,$99,$99
  33++EA31 99 99
  34++EA33 24 08 28 34                          DB $24,$08,$28,$34,$99,$99
  34++EA37 99 99
  35++EA39 24 0C 28 74                          DB $24,$0C,$28,$74,$99,$99
  35++EA3D 99 99
  36++EA3F 08 10 28 74                          DB $08,$10,$28,$74,$99,$99
  36++EA43 99 99
  37++EA45 08 10 28 F4                          DB $08,$10,$28,$F4,$99,$99
  37++EA49 99 99
  38++EA4B 24 0C 28 F4                          DB $24,$0C,$28,$F4,$99,$99
  38++EA4F 99 99
  39++EA51 00 00 4C 06                          DB $00,$00,$4C,$06,$B0,$BB
  39++EA55 B0 BB
  40++EA57 00 00 5A 1F                          DB $00,$00,$5A,$1F,$B0,$BB
  40++EA5B B0 BB
  41++EA5D 50 06 28 E8                          DB $50,$06,$28,$E8,$99,$99
  41++EA61 99 99
  42++EA63 50 06 28 A8                          DB $50,$06,$28,$A8,$99,$99
  42++EA67 99 99
  43++EA69 58 00 28 A6                          DB $58,$00,$28,$A6,$99,$99
  43++EA6D 99 99
  44++EA6F 50 06 28 28                          DB $50,$06,$28,$28,$99,$99
  44++EA73 99 99
  45++EA75 58 00 28 26                          DB $58,$00,$28,$26,$99,$99
  45++EA79 99 99
  46++EA7B 50 06 28 68                          DB $50,$06,$28,$68,$99,$99
  46++EA7F 99 99
  47++EA81              CobraMkVertSize         equ $  - CobraMk3Vertices
  48++EA81 1F B0 00 04  CobraMk3Edges		    DB $1F,$B0,$00,$04,$1F,$C4,$00,$10
  48++EA85 1F C4 00 10
  49++EA89 1F A3 04 0C                          DB $1F,$A3,$04,$0C,$1F,$A7,$0C,$20
  49++EA8D 1F A7 0C 20
  50++EA91 1F C8 10 1C                          DB $1F,$C8,$10,$1C,$1F,$98,$18,$1C
  50++EA95 1F 98 18 1C
  51++EA99 1F 96 18 24                          DB $1F,$96,$18,$24,$1F,$95,$14,$24
  51++EA9D 1F 95 14 24
  52++EAA1 1F 97 14 20                          DB $1F,$97,$14,$20,$1F,$51,$08,$14
  52++EAA5 1F 51 08 14
  53++EAA9 1F 62 08 18                          DB $1F,$62,$08,$18,$1F,$73,$0C,$14
  53++EAAD 1F 73 0C 14
  54++EAB1 1F 84 10 18                          DB $1F,$84,$10,$18,$1F,$10,$04,$08
  54++EAB5 1F 10 04 08
  55++EAB9 1F 20 00 08                          DB $1F,$20,$00,$08,$1F,$A9,$20,$28
  55++EABD 1F A9 20 28
  56++EAC1 1F B9 28 2C                          DB $1F,$B9,$28,$2C,$1F,$C9,$1C,$2C
  56++EAC5 1F C9 1C 2C
  57++EAC9 1F BA 04 28                          DB $1F,$BA,$04,$28,$1F,$CB,$00,$2C
  57++EACD 1F CB 00 2C
  58++EAD1 1D 31 04 14                          DB $1D,$31,$04,$14,$1D,$42,$00,$18
  58++EAD5 1D 42 00 18
  59++EAD9 06 B0 50 54                          DB $06,$B0,$50,$54,$14,$99,$30,$34
  59++EADD 14 99 30 34
  60++EAE1 14 99 48 4C                          DB $14,$99,$48,$4C,$14,$99,$38,$3C
  60++EAE5 14 99 38 3C
  61++EAE9 14 99 40 44                          DB $14,$99,$40,$44,$13,$99,$3C,$40
  61++EAED 13 99 3C 40
  62++EAF1 11 99 38 44                          DB $11,$99,$38,$44,$13,$99,$34,$48
  62++EAF5 13 99 34 48
  63++EAF9 13 99 30 4C                          DB $13,$99,$30,$4C,$1E,$65,$08,$24
  63++EAFD 1E 65 08 24
  64++EB01 06 99 58 60                          DB $06,$99,$58,$60,$06,$99,$5C,$60
  64++EB05 06 99 5C 60
  65++EB09 08 99 58 5C                          DB $08,$99,$58,$5C,$06,$99,$64,$68
  65++EB0D 06 99 64 68
  66++EB11 06 99 68 6C                          DB $06,$99,$68,$6C,$08,$99,$64,$6C
  66++EB15 08 99 64 6C
  67++EB19              CobraMkEdgesSize        equ $  - CobraMk3Edges
  68++EB19              CobraMkEdgesCnt         equ CobraMkEdgesSize/4
  69++EB19              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
  70++EB19 1F 00 3E 1F  CobraMk3Normals		    DB $1F,$00,$3E,$1F
  71++EB1D 9F 12 37 10                          DB $9F,$12,$37,$10
  72++EB21 1F 12 37 10                          DB $1F,$12,$37,$10
  73++EB25 9F 10 34 0E                          DB $9F,$10,$34,$0E
  74++EB29 1F 10 34 0E                          DB $1F,$10,$34,$0E
  75++EB2D 9F 0E 2F 00                          DB $9F,$0E,$2F,$00
  76++EB31 1F 0E 2F 00                          DB $1F,$0E,$2F,$00
  77++EB35 9F 3D 66 00                          DB $9F,$3D,$66,$00
  78++EB39 1F 3D 66 00                          DB $1F,$3D,$66,$00
  79++EB3D 3F 00 00 50                          DB $3F,$00,$00,$50
  80++EB41 DF 07 2A 09                          DB $DF,$07,$2A,$09
  81++EB45 5F 00 1E 06                          DB $5F,$00,$1E,$06
  82++EB49 5F 07 2A 09                          DB $5F,$07,$2A,$09 		;end of Cobra Mk III
  83++EB4D              CobraMk3NormalsSize     equ $  - CobraMk3Normals
  84++EB4D              CobraMk3Len             equ $  - CobraMk3
  85++EB4D
# file closed: ./Data/Ships/CobraMk3.asm
  97+ EB4D                                      include "Data/Ships/Cobra_Mk_1.asm"
# file opened: ./Data/Ships/Cobra_Mk_1.asm
   1++EB4D 03 26 49     Cobra_Mk_1:	            DB $03, $26, $49
   2++EB50 A7 EB                                DW Cobra_Mk_1Edges
   3++EB52 48                                   DB Cobra_Mk_1EdgesSize
   4++EB53 28 1A                                DB $28, $1A
   5++EB55 42                                   DB Cobra_Mk_1VertSize
   6++EB56 12                                   DB Cobra_Mk_1EdgesCnt
   7++EB57 00 4B                                DB $00, $4B
   8++EB59 28                                   DB Cobra_Mk_1NormalsSize
   9++EB5A 13 51 1A                             DB $13, $51, $1A
  10++EB5D EF EB                                DW Cobra_Mk_1Normals
  11++EB5F 02 22                                DB $02, $22
  12++EB61 65 EB                                DW Cobra_Mk_1Vertices
  13++EB63 00 00                                DB 0,0                      ; Type and Tactics
  14++EB65 12 01 32 DF  Cobra_Mk_1Vertices:	    DB $12, $01, $32, $DF, $01, $23
  14++EB69 01 23
  15++EB6B 12 01 32 5F                          DB $12, $01, $32, $5F, $01, $45
  15++EB6F 01 45
  16++EB71 42 00 07 9F                          DB $42, $00, $07, $9F, $23, $88
  16++EB75 23 88
  17++EB77 42 00 07 1F                          DB $42, $00, $07, $1F, $45, $99
  17++EB7B 45 99
  18++EB7D 20 0C 26 BF                          DB $20, $0C, $26, $BF, $26, $78
  18++EB81 26 78
  19++EB83 20 0C 26 3F                          DB $20, $0C, $26, $3F, $46, $79
  19++EB87 46 79
  20++EB89 36 0C 26 FF                          DB $36, $0C, $26, $FF, $13, $78
  20++EB8D 13 78
  21++EB8F 36 0C 26 7F                          DB $36, $0C, $26, $7F, $15, $79
  21++EB93 15 79
  22++EB95 00 0C 06 34                          DB $00, $0C, $06, $34, $02, $46
  22++EB99 02 46
  23++EB9B 00 01 32 42                          DB $00, $01, $32, $42, $01, $11
  23++EB9F 01 11
  24++EBA1 00 01 3C 5F                          DB $00, $01, $3C, $5F, $01, $11
  24++EBA5 01 11
  25++EBA7              Cobra_Mk_1VertSize:     equ $ - Cobra_Mk_1Vertices
  26++EBA7 1F 01 04 00  Cobra_Mk_1Edges:	    DB $1F, $01, $04, $00
  27++EBAB 1F 23 00 08                          DB $1F, $23, $00, $08
  28++EBAF 1F 38 08 18                          DB $1F, $38, $08, $18
  29++EBB3 1F 17 18 1C                          DB $1F, $17, $18, $1C
  30++EBB7 1F 59 1C 0C                          DB $1F, $59, $1C, $0C
  31++EBBB 1F 45 0C 04                          DB $1F, $45, $0C, $04
  32++EBBF 1F 28 08 10                          DB $1F, $28, $08, $10
  33++EBC3 1F 67 10 14                          DB $1F, $67, $10, $14
  34++EBC7 1F 49 14 0C                          DB $1F, $49, $14, $0C
  35++EBCB 14 02 00 20                          DB $14, $02, $00, $20
  36++EBCF 14 04 20 04                          DB $14, $04, $20, $04
  37++EBD3 10 26 10 20                          DB $10, $26, $10, $20
  38++EBD7 10 46 20 14                          DB $10, $46, $20, $14
  39++EBDB 1F 78 10 18                          DB $1F, $78, $10, $18
  40++EBDF 1F 79 14 1C                          DB $1F, $79, $14, $1C
  41++EBE3 14 13 00 18                          DB $14, $13, $00, $18
  42++EBE7 14 15 04 1C                          DB $14, $15, $04, $1C
  43++EBEB 02 01 28 24                          DB $02, $01, $28, $24
  44++EBEF              Cobra_Mk_1EdgesSize:    equ $ - Cobra_Mk_1Edges
  45++EBEF              Cobra_Mk_1EdgesCnt:     equ Cobra_Mk_1EdgesSize/4
  46++EBEF 1F 00 29 0A  Cobra_Mk_1Normals:	    DB $1F, $00, $29, $0A
  47++EBF3 5F 00 1B 03                          DB $5F, $00, $1B, $03
  48++EBF7 9F 08 2E 08                          DB $9F, $08, $2E, $08
  49++EBFB DF 0C 39 0C                          DB $DF, $0C, $39, $0C
  50++EBFF 1F 08 2E 08                          DB $1F, $08, $2E, $08
  51++EC03 5F 0C 39 0C                          DB $5F, $0C, $39, $0C
  52++EC07 1F 00 31 00                          DB $1F, $00, $31, $00
  53++EC0B 3F 00 00 9A                          DB $3F, $00, $00, $9A
  54++EC0F BF 79 6F 3E                          DB $BF, $79, $6F, $3E
  55++EC13 3F 79 6F 3E                          DB $3F, $79, $6F, $3E
  56++EC17              Cobra_Mk_1NormalsSize:  equ $ - Cobra_Mk_1Normals
  57++EC17              Cobra_Mk_1Len:          equ $ - Cobra_Mk_1
  58++EC17
# file closed: ./Data/Ships/Cobra_Mk_1.asm
  98+ EC17                                      include "Data/Ships/Cobra_Mk_3_P.asm"
# file opened: ./Data/Ships/Cobra_Mk_3_P.asm
   1++EC17 01 23 41     Cobra_Mk_3_P:	        DB $01, $23, $41
   2++EC1A D7 EC                                DW Cobra_Mk_3_PEdges
   3++EC1C 98                                   DB Cobra_Mk_3_PEdgesSize
   4++EC1D 54 2A                                DB $54, $2A
   5++EC1F A8                                   DB Cobra_Mk_3_PVertSize
   6++EC20 26                                   DB Cobra_Mk_3_PEdgesCnt
   7++EC21 00 AF                                DB $00, $AF
   8++EC23 34                                   DB Cobra_Mk_3_PNormalsSize
   9++EC24 32 96 1C                             DB $32, $96, $1C
  10++EC27 6F ED                                DW Cobra_Mk_3_PNormals
  11++EC29 01 12                                DB $01, $12
  12++EC2B 2F EC                                DW Cobra_Mk_3_PVertices
  13++EC2D 00 00                                DB 0,0                      ; Type and Tactics
  14++EC2F 20 00 4C 1F  Cobra_Mk_3_PVertices:	DB $20, $00, $4C, $1F, $FF, $FF
  14++EC33 FF FF
  15++EC35 20 00 4C 9F                          DB $20, $00, $4C, $9F, $FF, $FF
  15++EC39 FF FF
  16++EC3B 00 1A 18 1F                          DB $00, $1A, $18, $1F, $FF, $FF
  16++EC3F FF FF
  17++EC41 78 03 08 FF                          DB $78, $03, $08, $FF, $73, $AA
  17++EC45 73 AA
  18++EC47 78 03 08 7F                          DB $78, $03, $08, $7F, $84, $CC
  18++EC4B 84 CC
  19++EC4D 58 10 28 BF                          DB $58, $10, $28, $BF, $FF, $FF
  19++EC51 FF FF
  20++EC53 58 10 28 3F                          DB $58, $10, $28, $3F, $FF, $FF
  20++EC57 FF FF
  21++EC59 80 08 28 7F                          DB $80, $08, $28, $7F, $98, $CC
  21++EC5D 98 CC
  22++EC5F 80 08 28 FF                          DB $80, $08, $28, $FF, $97, $AA
  22++EC63 97 AA
  23++EC65 00 1A 28 3F                          DB $00, $1A, $28, $3F, $65, $99
  23++EC69 65 99
  24++EC6B 20 18 28 FF                          DB $20, $18, $28, $FF, $A9, $BB
  24++EC6F A9 BB
  25++EC71 20 18 28 7F                          DB $20, $18, $28, $7F, $B9, $CC
  25++EC75 B9 CC
  26++EC77 24 08 28 B4                          DB $24, $08, $28, $B4, $99, $99
  26++EC7B 99 99
  27++EC7D 08 0C 28 B4                          DB $08, $0C, $28, $B4, $99, $99
  27++EC81 99 99
  28++EC83 08 0C 28 34                          DB $08, $0C, $28, $34, $99, $99
  28++EC87 99 99
  29++EC89 24 08 28 34                          DB $24, $08, $28, $34, $99, $99
  29++EC8D 99 99
  30++EC8F 24 0C 28 74                          DB $24, $0C, $28, $74, $99, $99
  30++EC93 99 99
  31++EC95 08 10 28 74                          DB $08, $10, $28, $74, $99, $99
  31++EC99 99 99
  32++EC9B 08 10 28 F4                          DB $08, $10, $28, $F4, $99, $99
  32++EC9F 99 99
  33++ECA1 24 0C 28 F4                          DB $24, $0C, $28, $F4, $99, $99
  33++ECA5 99 99
  34++ECA7 00 00 4C 06                          DB $00, $00, $4C, $06, $B0, $BB
  34++ECAB B0 BB
  35++ECAD 00 00 5A 1F                          DB $00, $00, $5A, $1F, $B0, $BB
  35++ECB1 B0 BB
  36++ECB3 50 06 28 E8                          DB $50, $06, $28, $E8, $99, $99
  36++ECB7 99 99
  37++ECB9 50 06 28 A8                          DB $50, $06, $28, $A8, $99, $99
  37++ECBD 99 99
  38++ECBF 58 00 28 A6                          DB $58, $00, $28, $A6, $99, $99
  38++ECC3 99 99
  39++ECC5 50 06 28 28                          DB $50, $06, $28, $28, $99, $99
  39++ECC9 99 99
  40++ECCB 58 00 28 26                          DB $58, $00, $28, $26, $99, $99
  40++ECCF 99 99
  41++ECD1 50 06 28 68                          DB $50, $06, $28, $68, $99, $99
  41++ECD5 99 99
  42++ECD7              Cobra_Mk_3_PVertSize:   equ $ - Cobra_Mk_3_PVertices
  43++ECD7 1F B0 00 04  Cobra_Mk_3_PEdges:	    DB $1F, $B0, $00, $04
  44++ECDB 1F C4 00 10                          DB $1F, $C4, $00, $10
  45++ECDF 1F A3 04 0C                          DB $1F, $A3, $04, $0C
  46++ECE3 1F A7 0C 20                          DB $1F, $A7, $0C, $20
  47++ECE7 1F C8 10 1C                          DB $1F, $C8, $10, $1C
  48++ECEB 1F 98 18 1C                          DB $1F, $98, $18, $1C
  49++ECEF 1F 96 18 24                          DB $1F, $96, $18, $24
  50++ECF3 1F 95 14 24                          DB $1F, $95, $14, $24
  51++ECF7 1F 97 14 20                          DB $1F, $97, $14, $20
  52++ECFB 1F 51 08 14                          DB $1F, $51, $08, $14
  53++ECFF 1F 62 08 18                          DB $1F, $62, $08, $18
  54++ED03 1F 73 0C 14                          DB $1F, $73, $0C, $14
  55++ED07 1F 84 10 18                          DB $1F, $84, $10, $18
  56++ED0B 1F 10 04 08                          DB $1F, $10, $04, $08
  57++ED0F 1F 20 00 08                          DB $1F, $20, $00, $08
  58++ED13 1F A9 20 28                          DB $1F, $A9, $20, $28
  59++ED17 1F B9 28 2C                          DB $1F, $B9, $28, $2C
  60++ED1B 1F C9 1C 2C                          DB $1F, $C9, $1C, $2C
  61++ED1F 1F BA 04 28                          DB $1F, $BA, $04, $28
  62++ED23 1F CB 00 2C                          DB $1F, $CB, $00, $2C
  63++ED27 1D 31 04 14                          DB $1D, $31, $04, $14
  64++ED2B 1D 42 00 18                          DB $1D, $42, $00, $18
  65++ED2F 06 B0 50 54                          DB $06, $B0, $50, $54
  66++ED33 14 99 30 34                          DB $14, $99, $30, $34
  67++ED37 14 99 48 4C                          DB $14, $99, $48, $4C
  68++ED3B 14 99 38 3C                          DB $14, $99, $38, $3C
  69++ED3F 14 99 40 44                          DB $14, $99, $40, $44
  70++ED43 13 99 3C 40                          DB $13, $99, $3C, $40
  71++ED47 11 99 38 44                          DB $11, $99, $38, $44
  72++ED4B 13 99 34 48                          DB $13, $99, $34, $48
  73++ED4F 13 99 30 4C                          DB $13, $99, $30, $4C
  74++ED53 1E 65 08 24                          DB $1E, $65, $08, $24
  75++ED57 06 99 58 60                          DB $06, $99, $58, $60
  76++ED5B 06 99 5C 60                          DB $06, $99, $5C, $60
  77++ED5F 08 99 58 5C                          DB $08, $99, $58, $5C
  78++ED63 06 99 64 68                          DB $06, $99, $64, $68
  79++ED67 06 99 68 6C                          DB $06, $99, $68, $6C
  80++ED6B 08 99 64 6C                          DB $08, $99, $64, $6C
  81++ED6F              Cobra_Mk_3_PEdgesSize:  equ $ - Cobra_Mk_3_PEdges
  82++ED6F              Cobra_Mk_3_PEdgesCnt:   equ Cobra_Mk_3_PEdgesSize/4
  83++ED6F 1F 00 3E 1F  Cobra_Mk_3_PNormals:	DB $1F, $00, $3E, $1F
  84++ED73 9F 12 37 10                          DB $9F, $12, $37, $10
  85++ED77 1F 12 37 10                          DB $1F, $12, $37, $10
  86++ED7B 9F 10 34 0E                          DB $9F, $10, $34, $0E
  87++ED7F 1F 10 34 0E                          DB $1F, $10, $34, $0E
  88++ED83 9F 0E 2F 00                          DB $9F, $0E, $2F, $00
  89++ED87 1F 0E 2F 00                          DB $1F, $0E, $2F, $00
  90++ED8B 9F 3D 66 00                          DB $9F, $3D, $66, $00
  91++ED8F 1F 3D 66 00                          DB $1F, $3D, $66, $00
  92++ED93 3F 00 00 50                          DB $3F, $00, $00, $50
  93++ED97 DF 07 2A 09                          DB $DF, $07, $2A, $09
  94++ED9B 5F 00 1E 06                          DB $5F, $00, $1E, $06
  95++ED9F 5F 07 2A 09                          DB $5F, $07, $2A, $09
  96++EDA3              Cobra_Mk_3_PNormalsSize:equ $ - Cobra_Mk_3_PNormals
  97++EDA3              Cobra_Mk_3_PLen:        equ $ - Cobra_Mk_3_P
  98++EDA3
# file closed: ./Data/Ships/Cobra_Mk_3_P.asm
  99+ EDA3                                      include "Data/Ships/Constrictor.asm"
# file opened: ./Data/Ships/Constrictor.asm
   1++EDA3              ;                      0    1    2    3   4   5   6   7   8   9   10  11  12  13  14  15   16                    17                  18  19     20                     21
   2++EDA3              ;					   Scp  Missile   Edg Edg Lin Gun Exp Vtx Edg Bounty  Face             Edg                   Face                           Vertices
   3++EDA3              ;                      Deb  Lock      Lo  Hi  x4  Vtx Cnt x6  X1  lo  hi  x4  Dot Erg Spd  hi                    Hi                  Q   Laser  Lo                     hi
   4++EDA3 F3 49 26     Constrictor:    	    DB $F3, $49, $26
   5++EDA6 21 EE                                DW ConstrictorEdges
   6++EDA8 60                                   DB ConstrictorEdgesSize
   7++EDA9 00 2E                                DB $00,$2E
   8++EDAB 66                                   DB ConstrictorVertSize
   9++EDAC 18                                   DB ConstrictorEdgesCnt
  10++EDAD 18 00                                DB $18,$00
  11++EDAF 28                                   DB ConstrictorNormalsSize
  12++EDB0 2D C8 37                             DB $2D,$C8,$37
  13++EDB3 81 EE                                DW ConstrictorNormals
  14++EDB5 02 2F                                DB $02,$2F
  15++EDB7 BB ED                                DW ConstrictorVertices
  16++EDB9 00 00                                DB 0,0                      ; Type and Tactics
  17++EDBB                                  ; missiles = 3
  18++EDBB 14 07 50 5F  ConstrictorVertices     DB $14, $07, $50, $5F, $02, $99
  18++EDBF 02 99
  19++EDC1 14 07 50 DF                          DB $14, $07, $50, $DF, $01, $99
  19++EDC5 01 99
  20++EDC7 36 07 28 DF                          DB $36, $07, $28, $DF, $14, $99
  20++EDCB 14 99
  21++EDCD 36 07 28 FF                          DB $36, $07, $28, $FF, $45, $89
  21++EDD1 45 89
  22++EDD3 14 0D 28 BF                          DB $14, $0D, $28, $BF, $56, $88
  22++EDD7 56 88
  23++EDD9 14 0D 28 3F                          DB $14, $0D, $28, $3F, $67, $88
  23++EDDD 67 88
  24++EDDF 36 07 28 7F                          DB $36, $07, $28, $7F, $37, $89
  24++EDE3 37 89
  25++EDE5 36 07 28 5F                          DB $36, $07, $28, $5F, $23, $99
  25++EDE9 23 99
  26++EDEB 14 0D 05 1F                          DB $14, $0D, $05, $1F, $FF, $FF
  26++EDEF FF FF
  27++EDF1 14 0D 05 9F                          DB $14, $0D, $05, $9F, $FF, $FF
  27++EDF5 FF FF
  28++EDF7 14 07 3E 52                          DB $14, $07, $3E, $52, $99, $99
  28++EDFB 99 99
  29++EDFD 14 07 3E D2                          DB $14, $07, $3E, $D2, $99, $99
  29++EE01 99 99
  30++EE03 19 07 19 72                          DB $19, $07, $19, $72, $99, $99
  30++EE07 99 99
  31++EE09 19 07 19 F2                          DB $19, $07, $19, $F2, $99, $99
  31++EE0D 99 99
  32++EE0F 0F 07 0F 6A                          DB $0F, $07, $0F, $6A, $99, $99
  32++EE13 99 99
  33++EE15 0F 07 0F EA                          DB $0F, $07, $0F, $EA, $99, $99
  33++EE19 99 99
  34++EE1B 00 07 00 40                          DB $00, $07, $00, $40, $9F, $01
  34++EE1F 9F 01
  35++EE21              ConstrictorVertSize     equ $  - ConstrictorVertices
  36++EE21 1F 09 00 04  ConstrictorEdges        DB $1F, $09, $00, $04, $1F, $19, $04, $08
  36++EE25 1F 19 04 08
  37++EE29 1F 01 04 24                          DB $1F, $01, $04, $24, $1F, $02, $00, $20
  37++EE2D 1F 02 00 20
  38++EE31 1F 29 00 1C                          DB $1F, $29, $00, $1C, $1F, $23, $1C, $20
  38++EE35 1F 23 1C 20
  39++EE39 1F 14 08 24                          DB $1F, $14, $08, $24, $1F, $49, $08, $0C
  39++EE3D 1F 49 08 0C
  40++EE41 1F 39 18 1C                          DB $1F, $39, $18, $1C, $1F, $37, $18, $20
  40++EE45 1F 37 18 20
  41++EE49 1F 67 14 20                          DB $1F, $67, $14, $20, $1F, $56, $10, $24
  41++EE4D 1F 56 10 24
  42++EE51 1F 45 0C 24                          DB $1F, $45, $0C, $24, $1F, $58, $0C, $10
  42++EE55 1F 58 0C 10
  43++EE59 1F 68 10 14                          DB $1F, $68, $10, $14, $1F, $78, $14, $18
  43++EE5D 1F 78 14 18
  44++EE61 1F 89 0C 18                          DB $1F, $89, $0C, $18, $1F, $06, $20, $24
  44++EE65 1F 06 20 24
  45++EE69 12 99 28 30                          DB $12, $99, $28, $30, $05, $99, $30, $38
  45++EE6D 05 99 30 38
  46++EE71 0A 99 38 28                          DB $0A, $99, $38, $28, $0A, $99, $2C, $3C
  46++EE75 0A 99 2C 3C
  47++EE79 05 99 34 3C                          DB $05, $99, $34, $3C, $12, $99, $2C, $34
  47++EE7D 12 99 2C 34
  48++EE81              ConstrictorEdgesSize    equ $  - ConstrictorEdges
  49++EE81              ConstrictorEdgesCnt     equ ConstrictorEdgesSize/4
  50++EE81 1F 00 37 0F  ConstrictorNormals      DB $1F, $00, $37, $0F, $9F, $18, $4B, $14
  50++EE85 9F 18 4B 14
  51++EE89 1F 18 4B 14                          DB $1F, $18, $4B, $14, $1F, $2C, $4B, $00
  51++EE8D 1F 2C 4B 00
  52++EE91 9F 2C 4B 00                          DB $9F, $2C, $4B, $00, $9F, $2C, $4B, $00
  52++EE95 9F 2C 4B 00
  53++EE99 1F 00 35 00                          DB $1F, $00, $35, $00, $1F, $2C, $4B, $00
  53++EE9D 1F 2C 4B 00
  54++EEA1 3F 00 00 A0                          DB $3F, $00, $00, $A0, $5F, $00, $1B, $00
  54++EEA5 5F 00 1B 00
  55++EEA9              ConstrictorNormalsSize  equ $  - ConstrictorNormals
  56++EEA9              ConstrictorLen          equ $  - Constrictor
  57++EEA9
# file closed: ./Data/Ships/Constrictor.asm
 100+ EEA9                                      include "Data/Ships/Coriolis.asm"
# file opened: ./Data/Ships/Coriolis.asm
   1++EEA9 00 64 00     Coriolis:	            DB $00, $64, $00
   2++EEAC 21 EF                                DW CoriolisEdges
   3++EEAE 70                                   DB CoriolisEdgesSize
   4++EEAF 00 36                                DB $00, $36
   5++EEB1 60                                   DB CoriolisVertSize
   6++EEB2 1C                                   DB CoriolisEdgesCnt
   7++EEB3 00 00                                DB $00, $00
   8++EEB5 38                                   DB CoriolisNormalsSize
   9++EEB6 78 F0 00                             DB $78, $F0, $00
  10++EEB9 91 EF                                DW CoriolisNormals
  11++EEBB 00 06                                DB $00, $06
  12++EEBD C1 EE                                DW CoriolisVertices
  13++EEBF 02 00                                DB ShipTypeStation,0                      ; Type and Tactics
  14++EEC1 A0 00 A0 1F  CoriolisVertices:	    DB $A0, $00, $A0, $1F, $10, $62
  14++EEC5 10 62
  15++EEC7 00 A0 A0 1F                          DB $00, $A0, $A0, $1F, $20, $83
  15++EECB 20 83
  16++EECD A0 00 A0 9F                          DB $A0, $00, $A0, $9F, $30, $74
  16++EED1 30 74
  17++EED3 00 A0 A0 5F                          DB $00, $A0, $A0, $5F, $10, $54
  17++EED7 10 54
  18++EED9 A0 A0 00 5F                          DB $A0, $A0, $00, $5F, $51, $A6
  18++EEDD 51 A6
  19++EEDF A0 A0 00 1F                          DB $A0, $A0, $00, $1F, $62, $B8
  19++EEE3 62 B8
  20++EEE5 A0 A0 00 9F                          DB $A0, $A0, $00, $9F, $73, $C8
  20++EEE9 73 C8
  21++EEEB A0 A0 00 DF                          DB $A0, $A0, $00, $DF, $54, $97
  21++EEEF 54 97
  22++EEF1 A0 00 A0 3F                          DB $A0, $00, $A0, $3F, $A6, $DB
  22++EEF5 A6 DB
  23++EEF7 00 A0 A0 3F                          DB $00, $A0, $A0, $3F, $B8, $DC
  23++EEFB B8 DC
  24++EEFD A0 00 A0 BF                          DB $A0, $00, $A0, $BF, $97, $DC
  24++EF01 97 DC
  25++EF03 00 A0 A0 7F                          DB $00, $A0, $A0, $7F, $95, $DA
  25++EF07 95 DA
  26++EF09 0A 1E A0 5E                          DB $0A, $1E, $A0, $5E, $00, $00
  26++EF0D 00 00
  27++EF0F 0A 1E A0 1E                          DB $0A, $1E, $A0, $1E, $00, $00
  27++EF13 00 00
  28++EF15 0A 1E A0 9E                          DB $0A, $1E, $A0, $9E, $00, $00
  28++EF19 00 00
  29++EF1B 0A 1E A0 DE                          DB $0A, $1E, $A0, $DE, $00, $00
  29++EF1F 00 00
  30++EF21              CoriolisVertSize:       equ $ - CoriolisVertices
  31++EF21 1F 10 00 0C  CoriolisEdges:	        DB $1F, $10, $00, $0C
  32++EF25 1F 20 00 04                          DB $1F, $20, $00, $04
  33++EF29 1F 30 04 08                          DB $1F, $30, $04, $08
  34++EF2D 1F 40 08 0C                          DB $1F, $40, $08, $0C
  35++EF31 1F 51 0C 10                          DB $1F, $51, $0C, $10
  36++EF35 1F 61 00 10                          DB $1F, $61, $00, $10
  37++EF39 1F 62 00 14                          DB $1F, $62, $00, $14
  38++EF3D 1F 82 14 04                          DB $1F, $82, $14, $04
  39++EF41 1F 83 04 18                          DB $1F, $83, $04, $18
  40++EF45 1F 73 08 18                          DB $1F, $73, $08, $18
  41++EF49 1F 74 08 1C                          DB $1F, $74, $08, $1C
  42++EF4D 1F 54 0C 1C                          DB $1F, $54, $0C, $1C
  43++EF51 1F DA 20 2C                          DB $1F, $DA, $20, $2C
  44++EF55 1F DB 20 24                          DB $1F, $DB, $20, $24
  45++EF59 1F DC 24 28                          DB $1F, $DC, $24, $28
  46++EF5D 1F D9 28 2C                          DB $1F, $D9, $28, $2C
  47++EF61 1F A5 10 2C                          DB $1F, $A5, $10, $2C
  48++EF65 1F A6 10 20                          DB $1F, $A6, $10, $20
  49++EF69 1F B6 14 20                          DB $1F, $B6, $14, $20
  50++EF6D 1F B8 14 24                          DB $1F, $B8, $14, $24
  51++EF71 1F C8 18 24                          DB $1F, $C8, $18, $24
  52++EF75 1F C7 18 28                          DB $1F, $C7, $18, $28
  53++EF79 1F 97 1C 28                          DB $1F, $97, $1C, $28
  54++EF7D 1F 95 1C 2C                          DB $1F, $95, $1C, $2C
  55++EF81 1E 00 30 34                          DB $1E, $00, $30, $34
  56++EF85 1E 00 34 38                          DB $1E, $00, $34, $38
  57++EF89 1E 00 38 3C                          DB $1E, $00, $38, $3C
  58++EF8D 1E 00 3C 30                          DB $1E, $00, $3C, $30
  59++EF91              CoriolisEdgesSize:      equ $ - CoriolisEdges
  60++EF91              CoriolisEdgesCnt:       equ CoriolisEdgesSize/4
  61++EF91 1F 00 00 A0  CoriolisNormals:	    DB $1F, $00, $00, $A0
  62++EF95 5F 6B 6B 6B                          DB $5F, $6B, $6B, $6B
  63++EF99 1F 6B 6B 6B                          DB $1F, $6B, $6B, $6B
  64++EF9D 9F 6B 6B 6B                          DB $9F, $6B, $6B, $6B
  65++EFA1 DF 6B 6B 6B                          DB $DF, $6B, $6B, $6B
  66++EFA5 5F 00 A0 00                          DB $5F, $00, $A0, $00
  67++EFA9 1F A0 00 00                          DB $1F, $A0, $00, $00
  68++EFAD 9F A0 00 00                          DB $9F, $A0, $00, $00
  69++EFB1 1F 00 A0 00                          DB $1F, $00, $A0, $00
  70++EFB5 FF 6B 6B 6B                          DB $FF, $6B, $6B, $6B
  71++EFB9 7F 6B 6B 6B                          DB $7F, $6B, $6B, $6B
  72++EFBD 3F 6B 6B 6B                          DB $3F, $6B, $6B, $6B
  73++EFC1 BF 6B 6B 6B                          DB $BF, $6B, $6B, $6B
  74++EFC5 3F 00 00 A0                          DB $3F, $00, $00, $A0
  75++EFC9              CoriolisNormalsSize:    equ $ - CoriolisNormals
  76++EFC9              CoriolisLen:            equ $ - Coriolis
  77++EFC9
# file closed: ./Data/Ships/Coriolis.asm
 101+ EFC9                                      include "Data/Ships/Cougar.asm"
# file opened: ./Data/Ships/Cougar.asm
   1++EFC9 03 13 24     Cougar:	                DB $03, $13, $24
   2++EFCC 53 F0                                DW CougarEdges
   3++EFCE 64                                   DB CougarEdgesSize
   4++EFCF 00 2A                                DB $00, $2A
   5++EFD1 72                                   DB CougarVertSize
   6++EFD2 19                                   DB CougarEdgesCnt
   7++EFD3 00 00                                DB $00, $00
   8++EFD5 18                                   DB CougarNormalsSize
   9++EFD6 22 FC 28                             DB $22, $FC, $28
  10++EFD9 B7 F0                                DW CougarNormals
  11++EFDB 02 34                                DB $02, $34
  12++EFDD E1 EF                                DW CougarVertices
  13++EFDF 00 00                                DB 0,0                      ; Type and Tactics
  14++EFE1 00 05 43 1F  CougarVertices:	        DB $00, $05, $43, $1F, $02, $44
  14++EFE5 02 44
  15++EFE7 14 00 28 9F                          DB $14, $00, $28, $9F, $01, $22
  15++EFEB 01 22
  16++EFED 28 00 28 BF                          DB $28, $00, $28, $BF, $01, $55
  16++EFF1 01 55
  17++EFF3 00 0E 28 3E                          DB $00, $0E, $28, $3E, $04, $55
  17++EFF7 04 55
  18++EFF9 00 0E 28 7E                          DB $00, $0E, $28, $7E, $12, $35
  18++EFFD 12 35
  19++EFFF 14 00 28 1F                          DB $14, $00, $28, $1F, $23, $44
  19++F003 23 44
  20++F005 28 00 28 3F                          DB $28, $00, $28, $3F, $34, $55
  20++F009 34 55
  21++F00B 24 00 38 9F                          DB $24, $00, $38, $9F, $01, $11
  21++F00F 01 11
  22++F011 3C 00 14 BF                          DB $3C, $00, $14, $BF, $01, $11
  22++F015 01 11
  23++F017 24 00 38 1F                          DB $24, $00, $38, $1F, $34, $44
  23++F01B 34 44
  24++F01D 3C 00 14 3F                          DB $3C, $00, $14, $3F, $34, $44
  24++F021 34 44
  25++F023 00 07 23 12                          DB $00, $07, $23, $12, $00, $44
  25++F027 00 44
  26++F029 00 08 19 14                          DB $00, $08, $19, $14, $00, $44
  26++F02D 00 44
  27++F02F 0C 02 2D 94                          DB $0C, $02, $2D, $94, $00, $00
  27++F033 00 00
  28++F035 0C 02 2D 14                          DB $0C, $02, $2D, $14, $44, $44
  28++F039 44 44
  29++F03B 0A 06 28 B4                          DB $0A, $06, $28, $B4, $55, $55
  29++F03F 55 55
  30++F041 0A 06 28 F4                          DB $0A, $06, $28, $F4, $55, $55
  30++F045 55 55
  31++F047 0A 06 28 74                          DB $0A, $06, $28, $74, $55, $55
  31++F04B 55 55
  32++F04D 0A 06 28 34                          DB $0A, $06, $28, $34, $55, $55
  32++F051 55 55
  33++F053              CougarVertSize:         equ $ - CougarVertices
  34++F053 1F 02 00 04  CougarEdges:	        DB $1F, $02, $00, $04
  35++F057 1F 01 04 1C                          DB $1F, $01, $04, $1C
  36++F05B 1F 01 1C 20                          DB $1F, $01, $1C, $20
  37++F05F 1F 01 20 08                          DB $1F, $01, $20, $08
  38++F063 1E 05 08 0C                          DB $1E, $05, $08, $0C
  39++F067 1E 45 0C 18                          DB $1E, $45, $0C, $18
  40++F06B 1E 15 08 10                          DB $1E, $15, $08, $10
  41++F06F 1E 35 10 18                          DB $1E, $35, $10, $18
  42++F073 1F 34 18 28                          DB $1F, $34, $18, $28
  43++F077 1F 34 28 24                          DB $1F, $34, $28, $24
  44++F07B 1F 34 24 14                          DB $1F, $34, $24, $14
  45++F07F 1F 24 14 00                          DB $1F, $24, $14, $00
  46++F083 1B 04 00 0C                          DB $1B, $04, $00, $0C
  47++F087 1B 12 04 10                          DB $1B, $12, $04, $10
  48++F08B 1B 23 14 10                          DB $1B, $23, $14, $10
  49++F08F 1A 01 04 08                          DB $1A, $01, $04, $08
  50++F093 1A 34 14 18                          DB $1A, $34, $14, $18
  51++F097 14 00 30 34                          DB $14, $00, $30, $34
  52++F09B 12 00 34 2C                          DB $12, $00, $34, $2C
  53++F09F 12 44 2C 38                          DB $12, $44, $2C, $38
  54++F0A3 14 44 38 30                          DB $14, $44, $38, $30
  55++F0A7 12 55 3C 40                          DB $12, $55, $3C, $40
  56++F0AB 14 55 40 48                          DB $14, $55, $40, $48
  57++F0AF 12 55 48 44                          DB $12, $55, $48, $44
  58++F0B3 14 55 44 3C                          DB $14, $55, $44, $3C
  59++F0B7              CougarEdgesSize:        equ $ - CougarEdges
  60++F0B7              CougarEdgesCnt:         equ CougarEdgesSize/4
  61++F0B7 9F 10 2E 04  CougarNormals:	        DB $9F, $10, $2E, $04
  62++F0BB DF 10 2E 04                          DB $DF, $10, $2E, $04
  63++F0BF 5F 00 1B 05                          DB $5F, $00, $1B, $05
  64++F0C3 5F 10 2E 04                          DB $5F, $10, $2E, $04
  65++F0C7 1F 10 2E 04                          DB $1F, $10, $2E, $04
  66++F0CB 3E 00 00 A0                          DB $3E, $00, $00, $A0
  67++F0CF              CougarNormalsSize:      equ $ - CougarNormals
  68++F0CF              CougarLen:              equ $ - Cougar
  69++F0CF
# file closed: ./Data/Ships/Cougar.asm
 102+ F0CF                                      include "Data/Ships/Dodo.asm"
# file opened: ./Data/Ships/Dodo.asm
   1++F0CF 00 7E 90     Dodo:	                DB $00, $7E, $90
   2++F0D2 77 F1                                DW DodoEdges
   3++F0D4 88                                   DB DodoEdgesSize
   4++F0D5 00 36                                DB $00, $36
   5++F0D7 90                                   DB DodoVertSize
   6++F0D8 22                                   DB DodoEdgesCnt
   7++F0D9 00 00                                DB $00, $00
   8++F0DB 30                                   DB DodoNormalsSize
   9++F0DC 7D F0 00                             DB $7D, $F0, $00
  10++F0DF FF F1                                DW DodoNormals
  11++F0E1 00 00                                DB $00, $00
  12++F0E3 E7 F0                                DW DodoVertices
  13++F0E5 02 00                                DB ShipTypeStation,0                      ; Type and Tactics
  14++F0E7 00 96 C4 1F  DodoVertices:	        DB $00, $96, $C4, $1F, $01, $55
  14++F0EB 01 55
  15++F0ED 8F 2E C4 1F                          DB $8F, $2E, $C4, $1F, $01, $22
  15++F0F1 01 22
  16++F0F3 58 79 C4 5F                          DB $58, $79, $C4, $5F, $02, $33
  16++F0F7 02 33
  17++F0F9 58 79 C4 DF                          DB $58, $79, $C4, $DF, $03, $44
  17++F0FD 03 44
  18++F0FF 8F 2E C4 9F                          DB $8F, $2E, $C4, $9F, $04, $55
  18++F103 04 55
  19++F105 00 F3 2E 1F                          DB $00, $F3, $2E, $1F, $15, $66
  19++F109 15 66
  20++F10B E7 4B 2E 1F                          DB $E7, $4B, $2E, $1F, $12, $77
  20++F10F 12 77
  21++F111 8F C4 2E 5F                          DB $8F, $C4, $2E, $5F, $23, $88
  21++F115 23 88
  22++F117 8F C4 2E DF                          DB $8F, $C4, $2E, $DF, $34, $99
  22++F11B 34 99
  23++F11D E7 4B 2E 9F                          DB $E7, $4B, $2E, $9F, $45, $AA
  23++F121 45 AA
  24++F123 8F C4 2E 3F                          DB $8F, $C4, $2E, $3F, $16, $77
  24++F127 16 77
  25++F129 E7 4B 2E 7F                          DB $E7, $4B, $2E, $7F, $27, $88
  25++F12D 27 88
  26++F12F 00 F3 2E 7F                          DB $00, $F3, $2E, $7F, $38, $99
  26++F133 38 99
  27++F135 E7 4B 2E FF                          DB $E7, $4B, $2E, $FF, $49, $AA
  27++F139 49 AA
  28++F13B 8F C4 2E BF                          DB $8F, $C4, $2E, $BF, $56, $AA
  28++F13F 56 AA
  29++F141 58 79 C4 3F                          DB $58, $79, $C4, $3F, $67, $BB
  29++F145 67 BB
  30++F147 8F 2E C4 7F                          DB $8F, $2E, $C4, $7F, $78, $BB
  30++F14B 78 BB
  31++F14D 00 96 C4 7F                          DB $00, $96, $C4, $7F, $89, $BB
  31++F151 89 BB
  32++F153 8F 2E C4 FF                          DB $8F, $2E, $C4, $FF, $9A, $BB
  32++F157 9A BB
  33++F159 58 79 C4 BF                          DB $58, $79, $C4, $BF, $6A, $BB
  33++F15D 6A BB
  34++F15F 10 20 C4 9E                          DB $10, $20, $C4, $9E, $00, $00
  34++F163 00 00
  35++F165 10 20 C4 DE                          DB $10, $20, $C4, $DE, $00, $00
  35++F169 00 00
  36++F16B 10 20 C4 17                          DB $10, $20, $C4, $17, $00, $00
  36++F16F 00 00
  37++F171 10 20 C4 57                          DB $10, $20, $C4, $57, $00, $00
  37++F175 00 00
  38++F177              DodoVertSize:           equ $ - DodoVertices
  39++F177 1F 01 00 04  DodoEdges:	            DB $1F, $01, $00, $04
  40++F17B 1F 02 04 08                          DB $1F, $02, $04, $08
  41++F17F 1F 03 08 0C                          DB $1F, $03, $08, $0C
  42++F183 1F 04 0C 10                          DB $1F, $04, $0C, $10
  43++F187 1F 05 10 00                          DB $1F, $05, $10, $00
  44++F18B 1F 16 14 28                          DB $1F, $16, $14, $28
  45++F18F 1F 17 28 18                          DB $1F, $17, $28, $18
  46++F193 1F 27 18 2C                          DB $1F, $27, $18, $2C
  47++F197 1F 28 2C 1C                          DB $1F, $28, $2C, $1C
  48++F19B 1F 38 1C 30                          DB $1F, $38, $1C, $30
  49++F19F 1F 39 30 20                          DB $1F, $39, $30, $20
  50++F1A3 1F 49 20 34                          DB $1F, $49, $20, $34
  51++F1A7 1F 4A 34 24                          DB $1F, $4A, $34, $24
  52++F1AB 1F 5A 24 38                          DB $1F, $5A, $24, $38
  53++F1AF 1F 56 38 14                          DB $1F, $56, $38, $14
  54++F1B3 1F 7B 3C 40                          DB $1F, $7B, $3C, $40
  55++F1B7 1F 8B 40 44                          DB $1F, $8B, $40, $44
  56++F1BB 1F 9B 44 48                          DB $1F, $9B, $44, $48
  57++F1BF 1F AB 48 4C                          DB $1F, $AB, $48, $4C
  58++F1C3 1F 6B 4C 3C                          DB $1F, $6B, $4C, $3C
  59++F1C7 1F 15 00 14                          DB $1F, $15, $00, $14
  60++F1CB 1F 12 04 18                          DB $1F, $12, $04, $18
  61++F1CF 1F 23 08 1C                          DB $1F, $23, $08, $1C
  62++F1D3 1F 34 0C 20                          DB $1F, $34, $0C, $20
  63++F1D7 1F 45 10 24                          DB $1F, $45, $10, $24
  64++F1DB 1F 67 28 3C                          DB $1F, $67, $28, $3C
  65++F1DF 1F 78 2C 40                          DB $1F, $78, $2C, $40
  66++F1E3 1F 89 30 44                          DB $1F, $89, $30, $44
  67++F1E7 1F 9A 34 48                          DB $1F, $9A, $34, $48
  68++F1EB 1F 6A 38 4C                          DB $1F, $6A, $38, $4C
  69++F1EF 1E 00 50 54                          DB $1E, $00, $50, $54
  70++F1F3 14 00 54 5C                          DB $14, $00, $54, $5C
  71++F1F7 17 00 5C 58                          DB $17, $00, $5C, $58
  72++F1FB 14 00 58 50                          DB $14, $00, $58, $50
  73++F1FF              DodoEdgesSize:          equ $ - DodoEdges
  74++F1FF              DodoEdgesCnt:           equ DodoEdgesSize/4
  75++F1FF 1F 00 00 C4  DodoNormals:	        DB $1F, $00, $00, $C4
  76++F203 1F 67 8E 58                          DB $1F, $67, $8E, $58
  77++F207 5F A9 37 59                          DB $5F, $A9, $37, $59
  78++F20B 5F 00 B0 58                          DB $5F, $00, $B0, $58
  79++F20F DF A9 37 59                          DB $DF, $A9, $37, $59
  80++F213 9F 67 8E 58                          DB $9F, $67, $8E, $58
  81++F217 3F 00 B0 58                          DB $3F, $00, $B0, $58
  82++F21B 3F A9 37 59                          DB $3F, $A9, $37, $59
  83++F21F 7F 67 8E 58                          DB $7F, $67, $8E, $58
  84++F223 FF 67 8E 58                          DB $FF, $67, $8E, $58
  85++F227 BF A9 37 59                          DB $BF, $A9, $37, $59
  86++F22B 3F 00 00 C4                          DB $3F, $00, $00, $C4
  87++F22F              DodoNormalsSize:        equ $ - DodoNormals
  88++F22F              DodoLen:                equ $ - Dodo
  89++F22F
# file closed: ./Data/Ships/Dodo.asm
# file closed: ./Data/ShipModelMetaData1.asm
1138  F22F              ; Bank 67  ------------------------------------------------------------------------------------------------------------------------
1139  F22F                  SLOT    ShipModelsAddr
1140  F22F                  PAGE    BankShipModels2
1141  F22F              	ORG     ShipModelsAddr, BankShipModels2
1142  E000
1143  E000                  INCLUDE "./Data/ShipBank2Label.asm"
# file opened: ./Data/ShipBank2Label.asm
   1+ E000 53 68 69 70  ShipBank2Label:         DB  "ShipBank2      "
   1+ E004 42 61 6E 6B
   1+ E008 32 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank2Label.asm
1144  E00F              GetShipBank2Id:         MGetShipBankId ShipBankTable2
1144  E00F 06 00       >                        ld      b,0
1144  E011 4F          >                        ld      c,a                                 ; c= original ship id
1144  E012 CB 3F       >.ShiftLoop:             srl     a
1144  E014 CB 3F       >                        srl     a
1144  E016 CB 3F       >                        srl     a
1144  E018 CB 3F       >                        srl     a                                   ; divide by 16
1144  E01A 47          >                        ld      b,a                                 ; b = bank nbr
1144  E01B 79          >                        ld      a,c
1144  E01C 50          >                        ld      d,b
1144  E01D 1E 10       >                        ld      e,16
1144  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
1144  E021 93          >                        sub     e                                   ; a= actual model id now
1144  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
1144  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
1144  E024 7A          >                        ld      a,d                                 ; a = bank number
1144  E025             >;.. Now b = bank and a = adjusted ship nbr
1144  E025 21 62 E0    >                        ld      hl,ShipBankTable2                        ; a= bank index
1144  E028 ED 31       >                        add     hl,a
1144  E02A ED 31       >                        add     hl,a
1144  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
1144  E02D             >                        ClearCarryFlag
1144  E02D B7          >                    or a
1144  E02E C9          >                        ret
1145  E02F              CopyVertsToUniv2:       McopyVertsToUniverse
1145  E02F 2A 18 C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
1145  E032 11 1C C3    >                        ld          de,UBnkHullVerticies
1145  E035 06 00       >                        ld          b,0
1145  E037 3A 0C C3    >                        ld			a,(VertexCtX6Addr)
1145  E03A 4F          >                        ld          c,a
1145  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1145  E03C CD 3D 8F    >                        call        memcopy_dma
1145  E03F C9          >                        ret
1146  E040              CopyEdgesToUniv2:       McopyEdgesToUniverse
1146  E040 2A 07 C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
1146  E043 11 48 C4    >                        ld          de,UBnkHullEdges
1146  E046 06 00       >                        ld          b,0
1146  E048 3A 09 C3    >                        ld			a,(LineX4Addr)
1146  E04B 4F          >                        ld          c,a
1146  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1146  E04D CD 3D 8F    >                        call        memcopy_dma
1146  E050 C9          >                        ret
1147  E051              CopyNormsToUniv2:       McopyNormsToUniverse
1147  E051 2A 14 C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
1147  E054 11 F8 C8    >                        ld          de,UBnkHullNormals
1147  E057 06 00       >                        ld          b,0
1147  E059 3A 10 C3    >                        ld          a,(FaceCtX4Addr)
1147  E05C 4F          >                        ld          c,a
1147  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1147  E05E CD 3D 8F    >                        call        memcopy_dma
1147  E061 C9          >                        ret
1148  E062              ShipBankTable2:         MShipBankTable
1148  E062 3B 00       >                        DW      BankShipModels1
1148  E064 43 00       >                        DW      BankShipModels2
1148  E066 44 00       >                        DW      BankShipModels3
1148  E068 45 00       >                        DW      BankShipModels4
1149  E06A              CopyShipToUniverse2     MCopyShipToUniverse     BankShipModels2
1149  E06A 21 02 C3    >                        ld          hl,UBnkShipModelBank
1149  E06D 36 43       >                        ld          (hl),BankShipModels2
1149  E06F 32 03 C3    >                        ld          (UBnkShipModelNbr),a
1149  E072 21 1F E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
1149  E075 ED 31       >                        add         hl,a
1149  E077 ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
1149  E079 4E          >                        ld          c,(hl)
1149  E07A 23          >                        inc         hl
1149  E07B 46          >                        ld          b,(hl)                      ; bc now equals length of data set
1149  E07C 21 9F E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
1149  E07F ED 31       >                        add         hl,a
1149  E081 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
1149  E083 7E          >                        ld          a,(hl)
1149  E084 23          >                        inc         hl
1149  E085 66          >                        ld          h,(hl)
1149  E086 6F          >                        ld          l,a                         ; now hl = address of ship hull data
1149  E087 11 04 C3    >                        ld          de,UBnkHullCopy             ; Universe bank
1149  E08A 01 18 00    >                        ld          bc,ShipDataLength
1149  E08D ED B0       >                        ldir
1149  E08F CD 2F E0    >                        call        CopyVertsToUniv
1149  E092 CD 40 E0    >                        call        CopyEdgesToUniv
1149  E095 CD 51 E0    >                        call        CopyNormsToUniv
1149  E098 C9          >                        ret
1150  E099              CopyBodyToUniverse2:    MCopyBodyToUniverse     CopyShipToUniverse2
1150  E099 3E 0D       >                        ld          a,13
1150  E09B CD 6A E0    >                        call        CopyShipToUniverse2
1150  E09E C9          >                        ret
1151  E09F
1152  E09F                  INCLUDE "./Data/ShipModelMetaData2.asm"
# file opened: ./Data/ShipModelMetaData2.asm
   1+ E09F 3F E1        ShipModelTable2:         DW Dragon                                  ;16
   2+ E0A1 19 E2                                 DW Escape_Pod                              ;17
   3+ E0A3 71 E2                                 DW Fer_De_Lance                            ;18
   4+ E0A5 8F E3                                 DW Gecko                                   ;19
   5+ E0A7 57 E4                                 DW Ghavial                                 ;20
   6+ E0A9 3F E5                                 DW Iguana                                  ;21
   7+ E0AB 35 E6                                 DW Krait                                   ;22
   8+ E0AD 1F E7                                 DW Logo                                    ;23
   9+ E0AF DB E8                                 DW Mamba                                   ;24
  10+ E0B1 0D EA                                 DW Missile                                 ;25
  11+ E0B3 0F EB                                 DW Monitor                                 ;26
  12+ E0B5 15 EC                                 DW Moray                                   ;27
  13+ E0B7 F1 EC                                 DW Ophidian                                ;28
  14+ E0B9 29 EE                                 DW Plate                                   ;29
  15+ E0BB 67 EE                                 DW Python                                  ;30
  16+ E0BD 5D EF                                 DW Python_P                                ;31
  17+ E0BF 57 E1        ShipVertexTable2:        DW DragonVertices
  18+ E0C1 31 E2                                 DW Escape_PodVertices
  19+ E0C3 89 E2                                 DW Fer_De_LanceVertices
  20+ E0C5 A7 E3                                 DW GeckoVertices
  21+ E0C7 6F E4                                 DW GhavialVertices
  22+ E0C9 57 E5                                 DW IguanaVertices
  23+ E0CB 4D E6                                 DW KraitVertices
  24+ E0CD 37 E7                                 DW LogoVertices
  25+ E0CF F3 E8                                 DW MambaVertices
  26+ E0D1 25 EA                                 DW MissileVertices
  27+ E0D3 27 EB                                 DW MonitorVertices
  28+ E0D5 2D EC                                 DW MorayVertices
  29+ E0D7 09 ED                                 DW OphidianVertices
  30+ E0D9 41 EE                                 DW PlateVertices
  31+ E0DB 7F EE                                 DW PythonVertices
  32+ E0DD 75 EF                                 DW Python_PVertices
  33+ E0DF 8D E1        ShipEdgeTable2:          DW DragonEdges
  34+ E0E1 49 E2                                 DW Escape_PodEdges
  35+ E0E3 FB E2                                 DW Fer_De_LanceEdges
  36+ E0E5 EF E3                                 DW GeckoEdges
  37+ E0E7 B7 E4                                 DW GhavialEdges
  38+ E0E9 B1 E5                                 DW IguanaEdges
  39+ E0EB B3 E6                                 DW KraitEdges
  40+ E0ED 33 E8                                 DW LogoEdges
  41+ E0EF 89 E9                                 DW MambaEdges
  42+ E0F1 8B EA                                 DW MissileEdges
  43+ E0F3 8D EB                                 DW MonitorEdges
  44+ E0F5 81 EC                                 DW MorayEdges
  45+ E0F7 81 ED                                 DW OphidianEdges
  46+ E0F9 53 EE                                 DW PlateEdges
  47+ E0FB C1 EE                                 DW PythonEdges
  48+ E0FD B7 EF                                 DW Python_PEdges
  49+ E0FF E1 E1        ShipNormalTable2:        DW DragonNormals
  50+ E101 61 E2                                 DW Escape_PodNormals
  51+ E103 67 E3                                 DW Fer_De_LanceNormals
  52+ E105 33 E4                                 DW GeckoNormals
  53+ E107 0F E5                                 DW GhavialNormals
  54+ E109 0D E6                                 DW IguanaNormals
  55+ E10B 07 E7                                 DW KraitNormals
  56+ E10D C7 E8                                 DW LogoNormals
  57+ E10F F9 E9                                 DW MambaNormals
  58+ E111 EB EA                                 DW MissileNormals
  59+ E113 E9 EB                                 DW MonitorNormals
  60+ E115 CD EC                                 DW MorayNormals
  61+ E117 F9 ED                                 DW OphidianNormals
  62+ E119 63 EE                                 DW PlateNormals
  63+ E11B 29 EF                                 DW PythonNormals
  64+ E11D 1F F0                                 DW Python_PNormals
  65+ E11F DA 00        ShipModelSizeTable2:     DW DragonLen
  66+ E121 58 00                                 DW Escape_PodLen
  67+ E123 1E 01                                 DW Fer_De_LanceLen
  68+ E125 C8 00                                 DW GeckoLen
  69+ E127 E8 00                                 DW GhavialLen
  70+ E129 F6 00                                 DW IguanaLen
  71+ E12B EA 00                                 DW KraitLen
  72+ E12D BC 01                                 DW LogoLen
  73+ E12F 32 01                                 DW MambaLen
  74+ E131 02 01                                 DW MissileLen
  75+ E133 06 01                                 DW MonitorLen
  76+ E135 DC 00                                 DW MorayLen
  77+ E137 38 01                                 DW OphidianLen
  78+ E139 3E 00                                 DW PlateLen
  79+ E13B F6 00                                 DW PythonLen
  80+ E13D F6 00                                 DW Python_PLen
  81+ E13F
  82+ E13F                                      include "Data/Ships/Dragon.asm"
# file opened: ./Data/Ships/Dragon.asm
   1++E13F 00 66 50     Dragon:	                DB $00, $66, $50
   2++E142 8D E1                                DW DragonEdges
   3++E144 54                                   DB DragonEdgesSize
   4++E145 00 3C                                DB $00, $3C
   5++E147 36                                   DB DragonVertSize
   6++E148 15                                   DB DragonEdgesCnt
   7++E149 00 00                                DB $00, $00
   8++E14B 38                                   DB DragonNormalsSize
   9++E14C 20 F7 14                             DB $20, $F7, $14
  10++E14F E1 E1                                DW DragonNormals
  11++E151 00 47                                DB $00, $47
  12++E153 57 E1                                DW DragonVertices
  13++E155 00 00                                DB 0,0                      ; Type and Tactics
  14++E157 00 00 FA 1F  DragonVertices:	        DB $00, $00, $FA, $1F, $6B, $05
  14++E15B 6B 05
  15++E15D D8 00 7C 1F                          DB $D8, $00, $7C, $1F, $67, $01
  15++E161 67 01
  16++E163 D8 00 7C 3F                          DB $D8, $00, $7C, $3F, $78, $12
  16++E167 78 12
  17++E169 00 28 FA 3F                          DB $00, $28, $FA, $3F, $CD, $23
  17++E16D CD 23
  18++E16F 00 28 FA 7F                          DB $00, $28, $FA, $7F, $CD, $89
  18++E173 CD 89
  19++E175 D8 00 7C BF                          DB $D8, $00, $7C, $BF, $9A, $34
  19++E179 9A 34
  20++E17B D8 00 7C 9F                          DB $D8, $00, $7C, $9F, $AB, $45
  20++E17F AB 45
  21++E181 00 50 00 1F                          DB $00, $50, $00, $1F, $FF, $FF
  21++E185 FF FF
  22++E187 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF
  22++E18B FF FF
  23++E18D              DragonVertSize:         equ $ - DragonVertices
  24++E18D 1F 01 04 1C  DragonEdges:	        DB $1F, $01, $04, $1C
  25++E191 1F 12 08 1C                          DB $1F, $12, $08, $1C
  26++E195 1F 23 0C 1C                          DB $1F, $23, $0C, $1C
  27++E199 1F 34 14 1C                          DB $1F, $34, $14, $1C
  28++E19D 1F 45 18 1C                          DB $1F, $45, $18, $1C
  29++E1A1 1F 50 00 1C                          DB $1F, $50, $00, $1C
  30++E1A5 1F 67 04 20                          DB $1F, $67, $04, $20
  31++E1A9 1F 78 08 20                          DB $1F, $78, $08, $20
  32++E1AD 1F 89 10 20                          DB $1F, $89, $10, $20
  33++E1B1 1F 9A 14 20                          DB $1F, $9A, $14, $20
  34++E1B5 1F AB 18 20                          DB $1F, $AB, $18, $20
  35++E1B9 1F B6 00 20                          DB $1F, $B6, $00, $20
  36++E1BD 1F 06 00 04                          DB $1F, $06, $00, $04
  37++E1C1 1F 17 04 08                          DB $1F, $17, $04, $08
  38++E1C5 1F 4A 14 18                          DB $1F, $4A, $14, $18
  39++E1C9 1F 5B 00 18                          DB $1F, $5B, $00, $18
  40++E1CD 1F 2C 08 0C                          DB $1F, $2C, $08, $0C
  41++E1D1 1F 8C 08 10                          DB $1F, $8C, $08, $10
  42++E1D5 1F 3D 0C 14                          DB $1F, $3D, $0C, $14
  43++E1D9 1F 9D 10 14                          DB $1F, $9D, $10, $14
  44++E1DD 1F CD 0C 10                          DB $1F, $CD, $0C, $10
  45++E1E1              DragonEdgesSize:        equ $ - DragonEdges
  46++E1E1              DragonEdgesCnt:         equ DragonEdgesSize/4
  47++E1E1 1F 10 5A 1C  DragonNormals:	        DB $1F, $10, $5A, $1C
  48++E1E5 1F 21 5A 00                          DB $1F, $21, $5A, $00
  49++E1E9 3F 19 5B 0E                          DB $3F, $19, $5B, $0E
  50++E1ED BF 19 5B 0E                          DB $BF, $19, $5B, $0E
  51++E1F1 9F 21 5A 00                          DB $9F, $21, $5A, $00
  52++E1F5 9F 10 5A 1C                          DB $9F, $10, $5A, $1C
  53++E1F9 5F 10 5A 1C                          DB $5F, $10, $5A, $1C
  54++E1FD 5F 21 5A 00                          DB $5F, $21, $5A, $00
  55++E201 7F 19 5B 0E                          DB $7F, $19, $5B, $0E
  56++E205 FF 19 5B 0E                          DB $FF, $19, $5B, $0E
  57++E209 DF 21 5A 00                          DB $DF, $21, $5A, $00
  58++E20D DF 10 5A 1C                          DB $DF, $10, $5A, $1C
  59++E211 3F 30 00 52                          DB $3F, $30, $00, $52
  60++E215 BF 30 00 52                          DB $BF, $30, $00, $52
  61++E219              DragonNormalsSize:      equ $ - DragonNormals
  62++E219              DragonLen:              equ $ - Dragon
  63++E219
# file closed: ./Data/Ships/Dragon.asm
  83+ E219                                      include "Data/Ships/Escape_Pod.asm"
# file opened: ./Data/Ships/Escape_Pod.asm
   1++E219 20 01 00     Escape_Pod:             DB $20, $01, $00
   2++E21C 49 E2                                DW Escape_PodEdges
   3++E21E 18                                   DB Escape_PodEdgesSize
   4++E21F 00 16                                DB $00, $16
   5++E221 18                                   DB Escape_PodVertSize
   6++E222 06                                   DB Escape_PodEdgesCnt
   7++E223 00 00                                DB $00, $00
   8++E225 10                                   DB Escape_PodNormalsSize
   9++E226 08 11 08                             DB $08, $11, $08
  10++E229 61 E2                                DW Escape_PodNormals
  11++E22B 04 00                                DB $04, $00
  12++E22D 31 E2                                DW Escape_PodVertices
  13++E22F 00 00                                DB 0,0                      ; Type and Tactics
  14++E231 07 00 24 9F  Escape_PodVertices:	    DB $07, $00, $24, $9F, $12, $33
  14++E235 12 33
  15++E237 07 0E 0C FF                          DB $07, $0E, $0C, $FF, $02, $33
  15++E23B 02 33
  16++E23D 07 0E 0C BF                          DB $07, $0E, $0C, $BF, $01, $33
  16++E241 01 33
  17++E243 15 00 00 1F                          DB $15, $00, $00, $1F, $01, $22
  17++E247 01 22
  18++E249              Escape_PodVertSize:     equ $ - Escape_PodVertices
  19++E249 1F 23 00 04  Escape_PodEdges:	    DB $1F, $23, $00, $04
  20++E24D 1F 03 04 08                          DB $1F, $03, $04, $08
  21++E251 1F 01 08 0C                          DB $1F, $01, $08, $0C
  22++E255 1F 12 0C 00                          DB $1F, $12, $0C, $00
  23++E259 1F 13 00 08                          DB $1F, $13, $00, $08
  24++E25D 1F 02 0C 04                          DB $1F, $02, $0C, $04
  25++E261              Escape_PodEdgesSize:    equ $ - Escape_PodEdges
  26++E261              Escape_PodEdgesCnt:     equ Escape_PodEdgesSize/4
  27++E261 3F 34 00 7A  Escape_PodNormals:	    DB $3F, $34, $00, $7A
  28++E265 1F 27 67 1E                          DB $1F, $27, $67, $1E
  29++E269 5F 27 67 1E                          DB $5F, $27, $67, $1E
  30++E26D 9F 70 00 00                          DB $9F, $70, $00, $00
  31++E271              Escape_PodNormalsSize:  equ $ - Escape_PodNormals
  32++E271              Escape_PodLen:          equ $ - Escape_Pod
  33++E271
# file closed: ./Data/Ships/Escape_Pod.asm
  84+ E271                                      include "Data/Ships/Fer_De_Lance.asm"
# file opened: ./Data/Ships/Fer_De_Lance.asm
   1++E271 00 06 40     Fer_De_Lance:	        DB $00, $06, $40
   2++E274 FB E2                                DW Fer_De_LanceEdges
   3++E276 6C                                   DB Fer_De_LanceEdgesSize
   4++E277 00 1A                                DB $00, $1A
   5++E279 72                                   DB Fer_De_LanceVertSize
   6++E27A 1B                                   DB Fer_De_LanceEdgesCnt
   7++E27B 00 00                                DB $00, $00
   8++E27D 28                                   DB Fer_De_LanceNormalsSize
   9++E27E 28 A0 1E                             DB $28, $A0, $1E
  10++E281 67 E3                                DW Fer_De_LanceNormals
  11++E283 01 12                                DB $01, $12
  12++E285 89 E2                                DW Fer_De_LanceVertices
  13++E287 00 00                                DB 0,0                      ; Type and Tactics
  14++E289 00 0E 6C 5F  Fer_De_LanceVertices:	DB $00, $0E, $6C, $5F, $01, $59
  14++E28D 01 59
  15++E28F 28 0E 04 FF                          DB $28, $0E, $04, $FF, $12, $99
  15++E293 12 99
  16++E295 0C 0E 34 FF                          DB $0C, $0E, $34, $FF, $23, $99
  16++E299 23 99
  17++E29B 0C 0E 34 7F                          DB $0C, $0E, $34, $7F, $34, $99
  17++E29F 34 99
  18++E2A1 28 0E 04 7F                          DB $28, $0E, $04, $7F, $45, $99
  18++E2A5 45 99
  19++E2A7 28 0E 04 BC                          DB $28, $0E, $04, $BC, $01, $26
  19++E2AB 01 26
  20++E2AD 0C 02 34 BC                          DB $0C, $02, $34, $BC, $23, $67
  20++E2B1 23 67
  21++E2B3 0C 02 34 3C                          DB $0C, $02, $34, $3C, $34, $78
  21++E2B7 34 78
  22++E2B9 28 0E 04 3C                          DB $28, $0E, $04, $3C, $04, $58
  22++E2BD 04 58
  23++E2BF 00 12 14 2F                          DB $00, $12, $14, $2F, $06, $78
  23++E2C3 06 78
  24++E2C5 03 0B 61 CB                          DB $03, $0B, $61, $CB, $00, $00
  24++E2C9 00 00
  25++E2CB 1A 08 12 89                          DB $1A, $08, $12, $89, $00, $00
  25++E2CF 00 00
  26++E2D1 10 0E 04 AB                          DB $10, $0E, $04, $AB, $00, $00
  26++E2D5 00 00
  27++E2D7 03 0B 61 4B                          DB $03, $0B, $61, $4B, $00, $00
  27++E2DB 00 00
  28++E2DD 1A 08 12 09                          DB $1A, $08, $12, $09, $00, $00
  28++E2E1 00 00
  29++E2E3 10 0E 04 2B                          DB $10, $0E, $04, $2B, $00, $00
  29++E2E7 00 00
  30++E2E9 00 0E 14 6C                          DB $00, $0E, $14, $6C, $99, $99
  30++E2ED 99 99
  31++E2EF 0E 0E 2C CC                          DB $0E, $0E, $2C, $CC, $99, $99
  31++E2F3 99 99
  32++E2F5 0E 0E 2C 4C                          DB $0E, $0E, $2C, $4C, $99, $99
  32++E2F9 99 99
  33++E2FB              Fer_De_LanceVertSize:   equ $ - Fer_De_LanceVertices
  34++E2FB 1F 19 00 04  Fer_De_LanceEdges:	    DB $1F, $19, $00, $04
  35++E2FF 1F 29 04 08                          DB $1F, $29, $04, $08
  36++E303 1F 39 08 0C                          DB $1F, $39, $08, $0C
  37++E307 1F 49 0C 10                          DB $1F, $49, $0C, $10
  38++E30B 1F 59 00 10                          DB $1F, $59, $00, $10
  39++E30F 1C 01 00 14                          DB $1C, $01, $00, $14
  40++E313 1C 26 14 18                          DB $1C, $26, $14, $18
  41++E317 1C 37 18 1C                          DB $1C, $37, $18, $1C
  42++E31B 1C 48 1C 20                          DB $1C, $48, $1C, $20
  43++E31F 1C 05 00 20                          DB $1C, $05, $00, $20
  44++E323 0F 06 14 24                          DB $0F, $06, $14, $24
  45++E327 0B 67 18 24                          DB $0B, $67, $18, $24
  46++E32B 0B 78 1C 24                          DB $0B, $78, $1C, $24
  47++E32F 0F 08 20 24                          DB $0F, $08, $20, $24
  48++E333 0E 12 04 14                          DB $0E, $12, $04, $14
  49++E337 0E 23 08 18                          DB $0E, $23, $08, $18
  50++E33B 0E 34 0C 1C                          DB $0E, $34, $0C, $1C
  51++E33F 0E 45 10 20                          DB $0E, $45, $10, $20
  52++E343 08 00 28 2C                          DB $08, $00, $28, $2C
  53++E347 09 00 2C 30                          DB $09, $00, $2C, $30
  54++E34B 0B 00 28 30                          DB $0B, $00, $28, $30
  55++E34F 08 00 34 38                          DB $08, $00, $34, $38
  56++E353 09 00 38 3C                          DB $09, $00, $38, $3C
  57++E357 0B 00 34 3C                          DB $0B, $00, $34, $3C
  58++E35B 0C 99 40 44                          DB $0C, $99, $40, $44
  59++E35F 0C 99 40 48                          DB $0C, $99, $40, $48
  60++E363 08 99 44 48                          DB $08, $99, $44, $48
  61++E367              Fer_De_LanceEdgesSize:  equ $ - Fer_De_LanceEdges
  62++E367              Fer_De_LanceEdgesCnt:   equ Fer_De_LanceEdgesSize/4
  63++E367 1C 00 18 06  Fer_De_LanceNormals:	DB $1C, $00, $18, $06
  64++E36B 9F 44 00 18                          DB $9F, $44, $00, $18
  65++E36F BF 3F 00 25                          DB $BF, $3F, $00, $25
  66++E373 3F 00 00 68                          DB $3F, $00, $00, $68
  67++E377 3F 3F 00 25                          DB $3F, $3F, $00, $25
  68++E37B 1F 44 00 18                          DB $1F, $44, $00, $18
  69++E37F BC 0C 2E 13                          DB $BC, $0C, $2E, $13
  70++E383 3C 00 2D 16                          DB $3C, $00, $2D, $16
  71++E387 3C 0C 2E 13                          DB $3C, $0C, $2E, $13
  72++E38B 5F 00 1C 00                          DB $5F, $00, $1C, $00
  73++E38F              Fer_De_LanceNormalsSize:equ $ - Fer_De_LanceNormals
  74++E38F              Fer_De_LanceLen:        equ $ - Fer_De_Lance
  75++E38F
# file closed: ./Data/Ships/Fer_De_Lance.asm
  85+ E38F                                      include "Data/Ships/Gecko.asm"
# file opened: ./Data/Ships/Gecko.asm
   1++E38F 00 26 49     Gecko:	                DB $00, $26, $49
   2++E392 EF E3                                DW GeckoEdges
   3++E394 44                                   DB GeckoEdgesSize
   4++E395 00 1A                                DB $00, $1A
   5++E397 48                                   DB GeckoVertSize
   6++E398 11                                   DB GeckoEdgesCnt
   7++E399 00 37                                DB $00, $37
   8++E39B 24                                   DB GeckoNormalsSize
   9++E39C 12 46 1E                             DB $12, $46, $1E
  10++E39F 33 E4                                DW GeckoNormals
  11++E3A1 03 10                                DB $03, $10
  12++E3A3 A7 E3                                DW GeckoVertices
  13++E3A5 00 00                                DB 0,0                      ; Type and Tactics
  14++E3A7 0A 04 2F DF  GeckoVertices:	        DB $0A, $04, $2F, $DF, $03, $45
  14++E3AB 03 45
  15++E3AD 0A 04 2F 5F                          DB $0A, $04, $2F, $5F, $01, $23
  15++E3B1 01 23
  16++E3B3 10 08 17 BF                          DB $10, $08, $17, $BF, $05, $67
  16++E3B7 05 67
  17++E3B9 10 08 17 3F                          DB $10, $08, $17, $3F, $01, $78
  17++E3BD 01 78
  18++E3BF 42 00 03 BF                          DB $42, $00, $03, $BF, $45, $66
  18++E3C3 45 66
  19++E3C5 42 00 03 3F                          DB $42, $00, $03, $3F, $12, $88
  19++E3C9 12 88
  20++E3CB 14 0E 17 FF                          DB $14, $0E, $17, $FF, $34, $67
  20++E3CF 34 67
  21++E3D1 14 0E 17 7F                          DB $14, $0E, $17, $7F, $23, $78
  21++E3D5 23 78
  22++E3D7 08 06 21 D0                          DB $08, $06, $21, $D0, $33, $33
  22++E3DB 33 33
  23++E3DD 08 06 21 51                          DB $08, $06, $21, $51, $33, $33
  23++E3E1 33 33
  24++E3E3 08 0D 10 F0                          DB $08, $0D, $10, $F0, $33, $33
  24++E3E7 33 33
  25++E3E9 08 0D 10 71                          DB $08, $0D, $10, $71, $33, $33
  25++E3ED 33 33
  26++E3EF              GeckoVertSize:          equ $ - GeckoVertices
  27++E3EF 1F 03 00 04  GeckoEdges:	            DB $1F, $03, $00, $04
  28++E3F3 1F 12 04 14                          DB $1F, $12, $04, $14
  29++E3F7 1F 18 14 0C                          DB $1F, $18, $14, $0C
  30++E3FB 1F 07 0C 08                          DB $1F, $07, $0C, $08
  31++E3FF 1F 56 08 10                          DB $1F, $56, $08, $10
  32++E403 1F 45 10 00                          DB $1F, $45, $10, $00
  33++E407 1F 28 14 1C                          DB $1F, $28, $14, $1C
  34++E40B 1F 37 1C 18                          DB $1F, $37, $1C, $18
  35++E40F 1F 46 18 10                          DB $1F, $46, $18, $10
  36++E413 1D 05 00 08                          DB $1D, $05, $00, $08
  37++E417 1E 01 04 0C                          DB $1E, $01, $04, $0C
  38++E41B 1D 34 00 18                          DB $1D, $34, $00, $18
  39++E41F 1E 23 04 1C                          DB $1E, $23, $04, $1C
  40++E423 14 67 08 18                          DB $14, $67, $08, $18
  41++E427 14 78 0C 1C                          DB $14, $78, $0C, $1C
  42++E42B 10 33 20 28                          DB $10, $33, $20, $28
  43++E42F 11 33 24 2C                          DB $11, $33, $24, $2C
  44++E433              GeckoEdgesSize:             equ $ - GeckoEdges
  45++E433              GeckoEdgesCnt:          equ GeckoEdgesSize/4
  46++E433 1F 00 1F 05  GeckoNormals:	        DB $1F, $00, $1F, $05
  47++E437 1F 04 2D 08                          DB $1F, $04, $2D, $08
  48++E43B 5F 19 6C 13                          DB $5F, $19, $6C, $13
  49++E43F 5F 00 54 0C                          DB $5F, $00, $54, $0C
  50++E443 DF 19 6C 13                          DB $DF, $19, $6C, $13
  51++E447 9F 04 2D 08                          DB $9F, $04, $2D, $08
  52++E44B BF 58 10 D6                          DB $BF, $58, $10, $D6
  53++E44F 3F 00 00 BB                          DB $3F, $00, $00, $BB
  54++E453 3F 58 10 D6                          DB $3F, $58, $10, $D6
  55++E457              GeckoNormalsSize:       equ $ - GeckoNormals
  56++E457              GeckoLen:               equ $ - Gecko
  57++E457
# file closed: ./Data/Ships/Gecko.asm
  86+ E457                                      include "Data/Ships/Ghavial.asm"
# file opened: ./Data/Ships/Ghavial.asm
   1++E457 03 26 00     Ghavial:	DB $03, $26, $00
   2++E45A B7 E4        	DW GhavialEdges
   3++E45C 58           	DB GhavialEdgesSize
   4++E45D 00 22        	DB $00, $22
   5++E45F 48           	DB GhavialVertSize
   6++E460 16           	DB GhavialEdgesCnt
   7++E461 00 64        	DB $00, $64
   8++E463 30           	DB GhavialNormalsSize
   9++E464 0A 72 10     	DB $0A, $72, $10
  10++E467 0F E5        	DW GhavialNormals
  11++E469 00 27        	DB $00, $27
  12++E46B 6F E4        	DW GhavialVertices
  13++E46D 00 00                                DB 0,0                      ; Type and Tactics
  14++E46F
  15++E46F 1E 00 64 1F  GhavialVertices:	DB $1E, $00, $64, $1F, $67, $01
  15++E473 67 01
  16++E475 1E 00 64 9F  	DB $1E, $00, $64, $9F, $6B, $05
  16++E479 6B 05
  17++E47B 28 1E 1A 3F  	DB $28, $1E, $1A, $3F, $23, $01
  17++E47F 23 01
  18++E481 28 1E 1A BF  	DB $28, $1E, $1A, $BF, $45, $03
  18++E485 45 03
  19++E487 3C 00 14 3F  	DB $3C, $00, $14, $3F, $78, $12
  19++E48B 78 12
  20++E48D 28 00 3C 3F  	DB $28, $00, $3C, $3F, $89, $23
  20++E491 89 23
  21++E493 3C 00 14 BF  	DB $3C, $00, $14, $BF, $AB, $45
  21++E497 AB 45
  22++E499 28 00 3C BF  	DB $28, $00, $3C, $BF, $9A, $34
  22++E49D 9A 34
  23++E49F 00 1E 14 7F  	DB $00, $1E, $14, $7F, $FF, $FF
  23++E4A3 FF FF
  24++E4A5 0A 18 00 09  	DB $0A, $18, $00, $09, $00, $00
  24++E4A9 00 00
  25++E4AB 0A 18 00 89  	DB $0A, $18, $00, $89, $00, $00
  25++E4AF 00 00
  26++E4B1 00 16 0A 09  	DB $00, $16, $0A, $09, $00, $00
  26++E4B5 00 00
  27++E4B7
  28++E4B7              GhavialVertSize: equ $ - GhavialVertices
  29++E4B7
  30++E4B7
  31++E4B7 1F 01 00 08  GhavialEdges:	DB $1F, $01, $00, $08
  32++E4BB 1F 12 10 08  	DB $1F, $12, $10, $08
  33++E4BF 1F 23 14 08  	DB $1F, $23, $14, $08
  34++E4C3 1F 30 0C 08  	DB $1F, $30, $0C, $08
  35++E4C7 1F 34 1C 0C  	DB $1F, $34, $1C, $0C
  36++E4CB 1F 45 18 0C  	DB $1F, $45, $18, $0C
  37++E4CF 1F 50 0C 04  	DB $1F, $50, $0C, $04
  38++E4D3 1F 67 00 20  	DB $1F, $67, $00, $20
  39++E4D7 1F 78 10 20  	DB $1F, $78, $10, $20
  40++E4DB 1F 89 14 20  	DB $1F, $89, $14, $20
  41++E4DF 1F 9A 1C 20  	DB $1F, $9A, $1C, $20
  42++E4E3 1F AB 18 20  	DB $1F, $AB, $18, $20
  43++E4E7 1F B6 04 20  	DB $1F, $B6, $04, $20
  44++E4EB 1F 06 04 00  	DB $1F, $06, $04, $00
  45++E4EF 1F 17 00 10  	DB $1F, $17, $00, $10
  46++E4F3 1F 28 10 14  	DB $1F, $28, $10, $14
  47++E4F7 1F 39 14 1C  	DB $1F, $39, $14, $1C
  48++E4FB 1F 4A 1C 18  	DB $1F, $4A, $1C, $18
  49++E4FF 1F 5B 18 04  	DB $1F, $5B, $18, $04
  50++E503 09 00 24 28  	DB $09, $00, $24, $28
  51++E507 09 00 28 2C  	DB $09, $00, $28, $2C
  52++E50B 09 00 2C 24  	DB $09, $00, $2C, $24
  53++E50F
  54++E50F              GhavialEdgesSize: equ $ - GhavialEdges
  55++E50F
  56++E50F
  57++E50F              GhavialEdgesCnt: equ GhavialEdgesSize/4
  58++E50F
  59++E50F
  60++E50F 1F 00 3E 0E  GhavialNormals:	DB $1F, $00, $3E, $0E
  61++E513 1F 33 24 0C  	DB $1F, $33, $24, $0C
  62++E517 3F 33 1C 19  	DB $3F, $33, $1C, $19
  63++E51B 3F 00 30 2A  	DB $3F, $00, $30, $2A
  64++E51F BF 33 1C 19  	DB $BF, $33, $1C, $19
  65++E523 9F 33 24 0C  	DB $9F, $33, $24, $0C
  66++E527 5F 00 3E 0F  	DB $5F, $00, $3E, $0F
  67++E52B 5F 1C 38 07  	DB $5F, $1C, $38, $07
  68++E52F 7F 1B 37 0D  	DB $7F, $1B, $37, $0D
  69++E533 7F 00 33 26  	DB $7F, $00, $33, $26
  70++E537 FF 1B 37 0D  	DB $FF, $1B, $37, $0D
  71++E53B DF 1C 38 07  	DB $DF, $1C, $38, $07
  72++E53F
  73++E53F              GhavialNormalsSize: equ $ - GhavialNormals
  74++E53F              GhavialLen: equ $ - Ghavial
  75++E53F
# file closed: ./Data/Ships/Ghavial.asm
  87+ E53F                                      include "Data/Ships/Iguana.asm"
# file opened: ./Data/Ships/Iguana.asm
   1++E53F 01 0D AC     Iguana:	DB $01, $0D, $AC
   2++E542 B1 E5        	DW IguanaEdges
   3++E544 5C           	DB IguanaEdgesSize
   4++E545 00 1A        	DB $00, $1A
   5++E547 5A           	DB IguanaVertSize
   6++E548 17           	DB IguanaEdgesCnt
   7++E549 00 96        	DB $00, $96
   8++E54B 28           	DB IguanaNormalsSize
   9++E54C 0A 5A 21     	DB $0A, $5A, $21
  10++E54F 0D E6        	DW IguanaNormals
  11++E551 01 23        	DB $01, $23
  12++E553 57 E5        	DW IguanaVertices
  13++E555 00 00                                DB 0,0                      ; Type and Tactics
  14++E557
  15++E557
  16++E557 00 00 5A 1F  IguanaVertices:	DB $00, $00, $5A, $1F, $23, $01
  16++E55B 23 01
  17++E55D 00 14 1E 1F  	DB $00, $14, $1E, $1F, $46, $02
  17++E561 46 02
  18++E563 28 00 0A 9F  	DB $28, $00, $0A, $9F, $45, $01
  18++E567 45 01
  19++E569 00 14 1E 5F  	DB $00, $14, $1E, $5F, $57, $13
  19++E56D 57 13
  20++E56F 28 00 0A 1F  	DB $28, $00, $0A, $1F, $67, $23
  20++E573 67 23
  21++E575 00 14 28 3F  	DB $00, $14, $28, $3F, $89, $46
  21++E579 89 46
  22++E57B 28 00 1E BF  	DB $28, $00, $1E, $BF, $88, $45
  22++E57F 88 45
  23++E581 00 14 28 7F  	DB $00, $14, $28, $7F, $89, $57
  23++E585 89 57
  24++E587 28 00 1E 3F  	DB $28, $00, $1E, $3F, $99, $67
  24++E58B 99 67
  25++E58D 28 00 28 9E  	DB $28, $00, $28, $9E, $11, $00
  25++E591 11 00
  26++E593 28 00 28 1E  	DB $28, $00, $28, $1E, $33, $22
  26++E597 33 22
  27++E599 00 08 28 2A  	DB $00, $08, $28, $2A, $99, $88
  27++E59D 99 88
  28++E59F 10 00 24 AA  	DB $10, $00, $24, $AA, $88, $88
  28++E5A3 88 88
  29++E5A5 00 08 28 6A  	DB $00, $08, $28, $6A, $99, $88
  29++E5A9 99 88
  30++E5AB 10 00 24 2A  	DB $10, $00, $24, $2A, $99, $99
  30++E5AF 99 99
  31++E5B1
  32++E5B1              IguanaVertSize: equ $ - IguanaVertices
  33++E5B1
  34++E5B1
  35++E5B1
  36++E5B1 1F 02 00 04  IguanaEdges:	DB $1F, $02, $00, $04
  37++E5B5 1F 01 00 08  	DB $1F, $01, $00, $08
  38++E5B9 1F 13 00 0C  	DB $1F, $13, $00, $0C
  39++E5BD 1F 23 00 10  	DB $1F, $23, $00, $10
  40++E5C1 1F 46 04 14  	DB $1F, $46, $04, $14
  41++E5C5 1F 45 08 18  	DB $1F, $45, $08, $18
  42++E5C9 1F 57 0C 1C  	DB $1F, $57, $0C, $1C
  43++E5CD 1F 67 10 20  	DB $1F, $67, $10, $20
  44++E5D1 1F 48 14 18  	DB $1F, $48, $14, $18
  45++E5D5 1F 58 18 1C  	DB $1F, $58, $18, $1C
  46++E5D9 1F 69 14 20  	DB $1F, $69, $14, $20
  47++E5DD 1F 79 1C 20  	DB $1F, $79, $1C, $20
  48++E5E1 1F 04 04 08  	DB $1F, $04, $04, $08
  49++E5E5 1F 15 08 0C  	DB $1F, $15, $08, $0C
  50++E5E9 1F 26 04 10  	DB $1F, $26, $04, $10
  51++E5ED 1F 37 0C 10  	DB $1F, $37, $0C, $10
  52++E5F1 1F 89 14 1C  	DB $1F, $89, $14, $1C
  53++E5F5 1E 01 08 24  	DB $1E, $01, $08, $24
  54++E5F9 1E 23 10 28  	DB $1E, $23, $10, $28
  55++E5FD 0A 88 2C 30  	DB $0A, $88, $2C, $30
  56++E601 0A 88 34 30  	DB $0A, $88, $34, $30
  57++E605 0A 99 2C 38  	DB $0A, $99, $2C, $38
  58++E609 0A 99 34 38  	DB $0A, $99, $34, $38
  59++E60D
  60++E60D              IguanaEdgesSize: equ $ - IguanaEdges
  61++E60D
  62++E60D
  63++E60D              IguanaEdgesCnt: equ IguanaEdgesSize/4
  64++E60D
  65++E60D
  66++E60D 9F 33 4D 19  IguanaNormals:	DB $9F, $33, $4D, $19
  67++E611 DF 33 4D 19  	DB $DF, $33, $4D, $19
  68++E615 1F 33 4D 19  	DB $1F, $33, $4D, $19
  69++E619 5F 33 4D 19  	DB $5F, $33, $4D, $19
  70++E61D 9F 2A 55 00  	DB $9F, $2A, $55, $00
  71++E621 DF 2A 55 00  	DB $DF, $2A, $55, $00
  72++E625 1F 2A 55 00  	DB $1F, $2A, $55, $00
  73++E629 5F 2A 55 00  	DB $5F, $2A, $55, $00
  74++E62D BF 17 00 5D  	DB $BF, $17, $00, $5D
  75++E631 3F 17 00 5D  	DB $3F, $17, $00, $5D
  76++E635
  77++E635
  78++E635              IguanaNormalsSize: equ $ - IguanaNormals
  79++E635              IguanaLen: equ $ - Iguana
  80++E635
# file closed: ./Data/Ships/Iguana.asm
  88+ E635                                      include "Data/Ships/Krait.asm"
# file opened: ./Data/Ships/Krait.asm
   1++E635
   2++E635 01 10 0E     Krait:                  DB $01, $10, $0E
   3++E638 B3 E6                                DW KraitEdges
   4++E63A 54                                   DB KraitEdgesSize
   5++E63B 00 12                                DB $00, $12
   6++E63D 66                                   DB KraitVertSize
   7++E63E 15                                   DB KraitEdgesCnt
   8++E63F 64 00                                DB $64,$00
   9++E641 18                                   DB KraitNormalsSize
  10++E642 14 50 1E                             DB $14, $50, $1E
  11++E645 07 E7                                DW KraitNormals
  12++E647 02 10                                DB $02, $10
  13++E649 4D E6                                DW KraitVertices
  14++E64B 00 00                                DB 0,0                      ; Type and Tactics
  15++E64D 00 00 60 1F  KraitVertices:          DB $00, $00, $60, $1F, $01, $23
  15++E651 01 23
  16++E653 00 12 30 3F                          DB $00, $12, $30, $3F, $03, $45
  16++E657 03 45
  17++E659 00 12 30 7F                          DB $00, $12, $30, $7F, $12, $45
  17++E65D 12 45
  18++E65F 5A 00 03 3F                          DB $5A, $00, $03, $3F, $01, $44
  18++E663 01 44
  19++E665 5A 00 03 BF                          DB $5A, $00, $03, $BF, $23, $55
  19++E669 23 55
  20++E66B 5A 00 57 1C                          DB $5A, $00, $57, $1C, $01, $11
  20++E66F 01 11
  21++E671 5A 00 57 9C                          DB $5A, $00, $57, $9C, $23, $33
  21++E675 23 33
  22++E677 00 05 35 09                          DB $00, $05, $35, $09, $00, $33
  22++E67B 00 33
  23++E67D 00 07 26 06                          DB $00, $07, $26, $06, $00, $33
  23++E681 00 33
  24++E683 12 07 13 89                          DB $12, $07, $13, $89, $33, $33
  24++E687 33 33
  25++E689 12 07 13 09                          DB $12, $07, $13, $09, $00, $00
  25++E68D 00 00
  26++E68F 12 0B 27 28                          DB $12, $0B, $27, $28, $44, $44
  26++E693 44 44
  27++E695 12 0B 27 68                          DB $12, $0B, $27, $68, $44, $44
  27++E699 44 44
  28++E69B 24 00 1E 28                          DB $24, $00, $1E, $28, $44, $44
  28++E69F 44 44
  29++E6A1 12 0B 27 A8                          DB $12, $0B, $27, $A8, $55, $55
  29++E6A5 55 55
  30++E6A7 12 0B 27 E8                          DB $12, $0B, $27, $E8, $55, $55
  30++E6AB 55 55
  31++E6AD 24 00 1E A8                          DB $24, $00, $1E, $A8, $55, $55
  31++E6B1 55 55
  32++E6B3              KraitVertSize           equ $  - KraitVertices
  33++E6B3 1F 03 00 04  KraitEdges:             DB $1F, $03, $00, $04, $1F, $12, $00, $08
  33++E6B7 1F 12 00 08
  34++E6BB 1F 01 00 0C                          DB $1F, $01, $00, $0C, $1F, $23, $00, $10
  34++E6BF 1F 23 00 10
  35++E6C3 1F 35 04 10                          DB $1F, $35, $04, $10, $1F, $25, $10, $08
  35++E6C7 1F 25 10 08
  36++E6CB 1F 14 08 0C                          DB $1F, $14, $08, $0C, $1F, $04, $0C, $04
  36++E6CF 1F 04 0C 04
  37++E6D3 1C 01 0C 14                          DB $1C, $01, $0C, $14, $1C, $23, $10, $18
  37++E6D7 1C 23 10 18
  38++E6DB 05 45 04 08                          DB $05, $45, $04, $08, $09, $00, $1C, $28
  38++E6DF 09 00 1C 28
  39++E6E3 06 00 20 28                          DB $06, $00, $20, $28, $09, $33, $1C, $24
  39++E6E7 09 33 1C 24
  40++E6EB 06 33 20 24                          DB $06, $33, $20, $24, $08, $44, $2C, $34
  40++E6EF 08 44 2C 34
  41++E6F3 08 44 34 30                          DB $08, $44, $34, $30, $07, $44, $30, $2C
  41++E6F7 07 44 30 2C
  42++E6FB 07 55 38 3C                          DB $07, $55, $38, $3C, $08, $55, $3C, $40
  42++E6FF 08 55 3C 40
  43++E703 08 55 40 38                          DB $08, $55, $40, $38
  44++E707              KraitEdgesSize          equ $  - KraitEdges
  45++E707              KraitEdgesCnt           equ KraitEdgesSize/4
  46++E707 1F 07 30 06  KraitNormals            DB $1F, $07, $30, $06
  47++E70B 5F 07 30 06                          DB $5F, $07, $30, $06, $DF, $07, $30, $06
  47++E70F DF 07 30 06
  48++E713 9F 07 30 06                          DB $9F, $07, $30, $06, $3F, $4D, $00, $9A
  48++E717 3F 4D 00 9A
  49++E71B BF 4D 00 9A                          DB $BF, $4D, $00, $9A
  50++E71F              KraitNormalsSize        equ $  - KraitNormals
  51++E71F              KraitLen                equ $  - Krait
  52++E71F
# file closed: ./Data/Ships/Krait.asm
  89+ E71F                                      include "Data/Ships/Logo.asm"
# file opened: ./Data/Ships/Logo.asm
   1++E71F 00 26 49     Logo:	DB $00, $26, $49
   2++E722 33 E8        	DW LogoEdges
   3++E724 94           	DB LogoEdgesSize
   4++E725 00 36        	DB $00, $36
   5++E727 FC           	DB LogoVertSize
   6++E728 25           	DB LogoEdgesCnt
   7++E729 00 00        	DB $00, $00
   8++E72B 14           	DB LogoNormalsSize
   9++E72C 63 FC 24     	DB $63, $FC, $24
  10++E72F C7 E8        	DW LogoNormals
  11++E731 01 00        	DB $01, $00
  12++E733 37 E7        	DW LogoVertices
  13++E735 00 00                                DB 0,0                      ; Type and Tactics
  14++E737
  15++E737 00 09 37 5F  LogoVertices:	DB $00, $09, $37, $5F, $00, $00
  15++E73B 00 00
  16++E73D 0A 09 1E DF  	DB $0A, $09, $1E, $DF, $00, $00
  16++E741 00 00
  17++E743 19 09 5D DF  	DB $19, $09, $5D, $DF, $00, $00
  17++E747 00 00
  18++E749 96 09 B4 DF  	DB $96, $09, $B4, $DF, $00, $00
  18++E74D 00 00
  19++E74F 5A 09 0A DF  	DB $5A, $09, $0A, $DF, $00, $00
  19++E753 00 00
  20++E755 8C 09 0A DF  	DB $8C, $09, $0A, $DF, $00, $00
  20++E759 00 00
  21++E75B 00 09 5F 7F  	DB $00, $09, $5F, $7F, $00, $00
  21++E75F 00 00
  22++E761 8C 09 0A 5F  	DB $8C, $09, $0A, $5F, $00, $00
  22++E765 00 00
  23++E767 5A 09 0A 5F  	DB $5A, $09, $0A, $5F, $00, $00
  23++E76B 00 00
  24++E76D 96 09 B4 5F  	DB $96, $09, $B4, $5F, $00, $00
  24++E771 00 00
  25++E773 19 09 5D 5F  	DB $19, $09, $5D, $5F, $00, $00
  25++E777 00 00
  26++E779 0A 09 1E 5F  	DB $0A, $09, $1E, $5F, $00, $00
  26++E77D 00 00
  27++E77F 55 09 1E FF  	DB $55, $09, $1E, $FF, $02, $33
  27++E783 02 33
  28++E785 55 09 1E 7F  	DB $55, $09, $1E, $7F, $02, $44
  28++E789 02 44
  29++E78B 46 0B 05 9F  	DB $46, $0B, $05, $9F, $01, $33
  29++E78F 01 33
  30++E791 46 0B 19 BF  	DB $46, $0B, $19, $BF, $02, $33
  30++E795 02 33
  31++E797 46 0B 19 3F  	DB $46, $0B, $19, $3F, $02, $44
  31++E79B 02 44
  32++E79D 46 0B 05 1F  	DB $46, $0B, $05, $1F, $01, $44
  32++E7A1 01 44
  33++E7A3 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  33++E7A7 00 00
  34++E7A9 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  34++E7AD 00 00
  35++E7AF 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  35++E7B3 00 00
  36++E7B5 1C 0B 02 BF  	DB $1C, $0B, $02, $BF, $00, $00
  36++E7B9 00 00
  37++E7BB 31 0B 02 BF  	DB $31, $0B, $02, $BF, $00, $00
  37++E7BF 00 00
  38++E7C1 31 0B 0A BF  	DB $31, $0B, $0A, $BF, $00, $00
  38++E7C5 00 00
  39++E7C7 31 0B 11 BF  	DB $31, $0B, $11, $BF, $00, $00
  39++E7CB 00 00
  40++E7CD 1C 0B 11 BF  	DB $1C, $0B, $11, $BF, $00, $00
  40++E7D1 00 00
  41++E7D3 1C 0B 0A BF  	DB $1C, $0B, $0A, $BF, $00, $00
  41++E7D7 00 00
  42++E7D9 18 0B 02 BF  	DB $18, $0B, $02, $BF, $00, $00
  42++E7DD 00 00
  43++E7DF 18 0B 11 BF  	DB $18, $0B, $11, $BF, $00, $00
  43++E7E3 00 00
  44++E7E5 03 0B 11 BF  	DB $03, $0B, $11, $BF, $00, $00
  44++E7E9 00 00
  45++E7EB 00 0B 02 3F  	DB $00, $0B, $02, $3F, $00, $00
  45++E7EF 00 00
  46++E7F1 00 0B 11 3F  	DB $00, $0B, $11, $3F, $00, $00
  46++E7F5 00 00
  47++E7F7 04 0B 02 3F  	DB $04, $0B, $02, $3F, $00, $00
  47++E7FB 00 00
  48++E7FD 19 0B 02 3F  	DB $19, $0B, $02, $3F, $00, $00
  48++E801 00 00
  49++E803 0E 0B 02 3F  	DB $0E, $0B, $02, $3F, $00, $00
  49++E807 00 00
  50++E809 0E 0B 11 3F  	DB $0E, $0B, $11, $3F, $00, $00
  50++E80D 00 00
  51++E80F 31 0B 02 3F  	DB $31, $0B, $02, $3F, $00, $00
  51++E813 00 00
  52++E815 1C 0B 02 3F  	DB $1C, $0B, $02, $3F, $00, $00
  52++E819 00 00
  53++E81B 1C 0B 0A 3F  	DB $1C, $0B, $0A, $3F, $00, $00
  53++E81F 00 00
  54++E821 1C 0B 11 3F  	DB $1C, $0B, $11, $3F, $00, $00
  54++E825 00 00
  55++E827 31 0B 11 3F  	DB $31, $0B, $11, $3F, $00, $00
  55++E82B 00 00
  56++E82D 31 0B 0A 3F  	DB $31, $0B, $0A, $3F, $00, $00
  56++E831 00 00
  57++E833
  58++E833              LogoVertSize: equ $ - LogoVertices
  59++E833
  60++E833
  61++E833
  62++E833 1F 00 00 04  LogoEdges:	DB $1F, $00, $00, $04
  63++E837 1F 00 04 08  	DB $1F, $00, $04, $08
  64++E83B 1F 00 08 0C  	DB $1F, $00, $08, $0C
  65++E83F 1F 00 0C 10  	DB $1F, $00, $0C, $10
  66++E843 1F 00 10 14  	DB $1F, $00, $10, $14
  67++E847 1F 00 14 18  	DB $1F, $00, $14, $18
  68++E84B 1F 00 18 1C  	DB $1F, $00, $18, $1C
  69++E84F 1F 00 1C 20  	DB $1F, $00, $1C, $20
  70++E853 1F 00 20 24  	DB $1F, $00, $20, $24
  71++E857 1F 00 24 28  	DB $1F, $00, $24, $28
  72++E85B 1F 00 28 2C  	DB $1F, $00, $28, $2C
  73++E85F 1F 00 2C 00  	DB $1F, $00, $2C, $00
  74++E863 1E 03 38 3C  	DB $1E, $03, $38, $3C
  75++E867 1E 01 3C 40  	DB $1E, $01, $3C, $40
  76++E86B 1E 04 40 44  	DB $1E, $04, $40, $44
  77++E86F 1E 01 44 38  	DB $1E, $01, $44, $38
  78++E873 1E 03 10 30  	DB $1E, $03, $10, $30
  79++E877 1E 22 30 34  	DB $1E, $22, $30, $34
  80++E87B 1E 04 34 20  	DB $1E, $04, $34, $20
  81++E87F 1E 11 20 10  	DB $1E, $11, $20, $10
  82++E883 1E 13 10 38  	DB $1E, $13, $10, $38
  83++E887 1E 13 30 3C  	DB $1E, $13, $30, $3C
  84++E88B 1E 24 34 40  	DB $1E, $24, $34, $40
  85++E88F 1E 14 20 44  	DB $1E, $14, $20, $44
  86++E893 1E 00 54 58  	DB $1E, $00, $54, $58
  87++E897 1E 00 58 60  	DB $1E, $00, $58, $60
  88++E89B 1E 00 60 64  	DB $1E, $00, $60, $64
  89++E89F 1E 00 5C 68  	DB $1E, $00, $5C, $68
  90++E8A3 1E 00 6C 70  	DB $1E, $00, $6C, $70
  91++E8A7 1E 00 70 74  	DB $1E, $00, $70, $74
  92++E8AB 1E 00 78 7C  	DB $1E, $00, $78, $7C
  93++E8AF 1E 00 80 84  	DB $1E, $00, $80, $84
  94++E8B3 1E 00 88 8C  	DB $1E, $00, $88, $8C
  95++E8B7 1E 00 90 94  	DB $1E, $00, $90, $94
  96++E8BB 1E 00 94 9C  	DB $1E, $00, $94, $9C
  97++E8BF 1E 00 9C A0  	DB $1E, $00, $9C, $A0
  98++E8C3 1E 00 A4 98  	DB $1E, $00, $A4, $98
  99++E8C7
 100++E8C7              LogoEdgesSize: equ $ - LogoEdges
 101++E8C7
 102++E8C7
 103++E8C7              LogoEdgesCnt: equ LogoEdgesSize/4
 104++E8C7
 105++E8C7
 106++E8C7 1F 00 17 00  LogoNormals:	DB $1F, $00, $17, $00
 107++E8CB 1F 00 04 0F  	DB $1F, $00, $04, $0F
 108++E8CF 3F 00 0D 34  	DB $3F, $00, $0D, $34
 109++E8D3 9F 51 51 00  	DB $9F, $51, $51, $00
 110++E8D7 1F 51 51 00  	DB $1F, $51, $51, $00
 111++E8DB
 112++E8DB
 113++E8DB              LogoNormalsSize: equ $ - LogoNormals
 114++E8DB              LogoLen: equ $ - Logo
 115++E8DB
# file closed: ./Data/Ships/Logo.asm
  90+ E8DB                                      include "Data/Ships/Mamba.asm"
# file opened: ./Data/Ships/Mamba.asm
   1++E8DB 01 13 24     Mamba:	DB $01, $13, $24
   2++E8DE 89 E9        	DW MambaEdges
   3++E8E0 70           	DB MambaEdgesSize
   4++E8E1 00 22        	DB $00, $22
   5++E8E3 96           	DB MambaVertSize
   6++E8E4 1C           	DB MambaEdgesCnt
   7++E8E5 00 96        	DB $00, $96
   8++E8E7 14           	DB MambaNormalsSize
   9++E8E8 19 5A 1E     	DB $19, $5A, $1E
  10++E8EB F9 E9        	DW MambaNormals
  11++E8ED 02 12        	DB $02, $12
  12++E8EF F3 E8        	DW MambaVertices
  13++E8F1 00 00                                DB 0,0                      ; Type and Tactics
  14++E8F3
  15++E8F3 00 00 40 1F  MambaVertices:	DB $00, $00, $40, $1F, $10, $32
  15++E8F7 10 32
  16++E8F9 40 08 20 FF  	DB $40, $08, $20, $FF, $20, $44
  16++E8FD 20 44
  17++E8FF 20 08 20 BE  	DB $20, $08, $20, $BE, $21, $44
  17++E903 21 44
  18++E905 20 08 20 3E  	DB $20, $08, $20, $3E, $31, $44
  18++E909 31 44
  19++E90B 40 08 20 7F  	DB $40, $08, $20, $7F, $30, $44
  19++E90F 30 44
  20++E911 04 04 10 8E  	DB $04, $04, $10, $8E, $11, $11
  20++E915 11 11
  21++E917 04 04 10 0E  	DB $04, $04, $10, $0E, $11, $11
  21++E91B 11 11
  22++E91D 08 03 1C 0D  	DB $08, $03, $1C, $0D, $11, $11
  22++E921 11 11
  23++E923 08 03 1C 8D  	DB $08, $03, $1C, $8D, $11, $11
  23++E927 11 11
  24++E929 14 04 10 D4  	DB $14, $04, $10, $D4, $00, $00
  24++E92D 00 00
  25++E92F 14 04 10 54  	DB $14, $04, $10, $54, $00, $00
  25++E933 00 00
  26++E935 18 07 14 F4  	DB $18, $07, $14, $F4, $00, $00
  26++E939 00 00
  27++E93B 10 07 14 F0  	DB $10, $07, $14, $F0, $00, $00
  27++E93F 00 00
  28++E941 10 07 14 70  	DB $10, $07, $14, $70, $00, $00
  28++E945 00 00
  29++E947 18 07 14 74  	DB $18, $07, $14, $74, $00, $00
  29++E94B 00 00
  30++E94D 08 04 20 AD  	DB $08, $04, $20, $AD, $44, $44
  30++E951 44 44
  31++E953 08 04 20 2D  	DB $08, $04, $20, $2D, $44, $44
  31++E957 44 44
  32++E959 08 04 20 6E  	DB $08, $04, $20, $6E, $44, $44
  32++E95D 44 44
  33++E95F 08 04 20 EE  	DB $08, $04, $20, $EE, $44, $44
  33++E963 44 44
  34++E965 20 04 20 A7  	DB $20, $04, $20, $A7, $44, $44
  34++E969 44 44
  35++E96B 20 04 20 27  	DB $20, $04, $20, $27, $44, $44
  35++E96F 44 44
  36++E971 24 04 20 67  	DB $24, $04, $20, $67, $44, $44
  36++E975 44 44
  37++E977 24 04 20 E7  	DB $24, $04, $20, $E7, $44, $44
  37++E97B 44 44
  38++E97D 26 00 20 A5  	DB $26, $00, $20, $A5, $44, $44
  38++E981 44 44
  39++E983 26 00 20 25  	DB $26, $00, $20, $25, $44, $44
  39++E987 44 44
  40++E989
  41++E989              MambaVertSize: equ $ - MambaVertices
  42++E989
  43++E989
  44++E989
  45++E989 1F 20 00 04  MambaEdges:	DB $1F, $20, $00, $04
  46++E98D 1F 30 00 10  	DB $1F, $30, $00, $10
  47++E991 1F 40 04 10  	DB $1F, $40, $04, $10
  48++E995 1E 42 04 08  	DB $1E, $42, $04, $08
  49++E999 1E 41 08 0C  	DB $1E, $41, $08, $0C
  50++E99D 1E 43 0C 10  	DB $1E, $43, $0C, $10
  51++E9A1 0E 11 14 18  	DB $0E, $11, $14, $18
  52++E9A5 0C 11 18 1C  	DB $0C, $11, $18, $1C
  53++E9A9 0D 11 1C 20  	DB $0D, $11, $1C, $20
  54++E9AD 0C 11 14 20  	DB $0C, $11, $14, $20
  55++E9B1 14 00 24 2C  	DB $14, $00, $24, $2C
  56++E9B5 10 00 24 30  	DB $10, $00, $24, $30
  57++E9B9 10 00 28 34  	DB $10, $00, $28, $34
  58++E9BD 14 00 28 38  	DB $14, $00, $28, $38
  59++E9C1 0E 00 34 38  	DB $0E, $00, $34, $38
  60++E9C5 0E 00 2C 30  	DB $0E, $00, $2C, $30
  61++E9C9 0D 44 3C 40  	DB $0D, $44, $3C, $40
  62++E9CD 0E 44 44 48  	DB $0E, $44, $44, $48
  63++E9D1 0C 44 3C 48  	DB $0C, $44, $3C, $48
  64++E9D5 0C 44 40 44  	DB $0C, $44, $40, $44
  65++E9D9 07 44 50 54  	DB $07, $44, $50, $54
  66++E9DD 05 44 50 60  	DB $05, $44, $50, $60
  67++E9E1 05 44 54 60  	DB $05, $44, $54, $60
  68++E9E5 07 44 4C 58  	DB $07, $44, $4C, $58
  69++E9E9 05 44 4C 5C  	DB $05, $44, $4C, $5C
  70++E9ED 05 44 58 5C  	DB $05, $44, $58, $5C
  71++E9F1 1E 21 00 08  	DB $1E, $21, $00, $08
  72++E9F5 1E 31 00 0C  	DB $1E, $31, $00, $0C
  73++E9F9
  74++E9F9              MambaEdgesSize: equ $ - MambaEdges
  75++E9F9
  76++E9F9
  77++E9F9              MambaEdgesCnt: equ MambaEdgesSize/4
  78++E9F9
  79++E9F9
  80++E9F9 5E 00 18 02  MambaNormals:	DB $5E, $00, $18, $02
  81++E9FD 1E 00 18 02  	DB $1E, $00, $18, $02
  82++EA01 9E 20 40 10  	DB $9E, $20, $40, $10
  83++EA05 1E 20 40 10  	DB $1E, $20, $40, $10
  84++EA09 3E 00 00 7F  	DB $3E, $00, $00, $7F
  85++EA0D
  86++EA0D              MambaNormalsSize: equ $ - MambaNormals
  87++EA0D              MambaLen: equ $ - Mamba
  88++EA0D
# file closed: ./Data/Ships/Mamba.asm
  91+ EA0D                                      include "Data/Ships/Missile.asm"
# file opened: ./Data/Ships/Missile.asm
   1++EA0D 00 06 40     Missile:	DB $00, $06, $40
   2++EA10 8B EA        	DW MissileEdges
   3++EA12 60           	DB MissileEdgesSize
   4++EA13 00 0A        	DB $00, $0A
   5++EA15 66           	DB MissileVertSize
   6++EA16 18           	DB MissileEdgesCnt
   7++EA17 00 00        	DB $00, $00
   8++EA19 24           	DB MissileNormalsSize
   9++EA1A 0E 02 2C     	DB $0E, $02, $2C
  10++EA1D EB EA        	DW MissileNormals
  11++EA1F 02 00        	DB $02, $00
  12++EA21 25 EA        	DW MissileVertices
  13++EA23 01 00            DB ShipTypeMissile,0                      ; Type and Tactics
  14++EA25
  15++EA25 00 00 44 1F  MissileVertices:	DB $00, $00, $44, $1F, $10, $32
  15++EA29 10 32
  16++EA2B 08 08 24 5F  	DB $08, $08, $24, $5F, $21, $54
  16++EA2F 21 54
  17++EA31 08 08 24 1F  	DB $08, $08, $24, $1F, $32, $74
  17++EA35 32 74
  18++EA37 08 08 24 9F  	DB $08, $08, $24, $9F, $30, $76
  18++EA3B 30 76
  19++EA3D 08 08 24 DF  	DB $08, $08, $24, $DF, $10, $65
  19++EA41 10 65
  20++EA43 08 08 2C 3F  	DB $08, $08, $2C, $3F, $74, $88
  20++EA47 74 88
  21++EA49 08 08 2C 7F  	DB $08, $08, $2C, $7F, $54, $88
  21++EA4D 54 88
  22++EA4F 08 08 2C FF  	DB $08, $08, $2C, $FF, $65, $88
  22++EA53 65 88
  23++EA55 08 08 2C BF  	DB $08, $08, $2C, $BF, $76, $88
  23++EA59 76 88
  24++EA5B 0C 0C 2C 28  	DB $0C, $0C, $2C, $28, $74, $88
  24++EA5F 74 88
  25++EA61 0C 0C 2C 68  	DB $0C, $0C, $2C, $68, $54, $88
  25++EA65 54 88
  26++EA67 0C 0C 2C E8  	DB $0C, $0C, $2C, $E8, $65, $88
  26++EA6B 65 88
  27++EA6D 0C 0C 2C A8  	DB $0C, $0C, $2C, $A8, $76, $88
  27++EA71 76 88
  28++EA73 08 08 0C A8  	DB $08, $08, $0C, $A8, $76, $77
  28++EA77 76 77
  29++EA79 08 08 0C E8  	DB $08, $08, $0C, $E8, $65, $66
  29++EA7D 65 66
  30++EA7F 08 08 0C 28  	DB $08, $08, $0C, $28, $74, $77
  30++EA83 74 77
  31++EA85 08 08 0C 68  	DB $08, $08, $0C, $68, $54, $55
  31++EA89 54 55
  32++EA8B
  33++EA8B              MissileVertSize: equ $ - MissileVertices
  34++EA8B
  35++EA8B
  36++EA8B
  37++EA8B 1F 21 00 04  MissileEdges:	DB $1F, $21, $00, $04
  38++EA8F 1F 32 00 08  	DB $1F, $32, $00, $08
  39++EA93 1F 30 00 0C  	DB $1F, $30, $00, $0C
  40++EA97 1F 10 00 10  	DB $1F, $10, $00, $10
  41++EA9B 1F 24 04 08  	DB $1F, $24, $04, $08
  42++EA9F 1F 51 04 10  	DB $1F, $51, $04, $10
  43++EAA3 1F 60 0C 10  	DB $1F, $60, $0C, $10
  44++EAA7 1F 73 08 0C  	DB $1F, $73, $08, $0C
  45++EAAB 1F 74 08 14  	DB $1F, $74, $08, $14
  46++EAAF 1F 54 04 18  	DB $1F, $54, $04, $18
  47++EAB3 1F 65 10 1C  	DB $1F, $65, $10, $1C
  48++EAB7 1F 76 0C 20  	DB $1F, $76, $0C, $20
  49++EABB 1F 86 1C 20  	DB $1F, $86, $1C, $20
  50++EABF 1F 87 14 20  	DB $1F, $87, $14, $20
  51++EAC3 1F 84 14 18  	DB $1F, $84, $14, $18
  52++EAC7 1F 85 18 1C  	DB $1F, $85, $18, $1C
  53++EACB 08 85 18 28  	DB $08, $85, $18, $28
  54++EACF 08 87 14 24  	DB $08, $87, $14, $24
  55++EAD3 08 87 20 30  	DB $08, $87, $20, $30
  56++EAD7 08 85 1C 2C  	DB $08, $85, $1C, $2C
  57++EADB 08 74 24 3C  	DB $08, $74, $24, $3C
  58++EADF 08 54 28 40  	DB $08, $54, $28, $40
  59++EAE3 08 76 30 34  	DB $08, $76, $30, $34
  60++EAE7 08 65 2C 38  	DB $08, $65, $2C, $38
  61++EAEB
  62++EAEB              MissileEdgesSize: equ $ - MissileEdges
  63++EAEB
  64++EAEB
  65++EAEB              MissileEdgesCnt: equ MissileEdgesSize/4
  66++EAEB
  67++EAEB
  68++EAEB 9F 40 00 10  MissileNormals:	DB $9F, $40, $00, $10
  69++EAEF 5F 00 40 10  	DB $5F, $00, $40, $10
  70++EAF3 1F 40 00 10  	DB $1F, $40, $00, $10
  71++EAF7 1F 00 40 10  	DB $1F, $00, $40, $10
  72++EAFB 1F 20 00 00  	DB $1F, $20, $00, $00
  73++EAFF 5F 00 20 00  	DB $5F, $00, $20, $00
  74++EB03 9F 20 00 00  	DB $9F, $20, $00, $00
  75++EB07 1F 00 20 00  	DB $1F, $00, $20, $00
  76++EB0B 3F 00 00 B0  	DB $3F, $00, $00, $B0
  77++EB0F
  78++EB0F
  79++EB0F              MissileNormalsSize: equ $ - MissileNormals
  80++EB0F              MissileLen: equ $ - Missile
  81++EB0F
# file closed: ./Data/Ships/Missile.asm
  92+ EB0F                                      include "Data/Ships/Monitor.asm"
# file opened: ./Data/Ships/Monitor.asm
   1++EB0F 04 36 00     Monitor:	            DB $04, $36, $00
   2++EB12 8D EB                                DW MonitorEdges
   3++EB14 5C                                   DB MonitorEdgesSize
   4++EB15 00 2A                                DB $00, $2A
   5++EB17 66                                   DB MonitorVertSize
   6++EB18 17                                   DB MonitorEdgesCnt
   7++EB19 01 90                                DB $01, $90
   8++EB1B 2C                                   DB MonitorNormalsSize
   9++EB1C 28 84 10                             DB $28, $84, $10
  10++EB1F E9 EB                                DW MonitorNormals
  11++EB21 00 37                                DB $00, $37
  12++EB23 27 EB                                DW MonitorVertices
  13++EB25 00 00                                DB 0,0                      ; Type and Tactics
  14++EB27
  15++EB27 00 0A 8C 1F  MonitorVertices:	    DB $00, $0A, $8C, $1F, $FF, $FF
  15++EB2B FF FF
  16++EB2D 14 28 14 3F                          DB $14, $28, $14, $3F, $23, $01
  16++EB31 23 01
  17++EB33 14 28 14 BF                          DB $14, $28, $14, $BF, $50, $34
  17++EB37 50 34
  18++EB39 32 00 0A 1F                          DB $32, $00, $0A, $1F, $78, $12
  18++EB3D 78 12
  19++EB3F 32 00 0A 9F                          DB $32, $00, $0A, $9F, $96, $45
  19++EB43 96 45
  20++EB45 1E 04 3C 3F                          DB $1E, $04, $3C, $3F, $AA, $28
  20++EB49 AA 28
  21++EB4B 1E 04 3C BF                          DB $1E, $04, $3C, $BF, $AA, $49
  21++EB4F AA 49
  22++EB51 12 14 3C 3F                          DB $12, $14, $3C, $3F, $AA, $23
  22++EB55 AA 23
  23++EB57 12 14 3C BF                          DB $12, $14, $3C, $BF, $AA, $34
  23++EB5B AA 34
  24++EB5D 00 14 3C 7F                          DB $00, $14, $3C, $7F, $AA, $89
  24++EB61 AA 89
  25++EB63 00 28 0A 5F                          DB $00, $28, $0A, $5F, $89, $67
  25++EB67 89 67
  26++EB69 00 22 0A 0A                          DB $00, $22, $0A, $0A, $00, $00
  26++EB6D 00 00
  27++EB6F 00 1A 32 0A                          DB $00, $1A, $32, $0A, $00, $00
  27++EB73 00 00
  28++EB75 14 0A 3C 4A                          DB $14, $0A, $3C, $4A, $77, $77
  28++EB79 77 77
  29++EB7B 0A 00 64 0A                          DB $0A, $00, $64, $0A, $77, $77
  29++EB7F 77 77
  30++EB81 14 0A 3C CA                          DB $14, $0A, $3C, $CA, $66, $66
  30++EB85 66 66
  31++EB87 0A 00 64 8A                          DB $0A, $00, $64, $8A, $66, $66
  31++EB8B 66 66
  32++EB8D              MonitorVertSize:        equ $ - MonitorVertices
  33++EB8D 1F 01 00 04  MonitorEdges:	        DB $1F, $01, $00, $04
  34++EB91 1F 12 04 0C  	                    DB $1F, $12, $04, $0C
  35++EB95 1F 23 04 1C                          DB $1F, $23, $04, $1C
  36++EB99 1F 34 08 20                          DB $1F, $34, $08, $20
  37++EB9D 1F 45 08 10                          DB $1F, $45, $08, $10
  38++EBA1 1F 50 00 08                          DB $1F, $50, $00, $08
  39++EBA5 1F 03 04 08                          DB $1F, $03, $04, $08
  40++EBA9 1F 67 00 28                          DB $1F, $67, $00, $28
  41++EBAD 1F 78 0C 28                          DB $1F, $78, $0C, $28
  42++EBB1 1F 89 24 28                          DB $1F, $89, $24, $28
  43++EBB5 1F 96 10 28                          DB $1F, $96, $10, $28
  44++EBB9 1F 17 00 0C                          DB $1F, $17, $00, $0C
  45++EBBD 1F 28 0C 14                          DB $1F, $28, $0C, $14
  46++EBC1 1F 49 18 10                          DB $1F, $49, $18, $10
  47++EBC5 1F 56 10 00                          DB $1F, $56, $10, $00
  48++EBC9 1F 2A 1C 14                          DB $1F, $2A, $1C, $14
  49++EBCD 1F 3A 20 1C                          DB $1F, $3A, $20, $1C
  50++EBD1 1F 4A 20 18                          DB $1F, $4A, $20, $18
  51++EBD5 1F 8A 14 24                          DB $1F, $8A, $14, $24
  52++EBD9 1F 9A 18 24                          DB $1F, $9A, $18, $24
  53++EBDD 0A 00 2C 30                          DB $0A, $00, $2C, $30
  54++EBE1 0A 77 34 38                          DB $0A, $77, $34, $38
  55++EBE5 0A 66 3C 40                          DB $0A, $66, $3C, $40
  56++EBE9              MonitorEdgesSize:       equ $ - MonitorEdges
  57++EBE9              MonitorEdgesCnt:        equ MonitorEdgesSize/4
  58++EBE9 1F 00 3E 0B  MonitorNormals:	        DB $1F, $00, $3E, $0B
  59++EBED 1F 2C 2B 0D                          DB $1F, $2C, $2B, $0D
  60++EBF1 3F 36 1C 10                          DB $3F, $36, $1C, $10
  61++EBF5 3F 00 39 1C                          DB $3F, $00, $39, $1C
  62++EBF9 BF 36 1C 10                          DB $BF, $36, $1C, $10
  63++EBFD 9F 2C 2B 0D                          DB $9F, $2C, $2B, $0D
  64++EC01 DF 26 2F 12                          DB $DF, $26, $2F, $12
  65++EC05 5F 26 2F 12                          DB $5F, $26, $2F, $12
  66++EC09 7F 27 30 0D                          DB $7F, $27, $30, $0D
  67++EC0D FF 27 30 0D                          DB $FF, $27, $30, $0D
  68++EC11 3F 00 00 40                          DB $3F, $00, $00, $40
  69++EC15              MonitorNormalsSize:     equ $ - MonitorNormals
  70++EC15              MonitorLen:             equ $ - Monitor
  71++EC15
# file closed: ./Data/Ships/Monitor.asm
  93+ EC15                                      include "Data/Ships/Moray.asm"
# file opened: ./Data/Ships/Moray.asm
   1++EC15 01 03 84     Moray:	                DB $01, $03, $84
   2++EC18 81 EC                                DW MorayEdges
   3++EC1A 4C                                   DB MorayEdgesSize
   4++EC1B 00 1A                                DB $00, $1A
   5++EC1D 54                                   DB MorayVertSize
   6++EC1E 13                                   DB MorayEdgesCnt
   7++EC1F 00 32                                DB $00, $32
   8++EC21 24                                   DB MorayNormalsSize
   9++EC22 28 59 19                             DB $28, $59, $19
  10++EC25 CD EC                                DW MorayNormals
  11++EC27 02 2A                                DB $02, $2A
  12++EC29 2D EC                                DW MorayVertices
  13++EC2B 00 00                                DB 0,0                      ; Type and Tactics
  14++EC2D
  15++EC2D 0F 00 41 1F  MorayVertices:	        DB $0F, $00, $41, $1F, $02, $78
  15++EC31 02 78
  16++EC33 0F 00 41 9F                          DB $0F, $00, $41, $9F, $01, $67
  16++EC37 01 67
  17++EC39 00 12 28 31                          DB $00, $12, $28, $31, $FF, $FF
  17++EC3D FF FF
  18++EC3F 3C 00 00 9F                          DB $3C, $00, $00, $9F, $13, $66
  18++EC43 13 66
  19++EC45 3C 00 00 1F                          DB $3C, $00, $00, $1F, $25, $88
  19++EC49 25 88
  20++EC4B 1E 1B 0A 78                          DB $1E, $1B, $0A, $78, $45, $78
  20++EC4F 45 78
  21++EC51 1E 1B 0A F8                          DB $1E, $1B, $0A, $F8, $34, $67
  21++EC55 34 67
  22++EC57 09 04 19 E7                          DB $09, $04, $19, $E7, $44, $44
  22++EC5B 44 44
  23++EC5D 09 04 19 67                          DB $09, $04, $19, $67, $44, $44
  23++EC61 44 44
  24++EC63 00 12 10 67                          DB $00, $12, $10, $67, $44, $44
  24++EC67 44 44
  25++EC69 0D 03 31 05                          DB $0D, $03, $31, $05, $00, $00
  25++EC6D 00 00
  26++EC6F 06 00 41 05                          DB $06, $00, $41, $05, $00, $00
  26++EC73 00 00
  27++EC75 0D 03 31 85                          DB $0D, $03, $31, $85, $00, $00
  27++EC79 00 00
  28++EC7B 06 00 41 85                          DB $06, $00, $41, $85, $00, $00
  28++EC7F 00 00
  29++EC81              MorayVertSize:          equ $ - MorayVertices
  30++EC81 1F 07 00 04  MorayEdges:	            DB $1F, $07, $00, $04
  31++EC85 1F 16 04 0C                          DB $1F, $16, $04, $0C
  32++EC89 18 36 0C 18                          DB $18, $36, $0C, $18
  33++EC8D 18 47 14 18                          DB $18, $47, $14, $18
  34++EC91 18 58 10 14                          DB $18, $58, $10, $14
  35++EC95 1F 28 00 10                          DB $1F, $28, $00, $10
  36++EC99 0F 67 04 18                          DB $0F, $67, $04, $18
  37++EC9D 0F 78 00 14                          DB $0F, $78, $00, $14
  38++ECA1 0F 02 00 08                          DB $0F, $02, $00, $08
  39++ECA5 0F 01 04 08                          DB $0F, $01, $04, $08
  40++ECA9 11 13 08 0C                          DB $11, $13, $08, $0C
  41++ECAD 11 25 08 10                          DB $11, $25, $08, $10
  42++ECB1 0D 45 08 14                          DB $0D, $45, $08, $14
  43++ECB5 0D 34 08 18                          DB $0D, $34, $08, $18
  44++ECB9 05 44 1C 20                          DB $05, $44, $1C, $20
  45++ECBD 07 44 1C 24                          DB $07, $44, $1C, $24
  46++ECC1 07 44 20 24                          DB $07, $44, $20, $24
  47++ECC5 05 00 28 2C                          DB $05, $00, $28, $2C
  48++ECC9 05 00 30 34                          DB $05, $00, $30, $34
  49++ECCD              MorayEdgesSize:         equ $ - MorayEdges
  50++ECCD              MorayEdgesCnt:          equ MorayEdgesSize/4
  51++ECCD 1F 00 2B 07  MorayNormals:	        DB $1F, $00, $2B, $07
  52++ECD1 9F 0A 31 07                          DB $9F, $0A, $31, $07
  53++ECD5 1F 0A 31 07                          DB $1F, $0A, $31, $07
  54++ECD9 F8 3B 1C 65                          DB $F8, $3B, $1C, $65
  55++ECDD 78 00 34 4E                          DB $78, $00, $34, $4E
  56++ECE1 78 3B 1C 65                          DB $78, $3B, $1C, $65
  57++ECE5 DF 48 63 32                          DB $DF, $48, $63, $32
  58++ECE9 5F 00 53 1E                          DB $5F, $00, $53, $1E
  59++ECED 5F 48 63 32                          DB $5F, $48, $63, $32
  60++ECF1
  61++ECF1              MorayNormalsSize:       equ $ - MorayNormals
  62++ECF1              MorayLen:               equ $ - Moray
  63++ECF1
# file closed: ./Data/Ships/Moray.asm
  94+ ECF1                                      include "Data/Ships/Ophidian.asm"
# file opened: ./Data/Ships/Ophidian.asm
   1++ECF1 02 0E 88     Ophidian:	            DB $02, $0E, $88
   2++ECF4 81 ED                                DW OphidianEdges
   3++ECF6 78                                   DB OphidianEdgesSize
   4++ECF7 00 3C                                DB $00, $3C
   5++ECF9 78                                   DB OphidianVertSize
   6++ECFA 1E                                   DB OphidianEdgesCnt
   7++ECFB 00 32                                DB $00, $32
   8++ECFD 30                                   DB OphidianNormalsSize
   9++ECFE 14 40 22                             DB $14, $40, $22
  10++ED01 F9 ED                                DW OphidianNormals
  11++ED03 01 1A                                DB $01, $1A
  12++ED05 09 ED                                DW OphidianVertices
  13++ED07 00 00                                DB 0,0                      ; Type and Tactics
  14++ED09
  15++ED09 14 00 46 9F  OphidianVertices:	    DB $14, $00, $46, $9F, $68, $02
  15++ED0D 68 02
  16++ED0F 14 00 46 1F                          DB $14, $00, $46, $1F, $67, $01
  16++ED13 67 01
  17++ED15 00 0A 28 1F                          DB $00, $0A, $28, $1F, $22, $01
  17++ED19 22 01
  18++ED1B 1E 00 1E 9F                          DB $1E, $00, $1E, $9F, $8A, $24
  18++ED1F 8A 24
  19++ED21 1E 00 1E 1F                          DB $1E, $00, $1E, $1F, $79, $13
  19++ED25 79 13
  20++ED27 00 10 0A 1F                          DB $00, $10, $0A, $1F, $FF, $FF
  20++ED2B FF FF
  21++ED2D 14 0A 32 3F                          DB $14, $0A, $32, $3F, $9B, $35
  21++ED31 9B 35
  22++ED33 14 0A 32 BF                          DB $14, $0A, $32, $BF, $AB, $45
  22++ED37 AB 45
  23++ED39 1E 00 32 BF                          DB $1E, $00, $32, $BF, $BB, $4A
  23++ED3D BB 4A
  24++ED3F 28 00 32 B0                          DB $28, $00, $32, $B0, $FF, $FF
  24++ED43 FF FF
  25++ED45 1E 00 1E B0                          DB $1E, $00, $1E, $B0, $FF, $FF
  25++ED49 FF FF
  26++ED4B 1E 00 32 3F                          DB $1E, $00, $32, $3F, $BB, $39
  26++ED4F BB 39
  27++ED51 28 00 32 30                          DB $28, $00, $32, $30, $FF, $FF
  27++ED55 FF FF
  28++ED57 1E 00 1E 30                          DB $1E, $00, $1E, $30, $FF, $FF
  28++ED5B FF FF
  29++ED5D 00 0A 32 7F                          DB $00, $0A, $32, $7F, $BB, $9A
  29++ED61 BB 9A
  30++ED63 00 10 14 5F                          DB $00, $10, $14, $5F, $FF, $FF
  30++ED67 FF FF
  31++ED69 0A 04 32 30                          DB $0A, $04, $32, $30, $BB, $BB
  31++ED6D BB BB
  32++ED6F 0A 02 32 70                          DB $0A, $02, $32, $70, $BB, $BB
  32++ED73 BB BB
  33++ED75 0A 02 32 F0                          DB $0A, $02, $32, $F0, $BB, $BB
  33++ED79 BB BB
  34++ED7B 0A 04 32 B0                          DB $0A, $04, $32, $B0, $BB, $BB
  34++ED7F BB BB
  35++ED81
  36++ED81              OphidianVertSize:       equ $ - OphidianVertices
  37++ED81 1F 06 00 04  OphidianEdges:	        DB $1F, $06, $00, $04
  38++ED85 1F 01 04 08                          DB $1F, $01, $04, $08
  39++ED89 1F 02 00 08                          DB $1F, $02, $00, $08
  40++ED8D 1F 12 08 14                          DB $1F, $12, $08, $14
  41++ED91 1F 13 10 14                          DB $1F, $13, $10, $14
  42++ED95 1F 24 0C 14                          DB $1F, $24, $0C, $14
  43++ED99 1F 35 14 18                          DB $1F, $35, $14, $18
  44++ED9D 1F 45 14 1C                          DB $1F, $45, $14, $1C
  45++EDA1 1F 28 00 0C                          DB $1F, $28, $00, $0C
  46++EDA5 1F 17 04 10                          DB $1F, $17, $04, $10
  47++EDA9 1F 39 10 2C                          DB $1F, $39, $10, $2C
  48++EDAD 1F 4A 0C 20                          DB $1F, $4A, $0C, $20
  49++EDB1 1F 67 04 3C                          DB $1F, $67, $04, $3C
  50++EDB5 1F 68 00 3C                          DB $1F, $68, $00, $3C
  51++EDB9 1F 79 10 3C                          DB $1F, $79, $10, $3C
  52++EDBD 1F 8A 0C 3C                          DB $1F, $8A, $0C, $3C
  53++EDC1 1F 9A 38 3C                          DB $1F, $9A, $38, $3C
  54++EDC5 1F 5B 18 1C                          DB $1F, $5B, $18, $1C
  55++EDC9 1F 3B 18 2C                          DB $1F, $3B, $18, $2C
  56++EDCD 1F 4B 1C 20                          DB $1F, $4B, $1C, $20
  57++EDD1 1F 9B 2C 38                          DB $1F, $9B, $2C, $38
  58++EDD5 1F AB 20 38                          DB $1F, $AB, $20, $38
  59++EDD9 10 BB 40 44                          DB $10, $BB, $40, $44
  60++EDDD 10 BB 44 48                          DB $10, $BB, $44, $48
  61++EDE1 10 BB 48 4C                          DB $10, $BB, $48, $4C
  62++EDE5 10 BB 4C 40                          DB $10, $BB, $4C, $40
  63++EDE9 10 39 30 34                          DB $10, $39, $30, $34
  64++EDED 10 39 2C 30                          DB $10, $39, $2C, $30
  65++EDF1 10 4A 28 24                          DB $10, $4A, $28, $24
  66++EDF5 10 4A 24 20                          DB $10, $4A, $24, $20
  67++EDF9              OphidianEdgesSize:      equ $ - OphidianEdges
  68++EDF9              OphidianEdgesCnt:       equ OphidianEdgesSize/4
  69++EDF9
  70++EDF9 1F 00 25 0C  OphidianNormals:	    DB $1F, $00, $25, $0C
  71++EDFD 1F 0B 1C 05                          DB $1F, $0B, $1C, $05
  72++EE01 9F 0B 1C 05                          DB $9F, $0B, $1C, $05
  73++EE05 1F 10 22 02                          DB $1F, $10, $22, $02
  74++EE09 9F 10 22 02                          DB $9F, $10, $22, $02
  75++EE0D 3F 00 25 03                          DB $3F, $00, $25, $03
  76++EE11 5F 00 1F 0A                          DB $5F, $00, $1F, $0A
  77++EE15 5F 0A 14 02                          DB $5F, $0A, $14, $02
  78++EE19 DF 0A 14 02                          DB $DF, $0A, $14, $02
  79++EE1D 7F 12 20 02                          DB $7F, $12, $20, $02
  80++EE21 FF 12 20 02                          DB $FF, $12, $20, $02
  81++EE25 3F 00 00 25                          DB $3F, $00, $00, $25
  82++EE29
  83++EE29              OphidianNormalsSize:    equ $ - OphidianNormals
  84++EE29              OphidianLen:            equ $ - Ophidian
  85++EE29
# file closed: ./Data/Ships/Ophidian.asm
  95+ EE29                                      include "Data/Ships/Plate.asm"
# file opened: ./Data/Ships/Plate.asm
   1++EE29 80 00 64     Plate:	DB $80, $00, $64
   2++EE2C 53 EE        	DW PlateEdges
   3++EE2E 10           	DB PlateEdgesSize
   4++EE2F 00 0A        	DB $00, $0A
   5++EE31 12           	DB PlateVertSize
   6++EE32 04           	DB PlateEdgesCnt
   7++EE33 00 00        	DB $00, $00
   8++EE35 04           	DB PlateNormalsSize
   9++EE36 05 10 10     	DB $05, $10, $10
  10++EE39 63 EE        	DW PlateNormals
  11++EE3B 03 00        	DB $03, $00
  12++EE3D 41 EE        	DW PlateVertices
  13++EE3F 00 00                                DB 0,0                      ; Type and Tactics
  14++EE41
  15++EE41
  16++EE41 0F 16 09 FF  PlateVertices:	DB $0F, $16, $09, $FF, $FF, $FF
  16++EE45 FF FF
  17++EE47 0F 26 09 BF  	DB $0F, $26, $09, $BF, $FF, $FF
  17++EE4B FF FF
  18++EE4D 13 20 0B 14  	DB $13, $20, $0B, $14, $FF, $FF
  18++EE51 FF FF
  19++EE53
  20++EE53              PlateVertSize: equ $ - PlateVertices
  21++EE53
  22++EE53
  23++EE53
  24++EE53 1F FF 00 04  PlateEdges:	DB $1F, $FF, $00, $04
  25++EE57 10 FF 04 08  	DB $10, $FF, $04, $08
  26++EE5B 14 FF 08 0C  	DB $14, $FF, $08, $0C
  27++EE5F 10 FF 0C 00  	DB $10, $FF, $0C, $00
  28++EE63
  29++EE63              PlateEdgesSize: equ $ - PlateEdges
  30++EE63
  31++EE63
  32++EE63              PlateEdgesCnt: equ PlateEdgesSize/4
  33++EE63
  34++EE63
  35++EE63 00 00 00 00  PlateNormals:	DB $00, $00, $00, $00
  36++EE67
  37++EE67
  38++EE67              PlateNormalsSize: equ $ - PlateNormals
  39++EE67              PlateLen: equ $ - Plate
  40++EE67
# file closed: ./Data/Ships/Plate.asm
  96+ EE67                                      include "Data/Ships/Python.asm"
# file opened: ./Data/Ships/Python.asm
   1++EE67              ;\ -> &5BA1 \ Python = Type 12
   2++EE67 05 00 19     Python:                 DB $05, $00, $19
   3++EE6A C1 EE                                DW PythonEdges
   4++EE6C 68                                   DB PythonEdgesSize
   5++EE6D 00 2A                                DB $00,$2A
   6++EE6F 42                                   DB PythonVertSize
   7++EE70 1A                                   DB PythonEdgesCnt
   8++EE71 00 00                                DB $00,$00
   9++EE73 34                                   DB PythonNormalsSize
  10++EE74 28 FA 14                             DB $28,$FA,$14
  11++EE77 29 EF                                DW PythonNormals
  12++EE79 00 1B                                DB $00, $1B
  13++EE7B 7F EE                                DW PythonVertices
  14++EE7D 00 00                                DB 0,0                      ; Type and Tactics
  15++EE7F
  16++EE7F 00 00 E0 1F  PythonVertices:         DB $00, $00, $E0, $1F, $10, $32
  16++EE83 10 32
  17++EE85 00 30 30 1E                          DB $00, $30, $30, $1E, $10, $54
  17++EE89 10 54
  18++EE8B 60 00 10 3F                          DB $60, $00, $10, $3F, $FF, $FF
  18++EE8F FF FF
  19++EE91 60 00 10 BF                          DB $60, $00, $10, $BF, $FF, $FF
  19++EE95 FF FF
  20++EE97 00 30 20 3E                          DB $00, $30, $20, $3E, $54, $98
  20++EE9B 54 98
  21++EE9D 00 18 70 3F                          DB $00, $18, $70, $3F, $89, $CC
  21++EEA1 89 CC
  22++EEA3 30 00 70 BF                          DB $30, $00, $70, $BF, $B8, $CC
  22++EEA7 B8 CC
  23++EEA9 30 00 70 3F                          DB $30, $00, $70, $3F, $A9, $CC
  23++EEAD A9 CC
  24++EEAF 00 30 30 5E                          DB $00, $30, $30, $5E, $32, $76
  24++EEB3 32 76
  25++EEB5 00 30 20 7E                          DB $00, $30, $20, $7E, $76, $BA
  25++EEB9 76 BA
  26++EEBB 00 18 70 7E                          DB $00, $18, $70, $7E, $BA, $CC
  26++EEBF BA CC
  27++EEC1              PythonVertSize          equ $  - PythonVertices
  28++EEC1 1E 32 00 20  PythonEdges:            DB $1E, $32, $00, $20, $1F, $20, $00, $0C
  28++EEC5 1F 20 00 0C
  29++EEC9 1F 31 00 08                          DB $1F, $31, $00, $08, $1E, $10, $00, $04
  29++EECD 1E 10 00 04
  30++EED1 1D 59 08 10                          DB $1D, $59, $08, $10, $1D, $51, $04, $08
  30++EED5 1D 51 04 08
  31++EED9 1D 37 08 20                          DB $1D, $37, $08, $20, $1D, $40, $04, $0C
  31++EEDD 1D 40 04 0C
  32++EEE1 1D 62 0C 20                          DB $1D, $62, $0C, $20, $1D, $A7, $08, $24
  32++EEE5 1D A7 08 24
  33++EEE9 1D 84 0C 10                          DB $1D, $84, $0C, $10, $1D, $B6, $0C, $24
  33++EEED 1D B6 0C 24
  34++EEF1 05 88 0C 14                          DB $05, $88, $0C, $14, $05, $BB, $0C, $28
  34++EEF5 05 BB 0C 28
  35++EEF9 05 99 08 14                          DB $05, $99, $08, $14, $05, $AA, $08, $28
  35++EEFD 05 AA 08 28
  36++EF01 1F A9 08 1C                          DB $1F, $A9, $08, $1C, $1F, $B8, $0C, $18
  36++EF05 1F B8 0C 18
  37++EF09 1F C8 14 18                          DB $1F, $C8, $14, $18, $1F, $C9, $14, $1C
  37++EF0D 1F C9 14 1C
  38++EF11 1D AC 1C 28                          DB $1D, $AC, $1C, $28, $1D, $CB, $18, $28
  38++EF15 1D CB 18 28
  39++EF19 1D 98 10 14                          DB $1D, $98, $10, $14, $1D, $BA, $24, $28
  39++EF1D 1D BA 24 28
  40++EF21 1D 54 04 10                          DB $1D, $54, $04, $10, $1D, $76, $20, $24
  40++EF25 1D 76 20 24
  41++EF29              PythonEdgesSize         equ $  - PythonEdges
  42++EF29              PythonEdgesCnt          equ PythonEdgesSize/4
  43++EF29 9E 1B 28 0B  PythonNormals           DB $9E, $1B, $28, $0B, $1E, $1B, $28, $0B
  43++EF2D 1E 1B 28 0B
  44++EF31 DE 1B 28 0B                          DB $DE, $1B, $28, $0B, $5E, $1B, $28, $0B
  44++EF35 5E 1B 28 0B
  45++EF39 9E 13 26 00                          DB $9E, $13, $26, $00, $1E, $13, $26, $00
  45++EF3D 1E 13 26 00
  46++EF41 DE 13 26 00                          DB $DE, $13, $26, $00, $5E, $13, $26, $00
  46++EF45 5E 13 26 00
  47++EF49 BE 19 25 0B                          DB $BE, $19, $25, $0B, $3E, $19, $25, $0B
  47++EF4D 3E 19 25 0B
  48++EF51 7E 19 25 0B                          DB $7E, $19, $25, $0B, $FE, $19, $25, $0B
  48++EF55 FE 19 25 0B
  49++EF59 3E 00 00 70                          DB $3E, $00, $00, $70
  50++EF5D              PythonNormalsSize       equ $  - PythonNormals
  51++EF5D              PythonLen               equ $  - Python
  52++EF5D
# file closed: ./Data/Ships/Python.asm
  97+ EF5D                                      include "Data/Ships/Python_P.asm"
# file opened: ./Data/Ships/Python_P.asm
   1++EF5D 02 19 00     Python_P:	DB $02, $19, $00
   2++EF60 B7 EF        	DW Python_PEdges
   3++EF62 68           	DB Python_PEdgesSize
   4++EF63 00 2A        	DB $00, $2A
   5++EF65 42           	DB Python_PVertSize
   6++EF66 1A           	DB Python_PEdgesCnt
   7++EF67 00 C8        	DB $00, $C8
   8++EF69 34           	DB Python_PNormalsSize
   9++EF6A 28 FA 14     	DB $28, $FA, $14
  10++EF6D 1F F0        	DW Python_PNormals
  11++EF6F 00 1B        	DB $00, $1B
  12++EF71 75 EF        	DW Python_PVertices
  13++EF73 00 00                                DB 0,0                      ; Type and Tactics
  14++EF75
  15++EF75 00 00 E0 1F  Python_PVertices:	DB $00, $00, $E0, $1F, $10, $32
  15++EF79 10 32
  16++EF7B 00 30 30 1F  	DB $00, $30, $30, $1F, $10, $54
  16++EF7F 10 54
  17++EF81 60 00 10 3F  	DB $60, $00, $10, $3F, $FF, $FF
  17++EF85 FF FF
  18++EF87 60 00 10 BF  	DB $60, $00, $10, $BF, $FF, $FF
  18++EF8B FF FF
  19++EF8D 00 30 20 3F  	DB $00, $30, $20, $3F, $54, $98
  19++EF91 54 98
  20++EF93 00 18 70 3F  	DB $00, $18, $70, $3F, $89, $CC
  20++EF97 89 CC
  21++EF99 30 00 70 BF  	DB $30, $00, $70, $BF, $B8, $CC
  21++EF9D B8 CC
  22++EF9F 30 00 70 3F  	DB $30, $00, $70, $3F, $A9, $CC
  22++EFA3 A9 CC
  23++EFA5 00 30 30 5F  	DB $00, $30, $30, $5F, $32, $76
  23++EFA9 32 76
  24++EFAB 00 30 20 7F  	DB $00, $30, $20, $7F, $76, $BA
  24++EFAF 76 BA
  25++EFB1 00 18 70 7F  	DB $00, $18, $70, $7F, $BA, $CC
  25++EFB5 BA CC
  26++EFB7
  27++EFB7              Python_PVertSize: equ $ - Python_PVertices
  28++EFB7
  29++EFB7
  30++EFB7
  31++EFB7 1F 32 00 20  Python_PEdges:	DB $1F, $32, $00, $20
  32++EFBB 1F 20 00 0C  	DB $1F, $20, $00, $0C
  33++EFBF 1F 31 00 08  	DB $1F, $31, $00, $08
  34++EFC3 1F 10 00 04  	DB $1F, $10, $00, $04
  35++EFC7 1F 59 08 10  	DB $1F, $59, $08, $10
  36++EFCB 1F 51 04 08  	DB $1F, $51, $04, $08
  37++EFCF 1F 37 08 20  	DB $1F, $37, $08, $20
  38++EFD3 1F 40 04 0C  	DB $1F, $40, $04, $0C
  39++EFD7 1F 62 0C 20  	DB $1F, $62, $0C, $20
  40++EFDB 1F A7 08 24  	DB $1F, $A7, $08, $24
  41++EFDF 1F 84 0C 10  	DB $1F, $84, $0C, $10
  42++EFE3 1F B6 0C 24  	DB $1F, $B6, $0C, $24
  43++EFE7 07 88 0C 14  	DB $07, $88, $0C, $14
  44++EFEB 07 BB 0C 28  	DB $07, $BB, $0C, $28
  45++EFEF 07 99 08 14  	DB $07, $99, $08, $14
  46++EFF3 07 AA 08 28  	DB $07, $AA, $08, $28
  47++EFF7 1F A9 08 1C  	DB $1F, $A9, $08, $1C
  48++EFFB 1F B8 0C 18  	DB $1F, $B8, $0C, $18
  49++EFFF 1F C8 14 18  	DB $1F, $C8, $14, $18
  50++F003 1F C9 14 1C  	DB $1F, $C9, $14, $1C
  51++F007 1F AC 1C 28  	DB $1F, $AC, $1C, $28
  52++F00B 1F CB 18 28  	DB $1F, $CB, $18, $28
  53++F00F 1F 98 10 14  	DB $1F, $98, $10, $14
  54++F013 1F BA 24 28  	DB $1F, $BA, $24, $28
  55++F017 1F 54 04 10  	DB $1F, $54, $04, $10
  56++F01B 1F 76 20 24  	DB $1F, $76, $20, $24
  57++F01F
  58++F01F              Python_PEdgesSize: equ $ - Python_PEdges
  59++F01F
  60++F01F
  61++F01F              Python_PEdgesCnt: equ Python_PEdgesSize/4
  62++F01F
  63++F01F
  64++F01F 9F 1B 28 0B  Python_PNormals:	DB $9F, $1B, $28, $0B
  65++F023 1F 1B 28 0B  	DB $1F, $1B, $28, $0B
  66++F027 DF 1B 28 0B  	DB $DF, $1B, $28, $0B
  67++F02B 5F 1B 28 0B  	DB $5F, $1B, $28, $0B
  68++F02F 9F 13 26 00  	DB $9F, $13, $26, $00
  69++F033 1F 13 26 00  	DB $1F, $13, $26, $00
  70++F037 DF 13 26 00  	DB $DF, $13, $26, $00
  71++F03B 5F 13 26 00  	DB $5F, $13, $26, $00
  72++F03F BF 19 25 0B  	DB $BF, $19, $25, $0B
  73++F043 3F 19 25 0B  	DB $3F, $19, $25, $0B
  74++F047 7F 19 25 0B  	DB $7F, $19, $25, $0B
  75++F04B FF 19 25 0B  	DB $FF, $19, $25, $0B
  76++F04F 3F 00 00 70  	DB $3F, $00, $00, $70
  77++F053
  78++F053
  79++F053              Python_PNormalsSize: equ $ - Python_PNormals
  80++F053              Python_PLen: equ $ - Python_P
  81++F053
# file closed: ./Data/Ships/Python_P.asm
  98+ F053
# file closed: ./Data/ShipModelMetaData2.asm
1153  F053              ; Bank 68  ------------------------------------------------------------------------------------------------------------------------
1154  F053                  SLOT    ShipModelsAddr
1155  F053                  PAGE    BankShipModels3
1156  F053              	ORG     ShipModelsAddr, BankShipModels3
1157  E000
1158  E000                  INCLUDE "./Data/ShipBank3Label.asm"
# file opened: ./Data/ShipBank3Label.asm
   1+ E000 53 68 69 70  ShipBank3Label:         DB  "ShipBank3      "
   1+ E004 42 61 6E 6B
   1+ E008 33 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank3Label.asm
1159  E00F              GetShipBank3Id:         MGetShipBankId ShipBankTable3
1159  E00F 06 00       >                        ld      b,0
1159  E011 4F          >                        ld      c,a                                 ; c= original ship id
1159  E012 CB 3F       >.ShiftLoop:             srl     a
1159  E014 CB 3F       >                        srl     a
1159  E016 CB 3F       >                        srl     a
1159  E018 CB 3F       >                        srl     a                                   ; divide by 16
1159  E01A 47          >                        ld      b,a                                 ; b = bank nbr
1159  E01B 79          >                        ld      a,c
1159  E01C 50          >                        ld      d,b
1159  E01D 1E 10       >                        ld      e,16
1159  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
1159  E021 93          >                        sub     e                                   ; a= actual model id now
1159  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
1159  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
1159  E024 7A          >                        ld      a,d                                 ; a = bank number
1159  E025             >;.. Now b = bank and a = adjusted ship nbr
1159  E025 21 62 E0    >                        ld      hl,ShipBankTable3                        ; a= bank index
1159  E028 ED 31       >                        add     hl,a
1159  E02A ED 31       >                        add     hl,a
1159  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
1159  E02D             >                        ClearCarryFlag
1159  E02D B7          >                    or a
1159  E02E C9          >                        ret
1160  E02F              CopyVertsToUniv3:       McopyVertsToUniverse
1160  E02F 2A 18 C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
1160  E032 11 1C C3    >                        ld          de,UBnkHullVerticies
1160  E035 06 00       >                        ld          b,0
1160  E037 3A 0C C3    >                        ld			a,(VertexCtX6Addr)
1160  E03A 4F          >                        ld          c,a
1160  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1160  E03C CD 3D 8F    >                        call        memcopy_dma
1160  E03F C9          >                        ret
1161  E040              CopyEdgesToUniv3:       McopyEdgesToUniverse
1161  E040 2A 07 C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
1161  E043 11 48 C4    >                        ld          de,UBnkHullEdges
1161  E046 06 00       >                        ld          b,0
1161  E048 3A 09 C3    >                        ld			a,(LineX4Addr)
1161  E04B 4F          >                        ld          c,a
1161  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1161  E04D CD 3D 8F    >                        call        memcopy_dma
1161  E050 C9          >                        ret
1162  E051              CopyNormsToUniv3:       McopyNormsToUniverse
1162  E051 2A 14 C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
1162  E054 11 F8 C8    >                        ld          de,UBnkHullNormals
1162  E057 06 00       >                        ld          b,0
1162  E059 3A 10 C3    >                        ld          a,(FaceCtX4Addr)
1162  E05C 4F          >                        ld          c,a
1162  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1162  E05E CD 3D 8F    >                        call        memcopy_dma
1162  E061 C9          >                        ret
1163  E062              ShipBankTable3:         MShipBankTable
1163  E062 3B 00       >                        DW      BankShipModels1
1163  E064 43 00       >                        DW      BankShipModels2
1163  E066 44 00       >                        DW      BankShipModels3
1163  E068 45 00       >                        DW      BankShipModels4
1164  E06A              CopyShipToUniverse3     MCopyShipToUniverse     BankShipModels3
1164  E06A 21 02 C3    >                        ld          hl,UBnkShipModelBank
1164  E06D 36 44       >                        ld          (hl),BankShipModels3
1164  E06F 32 03 C3    >                        ld          (UBnkShipModelNbr),a
1164  E072 21 1F E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
1164  E075 ED 31       >                        add         hl,a
1164  E077 ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
1164  E079 4E          >                        ld          c,(hl)
1164  E07A 23          >                        inc         hl
1164  E07B 46          >                        ld          b,(hl)                      ; bc now equals length of data set
1164  E07C 21 9F E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
1164  E07F ED 31       >                        add         hl,a
1164  E081 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
1164  E083 7E          >                        ld          a,(hl)
1164  E084 23          >                        inc         hl
1164  E085 66          >                        ld          h,(hl)
1164  E086 6F          >                        ld          l,a                         ; now hl = address of ship hull data
1164  E087 11 04 C3    >                        ld          de,UBnkHullCopy             ; Universe bank
1164  E08A 01 18 00    >                        ld          bc,ShipDataLength
1164  E08D ED B0       >                        ldir
1164  E08F CD 2F E0    >                        call        CopyVertsToUniv
1164  E092 CD 40 E0    >                        call        CopyEdgesToUniv
1164  E095 CD 51 E0    >                        call        CopyNormsToUniv
1164  E098 C9          >                        ret
1165  E099              CopyBodyToUniverse3:    MCopyBodyToUniverse     CopyShipToUniverse3
1165  E099 3E 0D       >                        ld          a,13
1165  E09B CD 6A E0    >                        call        CopyShipToUniverse3
1165  E09E C9          >                        ret
1166  E09F                  INCLUDE "./Data/ShipModelMetaData3.asm"
# file opened: ./Data/ShipModelMetaData3.asm
   1+ E09F 1F E1        ShipModelTable3:         DW Rock_Hermit                             ;32
   2+ E0A1 F9 E1                                 DW ShuttleType9                            ;33
   3+ E0A3 2F E3                                 DW Shuttle_Mk_2                            ;34
   4+ E0A5 51 E4                                 DW Sidewinder                              ;35
   5+ E0A7 FD E4                                 DW Splinter                                ;36
   6+ E0A9 55 E5                                 DW TestVector                              ;37
   7+ E0AB B7 E5                                 DW Thargoid                                ;38
   8+ E0AD D7 E6                                 DW Thargon                                 ;39
   9+ E0AF 83 E7                                 DW TransportType10                         ;40
  10+ E0B1 69 E9                                 DW Viper                                   ;41
  11+ E0B3 47 EA                                 DW Worm                                    ;42
  12+ E0B5 FB EA                                 DW Rattler                                 ;43
  13+ E0B7 00 00                                 DW 0                                       ;44
  14+ E0B9 00 00                                 DW 0                                       ;45
  15+ E0BB 00 00                                 DW 0                                       ;46
  16+ E0BD 00 00                                 DW 0                                       ;47
  17+ E0BF 37 E1        ShipVertexTable3:        DW Rock_HermitVertices
  18+ E0C1 11 E2                                 DW ShuttleType9Vertices
  19+ E0C3 47 E3                                 DW Shuttle_Mk_2Vertices
  20+ E0C5 69 E4                                 DW SidewinderVertices
  21+ E0C7 15 E5                                 DW SplinterVertices
  22+ E0C9 6D E5                                 DW TestVectorVertices
  23+ E0CB CF E5                                 DW ThargoidVertices
  24+ E0CD EF E6                                 DW ThargonVertices
  25+ E0CF 9B E7                                 DW TransportType10Vertices
  26+ E0D1 81 E9                                 DW ViperVertices
  27+ E0D3 5F EA                                 DW WormVertices
  28+ E0D5 13 EB                                 DW RattlerVertices
  29+ E0D7 6D E1        ShipEdgeTable3:          DW Rock_HermitEdges
  30+ E0D9 83 E2                                 DW ShuttleType9Edges
  31+ E0DB AD E3                                 DW Shuttle_Mk_2Edges
  32+ E0DD A5 E4                                 DW SidewinderEdges
  33+ E0DF 2D E5                                 DW SplinterEdges
  34+ E0E1 97 E5                                 DW TestVectorEdges
  35+ E0E3 47 E6                                 DW ThargoidEdges
  36+ E0E5 2B E7                                 DW ThargonEdges
  37+ E0E7 79 E8                                 DW TransportType10Edges
  38+ E0E9 DB E9                                 DW ViperEdges
  39+ E0EB 9B EA                                 DW WormEdges
  40+ E0ED 6D EB                                 DW RattlerEdges
  41+ E0EF C1 E1        ShipNormalTable3:        DW Rock_HermitNormals
  42+ E0F1 FB E2                                 DW ShuttleType9Normals
  43+ E0F3 1D E4                                 DW Shuttle_Mk_2Normals
  44+ E0F5 E1 E4                                 DW SidewinderNormals
  45+ E0F7 45 E5                                 DW SplinterNormals
  46+ E0F9 A7 E5                                 DW TestVectorNormals
  47+ E0FB AF E6                                 DW ThargoidNormals
  48+ E0FD 67 E7                                 DW ThargonNormals
  49+ E0FF 31 E9                                 DW TransportType10Normals
  50+ E101 2B EA                                 DW ViperNormals
  51+ E103 DB EA                                 DW WormNormals
  52+ E105 6D EB                                 DW RattlerEdges
  53+ E107 DA 00        ShipModelSizeTable3:     DW Rock_HermitLen
  54+ E109 36 01                                 DW ShuttleType9Len
  55+ E10B 22 01                                 DW Shuttle_Mk_2Len
  56+ E10D AC 00                                 DW SidewinderLen
  57+ E10F 58 00                                 DW SplinterLen
  58+ E111 62 00                                 DW TestVectorLen
  59+ E113 20 01                                 DW ThargoidLen
  60+ E115 AC 00                                 DW ThargonLen
  61+ E117 E6 01                                 DW TransportType10Len
  62+ E119 DE 00                                 DW ViperLen
  63+ E11B B4 00                                 DW WormLen
  64+ E11D 0E 01                                 DW RattlerLen
  65+ E11F
  66+ E11F                                      include "Data/Ships/Rock_Hermit.asm"
# file opened: ./Data/Ships/Rock_Hermit.asm
   1++E11F 07 19 00     Rock_Hermit:	DB $07, $19, $00
   2++E122 6D E1        	DW Rock_HermitEdges
   3++E124 54           	DB Rock_HermitEdgesSize
   4++E125 00 32        	DB $00, $32
   5++E127 36           	DB Rock_HermitVertSize
   6++E128 15           	DB Rock_HermitEdgesCnt
   7++E129 00 00        	DB $00, $00
   8++E12B 38           	DB Rock_HermitNormalsSize
   9++E12C 32 B4 1E     	DB $32, $B4, $1E
  10++E12F C1 E1        	DW Rock_HermitNormals
  11++E131 01 02        	DB $01, $02
  12++E133 37 E1        	DW Rock_HermitVertices
  13++E135 00 00                                DB 0,0                      ; Type and Tactics
  14++E137
  15++E137
  16++E137 00 50 00 1F  Rock_HermitVertices:	DB $00, $50, $00, $1F, $FF, $FF
  16++E13B FF FF
  17++E13D 50 0A 00 DF  	DB $50, $0A, $00, $DF, $FF, $FF
  17++E141 FF FF
  18++E143 00 50 00 5F  	DB $00, $50, $00, $5F, $FF, $FF
  18++E147 FF FF
  19++E149 46 28 00 5F  	DB $46, $28, $00, $5F, $FF, $FF
  19++E14D FF FF
  20++E14F 3C 32 00 1F  	DB $3C, $32, $00, $1F, $65, $DC
  20++E153 65 DC
  21++E155 32 00 3C 1F  	DB $32, $00, $3C, $1F, $FF, $FF
  21++E159 FF FF
  22++E15B 28 00 46 9F  	DB $28, $00, $46, $9F, $10, $32
  22++E15F 10 32
  23++E161 00 1E 4B 3F  	DB $00, $1E, $4B, $3F, $FF, $FF
  23++E165 FF FF
  24++E167 00 32 3C 7F  	DB $00, $32, $3C, $7F, $98, $BA
  24++E16B 98 BA
  25++E16D
  26++E16D
  27++E16D              Rock_HermitVertSize: equ $ - Rock_HermitVertices
  28++E16D
  29++E16D
  30++E16D
  31++E16D 1F 72 00 04  Rock_HermitEdges:	DB $1F, $72, $00, $04
  32++E171 1F D6 00 10  	DB $1F, $D6, $00, $10
  33++E175 1F C5 0C 10  	DB $1F, $C5, $0C, $10
  34++E179 1F B4 08 0C  	DB $1F, $B4, $08, $0C
  35++E17D 1F A3 04 08  	DB $1F, $A3, $04, $08
  36++E181 1F 32 04 18  	DB $1F, $32, $04, $18
  37++E185 1F 31 08 18  	DB $1F, $31, $08, $18
  38++E189 1F 41 08 14  	DB $1F, $41, $08, $14
  39++E18D 1F 10 14 18  	DB $1F, $10, $14, $18
  40++E191 1F 60 00 14  	DB $1F, $60, $00, $14
  41++E195 1F 54 0C 14  	DB $1F, $54, $0C, $14
  42++E199 1F 20 00 18  	DB $1F, $20, $00, $18
  43++E19D 1F 65 10 14  	DB $1F, $65, $10, $14
  44++E1A1 1F A8 04 20  	DB $1F, $A8, $04, $20
  45++E1A5 1F 87 04 1C  	DB $1F, $87, $04, $1C
  46++E1A9 1F D7 00 1C  	DB $1F, $D7, $00, $1C
  47++E1AD 1F DC 10 1C  	DB $1F, $DC, $10, $1C
  48++E1B1 1F C9 0C 1C  	DB $1F, $C9, $0C, $1C
  49++E1B5 1F B9 0C 20  	DB $1F, $B9, $0C, $20
  50++E1B9 1F BA 08 20  	DB $1F, $BA, $08, $20
  51++E1BD 1F 98 1C 20  	DB $1F, $98, $1C, $20
  52++E1C1
  53++E1C1              Rock_HermitEdgesSize: equ $ - Rock_HermitEdges
  54++E1C1
  55++E1C1
  56++E1C1              Rock_HermitEdgesCnt: equ Rock_HermitEdgesSize/4
  57++E1C1
  58++E1C1
  59++E1C1 1F 09 42 51  Rock_HermitNormals:	DB $1F, $09, $42, $51
  60++E1C5 5F 09 42 51  	DB $5F, $09, $42, $51
  61++E1C9 9F 48 40 1F  	DB $9F, $48, $40, $1F
  62++E1CD DF 40 49 2F  	DB $DF, $40, $49, $2F
  63++E1D1 5F 2D 4F 41  	DB $5F, $2D, $4F, $41
  64++E1D5 1F 87 0F 23  	DB $1F, $87, $0F, $23
  65++E1D9 1F 26 4C 46  	DB $1F, $26, $4C, $46
  66++E1DD BF 42 3B 27  	DB $BF, $42, $3B, $27
  67++E1E1 FF 43 0F 50  	DB $FF, $43, $0F, $50
  68++E1E5 7F 42 0E 4B  	DB $7F, $42, $0E, $4B
  69++E1E9 FF 46 50 28  	DB $FF, $46, $50, $28
  70++E1ED 7F 3A 66 33  	DB $7F, $3A, $66, $33
  71++E1F1 3F 51 09 43  	DB $3F, $51, $09, $43
  72++E1F5 3F 2F 5E 3F  	DB $3F, $2F, $5E, $3F
  73++E1F9
  74++E1F9
  75++E1F9              Rock_HermitNormalsSize: equ $ - Rock_HermitNormals
  76++E1F9              Rock_HermitLen: equ $ - Rock_Hermit
  77++E1F9
# file closed: ./Data/Ships/Rock_Hermit.asm
  67+ E1F9                                      include "Data/Ships/ShuttleType9.asm"
# file opened: ./Data/Ships/ShuttleType9.asm
   1++E1F9 0F 09 C4     ShuttleType9:	DB $0F, $09, $C4
   2++E1FC 83 E2        	DW ShuttleType9Edges
   3++E1FE 78           	DB ShuttleType9EdgesSize
   4++E1FF 00 26        	DB $00, $26
   5++E201 72           	DB ShuttleType9VertSize
   6++E202 1E           	DB ShuttleType9EdgesCnt
   7++E203 00 00        	DB $00, $00
   8++E205 34           	DB ShuttleType9NormalsSize
   9++E206 16 20 08     	DB $16, $20, $08
  10++E209 FB E2        	DW ShuttleType9Normals
  11++E20B 02 00        	DB $02, $00
  12++E20D 11 E2        	DW ShuttleType9Vertices
  13++E20F 00 00        	                        DB 0,0                      ; Type and Tactics
  14++E211
  15++E211
  16++E211 00 11 17 5F  ShuttleType9Vertices:	DB $00, $11, $17, $5F, $FF, $FF
  16++E215 FF FF
  17++E217 11 00 17 9F  	DB $11, $00, $17, $9F, $FF, $FF
  17++E21B FF FF
  18++E21D 00 12 17 1F  	DB $00, $12, $17, $1F, $FF, $FF
  18++E221 FF FF
  19++E223 12 00 17 1F  	DB $12, $00, $17, $1F, $FF, $FF
  19++E227 FF FF
  20++E229 14 14 1B FF  	DB $14, $14, $1B, $FF, $12, $39
  20++E22D 12 39
  21++E22F 14 14 1B BF  	DB $14, $14, $1B, $BF, $34, $59
  21++E233 34 59
  22++E235 14 14 1B 3F  	DB $14, $14, $1B, $3F, $56, $79
  22++E239 56 79
  23++E23B 14 14 1B 7F  	DB $14, $14, $1B, $7F, $17, $89
  23++E23F 17 89
  24++E241 05 00 1B 30  	DB $05, $00, $1B, $30, $99, $99
  24++E245 99 99
  25++E247 00 02 1B 70  	DB $00, $02, $1B, $70, $99, $99
  25++E24B 99 99
  26++E24D 05 00 1B A9  	DB $05, $00, $1B, $A9, $99, $99
  26++E251 99 99
  27++E253 00 03 1B 29  	DB $00, $03, $1B, $29, $99, $99
  27++E257 99 99
  28++E259 00 09 23 50  	DB $00, $09, $23, $50, $0A, $BC
  28++E25D 0A BC
  29++E25F 03 01 1F 47  	DB $03, $01, $1F, $47, $FF, $02
  29++E263 FF 02
  30++E265 04 0B 19 08  	DB $04, $0B, $19, $08, $01, $F4
  30++E269 01 F4
  31++E26B 0B 04 19 08  	DB $0B, $04, $19, $08, $A1, $3F
  31++E26F A1 3F
  32++E271 03 01 1F C7  	DB $03, $01, $1F, $C7, $6B, $23
  32++E275 6B 23
  33++E277 03 0B 19 88  	DB $03, $0B, $19, $88, $F8, $C0
  33++E27B F8 C0
  34++E27D 0A 04 19 88  	DB $0A, $04, $19, $88, $4F, $18
  34++E281 4F 18
  35++E283
  36++E283              ShuttleType9VertSize: equ $ - ShuttleType9Vertices
  37++E283
  38++E283
  39++E283
  40++E283 1F 02 00 04  ShuttleType9Edges:	DB $1F, $02, $00, $04
  41++E287 1F 4A 04 08  	DB $1F, $4A, $04, $08
  42++E28B 1F 6B 08 0C  	DB $1F, $6B, $08, $0C
  43++E28F 1F 8C 00 0C  	DB $1F, $8C, $00, $0C
  44++E293 1F 18 00 1C  	DB $1F, $18, $00, $1C
  45++E297 18 12 00 10  	DB $18, $12, $00, $10
  46++E29B 1F 23 04 10  	DB $1F, $23, $04, $10
  47++E29F 18 34 04 14  	DB $18, $34, $04, $14
  48++E2A3 1F 45 08 14  	DB $1F, $45, $08, $14
  49++E2A7 0C 56 08 18  	DB $0C, $56, $08, $18
  50++E2AB 1F 67 0C 18  	DB $1F, $67, $0C, $18
  51++E2AF 18 78 0C 1C  	DB $18, $78, $0C, $1C
  52++E2B3 1F 39 10 14  	DB $1F, $39, $10, $14
  53++E2B7 1F 59 14 18  	DB $1F, $59, $14, $18
  54++E2BB 1F 79 18 1C  	DB $1F, $79, $18, $1C
  55++E2BF 1F 19 10 1C  	DB $1F, $19, $10, $1C
  56++E2C3 10 0C 00 30  	DB $10, $0C, $00, $30
  57++E2C7 10 0A 04 30  	DB $10, $0A, $04, $30
  58++E2CB 10 AB 08 30  	DB $10, $AB, $08, $30
  59++E2CF 10 BC 0C 30  	DB $10, $BC, $0C, $30
  60++E2D3 10 99 20 24  	DB $10, $99, $20, $24
  61++E2D7 07 99 24 28  	DB $07, $99, $24, $28
  62++E2DB 09 99 28 2C  	DB $09, $99, $28, $2C
  63++E2DF 07 99 20 2C  	DB $07, $99, $20, $2C
  64++E2E3 05 BB 34 38  	DB $05, $BB, $34, $38
  65++E2E7 08 BB 38 3C  	DB $08, $BB, $38, $3C
  66++E2EB 07 BB 34 3C  	DB $07, $BB, $34, $3C
  67++E2EF 05 AA 40 44  	DB $05, $AA, $40, $44
  68++E2F3 08 AA 44 48  	DB $08, $AA, $44, $48
  69++E2F7 07 AA 40 48  	DB $07, $AA, $40, $48
  70++E2FB              ShuttleType9EdgesSize: equ $ - ShuttleType9Edges
  71++E2FB              ShuttleType9EdgesCnt: equ ShuttleType9EdgesSize/4
  72++E2FB
  73++E2FB DF 37 37 28  ShuttleType9Normals:	DB $DF, $37, $37, $28
  74++E2FF 5F 00 4A 04  	DB $5F, $00, $4A, $04
  75++E303 DF 33 33 17  	DB $DF, $33, $33, $17
  76++E307 9F 4A 00 04  	DB $9F, $4A, $00, $04
  77++E30B 9F 33 33 17  	DB $9F, $33, $33, $17
  78++E30F 1F 00 4A 04  	DB $1F, $00, $4A, $04
  79++E313 1F 33 33 17  	DB $1F, $33, $33, $17
  80++E317 1F 4A 00 04  	DB $1F, $4A, $00, $04
  81++E31B 5F 33 33 17  	DB $5F, $33, $33, $17
  82++E31F 3F 00 00 6B  	DB $3F, $00, $00, $6B
  83++E323 9F 29 29 5A  	DB $9F, $29, $29, $5A
  84++E327 1F 29 29 5A  	DB $1F, $29, $29, $5A
  85++E32B 5F 37 37 28  	DB $5F, $37, $37, $28
  86++E32F
  87++E32F
  88++E32F              ShuttleType9NormalsSize: equ $ - ShuttleType9Normals
  89++E32F              ShuttleType9Len: equ $ - ShuttleType9
  90++E32F
# file closed: ./Data/Ships/ShuttleType9.asm
  68+ E32F                                      include "Data/Ships/Shuttle_Mk_2.asm"
# file opened: ./Data/Ships/Shuttle_Mk_2.asm
   1++E32F 0F 09 C4     Shuttle_Mk_2:	DB $0F, $09, $C4
   2++E332 AD E3        	DW Shuttle_Mk_2Edges
   3++E334 70           	DB Shuttle_Mk_2EdgesSize
   4++E335 00 26        	DB $00, $26
   5++E337 66           	DB Shuttle_Mk_2VertSize
   6++E338 1C           	DB Shuttle_Mk_2EdgesCnt
   7++E339 00 00        	DB $00, $00
   8++E33B 34           	DB Shuttle_Mk_2NormalsSize
   9++E33C 0A 20 09     	DB $0A, $20, $09
  10++E33F 1D E4        	DW Shuttle_Mk_2Normals
  11++E341 02 00        	DB $02, $00
  12++E343 47 E3        	DW Shuttle_Mk_2Vertices
  13++E345 00 00                                DB 0,0                      ; Type and Tactics
  14++E347
  15++E347
  16++E347 00 00 28 1F  Shuttle_Mk_2Vertices:	DB $00, $00, $28, $1F, $23, $01
  16++E34B 23 01
  17++E34D 00 14 1E 1F  	DB $00, $14, $1E, $1F, $34, $00
  17++E351 34 00
  18++E353 14 00 1E 9F  	DB $14, $00, $1E, $9F, $15, $00
  18++E357 15 00
  19++E359 00 14 1E 5F  	DB $00, $14, $1E, $5F, $26, $11
  19++E35D 26 11
  20++E35F 14 00 1E 1F  	DB $14, $00, $1E, $1F, $37, $22
  20++E363 37 22
  21++E365 14 14 14 9F  	DB $14, $14, $14, $9F, $58, $04
  21++E369 58 04
  22++E36B 14 14 14 DF  	DB $14, $14, $14, $DF, $69, $15
  22++E36F 69 15
  23++E371 14 14 14 5F  	DB $14, $14, $14, $5F, $7A, $26
  23++E375 7A 26
  24++E377 14 14 14 1F  	DB $14, $14, $14, $1F, $7B, $34
  24++E37B 7B 34
  25++E37D 00 14 28 3F  	DB $00, $14, $28, $3F, $BC, $48
  25++E381 BC 48
  26++E383 14 00 28 BF  	DB $14, $00, $28, $BF, $9C, $58
  26++E387 9C 58
  27++E389 00 14 28 7F  	DB $00, $14, $28, $7F, $AC, $69
  27++E38D AC 69
  28++E38F 14 00 28 3F  	DB $14, $00, $28, $3F, $BC, $7A
  28++E393 BC 7A
  29++E395 04 04 28 AA  	DB $04, $04, $28, $AA, $CC, $CC
  29++E399 CC CC
  30++E39B 04 04 28 EA  	DB $04, $04, $28, $EA, $CC, $CC
  30++E39F CC CC
  31++E3A1 04 04 28 6A  	DB $04, $04, $28, $6A, $CC, $CC
  31++E3A5 CC CC
  32++E3A7 04 04 28 2A  	DB $04, $04, $28, $2A, $CC, $CC
  32++E3AB CC CC
  33++E3AD
  34++E3AD              Shuttle_Mk_2VertSize: equ $ - Shuttle_Mk_2Vertices
  35++E3AD
  36++E3AD
  37++E3AD
  38++E3AD 1F 01 00 08  Shuttle_Mk_2Edges:	DB $1F, $01, $00, $08
  39++E3B1 1F 12 00 0C  	DB $1F, $12, $00, $0C
  40++E3B5 1F 23 00 10  	DB $1F, $23, $00, $10
  41++E3B9 1F 30 00 04  	DB $1F, $30, $00, $04
  42++E3BD 1F 04 04 14  	DB $1F, $04, $04, $14
  43++E3C1 1F 05 08 14  	DB $1F, $05, $08, $14
  44++E3C5 1F 15 08 18  	DB $1F, $15, $08, $18
  45++E3C9 1F 16 0C 18  	DB $1F, $16, $0C, $18
  46++E3CD 1F 26 0C 1C  	DB $1F, $26, $0C, $1C
  47++E3D1 1F 27 10 1C  	DB $1F, $27, $10, $1C
  48++E3D5 1F 37 10 20  	DB $1F, $37, $10, $20
  49++E3D9 1F 34 04 20  	DB $1F, $34, $04, $20
  50++E3DD 1F 48 14 24  	DB $1F, $48, $14, $24
  51++E3E1 1F 58 14 28  	DB $1F, $58, $14, $28
  52++E3E5 1F 59 18 28  	DB $1F, $59, $18, $28
  53++E3E9 1F 69 18 2C  	DB $1F, $69, $18, $2C
  54++E3ED 1F 6A 1C 2C  	DB $1F, $6A, $1C, $2C
  55++E3F1 1F 7A 1C 30  	DB $1F, $7A, $1C, $30
  56++E3F5 1F 7B 20 30  	DB $1F, $7B, $20, $30
  57++E3F9 1F 4B 20 24  	DB $1F, $4B, $20, $24
  58++E3FD 1F 8C 24 28  	DB $1F, $8C, $24, $28
  59++E401 1F 9C 28 2C  	DB $1F, $9C, $28, $2C
  60++E405 1F AC 2C 30  	DB $1F, $AC, $2C, $30
  61++E409 1F BC 30 24  	DB $1F, $BC, $30, $24
  62++E40D 0A CC 34 38  	DB $0A, $CC, $34, $38
  63++E411 0A CC 38 3C  	DB $0A, $CC, $38, $3C
  64++E415 0A CC 3C 40  	DB $0A, $CC, $3C, $40
  65++E419 0A CC 40 34  	DB $0A, $CC, $40, $34
  66++E41D
  67++E41D              Shuttle_Mk_2EdgesSize: equ $ - Shuttle_Mk_2Edges
  68++E41D
  69++E41D
  70++E41D              Shuttle_Mk_2EdgesCnt: equ Shuttle_Mk_2EdgesSize/4
  71++E41D
  72++E41D
  73++E41D 9F 27 27 4E  Shuttle_Mk_2Normals:	DB $9F, $27, $27, $4E
  74++E421 DF 27 27 4E  	DB $DF, $27, $27, $4E
  75++E425 5F 27 27 4E  	DB $5F, $27, $27, $4E
  76++E429 1F 27 27 4E  	DB $1F, $27, $27, $4E
  77++E42D 1F 00 60 00  	DB $1F, $00, $60, $00
  78++E431 9F 60 00 00  	DB $9F, $60, $00, $00
  79++E435 5F 00 60 00  	DB $5F, $00, $60, $00
  80++E439 1F 60 00 00  	DB $1F, $60, $00, $00
  81++E43D BF 42 42 16  	DB $BF, $42, $42, $16
  82++E441 FF 42 42 16  	DB $FF, $42, $42, $16
  83++E445 7F 42 42 16  	DB $7F, $42, $42, $16
  84++E449 3F 42 42 16  	DB $3F, $42, $42, $16
  85++E44D 3F 00 00 60  	DB $3F, $00, $00, $60
  86++E451
  87++E451
  88++E451              Shuttle_Mk_2NormalsSize: equ $ - Shuttle_Mk_2Normals
  89++E451              Shuttle_Mk_2Len: equ $ - Shuttle_Mk_2
  90++E451
# file closed: ./Data/Ships/Shuttle_Mk_2.asm
  69+ E451                                      include "Data/Ships/Sidewinder.asm"
# file opened: ./Data/Ships/Sidewinder.asm
   1++E451 00 10 81     Sidewinder:	DB $00, $10, $81
   2++E454 A5 E4        	DW SidewinderEdges
   3++E456 3C           	DB SidewinderEdgesSize
   4++E457 00 1E        	DB $00, $1E
   5++E459 3C           	DB SidewinderVertSize
   6++E45A 0F           	DB SidewinderEdgesCnt
   7++E45B 00 32        	DB $00, $32
   8++E45D 1C           	DB SidewinderNormalsSize
   9++E45E 14 46 25     	DB $14, $46, $25
  10++E461 E1 E4        	DW SidewinderNormals
  11++E463 02 10        	DB $02, $10
  12++E465 69 E4        	DW SidewinderVertices
  13++E467 00 00                                DB 0,0                      ; Type and Tactics
  14++E469
  15++E469 20 00 24 9F  SidewinderVertices:	DB $20, $00, $24, $9F, $10, $54
  15++E46D 10 54
  16++E46F 20 00 24 1F  	DB $20, $00, $24, $1F, $20, $65
  16++E473 20 65
  17++E475 40 00 1C 3F  	DB $40, $00, $1C, $3F, $32, $66
  17++E479 32 66
  18++E47B 40 00 1C BF  	DB $40, $00, $1C, $BF, $31, $44
  18++E47F 31 44
  19++E481 00 10 1C 3F  	DB $00, $10, $1C, $3F, $10, $32
  19++E485 10 32
  20++E487 00 10 1C 7F  	DB $00, $10, $1C, $7F, $43, $65
  20++E48B 43 65
  21++E48D 0C 06 1C AF  	DB $0C, $06, $1C, $AF, $33, $33
  21++E491 33 33
  22++E493 0C 06 1C 2F  	DB $0C, $06, $1C, $2F, $33, $33
  22++E497 33 33
  23++E499 0C 06 1C 6C  	DB $0C, $06, $1C, $6C, $33, $33
  23++E49D 33 33
  24++E49F 0C 06 1C EC  	DB $0C, $06, $1C, $EC, $33, $33
  24++E4A3 33 33
  25++E4A5
  26++E4A5
  27++E4A5              SidewinderVertSize: equ $ - SidewinderVertices
  28++E4A5
  29++E4A5
  30++E4A5
  31++E4A5 1F 50 00 04  SidewinderEdges:	DB $1F, $50, $00, $04
  32++E4A9 1F 62 04 08  	DB $1F, $62, $04, $08
  33++E4AD 1F 20 04 10  	DB $1F, $20, $04, $10
  34++E4B1 1F 10 00 10  	DB $1F, $10, $00, $10
  35++E4B5 1F 41 00 0C  	DB $1F, $41, $00, $0C
  36++E4B9 1F 31 0C 10  	DB $1F, $31, $0C, $10
  37++E4BD 1F 32 08 10  	DB $1F, $32, $08, $10
  38++E4C1 1F 43 0C 14  	DB $1F, $43, $0C, $14
  39++E4C5 1F 63 08 14  	DB $1F, $63, $08, $14
  40++E4C9 1F 65 04 14  	DB $1F, $65, $04, $14
  41++E4CD 1F 54 00 14  	DB $1F, $54, $00, $14
  42++E4D1 0F 33 18 1C  	DB $0F, $33, $18, $1C
  43++E4D5 0C 33 1C 20  	DB $0C, $33, $1C, $20
  44++E4D9 0C 33 18 24  	DB $0C, $33, $18, $24
  45++E4DD 0C 33 20 24  	DB $0C, $33, $20, $24
  46++E4E1
  47++E4E1              SidewinderEdgesSize: equ $ - SidewinderEdges
  48++E4E1
  49++E4E1
  50++E4E1              SidewinderEdgesCnt: equ SidewinderEdgesSize/4
  51++E4E1
  52++E4E1
  53++E4E1 1F 00 20 08  SidewinderNormals:	DB $1F, $00, $20, $08
  54++E4E5 9F 0C 2F 06  	DB $9F, $0C, $2F, $06
  55++E4E9 1F 0C 2F 06  	DB $1F, $0C, $2F, $06
  56++E4ED 3F 00 00 70  	DB $3F, $00, $00, $70
  57++E4F1 DF 0C 2F 06  	DB $DF, $0C, $2F, $06
  58++E4F5 5F 00 20 08  	DB $5F, $00, $20, $08
  59++E4F9 5F 0C 2F 06  	DB $5F, $0C, $2F, $06
  60++E4FD
  61++E4FD
  62++E4FD              SidewinderNormalsSize: equ $ - SidewinderNormals
  63++E4FD              SidewinderLen: equ $ - Sidewinder
  64++E4FD
# file closed: ./Data/Ships/Sidewinder.asm
  70+ E4FD                                      include "Data/Ships/Splinter.asm"
# file opened: ./Data/Ships/Splinter.asm
   1++E4FD B0 01 00     Splinter:	            DB $B0, $01, $00
   2++E500 2D E5                                DW SplinterEdges
   3++E502 18                                   DB SplinterEdgesSize
   4++E503 00 16                                DB $00, $16
   5++E505 18                                   DB SplinterVertSize
   6++E506 06                                   DB SplinterEdgesCnt
   7++E507 00 00                                DB $00, $00
   8++E509 10                                   DB SplinterNormalsSize
   9++E50A 08 14 0A                             DB $08, $14, $0A
  10++E50D 45 E5                                DW SplinterNormals
  11++E50F 05 00                                DB $05, $00
  12++E511 15 E5                                DW SplinterVertices
  13++E513 00 00                                DB 0,0                      ; Type and Tactics
  14++E515
  15++E515 18 19 10 DF  SplinterVertices:	    DB $18, $19, $10, $DF, $12, $33
  15++E519 12 33
  16++E51B 00 0C 0A 3F                          DB $00, $0C, $0A, $3F, $02, $33
  16++E51F 02 33
  17++E521 0B 06 02 5F                          DB $0B, $06, $02, $5F, $01, $33
  17++E525 01 33
  18++E527 0C 2A 07 1F                          DB $0C, $2A, $07, $1F, $01, $22
  18++E52B 01 22
  19++E52D              SplinterVertSize:       equ $ - SplinterVertices
  20++E52D 1F 23 00 04  SplinterEdges:	        DB $1F, $23, $00, $04
  21++E531 1F 03 04 08                          DB $1F, $03, $04, $08
  22++E535 1F 01 08 0C                          DB $1F, $01, $08, $0C
  23++E539 1F 12 0C 00                          DB $1F, $12, $0C, $00
  24++E53D 1F 13 00 08                          DB $1F, $13, $00, $08
  25++E541 1F 02 0C 04                          DB $1F, $02, $0C, $04
  26++E545              SplinterEdgesSize:      equ $ - SplinterEdges
  27++E545              SplinterEdgesCnt:       equ SplinterEdgesSize/4
  28++E545 1F 23 00 04  SplinterNormals:	    DB $1F, $23, $00, $04
  29++E549 1F 03 04 08                          DB $1F, $03, $04, $08
  30++E54D 1F 01 08 0C                          DB $1F, $01, $08, $0C
  31++E551 1F 12 0C 00                          DB $1F, $12, $0C, $00
  32++E555              SplinterNormalsSize:    equ $ - SplinterNormals
  33++E555              SplinterLen:            equ $ - Splinter
  34++E555
# file closed: ./Data/Ships/Splinter.asm
  71+ E555                                      include "Data/Ships/TestVector.asm"
# file opened: ./Data/Ships/TestVector.asm
   1++E555 03 41 23     TestVector:             DB $03, $41, $23
   2++E558 97 E5                                DW TestVectorEdges
   3++E55A 10                                   DB TestVectorEdgesSize
   4++E55B 54 2A                                DB $54,$2A
   5++E55D 2A                                   DB TestVectorVertSize
   6++E55E 04                                   DB TestVectorEdgesCnt
   7++E55F 00 00                                DB $00,$00
   8++E561 10                                   DB TestVectorNormalsSize
   9++E562 32 96 1C                             DB $32,$96,$1C
  10++E565 A7 E5                                DW TestVectorNormals
  11++E567 04 01                                DB $04,$01
  12++E569 6D E5                                DW TestVectorVertices
  13++E56B 00 00                                DB 0,0                      ; Type and Tactics
  14++E56D
  15++E56D 00 40 00 1F  TestVectorVertices	    DB $00,$40,$00,$1F,$00,$00
  15++E571 00 00
  16++E573 00 20 00 1F                          DB $00,$20,$00,$1F,$00,$00
  16++E577 00 00
  17++E579 40 00 00 1F                          DB $40,$00,$00,$1F,$01,$01
  17++E57D 01 01
  18++E57F 20 00 00 1F                          DB $20,$00,$00,$1F,$01,$01
  18++E583 01 01
  19++E585 00 00 40 1F                          DB $00,$00,$40,$1F,$02,$02
  19++E589 02 02
  20++E58B 00 00 20 1F                          DB $00,$00,$20,$1F,$02,$02
  20++E58F 02 02
  21++E591 00 00 00 1F                          DB $00,$00,$00,$1F,$03,$03
  21++E595 03 03
  22++E597              TestVectorVertSize      equ $  - TestVectorVertices
  23++E597 1F 00 00 04  TestVectorEdges		    DB $1F,$00,$00,$04
  24++E59B 1F 00 08 0C                          DB $1F,$00,$08,$0C
  25++E59F 1F 00 10 14                          DB $1F,$00,$10,$14
  26++E5A3 1F 00 18 18                          DB $1F,$00,$18,$18
  27++E5A7              TestVectorEdgesSize     equ $  - TestVectorEdges
  28++E5A7              TestVectorEdgesCnt      equ TestVectorEdgesSize/4
  29++E5A7              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
  30++E5A7 1F 00 10 00  TestVectorNormals	    DB $1F,$00,$10,$00
  31++E5AB 1F 10 00 00                          DB $1F,$10,$00,$00
  32++E5AF 1F 00 00 10                          DB $1F,$00,$00,$10
  33++E5B3 1F 00 00 10                          DB $1F,$00,$00,$10
  34++E5B7              TestVectorNormalsSize   equ $  - TestVectorNormals
  35++E5B7              TestVectorLen           equ $  - TestVector
  36++E5B7
# file closed: ./Data/Ships/TestVector.asm
  72+ E5B7                                      include "Data/Ships/Thargoid.asm"
# file opened: ./Data/Ships/Thargoid.asm
   1++E5B7 00 26 49     Thargoid:	DB $00, $26, $49
   2++E5BA 47 E6                    DW ThargoidEdges
   3++E5BC 68                       DB ThargoidEdgesSize
   4++E5BD 3C 26                    DB $3C, $26
   5++E5BF 78                       DB ThargoidVertSize
   6++E5C0 1A                       DB ThargoidEdgesCnt
   7++E5C1 01 F4                    DB $01, $F4
   8++E5C3 28                       DB ThargoidNormalsSize
   9++E5C4 37 F0 27                 DB $37, $F0, $27
  10++E5C7 AF E6                    DW ThargoidNormals
  11++E5C9 02 16                    DB $02, $16
  12++E5CB CF E5                    DW ThargoidVertices
  13++E5CD 00 00                    DB 0,0                      ; Type and Tactics
  14++E5CF
  15++E5CF 20 30 30 5F  ThargoidVertices:	DB $20, $30, $30, $5F, $40, $88
  15++E5D3 40 88
  16++E5D5 20 44 00 5F                      DB $20, $44, $00, $5F, $10, $44
  16++E5D9 10 44
  17++E5DB 20 30 30 7F                      DB $20, $30, $30, $7F, $21, $44
  17++E5DF 21 44
  18++E5E1 20 00 44 3F                      DB $20, $00, $44, $3F, $32, $44
  18++E5E5 32 44
  19++E5E7 20 30 30 3F                      DB $20, $30, $30, $3F, $43, $55
  19++E5EB 43 55
  20++E5ED 20 44 00 1F                      DB $20, $44, $00, $1F, $54, $66
  20++E5F1 54 66
  21++E5F3 20 30 30 1F                      DB $20, $30, $30, $1F, $64, $77
  21++E5F7 64 77
  22++E5F9 20 00 44 1F                      DB $20, $00, $44, $1F, $74, $88
  22++E5FD 74 88
  23++E5FF 18 74 74 DF                      DB $18, $74, $74, $DF, $80, $99
  23++E603 80 99
  24++E605 18 A4 00 DF                      DB $18, $A4, $00, $DF, $10, $99
  24++E609 10 99
  25++E60B 18 74 74 FF                      DB $18, $74, $74, $FF, $21, $99
  25++E60F 21 99
  26++E611 18 00 A4 BF                      DB $18, $00, $A4, $BF, $32, $99
  26++E615 32 99
  27++E617 18 74 74 BF                      DB $18, $74, $74, $BF, $53, $99
  27++E61B 53 99
  28++E61D 18 A4 00 9F                      DB $18, $A4, $00, $9F, $65, $99
  28++E621 65 99
  29++E623 18 74 74 9F                      DB $18, $74, $74, $9F, $76, $99
  29++E627 76 99
  30++E629 18 00 A4 9F                      DB $18, $00, $A4, $9F, $87, $99
  30++E62D 87 99
  31++E62F 18 40 50 9E                      DB $18, $40, $50, $9E, $99, $99
  31++E633 99 99
  32++E635 18 40 50 BE                      DB $18, $40, $50, $BE, $99, $99
  32++E639 99 99
  33++E63B 18 40 50 FE                      DB $18, $40, $50, $FE, $99, $99
  33++E63F 99 99
  34++E641 18 40 50 DE                      DB $18, $40, $50, $DE, $99, $99
  34++E645 99 99
  35++E647
  36++E647              ThargoidVertSize: equ $ - ThargoidVertices
  37++E647
  38++E647
  39++E647
  40++E647 1F 84 00 1C  ThargoidEdges:	DB $1F, $84, $00, $1C
  41++E64B 1F 40 00 04  	DB $1F, $40, $00, $04
  42++E64F 1F 41 04 08  	DB $1F, $41, $04, $08
  43++E653 1F 42 08 0C  	DB $1F, $42, $08, $0C
  44++E657 1F 43 0C 10  	DB $1F, $43, $0C, $10
  45++E65B 1F 54 10 14  	DB $1F, $54, $10, $14
  46++E65F 1F 64 14 18  	DB $1F, $64, $14, $18
  47++E663 1F 74 18 1C  	DB $1F, $74, $18, $1C
  48++E667 1F 80 00 20  	DB $1F, $80, $00, $20
  49++E66B 1F 10 04 24  	DB $1F, $10, $04, $24
  50++E66F 1F 21 08 28  	DB $1F, $21, $08, $28
  51++E673 1F 32 0C 2C  	DB $1F, $32, $0C, $2C
  52++E677 1F 53 10 30  	DB $1F, $53, $10, $30
  53++E67B 1F 65 14 34  	DB $1F, $65, $14, $34
  54++E67F 1F 76 18 38  	DB $1F, $76, $18, $38
  55++E683 1F 87 1C 3C  	DB $1F, $87, $1C, $3C
  56++E687 1F 98 20 3C  	DB $1F, $98, $20, $3C
  57++E68B 1F 90 20 24  	DB $1F, $90, $20, $24
  58++E68F 1F 91 24 28  	DB $1F, $91, $24, $28
  59++E693 1F 92 28 2C  	DB $1F, $92, $28, $2C
  60++E697 1F 93 2C 30  	DB $1F, $93, $2C, $30
  61++E69B 1F 95 30 34  	DB $1F, $95, $30, $34
  62++E69F 1F 96 34 38  	DB $1F, $96, $34, $38
  63++E6A3 1F 97 38 3C  	DB $1F, $97, $38, $3C
  64++E6A7 1E 99 40 44  	DB $1E, $99, $40, $44
  65++E6AB 1E 99 48 4C  	DB $1E, $99, $48, $4C
  66++E6AF
  67++E6AF              ThargoidEdgesSize: equ $ - ThargoidEdges
  68++E6AF
  69++E6AF              ThargoidEdgesCnt: equ ThargoidEdgesSize/4
  70++E6AF
  71++E6AF 5F 67 3C 19  ThargoidNormals:	DB $5F, $67, $3C, $19
  72++E6B3 7F 67 3C 19  	DB $7F, $67, $3C, $19
  73++E6B7 7F 67 19 3C  	DB $7F, $67, $19, $3C
  74++E6BB 3F 67 19 3C  	DB $3F, $67, $19, $3C
  75++E6BF 1F 40 00 00  	DB $1F, $40, $00, $00
  76++E6C3 3F 67 3C 19  	DB $3F, $67, $3C, $19
  77++E6C7 1F 67 3C 19  	DB $1F, $67, $3C, $19
  78++E6CB 1F 67 19 3C  	DB $1F, $67, $19, $3C
  79++E6CF 5F 67 19 3C  	DB $5F, $67, $19, $3C
  80++E6D3 9F 30 00 00  	DB $9F, $30, $00, $00
  81++E6D7
  82++E6D7
  83++E6D7              ThargoidNormalsSize: equ $ - ThargoidNormals
  84++E6D7              ThargoidLen: equ $ - Thargoid
  85++E6D7
# file closed: ./Data/Ships/Thargoid.asm
  73+ E6D7                                      include "Data/Ships/Thargon.asm"
# file opened: ./Data/Ships/Thargon.asm
   1++E6D7 F0 06 40     Thargon:	DB $F0, $06, $40
   2++E6DA 2B E7        	DW ThargonEdges
   3++E6DC 3C           	DB ThargonEdgesSize
   4++E6DD 00 12        	DB $00, $12
   5++E6DF 3C           	DB ThargonVertSize
   6++E6E0 0F           	DB ThargonEdgesCnt
   7++E6E1 00 32        	DB $00, $32
   8++E6E3 1C           	DB ThargonNormalsSize
   9++E6E4 14 14 1E     	DB $14, $14, $1E
  10++E6E7 67 E7        	DW ThargonNormals
  11++E6E9 02 10        	DB $02, $10
  12++E6EB EF E6        	DW ThargonVertices
  13++E6ED 00 00                                DB 0,0                      ; Type and Tactics
  14++E6EF
  15++E6EF
  16++E6EF 09 00 28 9F  ThargonVertices:	DB $09, $00, $28, $9F, $01, $55
  16++E6F3 01 55
  17++E6F5 09 26 0C DF  	DB $09, $26, $0C, $DF, $01, $22
  17++E6F9 01 22
  18++E6FB 09 18 20 FF  	DB $09, $18, $20, $FF, $02, $33
  18++E6FF 02 33
  19++E701 09 18 20 BF  	DB $09, $18, $20, $BF, $03, $44
  19++E705 03 44
  20++E707 09 26 0C 9F  	DB $09, $26, $0C, $9F, $04, $55
  20++E70B 04 55
  21++E70D 09 00 08 3F  	DB $09, $00, $08, $3F, $15, $66
  21++E711 15 66
  22++E713 09 0A 0F 7F  	DB $09, $0A, $0F, $7F, $12, $66
  22++E717 12 66
  23++E719 09 06 1A 7F  	DB $09, $06, $1A, $7F, $23, $66
  23++E71D 23 66
  24++E71F 09 06 1A 3F  	DB $09, $06, $1A, $3F, $34, $66
  24++E723 34 66
  25++E725 09 0A 0F 3F  	DB $09, $0A, $0F, $3F, $45, $66
  25++E729 45 66
  26++E72B
  27++E72B              ThargonVertSize: equ $ - ThargonVertices
  28++E72B
  29++E72B
  30++E72B 1F 10 00 04  ThargonEdges:	DB $1F, $10, $00, $04
  31++E72F 1F 20 04 08  	DB $1F, $20, $04, $08
  32++E733 1F 30 08 0C  	DB $1F, $30, $08, $0C
  33++E737 1F 40 0C 10  	DB $1F, $40, $0C, $10
  34++E73B 1F 50 00 10  	DB $1F, $50, $00, $10
  35++E73F 1F 51 00 14  	DB $1F, $51, $00, $14
  36++E743 1F 21 04 18  	DB $1F, $21, $04, $18
  37++E747 1F 32 08 1C  	DB $1F, $32, $08, $1C
  38++E74B 1F 43 0C 20  	DB $1F, $43, $0C, $20
  39++E74F 1F 54 10 24  	DB $1F, $54, $10, $24
  40++E753 1F 61 14 18  	DB $1F, $61, $14, $18
  41++E757 1F 62 18 1C  	DB $1F, $62, $18, $1C
  42++E75B 1F 63 1C 20  	DB $1F, $63, $1C, $20
  43++E75F 1F 64 20 24  	DB $1F, $64, $20, $24
  44++E763 1F 65 24 14  	DB $1F, $65, $24, $14
  45++E767
  46++E767              ThargonEdgesSize: equ $ - ThargonEdges
  47++E767
  48++E767
  49++E767              ThargonEdgesCnt: equ ThargonEdgesSize/4
  50++E767
  51++E767
  52++E767 9F 24 00 00  ThargonNormals:	DB $9F, $24, $00, $00
  53++E76B 5F 14 05 07  	DB $5F, $14, $05, $07
  54++E76F 7F 2E 2A 0E  	DB $7F, $2E, $2A, $0E
  55++E773 3F 24 00 68  	DB $3F, $24, $00, $68
  56++E777 3F 2E 2A 0E  	DB $3F, $2E, $2A, $0E
  57++E77B 1F 14 05 07  	DB $1F, $14, $05, $07
  58++E77F 1F 24 00 00  	DB $1F, $24, $00, $00
  59++E783
  60++E783
  61++E783              ThargonNormalsSize: equ $ - ThargonNormals
  62++E783              ThargonLen: equ $ - Thargon
  63++E783
# file closed: ./Data/Ships/Thargon.asm
  74+ E783                                      include "Data/Ships/TransportType10.asm"
# file opened: ./Data/Ships/TransportType10.asm
   1++E783 00 09 C4     TransportType10:	DB $00, $09, $C4
   2++E786 79 E8        	DW TransportType10Edges
   3++E788 B8           	DB TransportType10EdgesSize
   4++E789 30 1A        	DB $30, $1A
   5++E78B DE           	DB TransportType10VertSize
   6++E78C 2E           	DB TransportType10EdgesCnt
   7++E78D 00 00        	DB $00, $00
   8++E78F 38           	DB TransportType10NormalsSize
   9++E790 10 20 0A     	DB $10, $20, $0A
  10++E793 31 E9        	DW TransportType10Normals
  11++E795 02 00        	DB $02, $00
  12++E797 9B E7        	DW TransportType10Vertices
  13++E799 00 00                                DB 0,0                      ; Type and Tactics
  14++E79B
  15++E79B 00 0A 1A 3F  TransportType10Vertices:	DB $00, $0A, $1A, $3F, $06, $77
  15++E79F 06 77
  16++E7A1 19 04 1A BF  	DB $19, $04, $1A, $BF, $01, $77
  16++E7A5 01 77
  17++E7A7 1C 03 1A FF  	DB $1C, $03, $1A, $FF, $01, $22
  17++E7AB 01 22
  18++E7AD 19 08 1A FF  	DB $19, $08, $1A, $FF, $02, $33
  18++E7B1 02 33
  19++E7B3 1A 08 1A 7F  	DB $1A, $08, $1A, $7F, $03, $44
  19++E7B7 03 44
  20++E7B9 1D 03 1A 7F  	DB $1D, $03, $1A, $7F, $04, $55
  20++E7BD 04 55
  21++E7BF 1A 04 1A 3F  	DB $1A, $04, $1A, $3F, $05, $66
  21++E7C3 05 66
  22++E7C5 00 06 0C 13  	DB $00, $06, $0C, $13, $FF, $FF
  22++E7C9 FF FF
  23++E7CB 1E 01 0C DF  	DB $1E, $01, $0C, $DF, $17, $89
  23++E7CF 17 89
  24++E7D1 21 08 0C DF  	DB $21, $08, $0C, $DF, $12, $39
  24++E7D5 12 39
  25++E7D7 21 08 0C 5F  	DB $21, $08, $0C, $5F, $34, $5A
  25++E7DB 34 5A
  26++E7DD 1E 01 0C 5F  	DB $1E, $01, $0C, $5F, $56, $AB
  26++E7E1 56 AB
  27++E7E3 0B 02 1E DF  	DB $0B, $02, $1E, $DF, $89, $CD
  27++E7E7 89 CD
  28++E7E9 0D 08 1E DF  	DB $0D, $08, $1E, $DF, $39, $DD
  28++E7ED 39 DD
  29++E7EF 0E 08 1E 5F  	DB $0E, $08, $1E, $5F, $3A, $DD
  29++E7F3 3A DD
  30++E7F5 0B 02 1E 5F  	DB $0B, $02, $1E, $5F, $AB, $CD
  30++E7F9 AB CD
  31++E7FB 05 06 02 87  	DB $05, $06, $02, $87, $77, $77
  31++E7FF 77 77
  32++E801 12 03 02 87  	DB $12, $03, $02, $87, $77, $77
  32++E805 77 77
  33++E807 05 07 07 A7  	DB $05, $07, $07, $A7, $77, $77
  33++E80B 77 77
  34++E80D 12 04 07 A7  	DB $12, $04, $07, $A7, $77, $77
  34++E811 77 77
  35++E813 0B 06 0E A7  	DB $0B, $06, $0E, $A7, $77, $77
  35++E817 77 77
  36++E819 0B 05 07 A7  	DB $0B, $05, $07, $A7, $77, $77
  36++E81D 77 77
  37++E81F 05 07 0E 27  	DB $05, $07, $0E, $27, $66, $66
  37++E823 66 66
  38++E825 12 04 0E 27  	DB $12, $04, $0E, $27, $66, $66
  38++E829 66 66
  39++E82B 0B 05 07 27  	DB $0B, $05, $07, $27, $66, $66
  39++E82F 66 66
  40++E831 05 06 03 27  	DB $05, $06, $03, $27, $66, $66
  40++E835 66 66
  41++E837 12 03 03 27  	DB $12, $03, $03, $27, $66, $66
  41++E83B 66 66
  42++E83D 0B 04 08 07  	DB $0B, $04, $08, $07, $66, $66
  42++E841 66 66
  43++E843 0B 05 03 27  	DB $0B, $05, $03, $27, $66, $66
  43++E847 66 66
  44++E849 10 08 0D E6  	DB $10, $08, $0D, $E6, $33, $33
  44++E84D 33 33
  45++E84F 10 08 10 C6  	DB $10, $08, $10, $C6, $33, $33
  45++E853 33 33
  46++E855 11 08 0D 66  	DB $11, $08, $0D, $66, $33, $33
  46++E859 33 33
  47++E85B 11 08 10 46  	DB $11, $08, $10, $46, $33, $33
  47++E85F 33 33
  48++E861 0D 03 1A E8  	DB $0D, $03, $1A, $E8, $00, $00
  48++E865 00 00
  49++E867 0D 03 1A 68  	DB $0D, $03, $1A, $68, $00, $00
  49++E86B 00 00
  50++E86D 09 03 1A 25  	DB $09, $03, $1A, $25, $00, $00
  50++E871 00 00
  51++E873 08 03 1A A5  	DB $08, $03, $1A, $A5, $00, $00
  51++E877 00 00
  52++E879
  53++E879              TransportType10VertSize: equ $ - TransportType10Vertices
  54++E879
  55++E879
  56++E879
  57++E879 1F 07 00 04  TransportType10Edges:	DB $1F, $07, $00, $04
  58++E87D 1F 01 04 08  	DB $1F, $01, $04, $08
  59++E881 1F 02 08 0C  	DB $1F, $02, $08, $0C
  60++E885 1F 03 0C 10  	DB $1F, $03, $0C, $10
  61++E889 1F 04 10 14  	DB $1F, $04, $10, $14
  62++E88D 1F 05 14 18  	DB $1F, $05, $14, $18
  63++E891 1F 06 00 18  	DB $1F, $06, $00, $18
  64++E895 10 67 00 1C  	DB $10, $67, $00, $1C
  65++E899 1F 17 04 20  	DB $1F, $17, $04, $20
  66++E89D 0B 12 08 24  	DB $0B, $12, $08, $24
  67++E8A1 1F 23 0C 24  	DB $1F, $23, $0C, $24
  68++E8A5 1F 34 10 28  	DB $1F, $34, $10, $28
  69++E8A9 0B 45 14 28  	DB $0B, $45, $14, $28
  70++E8AD 1F 56 18 2C  	DB $1F, $56, $18, $2C
  71++E8B1 11 78 1C 20  	DB $11, $78, $1C, $20
  72++E8B5 11 19 20 24  	DB $11, $19, $20, $24
  73++E8B9 11 5A 28 2C  	DB $11, $5A, $28, $2C
  74++E8BD 11 6B 1C 2C  	DB $11, $6B, $1C, $2C
  75++E8C1 13 BC 1C 3C  	DB $13, $BC, $1C, $3C
  76++E8C5 13 8C 1C 30  	DB $13, $8C, $1C, $30
  77++E8C9 10 89 20 30  	DB $10, $89, $20, $30
  78++E8CD 1F 39 24 34  	DB $1F, $39, $24, $34
  79++E8D1 1F 3A 28 38  	DB $1F, $3A, $28, $38
  80++E8D5 10 AB 2C 3C  	DB $10, $AB, $2C, $3C
  81++E8D9 1F 9D 30 34  	DB $1F, $9D, $30, $34
  82++E8DD 1F 3D 34 38  	DB $1F, $3D, $34, $38
  83++E8E1 1F AD 38 3C  	DB $1F, $AD, $38, $3C
  84++E8E5 1F CD 30 3C  	DB $1F, $CD, $30, $3C
  85++E8E9 07 77 40 44  	DB $07, $77, $40, $44
  86++E8ED 07 77 48 4C  	DB $07, $77, $48, $4C
  87++E8F1 07 77 4C 50  	DB $07, $77, $4C, $50
  88++E8F5 07 77 48 50  	DB $07, $77, $48, $50
  89++E8F9 07 77 50 54  	DB $07, $77, $50, $54
  90++E8FD 07 66 58 5C  	DB $07, $66, $58, $5C
  91++E901 07 66 5C 60  	DB $07, $66, $5C, $60
  92++E905 07 66 60 58  	DB $07, $66, $60, $58
  93++E909 07 66 64 68  	DB $07, $66, $64, $68
  94++E90D 07 66 68 6C  	DB $07, $66, $68, $6C
  95++E911 07 66 64 6C  	DB $07, $66, $64, $6C
  96++E915 07 66 6C 70  	DB $07, $66, $6C, $70
  97++E919 06 33 74 78  	DB $06, $33, $74, $78
  98++E91D 06 33 7C 80  	DB $06, $33, $7C, $80
  99++E921 08 00 84 88  	DB $08, $00, $84, $88
 100++E925 05 00 88 8C  	DB $05, $00, $88, $8C
 101++E929 05 00 8C 90  	DB $05, $00, $8C, $90
 102++E92D 05 00 90 84  	DB $05, $00, $90, $84
 103++E931
 104++E931              TransportType10EdgesSize: equ $ - TransportType10Edges
 105++E931
 106++E931
 107++E931              TransportType10EdgesCnt: equ TransportType10EdgesSize/4
 108++E931
 109++E931
 110++E931 3F 00 00 67  TransportType10Normals:	DB $3F, $00, $00, $67
 111++E935 BF 6F 30 07  	DB $BF, $6F, $30, $07
 112++E939 FF 69 3F 15  	DB $FF, $69, $3F, $15
 113++E93D 5F 00 22 00  	DB $5F, $00, $22, $00
 114++E941 7F 69 3F 15  	DB $7F, $69, $3F, $15
 115++E945 3F 6F 30 07  	DB $3F, $6F, $30, $07
 116++E949 1F 08 20 03  	DB $1F, $08, $20, $03
 117++E94D 9F 08 20 03  	DB $9F, $08, $20, $03
 118++E951 93 08 22 0B  	DB $93, $08, $22, $0B
 119++E955 9F 4B 20 4F  	DB $9F, $4B, $20, $4F
 120++E959 1F 4B 20 4F  	DB $1F, $4B, $20, $4F
 121++E95D 13 08 22 0B  	DB $13, $08, $22, $0B
 122++E961 1F 00 26 11  	DB $1F, $00, $26, $11
 123++E965 1F 00 00 79  	DB $1F, $00, $00, $79
 124++E969
 125++E969
 126++E969              TransportType10NormalsSize: equ $ - TransportType10Normals
 127++E969              TransportType10Len: equ $ - TransportType10
 128++E969
# file closed: ./Data/Ships/TransportType10.asm
  75+ E969                                      include "Data/Ships/Viper.asm"
# file opened: ./Data/Ships/Viper.asm
   1++E969              ; Mapping Orginal to new
   2++E969              ; 0    => 0
   3++E969              ; 1-2  => 1-2
   4++E969              ; 3    => EQU Edges
   5++E969              ; 4    => EQU Normals
   6++E969              ; 5    => EQU EdgesCnt
   7++E969              ; 6    => 6
   8++E969              ; 7    => 7
   9++E969              ; 8    => EQU VertSize
  10++E969              ; 9    => EQU EdgesCnt
  11++E969              ; 10-11=> 10-11
  12++E969              ; 12   => EQU  NormalsSize
  13++E969              ; 13   => 13
  14++E969              ; 14   => 14
  15++E969              ; 15   => 15
  16++E969              ; 16   => EQU Edges
  17++E969              ; 17   => EQU Normals
  18++E969              ; 18   => 18
  19++E969              ; 19   => 19
  20++E969              ;\ -> &5C93  \ Viper = Type 16
  21++E969 00 F9 15     Viper:                  DB $00, $F9, $15
  22++E96C DB E9                                DW ViperEdges
  23++E96E 50                                   DB ViperEdgesSize
  24++E96F 00 2A                                DB $00,$2A
  25++E971 5A                                   DB ViperVertSize
  26++E972 14                                   DB ViperEdgesCnt
  27++E973 00 00                                DB $00,$00
  28++E975 1C                                   DB ViperNormalsSize
  29++E976 17 64 20                             DB $17, $64, $20
  30++E979 2B EA                                DW ViperNormals
  31++E97B 01 11                                DB $01, $11
  32++E97D 81 E9                                DW ViperVertices
  33++E97F 00 00                                DB 0,0                      ; Type and Tactics
  34++E981
  35++E981 00 00 48 1F  ViperVertices:          DB $00, $00, $48, $1F, $21, $43
  35++E985 21 43
  36++E987 00 10 18 1E                          DB $00, $10, $18, $1E, $10, $22
  36++E98B 10 22
  37++E98D 00 10 18 5E                          DB $00, $10, $18, $5E, $43, $55
  37++E991 43 55
  38++E993 30 00 18 3F                          DB $30, $00, $18, $3F, $42, $66
  38++E997 42 66
  39++E999 30 00 18 BF                          DB $30, $00, $18, $BF, $31, $66
  39++E99D 31 66
  40++E99F 18 10 18 7E                          DB $18, $10, $18, $7E, $54, $66
  40++E9A3 54 66
  41++E9A5 18 10 18 FE                          DB $18, $10, $18, $FE, $35, $66
  41++E9A9 35 66
  42++E9AB 18 10 18 3F                          DB $18, $10, $18, $3F, $20, $66
  42++E9AF 20 66
  43++E9B1 18 10 18 BF                          DB $18, $10, $18, $BF, $10, $66
  43++E9B5 10 66
  44++E9B7 20 00 18 B3                          DB $20, $00, $18, $B3, $66, $66
  44++E9BB 66 66
  45++E9BD 20 00 18 33                          DB $20, $00, $18, $33, $66, $66
  45++E9C1 66 66
  46++E9C3 08 08 18 33                          DB $08, $08, $18, $33, $66, $66
  46++E9C7 66 66
  47++E9C9 08 08 18 B3                          DB $08, $08, $18, $B3, $66, $66
  47++E9CD 66 66
  48++E9CF 08 08 18 F2                          DB $08, $08, $18, $F2, $66, $66
  48++E9D3 66 66
  49++E9D5 08 08 18 72                          DB $08, $08, $18, $72, $66, $66
  49++E9D9 66 66
  50++E9DB              ViperVertSize           equ $  - ViperVertices
  51++E9DB 1F 42 00 0C  ViperEdges:             DB $1F, $42, $00, $0C, $1E, $21, $00, $04
  51++E9DF 1E 21 00 04
  52++E9E3 1E 43 00 08                          DB $1E, $43, $00, $08, $1F, $31, $00, $10
  52++E9E7 1F 31 00 10
  53++E9EB 1E 20 04 1C                          DB $1E, $20, $04, $1C, $1E, $10, $04, $20
  53++E9EF 1E 10 04 20
  54++E9F3 1E 54 08 14                          DB $1E, $54, $08, $14, $1E, $53, $08, $18
  54++E9F7 1E 53 08 18
  55++E9FB 1F 60 1C 20                          DB $1F, $60, $1C, $20, $1E, $65, $14, $18
  55++E9FF 1E 65 14 18
  56++EA03 1F 61 10 20                          DB $1F, $61, $10, $20, $1E, $63, $10, $18
  56++EA07 1E 63 10 18
  57++EA0B 1F 62 0C 1C                          DB $1F, $62, $0C, $1C, $1E, $46, $0C, $14
  57++EA0F 1E 46 0C 14
  58++EA13 13 66 24 30                          DB $13, $66, $24, $30, $12, $66, $24, $34
  58++EA17 12 66 24 34
  59++EA1B 13 66 28 2C                          DB $13, $66, $28, $2C, $12, $66, $28, $38
  59++EA1F 12 66 28 38
  60++EA23 10 66 2C 38                          DB $10, $66, $2C, $38, $10, $66, $30, $34
  60++EA27 10 66 30 34
  61++EA2B              ViperEdgesSize          equ $  - ViperEdges
  62++EA2B              ViperEdgesCnt           equ ViperEdgesSize/4
  63++EA2B 1F 00 20 00  ViperNormals            DB $1F, $00, $20, $00, $9F, $16, $21, $0B
  63++EA2F 9F 16 21 0B
  64++EA33 1F 16 21 0B                          DB $1F, $16, $21, $0B, $DF, $16, $21, $0B
  64++EA37 DF 16 21 0B
  65++EA3B 5F 16 21 0B                          DB $5F, $16, $21, $0B, $5F, $00, $20, $00
  65++EA3F 5F 00 20 00
  66++EA43 3F 00 00 30                          DB $3F, $00, $00, $30
  67++EA47              ViperNormalsSize        equ $  - ViperNormals
  68++EA47              ViperLen                equ $  - Viper
  69++EA47
# file closed: ./Data/Ships/Viper.asm
  76+ EA47                                      include "Data/Ships/Worm.asm"
# file opened: ./Data/Ships/Worm.asm
   1++EA47 00 26 49     Worm:	                DB $00, $26, $49
   2++EA4A 9B EA                                DW WormEdges
   3++EA4C 40                                   DB WormEdgesSize
   4++EA4D 00 12                                DB $00, $12
   5++EA4F 3C                                   DB WormVertSize
   6++EA50 10                                   DB WormEdgesCnt
   7++EA51 00 00                                DB $00, $00
   8++EA53 20                                   DB WormNormalsSize
   9++EA54 13 1E 17                             DB $13, $1E, $17
  10++EA57 DB EA                                DW WormNormals
  11++EA59 03 08                                DB $03, $08
  12++EA5B 5F EA                                DW WormVertices
  13++EA5D 00 00                                DB 0,0                      ; Type and Tactics
  14++EA5F 0A 0A 23 5F  WormVertices:	DB $0A, $0A, $23, $5F, $02, $77
  14++EA63 02 77
  15++EA65 0A 0A 23 DF  	DB $0A, $0A, $23, $DF, $03, $77
  15++EA69 03 77
  16++EA6B 05 06 0F 1F  	DB $05, $06, $0F, $1F, $01, $24
  16++EA6F 01 24
  17++EA71 05 06 0F 9F  	DB $05, $06, $0F, $9F, $01, $35
  17++EA75 01 35
  18++EA77 0F 0A 19 5F  	DB $0F, $0A, $19, $5F, $24, $77
  18++EA7B 24 77
  19++EA7D 0F 0A 19 DF  	DB $0F, $0A, $19, $DF, $35, $77
  19++EA81 35 77
  20++EA83 1A 0A 19 7F  	DB $1A, $0A, $19, $7F, $46, $77
  20++EA87 46 77
  21++EA89 1A 0A 19 FF  	DB $1A, $0A, $19, $FF, $56, $77
  21++EA8D 56 77
  22++EA8F 08 0E 19 3F  	DB $08, $0E, $19, $3F, $14, $66
  22++EA93 14 66
  23++EA95 08 0E 19 BF  	DB $08, $0E, $19, $BF, $15, $66
  23++EA99 15 66
  24++EA9B
  25++EA9B              WormVertSize: equ $ - WormVertices
  26++EA9B
  27++EA9B
  28++EA9B 1F 07 00 04  WormEdges:	DB $1F, $07, $00, $04
  29++EA9F 1F 37 04 14  	DB $1F, $37, $04, $14
  30++EAA3 1F 57 14 1C  	DB $1F, $57, $14, $1C
  31++EAA7 1F 67 1C 18  	DB $1F, $67, $1C, $18
  32++EAAB 1F 47 18 10  	DB $1F, $47, $18, $10
  33++EAAF 1F 27 10 00  	DB $1F, $27, $10, $00
  34++EAB3 1F 02 00 08  	DB $1F, $02, $00, $08
  35++EAB7 1F 03 04 0C  	DB $1F, $03, $04, $0C
  36++EABB 1F 24 10 08  	DB $1F, $24, $10, $08
  37++EABF 1F 35 14 0C  	DB $1F, $35, $14, $0C
  38++EAC3 1F 14 08 20  	DB $1F, $14, $08, $20
  39++EAC7 1F 46 20 18  	DB $1F, $46, $20, $18
  40++EACB 1F 15 0C 24  	DB $1F, $15, $0C, $24
  41++EACF 1F 56 24 1C  	DB $1F, $56, $24, $1C
  42++EAD3 1F 01 08 0C  	DB $1F, $01, $08, $0C
  43++EAD7 1F 16 20 24  	DB $1F, $16, $20, $24
  44++EADB
  45++EADB              WormEdgesSize: equ $ - WormEdges
  46++EADB
  47++EADB
  48++EADB              WormEdgesCnt: equ WormEdgesSize/4
  49++EADB
  50++EADB
  51++EADB 1F 00 58 46  WormNormals:	DB $1F, $00, $58, $46
  52++EADF 1F 00 45 0E  	DB $1F, $00, $45, $0E
  53++EAE3 1F 46 42 23  	DB $1F, $46, $42, $23
  54++EAE7 9F 46 42 23  	DB $9F, $46, $42, $23
  55++EAEB 1F 40 31 0E  	DB $1F, $40, $31, $0E
  56++EAEF 9F 40 31 0E  	DB $9F, $40, $31, $0E
  57++EAF3 3F 00 00 C8  	DB $3F, $00, $00, $C8
  58++EAF7 5F 00 50 00  	DB $5F, $00, $50, $00
  59++EAFB
  60++EAFB
  61++EAFB              WormNormalsSize: equ $ - WormNormals
  62++EAFB              WormLen: equ $ - Worm
  63++EAFB
# file closed: ./Data/Ships/Worm.asm
  77+ EAFB                                      include "Data/Ships/Rattler.asm"
# file opened: ./Data/Ships/Rattler.asm
   1++EAFB 02 17 70     Rattler:	DB $02, $17, $70
   2++EAFE 6D EB                    DW RattlerEdges
   3++EB00 68                       DB RattlerEdgesSize
   4++EB01 00 2A                    DB $00, $2A
   5++EB03 5A                       DB RattlerVertSize
   6++EB04 1A                       DB RattlerEdgesCnt
   7++EB05 00 96                    DB $00, $96
   8++EB07 34                       DB RattlerNormalsSize
   9++EB08 0A 71 1F                 DB $0A, $71, $1F
  10++EB0B D5 EB                    DW RattlerNormals
  11++EB0D 01 22                    DB $01, $22
  12++EB0F 13 EB                    DW RattlerVertices
  13++EB11 00 00                                DB 0,0                      ; Type and Tactics
  14++EB13
  15++EB13
  16++EB13 00 00 3C 1F  RattlerVertices:	DB $00, $00, $3C, $1F, $89, $23
  16++EB17 89 23
  17++EB19 28 00 28 1F  	DB $28, $00, $28, $1F, $9A, $34
  17++EB1D 9A 34
  18++EB1F 28 00 28 9F  	DB $28, $00, $28, $9F, $78, $12
  18++EB23 78 12
  19++EB25 3C 00 00 1F  	DB $3C, $00, $00, $1F, $AB, $45
  19++EB29 AB 45
  20++EB2B 3C 00 00 9F  	DB $3C, $00, $00, $9F, $67, $01
  20++EB2F 67 01
  21++EB31 46 00 28 3F  	DB $46, $00, $28, $3F, $CC, $5B
  21++EB35 CC 5B
  22++EB37 46 00 28 BF  	DB $46, $00, $28, $BF, $CC, $06
  22++EB3B CC 06
  23++EB3D 00 14 28 3F  	DB $00, $14, $28, $3F, $FF, $FF
  23++EB41 FF FF
  24++EB43 00 14 28 7F  	DB $00, $14, $28, $7F, $FF, $FF
  24++EB47 FF FF
  25++EB49 0A 06 28 AA  	DB $0A, $06, $28, $AA, $CC, $CC
  25++EB4D CC CC
  26++EB4F 0A 06 28 EA  	DB $0A, $06, $28, $EA, $CC, $CC
  26++EB53 CC CC
  27++EB55 14 00 28 AA  	DB $14, $00, $28, $AA, $CC, $CC
  27++EB59 CC CC
  28++EB5B 0A 06 28 2A  	DB $0A, $06, $28, $2A, $CC, $CC
  28++EB5F CC CC
  29++EB61 0A 06 28 6A  	DB $0A, $06, $28, $6A, $CC, $CC
  29++EB65 CC CC
  30++EB67 14 00 28 2A  	DB $14, $00, $28, $2A, $CC, $CC
  30++EB6B CC CC
  31++EB6D
  32++EB6D              RattlerVertSize: equ $ - RattlerVertices
  33++EB6D
  34++EB6D
  35++EB6D 1F 06 10 18  RattlerEdges:	DB $1F, $06, $10, $18
  36++EB71 1F 17 08 10  	DB $1F, $17, $08, $10
  37++EB75 1F 28 00 08  	DB $1F, $28, $00, $08
  38++EB79 1F 39 00 04  	DB $1F, $39, $00, $04
  39++EB7D 1F 4A 04 0C  	DB $1F, $4A, $04, $0C
  40++EB81 1F 5B 0C 14  	DB $1F, $5B, $0C, $14
  41++EB85 1F 0C 18 1C  	DB $1F, $0C, $18, $1C
  42++EB89 1F 6C 18 20  	DB $1F, $6C, $18, $20
  43++EB8D 1F 01 10 1C  	DB $1F, $01, $10, $1C
  44++EB91 1F 67 10 20  	DB $1F, $67, $10, $20
  45++EB95 1F 12 08 1C  	DB $1F, $12, $08, $1C
  46++EB99 1F 78 08 20  	DB $1F, $78, $08, $20
  47++EB9D 1F 23 00 1C  	DB $1F, $23, $00, $1C
  48++EBA1 1F 89 00 20  	DB $1F, $89, $00, $20
  49++EBA5 1F 34 04 1C  	DB $1F, $34, $04, $1C
  50++EBA9 1F 9A 04 20  	DB $1F, $9A, $04, $20
  51++EBAD 1F 45 0C 1C  	DB $1F, $45, $0C, $1C
  52++EBB1 1F AB 0C 20  	DB $1F, $AB, $0C, $20
  53++EBB5 1F 5C 14 1C  	DB $1F, $5C, $14, $1C
  54++EBB9 1F BC 14 20  	DB $1F, $BC, $14, $20
  55++EBBD 0A CC 24 28  	DB $0A, $CC, $24, $28
  56++EBC1 0A CC 28 2C  	DB $0A, $CC, $28, $2C
  57++EBC5 0A CC 2C 24  	DB $0A, $CC, $2C, $24
  58++EBC9 0A CC 30 34  	DB $0A, $CC, $30, $34
  59++EBCD 0A CC 34 38  	DB $0A, $CC, $34, $38
  60++EBD1 0A CC 38 30  	DB $0A, $CC, $38, $30
  61++EBD5
  62++EBD5              RattlerEdgesSize: equ $ - RattlerEdges
  63++EBD5
  64++EBD5
  65++EBD5              RattlerEdgesCnt: equ RattlerEdgesSize/4
  66++EBD5
  67++EBD5
  68++EBD5 9F 1A 5C 06  RattlerNormals:	DB $9F, $1A, $5C, $06
  69++EBD9 9F 17 5C 0B  	DB $9F, $17, $5C, $0B
  70++EBDD 9F 09 5D 12  	DB $9F, $09, $5D, $12
  71++EBE1 1F 09 5D 12  	DB $1F, $09, $5D, $12
  72++EBE5 1F 17 5C 0B  	DB $1F, $17, $5C, $0B
  73++EBE9 1F 1A 5C 06  	DB $1F, $1A, $5C, $06
  74++EBED DF 1A 5C 06  	DB $DF, $1A, $5C, $06
  75++EBF1 DF 17 5C 0B  	DB $DF, $17, $5C, $0B
  76++EBF5 DF 09 5D 12  	DB $DF, $09, $5D, $12
  77++EBF9 5F 09 5D 12  	DB $5F, $09, $5D, $12
  78++EBFD 5F 17 5C 0B  	DB $5F, $17, $5C, $0B
  79++EC01 5F 1A 5C 06  	DB $5F, $1A, $5C, $06
  80++EC05 3F 00 00 60  	DB $3F, $00, $00, $60
  81++EC09
  82++EC09              RattlerNormalsSize: equ $ - RattlerNormals
  83++EC09              RattlerLen: equ $ - Rattler
  84++EC09
# file closed: ./Data/Ships/Rattler.asm
  78+ EC09
# file closed: ./Data/ShipModelMetaData3.asm
1167  EC09              ;;Privisioned for more models ; Bank 69  ------------------------------------------------------------------------------------------------------------------------
1168  EC09              ;;Privisioned for more models     SLOT    ShipModelsAddr
1169  EC09              ;;Privisioned for more models     PAGE    BankShipModels4
1170  EC09              ;;Privisioned for more models 	ORG     ShipModelsAddr, BankShipModels4
1171  EC09
1172  EC09              ; Bank 60  ------------------------------------------------------------------------------------------------------------------------
1173  EC09                  SLOT    SpritemembankAddr
1174  EC09                  PAGE    BankSPRITE
1175  EC09              	ORG     SpritemembankAddr, BankSPRITE
1176  E000                  INCLUDE "./Layer3Sprites/sprite_routines.asm"
# file opened: ./Layer3Sprites/sprite_routines.asm
   1+ E000
   2+ E000              galactic_cursor_sprite				equ	0
   3+ E000              galactic_cursor_sprite1				equ	galactic_cursor_sprite+1
   4+ E000              galactic_cursor_sprite2				equ	galactic_cursor_sprite1+2
   5+ E000
   6+ E000              galactic_hyper_sprite				equ	galactic_cursor_sprite2+1
   7+ E000              galactic_hyper_sprite1				equ galactic_hyper_sprite+1
   8+ E000              galactic_hyper_sprite2				equ	galactic_hyper_sprite1+1
   9+ E000
  10+ E000              local_cursor_sprite					equ	galactic_hyper_sprite2+1
  11+ E000              local_cursor_sprite1				equ	local_cursor_sprite+1
  12+ E000              local_cursor_sprite2				equ	local_cursor_sprite1+1
  13+ E000
  14+ E000              local_hyper_sprite					equ	local_cursor_sprite2+1
  15+ E000              local_hyper_sprite1					equ	local_hyper_sprite+1
  16+ E000              local_hyper_sprite2					equ	local_hyper_sprite1+2
  17+ E000
  18+ E000              reticlule_sprite1                   equ	local_hyper_sprite2+1
  19+ E000              reticlule_sprite2                   equ	reticlule_sprite1+1
  20+ E000              reticlule_sprite3                   equ	reticlule_sprite2+1
  21+ E000              reticlule_sprite4                   equ reticlule_sprite3+1
  22+ E000
  23+ E000              laser_sprite1                       equ	reticlule_sprite4+1
  24+ E000              laser_sprite2                       equ	laser_sprite1    +1
  25+ E000              laser_sprite3                       equ	laser_sprite2    +1
  26+ E000              laser_sprite4                       equ laser_sprite3    +1
  27+ E000              laser_sprite5                       equ	laser_sprite4    +1
  28+ E000              laser_sprite6                       equ	laser_sprite5    +1
  29+ E000              laser_sprite7                       equ	laser_sprite6    +1
  30+ E000              laser_sprite8                       equ laser_sprite7    +1
  31+ E000              laser_sprite9                       equ	laser_sprite8    +1
  32+ E000              laser_sprite10                      equ	laser_sprite9    +1
  33+ E000              laser_sprite11                      equ	laser_sprite10   +1
  34+ E000              laser_sprite12                      equ laser_sprite11   +1
  35+ E000              laser_sprite13                      equ	laser_sprite12   +1
  36+ E000              laser_sprite14                      equ	laser_sprite13   +1
  37+ E000              laser_sprite15                      equ	laser_sprite14   +1
  38+ E000              laser_sprite16                      equ laser_sprite15   +1
  39+ E000
  40+ E000              glactic_pattern_1					equ 0
  41+ E000              glactic_hyper_pattern_1             equ 2
  42+ E000              local_pattern_1                     equ 4
  43+ E000              local_hyper_pattern_1               equ 6
  44+ E000              reticule_pattern_1                  equ 12
  45+ E000              reticule_pattern_2                  equ 13
  46+ E000              laser_pattern_1                     equ 14
  47+ E000              laser_pattern_2                     equ 15
  48+ E000              laser_pattern_3                     equ 16
  49+ E000              laser_pattern_4                     equ 17
  50+ E000              laser_pattern_5                     equ 18
  51+ E000              laser_pattern_6                     equ 19
  52+ E000              laser_pattern_7                     equ 20
  53+ E000              laser_pattern_8                     equ 21
  54+ E000
  55+ E000              spritecursoroffset					equ 17
  56+ E000
  57+ E000
  58+ E000              ; " sprite_big BC = rowcol, D = sprite nbr , E= , pattern"
  59+ E000              sprite_big:
  60+ E000              .SetAnchor:
  61+ E000 7A           	ld		a,d                                 ; a = sprite nbr, bug fix?
  62+ E001 F5           	push	af									; save id for next few
  63+ E002 D5           	push	de
  64+ E003 ED 92 34     	nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
  65+ E006              ; write out X position bits 1 to 8
  66+ E006 79           	ld		a,c
  67+ E007 21 11 00         ld      hl,spritecursoroffset
  68+ E00A ED 31        	add		hl,a                                ; hl = full x position
  69+ E00C 7D           	ld		a,l
  70+ E00D ED 92 35     	nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
  71+ E010              ; write out Y position bits 1 to 8
  72+ E010 EB           	ex		de,hl								; de = full x position
  73+ E011 78           	ld		a,b
  74+ E012 21 11 00         ld      hl,spritecursoroffset
  75+ E015 ED 31        	add		hl,a
  76+ E017 7D           	ld		a,l                                 ; hl = full y position
  77+ E018 ED 92 36     	nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
  78+ E01B              ; write out MSB of X as its an anchor
  79+ E01B 7A           	ld		a,d									; de = MSB of X (hl bit 0)
  80+ E01C ED 92 37     	nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
  81+ E01F              ; write out sprite pattern
  82+ E01F D1           	pop		de                                  ; de = pattern and sprite nbr
  83+ E020 7B           	ld		a,e
  84+ E021 F6 C0        	or		%11000000							;
  85+ E023 ED 92 38     	nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
  86+ E026              ; write out msb of y in h must be bit 0 only
  87+ E026 3E 00        	ld		a,%00000000							; big unified composite
  88+ E028 B4           	or		h									; MSB Y
  89+ E029 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
  90+ E02C              .BigSprite1:
  91+ E02C F1           	pop		af
  92+ E02D 3C           	inc		a
  93+ E02E F5           	push	af
  94+ E02F ED 92 34     	nextreg		SPRITE_PORT_INDEX_REGISTER,a
  95+ E032 3E 10        	ld		a,16
  96+ E034 ED 92 35     	nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
  97+ E037 AF           	xor 	a
  98+ E038 ED 92 36     	nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
  99+ E03B ED 92 37     	nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
 100+ E03E 3E C1        	ld		a,%11000001							; relative and 4 bytes of data, pattern 1
 101+ E040 ED 92 38     	nextreg		SPRITE_PORT_ATTR3_REGISTER,a
 102+ E043 3E 41        	ld		a,%01000001							; big unified composite
 103+ E045 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 104+ E048              .BigSprite2:
 105+ E048 F1           	pop		af
 106+ E049 3C           	inc		a
 107+ E04A ED 92 34     	nextreg		SPRITE_PORT_INDEX_REGISTER,a
 108+ E04D AF           	xor		a
 109+ E04E ED 92 35     	nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
 110+ E051 3E 10        	ld		a,16
 111+ E053 ED 92 36     	nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
 112+ E056 AF           	xor		a
 113+ E057 ED 92 37     	nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
 114+ E05A 3E C2        	ld		a,%11000010							; relative and 4 bytes of data, pattern 2
 115+ E05C ED 92 38     	nextreg		SPRITE_PORT_ATTR3_REGISTER,a
 116+ E05F 3E 41        	ld		a,%01000001							; big unified composite
 117+ E061 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 118+ E064 C9           	ret
 119+ E065
 120+ E065              sprite_galactic_cursor:
 121+ E065              ; ">sprite_galactic_cursor BC = rowcol"
 122+ E065 16 00        	ld		d,galactic_cursor_sprite
 123+ E067 1E 00        	ld		e,0
 124+ E069 78           	ld		a,b
 125+ E06A C6 18        	add		a,galactic_chart_y_offset
 126+ E06C 47           	ld		b,a
 127+ E06D CD 00 E0     	call	sprite_big
 127+ E070
 128+ E070 C9           	ret
 129+ E071
 130+ E071              sprite_galactic_hyper_cursor:
 131+ E071              ; "> sprite_galactic_hyper_cursorBC = rowcol"
 132+ E071 78           	ld		a,b
 133+ E072 C6 18        	add		a,galactic_chart_y_offset
 134+ E074 47           	ld		b,a
 135+ E075 16 04        	ld		d,galactic_hyper_sprite
 136+ E077 1E 03        	ld		e,3
 137+ E079 CD 00 E0     	call	sprite_big
 137+ E07C
 138+ E07C C9           	ret
 139+ E07D
 140+ E07D              sprite_ghc_move:
 141+ E07D 3E 04        	ld		a,galactic_hyper_sprite
 142+ E07F ED 92 34     	nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 143+ E082              ; write out X position bits 1 to 8
 144+ E082 79           	ld		a,c
 145+ E083 21 11 00         ld      hl,spritecursoroffset
 146+ E086 ED 31        	add		hl,a                                ; hl = full x position
 147+ E088 7D           	ld		a,l
 148+ E089 ED 92 35     	nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 149+ E08C              ; write out Y position bits 1 to 8
 150+ E08C EB           	ex		de,hl								; de = full x position
 151+ E08D 78               ld      a,b
 152+ E08E C6 18        	add		a,galactic_chart_y_offset
 153+ E090 47           	ld		b,a
 154+ E091 78           	ld		a,b
 155+ E092 21 11 00         ld      hl,spritecursoroffset
 156+ E095 ED 31        	add		hl,a
 157+ E097 7D           	ld		a,l                                 ; hl = full y position
 158+ E098 ED 92 36     	nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 159+ E09B              ; write out MSB of X as its an anchor
 160+ E09B 7A           	ld		a,d									; de = MSB of X (hl bit 0)
 161+ E09C ED 92 37     	nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 162+ E09F              ; write out msb of y in h must be bit 0 only
 163+ E09F 3E 00        	ld		a,%00000000							; big unified composite
 164+ E0A1 B2           	or		d									; MSB Y
 165+ E0A2 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 166+ E0A5 C9               ret
 167+ E0A6
 168+ E0A6
 169+ E0A6              sprite_lhc_move:
 170+ E0A6              ;DBG:jp DBG
 171+ E0A6              ;DBX:
 172+ E0A6 3E 0A        	ld		a,local_hyper_sprite
 173+ E0A8 ED 92 34     	nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 174+ E0AB              ; write out X position bits 1 to 8
 175+ E0AB 79           	ld		a,c
 176+ E0AC 21 11 00         ld      hl,spritecursoroffset
 177+ E0AF ED 31        	add		hl,a                                ; hl = full x position
 178+ E0B1 7D           	ld		a,l
 179+ E0B2 ED 92 35     	nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 180+ E0B5              ; write out Y position bits 1 to 8
 181+ E0B5 EB           	ex		de,hl								; de = full x position
 182+ E0B6 78           	ld		a,b
 183+ E0B7 21 11 00         ld      hl,spritecursoroffset
 184+ E0BA ED 31        	add		hl,a
 185+ E0BC 7D           	ld		a,l                                 ; hl = full y position
 186+ E0BD ED 92 36     	nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 187+ E0C0              ; write out MSB of X as its an anchor
 188+ E0C0 7A           	ld		a,d									; de = MSB of X (hl bit 0)
 189+ E0C1 ED 92 37     	nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 190+ E0C4              ; write out msb of y in h must be bit 0 only
 191+ E0C4 3E 00        	ld		a,%00000000							; big unified composite
 192+ E0C6 B2           	or		d									; MSB Y
 193+ E0C7 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 194+ E0CA C9               ret
 195+ E0CB
 196+ E0CB              sprite_local_cursor:
 197+ E0CB              ; "sprite_local_cursor BC = rowcol"
 198+ E0CB 16 07        	ld		d,local_cursor_sprite
 199+ E0CD 1E 06        	ld		e,6
 200+ E0CF CD 00 E0     	call	sprite_big
 201+ E0D2 C9           	ret
 202+ E0D3
 203+ E0D3              sprite_local_hyper_cursor:
 204+ E0D3              ; "sprite_local_hyper_cursor BC = rowcol"
 205+ E0D3 16 0A        	ld		d,local_hyper_sprite
 206+ E0D5 1E 09        	ld		e,9
 207+ E0D7 CD 00 E0     	call	sprite_big
 208+ E0DA C9           	ret
 209+ E0DB
 210+ E0DB 3E 0E        sprite_reticule:    ld      a,reticlule_sprite1
 211+ E0DD ED 92 34                         nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 212+ E0E0 3E 88                            ld      a,(13*8) + 32
 213+ E0E2 ED 92 35                         nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 214+ E0E5 3E 65                            ld		a,(7 * 8) + 32 + 13
 215+ E0E7 ED 92 36                         nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 216+ E0EA AF                               xor     a
 217+ E0EB ED 92 37                         nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 218+ E0EE 3E 8D                            ld      a,reticule_pattern_2 | %10000000
 219+ E0F0 ED 92 38                         nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 220+ E0F3 3E 0F        .rightReticule      ld      a,reticlule_sprite2
 221+ E0F5 ED 92 34                         nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 222+ E0F8 3E A6                            ld      a,(17*8) + 32 -2
 223+ E0FA ED 92 35                         nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 224+ E0FD 3E 65                            ld		a,(7 * 8) + 32 + 13
 225+ E0FF ED 92 36                         nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 226+ E102 3E 08                            ld      a,%00001000
 227+ E104 ED 92 37                         nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring horizontal
 228+ E107 3E 8D                            ld      a,reticule_pattern_2 | %10000000
 229+ E109 ED 92 38                         nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 230+ E10C 3E 10        .topReticule        ld      a,reticlule_sprite3
 231+ E10E ED 92 34                         nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 232+ E111 3E 9F                            ld      a,(16*8) + 32 -1
 233+ E113 ED 92 35                         nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 234+ E116 3E 4C                            ld		a,(5 * 8) + 32 +4
 235+ E118 ED 92 36                         nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 236+ E11B AF                               xor     a
 237+ E11C ED 92 37                         nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 238+ E11F 3E 8C                            ld      a,reticule_pattern_1 | %10000000
 239+ E121 ED 92 38                         nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 240+ E124 3E 11        .bottomReticule     ld      a,reticlule_sprite4
 241+ E126 ED 92 34                         nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 242+ E129 3E 9F                            ld      a,(16*8) + 32 -1
 243+ E12B ED 92 35                         nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 244+ E12E 3E 6D                            ld		a,(9 * 8) + 32 +5
 245+ E130 ED 92 36                         nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 246+ E133 3E 04                            ld      a,%00000100
 247+ E135 ED 92 37                         nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring vertical
 248+ E138 3E 8C                            ld      a,reticule_pattern_1 | %10000000
 249+ E13A ED 92 38                         nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 250+ E13D C9                               ret
 251+ E13E
 252+ E13E              laserbasex          equ 7
 253+ E13E              laserbasey          equ 14
 254+ E13E
 255+ E13E              ShowSprite          MACRO   spritenbr, patternnbr
 256+ E13E ~                                ld      a, spritenbr
 257+ E13E ~                                nextreg SPRITE_PORT_INDEX_REGISTER,a
 258+ E13E ~                                ld      a,patternnbr | %10000000
 259+ E13E ~                                nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 260+ E13E                                  ENDM
 261+ E13E
 262+ E13E              LeftLaser:          MACRO   xoffset, yoffset, spriteL, patternL
 263+ E13E ~                                ld      a, spriteL
 264+ E13E ~                                nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 265+ E13E ~                                ld      a,((laserbasex + xoffset) *8) + 32
 266+ E13E ~                                nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 267+ E13E ~                                ld		a,((laserbasey -yoffset) * 8) + 32 -1
 268+ E13E ~                                nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 269+ E13E ~                                xor     a
 270+ E13E ~                                nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 271+ E13E ~                                ld      a, patternL | %00000000             ; hidden by default
 272+ E13E ~                                nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 273+ E13E                                  ENDM
 274+ E13E
 275+ E13E              RightLaser:         MACRO   xoffset, yoffset, spriteL, patternL
 276+ E13E ~                                ld      a, spriteL
 277+ E13E ~                                nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 278+ E13E ~                                ld      a,(((30-laserbasex) - xoffset) *8) + 32 -2
 279+ E13E ~                                nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 280+ E13E ~                                ld		a,((laserbasey -yoffset) * 8) + 32 -1
 281+ E13E ~                                nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 282+ E13E ~                                ld      a,%00001000
 283+ E13E ~                                nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 284+ E13E ~                                ld      a, patternL | %00000000             ; hidden by default
 285+ E13E ~                                nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 286+ E13E                                  ENDM
 287+ E13E
 288+ E13E
 289+ E13E              sprite_laser:       LeftLaser  0,0,laser_sprite1 ,laser_pattern_1
 289+ E13E 3E 12       >                    ld      a, laser_sprite1
 289+ E140 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 289+ E143 3E 58       >                    ld      a,((laserbasex + 0) *8) + 32
 289+ E145 ED 92 35    >                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 289+ E148 3E 8F       >                    ld		a,((laserbasey -0) * 8) + 32 -1
 289+ E14A ED 92 36    >                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 289+ E14D AF          >                    xor     a
 289+ E14E ED 92 37    >                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 289+ E151 3E 0E       >                    ld      a, laser_pattern_1 | %00000000             ; hidden by default
 289+ E153 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 290+ E156                                  LeftLaser  2,0,laser_sprite2 ,laser_pattern_2
 290+ E156 3E 13       >                    ld      a, laser_sprite2
 290+ E158 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 290+ E15B 3E 68       >                    ld      a,((laserbasex + 2) *8) + 32
 290+ E15D ED 92 35    >                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 290+ E160 3E 8F       >                    ld		a,((laserbasey -0) * 8) + 32 -1
 290+ E162 ED 92 36    >                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 290+ E165 AF          >                    xor     a
 290+ E166 ED 92 37    >                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 290+ E169 3E 0F       >                    ld      a, laser_pattern_2 | %00000000             ; hidden by default
 290+ E16B ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 291+ E16E                                  LeftLaser  2,2,laser_sprite3 ,laser_pattern_3
 291+ E16E 3E 14       >                    ld      a, laser_sprite3
 291+ E170 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 291+ E173 3E 68       >                    ld      a,((laserbasex + 2) *8) + 32
 291+ E175 ED 92 35    >                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 291+ E178 3E 7F       >                    ld		a,((laserbasey -2) * 8) + 32 -1
 291+ E17A ED 92 36    >                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 291+ E17D AF          >                    xor     a
 291+ E17E ED 92 37    >                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 291+ E181 3E 10       >                    ld      a, laser_pattern_3 | %00000000             ; hidden by default
 291+ E183 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 292+ E186                                  LeftLaser  4,1,laser_sprite4 ,laser_pattern_4
 292+ E186 3E 15       >                    ld      a, laser_sprite4
 292+ E188 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 292+ E18B 3E 78       >                    ld      a,((laserbasex + 4) *8) + 32
 292+ E18D ED 92 35    >                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 292+ E190 3E 87       >                    ld		a,((laserbasey -1) * 8) + 32 -1
 292+ E192 ED 92 36    >                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 292+ E195 AF          >                    xor     a
 292+ E196 ED 92 37    >                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 292+ E199 3E 11       >                    ld      a, laser_pattern_4 | %00000000             ; hidden by default
 292+ E19B ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 293+ E19E                                  LeftLaser  3,3,laser_sprite5 ,laser_pattern_5
 293+ E19E 3E 16       >                    ld      a, laser_sprite5
 293+ E1A0 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 293+ E1A3 3E 70       >                    ld      a,((laserbasex + 3) *8) + 32
 293+ E1A5 ED 92 35    >                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 293+ E1A8 3E 77       >                    ld		a,((laserbasey -3) * 8) + 32 -1
 293+ E1AA ED 92 36    >                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 293+ E1AD AF          >                    xor     a
 293+ E1AE ED 92 37    >                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 293+ E1B1 3E 12       >                    ld      a, laser_pattern_5 | %00000000             ; hidden by default
 293+ E1B3 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 294+ E1B6                                  LeftLaser  5,3,laser_sprite6 ,laser_pattern_6
 294+ E1B6 3E 17       >                    ld      a, laser_sprite6
 294+ E1B8 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 294+ E1BB 3E 80       >                    ld      a,((laserbasex + 5) *8) + 32
 294+ E1BD ED 92 35    >                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 294+ E1C0 3E 77       >                    ld		a,((laserbasey -3) * 8) + 32 -1
 294+ E1C2 ED 92 36    >                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 294+ E1C5 AF          >                    xor     a
 294+ E1C6 ED 92 37    >                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 294+ E1C9 3E 13       >                    ld      a, laser_pattern_6 | %00000000             ; hidden by default
 294+ E1CB ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 295+ E1CE                                  LeftLaser  6,5,laser_sprite7 ,laser_pattern_7
 295+ E1CE 3E 18       >                    ld      a, laser_sprite7
 295+ E1D0 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 295+ E1D3 3E 88       >                    ld      a,((laserbasex + 6) *8) + 32
 295+ E1D5 ED 92 35    >                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 295+ E1D8 3E 67       >                    ld		a,((laserbasey -5) * 8) + 32 -1
 295+ E1DA ED 92 36    >                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 295+ E1DD AF          >                    xor     a
 295+ E1DE ED 92 37    >                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 295+ E1E1 3E 14       >                    ld      a, laser_pattern_7 | %00000000             ; hidden by default
 295+ E1E3 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 296+ E1E6                                  LeftLaser  8,5,laser_sprite8 ,laser_pattern_8
 296+ E1E6 3E 19       >                    ld      a, laser_sprite8
 296+ E1E8 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 296+ E1EB 3E 98       >                    ld      a,((laserbasex + 8) *8) + 32
 296+ E1ED ED 92 35    >                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 296+ E1F0 3E 67       >                    ld		a,((laserbasey -5) * 8) + 32 -1
 296+ E1F2 ED 92 36    >                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 296+ E1F5 AF          >                    xor     a
 296+ E1F6 ED 92 37    >                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 296+ E1F9 3E 15       >                    ld      a, laser_pattern_8 | %00000000             ; hidden by default
 296+ E1FB ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 297+ E1FE                                  RightLaser 0,0,laser_sprite9 ,laser_pattern_1
 297+ E1FE 3E 1A       >                    ld      a, laser_sprite9
 297+ E200 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 297+ E203 3E D6       >                    ld      a,(((30-laserbasex) - 0) *8) + 32 -2
 297+ E205 ED 92 35    >                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 297+ E208 3E 8F       >                    ld		a,((laserbasey -0) * 8) + 32 -1
 297+ E20A ED 92 36    >                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 297+ E20D 3E 08       >                    ld      a,%00001000
 297+ E20F ED 92 37    >                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 297+ E212 3E 0E       >                    ld      a, laser_pattern_1 | %00000000             ; hidden by default
 297+ E214 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 298+ E217                                  RightLaser 2,0,laser_sprite10,laser_pattern_2
 298+ E217 3E 1B       >                    ld      a, laser_sprite10
 298+ E219 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 298+ E21C 3E C6       >                    ld      a,(((30-laserbasex) - 2) *8) + 32 -2
 298+ E21E ED 92 35    >                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 298+ E221 3E 8F       >                    ld		a,((laserbasey -0) * 8) + 32 -1
 298+ E223 ED 92 36    >                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 298+ E226 3E 08       >                    ld      a,%00001000
 298+ E228 ED 92 37    >                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 298+ E22B 3E 0F       >                    ld      a, laser_pattern_2 | %00000000             ; hidden by default
 298+ E22D ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 299+ E230                                  RightLaser 2,2,laser_sprite11,laser_pattern_3
 299+ E230 3E 1C       >                    ld      a, laser_sprite11
 299+ E232 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 299+ E235 3E C6       >                    ld      a,(((30-laserbasex) - 2) *8) + 32 -2
 299+ E237 ED 92 35    >                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 299+ E23A 3E 7F       >                    ld		a,((laserbasey -2) * 8) + 32 -1
 299+ E23C ED 92 36    >                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 299+ E23F 3E 08       >                    ld      a,%00001000
 299+ E241 ED 92 37    >                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 299+ E244 3E 10       >                    ld      a, laser_pattern_3 | %00000000             ; hidden by default
 299+ E246 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 300+ E249                                  RightLaser 4,1,laser_sprite12,laser_pattern_4
 300+ E249 3E 1D       >                    ld      a, laser_sprite12
 300+ E24B ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 300+ E24E 3E B6       >                    ld      a,(((30-laserbasex) - 4) *8) + 32 -2
 300+ E250 ED 92 35    >                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 300+ E253 3E 87       >                    ld		a,((laserbasey -1) * 8) + 32 -1
 300+ E255 ED 92 36    >                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 300+ E258 3E 08       >                    ld      a,%00001000
 300+ E25A ED 92 37    >                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 300+ E25D 3E 11       >                    ld      a, laser_pattern_4 | %00000000             ; hidden by default
 300+ E25F ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 301+ E262                                  RightLaser 3,3,laser_sprite13,laser_pattern_5
 301+ E262 3E 1E       >                    ld      a, laser_sprite13
 301+ E264 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 301+ E267 3E BE       >                    ld      a,(((30-laserbasex) - 3) *8) + 32 -2
 301+ E269 ED 92 35    >                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 301+ E26C 3E 77       >                    ld		a,((laserbasey -3) * 8) + 32 -1
 301+ E26E ED 92 36    >                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 301+ E271 3E 08       >                    ld      a,%00001000
 301+ E273 ED 92 37    >                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 301+ E276 3E 12       >                    ld      a, laser_pattern_5 | %00000000             ; hidden by default
 301+ E278 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 302+ E27B                                  RightLaser 5,3,laser_sprite14,laser_pattern_6
 302+ E27B 3E 1F       >                    ld      a, laser_sprite14
 302+ E27D ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 302+ E280 3E AE       >                    ld      a,(((30-laserbasex) - 5) *8) + 32 -2
 302+ E282 ED 92 35    >                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 302+ E285 3E 77       >                    ld		a,((laserbasey -3) * 8) + 32 -1
 302+ E287 ED 92 36    >                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 302+ E28A 3E 08       >                    ld      a,%00001000
 302+ E28C ED 92 37    >                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 302+ E28F 3E 13       >                    ld      a, laser_pattern_6 | %00000000             ; hidden by default
 302+ E291 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 303+ E294                                  RightLaser 6,5,laser_sprite15,laser_pattern_7
 303+ E294 3E 20       >                    ld      a, laser_sprite15
 303+ E296 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 303+ E299 3E A6       >                    ld      a,(((30-laserbasex) - 6) *8) + 32 -2
 303+ E29B ED 92 35    >                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 303+ E29E 3E 67       >                    ld		a,((laserbasey -5) * 8) + 32 -1
 303+ E2A0 ED 92 36    >                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 303+ E2A3 3E 08       >                    ld      a,%00001000
 303+ E2A5 ED 92 37    >                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 303+ E2A8 3E 14       >                    ld      a, laser_pattern_7 | %00000000             ; hidden by default
 303+ E2AA ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 304+ E2AD                                  RightLaser 8,5,laser_sprite16,laser_pattern_8
 304+ E2AD 3E 21       >                    ld      a, laser_sprite16
 304+ E2AF ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 304+ E2B2 3E 96       >                    ld      a,(((30-laserbasex) - 8) *8) + 32 -2
 304+ E2B4 ED 92 35    >                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 304+ E2B7 3E 67       >                    ld		a,((laserbasey -5) * 8) + 32 -1
 304+ E2B9 ED 92 36    >                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 304+ E2BC 3E 08       >                    ld      a,%00001000
 304+ E2BE ED 92 37    >                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 304+ E2C1 3E 15       >                    ld      a, laser_pattern_8 | %00000000             ; hidden by default
 304+ E2C3 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 305+ E2C6 C9                               ret
 306+ E2C7                                  ; Need simple show updates just to update the show attribute
 307+ E2C7
 308+ E2C7              sprite_laser_show: ShowSprite laser_sprite1 ,laser_pattern_1
 308+ E2C7 3E 12       >                    ld      a, laser_sprite1
 308+ E2C9 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 308+ E2CC 3E 8E       >                    ld      a,laser_pattern_1 | %10000000
 308+ E2CE ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 309+ E2D1                                 ShowSprite laser_sprite2 ,laser_pattern_2
 309+ E2D1 3E 13       >                    ld      a, laser_sprite2
 309+ E2D3 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 309+ E2D6 3E 8F       >                    ld      a,laser_pattern_2 | %10000000
 309+ E2D8 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 310+ E2DB                                 ShowSprite laser_sprite3 ,laser_pattern_3
 310+ E2DB 3E 14       >                    ld      a, laser_sprite3
 310+ E2DD ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 310+ E2E0 3E 90       >                    ld      a,laser_pattern_3 | %10000000
 310+ E2E2 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 311+ E2E5                                 ShowSprite laser_sprite4 ,laser_pattern_4
 311+ E2E5 3E 15       >                    ld      a, laser_sprite4
 311+ E2E7 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 311+ E2EA 3E 91       >                    ld      a,laser_pattern_4 | %10000000
 311+ E2EC ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 312+ E2EF                                 ShowSprite laser_sprite5 ,laser_pattern_5
 312+ E2EF 3E 16       >                    ld      a, laser_sprite5
 312+ E2F1 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 312+ E2F4 3E 92       >                    ld      a,laser_pattern_5 | %10000000
 312+ E2F6 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 313+ E2F9                                 ShowSprite laser_sprite6 ,laser_pattern_6
 313+ E2F9 3E 17       >                    ld      a, laser_sprite6
 313+ E2FB ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 313+ E2FE 3E 93       >                    ld      a,laser_pattern_6 | %10000000
 313+ E300 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 314+ E303                                 ShowSprite laser_sprite7 ,laser_pattern_7
 314+ E303 3E 18       >                    ld      a, laser_sprite7
 314+ E305 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 314+ E308 3E 94       >                    ld      a,laser_pattern_7 | %10000000
 314+ E30A ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 315+ E30D                                 ShowSprite laser_sprite8 ,laser_pattern_8
 315+ E30D 3E 19       >                    ld      a, laser_sprite8
 315+ E30F ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 315+ E312 3E 95       >                    ld      a,laser_pattern_8 | %10000000
 315+ E314 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 316+ E317                                 ShowSprite laser_sprite9 ,laser_pattern_1
 316+ E317 3E 1A       >                    ld      a, laser_sprite9
 316+ E319 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 316+ E31C 3E 8E       >                    ld      a,laser_pattern_1 | %10000000
 316+ E31E ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 317+ E321                                 ShowSprite laser_sprite10,laser_pattern_2
 317+ E321 3E 1B       >                    ld      a, laser_sprite10
 317+ E323 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 317+ E326 3E 8F       >                    ld      a,laser_pattern_2 | %10000000
 317+ E328 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 318+ E32B                                 ShowSprite laser_sprite11,laser_pattern_3
 318+ E32B 3E 1C       >                    ld      a, laser_sprite11
 318+ E32D ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 318+ E330 3E 90       >                    ld      a,laser_pattern_3 | %10000000
 318+ E332 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 319+ E335                                 ShowSprite laser_sprite12,laser_pattern_4
 319+ E335 3E 1D       >                    ld      a, laser_sprite12
 319+ E337 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 319+ E33A 3E 91       >                    ld      a,laser_pattern_4 | %10000000
 319+ E33C ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 320+ E33F                                 ShowSprite laser_sprite13,laser_pattern_5
 320+ E33F 3E 1E       >                    ld      a, laser_sprite13
 320+ E341 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 320+ E344 3E 92       >                    ld      a,laser_pattern_5 | %10000000
 320+ E346 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 321+ E349                                 ShowSprite laser_sprite14,laser_pattern_6
 321+ E349 3E 1F       >                    ld      a, laser_sprite14
 321+ E34B ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 321+ E34E 3E 93       >                    ld      a,laser_pattern_6 | %10000000
 321+ E350 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 322+ E353                                 ShowSprite laser_sprite15,laser_pattern_7
 322+ E353 3E 20       >                    ld      a, laser_sprite15
 322+ E355 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 322+ E358 3E 94       >                    ld      a,laser_pattern_7 | %10000000
 322+ E35A ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 323+ E35D                                 ShowSprite laser_sprite16,laser_pattern_8
 323+ E35D 3E 21       >                    ld      a, laser_sprite16
 323+ E35F ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 323+ E362 3E 95       >                    ld      a,laser_pattern_8 | %10000000
 323+ E364 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 324+ E367 C9                              ret
 325+ E368
 326+ E368              sprite_galactic_hide:
 327+ E368 ED 91 34 00  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite
 328+ E36C ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 329+ E370 ED 91 34 01  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite1
 330+ E374 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 331+ E378 ED 91 34 03  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite2
 332+ E37C ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 333+ E380 C9           	ret
 334+ E381
 335+ E381              sprite_galactic_hyper_hide:
 336+ E381 ED 91 34 04  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite
 337+ E385 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 338+ E389 ED 91 34 05  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite1
 339+ E38D ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 340+ E391 ED 91 34 06  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite2
 341+ E395 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 342+ E399 C9           	ret
 343+ E39A
 344+ E39A              sprite_local_hide:
 345+ E39A ED 91 34 07  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite
 346+ E39E ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 347+ E3A2 ED 91 34 08  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite1
 348+ E3A6 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 349+ E3AA ED 91 34 09  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite2
 350+ E3AE ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 351+ E3B2 C9           	ret
 352+ E3B3
 353+ E3B3              sprite_local_hyper_hide:
 354+ E3B3 ED 91 34 0A  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite
 355+ E3B7 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 356+ E3BB ED 91 34 0B  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite1
 357+ E3BF ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 358+ E3C3 ED 91 34 0D  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite2
 359+ E3C7 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 360+ E3CB C9           	ret
 361+ E3CC
 362+ E3CC
 363+ E3CC              sprite_reticule_hide:
 364+ E3CC ED 91 34 0E  	nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite1
 365+ E3D0 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 366+ E3D4 ED 91 34 0F  	nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite2
 367+ E3D8 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 368+ E3DC ED 91 34 10  	nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite3
 369+ E3E0 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 370+ E3E4 ED 91 34 11  	nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite4
 371+ E3E8 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 372+ E3EC C9           	ret
 373+ E3ED
 374+ E3ED              sprite_laser_hide:
 375+ E3ED ED 91 34 12  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite1
 376+ E3F1 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 377+ E3F5 ED 91 34 13  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite2
 378+ E3F9 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 379+ E3FD ED 91 34 14  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite3
 380+ E401 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 381+ E405 ED 91 34 15  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite4
 382+ E409 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 383+ E40D ED 91 34 16  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite5
 384+ E411 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$0
 385+ E415 ED 91 34 17  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite6
 386+ E419 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 387+ E41D ED 91 34 18  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite7
 388+ E421 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 389+ E425 ED 91 34 19  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite8
 390+ E429 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 391+ E42D ED 91 34 1A      nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite9
 392+ E431 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 393+ E435 ED 91 34 1B  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite10
 394+ E439 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 395+ E43D ED 91 34 1C  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite11
 396+ E441 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 397+ E445 ED 91 34 1D  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite12
 398+ E449 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 399+ E44D ED 91 34 1E      nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite13
 400+ E451 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 401+ E455 ED 91 34 1F  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite14
 402+ E459 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 403+ E45D ED 91 34 20  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite15
 404+ E461 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 405+ E465 ED 91 34 21  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite16
 406+ E469 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 407+ E46D C9               ret
 408+ E46E
 409+ E46E              sprite_cls_cursors:
 410+ E46E CD 68 E3     	call	sprite_galactic_hide
 411+ E471 CD 81 E3     	call	sprite_galactic_hyper_hide
 412+ E474 CD 9A E3     	call	sprite_local_hide
 413+ E477 CD B3 E3     	call	sprite_local_hyper_hide
 414+ E47A CD CC E3         call    sprite_reticule_hide
 415+ E47D                  ;call    sprite_laser_hide
 416+ E47D C9           	ret
 417+ E47E
 418+ E47E              init_sprites:
 419+ E47E CD 6E E4     	call		sprite_cls_cursors
 420+ E481 ED 91 15 63  	nextreg 	SPRITE_LAYERS_SYSTEM_REGISTER,$63
 421+ E485 C9           	ret
 422+ E486
# file closed: ./Layer3Sprites/sprite_routines.asm
1177  E486                  INCLUDE "./Layer3Sprites/sprite_load.asm"
# file opened: ./Layer3Sprites/sprite_load.asm
   1+ E486              sprite_load_sprite_data:
   2+ E486 01 3B 30     	ld			bc, $303B; SPRITE_SLOT_PORT
   3+ E489 AF           	xor			a
   4+ E48A ED 79        	out			(c),a							; Prime slot upload
   5+ E48C 11 00 16     	ld			de,22	* 256						; nbr of sprites to upload
   6+ E48F 21 9D E4     	ld			hl,Sprite1						; sprites are stored contiguous
   7+ E492              SpriteLoadLoop:
   8+ E492 01 5B 00     	ld			bc, $5b; SPRITE_PATTERN_UPLOAD_PORT
   9+ E495 ED 90        	outinb											; do final 256th sprite
  10+ E497 1B           	dec			de
  11+ E498 7A           	ld			a,d
  12+ E499 B3           	or			e
  13+ E49A 20 F6        	jr			nz,SpriteLoadLoop				; keep on rolling through sprites
  14+ E49C C9           	ret
  15+ E49D
# file closed: ./Layer3Sprites/sprite_load.asm
1178  E49D                  INCLUDE "./Layer3Sprites/SpriteSheet.asm"
# file opened: ./Layer3Sprites/SpriteSheet.asm
   1+ E49D              Sprite1:
   2+ E49D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   2+ E4A1 E3 E3 E3 E3
   2+ E4A5 E3 E3 E3 E3
   2+ E4A9 E3 E3 E3 E3
   3+ E4AD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   3+ E4B1 E3 E3 E3 E3
   3+ E4B5 E3 E3 E3 E3
   3+ E4B9 E3 E3 E3 E3
   4+ E4BD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   4+ E4C1 E3 E3 E3 E3
   4+ E4C5 E3 E3 E3 E3
   4+ E4C9 E3 E3 E3 E3
   5+ E4CD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   5+ E4D1 E3 E3 E3 E3
   5+ E4D5 E3 E3 E3 E3
   5+ E4D9 E3 E3 E3 E3
   6+ E4DD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   6+ E4E1 E3 E3 E3 E3
   6+ E4E5 E3 E3 E3 E3
   6+ E4E9 E3 E3 E3 E3
   7+ E4ED E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   7+ E4F1 E3 E3 E3 E3
   7+ E4F5 E3 E3 E3 E3
   7+ E4F9 E3 E3 E3 E3
   8+ E4FD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   8+ E501 E3 E3 E3 E3
   8+ E505 E3 E3 E3 E3
   8+ E509 E3 E3 E3 E3
   9+ E50D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   9+ E511 E3 E3 E3 E3
   9+ E515 E3 E3 E3 E3
   9+ E519 E3 E3 E3 E3
  10+ E51D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90;
  10+ E521 E3 E3 E3 E3
  10+ E525 E3 E3 E3 E3
  10+ E529 E3 E3 E3 90
  11+ E52D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  11+ E531 E3 E3 E3 E3
  11+ E535 E3 E3 E3 E3
  11+ E539 E3 E3 E3 B4
  12+ E53D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  12+ E541 E3 E3 E3 E3
  12+ E545 E3 E3 E3 E3
  12+ E549 E3 E3 E3 B4
  13+ E54D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  13+ E551 E3 E3 E3 E3
  13+ E555 E3 E3 E3 E3
  13+ E559 E3 E3 E3 D8
  14+ E55D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  14+ E561 E3 E3 E3 E3
  14+ E565 E3 E3 E3 E3
  14+ E569 E3 E3 E3 D8
  15+ E56D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  15+ E571 E3 E3 E3 E3
  15+ E575 E3 E3 E3 E3
  15+ E579 E3 E3 E3 FC
  16+ E57D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  16+ E581 E3 E3 E3 E3
  16+ E585 E3 E3 E3 E3
  16+ E589 E3 E3 E3 FC
  17+ E58D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90, $B4, $B4, $D8, $D8, $FC, $FC, $E3;
  17+ E591 E3 E3 E3 E3
  17+ E595 90 B4 B4 D8
  17+ E599 D8 FC FC E3
  18+ E59D
  19+ E59D
  20+ E59D
  21+ E59D              Sprite2:
  22+ E59D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  22+ E5A1 E3 E3 E3 E3
  22+ E5A5 E3 E3 E3 E3
  22+ E5A9 E3 E3 E3 E3
  23+ E5AD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  23+ E5B1 E3 E3 E3 E3
  23+ E5B5 E3 E3 E3 E3
  23+ E5B9 E3 E3 E3 E3
  24+ E5BD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  24+ E5C1 E3 E3 E3 E3
  24+ E5C5 E3 E3 E3 E3
  24+ E5C9 E3 E3 E3 E3
  25+ E5CD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  25+ E5D1 E3 E3 E3 E3
  25+ E5D5 E3 E3 E3 E3
  25+ E5D9 E3 E3 E3 E3
  26+ E5DD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  26+ E5E1 E3 E3 E3 E3
  26+ E5E5 E3 E3 E3 E3
  26+ E5E9 E3 E3 E3 E3
  27+ E5ED E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  27+ E5F1 E3 E3 E3 E3
  27+ E5F5 E3 E3 E3 E3
  27+ E5F9 E3 E3 E3 E3
  28+ E5FD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  28+ E601 E3 E3 E3 E3
  28+ E605 E3 E3 E3 E3
  28+ E609 E3 E3 E3 E3
  29+ E60D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  29+ E611 E3 E3 E3 E3
  29+ E615 E3 E3 E3 E3
  29+ E619 E3 E3 E3 E3
  30+ E61D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  30+ E621 E3 E3 E3 E3
  30+ E625 E3 E3 E3 E3
  30+ E629 E3 E3 E3 E3
  31+ E62D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  31+ E631 E3 E3 E3 E3
  31+ E635 E3 E3 E3 E3
  31+ E639 E3 E3 E3 E3
  32+ E63D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  32+ E641 E3 E3 E3 E3
  32+ E645 E3 E3 E3 E3
  32+ E649 E3 E3 E3 E3
  33+ E64D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  33+ E651 E3 E3 E3 E3
  33+ E655 E3 E3 E3 E3
  33+ E659 E3 E3 E3 E3
  34+ E65D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  34+ E661 E3 E3 E3 E3
  34+ E665 E3 E3 E3 E3
  34+ E669 E3 E3 E3 E3
  35+ E66D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  35+ E671 E3 E3 E3 E3
  35+ E675 E3 E3 E3 E3
  35+ E679 E3 E3 E3 E3
  36+ E67D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  36+ E681 E3 E3 E3 E3
  36+ E685 E3 E3 E3 E3
  36+ E689 E3 E3 E3 E3
  37+ E68D FC FC D8 D8  	db  $FC, $FC, $D8, $D8, $B4, $B4, $90, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  37+ E691 B4 B4 90 E3
  37+ E695 E3 E3 E3 E3
  37+ E699 E3 E3 E3 E3
  38+ E69D
  39+ E69D
  40+ E69D
  41+ E69D              Sprite3:
  42+ E69D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  42+ E6A1 E3 E3 E3 E3
  42+ E6A5 E3 E3 E3 E3
  42+ E6A9 E3 E3 E3 FC
  43+ E6AD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  43+ E6B1 E3 E3 E3 E3
  43+ E6B5 E3 E3 E3 E3
  43+ E6B9 E3 E3 E3 FC
  44+ E6BD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  44+ E6C1 E3 E3 E3 E3
  44+ E6C5 E3 E3 E3 E3
  44+ E6C9 E3 E3 E3 D8
  45+ E6CD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  45+ E6D1 E3 E3 E3 E3
  45+ E6D5 E3 E3 E3 E3
  45+ E6D9 E3 E3 E3 D8
  46+ E6DD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  46+ E6E1 E3 E3 E3 E3
  46+ E6E5 E3 E3 E3 E3
  46+ E6E9 E3 E3 E3 B4
  47+ E6ED E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  47+ E6F1 E3 E3 E3 E3
  47+ E6F5 E3 E3 E3 E3
  47+ E6F9 E3 E3 E3 B4
  48+ E6FD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90;
  48+ E701 E3 E3 E3 E3
  48+ E705 E3 E3 E3 E3
  48+ E709 E3 E3 E3 90
  49+ E70D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  49+ E711 E3 E3 E3 E3
  49+ E715 E3 E3 E3 E3
  49+ E719 E3 E3 E3 E3
  50+ E71D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  50+ E721 E3 E3 E3 E3
  50+ E725 E3 E3 E3 E3
  50+ E729 E3 E3 E3 E3
  51+ E72D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  51+ E731 E3 E3 E3 E3
  51+ E735 E3 E3 E3 E3
  51+ E739 E3 E3 E3 E3
  52+ E73D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  52+ E741 E3 E3 E3 E3
  52+ E745 E3 E3 E3 E3
  52+ E749 E3 E3 E3 E3
  53+ E74D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  53+ E751 E3 E3 E3 E3
  53+ E755 E3 E3 E3 E3
  53+ E759 E3 E3 E3 E3
  54+ E75D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  54+ E761 E3 E3 E3 E3
  54+ E765 E3 E3 E3 E3
  54+ E769 E3 E3 E3 E3
  55+ E76D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  55+ E771 E3 E3 E3 E3
  55+ E775 E3 E3 E3 E3
  55+ E779 E3 E3 E3 E3
  56+ E77D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  56+ E781 E3 E3 E3 E3
  56+ E785 E3 E3 E3 E3
  56+ E789 E3 E3 E3 E3
  57+ E78D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  57+ E791 E3 E3 E3 E3
  57+ E795 E3 E3 E3 E3
  57+ E799 E3 E3 E3 E3
  58+ E79D
  59+ E79D
  60+ E79D
  61+ E79D              Sprite4:
  62+ E79D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  62+ E7A1 E3 E3 E3 E3
  62+ E7A5 E3 E3 E3 E3
  62+ E7A9 E3 E3 E3 E3
  63+ E7AD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  63+ E7B1 E3 E3 E3 E3
  63+ E7B5 E3 E3 E3 E3
  63+ E7B9 E3 E3 E3 E3
  64+ E7BD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  64+ E7C1 E3 E3 E3 E3
  64+ E7C5 E3 E3 E3 E3
  64+ E7C9 E3 E3 E3 E3
  65+ E7CD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  65+ E7D1 E3 E3 E3 E3
  65+ E7D5 E3 E3 E3 E3
  65+ E7D9 E3 E3 E3 E3
  66+ E7DD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  66+ E7E1 E3 E3 E3 E3
  66+ E7E5 E3 E3 E3 E3
  66+ E7E9 E3 E3 E3 E3
  67+ E7ED E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  67+ E7F1 E3 E3 E3 E3
  67+ E7F5 E3 E3 E3 E3
  67+ E7F9 E3 E3 E3 E3
  68+ E7FD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  68+ E801 E3 E3 E3 E3
  68+ E805 E3 E3 E3 E3
  68+ E809 E3 E3 E3 E3
  69+ E80D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  69+ E811 E3 E3 E3 E3
  69+ E815 E3 E3 E3 E3
  69+ E819 E3 E3 E3 E3
  70+ E81D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  70+ E821 E3 E3 E3 E3
  70+ E825 E3 E3 E3 E3
  70+ E829 E3 E3 E3 E3
  71+ E82D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  71+ E831 E3 E3 E3 E3
  71+ E835 E3 E3 E3 E3
  71+ E839 E3 E3 E3 E3
  72+ E83D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  72+ E841 E3 E3 E3 E3
  72+ E845 E3 E3 E3 E3
  72+ E849 E3 E3 E3 E3
  73+ E84D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $12;
  73+ E851 E3 E3 E3 E3
  73+ E855 E3 E3 E3 E3
  73+ E859 E3 E3 E3 12
  74+ E85D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $16;
  74+ E861 E3 E3 E3 E3
  74+ E865 E3 E3 E3 E3
  74+ E869 E3 E3 E3 16
  75+ E86D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1A;
  75+ E871 E3 E3 E3 E3
  75+ E875 E3 E3 E3 E3
  75+ E879 E3 E3 E3 1A
  76+ E87D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1F;
  76+ E881 E3 E3 E3 E3
  76+ E885 E3 E3 E3 E3
  76+ E889 E3 E3 E3 1F
  77+ E88D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $12, $16, $1A, $1F, $E3;
  77+ E891 E3 E3 E3 E3
  77+ E895 E3 E3 E3 12
  77+ E899 16 1A 1F E3
  78+ E89D
  79+ E89D
  80+ E89D
  81+ E89D              Sprite5:
  82+ E89D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  82+ E8A1 E3 E3 E3 E3
  82+ E8A5 E3 E3 E3 E3
  82+ E8A9 E3 E3 E3 E3
  83+ E8AD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  83+ E8B1 E3 E3 E3 E3
  83+ E8B5 E3 E3 E3 E3
  83+ E8B9 E3 E3 E3 E3
  84+ E8BD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  84+ E8C1 E3 E3 E3 E3
  84+ E8C5 E3 E3 E3 E3
  84+ E8C9 E3 E3 E3 E3
  85+ E8CD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  85+ E8D1 E3 E3 E3 E3
  85+ E8D5 E3 E3 E3 E3
  85+ E8D9 E3 E3 E3 E3
  86+ E8DD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  86+ E8E1 E3 E3 E3 E3
  86+ E8E5 E3 E3 E3 E3
  86+ E8E9 E3 E3 E3 E3
  87+ E8ED E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  87+ E8F1 E3 E3 E3 E3
  87+ E8F5 E3 E3 E3 E3
  87+ E8F9 E3 E3 E3 E3
  88+ E8FD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  88+ E901 E3 E3 E3 E3
  88+ E905 E3 E3 E3 E3
  88+ E909 E3 E3 E3 E3
  89+ E90D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  89+ E911 E3 E3 E3 E3
  89+ E915 E3 E3 E3 E3
  89+ E919 E3 E3 E3 E3
  90+ E91D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  90+ E921 E3 E3 E3 E3
  90+ E925 E3 E3 E3 E3
  90+ E929 E3 E3 E3 E3
  91+ E92D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  91+ E931 E3 E3 E3 E3
  91+ E935 E3 E3 E3 E3
  91+ E939 E3 E3 E3 E3
  92+ E93D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  92+ E941 E3 E3 E3 E3
  92+ E945 E3 E3 E3 E3
  92+ E949 E3 E3 E3 E3
  93+ E94D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  93+ E951 E3 E3 E3 E3
  93+ E955 E3 E3 E3 E3
  93+ E959 E3 E3 E3 E3
  94+ E95D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  94+ E961 E3 E3 E3 E3
  94+ E965 E3 E3 E3 E3
  94+ E969 E3 E3 E3 E3
  95+ E96D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  95+ E971 E3 E3 E3 E3
  95+ E975 E3 E3 E3 E3
  95+ E979 E3 E3 E3 E3
  96+ E97D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  96+ E981 E3 E3 E3 E3
  96+ E985 E3 E3 E3 E3
  96+ E989 E3 E3 E3 E3
  97+ E98D 1F 1A 16 12  	db  $1F, $1A, $16, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  97+ E991 E3 E3 E3 E3
  97+ E995 E3 E3 E3 E3
  97+ E999 E3 E3 E3 E3
  98+ E99D
  99+ E99D
 100+ E99D
 101+ E99D              Sprite6:
 102+ E99D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1F;
 102+ E9A1 E3 E3 E3 E3
 102+ E9A5 E3 E3 E3 E3
 102+ E9A9 E3 E3 E3 1F
 103+ E9AD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1A;
 103+ E9B1 E3 E3 E3 E3
 103+ E9B5 E3 E3 E3 E3
 103+ E9B9 E3 E3 E3 1A
 104+ E9BD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $16;
 104+ E9C1 E3 E3 E3 E3
 104+ E9C5 E3 E3 E3 E3
 104+ E9C9 E3 E3 E3 16
 105+ E9CD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $12;
 105+ E9D1 E3 E3 E3 E3
 105+ E9D5 E3 E3 E3 E3
 105+ E9D9 E3 E3 E3 12
 106+ E9DD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 106+ E9E1 E3 E3 E3 E3
 106+ E9E5 E3 E3 E3 E3
 106+ E9E9 E3 E3 E3 E3
 107+ E9ED E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 107+ E9F1 E3 E3 E3 E3
 107+ E9F5 E3 E3 E3 E3
 107+ E9F9 E3 E3 E3 E3
 108+ E9FD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 108+ EA01 E3 E3 E3 E3
 108+ EA05 E3 E3 E3 E3
 108+ EA09 E3 E3 E3 E3
 109+ EA0D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 109+ EA11 E3 E3 E3 E3
 109+ EA15 E3 E3 E3 E3
 109+ EA19 E3 E3 E3 E3
 110+ EA1D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 110+ EA21 E3 E3 E3 E3
 110+ EA25 E3 E3 E3 E3
 110+ EA29 E3 E3 E3 E3
 111+ EA2D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 111+ EA31 E3 E3 E3 E3
 111+ EA35 E3 E3 E3 E3
 111+ EA39 E3 E3 E3 E3
 112+ EA3D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 112+ EA41 E3 E3 E3 E3
 112+ EA45 E3 E3 E3 E3
 112+ EA49 E3 E3 E3 E3
 113+ EA4D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 113+ EA51 E3 E3 E3 E3
 113+ EA55 E3 E3 E3 E3
 113+ EA59 E3 E3 E3 E3
 114+ EA5D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 114+ EA61 E3 E3 E3 E3
 114+ EA65 E3 E3 E3 E3
 114+ EA69 E3 E3 E3 E3
 115+ EA6D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 115+ EA71 E3 E3 E3 E3
 115+ EA75 E3 E3 E3 E3
 115+ EA79 E3 E3 E3 E3
 116+ EA7D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 116+ EA81 E3 E3 E3 E3
 116+ EA85 E3 E3 E3 E3
 116+ EA89 E3 E3 E3 E3
 117+ EA8D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 117+ EA91 E3 E3 E3 E3
 117+ EA95 E3 E3 E3 E3
 117+ EA99 E3 E3 E3 E3
 118+ EA9D
 119+ EA9D
 120+ EA9D
 121+ EA9D              Sprite7:
 122+ EA9D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 122+ EAA1 E3 E3 E3 E3
 122+ EAA5 E3 E3 E3 E3
 122+ EAA9 E3 E3 E3 E3
 123+ EAAD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 123+ EAB1 E3 E3 E3 E3
 123+ EAB5 E3 E3 E3 E3
 123+ EAB9 E3 E3 E3 09
 124+ EABD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 124+ EAC1 E3 E3 E3 E3
 124+ EAC5 E3 E3 E3 E3
 124+ EAC9 E3 E3 E3 09
 125+ EACD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 125+ EAD1 E3 E3 E3 E3
 125+ EAD5 E3 E3 E3 E3
 125+ EAD9 E3 E3 E3 2C
 126+ EADD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 126+ EAE1 E3 E3 E3 E3
 126+ EAE5 E3 E3 E3 E3
 126+ EAE9 E3 E3 E3 2C
 127+ EAED E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 127+ EAF1 E3 E3 E3 E3
 127+ EAF5 E3 E3 E3 E3
 127+ EAF9 E3 E3 E3 50
 128+ EAFD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 128+ EB01 E3 E3 E3 E3
 128+ EB05 E3 E3 E3 E3
 128+ EB09 E3 E3 E3 50
 129+ EB0D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 129+ EB11 E3 E3 E3 E3
 129+ EB15 E3 E3 E3 E3
 129+ EB19 E3 E3 E3 50
 130+ EB1D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 130+ EB21 E3 E3 E3 E3
 130+ EB25 E3 E3 E3 E3
 130+ EB29 E3 E3 E3 15
 131+ EB2D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 131+ EB31 E3 E3 E3 E3
 131+ EB35 E3 E3 E3 E3
 131+ EB39 E3 E3 E3 15
 132+ EB3D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 132+ EB41 E3 E3 E3 E3
 132+ EB45 E3 E3 E3 E3
 132+ EB49 E3 E3 E3 15
 133+ EB4D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 133+ EB51 E3 E3 E3 E3
 133+ EB55 E3 E3 E3 E3
 133+ EB59 E3 E3 E3 7C
 134+ EB5D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 134+ EB61 E3 E3 E3 E3
 134+ EB65 E3 E3 E3 E3
 134+ EB69 E3 E3 E3 7C
 135+ EB6D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 135+ EB71 E3 E3 E3 E3
 135+ EB75 E3 E3 E3 E3
 135+ EB79 E3 E3 E3 7C
 136+ EB7D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 136+ EB81 E3 E3 E3 E3
 136+ EB85 E3 E3 E3 E3
 136+ EB89 E3 E3 E3 7C
 137+ EB8D E3 09 09 2C  	db  $E3, $09, $09, $2C, $2C, $50, $50, $50, $15, $15, $15, $7C, $7C, $7C, $7C, $E3;
 137+ EB91 2C 50 50 50
 137+ EB95 15 15 15 7C
 137+ EB99 7C 7C 7C E3
 138+ EB9D
 139+ EB9D
 140+ EB9D
 141+ EB9D              Sprite8:
 142+ EB9D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 142+ EBA1 E3 E3 E3 E3
 142+ EBA5 E3 E3 E3 E3
 142+ EBA9 E3 E3 E3 E3
 143+ EBAD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 143+ EBB1 E3 E3 E3 E3
 143+ EBB5 E3 E3 E3 E3
 143+ EBB9 E3 E3 E3 E3
 144+ EBBD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 144+ EBC1 E3 E3 E3 E3
 144+ EBC5 E3 E3 E3 E3
 144+ EBC9 E3 E3 E3 E3
 145+ EBCD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 145+ EBD1 E3 E3 E3 E3
 145+ EBD5 E3 E3 E3 E3
 145+ EBD9 E3 E3 E3 E3
 146+ EBDD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 146+ EBE1 E3 E3 E3 E3
 146+ EBE5 E3 E3 E3 E3
 146+ EBE9 E3 E3 E3 E3
 147+ EBED E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 147+ EBF1 E3 E3 E3 E3
 147+ EBF5 E3 E3 E3 E3
 147+ EBF9 E3 E3 E3 E3
 148+ EBFD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 148+ EC01 E3 E3 E3 E3
 148+ EC05 E3 E3 E3 E3
 148+ EC09 E3 E3 E3 E3
 149+ EC0D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 149+ EC11 E3 E3 E3 E3
 149+ EC15 E3 E3 E3 E3
 149+ EC19 E3 E3 E3 E3
 150+ EC1D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 150+ EC21 E3 E3 E3 E3
 150+ EC25 E3 E3 E3 E3
 150+ EC29 E3 E3 E3 E3
 151+ EC2D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 151+ EC31 E3 E3 E3 E3
 151+ EC35 E3 E3 E3 E3
 151+ EC39 E3 E3 E3 E3
 152+ EC3D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 152+ EC41 E3 E3 E3 E3
 152+ EC45 E3 E3 E3 E3
 152+ EC49 E3 E3 E3 E3
 153+ EC4D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 153+ EC51 E3 E3 E3 E3
 153+ EC55 E3 E3 E3 E3
 153+ EC59 E3 E3 E3 E3
 154+ EC5D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 154+ EC61 E3 E3 E3 E3
 154+ EC65 E3 E3 E3 E3
 154+ EC69 E3 E3 E3 E3
 155+ EC6D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 155+ EC71 E3 E3 E3 E3
 155+ EC75 E3 E3 E3 E3
 155+ EC79 E3 E3 E3 E3
 156+ EC7D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 156+ EC81 E3 E3 E3 E3
 156+ EC85 E3 E3 E3 E3
 156+ EC89 E3 E3 E3 E3
 157+ EC8D 7C 7C 7C 7C  	db  $7C, $7C, $7C, $7C, $15, $15, $15, $50, $50, $50, $2C, $2C, $09, $09, $E3, $E3;
 157+ EC91 15 15 15 50
 157+ EC95 50 50 2C 2C
 157+ EC99 09 09 E3 E3
 158+ EC9D
 159+ EC9D
 160+ EC9D
 161+ EC9D              Sprite9:
 162+ EC9D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 162+ ECA1 E3 E3 E3 E3
 162+ ECA5 E3 E3 E3 E3
 162+ ECA9 E3 E3 E3 7C
 163+ ECAD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 163+ ECB1 E3 E3 E3 E3
 163+ ECB5 E3 E3 E3 E3
 163+ ECB9 E3 E3 E3 7C
 164+ ECBD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 164+ ECC1 E3 E3 E3 E3
 164+ ECC5 E3 E3 E3 E3
 164+ ECC9 E3 E3 E3 7C
 165+ ECCD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 165+ ECD1 E3 E3 E3 E3
 165+ ECD5 E3 E3 E3 E3
 165+ ECD9 E3 E3 E3 7C
 166+ ECDD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 166+ ECE1 E3 E3 E3 E3
 166+ ECE5 E3 E3 E3 E3
 166+ ECE9 E3 E3 E3 15
 167+ ECED E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 167+ ECF1 E3 E3 E3 E3
 167+ ECF5 E3 E3 E3 E3
 167+ ECF9 E3 E3 E3 15
 168+ ECFD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 168+ ED01 E3 E3 E3 E3
 168+ ED05 E3 E3 E3 E3
 168+ ED09 E3 E3 E3 15
 169+ ED0D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 169+ ED11 E3 E3 E3 E3
 169+ ED15 E3 E3 E3 E3
 169+ ED19 E3 E3 E3 50
 170+ ED1D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 170+ ED21 E3 E3 E3 E3
 170+ ED25 E3 E3 E3 E3
 170+ ED29 E3 E3 E3 50
 171+ ED2D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 171+ ED31 E3 E3 E3 E3
 171+ ED35 E3 E3 E3 E3
 171+ ED39 E3 E3 E3 50
 172+ ED3D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 172+ ED41 E3 E3 E3 E3
 172+ ED45 E3 E3 E3 E3
 172+ ED49 E3 E3 E3 2C
 173+ ED4D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 173+ ED51 E3 E3 E3 E3
 173+ ED55 E3 E3 E3 E3
 173+ ED59 E3 E3 E3 2C
 174+ ED5D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 174+ ED61 E3 E3 E3 E3
 174+ ED65 E3 E3 E3 E3
 174+ ED69 E3 E3 E3 09
 175+ ED6D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 175+ ED71 E3 E3 E3 E3
 175+ ED75 E3 E3 E3 E3
 175+ ED79 E3 E3 E3 09
 176+ ED7D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 176+ ED81 E3 E3 E3 E3
 176+ ED85 E3 E3 E3 E3
 176+ ED89 E3 E3 E3 E3
 177+ ED8D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 177+ ED91 E3 E3 E3 E3
 177+ ED95 E3 E3 E3 E3
 177+ ED99 E3 E3 E3 E3
 178+ ED9D
 179+ ED9D
 180+ ED9D
 181+ ED9D              Sprite10:
 182+ ED9D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 182+ EDA1 E3 E3 E3 E3
 182+ EDA5 E3 E3 E3 E3
 182+ EDA9 E3 E3 E3 E3
 183+ EDAD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $44;
 183+ EDB1 E3 E3 E3 E3
 183+ EDB5 E3 E3 E3 E3
 183+ EDB9 E3 E3 E3 44
 184+ EDBD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 184+ EDC1 E3 E3 E3 E3
 184+ EDC5 E3 E3 E3 E3
 184+ EDC9 E3 E3 E3 64
 185+ EDCD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 185+ EDD1 E3 E3 E3 E3
 185+ EDD5 E3 E3 E3 E3
 185+ EDD9 E3 E3 E3 64
 186+ EDDD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 186+ EDE1 E3 E3 E3 E3
 186+ EDE5 E3 E3 E3 E3
 186+ EDE9 E3 E3 E3 64
 187+ EDED E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 187+ EDF1 E3 E3 E3 E3
 187+ EDF5 E3 E3 E3 E3
 187+ EDF9 E3 E3 E3 A8
 188+ EDFD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 188+ EE01 E3 E3 E3 E3
 188+ EE05 E3 E3 E3 E3
 188+ EE09 E3 E3 E3 A8
 189+ EE0D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 189+ EE11 E3 E3 E3 E3
 189+ EE15 E3 E3 E3 E3
 189+ EE19 E3 E3 E3 A8
 190+ EE1D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 190+ EE21 E3 E3 E3 E3
 190+ EE25 E3 E3 E3 E3
 190+ EE29 E3 E3 E3 CC
 191+ EE2D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 191+ EE31 E3 E3 E3 E3
 191+ EE35 E3 E3 E3 E3
 191+ EE39 E3 E3 E3 CC
 192+ EE3D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 192+ EE41 E3 E3 E3 E3
 192+ EE45 E3 E3 E3 E3
 192+ EE49 E3 E3 E3 CC
 193+ EE4D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 193+ EE51 E3 E3 E3 E3
 193+ EE55 E3 E3 E3 E3
 193+ EE59 E3 E3 E3 EC
 194+ EE5D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 194+ EE61 E3 E3 E3 E3
 194+ EE65 E3 E3 E3 E3
 194+ EE69 E3 E3 E3 EC
 195+ EE6D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 195+ EE71 E3 E3 E3 E3
 195+ EE75 E3 E3 E3 E3
 195+ EE79 E3 E3 E3 EC
 196+ EE7D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 196+ EE81 E3 E3 E3 E3
 196+ EE85 E3 E3 E3 E3
 196+ EE89 E3 E3 E3 EC
 197+ EE8D E3 44 64 64  	db  $E3, $44, $64, $64, $64, $A8, $A8, $A8, $CC, $CC, $CC, $EC, $EC, $EC, $EC, $E3;
 197+ EE91 64 A8 A8 A8
 197+ EE95 CC CC CC EC
 197+ EE99 EC EC EC E3
 198+ EE9D
 199+ EE9D
 200+ EE9D
 201+ EE9D              Sprite11:
 202+ EE9D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 202+ EEA1 E3 E3 E3 E3
 202+ EEA5 E3 E3 E3 E3
 202+ EEA9 E3 E3 E3 E3
 203+ EEAD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 203+ EEB1 E3 E3 E3 E3
 203+ EEB5 E3 E3 E3 E3
 203+ EEB9 E3 E3 E3 E3
 204+ EEBD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 204+ EEC1 E3 E3 E3 E3
 204+ EEC5 E3 E3 E3 E3
 204+ EEC9 E3 E3 E3 E3
 205+ EECD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 205+ EED1 E3 E3 E3 E3
 205+ EED5 E3 E3 E3 E3
 205+ EED9 E3 E3 E3 E3
 206+ EEDD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 206+ EEE1 E3 E3 E3 E3
 206+ EEE5 E3 E3 E3 E3
 206+ EEE9 E3 E3 E3 E3
 207+ EEED E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 207+ EEF1 E3 E3 E3 E3
 207+ EEF5 E3 E3 E3 E3
 207+ EEF9 E3 E3 E3 E3
 208+ EEFD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 208+ EF01 E3 E3 E3 E3
 208+ EF05 E3 E3 E3 E3
 208+ EF09 E3 E3 E3 E3
 209+ EF0D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 209+ EF11 E3 E3 E3 E3
 209+ EF15 E3 E3 E3 E3
 209+ EF19 E3 E3 E3 E3
 210+ EF1D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 210+ EF21 E3 E3 E3 E3
 210+ EF25 E3 E3 E3 E3
 210+ EF29 E3 E3 E3 E3
 211+ EF2D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 211+ EF31 E3 E3 E3 E3
 211+ EF35 E3 E3 E3 E3
 211+ EF39 E3 E3 E3 E3
 212+ EF3D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 212+ EF41 E3 E3 E3 E3
 212+ EF45 E3 E3 E3 E3
 212+ EF49 E3 E3 E3 E3
 213+ EF4D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 213+ EF51 E3 E3 E3 E3
 213+ EF55 E3 E3 E3 E3
 213+ EF59 E3 E3 E3 E3
 214+ EF5D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 214+ EF61 E3 E3 E3 E3
 214+ EF65 E3 E3 E3 E3
 214+ EF69 E3 E3 E3 E3
 215+ EF6D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 215+ EF71 E3 E3 E3 E3
 215+ EF75 E3 E3 E3 E3
 215+ EF79 E3 E3 E3 E3
 216+ EF7D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 216+ EF81 E3 E3 E3 E3
 216+ EF85 E3 E3 E3 E3
 216+ EF89 E3 E3 E3 E3
 217+ EF8D EC EC EC EC  	db  $EC, $EC, $EC, $EC, $CC, $CC, $CC, $A8, $A8, $A8, $64, $64, $64, $44, $E3, $E3;
 217+ EF91 CC CC CC A8
 217+ EF95 A8 A8 64 64
 217+ EF99 64 44 E3 E3
 218+ EF9D
 219+ EF9D
 220+ EF9D
 221+ EF9D              Sprite12:
 222+ EF9D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 222+ EFA1 E3 E3 E3 E3
 222+ EFA5 E3 E3 E3 E3
 222+ EFA9 E3 E3 E3 EC
 223+ EFAD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 223+ EFB1 E3 E3 E3 E3
 223+ EFB5 E3 E3 E3 E3
 223+ EFB9 E3 E3 E3 EC
 224+ EFBD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 224+ EFC1 E3 E3 E3 E3
 224+ EFC5 E3 E3 E3 E3
 224+ EFC9 E3 E3 E3 EC
 225+ EFCD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 225+ EFD1 E3 E3 E3 E3
 225+ EFD5 E3 E3 E3 E3
 225+ EFD9 E3 E3 E3 EC
 226+ EFDD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 226+ EFE1 E3 E3 E3 E3
 226+ EFE5 E3 E3 E3 E3
 226+ EFE9 E3 E3 E3 CC
 227+ EFED E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 227+ EFF1 E3 E3 E3 E3
 227+ EFF5 E3 E3 E3 E3
 227+ EFF9 E3 E3 E3 CC
 228+ EFFD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 228+ F001 E3 E3 E3 E3
 228+ F005 E3 E3 E3 E3
 228+ F009 E3 E3 E3 CC
 229+ F00D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 229+ F011 E3 E3 E3 E3
 229+ F015 E3 E3 E3 E3
 229+ F019 E3 E3 E3 A8
 230+ F01D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 230+ F021 E3 E3 E3 E3
 230+ F025 E3 E3 E3 E3
 230+ F029 E3 E3 E3 A8
 231+ F02D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 231+ F031 E3 E3 E3 E3
 231+ F035 E3 E3 E3 E3
 231+ F039 E3 E3 E3 A8
 232+ F03D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 232+ F041 E3 E3 E3 E3
 232+ F045 E3 E3 E3 E3
 232+ F049 E3 E3 E3 64
 233+ F04D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 233+ F051 E3 E3 E3 E3
 233+ F055 E3 E3 E3 E3
 233+ F059 E3 E3 E3 64
 234+ F05D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 234+ F061 E3 E3 E3 E3
 234+ F065 E3 E3 E3 E3
 234+ F069 E3 E3 E3 64
 235+ F06D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $44;
 235+ F071 E3 E3 E3 E3
 235+ F075 E3 E3 E3 E3
 235+ F079 E3 E3 E3 44
 236+ F07D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 236+ F081 E3 E3 E3 E3
 236+ F085 E3 E3 E3 E3
 236+ F089 E3 E3 E3 E3
 237+ F08D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 237+ F091 E3 E3 E3 E3
 237+ F095 E3 E3 E3 E3
 237+ F099 E3 E3 E3 E3
 238+ F09D
 239+ F09D
 240+ F09D
 241+ F09D              Sprite13:
 242+ F09D 92 E3 E3 E3  	db  $92, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 242+ F0A1 E3 E3 E3 E3
 242+ F0A5 E3 E3 E3 E3
 242+ F0A9 E3 E3 E3 E3
 243+ F0AD 92 E3 E3 E3  	db  $92, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 243+ F0B1 E3 E3 E3 E3
 243+ F0B5 E3 E3 E3 E3
 243+ F0B9 E3 E3 E3 E3
 244+ F0BD FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 244+ F0C1 E3 E3 E3 E3
 244+ F0C5 E3 E3 E3 E3
 244+ F0C9 E3 E3 E3 E3
 245+ F0CD FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 245+ F0D1 E3 E3 E3 E3
 245+ F0D5 E3 E3 E3 E3
 245+ F0D9 E3 E3 E3 E3
 246+ F0DD FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 246+ F0E1 E3 E3 E3 E3
 246+ F0E5 E3 E3 E3 E3
 246+ F0E9 E3 E3 E3 E3
 247+ F0ED FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 247+ F0F1 E3 E3 E3 E3
 247+ F0F5 E3 E3 E3 E3
 247+ F0F9 E3 E3 E3 E3
 248+ F0FD FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 248+ F101 E3 E3 E3 E3
 248+ F105 E3 E3 E3 E3
 248+ F109 E3 E3 E3 E3
 249+ F10D FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 249+ F111 E3 E3 E3 E3
 249+ F115 E3 E3 E3 E3
 249+ F119 E3 E3 E3 E3
 250+ F11D FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 250+ F121 E3 E3 E3 E3
 250+ F125 E3 E3 E3 E3
 250+ F129 E3 E3 E3 E3
 251+ F12D FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 251+ F131 E3 E3 E3 E3
 251+ F135 E3 E3 E3 E3
 251+ F139 E3 E3 E3 E3
 252+ F13D FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 252+ F141 E3 E3 E3 E3
 252+ F145 E3 E3 E3 E3
 252+ F149 E3 E3 E3 E3
 253+ F14D FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 253+ F151 E3 E3 E3 E3
 253+ F155 E3 E3 E3 E3
 253+ F159 E3 E3 E3 E3
 254+ F15D FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 254+ F161 E3 E3 E3 E3
 254+ F165 E3 E3 E3 E3
 254+ F169 E3 E3 E3 E3
 255+ F16D FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 255+ F171 E3 E3 E3 E3
 255+ F175 E3 E3 E3 E3
 255+ F179 E3 E3 E3 E3
 256+ F17D FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 256+ F181 E3 E3 E3 E3
 256+ F185 E3 E3 E3 E3
 256+ F189 E3 E3 E3 E3
 257+ F18D FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 257+ F191 E3 E3 E3 E3
 257+ F195 E3 E3 E3 E3
 257+ F199 E3 E3 E3 E3
 258+ F19D
 259+ F19D
 260+ F19D
 261+ F19D              Sprite14:
 262+ F19D 92 92 FF FF  	db  $92, $92, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF;
 262+ F1A1 FF FF FF FF
 262+ F1A5 FF FF FF FF
 262+ F1A9 FF FF FF FF
 263+ F1AD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 263+ F1B1 E3 E3 E3 E3
 263+ F1B5 E3 E3 E3 E3
 263+ F1B9 E3 E3 E3 E3
 264+ F1BD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 264+ F1C1 E3 E3 E3 E3
 264+ F1C5 E3 E3 E3 E3
 264+ F1C9 E3 E3 E3 E3
 265+ F1CD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 265+ F1D1 E3 E3 E3 E3
 265+ F1D5 E3 E3 E3 E3
 265+ F1D9 E3 E3 E3 E3
 266+ F1DD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 266+ F1E1 E3 E3 E3 E3
 266+ F1E5 E3 E3 E3 E3
 266+ F1E9 E3 E3 E3 E3
 267+ F1ED E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 267+ F1F1 E3 E3 E3 E3
 267+ F1F5 E3 E3 E3 E3
 267+ F1F9 E3 E3 E3 E3
 268+ F1FD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 268+ F201 E3 E3 E3 E3
 268+ F205 E3 E3 E3 E3
 268+ F209 E3 E3 E3 E3
 269+ F20D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 269+ F211 E3 E3 E3 E3
 269+ F215 E3 E3 E3 E3
 269+ F219 E3 E3 E3 E3
 270+ F21D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 270+ F221 E3 E3 E3 E3
 270+ F225 E3 E3 E3 E3
 270+ F229 E3 E3 E3 E3
 271+ F22D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 271+ F231 E3 E3 E3 E3
 271+ F235 E3 E3 E3 E3
 271+ F239 E3 E3 E3 E3
 272+ F23D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 272+ F241 E3 E3 E3 E3
 272+ F245 E3 E3 E3 E3
 272+ F249 E3 E3 E3 E3
 273+ F24D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 273+ F251 E3 E3 E3 E3
 273+ F255 E3 E3 E3 E3
 273+ F259 E3 E3 E3 E3
 274+ F25D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 274+ F261 E3 E3 E3 E3
 274+ F265 E3 E3 E3 E3
 274+ F269 E3 E3 E3 E3
 275+ F26D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 275+ F271 E3 E3 E3 E3
 275+ F275 E3 E3 E3 E3
 275+ F279 E3 E3 E3 E3
 276+ F27D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 276+ F281 E3 E3 E3 E3
 276+ F285 E3 E3 E3 E3
 276+ F289 E3 E3 E3 E3
 277+ F28D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 277+ F291 E3 E3 E3 E3
 277+ F295 E3 E3 E3 E3
 277+ F299 E3 E3 E3 E3
 278+ F29D
 279+ F29D
 280+ F29D
 281+ F29D              Sprite15:
 282+ F29D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 282+ F2A1 E3 E3 E3 E3
 282+ F2A5 E3 E3 E3 E3
 282+ F2A9 E3 E3 E3 E3
 283+ F2AD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 283+ F2B1 E3 E3 E3 E3
 283+ F2B5 E3 E3 E3 E3
 283+ F2B9 E3 E3 E3 E3
 284+ F2BD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 284+ F2C1 E3 E3 E3 E3
 284+ F2C5 E3 E3 E3 E3
 284+ F2C9 E3 E3 E3 E3
 285+ F2CD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 285+ F2D1 E3 E3 E3 E3
 285+ F2D5 E3 E3 E3 E3
 285+ F2D9 E3 E3 E3 E3
 286+ F2DD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $14, $14;
 286+ F2E1 E3 E3 E3 E3
 286+ F2E5 E3 E3 E3 E3
 286+ F2E9 E3 E3 14 14
 287+ F2ED E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $14, $18, $18;
 287+ F2F1 E3 E3 E3 E3
 287+ F2F5 E3 E3 E3 E3
 287+ F2F9 E3 14 18 18
 288+ F2FD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $14, $18, $18, $18;
 288+ F301 E3 E3 E3 E3
 288+ F305 E3 E3 E3 E3
 288+ F309 14 18 18 18
 289+ F30D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $14, $18, $18, $18, $18;
 289+ F311 E3 E3 E3 E3
 289+ F315 E3 E3 E3 14
 289+ F319 18 18 18 18
 290+ F31D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $14, $18, $18, $18, $1C, $1C;
 290+ F321 E3 E3 E3 E3
 290+ F325 E3 E3 14 18
 290+ F329 18 18 1C 1C
 291+ F32D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $14, $14, $18, $18, $18, $1C, $1C, $1C;
 291+ F331 E3 E3 E3 E3
 291+ F335 14 14 18 18
 291+ F339 18 1C 1C 1C
 292+ F33D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $14, $18, $18, $18, $18, $1C, $1C, $1C, $1C;
 292+ F341 E3 E3 E3 14
 292+ F345 18 18 18 18
 292+ F349 1C 1C 1C 1C
 293+ F34D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $14, $14, $18, $18, $18, $18, $1C, $1C, $1C, $1C, $1C;
 293+ F351 E3 14 14 18
 293+ F355 18 18 18 1C
 293+ F359 1C 1C 1C 1C
 294+ F35D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $14, $18, $18, $18, $18, $18, $1C, $1C, $1C, $1C, $1C, $18;
 294+ F361 14 18 18 18
 294+ F365 18 18 1C 1C
 294+ F369 1C 1C 1C 18
 295+ F36D E3 E3 E3 14  	db  $E3, $E3, $E3, $14, $18, $18, $18, $18, $1C, $1C, $1C, $1C, $1C, $1C, $18, $18;
 295+ F371 18 18 18 18
 295+ F375 1C 1C 1C 1C
 295+ F379 1C 1C 18 18
 296+ F37D E3 E3 14 18  	db  $E3, $E3, $14, $18, $18, $18, $18, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $18, $18;
 296+ F381 18 18 18 1C
 296+ F385 1C 1C 1C 1C
 296+ F389 1C 1C 18 18
 297+ F38D E3 14 18 18  	db  $E3, $14, $18, $18, $18, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $18, $18, $14;
 297+ F391 18 1C 1C 1C
 297+ F395 1C 1C 1C 1C
 297+ F399 1C 18 18 14
 298+ F39D
 299+ F39D
 300+ F39D
 301+ F39D              Sprite16:
 302+ F39D E3 E3 E3 14  	db  $E3, $E3, $E3, $14, $18, $18, $18, $18, $1C, $1C, $18, $18, $18, $18, $14, $E3;
 302+ F3A1 18 18 18 18
 302+ F3A5 1C 1C 18 18
 302+ F3A9 18 18 14 E3
 303+ F3AD E3 E3 14 18  	db  $E3, $E3, $14, $18, $18, $18, $18, $1C, $1C, $18, $18, $18, $18, $14, $E3, $E3;
 303+ F3B1 18 18 18 1C
 303+ F3B5 1C 18 18 18
 303+ F3B9 18 14 E3 E3
 304+ F3BD E3 14 18 18  	db  $E3, $14, $18, $18, $18, $1C, $1C, $1C, $18, $18, $18, $18, $14, $E3, $E3, $E3;
 304+ F3C1 18 1C 1C 1C
 304+ F3C5 18 18 18 18
 304+ F3C9 14 E3 E3 E3
 305+ F3CD 14 18 18 18  	db  $14, $18, $18, $18, $1C, $1C, $18, $18, $18, $18, $18, $14, $E3, $E3, $E3, $E3;
 305+ F3D1 1C 1C 18 18
 305+ F3D5 18 18 18 14
 305+ F3D9 E3 E3 E3 E3
 306+ F3DD 18 18 18 1C  	db  $18, $18, $18, $1C, $1C, $18, $18, $18, $18, $18, $14, $E3, $E3, $E3, $E3, $E3;
 306+ F3E1 1C 18 18 18
 306+ F3E5 18 18 14 E3
 306+ F3E9 E3 E3 E3 E3
 307+ F3ED 18 1C 1C 1C  	db  $18, $1C, $1C, $1C, $18, $18, $18, $18, $18, $14, $E3, $E3, $E3, $E3, $E3, $E3;
 307+ F3F1 18 18 18 18
 307+ F3F5 18 14 E3 E3
 307+ F3F9 E3 E3 E3 E3
 308+ F3FD 1C 1C 1C 18  	db  $1C, $1C, $1C, $18, $18, $18, $18, $18, $14, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 308+ F401 18 18 18 18
 308+ F405 14 E3 E3 E3
 308+ F409 E3 E3 E3 E3
 309+ F40D 1C 1C 18 18  	db  $1C, $1C, $18, $18, $18, $18, $18, $14, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 309+ F411 18 18 18 14
 309+ F415 E3 E3 E3 E3
 309+ F419 E3 E3 E3 E3
 310+ F41D 1C 18 18 18  	db  $1C, $18, $18, $18, $18, $18, $14, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 310+ F421 18 18 14 E3
 310+ F425 E3 E3 E3 E3
 310+ F429 E3 E3 E3 E3
 311+ F42D 1C 18 18 18  	db  $1C, $18, $18, $18, $18, $14, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 311+ F431 18 14 E3 E3
 311+ F435 E3 E3 E3 E3
 311+ F439 E3 E3 E3 E3
 312+ F43D 18 18 18 18  	db  $18, $18, $18, $18, $14, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 312+ F441 14 E3 E3 E3
 312+ F445 E3 E3 E3 E3
 312+ F449 E3 E3 E3 E3
 313+ F44D 18 18 18 14  	db  $18, $18, $18, $14, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 313+ F451 E3 E3 E3 E3
 313+ F455 E3 E3 E3 E3
 313+ F459 E3 E3 E3 E3
 314+ F45D 18 18 14 E3  	db  $18, $18, $14, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 314+ F461 E3 E3 E3 E3
 314+ F465 E3 E3 E3 E3
 314+ F469 E3 E3 E3 E3
 315+ F46D 18 14 E3 E3  	db  $18, $14, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 315+ F471 E3 E3 E3 E3
 315+ F475 E3 E3 E3 E3
 315+ F479 E3 E3 E3 E3
 316+ F47D 14 E3 E3 E3  	db  $14, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 316+ F481 E3 E3 E3 E3
 316+ F485 E3 E3 E3 E3
 316+ F489 E3 E3 E3 E3
 317+ F48D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 317+ F491 E3 E3 E3 E3
 317+ F495 E3 E3 E3 E3
 317+ F499 E3 E3 E3 E3
 318+ F49D
 319+ F49D
 320+ F49D
 321+ F49D              Sprite17:
 322+ F49D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 322+ F4A1 E3 E3 E3 E3
 322+ F4A5 E3 E3 E3 E3
 322+ F4A9 E3 E3 E3 E3
 323+ F4AD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 323+ F4B1 E3 E3 E3 E3
 323+ F4B5 E3 E3 E3 E3
 323+ F4B9 E3 E3 E3 E3
 324+ F4BD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 324+ F4C1 E3 E3 E3 E3
 324+ F4C5 E3 E3 E3 E3
 324+ F4C9 E3 E3 E3 E3
 325+ F4CD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 325+ F4D1 E3 E3 E3 E3
 325+ F4D5 E3 E3 E3 E3
 325+ F4D9 E3 E3 E3 E3
 326+ F4DD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 326+ F4E1 E3 E3 E3 E3
 326+ F4E5 E3 E3 E3 E3
 326+ F4E9 E3 E3 E3 E3
 327+ F4ED E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 327+ F4F1 E3 E3 E3 E3
 327+ F4F5 E3 E3 E3 E3
 327+ F4F9 E3 E3 E3 E3
 328+ F4FD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 328+ F501 E3 E3 E3 E3
 328+ F505 E3 E3 E3 E3
 328+ F509 E3 E3 E3 E3
 329+ F50D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $14, $14;
 329+ F511 E3 E3 E3 E3
 329+ F515 E3 E3 E3 E3
 329+ F519 E3 E3 14 14
 330+ F51D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $14, $18, $18;
 330+ F521 E3 E3 E3 E3
 330+ F525 E3 E3 E3 E3
 330+ F529 E3 14 18 18
 331+ F52D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $14, $18, $18, $18;
 331+ F531 E3 E3 E3 E3
 331+ F535 E3 E3 E3 E3
 331+ F539 14 18 18 18
 332+ F53D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $14, $14, $18, $18, $18, $18;
 332+ F541 E3 E3 E3 E3
 332+ F545 E3 E3 14 14
 332+ F549 18 18 18 18
 333+ F54D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $14, $18, $18, $18, $18, $18, $18;
 333+ F551 E3 E3 E3 E3
 333+ F555 E3 14 18 18
 333+ F559 18 18 18 18
 334+ F55D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $14, $18, $18, $18, $18, $18, $1C, $18;
 334+ F561 E3 E3 E3 E3
 334+ F565 14 18 18 18
 334+ F569 18 18 1C 18
 335+ F56D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $14, $18, $18, $18, $18, $18, $18, $1C, $18;
 335+ F571 E3 E3 E3 14
 335+ F575 18 18 18 18
 335+ F579 18 18 1C 18
 336+ F57D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $14, $14, $18, $18, $18, $18, $18, $18, $1C, $18, $18;
 336+ F581 E3 14 14 18
 336+ F585 18 18 18 18
 336+ F589 18 1C 18 18
 337+ F58D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $14, $18, $18, $18, $18, $18, $18, $1C, $18, $18, $18, $18;
 337+ F591 14 18 18 18
 337+ F595 18 18 18 1C
 337+ F599 18 18 18 18
 338+ F59D
 339+ F59D
 340+ F59D
 341+ F59D              Sprite18:
 342+ F59D 18 18 18 18  	db  $18, $18, $18, $18, $18, $18, $14, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 342+ F5A1 18 18 14 E3
 342+ F5A5 E3 E3 E3 E3
 342+ F5A9 E3 E3 E3 E3
 343+ F5AD 18 18 18 18  	db  $18, $18, $18, $18, $18, $14, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 343+ F5B1 18 14 E3 E3
 343+ F5B5 E3 E3 E3 E3
 343+ F5B9 E3 E3 E3 E3
 344+ F5BD 18 18 18 18  	db  $18, $18, $18, $18, $14, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 344+ F5C1 14 E3 E3 E3
 344+ F5C5 E3 E3 E3 E3
 344+ F5C9 E3 E3 E3 E3
 345+ F5CD 18 18 18 14  	db  $18, $18, $18, $14, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 345+ F5D1 E3 E3 E3 E3
 345+ F5D5 E3 E3 E3 E3
 345+ F5D9 E3 E3 E3 E3
 346+ F5DD 18 18 14 E3  	db  $18, $18, $14, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 346+ F5E1 E3 E3 E3 E3
 346+ F5E5 E3 E3 E3 E3
 346+ F5E9 E3 E3 E3 E3
 347+ F5ED 18 14 E3 E3  	db  $18, $14, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 347+ F5F1 E3 E3 E3 E3
 347+ F5F5 E3 E3 E3 E3
 347+ F5F9 E3 E3 E3 E3
 348+ F5FD 14 E3 E3 E3  	db  $14, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 348+ F601 E3 E3 E3 E3
 348+ F605 E3 E3 E3 E3
 348+ F609 E3 E3 E3 E3
 349+ F60D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 349+ F611 E3 E3 E3 E3
 349+ F615 E3 E3 E3 E3
 349+ F619 E3 E3 E3 E3
 350+ F61D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 350+ F621 E3 E3 E3 E3
 350+ F625 E3 E3 E3 E3
 350+ F629 E3 E3 E3 E3
 351+ F62D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 351+ F631 E3 E3 E3 E3
 351+ F635 E3 E3 E3 E3
 351+ F639 E3 E3 E3 E3
 352+ F63D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 352+ F641 E3 E3 E3 E3
 352+ F645 E3 E3 E3 E3
 352+ F649 E3 E3 E3 E3
 353+ F64D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 353+ F651 E3 E3 E3 E3
 353+ F655 E3 E3 E3 E3
 353+ F659 E3 E3 E3 E3
 354+ F65D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 354+ F661 E3 E3 E3 E3
 354+ F665 E3 E3 E3 E3
 354+ F669 E3 E3 E3 E3
 355+ F66D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 355+ F671 E3 E3 E3 E3
 355+ F675 E3 E3 E3 E3
 355+ F679 E3 E3 E3 E3
 356+ F67D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 356+ F681 E3 E3 E3 E3
 356+ F685 E3 E3 E3 E3
 356+ F689 E3 E3 E3 E3
 357+ F68D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 357+ F691 E3 E3 E3 E3
 357+ F695 E3 E3 E3 E3
 357+ F699 E3 E3 E3 E3
 358+ F69D
 359+ F69D
 360+ F69D
 361+ F69D              Sprite19:
 362+ F69D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 362+ F6A1 E3 E3 E3 E3
 362+ F6A5 E3 E3 E3 E3
 362+ F6A9 E3 E3 E3 E3
 363+ F6AD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 363+ F6B1 E3 E3 E3 E3
 363+ F6B5 E3 E3 E3 E3
 363+ F6B9 E3 E3 E3 E3
 364+ F6BD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 364+ F6C1 E3 E3 E3 E3
 364+ F6C5 E3 E3 E3 E3
 364+ F6C9 E3 E3 E3 E3
 365+ F6CD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 365+ F6D1 E3 E3 E3 E3
 365+ F6D5 E3 E3 E3 E3
 365+ F6D9 E3 E3 E3 E3
 366+ F6DD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 366+ F6E1 E3 E3 E3 E3
 366+ F6E5 E3 E3 E3 E3
 366+ F6E9 E3 E3 E3 E3
 367+ F6ED E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 367+ F6F1 E3 E3 E3 E3
 367+ F6F5 E3 E3 E3 E3
 367+ F6F9 E3 E3 E3 E3
 368+ F6FD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 368+ F701 E3 E3 E3 E3
 368+ F705 E3 E3 E3 E3
 368+ F709 E3 E3 E3 E3
 369+ F70D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 369+ F711 E3 E3 E3 E3
 369+ F715 E3 E3 E3 E3
 369+ F719 E3 E3 E3 E3
 370+ F71D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 370+ F721 E3 E3 E3 E3
 370+ F725 E3 E3 E3 E3
 370+ F729 E3 E3 E3 E3
 371+ F72D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 371+ F731 E3 E3 E3 E3
 371+ F735 E3 E3 E3 E3
 371+ F739 E3 E3 E3 E3
 372+ F73D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $14, $14;
 372+ F741 E3 E3 E3 E3
 372+ F745 E3 E3 E3 E3
 372+ F749 E3 E3 14 14
 373+ F74D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $14, $18, $18;
 373+ F751 E3 E3 E3 E3
 373+ F755 E3 E3 E3 E3
 373+ F759 E3 14 18 18
 374+ F75D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $14, $18, $18, $18;
 374+ F761 E3 E3 E3 E3
 374+ F765 E3 E3 E3 E3
 374+ F769 14 18 18 18
 375+ F76D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $14, $14, $18, $18, $18, $18;
 375+ F771 E3 E3 E3 E3
 375+ F775 E3 E3 14 14
 375+ F779 18 18 18 18
 376+ F77D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $14, $18, $18, $18, $18, $18, $18;
 376+ F781 E3 E3 E3 E3
 376+ F785 E3 14 18 18
 376+ F789 18 18 18 18
 377+ F78D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $14, $18, $18, $18, $18, $18, $18, $18;
 377+ F791 E3 E3 E3 E3
 377+ F795 14 18 18 18
 377+ F799 18 18 18 18
 378+ F79D
 379+ F79D
 380+ F79D
 381+ F79D              Sprite20:
 382+ F79D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $14, $18, $18, $14, $E3;
 382+ F7A1 E3 E3 E3 E3
 382+ F7A5 E3 E3 E3 14
 382+ F7A9 18 18 14 E3
 383+ F7AD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $14, $14, $18, $18, $14, $E3, $E3;
 383+ F7B1 E3 E3 E3 E3
 383+ F7B5 E3 14 14 18
 383+ F7B9 18 14 E3 E3
 384+ F7BD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $14, $18, $18, $18, $14, $E3, $E3, $E3;
 384+ F7C1 E3 E3 E3 E3
 384+ F7C5 14 18 18 18
 384+ F7C9 14 E3 E3 E3
 385+ F7CD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $14, $18, $18, $18, $14, $E3, $E3, $E3, $E3;
 385+ F7D1 E3 E3 E3 14
 385+ F7D5 18 18 18 14
 385+ F7D9 E3 E3 E3 E3
 386+ F7DD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $14, $18, $18, $18, $14, $E3, $E3, $E3, $E3, $E3;
 386+ F7E1 E3 E3 14 18
 386+ F7E5 18 18 14 E3
 386+ F7E9 E3 E3 E3 E3
 387+ F7ED E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $14, $14, $18, $18, $18, $14, $E3, $E3, $E3, $E3, $E3, $E3;
 387+ F7F1 14 14 18 18
 387+ F7F5 18 14 E3 E3
 387+ F7F9 E3 E3 E3 E3
 388+ F7FD E3 E3 E3 14  	db  $E3, $E3, $E3, $14, $18, $18, $18, $18, $14, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 388+ F801 18 18 18 18
 388+ F805 14 E3 E3 E3
 388+ F809 E3 E3 E3 E3
 389+ F80D E3 E3 14 18  	db  $E3, $E3, $14, $18, $18, $18, $18, $14, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 389+ F811 18 18 18 14
 389+ F815 E3 E3 E3 E3
 389+ F819 E3 E3 E3 E3
 390+ F81D E3 14 18 18  	db  $E3, $14, $18, $18, $18, $18, $14, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 390+ F821 18 18 14 E3
 390+ F825 E3 E3 E3 E3
 390+ F829 E3 E3 E3 E3
 391+ F82D 14 18 18 18  	db  $14, $18, $18, $18, $18, $14, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 391+ F831 18 14 E3 E3
 391+ F835 E3 E3 E3 E3
 391+ F839 E3 E3 E3 E3
 392+ F83D 18 18 18 18  	db  $18, $18, $18, $18, $14, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 392+ F841 14 E3 E3 E3
 392+ F845 E3 E3 E3 E3
 392+ F849 E3 E3 E3 E3
 393+ F84D 18 18 18 14  	db  $18, $18, $18, $14, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 393+ F851 E3 E3 E3 E3
 393+ F855 E3 E3 E3 E3
 393+ F859 E3 E3 E3 E3
 394+ F85D 18 18 14 E3  	db  $18, $18, $14, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 394+ F861 E3 E3 E3 E3
 394+ F865 E3 E3 E3 E3
 394+ F869 E3 E3 E3 E3
 395+ F86D 18 14 E3 E3  	db  $18, $14, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 395+ F871 E3 E3 E3 E3
 395+ F875 E3 E3 E3 E3
 395+ F879 E3 E3 E3 E3
 396+ F87D 14 E3 E3 E3  	db  $14, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 396+ F881 E3 E3 E3 E3
 396+ F885 E3 E3 E3 E3
 396+ F889 E3 E3 E3 E3
 397+ F88D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 397+ F891 E3 E3 E3 E3
 397+ F895 E3 E3 E3 E3
 397+ F899 E3 E3 E3 E3
 398+ F89D
 399+ F89D
 400+ F89D
 401+ F89D              Sprite21:
 402+ F89D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 402+ F8A1 E3 E3 E3 E3
 402+ F8A5 E3 E3 E3 E3
 402+ F8A9 E3 E3 E3 E3
 403+ F8AD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 403+ F8B1 E3 E3 E3 E3
 403+ F8B5 E3 E3 E3 E3
 403+ F8B9 E3 E3 E3 E3
 404+ F8BD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 404+ F8C1 E3 E3 E3 E3
 404+ F8C5 E3 E3 E3 E3
 404+ F8C9 E3 E3 E3 E3
 405+ F8CD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 405+ F8D1 E3 E3 E3 E3
 405+ F8D5 E3 E3 E3 E3
 405+ F8D9 E3 E3 E3 E3
 406+ F8DD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 406+ F8E1 E3 E3 E3 E3
 406+ F8E5 E3 E3 E3 E3
 406+ F8E9 E3 E3 E3 E3
 407+ F8ED E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 407+ F8F1 E3 E3 E3 E3
 407+ F8F5 E3 E3 E3 E3
 407+ F8F9 E3 E3 E3 E3
 408+ F8FD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $14;
 408+ F901 E3 E3 E3 E3
 408+ F905 E3 E3 E3 E3
 408+ F909 E3 E3 E3 14
 409+ F90D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $14, $18;
 409+ F911 E3 E3 E3 E3
 409+ F915 E3 E3 E3 E3
 409+ F919 E3 E3 14 18
 410+ F91D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $14, $18, $E3;
 410+ F921 E3 E3 E3 E3
 410+ F925 E3 E3 E3 E3
 410+ F929 E3 14 18 E3
 411+ F92D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $14, $14, $18, $E3, $E3;
 411+ F931 E3 E3 E3 E3
 411+ F935 E3 E3 E3 14
 411+ F939 14 18 E3 E3
 412+ F93D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $14, $18, $18, $E3, $E3, $E3;
 412+ F941 E3 E3 E3 E3
 412+ F945 E3 E3 14 18
 412+ F949 18 E3 E3 E3
 413+ F94D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $14, $18, $18, $E3, $E3, $E3, $E3;
 413+ F951 E3 E3 E3 E3
 413+ F955 E3 14 18 18
 413+ F959 E3 E3 E3 E3
 414+ F95D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $14, $14, $18, $14, $E3, $E3, $E3, $E3, $E3;
 414+ F961 E3 E3 E3 14
 414+ F965 14 18 14 E3
 414+ F969 E3 E3 E3 E3
 415+ F96D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $14, $18, $18, $14, $E3, $E3, $E3, $E3, $E3, $E3;
 415+ F971 E3 E3 14 18
 415+ F975 18 14 E3 E3
 415+ F979 E3 E3 E3 E3
 416+ F97D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $14, $18, $18, $14, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 416+ F981 E3 14 18 18
 416+ F985 14 E3 E3 E3
 416+ F989 E3 E3 E3 E3
 417+ F98D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $14, $18, $18, $14, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 417+ F991 14 18 18 14
 417+ F995 E3 E3 E3 E3
 417+ F999 E3 E3 E3 E3
 418+ F99D
 419+ F99D
 420+ F99D
 421+ F99D              Sprite22:
 422+ F99D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $1C, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 422+ F9A1 E3 E3 1C E3
 422+ F9A5 E3 E3 E3 E3
 422+ F9A9 E3 E3 E3 E3
 423+ F9AD E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $1C, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 423+ F9B1 E3 1C E3 E3
 423+ F9B5 E3 E3 E3 E3
 423+ F9B9 E3 E3 E3 E3
 424+ F9BD E3 E3 E3 18  	db  $E3, $E3, $E3, $18, $1C, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 424+ F9C1 1C E3 E3 E3
 424+ F9C5 E3 E3 E3 E3
 424+ F9C9 E3 E3 E3 E3
 425+ F9CD E3 E3 18 18  	db  $E3, $E3, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 425+ F9D1 E3 E3 E3 E3
 425+ F9D5 E3 E3 E3 E3
 425+ F9D9 E3 E3 E3 E3
 426+ F9DD E3 18 18 E3  	db  $E3, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 426+ F9E1 E3 E3 E3 E3
 426+ F9E5 E3 E3 E3 E3
 426+ F9E9 E3 E3 E3 E3
 427+ F9ED 18 18 E3 E3  	db  $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 427+ F9F1 E3 E3 E3 E3
 427+ F9F5 E3 E3 E3 E3
 427+ F9F9 E3 E3 E3 E3
 428+ F9FD 18 E3 E3 E3  	db  $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 428+ FA01 E3 E3 E3 E3
 428+ FA05 E3 E3 E3 E3
 428+ FA09 E3 E3 E3 E3
 429+ FA0D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 429+ FA11 E3 E3 E3 E3
 429+ FA15 E3 E3 E3 E3
 429+ FA19 E3 E3 E3 E3
 430+ FA1D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 430+ FA21 E3 E3 E3 E3
 430+ FA25 E3 E3 E3 E3
 430+ FA29 E3 E3 E3 E3
 431+ FA2D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 431+ FA31 E3 E3 E3 E3
 431+ FA35 E3 E3 E3 E3
 431+ FA39 E3 E3 E3 E3
 432+ FA3D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 432+ FA41 E3 E3 E3 E3
 432+ FA45 E3 E3 E3 E3
 432+ FA49 E3 E3 E3 E3
 433+ FA4D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 433+ FA51 E3 E3 E3 E3
 433+ FA55 E3 E3 E3 E3
 433+ FA59 E3 E3 E3 E3
 434+ FA5D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 434+ FA61 E3 E3 E3 E3
 434+ FA65 E3 E3 E3 E3
 434+ FA69 E3 E3 E3 E3
 435+ FA6D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 435+ FA71 E3 E3 E3 E3
 435+ FA75 E3 E3 E3 E3
 435+ FA79 E3 E3 E3 E3
 436+ FA7D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 436+ FA81 E3 E3 E3 E3
 436+ FA85 E3 E3 E3 E3
 436+ FA89 E3 E3 E3 E3
 437+ FA8D E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 437+ FA91 E3 E3 E3 E3
 437+ FA95 E3 E3 E3 E3
 437+ FA99 E3 E3 E3 E3
 438+ FA9D
# file closed: ./Layer3Sprites/SpriteSheet.asm
1179  FA9D              ; Bank 61  ------------------------------------------------------------------------------------------------------------------------
1180  FA9D                  SLOT    ConsoleImageAddr
1181  FA9D                  PAGE    BankConsole
1182  FA9D              	ORG     ConsoleImageAddr, BankConsole
1183  E000
1184  E000                  INCLUDE "./Images/ConsoleImageData.asm"
# file opened: ./Images/ConsoleImageData.asm
   1+ E000              ConsoleImageData:
   2+ E000 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$00,$FF,$FF,$FF,$FF,$FF,$FF
   2+ E004 FF FF 00 00
   2+ E008 00 00 00 00
   2+ E00C 00 00 00 00
   2+ E010 00 00 00 00
   2+ E014 00 00 00 00
   2+ E018 7F 00 FF FF
   2+ E01C FF FF FF FF
   3+ E020 9C C3 FF FF      DB $9C,$C3,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$00,$01
   3+ E024 FF FF 00 00
   3+ E028 00 00 00 00
   3+ E02C 00 00 00 00
   3+ E030 00 00 00 00
   3+ E034 00 00 00 40
   3+ E038 08 01 80 00
   3+ E03C 00 00 00 01
   4+ E040 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$08,$04,$80,$00,$00,$00,$00,$01
   4+ E044 00 01 00 00
   4+ E048 00 00 00 00
   4+ E04C 00 00 00 00
   4+ E050 00 00 00 00
   4+ E054 00 00 00 10
   4+ E058 08 04 80 00
   4+ E05C 00 00 00 01
   5+ E060 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
   5+ E064 00 01 00 00
   5+ E068 00 00 00 00
   5+ E06C 00 00 00 00
   5+ E070 00 00 00 00
   5+ E074 00 00 00 00
   5+ E078 00 00 80 00
   5+ E07C 00 00 00 01
   6+ E080 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$07,$82,$00,$08,$06,$20,$01,$80,$04,$60,$10,$00,$41,$E0,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   6+ E084 00 01 00 00
   6+ E088 00 07 82 00
   6+ E08C 08 06 20 01
   6+ E090 80 04 60 10
   6+ E094 00 41 E0 00
   6+ E098 00 00 FF FF
   6+ E09C FF FF FF FF
   7+ E0A0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$30,$00,$08,$00,$04,$00,$61,$86,$00,$20,$00,$10,$00,$0C,$00,$60,$00,$FF,$FF,$FF,$FF,$FF,$FF
   7+ E0A4 00 01 00 06
   7+ E0A8 00 30 00 08
   7+ E0AC 00 04 00 61
   7+ E0B0 86 00 20 00
   7+ E0B4 10 00 0C 00
   7+ E0B8 60 00 FF FF
   7+ E0BC FF FF FF FF
   8+ E0C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$0F,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$55,$55,$55,$F0,$00,$FF,$FF,$FF,$FF,$FF,$FF
   8+ E0C4 00 01 00 0F
   8+ E0C8 AA AA AA AA
   8+ E0CC AA AA AA AA
   8+ E0D0 55 55 55 55
   8+ E0D4 55 55 55 55
   8+ E0D8 F0 00 FF FF
   8+ E0DC FF FF FF FF
   9+ E0E0 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$1E,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$78,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   9+ E0E4 FF FF 00 00
   9+ E0E8 00 1E 00 00
   9+ E0EC 08 00 00 01
   9+ E0F0 80 00 00 10
   9+ E0F4 00 00 78 00
   9+ E0F8 00 00 FF FF
   9+ E0FC FF FF FF FF
  10+ E100 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$C9,$C0,$80,$00,$00,$00,$00,$01
  10+ E104 00 01 00 00
  10+ E108 00 00 00 00
  10+ E10C 00 00 00 00
  10+ E110 00 00 00 00
  10+ E114 00 00 00 01
  10+ E118 C9 C0 80 00
  10+ E11C 00 00 00 01
  11+ E120 B2 C3 92 49      DB $B2,$C3,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$39
  11+ E124 24 93 00 00
  11+ E128 00 00 00 00
  11+ E12C 00 00 00 00
  11+ E130 00 00 00 00
  11+ E134 00 00 00 40
  11+ E138 08 01 80 00
  11+ E13C 00 00 7C 39
  12+ E140 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$00,$0C,$80,$00,$00,$00,$7C,$61
  12+ E144 00 01 00 00
  12+ E148 00 00 00 00
  12+ E14C 00 00 00 00
  12+ E150 00 00 00 00
  12+ E154 00 00 00 18
  12+ E158 00 0C 80 00
  12+ E15C 00 00 7C 61
  13+ E160 9C 7E 00 00      DB $9C,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  13+ E164 00 01 00 00
  13+ E168 00 00 00 00
  13+ E16C 00 00 00 00
  13+ E170 00 00 00 00
  13+ E174 00 00 00 00
  13+ E178 00 00 80 00
  13+ E17C 00 00 00 01
  14+ E180 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$00,$00,$00,$38,$04,$00,$10,$01,$40,$01,$80,$06,$80,$08,$00,$20,$1C,$00,$00,$00,$80,$00,$00,$00,$00,$81
  14+ E184 00 01 00 00
  14+ E188 00 38 04 00
  14+ E18C 10 01 40 01
  14+ E190 80 06 80 08
  14+ E194 00 20 1C 00
  14+ E198 00 00 80 00
  14+ E19C 00 00 00 81
  15+ E1A0 9C 30 00 00      DB $9C,$30,$00,$00,$00,$01,$00,$0C,$00,$40,$00,$10,$00,$04,$00,$11,$88,$00,$20,$00,$08,$00,$02,$00,$30,$00,$80,$00,$00,$00,$00,$81
  15+ E1A4 00 01 00 0C
  15+ E1A8 00 40 00 10
  15+ E1AC 00 04 00 11
  15+ E1B0 88 00 20 00
  15+ E1B4 08 00 02 00
  15+ E1B8 30 00 80 00
  15+ E1BC 00 00 00 81
  16+ E1C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$00,$10,$00,$00,$80,$00,$01,$80,$00,$01,$00,$00,$08,$00,$00,$60,$00,$80,$00,$00,$00,$00,$81
  16+ E1C4 00 01 00 06
  16+ E1C8 00 00 10 00
  16+ E1CC 00 80 00 01
  16+ E1D0 80 00 01 00
  16+ E1D4 00 08 00 00
  16+ E1D8 60 00 80 00
  16+ E1DC 00 00 00 81
  17+ E1E0 B8 00 00 00      DB $B8,$00,$00,$00,$00,$01,$00,$00,$00,$01,$E0,$00,$10,$00,$00,$01,$80,$00,$00,$08,$00,$07,$80,$00,$00,$00,$80,$00,$00,$00,$00,$81
  17+ E1E4 00 01 00 00
  17+ E1E8 00 01 E0 00
  17+ E1EC 10 00 00 01
  17+ E1F0 80 00 00 08
  17+ E1F4 00 07 80 00
  17+ E1F8 00 00 80 00
  17+ E1FC 00 00 00 81
  18+ E200 BE 3C 00 00      DB $BE,$3C,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$08,$38,$80,$00,$00,$00,$3C,$79
  18+ E204 00 01 00 00
  18+ E208 00 00 00 00
  18+ E20C 00 00 00 00
  18+ E210 00 00 00 00
  18+ E214 00 00 00 06
  18+ E218 08 38 80 00
  18+ E21C 00 00 3C 79
  19+ E220 B2 C3 80 01      DB $B2,$C3,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$80,$00,$00,$00,$62,$65
  19+ E224 00 03 00 00
  19+ E228 00 00 00 00
  19+ E22C 00 00 00 00
  19+ E230 00 00 00 00
  19+ E234 00 00 00 55
  19+ E238 55 55 80 00
  19+ E23C 00 00 62 65
  20+ E240 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$08,$18,$80,$00,$00,$00,$66,$61
  20+ E244 00 01 00 00
  20+ E248 00 00 00 00
  20+ E24C 00 00 00 00
  20+ E250 00 00 00 00
  20+ E254 00 00 00 0C
  20+ E258 08 18 80 00
  20+ E25C 00 00 66 61
  21+ E260 B2 18 00 00      DB $B2,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  21+ E264 00 01 00 00
  21+ E268 00 00 00 00
  21+ E26C 00 00 00 00
  21+ E270 00 00 00 00
  21+ E274 00 00 00 00
  21+ E278 00 00 80 00
  21+ E27C 00 00 00 01
  22+ E280 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$01,$CA,$BA,$AA,$AA,$AA,$EA,$AA,$55,$57,$55,$55,$55,$5D,$53,$80,$00,$00,$80,$00,$00,$00,$00,$99
  22+ E284 00 01 00 00
  22+ E288 01 CA BA AA
  22+ E28C AA AA EA AA
  22+ E290 55 57 55 55
  22+ E294 55 5D 53 80
  22+ E298 00 00 80 00
  22+ E29C 00 00 00 99
  23+ E2A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$08,$01,$80,$00,$20,$00,$08,$00,$05,$A0,$00,$10,$00,$04,$00,$01,$80,$10,$00,$80,$00,$00,$00,$00,$B9
  23+ E2A4 00 01 00 08
  23+ E2A8 01 80 00 20
  23+ E2AC 00 08 00 05
  23+ E2B0 A0 00 10 00
  23+ E2B4 04 00 01 80
  23+ E2B8 10 00 80 00
  23+ E2BC 00 00 00 B9
  24+ E2C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$01,$00,$00,$20,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$04,$00,$00,$80,$00,$80,$00,$00,$00,$00,$B9
  24+ E2C4 00 01 00 01
  24+ E2C8 00 00 20 00
  24+ E2CC 01 00 00 01
  24+ E2D0 80 00 00 80
  24+ E2D4 00 04 00 00
  24+ E2D8 80 00 80 00
  24+ E2DC 00 00 00 B9
  25+ E2E0 BF F8 00 00      DB $BF,$F8,$00,$00,$00,$01,$00,$00,$00,$00,$1F,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$F8,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  25+ E2E4 00 01 00 00
  25+ E2E8 00 00 1F AA
  25+ E2EC AA AA AA AA
  25+ E2F0 55 55 55 55
  25+ E2F4 55 F8 00 00
  25+ E2F8 00 00 80 00
  25+ E2FC 00 00 00 A9
  26+ E300 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$08,$18,$80,$00,$00,$00,$60,$65
  26+ E304 00 01 00 00
  26+ E308 00 00 00 00
  26+ E30C 00 00 00 00
  26+ E310 00 00 00 00
  26+ E314 00 00 00 0E
  26+ E318 08 18 80 00
  26+ E31C 00 00 60 65
  27+ E320 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$62,$61
  27+ E324 00 01 00 00
  27+ E328 00 00 00 00
  27+ E32C 00 00 00 00
  27+ E330 00 00 00 00
  27+ E334 00 00 00 40
  27+ E338 08 01 80 00
  27+ E33C 00 00 62 61
  28+ E340 BC 66 00 00      DB $BC,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$00,$60,$80,$00,$00,$00,$66,$61
  28+ E344 00 01 00 00
  28+ E348 00 00 00 00
  28+ E34C 00 00 00 00
  28+ E350 00 00 00 00
  28+ E354 00 00 00 03
  28+ E358 00 60 80 00
  28+ E35C 00 00 66 61
  29+ E360 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  29+ E364 00 01 00 00
  29+ E368 00 00 00 00
  29+ E36C 00 0F FF FF
  29+ E370 FF FF F0 00
  29+ E374 00 00 00 00
  29+ E378 00 00 80 00
  29+ E37C 00 00 00 01
  30+ E380 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$06,$00,$20,$00,$40,$00,$A0,$01,$80,$05,$00,$02,$00,$04,$00,$60,$00,$00,$80,$00,$00,$00,$00,$B9
  30+ E384 00 01 00 00
  30+ E388 06 00 20 00
  30+ E38C 40 00 A0 01
  30+ E390 80 05 00 02
  30+ E394 00 04 00 60
  30+ E398 00 00 80 00
  30+ E39C 00 00 00 B9
  31+ E3A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$1A,$AA,$AA,$AA,$EA,$AA,$BA,$AA,$AB,$D5,$55,$5D,$55,$57,$55,$55,$55,$58,$00,$80,$00,$00,$00,$00,$85
  31+ E3A4 00 01 00 1A
  31+ E3A8 AA AA AA EA
  31+ E3AC AA BA AA AB
  31+ E3B0 D5 55 5D 55
  31+ E3B4 57 55 55 55
  31+ E3B8 58 00 80 00
  31+ E3BC 00 00 00 85
  32+ E3C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$C0,$00,$40,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$02,$00,$03,$00,$00,$80,$00,$00,$00,$00,$85
  32+ E3C4 00 01 00 00
  32+ E3C8 C0 00 40 00
  32+ E3CC 01 00 00 01
  32+ E3D0 80 00 00 80
  32+ E3D4 00 02 00 03
  32+ E3D8 00 00 80 00
  32+ E3DC 00 00 00 85
  33+ E3E0 9F FE 00 00      DB $9F,$FE,$00,$00,$00,$01,$00,$00,$00,$00,$00,$FC,$20,$00,$00,$01,$80,$00,$00,$04,$3F,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  33+ E3E4 00 01 00 00
  33+ E3E8 00 00 00 FC
  33+ E3EC 20 00 00 01
  33+ E3F0 80 00 00 04
  33+ E3F4 3F 00 00 00
  33+ E3F8 00 00 80 00
  33+ E3FC 00 00 00 A9
  34+ E400 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$08,$0C,$80,$00,$00,$00,$3C,$65
  34+ E404 00 01 00 00
  34+ E408 00 00 00 00
  34+ E40C 00 00 00 00
  34+ E410 00 00 00 00
  34+ E414 00 00 00 18
  34+ E418 08 0C 80 00
  34+ E41C 00 00 3C 65
  35+ E420 B2 7E 00 00      DB $B2,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$61
  35+ E424 00 01 00 00
  35+ E428 00 00 00 00
  35+ E42C 00 00 00 00
  35+ E430 00 00 00 00
  35+ E434 00 00 00 40
  35+ E438 08 01 80 00
  35+ E43C 00 00 7C 61
  36+ E440 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$80,$80,$00,$00,$00,$66,$61
  36+ E444 00 01 00 00
  36+ E448 00 00 00 00
  36+ E44C 00 00 00 00
  36+ E450 00 00 00 00
  36+ E454 00 00 00 00
  36+ E458 FF 80 80 00
  36+ E45C 00 00 66 61
  37+ E460 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$3F,$F0,$08,$01,$80,$10,$0F,$FC,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  37+ E464 00 01 00 00
  37+ E468 00 00 00 00
  37+ E46C 3F F0 08 01
  37+ E470 80 10 0F FC
  37+ E474 00 00 00 00
  37+ E478 00 00 80 00
  37+ E47C 00 00 00 01
  38+ E480 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$18,$00,$C0,$00,$80,$00,$18,$01,$80,$18,$00,$01,$00,$03,$00,$18,$00,$00,$80,$00,$00,$00,$00,$99
  38+ E484 00 01 00 00
  38+ E488 18 00 C0 00
  38+ E48C 80 00 18 01
  38+ E490 80 18 00 01
  38+ E494 00 03 00 18
  38+ E498 00 00 80 00
  38+ E49C 00 00 00 99
  39+ E4A0 BE 30 00 00      DB $BE,$30,$00,$00,$00,$01,$00,$10,$0C,$00,$00,$80,$00,$10,$00,$01,$80,$00,$08,$00,$01,$00,$00,$30,$08,$00,$80,$00,$00,$00,$00,$BD
  39+ E4A4 00 01 00 10
  39+ E4A8 0C 00 00 80
  39+ E4AC 00 10 00 01
  39+ E4B0 80 00 08 00
  39+ E4B4 01 00 00 30
  39+ E4B8 08 00 80 00
  39+ E4BC 00 00 00 BD
  40+ E4C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$30,$00,$80,$00,$02,$00,$00,$01,$80,$00,$00,$40,$00,$01,$00,$0C,$00,$00,$80,$00,$00,$00,$00,$BD
  40+ E4C4 00 01 00 00
  40+ E4C8 30 00 80 00
  40+ E4CC 02 00 00 01
  40+ E4D0 80 00 00 40
  40+ E4D4 00 01 00 0C
  40+ E4D8 00 00 80 00
  40+ E4DC 00 00 00 BD
  41+ E4E0 9F FE 00 00      DB $9F,$FE,$00,$00,$00,$01,$00,$00,$00,$00,$00,$03,$FC,$00,$00,$01,$80,$00,$00,$3F,$C0,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$BD
  41+ E4E4 00 01 00 00
  41+ E4E8 00 00 00 03
  41+ E4EC FC 00 00 01
  41+ E4F0 80 00 00 3F
  41+ E4F4 C0 00 00 00
  41+ E4F8 00 00 80 00
  41+ E4FC 00 00 00 BD
  42+ E500 B0 C3 80 01      DB $B0,$C3,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$30,$08,$06,$C0,$00,$80,$01,$06,$7D
  42+ E504 00 03 00 00
  42+ E508 00 00 00 00
  42+ E50C 00 00 00 00
  42+ E510 00 00 00 00
  42+ E514 00 00 00 30
  42+ E518 08 06 C0 00
  42+ E51C 80 01 06 7D
  43+ E520 B2 3C 00 00      DB $B2,$3C,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$00,$01,$C0,$00,$80,$01,$66,$65
  43+ E524 00 01 00 00
  43+ E528 00 00 00 00
  43+ E52C 00 00 00 00
  43+ E530 00 00 00 00
  43+ E534 00 00 00 40
  43+ E538 00 01 C0 00
  43+ E53C 80 01 66 65
  44+ E540 B0 66 80 01      DB $B0,$66,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$00,$80,$01,$66,$61
  44+ E544 00 03 00 00
  44+ E548 00 00 00 00
  44+ E54C 00 00 00 00
  44+ E550 00 00 00 00
  44+ E554 00 00 00 00
  44+ E558 00 00 C0 00
  44+ E55C 80 01 66 61
  45+ E560 B2 18 80 01      DB $B2,$18,$80,$01,$00,$03,$00,$00,$00,$00,$00,$1F,$C1,$AA,$AA,$AA,$55,$55,$57,$83,$F8,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  45+ E564 00 03 00 00
  45+ E568 00 00 00 1F
  45+ E56C C1 AA AA AA
  45+ E570 55 55 57 83
  45+ E574 F8 00 00 00
  45+ E578 00 00 80 00
  45+ E57C 00 00 00 01
  46+ E580 B0 18 80 01      DB $B0,$18,$80,$01,$00,$03,$00,$00,$60,$01,$00,$01,$00,$01,$04,$01,$80,$20,$80,$00,$80,$00,$80,$06,$00,$00,$80,$00,$00,$00,$00,$99
  46+ E584 00 03 00 00
  46+ E588 60 01 00 01
  46+ E58C 00 01 04 01
  46+ E590 80 20 80 00
  46+ E594 80 00 80 06
  46+ E598 00 00 80 00
  46+ E59C 00 00 00 99
  47+ E5A0 B2 30 80 01      DB $B2,$30,$80,$01,$00,$03,$00,$10,$18,$00,$01,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$80,$00,$18,$08,$00,$80,$00,$00,$00,$00,$A1
  47+ E5A4 00 03 00 10
  47+ E5A8 18 00 01 00
  47+ E5AC 00 20 00 01
  47+ E5B0 80 00 04 00
  47+ E5B4 00 80 00 18
  47+ E5B8 08 00 80 00
  47+ E5BC 00 00 00 A1
  48+ E5C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$0E,$AB,$AA,$AA,$AE,$AA,$AA,$AA,$55,$55,$55,$75,$55,$55,$D5,$70,$00,$00,$80,$00,$00,$00,$00,$85
  48+ E5C4 00 01 00 00
  48+ E5C8 0E AB AA AA
  48+ E5CC AE AA AA AA
  48+ E5D0 55 55 55 75
  48+ E5D4 55 55 D5 70
  48+ E5D8 00 00 80 00
  48+ E5DC 00 00 00 85
  49+ E5E0 BF F8 00 00      DB $BF,$F8,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$03,$FF,$F0,$01,$80,$0F,$FF,$C0,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  49+ E5E4 00 01 00 00
  49+ E5E8 00 00 00 00
  49+ E5EC 03 FF F0 01
  49+ E5F0 80 0F FF C0
  49+ E5F4 00 00 00 00
  49+ E5F8 00 00 80 00
  49+ E5FC 00 00 00 89
  50+ E600 B0 C3 92 49      DB $B0,$C3,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$08,$02,$C9,$24,$92,$49,$3C,$61
  50+ E604 24 93 00 00
  50+ E608 00 00 00 00
  50+ E60C 00 00 00 00
  50+ E610 00 00 00 00
  50+ E614 00 00 00 20
  50+ E618 08 02 C9 24
  50+ E61C 92 49 3C 61
  51+ E620 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$02,$C9,$24,$92,$49,$66,$39
  51+ E624 00 01 00 00
  51+ E628 00 00 00 00
  51+ E62C 00 00 00 00
  51+ E630 00 00 00 00
  51+ E634 00 00 00 60
  51+ E638 08 02 C9 24
  51+ E63C 92 49 66 39
  52+ E640 B0 3C 92 49      DB $B0,$3C,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C9,$24,$92,$49,$7C,$7D
  52+ E644 24 93 00 00
  52+ E648 00 00 00 00
  52+ E64C 00 00 00 00
  52+ E650 00 00 00 00
  52+ E654 00 00 00 00
  52+ E658 00 00 C9 24
  52+ E65C 92 49 7C 7D
  53+ E660 9C 18 92 49      DB $9C,$18,$92,$49,$24,$93,$00,$00,$00,$00,$03,$E0,$02,$60,$10,$01,$80,$08,$06,$40,$07,$E0,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  53+ E664 24 93 00 00
  53+ E668 00 00 03 E0
  53+ E66C 02 60 10 01
  53+ E670 80 08 06 40
  53+ E674 07 E0 00 00
  53+ E678 00 00 80 00
  53+ E67C 00 00 00 01
  54+ E680 BE 18 92 49      DB $BE,$18,$92,$49,$24,$93,$00,$01,$AA,$AE,$AA,$AA,$AA,$AA,$AB,$AA,$55,$D5,$55,$55,$55,$55,$75,$55,$80,$00,$80,$00,$00,$00,$00,$99
  54+ E684 24 93 00 01
  54+ E688 AA AE AA AA
  54+ E68C AA AA AB AA
  54+ E690 55 D5 55 55
  54+ E694 55 55 75 55
  54+ E698 80 00 80 00
  54+ E69C 00 00 00 99
  55+ E6A0 B2 3E 92 49      DB $B2,$3E,$92,$49,$24,$93,$00,$10,$60,$00,$02,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$40,$00,$06,$08,$00,$80,$00,$00,$00,$00,$BD
  55+ E6A4 24 93 00 10
  55+ E6A8 60 00 02 00
  55+ E6AC 00 20 00 01
  55+ E6B0 80 00 04 00
  55+ E6B4 00 40 00 06
  55+ E6B8 08 00 80 00
  55+ E6BC 00 00 00 BD
  56+ E6C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$03,$02,$00,$00,$04,$00,$00,$01,$80,$00,$00,$20,$00,$00,$00,$C0,$00,$00,$80,$00,$00,$00,$00,$B9
  56+ E6C4 00 01 00 00
  56+ E6C8 03 02 00 00
  56+ E6CC 04 00 00 01
  56+ E6D0 80 00 00 20
  56+ E6D4 00 00 00 C0
  56+ E6D8 00 00 80 00
  56+ E6DC 00 00 00 B9
  57+ E6E0 B8 00 00 00      DB $B8,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  57+ E6E4 00 01 00 00
  57+ E6E8 00 00 00 00
  57+ E6EC 00 00 0F FF
  57+ E6F0 FF F0 00 00
  57+ E6F4 00 00 00 00
  57+ E6F8 00 00 80 00
  57+ E6FC 00 00 00 89
  58+ E700 80 C3 FF FF      DB $80,$C3,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$03,$FF,$FF,$FF,$FF,$00,$61
  58+ E704 FF FF 00 00
  58+ E708 00 00 00 00
  58+ E70C 00 00 00 00
  58+ E710 00 00 00 00
  58+ E714 00 00 00 60
  58+ E718 08 03 FF FF
  58+ E71C FF FF 00 61
  59+ E720 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$00,$02,$FF,$FF,$FF,$FF,$00,$01
  59+ E724 FF FF 00 00
  59+ E728 00 00 00 00
  59+ E72C 00 00 00 00
  59+ E730 00 00 00 00
  59+ E734 00 00 00 20
  59+ E738 00 02 FF FF
  59+ E73C FF FF 00 01
  60+ E740 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$00,$01
  60+ E744 FF FF 00 00
  60+ E748 00 00 00 00
  60+ E74C 00 00 00 00
  60+ E750 00 00 00 00
  60+ E754 00 00 00 00
  60+ E758 00 00 FF FF
  60+ E75C FF FF 00 01
  61+ E760 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$7D,$8A,$AE,$BA,$AA,$AA,$55,$55,$5D,$75,$51,$BE,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  61+ E764 FF FF 00 00
  61+ E768 00 00 7D 8A
  61+ E76C AE BA AA AA
  61+ E770 55 55 5D 75
  61+ E774 51 BE 00 00
  61+ E778 00 00 80 00
  61+ E77C 00 00 00 01
  62+ E780 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$03,$00,$08,$00,$04,$00,$02,$00,$81,$81,$00,$40,$00,$20,$00,$10,$00,$C0,$00,$FF,$FF,$FF,$FF,$FF,$FF
  62+ E784 FF FF 00 03
  62+ E788 00 08 00 04
  62+ E78C 00 02 00 81
  62+ E790 81 00 40 00
  62+ E794 20 00 10 00
  62+ E798 C0 00 FF FF
  62+ E79C FF FF FF FF
  63+ E7A0 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$08,$C0,$00,$04,$00,$00,$40,$00,$01,$80,$00,$02,$00,$00,$20,$00,$03,$10,$00,$FF,$FF,$FF,$FF,$FF,$FF
  63+ E7A4 FF FF 00 08
  63+ E7A8 C0 00 04 00
  63+ E7AC 00 40 00 01
  63+ E7B0 80 00 02 00
  63+ E7B4 00 20 00 03
  63+ E7B8 10 00 FF FF
  63+ E7BC FF FF FF FF
  64+ E7C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$E4,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$27,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  64+ E7C4 00 01 00 00
  64+ E7C8 00 E4 00 00
  64+ E7CC 08 00 00 01
  64+ E7D0 80 00 00 10
  64+ E7D4 00 00 27 00
  64+ E7D8 00 00 FF FF
  64+ E7DC FF FF FF FF
  65+ E7E0 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  65+ E7E4 FF FF 00 00
  65+ E7E8 00 00 00 00
  65+ E7EC 00 00 00 00
  65+ E7F0 00 00 00 00
  65+ E7F4 00 00 00 00
  65+ E7F8 00 00 FF FF
  65+ E7FC FF FF FF FF
  66+ E800              ConsoleAttributes:
  67+ E800 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  67+ E804 07 07 00 00
  67+ E808 00 00 00 00
  67+ E80C 00 00 00 00
  67+ E810 00 00 00 00
  67+ E814 00 00 00 41
  67+ E818 41 41 07 07
  67+ E81C 07 07 07 07
  68+ E820 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$41,$01,$07,$07,$07,$07,$07,$07
  68+ E824 07 07 00 00
  68+ E828 00 00 00 00
  68+ E82C 00 00 00 00
  68+ E830 00 00 00 00
  68+ E834 00 00 00 01
  68+ E838 41 01 07 07
  68+ E83C 07 07 07 07
  69+ E840 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  69+ E844 07 07 00 00
  69+ E848 00 00 00 00
  69+ E84C 00 00 00 00
  69+ E850 00 00 00 00
  69+ E854 00 00 00 41
  69+ E858 41 41 07 07
  69+ E85C 07 07 07 07
  70+ E860 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$00,$00,$00,$00,$07,$00,$00,$00,$00,$07
  70+ E864 07 07 00 00
  70+ E868 00 00 42 42
  70+ E86C 42 42 42 42
  70+ E870 42 42 42 42
  70+ E874 42 42 00 00
  70+ E878 00 00 07 00
  70+ E87C 00 00 00 07
  71+ E880 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$02,$00,$07,$07,$07,$07,$07,$07
  71+ E884 07 07 00 02
  71+ E888 42 42 42 42
  71+ E88C 42 42 42 42
  71+ E890 42 42 42 42
  71+ E894 42 42 42 42
  71+ E898 02 00 07 07
  71+ E89C 07 07 07 07
  72+ E8A0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  72+ E8A4 07 07 00 02
  72+ E8A8 02 02 02 02
  72+ E8AC 02 02 02 02
  72+ E8B0 02 02 02 02
  72+ E8B4 02 02 02 02
  72+ E8B8 02 00 07 07
  72+ E8BC 07 07 07 07
  73+ E8C0 07 00 00 00      DB $07,$00,$00,$00,$00,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  73+ E8C4 00 07 00 02
  73+ E8C8 02 02 02 02
  73+ E8CC 02 02 02 02
  73+ E8D0 02 02 02 02
  73+ E8D4 02 02 02 02
  73+ E8D8 02 00 07 07
  73+ E8DC 07 07 07 07
  74+ E8E0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$07,$07,$07,$07,$07,$07
  74+ E8E4 07 07 00 00
  74+ E8E8 00 02 02 02
  74+ E8EC 02 02 02 02
  74+ E8F0 02 02 02 02
  74+ E8F4 02 02 02 00
  74+ E8F8 00 00 07 07
  74+ E8FC 07 07 07 07
  75+ E900
# file closed: ./Images/ConsoleImageData.asm
1185  E900              ; Bank 62  ------------------------------------------------------------------------------------------------------------------------
1186  E900                  SLOT    ViewFrontAddr
1187  E900                  PAGE    BankFrontView
1188  E900                  ORG     ViewFrontAddr
1189  C000                  INCLUDE "./Views/Front_View.asm"
# file opened: ./Views/Front_View.asm
   1+ C000 46 72 6F 6E  front_page_page_marker  DB "FrontView   PG62"
   1+ C004 74 56 69 65
   1+ C008 77 20 20 20
   1+ C00C 50 47 36 32
   2+ C010
   3+ C010 47           draw_front_calc_alpha:  ld      b,a
   4+ C011 E6 80                                and     $80
   5+ C013 32 72 92                             ld      (ALP2),a                            ; set sign
   6+ C016 4F                                   ld      c,a                                 ; save sign
   7+ C017 EE 80                                xor     $80
   8+ C019 32 73 92                             ld      (ALP2FLIP),a                        ; and oppsite sign
   9+ C01C 3A 6E 92                             ld      a,(JSTX)
  10+ C01F ED 27 80                             test    $80
  11+ C022 28 02                                jr      z,  .PositiveRoll
  12+ C024 ED 44        .NegativeRoll:          neg
  13+ C026 CB 3F        .PositiveRoll           srl     a                                   ; divide sign by 4
  14+ C028 CB 3F                                srl     a
  15+ C02A FE 08                                cp      8
  16+ C02C 38 02                                jr      c,.NotIncreasedDamp                 ; if a < 8 divide by 2 again
  17+ C02E CB 3F        .IncreasedDamp          srl     a
  18+ C030 32 71 92     .NotIncreasedDamp:      ld      (ALP1),a
  19+ C033 B1                                   or      c
  20+ C034 32 70 92                             ld      (ALPHA),a                           ; a = signed bit alph1
  21+ C037 21 70 C2     .RestartDampenRoll:     ld      hl,dampenRcounter
  22+ C03A 36 04                                ld      (hl),dampenRate
  23+ C03C C9                                   ret
  24+ C03D
  25+ C03D              ; Do the same for pitch
  26+ C03D 47           draw_front_calc_beta:   ld      b,a
  27+ C03E E6 80                                and     $80
  28+ C040 32 62 92                             ld      (BET2),a                            ; set sign
  29+ C043 4F                                   ld      c,a                                 ; save sign
  30+ C044 EE 80                                xor     $80
  31+ C046 32 63 92                             ld      (BET2FLIP),a                        ; and oppsite sign
  32+ C049 3A 60 92                             ld      a,(JSTY)
  33+ C04C ED 27 80                             test    $80
  34+ C04F 28 02                                jr      z,  .PositivePitch
  35+ C051 ED 44        .NegativePitch:         neg
  36+ C053 CB 3F        .PositivePitch:         srl     a                                   ; divide sign by 4
  37+ C055 CB 3F                                srl     a
  38+ C057 FE 08                                cp      8
  39+ C059 38 02                                jr      c,.NotIncreasedDamp                 ; if a < 8 divide by 2 again
  40+ C05B CB 3F        .IncreasedDamp          srl     a
  41+ C05D 32 61 92     .NotIncreasedDamp:      ld      (BET1),a
  42+ C060 B1                                   or      c
  43+ C061 32 5F 92                             ld      (BETA),a                            ; a = signed bit bet1
  44+ C064 21 71 C2     .RestartDampenPitch:    ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
  45+ C067 36 04                                ld      (hl),dampenRate
  46+ C069 C9                                   ret
  47+ C06A
  48+ C06A              draw_front_view:        MMUSelectLayer1
  48+ C06A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  49+ C06E CD 80 E0                             call    l1_cls
  50+ C071 CD 9A E0                             call    l1_attr_cls
  51+ C074                                      MMUSelectLayer2
  51+ C074 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  52+ C078 CD 02 E0                             call     asm_l2_double_buffer_on
  53+ C07B                                      MMUSelectSpriteBank
  53+ C07B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  54+ C07F CD 6E E4                             call    sprite_cls_cursors
  55+ C082 CD DB E0                             call    sprite_reticule
  56+ C085 CD 3E E1                             call    sprite_laser
  57+ C088                                      MMUSelectConsoleBank
  57+ C088 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
  58+ C08C 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
  59+ C08F 11 00 E0                             ld          de,ConsoleImageData
  60+ C092 01 00 08                             ld          bc, ScreenL1BottomLen
  61+ C095 CD 3D 8F                             call        memcopy_dma
  62+ C098 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
  63+ C09B 11 00 E8                             ld          de,ConsoleAttributes
  64+ C09E 01 00 01                             ld          bc, ScreenL1AttrBtmLen
  65+ C0A1 CD 3D 8F                             call        memcopy_dma
  66+ C0A4 CD F8 8C                             call        InitialiseStars
  67+ C0A7 AF                                   xor         a
  68+ C0A8 32 C5 92                             ld          (DockedFlag),a              ; we can never be docked if we hit a view screen
  69+ C0AB C9                                   ret
  70+ C0AC
  71+ C0AC
  72+ C0AC
  73+ C0AC
  74+ C0AC                                      ;  1......................  2......................  3......................  4......................  5......................  6...................... 7......................  8......................
  75+ C0AC                                      ;  1......................  2......................  3......................  4......................  5......................  6...................... 7......................  8......................
  76+ C0AC 80 40 60 28  LightningLines:         db 128, 064, 096, 040, 255, 097, 042, 076, 035, 031, 082, 039, 079, 020, 026, 079, 026, 058, 018, 022, 064, 021, 032, 026, 018, 038, 025, 030, 009, 026, 035, 020, 005, 016, 018, 037, 021, 000, 000, 018
  76+ C0B0 FF 61 2A 4C
  76+ C0B4 23 1F 52 27
  76+ C0B8 4F 14 1A 4F
  76+ C0BC 1A 3A 12 16
  76+ C0C0 40 15 20 1A
  76+ C0C4 12 26 19 1E
  76+ C0C8 09 1A 23 14
  76+ C0CC 05 10 12 25
  76+ C0D0 15 00 00 12
  77+ C0D4 80 40 8B 28                          db 128, 064, 139, 040, 255, 137, 045, 160, 035, 031, 150, 040, 157, 056, 026, 160, 036, 175, 010, 022, 156, 037, 196, 040, 018, 197, 041, 223, 033, 026, 223, 033, 245, 030, 018, 223, 032, 254, 047, 018
  77+ C0D8 FF 89 2D A0
  77+ C0DC 23 1F 96 28
  77+ C0E0 9D 38 1A A0
  77+ C0E4 24 AF 0A 16
  77+ C0E8 9C 25 C4 28
  77+ C0EC 12 C5 29 DF
  77+ C0F0 21 1A DF 21
  77+ C0F4 F5 1E 12 DF
  77+ C0F8 20 FE 2F 12
  78+ C0FC 80 40 5A 59                          db 128, 064, 090, 089, 255, 089, 089, 064, 098, 031, 079, 092, 064, 072, 025, 065, 075, 030, 070, 022, 035, 071, 038, 064, 018, 067, 095, 021, 099, 026, 031, 097, 000, 080, 018, 031, 097, 021, 110, 018
  78+ C100 FF 59 59 40
  78+ C104 62 1F 4F 5C
  78+ C108 40 48 19 41
  78+ C10C 4B 1E 46 16
  78+ C110 23 47 26 40
  78+ C114 12 43 5F 15
  78+ C118 63 1A 1F 61
  78+ C11C 00 50 12 1F
  78+ C120 61 15 6E 12
  79+ C124 80 40 61 71                          db 128, 064, 097, 113, 255, 098, 110, 064, 115, 031, 070, 115, 073, 127, 025, 071, 114, 060, 112, 022, 030, 120, 020, 126, 018, 070, 114, 050, 120, 026, 050, 120, 027, 119, 018, 020, 125, 010, 120, 018
  79+ C128 FF 62 6E 40
  79+ C12C 73 1F 46 73
  79+ C130 49 7F 19 47
  79+ C134 72 3C 70 16
  79+ C138 1E 78 14 7E
  79+ C13C 12 46 72 32
  79+ C140 78 1A 32 78
  79+ C144 1B 77 12 14
  79+ C148 7D 0A 78 12
  80+ C14C 80 40 84 59                          db 128, 064, 132, 089, 255, 131, 081, 145, 098, 031, 145, 097, 133, 103, 025, 145, 098, 150, 110, 022, 150, 109, 154, 105, 018, 150, 110, 146, 120, 026, 145, 120, 140, 126, 018, 147, 120, 159, 126, 018
  80+ C150 FF 83 51 91
  80+ C154 62 1F 91 61
  80+ C158 85 67 19 91
  80+ C15C 62 96 6E 16
  80+ C160 96 6D 9A 69
  80+ C164 12 96 6E 92
  80+ C168 78 1A 91 78
  80+ C16C 8C 7E 12 93
  80+ C170 78 9F 7E 12
  81+ C174 80 40 9F 67                          db 128, 064, 159, 103, 255, 161, 102, 171, 108, 031, 160, 102, 175, 127, 025, 175, 124, 200, 122, 022, 200, 121, 223, 120, 018, 224, 120, 225, 127, 026, 224, 119, 245, 116, 018, 246, 117, 254, 123, 018
  81+ C178 FF A1 66 AB
  81+ C17C 6C 1F A0 66
  81+ C180 AF 7F 19 AF
  81+ C184 7C C8 7A 16
  81+ C188 C8 79 DF 78
  81+ C18C 12 E0 78 E1
  81+ C190 7F 1A E0 77
  81+ C194 F5 74 12 F6
  81+ C198 75 FE 7B 12
  82+ C19C 80 40 91 4A                          db 128, 064, 145, 074, 255, 145, 073, 158, 072, 031, 159, 072, 179, 064, 025, 159, 073, 185, 085, 022, 182, 084, 197, 076, 018, 195, 075, 207, 079, 026, 206, 079, 245, 063, 018, 206, 080, 245, 105, 018
  82+ C1A0 FF 91 49 9E
  82+ C1A4 48 1F 9F 48
  82+ C1A8 B3 40 19 9F
  82+ C1AC 49 B9 55 16
  82+ C1B0 B6 54 C5 4C
  82+ C1B4 12 C3 4B CF
  82+ C1B8 4F 1A CE 4F
  82+ C1BC F5 3F 12 CE
  82+ C1C0 50 F5 69 12
  83+ C1C4
  84+ C1C4              ; Draw line at hl for b lines
  85+ C1C4 E5 C5        DrawLighningLine:       push    hl,,bc
  86+ C1C6 4E                                   ld      c,(hl)
  87+ C1C7 23                                   inc     hl
  88+ C1C8 46                                   ld      b,(hl)
  89+ C1C9 23                                   inc     hl
  90+ C1CA 5E                                   ld      e,(hl)
  91+ C1CB 23                                   inc     hl
  92+ C1CC 56                                   ld      d,(hl)
  93+ C1CD 23                                   inc     hl
  94+ C1CE 7E                                   ld      a,(hl)          ; colour
  95+ C1CF CD 0B E6                             call    l2_draw_diagonal
  96+ C1D2 C1 E1                                pop     hl,,bc
  97+ C1D4 3E 05                                ld      a,5
  98+ C1D6 ED 31                                add     hl,a
  99+ C1D8 10 EA                                djnz    DrawLighningLine
 100+ C1DA C9                                   ret
 101+ C1DB
 102+ C1DB              ;Loop though all lines
 103+ C1DB              ;   60$% chance of drawing a line, call draw line
 104+ C1DB              ;   go to next line
 105+ C1DB              ;repeat
 106+ C1DB 06 07        hyperspace_Lightning:   ld      b, 7                    ; total number of lightning bolts
 107+ C1DD 21 AC C0                             ld      hl,LightningLines
 108+ C1E0                                      MMUSelectLayer2
 108+ C1E0 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 109+ C1E4                                      ;break
 110+ C1E4              ; above here select which lines table we will use
 111+ C1E4 C5 E5        .LineLoop:              push    bc,,hl
 112+ C1E6 CD 4E 97                             call    doRandom
 113+ C1E9 FE 1E                                cp      30
 114+ C1EB 30 0C                                jr      nc,.NextLine
 115+ C1ED CD 4E 97                             call    doRandom
 116+ C1F0 E6 07                                and     $07
 117+ C1F2 3C                                   inc     a
 118+ C1F3 47                                   ld      b,a
 119+ C1F4 E1                                   pop     hl
 120+ C1F5 E5                                   push    hl
 121+ C1F6 CD C4 C1                             call    DrawLighningLine
 122+ C1F9 E1 C1        .NextLine:              pop     bc,,hl
 123+ C1FB 16 08                                ld      d,8
 124+ C1FD 1E 05                                ld      e,5
 125+ C1FF ED 30                                mul
 126+ C201 19                                   add     hl,de
 127+ C202 10 E0                                djnz    .LineLoop
 128+ C204 3A 6A 92                             ld      a,(HyperCircle)
 129+ C207 57                                   ld      d,a
 130+ C208 01 80 40                             ld      bc, $4080
 131+ C20B                                      ;break
 132+ C20B 1E 00                                ld      e,$00
 133+ C20D CD 11 E8                             call    l2_draw_circle_fill; ; ">l2_draw_circle_fill BC = center row col, d = radius, e = colour"
 134+ C210 01 80 40                             ld      bc, $4080
 135+ C213 3A 6A 92                             ld      a,(HyperCircle)
 136+ C216 3C                                   inc     a
 137+ C217 57                                   ld      d,a
 138+ C218 1E FF                                ld      e,$FF
 139+ C21A CD 58 E7                             call    l2_draw_circle
 140+ C21D 3A 6A 92                             ld      a,(HyperCircle)
 141+ C220 3C                                   inc     a
 142+ C221 3C                                   inc     a
 143+ C222 FE 40                                cp      64
 144+ C224 D0                                   ret     nc
 145+ C225 32 6A 92                             ld      (HyperCircle),a
 146+ C228                                      SetCarryFlag
 146+ C228 37          >                    scf
 147+ C229 C9                                   ret
 148+ C22A
 149+ C22A
 150+ C22A              draw_hyperspace:        MMUSelectLayer1
 150+ C22A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 151+ C22E CD 80 E0                             call    l1_cls
 152+ C231 CD 9A E0                             call    l1_attr_cls
 153+ C234                                      MMUSelectLayer2
 153+ C234 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 154+ C238 CD 02 E0                             call     asm_l2_double_buffer_on
 155+ C23B                                      MMUSelectSpriteBank
 155+ C23B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 156+ C23F CD 6E E4                             call    sprite_cls_cursors
 157+ C242                                      MMUSelectConsoleBank
 157+ C242 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
 158+ C246 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
 159+ C249 11 00 E0                             ld          de,ConsoleImageData
 160+ C24C 01 00 08                             ld          bc, ScreenL1BottomLen
 161+ C24F CD 3D 8F                             call        memcopy_dma
 162+ C252 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
 163+ C255 11 00 E8                             ld          de,ConsoleAttributes
 164+ C258 01 00 01                             ld          bc, ScreenL1AttrBtmLen
 165+ C25B CD 3D 8F                             call        memcopy_dma
 166+ C25E CD 07 8D                             call        InitialiseHyperStars
 167+ C261 AF                                   xor         a
 168+ C262 32 C5 92                             ld          (DockedFlag),a              ; we can never be docked if we hit a view screen
 169+ C265 3E 02                                ld          a,2
 170+ C267 32 6A 92                             ld          (HyperCircle),a
 171+ C26A 3E FC                                ld          a,$FC
 172+ C26C 32 C5 92                             ld          (DockedFlag),a
 173+ C26F C9                                   ret
 174+ C270
 175+ C270
 176+ C270              loop_hyperspace
 177+ C270
 178+ C270              dampenRate:             equ     $04
 179+ C270 04           dampenRcounter:         DB      dampenRate
 180+ C271 04           dampenPcounter:         DB      dampenRate
 181+ C272 AF           input_front_view:       xor         a
 182+ C273 2A A2 8F                             ld      hl,(addr_Pressed_Accellerate)
 183+ C276 7E                                   ld      a,(hl)
 184+ C277                                      IfAIsZeroGoto     TestDecellerate
 184+ C277 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 184+ C278 CA 94 C2    >				jp	z, TestDecellerate
 185+ C27B 3A AF 92                             ld      a,(SHIPMAXSPEED)
 186+ C27E 57                                   ld      d,a
 187+ C27F 3A B0 92                             ld      a,(DELTA)
 188+ C282                                      JumpIfAGTENusng d,TestDecellerate
 188+ C282 BA          >                        cp     d
 188+ C283 D2 94 C2    >                        jp		nc,TestDecellerate
 189+ C286 3C                                   inc     a
 190+ C287 32 B0 92                             ld      (DELTA),a
 191+ C28A 2A B1 92                             ld      hl,(DELT4Lo)
 192+ C28D ED 34 04 00                          add     hl,4
 193+ C291 22 B1 92                             ld      (DELT4Lo),hl
 194+ C294 2A A4 8F     TestDecellerate:        ld      hl,(addr_Pressed_Decellerate)
 195+ C297 7E                                   ld      a,(hl)
 196+ C298                                      IfAIsZeroGoto   TestLeftPressed
 196+ C298 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 196+ C299 CA B1 C2    >				jp	z, TestLeftPressed
 197+ C29C 3A B0 92                             ld      a,(DELTA)
 198+ C29F                                      IfAIsZeroGoto   TestLeftPressed
 198+ C29F A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 198+ C2A0 CA B1 C2    >				jp	z, TestLeftPressed
 199+ C2A3 3D                                   dec     a
 200+ C2A4 32 B0 92                             ld      (DELTA),a
 201+ C2A7 2A B1 92                             ld      hl,(DELT4Lo)
 202+ C2AA 2B                                   dec     hl
 203+ C2AB 2B                                   dec     hl
 204+ C2AC 2B                                   dec     hl
 205+ C2AD 2B                                   dec     hl
 206+ C2AE 22 B1 92                             ld      (DELT4Lo),hl
 207+ C2B1 2A 9A 8F     TestLeftPressed:        ld      hl,(addr_Pressed_RollLeft)
 208+ C2B4 7E                                   ld      a,(hl)
 209+ C2B5                                      IfAIsZeroGoto   TestRightPressed
 209+ C2B5 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 209+ C2B6 CA CC C2    >				jp	z, TestRightPressed
 210+ C2B9 3A 6E 92                             ld      a,(JSTX)                            ; have we maxed out Joystick?
 211+ C2BC 21 75 92                             ld      hl,ALP1MAXL                         ; currnet ship max left roll
 212+ C2BF BE                                   cp      (hl)
 213+ C2C0 28 0A                                jr      z,TestRightPressed
 214+ C2C2                                      ;break
 215+ C2C2 3D                                   dec     a                                   ; increase joystick roll
 216+ C2C3 32 6E 92                             ld      (JSTX),a
 217+ C2C6 CD 10 C0                             call    draw_front_calc_alpha
 218+ C2C9 C3 01 C3                             jp      TestDivePressed                    ; when pressing ignore damper
 219+ C2CC 2A 9C 8F     TestRightPressed:       ld      hl,(addr_Pressed_RollRight)
 220+ C2CF 7E                                   ld      a,(hl)
 221+ C2D0                                      IfAIsZeroGoto   .DampenRoll
 221+ C2D0 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 221+ C2D1 CA E7 C2    >				jp	z, .DampenRoll
 222+ C2D4 3A 6E 92                             ld      a,(JSTX)                            ; have we maxed out Joystick?
 223+ C2D7 21 74 92                             ld      hl,ALP1MAXR                         ; currnet ship max left roll
 224+ C2DA BE                                   cp      (hl)
 225+ C2DB 28 24                                jr      z,TestDivePressed                   ; if its held then we don't dampen
 226+ C2DD                                      ;break
 227+ C2DD 3C                                   inc     a                                   ; increase joystick roll
 228+ C2DE 32 6E 92     .UpdateAlphRoll:        ld      (JSTX),a
 229+ C2E1 CD 10 C0                             call    draw_front_calc_alpha
 230+ C2E4 C3 01 C3                             jp      TestDivePressed                    ; when pressing ignore damper
 231+ C2E7 21 70 C2     .DampenRoll:            ld      hl,dampenRcounter
 232+ C2EA 35                                   dec     (hl)
 233+ C2EB 20 14                                jr      nz,TestDivePressed
 234+ C2ED 3E 04                                ld      a,dampenRate
 235+ C2EF 77                                   ld      (hl),a
 236+ C2F0 3A 6E 92                             ld      a,(JSTX)
 237+ C2F3 FE 00                                cp      0
 238+ C2F5 28 0A                                jr      z, TestDivePressed
 239+ C2F7 CB 7F                                bit     7,a
 240+ C2F9 28 03                                jr      z,.PosRollDampen
 241+ C2FB 3C           .NegRollDampen:         inc     a
 242+ C2FC 18 01                                jr      .ApplyRollDampen
 243+ C2FE 3D           .PosRollDampen:         dec     a
 244+ C2FF 18 DD        .ApplyRollDampen:       jr      .UpdateAlphRoll
 245+ C301              ; Dive and Climb input
 246+ C301 2A 9E 8F     TestDivePressed:        ld      hl,(addr_Pressed_Dive)
 247+ C304 7E                                   ld      a,(hl)
 248+ C305                                      IfAIsZeroGoto   TestClimbPressed
 248+ C305 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 248+ C306 CA 1C C3    >				jp	z, TestClimbPressed
 249+ C309 3A 60 92                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 250+ C30C 21 65 92                             ld      hl,BET1MAXD                         ; currnet ship max left roll
 251+ C30F BE                                   cp      (hl)
 252+ C310 28 0A                                jr      z,TestClimbPressed
 253+ C312                                      ;break
 254+ C312 3D                                   dec     a                                   ; increase joystick roll
 255+ C313 32 60 92                             ld      (JSTY),a
 256+ C316 CD 3D C0                             call    draw_front_calc_beta
 257+ C319 C3 51 C3                             jp      ForwardCursorKeysDone
 258+ C31C 2A A0 8F     TestClimbPressed:       ld      hl,(addr_Pressed_Climb)
 259+ C31F 7E                                   ld      a,(hl)
 260+ C320                                      IfAIsZeroGoto   .DampenPitch
 260+ C320 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 260+ C321 CA 37 C3    >				jp	z, .DampenPitch
 261+ C324 3A 60 92                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 262+ C327 21 64 92                             ld      hl,BET1MAXC                         ; currnet ship max left roll
 263+ C32A BE                                   cp      (hl)
 264+ C32B 28 24                                jr      z,ForwardCursorKeysDone
 265+ C32D 3C                                   inc     a                                   ; increase joystick roll
 266+ C32E 32 60 92     .UpdateBetaPitch:       ld      (JSTY),a
 267+ C331 CD 3D C0                             call    draw_front_calc_beta
 268+ C334 C3 51 C3                             jp      ForwardCursorKeysDone
 269+ C337 21 71 C2     .DampenPitch:           ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
 270+ C33A 35                                   dec     (hl)
 271+ C33B 20 14                                jr      nz,ForwardCursorKeysDone
 272+ C33D 3E 04                                ld      a,dampenRate
 273+ C33F 77                                   ld      (hl),a
 274+ C340 3A 60 92                             ld      a,(JSTY)
 275+ C343 FE 00                                cp      0
 276+ C345 28 0A                                jr      z,ForwardCursorKeysDone
 277+ C347 CB 7F                                bit     7,a
 278+ C349 28 03                                jr      z,.PosPitchDampen
 279+ C34B 3C           .NegPitchDampen:        inc     a
 280+ C34C 18 01                                jr      .ApplyPitchDampen
 281+ C34E 3D           .PosPitchDampen:        dec     a
 282+ C34F 18 DD        .ApplyPitchDampen:      jr      .UpdateBetaPitch
 283+ C351              ; Now test hyperpsace. We can't be docked as this is a view routine piece of logic but for say local charts we may
 284+ C351              ; be in flight and they have to force a forward view when hyperspace is pressed
 285+ C351              ; We won't do galatic here, but for other views force to forward view
 286+ C351 3E 24        ForwardCursorKeysDone:  ld      a,c_Pressed_Hyperspace
 287+ C353 CD 9D 90                             call    is_key_pressed
 288+ C356 20 48                                jr      nz,.NotHyperspace
 289+ C358              ; If we are in hyperspace countdown then test for hyperspace
 290+ C358 2A 68 92                             ld      hl,(InnerHyperCount)                ; if hyperspace was enaged then cancel
 291+ C35B 7C                                   ld      a,h                                 ; hyperspace
 292+ C35C B5                                   or      l                                   ; .
 293+ C35D 20 41                                jr      nz,.CancelHyperspace                ; .
 294+ C35F              ; check selected target if we finf one then after gettting galaxy at bc a=0 if not found
 295+ C35F ED 5B CB 93                          ld      de,(PresentSystemX)
 296+ C363 2A CD 93                             ld      hl,(TargetPlanetX)
 297+ C366 CD 9D A5                             call    compare16HLDE
 298+ C369 28 35                                jr      z,.NoTargetSelected                 ; can't jump to current system
 299+ C36B 3A B8 93                             ld      a,(Galaxy)
 300+ C36E                                      MMUSelectGalaxyA
 300+ C36E ED 92 57    >                     nextreg GalaxyDataMMU,       a
 301+ C371 ED 4B CD 93                          ld      bc,(TargetPlanetX)
 302+ C375 CD B7 FA                             call    galaxy_name_at_bc
 303+ C378 FE 00                                cp      0
 304+ C37A 28 24                                jr      z,.NotHyperspace
 305+ C37C              ; check fuel is sufficient
 306+ C37C ED 4B CB 93                          ld      bc,(PresentSystemX)
 307+ C380 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 308+ C384 ED 4B CD 93                          ld      bc,(TargetPlanetX)
 309+ C388 ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 310+ C38C CD E8 FB                             call    galaxy_find_distance            ; get distance into HL
 311+ C38F 7C                                   ld      a,h
 312+ C390 A7                                   and     a
 313+ C391 20 0D                                jr      nz,.InsufficientFuel            ; max jump capacity is 25 ly for any ship
 314+ C393 3A F7 96                             ld      a,(Fuel)
 315+ C396                                      JumpIfALTNusng    l, .InsufficientFuel
 315+ C396 BD          >                        cp      l
 315+ C397 DA A0 C3    >                        jp		c, .InsufficientFuel
 316+ C39A              ; set up timer countdown
 317+ C39A 21 0B 0B                             ld      hl,HyperSpaceTimers                 ; set both timers to 15
 318+ C39D 22 68 92                             ld      (InnerHyperCount),hl                ; .
 319+ C3A0              .CancelHyperspace
 320+ C3A0              .NoTargetSelected
 321+ C3A0              .InsufficientFuel
 322+ C3A0              .NotHyperspace:
 323+ C3A0 C9                                   ret
 324+ C3A1
 325+ C3A1
 326+ C3A1
 327+ C3A1
 328+ C3A1
 329+ C3A1
 330+ C3A1
# file closed: ./Views/Front_View.asm
1190  C3A1              ; Bank 63  ------------------------------------------------------------------------------------------------------------------------
1191  C3A1                  SLOT    MenuStatusAddr
1192  C3A1                  PAGE    BankMenuStatus
1193  C3A1                  ORG     MenuStatusAddr
1194  C000                  INCLUDE "./Menus/status_menu.asm"
# file opened: ./Menus/status_menu.asm
   1+ C000 53 74 61 74  status_page_marker  DB "Status      PG63"
   1+ C004 75 73 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 36 33
   2+ C010
   3+ C010 40 02 0B AD  status_boiler_text		DW $0240,txt_commander
   4+ C014 90 02 71 93  						DW $0290,CommanderName
   5+ C018 08 0B 1F AD  						DW $0B08,txt_present_system
   6+ C01C 08 13 32 AD  						DW $1308,txt_hyperspace_system
   7+ C020 08 1B 45 AD  						DW $1B08,txt_condition
   8+ C024 08 23 53 AD  						DW $2308,txt_fuel
   9+ C028 08 2B 61 AD  						DW $2B08,txt_cash
  10+ C02C 08 33 6F AD  						DW $3308,txt_legal_status
  11+ C030 08 3B 7D AD  						DW $3B08,txt_rating
  12+ C034 08 4B 8B AD  						DW $4B08,txt_equipment
  13+ C038
  14+ C038 00 00        equipment_cursor		DW  $0000
  15+ C03A              present_position		equ	$0B98
  16+ C03A              hyperspace_position		equ	$1398
  17+ C03A              condition_position		equ	$1B70
  18+ C03A              fuel_position			equ	$2370
  19+ C03A              cash_position			equ	$2B70
  20+ C03A              legal_status_position	equ $3370
  21+ C03A              rank_position			equ $3B70
  22+ C03A              equipment_position		equ $5340
  23+ C03A              equipment_position2		equ $5378
  24+ C03A              equipmax_row			equ $FF
  25+ C03A
  26+ C03A 00           STAT_selected_row       DB 0
  27+ C03B 00           STAT_current_topItem    DB 0
  28+ C03C 00           STAT_current_end        DB 0
  29+ C03D              STAT_buffer_rows         EQU     128
  30+ C03D              STAT_buffer_row_len      EQU     24
  31+ C03D              STAT_eqip_window_len    EQU 10
  32+ C03D              STAT_display_buff_len    EQU     STAT_buffer_rows *   STAT_buffer_row_len
  33+ C03D 00 00 00...  STAT_display_buffer:     DS      STAT_display_buff_len                     ; maxium of 128 items can be coded for
  34+ CC3D              STAT_position			equ $5840
  35+ CC3D 00 00 00...  STAT_cash_amount    	DS 10
  36+ CC47 20 43 72 00  STAT_cash_UoM           DB " Cr",0
  37+ CC4B
  38+ CC4B 00 00 00...  stat_present_name       DS  30
  39+ CC69 00                                   DB  0
  40+ CC6A 00 00 00...  stat_target_name        DS  30
  41+ CC88 00                                   DB  0
  42+ CC89
  43+ CC89              stat_copy_to_name:
  44+ CC89 21 7E E8         ld      hl,GalaxyExpandedName
  45+ CC8C 01 1E 00         ld      bc,30
  46+ CC8F ED B0            ldir
  47+ CC91 C9               ret
  48+ CC92
  49+ CC92              STAT_print_boiler_text: INCLUDE "Menus/L2print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/L2print_boiler_text_inlineInclude.asm
   1++CC92
   2++CC92              ;">print_boilder_text hl = text structure, b = message count"
   3++CC92              .BoilerTextLoop:
   4++CC92 C5           	push		bc			; Save Message Count loop value
   5++CC93 4E           	ld			c,(hl)		; Get Row into b
   6++CC94 23           	inc			hl
   7++CC95 46           	ld			b,(hl)		; Get Col into b
   8++CC96 23           	inc			hl
   9++CC97 5E           	ld			e,(hl)		; Get text address Lo into E
  10++CC98 23           	inc			hl
  11++CC99 56           	ld			d,(hl)		; Get text address Hi into E
  12++CC9A 23           	inc			hl
  13++CC9B E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++CC9C EB           	ex			de,hl		; now hl = address of text data
  15++CC9D                  MMUSelectLayer2
  15++CC9D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  16++CCA1 1E FF            ld      e,txt_status_colour
  17++CCA3 CD 6F E1         call    l2_print_at
  18++CCA6 E1           	pop			hl
  19++CCA7 C1           	pop			bc
  20++CCA8 10 E8        	djnz		.BoilerTextLoop
  21++CCAA C9           	ret
  22++CCAB
# file closed: ./Menus/L2print_boiler_text_inlineInclude.asm
  50+ CCAB
  51+ CCAB              ;----------------------------------------------------------------------------------------------------------------------------------
  52+ CCAB DD 22 4F CD  STAT_DispDEIXtoIY:      ld (.STATclcn32z),ix
  53+ CCAF ED 53 51 CD                          ld (.STATclcn32zIX),de
  54+ CCB3 DD 21 4B CD                          ld ix,.STATclcn32t+36
  55+ CCB7 06 09                                ld b,9
  56+ CCB9 0E 00                                ld c,0
  57+ CCBB 3E 30        .STATclcn321:           ld a,'0'
  58+ CCBD B7                                   or a
  59+ CCBE DD 5E 00     .STATclcn322:           ld e,(ix+0)
  60+ CCC1 DD 56 01                             ld d,(ix+1)
  61+ CCC4 2A 4F CD                             ld hl,(.STATclcn32z)
  62+ CCC7 ED 52                                sbc hl,de
  63+ CCC9 22 4F CD                             ld (.STATclcn32z),hl
  64+ CCCC DD 5E 02                             ld e,(ix+2)
  65+ CCCF DD 56 03                             ld d,(ix+3)
  66+ CCD2 2A 51 CD                             ld hl,(.STATclcn32zIX)
  67+ CCD5 ED 52                                sbc hl,de
  68+ CCD7 22 51 CD                             ld (.STATclcn32zIX),hl
  69+ CCDA 38 04                                jr c,.STATclcn325
  70+ CCDC 0C                                   inc c
  71+ CCDD 3C                                   inc a
  72+ CCDE 18 DE                                jr .STATclcn322
  73+ CCE0 DD 5E 00     .STATclcn325:           ld e,(ix+0)
  74+ CCE3 DD 56 01                             ld d,(ix+1)
  75+ CCE6 2A 4F CD                             ld hl,(.STATclcn32z)
  76+ CCE9 19                                   add hl,de
  77+ CCEA 22 4F CD                             ld (.STATclcn32z),hl
  78+ CCED DD 5E 02                             ld e,(ix+2)
  79+ CCF0 DD 56 03                             ld d,(ix+3)
  80+ CCF3 2A 51 CD                             ld hl,(.STATclcn32zIX)
  81+ CCF6 ED 5A                                adc hl,de
  82+ CCF8 22 51 CD                             ld (.STATclcn32zIX),hl
  83+ CCFB 11 FC FF                             ld de,-4
  84+ CCFE DD 19                                add ix,de
  85+ CD00 0C                                   inc c
  86+ CD01 0D                                   dec c
  87+ CD02 28 05                                jr z,.STATclcn323
  88+ CD04 FD 77 00                             ld (iy+0),a
  89+ CD07 FD 23                                inc iy
  90+ CD09 10 B0        .STATclcn323:           djnz .STATclcn321
  91+ CD0B 3A 4F CD                             ld a,(.STATclcn32z)
  92+ CD0E C6 30                                add A,'0'
  93+ CD10 FD 77 00                             ld (iy+0),a
  94+ CD13 FD 36 02 00                          ld (iy+2),0
  95+ CD17 FD 7E 00                             ld      a,(IY+0)
  96+ CD1A FD 77 01                             ld      (IY+1),a
  97+ CD1D 3E 2E                                ld      a,"."
  98+ CD1F FD 77 00                             ld      (IY+0),a
  99+ CD22 FD 23                                inc     IY
 100+ CD24 FD 23                                inc     IY
 101+ CD26 C9                                   ret
 102+ CD27 01 00 00 00  .STATclcn32t            dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 102+ CD2B 0A 00 00 00
 102+ CD2F 64 00 00 00
 102+ CD33 E8 03 00 00
 102+ CD37 10 27 00 00
 103+ CD3B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 103+ CD3F 40 42 0F 00
 103+ CD43 80 96 98 00
 103+ CD47 00 E1 F5 05
 103+ CD4B 00 CA 9A 3B
 104+ CD4F 00 00        .STATclcn32z            ds 2
 105+ CD51 00 00        .STATclcn32zIX          ds 2
 106+ CD53              ;----------------------------------------------------------------------------------------------------------------------------------
 107+ CD53 2A F5 96     STAT_GetCash:           ld		hl,(Cash+2)
 108+ CD56 EB                                   ex      de,hl
 109+ CD57 DD 2A F3 96                          ld      ix,(Cash)
 110+ CD5B FD 21 3D CC                          ld		iy,STAT_cash_amount
 111+ CD5F CD AB CC                             call 	STAT_DispDEIXtoIY
 112+ CD62 FD E5                                push    iy
 113+ CD64 D1                                   pop     de
 114+ CD65 21 47 CC                             ld      hl,STAT_cash_UoM
 115+ CD68 01 04 00                             ld      bc,4
 116+ CD6B ED B0                                ldir
 117+ CD6D C9                                   ret
 118+ CD6E              ;----------------------------------------------------------------------------------------------------------------------------------
 119+ CD6E 7E           STAT_expand_word:       ld      a,(hl)
 120+ CD6F FE 00                                cp      0
 121+ CD71 C8                                   ret     z
 122+ CD72 12                                   ld      (de),a
 123+ CD73 23                                   inc     hl
 124+ CD74 13                                   inc     de
 125+ CD75 18 F7                                jr      STAT_expand_word
 126+ CD77
 127+ CD77              ; hl = list of words
 128+ CD77              ; de = adress to expand to
 129+ CD77 7E           STAT_expand_name:       ld      a,(hl)
 130+ CD78 47                                   ld      b,a
 131+ CD79 23                                   inc     hl
 132+ CD7A 7E                                   ld      a,(hl)              ; its a 16 bit
 133+ CD7B 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 134+ CD7C B0                                   or      b
 135+ CD7D 20 01                                jr      nz,.MoreToDo
 136+ CD7F              ;                        ld      (de),a we dont want the null marker now
 137+ CD7F C9                                   ret
 138+ CD80 E5 D5        .MoreToDo:              push    hl,,de
 139+ CD82 7E                                   ld      a,(hl)              ; bodge for now no optimise
 140+ CD83 5F                                   ld      e,a
 141+ CD84 23                                   inc     hl
 142+ CD85 7E                                   ld      a,(hl)
 143+ CD86 57                                   ld      d,a
 144+ CD87 EB                                   ex      hl,de               ; hl is now Word... address
 145+ CD88 D1                                   pop     de                  ; de back to pointer to buffer
 146+ CD89 CD 6E CD     .ProcessWord:           call    STAT_expand_word
 147+ CD8C 3E 20                                ld      a," "               ; speculative space
 148+ CD8E 12                                   ld      (de),a
 149+ CD8F 13                                   inc     de
 150+ CD90 E1                                   pop     hl                  ; get string pointer back
 151+ CD91 23                                   inc     hl
 152+ CD92 23                                   inc     hl                  ; on to next word
 153+ CD93 18 E2                                jr      STAT_expand_name
 154+ CD95
 155+ CD95              STAT_First_Item         EQU     EQ_CARGO_BAY
 156+ CD95 3A B8 93     STAT_buffer_list:       ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 157+ CD98                                      MMUSelectGalaxyA
 157+ CD98 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 158+ CD9B 21 3D C0                             ld      hl,STAT_display_buffer                      ; hl - target buffer
 159+ CD9E 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 160+ CDA0 11 00 0C                             ld      de, STAT_display_buff_len
 161+ CDA3 CD 17 8F                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 162+ CDA6 21 54 C0                             ld      hl,STAT_display_buffer+STAT_buffer_row_len-1
 163+ CDA9 11 18 00                             ld      de,STAT_buffer_row_len
 164+ CDAC 06 18                                ld      b,EQ_ITEM_COUNT - EQ_CARGO_BAY
 165+ CDAE AF                                   xor     a
 166+ CDAF 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 167+ CDB0 19                                   add     hl,de
 168+ CDB1 10 FC                                djnz    .EoLLoop
 169+ CDB3 06 18                                ld      b,EQ_ITEM_COUNT - EQ_CARGO_BAY              ; CurrentGameMaxEquipment but minus fuel and missiles
 170+ CDB5 DD 21 34 97                          ld      ix,EquipmentFitted + STAT_First_Item        ; ix = equipment master table, ignore missiles
 171+ CDB9 FD 21 3D C0                          ld      iy,STAT_display_buffer                      ; iy = target buffer
 172+ CDBD 0E 00                                ld      c,0                                         ; Current Row
 173+ CDBF 1E 02                                ld      e,STAT_First_Item
 174+ CDC1 DD 7E 00     .ProcessRow:            ld      a,(ix+0)                                    ; Do we own one?
 175+ CDC4 FE 00                                cp      0
 176+ CDC6 28 21                                jr      z,.DoneFittedCheck
 177+ CDC8 D5 FD E5 DD  .OwnItem:               push    de,, iy,, ix,, bc
 177+ CDCC E5 C5
 178+ CDCE 21 05 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 179+ CDD1 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length, e = current equip row
 180+ CDD3 ED 30                                mul
 181+ CDD5 19                                   add     hl,de                                       ; hl = dword list of work pointers
 182+ CDD6 FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 183+ CDDA CD 77 CD                             call    STAT_expand_name                           ; expand name
 184+ CDDD C1 DD E1 FD                          pop     iy,,ix,,bc
 184+ CDE1 E1
 185+ CDE2 11 18 00                             ld      de,STAT_buffer_row_len
 186+ CDE5 FD 19                                add     iy,de                                       ; now iy = start of next column
 187+ CDE7 D1                                   pop     de
 188+ CDE8 0C                                   inc     c
 189+ CDE9 DD 23        .DoneFittedCheck:       inc     ix
 190+ CDEB 1C                                   inc     e
 191+ CDEC 10 D3                                djnz    .ProcessRow
 192+ CDEE 79           .DoneProcess:           ld      a,c
 193+ CDEF 32 3C C0                             ld      (STAT_current_end),a
 194+ CDF2 C9                                   ret
 195+ CDF3              ;----------------------------------------------------------------------------------------------------------------------------------
 196+ CDF3 06 0A        draw_STAT_maintext:    	ld		b,10
 197+ CDF5 21 10 C0                             ld		hl,status_boiler_text
 198+ CDF8 CD 92 CC                             call	STAT_print_boiler_text
 199+ CDFB 3A B8 93     .PresentSystem:         ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 200+ CDFE                                      MMUSelectGalaxyA
 200+ CDFE ED 92 57    >                     nextreg GalaxyDataMMU,       a
 201+ CE01 ED 4B CB 93                          ld      bc, (PresentSystemX)
 202+ CE05 CD B7 FA                             call    galaxy_name_at_bc
 203+ CE08 11 4B CC                             ld      de,stat_present_name
 204+ CE0B CD 89 CC                             call    stat_copy_to_name
 204+ CE0E
 205+ CE0E 01 98 0B                             ld      bc,present_position
 206+ CE11 21 4B CC                             ld      hl,stat_present_name
 207+ CE14                                      MMUSelectLayer2
 207+ CE14 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 208+ CE18 1E FF                                ld      e,txt_status_colour
 209+ CE1A CD 6F E1                             call    l2_print_at
 210+ CE1D 3A B8 93     .HyperspaceSystem:      ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 211+ CE20                                      MMUSelectGalaxyA
 211+ CE20 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 212+ CE23 ED 4B CD 93                          ld      bc, (TargetPlanetX)
 213+ CE27 CD B7 FA                             call    galaxy_name_at_bc
 214+ CE2A 11 6A CC                             ld      de,stat_target_name
 215+ CE2D CD 89 CC                             call    stat_copy_to_name
 215+ CE30
 216+ CE30 01 98 13                             ld      bc,hyperspace_position
 217+ CE33 21 6A CC                             ld      hl,stat_target_name
 218+ CE36                                      MMUSelectLayer2
 218+ CE36 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 219+ CE3A 1E FF                                ld      e,txt_status_colour
 220+ CE3C CD 6F E1                             call    l2_print_at
 221+ CE3F CD F8 CE     .StatusText:	        call	get_cmdr_condition
 222+ CE42 21 6C 99                             ld		hl, ConditionNameIdx
 223+ CE45 CD 6E 9A                             call	getTableText
 224+ CE48 01 70 1B                             ld		bc,condition_position
 225+ CE4B                                      MMUSelectLayer2
 225+ CE4B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 226+ CE4F 1E FF                                ld      e,txt_status_colour
 227+ CE51 CD 6F E1                             call    l2_print_at
 228+ CE54 CD E8 AD     .DisplayFuel:           call	GetFuelLevel
 229+ CE57 21 96 AD                             ld		hl, txt_fuel_level
 230+ CE5A 7E                                   ld		a,(hl)
 231+ CE5B FE 30                                cp		'0'
 232+ CE5D 20 01                                jr		nz,.PrintFuel
 233+ CE5F 23           .SkipLeadingZero:	    inc		hl
 234+ CE60 01 70 23     .PrintFuel:             ld		bc,fuel_position
 235+ CE63                                      MMUSelectLayer2
 235+ CE63 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 236+ CE67 1E FF                                ld      e,txt_status_colour
 237+ CE69 CD 6F E1                             call    l2_print_at
 238+ CE6C CD 53 CD     .DisplayCash:           call	STAT_GetCash
 239+ CE6F 01 70 2B                             ld		bc,cash_position
 240+ CE72 21 3D CC                             ld		hl,STAT_cash_amount
 241+ CE75                                      MMUSelectLayer2
 241+ CE75 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 242+ CE79 1E FF                                ld      e,txt_status_colour
 243+ CE7B CD 6F E1                             call    l2_print_at
 244+ CE7E 3A 83 93     .PrintLegalStatus:      ld		a,(FugitiveInnocentStatus)
 245+ CE81 FE 00                                cp		0
 246+ CE83 20 05                                jr		nz,.Naughty
 247+ CE85 21 4D 9B                             ld		hl,WordClean
 248+ CE88 18 0C                                jr		.DisplayLegalStatus
 249+ CE8A FE 32        .Naughty:               cp		50
 250+ CE8C 38 05                                jr		c,.JustOffender
 251+ CE8E 21 5C 9B     .VeryNaughty:           ld		hl,WordFugitive
 252+ CE91 18 03                                jr		.DisplayLegalStatus
 253+ CE93 21 53 9B     .JustOffender:          ld		hl,WordOffender
 254+ CE96 01 70 33     .DisplayLegalStatus:    ld		bc,legal_status_position
 255+ CE99                                      MMUSelectLayer2
 255+ CE99 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 256+ CE9D 1E FF                                ld      e,txt_status_colour
 257+ CE9F CD 6F E1                             call    l2_print_at
 258+ CEA2 ED 5B 96 93  .DisplayRating:         ld		de,(KillTally)
 259+ CEA6 CD 79 9A                             call	getRankIndex
 260+ CEA9 21 58 9A                             ld		hl, RankingNameIdx
 261+ CEAC CD 6E 9A                             call	getTableText
 262+ CEAF 01 70 3B                             ld		bc,rank_position
 263+ CEB2                                      MMUSelectLayer2
 263+ CEB2 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 264+ CEB6 1E FF                                ld      e,txt_status_colour
 265+ CEB8 CD 6F E1                             call    l2_print_at
 266+ CEBB C9                                   ret
 267+ CEBC
 268+ CEBC
 269+ CEBC              draw_STAT_items:        MMUSelectLayer1
 269+ CEBC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 270+ CEC0 CD 80 E0                             call    l1_cls
 271+ CEC3                                      ; add in all the status stuff later
 272+ CEC3 3A 3B C0                             ld      a,(STAT_current_topItem)
 273+ CEC6 16 18                                ld      d,STAT_buffer_row_len
 274+ CEC8 5F                                   ld      e,a
 275+ CEC9 ED 30                                mul
 276+ CECB 21 3D C0                             ld      hl,STAT_display_buffer
 277+ CECE 19                                   add     hl,de
 278+ CECF 3A 3B C0                             ld      a,(STAT_current_topItem)
 279+ CED2 47                                   ld      b,a
 280+ CED3 3A 3C C0                             ld      a,(STAT_current_end)
 281+ CED6 90                                   sub     b
 282+ CED7                                      JumpIfALTNusng  STAT_eqip_window_len, .FillScreen
 282+ CED7 FE 0A       >                        cp      STAT_eqip_window_len
 282+ CED9 DA E0 CE    >                        jp		c, .FillScreen
 283+ CEDC 06 0A        .JustWindowing:         ld      b,STAT_eqip_window_len
 284+ CEDE 18 01                                jr      .ReadyToPrint
 285+ CEE0 47           .FillScreen:            ld      b,a         ; the mumber of rows to display
 286+ CEE1 11 40 58     .ReadyToPrint:          ld      de,STAT_position
 287+ CEE4 D5 E5 C5     .DrawARow:              push    de,, hl,, bc                  ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 288+ CEE7 CD C8 E0                             call    l1_print_at
 288+ CEEA
 289+ CEEA C1 E1                                pop     hl,,bc                      ; get mesage addr back and move down one line
 290+ CEEC 11 18 00                             ld      de,STAT_buffer_row_len
 291+ CEEF 19                                   add     hl,de
 292+ CEF0 D1                                   pop     de                          ; get output row back
 293+ CEF1 3E 08                                ld      a,8
 294+ CEF3 82                                   add     a,d
 295+ CEF4 57                                   ld      d,a
 296+ CEF5 10 ED                                djnz    .DrawARow
 297+ CEF7 C9                                   ret
 298+ CEF8
 299+ CEF8              ;----------------------------------------------------------------------------------------------------------------------------------
 300+ CEF8
 301+ CEF8 3A C5 92     get_cmdr_condition:     ld			a,(DockedFlag)
 302+ CEFB FE FF                                cp			PlayerDocked
 303+ CEFD 28 1D                                jr			z,.PlayerIsDocked
 304+ CEFF 21 46 93     .PlayerNotDocked:	    ld			hl, SpaceStationPresent+1				; address of first Non station
 305+ CF02 3E 01                                ld			a,1										; condition green
 306+ CF04 06 1E                                ld			b,JunkCount- (SpaceStationPresent+1) +1	; so should be 30
 307+ CF06 86           .countShipsLoop:	    add			a,(hl)
 308+ CF07 23                                   inc			hl
 309+ CF08 10 FC                                djnz		.countShipsLoop
 310+ CF0A FE 00                                cp			0
 311+ CF0C 0E 01                                ld          c,1
 312+ CF0E 28 0A                                jr			z,.PlayerColour
 313+ CF10 3A 9C 93     .NoShipsAround:         ld			a,(PlayerEnergy)
 314+ CF13 FE 80                                cp			$80
 315+ CF15 3E 01                                ld          a,1
 316+ CF17 CE 01                                adc         1                                       ; add 1 + carry, if a < 128 then carry set so goes red
 317+ CF19 C9                                   ret
 318+ CF1A 79           .PlayerColour:          ld          a,c
 319+ CF1B C9                                   ret
 320+ CF1C AF           .PlayerIsDocked:        xor			a
 321+ CF1D C9                                   ret
 322+ CF1E
 323+ CF1E              ;;;PrintEquipment:         ld		a,(hl)
 324+ CF1E              ;;;                        cp		0
 325+ CF1E              ;;;                        ret		z
 326+ CF1E              ;;;                        ld		a,b
 327+ CF1E              ;;;PrintEquipmentDirect:	call	expandTokenToString
 328+ CF1E              ;;;                        ld		hl,TextBuffer
 329+ CF1E              ;;;                        ld		de,(equipment_cursor)
 330+ CF1E              ;;;                        call	l1_print_at
 331+ CF1E              ;;;                        ld		bc,(equipment_cursor)
 332+ CF1E              ;;;                        ld		a,b
 333+ CF1E              ;;;                        add		a,8
 334+ CF1E              ;;;                        ld		b,a
 335+ CF1E              ;;;                        ld		(equipment_cursor),bc
 336+ CF1E              ;;;                        cp		equipmax_row
 337+ CF1E              ;;;                        jr		c,.SkipColUpdate
 338+ CF1E              ;;;.ColUpdate:             ld		hl,equipment_position2
 339+ CF1E              ;;;                        ld		(equipment_cursor),hl
 340+ CF1E              ;;;                        ret
 341+ CF1E              ;;;.SkipColUpdate:	        ld		a,b
 342+ CF1E              ;;;                        ld		(equipment_cursor+1), a
 343+ CF1E              ;;;                        ret
 344+ CF1E
 345+ CF1E              draw_status_menu:       INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++CF1E
   2++CF1E                  MMUSelectLayer1
   2++CF1E ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++CF22 CD 80 E0     	call	l1_cls
   4++CF25 3E 07        	ld		a,7
   5++CF27 CD 9B E0     	call	l1_attr_cls_to_a
   6++CF2A                  MMUSelectLayer2
   6++CF2A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++CF2E CD 08 E0     	call    asm_l2_double_buffer_off
   8++CF31 CD C9 E0     	call	l2_cls	; Get some space
   9++CF34              	MMUSelectSpriteBank
   9++CF34 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++CF38 CD 6E E4     	call    sprite_cls_cursors
  11++CF3B
  12++CF3B
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 346+ CF3B 3E 08                                ld		a,8
 347+ CF3D 32 C0 92                             ld		(MenuIdMax),a
 348+ CF40 01 01 01     .Drawbox:               ld		bc,$0101
 349+ CF43 11 FD BE                             ld		de,$BEFD
 350+ CF46 3E C0                                ld		a,$C0
 351+ CF48                                      MMUSelectLayer2
 351+ CF48 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 352+ CF4C CD F6 E1                             call	l2_draw_box
 353+ CF4F 01 01 0A                             ld		bc,$0A01
 354+ CF52 11 C0 FE                             ld		de,$FEC0
 355+ CF55 CD 62 E2                             call	l2_draw_horz_line
 356+ CF58 CD 95 CD     .equipment              call    STAT_buffer_list
 357+ CF5B CD BC CE                             call    draw_STAT_items
 358+ CF5E CD F3 CD                             call    draw_STAT_maintext
 359+ CF61 C9                                   ret
 360+ CF62
 361+ CF62              ;----------------------------------------------------------------------------------------------------------------------------------
 362+ CF62              ; Handles all the input whilst in the market menu
 363+ CF62 3E 4A        loop_STAT_menu:         ld      a,c_Pressed_CursorUp
 364+ CF64 CD 9D 90                             call    is_key_pressed
 365+ CF67 CC 73 CF                             call    z,STAT_UpPressed
 366+ CF6A 3E 4C                                ld      a,c_Pressed_CursorDown
 367+ CF6C CD 9D 90                             call    is_key_pressed
 368+ CF6F CC 85 CF                             call    z,STAT_DownPressed
 369+ CF72 C9                                   ret
 370+ CF73
 371+ CF73              ;----------------------------------------------------------------------------------------------------------------------------------
 372+ CF73 AF           STAT_UpPressed:         xor     a
 373+ CF74 32 3A C0                             ld      (STAT_selected_row),a
 374+ CF77 3A 3B C0     .check_scroll_up:       ld      a,(STAT_current_topItem)
 375+ CF7A FE 00                                cp      0
 376+ CF7C C8                                   ret     z
 377+ CF7D 3D                                   dec     a           ; chjange later to buffering step back 1
 378+ CF7E 32 3B C0                             ld      (STAT_current_topItem),a
 379+ CF81 CD BC CE                             call    draw_STAT_items
 380+ CF84 C9                                   ret
 381+ CF85              ;----------------------------------------------------------------------------------------------------------------------------------
 382+ CF85 3E 09        STAT_DownPressed:       ld      a,STAT_eqip_window_len-1
 383+ CF87 32 3A C0                             ld      (STAT_selected_row),a
 384+ CF8A 3A 3C C0                             ld      a,(STAT_current_end)
 385+ CF8D 47                                   ld      b,a                             ; This check is if the current list is < one screen
 386+ CF8E 05                                   dec     b
 387+ CF8F 3A 3A C0                             ld      a,(STAT_selected_row)
 388+ CF92 B8                                   cp      b
 389+ CF93 C8                                   ret     z
 390+ CF94 FE 09                                cp      STAT_eqip_window_len-1
 391+ CF96 28 05                                jr      z, .check_scroll_down
 392+ CF98 21 3A C0                             ld      hl,STAT_selected_row
 393+ CF9B 34                                   inc     (hl)
 394+ CF9C C9                                   ret
 395+ CF9D 47           .check_scroll_down:     ld      b,a
 396+ CF9E 3A 3B C0                             ld      a,(STAT_current_topItem)
 397+ CFA1 80                                   add     b
 398+ CFA2 3C                                   inc     a
 399+ CFA3 21 3C C0                             ld      hl,STAT_current_end
 400+ CFA6                                      ReturnIfAGTEusng      (hl)
 400+ CFA6 BE          >                    cp    (hl)
 400+ CFA7 D0          >                    ret	 nc
 401+ CFA8 21 3B C0     .can_scroll_down:       ld      hl,STAT_current_topItem
 402+ CFAB 34                                   inc     (hl)
 403+ CFAC CD BC CE                             call    draw_STAT_items
 404+ CFAF C9                                   ret
 405+ CFB0
# file closed: ./Menus/status_menu.asm
1195  CFB0
1196  CFB0              ; Bank 64  ------------------------------------------------------------------------------------------------------------------------
1197  CFB0
1198  CFB0                  SLOT    MenuEquipSAddr
1199  CFB0                  PAGE    BankMenuEquipS
1200  CFB0                  ORG     MenuEquipSAddr
1201  C000                  INCLUDE "./Menus/equip_ship_menu.asm"
# file opened: ./Menus/equip_ship_menu.asm
   1+ C000 45 71 75 69  eqshp_prices_page_marker  DB "EquipShipPG63"
   1+ C004 70 53 68 69
   1+ C008 70 50 47 36
   1+ C00C 33
   2+ C00D 50 02 19 C0  eqshp_boiler_text		DW $0250,eqship_title
   3+ C011 20 02 BB 9F  						DW $0220,name_expanded
   4+ C015 08 B0 24 C0                          DW $B008,eqship_cash
   5+ C019
   6+ C019 45 71 75 69  eqship_title            DB "Equip Ship",0
   6+ C01D 70 20 53 68
   6+ C021 69 70 00
   7+ C024 43 61 73 68  eqship_cash				DB "Cash : ",0
   7+ C028 20 3A 20 00
   8+ C02C
   9+ C02C 30 30 2E 30  txt_eqshp_amount	    DB "00.0",0
   9+ C030 00
  10+ C031 39 39 39 00  txt_eqshp_quantity      DB "999",0
  11+ C035 39 39 39 00  txt_eqshp_cargo         DB "999",0
  12+ C039 00 00        eqshp_cursor			DW  $0000
  13+ C03B              eqshp_position			equ $1808
  14+ C03B              eqshp_uom				equ	$68
  15+ C03B              eqshp_price 			equ $88
  16+ C03B              eqshp_Quantity			equ	$B0
  17+ C03B              eqshp_Cargo             equ $E0
  18+ C03B              eqshp_UomOffset		    equ 46
  19+ C03B 20 20 20 20  eqshp_blank_line        DB "                                ",0
  19+ C03F 20 20 20 20
  19+ C043 20 20 20 20
  19+ C047 20 20 20 20
  19+ C04B 20 20 20 20
  19+ C04F 20 20 20 20
  19+ C053 20 20 20 20
  19+ C057 20 20 20 20
  19+ C05B 00
  20+ C05C
  21+ C05C 00 00 00...  eqshp_item_price        DS 20
  22+ C070
  23+ C070              eqshp_cash_position     equ $B048
  24+ C070 00 00 00...  eqshp_cash_amount		DS 20
  25+ C084 20 43 72 20  eqshp_cash_UoM          DB " Cr       ",0
  25+ C088 20 20 20 20
  25+ C08C 20 20 00
  26+ C08F
  27+ C08F 00           eqshp_selected_row      DB 0
  28+ C090 00           eqshp_current_topItem   DB 0
  29+ C091 00           eqshp_current_end       DB 0
  30+ C092              eqship_buffer_rows      EQU     128
  31+ C092              eqship_buffer_row_len   EQU      32
  32+ C092              eqship_display_buff_len EQU     eqship_buffer_rows *   eqship_buffer_row_len
  33+ C092 00 00 00...  eqship_display_buffer:  DS      eqship_display_buff_len                     ; maxium of 128 items can be coded for
  34+ D092 00 00 00...  eqship_buyable_buffer:  DS      128
  35+ D112              eqship_buffer_cash_col: EQU     21
  36+ D112              eqship_fitted_module:   EQU     29
  37+ D112              ;----------------------------------------------------------------------------------------------------------------------------------
  38+ D112 3A 8F C0     eqshp_highlight_row:    ld      a,(eqshp_selected_row)
  39+ D115 C6 03                                add     a,3
  40+ D117 57                                   ld      d,a
  41+ D118 1E 56                                ld      e,L1InvHighlight
  42+ D11A                                      MMUSelectLayer1
  42+ D11A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  43+ D11E CD 30 E0                             call    l1_hilight_row
  44+ D121 C9                                   ret
  45+ D122              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ D122 3A 8F C0     eqshp_lowlight_row      ld      a,(eqshp_selected_row)
  47+ D125 C6 03                                add     a,3
  48+ D127 57                                   ld      d,a
  49+ D128 1E 07                                ld      e,L1InvLowlight
  50+ D12A                                      MMUSelectLayer1
  50+ D12A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ D12E CD 30 E0                             call    l1_hilight_row
  52+ D131 C9                                   ret
  53+ D132              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ D132 CD 49 D1     eqshp_DispDEIXtoIY1DP:  call    eqshp_DispDEIXtoIY
  55+ D135 FD 36 02 00                          ld      (iy+2),0
  56+ D139 FD 7E 00                             ld      a,(IY+0)
  57+ D13C FD 77 01                             ld      (IY+1),a
  58+ D13F 3E 2E                                ld      a,"."
  59+ D141 FD 77 00                             ld      (IY+0),a
  60+ D144 FD 23                                inc     IY
  61+ D146 FD 23                                inc     IY
  62+ D148 C9                                   ret
  63+ D149              ;----------------------------------------------------------------------------------------------------------------------------------
  64+ D149 DD 22 DA D1  eqshp_DispDEIXtoIY:     ld (.EQSHPclcn32z),ix
  65+ D14D ED 53 DC D1                          ld (.EQSHPclcn32zIX),de
  66+ D151 DD 21 D6 D1                          ld ix,.EQSHPclcn32t+36
  67+ D155 06 09                                ld b,9
  68+ D157 0E 00                                ld c,0
  69+ D159 3E 30        .EQSHPclcn321:            ld a,'0'
  70+ D15B B7                                   or a
  71+ D15C DD 5E 00     .EQSHPclcn322:            ld e,(ix+0)
  72+ D15F DD 56 01                             ld d,(ix+1)
  73+ D162 2A DA D1                             ld hl,(.EQSHPclcn32z)
  74+ D165 ED 52                                sbc hl,de
  75+ D167 22 DA D1                             ld (.EQSHPclcn32z),hl
  76+ D16A DD 5E 02                             ld e,(ix+2)
  77+ D16D DD 56 03                             ld d,(ix+3)
  78+ D170 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  79+ D173 ED 52                                sbc hl,de
  80+ D175 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  81+ D178 38 04                                jr c,.EQSHPclcn325
  82+ D17A 0C                                   inc c
  83+ D17B 3C                                   inc a
  84+ D17C 18 DE                                jr .EQSHPclcn322
  85+ D17E DD 5E 00     .EQSHPclcn325:            ld e,(ix+0)
  86+ D181 DD 56 01                             ld d,(ix+1)
  87+ D184 2A DA D1                             ld hl,(.EQSHPclcn32z)
  88+ D187 19                                   add hl,de
  89+ D188 22 DA D1                             ld (.EQSHPclcn32z),hl
  90+ D18B DD 5E 02                             ld e,(ix+2)
  91+ D18E DD 56 03                             ld d,(ix+3)
  92+ D191 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  93+ D194 ED 5A                                adc hl,de
  94+ D196 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  95+ D199 11 FC FF                             ld de,-4
  96+ D19C DD 19                                add ix,de
  97+ D19E 0C                                   inc c
  98+ D19F 0D                                   dec c
  99+ D1A0 28 05                                jr z,.EQSHPclcn323
 100+ D1A2 FD 77 00                             ld (iy+0),a
 101+ D1A5 FD 23                                inc iy
 102+ D1A7 10 B0        .EQSHPclcn323:            djnz .EQSHPclcn321
 103+ D1A9 3A DA D1                             ld a,(.EQSHPclcn32z)
 104+ D1AC C6 30                                add A,'0'
 105+ D1AE FD 77 00                             ld (iy+0),a
 106+ D1B1 C9                                   ret
 107+ D1B2 01 00 00 00  .EQSHPclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 107+ D1B6 0A 00 00 00
 107+ D1BA 64 00 00 00
 107+ D1BE E8 03 00 00
 107+ D1C2 10 27 00 00
 108+ D1C6 A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 108+ D1CA 40 42 0F 00
 108+ D1CE 80 96 98 00
 108+ D1D2 00 E1 F5 05
 108+ D1D6 00 CA 9A 3B
 109+ D1DA 00 00        .EQSHPclcn32z             ds 2
 110+ D1DC 00 00        .EQSHPclcn32zIX           ds 2
 111+ D1DE              ;----------------------------------------------------------------------------------------------------------------------------------
 112+ D1DE              ; "DispHL, writes HL to DE address"
 113+ D1DE 01 F0 D8     EQSHP_DispHLtoDE:         ld	bc,-10000
 114+ D1E1 CD F7 D1                             call	EQSHP_Num1
 115+ D1E4 01 18 FC                             ld	bc,-1000
 116+ D1E7 CD F7 D1                             call	EQSHP_Num1
 117+ D1EA 01 9C FF                             ld	bc,-100
 118+ D1ED CD F7 D1                             call	EQSHP_Num1
 119+ D1F0 0E F6                                ld	c,-10
 120+ D1F2 CD F7 D1                             call	EQSHP_Num1
 121+ D1F5 0E FF                                ld	c,-1
 122+ D1F7 3E 2F        EQSHP_Num1:	            ld	a,'0'-1
 123+ D1F9 3C           .Num2:	                inc	a
 124+ D1FA 09                                   add	hl,bc
 125+ D1FB 38 FC                                jr	c,.Num2
 126+ D1FD ED 42                                sbc	hl,bc
 127+ D1FF 12                                   ld	(de),a
 128+ D200 13                                   inc	de
 129+ D201 C9                                   ret
 130+ D202              ;----------------------------------------------------------------------------------------------------------------------------------
 131+ D202 26 00        EQSHP_DispAtoDE:          ld h,0
 132+ D204 6F                                   ld l,a
 133+ D205 C3 DE D1                             jp EQSHP_DispHLtoDE
 134+ D208              ;----------------------------------------------------------------------------------------------------------------------------------
 135+ D208 26 00        EQSHP_DispPriceAtoDE:     ld h,0
 136+ D20A 6F                                   ld l,a
 137+ D20B 01 9C FF                             ld	bc,-100
 138+ D20E CD 1E D2                             call	.NumLeadBlank1
 139+ D211 0E F6                                ld	c,-10
 140+ D213 CD F7 D1                             call	EQSHP_Num1
 141+ D216 3E 2E                                ld		a,'.'					; we could assume preformat but
 142+ D218 12                                   ld		(de),a					; we can optimse that later TODO
 143+ D219 13                                   inc		de						; with just an inc De
 144+ D21A 0E FF                                ld	c,-1
 145+ D21C 18 D9                                jr		EQSHP_Num1
 146+ D21E 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 147+ D220 3C           .NumLeadBlank2:	        inc	a
 148+ D221 09                                   add	hl,bc
 149+ D222 38 FC                                jr	c,.NumLeadBlank2
 150+ D224 FE 30                                cp	'0'
 151+ D226 20 02                                jr	nz,.DontBlank
 152+ D228 3E 20        .Blank:                 ld	a,' '
 153+ D22A ED 42        .DontBlank:	            sbc	hl,bc
 154+ D22C 12                                   ld	(de),a
 155+ D22D 13                                   inc	de
 156+ D22E C9                                   ret
 157+ D22F              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ D22F FE 00        EQSHP_DispQtyAtoDE:      cp	0
 159+ D231 28 30                                jr	z,.NoStock
 160+ D233 26 00                                ld h,0
 161+ D235 6F                                   ld l,a
 162+ D236 01 9C FF                             ld	bc,-100
 163+ D239 CD 52 D2                             call	.NumLeadBlank1
 164+ D23C FE 20        .WasLead0:              cp      ' '
 165+ D23E 20 09                                jr      nz,.NotHundredsZero
 166+ D240 0E F6                                ld	c,-10
 167+ D242 CD 52 D2                             call	.NumLeadBlank1
 168+ D245 0E FF                                ld	c,-1
 169+ D247 18 AE                                jr		EQSHP_Num1
 170+ D249 0E F6        .NotHundredsZero:       ld	c,-10
 171+ D24B CD F7 D1                             call	EQSHP_Num1
 172+ D24E 0E FF                                ld	c,-1
 173+ D250 18 A5                                jr		EQSHP_Num1
 174+ D252 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 175+ D254 3C           .NumLeadBlank2:	        inc	a
 176+ D255 09                                   add	hl,bc
 177+ D256 38 FC                                jr	c,.NumLeadBlank2
 178+ D258 FE 30                                cp	'0'
 179+ D25A 20 02                                jr	nz,.DontBlank
 180+ D25C 3E 20        .Blank:                 ld	a,' '
 181+ D25E ED 42        .DontBlank:	            sbc	hl,bc
 182+ D260 12                                   ld	(de),a
 183+ D261 13                                   inc	de
 184+ D262 C9                                   ret
 185+ D263 3E 20        .NoStock:               ld	a,' '
 186+ D265 12                                   ld	(de),a
 187+ D266 13                                   inc	de
 188+ D267 12                                   ld	(de),a
 189+ D268 13                                   inc	de
 190+ D269 3E 2D                                ld	a,'-'
 191+ D26B 12                                   ld	(de),a
 192+ D26C 13                                   inc de
 193+ D26D C9                                   ret
 194+ D26E              ;----------------------------------------------------------------------------------------------------------------------------------
 195+ D26E              EQSHP_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++D26E
   2++D26E              ;">print_boilder_text hl = text structure, b = message count"
   3++D26E              .BoilerTextLoop:
   4++D26E C5           	push		bc			; Save Message Count loop value
   5++D26F 4E           	ld			c,(hl)		; Get Row into b
   6++D270 23           	inc			hl
   7++D271 46           	ld			b,(hl)		; Get Col into b
   8++D272 23           	inc			hl
   9++D273 5E           	ld			e,(hl)		; Get text address Lo into E
  10++D274 23           	inc			hl
  11++D275 56           	ld			d,(hl)		; Get text address Hi into E
  12++D276 23           	inc			hl
  13++D277 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++D278 EB           	ex			de,hl		; now hl = address of text data
  15++D279 1E FF        	ld			e,txt_status_colour
  16++D27B C5           	push		bc
  17++D27C D1           	pop			de
  18++D27D                  MMUSelectLayer1
  18++D27D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++D281 CD C8 E0     	call		l1_print_at
  20++D284 E1           	pop			hl
  21++D285 C1           	pop			bc
  22++D286 10 E6        	djnz		.BoilerTextLoop
  23++D288 C9           	ret
  24++D289
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 196+ D289              ;----------------------------------------------------------------------------------------------------------------------------------
 197+ D289 2A F5 96     eqshp_GetCash:          ld		hl,(Cash+2)
 198+ D28C EB                                   ex      de,hl
 199+ D28D DD 2A F3 96                          ld      ix,(Cash)
 200+ D291 FD 21 70 C0                          ld		iy,eqshp_cash_amount
 201+ D295 CD 32 D1                             call 	eqshp_DispDEIXtoIY1DP
 202+ D298 FD E5                                push    IY
 203+ D29A D1                                   pop     de
 204+ D29B 21 84 C0                             ld      hl,eqshp_cash_UoM
 205+ D29E 01 0B 00                             ld      bc,11
 206+ D2A1 ED B0                                ldir
 207+ D2A3 C9                                   ret
 208+ D2A4              ;----------------------------------------------------------------------------------------------------------------------------------
 209+ D2A4 CD 89 D2     eqshp_DisplayCash:      call	eqshp_GetCash
 210+ D2A7 21 70 C0                             ld		hl,eqshp_cash_amount
 211+ D2AA 11 48 B0                             ld      de,eqshp_cash_position
 212+ D2AD                                      MMUSelectLayer1
 212+ D2AD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 213+ D2B1 CD C8 E0                             call	l1_print_at
 214+ D2B4 C9                                   ret
 215+ D2B5              ;----------------------------------------------------------------------------------------------------------------------------------
 216+ D2B5 7E           eqshp_expand_word:      ld      a,(hl)
 217+ D2B6 FE 00                                cp      0
 218+ D2B8 C8                                   ret     z
 219+ D2B9 12                                   ld      (de),a
 220+ D2BA 23                                   inc     hl
 221+ D2BB 13                                   inc     de
 222+ D2BC 18 F7                                jr      eqshp_expand_word
 223+ D2BE
 224+ D2BE              ; hl = list of words
 225+ D2BE              ; de = adress to expand to
 226+ D2BE 7E           eqshp_expand_name:      ld      a,(hl)
 227+ D2BF 47                                   ld      b,a
 228+ D2C0 23                                   inc     hl
 229+ D2C1 7E                                   ld      a,(hl)              ; its a 16 bit
 230+ D2C2 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 231+ D2C3 B0                                   or      b
 232+ D2C4 20 01                                jr      nz,.MoreToDo
 233+ D2C6              ;                        ld      (de),a we dont want the null marker now
 234+ D2C6 C9                                   ret
 235+ D2C7 E5 D5        .MoreToDo:              push    hl,,de
 236+ D2C9 7E                                   ld      a,(hl)              ; bodge for now no optimise
 237+ D2CA 5F                                   ld      e,a
 238+ D2CB 23                                   inc     hl
 239+ D2CC 7E                                   ld      a,(hl)
 240+ D2CD 57                                   ld      d,a
 241+ D2CE EB                                   ex      hl,de               ; hl is now Word... address
 242+ D2CF D1                                   pop     de                  ; de back to pointer to buffer
 243+ D2D0 CD B5 D2     .ProcessWord:           call    eqshp_expand_word
 244+ D2D3 3E 20                                ld      a," "               ; speculative space
 245+ D2D5 12                                   ld      (de),a
 246+ D2D6 13                                   inc     de
 247+ D2D7 E1                                   pop     hl                  ; get string pointer back
 248+ D2D8 23                                   inc     hl
 249+ D2D9 23                                   inc     hl                  ; on to next word
 250+ D2DA 18 E2                                jr      eqshp_expand_name
 251+ D2DC
 252+ D2DC 21 92 C0     eqshp_buffer_list:      ld      hl,eqship_display_buffer                    ; hl - target buffer
 253+ D2DF 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 254+ D2E1 11 00 10                             ld      de, eqship_display_buff_len
 255+ D2E4 CD 17 8F                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 256+ D2E7 21 B1 C0                             ld      hl,eqship_display_buffer+eqship_buffer_row_len-1
 257+ D2EA 11 20 00                             ld      de,eqship_buffer_row_len
 258+ D2ED 06 1A                                ld      b,ShipEquipTableSize
 259+ D2EF AF                                   xor     a
 260+ D2F0 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 261+ D2F1 19                                   add     hl,de
 262+ D2F2 10 FC                                djnz    .EoLLoop
 263+ D2F4 06 1A                                ld      b,ShipEquipTableSize                        ; CurrentGameMaxEquipment
 264+ D2F6 DD 21 D5 F4                          ld      ix,ShipEquipmentList                        ; ix = equipment master table
 265+ D2FA FD 21 92 C0                          ld      iy,eqship_display_buffer                    ; iy = target buffer
 266+ D2FE 0E 00                                ld      c,0                                         ; Current Row
 267+ D300 DD 7E 01     .ProcessRow:            ld      a,(ix+1)                                    ; get can buy
 268+ D303 FE FF                                cp      $FF                                         ; if its $FF then do not display
 269+ D305 C2 12 D3                             jp      nz,.BufferItem
 270+ D308 11 10 00     .DoNotDisplay:          ld      de,ShipEquipTableRowLen                     ; mov eto next equipment list, 7 =  row length
 271+ D30B DD 19                                add     ix,de
 272+ D30D 10 F1                                djnz    .ProcessRow
 273+ D30F C3 75 D3                             jp      .DoneProcess
 274+ D312 FD E5 DD E5  .BufferItem:            push    iy,,ix,,bc
 274+ D316 C5
 275+ D317 DD 7E 00                             ld      a,(ix+0)                                    ; get can buy
 276+ D31A 21 92 D0                             ld      hl,eqship_buyable_buffer                    ;
 277+ D31D 59                                   ld      e,c
 278+ D31E 16 00                                ld      d,0                                         ;
 279+ D320 19                                   add     hl,de                                       ;
 280+ D321 77                                   ld      (hl),a                                      ; set buyable to 0
 281+ D322 21 05 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 282+ D325 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length
 283+ D327 59                                   ld      e,c
 284+ D328 ED 30                                mul
 285+ D32A 19                                   add     hl,de                                       ; hl = dword list of work pointers
 286+ D32B FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 287+ D32F C5                                   push    bc
 288+ D330 CD BE D2                             call    eqshp_expand_name                           ; expand name
 289+ D333 C1                                   pop     bc
 290+ D334 11 15 00                             ld      de,eqship_buffer_cash_col                   ; move buffer column to 20
 291+ D337 FD 19                                add     iy,de
 292+ D339 FD E5                                push    iy
 293+ D33B DD 7E 04                             ld      a,(ix+4)
 294+ D33E 5F                                   ld      e,a
 295+ D33F DD 7E 05                             ld      a,(ix+5)
 296+ D342 57                                   ld      d,a                                         ; de = price
 297+ D343 DD 62 DD 6B                          ld      ix,de
 298+ D347                                      ;push    de
 299+ D347                                      ;pop     ix
 300+ D347 11 00 00                             ld      de,0                                        ; deix = price
 301+ D34A CD 49 D1                             call    eqshp_DispDEIXtoIY                          ; print it to pos IY
 302+ D34D 3E 20                                ld      a," "
 303+ D34F FD 77 00                             ld      (IY+0),a
 304+ D352 FD 77 01                             ld      (IY+1),a
 305+ D355 FD 77 02                             ld      (IY+2),a
 306+ D358 FD E1                                pop     iy
 307+ D35A CD 7A D3                             call    .RightJustify
 308+ D35D C1 DD E1 FD                          pop     iy,,ix,,bc
 308+ D361 E1
 309+ D362 DD 7E 07     .CheckFitted:           ld      a,(ix+7)
 310+ D365 FD 77 1D                             ld      (iy+eqship_fitted_module),a
 311+ D368 11 20 00                             ld      de,eqship_buffer_row_len
 312+ D36B FD 19                                add     iy,de                                       ; now iy = start of next column
 313+ D36D 11 10 00                             ld      de,ShipEquipTableRowLen
 314+ D370 DD 19                                add     ix,de
 315+ D372 0C                                   inc     c
 316+ D373 10 8B                                djnz    .ProcessRow
 317+ D375 79           .DoneProcess:           ld      a,c
 318+ D376 32 91 C0                             ld      (eqshp_current_end),a
 319+ D379 C9                                   ret
 320+ D37A CD 7D D3     .RightJustify:          call    .RightJustify2
 321+ D37D CD 80 D3     .RightJustify2:         call    .RightJustify3
 322+ D380 FD 7E 03     .RightJustify3:         ld      a,(iy+3)
 323+ D383 FE 20                                cp      " "
 324+ D385 CC 89 D3                             call    z,.ShuffleRight
 325+ D388 C9                                   ret
 326+ D389 FD E5        .ShuffleRight:          push    iy
 327+ D38B E1                                   pop     hl
 328+ D38C 3E 03                                ld      a,3
 329+ D38E ED 31                                add     hl,a
 330+ D390 FD 7E 02                             ld      a,(iy+2)
 331+ D393 77                                   ld      (hl),a
 332+ D394 2B                                   dec     hl
 333+ D395 FD 7E 01                             ld      a,(iy+1)
 334+ D398 77                                   ld      (hl),a
 335+ D399 2B                                   dec     hl
 336+ D39A FD 7E 00                             ld      a,(iy+0)
 337+ D39D 77                                   ld      (hl),a
 338+ D39E 2B                                   dec     hl
 339+ D39F 3E 20                                ld      a," "
 340+ D3A1 77                                   ld      (hl),a
 341+ D3A2 C9                                   ret
 342+ D3A3
 343+ D3A3
 344+ D3A3              draw_eqship_items:      MMUSelectLayer1
 344+ D3A3 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 345+ D3A7 CD 80 E0                             call    l1_cls
 346+ D3AA 06 03                                ld		b,3
 347+ D3AC 21 0D C0                             ld		hl,eqshp_boiler_text
 348+ D3AF CD 6E D2                             call	EQSHP_print_boiler_text
 349+ D3B2 CD A4 D2                             call    eqshp_DisplayCash
 350+ D3B5 3A 90 C0                             ld      a,(eqshp_current_topItem)
 351+ D3B8 16 20                                ld      d,eqship_buffer_row_len
 352+ D3BA 5F                                   ld      e,a
 353+ D3BB ED 30                                mul
 354+ D3BD 21 92 C0                             ld      hl,eqship_display_buffer
 355+ D3C0 19                                   add     hl,de
 356+ D3C1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 357+ D3C4 47                                   ld      b,a
 358+ D3C5 3A 91 C0                             ld      a,(eqshp_current_end)
 359+ D3C8 90                                   sub     b
 360+ D3C9                                      JumpIfALTNusng  18, .FillScreen
 360+ D3C9 FE 12       >                        cp      18
 360+ D3CB DA D2 D3    >                        jp		c, .FillScreen
 361+ D3CE 06 12        .JustWindowing:         ld      b,18
 362+ D3D0 18 01                                jr      .ReadyToPrint
 363+ D3D2 47           .FillScreen:            ld      b,a         ; the mumber of rows to display
 364+ D3D3 11 08 18     .ReadyToPrint:          ld      de,eqshp_position
 365+ D3D6 D5 E5 C5     .DrawARow:              push    de,,hl,,bc                  ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 366+ D3D9 CD C8 E0                             call    l1_print_at
 366+ D3DC
 367+ D3DC C1 E1                                pop     hl,,bc                      ; get mesage addr back and move down one line
 368+ D3DE 11 20 00                             ld      de,eqship_buffer_row_len
 369+ D3E1 19                                   add     hl,de
 370+ D3E2 D1                                   pop     de                          ; get output row back
 371+ D3E3 3E 08                                ld      a,8
 372+ D3E5 82                                   add     a,d
 373+ D3E6 57                                   ld      d,a
 374+ D3E7 10 ED                                djnz    .DrawARow
 375+ D3E9 C9                                   ret
 376+ D3EA
 377+ D3EA              draw_eqshp_menu:        INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++D3EA
   2++D3EA                  MMUSelectLayer1
   2++D3EA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++D3EE CD 80 E0     	call	l1_cls
   4++D3F1 3E 07        	ld		a,7
   5++D3F3 CD 9B E0     	call	l1_attr_cls_to_a
   6++D3F6                  MMUSelectLayer2
   6++D3F6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++D3FA CD 08 E0     	call    asm_l2_double_buffer_off
   8++D3FD CD C9 E0     	call	l2_cls	; Get some space
   9++D400              	MMUSelectSpriteBank
   9++D400 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++D404 CD 6E E4     	call    sprite_cls_cursors
  11++D407
  12++D407
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 378+ D407 3E 20                                ld      a,$20
 379+ D409 32 C0 92                             ld      (MenuIdMax),a
 380+ D40C 3A B8 93     .SetData:               ld      a,(Galaxy)
 381+ D40F                                      MMUSelectGalaxyA
 381+ D40F ED 92 57    >                     nextreg GalaxyDataMMU,       a
 382+ D412 CD 69 F9                             call    galaxy_planet_data
 383+ D415 CD F1 F8                             call    galaxy_equip_market
 384+ D418 ED 4B CB 93                          ld      bc,(PresentSystemX)
 385+ D41C CD B7 FA                             call    galaxy_name_at_bc
 386+ D41F CD 69 F9                             call    galaxy_planet_data
 387+ D422 AF                                   xor     a
 388+ D423 32 90 C0                             ld      (eqshp_current_topItem),a
 389+ D426 CD DC D2                             call    eqshp_buffer_list
 390+ D429 01 01 01     .Drawbox:               ld		bc,$0101
 391+ D42C 11 FD BE                             ld		de,$BEFD
 392+ D42F 3E C0                                ld		a,$C0
 393+ D431                                      MMUSelectLayer2
 393+ D431 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 394+ D435 CD F6 E1                             call	l2_draw_box
 395+ D438 01 01 0A                             ld		bc,$0A01
 396+ D43B 11 C0 FE                             ld		de,$FEC0
 397+ D43E CD 62 E2                             call	l2_draw_horz_line
 398+ D441 3A B8 93     .StaticText:	        ld      a,(Galaxy)
 399+ D444                                      MMUSelectGalaxyA
 399+ D444 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 400+ D447 3E 19                                ld		a,25
 401+ D449 CD 36 9F                             call	expandTokenToString
 402+ D44C CD 79 F6                             call	GetDigramGalaxySeed
 403+ D44F CD A3 D3                             call    draw_eqship_items
 404+ D452 AF           .InitialHighlight:      xor     a
 405+ D453 32 8F C0                             ld      (eqshp_selected_row),a        ; assume on row zero
 406+ D456 CD 12 D1                             call    eqshp_highlight_row
 407+ D459 CD A4 D2     .DisCash:               call    eqshp_DisplayCash
 408+ D45C C9                                   ret
 409+ D45D
 410+ D45D              ;----------------------------------------------------------------------------------------------------------------------------------
 411+ D45D CD DC D2     eqip_refesh_buffer:     call    eqshp_buffer_list
 412+ D460 3A 8F C0                             ld      a,(eqshp_selected_row)              ; get revised list length
 413+ D463 47                                   ld      b,a
 414+ D464 3A 90 C0                             ld      a,(eqshp_current_topItem)           ; get current top of screen
 415+ D467 4F                                   ld      c,a
 416+ D468 80                                   add     b                                   ; a = top + selected row
 417+ D469 21 91 C0                             ld      hl,eqshp_current_end
 418+ D46C                                      CallIfAGTENusng (hl), .NewListShorter       ; if a > new list len then rebuild
 418+ D46C BE          >                        cp      (hl)
 418+ D46D D4 73 D4    >                        call	nc,.NewListShorter
 419+ D470 C3 7F D4                             jp      .RedrawList
 420+ D473 C5           .NewListShorter:        push    bc
 421+ D474 CD 22 D1                             call    eqshp_lowlight_row
 422+ D477 C1                                   pop     bc
 423+ D478 3A 91 C0                             ld      a,(eqshp_current_end)               ; b = end of list
 424+ D47B 91                                   sub     c                                   ; minus current top
 425+ D47C 32 8F C0                             ld      (eqshp_selected_row),a
 426+ D47F CD 12 D1     .RedrawList:            call    eqshp_highlight_row
 427+ D482 CD A3 D3                             call    draw_eqship_items
 428+ D485 C9                                   ret
 429+ D486
 430+ D486              ;----------------------------------------------------------------------------------------------------------------------------------
 431+ D486              ; Handles all the input whilst in the market menu
 432+ D486 3E 4A        loop_eqshp_menu:        ld      a,c_Pressed_CursorUp
 433+ D488 CD 9D 90                             call    is_key_pressed
 434+ D48B CC A7 D4                             call    z,eqshp_UpPressed
 435+ D48E 3E 4C                                ld      a,c_Pressed_CursorDown
 436+ D490 CD 9D 90                             call    is_key_pressed
 437+ D493 CC C7 D4                             call    z,eqshp_DownPressed
 438+ D496 3E 08                                ld      a,c_Pressed_RollLeft
 439+ D498 CD 9D 90                             call    is_key_pressed
 440+ D49B CC F3 D4                             call    z,eqshp_LeftPressed
 441+ D49E 3E 0A                                ld      a,c_Pressed_RollRight
 442+ D4A0 CD 9D 90                             call    is_key_pressed
 443+ D4A3 CC 64 D5                             call    z,eqshp_RightPressed
 444+ D4A6 C9                                   ret
 445+ D4A7
 446+ D4A7              ;----------------------------------------------------------------------------------------------------------------------------------
 447+ D4A7 3A 8F C0     eqshp_UpPressed:        ld      a,(eqshp_selected_row)
 448+ D4AA FE 00                                cp      0
 449+ D4AC 28 0B                                jr      z,.check_scroll_up
 450+ D4AE CD 22 D1                             call    eqshp_lowlight_row
 451+ D4B1 21 8F C0                             ld      hl,eqshp_selected_row
 452+ D4B4 35                                   dec     (hl)
 453+ D4B5 CD 12 D1                             call    eqshp_highlight_row
 454+ D4B8 C9                                   ret
 455+ D4B9 3A 90 C0     .check_scroll_up:       ld      a,(eqshp_current_topItem)
 456+ D4BC FE 00                                cp      0
 457+ D4BE C8                                   ret     z
 458+ D4BF 3D                                   dec     a           ; chjange later to buffering step back 1
 459+ D4C0 32 90 C0                             ld      (eqshp_current_topItem),a
 460+ D4C3 CD A3 D3                             call    draw_eqship_items
 461+ D4C6 C9                                   ret
 462+ D4C7              ;----------------------------------------------------------------------------------------------------------------------------------
 463+ D4C7 3A 91 C0     eqshp_DownPressed:      ld      a,(eqshp_current_end)
 464+ D4CA 47                                   ld      b,a                             ; This check is if the current list is < one screen
 465+ D4CB 05                                   dec     b
 466+ D4CC 3A 8F C0                             ld      a,(eqshp_selected_row)
 467+ D4CF B8                                   cp      b
 468+ D4D0 C8                                   ret     z
 469+ D4D1 FE 11                                cp      17
 470+ D4D3 28 0B                                jr      z, .check_scroll_down
 471+ D4D5 CD 22 D1                             call    eqshp_lowlight_row
 472+ D4D8 21 8F C0                             ld      hl,eqshp_selected_row
 473+ D4DB 34                                   inc     (hl)
 474+ D4DC CD 12 D1                             call    eqshp_highlight_row
 475+ D4DF C9                                   ret
 476+ D4E0 47           .check_scroll_down:     ld      b,a
 477+ D4E1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 478+ D4E4 80                                   add     b
 479+ D4E5 3C                                   inc     a
 480+ D4E6 21 91 C0                             ld      hl,eqshp_current_end
 481+ D4E9                                      ReturnIfAGTEusng      (hl)
 481+ D4E9 BE          >                    cp    (hl)
 481+ D4EA D0          >                    ret	 nc
 482+ D4EB 21 90 C0     .can_scroll_down:       ld      hl,eqshp_current_topItem
 483+ D4EE 34                                   inc     (hl)
 484+ D4EF CD A3 D3                             call    draw_eqship_items
 485+ D4F2 C9                                   ret
 486+ D4F3              ;----------------------------------------------------------------------------------------------------------------------------------
 487+ D4F3 3A B8 93     eqshp_LeftPressed:      ld      a,(Galaxy)
 488+ D4F6                                      MMUSelectGalaxyA
 488+ D4F6 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 489+ D4F9 DD 21 D5 F4                          ld      ix,ShipEquipmentList
 490+ D4FD 3A 90 C0     .IsItFuel:              ld      a,(eqshp_current_topItem)   ; Can't refund fuel
 491+ D500 47                                   ld      b,a
 492+ D501 3A 8F C0                             ld      a,(eqshp_selected_row)
 493+ D504 80                                   add     b
 494+ D505 FE 00                                cp      0
 495+ D507 C8                                   ret     z
 496+ D508 4F           .FuelNotSelected:       ld      c,a
 497+ D509 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 498+ D50B 5F                                   ld      e,a
 499+ D50C ED 30                                mul
 500+ D50E DD 19                                add     ix,de
 501+ D510 DD 7E 07                             ld      a,(ix+7)
 502+ D513 FE 2D                                cp      "-"
 503+ D515 C8                                   ret     z
 504+ D516 79           .CheckIfMissle:         ld      a,c
 505+ D517 FE 01                                cp      EQ_MISSILE
 506+ D519 28 2B                                jr      z,.RefundMissle
 507+ D51B DD 5E 04     .RefundItemCash:        ld      e,(ix+4)
 508+ D51E DD 56 05                             ld      d,(ix+5)
 509+ D521 E5 C5                                push    hl,,bc
 510+ D523 CD 65 A0                             call    addDEtoCash         ; refund laser value
 511+ D526 C1 E1                                pop     hl,,bc
 512+ D528 3E 2D                                ld      a,"-"
 513+ D52A DD 77 07                             ld      (ix+7),a
 514+ D52D 21 32 97                             ld      hl,EquipmentFitted
 515+ D530 79                                   ld      a,c                 ; get back current laser ref
 516+ D531 ED 31                                add     hl,a
 517+ D533 36 00                                ld      (hl),0              ; remove laser from equipment
 518+ D535 CD 5D D4                             call    eqip_refesh_buffer
 519+ D538 DD 7E 09                             ld      a,(ix+9)
 520+ D53B FE FF                                cp      $FF
 521+ D53D C8                                   ret     z
 522+ D53E 21 F8 96     .ItsALaser              ld      hl,LaserList
 523+ D541 ED 31                                add     hl,a
 524+ D543 36 00                                ld      (hl),$00
 525+ D545 C9                                   ret
 526+ D546 DD 5E 04     .RefundMissle           ld      e,(ix+4)
 527+ D549 DD 56 05                             ld      d,(ix+5)
 528+ D54C E5 C5                                push    hl,,bc
 529+ D54E CD 65 A0                             call    addDEtoCash         ; refund laser value
 530+ D551 C1 E1                                pop     hl,,bc
 531+ D553 DD 7E 07                             ld      a,(ix+7)
 532+ D556 3D                                   dec     a
 533+ D557 FE 30                                cp      "0"
 534+ D559 20 02                                jr      nz,.NotAllSold
 535+ D55B 3E 2D        .AllSold:               ld      a,"-"
 536+ D55D DD 77 07     .NotAllSold:            ld      (ix+7),a
 537+ D560 CD 5D D4                             call    eqip_refesh_buffer
 538+ D563 C9                                   ret
 539+ D564              ;----------------------------------------------------------------------------------------------------------------------------------
 540+ D564 3A B8 93     eqshp_RightPressed:     ld      a,(Galaxy)
 541+ D567                                      MMUSelectGalaxyA
 541+ D567 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 542+ D56A DD 21 D5 F4                          ld      ix,ShipEquipmentList
 543+ D56E 3A 90 C0                             ld      a,(eqshp_current_topItem)
 544+ D571 47                                   ld      b,a
 545+ D572 3A 8F C0                             ld      a,(eqshp_selected_row)
 546+ D575 80                                   add     a,b
 547+ D576 FE 01                                cp      EQ_MISSILE
 548+ D578 20 0A                                jr      nz,.NotAMissileBuy
 549+ D57A 08           .ItsAMissile:           ex      af,af'
 550+ D57B 3E 34                                ld      a,"4"
 551+ D57D 32 96 D5                             ld      (.CompareCheck+1),a
 552+ D580 08                                   ex      af,af'
 553+ D581 C3 8B D5                             jp      .FindInTable
 554+ D584 08           .NotAMissileBuy:        ex      af,af'
 555+ D585 3E 2A                                ld      a,"*"
 556+ D587 32 96 D5                             ld      (.CompareCheck+1),a
 557+ D58A 08                                   ex      af,af'
 558+ D58B 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 559+ D58D 5F                                   ld      e,a
 560+ D58E ED 30                                mul
 561+ D590 DD 19                                add     ix,de
 562+ D592 DD 7E 07                             ld      a,(ix+7)
 563+ D595 FE 2A        .CompareCheck:          cp      "*"; not true for missles astyou can buy 1 to 4
 564+ D597 C8                                   ret     z
 565+ D598 47           .Purchasable:           ld      b,a
 566+ D599 DD 7E 06                             ld      a,(ix+6)
 567+ D59C FE 01                                cp      EQ_MISSILE
 568+ D59E 20 06                                jr      nz,.NotMissleMax
 569+ D5A0 21 82 93     .MissleQuanity:         ld      hl,NbrMissiles
 570+ D5A3 78                                   ld      a,b
 571+ D5A4 BE                                   cp      (hl)
 572+ D5A5 C8                                   ret     z
 573+ D5A6 4F           .NotMissleMax:          ld      c,a
 574+ D5A7 DD 7E 01                             ld      a,(ix+1)
 575+ D5AA FE FF                                cp      $FF
 576+ D5AC C8                                   ret     z
 577+ D5AD 2A F5 96     .CheckCash:             ld      hl,(Cash+2)
 578+ D5B0 7C                                   ld      a,h
 579+ D5B1 B5                                   or      l
 580+ D5B2 20 0F                                jr      nz,.MoreThanRequired
 581+ D5B4 2A F3 96                             ld      hl,(Cash)
 582+ D5B7 7C                                   ld      a,h
 583+ D5B8 FE 00                                cp      0
 584+ D5BA 20 07                                jr      nz,.MoreThanRequired
 585+ D5BC DD 7E 02                             ld      a,(ix+2)
 586+ D5BF BD                                   cp      l
 587+ D5C0 30 01                                jr      nc,.MoreThanRequired
 588+ D5C2 C9                                   ret                         ; Insufficient Funds
 589+ D5C3 DD 7E 06     .MoreThanRequired:      ld      a,(ix+6)
 590+ D5C6 FE 00                                cp      0
 591+ D5C8 28 15                                jr      z,.MaxFuelOut
 592+ D5CA FE 01                                cp      1
 593+ D5CC 28 1B                                jr      z,.AddMissle
 594+ D5CE                                      JumpIfAGTENusng  EQ_FRONT_PULSE,.AddLaser
 594+ D5CE FE 0A       >                        cp     EQ_FRONT_PULSE
 594+ D5D0 D2 F3 D5    >                        jp		nc,.AddLaser
 595+ D5D3 21 32 97     .AddNormalItem:         ld      hl,EquipmentFitted
 596+ D5D6 ED 31                                add     hl,a
 597+ D5D8 36 FF                                ld      (hl),$FF
 598+ D5DA 3E 2A                                ld      a,"*"
 599+ D5DC C3 41 D6                             jp      .AddedItem
 600+ D5DF              .MaxFuelOut:            MaxFuelMacro
 600+ D5DF 3E 46       >						ld		a,MaxFuelLevel
 600+ D5E1 32 F7 96    >						ld		(Fuel),a
 601+ D5E4 3E 2A                                ld      a,"*"
 602+ D5E6 C3 41 D6                             jp      .AddedItem
 603+ D5E9 21 82 93     .AddMissle:             ld      hl,NbrMissiles
 604+ D5EC 34                                   inc     (hl)
 605+ D5ED 7E                                   ld      a,(hl)
 606+ D5EE C6 30                                add     "0"
 607+ D5F0 C3 41 D6                             jp      .AddedItem
 608+ D5F3 DD 7E 08     .AddLaser:              ld      a,(ix+8)            ; Get facing
 609+ D5F6 21 F8 96                             ld      hl,LaserList
 610+ D5F9 ED 31                                add     hl,a
 611+ D5FB 7E                                   ld      a,(hl)              ; get laser list quick ref value
 612+ D5FC FE 00                                cp      0
 613+ D5FE 28 29                                jr      z,.BuyLaser
 614+ D600              .LargeCargoBay: ;TODO
 615+ D600 4F           .RefundExistingLaser:   ld      c,a                 ; retain current laser nbr
 616+ D601 21 D5 F4                             ld      hl,ShipEquipmentList
 617+ D604 16 10                                ld      d,ShipEquipTableRowLen
 618+ D606 5F                                   ld      e,a
 619+ D607 ED 30                                mul
 620+ D609 19                                   add     hl,de               ; now we have the row for the current laser
 621+ D60A 3E 04                                ld      a,4
 622+ D60C ED 31                                add     hl,a
 623+ D60E 7E                                   ld      a,(hl)
 624+ D60F 5F                                   ld      e,a
 625+ D610 23                                   inc     hl
 626+ D611 7E                                   ld      a,(hl)
 627+ D612 57                                   ld      d,a
 628+ D613 E5 C5                                push    hl,,bc
 629+ D615 CD 65 A0                             call    addDEtoCash         ; refund laser value
 630+ D618 C1 E1                                pop     hl,,bc
 631+ D61A 3E 02                                ld      a,2
 632+ D61C ED 31                                add     hl,a
 633+ D61E 3E 2D                                ld      a,"-"
 634+ D620 77                                   ld      (hl),a              ; clear on ship equipment
 635+ D621 21 32 97                             ld      hl,EquipmentFitted
 636+ D624 79                                   ld      a,c                 ; get back current laser ref
 637+ D625 ED 31                                add     hl,a
 638+ D627 36 00                                ld      (hl),0              ; remove laser from equipment
 639+ D629 21 32 97     .BuyLaser:              ld      hl,EquipmentFitted
 640+ D62C DD 7E 06                             ld      a,(ix+6)
 641+ D62F ED 31                                add     hl,a
 642+ D631 36 FF                                ld      (hl),$FF
 643+ D633 DD 7E 08                             ld      a,(ix+8)
 644+ D636 21 F8 96                             ld      hl,LaserList
 645+ D639 ED 31                                add     hl,a
 646+ D63B DD 7E 06                             ld      a,(ix+6)
 647+ D63E 77                                   ld      (hl),a              ; mark laser list with type
 648+ D63F 3E 2A                                ld      a,"*"
 649+ D641 DD 77 07     .AddedItem              ld      (ix+7),a
 650+ D644 DD 5E 04                             ld      e,(ix+4)
 651+ D647 DD 56 05                             ld      d,(ix+5)
 652+ D64A CD 78 A0                             call    subDEfromCash
 653+ D64D CD 5D D4                             call    eqip_refesh_buffer
 654+ D650 C9                                   ret
# file closed: ./Menus/equip_ship_menu.asm
1202  D651
1203  D651
1204  D651                  SLOT    LaunchShipAddr
1205  D651                  PAGE    BankLaunchShip
1206  D651                  ORG     LaunchShipAddr
1207  C000                  INCLUDE "./Transitions/launch_ship.asm"
# file opened: ./Transitions/launch_ship.asm
   1+ C000 4C 61 75 6E  launchship_page_marker  DB "LaunchShipPG65"
   1+ C004 63 68 53 68
   1+ C008 69 70 50 47
   1+ C00C 36 35
   2+ C00E
   3+ C00E 7E 3F 04 02  launchdraw_table        DB $7E,$3F, $04,$02, $66            ; purple blue
   3+ C012 66
   4+ C013              launchdraw_rowsize      equ $-launchdraw_table
   5+ C013 7C 3E 08 04                          DB $7C,$3E, $08,$04, $66
   5+ C017 66
   6+ C018 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $66
   6+ C01C 66
   7+ C01D 78 3C 10 08                          DB $78,$3C, $10,$08, $66
   7+ C021 66
   8+ C022 76 3B 14 0A                          DB $76,$3B, $14,$0A, $66
   8+ C026 66
   9+ C027 74 3A 18 0C                          DB $74,$3A, $18,$0C, $66
   9+ C02B 66
  10+ C02C 70 38 20 10                          DB $70,$38, $20,$10, $66
  10+ C030 66
  11+ C031 6C 36 28 14                          DB $6C,$36, $28,$14, $05            ; Black Blue
  11+ C035 05
  12+ C036 68 34 30 18                          DB $68,$34, $30,$18, $05
  12+ C03A 05
  13+ C03B 64 32 38 1C                          DB $64,$32, $38,$1C, $05
  13+ C03F 05
  14+ C040 60 30 40 20                          DB $60,$30, $40,$20, $05
  14+ C044 05
  15+ C045 5C 2E 48 24                          DB $5C,$2E, $48,$24, $05            ; Dark Blue
  15+ C049 05
  16+ C04A 58 2C 50 28                          DB $58,$2C, $50,$28, $02
  16+ C04E 02
  17+ C04F 54 2A 58 2C                          DB $54,$2A, $58,$2C, $02
  17+ C053 02
  18+ C054 50 28 60 30                          DB $50,$28, $60,$30, $02
  18+ C058 02
  19+ C059 4C 26 68 34                          DB $4C,$26, $68,$34, $02
  19+ C05D 02
  20+ C05E 46 23 74 3A                          DB $46,$23, $74,$3A, $02
  20+ C062 02
  21+ C063 40 20 80 40                          DB $40,$20, $80,$40, $02
  21+ C067 02
  22+ C068 38 1C 90 48                          DB $38,$1C, $90,$48, $01            ;Very Dark Blue
  22+ C06C 01
  23+ C06D 30 18 A0 50                          DB $30,$18, $A0,$50, $01
  23+ C071 01
  24+ C072 26 13 B4 5A                          DB $26,$13, $B4,$5A, $01
  24+ C076 01
  25+ C077 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $01
  25+ C07B 01
  26+ C07C 10 08 E0 70                          DB $10,$08, $E0,$70, $00            ;Black
  26+ C080 00
  27+ C081 02 01 FC 7E                          DB $02,$01, $FC,$7E, $00
  27+ C085 00
  28+ C086 FF                                   DB $FF
  29+ C087
  30+ C087              launchtablesize         EQU ($ - launchdraw_table)/launchdraw_rowsize
  31+ C087
  32+ C087 7E 3F 04 02  dockingdraw_table       DB $7E,$3F, $04,$02, $00            ; purple blue
  32+ C08B 00
  33+ C08C              dockingdraw_rowsize     equ $-dockingdraw_table
  34+ C08C 7C 3E 08 04                          DB $7C,$3E, $08,$04, $00
  34+ C090 00
  35+ C091 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $00
  35+ C095 00
  36+ C096 78 3C 10 08                          DB $78,$3C, $10,$08, $04
  36+ C09A 04
  37+ C09B 76 3B 14 0A                          DB $76,$3B, $14,$0A, $04
  37+ C09F 04
  38+ C0A0 74 3A 18 0C                          DB $74,$3A, $18,$0C, $04
  38+ C0A4 04
  39+ C0A5 70 38 20 10                          DB $70,$38, $20,$10, $21
  39+ C0A9 21
  40+ C0AA 6C 36 28 14                          DB $6C,$36, $28,$14, $21            ; Black Blue
  40+ C0AE 21
  41+ C0AF 68 34 30 18                          DB $68,$34, $30,$18, $21
  41+ C0B3 21
  42+ C0B4 64 32 38 1C                          DB $64,$32, $38,$1C, $25
  42+ C0B8 25
  43+ C0B9 60 30 40 20                          DB $60,$30, $40,$20, $25
  43+ C0BD 25
  44+ C0BE 5C 2E 48 24                          DB $5C,$2E, $48,$24, $25            ; Dark Blue
  44+ C0C2 25
  45+ C0C3 58 2C 50 28                          DB $58,$2C, $50,$28, $25
  45+ C0C7 25
  46+ C0C8 54 2A 58 2C                          DB $54,$2A, $58,$2C, $25
  46+ C0CC 25
  47+ C0CD 50 28 60 30                          DB $50,$28, $60,$30, $4C
  47+ C0D1 4C
  48+ C0D2 4C 26 68 34                          DB $4C,$26, $68,$34, $4C
  48+ C0D6 4C
  49+ C0D7 46 23 74 3A                          DB $46,$23, $74,$3A, $4C
  49+ C0DB 4C
  50+ C0DC 40 20 80 40                          DB $40,$20, $80,$40, $4C
  50+ C0E0 4C
  51+ C0E1 38 1C 90 48                          DB $38,$1C, $90,$48, $6D            ;Very Dark Blue
  51+ C0E5 6D
  52+ C0E6 30 18 A0 50                          DB $30,$18, $A0,$50, $6D
  52+ C0EA 6D
  53+ C0EB 26 13 B4 5A                          DB $26,$13, $B4,$5A, $6D
  53+ C0EF 6D
  54+ C0F0 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $6D
  54+ C0F4 6D
  55+ C0F5 10 08 E0 70                          DB $10,$08, $E0,$70, $92            ;Black
  55+ C0F9 92
  56+ C0FA 02 01 FC 7E                          DB $02,$01, $FC,$7E, $92
  56+ C0FE 92
  57+ C0FF FF                                   DB $FF
  58+ C100
  59+ C100              dockingtablesize         EQU ($ - dockingdraw_table)/dockingdraw_rowsize
  60+ C100
  61+ C100              init_countdown          EQU $FF
  62+ C100 00           launch_countdown        DB  $0000
  63+ C101 0E C0        launch_table_idx        DW launchdraw_table
  64+ C103 87 C0        docking_table_idx       DW dockingdraw_table
  65+ C105 00           current_offsetX         db 0
  66+ C106 00           current_offsetY         db 0
  67+ C107
  68+ C107
  69+ C107              LaunchTubeEdges         MMUSelectLayer2
  69+ C107 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  70+ C10B 01 00 00                             ld      bc,$0000
  71+ C10E 11 92 01                             ld      de,$0192
  72+ C111 78           .drawLoop1              ld      a,b
  73+ C112 FE 80                                cp      128
  74+ C114 28 25                                jr      z,.DoneEdge
  75+ C116 F5                                   push    af
  76+ C117 C5 D5 C5 D5                          push    bc,,de,,bc,,de
  77+ C11B CD 55 E2                             call    l2_draw_horz_dma_bank           ;"bc = left side row,col, d = length, e = color"
  78+ C11E D1 C1                                pop     bc,,de
  79+ C120 3E FF                                ld      a,$FF
  80+ C122 92                                   sub     d
  81+ C123 4F                                   ld      c,a
  82+ C124 0C                                   inc     c
  83+ C125 CD 55 E2                             call    l2_draw_horz_dma_bank
  84+ C128 D1 C1                                pop     bc,,de
  85+ C12A 78                                   ld      a,b
  86+ C12B FE 40                                cp      64
  87+ C12D 30 06                                jr      nc,.ReduceLoop
  88+ C12F 14                                   inc     d
  89+ C130 14                                   inc     d
  90+ C131 F1                                   pop     af
  91+ C132 04                                   inc     b
  92+ C133 18 DC                                jr      .drawLoop1
  93+ C135 15           .ReduceLoop:            dec     d
  94+ C136 15                                   dec     d
  95+ C137 F1                                   pop     af
  96+ C138 04                                   inc     b
  97+ C139 18 D6                                jr      .drawLoop1
  98+ C13B 3E 80        .DoneEdge:              ld      a,$80
  99+ C13D 01 00 00                             ld      bc,$0000                        ; Top Left
 100+ C140 11 FF 80                             ld      de,$80FF                        ; Bottom Right
 101+ C143 CD 0B E6                             call    l2_draw_diagonal
 102+ C146 3E 80                                ld      a,$80
 103+ C148 01 00 80                             ld      bc,$8000                        ; Botom Left
 104+ C14B 11 FF 00                             ld      de,$00FF                        ; Top Right
 105+ C14E CD 0B E6                             call    l2_draw_diagonal
 106+ C151
 107+ C151 01 00 00                             ld      bc,$0000
 108+ C154 11 80 00                             ld      DE,$0080
 109+ C157 26 60                                ld      h,$60
 110+ C159 2E 55                                ld      l,$55
 111+ C15B C9                                   ret
 112+ C15C
 113+ C15C              LaunchConsole:          MMUSelectConsoleBank                    ; Draw Console
 113+ C15C ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
 114+ C160 21 00 50                             ld      hl,ScreenL1Bottom
 115+ C163 11 00 E0                             ld      de,ConsoleImageData
 116+ C166 01 00 08                             ld      bc, ScreenL1BottomLen
 117+ C169 CD 3D 8F                             call    memcopy_dma
 118+ C16C 21 00 5A                             ld      hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
 119+ C16F 11 00 E8                             ld      de,ConsoleAttributes
 120+ C172 01 00 01                             ld      bc, ScreenL1AttrBtmLen
 121+ C175 CD 3D 8F                             call    memcopy_dma
 122+ C178 C9                                   ret
 123+ C179
 124+ C179              CoriloisStation         equ     13
 125+ C179
 126+ C179
 127+ C179              draw_launch_ship:       MMUSelectLayer1
 127+ C179 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 128+ C17D CD 80 E0                             call    l1_cls
 129+ C180 CD 9A E0                             call    l1_attr_cls
 130+ C183                                      MMUSelectSpriteBank
 130+ C183 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 131+ C187 CD 6E E4                             call    sprite_cls_cursors
 132+ C18A                                      MMUSelectLayer2
 132+ C18A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 133+ C18E CD 02 E0                             call    asm_l2_double_buffer_on
 134+ C191 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 135+ C193 32 72 E0                             ld      (l2_cls_byte),a
 136+ C196 CD 92 E0                             call    l2_set_color_upper2
 137+ C199 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 138+ C19B 32 72 E0                             ld      (l2_cls_byte),a
 139+ C19E CD BE E0                             call    l2_cls_lower_third
 140+ C1A1 CD 07 C1                             call    LaunchTubeEdges
 141+ C1A4 CD 5C C1                             call    LaunchConsole
 142+ C1A7              .NextBuffer:            MMUSelectLayer2
 142+ C1A7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 143+ C1AB CD DD E0                             call    l2_flip_buffers
 144+ C1AE 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 145+ C1B0 32 72 E0                             ld      (l2_cls_byte),a
 146+ C1B3 CD 92 E0                             call    l2_set_color_upper2
 147+ C1B6 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 148+ C1B8 32 72 E0                             ld      (l2_cls_byte),a
 149+ C1BB CD BE E0                             call    l2_cls_lower_third
 150+ C1BE CD 07 C1                             call    LaunchTubeEdges
 151+ C1C1 CD 5C C1                             call    LaunchConsole
 152+ C1C4 3E FF        .SetUpTimers:           ld      a,init_countdown
 153+ C1C6 32 00 C1                             ld      (launch_countdown),a
 154+ C1C9 21 0E C0                             ld      hl,launchdraw_table
 155+ C1CC 22 01 C1                             ld      (launch_table_idx),hl
 156+ C1CF AF                                   xor     a
 157+ C1D0 32 05 C1                             ld      (current_offsetX),a
 158+ C1D3 32 06 C1                             ld      (current_offsetY),a
 159+ C1D6              .SetupGalaxy:           MaxThrottle
 159+ C1D6 3A AF 92    >                        ld      a,(SHIPMAXSPEED)
 159+ C1D9 32 B0 92    >                        ld      (DELTA),a
 159+ C1DC 57          >                        ld      d,a
 159+ C1DD 1E 04       >                        ld      e,4
 159+ C1DF ED 30       >                        mul
 159+ C1E1 ED 53 B1 92 >                        ld      (DELT4Lo),de
 160+ C1E5                                      ZeroThrottle; DEBUG
 160+ C1E5 AF          >                        xor     a
 160+ C1E6 32 B0 92    >                        ld      (DELTA),a
 160+ C1E9 32 B1 92    >                        ld      (DELT4Lo),a
 160+ C1EC 32 B2 92    >                        ld      (DELT4Lo+1),a
 161+ C1EF              ; To launch we need to set docked flag to transition FE and at teh end of the transition set to FD to rebuild universe
 162+ C1EF 3E FE                                ld      a,$FE
 163+ C1F1 32 C5 92                             ld      (DockedFlag),a
 164+ C1F4 C9                                   ret
 165+ C1F5
 166+ C1F5
 167+ C1F5              draw_docking_ship:      MMUSelectLayer1
 167+ C1F5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 168+ C1F9 CD 80 E0                             call    l1_cls
 169+ C1FC CD 9A E0                             call    l1_attr_cls
 170+ C1FF                                      MMUSelectSpriteBank
 170+ C1FF ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 171+ C203 CD 6E E4                             call    sprite_cls_cursors
 172+ C206                                      MMUSelectLayer2
 172+ C206 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 173+ C20A CD 02 E0                             call    asm_l2_double_buffer_on
 174+ C20D 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 175+ C20F 32 72 E0                             ld      (l2_cls_byte),a
 176+ C212 CD 92 E0                             call    l2_set_color_upper2
 177+ C215 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 178+ C217 32 72 E0                             ld      (l2_cls_byte),a
 179+ C21A CD BE E0                             call    l2_cls_lower_third
 180+ C21D CD 07 C1                             call    LaunchTubeEdges
 181+ C220 CD 5C C1                             call    LaunchConsole
 182+ C223              .NextBuffer:            MMUSelectLayer2
 182+ C223 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 183+ C227 CD DD E0                             call    l2_flip_buffers
 184+ C22A 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 185+ C22C 32 72 E0                             ld      (l2_cls_byte),a
 186+ C22F CD 92 E0                             call    l2_set_color_upper2
 187+ C232 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 188+ C234 32 72 E0                             ld      (l2_cls_byte),a
 189+ C237 CD BE E0                             call    l2_cls_lower_third
 190+ C23A CD 07 C1                             call    LaunchTubeEdges
 191+ C23D CD 5C C1                             call    LaunchConsole
 192+ C240 3E FF        .SetUpTimers:           ld      a,init_countdown
 193+ C242 32 00 C1                             ld      (launch_countdown),a
 194+ C245 21 87 C0                             ld      hl,dockingdraw_table
 195+ C248 22 03 C1                             ld      (docking_table_idx),hl
 196+ C24B AF                                   xor     a
 197+ C24C 32 05 C1                             ld      (current_offsetX),a
 198+ C24F 32 06 C1                             ld      (current_offsetY),a
 199+ C252 AF           .SetupGalaxy:           xor     a ; palcehodler as it would cause next macro to fail re initialise all universe banks
 200+ C253                                      ZeroThrottle
 200+ C253 AF          >                        xor     a
 200+ C254 32 B0 92    >                        ld      (DELTA),a
 200+ C257 32 B1 92    >                        ld      (DELT4Lo),a
 200+ C25A 32 B2 92    >                        ld      (DELT4Lo+1),a
 201+ C25D 3E FF                                ld      a,$FF
 202+ C25F 32 C5 92                             ld      (DockedFlag),a ; we don't kill off shipts as we kill them on launch
 203+ C262 C9                                   ret
 204+ C263
 205+ C263 CD 07 C1     loop_launch_ship:       call    LaunchTubeEdges
 206+ C266 3E FF                                ld      a,init_countdown
 207+ C268 32 00 C1                             ld      (launch_countdown),a
 208+ C26B 2A 01 C1                             ld      hl,(launch_table_idx)
 209+ C26E 4E                                   ld      c,(hl)
 210+ C26F 79                                   ld      a,c
 211+ C270 FE FF                                cp      $FF
 212+ C272 28 1E                                jr      z,.FinishedLaunch
 213+ C274 23                                   inc     hl
 214+ C275 46                                   ld      b,(hl)                 ; bc = top left
 215+ C276 23                                   inc     hl
 216+ C277 5E                                   ld      e,(hl)
 217+ C278 23                                   inc     hl
 218+ C279 56                                   ld      d,(hl)                 ;de = width and height
 219+ C27A 23                                   inc     hl
 220+ C27B 7E                                   ld      a,(hl)                 ; a = colour
 221+ C27C 23                                   inc     hl
 222+ C27D 22 01 C1                             ld      (launch_table_idx),hl
 223+ C280 67                                   ld      h,a
 224+ C281 C5 D5                                push    bc,,de
 225+ C283                                      MMUSelectLayer2
 225+ C283 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 226+ C287 CD E6 E1                             call    l2_draw_fill_box        ; ; "l2_draw_fill_box bc=rowcol, de=heightwidth h=color"
 227+ C28A D1 C1                                pop     bc,,de
 228+ C28C 3E 80                                ld      a,$80
 229+ C28E CD F6 E1                             call    l2_draw_box             ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
 230+ C291 C9                                   ret
 231+ C292 3E FD        .FinishedLaunch:        ld      a,$FD                   ; now seed that we need a universe rebuild post launch
 232+ C294 32 C5 92                             ld      (DockedFlag),a
 233+ C297 C9                                   ret
 234+ C298
 235+ C298 CD 07 C1     loop_docking_ship:      call    LaunchTubeEdges
 236+ C29B 3E FF                                ld      a,init_countdown
 237+ C29D 32 00 C1                             ld      (launch_countdown),a
 238+ C2A0 2A 03 C1                             ld      hl,(docking_table_idx)
 239+ C2A3 4E                                   ld      c,(hl)
 240+ C2A4 79                                   ld      a,c
 241+ C2A5 FE FF                                cp      $FF
 242+ C2A7 28 1E                                jr      z,.FinishedDocking
 243+ C2A9 23                                   inc     hl
 244+ C2AA 46                                   ld      b,(hl)                 ; bc = top left
 245+ C2AB 23                                   inc     hl
 246+ C2AC 5E                                   ld      e,(hl)
 247+ C2AD 23                                   inc     hl
 248+ C2AE 56                                   ld      d,(hl)                 ;de = width and height
 249+ C2AF 23                                   inc     hl
 250+ C2B0 7E                                   ld      a,(hl)
 251+ C2B1 23                                   inc     hl
 252+ C2B2 22 03 C1                             ld      (docking_table_idx),hl
 253+ C2B5 67                                   ld      h,a
 254+ C2B6 C5 D5                                push    bc,,de
 255+ C2B8                                      MMUSelectLayer2
 255+ C2B8 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 256+ C2BC CD E6 E1                             call    l2_draw_fill_box
 257+ C2BF D1 C1                                pop     bc,,de
 258+ C2C1 3E 80                                ld      a,$80
 259+ C2C3 CD F6 E1                             call    l2_draw_box
 260+ C2C6 C9                                   ret
 261+ C2C7              .FinishedDocking        ForceTransition ScreenStatus              ; Force move to status screen
 261+ C2C7 3E 04       >                        ld      a,ScreenStatus
 261+ C2C9 32 27 86    >                        ld      (ScreenTransitionForced), a
 262+ C2CC C9                                   ret
 263+ C2CD
 264+ C2CD
 265+ C2CD
# file closed: ./Transitions/launch_ship.asm
1208  C2CD
1209  C2CD              ; Bank 70  ------------------------------------------------------------------------------------------------------------------------
1210  C2CD                  SLOT    UniverseBankAddr
1211  C2CD                  PAGE    BankUNIVDATA0
1212  C2CD              	ORG	    UniverseBankAddr,BankUNIVDATA0
1213  C000                  INCLUDE "./Universe/univ_ship_data.asm"
# file opened: ./Universe/univ_ship_data.asm
   1+ C000              ; In  flight ship data tables
   2+ C000              ; In  flight ship data tables
   3+ C000              ; There can be upto &12 objects in flight.
   4+ C000              ; To avoid hassle of memory heap managment, the free list
   5+ C000              ; will correspond to a memory bank offset so data will be held in
   6+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   7+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   8+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
   9+ C000              ; This means each gets its own line list, inwork etc
  10+ C000
  11+ C000              ; "Runtime Ship Data paged into in Bank 7"
  12+ C000 55 6E 69 76  StartOfUniv:        DB "Universe PG"
  12+ C004 65 72 73 65
  12+ C008 20 50 47
  13+ C00B 58           StartOfUnivN:       DB "X"
  14+ C00C              ; NOTE we can cheat and pre allocate segs just using a DS for now
  15+ C00C
  16+ C00C              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  17+ C00C              ; Universe map substibute for INWK
  18+ C00C              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  19+ C00C                                      INCLUDE "./Variables/ShipPosVars.asm"
# file opened: ././Variables/ShipPosVars.asm
   1++C00C              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C00C 00           UBnKxlo                     DB  0                       ; INWK+0
   3++C00D 00           UBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   4++C00E 00           UBnKxsgn                    DB  0                       ; INWK+2
   5++C00F 00           UBnKylo                     DB  0                       ; INWK+3 \ ylo
   6++C010 00           UBnKyhi                     DB  0                       ; INWK+4 \ yHi
   7++C011 00           UBnKysgn                    DB  0                       ; INWK +5
   8++C012 00           UBnKzlo                     DB  0                       ; INWK +6
   9++C013 00           UBnKzhi                     DB  0                       ; INWK +7
  10++C014 00           UBnKzsgn                    DB  0                       ; INWK +8
  11++C015
  12++C015              ;; REDUDANT INWKxlo                     equ UBnKxlo
  13++C015              ;; REDUDANT INWKxhi                     equ UBnKxhi                 ; there are hi medium low as some times these are 24 bit
  14++C015              ;; REDUDANT INWKxsgn                    equ UBnKzsgn                ; INWK+2
  15++C015              ;; REDUDANT INWKyLo                     equ UBnKylo                 ; INWK+3 \ ylo
  16++C015              ;; REDUDANT INWKyhi                     equ UbnKyhi                 ; Y Hi???
  17++C015              ;; REDUDANT INWKysgn                    equ UBnKysgn                ; INWK +5
  18++C015              ;; REDUDANT INWKzlo                     equ UBnKzlo                 ; INWK +6
  19++C015              ;; REDUDANT INWKzhi                     equ UBnKzhi                 ; INWK +7
  20++C015              ;; REDUDANT INWKzsgn                    equ UBnKzsgn                ; INWK +8
# file closed: ././Variables/ShipPosVars.asm
  20+ C015                                      INCLUDE "./Variables/RotationMatrixVars.asm"
# file opened: ././Variables/RotationMatrixVars.asm
   1++C015              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
   2++C015              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
   3++C015 00 00        UBnkrotmatSidevX            DW  0                       ; INWK +21
   4++C017              UBnkrotmatSidev             equ UBnkrotmatSidevX
   5++C017 00 00        UBnkrotmatSidevY            DW  0                       ; INWK +23
   6++C019 00 00        UBnkrotmatSidevZ            DW  0                       ; INWK +25
   7++C01B 00 00        UBnkrotmatRoofvX            DW  0                       ; INWK +15
   8++C01D              UBnkrotmatRoofv             equ UBnkrotmatRoofvX
   9++C01D 00 00        UBnkrotmatRoofvY            DW  0                       ; INWK +17
  10++C01F 00 00        UBnkrotmatRoofvZ            DW  0                       ; INWK +19
  11++C021 00 00        UBnkrotmatNosevX            DW  0                       ; INWK +9
  12++C023              UBnkrotmatNosev             EQU UBnkrotmatNosevX
  13++C023 00 00        UBnkrotmatNosevY            DW  0                       ; INWK +11
  14++C025 00 00        UBnkrotmatNosevZ            DW  0                       ; INWK +13
  15++C027
# file closed: ././Variables/RotationMatrixVars.asm
  21+ C027                                      INCLUDE "./Variables/AIRuntimeData.asm"
# file opened: ././Variables/AIRuntimeData.asm
   1++C027              ; -- Ship AI data
   2++C027 00           UBnKShipType                DB  0
   3++C028 00           UBnKspeed                   DB  0                       ; INWK +27
   4++C029 00           UBnKAccel                   DB  0                       ; INWK +28
   5++C02A 00           UBnKRotXCounter             DB  0                       ; INWK +29
   6++C02B 00           UBnKRotZCounter             DB  0                       ; INWK +30
   7++C02C 00           UBnKexplDsp                 DB  0                       ; INWK +31 clear exploding/display state|missiles
   8++C02D              ; Flags work as follows:
   9++C02D              ; 7 - Flag ship to be killed with debris
  10++C02D              ; 6 - Invisible/Erase (also mentions Laser Firing?)
  11++C02D              ; 5 - Ship is exploding if set
  12++C02D              ; 4 -
  13++C02D              ; 3 - Display state - Plot as a Dot
  14++C02D              ; 2 - Nbr of Missiles bit 2
  15++C02D              ; 1 - Nbr of Missiles bit 1
  16++C02D              ; 0 - Nbr of Missiles bit 0
  17++C02D 00           UBnkaiatkecm                DB  0                       ; INWK +32 ai_attack_univ_ecm i.e. AI type
  18++C02E 00           UBnkCam0yLo                 DB  0                       ; INWK +33 ????
  19++C02F 00           UBnkCam0yHi                 DB  0                       ; INWK +34?????
  20++C030 00           UbnKEnergy                  DB  0                       ; INWK +35
  21++C031              ; Flags work as follows:
  22++C031              ;Bit	Description
  23++C031              ;#0	Trader flag         * 0 = not a trader  * 1 = trader
  24++C031              ;                       80% of traders are peaceful and mind their own business plying their trade between the planet and space station, but 20% of them moonlight as bounty hunters (see bit #1)
  25++C031              ;                       Ships that are traders: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
  26++C031              ;#1 Bounty hunter flag  * 0 = not a bounty hunter* 1 = bounty hunter
  27++C031              ;                       If we are a fugitive or a serious offender and we bump into a bounty hunter, they will become hostile and attack us (see bit #2)
  28++C031              ;                       Ships that are bounty hunters: Viper, Fer-de-lance
  29++C031              ;#2	Hostile flag        * 0 = not hostile  * 1 = hostile
  30++C031              ;                       Hostile ships will attack us on sight; there are quite a few of them
  31++C031              ;                       Ships that are hostile: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Worm, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid, Thargon, Constrictor
  32++C031              ;#3	Pirate flag         * 0 = not a pirate * 1 = pirate
  33++C031              ;                       Hostile pirates will attack us on sight, but once we get inside the space station safe zone, they will stop
  34++C031              ;                       Ships that are pirates: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid
  35++C031              ;#4	Docking flag        * 0 = not docking * 1 = docking
  36++C031              ;                       Traders with their docking flag set fly towards the space station to try to dock, otherwise they aim for the planet
  37++C031              ;                       This flag is randomly set for traders when they are spawned
  38++C031              ;                       Ships that can be docking: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
  39++C031              ;#5	Innocent bystander  * 0 = normal * 1 = innocent bystander
  40++C031              ;                       If we attack an innocent ship within the space station safe zone, then the station will get angry with us and start spawning cops
  41++C031              ;                       Ships that are innocent bystanders: Shuttle, Transporter, Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Cougar
  42++C031              ;#6	Cop flag            * 0 = not a cop * 1 = cop
  43++C031              ;                       If we destroy a cop, then we instantly become a fugitive (the Transporter isn't actually a cop, but it's clearly under police protection)
  44++C031              ;                       Ships that are cops: Viper, Transporter
  45++C031              ;#7	Scooped, docked, escape pod flag
  46++C031              ;                       For spawned ships, this flag indicates that the ship been scooped or has docked (bit 7 is always clear on spawning)
  47++C031              ;                       For blueprints, this flag indicates whether the ship type has an escape pod fitted, so it can launch it when in dire straits
  48++C031              ;                       Ships that have escape pods: Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Viper, Mamba, Krait, Adder, Cobra Mk I, Cobra Mk III (pirate), Asp Mk II, Python (pirate), Fer-de-lance
  49++C031
# file closed: ././Variables/AIRuntimeData.asm
  22+ C031
  23+ C031              ; Orientation Matrix [nosev x y z ] nose vector ( forward) 19 to 26
  24+ C031              ;                    [roofv x y z ] roof vector (up)
  25+ C031              ;                    [sidev x y z ] side vector (right)
  26+ C031              ;;rotXCounter                 equ UBnkrotXCounter         ; INWK +29
  27+ C031              ;;rotZCounter                 equ UBnkrotZCounter         ; INWK +30UBnkDrawCam0xLo   DB  0               ; XX18+0
  28+ C031 00           univRAT      DB  0               ; 99
  29+ C032 00           univRAT2     DB  0               ; 9A
  30+ C033 00           univRAT2Val  DB  0               ; 9A
  31+ C034
  32+ C034                                      INCLUDE "./Variables/XX16Vars.asm"
# file opened: ././Variables/XX16Vars.asm
   1++C034              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C034 00 00        UBnkTransmatSidevX          DW  0               ; XX16+0
   3++C036              UBnkTransmatSidev           EQU UBnkTransmatSidevX
   4++C036 00 00        UBnkTransmatSidevY          DW 0                ; XX16+2
   5++C038 00 00        UBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C03A 00 00        UBnkTransmatRoofvX          DW 0
   7++C03C              UBnkTransmatRoofv           EQU UBnkTransmatRoofvX
   8++C03C 00 00        UBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C03E 00 00        UBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C040 00 00        UBnkTransmatNosevX          DW 0
  11++C042              UBnkTransmatNosev           EQU UBnkTransmatNosevX
  12++C042 00 00        UBnkTransmatNosevY          DW 0                ; XX16+2
  13++C044 00 00        UBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C046 00 00        UbnkTransmatTransX          DW 0
  15++C048 00 00        UbnkTransmatTransY          DW 0
  16++C04A 00 00        UbnkTransmatTransZ          DW 0
  17++C04C              XX16                        equ UBnkTransmatSidev
  18++C04C              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C04C 00 00        UbnkTransInvRow0x0          DW 0
  20++C04E 00 00        UbnkTransInvRow0x1          DW 0
  21++C050 00 00        UbnkTransInvRow0x2          DW 0
  22++C052 00 00        UbnkTransInvRow0x3          DW 0
  23++C054 00 00        UbnkTransInvRow1y0          DW 0
  24++C056 00 00        UbnkTransInvRow1y1          DW 0
  25++C058 00 00        UbnkTransInvRow1y2          DW 0
  26++C05A 00 00        UbnkTransInvRow1y3          DW 0
  27++C05C 00 00        UbnkTransInvRow2z0          DW 0
  28++C05E 00 00        UbnkTransInvRow2z1          DW 0
  29++C060 00 00        UbnkTransInvRow2z2          DW 0
  30++C062 00 00        UbnkTransInvRow2z3          DW 0
  31++C064
  32++C064              XX16Inv             equ UbnkTransInvRow0x0
  33++C064
# file closed: ././Variables/XX16Vars.asm
  33+ C064                                      INCLUDE "./Variables/XX25Vars.asm"
# file opened: ././Variables/XX25Vars.asm
   1++C064              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C064 00           UbnkProjxLo                 DB  0
   3++C065 00           UbnkProjxHi                 DB  0
   4++C066 00           UbnkProjxSgn                DB  0
   5++C067              UbnkProjx                   EQU UbnkProjxLo
   6++C067 00           UbnkProjyLo                 DB  0
   7++C068 00           UbnkProjyHi                 DB  0
   8++C069 00           UbnkProjySgn                DB  0
   9++C06A              UbnkProjy                   EQU UbnkProjyLo
  10++C06A 00           UbnkProjzLo                 DB  0
  11++C06B 00           UbnkProjzHi                 DB  0
  12++C06C 00           UbnkProjzSgn                DB  0
  13++C06D              UbnkProjz                   EQU UbnkProjzLo
  14++C06D              XX25                        EQU UbnkProjxLo
  15++C06D
# file closed: ././Variables/XX25Vars.asm
  34+ C06D                                      INCLUDE "./Variables/XX18Vars.asm"
# file opened: ././Variables/XX18Vars.asm
   1++C06D              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C06D 00           UBnkDrawCam0xLo             DB  0               ; XX18+0
   3++C06E 00           UBnkDrawCam0xHi             DB  0               ; XX18+1
   4++C06F 00           UBnkDrawCam0xSgn            DB  0               ; XX18+2
   5++C070              UBnkDrawCam0x               equ UBnkDrawCam0xLo
   6++C070 00           UBnkDrawCam0yLo             DB  0               ; XX18+3
   7++C071 00           UBnkDrawCam0yHi             DB  0               ; XX18+4
   8++C072 00           UBnkDrawCam0ySgn            DB  0               ; XX18+5
   9++C073              UBnkDrawCam0y               equ UBnkDrawCam0yLo
  10++C073 00           UBnkDrawCam0zLo             DB  0               ; XX18+6
  11++C074 00           UBnkDrawCam0zHi             DB  0               ; XX18+7
  12++C075 00           UBnkDrawCam0zSgn            DB  0               ; XX18+8
  13++C076              UBnkDrawCam0z               equ UBnkDrawCam0zLo
  14++C076              XX18                        equ UBnkDrawCam0xLo
  15++C076
# file closed: ././Variables/XX18Vars.asm
  35+ C076
  36+ C076              ; Used to make 16 bit reads a little cleaner in source code
  37+ C076 00 00 00     UbnkZPoint                  DS  3
  38+ C079              UbnkZPointLo                equ UbnkZPoint
  39+ C079              UbnkZPointHi                equ UbnkZPoint+1
  40+ C079              UbnkZPointSign              equ UbnkZPoint+2
  41+ C079                                      INCLUDE "./Variables/XX15Vars.asm"
# file opened: ././Variables/XX15Vars.asm
   1++C079              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C079 00           UBnkXScaled                 DB  0               ; XX15+0Xscaled
   3++C07A 00           UBnkXScaledSign             DB  0               ; XX15+1xsign
   4++C07B 00           UBnkYScaled                 DB  0               ; XX15+2yscaled
   5++C07C 00           UBnkYScaledSign             DB  0               ; XX15+3ysign
   6++C07D 00           UBnkZScaled                 DB  0               ; XX15+4zscaled
   7++C07E 00           UBnkZScaledSign             DB  0               ; XX15+5zsign
   8++C07F
   9++C07F              XX15                        equ UBnkXScaled
  10++C07F              XX15VecX                    equ XX15
  11++C07F              XX15VecY                    equ XX15+1
  12++C07F              XX15VecZ                    equ XX15+2
  13++C07F              UbnkXPoint                  equ XX15
  14++C07F              UbnkXPointLo                equ XX15+0
  15++C07F              UbnkXPointHi                equ XX15+1
  16++C07F              UbnkXPointSign              equ XX15+2
  17++C07F              UbnkYPoint                  equ XX15+3
  18++C07F              UbnkYPointLo                equ XX15+3
  19++C07F              UbnkYPointHi                equ XX15+4
  20++C07F              UbnkYPointSign              equ XX15+5
  21++C07F              ; Repurposed XX15 pre clip plines
  22++C07F              UbnkPreClipX1               equ XX15+0
  23++C07F              UbnkPreClipY1               equ XX15+2
  24++C07F              UbnkPreClipX2               equ XX15+4
  25++C07F              UbnkPreClipY2               equ XX15+6
  26++C07F              ; Repurposed XX15 post clip lines
  27++C07F              UBnkNewX1                   equ XX15+0
  28++C07F              UBnkNewY1                   equ XX15+1
  29++C07F              UBnkNewX2                   equ XX15+2
  30++C07F              UBnkNewY2                   equ XX15+3
  31++C07F              ; Repurposed XX15
  32++C07F              regXX15fx                   equ UBnkXScaled
  33++C07F              regXX15fxSgn                equ UBnkXScaledSign
  34++C07F              regXX15fy                   equ UBnkYScaled
  35++C07F              regXX15fySgn                equ UBnkYScaledSign
  36++C07F              regXX15fz                   equ UBnkZScaled
  37++C07F              regXX15fzSgn                equ UBnkZScaledSign
  38++C07F              ; Repurposed XX15
  39++C07F              varX1                       equ UBnkXScaled       ; Reused, verify correct position
  40++C07F              varY1                       equ UBnkXScaledSign   ; Reused, verify correct position
  41++C07F              varZ1                       equ UBnkYScaled       ; Reused, verify correct position
  42++C07F              ; After clipping the coords are two 8 bit pairs
  43++C07F              UBnkPoint1Clipped           equ UBnkXScaled
  44++C07F              UBnkPoint2Clipped           equ UBnkYScaled
  45++C07F              ; Repurposed XX15 when plotting lines
  46++C07F              ; Repurposed XX15 before calling clip routine
  47++C07F              UBnkX1                      equ XX15
  48++C07F              UBnKx1Lo                    equ XX15
  49++C07F              UBnKx1Hi                    equ XX15+1
  50++C07F              UBnkY1                      equ XX15+2
  51++C07F              UbnKy1Lo                    equ XX15+2
  52++C07F              UBnkY1Hi                    equ XX15+3
  53++C07F              UBnkX2                      equ XX15+4
  54++C07F              UBnkX2Lo                    equ XX15+4
  55++C07F              UBnkX2Hi                    equ XX15+5
  56++C07F
# file closed: ././Variables/XX15Vars.asm
  42+ C07F                                      INCLUDE "./Variables/XX12Vars.asm"
# file opened: ././Variables/XX12Vars.asm
   1++C07F              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C07F              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C07F 00           UBnkXX12xLo                 DB  0               ; XX12+0
   4++C080 00           UBnkXX12xSign               DB  0               ; XX12+1
   5++C081 00           UBnkXX12yLo                 DB  0               ; XX12+2
   6++C082 00           UBnkXX12ySign               DB  0               ; XX12+3
   7++C083 00           UBnkXX12zLo                 DB  0               ; XX12+4
   8++C084 00           UBnkXX12zSign               DB  0               ; XX12+5
   9++C085 00 00 00...  XX12Save                    DS  6
  10++C08B 00 00 00...  XX12Save2                   DS  6
  11++C091              XX12                        equ UBnkXX12xLo
  12++C091              varXX12                     equ UBnkXX12xLo
  13++C091              ; Repurposed XX12 when plotting lines
  14++C091              UBnkY2                      equ XX12+0
  15++C091              UbnKy2Lo                    equ XX12+0
  16++C091              UBnkY2Hi                    equ XX12+1
  17++C091              UBnkDeltaXLo                equ XX12+2
  18++C091              UBnkDeltaXHi                equ XX12+3
  19++C091              UBnkDeltaYLo                equ XX12+4
  20++C091              UBnkDeltaYHi                equ XX12+5
  21++C091              UbnkGradient                equ XX12+2
  22++C091              UBnkTemp1                   equ XX12+2
  23++C091              UBnkTemp1Lo                 equ XX12+2
  24++C091              UBnkTemp1Hi                 equ XX12+3
  25++C091              UBnkTemp2                   equ XX12+3
  26++C091              UBnkTemp2Lo                 equ XX12+3
  27++C091              UBnkTemp2Hi                 equ XX12+4
  28++C091
# file closed: ././Variables/XX12Vars.asm
  43+ C091
  44+ C091
  45+ C091              ; Post clipping the results are now 8 bit
  46+ C091 00           UBnkVisibility              DB  0               ; replaces general purpose xx4 in rendering
  47+ C092 00           UBnKDrawAsDot               DB  0               ; if 0 then OK, if 1 then just draw dot of line heap
  48+ C093 00           UBnkProjectedY              DB  0
  49+ C094 00           UBnkProjectedX              DB  0
  50+ C095              UBnkProjected               equ UBnkProjectedY  ; resultant projected position
  51+ C095 00 00 00...  XX15Save                    DS  8
  52+ C09D 00 00 00...  XX15Save2                   DS  8
  53+ C0A5 00           VarBackface                 DB 0
  54+ C0A6              ; Heap (or array) information for lines and normals
  55+ C0A6              ; Coords are stored XY,XY,XY,XY
  56+ C0A6              ; Normals
  57+ C0A6              ; This needs re-oprganising now.
  58+ C0A6              ; Runtime Calculation Store
  59+ C0A6
  60+ C0A6              FaceArraySize               equ 30
  61+ C0A6              EdgeHeapSize                equ 40
  62+ C0A6              NodeArraySize               equ 40
  63+ C0A6              LineArraySize               equ 50
  64+ C0A6              ; Storage arrays for data
  65+ C0A6              ; Structure of arrays
  66+ C0A6              ; Visibility array  - 1 Byte per face/normal on ship model Bit 7 (or FF) visible, 0 Invisible
  67+ C0A6              ; Node array corresponds to a processed vertex from the ship model transformed into world coordinates and tracks the node list from model
  68+ C0A6              ; NodeArray         -  4 bytes per element      0           1            2          3
  69+ C0A6              ;                                               X Coord Lo  Y Coord Lo   Z CoordLo  Sign Bits 7 6 5 for X Y Z Signs (set = negative)
  70+ C0A6              ; Line Array        -  4 bytes per eleement     0           1            2          3
  71+ C0A6              ;                                               X1          Y1           X2         Y2
  72+ C0A6 00 00 00...  UbnkFaceVisArray            DS FaceArraySize            ; XX2 Up to 16 faces this may be normal list, each entry is controlled by bit 7, 1 visible, 0 hidden
  73+ C0C4 00 00 00...  UBnkNodeArray               DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  74+ C164 00 00 00...  UBnkNodeArray2              DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  75+ C204 00 00 00...  UbnkLineArray               DS LineArraySize * 4        ; XX19 Holds the clipped line details
  76+ C2CC              UBnkLinesHeapMax            EQU $ - UbnkLineArray
  77+ C2CC 00 00 00...  UbnkEdgeProcessedList DS EdgeHeapSize
  78+ C2F4              ; Array current Lengths
  79+ C2F4 00           UbnkFaceVisArrayLen         DS 1
  80+ C2F5 00           UBnkNodeArrayLen            DS 1
  81+ C2F6 00           UbnkLineArrayLen            DS 1                        ; total number of lines loaded to array
  82+ C2F7 00           UbnkLineArrayBytes          DS 1                        ; total number of bytes loaded to array  = array len * 4
  83+ C2F8              XX20                        equ UbnkLineArrayLen
  84+ C2F8              varXX20                     equ UbnkLineArrayLen
  85+ C2F8
  86+ C2F8
  87+ C2F8 00           UbnkEdgeHeapSize            DS 1
  88+ C2F9 00           UbnkEdgeHeapBytes           DS 1
  89+ C2FA 00           UBnkLinesHeapLen            DS 1
  90+ C2FB 00           UbnKEdgeHeapCounter         DS 1
  91+ C2FC 00           UbnKEdgeRadius              DS 1
  92+ C2FD 00           UbnKEdgeShipType            DS 1
  93+ C2FE 00           UbnKEdgeExplosionType       DS 1
  94+ C2FF
  95+ C2FF              ; Node heap is used to write out transformed Vertexs
  96+ C2FF
  97+ C2FF              ; Lines
  98+ C2FF 00 00 00     UBnkXX19                    DS  3
  99+ C302
 100+ C302
 101+ C302 00           UBnkShipModelBank           DB  0
 102+ C303 00           UBnkShipModelNbr            DB  0
 103+ C304 00 00 00...  UBnkHullCopy                DS  ShipDataLength
 104+ C31C              ScoopDebrisAddr             equ UBnkHullCopy + ScoopDebrisOffset
 105+ C31C              MissileLockLoAddr           equ UBnkHullCopy + MissileLockLoOffset
 106+ C31C              MissileLockHiAddr           equ UBnkHullCopy + MissileLockHiOffset
 107+ C31C              EdgeAddyAddr                equ UBnkHullCopy + EdgeAddyOffset
 108+ C31C              LineX4Addr                  equ UBnkHullCopy + LineX4Offset
 109+ C31C              GunVertexAddr               equ UBnkHullCopy + GunVertexOffset
 110+ C31C              ExplosionCtAddr             equ UBnkHullCopy + ExplosionCtOffset
 111+ C31C              VertexCtX6Addr              equ UBnkHullCopy + VertexCtX6Offset
 112+ C31C              EdgeCountAddr               equ UBnkHullCopy + EdgeCountOffset
 113+ C31C              BountyLoAddr                equ UBnkHullCopy + BountyLoOffset
 114+ C31C              BountyHiAddr                equ UBnkHullCopy + BountyHiOffset
 115+ C31C              FaceCtX4Addr                equ UBnkHullCopy + FaceCtX4Offset
 116+ C31C              DotAddr                     equ UBnkHullCopy + DotOffset
 117+ C31C              EnergyAddr                  equ UBnkHullCopy + EnergyOffset
 118+ C31C              SpeedAddr                   equ UBnkHullCopy + SpeedOffset
 119+ C31C              FaceAddyAddr                equ UBnkHullCopy + FaceAddyOffset
 120+ C31C              QAddr                       equ UBnkHullCopy + QOffset
 121+ C31C              LaserAddr                   equ UBnkHullCopy + LaserOffset
 122+ C31C              VerticesAddyAddr            equ UBnkHullCopy + VerticiesAddyOffset
 123+ C31C              ShipTypeAddr                equ UBnkHullCopy + ShipTypeOffset
 124+ C31C              ShipNewBitsAddr             equ UBnkHullCopy + ShipNewBitsOffset
 125+ C31C              ; Static Ship Data. This is copied in when creating the universe object
 126+ C31C              XX0                         equ UBnkHullCopy        ; general hull index pointer
 127+ C31C 00 00 00...  UBnkHullVerticies           DS  300                 ; can only be 255
 128+ C448 00 00 00...  UBnkHullEdges               DS  1200                ; can be 255 * 4
 129+ C8F8 00 00 00...  UBnkHullNormals             DS  300                 ; can only be 255
 130+ CA24 0C           OrthagCountdown             DB  12
 131+ CA25
 132+ CA25              UBnkShipCopy                equ UBnkHullVerticies               ; Buffer for copy of ship data, for speed will copy to a local memory block, Cobra is around 400 bytes on creation of a new ship so should be plenty
 133+ CA25              UBnk_Data_len               EQU $ - StartOfUniv
 134+ CA25
 135+ CA25              ZeroUnivPitchAndRoll:   MACRO
 136+ CA25 ~                                    xor     a
 137+ CA25 ~                                    ld      (UBnKRotXCounter),a
 138+ CA25 ~                                    ld      (UBnKRotZCounter),a
 139+ CA25                                      ENDM
 140+ CA25
 141+ CA25              MaxUnivPitchAndRoll:    MACRO
 142+ CA25 ~                                    ld      a,127
 143+ CA25 ~                                    ld      (UBnKRotXCounter),a
 144+ CA25 ~                                    ld      (UBnKRotZCounter),a
 145+ CA25                                      ENDM
 146+ CA25
 147+ CA25              ; --------------------------------------------------------------
 148+ CA25 21 00 C0     ResetUBnkData:          ld      hl,StartOfUniv
 149+ CA28 11 25 0A                             ld      de,UBnk_Data_len
 150+ CA2B AF                                   xor     a
 151+ CA2C CD 17 8F                             call    memfill_dma
 152+ CA2F C9                                   ret
 153+ CA30              ; --------------------------------------------------------------
 154+ CA30 21 0C C0     ResetUbnkPosition:      ld      hl,UBnKxlo
 155+ CA33 06 09                                ld      b, 3*3
 156+ CA35 AF                                   xor     a
 157+ CA36 77           .zeroLoop:              ld      (hl),a
 158+ CA37 23                                   inc     hl
 159+ CA38 10 FC                                djnz    .zeroLoop
 160+ CA3A C9                                   ret
 161+ CA3B
 162+ CA3B              ; --------------------------------------------------------------
 163+ CA3B              ; This sets current univrse object to space station
 164+ CA3B 3E 81        ResetStationLaunch:     ld  a,%10000001
 165+ CA3D 32 2D C0                             ld  (UBnkaiatkecm),a                    ; set hostinle, no AI, has ECM
 166+ CA40 AF                                   xor a
 167+ CA41 32 2B C0                             ld      (UBnKRotZCounter),a             ; no pitch
 168+ CA44 32 1B C3                             ld      (ShipNewBitsAddr),a             ; initialise new bits logic
 169+ CA47 3E FF                                ld      a,$FF
 170+ CA49 32 2A C0                             ld      (UBnKRotXCounter),a             ; set roll to maxi on station
 171+ CA4C 21 00 00     .SetPosBehindUs:        ld      hl,$0000
 172+ CA4F 22 0C C0                             ld      (UBnKxlo),hl
 173+ CA52 21 00 00                             ld      hl,$0000
 174+ CA55 22 0F C0                             ld      (UBnKylo),hl
 175+ CA58 21 B0 01                             ld      hl,$01B0                            ; so its a negative distance behind
 176+ CA5B 22 12 C0                             ld      (UBnKzlo),hl
 177+ CA5E AF                                   xor     a
 178+ CA5F 32 0E C0                             ld      (UBnKxsgn),a
 179+ CA62 32 11 C0                             ld      (UBnKysgn),a
 180+ CA65 3E 80                                ld      a,$80
 181+ CA67 32 14 C0                             ld      (UBnKzsgn),a
 182+ CA6A CD E2 CB     .SetOrientation:        call    LaunchedOrientation             ; set initial facing
 183+ CA6D                  ;Input: BC = Dividend, DE = Divisor, HL = 0
 184+ CA6D              ;Output: BC = Quotient, HL = Remainder
 185+ CA6D
 186+ CA6D 7C           ADDHLDESignedv3:        ld      a,h
 187+ CA6E E6 80                                and     SignOnly8Bit
 188+ CA70 47                                   ld      b,a                         ;save sign bit in b
 189+ CA71 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 190+ CA72                                      JumpIfNegative ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
 190+ CA72 FA 8A CA    >                        jp		m, ADDHLDEOppSGN
 191+ CA75 78           ADDHLDESameSigns:       ld      a,b
 192+ CA76 B2                                   or      d
 193+ CA77                                      JumpIfNegative ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
 193+ CA77 FA 7C CA    >                        jp		m, ADDHLDESameNeg
 194+ CA7A 19                                   add     hl,de
 195+ CA7B C9                                   ret
 196+ CA7C 7C           ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 197+ CA7D E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 198+ CA7F 67                                   ld      h,a
 199+ CA80 7A                                   ld      a,d
 200+ CA81 E6 7F                                and     SignMask8Bit
 201+ CA83 57                                   ld      d,a
 202+ CA84 19                                   add     hl,de
 203+ CA85 3E 80                                ld      a,SignOnly8Bit
 204+ CA87 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 205+ CA88 67                                   ld      h,a
 206+ CA89 C9                                   ret
 207+ CA8A 7C           ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 208+ CA8B E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 209+ CA8D 67                                   ld      h,a
 210+ CA8E 7A                                   ld      a,d
 211+ CA8F E6 7F                                and     SignMask8Bit
 212+ CA91 57                                   ld      d,a
 213+ CA92 B7                                   or      a
 214+ CA93 ED 52                                sbc     hl,de
 215+ CA95 38 04                                jr      c,ADDHLDEOppInvert
 216+ CA97 78           ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 217+ CA98 B4                                   or      h
 218+ CA99 67                                   ld      h,a                         ; set the previou sign value
 219+ CA9A C9                                   ret
 220+ CA9B              ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 220+ CA9B AF          >                    xor a
 220+ CA9C 95          >                    sub l
 220+ CA9D 6F          >                    ld l,a
 220+ CA9E 9F          >                    sbc a,a
 220+ CA9F 94          >                    sub h
 220+ CAA0 67          >                    ld h,a
 221+ CAA1 78                                   ld      a,b
 222+ CAA2 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 223+ CAA4 B4                                   or      h
 224+ CAA5 67                                   ld      h,a                         ; recover sign
 225+ CAA6 C9                                   ret
 226+ CAA7
 227+ CAA7              ; we could cheat, flip the sign of DE and just add but its not very optimised
 228+ CAA7 7C           SUBHLDESignedv3:        ld      a,h
 229+ CAA8 E6 80                                and     SignOnly8Bit
 230+ CAAA 47                                   ld      b,a                         ;save sign bit in b
 231+ CAAB AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 232+ CAAC                                      JumpIfNegative SUBHLDEOppSGN        ;Signs are opposite therefore we can add
 232+ CAAC FA DA CA    >                        jp		m, SUBHLDEOppSGN
 233+ CAAF 78           SUBHLDESameSigns:       ld      a,b
 234+ CAB0 B2                                   or      d
 235+ CAB1                                      JumpIfNegative SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 235+ CAB1 FA BB CA    >                        jp		m, SUBHLDESameNeg
 236+ CAB4 B7                                   or      a
 237+ CAB5 ED 52                                sbc     hl,de
 238+ CAB7                                      JumpIfNegative SUBHLDESameOvrFlw
 238+ CAB7 FA CE CA    >                        jp		m, SUBHLDESameOvrFlw
 239+ CABA C9                                   ret
 240+ CABB 7C           SUBHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 241+ CABC E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 242+ CABE 67                                   ld      h,a
 243+ CABF 7A                                   ld      a,d
 244+ CAC0 E6 7F                                and     SignMask8Bit
 245+ CAC2 57                                   ld      d,a
 246+ CAC3 B7                                   or      a
 247+ CAC4 ED 52                                sbc     hl,de
 248+ CAC6                                      JumpIfNegative SUBHLDESameOvrFlw
 248+ CAC6 FA CE CA    >                        jp		m, SUBHLDESameOvrFlw
 249+ CAC9 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 250+ CACA F6 80                                or      SignOnly8Bit
 251+ CACC 67                                   ld      h,a
 252+ CACD C9                                   ret
 253+ CACE              SUBHLDESameOvrFlw:      NegHL                                                        ; we need to flip the sign and 2'c the Hl result
 253+ CACE AF          >                    xor a
 253+ CACF 95          >                    sub l
 253+ CAD0 6F          >                    ld l,a
 253+ CAD1 9F          >                    sbc a,a
 253+ CAD2 94          >                    sub h
 253+ CAD3 67          >                    ld h,a
 254+ CAD4 78                                   ld      a,b
 255+ CAD5 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 256+ CAD7 B4                                   or      h
 257+ CAD8 67                                   ld      h,a                         ; recover sign
 258+ CAD9 C9                                   ret
 259+ CADA B7           SUBHLDEOppSGN:          or      a                                               ; here HL and DE are opposite so we can add the values
 260+ CADB 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 261+ CADC E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 262+ CADE 67                                   ld      h,a
 263+ CADF 7A                                   ld      a,d
 264+ CAE0 E6 7F                                and     SignMask8Bit
 265+ CAE2 57                                   ld      d,a
 266+ CAE3 19                                   add     hl,de
 267+ CAE4 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 268+ CAE5 B4                                   or      h
 269+ CAE6 67                                   ld      h,a                         ; set the previou sign value
 270+ CAE7 C9                                   ret
 271+ CAE8
 272+ CAE8
 273+ CAE8              SBCHLDESigned:          JumpOnBitSet h,7,SBCHLDEhlNeg
 273+ CAE8 CB 7C       >                        bit 	7,h
 273+ CAEA C2 FB CA    >                        jp      nz,SBCHLDEhlNeg
 274+ CAED              SBCHLDEhlPos:           JumpOnBitSet h,7,SBCHLDEhlNeg
 274+ CAED CB 7C       >                        bit 	7,h
 274+ CAEF C2 FB CA    >                        jp      nz,SBCHLDEhlNeg
 275+ CAF2 ED 52        SBCHLDEhlPosDePos:      sbc     hl,de                           ; ignore overflow for now will sort later TODO
 276+ CAF4 C9                                   ret
 277+ CAF5 CB BA        SBCHLDEhlPosDeNeg:      res     7,d
 278+ CAF7 19                                   add     hl,de                           ; ignore overflow for now will sort later TODO
 279+ CAF8 CB FA                                set     7,d
 280+ CAFA C9                                   ret
 281+ CAFB CB BC        SBCHLDEhlNeg:           res     7,h
 282+ CAFD                                      JumpOnBitSet d,7,SBCHLDEhlNegdeNeg
 282+ CAFD CB 7A       >                        bit 	7,d
 282+ CAFF C2 07 CB    >                        jp      nz,SBCHLDEhlNegdeNeg
 283+ CB02 ED 52        SBCHLDEhlNegdePos:      sbc     hl,de                       ; ignore overflow for now will sort later TODO
 284+ CB04 CB FC                                set     7,h
 285+ CB06 C9                                   ret
 286+ CB07 CB BA        SBCHLDEhlNegdeNeg:      res     7,d
 287+ CB09 19                                   add     hl,de                   ; ignore overflow for now will sort later TODO
 288+ CB0A CB FA                                set     7,d
 289+ CB0C CB FC                                set     7,h
 290+ CB0E C9                                   ret
 291+ CB0F
 292+ CB0F              ; Roate around axis
 293+ CB0F              ; varAxis1 and varAxis2 point to the address of the axis to rotate
 294+ CB0F              ; so the axis x1 points to roofv  x , y or z
 295+ CB0F              ;             x2           nosev or sidev  x, y or z
 296+ CB0F              ;   Axis1 = Axis1 * (1 - 1/512)  + Axis2 / 16
 297+ CB0F              ;   Axis2 = Axis2 * (1 - 1/512)  - Axis1 / 16
 298+ CB0F              ; var RAT2 gives direction
 299+ CB0F              ; for pitch x we come in with Axis1 = roofv_x and Axis2 = nosev_x
 300+ CB0F              ;-Set up S R -----------------------------------------
 301+ CB0F              ; optimised we don't deal with sign here just the value of roof axis / 512
 302+ CB0F 2A 3D 92     MVS5RotateAxis:         ld      hl,(varAxis1)   ; work on roofv axis to get (1- 1/152) * roofv axis
 303+ CB12 5E                                   ld      e,(hl)
 304+ CB13 23                                   inc     hl
 305+ CB14 56                                   ld      d,(hl)          ; de = Axis1 (roofv x for pitch x)
 306+ CB15 EB                                   ex      de,hl           ; hl = Axis1 (roofv x for pitch x)
 307+ CB16 7C                                   ld      a,h
 308+ CB17 E6 80                                and     SignOnly8Bit
 309+ CB19 FD 67                                ld      iyh,a           ; iyh = sign Axis1
 310+ CB1B 7C                                   ld      a,h
 311+ CB1C E6 7F                                and     SignMask8Bit    ; a = Axis1 (roof hi axis  unsigned)
 312+ CB1E CB 3F                                srl     a               ; a = Axis1/2
 313+ CB20 5F                                   ld      e,a             ;
 314+ CB21 FD 7C                                ld      a,iyh           ; A = Axis 1 sign
 315+ CB23 57                                   ld      d,a             ; de = signed Axis1 / 512
 316+ CB24 B7                                   or      a               ; clear carry
 317+ CB25 CD A7 CA                             call    SUBHLDESignedv3 ; hl = roof axis - (roof axis /512) which in effect is roof * (1-1/512)
 318+ CB28              ;-Push to stack roof axis - (roofaxis/152)  ----------------------------------------------------------------------------------
 319+ CB28 E5                                   push    hl              ; save hl on stack PUSH ID 1 (roof axis - roofv aixs /512)
 320+ CB29 7D                                   ld      a,l
 321+ CB2A 32 B5 92                             ld      (varR),a
 322+ CB2D 7C                                   ld      a,h
 323+ CB2E 32 B6 92                             ld      (varS),a        ;  RS now equals (1- 1/152) * roofv axis or (roof axis - roofv aixs /512)
 324+ CB31              ;-calculate roofv latter half of calc
 325+ CB31 2A 3F 92                             ld      hl,(varAxis2)   ; now work on nosev axis to get nosev axis / 16
 326+ CB34 5E                                   ld      e,(hl)
 327+ CB35 23                                   inc     hl
 328+ CB36 56                                   ld      d,(hl)          ; de = value of roof axis
 329+ CB37 7A                                   ld      a,d
 330+ CB38 E6 80                                and     SignOnly8Bit
 331+ CB3A FD 67                                ld      iyh,a           ; save sign
 332+ CB3C 7A                                   ld      a,d
 333+ CB3D E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
 334+ CB3F 57                                   ld      d,a             ; de = abs (nosev)
 335+ CB40                                      ShiftDERight1
 335+ CB40 CB 3A       >			   srl d
 335+ CB42 CB 1B       >			   rr  e
 336+ CB44                                      ShiftDERight1
 336+ CB44 CB 3A       >			   srl d
 336+ CB46 CB 1B       >			   rr  e
 337+ CB48                                      ShiftDERight1
 337+ CB48 CB 3A       >			   srl d
 337+ CB4A CB 1B       >			   rr  e
 338+ CB4C                                      ShiftDERight1           ; de = nosev /16 unsigned
 338+ CB4C CB 3A       >			   srl d
 338+ CB4E CB 1B       >			   rr  e
 339+ CB50 3A 32 C0                             ld      a,(univRAT2)     ; need to consider direction, so by defautl we use rat2, but flip via sign bit
 340+ CB53 FD AC                                xor     iyh             ; get the sign back we saveded from DE in so de = nosev axis / 16 signed
 341+ CB55 E6 80                                and     SignOnly8Bit
 342+ CB57 B2                                   or      d
 343+ CB58 57                                   ld      d,a             ; de = nosev /16 signed and ready as if we were doing a + or - based on RAT2
 344+ CB59              ;;; ld      a,e
 345+ CB59              ;;;     or      iyh
 346+ CB59              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 347+ CB59              ;-now AP = nosev /16  --------------------------------------------------------------------------------------------------------
 348+ CB59 E1                                   pop     hl              ; get back RS POP ID 1
 349+ CB5A                  ;ex     de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 350+ CB5A              ;-now DE = (roofaxis/512) hl - abs(nosevaxis) --------------------------------------------------------------------------------
 351+ CB5A CD 6D CA                             call    ADDHLDESignedv3 ; do add using hl and de
 352+ CB5D E5                                   push    hl              ; we use stack to represent var K here now varK = Nosev axis /16 + (1 - 1/512) * roofv axis PUSH ID 2
 353+ CB5E              ;-push to stack nosev axis + roofvaxis /512  which is what roofv axis will be ------------------------------------------------
 354+ CB5E              ;-- Set up SR = 1 - 1/512 * nosev-----------------------
 355+ CB5E 2A 3F 92                         ld      hl,(varAxis2)   ; work on nosev again to get nosev - novesv / 512
 356+ CB61 5E                               ld      e,(hl)
 357+ CB62 23                               inc     hl
 358+ CB63 56                               ld      d,(hl)
 359+ CB64 EB                               ex      de,hl
 360+ CB65 7C                               ld      a,h
 361+ CB66 E6 80                            and     $80
 362+ CB68 FD 67                            ld      iyh,a
 363+ CB6A 7C                               ld      a,h
 364+ CB6B E6 7F                            and     SignMask8Bit    ; a = roof hi axis  unsigned
 365+ CB6D CB 3F                            srl     a               ; now A = unsigned 15 bit nosev axis hi / 2 (or in effect nosev / 512
 366+ CB6F 5F                               ld      e,a
 367+ CB70 FD 7C                            ld      a,iyh
 368+ CB72 57                               ld      d,a
 369+ CB73 B7                               or      a               ; clear carry
 370+ CB74 CD A7 CA                         call    SUBHLDESignedv3
 371+ CB77              ;   sbc     hl,de           ; hl = nosev - novesv / 512
 372+ CB77 E5                               push    hl              ; save hl on stack  PUSH ID 3
 373+ CB78 7D                               ld      a,l
 374+ CB79 32 54 92                         ld      (varP),a        ; p = low of resuilt
 375+ CB7C 7C                               ld      a,h
 376+ CB7D E6 7F                            and     SignMask8Bit    ; a = roof hi axis  unsigned
 377+ CB7F 32 D2 92                         ld      (varT),a        ; t = high of result
 378+ CB82              ;-- Set up TQ
 379+ CB82 2A 3D 92                         ld      hl,(varAxis1)   ; now work on roofv axis / 16
 380+ CB85              ;   ld      hl,(varAxis2)   ; work on nosev again
 381+ CB85 5E                               ld      e,(hl)
 382+ CB86 23                               inc     hl
 383+ CB87 56                               ld      d,(hl)
 384+ CB88 7A                               ld      a,d
 385+ CB89 E6 80                            and     $80
 386+ CB8B FD 67                            ld      iyh,a           ; save sign
 387+ CB8D 7A                               ld      a,d
 388+ CB8E E6 7F                            and     SignMask8Bit    ; a = nosev hi axis  unsigned
 389+ CB90 57                               ld      d,a             ; de = abs (nosev)
 390+ CB91                                  ShiftDERight1
 390+ CB91 CB 3A       >			   srl d
 390+ CB93 CB 1B       >			   rr  e
 391+ CB95                                  ShiftDERight1
 391+ CB95 CB 3A       >			   srl d
 391+ CB97 CB 1B       >			   rr  e
 392+ CB99                                  ShiftDERight1
 392+ CB99 CB 3A       >			   srl d
 392+ CB9B CB 1B       >			   rr  e
 393+ CB9D                                  ShiftDERight1           ; de = nosev /16 unsigned
 393+ CB9D CB 3A       >			   srl d
 393+ CB9F CB 1B       >			   rr  e
 394+ CBA1 3A 32 C0                         ld      a,(univRAT2)
 395+ CBA4 FD AC                            xor     iyh             ; get the sign back in so de = nosev axis / 16 signed
 396+ CBA6 E6 80                            and     $80
 397+ CBA8 B2                               or      d
 398+ CBA9 57                               ld      d,a
 399+ CBAA              ;;; ld      a,e
 400+ CBAA              ;;;     or      iyh
 401+ CBAA              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 402+ CBAA E1                               pop     hl              ; get back RS   POP ID 3
 403+ CBAB              ;   ex      de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 404+ CBAB CD A7 CA                         call    SUBHLDESignedv3 ; do add using hl and de
 405+ CBAE              ;-- Update nosev ---------------------------------------
 406+ CBAE EB                               ex      de,hl           ; save hl to de
 407+ CBAF 2A 3F 92                         ld      hl,(varAxis2)
 408+ CBB2 73                               ld      (hl),e
 409+ CBB3 23                               inc     hl
 410+ CBB4 72                               ld      (hl),d          ; copy result into nosev
 411+ CBB5              ;-- Update roofv ---------------------------------------
 412+ CBB5 D1                               pop     de              ; get calc saved on stack POP ID 2
 413+ CBB6 2A 3D 92                         ld      hl,(varAxis1)
 414+ CBB9 73                               ld      (hl),e
 415+ CBBA 23                               inc     hl
 416+ CBBB 72                               ld      (hl),d          ; copy result into nosev
 417+ CBBC C9                               ret
 418+ CBBD
 419+ CBBD                                  include "Universe/InitialiseOrientation.asm"
# file opened: ./Universe/InitialiseOrientation.asm
   1++CBBD              InitialiseOrientation:
   2++CBBD              ZI1:
   3++CBBD              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
   4++CBBD              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
   5++CBBD              ;  nosev = (0,  0, -1)  nosev = (0, 0, &E000)   E000 = SignBit[96]
   6++CBBD 21 00 00         ld      hl, 0
   7++CBC0 22 17 C0         ld      (UBnkrotmatSidevY),hl                ; set the zeroes
   8++CBC3 22 19 C0         ld      (UBnkrotmatSidevZ),hl                ; set the zeroes
   9++CBC6 22 1B C0         ld      (UBnkrotmatRoofvX),hl                ; set the zeroes
  10++CBC9 22 1F C0         ld      (UBnkrotmatRoofvZ),hl                ; set the zeroes
  11++CBCC 22 21 C0         ld      (UBnkrotmatNosevX),hl                ; set the zeroes
  12++CBCF 22 23 C0         ld      (UBnkrotmatNosevY),hl                ; set the zeroes
  13++CBD2 21 00 60         ld      hl, $6000					; 96 in hi byte
  14++CBD5                  ;ld      hl,1
  15++CBD5 22 15 C0         ld      (UBnkrotmatSidevX),hl
  16++CBD8 22 1D C0         ld      (UBnkrotmatRoofvY),hl
  17++CBDB 21 00 E0         ld      hl, $E000					; -96 in hi byte which is +96 with hl bit 7 set
  18++CBDE 22 25 C0         ld      (UBnkrotmatNosevZ),hl
  19++CBE1 C9               ret
  20++CBE2
  21++CBE2              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
  22++CBE2              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
  23++CBE2              ;  nosev = (-0,  -0, 1) nosev = (0, 0, &6000)
  24++CBE2
  25++CBE2              LaunchedOrientation:
  26++CBE2 CD BD CB         call    InitialiseOrientation
  27++CBE5                  FlipMemSign UBnkrotmatNosevX+1;  as its 0 flipping will make no difference
  27++CBE5 3A 22 C0    >                    ld  a,(UBnkrotmatNosevX+1)
  27++CBE8 EE 80       >                    xor SignOnly8Bit
  27++CBEA 32 22 C0    >                    ld  (UBnkrotmatNosevX+1),a
  28++CBED                  FlipMemSign UBnkrotmatNosevY+1;  as its 0 flipping will make no difference
  28++CBED 3A 24 C0    >                    ld  a,(UBnkrotmatNosevY+1)
  28++CBF0 EE 80       >                    xor SignOnly8Bit
  28++CBF2 32 24 C0    >                    ld  (UBnkrotmatNosevY+1),a
  29++CBF5                  FlipMemSign UBnkrotmatNosevZ+1
  29++CBF5 3A 26 C0    >                    ld  a,(UBnkrotmatNosevZ+1)
  29++CBF8 EE 80       >                    xor SignOnly8Bit
  29++CBFA 32 26 C0    >                    ld  (UBnkrotmatNosevZ+1),a
  30++CBFD C9               ret
  31++CBFE
# file closed: ./Universe/InitialiseOrientation.asm
 420+ CBFE              ;----------------------------------------------------------------------------------------------------------------------------------
 421+ CBFE              OrientateVertex:
 422+ CBFE
 423+ CBFE              ;                      [ sidev_x sidev_y sidev_z ]   [ x ]
 424+ CBFE              ;  projected [x y z] = [ roofv_x roofv_y roofv_z ] . [ y ]
 425+ CBFE              ;                      [ nosev_x nosev_y nosev_z ]   [ z ]
 426+ CBFE              ;
 427+ CBFE
 428+ CBFE              ;----------------------------------------------------------------------------------------------------------------------------------
 429+ CBFE              TransposeVertex:
 430+ CBFE              ;                      [ sidev_x roofv_x nosev_x ]   [ x ]
 431+ CBFE              ;  projected [x y z] = [ sidev_y roofv_y nosev_y ] . [ y ]
 432+ CBFE              ;                      [ sidev_z roofv_z nosev_z ]   [ z ]
 433+ CBFE              VectorToVertex:
 434+ CBFE              ;                     [ sidev_x roofv_x nosev_x ]   [ x ]   [ x ]
 435+ CBFE              ;  vector to vertex = [ sidev_y roofv_y nosev_y ] . [ y ] + [ y ]
 436+ CBFE              ;                     [ sidev_z roofv_z nosev_z ]   [ z ]   [ z ]
 437+ CBFE
 438+ CBFE              Project:
 439+ CBFE 2A 0C C0     PROJ:                   ld      hl,(UBnKxlo)                    ; Project K+INWK(x,y)/z to K3,K4 for center to screen
 440+ CC01 22 54 92                             ld      (varP),hl
 441+ CC04 3A 0E C0                             ld      a,(UBnKxsgn)
 442+ CC07 CD D8 A1                             call    PLS6                            ; returns result in K (0 1) (unsigned) and K (3) = sign note to no longer does 2's C
 443+ CC0A D8                                   ret     c                               ; carry means don't print
 444+ CC0B 2A C9 92                             ld      hl,(varK)                       ; hl = k (0 1)
 445+ CC0E                                      ; Now the question is as hl is the fractional part, should this be multiplied by 127 to get the actual range
 446+ CC0E 3E 80                                ld      a,ViewCenterX
 447+ CC10 ED 31                                add     hl,a                            ; add unsigned a to the 2's C HL to get pixel position
 448+ CC12 22 DC 92                             ld      (varK3),hl                      ; K3 = X position on screen
 449+ CC15 2A 0F C0     ProjectY:               ld      hl,(UBnKylo)
 450+ CC18 22 54 92                             ld      (varP),hl
 451+ CC1B 3A 11 C0                             ld      a,(UBnKysgn)
 452+ CC1E CD D8 A1                             call    PLS6
 453+ CC21 D8                                   ret     c
 454+ CC22 2A C9 92                             ld      hl,(varK)                       ; hl = k (0 1)
 455+ CC25 3E 40                                ld      a,ViewCenterY
 456+ CC27 ED 31                                add     hl,a                            ; add unsigned a to the 2's C HL to get pixel position
 457+ CC29 22 E2 92                             ld      (varK4),hl                      ; K3 = X position on screen
 458+ CC2C C9                                   ret
 459+ CC2D              ;--------------------------------------------------------------------------------------------------------
 460+ CC2D                                      include "./ModelRender/EraseOldLines-EE51.asm"
# file opened: ././ModelRender/EraseOldLines-EE51.asm
   1++CC2D              ;
   2++CC2D              ; EraseOldLines:
   3++CC2D              ;	Loop from 0 to UbnKEdgeHeapCounter (note this should be 4 * actual nbr of lines)
   4++CC2D              ;		draw line (black) UBnkLinesArray[0,1]+Loop to [2,3]+loop
   5++CC2D              ;	 	loop + 4
   6++CC2D              ; Return
   7++CC2D
   8++CC2D              EraseOldLines:
   9++CC2D              EE51:										; if bit3 set draw lines in XX19 heap
  10++CC2D              	ReturnOnMemBitClear UBnKexplDsp,3       ; bit 3 denotes that there is nothing to erase as its already done
  10++CC2D 3A 2C C0    >                        ld     a,(UBnKexplDsp)
  10++CC30 CB 5F       >                        bit 	3,a
  10++CC32 C8          >                        ret		z
  11++CC33 CB DF        	set		3,a
  12++CC35 32 2C C0     	ld		(UBnKexplDsp),a  				; else toggle bit3 to allow lines (set will do as its 0 by now)
  13++CC38 C3 CA E8     	jp		clearLines						; LL115	clear LINEstr. Draw lines in XX19 heap.  - note its an & not direct
  14++CC3B              ; We use the ret from the clearLines so not needed here
  15++CC3B
# file closed: ././ModelRender/EraseOldLines-EE51.asm
 461+ CC3B                                      include "./ModelRender/TrimToScreenGrad-LL118.asm"
# file opened: ././ModelRender/TrimToScreenGrad-LL118.asm
   1++CC3B              ;TrimToScreenGrad:
   2++CC3B              ;LL118:										; Trim XX15,XX15+2 to screen grad=XX12+2 for CLIP
   3++CC3B              ;ret
   4++CC3B              ;TODO        ld      hl,(UBnKx1Lo)               ; XX15+0,1 \ x1 hi
   5++CC3B              ;TODO        bit     7,a
   6++CC3B              ;TODO        jr      nz,LL119		            ; x1 hi+ve skip down
   7++CC3B              ;TODO        ld      a,h
   8++CC3B              ;TODO        ld      (varS),a                    ; S	 \ else x1 hi -ve
   9++CC3B              ;TODO        call    XYeqyx1loSmulMdiv256                       ; LL120	 \ X1<0  their comment \ X.Y = x1_lo.S *  M/2566
  10++CC3B              ;TODO        ld      bc,(UbnKy1Lo)               ; step Y1 lo
  11++CC3B
  12++CC3B              ;18                      CLC
  13++CC3B              ;65 36                   ADC &36		\ XX15+2 \ Y1 lo
  14++CC3B              ;85 36                   STA &36			 \ XX15+2
  15++CC3B              ;98                      TYA 			 \ step Y1 hi
  16++CC3B              ;65 37                   ADC &37		\ XX15+3 \ Y1 hi
  17++CC3B              ;85 37                   STA &37			 \ XX15+3
  18++CC3B              ;A9 00                   LDA #0			 \ xleft min
  19++CC3B              ;85 34                   STA &34		\ XX15+0 \ X1 lo
  20++CC3B              ;85 35                   STA &35		\ XX15+1 \ X1 = 0
  21++CC3B              ;AA                      TAX 			 \ Xreg = 0, will skip to Ytrim
  22++CC3B              ;	.LL119	\ x1 hi +ve from LL118
  23++CC3B              ;F0 19                   BEQ LL134		 \ if x1 hi = 0 skip to Ytrim
  24++CC3B              ;85 83                   STA &83		\ S	 \ else x1 hi > 0
  25++CC3B              ;C6 83                   DEC &83		\ S	 \ x1 hi-1
  26++CC3B              ;20 19 50                JSR &5019	\ LL120  \ X1>255 their comment \ X.Y = x1lo.S *  M/256
  27++CC3B              ;8A                      TXA 			 \ step Y1 lo
  28++CC3B              ;18                      CLC
  29++CC3B              ;65 36                   ADC &36		\ XX15+2 \ Y1 lo
  30++CC3B              ;85 36                   STA &36			 \ XX15+2
  31++CC3B              ;98                      TYA 			 \ step Y1 hi
  32++CC3B              ;65 37                   ADC &37		\ XX15+3 \ Y1 hi
  33++CC3B              ;85 37                   STA &37			 \ XX15+3
  34++CC3B              ;A2 FF                   LDX #&FF		 \ xright max
  35++CC3B              ;86 34                   STX &34		\ XX15+0 \ X1 lo
  36++CC3B              ;E8                      INX 			 \ X = 0
  37++CC3B              ;86 35                   STX &35		\ XX15+1 \ X1 = 255
  38++CC3B              ;	.LL134	\ Ytrim
  39++CC3B              ;A5 37                   LDA &37		\ XX15+3 \ y1 hi
  40++CC3B              ;10 1A                   BPL LL135		 \ y1 hi +ve
  41++CC3B              ;85 83                   STA &83		\ S	 \ else y1 hi -ve
  42++CC3B              ;A5 36                   LDA &36		\ XX15+2 \ y1 lo
  43++CC3B              ;85 82                   STA &82		\ R	 \ Y1<0 their comment
  44++CC3B              ;20 48 50                JSR &5048	\ LL123	 \ X.Y=R.S*256/M (M=grad.)   \where 256/M is gradient
  45++CC3B              ;8A                      TXA 			 \ step X1 lo
  46++CC3B              ;18                      CLC
  47++CC3B              ;65 34                   ADC &34		\ XX15+0 \ X1 lo
  48++CC3B              ;85 34                   STA &34			 \ XX15+0
  49++CC3B              ;98                      TYA 			 \ step X1 hi
  50++CC3B              ;65 35                   ADC &35		\ XX15+1 \ X1 hi
  51++CC3B              ;85 35                   STA &35			 \ XX15+1
  52++CC3B              ;A9 00                   LDA #0			 \ Y bottom min
  53++CC3B              ;85 36                   STA &36		\ XX15+2 \ Y1 lo
  54++CC3B              ;85 37                   STA &37		\ XX15+3 \ Y1 = 0
  55++CC3B              ;	.LL135	\ y1 hi +ve from LL134
  56++CC3B              ;A5 36                   LDA &36		\ XX15+2 \ Y1 lo
  57++CC3B              ;38                      SEC
  58++CC3B              ;E9 C0                   SBC #&C0		 \ #Y*2  screen y height
  59++CC3B              ;85 82                   STA &82		\ R	 \ Y1>191 their comment
  60++CC3B              ;A5 37                   LDA &37		\ XX15+3 \ Y1 hi
  61++CC3B              ;E9 00                   SBC #0			 \ any hi
  62++CC3B              ;85 83                   STA &83			 \ S
  63++CC3B              ;90 16                   BCC LL136		 \ failed, rts
  64++CC3B              ;	.LL139
  65++CC3B              ;20 48 50                JSR &5048	\ LL123	 \ X.Y=R.S*256/M (M=grad.)   \where 256/M is gradient
  66++CC3B              ;8A                      TXA 			 \ step X1 lo
  67++CC3B              ;18                      CLC
  68++CC3B              ;65 34                   ADC &34		\ XX15+0 \ X1 lo
  69++CC3B              ;85 34                   STA &34			 \ XX15+0
  70++CC3B              ;98                      TYA 			 \ step X1 hi
  71++CC3B              ;65 35                   ADC &35		\ XX15+1 \ X1 hi
  72++CC3B              ;85 35                   STA &35			 \ XX15+1
  73++CC3B              ;A9 BF                   LDA #&BF		 \ #Y*2-1 = y top max
  74++CC3B              ;85 36                   STA &36		\ XX15+2 \ Y1 lo
  75++CC3B              ;A9 00                   LDA #0			 \ Y1 hi = 0
  76++CC3B              ;85 37                   STA &37		\ XX15+3 \ Y1 = 191
  77++CC3B              ;	.LL136	\ rts
  78++CC3B              ;60                      RTS 		 	 \ -- trim for CLIP done
  79++CC3B              ;
  80++CC3B
# file closed: ././ModelRender/TrimToScreenGrad-LL118.asm
 462+ CC3B                                      include "./ModelRender/CLIP-LL145.asm"
# file opened: ././ModelRender/CLIP-LL145.asm
   1++CC3B              ;--------------------------------------------------------------------------------------------------------------------
   2++CC3B
   3++CC3B 00           clipDx                  DB      0           ; also XX12+2
   4++CC3C 00           clipDxHigh              DB      0           ; also XX12+3
   5++CC3D 00           clipDxHighNonABS        DB      0           ; also XX12+3
   6++CC3E 00           clipDy                  DB      0           ; also XX12+4
   7++CC3F 00           clipDyHigh              DB      0           ; also XX12+5
   8++CC40 00           clipGradient            DB      0
   9++CC41 00           clipDxySign             DB      0
  10++CC42              varX12p3                equ     clipDxySign
  11++CC42 00           clipXGTY                DB      0
  12++CC43 00           clipFlags               DB      0
  13++CC44 00           SWAP                    DB      0
  14++CC45 00 00        varYX                   DW      0
  15++CC47              ;varRegX                 DB      0
  16++CC47              ;varXX12p2               DB      0
  17++CC47 00           clipXX13                 DB      0
  18++CC48
  19++CC48
  20++CC48              ; bounds check and the start to avoid dxy calcs if off screen, eliminating off screens first saves a lot of uncessary mul/div
  21++CC48              ;ClipXX15XX12Line:
  22++CC48 ED 4B 7B C0  ClipLine:               ld      bc,(UbnkPreClipY1)          ; bc - XX15(2,3)
  23++CC4C DD 2A 7F C0                          ld      ix,(UbnkPreClipY2)          ; ix - XX12(0,1)
  24++CC50 2A 79 C0                             ld      hl,(UbnkPreClipX1)          ; hl - XX15(0,1)
  25++CC53 ED 5B 7D C0                          ld      de,(UbnkPreClipX2)          ; de - XX15(4,5)
  26++CC57 AF                                   xor     a
  27++CC58 32 44 CC                             ld      (SWAP),a                    ; SWAP = 0
  28++CC5B 7A                                   ld      a,d                         ; A = X2Hi
  29++CC5C FD 26 BF     .LL147:                 ld      iyh,$BF                     ; we need to be 191 as its 128 + another bit set from 0 to 6, we are using iyh as regX
  30++CC5F                                      ;       push    af
  31++CC5F                                      ;       ld      a,iyh
  32++CC5F                                      ;       ld      (regX),a
  33++CC5F                                      ;       pop     af
  34++CC5F DD B4                                or      ixh                         ; if (X2Hi L-OR Y2 Hi <> 0) goto LL107             -- X2Y2 off screen
  35++CC61 20 0A                                jr      nz, .LL107
  36++CC63 DD 7D                                ld      a,ixl
  37++CC65 ED 27 80                             test    $80                         ; if screen hight < y2 lo, i.e y2 lo >127 goto LL107,
  38++CC68 20 03                                jr      nz,.LL107
  39++CC6A FD 26 00                             ld      iyh, 0                      ; else iyh = regX = 0                                                                        -- X2Y2 on screen
  40++CC6D                                      ;        push    af
  41++CC6D                                      ;        ld      a,iyh
  42++CC6D                                      ;        ld      (regX),a
  43++CC6D                                      ;        pop     af
  44++CC6D              ; XX13 = regX (i.e. iyh)      ( if XX13 = XX13 is 191 if (x2, y2) is off-screen else 0) we bin XX13 as not needed
  45++CC6D              ; so XX13 = 0 if x2_hi = y2_hi = 0, y2_lo is on-screen,  XX13 = 191 if x2_hi or y2_hi are non-zero or y2_lo is off the bottom of the screen
  46++CC6D FD 7C        .LL107                  ld      a,iyh
  47++CC6F 32 47 CC                             ld      (clipXX13),a                ; debug copy iyh to xx13
  48++CC72 7C                                   ld      a,h                         ; If (X1 hi L-OR Y1) hi  goto LL83                   -- X1Y1 off screen and maybe X2Y2
  49++CC73 B0                                   or      b                           ;
  50++CC74 20 27                                jr      nz,.LL83                    ;
  51++CC76 79                                   ld      a,c                         ; or (y1 lo > bottom of screen)
  52++CC77 ED 27 80                             test    $80                         ; i.e  screen height < y1)
  53++CC7A 20 21                                jr      nz,.LL83
  54++CC7C              ; If we get here, (x1, y1) is on-screen
  55++CC7C FD 7C                                ld      a,iyh                       ; iyh = xx13 at this point if  XX13 <> 0 goto LL108                                                        -- X1Y1 on screen, if we flagged X2Y2 off screen goto LL108
  56++CC7E FE 00                                cp      0
  57++CC80 20 15                                jr      nz, .LL108
  58++CC82              ; Finished clipping exit point ----------------------------------------------------------------------------------------
  59++CC82 79           .ClipDone:              ld      a,c                         ; LL146 (Clip Done)               Y1 = y1 lo, x2 = x2 lo, x1 = x1 lo y1 = y1 lo                                   -- Nothing off screen
  60++CC83 32 7A C0                             ld      (UBnkNewY1),a
  61++CC86 DD 7D                                ld      a,ixl
  62++CC88 32 7C C0                             ld      (UBnkNewY2),a
  63++CC8B 7D                                   ld      a,l
  64++CC8C 32 79 C0                             ld      (UBnkNewX1),a
  65++CC8F 7B                                   ld      a,e
  66++CC90 32 7B C0                             ld      (UBnkNewX2),a
  67++CC93                                      ClearCarryFlag                      ; carry is clear so valid to plot is in XX15(0to3)
  67++CC93 B7          >                    or a
  68++CC94 C9                                   ret                                 ; 2nd pro different, it swops based on swop flag around here.
  69++CC95              ; Finished out of bounds exit point -----------------------------------------------------------------------------------
  70++CC95 37           .PointsOutofBounds:     scf                                 ; LL109 (ClipFailed) carry flag set as not visible
  71++CC96 C9                                   ret
  72++CC97 FD 7C        .LL108:                 ld      a,iyh
  73++CC99 B7                                   or      a
  74++CC9A 1F                                   rra
  75++CC9B FD 67                                ld      iyh,a                       ; (X2Y2 Off Screen)         XX13 = 95 (i.e. divide it by 2)                                                 -- X1Y1 on screen X2Y2 off screen
  76++CC9D                                      ;        push    af                  ;OPTIMISATION 6/11/21 commented out
  77++CC9D                                      ;        ld      a,iyh               ;OPTIMISATION 6/11/21 commented out
  78++CC9D                                      ;        ld      (regX),a            ;OPTIMISATION 6/11/21 commented out
  79++CC9D                                      ;        pop     af                  ;OPTIMISATION 6/11/21 commented out
  80++CC9D FD 7C        .LL83:                  ld      a,iyh                       ; (Line On screen Test)      if XX13 < 128 then only 1 point is on screen so goto LL115                      -- We only need to deal with X2Y2
  81++CC9F ED 27 80                             test    $80                         ;
  82++CCA2 28 28                                jr      z, .LL115                   ;
  83++CCA4 7C                                   ld      a,h                         ; If both x1_hi and x2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  84++CCA5 A2                                   and     d
  85++CCA6                                      JumpIfNegative  .PointsOutofBounds
  85++CCA6 FA 95 CC    >                        jp		m, .PointsOutofBounds
  86++CCA9 78                                   ld      a,b                         ; If both y1_hi and y2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  87++CCAA DD A4                                and     ixh
  88++CCAC                                      JumpIfNegative  .PointsOutofBounds
  88++CCAC FA 95 CC    >                        jp		m, .PointsOutofBounds
  89++CCAF 7C                                   ld      a,h                         ; If neither (x1_hi - 1) or (x2_hi - 1) have bit 7 set, jump to LL109 to return from the subroutine with the C  flag set, as the line doesn't fit on-screen
  90++CCB0 3D                                   dec     a
  91++CCB1 FD 6F                                ld      iyl,a                       ; using iyl as XX12+2 var
  92++CCB3                                      ;        push    af                 ;OPTIMISATION 6/11/21 commented out
  93++CCB3                                      ;        ld      a,iyl              ;OPTIMISATION 6/11/21 commented out
  94++CCB3                                      ;        ld      (varXX12p2),a      ;OPTIMISATION 6/11/21 commented out
  95++CCB3                                      ;        pop     af                 ;OPTIMISATION 6/11/21 commented out
  96++CCB3 7A                                   ld      a,d                         ; a = x2 hi
  97++CCB4 3D                                   dec     a
  98++CCB5 FD B5                                or      iyl                         ; (x2 hi -1 ) or (x1 hi -1)
  99++CCB7                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
  99++CCB7 F2 95 CC    >                        jp		p, .PointsOutofBounds
 100++CCBA              ;by here we have eliminated -ve Y1 bounds so can just test for positive high and bit 7 of lo
 101++CCBA DD 7C                                ld      a,ixh
 102++CCBC 3D                                   dec     a
 103++CCBD FD 6F                                ld      iyl,a
 104++CCBF 78                                   ld      a,b
 105++CCC0 3D                                   dec     a
 106++CCC1 FD B5                                or      iyl
 107++CCC3                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
 107++CCC3 F2 95 CC    >                        jp		p, .PointsOutofBounds
 108++CCC6 79                                   ld      a,c
 109++CCC7 DD A5                                and     ixl
 110++CCC9                                      JumpIfNegative .PointsOutofBounds   ; really if both are > 127
 110++CCC9 FA 95 CC    >                        jp		m, .PointsOutofBounds
 111++CCCC              ; Clip line: calulate the line's gradient
 112++CCCC              ; here as an optimisation we make sure X1 is always < X2  later on
 113++CCCC              .LL115:                 ClearCarryFlag
 113++CCCC B7          >                    or a
 114++CCCD E5 D5        .CalcDX:                push    hl,,de
 115++CCCF EB                                   ex      hl,de                       ; so hl is x2 and de = x1
 116++CCD0 ED 52                                sbc     hl,de
 117++CCD2                                     ; pop     de                          ; we need de back
 118++CCD2 22 3B CC                             ld      (clipDx),hl
 119++CCD5 7C                                   ld      a,h
 120++CCD6 32 3D CC                             ld      (clipDxHighNonABS),a
 121++CCD9                                     ; ld      a,e                         ;a = x2 lo
 122++CCD9                                     ; sbc     a,l                         ;a= a - x1
 123++CCD9                                     ; ld      (clipDx),a
 124++CCD9                                     ; ld      a,d
 125++CCD9                                     ; sbc     a,h
 126++CCD9                                     ; ld      (clipDxHigh),a                ; later we will just move to sub hl,de
 127++CCD9                                     ; ld      (clipDxHighNonABS),a          ; it looks liek we need this later post scale loop
 128++CCD9              .CalcDy:                ClearCarryFlag
 128++CCD9 B7          >                    or a
 129++CCDA DD E5 E1                             ld      hl,ix
 130++CCDD ED 42                                sbc     hl,bc
 131++CCDF 54 5D                                ld      de,hl           ;;OPTIMISATION 6/11/21
 132++CCE1 22 3E CC                             ld      (clipDy),hl     ;OPTIMISATION 6/11/21 commented out
 133++CCE4 7C           .CalcQuadrant:          ld      a,h
 134++CCE5                                     ; ld      a,ixl
 135++CCE5                                     ; sbc     c
 136++CCE5                                     ; ld      (clipDy),a
 137++CCE5                                     ; ld      a,ixh
 138++CCE5                                     ; sbc     a,b
 139++CCE5                                     ; ld      (clipDyHigh),a              ; so A = sign of deltay in effect
 140++CCE5                                     ; pop     hl
 141++CCE5
 142++CCE5              ;So we now have delta_x in XX12(3 2), delta_y in XX12(5 4)  where the delta is (x1, y1) - (x2, y2))
 143++CCE5                                    ;  push    hl                          ; Set S = the sign of delta_x * the sign of delta_y, so if bit 7 of S is set, the deltas have different signs
 144++CCE5 21 3C CC                             ld      hl,clipDxHigh
 145++CCE8 AE                                   xor     (hl)                        ; now a = sign dx xor sign dy
 146++CCE9 32 B6 92                             ld      (varS),a                    ; DEBGU putting it in var S too for now
 147++CCEC 32 41 CC                             ld      (clipDxySign),a
 148++CCEF 3A 3F CC     .AbsDy:                 ld      a,(clipDyHigh)
 149++CCF2 ED 27 80                             test    $80
 150++CCF5 28 0C                                jr      z,.LL110                    ; If delta_y_hi is positive, jump down to LL110 to skip the following
 151++CCF7 2A 3E CC                             ld      hl,(clipDy)                 ;OPTIMISATION 6/11/21 commented out
 152++CCFA                                      macronegate16de                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 152++CCFA AF          >					xor 	a
 152++CCFB 93          >                    sub 	e
 152++CCFC 5F          >                    ld 		e,a
 152++CCFD 9F          >                    sbc 	a,a
 152++CCFE 92          >                    sub 	d
 152++CCFF 57          >                    ld 		d,a
 153++CD00 22 3E CC                             ld      (clipDy),hl                 ;OPTIMISATION 6/11/21 commented out
 154++CD03 2A 3B CC     .LL110:                 ld      hl,(clipDx)
 155++CD06 3A 3C CC                             ld      a,(clipDxHigh)
 156++CD09 ED 27 80                             test    $80                         ; is it a negative X
 157++CD0C 28 06                                jr      z,.LL111                    ; If delta_x_hi is positive, jump down to LL110 to skip the following
 158++CD0E                                      ;ld      hl,(clipDx)                 ;OPTIMISATION 6/11/21 commented out
 159++CD0E                                      macronegate16hl                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 159++CD0E AF          >					xor 	a
 159++CD0F 95          >					sub 	l
 159++CD10 6F          >					ld 		l,a
 159++CD11 9F          >					sbc 	a,a
 159++CD12 94          >					sub 	h
 159++CD13 67          >					ld 		h,a
 160++CD14                                     ; ld      (clipDx),hl                 ;OPTIMISATION 6/11/21 commented out; we still retain the old sign in NonABS version
 161++CD14              .LL111:               ;  push    de
 162++CD14                                     ; ld      hl,(clipDx)                 ;OPTIMISATION 6/11/21 commented out
 163++CD14                                     ; ld      de,(clipDy)                 ;OPTIMISATION 6/11/21 commented out
 164++CD14 7C           .ScaleLoop:             ld      a,h                         ; At this point DX and DY are ABS values
 165++CD15 B2                                   or      d
 166++CD16 28 0A                                jr      z,.CalculateDelta
 166++CD18
 167++CD18                                      ShiftDERight1
 167++CD18 CB 3A       >			   srl d
 167++CD1A CB 1B       >			   rr  e
 168++CD1C                                      ShiftHLRight1
 168++CD1C CB 3C       >			   srl h
 168++CD1E CB 1D       >			   rr  l
 169++CD20 18 F2                                jr      .ScaleLoop                  ; scaled down Dx and Dy to 8 bit, Dy may have been negative
 170++CD22              .CalculateDelta:        ;ld      (clipDx),hl                ;OPTIMISATION 6/11/21 commented out
 171++CD22                                      ;ld      (clipDy),de                ;OPTIMISATION 6/11/21 commented out
 172++CD22              ; By now, the high bytes of both |delta_x| and |delta_y| are zero We know that h and d are both = 0 as that's what we tested with a BEQ
 173++CD22 AF           .LL113:                 xor     a
 174++CD23 32 D2 92                             ld      (varT),a                    ; t = 0
 175++CD26 7D                                   ld      a,l                         ; If delta_x_lo < delta_y_lo, so our line is more vertical than horizontal, jump to LL114
 176++CD27                                      JumpIfALTNusng  e, .LL114           ;
 176++CD27 BB          >                        cp      e
 176++CD28 DA 38 CD    >                        jp		c, .LL114
 177++CD2B              ; Here Dx >= Dy sp calculate Delta Y / delta X
 178++CD2B 32 B4 92     .DxGTEDy:               ld      (varQ),a                    ; Set Q = delta_x_lo
 179++CD2E 57                                   ld      d,a                         ; d = also Q for calc
 180++CD2F 7B                                   ld      a,e                         ; Set A = delta_y_lo
 181++CD30 CD 1D AC                             call    LL28Amul256DivD             ; Call LL28 to calculate:  R (actually a reg) = 256 * A / Q   = 256 * delta_y_lo / delta_x_lo
 182++CD33 32 B5 92                             ld      (varR),a                    ;
 183++CD36 18 10                                jr      .LL116                      ; Jump to LL116, as we now have the line's gradient in R
 184++CD38              ; Here Delta Y > Delta X so calulate delta X / delta Y
 185++CD38 7B           .LL114:                 ld      a,e                         ; Set Q = delta_y_lo
 186++CD39 57                                   ld      d,a
 187++CD3A 32 B4 92                             ld      (varQ),a
 188++CD3D 7D                                   ld      a,l                         ; Set A = delta_x_lo
 189++CD3E CD 1D AC                             call    LL28Amul256DivD             ; Call LL28 to calculate: R = 256 * A / Q  = 256 * delta_x_lo / delta_y_lo
 190++CD41 32 B5 92                             ld      (varR),a                    ;
 191++CD44 21 D2 92                             ld      hl,varT                     ; T was set to 0 above, so this sets T = &FF
 192++CD47 35                                   dec     (hl)
 193++CD48 D1           .LL116:                 pop     de                          ; get back X2
 194++CD49 E1                                   pop     hl                          ; get back X1 into hl,
 195++CD4A 3A B5 92                             ld      a,(varR)                    ; Store the gradient in XX12+2 this can be optimised later
 196++CD4D 32 40 CC                             ld      (clipGradient),a
 197++CD50 FD 6F                                ld      iyl,a
 198++CD52                                      ;       push    af                   ;OPTIMISATION 6/11/21 commented out
 199++CD52                                      ;       ld      a,iyl                ;OPTIMISATION 6/11/21 commented out
 200++CD52                                      ;       ld      (varXX12p2),a        ;OPTIMISATION 6/11/21 commented out
 201++CD52                                      ;       pop     af                   ;OPTIMISATION 6/11/21 commented out
 202++CD52 3A B6 92                             ld      a,(varS)
 203++CD55 32 41 CC                             ld      (clipDxySign),a             ;  Store the type of slope in XX12+3, bit 7 clear means ?Not needed as clipDxySign is used for varS earlier?
 204++CD58                                                                          ; top left to bottom right, bit 7 set means top right to bottom left **CODE IS WRONG HERE A TEST IS BL to TR
 205++CD58 FD 7C                                ld      a,iyh                       ; iyh was XX13 from earlier
 206++CD5A FE 00                                cp      0                           ; If XX13 = 0, skip the following instruction
 207++CD5C 28 05                                jr      z,.LL138                    ;
 208++CD5E ED 27 80                             test    $80                         ; If XX13 is positive, it must be 95. This means (x1, y1) is on-screen but (x2, y2) isn't, so we jump to LLX117 to swap the (x1, y1) and (x2, y2)
 209++CD61 28 13                                jr      z,.LLX117                   ; coordinates around before doing the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 210++CD63              ; If we get here, XX13 = 0 or 191, so (x1, y1) is off-screen and needs clipping
 211++CD63 CD 8A CD     .LL138                  call    ClipPointHLBC               ; Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 212++CD66 FD 7C                                ld      a,iyh                       ; If XX13 = 0, i.e. (x2, y2) is on-screen, jump down to LL124 to return with a successfully clipped line
 213++CD68 ED 27 80                             test    $80
 214++CD6B 28 1A                                jr      z,.LL124
 215++CD6D              ; If we get here, XX13 = 191 (both coordinates are off-screen)
 216++CD6D 7C           .LL117:                 ld      a,h                         ; If either of x1_hi or y1_hi are non-zero, jump to
 217++CD6E B0                                   or      b                           ; LL137 to return from the subroutine with the C flag
 218++CD6F C2 95 CC                             jp      nz, .PointsOutofBounds      ; set, as the line doesn't fit on-screen
 219++CD72 B1                                   or      c                           ; if x1 and y1 hi are both zero test bit 8 or Y1 to see if its > 128
 220++CD73 FA 95 CC                             jp      m, .PointsOutofBounds       ; set, as the line doesn't fit on-screen
 221++CD76              ; If we get here, XX13 = 95 or 191, and in both cases (x2, y2) is off-screen, so we now need to swap the (x1, y1) and (x2, y2) coordinates around before doing
 222++CD76              ; the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 223++CD76 EB           .LLX117:                ex      de,hl                       ;  swap X1 and X2
 224++CD77 DD E5                                push    ix                          ;  swap Y1 and Y2
 225++CD79 C5                                   push    bc
 226++CD7A DD E1                                pop     ix
 227++CD7C C1                                   pop     bc
 228++CD7D CD 8A CD                             call    ClipPointHLBC               ;  Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 229++CD80 3A 44 CC                             ld      a,(SWAP)
 230++CD83 3D                                   dec     a
 231++CD84 32 44 CC                             ld      (SWAP),a                    ; Set SWAP = &FF to indicate that we just clipped the line at the (x2, y2) end by swapping the coordinates (the DEC does this as we set SWAP to 0 at the start of this subroutine)
 232++CD87 C3 82 CC     .LL124:                 jp      .ClipDone                    ; now put points in place
 233++CD8A
 234++CD8A              ; Move a point along a line until it is on-screen point is held in HL(X) BC(Y) LL118
 235++CD8A              ; iyh still holds XX13 iyl still holds gradient
 236++CD8A 7C           ClipPointHLBC:          ld      a,h                         ; If x1_hi is positive, jump down to LL119 to skip the following
 237++CD8B ED 27 80                             test    $80
 238++CD8E 28 17                                jr      z,.LL119
 239++CD90 32 B6 92     .X1isNegative:          ld      (varS),a                    ;  Otherwise x1_hi is negative, i.e. off the left of the screen, so set S = x1_hi
 240++CD93 E5 D5 C5                             push    hl,,de,,bc
 241++CD96 CD 0C CE                             call    LL120                       ;  Call LL120 to calculate:   (Y X) = (S x1_lo) * XX12+2      if T = 0   = x1 * gradient
 242++CD99                                                                          ;                             (Y X) = (S x1_lo) / XX12+2      if T <> 0  = x1 / gradient
 243++CD99                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 244++CD99 C1 D1 E1                             pop    hl,,de,,bc                   ;  get coordinates back
 245++CD9C 2A 45 CC                             ld      hl,(varYX)
 246++CD9F              ;                        ex      hl,de
 247++CD9F                                  ;    ld      hl,bc
 248++CD9F 09                                   add     hl,bc                       ; y1 = y1 + varYX
 249++CDA0 44 4D                                ld      bc,hl
 250++CDA2 21 00 00                             ld      hl,0                        ; Set x1 = 0
 251++CDA5               ;                       pop     de
 252++CDA5 18 1A                                jr      .LL134                      ; in BBC is set x to 0 to force jump, we will just jump
 253++CDA7 FE 00        .LL119:                 cp      0
 254++CDA9 28 16                                jr      z,.LL134                    ;  If x1_hi = 0 then jump down to LL134 to skip the following, as the x-coordinate is already on-screen (as 0 <= (x_hi x_lo) <= 255)
 255++CDAB 3D                                   dec     a
 256++CDAC 32 B6 92                             ld      (varS),a                    ;  Otherwise x1_hi is positive, i.e. x1 >= 256 and off the right side of the screen, so set S = x1_hi - 1
 257++CDAF E5 D5 C5                             push    hl,,de,,bc
 258++CDB2 CD 0C CE                             call    LL120                      ;  Call LL120 to calculate: (Y X) = (S x1_lo) * XX12+2      if T = 0  = (x1 - 256) * gradient
 259++CDB5                                                                          ;                           (Y X) = (S x1_lo) / XX12+2      if T <> 0 = (x1 - 256) / gradient
 260++CDB5                                                                          ;  with the sign of (Y X) set to the opposite of theline's direction of slope
 261++CDB5 C1 D1 E1                             pop     hl,,de,,bc
 262++CDB8                                    ;  push    de                          ; Set y1 = y1 + (Y X)
 263++CDB8 2A 45 CC                             ld      hl,(varYX)
 264++CDBB                                    ; ex      de,hl                       ;OPTIMISATION 6/11/21 commented out
 265++CDBB 09                                   add     hl,bc                        ;OPTIMISATION 6/11/21 simplfied post debug
 266++CDBC 44 4D                                ld      bc,hl                        ;OPTIMISATION 6/11/21 simplfied post debug
 267++CDBE                                    ; ex      hl,de                       ;OPTIMISATION 6/11/21 commented out
 268++CDBE                                    ; ld      hl,bc                       ;OPTIMISATION 6/11/21 commented out
 269++CDBE                                    ; add     hl,de                       ; y1 = y1 + varYX
 270++CDBE 21 FF 00                             ld      hl,255                      ; Set x1 = 255
 271++CDC1                                    ;  pop     de
 272++CDC1              ; We have moved the point so the x-coordinate is on screen (i.e. in the range 0-255), so now for they-coordinate
 273++CDC1 78           .LL134:                 ld      a,b                         ; If y1_hi is positive, jump down to LL135  to skip the following
 274++CDC2 ED 27 80                             test    $80                         ;
 275++CDC5 28 1A                                jr      z,.LL135                    ;
 276++CDC7 32 B6 92                             ld      (varS),a                    ; Otherwise y1_hi is negative, i.e. off the top of the screen, so set S = y1_hi
 277++CDCA 79                                   ld      a,c                         ; Set R = y1_lo
 278++CDCB 32 B5 92                             ld      (varR),a                    ;
 279++CDCE E5 D5 C5                             push    hl,,de,,bc
 280++CDD1 CD 33 CE                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 281++CDD4                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 282++CDD4                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 283++CDD4 C1 D1 E1                             pop     hl,,de,,bc
 284++CDD7 D5                                   push    de
 285++CDD8 EB                                   ex      hl,de                       ; de = x1
 286++CDD9 2A 45 CC                             ld      hl,(varYX)                  ; hl = varYX
 287++CDDC 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 288++CDDD D1                                   pop     de                          ; de = x2 again
 289++CDDE 01 00 00                             ld      bc,0                        ; Set y1 = 0
 290++CDE1 79           .LL135:                 ld      a,c                         ; if bc < 128 then no work to do
 291++CDE2 E6 80                                and     $80
 292++CDE4 B0                                   or      b                           ; here we see if c bit 8 is set or anything in b as we know if its 0 this would mean there is no need to clip
 293++CDE5 C8                                   ret     z
 294++CDE6 E5                                   push    hl
 295++CDE7 60 69                                ld      hl,bc
 296++CDE9 01 80 00                             ld      bc,128
 297++CDEC B7                                   or      a
 298++CDED ED 42                                sbc     hl,bc                       ; hl =  (S R) = (y1_hi y1_lo) - 128
 299++CDEF 22 B5 92                             ld      (varRS), hl                 ; and now RS (or SR)
 300++CDF2 7C                                   ld      a,h
 301++CDF3 E1                                   pop     hl
 302++CDF4 ED 27 80                             test    $80                         ; If the subtraction underflowed, i.e. if y1 < 192, then y1 is already on-screen, so jump to LL136 to return from the subroutine, as we are done
 303++CDF7 C0                                   ret     nz
 304++CDF8              ; If we get here then y1 >= 192, i.e. off the bottom of the screen
 305++CDF8 E5 D5 C5     .LL139:                 push    hl,,de,,bc
 306++CDFB CD 33 CE                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 307++CDFE                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 308++CDFE                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 309++CDFE C1 D1 E1                             pop     hl,,de,,bc
 310++CE01 D5                                   push    de
 311++CE02 EB                                   ex      hl,de
 312++CE03 2A 45 CC                             ld      hl,(varYX)
 313++CE06 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 314++CE07 01 7F 00                             ld      bc,127                      ; set bc to 127 bottom of screen
 315++CE0A D1                                   pop     de
 316++CE0B C9           .LL136:                 ret                                 ;  Return from the subroutine
 317++CE0C
 318++CE0C
 319++CE0C              ; Calculate the following:   * If T = 0  (more vertical than horizontal), (Y X) = (S x1_lo) * XX12+2
 320++CE0C              ;                            * If T <> 0 (more horizontal than vertical), (Y X) = (S x1_lo) / XX12+2
 321++CE0C              ;                              giving (Y X) the opposite sign to the slope direction in XX12+3.
 322++CE0C              ; Other entry points        LL122                Calculate (Y X) = (S R) * Q and set the sign to the opposite of the top byte on the stack
 323++CE0C 7D           LL120:                  ld      a,l                          ; Set R = x1_lo
 324++CE0D 32 B5 92                             ld      (varR),a
 325++CE10 CD 7B CE                             call    LL129                        ;  Call LL129 to do the following:  Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 326++CE13 F5                                   push    af                           ;  Store A on the stack so we can use it later
 327++CE14 C5                                   push    bc
 328++CE15 47                                   ld      b,a
 329++CE16 3A D2 92                             ld      a,(varT)                     ; instead : (Y X) = (S R ) / Q
 330++CE19 FE 00                                cp      0
 331++CE1B 78                                   ld      a,b
 332++CE1C C1                                   pop     bc                           ; we can't use af as that would disrupt the flags
 333++CE1D 20 23                                jr      nz, LL121
 334++CE1F              ; The following calculates:  (Y X) = (S R) * Q using the same shift-and-add algorithm that's documented in MULT1
 335++CE1F 3A 40 CC     LL122:                  ld      a,(clipGradient)
 336++CE22 32 B4 92                             ld      (varQ),a; optimise
 337++CE25 CD FB A1                             call    HLequSRmulQdiv256
 338++CE28 22 45 CC                             ld      (varYX),hl
 339++CE2B F1                                   pop     af
 340++CE2C ED 27 80                             test    $80
 341++CE2F CA 6E CE                             jp      z,LL133
 342++CE32 C9                                   ret
 343++CE33              ; Calculate the following: * If T = 0,  calculate (Y X) = (S R) / XX12+2 (actually SR & XX12+2 /256)
 344++CE33              ;                          * If T <> 0, calculate (Y X) = (S R) * XX12+2
 345++CE33              ;                          giving (Y X) the opposite sign to the slope direction in XX12+3.
 346++CE33              ;
 347++CE33              ; Other entry points:      LL121                Calculate (Y X) = (S R) / Q and set the sign to the opposite of the top byte on the stack
 348++CE33              ;                          LL133                Negate (Y X) and return from the subroutine
 349++CE33              ;                          LL128                Contains an RTS
 350++CE33 CD 7B CE     LL123:                  call    LL129                       ; Call LL129 to do the following: Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 351++CE36 F5                                   push    af                          ; Store A on the stack so we can use it later
 352++CE37 C5                                   push    bc                          ; If T is non-zero, so it's more horizontal than vertical, jump down to LL121 to calculate this
 353++CE38 47                                   ld      b,a
 354++CE39 3A D2 92                             ld      a,(varT)                    ; instead : (Y X) = (S R) * Q *** this looks to be the wrong way roudn for Y!!!!
 355++CE3C FE 00                                cp      0
 356++CE3E 78                                   ld      a,b
 357++CE3F C1                                   pop     bc
 358++CE40 20 DD                                jr      nz, LL122
 359++CE42              ; The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2, its actually X.Y=R.S*256/Q
 360++CE42 11 FE FF     LL121:                  ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 361++CE45 2A B5 92                             ld      hl,(varRS)                  ; hl = RS
 362++CE48 3A B4 92                             ld      a,(varQ)
 363++CE4B 47                                   ld      b,a                         ; b = q
 364++CE4C              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 364++CE4C CB 25       >			   sla l
 364++CE4E CB 14       >			   rl  h
 365++CE50 7C                                   ld      a,h
 366++CE51 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 367++CE53                                      JumpIfALTNusng b, .LL132            ; if S <  Q = 256/gradient skip subtractions
 367++CE53 B8          >                        cp      b
 367++CE54 DA 5F CE    >                        jp		c, .LL132
 368++CE57 3F           .LL131:                 ccf                                 ; compliment carry
 369++CE58 98                                   sbc     a,b                         ; q
 370++CE59 67                                   ld      h,a                         ; h (s)
 371++CE5A 7D                                   ld      a,l                         ; r
 372++CE5B DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 373++CE5D 37                                   scf                                 ; set carry for next rolls
 374++CE5E 3F                                   ccf
 375++CE5F              .LL132:                 RollDELeft1                         ; Rotate de bits left
 375++CE5F CB 13       >               rl  e
 375++CE61 CB 12       >               rl  d
 376++CE63 38 E7                                jr      c,.LL130                    ;
 377++CE65 ED 53 45 CC                          ld      (varYX),de
 378++CE69 F1                                   pop     af              ; get back sign
 379++CE6A ED 27 80                             test    $80
 380++CE6D C8                                   ret     z               ; if negative then return with value as is reversed sign
 381++CE6E 2A 45 CC     LL133:                  ld      hl,(varYX)      ; may not actually need this?
 382++CE71                                      NegHL
 382++CE71 AF          >                    xor a
 382++CE72 95          >                    sub l
 382++CE73 6F          >                    ld l,a
 382++CE74 9F          >                    sbc a,a
 382++CE75 94          >                    sub h
 382++CE76 67          >                    ld h,a
 383++CE77 22 45 CC                             ld      (varYX),hl
 384++CE7A C9           LL128:                  ret
 385++CE7B              ; Do the following, in this order:  Q = XX12+2
 386++CE7B              ;                                   A = S EOR XX12+3
 387++CE7B              ;                                   (S R) = |S R|
 388++CE7B              ; This sets up the variables required above to calculate (S R) / XX12+2 and give the result the opposite sign to XX13+3.
 389++CE7B 3A 40 CC     LL129:                  ld      a,(clipGradient)
 390++CE7E 32 B4 92                             ld      (varQ),a                    ;Set Q = XX12+2
 391++CE81 3A B6 92                             ld      a,(varS)                    ; If S is positive, jump to LL127
 392++CE84 E5 F5                                push    hl,,af
 393++CE86 ED 27 80                             test    $80
 394++CE89 28 0C                                jr      z,.LL127
 395++CE8B 2A B5 92                             ld      hl,(varRS)                  ; else SR = | SR|
 396++CE8E                                      NegHL
 396++CE8E AF          >                    xor a
 396++CE8F 95          >                    sub l
 396++CE90 6F          >                    ld l,a
 396++CE91 9F          >                    sbc a,a
 396++CE92 94          >                    sub h
 396++CE93 67          >                    ld h,a
 397++CE94 22 B5 92                             ld      (varRS),hl
 398++CE97 21 41 CC     .LL127:                 ld      hl,clipDxySign
 399++CE9A F1                                   pop     af
 400++CE9B AE                                   xor     (hl)                        ; a = S XOR clipDxySign
 401++CE9C E1                                   pop     hl
 402++CE9D C9                                   ret
 403++CE9E
# file closed: ././ModelRender/CLIP-LL145.asm
 463+ CE9E              ;--------------------------------------------------------------------------------------------------------
 464+ CE9E                                      include "./Variables/CopyRotmatToTransMat.asm"
# file opened: ././Variables/CopyRotmatToTransMat.asm
   1++CE9E              ; Set TransMatTo
   2++CE9E              ; XX16(1 0)   (3 2)   (5 4)   = sidev_x sidev_y sidev_z XX16(13,12) (15 14) (17 16)
   3++CE9E              ; XX16(7 6)   (9 8)   (11 10) = roofv_x roofv_y roofv_z XX16(7 6)   (9 8)   (11 10)
   4++CE9E              ; XX16(13 12) (15 14) (17 16) = nosev_x nosev_y nosev_z XX16(1 0)   (3 2)   (5 4)
   5++CE9E              ; This moves Side XYZ to position 0, Roof XYZ to position 1 annd nose XYZ to position 2 as a copy of each batch of 6 bytes
   6++CE9E              CopyRotmatToTransMat:                       ; Tested
   7++CE9E              LL15_CopyRotMat:                            ; unrolled loop
   8++CE9E 21 15 C0             ld      hl,UBnkrotmatSidevX
   9++CEA1 11 34 C0             ld      de,UBnkTransmatSidevX
  10++CEA4                      SixLDIInstrunctions
  10++CEA4 ED A0       >                        ldi
  10++CEA6 ED A0       >                        ldi
  10++CEA8 ED A0       >                        ldi
  10++CEAA ED A0       >                        ldi
  10++CEAC ED A0       >                        ldi
  10++CEAE ED A0       >                        ldi
  11++CEB0 21 1B C0             ld      hl,UBnkrotmatRoofvX
  12++CEB3 11 3A C0             ld      de, UBnkTransmatRoofvX
  13++CEB6                      SixLDIInstrunctions
  13++CEB6 ED A0       >                        ldi
  13++CEB8 ED A0       >                        ldi
  13++CEBA ED A0       >                        ldi
  13++CEBC ED A0       >                        ldi
  13++CEBE ED A0       >                        ldi
  13++CEC0 ED A0       >                        ldi
  14++CEC2 21 21 C0             ld      hl,UBnkrotmatNosevX
  15++CEC5 11 40 C0             ld      de, UBnkTransmatNosevX
  16++CEC8                      SixLDIInstrunctions
  16++CEC8 ED A0       >                        ldi
  16++CECA ED A0       >                        ldi
  16++CECC ED A0       >                        ldi
  16++CECE ED A0       >                        ldi
  16++CED0 ED A0       >                        ldi
  16++CED2 ED A0       >                        ldi
  17++CED4 C9                   ret
  18++CED5
# file closed: ././Variables/CopyRotmatToTransMat.asm
 465+ CED5                                      include "./Variables/TransposeXX12ByShipToXX15.asm"
# file opened: ././Variables/TransposeXX12ByShipToXX15.asm
   1++CED5              TransposeXX12ByShipToXX15:
   2++CED5 2A 7F C0             ld		hl,(UBnkXX12xLo)					; get X into HL
   3++CED8 7C           		ld		a,h			                        ; get XX12 Sign
   4++CED9 E6 80        		and		$80									; check sign bit on high byte
   5++CEDB 47           		ld		b,a									; and put it in of 12xlo in b
   6++CEDC                      ;110921 debugld      h,0
   7++CEDC 7C                   ld      a,h
   8++CEDD E6 7F                and     $7F
   9++CEDF 67                   ld      h,a
  10++CEE0                      ;110921 debugld      h,0
  11++CEE0 ED 5B 0C C0  		ld		de,(UBnKxlo)						;
  12++CEE4 3A 0E C0     		ld		a,(UBnKxsgn)						; get Ship Pos (low,high,sign)
  13++CEE7 E6 80        		and		$80									; make sure we only have bit 7
  14++CEE9 4F           		ld		c,a									; and put sign of unkxsgn c
  15++CEEA CD E6 A7     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
  16++CEED B4           		or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
  17++CEEE 67           		ld		h,a
  18++CEEF 22 79 C0     		ld		(UBnkXScaled),hl					; now write it out to XX15 X pos
  19++CEF2              ; ..................................
  20++CEF2 2A 81 C0     		ld		hl,(UBnkXX12yLo)					; Repeat above for Y coordinate
  21++CEF5 7C           		ld		a,h
  22++CEF6 E6 80        		and		$80
  23++CEF8 47           		ld		b,a
  24++CEF9                      ;110921 debugld      h,0
  25++CEF9 7C                   ld      a,h
  26++CEFA E6 7F                and     $7F
  27++CEFC 67                   ld      h,a
  28++CEFD                      ;110921 debugld      h,0
  29++CEFD ED 5B 0F C0  		ld		de,(UBnKylo)
  30++CF01 3A 11 C0     		ld		a,(UBnKysgn)
  31++CF04 E6 80        		and		$80									; make sure we only have bit 7
  32++CF06 4F           		ld		c,a
  33++CF07 CD E6 A7     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  34++CF0A B4           		or		h									; combine sign in A with H
  35++CF0B 67           		ld		h,a
  36++CF0C 22 7B C0     		ld		(UBnkYScaled),hl
  37++CF0F              ; ..................................
  38++CF0F 2A 83 C0     		ld		hl,(UBnkXX12zLo)					; and now repeat for Z cooord
  39++CF12 7C           		ld		a,h
  40++CF13 E6 80        		and		$80
  41++CF15 47           		ld		b,a
  42++CF16                      ;110921 debugld      h,0
  43++CF16 7C                   ld      a,h
  44++CF17 E6 7F                and     $7F
  45++CF19 67                   ld      h,a
  46++CF1A                      ;110921 debugld      h,0
  47++CF1A ED 5B 12 C0  		ld		de,(UBnKzlo)
  48++CF1E 3A 14 C0     		ld		a,(UBnKzsgn)
  49++CF21 E6 80        		and		$80									; make sure we only have bit 7
  50++CF23 4F           		ld		c,a
  51++CF24 CD E6 A7     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  52++CF27 B4           		or		h									; combine sign in A with H
  53++CF28 67           		ld		h,a
  54++CF29 CB 7C        		bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
  55++CF2B 20 16        		jr		nz,ClampZto4                        ; result was negative so we need to clamp to 4
  56++CF2D E6 7F                and     $7F                                 ; a = value unsigned
  57++CF2F 20 06                jr      nz,NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
  58++CF31 7D                   ld      a,l                                 ; get low byte now
  59++CF32              		JumpIfALTNusng 4,ClampZto4					; if its < 4 then fix at 4
  59++CF32 FE 04       >                        cp      4
  59++CF34 DA 43 CF    >                        jp		c, ClampZto4
  60++CF37              NoClampZto4:
  61++CF37 22 7D C0     		ld		(UBnkZScaled),hl					; hl = signed calculation and > 4
  62++CF3A 7D           		ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
  63++CF3B 32 D2 92             ld      (varT),a
  64++CF3E 7C           		ld		a,h
  65++CF3F 32 B3 92             ld      (varU),a
  66++CF42 C9           		ret
  67++CF43              ClampZto4:											; This is where we limit 4 to a minimum of 4
  68++CF43 21 04 00     		ld		hl,4
  69++CF46 22 7D C0     		ld		(UBnkZScaled),hl; BODGE FOR NOW
  70++CF49 7D           		ld		a,l
  71++CF4A 32 D2 92             ld      (varT),a                            ;                                                                           ;;;
  72++CF4D 7C           		ld		a,h
  73++CF4E 32 B3 92             ld      (varU),a 						; compatibility for now
  74++CF51 C9           		ret
  75++CF52
# file closed: ././Variables/TransposeXX12ByShipToXX15.asm
 466+ CF52                                      include "./Maths/Utilities/ScaleNodeTo8Bit.asm"
# file opened: ././Maths/Utilities/ScaleNodeTo8Bit.asm
   1++CF52              ScaleNodeTo8Bit:								; TODO make signed
   2++CF52 ED 4B 7D C0  	ld			bc,(UBnkZScaled)
   3++CF56 2A 79 C0     	ld			hl,(UBnkXScaled)
   4++CF59 ED 5B 7B C0  	ld			de,(UBnkYScaled)
   5++CF5D              SetABSbc:
   6++CF5D 78           	ld			a,b
   7++CF5E DD 67        	ld			ixh,a
   8++CF60 E6 7F        	and			SignMask8Bit
   9++CF62 47           	ld			b,a									; bc = ABS bc
  10++CF63              SetABShl:
  11++CF63 7C           	ld			a,h
  12++CF64 DD 6F        	ld			ixl,a
  13++CF66 E6 7F        	and			SignMask8Bit
  14++CF68 67           	ld			h,a									; hl = ABS hl
  15++CF69              SetABSde:
  16++CF69 7A           	ld			a,d
  17++CF6A FD 67        	ld			iyh,a
  18++CF6C E6 7F        	and			SignMask8Bit
  19++CF6E 57           	ld			d,a									; de = ABS de
  20++CF6F              ScaleNodeTo8BitLoop:
  21++CF6F 78               ld          a,b		                            ; U	\ z hi
  22++CF70 B4           	or			h                                   ; XX15+1	\ x hi
  23++CF71 B2           	or			d                                   ; XX15+4	\ y hi
  24++CF72 28 0F            jr          z,ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
  25++CF74                  ShiftHLRight1
  25++CF74 CB 3C       >			   srl h
  25++CF76 CB 1D       >			   rr  l
  26++CF78                  ShiftDERight1
  26++CF78 CB 3A       >			   srl d
  26++CF7A CB 1B       >			   rr  e
  27++CF7C              	ShiftBCRight1
  27++CF7C CB 38       >			   srl b
  27++CF7E CB 19       >			   rr  c
  28++CF80 C3 6F CF         jp          ScaleNodeTo8BitLoop
  29++CF83              ScaleNodeDone:										; now we have scaled values we have to deal with sign
  30++CF83 DD 7C        	ld			a,ixh								; get sign bit and or with b
  31++CF85 E6 80        	and			SignOnly8Bit
  32++CF87 B0           	or			b
  33++CF88 47           	ld			b,a
  34++CF89              SignforHL:
  35++CF89 DD 7D        	ld			a,ixl								; get sign bit and or with b
  36++CF8B E6 80        	and			SignOnly8Bit
  37++CF8D B4           	or			h
  38++CF8E 67           	ld			h,a
  39++CF8F              SignforDE:
  40++CF8F FD 7C        	ld			a,iyh								; get sign bit and or with b
  41++CF91 E6 80        	and			SignOnly8Bit
  42++CF93 B2           	or			d
  43++CF94 57           	ld			d,a
  44++CF95              SignsDoneSaveResult:
  45++CF95 ED 43 7D C0  	ld			(UBnkZScaled),bc
  46++CF99 22 79 C0     	ld			(UBnkXScaled),hl
  47++CF9C ED 53 7B C0  	ld			(UBnkYScaled),de
  48++CFA0 78           	ld			a,b
  49++CFA1 32 B3 92     	ld			(varU),a
  50++CFA4 79           	ld			a,c
  51++CFA5 32 D2 92     	ld			(varT),a
  52++CFA8 C9           	ret
  53++CFA9
# file closed: ././Maths/Utilities/ScaleNodeTo8Bit.asm
 467+ CFA9
 468+ CFA9              ;--------------------------------------------------------------------------------------------------------
 469+ CFA9 21 A6 C0     SetFaceAVisible:        ld      hl,UbnkFaceVisArray
 470+ CFAC ED 31                                add     hl,a
 471+ CFAE 3E FF                                ld      a,$FF
 472+ CFB0 77                                   ld      (hl),a
 473+ CFB1 C9                                   ret
 474+ CFB2              ;--------------------------------------------------------------------------------------------------------
 475+ CFB2 21 A6 C0     SetFaceAHidden:         ld      hl,UbnkFaceVisArray
 476+ CFB5 ED 31                                add     hl,a
 477+ CFB7 AF                                   xor     a
 478+ CFB8 77                                   ld      (hl),a
 479+ CFB9 C9                                   ret
 480+ CFBA              ;--------------------------------------------------------------------------------------------------------
 481+ CFBA 3A 10 C3     SetAllFacesVisible:     ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+FaceCtX4Addr                                 ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 482+ CFBD CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 483+ CFBF CB 3F                                srl     a                           ;  /=4  TODO add this into blueprint data for speed                                                           ;;; For loop = 15 to 0
 484+ CFC1 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 485+ CFC2 21 A6 C0                             ld      hl,UbnkFaceVisArray
 486+ CFC5 3E FF                                ld      a,$FF
 487+ CFC7              SetAllFacesVisibleLoop:
 488+ CFC7 77           EE30:                   ld      (hl),a
 489+ CFC8 23                                   inc     hl
 490+ CFC9 10 FC                                djnz    SetAllFacesVisibleLoop
 491+ CFCB C9                                   ret
 492+ CFCC              ;--------------------------------------------------------------------------------------------------------
 493+ CFCC 3A 10 C3     SetAllFacesHidden:      ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+ShipHullFacesCount                           ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 494+ CFCF CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 495+ CFD1 CB 3F                                srl     a                           ;  /=4                                                                                  ;;; For loop = 15 to 0
 496+ CFD3 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 497+ CFD4 06 10                                ld      b,16
 498+ CFD6 21 A6 C0                             ld      hl,UbnkFaceVisArray
 499+ CFD9 3E 00                                ld      a,$00
 500+ CFDB 77           SetAllFacesHiddenLoop:  ld      (hl),a
 501+ CFDC 23                                   inc     hl
 502+ CFDD 10 FC                                djnz    SetAllFacesHiddenLoop
 503+ CFDF C9                                   ret
 504+ CFE0
 505+ CFE0              ;;;;X = normal scale
 506+ CFE0              ;;;;ZtempHi = zhi
 507+ CFE0              ;;;;......................................................
 508+ CFE0              ;;;; if ztemp hi <> 0                                   ::Scale Object Distance
 509+ CFE0              ;;;;  Loop                                              ::LL90
 510+ CFE0              ;;;;     inc X
 511+ CFE0              ;;;;     divide X, Y & ZtempHiLo by 2
 512+ CFE0              ;;;;  Until ZtempHi = 0
 513+ CFE0              ;;;;......................................................
 514+ CFE0              ;-LL21---------------------------------------------------------------------------------------------------
 515+ CFE0                                      include "Universe/NormaliseTransMat.asm"
# file opened: ./Universe/NormaliseTransMat.asm
   1++CFE0              ;divdide by 16 using undocumented instrunctions
   2++CFE0              Norm256mulAdivQ:
   3++CFE0 47               ld      b,a
   4++CFE1 0E 00            ld      c,0
   5++CFE3 16 00            ld      d,0
   6++CFE5 3A B4 92         ld      a,(varQ)
   7++CFE8 5F               ld      e,a
   8++CFE9              ;Input: BC = Dividend, DE = Divisor, HL = 0
   9++CFE9              ;Output: BC = Quotient, HL = Remainder
  10++CFE9              NormDIV16UNDOC:
  11++CFE9 21 00 00         ld      hl,0
  12++CFEC 78               ld      a,b
  13++CFED 06 10            ld      b,16
  14++CFEF              NormDIV16UNDOCLOOP:
  15++CFEF CB 31        	sll	    c		; unroll 16 times
  16++CFF1 17           	rla	    		; ...
  17++CFF2 ED 6A        	adc	    hl,hl		; ...
  18++CFF4 ED 52        	sbc	    hl,de		; ...
  19++CFF6 30 02        	jr	    nc,NormDIV16UNDOCSKIP		; ...
  20++CFF8 19           	add	    hl,de		; ...
  21++CFF9 0D           	dec	    c		; ...
  22++CFFA              NormDIV16UNDOCSKIP:
  23++CFFA 10 F3            djnz    NormDIV16UNDOCLOOP
  24++CFFC 79               ld      a,c
  25++CFFD 32 B5 92         ld      (varR),a
  26++D000 C9               ret
  27++D001
  28++D001              ; Tested OK
  29++D001              NormaliseTransMat:
  30++D001              ;LL21
  31++D001 21 45 C0             ld      hl,UBnkTransmatNosevZ+1         ; initialise loop
  32++D004 0E C5                ld      c,ConstNorm                 ; c = Q = norm = 197
  33++D006 79                   ld      a,c
  34++D007 32 B4 92             ld      (varQ),a                    ; set up varQ
  35++D00A 06 09                ld      b,9                         ; total of 9 elements to transform
  36++D00C              LL21Loop:
  37++D00C 56                   ld      d,(hl)
  38++D00D 2B                   dec     hl
  39++D00E 5E                   ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
  40++D00F                      ShiftDELeft1                        ; De = DE * 2
  40++D00F CB 23       >			   sla e
  40++D011 CB 12       >			   rl  d
  41++D013 7A                   ld      a,d                         ; a = hi byte after shifting
  42++D014 E5           		push	hl
  43++D015 C5           		push	bc
  44++D016 CD E0 CF             call    Norm256mulAdivQ
  45++D019              		;===call    RequAmul256divC				; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
  46++D019 79                   ld      a,c                         ; BFRDIV returns R also in l reg
  47++D01A C1           		pop		bc
  48++D01B E1           		pop		hl							; bc gets wrecked by BFRDIV
  49++D01C 77                   ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
  50++D01D 2B                   dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
  51++D01E 10 EC                djnz    LL21Loop                    ; loop from 2zLo through to 0xLo
  52++D020 C9                   ret
  53++D021
# file closed: ./Universe/NormaliseTransMat.asm
 516+ D021              ;-LL91---------------------------------------------------------------------------------------------------
 517+ D021
 518+ D021              ; Now we have
 519+ D021              ;   * XX18(2 1 0) = (x_sign x_hi x_lo)
 520+ D021              ;   * XX18(5 4 3) = (y_sign y_hi y_lo)
 521+ D021              ;   * XX18(8 7 6) = (z_sign z_hi z_lo)
 522+ D021              ;
 523+ D021              ;--------------------------------------------------------------------------------------------------------
 524+ D021                                      include "Universe/InverseXX16.asm"
# file opened: ./Universe/InverseXX16.asm
   1++D021              ; TESTEDOK
   2++D021
   3++D021              ;ScaleOrientationXX16:                       ; DEBUG TODO will combine with inverse later
   4++D021              ;        ld      a,(XX17)
   5++D021              ;        ld      ixl,a
   6++D021              ;        ld      ixh,9
   7++D021              ;        ld      hl,UBnkTransInv0x
   8++D021              ;        ld      a,(hl)
   9++D021              ;ScaleNode:
  10++D021              ;        ld      b,ixl
  11++D021              ;ScaleNodeLoop:
  12++D021              ;        sla      a
  13++D021              ;        djnz    ScaleNodeLoop
  14++D021              ;        ld      (hl),a
  15++D021              ;        inc     hl
  16++D021              ;        inc     hl
  17++D021              ;        dec     ixh
  18++D021              ;        jr      nz,ScaleNode
  19++D021              ;        ret
  20++D021
  21++D021
  22++D021              InverseXX16:								; lead routine into .LL42	\ ->  &4B04 \ DO nodeX-Ycoords their comment  \  TrnspMat
  23++D021              ; we coudl combine this with move to transmat later as an optimisation
  24++D021              ; INPUT - All Scaled
  25++D021              ;  They transmat has already been put into side, roof nose order
  26++D021              ;  XX16   = |sidev_x| |sidev_y| |sidev_z|  1  0  3  2  5  4 note each bytepair is Scaled value in low and high byte just for sign
  27++D021              ;  XX16   = |roofv_x| |roofv_y| |roofv_z|  7  6  8  9 11 10
  28++D021              ;  XX16   = |nosev_x| |nosev_y| |nosev_z| 13 12 15 14 17 16
  29++D021              ; OUTPUT
  30++D021              ;  XX16(1 0)   ( 3 2) ( 5 4 ) =  sidev_x roofv_x nosev_x
  31++D021              ;  XX16(7 6)   ( 8 9) (11 10) =  sidev_y roofv_y nosev_y
  32++D021              ;  XX16(13 12) (15 14)(17 16) =  sidev_z roofv_z nosev_z
  33++D021              ; First all side values become compoment 0 of each vector
  34++D021 2A 34 C0             ld      hl,(UBnkTransmatSidevX)     ;
  35++D024 ED 5B 3A C0          ld      de,(UBnkTransmatRoofvX)     ;
  36++D028 ED 4B 40 C0          ld      bc,(UBnkTransmatNosevX)     ;
  37++D02C 22 4C C0             ld      (UbnkTransInvRow0x0),hl     ;
  38++D02F ED 53 4E C0          ld      (UbnkTransInvRow0x1),de     ;
  39++D033 ED 43 50 C0          ld      (UbnkTransInvRow0x2),bc     ;
  40++D037 2A 36 C0             ld      hl,(UBnkTransmatSidevY)     ;
  41++D03A ED 5B 3C C0          ld      de,(UBnkTransmatRoofvY)     ;
  42++D03E ED 4B 42 C0          ld      bc,(UBnkTransmatNosevY)     ;
  43++D042 22 54 C0             ld      (UbnkTransInvRow1y0),hl     ;
  44++D045 ED 53 56 C0          ld      (UbnkTransInvRow1y1),de     ;
  45++D049 ED 43 58 C0          ld      (UbnkTransInvRow1y2),bc     ;
  46++D04D 2A 38 C0             ld      hl,(UBnkTransmatSidevZ)     ;
  47++D050 ED 5B 3E C0          ld      de,(UBnkTransmatRoofvZ)     ;
  48++D054 ED 4B 44 C0          ld      bc,(UBnkTransmatNosevZ)     ;
  49++D058 22 5C C0             ld      (UbnkTransInvRow2z0),hl     ;
  50++D05B ED 53 5E C0          ld      (UbnkTransInvRow2z1),de     ;
  51++D05F ED 43 60 C0          ld      (UbnkTransInvRow2z2),bc     ;
  52++D063 C9                   ret
  53++D064
  54++D064
# file closed: ./Universe/InverseXX16.asm
 525+ D064              ;--------------------------------------------------------------------------------------------------------
 526+ D064              ;--------------------------------------------------------------------------------------------------------
 527+ D064              ;   XX12(1 0) = [x y z] . sidev  = (dot_sidev_sign dot_sidev_lo)  = dot_sidev
 528+ D064              ;   XX12(3 2) = [x y z] . roofv  = (dot_roofv_sign dot_roofv_lo)  = dot_roofv
 529+ D064              ;   XX12(5 4) = [x y z] . nosev  = (dot_nosev_sign dot_nosev_lo)  = dot_nosev
 530+ D064              ; Returns
 531+ D064              ;
 532+ D064              ;   XX12(1 0)            The dot product of [x y z] vector with the sidev (or _x)
 533+ D064              ;                        vector, with the sign in XX12+1 and magnitude in XX12
 534+ D064              ;
 535+ D064              ;   XX12(3 2)            The dot product of [x y z] vector with the roofv (or _y)
 536+ D064              ;                        vector, with the sign in XX12+3 and magnitude in XX12+2
 537+ D064              ;
 538+ D064              ;   XX12(5 4)            The dot product of [x y z] vector with the nosev (or _z)
 539+ D064              ;                        vector, with the sign in XX12+5 and magnitude in XX12+4
 540+ D064              XXCURRENTN0equN1byN2div256: MACRO param1, param2, param3
 541+ D064 ~                                    ld      c,0
 542+ D064 ~                                    ld      a,param3                      ;
 543+ D064 ~                                    bit     7,a
 544+ D064 ~                                    jr      z,.val2Pos
 545+ D064 ~            ;HandleSignebits
 546+ D064 ~                                    neg
 547+ D064 ~                                    ld      c,$80
 548+ D064 ~            .val2Pos:               ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 549+ D064 ~                                    ld      a,param2                        ; A = XX16 element
 550+ D064 ~                                    bit     7,a
 551+ D064 ~                                    jr      z,.val1Pos
 552+ D064 ~            ;HandleSignebits
 553+ D064 ~                                    neg
 554+ D064 ~                                    ld      b,a
 555+ D064 ~                                    ld      a,c
 556+ D064 ~                                    xor     $80
 557+ D064 ~                                    ld      c,a
 558+ D064 ~                                    ld      a,b
 559+ D064 ~            .val1Pos:               ld      d,a
 560+ D064 ~            ;AequAmulQdiv256:
 561+ D064 ~                                    mul
 562+ D064 ~                                    ld      a,c
 563+ D064 ~                                    bit     7,a
 564+ D064 ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 565+ D064 ~                                    jr      z,.resultPos
 566+ D064 ~                                    neg
 567+ D064 ~            .resultPos:             ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 568+ D064                                      ENDM
 569+ D064
 570+ D064              AequN1xorN2:            MACRO  param1,param2
 571+ D064 ~                                    ld      a,(param1)
 572+ D064 ~                                    xor     param2
 573+ D064                                      ENDM
 574+ D064
 575+ D064              N0equN1byN2div256:      MACRO param1,param2,param3
 576+ D064 ~                                    ld      a,param3                        ;
 577+ D064 ~                                    ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 578+ D064 ~                                    ld      a,param2                        ; A = XX16 element
 579+ D064 ~                                    ld      d,a
 580+ D064 ~                                    mul
 581+ D064 ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 582+ D064 ~                                    ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 583+ D064                                      ENDM
 584+ D064
 585+ D064               ; TESTEDOK
 586+ D064              XX12DotOneRow:
 587+ D064              XX12CalcX:              N0equN1byN2div256 varT, (hl), (UBnkXScaled)       ; T = (hl) * regXX15fx /256
 587+ D064 3A 79 C0    >                        ld      a,(UBnkXScaled)                        ;
 587+ D067 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 587+ D068 7E          >                        ld      a,(hl)                        ; A = XX16 element
 587+ D069 57          >                        ld      d,a
 587+ D06A ED 30       >                        mul
 587+ D06C 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 587+ D06D 32 D2 92    >                        ld      (varT),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 588+ D070 23                                   inc     hl                                  ; move to sign byte
 589+ D071              XX12CalcXSign:          AequN1xorN2 UBnkXScaledSign,(hl)             ;
 589+ D071 3A 7A C0    >                        ld      a,(UBnkXScaledSign)
 589+ D074 AE          >                        xor     (hl)
 590+ D075 32 B6 92                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 591+ D078 23                                   inc     hl
 592+ D079              XX12CalcY:              N0equN1byN2div256 varQ, (hl),(UBnkYScaled)       ; Q = XX16 * XX15 /256 using varQ to hold regXX15fx
 592+ D079 3A 7B C0    >                        ld      a,(UBnkYScaled)                        ;
 592+ D07C 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 592+ D07D 7E          >                        ld      a,(hl)                        ; A = XX16 element
 592+ D07E 57          >                        ld      d,a
 592+ D07F ED 30       >                        mul
 592+ D081 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 592+ D082 32 B4 92    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 593+ D085                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 593+ D085 3A D2 92    >               ld       a,(varT)
 593+ D088 32 B5 92    >               ld       (varR),a
 594+ D08B 23                                   inc     hl
 595+ D08C                                      AequN1xorN2 UBnkYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 595+ D08C 3A 7C C0    >                        ld      a,(UBnkYScaledSign)
 595+ D08F AE          >                        xor     (hl)
 596+ D090              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 597+ D090 E5           STequSRplusAQ           push    hl
 598+ D091 CD DD A8                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 599+ D094 E1                                   pop     hl
 600+ D095 32 D2 92                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 601+ D098 23                                   inc     hl
 602+ D099              XX12CalcZ:              N0equN1byN2div256 varQ,(hl),(UBnkZScaled)       ; Q = |sidev_z| * z_lo / 256
 602+ D099 3A 7D C0    >                        ld      a,(UBnkZScaled)                        ;
 602+ D09C 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 602+ D09D 7E          >                        ld      a,(hl)                        ; A = XX16 element
 602+ D09E 57          >                        ld      d,a
 602+ D09F ED 30       >                        mul
 602+ D0A1 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 602+ D0A2 32 B4 92    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 603+ D0A5                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 603+ D0A5 3A D2 92    >               ld       a,(varT)
 603+ D0A8 32 B5 92    >               ld       (varR),a
 604+ D0AB 23                                   inc     hl
 605+ D0AC                                      AequN1xorN2 UBnkZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 605+ D0AC 3A 7E C0    >                        ld      a,(UBnkZScaledSign)
 605+ D0AF AE          >                        xor     (hl)
 606+ D0B0              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 607+ D0B0 CD DD A8                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 608+ D0B3              ; Now we exit with A = result S = Sign
 609+ D0B3 C9                                   ret
 610+ D0B4
 611+ D0B4
 612+ D0B4              ;-- LL51---------------------------------------------------------------------------------------------------------------------------
 613+ D0B4              ;TESTED OK
 614+ D0B4              XX12EquXX15DotProductXX16:
 615+ D0B4              XX12EquScaleDotOrientation:                         ; .LL51 \ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z
 616+ D0B4 01 00 00                             ld      bc,0                                ; LDX, LDY 0
 617+ D0B7 21 34 C0                             ld      hl,UBnkTransmatSidevX
 618+ D0BA CD 64 D0                             call    XX12DotOneRow
 619+ D0BD 32 7F C0                             ld      (UBnkXX12xLo),a
 620+ D0C0 3A B6 92                             ld      a,(varS)
 621+ D0C3 32 80 C0                             ld      (UBnkXX12xSign),a
 622+ D0C6 21 3A C0                             ld      hl,UBnkTransmatRoofvX
 623+ D0C9 CD 64 D0                             call    XX12DotOneRow
 624+ D0CC 32 81 C0                             ld      (UBnkXX12yLo),a
 625+ D0CF 3A B6 92                             ld      a,(varS)
 626+ D0D2 32 82 C0                             ld      (UBnkXX12ySign),a
 627+ D0D5 21 40 C0                             ld      hl,UBnkTransmatNosevX
 628+ D0D8 CD 64 D0                             call    XX12DotOneRow
 629+ D0DB 32 83 C0                             ld      (UBnkXX12zLo),a
 630+ D0DE 3A B6 92                             ld      a,(varS)
 631+ D0E1 32 84 C0                             ld      (UBnkXX12zSign),a
 632+ D0E4 C9                                   ret
 633+ D0E5              ;--------------------------------------------------------------------------------------------------------
 634+ D0E5                                      include "./Variables/CopyXX12ScaledToXX18.asm"
# file opened: ././Variables/CopyXX12ScaledToXX18.asm
   1++D0E5              CopyXX12ScaledToXX18:
   2++D0E5              CopyResultToDrawCam:
   3++D0E5                      ldCopyByte XX12         ,XX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++D0E5 3A 7F C0    >               ld       a,(XX12)
   3++D0E8 32 6D C0    >               ld       (XX18),a
   4++D0EB                      ldCopyByte XX12+1       ,XX18+2           ; XX12+1 => XX18+2
   4++D0EB 3A 80 C0    >               ld       a,(XX12+1)
   4++D0EE 32 6F C0    >               ld       (XX18+2),a
   5++D0F1                      ldCopyByte XX12+2       ,XX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++D0F1 3A 81 C0    >               ld       a,(XX12+2)
   5++D0F4 32 70 C0    >               ld       (XX18+3),a
   6++D0F7                      ldCopyByte XX12+3       ,XX18+5           ; XX12+3 => XX18+5
   6++D0F7 3A 82 C0    >               ld       a,(XX12+3)
   6++D0FA 32 72 C0    >               ld       (XX18+5),a
   7++D0FD                      ldCopyByte XX12+4       ,XX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++D0FD 3A 83 C0    >               ld       a,(XX12+4)
   7++D100 32 73 C0    >               ld       (XX18+6),a
   8++D103                      ldCopyByte XX12+5       ,XX18+8           ; XX12+5 => XX18+8
   8++D103 3A 84 C0    >               ld       a,(XX12+5)
   8++D106 32 75 C0    >               ld       (XX18+8),a
   9++D109 C9                   ret
  10++D10A
# file closed: ././Variables/CopyXX12ScaledToXX18.asm
 635+ D10A                                      include "./Variables/CopyXX12toXX15.asm"
# file opened: ././Variables/CopyXX12toXX15.asm
   1++D10A              CopyXX12toXX15:         ldCopyByte  UBnkXX12xLo     ,UBnkXScaled        ; xlo
   1++D10A 3A 7F C0    >               ld       a,(UBnkXX12xLo)
   1++D10D 32 79 C0    >               ld       (UBnkXScaled),a
   2++D110                                      ldCopyByte  UBnkXX12xSign   ,UBnkXScaledSign    ; xsg
   2++D110 3A 80 C0    >               ld       a,(UBnkXX12xSign)
   2++D113 32 7A C0    >               ld       (UBnkXScaledSign),a
   3++D116                                      ldCopyByte  UBnkXX12yLo     ,UBnkYScaled        ; xlo
   3++D116 3A 81 C0    >               ld       a,(UBnkXX12yLo)
   3++D119 32 7B C0    >               ld       (UBnkYScaled),a
   4++D11C                                      ldCopyByte  UBnkXX12ySign   ,UBnkYScaledSign    ; xsg
   4++D11C 3A 82 C0    >               ld       a,(UBnkXX12ySign)
   4++D11F 32 7C C0    >               ld       (UBnkYScaledSign),a
   5++D122                                      ldCopyByte  UBnkXX12zLo     ,UBnkZScaled        ; xlo
   5++D122 3A 83 C0    >               ld       a,(UBnkXX12zLo)
   5++D125 32 7D C0    >               ld       (UBnkZScaled),a
   6++D128                                      ldCopyByte  UBnkXX12zSign   ,UBnkZScaledSign    ; xsg
   6++D128 3A 84 C0    >               ld       a,(UBnkXX12zSign)
   6++D12B 32 7E C0    >               ld       (UBnkZScaledSign),a
   7++D12E C9                                   ret
   8++D12F
# file closed: ././Variables/CopyXX12toXX15.asm
 636+ D12F                                      include "./Variables/CopyXX18toXX15.asm"
# file opened: ././Variables/CopyXX18toXX15.asm
   1++D12F              CopyXX18toXX15:
   2++D12F              CopyDrawCamToScaled:
   3++D12F                      ldCopyByte  UBnkDrawCam0xLo ,UBnkXScaled        ; xlo
   3++D12F 3A 6D C0    >               ld       a,(UBnkDrawCam0xLo)
   3++D132 32 79 C0    >               ld       (UBnkXScaled),a
   4++D135                      ldCopyByte  UBnkDrawCam0xSgn,UBnkXScaledSign    ; xsg
   4++D135 3A 6F C0    >               ld       a,(UBnkDrawCam0xSgn)
   4++D138 32 7A C0    >               ld       (UBnkXScaledSign),a
   5++D13B                      ldCopyByte  UBnkDrawCam0yLo ,UBnkYScaled        ; xlo
   5++D13B 3A 70 C0    >               ld       a,(UBnkDrawCam0yLo)
   5++D13E 32 7B C0    >               ld       (UBnkYScaled),a
   6++D141                      ldCopyByte  UBnkDrawCam0ySgn,UBnkYScaledSign    ; xsg
   6++D141 3A 72 C0    >               ld       a,(UBnkDrawCam0ySgn)
   6++D144 32 7C C0    >               ld       (UBnkYScaledSign),a
   7++D147                      ldCopyByte  UBnkDrawCam0zLo ,UBnkZScaled        ; xlo
   7++D147 3A 73 C0    >               ld       a,(UBnkDrawCam0zLo)
   7++D14A 32 7D C0    >               ld       (UBnkZScaled),a
   8++D14D                      ldCopyByte  UBnkDrawCam0zSgn,UBnkZScaledSign    ; xsg
   8++D14D 3A 75 C0    >               ld       a,(UBnkDrawCam0zSgn)
   8++D150 32 7E C0    >               ld       (UBnkZScaledSign),a
   9++D153 C9                   ret
  10++D154
# file closed: ././Variables/CopyXX18toXX15.asm
 637+ D154                                      include "./Variables/CopyXX18ScaledToXX15.asm"
# file opened: ././Variables/CopyXX18ScaledToXX15.asm
   1++D154 21 0C C0     LoadCraftToCamera:      ld      hl,UBnKxlo
   2++D157 11 6D C0                             ld      de,UBnkDrawCam0xLo
   3++D15A                                      NineLDIInstrunctions                ; transfer 9 bytes
   3++D15A ED A0       >		                ldi
   3++D15C ED A0       >		                ldi
   3++D15E ED A0       >		                ldi
   3++D160 ED A0       >		                ldi
   3++D162 ED A0       >		                ldi
   3++D164 ED A0       >		                ldi
   3++D166 ED A0       >		                ldi
   3++D168 ED A0       >		                ldi
   3++D16A ED A0       >		                ldi
   4++D16C C9                                   ret
   5++D16D
   6++D16D              CopyCameraToXX15Signed:
   7++D16D 2A 6D C0             ld  hl,(UBnkDrawCam0xLo)
   8++D170 3A 6F C0             ld  a,(UBnkDrawCam0xSgn)
   9++D173 B4                   or  h
  10++D174 67                   ld  h,a
  11++D175 22 79 C0             ld  (UBnkXScaled),hl
  12++D178 2A 70 C0             ld  hl,(UBnkDrawCam0yLo)
  13++D17B 3A 72 C0             ld  a,(UBnkDrawCam0ySgn)
  14++D17E B4                   or  h
  15++D17F 67                   ld  h,a
  16++D180 22 7B C0             ld  (UBnkYScaled),hl
  17++D183 2A 73 C0             ld  hl,(UBnkDrawCam0zLo)
  18++D186 3A 75 C0             ld  a,(UBnkDrawCam0zSgn)
  19++D189 B4                   or  h
  20++D18A 67                   ld  h,a
  21++D18B 22 7D C0             ld  (UBnkZScaled),hl
  22++D18E C9                   ret
  23++D18F
  24++D18F              CopyXX18ScaledToXX15:
  25++D18F              CopyDrawCamToScaledMatrix:
  26++D18F                      ldCopyByte  UBnkDrawCam0zSgn, UBnkZScaledSign   ; XX18+8 => XX15+5
  26++D18F 3A 75 C0    >               ld       a,(UBnkDrawCam0zSgn)
  26++D192 32 7E C0    >               ld       (UBnkZScaledSign),a
  27++D195                      ldCopyByte  UBnkDrawCam0xLo,  UBnkXScaled       ; XX18+0 => XX15+0
  27++D195 3A 6D C0    >               ld       a,(UBnkDrawCam0xLo)
  27++D198 32 79 C0    >               ld       (UBnkXScaled),a
  28++D19B                      ldCopyByte  UBnkDrawCam0xSgn, UBnkXScaledSign   ; XX18+2 => XX15+1
  28++D19B 3A 6F C0    >               ld       a,(UBnkDrawCam0xSgn)
  28++D19E 32 7A C0    >               ld       (UBnkXScaledSign),a
  29++D1A1                      ldCopyByte  UBnkDrawCam0yLo,  UBnkYScaled       ; XX18+3 => XX15+2
  29++D1A1 3A 70 C0    >               ld       a,(UBnkDrawCam0yLo)
  29++D1A4 32 7B C0    >               ld       (UBnkYScaled),a
  30++D1A7                      ldCopyByte  UBnkDrawCam0ySgn, UBnkYScaledSign   ; XX18+5 => XX15+3
  30++D1A7 3A 72 C0    >               ld       a,(UBnkDrawCam0ySgn)
  30++D1AA 32 7C C0    >               ld       (UBnkYScaledSign),a
  31++D1AD                      ldCopyByte  UBnkDrawCam0zLo,  UBnkZScaled       ; XX18+6 => XX15+4
  31++D1AD 3A 73 C0    >               ld       a,(UBnkDrawCam0zLo)
  31++D1B0 32 7D C0    >               ld       (UBnkZScaled),a
  32++D1B3 C9                   ret
  33++D1B4
  34++D1B4              CopyXX15ToXX18Scaled:
  35++D1B4              CopyScaledMatrixToDrawCam:
  36++D1B4                      ldCopyByte UBnkZScaledSign,   UBnkDrawCam0zSgn  ; XX15+5 => XX18+8
  36++D1B4 3A 7E C0    >               ld       a,(UBnkZScaledSign)
  36++D1B7 32 75 C0    >               ld       (UBnkDrawCam0zSgn),a
  37++D1BA                      ldCopyByte UBnkXScaled,       UBnkDrawCam0xLo   ; XX15+0 => XX18+0
  37++D1BA 3A 79 C0    >               ld       a,(UBnkXScaled)
  37++D1BD 32 6D C0    >               ld       (UBnkDrawCam0xLo),a
  38++D1C0                      ldCopyByte UBnkXScaledSign,   UBnkDrawCam0xSgn  ; XX15+1 => XX18+2
  38++D1C0 3A 7A C0    >               ld       a,(UBnkXScaledSign)
  38++D1C3 32 6F C0    >               ld       (UBnkDrawCam0xSgn),a
  39++D1C6                      ldCopyByte UBnkYScaled,       UBnkDrawCam0yLo   ; XX15+2 => XX18+3
  39++D1C6 3A 7B C0    >               ld       a,(UBnkYScaled)
  39++D1C9 32 70 C0    >               ld       (UBnkDrawCam0yLo),a
  40++D1CC                      ldCopyByte UBnkYScaledSign,   UBnkDrawCam0ySgn  ; XX15+3 => XX18+5
  40++D1CC 3A 7C C0    >               ld       a,(UBnkYScaledSign)
  40++D1CF 32 72 C0    >               ld       (UBnkDrawCam0ySgn),a
  41++D1D2                      ldCopyByte UBnkZScaled,       UBnkDrawCam0zLo   ; XX15+4 => XX18+6
  41++D1D2 3A 7D C0    >               ld       a,(UBnkZScaled)
  41++D1D5 32 73 C0    >               ld       (UBnkDrawCam0zLo),a
  42++D1D8 C9                   ret
  43++D1D9
  44++D1D9
  45++D1D9              XX15EquXX15AddXX18:
  46++D1D9              LL94Z:
  47++D1D9 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  48++D1DB 16 00                ld      d,0                                                     ;
  49++D1DD 3A 7D C0             ld      a,(UBnkZScaled)                                         ;
  50++D1E0 6F                   ld      l,a                                                     ;
  51++D1E1 3A 7E C0             ld      a,(UBnkZScaledSign)                                     ;
  52++D1E4 47                   ld      b,a                                                     ;
  53++D1E5 3A 73 C0             ld      a,(UBnkDrawCam0zLo)                                     ;
  54++D1E8 5F                   ld      e,a                                                     ;
  55++D1E9 3A 75 C0             ld      a,(UBnkDrawCam0zSgn)                                    ;
  56++D1EC 4F                   ld      c,a                                                     ;
  57++D1ED CD E6 A7             call    ADDHLDESignBC                                           ;
  58++D1F0 47                   ld      b,a                                                     ;
  59++D1F1 7C                   ld      a,h                                                     ;
  60++D1F2 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  61++D1F3 32 7E C0             ld      (UBnkZScaledSign),a                                     ;
  62++D1F6 7D                   ld      a,l                                                     ;
  63++D1F7 32 7D C0             ld      (UBnkZScaled),a                                         ;           endif
  64++D1FA              LL94X:
  65++D1FA 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  66++D1FC 16 00                ld      d,0                                                     ;
  67++D1FE 3A 79 C0             ld      a,(UBnkXScaled)                                         ;
  68++D201 6F                   ld      l,a                                                     ;
  69++D202 3A 7A C0             ld      a,(UBnkXScaledSign)                                     ;
  70++D205 47                   ld      b,a                                                     ;
  71++D206 3A 6D C0             ld      a,(UBnkDrawCam0xLo)                                     ;
  72++D209 5F                   ld      e,a                                                     ;
  73++D20A 3A 6F C0             ld      a,(UBnkDrawCam0xSgn)                                    ;
  74++D20D 4F                   ld      c,a                                                     ;
  75++D20E CD E6 A7             call    ADDHLDESignBC                                           ;
  76++D211 47                   ld      b,a                                                     ;
  77++D212 7C                   ld      a,h                                                     ;
  78++D213 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  79++D214 32 7A C0             ld      (UBnkXScaledSign),a                                     ;
  80++D217 7D                   ld      a,l                                                     ;
  81++D218 32 79 C0             ld      (UBnkXScaled),a                                         ;           endif
  82++D21B              LL94Y:
  83++D21B 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  84++D21D 16 00                ld      d,0                                                     ;
  85++D21F 3A 7B C0             ld      a,(UBnkYScaled)                                         ;
  86++D222 6F                   ld      l,a                                                     ;
  87++D223 3A 7C C0             ld      a,(UBnkYScaledSign)                                     ;
  88++D226 47                   ld      b,a                                                     ;
  89++D227 3A 70 C0             ld      a,(UBnkDrawCam0yLo)                                     ;
  90++D22A 5F                   ld      e,a                                                     ;
  91++D22B 3A 72 C0             ld      a,(UBnkDrawCam0ySgn)                                    ;
  92++D22E 4F                   ld      c,a                                                     ;
  93++D22F CD E6 A7             call    ADDHLDESignBC                                           ;
  94++D232 47                   ld      b,a                                                     ;
  95++D233 7C                   ld      a,h                                                     ;
  96++D234 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  97++D235 32 7C C0             ld      (UBnkYScaledSign),a                                     ;
  98++D238 7D                   ld      a,l                                                     ;
  99++D239 32 7B C0             ld      (UBnkYScaled),a                                         ;
 100++D23C C9                   ret
 101++D23D
# file closed: ././Variables/CopyXX18ScaledToXX15.asm
 638+ D23D                                      include "./Variables/CopyXX12ToScaled.asm"
# file opened: ././Variables/CopyXX12ToScaled.asm
   1++D23D              CopyXX12ToScaled:
   2++D23D              CopyResultToScaled:
   3++D23D                      ldCopyByte  XX12+0,UBnkXScaled      ; xnormal lo
   3++D23D 3A 7F C0    >               ld       a,(XX12+0)
   3++D240 32 79 C0    >               ld       (UBnkXScaled),a
   4++D243                      ldCopyByte  XX12+2,UBnkYScaled      ; ynormal lo
   4++D243 3A 81 C0    >               ld       a,(XX12+2)
   4++D246 32 7B C0    >               ld       (UBnkYScaled),a
   5++D249                      ldCopyByte  XX12+4,UBnkZScaled      ; znormal lo and leaves a holding zscaled normal
   5++D249 3A 83 C0    >               ld       a,(XX12+4)
   5++D24C 32 7D C0    >               ld       (UBnkZScaled),a
   6++D24F C9                   ret
   7++D250
# file closed: ././Variables/CopyXX12ToScaled.asm
 639+ D250              ;--------------------------------------------------------------------------------------------------------
 640+ D250                                      include "./Maths/Utilities/DotProductXX12XX15.asm"
# file opened: ././Maths/Utilities/DotProductXX12XX15.asm
   1++D250              ;;; Q = XX12 xLo ,A = XX15 xLo
   2++D250              ;;; T = A * Q/256 Usgined  (FMLTU)
   3++D250              ;;; S = XX12 XSign Xor XX15 XSign
   4++D250              ;;; Q = XX12 Ynormal Lo, A = XX15+2 (y lo)
   5++D250              ;;; Q = A * Q/256 Usigned (FMLTI)
   6++D250              ;;; R = T
   7++D250              ;;; A = XX12+3 (ySign) Xor XX15+3 (ySign)
   8++D250              ;;; T = BADD s(A) = R + Q(SA) (xdot + ydot)
   9++D250              ;;; Q = XX12+4 (znormal lo) A = XX15+4 z lo
  10++D250              ;;; Q = A * Q /256 usigned (zdot)
  11++D250              ;;; R = T
  12++D250              ;;; A - XX15+ 5 Zsign Xor XX12+5 Z Sign
  13++D250
  14++D250
  15++D250
  16++D250
  17++D250
  18++D250              MacroAequDxEdiv256usgn:	MACRO
  19++D250 ~            						mul
  20++D250 ~            						ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
  21++D250              						ENDM
  22++D250              DotProductXX12XX15:
  23++D250 3A 7F C0             ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  24++D253                      IfAIsZeroGoto dotxskipzero
  24++D253 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  24++D254 CA 71 D2    >				jp	z, dotxskipzero
  25++D257 5F                   ld          e,a
  26++D258 3A 79 C0             ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
  27++D25B 57                   ld          d,a                     ; de = xx12 x signed
  28++D25C                      IfAIsZeroGoto dotxskipzero
  28++D25C A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  28++D25D CA 71 D2    >				jp	z, dotxskipzero
  29++D260 ED 30        		mul
  30++D262 42                   ld          b,d                     ; b = result
  31++D263 3A 80 C0             ld          a,(UBnkXX12xSign)
  32++D266 21 7A C0             ld          hl,UBnkXScaledSign
  33++D269 AE                   xor         (hl)
  34++D26A E6 80                and         $80                     ; so sign bit only
  35++D26C FD 67                ld          iyh ,a                   ; we actually need to preserve sign in iyh here
  36++D26E C3 75 D2             jp          dotmuly
  37++D271              dotxskipzero:
  38++D271 AF                   xor         a
  39++D272 47                   ld          b,a
  40++D273 FD 67                ld          iyh,a
  41++D275              dotmuly:
  42++D275              ; now we have b = XX12 x &d  norm x signed
  43++D275 3A 81 C0             ld          a,(UBnkXX12yLo)
  44++D278                      IfAIsZeroGoto dotyskipzero
  44++D278 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  44++D279 CA 98 D2    >				jp	z, dotyskipzero
  45++D27C 5F                   ld          e,a
  46++D27D 3A 7B C0             ld          a,(UBnkYScaled)         ; XX15+2
  47++D280                      IfAIsZeroGoto dotyskipzero
  47++D280 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  47++D281 CA 98 D2    >				jp	z, dotyskipzero
  48++D284 57                   ld          d,a                     ; de = xx12 x signed
  49++D285 ED 30                mul
  50++D287 4A                   ld          c,d                     ; c = result
  51++D288 DD 69                ld          ixl,c
  52++D28A 3A 82 C0             ld          a,(UBnkXX12ySign)       ; A = ysg
  53++D28D 21 7C C0             ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
  54++D290 AE                   xor         (hl)                    ; XX15+3
  55++D291 E6 80                and         $80                     ; do b = x mul c = y mul, iyh = sign for b and a = sign for c
  56++D293 DD 67                ld          ixh,a
  57++D295 C3 9C D2             jp          dotaddxy
  58++D298              dotyskipzero:
  59++D298 AF                   xor         a
  60++D299 4F                   ld          c,a
  61++D29A DD 67                ld          ixh,a
  62++D29C              dotaddxy:
  63++D29C              ; Optimise later as this is 16 bit
  64++D29C 26 00                ld          h,0                     ;
  65++D29E 68                   ld          l,b                     ; hl = xlo + x scaled
  66++D29F 16 00                ld          d,0                     ;
  67++D2A1 59                   ld          e,c                     ; de = ylo + yscaled
  68++D2A2 FD 44                ld          b,iyh                   ; b = sign of xlo + xscaled
  69++D2A4 4F                   ld          c,a                     ; c = sign of ylo + yscaled
  70++D2A5 CD E6 A7             call ADDHLDESignBC                  ; so now hl = result so will push sign to h
  71++D2A8 47                   ld          b,a                     ; b = resultant sign , hl = add so far
  72++D2A9 3A 83 C0             ld          a,(UBnkXX12zLo)         ;
  73++D2AC                      IfAIsZeroGoto dotzskipzero
  73++D2AC A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  73++D2AD CA D2 D2    >				jp	z, dotzskipzero
  74++D2B0 5F                   ld          e,a                     ;
  75++D2B1 3A 7D C0             ld          a,(UBnkZScaled)         ;
  76++D2B4                      IfAIsZeroGoto dotzskipzero
  76++D2B4 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  76++D2B5 CA D2 D2    >				jp	z, dotzskipzero
  77++D2B8 57                   ld          d,a
  78++D2B9 ED 30                mul
  79++D2BB E5                   push        hl                      ; save prev result
  80++D2BC 3A 7E C0             ld          a,(UBnkZScaledSign)
  81++D2BF 21 84 C0             ld          hl, UBnkXX12zSign       ; XX15+5
  82++D2C2 AE                   xor         (hl)                    ; hi sign
  83++D2C3 E6 80                and         $80                     ; a = sign of multiply
  84++D2C5 4F                   ld          c,a                     ; c = sign of z lo & z scaled
  85++D2C6 E1                   pop         hl
  86++D2C7 5A                   ld          e,d
  87++D2C8 16 00                ld          d,0
  88++D2CA CD E6 A7             call ADDHLDESignBC
  89++D2CD 32 B6 92             ld          (varS),a
  90++D2D0 7D                   ld          a,l
  91++D2D1 C9                   ret                                 ; returns with A = value, varS = sign
  92++D2D2              dotzskipzero:                               ; if we got here then z was zero so no component so just tidy up from last add
  93++D2D2 78                   ld          a,b
  94++D2D3 32 B6 92             ld          (varS),a
  95++D2D6 7D                   ld          a,l
  96++D2D7 C9                   ret
  97++D2D8              ;;;;       DotProductXX12XX15:
  98++D2D8              ;;;;       ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  99++D2D8              ;;;;       ld          e,a
 100++D2D8              ;;;;       ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
 101++D2D8              ;;;;       ld          d,a                     ; de = xx12 x signed
 102++D2D8              ;;;;		; FMLTU	\ A=A*Q/256unsg using D as A and E as Q
 103++D2D8              ;;;;		mul
 104++D2D8              ;;;;       ld          b,d                     ; b as var T
 105++D2D8              ;;;;       ld          a,(UBnkXX12xSign)
 106++D2D8              ;;;;       ld          hl,UBnkXScaledSign
 107++D2D8              ;;;;       xor         (hl)
 108++D2D8              ;;;;       and         $80                     ; so sign bit only
 109++D2D8              ;;;;       ld          (varS),a                ; we did use c as S \ S	\ x-sign, but we actually need it in varS for BADD
 110++D2D8              ;;;; now we have b = XX12 x & norm x signed
 111++D2D8              ;;;; by here B = xlo & xscaled C = result sign
 112++D2D8              ;;;;       ld          a,(UBnkXX12yLo)
 113++D2D8              ;;;;       ld          e,a
 114++D2D8              ;;;;       ld          a,(UBnkYScaled)         ; XX15+2
 115++D2D8              ;;;;		ld          d,a						; MISSED THIS EARLIER BUG FIX
 116++D2D8              ;;;;       mul
 117++D2D8              ;;;;       ld          a,d
 118++D2D8              ;;;;       ld          (varQ),a                ; Q = Y y-dot
 119++D2D8              ;;;;       ld          a,b                     ; get back T from above held in b
 120++D2D8              ;;;;       ld          (varR),a                ; R= b \ T	\ x-dot
 121++D2D8              ;;;;       ld          a,(UBnkXX12ySign)       ; A = ysg
 122++D2D8              ;;;;       ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
 123++D2D8              ;;;;       xor         (hl)                    ; XX15+3
 124++D2D8              ;;;;       and         $80
 125++D2D8              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 126++D2D8              ;;;;       ld          (varT),a                ; var T	\ xdot+ydot
 127++D2D8              ;;;;       ld          a,(UBnkXX12zLo)         ; use d as  varQ        ; XX12+4	\ znormal lo to varQ
 128++D2D8              ;;;;       ld          e,a                     ; use e as var Q
 129++D2D8              ;;;;       ld          a,(UBnkZScaled)         ;
 130++D2D8              ;;;;       ld          d,a
 131++D2D8              ;;;;       mul
 132++D2D8              ;;;;       ld          a,d
 133++D2D8              ;;;;       ld          (varQ),a                ; Q	\ zdot
 134++D2D8              ;;;;       ldCopyByte  varT,varR               ; copy T to R so R = resutl of previous calc
 135++D2D8              ;;;;       ld          a,(UBnkZScaledSign)
 136++D2D8              ;;;;       ld          hl, UBnkXX12zSign       ; XX15+5
 137++D2D8              ;;;;       xor         (hl)                    ; hi sign
 138++D2D8              ;;;;       and         $80
 139++D2D8              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 140++D2D8              ;;;;       ret                                 ; returns with A = value, varS = sign
 141++D2D8
# file closed: ././Maths/Utilities/DotProductXX12XX15.asm
 641+ D2D8              ;--------------------------------------------------------------------------------------------------------
 642+ D2D8              ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
 643+ D2D8                                      include "Universe/ScaleNormal.asm"
# file opened: ./Universe/ScaleNormal.asm
   1++D2D8              ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
   2++D2D8              ; returns with XX15 scaled by Q but also z scaled in a register
   3++D2D8              ScaleNormal:
   4++D2D8              LL93:
   5++D2D8 3A BB 92             ld      a,(XX17)                    ; scale--
   6++D2DB DD 6F        		ld		ixl,a
   7++D2DD 3A 7D C0     		ld		a,(UBnkZScaled)				; needs to be in a just in case we abort early
   8++D2E0 DD 2D        		dec		ixl
   9++D2E2 F8           		ret		m							; return if q was 0, i.e. no scaling
  10++D2E3              ScaleLoop:
  11++D2E3              LL933:
  12++D2E3 21 79 C0             ld      hl,XX15
  13++D2E6 CB 3E                srl     (hl)                        ; XX15	\ xnormal lo/2 \ LL93+3 \ counter X
  14++D2E8 23                   inc     hl							; looking at XX15 x sign now
  15++D2E9 23                   inc     hl							; looking at XX15 y Lo now
  16++D2EA CB 3E                srl     (hl)                        ; XX15+2	\ ynormal lo/2
  17++D2EC 23           		inc		hl							; looking at XX15 y sign now
  18++D2ED 23           		inc		hl							; looking at XX15 z Lo now
  19++D2EE CB 3E        		srl		(hl)
  20++D2F0 7E           		ld		a,(hl)						; znormal lo/2 also into a it came in at the end of LL92
  21++D2F1 DD 2D                dec     ixl                         ; reduce scale
  22++D2F3 F2 E3 D2             jp      p,ScaleLoop                 ; LL93-3 loop to lsr xx15
  23++D2F6 C9                   ret
  24++D2F7
# file closed: ./Universe/ScaleNormal.asm
 644+ D2F7              ;--------------------------------------------------------------------------------------------------------
 645+ D2F7                                      include "Universe/ScaleObjectDistance.asm"
# file opened: ./Universe/ScaleObjectDistance.asm
   1++D2F7              ScaleObjectDistance:
   2++D2F7              ; ">ScaleObjectDistance, scales camera location and returns c = scaling factor (equiv of X reg)"
   3++D2F7 3A 16 C3             ld      a,(QAddr)                   ; Hull byte #18 normals scaled by 2^Q% DtProd^XX2  their comment   Dot product gives  normals' visibility in XX2
   4++D2FA 4F                   ld      c,a                         ; c = Q factor for scaling of normals
   5++D2FB              LL90:                                       ; scaling object distance
   6++D2FB 3A 74 C0             ld      a,(UBnkDrawCam0zHi)         ; z_hi
   7++D2FE 47                   ld      b,a                         ; z_hi (yReg)
   8++D2FF                      ReturnIfAIsZero                     ; if zHi 0 test ifis object close/small, i.e. zhi already zero then we are done
   8++D2FF A7          >                    and a
   8++D300 C8          >                    ret    z
   9++D301              LL90Loop:
  10++D301              ; Loop dividing camera by 2 until zhi is 0 and updating scale factor
  11++D301 0C                   inc     c                           ; LL90+3 \ repeat INWK z brought closer, take Qscale X up
  12++D302                      ShiftMem16Right1 UBnkDrawCam0yLo    ; cam Y /= 2
  12++D302 2A 70 C0    >                    ld    hl,(UBnkDrawCam0yLo)
  12++D305 CB 3C       >                    srl   h
  12++D307 CB 1D       >                    rr    l
  12++D309 22 70 C0    >                    ld    (UBnkDrawCam0yLo),hl
  13++D30C                      ShiftMem16Right1 UBnkDrawCam0xLo    ; cam X /= 2
  13++D30C 2A 6D C0    >                    ld    hl,(UBnkDrawCam0xLo)
  13++D30F CB 3C       >                    srl   h
  13++D311 CB 1D       >                    rr    l
  13++D313 22 6D C0    >                    ld    (UBnkDrawCam0xLo),hl
  14++D316                      ShiftMem16Right1 UBnkDrawCam0zLo    ; cam Z /= 2
  14++D316 2A 73 C0    >                    ld    hl,(UBnkDrawCam0zLo)
  14++D319 CB 3C       >                    srl   h
  14++D31B CB 1D       >                    rr    l
  14++D31D 22 73 C0    >                    ld    (UBnkDrawCam0zLo),hl
  15++D320 7C                   ld      a,h                         ; last shift will result in zhi adjusted into h reg.
  16++D321                      IfANotZeroGoto LL90Loop             ; loop until z hi = 0 this gives scalinging in c
  16++D321 FE 00       >				cp	0
  16++D323 C2 01 D3    >				jp	nz,LL90Loop
  17++D326 C9                   ret
  18++D327
# file closed: ./Universe/ScaleObjectDistance.asm
 646+ D327              ;--------------------------------------------------------------------------------------------------------
 647+ D327
 648+ D327              ; Backface cull
 649+ D327              ; is the angle between the ship -> camera vector and the normal of the face as long as both are unit vectors soo we can check that normal z > 0
 650+ D327              ; normal vector = cross product of ship ccordinates
 651+ D327              ;
 652+ D327
 653+ D327                                      include "./Variables/CopyFaceToXX15.asm"
# file opened: ././Variables/CopyFaceToXX15.asm
   1++D327 7E           CopyFaceToXX15:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++D328 47                                   ld      b,a                                                    ;;;
   3++D329 E6 80                                and     $80
   4++D32B 32 7A C0                             ld      (UBnkXScaledSign),a           ; write Sign bits to x sign                                                            ;;;
   5++D32E 78                                   ld      a,b
   6++D32F CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++D331 47                                   ld      b,a
   8++D332 E6 80                                and     $80
   9++D334 32 7C C0                             ld      (UBnkYScaledSign),a           ;                                                                                      ;;;
  10++D337 78                                   ld      a,b
  11++D338 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++D33A E6 80                                and     $80
  13++D33C 32 7E C0                             ld      (UBnkZScaledSign),a           ;                                                                                      ;;;
  14++D33F 23                                   inc     hl                          ; move to X ccord
  15++D340 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++D341 32 79 C0                             ld      (UBnkXScaled),a                                                                                                    ;;;
  17++D344 23                                   inc     hl                                                                                                                 ;;;
  18++D345 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++D346 32 7B C0                             ld      (UBnkYScaled),a                                                                                                    ;;;
  20++D349 23                                   inc     hl                                                                                                                 ;;;
  21++D34A 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++D34B 32 7D C0                             ld      (UBnkZScaled),a
  23++D34E C9                                   ret
  24++D34F
# file closed: ././Variables/CopyFaceToXX15.asm
 654+ D34F                                      include "./Variables/CopyFaceToXX12.asm"
# file opened: ././Variables/CopyFaceToXX12.asm
   1++D34F 7E           CopyFaceToXX12:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++D350 47                                   ld      b,a                         ; save sign bits to b
   3++D351 E6 80                                and     $80
   4++D353 32 80 C0                             ld      (UBnkXX12xSign),a           ; write Sign bits to x sign                                                            ;;;
   5++D356 78                                   ld      a,b
   6++D357 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++D359 47                                   ld      b,a
   8++D35A E6 80                                and     $80
   9++D35C 32 82 C0                             ld      (UBnkXX12ySign),a           ;                                                                                      ;;;
  10++D35F 78                                   ld      a,b
  11++D360 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++D362 E6 80                                and     $80
  13++D364 32 84 C0                             ld      (UBnkXX12zSign),a           ;                                                                                      ;;;
  14++D367 23                                   inc     hl                          ; move to X ccord
  15++D368 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++D369 32 7F C0                             ld      (UBnkXX12xLo),a                                                                                                    ;;;
  17++D36C 23                                   inc     hl                                                                                                                 ;;;
  18++D36D 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++D36E 32 81 C0                             ld      (UBnkXX12yLo),a                                                                                                    ;;;
  20++D371 23                                   inc     hl                                                                                                                 ;;;
  21++D372 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++D373 32 83 C0                             ld      (UBnkXX12zLo),a
  23++D376 C9                                   ret
  24++D377
# file closed: ././Variables/CopyFaceToXX12.asm
 655+ D377              ;--------------------------------------------------------------
 656+ D377              ; Original loginc in EE29 (LL9 4 of 12)
 657+ D377              ; Enters with XX4 = z distnace scaled to 1 .. 31
 658+ D377              ; get number of faces * 4      FaceCntX4
 659+ D377              ; return if no faces
 660+ D377              ; get Face Normal scale factor FaceScale (XX17)
 661+ D377              ; get ship pos z hi     (XX18)
 662+ D377              ; While Z hi <> 0
 663+ D377              ;    FaceScale = FaceScale + 1           (XX17)
 664+ D377              ;    Ship pos y = ship pos y / 2         (XX18)
 665+ D377              ;    ship pos x = ship pos x / 2         (XX18)
 666+ D377              ;    ship pos z = ship pos z / 2         (XX18)
 667+ D377              ; Loop
 668+ D377              ; Copy Ship Pos (XX18) to Scaled         (XX15)
 669+ D377              ; Get Dot Product of Scaled (XX15) and XX16 (pre inverted) into XX12
 670+ D377              ; Copy XX12 into XX18
 671+ D377              ; For each face
 672+ D377              ;     Get Face sign and visibility distance byte
 673+ D377              ;     if normal visibility range  < XX4
 674+ D377              ;        Get Face data into XX12
 675+ D377              ;        if FaceScale (XX17) >= 4
 676+ D377              ;            Copy Ship Pos (XX18) to scaled (XX15)                                                                  ::LL143
 677+ D377              ;        else
 678+ D377              ;           Copy FaceScale scaled to X  (XX17)
 679+ D377              ;LabelOverflowLoop:
 680+ D377              ;           Copy FaceData (XX12) to Scaled (XX15)                                                                   ::LL92
 681+ D377              ;           While X >= 0
 682+ D377              ;              X--                                                                                                  ::LL93
 683+ D377              ;              if  x >= 0
 684+ D377              ;                  XX15x = XX15x / 2
 685+ D377              ;                  XX15y = XX15y / 2
 686+ D377              ;                  XX15y = XX15y / 2
 687+ D377              ;           loop
 688+ D377              ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z                                                              ::LL94
 689+ D377              ;           if A > 256 (i.e. was overflow)
 690+ D377              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 691+ D377              ;               X = 1
 692+ D377              ;               Goto LabelOverflowLoop
 693+ D377              ;           else
 694+ D377              ;              Scaled (XX15) Z = AddZ
 695+ D377              ;           endif
 696+ D377              ;           AddX = FaceData (XX12)x +  ShipPos (XX18)x
 697+ D377              ;           if A > 256 (i.e. was overflow)
 698+ D377              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 699+ D377              ;               X = 1
 700+ D377              ;               Goto LabelOverflowLoop
 701+ D377              ;           else
 702+ D377              ;              Scaled (XX15) X = AddX
 703+ D377              ;           endif
 704+ D377              ;           AddY = FaceData (XX12)y +  ShipPos (XX18)y
 705+ D377              ;           if A > 256 (i.e. was overflow)
 706+ D377              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 707+ D377              ;               X = 1
 708+ D377              ;               Goto LabelOverflowLoop
 709+ D377              ;           else
 710+ D377              ;              Scaled (XX15) Y = AddY
 711+ D377              ;           endif
 712+ D377              ;        endif
 713+ D377              ;        calculate dot product XX12.XX15  (XX15x * XX12x /256 + XX15y * XX12y /256 + XX15z * XX12z /256)        ::LL89
 714+ D377              ;        if dot product < 0
 715+ D377              ;           set face visible
 716+ D377              ;        else
 717+ D377              ;           set face invisible
 718+ D377              ;        end if
 719+ D377              ;     else
 720+ D377              ;       Set FaceVisibility to true
 721+ D377              ;     end if
 722+ D377              ; Next Face
 723+ D377
 724+ D377 DD 25        ScaleDownXX15byIXH:     dec     ixh
 725+ D379 F8                                   ret     m
 726+ D37A 21 79 C0                             ld      hl,UBnkXScaled
 727+ D37D CB 3E                                srl     (hl)                        ; XX15  \ xnormal lo/2 \ LL93+3 \ counter X
 728+ D37F 23                                   inc     hl                          ; looking at XX15 x sign now
 729+ D380 23                                   inc     hl                          ; looking at XX15 y Lo now
 730+ D381 CB 3E                                srl     (hl)                        ; XX15+2    \ ynormal lo/2
 731+ D383 23                                   inc     hl                          ; looking at XX15 y sign now
 732+ D384 23                                   inc     hl                          ; looking at XX15 z Lo now
 733+ D385 CB 3E                                srl     (hl)
 734+ D387 C3 77 D3                             jp      ScaleDownXX15byIXH
 735+ D38A C9                                   ret
 736+ D38B
 737+ D38B 21 6D C0     DivideXX18By2:          ld      hl,UBnkDrawCam0xLo
 738+ D38E CB 3E                                srl     (hl)                        ; XX18  \ xnormal lo/2 \ LL93+3 \ counter X
 739+ D390 23                                   inc     hl                          ; looking at XX18 x sign now
 740+ D391 23                                   inc     hl                          ; looking at XX18 y Lo now
 741+ D392 CB 3E                                srl     (hl)                        ; XX18+2    \ ynormal lo/2
 742+ D394 23                                   inc     hl                          ; looking at XX18 y sign now
 743+ D395 23                                   inc     hl                          ; looking at XX18 z Lo now
 744+ D396 CB 3E                                srl     (hl)
 745+ D398 C9                                   ret
 746+ D399
 747+ D399              ;line of sight vector = [x y z] + face normal vector
 748+ D399
 749+ D399              ;               [ [x y z] . sidev + normal_x ]   [ normal_x ]
 750+ D399              ;  visibility = [ [x y z] . roofv + normal_y ] . [ normal_y ]
 751+ D399              ;               [ [x y z] . nosev + normal_z ]   [ normal_z ]
 752+ D399              ;
 753+ D399              ;--------------------------------------------------------------
 754+ D399              ; line of sight (eye outwards dot face normal vector < 0
 755+ D399              ; So lin eof sight = vector from 0,0,0 to ship pos, now we need to consider teh ship's facing
 756+ D399              ; now if we add teh veector for teh normal(times magnitude)) to teh ship position we have the true center of the face
 757+ D399              ; now we can calcualt teh dot product of this caulated vector and teh normal which if < 0 is goot. this means we use rot mat not inverted rotmat.
 758+ D399
 759+ D399              RotateXX15ByTransMatXX16:
 760+ D399 21 34 C0                             ld      hl,UBnkTransmatSidevX               ; process orientation matrix row 0
 761+ D39C CD 3F 8A                             call    XX12ProcessOneRow
 762+ D39F 47                                   ld      b,a                                 ; get
 763+ D3A0 7D                                   ld      a,l
 764+ D3A1 B0                                   or      b
 765+ D3A2 32 80 C0                             ld      (UBnkXX12xSign),a                   ; a = result with sign in bit 7
 766+ D3A5 7D                                   ld      a,l
 767+ D3A6 32 7F C0                             ld      (UBnkXX12xLo),a                     ; that is result done for
 768+ D3A9
 769+ D3A9 21 3A C0                             ld      hl,UBnkTransmatRoofvX               ; process orientation matrix row 0
 770+ D3AC CD 3F 8A                             call    XX12ProcessOneRow
 771+ D3AF 47                                   ld      b,a                                 ; get
 772+ D3B0 7D                                   ld      a,l
 773+ D3B1 B0                                   or      b
 774+ D3B2 32 82 C0                             ld      (UBnkXX12ySign),a                   ; a = result with sign in bit 7
 775+ D3B5 7D                                   ld      a,l
 776+ D3B6 32 81 C0                             ld      (UBnkXX12yLo),a                     ; that is result done for
 777+ D3B9
 778+ D3B9 21 40 C0                             ld      hl,UBnkTransmatNosevX               ; process orientation matrix row 0
 779+ D3BC CD 3F 8A                             call    XX12ProcessOneRow
 780+ D3BF 47                                   ld      b,a                                 ; get
 781+ D3C0 7D                                   ld      a,l
 782+ D3C1 B0                                   or      b
 783+ D3C2 32 84 C0                             ld      (UBnkXX12zSign),a                   ; a = result with sign in bit 7
 784+ D3C5 7D                                   ld      a,l
 785+ D3C6 32 83 C0                             ld      (UBnkXX12zLo),a                     ; that is result done for
 786+ D3C9 C9                                   ret
 787+ D3CA
 788+ D3CA                  include "./ModelRender/BackfaceCull.asm"
# file opened: ././ModelRender/BackfaceCull.asm
   1++D3CA 00           CurrentNormIdx  DB 0
   2++D3CB              ; SomeFacesVisible:
   3++D3CB              ; EE29:
   4++D3CB
   5++D3CB              ;   Backface cull logic  line of sight vector . face normal vector
   6++D3CB              ;       line of sight vector . face normal vector
   7++D3CB              ;       => line of sight vector = [x y z] + face normal vector
   8++D3CB              ;       Where [x y z] =
   9++D3CB              ;                                               [ [x y z] . sidev ]
  10++D3CB              ;                    projected [x y z] vector = [ [x y z] . roofv ]
  11++D3CB              ;                                               [ [x y z] . nosev ]
  12++D3CB              ;
  13++D3CB              ;   so project the [x y z] vector into the face's normal space
  14++D3CB              ;  line of sight vector = projected [x y z] vector + face normal vector
  15++D3CB              ;                         [ [x y z] . sidev ]   [ normal_x ]
  16++D3CB              ;                       = [ [x y z] . roofv ] + [ normal_y ]
  17++D3CB              ;                         [ [x y z] . nosev ]   [ normal_z ]
  18++D3CB              ;
  19++D3CB              ;                         [ [x y z] . sidev + normal_x ]
  20++D3CB              ;                       = [ [x y z] . roofv + normal_y ]
  21++D3CB              ;                         [ [x y z] . nosev + normal_z ]
  22++D3CB              ;
  23++D3CB              ; so
  24++D3CB              ;              visibility = [ [x y z] . sidev + normal_x ]   [ normal_x ]
  25++D3CB              ;                            [ [x y z] . roofv + normal_y ] . [ normal_y ]
  26++D3CB              ;                           [ [x y z] . nosev + normal_z ]   [ normal_z ]
  27++D3CB              ;
  28++D3CB              ; where face is visible if visibility < 0
  29++D3CB              ;
  30++D3CB              ;   so we set XX15 to [x y z] . sidev
  31++D3CB              ;                     [x y z] . roofv
  32++D3CB              ;                     [x y z] . nosev
  33++D3CB              ;
  34++D3CB
  35++D3CB
  36++D3CB
  37++D3CB 3A 74 C0     ScaleDrawcam:           ld      a,(UBnkDrawCam0zHi)         ; if z hi is 0 then we have scaled XX18
  38++D3CE                                      IfAIsZeroGoto .ScaleDone            ;
  38++D3CE A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  38++D3CF CA FC D3    >				jp	z, .ScaleDone
  39++D3D2 2A 6D C0                             ld      hl,(UBnkDrawCam0xLo)        ; pull postition into registers
  40++D3D5 ED 5B 70 C0                          ld      de,(UBnkDrawCam0yLo)        ; we only pull in if needed to save fetches
  41++D3D9 ED 4B 73 C0                          ld      bc,(UBnkDrawCam0zLo)        ;
  42++D3DD FD 2C        .ScaleNormalLoop:       inc     iyl                         ; Q goes up by one
  43++D3DF                                      ShiftHLRight1                       ; divide cam position by 2
  43++D3DF CB 3C       >			   srl h
  43++D3E1 CB 1D       >			   rr  l
  44++D3E3                                      ShiftDERight1                       ;
  44++D3E3 CB 3A       >			   srl d
  44++D3E5 CB 1B       >			   rr  e
  45++D3E7                                      ShiftBCRight1                       ;
  45++D3E7 CB 38       >			   srl b
  45++D3E9 CB 19       >			   rr  c
  46++D3EB 78                                   ld      a,b                         ; loop if not scaled down
  47++D3EC                                      IfANotZeroGoto .ScaleNormalLoop     ;
  47++D3EC FE 00       >				cp	0
  47++D3EE C2 DD D3    >				jp	nz,.ScaleNormalLoop
  48++D3F1 22 6D C0                             ld      (UBnkDrawCam0xLo),hl        ; save position back to XX18
  49++D3F4 ED 53 70 C0                          ld      (UBnkDrawCam0yLo),de        ;
  50++D3F8 ED 43 73 C0                          ld      (UBnkDrawCam0zLo),bc        ;
  51++D3FC FD 7D        .ScaleDone:             ld      a,iyl
  52++D3FE 32 BB 92                             ld      (varXX17),a                  ; XX17 = normal scale factor for current ship adjusted for camera
  53++D401 C9                                   ret
  54++D402
  55++D402              ;;--BackFaceCull:
  56++D402              ;;--;debug:jp debug
  57++D402              ;;--; DEBUG  force for now
  58++D402              ;;--;                        ld     a,MaxVisibility                 ; max visibility                                               ;;;; default max visibility
  59++D402              ;;--;                        ld     (LastNormalVisible),a           ; XX4                                                          ;;;;
  60++D402              ;;--;
  61++D402              ;;--; DEBUG
  62++D402              ;;--                         ReturnIfMemisZero FaceCtX4Addr      ; get number of faces * 4      FaceCntX4 &  return if no faces
  63++D402              ;;--                       ; break
  64++D402              ;;--                        call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
  65++D402              ;;--                        call    ScaleXX16Matrix197               ;#02; Normalise XX16
  66++D402              ;;--                        call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
  67++D402              ;;--                        call    InverseXX16                      ;#11; Invert rotation matrix
  68++D402              ;;--
  69++D402              ;;--.BackfaceLoop:          ld      a,(QAddr)                   ; a = ship normal scale factor
  70++D402              ;;--                        ld      iyl,a                       ; iyl = scale factor
  71++D402              ;;--; By this point XX18 = scaled draw cam and iyl = scale factor
  72++D402              ;;--                        call    ScaleDrawcam
  73++D402              ;;--                        call    CopyDrawCamToScaled
  74++D402              ;;--.LL91:                  call    XX12EquNodeDotOrientation  ; xx12 = xx15 . XX16
  75++D402              ;;--                        call    CopyXX12ScaledToXX18        ; now xx18 = xx15.xx16
  76++D402              ;;--.PrepNormals:           ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
  77++D402              ;;--                        ld      (varV),hl
  78++D402              ;;--                        ld      a,(FaceCtX4Addr)                                        ; For each face
  79++D402              ;;--                        srl     a                                                       ;
  80++D402              ;;--                        srl     a                                                       ;
  81++D402              ;;--                        ld      b,a                                                     ;
  82++D402              ;;--                        xor     a
  83++D402              ;;--                        ld      (CurrentNormIdx),a                                                   ; used to increment up face incdex as b decrements
  84++D402              ;;--ProcessNormalsLoop:     push    hl
  85++D402              ;;--                        push    bc
  86++D402              ;;--                        ld      a,(hl)                                                  ;     Get Face sign and visibility distance byte
  87++D402              ;;--                        and     $1F                                                     ;     if normal visibility range  < XX4
  88++D402              ;;--                        ;JumpIfAGTENusng c,FaceVisible                                   ; commented out for debuggging the skip
  89++D402              ;;--.LL86:                  jp  .LL87 ; force testing of normals
  90++D402              ;;--                        jp      .FaceVisible
  91++D402              ;;--; This bit needs to be added to force face visible
  92++D402              ;;--.LL87:                  call    CopyFaceToXX12
  93++D402              ;;--                        ld      a,(XX17)
  94++D402              ;;--                        JumpIfALTNusng 4,.LL92
  95++D402              ;;--.LL143:                 call    CopyXX18toXX15
  96++D402              ;;--                        jp      .LL89
  97++D402              ;;--.Ovflw:                 ld      a,(XX18)
  98++D402              ;;--                        srl     a
  99++D402              ;;--                        ld      (XX18),a
 100++D402              ;;--                        ld      a,(XX18+6)
 101++D402              ;;--                        srl     a
 102++D402              ;;--                        ld      (XX18+6),a
 103++D402              ;;--                        ld      a,(XX18+3)
 104++D402              ;;--                        srl     a
 105++D402              ;;--                        ld      (XX18+3),a
 106++D402              ;;--                        ld      a,1                        ; set scale to 1 so when we fall through into LL92, we divide the normal vector by 2 as well
 107++D402              ;;--.LL92:                   ld      b,a
 108++D402              ;;--                        ldCopyByte  XX12,   UBnkXScaled
 109++D402              ;;--                        ldCopyByte  XX12+2, UBnkYScaled
 110++D402              ;;--                        ldCopyByte  XX12+4, UBnkZScaled
 111++D402              ;;--.LL93                   dec     b
 112++D402              ;;--                        jp      m, .LL94
 113++D402              ;;--.LL93Loop:              ShiftMem8Right1 UBnkXScaled
 114++D402              ;;--                        ShiftMem8Right1 UBnkYScaled
 115++D402              ;;--                        ShiftMem8Right1 UBnkZScaled
 116++D402              ;;--                        dec     b
 117++D402              ;;--                        jp      p,.LL93Loop
 118++D402              ;;--; Add normal to XX15
 119++D402              ;;--.LL94:                  ldCopyByte  UBnkZScaled,     varR
 120++D402              ;;--                        ldCopyByte  UBnkYScaled,     varS
 121++D402              ;;--                        ldCopyByte  UBnkDrawCam0zLo, varQ
 122++D402              ;;--                        ld      a,(XX18+8)
 123++D402              ;;--                        call    SAEquSRPlusAQ
 124++D402              ;;--                        jp      c,.Ovflw
 125++D402              ;;--                        ld      (UBnkZScaled),a
 126++D402              ;;--                        ldCopyByte  varS,            UBnkZScaledSign
 127++D402              ;;--                        ldCopyByte  UBnkXScaled,     varR
 128++D402              ;;--                        ldCopyByte  UBnkXScaledSign, varS
 129++D402              ;;--                        ldCopyByte  UBnkDrawCam0xLo, varQ
 130++D402              ;;--                        ld      a,(UBnkDrawCam0xSgn)
 131++D402              ;;--                        call    SAEquSRPlusAQ
 132++D402              ;;--                        jp      c,.Ovflw
 133++D402              ;;--                        ld      (UBnkXScaled),a
 134++D402              ;;--                        ldCopyByte  varS,            UBnkXScaledSign
 135++D402              ;;--                        ldCopyByte  UBnkYScaled,     varR
 136++D402              ;;--                        ldCopyByte  UBnkYScaledSign, varS
 137++D402              ;;--                        ld      a,(UBnkDrawCam0ySgn)
 138++D402              ;;--                        call    SAEquSRPlusAQ
 139++D402              ;;--                        jp      c,.Ovflw
 140++D402              ;;--                        ld      (UBnkYScaled),a
 141++D402              ;;--                        ldCopyByte   varS, UBnkYScaledSign
 142++D402              ;;--; calculate dot product:
 143++D402              ;;--.LL89:                  ldCopyByte  UBnkXX12xLo, varQ
 144++D402              ;;--                        ld      a,(UBnkXScaled)
 145++D402              ;;--                        call    AequAmulQdiv256
 146++D402              ;;--                        ld      (varT),a
 147++D402              ;;--                        ld      a,(UBnkXX12xSign)
 148++D402              ;;--                        ld      hl,UBnkXScaledSign
 149++D402              ;;--                        xor     (hl)
 150++D402              ;;--                        ld      (varS),a
 151++D402              ;;--                        ldCopyByte  UBnkXX12yLo, varQ
 152++D402              ;;--                        ld      a,(UBnkYScaled)
 153++D402              ;;--                        call    AequAmulQdiv256
 154++D402              ;;--                        ld      (varQ),a
 155++D402              ;;--                        ldCopyByte  varT,varR
 156++D402              ;;--                        ld      a,  (UBnkXX12ySign)
 157++D402              ;;--                        ld      hl, UBnkYScaledSign
 158++D402              ;;--                        xor     (hl)
 159++D402              ;;--                        call    SAEquSRPlusAQ
 160++D402              ;;--                        ld      (varT),a
 161++D402              ;;--                        ldCopyByte  UBnkXX12zLo, varQ
 162++D402              ;;--                        ld      a,  (UBnkZScaled)
 163++D402              ;;--                        call    AequAmulQdiv256
 164++D402              ;;--                        ld      (varQ),a
 165++D402              ;;--                        ldCopyByte  varT, varR
 166++D402              ;;--                        ld      a,  (UBnkZScaledSign)
 167++D402              ;;--                        ld      hl, UBnkXX12zSign
 168++D402              ;;--                        xor     (hl)
 169++D402              ;;--                        call    SAEquSRPlusAQ           ; now A = dot product
 170++D402              ;;--                        test    $80
 171++D402              ;;--                        jr      nz,.FaceVisible                                      ;        if dot product < 0 set face visible
 172++D402              ;;--.FaceNotVisible:         ld          a,(CurrentNormIdx)
 173++D402              ;;--                        call        SetFaceAHidden                                      ;           set face invisible
 174++D402              ;;--                        jp          ProcessNormalLoopEnd                                ;        end if
 175++D402              ;;--.FaceVisible:            ld          a,(CurrentNormIdx)
 176++D402              ;;--                        call        SetFaceAVisible
 177++D402              ;;--ProcessNormalLoopEnd:   ld          hl, CurrentNormIdx
 178++D402              ;;--                        inc         (hl)                    ; move index pointer up by one
 179++D402              ;;--                        pop         bc
 180++D402              ;;--                        pop         hl                      ; get normal data pointer back
 181++D402              ;;--                        ld          a,4
 182++D402              ;;--                        add         hl,a                    ; move to next normal entry
 183++D402              ;;--                        ld          (varV),hl               ; save as we need it again
 184++D402              ;;--                        dec         b
 185++D402              ;;--                        jp          nz,ProcessNormalsLoop
 186++D402              ;;--                        ret
 187++D402
 188++D402
 189++D402
 190++D402
 191++D402              ;;;;;                        call    CopyFaceToXX15                                          ;        Get Face data into XX12
 192++D402              ;;;;;                        ld      a,(UBnkXScaledSign)
 193++D402              ;;;;;                        call    XX12EquNodeDotOrientation
 194++D402              ;;;;;                        ld      a,(UBnkXX12zSign)
 195++D402              ;;;;;                        test    $80
 196++D402              ;;;;;                        jp      nz, FaceVisible
 197++D402              ;;;;;.BackfaceLoop:          ld      a,(QAddr)                   ; a = ship normal scale factor
 198++D402              ;;;;;                        ld      iyl,a                       ; iyl = scale factor
 199++D402              ;;;;;.ScaleNormal:           ld      a,(UBnkDrawCam0zHi)         ; if z hi is 0 then we have scaled XX18
 200++D402              ;;;;;                        IfAIsZeroGoto .ScaleDone            ;
 201++D402              ;;;;;                        ld      hl,(UBnkDrawCam0xLo)        ; pull postition into registers
 202++D402              ;;;;;                        ld      de,(UBnkDrawCam0yLo)        ; we only pull in if needed to save fetches
 203++D402              ;;;;;                        ld      bc,(UBnkDrawCam0zLo)        ;
 204++D402              ;;;;;.ScaleNormalLoop:       inc     iyl                         ; Q goes up by one
 205++D402              ;;;;;                        ShiftHLRight1                       ; divide cam position by 2
 206++D402              ;;;;;                        ShiftDERight1                       ;
 207++D402              ;;;;;                        ShiftBCRight1                       ;
 208++D402              ;;;;;                        ld      a,b                         ; loop if not scaled down
 209++D402              ;;;;;                        IfANotZeroGoto .ScaleNormalLoop     ;
 210++D402              ;;;;;                        ld      (UBnkDrawCam0xLo),hl        ; save position back to XX18
 211++D402              ;;;;;                        ld      (UBnkDrawCam0yLo),de        ;
 212++D402              ;;;;;                        ld      (UBnkDrawCam0zLo),bc        ;
 213++D402              ;;;;;; By this point XX18 = scaled draw cam and iyl = scale factor
 214++D402              ;;;;;.ScaleDone:             ld      a,iyl
 215++D402              ;;;;;                        ld      (varXX17),a                  ; XX17 = normal scale factor for current ship adjusted for camera
 216++D402              ;;;;;    call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
 217++D402              ;;;;;    call    ScaleXX16Matrix197               ;#02; Normalise XX16
 218++D402              ;;;;;;    call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
 219++D402              ;;;;;    call    InverseXX16                      ;#11; Invert rotation matrix
 220++D402              ;;;;;
 221++D402              ;;;;;
 222++D402              ;;;;;
 223++D402              ;;;;;                        call    CopyXX18toXX15              ; copy DrawCam to Xx15
 224++D402              ;;;;;                        call    XX12EquNodeDotOrientation   ; Xx12 = XX15 (face normal) dot rotation matrix
 225++D402              ;;;;;                        call    CopyXX12ScaledToXX18              ; now XX18 = dot product
 226++D402              ;;;;;.ProcessNormals:        ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
 227++D402              ;;;;;                        ld      (varV),hl
 228++D402              ;;;;;                        ld      a,(FaceCtX4Addr)                                        ; For each face
 229++D402              ;;;;;                        srl     a                                                       ;
 230++D402              ;;;;;                        srl     a                                                       ;
 231++D402              ;;;;;                        ld      b,a                                                     ;
 232++D402              ;;;;;                        xor     a
 233++D402              ;;;;;                        ld      (CurrentNormIdx),a                                                   ; used to increment up face incdex as b decrements
 234++D402              ;;;;;.ProcessNormalsLoop:    push    hl
 235++D402              ;;;;;                        push    bc
 236++D402              ;;;;;                        ld      a,(hl)                                                  ;     Get Face sign and visibility distance byte
 237++D402              ;;;;;                        and     $1F                                                     ;     if normal visibility range  < XX4
 238++D402              ;;;;;                        ;JumpIfAGTENusng c,FaceVisible                                   ; commented out for debuggging the skip
 239++D402              ;;;;;.CheckFaceVisibility:   call    CopyFaceToXX12              ; Get Face data into XX12
 240++D402              ;;;;;                        ld      a,(varXX17)                  ; if scale factor < 4 then skip next bit
 241++D402              ;;;;;                        JumpIfALTNusng 4,.LL92
 242++D402              ;;;;;.LargeScaleFactor:      call    CopyXX18toXX15
 243++D402              ;;;;;                        jp      .LL89
 244++D402              ;;;;;.Ovflw:                 ld      a,(XX18)
 245++D402              ;;;;;                        srl     a
 246++D402              ;;;;;                        ld      (XX18),a
 247++D402              ;;;;;                        ld      a,(XX18+6)
 248++D402              ;;;;;                        srl     a
 249++D402              ;;;;;                        ld      (XX18+6),a
 250++D402              ;;;;;                        ld      a,(XX18+3)
 251++D402              ;;;;;                        srl     a
 252++D402              ;;;;;                        ld      (XX18+3),a
 253++D402              ;;;;;                        ld      a,1                        ; set scale to 1 so when we fall through into LL92, we divide the normal vector by 2 as well
 254++D402              ;;;;;.LL92:                  ld      b,a
 255++D402              ;;;;;                        ldCopyByte  XX12,   UBnkXScaled
 256++D402              ;;;;;                        ldCopyByte  XX12+2, UBnkYScaled
 257++D402              ;;;;;                        ldCopyByte  XX12+4, UBnkZScaled
 258++D402              ;;;;;.LL93                   dec     b
 259++D402              ;;;;;                        jp      m, .LL94
 260++D402              ;;;;;.LL93Loop:              ShiftMem8Right1 UBnkXScaled
 261++D402              ;;;;;                        ShiftMem8Right1 UBnkYScaled
 262++D402              ;;;;;                        ShiftMem8Right1 UBnkZScaled
 263++D402              ;;;;;                        dec     b
 264++D402              ;;;;;                        jp      p,.LL93Loop
 265++D402              ;;;;;.LL94:                  ldCopyByte  UBnkZScaled,     varR
 266++D402              ;;;;;                        ldCopyByte  UBnkYScaled,     varS
 267++D402              ;;;;;                        ldCopyByte  UBnkDrawCam0zLo, varQ
 268++D402              ;;;;;                        ld      a,(XX18+8)
 269++D402              ;;;;;                        call    SAEquSRPlusAQ
 270++D402              ;;;;;                        jp      c,.Ovflw
 271++D402              ;;;;;                        ld      (UBnkZScaled),a
 272++D402              ;;;;;                        ldCopyByte  varS,            UBnkZScaledSign
 273++D402              ;;;;;                        ldCopyByte  UBnkXScaled,     varR
 274++D402              ;;;;;                        ldCopyByte  UBnkXScaledSign, varS
 275++D402              ;;;;;                        ldCopyByte  UBnkDrawCam0xLo, varQ
 276++D402              ;;;;;                        ld      a,(UBnkDrawCam0xSgn)
 277++D402              ;;;;;                        call    SAEquSRPlusAQ
 278++D402              ;;;;;                        jp      c,.Ovflw
 279++D402              ;;;;;                        ld      (UBnkXScaled),a
 280++D402              ;;;;;                        ldCopyByte  varS,            UBnkXScaledSign
 281++D402              ;;;;;                        ldCopyByte  UBnkYScaled,     varR
 282++D402              ;;;;;                        ldCopyByte  UBnkYScaledSign, varS
 283++D402              ;;;;;                        ld      a,(UBnkDrawCam0ySgn)
 284++D402              ;;;;;                        call    SAEquSRPlusAQ
 285++D402              ;;;;;                        jp      c,.Ovflw
 286++D402              ;;;;;                        ld      (UBnkYScaled),a
 287++D402              ;;;;;                        ldCopyByte   varS, UBnkYScaledSign
 288++D402              ;;;;;.LL89:                  ldCopyByte  UBnkXX12xLo, varQ
 289++D402              ;;;;;                        ld      a,(UBnkXScaled)
 290++D402              ;;;;;                        call    AequAmulQdiv256
 291++D402              ;;;;;                        ld      (varT),a
 292++D402              ;;;;;                        ld      a,(UBnkXX12xSign)
 293++D402              ;;;;;                        ld      hl,UBnkXScaledSign
 294++D402              ;;;;;                        xor     (hl)
 295++D402              ;;;;;                        ld      (varS),a
 296++D402              ;;;;;                        ldCopyByte  UBnkXX12yLo, varQ
 297++D402              ;;;;;                        ld      a,(UBnkYScaled)
 298++D402              ;;;;;                        call    AequAmulQdiv256
 299++D402              ;;;;;                        ld      (varQ),a
 300++D402              ;;;;;                        ldCopyByte  varT,varR
 301++D402              ;;;;;                        ld      a,  (UBnkXX12ySign)
 302++D402              ;;;;;                        ld      hl, UBnkYScaledSign
 303++D402              ;;;;;                        xor     (hl)
 304++D402              ;;;;;                        call    SAEquSRPlusAQ
 305++D402              ;;;;;                        ld      (varT),a
 306++D402              ;;;;;                        ldCopyByte  UBnkXX12zLo, varQ
 307++D402              ;;;;;                        ld      a,  (UBnkZScaled)
 308++D402              ;;;;;                        call    AequAmulQdiv256
 309++D402              ;;;;;                        ld      (varQ),a
 310++D402              ;;;;;                        ldCopyByte  varT, varR
 311++D402              ;;;;;                        ld      a,  (UBnkZScaledSign)
 312++D402              ;;;;;                        ld      hl, UBnkXX12zSign
 313++D402              ;;;;;                        xor     (hl)
 314++D402              ;;;;;                        call    SAEquSRPlusAQ           ; now A = dot product
 315++D402              ;;;;;                        test    $80
 316++D402              ;;;;;                        jr      nz,.FaceVisible
 317++D402              ;;;;;.FaceNotVisible:        ld      a,(CurrentNormIdx)
 318++D402              ;;;;;                        call    SetFaceAHidden                                      ;           set face invisible
 319++D402              ;;;;;                        jp      .ProcessNormalLoopEnd                                ;        end if
 320++D402              ;;;;;.FaceVisible:           ld      a,(CurrentNormIdx)
 321++D402              ;;;;;                        call    SetFaceAVisible
 322++D402              ;;;;;.ProcessNormalLoopEnd:   ld      hl, CurrentNormIdx
 323++D402              ;;;;;                        inc         (hl)                    ; move index pointer up by one
 324++D402              ;;;;;                        pop         bc
 325++D402              ;;;;;                        pop         hl                      ; get normal data pointer back
 326++D402              ;;;;;                        ld          a,4
 327++D402              ;;;;;                        add         hl,a                    ; move to next normal entry
 328++D402              ;;;;;                        ld          (varV),hl               ; save as we need it again
 329++D402              ;;;;;                        dec         b
 330++D402              ;;;;;                        jp          nz,.ProcessNormalsLoop
 331++D402              ;;;;;                        ret                                 ; If Y >= XX20 all normals' visibilities set, onto Transpose. return
 332++D402              ;;;;;
 333++D402 00           XX4Distance             DB      0
 334++D403
 335++D403
 336++D403
 337++D403 3A 14 C0     CheckDistance:          ld      a,(UBnKzsgn)                 ; Is the ship behind us
 338++D406 E6 80        .CheckBehind:           and     SignOnly8Bit                 ; .
 339++D408 20 3E                                jr      nz,.ShipNoDraw               ; .
 340++D40A 2A 12 C0     .CheckViewPort:         ld      hl,(UBnKzlo)
 341++D40D 7C                                   ld      a,h
 342++D40E                                      JumpIfAGTENusng ShipMaxDistance, .ShipNoDraw
 342++D40E FE C0       >                        cp     ShipMaxDistance
 342++D410 D2 48 D4    >                        jp		nc,.ShipNoDraw
 343++D413 ED 5B 0C C0  .CheckXAxis:            ld      de,(UBnKxlo)
 344++D417 CD 9D A5                             call    compare16HLDE
 345++D41A 38 2C                                jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
 346++D41C ED 5B 0F C0  .CheckYAxis:            ld      de,(UBnKylo)
 347++D420 CD 9D A5                             call    compare16HLDE
 348++D423 38 23                                jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
 349++D425              .CalculateXX4:           ShiftHLRight1                       ; hl = z pos / 8
 349++D425 CB 3C       >			   srl h
 349++D427 CB 1D       >			   rr  l
 350++D429                                      ShiftHLRight1                       ; .
 350++D429 CB 3C       >			   srl h
 350++D42B CB 1D       >			   rr  l
 351++D42D                                      ShiftHLRight1                       ; .
 351++D42D CB 3C       >			   srl h
 351++D42F CB 1D       >			   rr  l
 352++D431 7C                                   ld      a,h
 353++D432 CB 3F                                srl     a                           ; if a / 16 <> 0 then ship is a dot
 354++D434 CA 4A D4     .DrawAsDotCheck:        jp      z,.ShipIsADot
 355++D437                                      ; Check visbility distance
 356++D437 7D           .SetXX4Dist:            ld      a,l
 357++D438 1F                                   rra                                 ; l may have had bit 0 of h carried in
 358++D439 CB 3F                                srl     a                           ; so move it to bit 4 giving A as distance $000xxxxx
 359++D43B CB 3F                                srl     a
 360++D43D CB 3F                                srl     a
 361++D43F 32 02 D4                             ld      (XX4Distance),a             ; XX4 = "all faces" distance
 362++D442 AF                                   xor     a
 363++D443 32 92 C0                             ld      (UBnKDrawAsDot),a           ; set draw as dot to 0, i.e. false
 364++D446                                      ClearCarryFlag
 364++D446 B7          >                    or a
 365++D447 C9                                   ret
 366++D448              .ShipNoDraw:            SetCarryFlag                        ; ship is behind so do not draw, so we don't care abour draw as dot
 366++D448 37          >                    scf
 367++D449 C9                                   ret
 368++D44A CD C3 DB     .ShipIsADot:            call    ProcessDot                  ; use the same logic as process nodes to do 1 point
 369++D44D AF                                   xor     a
 370++D44E 32 92 C0                             ld      (UBnKDrawAsDot),a           ; set draw as dot to 0, i.e. false
 371++D451                                      ClearCarryFlag
 371++D451 B7          >                    or a
 372++D452 C9                                   ret
 373++D453
 374++D453
 375++D453              ; TODO remove all teh processing of rotmat to load craft to camera as its already been done
 376++D453              CullV2:                 ReturnIfMemisZero FaceCtX4Addr      ;
 376++D453 3A 10 C3    >                    ld   a,(FaceCtX4Addr)
 376++D456 A7          >                    and a
 376++D457 C8          >                    ret    z
 377++D458                                     ; break
 378++D458 CD 9E CE                             call    CopyRotmatToTransMat        ; XX16 = UBNKRotMat
 379++D45B CD D3 8B                             call    ScaleXX16Matrix197          ; scale rotation matrix in XX16
 380++D45E CD 54 D1                             call    LoadCraftToCamera           ; XX18 = camera
 381++D461                                      ;call    CopyCameraToXX15Signed      ; Copy the camera to XX15 as signed 15 bit
 382++D461 3A 16 C3     .BackfaceLoop:          ld      a,(QAddr)                   ;
 383++D464 FD 6F                                ld      iyl,a                       ; iyl = scale factor
 384++D466              ; By this point XX18 = scaled draw cam and iyl = scale factor
 385++D466 CD CB D3                             call    ScaleDrawcam                ; XX18 = scaled camera XX17 = scale
 386++D469 CD 6D D1                             call    CopyCameraToXX15Signed      ; Xx18 -> xx15 sign + 15 bit
 387++D46C CD 2A 8B     .LL91:                  call    XX12EquNodeDotXX16          ; xx12 = Scaled Camera . Rotation matrix (Note Xx16 no Xx16 inv)
 388++D46F CD E5 D0                             call    CopyXX12ScaledToXX18        ; now xx18 = XX12 = xx15.xx16
 389++D472 21 F8 C8     .PrepNormals:           ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
 390++D475 22 59 92                             ld      (varV),hl
 391++D478 3A 10 C3                             ld      a,(FaceCtX4Addr)                                        ; For each face
 392++D47B CB 3F                                srl     a                                                       ;
 393++D47D CB 3F                                srl     a                                                       ;
 394++D47F 47                                   ld      b,a                                                     ;
 395++D480 AF                                   xor     a
 396++D481 32 CA D3                             ld      (CurrentNormIdx),a                                                   ; used to increment up face incdex as b decrements
 397++D484 E5           .ProcessNormalsLoop:    push    hl
 398++D485 C5                                   push    bc
 399++D486 7E           .LL86:                  ld      a,(hl)                                                  ; Get Face sign and visibility distance byte
 400++D487 E6 1F                                and     $1F                                                     ; if normal visibility range  < XX4
 401++D489 E5                                   push    hl
 402++D48A 21 02 D4                             ld      hl,XX4Distance
 403++D48D BE                                   cp      (hl)
 404++D48E E1                                   pop     hl
 405++D48F DA D4 D5                             jp      c,.FaceVisible                       ; then we always draw
 406++D492              ; This bit needs to be added to force face visible
 407++D492 CD 4F D3     .LL87:                  call    CopyFaceToXX12              ; XX12 = normal (repolaced scale version) as a working copy
 408++D495 3A BB 92                             ld      a,(XX17)                    ; a = q scale XX17 cauclated by the call to ScaleDrawcam
 409++D498 47                                   ld      b,a
 410++D499                                      JumpIfALTNusng 4,.ScaleNormByXX17   ; if q >= 4 then is so big we don;t factor in + normal for dot product
 410++D499 FE 04       >                        cp      4
 410++D49B DA D6 D4    >                        jp		c, .ScaleNormByXX17
 411++D49E CD 2F D1     .LL143:                 call    CopyXX18toXX15              ; and we just set XX15 = scaled Camera dot rotation matrix
 412++D4A1 C3 65 D5                             jp      .DoneScalingIntoXX15        ; Now Process XX12 normal
 413++D4A4 3A 6D C0     .Ovflw:                 ld      a,(UBnkDrawCam0xLo)         ; divide camera by 2 if overflow
 414++D4A7 CB 3F                                srl     a                           ; which is held in XX18
 415++D4A9 32 6D C0                             ld      (UBnkDrawCam0xLo),a         ; .
 416++D4AC 3A 73 C0                             ld      a,(UBnkDrawCam0zLo)         ; .
 417++D4AF CB 3F                                srl     a                           ; .
 418++D4B1 32 73 C0                             ld      (UBnkDrawCam0zLo),a         ; .
 419++D4B4 3A 70 C0                             ld      a,(UBnkDrawCam0yLo)         ; .
 420++D4B7 CB 3F                                srl     a                           ; .
 421++D4B9 32 70 C0                             ld      (UBnkDrawCam0yLo),a        ; .
 422++D4BC 06 01        .ScaleXScaledAgain:     ld      b,1                         ; set scale to 1 so we divide original normal by 2 into face and try again and hope we didn't scaled down XX12 earlier so if we did then we must be in the do doo as the object was obscenely large and very close
 423++D4BE                                      ShiftMem8Right1 UBnkXScaled         ; Divide XX15 by 2^B
 423++D4BE 3A 79 C0    >                    ld      a,(UBnkXScaled)
 423++D4C1 CB 3F       >                    srl     a
 423++D4C3 32 79 C0    >                    ld      (UBnkXScaled),a
 424++D4C6                                      ShiftMem8Right1 UBnkYScaled         ;
 424++D4C6 3A 7B C0    >                    ld      a,(UBnkYScaled)
 424++D4C9 CB 3F       >                    srl     a
 424++D4CB 32 7B C0    >                    ld      (UBnkYScaled),a
 425++D4CE                                      ShiftMem8Right1 UBnkZScaled         ;
 425++D4CE 3A 7D C0    >                    ld      a,(UBnkZScaled)
 425++D4D1 CB 3F       >                    srl     a
 425++D4D3 32 7D C0    >                    ld      (UBnkZScaled),a
 426++D4D6              ; if we jumped to here scale factor < 4 so we copy in normal to XX15 (scaled) LL92
 427++D4D6              .ScaleNormByXX17:       ;ld      b,a
 428++D4D6 CD 0A D1                             call    CopyXX12toXX15
 429++D4D9 05           .LL93                   dec     b
 430++D4DA FA F9 D4                             jp      m, .ScaledNorm
 431++D4DD              .LL93Loop:              ShiftMem8Right1 UBnkXScaled        ; Divide XX15 by 2^B, I think this should be really XX12 and is a bug in the original code
 431++D4DD 3A 79 C0    >                    ld      a,(UBnkXScaled)
 431++D4E0 CB 3F       >                    srl     a
 431++D4E2 32 79 C0    >                    ld      (UBnkXScaled),a
 432++D4E5                                      ShiftMem8Right1 UBnkYScaled        ;
 432++D4E5 3A 7B C0    >                    ld      a,(UBnkYScaled)
 432++D4E8 CB 3F       >                    srl     a
 432++D4EA 32 7B C0    >                    ld      (UBnkYScaled),a
 433++D4ED                                      ShiftMem8Right1 UBnkZScaled        ;
 433++D4ED 3A 7D C0    >                    ld      a,(UBnkZScaled)
 433++D4F0 CB 3F       >                    srl     a
 433++D4F2 32 7D C0    >                    ld      (UBnkZScaled),a
 434++D4F5 05                                   dec     b                          ;
 435++D4F6 F2 DD D4                             jp      p,.LL93Loop                ; Now we have XX15 as scaled Normal, XX15 as camera, don;t really knwo why as cals work on XX12 and XX18
 436++D4F9              .ScaledNorm:            ;ORIG CODE DOES NOT HAVE THIS call    CopyXX15ToXX12 ; DEBUG as XX15 shoudl be a sacled nromal
 437++D4F9              ; Add normal to XX15
 438++D4F9              ; if we jumped here direct from LL143 then XX15 = drawcam scaled by Q, XX12 = face normal unscaled, XX18 = drawcam scaled also
 439++D4F9              ; if we jumped here via scaling       then XX15 = normal scaled by Q,  XX12 = face normal unscaled, XX16 = drawcam scaled
 440++D4F9              ; if we hit an overflow               then XX15 = drawcam scaled by Q  XX12 = face normal unscaled, XX18 = (drawcam scaled / 2 ) / 2^ nbr overflows (if we cam in vai scaling then its a mess?
 441++D4F9              ; So LL94 is wrong as it shoud be operating on XX12 not XX15
 442++D4F9              .LL94:                  ldCopyByte UBnkZScaled, varR        ; ldCopyByte  UBnkZScaled,     varR  ; if we jumped direct XX15 = drawcam scaled, Xx12 = normal xx18 = drawcam
 442++D4F9 3A 7D C0    >               ld       a,(UBnkZScaled)
 442++D4FC 32 B5 92    >               ld       (varR),a
 443++D4FF                                      ldCopyByte UBnkXX12zSign, varS      ; ldCopyByte  UBnkYScaled,     varS  ; if we did scaling then xx15 = norm scaled XX18 = drawcam
 443++D4FF 3A 84 C0    >               ld       a,(UBnkXX12zSign)
 443++D502 32 B6 92    >               ld       (varS),a
 444++D505                                      ldCopyByte  UBnkDrawCam0zLo, varQ   ; AQ = drawcam Z signed
 444++D505 3A 73 C0    >               ld       a,(UBnkDrawCam0zLo)
 444++D508 32 B4 92    >               ld       (varQ),a
 445++D50B 3A 75 C0                             ld      a,(UBnkDrawCam0zSgn)        ; .
 446++D50E CD DD A8                             call    SAEquSRPlusAQ               ; SA = drawcam Z dot + z
 447++D511 DA A4 D4                             jp      c,.Ovflw
 448++D514 32 7D C0                             ld      (UBnkZScaled),a             ; XX15Z = SA
 449++D517                                      ldCopyByte  varS, UBnkZScaledSign   ;
 449++D517 3A B6 92    >               ld       a,(varS)
 449++D51A 32 7E C0    >               ld       (UBnkZScaledSign),a
 450++D51D                                      ldCopyByte  UBnkXScaled,     varR   ; SR = normal X
 450++D51D 3A 79 C0    >               ld       a,(UBnkXScaled)
 450++D520 32 B5 92    >               ld       (varR),a
 451++D523                                      ldCopyByte  UBnkXX12xSign,   varS   ; .
 451++D523 3A 80 C0    >               ld       a,(UBnkXX12xSign)
 451++D526 32 B6 92    >               ld       (varS),a
 452++D529                                      ldCopyByte  UBnkDrawCam0xLo, varQ   ; AQ = drawcam x dot
 452++D529 3A 6D C0    >               ld       a,(UBnkDrawCam0xLo)
 452++D52C 32 B4 92    >               ld       (varQ),a
 453++D52F 3A 6F C0                             ld      a,(UBnkDrawCam0xSgn)        ; .
 454++D532 CD DD A8                             call    SAEquSRPlusAQ               ; SA = normal x + drawcam x dot
 455++D535 DA A4 D4                             jp      c,.Ovflw
 456++D538 32 79 C0                             ld      (UBnkXScaled),a             ; XX15Z = SA
 457++D53B                                      ldCopyByte  varS, UBnkXScaledSign   ; .
 457++D53B 3A B6 92    >               ld       a,(varS)
 457++D53E 32 7A C0    >               ld       (UBnkXScaledSign),a
 458++D541                                      ldCopyByte  UBnkYScaled, varR       ; SR = normal Y
 458++D541 3A 7B C0    >               ld       a,(UBnkYScaled)
 458++D544 32 B5 92    >               ld       (varR),a
 459++D547                                      ldCopyByte  UBnkXX12ySign, varS     ; .
 459++D547 3A 82 C0    >               ld       a,(UBnkXX12ySign)
 459++D54A 32 B6 92    >               ld       (varS),a
 460++D54D                                      ldCopyByte  UBnkDrawCam0yLo, varQ   ; AQ = drawcam y dot
 460++D54D 3A 70 C0    >               ld       a,(UBnkDrawCam0yLo)
 460++D550 32 B4 92    >               ld       (varQ),a
 461++D553 3A 72 C0                             ld      a,(UBnkDrawCam0ySgn)        ; .
 462++D556 CD DD A8                             call    SAEquSRPlusAQ               ; SA = normal y + drawcam y dot
 463++D559 DA A4 D4                             jp      c,.Ovflw                    ; .
 464++D55C 32 7B C0                             ld      (UBnkYScaled),a             ; XX15 Y = SA
 465++D55F                                      ldCopyByte   varS, UBnkYScaledSign  ; .
 465++D55F 3A B6 92    >               ld       a,(varS)
 465++D562 32 7C C0    >               ld       (UBnkYScaledSign),a
 466++D565              ; calculate dot product LL89
 467++D565              .DoneScalingIntoXX15:   ldCopyByte  UBnkXX12xLo, varQ       ; Q = norm X XX12
 467++D565 3A 7F C0    >               ld       a,(UBnkXX12xLo)
 467++D568 32 B4 92    >               ld       (varQ),a
 468++D56B 3A 79 C0                             ld      a,(UBnkXScaled)             ; A = XX15 X
 469++D56E CD 49 A8                             call    AequAmulQdiv256             ; A = XX15 X * XX 12 X
 470++D571 32 D2 92                             ld      (varT),a                    ; T = XX15 X * XX 12 X
 471++D574 3A 80 C0                             ld      a,(UBnkXX12xSign)           ; S = sign of XX15 X * XX12 X
 472++D577 21 7A C0                             ld      hl,UBnkXScaledSign          ; .
 473++D57A AE                                   xor     (hl)                        ; .
 474++D57B 32 B6 92                             ld      (varS),a                    ; .
 475++D57E                                      ldCopyByte  UBnkXX12yLo, varQ       ; Q = norm Y XX12
 475++D57E 3A 81 C0    >               ld       a,(UBnkXX12yLo)
 475++D581 32 B4 92    >               ld       (varQ),a
 476++D584 3A 7B C0                             ld      a,(UBnkYScaled)             ; A = XX15 Y
 477++D587 CD 49 A8                             call    AequAmulQdiv256             ; A = XX15 Y * XX 12 Y
 478++D58A 32 B4 92                             ld      (varQ),a                    ; Q = XX15 Y * XX 12 Y
 479++D58D                                      ldCopyByte  varT,varR               ; R = XX15 X * XX 12 X
 479++D58D 3A D2 92    >               ld       a,(varT)
 479++D590 32 B5 92    >               ld       (varR),a
 480++D593 3A 82 C0                             ld      a,  (UBnkXX12ySign)         ; A = sign of XX15 Y * XX 12 Y
 481++D596 21 7C C0                             ld      hl, UBnkYScaledSign         ; .
 482++D599 AE                                   xor     (hl)                        ; .
 483++D59A CD DD A8                             call    SAEquSRPlusAQ               ; SA = SR+AQ = (X calc) + (Y calc)
 484++D59D 32 D2 92                             ld      (varT),a                    ; T = usigned (X calc) + (Y calc)
 485++D5A0                                      ldCopyByte  UBnkXX12zLo, varQ       ; Q = XX12 Z
 485++D5A0 3A 83 C0    >               ld       a,(UBnkXX12zLo)
 485++D5A3 32 B4 92    >               ld       (varQ),a
 486++D5A6 3A 7D C0                             ld      a,  (UBnkZScaled)           ; A = XX15 Z
 487++D5A9 CD 49 A8                             call    AequAmulQdiv256             ; A = XX12 Z * XX15 Z
 488++D5AC 32 B4 92                             ld      (varQ),a                    ; Q = XX12 Z * XX15 Z
 489++D5AF                                      ldCopyByte  varT, varR              ; R = usigned (X calc) + (Y calc)
 489++D5AF 3A D2 92    >               ld       a,(varT)
 489++D5B2 32 B5 92    >               ld       (varR),a
 490++D5B5 3A 7E C0                             ld      a,  (UBnkZScaledSign)       ; A = sign of XX12 Z * XX15 Z
 491++D5B8 21 84 C0                             ld      hl, UBnkXX12zSign           ; .
 492++D5BB AE                                   xor     (hl)                        ; .
 493++D5BC CD DD A8                             call    SAEquSRPlusAQ               ; SA = ((X+Y signed)) (Z signed)
 494++D5BF FE 00                                cp      0                           ; was the result 0, if so then there are scenarios where SAEquSRPlusAQ can return -ve 0
 495++D5C1 28 08                                jr      z,.FaceNotVisible           ; in which case face is not visible
 496++D5C3 3A B6 92                             ld      a,(varS)                    ; if the cacl was a negative number then its visible
 497++D5C6 ED 27 80                             test    $80                         ; this should test S not A
 498++D5C9 20 09                                jr      nz,.FaceVisible                                      ;        if dot product < 0 set face visible
 499++D5CB 3A CA D3     .FaceNotVisible:         ld          a,(CurrentNormIdx)
 500++D5CE CD B2 CF                             call        SetFaceAHidden                                      ;           set face invisible
 501++D5D1 C3 DA D5                             jp          .ProcessNormalLoopEnd                                ;        end if
 502++D5D4 3A CA D3     .FaceVisible:            ld          a,(CurrentNormIdx)
 503++D5D7 CD A9 CF                             call        SetFaceAVisible
 504++D5DA 21 CA D3     .ProcessNormalLoopEnd:  ld          hl, CurrentNormIdx
 505++D5DD 34                                   inc         (hl)                    ; move index pointer up by one
 506++D5DE C1                                   pop         bc
 507++D5DF E1                                   pop         hl                      ; get normal data pointer back
 508++D5E0 3E 04                                ld          a,4
 509++D5E2 ED 31                                add         hl,a                    ; move to next normal entry
 510++D5E4 22 59 92                             ld          (varV),hl               ; save as we need it again
 511++D5E7 05                                   dec         b
 512++D5E8 C2 84 D4                             jp          nz,.ProcessNormalsLoop
 513++D5EB C9                                   ret
 514++D5EC
# file closed: ././ModelRender/BackfaceCull.asm
 789+ D5EC              ;--------------------------------------------------------------------------------------------------------
 790+ D5EC              ; Process edges
 791+ D5EC              ; .....................................................
 792+ D5EC              TransposeNodeVal:   MACRO arg0?
 793+ D5EC ~                    ldCopyByte  UBnK\0sgn,Ubnk\1PointSign           ; UBnkXSgn => XX15+2 x sign
 794+ D5EC ~                    ld          bc,(UBnkXX12\0Lo)                   ; c = lo, b = sign   XX12XLoSign
 795+ D5EC ~                    xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 796+ D5EC ~                    jp          m,NodeNegative\1                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 797+ D5EC ~            ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 798+ D5EC ~            NodeXPositive\1
 798+ D5EC ~
 799+ D5EC ~                    ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
 800+ D5EC ~                    ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
 801+ D5EC ~                    ld          hl,(UBnK\0lo)                       ; hl = XX1 UBNKxLo
 802+ D5EC ~                    ld          h,0                                 ; but we don;t want the sign
 803+ D5EC ~                    add         hl,bc                               ; its a 16 bit add
 804+ D5EC ~                    ld          (Ubnk\1Point),hl                    ; And written to XX15 0,1
 805+ D5EC ~                    xor         a                                   ; we want to write 0 as sign bit (not in original code)
 806+ D5EC ~                    ld          (UbnkXPointSign),a
 807+ D5EC ~                    jp          FinishedThisNode\1
 808+ D5EC ~            ; If we get here then _sign and vertv_ have different signs so do subtract
 809+ D5EC ~            NodeNegative\1
 809+ D5EC ~
 810+ D5EC ~            LL52\1
 810+ D5EC ~                                                              ;
 811+ D5EC ~                    ld          hl,(UBnK\0lo)                       ; Coord
 812+ D5EC ~                    ld          bc,(UBnkXX12\0Lo)                   ; XX12
 813+ D5EC ~                    ld          b,0                                 ; XX12 lo byte only
 814+ D5EC ~                    sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
 815+ D5EC ~                    jp          p,SetAndMop\1                       ; if result is positive skip to write back
 816+ D5EC ~            NodeXNegSignChange\1
 816+ D5EC ~
 817+ D5EC ~            ; If we get here the result is 2'c compliment so we reverse it and flip sign
 818+ D5EC ~                    call        negate16hl                          ; Convert back to positive and flip sign
 819+ D5EC ~                    ld          a,(Ubnk\1PointSign)                 ; XX15+2
 820+ D5EC ~                    xor         $80                                 ; Flip bit 7
 821+ D5EC ~                    ld          (Ubnk\1PointSign),a                 ; XX15+2
 822+ D5EC ~            SetAndMop\1
 822+ D5EC ~
 823+ D5EC ~                    ld          (UBnK\0lo),hl                       ; XX15+0
 824+ D5EC ~            FinishedThisNode\1
 825+ D5EC                                  ENDM
 826+ D5EC
 827+ D5EC              ;--LL52 to LL55-----------------------------------------------------------------------------------------------------------------
 828+ D5EC
 829+ D5EC              TransposeXX12NodeToXX15:
 830+ D5EC                      ldCopyByte  UBnKxsgn,UbnkXPointSign           ; UBnkXSgn => XX15+2 x sign
 830+ D5EC 3A 0E C0    >               ld       a,(UBnKxsgn)
 830+ D5EF 32 7B C0    >               ld       (UbnkXPointSign),a
 831+ D5F2 ED 4B 7F C0          ld          bc,(UBnkXX12xLo)                   ; c = lo, b = sign   XX12XLoSign
 832+ D5F6 A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 833+ D5F7 FA 0D D6             jp          m,NodeNegativeX                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 834+ D5FA              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 835+ D5FA              NodeXPositiveX:
 836+ D5FA 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
 837+ D5FB 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
 838+ D5FD 2A 0C C0             ld          hl,(UBnKxlo)                       ; hl = XX1 UBNKxLo
 839+ D600 26 00                ld          h,0                                 ; but we don;t want the sign
 840+ D602 09                   add         hl,bc                               ; its a 16 bit add
 841+ D603 22 79 C0             ld          (UbnkXPoint),hl                    ; And written to XX15 0,1
 842+ D606 AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
 843+ D607 32 7B C0             ld          (UbnkXPointSign),a
 844+ D60A C3 29 D6             jp          FinishedThisNodeX
 845+ D60D              ; If we get here then _sign and vertv_ have different signs so do subtract
 846+ D60D              NodeNegativeX:
 847+ D60D              LL52X:                                                 ;
 848+ D60D 2A 0C C0             ld          hl,(UBnKxlo)                       ; Coord
 849+ D610 ED 4B 7F C0          ld          bc,(UBnkXX12xLo)                   ; XX12
 850+ D614 06 00                ld          b,0                                 ; XX12 lo byte only
 851+ D616 ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
 852+ D618 F2 26 D6             jp          p,SetAndMopX                       ; if result is positive skip to write back
 853+ D61B              NodeXNegSignChangeX:
 854+ D61B              ; If we get here the result is 2'c compliment so we reverse it and flip sign
 855+ D61B CD B3 A5             call        negate16hl                          ; Convert back to positive and flip sign
 856+ D61E 3A 7B C0             ld          a,(UbnkXPointSign)                 ; XX15+2
 857+ D621 EE 80                xor         $80                                 ; Flip bit 7
 858+ D623 32 7B C0             ld          (UbnkXPointSign),a                 ; XX15+2
 859+ D626              SetAndMopX:
 860+ D626 22 0C C0             ld          (UBnKxlo),hl                       ; XX15+0
 861+ D629              FinishedThisNodeX:
 862+ D629
 863+ D629              LL53:
 864+ D629
 865+ D629                      ldCopyByte  UBnKysgn,UbnkYPointSign           ; UBnkXSgn => XX15+2 x sign
 865+ D629 3A 11 C0    >               ld       a,(UBnKysgn)
 865+ D62C 32 7E C0    >               ld       (UbnkYPointSign),a
 866+ D62F ED 4B 81 C0          ld          bc,(UBnkXX12yLo)                   ; c = lo, b = sign   XX12XLoSign
 867+ D633 A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 868+ D634 FA 4A D6             jp          m,NodeNegativeY                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 869+ D637              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 870+ D637              NodeXPositiveY:
 871+ D637 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
 872+ D638 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
 873+ D63A 2A 0F C0             ld          hl,(UBnKylo)                       ; hl = XX1 UBNKxLo
 874+ D63D 26 00                ld          h,0                                 ; but we don;t want the sign
 875+ D63F 09                   add         hl,bc                               ; its a 16 bit add
 876+ D640 22 7C C0             ld          (UbnkYPoint),hl                    ; And written to XX15 0,1
 877+ D643 AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
 878+ D644 32 7B C0             ld          (UbnkXPointSign),a
 879+ D647 C3 66 D6             jp          FinishedThisNodeY
 880+ D64A              ; If we get here then _sign and vertv_ have different signs so do subtract
 881+ D64A              NodeNegativeY:
 882+ D64A              LL52Y:                                                 ;
 883+ D64A 2A 0F C0             ld          hl,(UBnKylo)                       ; Coord
 884+ D64D ED 4B 81 C0          ld          bc,(UBnkXX12yLo)                   ; XX12
 885+ D651 06 00                ld          b,0                                 ; XX12 lo byte only
 886+ D653 ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
 887+ D655 F2 63 D6             jp          p,SetAndMopY                       ; if result is positive skip to write back
 888+ D658              NodeXNegSignChangeY:
 889+ D658              ; If we get here the result is 2'c compliment so we reverse it and flip sign
 890+ D658 CD B3 A5             call        negate16hl                          ; Convert back to positive and flip sign
 891+ D65B 3A 7E C0             ld          a,(UbnkYPointSign)                 ; XX15+2
 892+ D65E EE 80                xor         $80                                 ; Flip bit 7
 893+ D660 32 7E C0             ld          (UbnkYPointSign),a                 ; XX15+2
 894+ D663              SetAndMopY:
 895+ D663 22 0F C0             ld          (UBnKylo),hl                       ; XX15+0
 896+ D666              FinishedThisNodeY:
 897+ D666
 898+ D666
 899+ D666              TransposeZ:
 900+ D666              LL55:                                                   ; Both y signs arrive here, Onto z                                          ;;;
 901+ D666 3A 84 C0             ld          a,(UBnkXX12zSign)                   ; XX12+5    \ rotated znode hi                                              ;;;
 902+ D669                      JumpOnBitSet a,7,NegativeNodeZ                    ; LL56 -ve Z node                                                           ;;;
 902+ D669 CB 7F       >                        bit 	7,a
 902+ D66B C2 7F D6    >                        jp      nz,NegativeNodeZ
 903+ D66E 3A 83 C0             ld          a,(UBnkXX12zLo)                     ; XX12+4 \ rotated znode lo                                                 ;;;
 904+ D671 2A 12 C0             ld          hl,(UBnKzlo)                        ; INWK+6    \ zorg lo                                                       ;;;
 905+ D674 ED 31                add         hl,a                                ; hl = INWKZ + XX12z                                                        ;;;
 906+ D676 7D                   ld          a,l
 907+ D677 32 D2 92             ld          (varT),a                            ;                                                                           ;;;
 908+ D67A 7C                   ld          a,h
 909+ D67B 32 B3 92             ld          (varU),a                            ; now z = hl or U(hi).T(lo)                                                 ;;;
 910+ D67E C9                   ret                                             ; LL57  \ Node additions done, z = U.T                                      ;;;
 911+ D67F              ; Doing additions and scalings for each visible node around here                                                                    ;;;
 912+ D67F              NegativeNodeZ:
 913+ D67F              LL56:                                                   ; Enter XX12+5 -ve Z node case  from above                                  ;;;
 914+ D67F 2A 12 C0             ld          hl,(UBnKzlo)                        ; INWK+6 \ z org lo                                                         ;;;
 915+ D682 ED 4B 83 C0          ld          bc,(UBnkXX12zLo)                    ; XX12+4    \ rotated z node lo                                                 ......................................................
 916+ D686 06 00                ld          b,0                                 ; upper byte will be garbage
 917+ D688                      ClearCarryFlag
 917+ D688 B7          >                    or a
 918+ D689 ED 42                sbc         hl,bc                               ; 6502 used carry flag compliment
 919+ D68B 7D                   ld          a,l
 920+ D68C 32 D2 92             ld          (varT),a                            ; t = result low
 921+ D68F 7C                   ld          a,h
 922+ D690 32 B3 92             ld          (varU),a                            ; u = result high
 923+ D693 E2 A0 D6             jp          po,MakeNodeClose                    ; no overflow to parity would be clear
 924+ D696              LL56Overflow:
 925+ D696 FE 00                cp          0                                   ; is varU 0?
 926+ D698 20 16                jr          nz,NodeAdditionsDone                ; Enter Node additions done, UT=z
 927+ D69A 3A D2 92             ld          a,(varT)                            ; T \ restore z lo
 928+ D69D                      ReturnIfAGTENusng 4                              ; >= 4 ? zlo big enough, Enter Node additions done.
 928+ D69D FE 04       >                    cp    4
 928+ D69F D0          >                    ret	 nc
 929+ D6A0              MakeNodeClose:
 930+ D6A0              LL140:                                                  ; else make node close
 931+ D6A0 AF                   xor         a                                   ; hi This needs tuning to use a 16 bit variable
 932+ D6A1 32 B3 92             ld          (varU),a                            ; U
 933+ D6A4 3E 04                ld          a,4                                 ; lo
 934+ D6A6 32 D2 92             ld          (varT),a                            ; T
 935+ D6A9 C9                   ret
 936+ D6AA              ;--LL49-------------------------------------------------------------------------------------------------------------------------
 937+ D6AA              ProcessVisibleNode:
 938+ D6AA              RotateNode:                                                                                                                         ;;;
 939+ D6AA CD B4 D0             call        XX12EquXX15DotProductXX16                                                                                       ;;;           call      XX12=XX15.XX16
 940+ D6AD              LL52LL53LL54LL55
 941+ D6AD              TransposeNode:
 942+ D6AD CD EC D5             call        TransposeXX12NodeToXX15
 943+ D6B0
 944+ D6B0              ; ......................................................                                                         ;;;
 945+ D6B0              NodeAdditionsDone:
 946+ D6B0              Scale16BitTo8Bit:
 947+ D6B0              LL57:                                                   ; Enter Node additions done, z=T.U set up from LL55
 948+ D6B0 3A B3 92             ld          a,(varU)                            ; U \ z hi
 949+ D6B3 21 7A C0             ld          hl,UbnkXPointHi
 950+ D6B6 B6                   or          (hl)                                ; XX15+1    \ x hi
 951+ D6B7 21 7D C0             ld          hl,UbnkYPointHi
 952+ D6BA B6                   or          (hl)                                ; XX15+4    \ y hi
 953+ D6BB              AreXYZHiAllZero:
 954+ D6BB 28 2B                jr          z,NodeScalingDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 955+ D6BD              DivideXYZBy2:
 956+ D6BD                      ShiftMem16Right1    UbnkXPoint                  ; XX15[0,1]
 956+ D6BD 2A 79 C0    >                    ld    hl,(UbnkXPoint)
 956+ D6C0 CB 3C       >                    srl   h
 956+ D6C2 CB 1D       >                    rr    l
 956+ D6C4 22 79 C0    >                    ld    (UbnkXPoint),hl
 957+ D6C7                      ShiftMem16Right1    UbnkYPoint                  ; XX15[3,4]
 957+ D6C7 2A 7C C0    >                    ld    hl,(UbnkYPoint)
 957+ D6CA CB 3C       >                    srl   h
 957+ D6CC CB 1D       >                    rr    l
 957+ D6CE 22 7C C0    >                    ld    (UbnkYPoint),hl
 958+ D6D1 3A B3 92             ld          a,(varU)                            ; U \ z hi
 959+ D6D4 67                   ld          h,a
 960+ D6D5 3A D2 92             ld          a,(varT)                            ; T \ z lo
 961+ D6D8 6F                   ld          l,a
 962+ D6D9                      ShiftHLRight1
 962+ D6D9 CB 3C       >			   srl h
 962+ D6DB CB 1D       >			   rr  l
 963+ D6DD 7C                   ld          a,h
 964+ D6DE 32 B3 92             ld          (varU),a
 965+ D6E1 7D                   ld          a,l
 966+ D6E2 32 D2 92             ld          (varT),a                            ; T \ z lo
 967+ D6E5 C3 B0 D6             jp          Scale16BitTo8Bit                    ; loop U
 968+ D6E8              NodeScalingDone:
 969+ D6E8              LL60:                                                   ; hi U rolled to 0, exited loop above.
 970+ D6E8              ProjectNodeToScreen:
 971+ D6E8                      ldCopyByte  varT,varQ                           ; T =>  Q   \ zdist lo
 971+ D6E8 3A D2 92    >               ld       a,(varT)
 971+ D6EB 32 B4 92    >               ld       (varQ),a
 972+ D6EE 3A 79 C0             ld          a,(UbnkXPointLo)                    ; XX15  \ rolled x lo
 973+ D6F1 21 B4 92             ld          hl,varQ
 974+ D6F4 BE                   cp          (hl)                                ; Q
 975+ D6F5                      JumpIfALTusng DoSmallAngle                      ; LL69 if xdist < zdist hop over jmp to small x angle
 975+ D6F5 DA FE D6    >                        jp		c,DoSmallAngle
 976+ D6F8 CD E4 A9             call        RequAdivQ                           ; LL61  \ visit up  R = A/Q = x/z
 977+ D6FB C3 06 D7             jp          SkipSmallAngle                      ; LL65  \ hop over small xangle
 978+ D6FE              DoSmallAngle:                                           ; small x angle
 979+ D6FE              LL69:
 980+ D6FE              ; TODO check if we need to retain BC as this trashes it
 981+ D6FE              ;Input: BC = Dividend, DE = Divisor, HL = 0
 982+ D6FE              ;Output: BC = Quotient, HL = Remainder
 983+ D6FE 47                   ld      b,a
 984+ D6FF CD FC A3             call    DIV16UNDOC
 985+ D702 79                   ld      a,c
 986+ D703 32 B5 92             ld      (varR),a
 987+ D706               ;;;       call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
 988+ D706              SkipSmallAngle:
 989+ D706              ScaleX:
 990+ D706              LL65:                                                   ; both continue for scaling based on z
 991+ D706 3A 7B C0             ld          a,(UbnkXPointSign)                  ; XX15+2 \ sign of X dist
 992+ D709                      JumpOnBitSet a,7,NegativeXPoint                 ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 992+ D709 CB 7F       >                        bit 	7,a
 992+ D70B C2 1E D7    >                        jp      nz,NegativeXPoint
 993+ D70E              ; ......................................................
 994+ D70E              PositiveXPoint:
 995+ D70E 3A B5 92             ld          a,(varR)
 996+ D711 6F                   ld          l,a
 997+ D712 3A B3 92             ld          a,(varU)
 998+ D715 67                   ld          h,a
 999+ D716 3E 80                ld          a,ScreenCenterX
1000+ D718 ED 31                add         hl,a
1001+ D71A EB                   ex          de,hl
1002+ D71B C3 2E D7             jp          StoreXPoint
1003+ D71E              NegativeXPoint:
1004+ D71E              LL62:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1005+ D71E 3A B5 92             ld          a,(varR)
1006+ D721 6F                   ld          l,a
1007+ D722 3A B3 92             ld          a,(varU)
1008+ D725 67                   ld          h,a
1009+ D726 0E 80                ld          c,ScreenCenterX
1010+ D728 06 00                ld          b,0
1011+ D72A                      ClearCarryFlag
1011+ D72A B7          >                    or a
1012+ D72B ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1013+ D72D EB                   ex          de,hl
1014+ D72E              StoreXPoint:                                            ; also from LL62, XX3 node heap has xscreen node so far.
1015+ D72E FD 73 00             ld          (iy+0),e                            ; Update X Point
1016+ D731 FD 72 01             ld          (iy+1),d                            ; Update X Point
1017+ D734 FD 23                inc         iy
1018+ D736 FD 23                inc         iy
1019+ D738              ; ......................................................
1020+ D738              LL66:
1021+ D738              ProcessYPoint:
1022+ D738 AF                   xor         a                                   ; y hi = 0
1023+ D739 32 B3 92             ld          (varU),a                            ; U
1024+ D73C                      ldCopyByte  varT,varQ                           ; Q \ zdist lo
1024+ D73C 3A D2 92    >               ld       a,(varT)
1024+ D73F 32 B4 92    >               ld       (varQ),a
1025+ D742 3A 7C C0             ld          a,(UbnkYPointLo)                    ; XX15+3 \ rolled y low
1026+ D745 21 B4 92             ld          hl,varQ
1027+ D748 BE                   cp          (hl)                                ; Q
1028+ D749                      JumpIfALTusng SmallYHop                         ; if ydist < zdist hop to small yangle
1028+ D749 DA 52 D7    >                        jp		c,SmallYHop
1029+ D74C              SmallYPoint:
1030+ D74C CD E4 A9             call        RequAdivQ                           ; LL61  \ else visit up R = A/Q = y/z
1031+ D74F C3 55 D7             jp          SkipYScale                          ; LL68 hop over small y yangle
1032+ D752              SmallYHop:
1033+ D752              LL67:                                                   ; Arrive from LL66 above if XX15+3 < Q \ small yangle
1034+ D752 CD C1 A9             call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
1035+ D755              SkipYScale:
1036+ D755              LL68:                                                   ; both carry on, also arrive from LL66, yscaled based on z
1037+ D755 3A 7E C0             ld          a,(UbnkYPointSign)                  ; XX15+5 \ sign of X dist
1038+ D758 CB 7F                bit         7,a
1039+ D75A C2 6D D7             jp          nz,NegativeYPoint                   ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1040+ D75D              PositiveYPoint:
1041+ D75D 3A B5 92             ld          a,(varR)
1042+ D760 6F                   ld          l,a
1043+ D761 3A B3 92             ld          a,(varU)
1044+ D764 67                   ld          h,a
1045+ D765 3E 60                ld          a,ScreenHeightHalf
1046+ D767 ED 31                add         hl,a
1047+ D769 EB                   ex          de,hl
1048+ D76A C3 7D D7             jp          LL50
1049+ D76D              NegativeYPoint:
1050+ D76D              LL70:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1051+ D76D 3A B5 92             ld          a,(varR)
1052+ D770 6F                   ld          l,a
1053+ D771 3A B3 92             ld          a,(varU)
1054+ D774 67                   ld          h,a
1055+ D775 0E 60                ld          c,ScreenHeightHalf
1056+ D777 06 00                ld          b,0
1057+ D779                      ClearCarryFlag
1057+ D779 B7          >                    or a
1058+ D77A ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1059+ D77C EB                   ex          de,hl
1060+ D77D              LL50:                                                   ; also from LL62, XX3 node heap has xscreen node so far.
1061+ D77D FD 73 00             ld          (iy+0),e                            ; Update X Point
1062+ D780 FD 72 01             ld          (iy+1),d                            ; Update X Point
1063+ D783 FD 23                inc         iy
1064+ D785 FD 23                inc         iy
1065+ D787 C9                   ret
1066+ D788              ;--------------------------------------------------------------------------------------------------------
1067+ D788              ;;;     Byte 0 = X magnitide with origin at middle of ship
1068+ D788              ;;;     Byte 1 = Y magnitide with origin at middle of ship
1069+ D788              ;;;     Byte 2 = Z magnitide with origin at middle of ship
1070+ D788              ;;;     Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
1071+ D788              CopyNodeToXX15:
1072+ D788                      ldCopyByte  hl, UBnkXScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1072+ D788 7E          >               ld       a,(hl)
1072+ D789 32 79 C0    >               ld       (UBnkXScaled),a
1073+ D78C 23                   inc         hl
1074+ D78D                      ldCopyByte  hl, UBnkYScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1074+ D78D 7E          >               ld       a,(hl)
1074+ D78E 32 7B C0    >               ld       (UBnkYScaled),a
1075+ D791 23                   inc         hl
1076+ D792                      ldCopyByte  hl, UBnkZScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1076+ D792 7E          >               ld       a,(hl)
1076+ D793 32 7D C0    >               ld       (UBnkZScaled),a
1077+ D796 23                   inc         hl
1078+ D797              PopulateXX15SignBits:
1079+ D797              ; Simplfied for debugging, needs optimising back to original DEBUG TODO
1080+ D797 7E                   ld          a,(hl)
1081+ D798 4F                   ld          c,a                                 ; copy sign and visibility to c
1082+ D799 47                   ld          b,a
1083+ D79A E6 80                and         $80                                 ; keep high 3 bits
1084+ D79C 32 7A C0             ld          (UBnkXScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1085+ D79F 78                   ld          a,b
1086+ D7A0 E6 40                and         $40
1087+ D7A2 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1088+ D7A4 32 7C C0             ld          (UBnkYScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1089+ D7A7 78                   ld          a,b
1090+ D7A8 E6 20                and         $20
1091+ D7AA CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1092+ D7AC CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1093+ D7AE 32 7E C0             ld          (UBnkZScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1094+ D7B1 79                   ld          a,c                                 ; returns a with visibility sign byte
1095+ D7B2 E6 1F                and         $1F                                 ; visibility is held in bits 0 to 4                                                              ;;;     A = XX15 Signs AND &1F (to get lower 5 visibility)
1096+ D7B4 32 D2 92             ld          (varT),a                            ; and store in varT as its needed later
1097+ D7B7 C9                   ret
1098+ D7B8
1099+ D7B8              ;;;     Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
1100+ D7B8              ;;;     Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
1101+ D7B8              ;..............................................................................................................................
1102+ D7B8              ProcessANode:                                           ; Start loop on Nodes for visibility, each node has 4 faces associated with ;;; For each node (point) in model                  ::LL48
1103+ D7B8              LL48GetScale:
1104+ D7B8 3A 49 92             ld          a,(LastNormalVisible)               ; get Normal visible range into e before we copy node
1105+ D7BB 5F                   ld          e,a
1106+ D7BC CD 88 D7             call        CopyNodeToXX15
1107+ D7BF              LL48GetVertices:
1108+ D7BF              LL48GetVertSignAndVisDist:
1109+ D7BF                      JumpIfALTNusng e,NodeIsNotVisible               ; if XX4 > Visibility distance then vertext too far away , next vertex.                                             ;;;        goto LL50 (end of loop)
1109+ D7BF BB          >                        cp      e
1109+ D7C0 DA 01 D8    >                        jp		c, NodeIsNotVisible
1110+ D7C3              CheckFace1:                                                                                                                         ;;;     if all FaceVisile[point face any of idx1,2,3 or 4] = 0
1111+ D7C3                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;     get point face idx from byte 4 & 5 of normal
1111+ D7C3 23          >                    inc         hl                                  ; vertex byte#1
1111+ D7C4 7E          >                    ld          a,(hl)                              ;
1111+ D7C5 32 54 92    >                    ld          (varP),a                     ; SunXX15+2 = (V),Y
1112+ D7C8 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1113+ D7C9 E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1114+ D7CB E5                   push        hl                                  ; we need to save HL                                                        ;;;
1115+ D7CC                      ldHLIdxAToA UbnkFaceVisArray                    ; visibility at face 1                                                Byte 4;;;
1115+ D7CC 21 A6 C0    >                    ld          hl,UbnkFaceVisArray
1115+ D7CF ED 31       >                    add         hl,a
1115+ D7D1 7E          >                    ld          a,(hl)
1116+ D7D2 E1                   pop         hl                                  ;                                                                           ;;;
1117+ D7D3                      IfANotZeroGoto NodeIsVisible                    ; is face 1 visible                                                         ;;;
1117+ D7D3 FE 00       >				cp	0
1117+ D7D5 C2 07 D8    >				jp	nz,NodeIsVisible
1118+ D7D8              CheckFace2:                                                                                                                         ;;;
1119+ D7D8 7A                   ld          a,d                                                                                                             ;;;
1120+ D7D9 ED 23                swapnib                                                                                                                     ;;;
1121+ D7DB E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1122+ D7DD                      IfANotZeroGoto NodeIsVisible                    ; is face 1 visible                                                         ;;;
1122+ D7DD FE 00       >				cp	0
1122+ D7DF C2 07 D8    >				jp	nz,NodeIsVisible
1123+ D7E2              CheckFace3:                                                                                                                         ;;;
1124+ D7E2                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;
1124+ D7E2 23          >                    inc         hl                                  ; vertex byte#1
1124+ D7E3 7E          >                    ld          a,(hl)                              ;
1124+ D7E4 32 54 92    >                    ld          (varP),a                     ; SunXX15+2 = (V),Y
1125+ D7E7 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1126+ D7E8 E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1127+ D7EA E5                   push        hl                                  ; we need to save HL                                                        ;;;
1128+ D7EB                      ldHLIdxAToA UbnkFaceVisArray                  ; visibility at face 1                                                Byte 5;;;
1128+ D7EB 21 A6 C0    >                    ld          hl,UbnkFaceVisArray
1128+ D7EE ED 31       >                    add         hl,a
1128+ D7F0 7E          >                    ld          a,(hl)
1129+ D7F1 E1                   pop         hl                                  ;                                                                           ;;;
1130+ D7F2                      IfANotZeroGoto NodeIsVisible                    ; is face 1 visible                                                         ;;;
1130+ D7F2 FE 00       >				cp	0
1130+ D7F4 C2 07 D8    >				jp	nz,NodeIsVisible
1131+ D7F7              CheckFace4:                                                                                                                         ;;;
1132+ D7F7 7A                   ld          a,d                                                                                                             ;;;
1133+ D7F8 ED 23                swapnib                                                                                                                     ;;;
1134+ D7FA E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1135+ D7FC                      IfANotZeroGoto NodeIsVisible                    ; is face 1 visible                                                         ;;;
1135+ D7FC FE 00       >				cp	0
1135+ D7FE C2 07 D8    >				jp	nz,NodeIsVisible
1136+ D801              NodeIsNotVisible:                                                                                                                   ;;;
1137+ D801 01 04 00             ld          bc,4
1138+ D804 FD 09                add         iy,bc                               ; if not visible then move to next element in array anyway                  ;;;
1139+ D806                      ;;; Should we be loading FFFFFFFF into 4 bytes or just ignore?
1140+ D806 C9                   ret                                                                                                      ;;;        goto LL50 (end of loop)
1141+ D807              NodeIsVisible:
1142+ D807              LL49:
1143+ D807 CD AA D6             call        ProcessVisibleNode                  ; Process node to determine if it goes on heap
1144+ D80A C9                   ret
1145+ D80B
1146+ D80B
1147+ D80B              ProjectNodeToEye:
1148+ D80B ED 4B 7D C0  	ld			bc,(UBnkZScaled)					; BC = Z Cordinate. By here it MUST be positive as its clamped to 4 min
1149+ D80F 79           	ld			a,c                                 ;  so no need for a negative check
1150+ D810 32 B4 92     	ld			(varQ),a		                    ; VarQ = z
1151+ D813 3A 79 C0         ld          a,(UBnkXScaled)                     ; XX15	\ rolled x lo which is signed
1152+ D816 CD E5 A3     	call		DIV16Amul256dCUNDOC					; result in BC which is 16 bit TODO Move to 16 bit below not just C reg
1153+ D819 3A 7A C0         ld          a,(UBnkXScaledSign)                 ; XX15+2 \ sign of X dist
1154+ D81C                  JumpOnBitSet a,7,EyeNegativeXPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1154+ D81C CB 7F       >                        bit 	7,a
1154+ D81E C2 29 D8    >                        jp      nz,EyeNegativeXPoint
1155+ D821              EyePositiveXPoint:									; x was positive result
1156+ D821 2E 80            ld          l,ScreenCenterX						;
1157+ D823 26 00            ld          h,0
1158+ D825 09               add         hl,bc								; hl = Screen Centre + X
1159+ D826 C3 30 D8         jp          EyeStoreXPoint
1160+ D829              EyeNegativeXPoint:                                 ; x < 0 so need to subtract from the screen centre position
1161+ D829 2E 80            ld          l,ScreenCenterX
1162+ D82B 26 00            ld          h,0
1163+ D82D                  ClearCarryFlag
1163+ D82D B7          >                    or a
1164+ D82E ED 42            sbc         hl,bc                               ; hl = Screen Centre - X
1165+ D830              EyeStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1166+ D830 EB               ex          de,hl
1167+ D831 FD 73 00         ld          (iy+0),e                            ; Update X Point TODO this bit is 16 bit aware just need to fix above bit
1168+ D834 FD 72 01         ld          (iy+1),d                            ; Update X Point
1169+ D837              EyeProcessYPoint:
1170+ D837 ED 4B 7D C0  	ld			bc,(UBnkZScaled)					; Now process Y co-ordinate
1171+ D83B 79           	ld			a,c
1172+ D83C 32 B4 92     	ld			(varQ),a
1173+ D83F 3A 7B C0         ld          a,(UBnkYScaled)                     ; XX15	\ rolled x lo
1174+ D842 CD E5 A3     	call		DIV16Amul256dCUNDOC	                ; a = Y scaled * 256 / zscaled
1175+ D845 3A 7C C0         ld          a,(UBnkYScaledSign)                 ; XX15+2 \ sign of X dist
1176+ D848                  JumpOnBitSet a,7,EyeNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
1176+ D848 CB 7F       >                        bit 	7,a
1176+ D84A C2 55 D8    >                        jp      nz,EyeNegativeYPoint
1177+ D84D              EyePositiveYPoint:									; Y is positive so above the centre line
1178+ D84D 2E 60            ld          l,ScreenCenterY
1179+ D84F                  ClearCarryFlag
1179+ D84F B7          >                    or a
1180+ D850 ED 42            sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
1181+ D852 C3 5A D8         jp          EyeStoreYPoint
1182+ D855              EyeNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
1183+ D855 2E 60            ld          l,ScreenCenterY
1184+ D857 26 00            ld          h,0
1185+ D859 09               add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
1186+ D85A              EyeStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1187+ D85A EB               ex          de,hl
1188+ D85B FD 73 02         ld          (iy+2),e                            ; Update Y Point
1189+ D85E FD 72 03         ld          (iy+3),d                            ; Update Y Point
1190+ D861 C9               ret
1191+ D862
1192+ D862
1193+ D862
1194+ D862              ; Pitch and roll are 2 phases
1195+ D862              ; 1 - we apply our pitch and roll to the ship position
1196+ D862              ;       x -> x + alpha * (y - alpha * x)
1197+ D862              ;       y -> y - alpha * x - beta * z
1198+ D862              ;       z -> z + beta * (y - alpha * x - beta * z)
1199+ D862              ; which can be simplified as:
1200+ D862              ;       1. K2 = y - alpha * x
1201+ D862              ;       2. z = z + beta * K2
1202+ D862              ;       3. y = K2 - beta * z
1203+ D862              ;       4. x = x + alpha * y
1204+ D862              ; 2 - we apply our patch and roll to the ship orientation
1205+ D862              ;      Roll calculations:
1206+ D862              ;
1207+ D862              ;        nosev_y = nosev_y - alpha * nosev_x_hi
1208+ D862              ;        nosev_x = nosev_x + alpha * nosev_y_hi
1209+ D862              ;      Pitch calculations:
1210+ D862              ;
1211+ D862              ;        nosev_y = nosev_y - beta * nosev_z_hi
1212+ D862              ;        nosev_z = nosev_z + beta * nosev_y_hi
1213+ D862
1214+ D862
1215+ D862              ; ---------------------------------------------------------------------------------------------------------------------------------
1216+ D862                          INCLUDE "./Universe/ApplyMyRollAndPitch.asm"
# file opened: ././Universe/ApplyMyRollAndPitch.asm
   1++D862
   2++D862              ; Full version
   3++D862              ; 1. K2 = y - alpha * x
   4++D862              ; 2. z = z + beta * K2
   5++D862              ; 3. y = K2 - beta * z
   6++D862              ; 4. x = x + alpha * y
   7++D862
   8++D862
   9++D862              ApplyMyRollToNosev:     ApplyMyRollToVector ALPHA, UBnkrotmatNosevX, UBnkrotmatNosevY
   9++D862             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
   9++D862 3A 70 92    >               ld       a,(ALPHA)
   9++D865 32 B4 92    >               ld       (varQ),a
   9++D868             >                        ldCopy2Byte UBnkrotmatNosevY, varR           ; RS =  nosev_y
   9++D868 2A 23 C0    >               ld       hl,(UBnkrotmatNosevY)
   9++D86B 22 B5 92    >               ld       (varR),hl
   9++D86E             >                        ldCopyByte  UBnkrotmatNosevX, varP           ; set P to nosevX lo (may be redundant)
   9++D86E 3A 21 C0    >               ld       a,(UBnkrotmatNosevX)
   9++D871 32 54 92    >               ld       (varP),a
   9++D874 3A 22 C0    >                        ld a,(UBnkrotmatNosevX+1)                    ; Set A = -nosev_x_hi
   9++D877 EE 80       >                        xor $80                             ;
   9++D879 CD 20 A2    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
   9++D87C ED 53 23 C0 >                        ld  (UBnkrotmatNosevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
   9++D880             >                        ldCopy2Byte UBnkrotmatNosevX, varR           ; Set (S R) = nosev_x
   9++D880 2A 21 C0    >               ld       hl,(UBnkrotmatNosevX)
   9++D883 22 B5 92    >               ld       (varR),hl
   9++D886 3A 24 C0    >                        ld  a,(UBnkrotmatNosevY+1)                   ;  Set A = nosev_y_hi
   9++D889 CD 20 A2    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
   9++D88C ED 53 21 C0 >                        ld  (UBnkrotmatNosevX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  10++D890 C9                                   ret
  11++D891              ApplyMyRollToSidev:     ApplyMyRollToVector ALPHA, UBnkrotmatSidevX, UBnkrotmatSidevY
  11++D891             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  11++D891 3A 70 92    >               ld       a,(ALPHA)
  11++D894 32 B4 92    >               ld       (varQ),a
  11++D897             >                        ldCopy2Byte UBnkrotmatSidevY, varR           ; RS =  nosev_y
  11++D897 2A 17 C0    >               ld       hl,(UBnkrotmatSidevY)
  11++D89A 22 B5 92    >               ld       (varR),hl
  11++D89D             >                        ldCopyByte  UBnkrotmatSidevX, varP           ; set P to nosevX lo (may be redundant)
  11++D89D 3A 15 C0    >               ld       a,(UBnkrotmatSidevX)
  11++D8A0 32 54 92    >               ld       (varP),a
  11++D8A3 3A 16 C0    >                        ld a,(UBnkrotmatSidevX+1)                    ; Set A = -nosev_x_hi
  11++D8A6 EE 80       >                        xor $80                             ;
  11++D8A8 CD 20 A2    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  11++D8AB ED 53 17 C0 >                        ld  (UBnkrotmatSidevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  11++D8AF             >                        ldCopy2Byte UBnkrotmatSidevX, varR           ; Set (S R) = nosev_x
  11++D8AF 2A 15 C0    >               ld       hl,(UBnkrotmatSidevX)
  11++D8B2 22 B5 92    >               ld       (varR),hl
  11++D8B5 3A 18 C0    >                        ld  a,(UBnkrotmatSidevY+1)                   ;  Set A = nosev_y_hi
  11++D8B8 CD 20 A2    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  11++D8BB ED 53 15 C0 >                        ld  (UBnkrotmatSidevX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  12++D8BF C9                                   ret
  13++D8C0              ApplyMyRollToRoofv:     ApplyMyRollToVector ALPHA, UBnkrotmatRoofvX, UBnkrotmatRoofvY
  13++D8C0             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  13++D8C0 3A 70 92    >               ld       a,(ALPHA)
  13++D8C3 32 B4 92    >               ld       (varQ),a
  13++D8C6             >                        ldCopy2Byte UBnkrotmatRoofvY, varR           ; RS =  nosev_y
  13++D8C6 2A 1D C0    >               ld       hl,(UBnkrotmatRoofvY)
  13++D8C9 22 B5 92    >               ld       (varR),hl
  13++D8CC             >                        ldCopyByte  UBnkrotmatRoofvX, varP           ; set P to nosevX lo (may be redundant)
  13++D8CC 3A 1B C0    >               ld       a,(UBnkrotmatRoofvX)
  13++D8CF 32 54 92    >               ld       (varP),a
  13++D8D2 3A 1C C0    >                        ld a,(UBnkrotmatRoofvX+1)                    ; Set A = -nosev_x_hi
  13++D8D5 EE 80       >                        xor $80                             ;
  13++D8D7 CD 20 A2    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  13++D8DA ED 53 1D C0 >                        ld  (UBnkrotmatRoofvY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  13++D8DE             >                        ldCopy2Byte UBnkrotmatRoofvX, varR           ; Set (S R) = nosev_x
  13++D8DE 2A 1B C0    >               ld       hl,(UBnkrotmatRoofvX)
  13++D8E1 22 B5 92    >               ld       (varR),hl
  13++D8E4 3A 1E C0    >                        ld  a,(UBnkrotmatRoofvY+1)                   ;  Set A = nosev_y_hi
  13++D8E7 CD 20 A2    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  13++D8EA ED 53 1B C0 >                        ld  (UBnkrotmatRoofvX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  14++D8EE C9                                   ret
  15++D8EF
  16++D8EF              ApplyMyPitchToNosev:    ApplyMyRollToVector BETA, UBnkrotmatNosevZ, UBnkrotmatNosevY
  16++D8EF             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  16++D8EF 3A 5F 92    >               ld       a,(BETA)
  16++D8F2 32 B4 92    >               ld       (varQ),a
  16++D8F5             >                        ldCopy2Byte UBnkrotmatNosevY, varR           ; RS =  nosev_y
  16++D8F5 2A 23 C0    >               ld       hl,(UBnkrotmatNosevY)
  16++D8F8 22 B5 92    >               ld       (varR),hl
  16++D8FB             >                        ldCopyByte  UBnkrotmatNosevZ, varP           ; set P to nosevX lo (may be redundant)
  16++D8FB 3A 25 C0    >               ld       a,(UBnkrotmatNosevZ)
  16++D8FE 32 54 92    >               ld       (varP),a
  16++D901 3A 26 C0    >                        ld a,(UBnkrotmatNosevZ+1)                    ; Set A = -nosev_x_hi
  16++D904 EE 80       >                        xor $80                             ;
  16++D906 CD 20 A2    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  16++D909 ED 53 23 C0 >                        ld  (UBnkrotmatNosevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  16++D90D             >                        ldCopy2Byte UBnkrotmatNosevZ, varR           ; Set (S R) = nosev_x
  16++D90D 2A 25 C0    >               ld       hl,(UBnkrotmatNosevZ)
  16++D910 22 B5 92    >               ld       (varR),hl
  16++D913 3A 24 C0    >                        ld  a,(UBnkrotmatNosevY+1)                   ;  Set A = nosev_y_hi
  16++D916 CD 20 A2    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  16++D919 ED 53 25 C0 >                        ld  (UBnkrotmatNosevZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  17++D91D C9                                   ret
  18++D91E              ApplyMyPitchToSidev:    ApplyMyRollToVector BETA, UBnkrotmatSidevZ, UBnkrotmatSidevY
  18++D91E             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  18++D91E 3A 5F 92    >               ld       a,(BETA)
  18++D921 32 B4 92    >               ld       (varQ),a
  18++D924             >                        ldCopy2Byte UBnkrotmatSidevY, varR           ; RS =  nosev_y
  18++D924 2A 17 C0    >               ld       hl,(UBnkrotmatSidevY)
  18++D927 22 B5 92    >               ld       (varR),hl
  18++D92A             >                        ldCopyByte  UBnkrotmatSidevZ, varP           ; set P to nosevX lo (may be redundant)
  18++D92A 3A 19 C0    >               ld       a,(UBnkrotmatSidevZ)
  18++D92D 32 54 92    >               ld       (varP),a
  18++D930 3A 1A C0    >                        ld a,(UBnkrotmatSidevZ+1)                    ; Set A = -nosev_x_hi
  18++D933 EE 80       >                        xor $80                             ;
  18++D935 CD 20 A2    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  18++D938 ED 53 17 C0 >                        ld  (UBnkrotmatSidevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  18++D93C             >                        ldCopy2Byte UBnkrotmatSidevZ, varR           ; Set (S R) = nosev_x
  18++D93C 2A 19 C0    >               ld       hl,(UBnkrotmatSidevZ)
  18++D93F 22 B5 92    >               ld       (varR),hl
  18++D942 3A 18 C0    >                        ld  a,(UBnkrotmatSidevY+1)                   ;  Set A = nosev_y_hi
  18++D945 CD 20 A2    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  18++D948 ED 53 19 C0 >                        ld  (UBnkrotmatSidevZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  19++D94C C9                                   ret
  20++D94D              ApplyMyPitchToRoofv:    ApplyMyRollToVector BETA, UBnkrotmatRoofvZ, UBnkrotmatRoofvY
  20++D94D             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  20++D94D 3A 5F 92    >               ld       a,(BETA)
  20++D950 32 B4 92    >               ld       (varQ),a
  20++D953             >                        ldCopy2Byte UBnkrotmatRoofvY, varR           ; RS =  nosev_y
  20++D953 2A 1D C0    >               ld       hl,(UBnkrotmatRoofvY)
  20++D956 22 B5 92    >               ld       (varR),hl
  20++D959             >                        ldCopyByte  UBnkrotmatRoofvZ, varP           ; set P to nosevX lo (may be redundant)
  20++D959 3A 1F C0    >               ld       a,(UBnkrotmatRoofvZ)
  20++D95C 32 54 92    >               ld       (varP),a
  20++D95F 3A 20 C0    >                        ld a,(UBnkrotmatRoofvZ+1)                    ; Set A = -nosev_x_hi
  20++D962 EE 80       >                        xor $80                             ;
  20++D964 CD 20 A2    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  20++D967 ED 53 1D C0 >                        ld  (UBnkrotmatRoofvY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  20++D96B             >                        ldCopy2Byte UBnkrotmatRoofvZ, varR           ; Set (S R) = nosev_x
  20++D96B 2A 1F C0    >               ld       hl,(UBnkrotmatRoofvZ)
  20++D96E 22 B5 92    >               ld       (varR),hl
  20++D971 3A 1E C0    >                        ld  a,(UBnkrotmatRoofvY+1)                   ;  Set A = nosev_y_hi
  20++D974 CD 20 A2    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  20++D977 ED 53 1F C0 >                        ld  (UBnkrotmatRoofvZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  21++D97B C9                                   ret
  22++D97C
  23++D97C
  24++D97C              APPequPosPlusAPP:       MACRO    Position, PositionSign
  25++D97C ~                                    push    bc
  26++D97C ~                                    ld      c,a                         ; save original value of a into c
  27++D97C ~                                    ld      a,(PositionSign)
  28++D97C ~                                    ld      b,a
  29++D97C ~                                    ld      a,c
  30++D97C ~                                    xor     b                           ; a = a xor x postition sign
  31++D97C ~                                    jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  32++D97C ~            ; Signs are the same to we just add and take which ever sign
  33++D97C ~                                    ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  34++D97C ~                                    ld      hl,(Position)
  35++D97C ~                                    add     hl,de
  36++D97C ~                                    ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  37++D97C ~                                    ld      a,c                         ; and a = original sign as they were both the same
  38++D97C ~                                    pop     bc
  39++D97C ~                                    ret
  40++D97C ~            ; Signs are opposite so we subtract
  41++D97C ~            .MV50:                  ld      de,(varPp1)
  42++D97C ~                                    ld      hl,(Position)
  43++D97C ~                                    or      a
  44++D97C ~                                    sbc     hl,de
  45++D97C ~                                    jr      c,.MV51                     ; if the result was negative then negate result
  46++D97C ~                                    ld      a,c                         ; get back the original sign
  47++D97C ~                                    ld      (varPp1),hl                 ; and save result to P[2][1]
  48++D97C ~                                    xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  49++D97C ~                                    pop     bc
  50++D97C ~                                    ret
  51++D97C ~            .MV51:                  NegHL
  52++D97C ~                                    ld      (varPp1),hl
  53++D97C ~                                    ld      a,c                         ; the original sign will still be good
  54++D97C ~                                    pop     bc
  55++D97C ~                                    ret
  56++D97C                                      ENDM
  57++D97C
  58++D97C
  59++D97C              APPequXPosPlusAPP:     APPequPosPlusAPP UBnKxlo, UBnKxsgn
  59++D97C C5          >                        push    bc
  59++D97D 4F          >                        ld      c,a                         ; save original value of a into c
  59++D97E 3A 0E C0    >                        ld      a,(UBnKxsgn)
  59++D981 47          >                        ld      b,a
  59++D982 79          >                        ld      a,c
  59++D983 A8          >                        xor     b                           ; a = a xor x postition sign
  59++D984 FA 95 D9    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  59++D987             >; Signs are the same to we just add and take which ever sign
  59++D987 ED 5B 55 92 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  59++D98B 2A 0C C0    >                        ld      hl,(UBnKxlo)
  59++D98E 19          >                        add     hl,de
  59++D98F 22 55 92    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  59++D992 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  59++D993 C1          >                        pop     bc
  59++D994 C9          >                        ret
  59++D995             >; Signs are opposite so we subtract
  59++D995 ED 5B 55 92 >.MV50:                  ld      de,(varPp1)
  59++D999 2A 0C C0    >                        ld      hl,(UBnKxlo)
  59++D99C B7          >                        or      a
  59++D99D ED 52       >                        sbc     hl,de
  59++D99F 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  59++D9A1 79          >                        ld      a,c                         ; get back the original sign
  59++D9A2 22 55 92    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  59++D9A5 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  59++D9A7 C1          >                        pop     bc
  59++D9A8 C9          >                        ret
  59++D9A9             >.MV51:                  NegHL
  59++D9A9 AF          >                    xor a
  59++D9AA 95          >                    sub l
  59++D9AB 6F          >                    ld l,a
  59++D9AC 9F          >                    sbc a,a
  59++D9AD 94          >                    sub h
  59++D9AE 67          >                    ld h,a
  59++D9AF 22 55 92    >                        ld      (varPp1),hl
  59++D9B2 79          >                        ld      a,c                         ; the original sign will still be good
  59++D9B3 C1          >                        pop     bc
  59++D9B4 C9          >                        ret
  60++D9B5
  61++D9B5              APPequYPosPlusAPP:     APPequPosPlusAPP UBnKylo, UBnKysgn
  61++D9B5 C5          >                        push    bc
  61++D9B6 4F          >                        ld      c,a                         ; save original value of a into c
  61++D9B7 3A 11 C0    >                        ld      a,(UBnKysgn)
  61++D9BA 47          >                        ld      b,a
  61++D9BB 79          >                        ld      a,c
  61++D9BC A8          >                        xor     b                           ; a = a xor x postition sign
  61++D9BD FA CE D9    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  61++D9C0             >; Signs are the same to we just add and take which ever sign
  61++D9C0 ED 5B 55 92 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  61++D9C4 2A 0F C0    >                        ld      hl,(UBnKylo)
  61++D9C7 19          >                        add     hl,de
  61++D9C8 22 55 92    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  61++D9CB 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  61++D9CC C1          >                        pop     bc
  61++D9CD C9          >                        ret
  61++D9CE             >; Signs are opposite so we subtract
  61++D9CE ED 5B 55 92 >.MV50:                  ld      de,(varPp1)
  61++D9D2 2A 0F C0    >                        ld      hl,(UBnKylo)
  61++D9D5 B7          >                        or      a
  61++D9D6 ED 52       >                        sbc     hl,de
  61++D9D8 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  61++D9DA 79          >                        ld      a,c                         ; get back the original sign
  61++D9DB 22 55 92    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  61++D9DE EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  61++D9E0 C1          >                        pop     bc
  61++D9E1 C9          >                        ret
  61++D9E2             >.MV51:                  NegHL
  61++D9E2 AF          >                    xor a
  61++D9E3 95          >                    sub l
  61++D9E4 6F          >                    ld l,a
  61++D9E5 9F          >                    sbc a,a
  61++D9E6 94          >                    sub h
  61++D9E7 67          >                    ld h,a
  61++D9E8 22 55 92    >                        ld      (varPp1),hl
  61++D9EB 79          >                        ld      a,c                         ; the original sign will still be good
  61++D9EC C1          >                        pop     bc
  61++D9ED C9          >                        ret
  62++D9EE
  63++D9EE              APPequZPosPlusAPP:     APPequPosPlusAPP UBnKzlo, UBnKzsgn
  63++D9EE C5          >                        push    bc
  63++D9EF 4F          >                        ld      c,a                         ; save original value of a into c
  63++D9F0 3A 14 C0    >                        ld      a,(UBnKzsgn)
  63++D9F3 47          >                        ld      b,a
  63++D9F4 79          >                        ld      a,c
  63++D9F5 A8          >                        xor     b                           ; a = a xor x postition sign
  63++D9F6 FA 07 DA    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  63++D9F9             >; Signs are the same to we just add and take which ever sign
  63++D9F9 ED 5B 55 92 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  63++D9FD 2A 12 C0    >                        ld      hl,(UBnKzlo)
  63++DA00 19          >                        add     hl,de
  63++DA01 22 55 92    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  63++DA04 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  63++DA05 C1          >                        pop     bc
  63++DA06 C9          >                        ret
  63++DA07             >; Signs are opposite so we subtract
  63++DA07 ED 5B 55 92 >.MV50:                  ld      de,(varPp1)
  63++DA0B 2A 12 C0    >                        ld      hl,(UBnKzlo)
  63++DA0E B7          >                        or      a
  63++DA0F ED 52       >                        sbc     hl,de
  63++DA11 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  63++DA13 79          >                        ld      a,c                         ; get back the original sign
  63++DA14 22 55 92    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  63++DA17 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  63++DA19 C1          >                        pop     bc
  63++DA1A C9          >                        ret
  63++DA1B             >.MV51:                  NegHL
  63++DA1B AF          >                    xor a
  63++DA1C 95          >                    sub l
  63++DA1D 6F          >                    ld l,a
  63++DA1E 9F          >                    sbc a,a
  63++DA1F 94          >                    sub h
  63++DA20 67          >                    ld h,a
  63++DA21 22 55 92    >                        ld      (varPp1),hl
  63++DA24 79          >                        ld      a,c                         ; the original sign will still be good
  63++DA25 C1          >                        pop     bc
  63++DA26 C9          >                        ret
  64++DA27
  65++DA27              ; rollWork holds Alpha intermidate results
  66++DA27 00 00 00     rollWork      DS 3
  67++DA2A              rollWorkp1    equ rollWork
  68++DA2A              rollWorkp2    equ rollWork+1
  69++DA2A              rollWorkp3    equ rollWork+2
  70++DA2A
  71++DA2A              ;----------------------------------------------------------------------------------------------------------------------------------
  72++DA2A              ; based on MVEIT part 4 of 9
  73++DA2A 3A 71 92     ApplyMyRollAndPitch:    ld      a,(ALP1)                    ; get roll magnitude
  74++DA2D 21 61 92                             ld      hl,BET1                     ; and pitch
  75++DA30 B6                                   or      (hl)
  76++DA31 CA EB DA                             jp      z,.NoRotation               ; if both zero then don't compute
  77++DA34                                      ;break
  78++DA34              ; P[210] = x * alph (we use P[2]P[1] later as result/256
  79++DA34 5F                                   ld      e,a                         ; e = roll magnitude
  80++DA35 2A 0C C0                             ld      hl,(UBnKxlo)                ; hl = ship x pos
  81++DA38 CD 7C A2                             call    AHLequHLmulE                ; MULTU2-2 AHL = UbnkXlo * Alp1 both unsigned
  82++DA3B 32 56 92                             ld      (varPhi2),a                 ; set P[2] to high byte to help with ./256
  83++DA3E 22 54 92                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo * Alph1
  84++DA41              ; A = Flip sign
  85++DA41 3A 73 92                             ld      a,(ALP2FLIP)                ; flip the current roll angle alpha and xor with x sign
  86++DA44 21 0E C0                             ld      hl,UBnKxsgn                 ; and xor with x pos sign
  87++DA47 AE                                   xor     (hl)                        ; so now  (A P+2 P+1) = - (x_sign x_hi x_lo) * alpha / 256
  88++DA48              ; AP[2]P[1] =Y + AP[2]P[1] (i.e. Previous APP/256)
  89++DA48 CD B5 D9                             call    APPequYPosPlusAPP           ; MVT6 calculate APP = y - (x * alpha / 256)
  90++DA4B              ; K2 = AP[2][1] K2(3 2 1) = (A P+2 P+1) = y - x * alpha / 256
  91++DA4B 32 29 DA                             ld      (rollWorkp3),a               ; k2+3 = sign of result
  92++DA4E 22 27 DA                             ld      (rollWorkp1),hl             ; k2+1,2 = result
  93++DA51              ; P[210] = K2[2 1] * Beta  = (A ~P) * X
  94++DA51 3A 61 92                             ld      a,(BET1)                    ; a = magnitude of pitch
  95++DA54 5F                                   ld      e,a
  96++DA55 CD 7C A2                             call    AHLequHLmulE                ; MLTU2-2 AHL = (P+2 P+1) * BET1 or by now ((UbnkXlo * Alph1)/256 * Bet1)
  97++DA58 32 56 92                             ld      (varPp2),a                   ; save highest byte in P2
  98++DA5B 22 54 92                             ld      (varP),hl
  99++DA5E              ; Fetch sign of previosu cal and xor with BETA inverted
 100++DA5E 3A 29 DA                             ld      a,(rollWorkp3)
 101++DA61 5F                                   ld      e,a
 102++DA62 3A 62 92                             ld      a,(BET2)
 103++DA65 AB                                   xor     e                           ; so we get the sign of K3 and xor with pitch sign
 104++DA66              ; Z = P[210] =Z + APP
 105++DA66 CD EE D9                             call    APPequZPosPlusAPP           ; MVT6
 106++DA69 32 14 C0                             ld      (UBnKzsgn),a                ; save result back into z
 107++DA6C 22 12 C0                             ld      (UBnKzlo),hl
 108++DA6F              ; A[P1]P[0] = z * Beta
 109++DA6F 3A 61 92                             ld      a,(BET1)                    ; get pitch back again for mulitply in original it was kept in Q so no fetch needed
 110++DA72 5F                                   ld      e,a
 111++DA73 CD 7C A2                             call    AHLequHLmulE                ; MULTU2 P2 P1 was already in hl (A P+1 P) = (z_hi z_lo) * beta
 112++DA76 32 56 92                             ld      (varPp2),a                  ; P2 = high byte of result
 113++DA79 22 54 92                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo & Alph1
 114++DA7C              ; A xor BET2,Zsign
 115++DA7C 3A 29 DA                             ld      a,(rollWorkp3)               ; get K3 (sign of y) and store it in y pos
 116++DA7F 32 11 C0                             ld      (UBnKysgn),a                ; save result back into y
 117++DA82 5F                                   ld      e,a                         ; a = y sign Xor pitch rate sign
 118++DA83 3A 62 92                             ld      a,(BET2)                    ;
 119++DA86 AB                                   xor     e                           ;
 120++DA87 5F                                   ld      e,a                         ; now xor it with z sign too
 121++DA88 3A 14 C0                             ld      a,(UBnKzsgn)                ;
 122++DA8B AB                                   xor     e                           ; so now a = sign of y * beta * sign y * sign z
 123++DA8C F2 9B DA                             jp      p,.MV43                     ; if result is pve beta * z and y have differetn signs
 124++DA8F 2A 55 92                             ld      hl,(varPp1)
 125++DA92 ED 5B 27 DA                          ld      de,(rollWorkp1)
 126++DA96 B7                                   or      a
 127++DA97 19                                   add     hl,de
 128++DA98 C3 B5 DA                             jp      .MV44
 129++DA9B 2A 27 DA     .MV43:                  ld      hl,(rollWorkp1)
 130++DA9E ED 5B 55 92                          ld      de,(varPp1)
 131++DAA2 B7                                   or      a
 132++DAA3 ED 52                                sbc     hl,de                       ; (y_hi y_lo) = K2(2 1) - P(2 1)
 133++DAA5 30 0E                                jr      nc,.MV44                    ; if there was no over flow carry on
 134++DAA7                                      NegHL
 134++DAA7 AF          >                    xor a
 134++DAA8 95          >                    sub l
 134++DAA9 6F          >                    ld l,a
 134++DAAA 9F          >                    sbc a,a
 134++DAAB 94          >                    sub h
 134++DAAC 67          >                    ld h,a
 135++DAAD 3A 11 C0                             ld      a,(UBnKysgn)                ; flip sign bit TODO, we may have to remove xor as planets and suns are sign + 23 bit xpos
 136++DAB0 EE 80                                xor     SignOnly8Bit
 137++DAB2 32 11 C0                             ld      (UBnKysgn),a
 138++DAB5              ; by here we have (y_sign y_hi y_lo) = K2(2 1) - P(2 1) = K2 - beta * z
 139++DAB5 22 0F C0     .MV44:                  ld      (UBnKylo),hl                ; we do save here to avoid two writes if MV43 ended up with a 2s'c conversion
 140++DAB8 3A 71 92                             ld      a,(ALP1)                    ; get roll magnitude
 141++DABB 5F                                   ld      e,a
 142++DABC 2A 0F C0                             ld      hl,(UBnKylo)
 143++DABF CD 7C A2                             call    AHLequHLmulE                ; MLTU2-2 AHL = (y_hi y_lo) * alpha
 144++DAC2 32 56 92                             ld      (varPp2),a                  ; store high byte P(2 1 0) = (y_hi y_lo) * alpha
 145++DAC5 22 54 92                             ld      (varP),hl
 146++DAC8 3A 72 92                             ld      a,(ALP2)
 147++DACB 5F                                   ld      e,a
 148++DACC 3A 11 C0                             ld      a,(UBnKysgn)
 149++DACF AB                                   xor     e                           ; a = sign of roll xor y so now we have (A P+2 P+1) = (y_sign y_hi y_lo) * alpha / 256
 150++DAD0 CD 7C D9                             call    APPequXPosPlusAPP           ; MVT6 Set (A P+2 P+1) = (x_sign x_hi x_lo) + (A P+2 P+1) = x + y * alpha / 256
 151++DAD3 32 0E C0                             ld      (UBnKxsgn),a                ; save resutl stright into X pos
 152++DAD6 22 0C C0                             ld      (UBnKxlo),hl
 153++DAD9                                      ;break
 154++DAD9                                      ; if its not a sun then apply to local orientation
 155++DAD9
 156++DAD9 CD 62 D8                             call    ApplyMyRollToNosev
 157++DADC CD 91 D8                             call    ApplyMyRollToSidev
 158++DADF CD C0 D8                             call    ApplyMyRollToRoofv
 159++DAE2 CD EF D8                             call    ApplyMyPitchToNosev
 160++DAE5 CD 1E D9                             call    ApplyMyPitchToSidev
 161++DAE8 CD 4D D9                             call    ApplyMyPitchToRoofv
 162++DAEB 3A B0 92     .NoRotation:            ld      a,(DELTA)                   ; get speed
 163++DAEE 16 00                                ld      d,0
 164++DAF0 5F                                   ld      e,a                         ; de = speed in low byte
 165++DAF1 2A 12 C0                             ld      hl,(UBnKzlo)                ; hl = z position
 166++DAF4 3A 14 C0                             ld      a,(UBnKzsgn)                ; b = z sign
 167++DAF7 47                                   ld      b,a                         ;
 168++DAF8 0E 80                                ld      c,$80                       ; c = -ve as we are always moving forwards
 169++DAFA CD E6 A7                             call    ADDHLDESignBC               ; update speed
 170++DAFD 22 12 C0                             ld      (UBnKzlo),hl                ; write back to zpos
 171++DB00 32 14 C0                             ld      (UBnKzsgn),a                ;
 172++DB03 C9                                   ret
# file closed: ././Universe/ApplyMyRollAndPitch.asm
1217+ DB04                          INCLUDE "./Universe/ApplyShipRollAndPitch.asm"
# file opened: ././Universe/ApplyShipRollAndPitch.asm
   1++DB04              ;----------------------------------------------------------------------------------------------------------------------------------
   2++DB04              ; based on MVEIT part 4 of 9
   3++DB04 3A 2B C0     ApplyShipRollAndPitch:  ld      a,(UBnKRotZCounter)             ; get roll magnitudeShip Pitch counter
   4++DB07 47                                   ld      b,a
   5++DB08 E6 80                                and     SignOnly8Bit
   6++DB0A 4F                                   ld      c,a
   7++DB0B 32 32 C0                             ld      (univRAT2),a                ; get sign of pitch
   8++DB0E 78                                   ld      a,b
   9++DB0F E6 7F                                and     SignMask8Bit                ; and magnitude
  10++DB11 28 3A                                jr      z,.ProcessRoll
  11++DB13 FE 7F        .CheckPitchDamping:     cp      SignMask8Bit
  12++DB15 28 01                                jr      z,.NoPitchDamping
  13++DB17 3D           .ApplyPitchDamping:     dec     a                           ; pitch = pitch-1
  14++DB18 32 33 C0     .NoPitchDamping         ld      (univRAT2Val),a
  15++DB1B 47                                   ld      b,a
  16++DB1C B1                                   or      c                           ; bring sign back in
  17++DB1D 32 2B C0                             ld      (UBnKRotZCounter),a             ; rotZCounter = updated value
  18++DB20 21 1B C0     .PitchSAxes:            ld	    hl,UBnkrotmatRoofvX; UBnkrotmatSidevY
  19++DB23 22 3D 92                             ld	    (varAxis1),hl
  20++DB26 21 21 C0                             ld	    hl,UBnkrotmatNosevX; UBnkrotmatSidevZ
  21++DB29 22 3F 92                             ld	    (varAxis2),hl
  22++DB2C CD 0F CB                             call    MVS5RotateAxis
  23++DB2F 21 1D C0     .PitchRAxes:            ld	    hl,UBnkrotmatRoofvY
  24++DB32 22 3D 92                             ld	    (varAxis1),hl
  25++DB35 21 23 C0                             ld	    hl,UBnkrotmatNosevY;UBnkrotmatRoofvZ
  26++DB38 22 3F 92                             ld	    (varAxis2),hl
  27++DB3B CD 0F CB                             call    MVS5RotateAxis
  28++DB3E 21 1F C0     .PitchNAxes:            ld	    hl,UBnkrotmatRoofvZ; UBnkrotmatNosevY
  29++DB41 22 3D 92                             ld	    (varAxis1),hl
  30++DB44 21 25 C0                             ld	    hl,UBnkrotmatNosevZ
  31++DB47 22 3F 92                             ld	    (varAxis2),hl
  32++DB4A CD 0F CB                             call    MVS5RotateAxis
  33++DB4D 3A 2A C0     .ProcessRoll:           ld      a,(UBnKRotXCounter)
  34++DB50 47                                   ld      b,a
  35++DB51 E6 80                                and     SignOnly8Bit
  36++DB53 4F                                   ld      c,a
  37++DB54 32 32 C0                             ld      (univRAT2),a                ; get sign of pitch
  38++DB57 78                                   ld      a,b
  39++DB58 E6 7F                                and     SignMask8Bit                ; and magnitude
  40++DB5A C8                                   ret     z                           ; if no work to do then exit
  41++DB5B FE 7F        .CheckRollDamping:      cp      SignMask8Bit
  42++DB5D 28 01                                jr      z,.NoRollDamping
  43++DB5F 3D           .ApplyRollDamping:      dec      a                     ; pitch = pitch-1
  44++DB60 32 33 C0     .NoRollDamping          ld      (univRAT2Val),a
  45++DB63 47                                   ld      b,a
  46++DB64 B1                                   or      c                           ; bring sign back in
  47++DB65 32 2A C0                             ld      (UBnKRotXCounter),a             ; rotZCounter = updated value
  48++DB68 21 1B C0     .RollSAxis:           	ld	    hl,UBnkrotmatRoofvX; UBnkrotmatSidevX
  49++DB6B 22 3D 92                             ld	    (varAxis1),hl
  50++DB6E 21 15 C0                             ld	    hl,UBnkrotmatSidevX; UBnkrotmatSidevY
  51++DB71 22 3F 92                             ld	    (varAxis2),hl
  52++DB74 CD 0F CB                             call    MVS5RotateAxis
  53++DB77 21 1D C0     .RollRAxis:             ld	    hl,UBnkrotmatRoofvY; UBnkrotmatRoofvX
  54++DB7A 22 3D 92                             ld	    (varAxis1),hl
  55++DB7D 21 17 C0                             ld	    hl,UBnkrotmatSidevY; UBnkrotmatRoofvY
  56++DB80 22 3F 92                             ld	    (varAxis2),hl
  57++DB83 CD 0F CB                             call    MVS5RotateAxis
  58++DB86 21 1F C0     .RollNAxis:             ld	    hl,UBnkrotmatRoofvZ; UBnkrotmatNosevX
  59++DB89 22 3D 92                             ld	    (varAxis1),hl
  60++DB8C 21 19 C0                             ld	    hl,UBnkrotmatSidevZ; UBnkrotmatNosevY
  61++DB8F 22 3F 92                             ld	    (varAxis2),hl
  62++DB92 CD 0F CB                             call    MVS5RotateAxis
  63++DB95 C9                                   ret
  64++DB96
# file closed: ././Universe/ApplyShipRollAndPitch.asm
1218+ DB96                          INCLUDE "./ModelRender/DrawLines.asm"
# file opened: ././ModelRender/DrawLines.asm
   1++DB96
   2++DB96              ; ---------------------------------------------------------------------------------------------------------------------------------
   3++DB96 00           DrawLinesCounter		db	0
   4++DB97              ; Initial tests look OK
   5++DB97              LL155:;
   6++DB97              ClearLine:                                  ; CLEAR LINEstr visited by EE31 when XX3 heap ready to draw/erase lines in XX19 heap.
   7++DB97                    ;break                                                                             ; ObjectInFront:
   8++DB97 3E 65        DrawLines:              ld	a,$65 ; DEBUG
   9++DB99 FD 6F                                ld		iyl,a							; set ixl to colour (assuming we come in here with a = colour to draw)
  10++DB9B 3A F6 C2                             ld		a,(UbnkLineArrayLen)			; get number of lines
  11++DB9E                                      ReturnIfAIsZero   						; No lines then bail out.
  11++DB9E A7          >                    and a
  11++DB9F C8          >                    ret    z
  12++DBA0 FD 67                                ld		iyh,a			                ; number of lines still to draw
  13++DBA2 21 04 C2                             ld		hl,UbnkLineArray
  14++DBA5              ;LL27:                                       ; counter Y, Draw clipped lines in XX19 ship lines heap
  15++DBA5 4E           DrawXX19ClippedLines:   ld      c,(hl)                          ; (XX19),Y c = varX1
  16++DBA6 23                                   inc     hl
  17++DBA7 46                                   ld      b,(hl)                          ; bc = point1 Y,X
  18++DBA8 23                                   inc     hl
  19++DBA9              ;;DEBUGTEST        push bc
  20++DBA9              ;;DEBUGTEST        push hl
  21++DBA9              ;;DEBUGTEST        push de
  22++DBA9              ;;DEBUGTEST        ld  a,$3F
  23++DBA9              ;;DEBUGTEST        MMUSelectLayer2
  24++DBA9              ;;DEBUGTEST        call    l2_plot_pixel
  25++DBA9              ;;DEBUGTEST        pop de
  26++DBA9              ;;DEBUGTEST        pop hl
  27++DBA9              ;;DEBUGTEST        pop bc
  28++DBA9 5E                                   ld      e,(hl)                          ; c = varX1
  29++DBAA 23                                   inc     hl
  30++DBAB 56                                   ld      d,(hl)                          ; de = point2 Y,X
  31++DBAC              ;;DEBUGTEST       push bc
  32++DBAC              ;;DEBUGTEST       push hl
  33++DBAC              ;;DEBUGTEST       push de
  34++DBAC              ;;DEBUGTEST       push de
  35++DBAC              ;;DEBUGTEST       pop  bc
  36++DBAC              ;;DEBUGTEST       ld  a,$3F
  37++DBAC              ;;DEBUGTEST       MMUSelectLayer2
  38++DBAC              ;;DEBUGTEST       call    l2_plot_pixel
  39++DBAC              ;;DEBUGTEST       pop de
  40++DBAC              ;;DEBUGTEST       pop hl
  41++DBAC              ;;DEBUGTEST       pop bc
  42++DBAC 23                                   inc     hl
  43++DBAD E5                                   push	hl
  44++DBAE FD E5                                push    iy
  45++DBB0 60                                   ld      h,b
  46++DBB1 69                                   ld      l,c
  47++DBB2                ;  call    l2_draw_any_line                ; call version of LOIN that used BCDE
  48++DBB2 FD 7D                                ld		a,iyl							; get colour back before calling line draw
  49++DBB4                                      MMUSelectLayer2
  49++DBB4 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  50++DBB8 CD EC E8                             call    LineHLtoDE
  51++DBBB FD E1                                pop     iy
  52++DBBD E1                                   pop	    hl
  53++DBBE FD 25                                dec     iyh
  54++DBC0 20 E3                                jr		nz,DrawXX19ClippedLines
  55++DBC2 C9                                   ret                                     ; --- Wireframe end  \ LL118-1
  56++DBC3
# file closed: ././ModelRender/DrawLines.asm
1219+ DBC3              ; ---------------------------------------------------------------------------------------------------------------------------------
1220+ DBC3
1221+ DBC3
1222+ DBC3 CD 9E CE     ProcessDot:                 call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
1223+ DBC6 CD D3 8B                                 call    ScaleXX16Matrix197               ;#02; Normalise XX16
1224+ DBC9 CD 54 D1                                 call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
1225+ DBCC CD 21 D0                                 call    InverseXX16                      ;#11; Invert rotation matrix
1226+ DBCF 21 00 00                                 ld      hl,0
1227+ DBD2 32 79 C0                                 ld      (UBnkXScaled),a
1228+ DBD5 32 7B C0                                 ld      (UBnkYScaled),a
1229+ DBD8 32 7D C0                                 ld      (UBnkZScaled),a
1230+ DBDB AF                                       xor     a
1231+ DBDC CD F9 8A                                 call    XX12EquNodeDotOrientation
1232+ DBDF CD D5 CE                                 call    TransposeXX12ByShipToXX15
1233+ DBE2 CD 52 CF                                 call	ScaleNodeTo8Bit					    ; scale to 8 bit values, why don't we hold the magnitude here?x
1234+ DBE5 FD 21 C4 C0                              ld      iy,UBnkNodeArray
1235+ DBE9 CD 0B D8                                 call    ProjectNodeToEye
1236+ DBEC C9                                       ret
1237+ DBED
1238+ DBED              ; .....................................................
1239+ DBED              ; Process Nodes does the following:
1240+ DBED              ; for each node:
1241+ DBED              ;     see if node >
1242+ DBED 00           PNXX20DIV6          DB      0
1243+ DBEE 00 00        PNVERTEXPTR         DW      0   ; DEBUG WILL USE LATER
1244+ DBF0 00 00        PNNODEPRT           DW      0   ; DEBUG WILL USE LATER
1245+ DBF2 00           PNLASTNORM          DB      0
1246+ DBF3 AF           ProcessNodes:           xor     a
1247+ DBF4 32 F6 C2                             ld      (UbnkLineArrayLen),a
1248+ DBF7 CD 9E CE                             call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
1249+ DBFA CD D3 8B                             call    ScaleXX16Matrix197               ;#02; Normalise XX16
1250+ DBFD CD 54 D1                             call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
1251+ DC00 CD 21 D0                             call    InverseXX16                      ;#11; Invert rotation matrix
1252+ DC03 21 1C C3                             ld      hl,UBnkHullVerticies
1253+ DC06 3A 0C C3                             ld      a,(VertexCtX6Addr)               ; get Hull byte#8 = number of vertices *6                                   ;;;
1254+ DC09 4F           GetActualVertexCount:   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1255+ DC0A 4F                                   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1256+ DC0B 16 06                                ld      d,6
1257+ DC0D CD 15 A4                             call    asm_div8                         ; asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
1258+ DC10 41                                   ld      b,c                              ; c = number of vertices
1259+ DC11 FD 21 C4 C0                          ld      iy,UBnkNodeArray
1260+ DC15              LL48:
1261+ DC15 C5           PointLoop:	            push	bc                                  ; save counters
1262+ DC16 E5                                   push	hl                                  ; save verticies list pointer
1263+ DC17 FD E5                                push	iy                                  ; save Screen plot array pointer
1264+ DC19 78                                   ld      a,b
1265+ DC1A                                      ;break
1266+ DC1A CD 88 D7                             call    CopyNodeToXX15                      ; copy verices at hl to xx15
1267+ DC1D 3A 7A C0                             ld		a,(UBnkXScaledSign)
1268+ DC20 CD F9 8A                             call    XX12EquNodeDotOrientation
1269+ DC23 CD D5 CE                             call    TransposeXX12ByShipToXX15
1270+ DC26 CD 52 CF                             call	ScaleNodeTo8Bit					    ; scale to 8 bit values, why don't we hold the magnitude here?x
1271+ DC29 FD E1                                pop		iy                                  ; get back screen plot array pointer
1272+ DC2B CD 0B D8                             call    ProjectNodeToEye                     ; set up screen plot list entry
1273+ DC2E                 ; ld      hl,UbnkLineArrayLen
1274+ DC2E                ;  inc     (hl)                                ; another node done
1275+ DC2E FD E5        ReadyForNextPoint:      push	iy                                  ; copy screen plot pointer to hl
1276+ DC30 E1                                   pop		hl
1277+ DC31 3E 04                                ld		a,4
1278+ DC33 ED 31                                add		hl,a
1279+ DC35 E5                                   push	hl                                  ; write it back at iy + 4
1280+ DC36 FD E1                                pop		iy								    ; and put it in iy again
1281+ DC38 E1                                   pop		hl                                  ; get hl back as vertex list
1282+ DC39 3E 06                                ld		a,6
1283+ DC3B ED 31                                add 	hl,a                                ; and move to next vertex
1284+ DC3D C1                                   pop		bc                                  ; get counter back
1285+ DC3E 10 D5                                djnz	PointLoop
1286+ DC40              ; ......................................................
1287+ DC40                                      ClearCarryFlag
1287+ DC40 B7          >                    or a
1288+ DC41 C9                                   ret
1289+ DC42
1290+ DC42              ; ......................................................
1291+ DC42 CD 03 D4     ProcessShip:            call    CheckDistance
1292+ DC45 D8                                   ret     c
1293+ DC46 3A 92 C0     .IsItADot:              ld      a,(UBnKDrawAsDot)
1294+ DC49 A7                                   and     a
1295+ DC4A 28 0F                                jr      z,.CarryOnWithDraw
1296+ DC4C ED 4B C4 C0  .itsJustADot:           ld      bc,(UBnkNodeArray)          ; if its at dot range
1297+ DC50 3E FF                                ld      a,$FF                       ; just draw a pixel
1298+ DC52                                      MMUSelectLayer2                     ; then go to update radar
1298+ DC52 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1299+ DC56 CD FF E0                             call    l2_plot_pixel               ;
1300+ DC59                                      ClearCarryFlag
1300+ DC59 B7          >                    or a
1301+ DC5A C9                                   ret
1302+ DC5B CD F3 DB     .CarryOnWithDraw:       call    ProcessNodes
1303+ DC5E CD 53 D4                             call    CullV2
1304+ DC61 CD ED DC                             call    PrepLines
1305+ DC64 CD 97 DB                             call    DrawLines
1306+ DC67                                      ClearCarryFlag
1306+ DC67 B7          >                    or a
1307+ DC68 C9                                   ret
1308+ DC69              ; ......................................................
1309+ DC69
1310+ DC69              ;-LL49-----------------------------------------------------------------------------------------------------------------------------
1311+ DC69              ;  Entering Here we have the following:
1312+ DC69              ;  XX15(1 0) = vertex x-coordinate but sign not populated
1313+ DC69              ;  XX15(3 2) = vertex y-coordinate but sign not populated
1314+ DC69              ;  XX15(5 4) = vertex z-coordinate but sign not populated
1315+ DC69              ;
1316+ DC69              ;  XX16(  1 0)sidev_x   (3 2)roofv_x   (5 4)nosev_x
1317+ DC69              ;  XX16(  7 6)sidev_y   (9 8)roofv_y (11 10)nosev_y
1318+ DC69              ;  XX16(13 12)sidev_z (15 14)roofv_z (17 16)nosev_z
1319+ DC69              ;--------------------------------------------------------------------------------------------------------
1320+ DC69              AddLaserBeamLine:
1321+ DC69              ; this code is a bag of shit and needs re-writing
1322+ DC69              GetGunVertexNode:
1323+ DC69 3A 0A C3             ld          a,(GunVertexAddr)                   ; Hull byte#6, gun vertex*4 (XX0),Y
1324+ DC6C 21 C4 C0             ld          hl,UBnkNodeArray                    ; list of lines to read
1325+ DC6F ED 31                add         hl,a                                ; HL = address of GunVertexOnNodeArray
1326+ DC71 FD 2E 00             ld          iyl,0
1327+ DC74              MoveX1PointToXX15:
1328+ DC74 4E                   ld          c,(hl)                              ;
1329+ DC75 23                   inc         hl
1330+ DC76 46                   ld          b,(hl)                              ; bc = x1 of gun vertex
1331+ DC77 23                   inc         hl
1332+ DC78 ED 43 79 C0          ld          (UBnkX1),bc
1333+ DC7C 0C                   inc         c
1334+ DC7D C8                   ret         z                                   ; was c 255?
1335+ DC7E 04                   inc         b
1336+ DC7F C8                   ret         z                                   ; was c 255?
1337+ DC80              MoveY1PointToXX15:
1338+ DC80 4E                   ld          c,(hl)                              ;
1339+ DC81 23                   inc         hl
1340+ DC82 46                   ld          b,(hl)                              ; bc = y1 of gun vertex
1341+ DC83 23                   inc         hl
1342+ DC84 ED 43 7B C0          ld          (UBnkY1),bc
1343+ DC88              SetX2PointToXX15:
1344+ DC88 01 00 00             ld          bc,0                                ; set X2 to 0
1345+ DC8B ED 43 7D C0          ld          (UBnkX2),bc
1346+ DC8F 3A 12 C0             ld          a,(UBnKzlo)
1347+ DC92 4F                   ld          c,a
1348+ DC93              SetY2PointToXX15:
1349+ DC93 ED 43 7F C0          ld          (UBnkY2),bc                         ; set Y2to 0
1350+ DC97 3A 0E C0             ld          a,(UBnKxsgn)
1351+ DC9A                      JumpOnBitClear a,7,LL74SkipDec
1351+ DC9A CB 7F       >                        bit 	7,a
1351+ DC9C CA A4 DC    >                        jp      z,LL74SkipDec
1352+ DC9F              LL74DecX2:
1353+ DC9F 3E FF                ld          a,$FF
1354+ DCA1 32 7D C0             ld          (UBnkX2Lo),a                        ; rather than dec (hl) just load with 255 as it will always be that at this code point
1355+ DCA4              LL74SkipDec:
1356+ DCA4 CD 48 CC             call        ClipLine                            ; LL145 \ clip test on XX15 XX12 vector, returns carry
1357+ DCA7 38 71                jr          c,CalculateNewLines                 ; LL170 clip returned carry set so not visibile if carry set skip the rest (laser not firing)
1358+ DCA9              ; Here we are usign hl to replace VarU as index
1359+ DCA9 2A B7 92             ld          hl,(varU16)
1360+ DCAC 3A 79 C0             ld          a,(UBnKx1Lo)
1361+ DCAF 77                   ld          (hl),a
1362+ DCB0 23                   inc         hl
1363+ DCB1 3A 7B C0             ld          a,(UbnKy1Lo)
1364+ DCB4 77                   ld          (hl),a
1365+ DCB5 23                   inc         hl
1366+ DCB6 3A 7D C0             ld          a,(UBnkX2Lo)
1367+ DCB9 77                   ld          (hl),a
1368+ DCBA 23                   inc         hl
1369+ DCBB 3A 7F C0             ld          a,(UbnKy2Lo)
1370+ DCBE 77                   ld          (hl),a
1371+ DCBF FD 2C                inc         iyl                                 ; iyl holds as a counter to iterations
1372+ DCC1 23                   inc         hl
1373+ DCC2 FD 2C                inc         iyl                                 ; ready for next byte
1374+ DCC4 22 B7 92             ld          (varU16),hl
1375+ DCC7 C9                   ret
1376+ DCC8
1377+ DCC8                  INCLUDE "PrepLines.asm"
# file opened: ./Universe/PrepLines.asm
   1++DCC8              ;--------------------------------------------------------------------------------------------------------
   2++DCC8                  INCLUDE "./ModelRender/getVertexNodeAtAToX1Y1.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   1++DCC8              ;--------------------------------------------------------------------------------------------------------
   2++DCC8              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++DCC8 21 C4 C0     getVertexNodeAtAToX1Y1: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++DCCB ED 31                                add         hl,a                                ; hl = address of Node
   5++DCCD 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++DCCE 11 79 C0                             ld          de,UBnkX1
   7++DCD1 ED A0                                ldi                                             ; x1 lo
   8++DCD3 ED A0                                ldi                                             ; x1 hi
   9++DCD5 ED A0                                ldi                                             ; y1 lo
  10++DCD7 ED A0                                ldi                                             ; y1 hi
  11++DCD9 C9                                   ret
  12++DCDA
# file closed: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   3++DCDA                  INCLUDE "./ModelRender/getVertexNodeAtAToX2Y2.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX2Y2.asm
   1++DCDA              ;--------------------------------------------------------------------------------------------------------
   2++DCDA              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++DCDA 21 C4 C0     getVertexNodeAtAToX2Y2: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++DCDD ED 31                                add         hl,a                                ; hl = address of Node
   5++DCDF 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++DCE0 11 7D C0                             ld          de,UBnkX2
   7++DCE3 ED A0                                ldi                                             ; x1 lo
   8++DCE5 ED A0                                ldi                                             ; x1 hi
   9++DCE7 ED A0                                ldi                                             ; y1 lo
  10++DCE9 ED A0                                ldi                                             ; y1 hi
  11++DCEB C9                                   ret
# file closed: ././ModelRender/getVertexNodeAtAToX2Y2.asm
   4++DCEC                  INCLUDE "./ModelRender/GetFaceAtA.asm"
# file opened: ././ModelRender/GetFaceAtA.asm
   1++DCEC              ;--------------------------------------------------------------------------------------------------------
   2++DCEC              GetFaceAtA:         MACRO
   3++DCEC ~                                ld          hl,UbnkFaceVisArray
   4++DCEC ~                                add         hl,a
   5++DCEC ~                                ld          a,(hl)                              ; get face visibility
   6++DCEC                                  ENDM
   7++DCEC
# file closed: ././ModelRender/GetFaceAtA.asm
   5++DCEC              ;--------------------------------------------------------------------------------------------------------
   6++DCEC              ; LL72 Goes through each edge in to determine if they are on a visible face, if so load start and end to line array as clipped lines
   7++DCEC               ;   DEFINE NOBACKFACECULL 1
   8++DCEC 00           PLEDGECTR           DB          0
   9++DCED
  10++DCED              PrepLines:
  11++DCED              ; FOR NOW BRUTE FORCE IF OFF SCREEN
  12++DCED
  13++DCED              ; TODO add in onced DOEXP is finished
  14++DCED              ;        ld          a,(UBnkexplDsp)                     ; INWK+31  \ display/exploding state|missiles
  15++DCED              ;        JumpOnBitClear  a,5,EE31                        ; bit5 of mask, if zero no explosion
  16++DCED              ;        or          8
  17++DCED              ;        ld          (UBnkexplDsp),a                     ; else else set bit3 to erase old line
  18++DCED              ;        jp          DOEXP                               ; erase using Do Explosion and use implicit return
  19++DCED              ;EE31:                                                   ; no explosion
  20++DCED              ;        JumpOnBitClear  a,3,LL74                        ; clear is hop to do New lines
  21++DCED              ;        call        ClearLine                           ; LL155    \ else erase lines in XX19 heap at LINEstr down
  22++DCED              ;        ld          a, $08                              ; set bit 3 of a and fall into LL74
  23++DCED              ;
  24++DCED              ;--------------------------------------------------------------------------------------------------------
  25++DCED              InitialiseLineRead:
  26++DCED                      ;break
  27++DCED                      ldWriteZero UbnkLineArrayLen                    ; current line array index = 0
  27++DCED AF          >               xor      a
  27++DCEE 32 F6 C2    >               ld       (UbnkLineArrayLen),a
  28++DCF1                      ldWriteZero UbnkLineArrayBytes                  ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
  28++DCF1 AF          >               xor      a
  28++DCF2 32 F7 C2    >               ld       (UbnkLineArrayBytes),a
  29++DCF5                      ldWriteZero PLEDGECTR
  29++DCF5 AF          >               xor      a
  29++DCF6 32 EC DC    >               ld       (PLEDGECTR),a
  30++DCF9 3A 0D C3             ld          a,(EdgeCountAddr)
  31++DCFC DD 67                ld          ixh,a                               ; ixh = XX17 = Total number of edges to traverse
  32++DCFE FD 2E 00             ld          iyl,0                               ; ixl = current edge index
  33++DD01 21 04 C2             ld          hl,UbnkLineArray                    ; head of array
  34++DD04 22 B7 92             ld          (varU16),hl                         ; store current line array pointer un varU16
  35++DD07                      ldCopyByte  EdgeCountAddr, XX17                 ; XX17  = total number of edges to traverse edge counter
  35++DD07 3A 0D C3    >               ld       a,(EdgeCountAddr)
  35++DD0A 32 BB 92    >               ld       (XX17),a
  36++DD0D 3A 2C C0             ld          a,(UBnKexplDsp)                     ; get explosion status
  37++DD10                      JumpOnBitClear a,6,CalculateNewLines            ; LL170 bit6 of display state clear (laser not firing) \ Calculate new lines
  37++DD10 CB 77       >                        bit 	6,a
  37++DD12 CA 1A DD    >                        jp      z,CalculateNewLines
  38++DD15 E6 BF                and         $BF                                 ; else laser is firing, clear bit6.
  39++DD17 32 2C C0             ld          (UBnKexplDsp),a                     ; INWK+31
  40++DD1A              ;   TODO commentedout as teh subroutine is a mess   call        AddLaserBeamLine                    ; add laser beam line to draw list
  41++DD1A              ; NOw we can calculate hull after including laser line
  42++DD1A              CalculateNewLines:
  43++DD1A              LL170:                                                  ;(laser not firing) \ Calculate new lines   \ their comment
  44++DD1A              CheckEdgesForVisibility:
  45++DD1A 21 48 C4             ld          hl,UBnkHullEdges
  46++DD1D                      ; TODO change heap to 3 separate arrays and break them down during copy of ship hull data
  47++DD1D 22 59 92             ld          (varV),hl                           ; V \ is pointer to where edges data start
  48++DD20 3A 09 C3             ld          a,(LineX4Addr)
  49++DD23 47                   ld          b,a                                 ; nbr of bytes of edge data
  50++DD24              LL75Loop:                                               ; count Visible edges
  51++DD24              IsEdgeInVisibilityRange:
  52++DD24 2A 59 92             ld          hl,(varV)
  53++DD27 E5                   push        hl
  54++DD28 FD E1                pop         iy
  55++DD2A                      IFDEF NOBACKFACECULL
  56++DD2A ~                        jp          VisibileEdge; DEBUGTODO
  57++DD2A                      ENDIF
  58++DD2A 3A 49 92             ld          a,(LastNormalVisible)               ; XX4 is visibility range
  59++DD2D 57                   ld          d,a                                 ; d holds copy of XX4
  60++DD2E              ; Get Edge Byte 0
  61++DD2E FD 7E 00             ld          a,(IY+0)                            ; edge data byte#0 is visibility distance
  62++DD31                      JumpIfALTNusng d,LL78EdgeNotVisible             ; XX4   \ visibility LLx78 edge not visible
  62++DD31 BA          >                        cp      d
  62++DD32 DA 85 DD    >                        jp		c, LL78EdgeNotVisible
  63++DD35              EdgeMayBeVisibile:
  64++DD35              ; Get Edge Byte 1
  65++DD35              IsFace1Visibile:                                        ; edges have 2 faces to test
  66++DD35 FD 7E 01             ld          a,(IY+1)                            ; (V),Y \ edge data byte#1 bits 0 to 3 face 1 4 to 7 face 2
  67++DD38 4F                   ld          c,a                                 ;  c = a copy of byte 1
  68++DD39 E6 0F                and         $0F                                 ;
  69++DD3B                      GetFaceAtA
  69++DD3B 21 A6 C0    >                    ld          hl,UbnkFaceVisArray
  69++DD3E ED 31       >                    add         hl,a
  69++DD40 7E          >                    ld          a,(hl)                              ; get face visibility
  70++DD41              ;       jp  VisibileEdge; DEBUG BODGE TEST TODO
  71++DD41                      IfANotZeroGoto VisibileEdge                     ; LL70 visible edge
  71++DD41 FE 00       >				cp	0
  71++DD43 C2 57 DD    >				jp	nz,VisibileEdge
  72++DD46              IsFace2Visibile:
  73++DD46 79                   ld          a,c                                 ; restore byte 1 from c register
  74++DD47 ED 23                swapnib                                         ;
  75++DD49 E6 0F                and         $0F                                 ; swap high byte into low byte
  76++DD4B E5                   push        hl
  77++DD4C                      GetFaceAtA
  77++DD4C 21 A6 C0    >                    ld          hl,UbnkFaceVisArray
  77++DD4F ED 31       >                    add         hl,a
  77++DD51 7E          >                    ld          a,(hl)                              ; get face visibility
  78++DD52 E1                   pop         hl
  79++DD53                      IfAIsZeroGoto LL78EdgeNotVisible                ; edge not visible
  79++DD53 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  79++DD54 CA 85 DD    >				jp	z, LL78EdgeNotVisible
  80++DD57              VisibileEdge:                                           ; Now we need to node id from bytes 2 - start and 3 - end
  81++DD57              ;LL79--Visible edge--------------------------------------
  82++DD57              ; Get Edge Byte 2
  83++DD57 FD 7E 02             ld          a,(IY+2)                            ; get Node id
  84++DD5A CD C8 DC             call        getVertexNodeAtAToX1Y1              ; get the points X1Y1 from node
  85++DD5D FD 7E 03             ld          a,(IY+3)
  86++DD60 CD DA DC             call        getVertexNodeAtAToX2Y2              ; get the points X2Y2 from node
  87++DD63 CD 48 CC             call        ClipLine
  88++DD66 38 1D                jr          c,LL78EdgeNotVisible                ; LL78 edge not visible
  89++DD68              LL80:                                                   ; ll80 \ Shove visible edge onto XX19 ship lines heap counter U
  90++DD68 ED 5B B7 92          ld          de,(varU16)                         ; clipped edges heap address
  91++DD6C 21 79 C0             ld          hl,UBnkNewX1
  92++DD6F                      FourLDIInstrunctions
  92++DD6F ED A0       >                        ldi
  92++DD71 ED A0       >                        ldi
  92++DD73 ED A0       >                        ldi
  92++DD75 ED A0       >                        ldi
  93++DD77 ED 53 B7 92          ld          (varU16),de                         ; update U16 with current address
  94++DD7B 21 F6 C2             ld          hl,UbnkLineArrayLen                 ; we have loaded one line
  95++DD7E 34                   inc         (hl)
  96++DD7F 7E                   ld          a,(hl)
  97++DD80                      JumpIfAGTENusng LineArraySize,CompletedLineGeneration   ; have we hit max lines for a model hop over jmp to Exit edge data loop
  97++DD80 FE 32       >                        cp     LineArraySize
  97++DD82 D2 9B DD    >                        jp		nc,CompletedLineGeneration
  98++DD85              ; If we hit here we skip the write of line arryay u16
  99++DD85              LL78EdgeNotVisible:                                     ; also arrive here if Edge not visible, loop next data edge.
 100++DD85              LL78:
 101++DD85 2A 59 92             ld          hl,(varV)                           ; varV is current edge address
 102++DD88 3E 04                ld          a,4
 103++DD8A ED 31                add         hl,a
 104++DD8C 22 59 92             ld          (varV),hl
 105++DD8F 21 EC DC             ld          hl,PLEDGECTR                        ;
 106++DD92 34                   inc         (hl)                                ;
 107++DD93 7E                   ld          a,(hl)                              ; current edge index ++
 108++DD94                      JumpIfANEMemusng XX17,LL75Loop                  ; compare with total number of edges
 108++DD94 21 BB 92    >                  ld    hl,XX17
 108++DD97 BE          >                  cp    (hl)
 108++DD98 C2 24 DD    >                  jp      nz,LL75Loop
 109++DD9B              CompletedLineGeneration:
 110++DD9B              LL81:
 111++DD9B              LL81SHPPT:                                              ; SHPPT ship is a point arrives here with Acc=2, bottom entry in heap
 112++DD9B 3A F6 C2             ld          a,(UbnkLineArrayLen)                ; UbnkLineArrayLen = nbr of lines loaded
 113++DD9E CB 27                sla         a
 114++DDA0 CB 27                sla         a                                   ; multiple by 4 to equal number of bytes
 115++DDA2 32 F7 C2             ld          (UbnkLineArrayBytes),a              ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
 116++DDA5              ExitEdgeDataLoop:
 117++DDA5 C9                   ret
 118++DDA6
# file closed: ./Universe/PrepLines.asm
1378+ DDA6
1379+ DDA6              UnivBankSize  EQU $ - StartOfUniv
1380+ DDA6
# file closed: ./Universe/univ_ship_data.asm
1214  DDA6
1215  DDA6                  SLOT    UniverseBankAddr
1216  DDA6                  PAGE    BankUNIVDATA1
1217  DDA6              	ORG	UniverseBankAddr,BankUNIVDATA1
1218  C000 FF           UNIVDATABlock1      DB $FF
1219  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1220  E000
1221  E000                  SLOT    UniverseBankAddr
1222  E000                  PAGE    BankUNIVDATA2
1223  E000              	ORG	UniverseBankAddr,BankUNIVDATA2
1224  C000 FF           UNIVDATABlock2      DB $FF
1225  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1226  E000
1227  E000                  SLOT    UniverseBankAddr
1228  E000                  PAGE    BankUNIVDATA3
1229  E000              	ORG	UniverseBankAddr,BankUNIVDATA3
1230  C000 FF           UNIVDATABlock3      DB $FF
1231  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1232  E000
1233  E000                  SLOT    UniverseBankAddr
1234  E000                  PAGE    BankUNIVDATA4
1235  E000              	ORG	UniverseBankAddr,BankUNIVDATA4
1236  C000 FF           UNIVDATABlock4      DB $FF
1237  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1238  E000
1239  E000                  SLOT    UniverseBankAddr
1240  E000                  PAGE    BankUNIVDATA5
1241  E000              	ORG	UniverseBankAddr,BankUNIVDATA5
1242  C000 FF           UNIVDATABlock5      DB $FF
1243  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1244  E000
1245  E000                  SLOT    UniverseBankAddr
1246  E000                  PAGE    BankUNIVDATA6
1247  E000              	ORG	UniverseBankAddr,BankUNIVDATA6
1248  C000 FF           UNIVDATABlock6      DB $FF
1249  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1250  E000
1251  E000                  SLOT    UniverseBankAddr
1252  E000                  PAGE    BankUNIVDATA7
1253  E000              	ORG	UniverseBankAddr,BankUNIVDATA7
1254  C000 FF           UNIVDATABlock7      DB $FF
1255  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1256  E000
1257  E000                  SLOT    UniverseBankAddr
1258  E000                  PAGE    BankUNIVDATA8
1259  E000              	ORG	UniverseBankAddr,BankUNIVDATA8
1260  C000 FF           UNIVDATABlock8      DB $FF
1261  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1262  E000
1263  E000                  SLOT    UniverseBankAddr
1264  E000                  PAGE    BankUNIVDATA8
1265  E000              	ORG	UniverseBankAddr,BankUNIVDATA9
1266  C000 FF           UNIVDATABlock9      DB $FF
1267  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1268  E000
1269  E000                  SLOT    UniverseBankAddr
1270  E000                  PAGE    BankUNIVDATA10
1271  E000              	ORG	UniverseBankAddr,BankUNIVDATA10
1272  C000 FF           UNIVDATABlock10     DB $FF
1273  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1274  E000
1275  E000                  SLOT    UniverseBankAddr
1276  E000                  PAGE    BankUNIVDATA11
1277  E000              	ORG	UniverseBankAddr,BankUNIVDATA11
1278  C000 FF           UNIVDATABlock11     DB $FF
1279  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1280  E000
1281  E000                  SLOT    UniverseBankAddr
1282  E000                  PAGE    BankUNIVDATA12
1283  E000              	ORG	UniverseBankAddr,BankUNIVDATA12
1284  C000 FF           UNIVDATABlock12     DB $FF
1285  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1286  E000
1287  E000                  SLOT    GalaxyDataAddr
1288  E000                  PAGE    BankGalaxyData0
1289  E000              	ORG GalaxyDataAddr, BankGalaxyData0
1290  E000                  INCLUDE "./Universe/galaxy_data.asm"
# file opened: ./Universe/galaxy_data.asm
   1+ E000 47 61 6C 61  galaxy_page_marker  DB "Galaxy      PG9"
   1+ E004 78 79 20 20
   1+ E008 20 20 20 20
   1+ E00C 50 47 39
   2+ E00F 30           galaxy_pg_cnt       DB "0"
   3+ E010 00 00 00...  galaxy_master_seed  DS 6
   4+ E016 00 00 00...  galaxy_data DS 8*256
   5+ E816 2D 2D 2D 2D  galaxy_code_end DB "-----------------------------------------------------------------"
   5+ E81A 2D 2D 2D 2D
   5+ E81E 2D 2D 2D 2D
   5+ E822 2D 2D 2D 2D
   5+ E826 2D 2D 2D 2D
   5+ E82A 2D 2D 2D 2D
   5+ E82E 2D 2D 2D 2D
   5+ E832 2D 2D 2D 2D
   5+ E836 2D 2D 2D 2D
   5+ E83A 2D 2D 2D 2D
   5+ E83E 2D 2D 2D 2D
   5+ E842 2D 2D 2D 2D
   5+ E846 2D 2D 2D 2D
   5+ E84A 2D 2D 2D 2D
   5+ E84E 2D 2D 2D 2D
   5+ E852 2D 2D 2D 2D
   5+ E856 2D
   6+ E857 00 00        GalaxyPresentSystem:     DW 0
   7+ E859 00 00        GalaxyDestinationSystem: DW 0
   8+ E85B 00 00        GalaxyTargetSystem:      DW 0
   9+ E85D              ; including a DB 0 as a catcher
  10+ E85D 00 00 00...  GalaxySearchString:      DS 32
  11+ E87D 00                                    DB 0
  12+ E87E 00 00 00...  GalaxyExpandedName:      DS 32
  13+ E89E 00                                    DB 0
  14+ E89F 41 42 4F 55  GalaxyName_digrams	     DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION"
  14+ E8A3 53 45 49 54
  14+ E8A7 49 4C 45 54
  14+ E8AB 53 54 4F 4E
  14+ E8AF 4C 4F 4E 55
  14+ E8B3 54 48 4E 4F
  14+ E8B7 41 4C 4C 45
  14+ E8BB 58 45 47 45
  14+ E8BF 5A 41 43 45
  14+ E8C3 42 49 53 4F
  14+ E8C7 55 53 45 53
  14+ E8CB 41 52 4D 41
  14+ E8CF 49 4E 44 49
  14+ E8D3 52 45 41 3F
  14+ E8D7 45 52 41 54
  14+ E8DB 45 4E 42 45
  14+ E8DF 52 41 4C 41
  14+ E8E3 56 45 54 49
  14+ E8E7 45 44 4F 52
  14+ E8EB 51 55 41 4E
  14+ E8EF 54 45 49 53
  14+ E8F3 52 49 4F 4E
  15+ E8F7 00 00 00...  GalaxyWorkingSeed        DS 6
  16+ E8FD 00 00 00...  GalaxyNamingSeed         DS 6
  17+ E903 00 00 00...  GalaxySavedRandomSeed    DS 6
  18+ E909
  19+ E909 00           GalaxyDisplayGovernment         DB 0
  20+ E90A 00           GalaxyDisplayEconomy            DB 0
  21+ E90B 00           GalaxyDisplayTekLevel           DB 0
  22+ E90C 00           GalaxyDisplayPopulation         DB 0
  23+ E90D 00 00        GalaxyDisplayProductivity       DW 0
  24+ E90F 00 00        GalaxyDisplayRadius             DW 0
  25+ E911
  26+ E911 66 61 62 6C  GalaxyDescList01A       DB "fabled",0
  26+ E915 65 64 00
  27+ E918 6E 6F 74 61  GalaxyDescList01B       DB "notable",0
  27+ E91C 62 6C 65 00
  28+ E920 77 65 6C 6C  GalaxyDescList01C       DB "well known",0
  28+ E924 20 6B 6E 6F
  28+ E928 77 6E 00
  29+ E92B 66 61 6D 6F  GalaxyDescList01D       DB "famous",0
  29+ E92F 75 73 00
  30+ E932 6E 6F 74 65  GalaxyDescList01E       DB "noted",0
  30+ E936 64 00
  31+ E938 76 65 72 79  GalaxyDescList02A       DB "very",0
  31+ E93C 00
  32+ E93D 6D 69 6C 64  GalaxyDescList02B       DB "mildly",0
  32+ E941 6C 79 00
  33+ E944 6D 6F 73 74  GalaxyDescList02C       DB "most",0
  33+ E948 00
  34+ E949 72 65 61 73  GalaxyDescList02D       DB "reasonably",0
  34+ E94D 6F 6E 61 62
  34+ E951 6C 79 00
  35+ E954 00           GalaxyDescList02E       DB 0
  36+ E955 61 6E 63 69  GalaxyDescList03A       DB "ancient",0
  36+ E959 65 6E 74 00
  37+ E95D 3C 32 30 3E  GalaxyDescList03B       DB "<20>",0
  37+ E961 00
  38+ E962 67 72 65 61  GalaxyDescList03C       DB "great",0
  38+ E966 74 00
  39+ E968 76 61 73 74  GalaxyDescList03D       DB "vast",0
  39+ E96C 00
  40+ E96D 70 69 6E 6B  GalaxyDescList03E       DB "pink",0
  40+ E971 00
  41+ E972 3C 32 39 3E  GalaxyDescList04A       DB "<29> <28> plantations",0
  41+ E976 20 3C 32 38
  41+ E97A 3E 20 70 6C
  41+ E97E 61 6E 74 61
  41+ E982 74 69 6F 6E
  41+ E986 73 00
  42+ E988 6D 6F 75 6E  GalaxyDescList04B       DB "mountains",0
  42+ E98C 74 61 69 6E
  42+ E990 73 00
  43+ E992 3C 32 37 3E  GalaxyDescList04C       DB "<27>",0
  43+ E996 00
  44+ E997 3C 31 39 3E  GalaxyDescList04D       DB "<19> forests",0
  44+ E99B 20 66 6F 72
  44+ E99F 65 73 74 73
  44+ E9A3 00
  45+ E9A4 6F 63 65 61  GalaxyDescList04E       DB "oceans",0
  45+ E9A8 6E 73 00
  46+ E9AB 73 68 79 6E  GalaxyDescList05A       DB "shyness",0
  46+ E9AF 65 73 73 00
  47+ E9B3 73 69 6C 6C  GalaxyDescList05B       DB "silliness",0
  47+ E9B7 69 6E 65 73
  47+ E9BB 73 00
  48+ E9BD 6D 61 74 69  GalaxyDescList05C       DB "mating traditions",0
  48+ E9C1 6E 67 20 74
  48+ E9C5 72 61 64 69
  48+ E9C9 74 69 6F 6E
  48+ E9CD 73 00
  49+ E9CF 6C 6F 61 74  GalaxyDescList05D       DB "loathing of <5>",0
  49+ E9D3 68 69 6E 67
  49+ E9D7 20 6F 66 20
  49+ E9DB 3C 35 3E 00
  50+ E9DF 6C 6F 76 65  GalaxyDescList05E       DB "love for <5>",0
  50+ E9E3 20 66 6F 72
  50+ E9E7 20 3C 35 3E
  50+ E9EB 00
  51+ E9EC 66 6F 6F 64  GalaxyDescList06A       DB "food blenders",0
  51+ E9F0 20 62 6C 65
  51+ E9F4 6E 64 65 72
  51+ E9F8 73 00
  52+ E9FA 74 6F 75 72  GalaxyDescList06B       DB "tourists",0
  52+ E9FE 69 73 74 73
  52+ EA02 00
  53+ EA03 70 6F 65 74  GalaxyDescList06C       DB "poetry",0
  53+ EA07 72 79 00
  54+ EA0A 64 69 73 63  GalaxyDescList06D       DB "discos",0
  54+ EA0E 6F 73 00
  55+ EA11 3C 31 33 3E  GalaxyDescList06E       DB "<13>",0
  55+ EA15 00
  56+ EA16 74 61 6C 6B  GalaxyDescList07A       DB "talking tree",0
  56+ EA1A 69 6E 67 20
  56+ EA1E 74 72 65 65
  56+ EA22 00
  57+ EA23 63 72 61 62  GalaxyDescList07B       DB "crab",0
  57+ EA27 00
  58+ EA28 62 61 74 00  GalaxyDescList07C       DB "bat",0
  59+ EA2C 6C 6F 62 73  GalaxyDescList07D       DB "lobst",0
  59+ EA30 74 00
  60+ EA32 25 52 00     GalaxyDescList07E       DB "%R",0
  61+ EA35 62 65 73 65  GalaxyDescList08A       DB "beset",0
  61+ EA39 74 00
  62+ EA3B 70 6C 61 67  GalaxyDescList08B       DB "plagued",0
  62+ EA3F 75 65 64 00
  63+ EA43 72 61 76 61  GalaxyDescList08C       DB "ravaged",0
  63+ EA47 67 65 64 00
  64+ EA4B 63 75 72 73  GalaxyDescList08D       DB "cursed",0
  64+ EA4F 65 64 00
  65+ EA52 73 63 6F 75  GalaxyDescList08E       DB "scourged",0
  65+ EA56 72 67 65 64
  65+ EA5A 00
  66+ EA5B 3C 32 31 3E  GalaxyDescList09A       DB "<21> civil war",0
  66+ EA5F 20 63 69 76
  66+ EA63 69 6C 20 77
  66+ EA67 61 72 00
  67+ EA6A 3C 32 36 3E  GalaxyDescList09B       DB "<26> <23> <24>s",0
  67+ EA6E 20 3C 32 33
  67+ EA72 3E 20 3C 32
  67+ EA76 34 3E 73 00
  68+ EA7A 61 20 3C 32  GalaxyDescList09C       DB "a <26> disease",0
  68+ EA7E 36 3E 20 64
  68+ EA82 69 73 65 61
  68+ EA86 73 65 00
  69+ EA89 3C 32 31 3E  GalaxyDescList09D       DB "<21> earthquakes",0
  69+ EA8D 20 65 61 72
  69+ EA91 74 68 71 75
  69+ EA95 61 6B 65 73
  69+ EA99 00
  70+ EA9A 3C 32 31 3E  GalaxyDescList09E       DB "<21> solar activity",0
  70+ EA9E 20 73 6F 6C
  70+ EAA2 61 72 20 61
  70+ EAA6 63 74 69 76
  70+ EAAA 69 74 79 00
  71+ EAAE 69 74 73 20  GalaxyDescList10A       DB "its <2> <3>",0
  71+ EAB2 3C 32 3E 20
  71+ EAB6 3C 33 3E 00
  72+ EABA 74 68 65 20  GalaxyDescList10B       DB "the %I <23> <24>",0
  72+ EABE 25 49 20 3C
  72+ EAC2 32 33 3E 20
  72+ EAC6 3C 32 34 3E
  72+ EACA 00
  73+ EACB 69 74 73 20  GalaxyDescList10C       DB "its inhabitants' <25> <4>",0
  73+ EACF 69 6E 68 61
  73+ EAD3 62 69 74 61
  73+ EAD7 6E 74 73 27
  73+ EADB 20 3C 32 35
  73+ EADF 3E 20 3C 34
  73+ EAE3 3E 00
  74+ EAE5 3C 33 32 3E  GalaxyDescList10D       DB "<32>",0
  74+ EAE9 00
  75+ EAEA 69 74 73 20  GalaxyDescList10E       DB "its <12> <13>",0
  75+ EAEE 3C 31 32 3E
  75+ EAF2 20 3C 31 33
  75+ EAF6 3E 00
  76+ EAF8 6A 75 69 63  GalaxyDescList11A       DB "juice",0
  76+ EAFC 65 00
  77+ EAFE 62 72 61 6E  GalaxyDescList11B       DB "brandy",0
  77+ EB02 64 79 00
  78+ EB05 77 61 74 65  GalaxyDescList11C       DB "water",0
  78+ EB09 72 00
  79+ EB0B 62 72 65 77  GalaxyDescList11D       DB "brew",0
  79+ EB0F 00
  80+ EB10 67 61 72 67  GalaxyDescList11E       DB "gargle blasters",0
  80+ EB14 6C 65 20 62
  80+ EB18 6C 61 73 74
  80+ EB1C 65 72 73 00
  81+ EB20 25 52 00     GalaxyDescList12A       DB "%R",0
  82+ EB23 25 49 20 3C  GalaxyDescList12B       DB "%I <24>",0
  82+ EB27 32 34 3E 00
  83+ EB2B 25 49 20 25  GalaxyDescList12C       DB "%I %R",0
  83+ EB2F 52 00
  84+ EB31 25 49 20 3C  GalaxyDescList12D       DB "%I <26>",0
  84+ EB35 32 36 3E 00
  85+ EB39 3C 32 36 3E  GalaxyDescList12E       DB "<26> %R",0
  85+ EB3D 20 25 52 00
  86+ EB41 66 61 62 75  GalaxyDescList13A       DB "fabulous",0
  86+ EB45 6C 6F 75 73
  86+ EB49 00
  87+ EB4A 65 78 6F 74  GalaxyDescList13B       DB "exotic",0
  87+ EB4E 69 63 00
  88+ EB51 68 6F 6F 70  GalaxyDescList13C       DB "hoopy",0
  88+ EB55 79 00
  89+ EB57 75 6E 75 73  GalaxyDescList13D       DB "unusual",0
  89+ EB5B 75 61 6C 00
  90+ EB5F 65 78 63 69  GalaxyDescList13E       DB "exciting",0
  90+ EB63 74 69 6E 67
  90+ EB67 00
  91+ EB68 63 75 69 73  GalaxyDescList14A       DB "cuisine",0
  91+ EB6C 69 6E 65 00
  92+ EB70 6E 69 67 68  GalaxyDescList14B       DB "night life",0
  92+ EB74 74 20 6C 69
  92+ EB78 66 65 00
  93+ EB7B 63 61 73 69  GalaxyDescList14C       DB "casinos",0
  93+ EB7F 6E 6F 73 00
  94+ EB83 73 69 74 20  GalaxyDescList14D       DB "sit coms",0
  94+ EB87 63 6F 6D 73
  94+ EB8B 00
  95+ EB8C 20 3C 33 32  GalaxyDescList14E       DB " <32> ",0
  95+ EB90 3E 20 00
  96+ EB93 25 48 00     GalaxyDescList15A       DB "%H",0
  97+ EB96 54 68 65 20  GalaxyDescList15B       DB "The planet %H",0
  97+ EB9A 70 6C 61 6E
  97+ EB9E 65 74 20 25
  97+ EBA2 48 00
  98+ EBA4 54 68 65 20  GalaxyDescList15C       DB "The world %H",0
  98+ EBA8 77 6F 72 6C
  98+ EBAC 64 20 25 48
  98+ EBB0 00
  99+ EBB1 54 68 69 73  GalaxyDescList15D       DB "This planet",0
  99+ EBB5 20 70 6C 61
  99+ EBB9 6E 65 74 00
 100+ EBBD 54 68 69 73  GalaxyDescList15E       DB "This world",0
 100+ EBC1 20 77 6F 72
 100+ EBC5 6C 64 00
 101+ EBC8 6E 20 75 6E  GalaxyDescList16A       DB "n unremarkable",0
 101+ EBCC 72 65 6D 61
 101+ EBD0 72 6B 61 62
 101+ EBD4 6C 65 00
 102+ EBD7 20 62 6F 72  GalaxyDescList16B       DB " boring",0
 102+ EBDB 69 6E 67 00
 103+ EBDF 20 64 75 6C  GalaxyDescList16C       DB " dull",0
 103+ EBE3 6C 00
 104+ EBE5 20 74 65 64  GalaxyDescList16D       DB " tedious",0
 104+ EBE9 69 6F 75 73
 104+ EBED 00
 105+ EBEE 20 72 65 76  GalaxyDescList16E       DB " revolting",0
 105+ EBF2 6F 6C 74 69
 105+ EBF6 6E 67 00
 106+ EBF9 70 6C 61 6E  GalaxyDescList17A       DB "planet",0
 106+ EBFD 65 74 00
 107+ EC00 77 6F 72 6C  GalaxyDescList17B       DB "world",0
 107+ EC04 64 00
 108+ EC06 70 6C 61 63  GalaxyDescList17C       DB "place",0
 108+ EC0A 65 00
 109+ EC0C 6C 69 74 74  GalaxyDescList17D       DB "little planet",0
 109+ EC10 6C 65 20 70
 109+ EC14 6C 61 6E 65
 109+ EC18 74 00
 110+ EC1A 64 75 6D 70  GalaxyDescList17E       DB "dump",0
 110+ EC1E 00
 111+ EC1F 77 61 73 70  GalaxyDescList18A       DB "wasp",0
 111+ EC23 00
 112+ EC24 6D 6F 74 68  GalaxyDescList18B       DB "moth",0
 112+ EC28 00
 113+ EC29 67 72 75 62  GalaxyDescList18C       DB "grub",0
 113+ EC2D 00
 114+ EC2E 61 6E 74 00  GalaxyDescList18D       DB "ant",0
 115+ EC32 25 52 00     GalaxyDescList18E       DB "%R",0
 116+ EC35 70 6F 65 74  GalaxyDescList19A       DB "poet",0
 116+ EC39 00
 117+ EC3A 61 72 74 73  GalaxyDescList19B       DB "arts graduate",0
 117+ EC3E 20 67 72 61
 117+ EC42 64 75 61 74
 117+ EC46 65 00
 118+ EC48 79 61 6B 00  GalaxyDescList19C       DB "yak",0
 119+ EC4C 73 6E 61 69  GalaxyDescList19D       DB "snail",0
 119+ EC50 6C 00
 120+ EC52 73 6C 75 67  GalaxyDescList19E       DB "slug",0
 120+ EC56 00
 121+ EC57 74 72 6F 70  GalaxyDescList20A       DB "tropical",0
 121+ EC5B 69 63 61 6C
 121+ EC5F 00
 122+ EC60 64 65 6E 73  GalaxyDescList20B       DB "dense",0
 122+ EC64 65 00
 123+ EC66 72 61 69 6E  GalaxyDescList20C       DB "rain",0
 123+ EC6A 00
 124+ EC6B 69 6D 70 65  GalaxyDescList20D       DB "impenetrable",0
 124+ EC6F 6E 65 74 72
 124+ EC73 61 62 6C 65
 124+ EC77 00
 125+ EC78 65 78 75 62  GalaxyDescList20E       DB "exuberant",0
 125+ EC7C 65 72 61 6E
 125+ EC80 74 00
 126+ EC82 66 75 6E 6E  GalaxyDescList21A       DB "funny",0
 126+ EC86 79 00
 127+ EC88 77 69 65 72  GalaxyDescList21B       DB "wierd",0
 127+ EC8C 64 00
 128+ EC8E 75 6E 75 73  GalaxyDescList21C       DB "unusual",0
 128+ EC92 75 61 6C 00
 129+ EC96 73 74 72 61  GalaxyDescList21D       DB "strange",0
 129+ EC9A 6E 67 65 00
 130+ EC9E 70 65 63 75  GalaxyDescList21E       DB "peculiar",0
 130+ ECA2 6C 69 61 72
 130+ ECA6 00
 131+ ECA7 66 72 65 71  GalaxyDescList22A       DB "frequent",0
 131+ ECAB 75 65 6E 74
 131+ ECAF 00
 132+ ECB0 6F 63 63 61  GalaxyDescList22B       DB "occasional",0
 132+ ECB4 73 69 6F 6E
 132+ ECB8 61 6C 00
 133+ ECBB 75 6E 70 72  GalaxyDescList22C       DB "unpredictable",0
 133+ ECBF 65 64 69 63
 133+ ECC3 74 61 62 6C
 133+ ECC7 65 00
 134+ ECC9 64 72 65 61  GalaxyDescList22D       DB "dreadful",0
 134+ ECCD 64 66 75 6C
 134+ ECD1 00
 135+ ECD2 64 65 61 64  GalaxyDescList22E       DB "deadly",0
 135+ ECD6 6C 79 00
 136+ ECD9 3C 31 3E 20  GalaxyDescList23A       DB "<1> <0> for <9>",0
 136+ ECDD 3C 30 3E 20
 136+ ECE1 66 6F 72 20
 136+ ECE5 3C 39 3E 00
 137+ ECE9 3C 31 3E 20  GalaxyDescList23B       DB "<1> <0> for <9> and <9>",0
 137+ ECED 3C 30 3E 20
 137+ ECF1 66 6F 72 20
 137+ ECF5 3C 39 3E 20
 137+ ECF9 61 6E 64 20
 137+ ECFD 3C 39 3E 00
 138+ ED01 3C 37 3E 20  GalaxyDescList23C       DB "<7> by <8>",0
 138+ ED05 62 79 20 3C
 138+ ED09 38 3E 00
 139+ ED0C 3C 31 3E 20  GalaxyDescList23D       DB "<1> <0> for <9> but <7> by <8>",0
 139+ ED10 3C 30 3E 20
 139+ ED14 66 6F 72 20
 139+ ED18 3C 39 3E 20
 139+ ED1C 62 75 74 20
 139+ ED20 3C 37 3E 20
 139+ ED24 62 79 20 3C
 139+ ED28 38 3E 00
 140+ ED2B 61 3C 31 35  GalaxyDescList23E       DB "a<15> <16>",0
 140+ ED2F 3E 20 3C 31
 140+ ED33 36 3E 00
 141+ ED36 3C 32 36 3E  GalaxyDescList24A       DB "<26>",0
 141+ ED3A 00
 142+ ED3B 6D 6F 75 6E  GalaxyDescList24B       DB "mountain",0
 142+ ED3F 74 61 69 6E
 142+ ED43 00
 143+ ED44 65 64 69 62  GalaxyDescList24C       DB "edible",0
 143+ ED48 6C 65 00
 144+ ED4B 74 72 65 65  GalaxyDescList24D       DB "tree",0
 144+ ED4F 00
 145+ ED50 73 70 6F 74  GalaxyDescList24E       DB "spotted",0
 145+ ED54 74 65 64 00
 146+ ED58 3C 33 30 3E  GalaxyDescList25A       DB "<30>",0
 146+ ED5C 00
 147+ ED5D 3C 33 31 3E  GalaxyDescList25B       DB "<31>",0
 147+ ED61 00
 148+ ED62 3C 36 3E 6F  GalaxyDescList25C       DB "<6>oid",0
 148+ ED66 69 64 00
 149+ ED69 3C 31 38 3E  GalaxyDescList25D       DB "<18>",0
 149+ ED6D 00
 150+ ED6E 3C 31 37 3E  GalaxyDescList25E       DB "<17>",0
 150+ ED72 00
 151+ ED73 61 6E 63 69  GalaxyDescList26A       DB "ancient",0
 151+ ED77 65 6E 74 00
 152+ ED7B 65 78 63 65  GalaxyDescList26B       DB "exceptional",0
 152+ ED7F 70 74 69 6F
 152+ ED83 6E 61 6C 00
 153+ ED87 65 63 63 65  GalaxyDescList26C       DB "eccentric",0
 153+ ED8B 6E 74 72 69
 153+ ED8F 63 00
 154+ ED91 69 6E 67 72  GalaxyDescList26D       DB "ingrained",0
 154+ ED95 61 69 6E 65
 154+ ED99 64 00
 155+ ED9B 3C 32 30 3E  GalaxyDescList26E       DB "<20>",0
 155+ ED9F 00
 156+ EDA0 6B 69 6C 6C  GalaxyDescList27A       DB "killer",0
 156+ EDA4 65 72 00
 157+ EDA7 64 65 61 64  GalaxyDescList27B       DB "deadly",0
 157+ EDAB 6C 79 00
 158+ EDAE 65 76 69 6C  GalaxyDescList27C       DB "evil",0
 158+ EDB2 00
 159+ EDB3 6C 65 74 68  GalaxyDescList27D       DB "lethal",0
 159+ EDB7 61 6C 00
 160+ EDBA 76 69 63 69  GalaxyDescList27E       DB "vicious",0
 160+ EDBE 6F 75 73 00
 161+ EDC2 70 61 72 6B  GalaxyDescList28A       DB "parking meters",0
 161+ EDC6 69 6E 67 20
 161+ EDCA 6D 65 74 65
 161+ EDCE 72 73 00
 162+ EDD1 64 75 73 74  GalaxyDescList28B       DB "dust clouds",0
 162+ EDD5 20 63 6C 6F
 162+ EDD9 75 64 73 00
 163+ EDDD 69 63 65 20  GalaxyDescList28C       DB "ice bergs",0
 163+ EDE1 62 65 72 67
 163+ EDE5 73 00
 164+ EDE7 72 6F 63 6B  GalaxyDescList28D       DB "rock formations",0
 164+ EDEB 20 66 6F 72
 164+ EDEF 6D 61 74 69
 164+ EDF3 6F 6E 73 00
 165+ EDF7 76 6F 6C 63  GalaxyDescList28E       DB "volcanoes",0
 165+ EDFB 61 6E 6F 65
 165+ EDFF 73 00
 166+ EE01 70 6C 61 6E  GalaxyDescList29A       DB "plant",0
 166+ EE05 74 00
 167+ EE07 74 75 6C 69  GalaxyDescList29B       DB "tulip",0
 167+ EE0B 70 00
 168+ EE0D 62 61 6E 61  GalaxyDescList29C       DB "banana",0
 168+ EE11 6E 61 00
 169+ EE14 63 6F 72 6E  GalaxyDescList29D       DB "corn",0
 169+ EE18 00
 170+ EE19 25 52 77 65  GalaxyDescList29E       DB "%Rweed",0
 170+ EE1D 65 64 00
 171+ EE20 25 52 00     GalaxyDescList30A       DB "%R",0
 172+ EE23 23 49 20 25  GalaxyDescList30B       DB "#I %R",0
 172+ EE27 52 00
 173+ EE29 23 49 20 3C  GalaxyDescList30C       DB "#I <26>",0
 173+ EE2D 32 36 3E 00
 174+ EE31 69 6E 68 61  GalaxyDescList30D       DB "inhabitant",0
 174+ EE35 62 69 74 61
 174+ EE39 6E 74 00
 175+ EE3C 25 49 20 25  GalaxyDescList30E       DB "%I %R",0
 175+ EE40 52 00
 176+ EE42 73 68 72 65  GalaxyDescList31A       DB "shrew",0
 176+ EE46 77 00
 177+ EE48 62 65 61 73  GalaxyDescList31B       DB "beast",0
 177+ EE4C 74 00
 178+ EE4E 62 69 73 6F  GalaxyDescList31C       DB "bison",0
 178+ EE52 6E 00
 179+ EE54 73 6E 61 6B  GalaxyDescList31D       DB "snake",0
 179+ EE58 65 00
 180+ EE5A 77 6F 6C 66  GalaxyDescList31E       DB "wolf",0
 180+ EE5E 00
 181+ EE5F 6C 65 6F 70  GalaxyDescList32A       DB "leopard",0
 181+ EE63 61 72 64 00
 182+ EE67 63 61 74 00  GalaxyDescList32B       DB "cat",0
 183+ EE6B 6D 6F 6E 6B  GalaxyDescList32C       DB "monkey",0
 183+ EE6F 65 79 00
 184+ EE72 67 6F 61 74  GalaxyDescList32D       DB "goat",0
 184+ EE76 00
 185+ EE77 66 69 73 68  GalaxyDescList32E       DB "fish",0
 185+ EE7B 00
 186+ EE7C 3C 31 31 3E  GalaxyDescList33A       DB "<11> <10>",0
 186+ EE80 20 3C 31 30
 186+ EE84 3E 00
 187+ EE86 23 49 20 3C  GalaxyDescList33B       DB "#I <30> <33>",0
 187+ EE8A 33 30 3E 20
 187+ EE8E 3C 33 33 3E
 187+ EE92 00
 188+ EE93 69 74 73 20  GalaxyDescList33C       DB "its <12> <31> <33>",0
 188+ EE97 3C 31 32 3E
 188+ EE9B 20 3C 33 31
 188+ EE9F 3E 20 3C 33
 188+ EEA3 33 3E 00
 189+ EEA6 3C 33 34 3E  GalaxyDescList33D       DB "<34> <35>",0
 189+ EEAA 20 3C 33 35
 189+ EEAE 3E 00
 190+ EEB0 3C 31 31 3E  GalaxyDescList33E       DB "<11> <10>",0
 190+ EEB4 20 3C 31 30
 190+ EEB8 3E 00
 191+ EEBA 6D 65 61 74  GalaxyDescList34A       DB "meat",0
 191+ EEBE 00
 192+ EEBF 63 75 74 6C  GalaxyDescList34B       DB "cutlet",0
 192+ EEC3 65 74 00
 193+ EEC6 73 74 65 61  GalaxyDescList34C       DB "steak",0
 193+ EECA 6B 00
 194+ EECC 62 75 72 67  GalaxyDescList34D       DB "burgers",0
 194+ EED0 65 72 73 00
 195+ EED4 73 6F 75 70  GalaxyDescList34E       DB "soup",0
 195+ EED8 00
 196+ EED9 69 63 65 00  GalaxyDescList35A       DB "ice",0
 197+ EEDD 6D 75 64 00  GalaxyDescList35B       DB "mud",0
 198+ EEE1 5A 65 72 6F  GalaxyDescList35C       DB "Zero-G",0
 198+ EEE5 2D 47 00
 199+ EEE8 76 61 63 75  GalaxyDescList35D       DB "vacuum",0
 199+ EEEC 75 6D 00
 200+ EEEF 25 49 20 75  GalaxyDescList35E       DB "%I ultra",0
 200+ EEF3 6C 74 72 61
 200+ EEF7 00
 201+ EEF8 68 6F 63 6B  GalaxyDescList36A       DB "hockey",0
 201+ EEFC 65 79 00
 202+ EEFF 63 72 69 63  GalaxyDescList36B       DB "cricket",0
 202+ EF03 6B 65 74 00
 203+ EF07 6B 61 72 61  GalaxyDescList36C       DB "karate",0
 203+ EF0B 74 65 00
 204+ EF0E 70 6F 6C 6F  GalaxyDescList36D       DB "polo",0
 204+ EF12 00
 205+ EF13 74 65 6E 6E  GalaxyDescList36E       DB "tennis",0
 205+ EF17 69 73 00
 206+ EF1A
 207+ EF1A 11 E9 18 E9  GalaxyDescList          DW GalaxyDescList01A, GalaxyDescList01B, GalaxyDescList01C, GalaxyDescList01D, GalaxyDescList01E
 207+ EF1E 20 E9 2B E9
 207+ EF22 32 E9
 208+ EF24 38 E9 3D E9                          DW GalaxyDescList02A, GalaxyDescList02B, GalaxyDescList02C, GalaxyDescList02D, GalaxyDescList02E
 208+ EF28 44 E9 49 E9
 208+ EF2C 54 E9
 209+ EF2E 55 E9 5D E9                          DW GalaxyDescList03A, GalaxyDescList03B, GalaxyDescList03C, GalaxyDescList03D, GalaxyDescList03E
 209+ EF32 62 E9 68 E9
 209+ EF36 6D E9
 210+ EF38 72 E9 88 E9                          DW GalaxyDescList04A, GalaxyDescList04B, GalaxyDescList04C, GalaxyDescList04D, GalaxyDescList04E
 210+ EF3C 92 E9 97 E9
 210+ EF40 A4 E9
 211+ EF42 AB E9 B3 E9                          DW GalaxyDescList05A, GalaxyDescList05B, GalaxyDescList05C, GalaxyDescList05D, GalaxyDescList05E
 211+ EF46 BD E9 CF E9
 211+ EF4A DF E9
 212+ EF4C EC E9 FA E9                          DW GalaxyDescList06A, GalaxyDescList06B, GalaxyDescList06C, GalaxyDescList06D, GalaxyDescList06E
 212+ EF50 03 EA 0A EA
 212+ EF54 11 EA
 213+ EF56 16 EA 23 EA                          DW GalaxyDescList07A, GalaxyDescList07B, GalaxyDescList07C, GalaxyDescList07D, GalaxyDescList07E
 213+ EF5A 28 EA 2C EA
 213+ EF5E 32 EA
 214+ EF60 35 EA 3B EA                          DW GalaxyDescList08A, GalaxyDescList08B, GalaxyDescList08C, GalaxyDescList08D, GalaxyDescList08E
 214+ EF64 43 EA 4B EA
 214+ EF68 52 EA
 215+ EF6A 5B EA 6A EA                          DW GalaxyDescList09A, GalaxyDescList09B, GalaxyDescList09C, GalaxyDescList09D, GalaxyDescList09E
 215+ EF6E 7A EA 89 EA
 215+ EF72 9A EA
 216+ EF74 AE EA BA EA                          DW GalaxyDescList10A, GalaxyDescList10B, GalaxyDescList10C, GalaxyDescList10D, GalaxyDescList10E
 216+ EF78 CB EA E5 EA
 216+ EF7C EA EA
 217+ EF7E F8 EA FE EA                          DW GalaxyDescList11A, GalaxyDescList11B, GalaxyDescList11C, GalaxyDescList11D, GalaxyDescList11E
 217+ EF82 05 EB 0B EB
 217+ EF86 10 EB
 218+ EF88 20 EB 23 EB                          DW GalaxyDescList12A, GalaxyDescList12B, GalaxyDescList12C, GalaxyDescList12D, GalaxyDescList12E
 218+ EF8C 2B EB 31 EB
 218+ EF90 39 EB
 219+ EF92 41 EB 4A EB                          DW GalaxyDescList13A, GalaxyDescList13B, GalaxyDescList13C, GalaxyDescList13D, GalaxyDescList13E
 219+ EF96 51 EB 57 EB
 219+ EF9A 5F EB
 220+ EF9C 68 EB 70 EB                          DW GalaxyDescList14A, GalaxyDescList14B, GalaxyDescList14C, GalaxyDescList14D, GalaxyDescList14E
 220+ EFA0 7B EB 83 EB
 220+ EFA4 8C EB
 221+ EFA6 93 EB 96 EB                          DW GalaxyDescList15A, GalaxyDescList15B, GalaxyDescList15C, GalaxyDescList15D, GalaxyDescList15E
 221+ EFAA A4 EB B1 EB
 221+ EFAE BD EB
 222+ EFB0 C8 EB D7 EB                          DW GalaxyDescList16A, GalaxyDescList16B, GalaxyDescList16C, GalaxyDescList16D, GalaxyDescList16E
 222+ EFB4 DF EB E5 EB
 222+ EFB8 EE EB
 223+ EFBA F9 EB 00 EC                          DW GalaxyDescList17A, GalaxyDescList17B, GalaxyDescList17C, GalaxyDescList17D, GalaxyDescList17E
 223+ EFBE 06 EC 0C EC
 223+ EFC2 1A EC
 224+ EFC4 1F EC 24 EC                          DW GalaxyDescList18A, GalaxyDescList18B, GalaxyDescList18C, GalaxyDescList18D, GalaxyDescList18E
 224+ EFC8 29 EC 2E EC
 224+ EFCC 32 EC
 225+ EFCE 35 EC 3A EC                          DW GalaxyDescList19A, GalaxyDescList19B, GalaxyDescList19C, GalaxyDescList19D, GalaxyDescList19E
 225+ EFD2 48 EC 4C EC
 225+ EFD6 52 EC
 226+ EFD8 57 EC 60 EC                          DW GalaxyDescList20A, GalaxyDescList20B, GalaxyDescList20C, GalaxyDescList20D, GalaxyDescList20E
 226+ EFDC 66 EC 6B EC
 226+ EFE0 78 EC
 227+ EFE2 82 EC 88 EC                          DW GalaxyDescList21A, GalaxyDescList21B, GalaxyDescList21C, GalaxyDescList21D, GalaxyDescList21E
 227+ EFE6 8E EC 96 EC
 227+ EFEA 9E EC
 228+ EFEC A7 EC B0 EC                          DW GalaxyDescList22A, GalaxyDescList22B, GalaxyDescList22C, GalaxyDescList22D, GalaxyDescList22E
 228+ EFF0 BB EC C9 EC
 228+ EFF4 D2 EC
 229+ EFF6 D9 EC E9 EC                          DW GalaxyDescList23A, GalaxyDescList23B, GalaxyDescList23C, GalaxyDescList23D, GalaxyDescList23E
 229+ EFFA 01 ED 0C ED
 229+ EFFE 2B ED
 230+ F000 36 ED 3B ED                          DW GalaxyDescList24A, GalaxyDescList24B, GalaxyDescList24C, GalaxyDescList24D, GalaxyDescList24E
 230+ F004 44 ED 4B ED
 230+ F008 50 ED
 231+ F00A 58 ED 5D ED                          DW GalaxyDescList25A, GalaxyDescList25B, GalaxyDescList25C, GalaxyDescList25D, GalaxyDescList25E
 231+ F00E 62 ED 69 ED
 231+ F012 6E ED
 232+ F014 73 ED 7B ED                          DW GalaxyDescList26A, GalaxyDescList26B, GalaxyDescList26C, GalaxyDescList26D, GalaxyDescList26E
 232+ F018 87 ED 91 ED
 232+ F01C 9B ED
 233+ F01E A0 ED A7 ED                          DW GalaxyDescList27A, GalaxyDescList27B, GalaxyDescList27C, GalaxyDescList27D, GalaxyDescList27E
 233+ F022 AE ED B3 ED
 233+ F026 BA ED
 234+ F028 C2 ED D1 ED                          DW GalaxyDescList28A, GalaxyDescList28B, GalaxyDescList28C, GalaxyDescList28D, GalaxyDescList28E
 234+ F02C DD ED E7 ED
 234+ F030 F7 ED
 235+ F032 01 EE 07 EE                          DW GalaxyDescList29A, GalaxyDescList29B, GalaxyDescList29C, GalaxyDescList29D, GalaxyDescList29E
 235+ F036 0D EE 14 EE
 235+ F03A 19 EE
 236+ F03C 20 EE 23 EE                          DW GalaxyDescList30A, GalaxyDescList30B, GalaxyDescList30C, GalaxyDescList30D, GalaxyDescList30E
 236+ F040 29 EE 31 EE
 236+ F044 3C EE
 237+ F046 42 EE 48 EE                          DW GalaxyDescList31A, GalaxyDescList31B, GalaxyDescList31C, GalaxyDescList31D, GalaxyDescList31E
 237+ F04A 4E EE 54 EE
 237+ F04E 5A EE
 238+ F050 5F EE 67 EE                          DW GalaxyDescList32A, GalaxyDescList32B, GalaxyDescList32C, GalaxyDescList32D, GalaxyDescList32E
 238+ F054 6B EE 72 EE
 238+ F058 77 EE
 239+ F05A 7C EE 86 EE                          DW GalaxyDescList33A, GalaxyDescList33B, GalaxyDescList33C, GalaxyDescList33D, GalaxyDescList33E
 239+ F05E 93 EE A6 EE
 239+ F062 B0 EE
 240+ F064 BA EE BF EE                          DW GalaxyDescList34A, GalaxyDescList34B, GalaxyDescList34C, GalaxyDescList34D, GalaxyDescList34E
 240+ F068 C6 EE CC EE
 240+ F06C D4 EE
 241+ F06E D9 EE DD EE                          DW GalaxyDescList35A, GalaxyDescList35B, GalaxyDescList35C, GalaxyDescList35D, GalaxyDescList35E
 241+ F072 E1 EE E8 EE
 241+ F076 EF EE
 242+ F078 F8 EE FF EE                          DW GalaxyDescList36A, GalaxyDescList36B, GalaxyDescList36C, GalaxyDescList36D, GalaxyDescList36E
 242+ F07C 07 EF 0E EF
 242+ F080 13 EF
 243+ F082
 244+ F082 4C 61 72 67  GalaxyInhabitantDesc1   DB "Large ",0
 244+ F086 65 20 00
 245+ F089 46 69 65 72  GalaxyInhabitantDesc1A  DB "Fierce ",0
 245+ F08D 63 65 20 00
 246+ F091 53 6D 61 6C  GalaxyInhabitantDesc1B  DB "Small ", 0
 246+ F095 6C 20 00
 247+ F098 47 72 65 65  GalaxyInhabitantDesc2   DB "Green ",0
 247+ F09C 6E 20 00
 248+ F09F 52 65 64 20  GalaxyInhabitantDesc2A  DB "Red ",  0
 248+ F0A3 00
 249+ F0A4 59 65 6C 6C  GalaxyInhabitantDesc2B  DB "Yellow ",0
 249+ F0A8 6F 77 20 00
 250+ F0AC 42 6C 75 65  GalaxyInhabitantDesc2C  DB "Blue ",  0
 250+ F0B0 20 00
 251+ F0B2 42 6C 61 63  GalaxyInhabitantDesc2D  DB "Black ",0
 251+ F0B6 6B 20 00
 252+ F0B9 48 61 72 6D  GalaxyInhabitantDesc2E  DB "Harmless ",0
 252+ F0BD 6C 65 73 73
 252+ F0C1 20 00
 253+ F0C3 53 6C 69 6D  GalaxyInhabitantDesc3   DB "Slimy ",0
 253+ F0C7 79 20 00
 254+ F0CA 42 75 67 2D  GalaxyInhabitantDesc3A  DB "Bug-Eyed ", 0
 254+ F0CE 45 79 65 64
 254+ F0D2 20 00
 255+ F0D4 48 6F 72 6E  GalaxyInhabitantDesc3B  DB "Horned ",0
 255+ F0D8 65 64 20 00
 256+ F0DC 42 6F 6E 79  GalaxyInhabitantDesc3C  DB "Bony ",  0
 256+ F0E0 20 00
 257+ F0E2 46 61 74 20  GalaxyInhabitantDesc3D  DB "Fat ",  0
 257+ F0E6 00
 258+ F0E7 46 75 72 72  GalaxyInhabitantDesc3E  DB "Furry ",  0
 258+ F0EB 79 20 00
 259+ F0EE 52 6F 64 65  GalaxyInhabitantDesc4   DB "Rodent",0
 259+ F0F2 6E 74 00
 260+ F0F5 46 72 6F 67  GalaxyInhabitantDesc4A  DB "Frog",      0
 260+ F0F9 00
 261+ F0FA 4C 69 7A 61  GalaxyInhabitantDesc4B  DB "Lizard", 0
 261+ F0FE 72 64 00
 262+ F101 4C 6F 62 73  GalaxyInhabitantDesc4C  DB "Lobster",0
 262+ F105 74 65 72 00
 263+ F109 42 69 72 64  GalaxyInhabitantDesc4D  DB "Bird",  0
 263+ F10D 00
 264+ F10E 48 75 6D 61  GalaxyInhabitantDesc4E  DB "Humanoid", 0
 264+ F112 6E 6F 69 64
 264+ F116 00
 265+ F117 46 65 6C 69  GalaxyInhabitantDesc4F  DB "Feline", 0
 265+ F11B 6E 65 00
 266+ F11E 49 6E 73 65  GalaxyInhabitantDesc4G  DB "Insect",0
 266+ F122 63 74 00
 267+ F125 48 75 6D 61  GalaxyInhabitantHuman   DB "Human Colonal",0
 267+ F129 6E 20 43 6F
 267+ F12D 6C 6F 6E 61
 267+ F131 6C 00
 268+ F133
 269+ F133 82 F0 89 F0  GalaxyInhabitantDesc1Ix DW GalaxyInhabitantDesc1,GalaxyInhabitantDesc1A,GalaxyInhabitantDesc1B
 269+ F137 91 F0
 270+ F139 98 F0 9F F0  GalaxyInhabitantDesc2Ix DW GalaxyInhabitantDesc2,GalaxyInhabitantDesc2A,GalaxyInhabitantDesc2B,GalaxyInhabitantDesc2C,GalaxyInhabitantDesc2D,GalaxyInhabitantDesc2E
 270+ F13D A4 F0 AC F0
 270+ F141 B2 F0 B9 F0
 271+ F145 C3 F0 CA F0  GalaxyInhabitantDesc3Ix DW GalaxyInhabitantDesc3,GalaxyInhabitantDesc3A,GalaxyInhabitantDesc3B,GalaxyInhabitantDesc3C,GalaxyInhabitantDesc3D,GalaxyInhabitantDesc3E
 271+ F149 D4 F0 DC F0
 271+ F14D E2 F0 E7 F0
 272+ F151 EE F0 F5 F0  GalaxyInhabitantDesc4Ix DW GalaxyInhabitantDesc4,GalaxyInhabitantDesc4A,GalaxyInhabitantDesc4B,GalaxyInhabitantDesc4C,GalaxyInhabitantDesc4D,GalaxyInhabitantDesc4E,GalaxyInhabitantDesc4F,GalaxyInhabitantDesc4G
 272+ F155 FA F0 01 F1
 272+ F159 09 F1 0E F1
 272+ F15D 17 F1 1E F1
 273+ F161 25 F1        GalaxyInhabitantHumanIx DW GalaxyInhabitantHuman
 274+ F163 00 00 00...  GalaxySpecies           DS 32
 275+ F183 00                                   DB 0
 276+ F184 00 00 00...  GalaxyPlanetDescription DS 300
 277+ F2B0 00                                   DB 0
 278+ F2B1 00 00 00...  GalaxyPlanetSource      DS 300,0
 279+ F3DD 3C 31 34 3E  GalaxyPlanetDescStarter DB "<14> is <22>",0
 279+ F3E1 20 69 73 20
 279+ F3E5 3C 32 32 3E
 279+ F3E9 00
 280+ F3EA
 281+ F3EA
 282+ F3EA D3           GalaxyExtendedDescs:    DB 211                                                  ; System 211, Galaxy 0                Teorge = Token  1
 283+ F3EB 96                                   DB 150                                                  ; System 150, Galaxy 0, Mission 1       Xeer = Token  2
 284+ F3EC 24                                   DB 36                                                   ; System  36, Galaxy 0, Mission 1   Reesdice = Token  3
 285+ F3ED 1C                                   DB 28                                                   ; System  28, Galaxy 0, Mission 1      Arexe = Token  4
 286+ F3EE FD                                   DB 253                                                  ; System 253, Galaxy 1, Mission 1     Errius = Token  5
 287+ F3EF 4F                                   DB 79                                                   ; System  79, Galaxy 1, Mission 1     Inbibe = Token  6
 288+ F3F0 35                                   DB 53                                                   ; System  53, Galaxy 1, Mission 1      Ausar = Token  7
 289+ F3F1 76                                   DB 118                                                  ; System 118, Galaxy 1, Mission 1     Usleri = Token  8
 290+ F3F2 64                                   DB 100                                                  ; System 100, Galaxy 2                Arredi = Token  9
 291+ F3F3 20                                   DB 32                                                   ; System  32, Galaxy 1, Mission 1     Bebege = Token 10
 292+ F3F4 44                                   DB 68                                                   ; System  68, Galaxy 1, Mission 1     Cearso = Token 11
 293+ F3F5 A4                                   DB 164                                                  ; System 164, Galaxy 1, Mission 1     Dicela = Token 12
 294+ F3F6 DC                                   DB 220                                                  ; System 220, Galaxy 1, Mission 1     Eringe = Token 13
 295+ F3F7 6A                                   DB 106                                                  ; System 106, Galaxy 1, Mission 1     Gexein = Token 14
 296+ F3F8 10                                   DB 16                                                   ; System  16, Galaxy 1, Mission 1     Isarin = Token 15
 297+ F3F9 A2                                   DB 162                                                  ; System 162, Galaxy 1, Mission 1   Letibema = Token 16
 298+ F3FA 03                                   DB 3                                                    ; System   3, Galaxy 1, Mission 1     Maisso = Token 17
 299+ F3FB 6B                                   DB 107                                                  ; System 107, Galaxy 1, Mission 1       Onen = Token 18
 300+ F3FC 1A                                   DB 26                                                   ; System  26, Galaxy 1, Mission 1     Ramaza = Token 19
 301+ F3FD C0                                   DB 192                                                  ; System 192, Galaxy 1, Mission 1     Sosole = Token 20
 302+ F3FE B8                                   DB 184                                                  ; System 184, Galaxy 1, Mission 1     Tivere = Token 21
 303+ F3FF 05                                   DB 5                                                    ; System   5, Galaxy 1, Mission 1     Veriar = Token 22
 304+ F400 65                                   DB 101                                                  ; System 101, Galaxy 2, Mission 1     Xeveon = Token 23
 305+ F401 C1                                   DB 193                                                  ; System 193, Galaxy 1, Mission 1     Orarra = Token 24
 306+ F402 29                                   DB 41                                                   ; System  41, Galaxy 2                Anreer = Token 25
 307+ F403 07                                   DB 7                                                    ; System   7, Galaxy 0                  Lave = Token 26
 308+ F404 2E                                   DB 46                                                   ; System  46, Galaxy 0              Riedquat = Token 27
 309+ F405
 310+ F405                  INCLUDE "./Data/EquipmentEquates.asm"
# file opened: ././Data/EquipmentEquates.asm
   1++F405
   2++F405              EQ_FUEL                 EQU 0
   3++F405              EQ_MISSILE              EQU 1
   4++F405              EQ_CARGO_BAY            EQU 2
   5++F405              EQ_ECM                  EQU 3
   6++F405              EQ_FUEL_SCOOPS          EQU 4
   7++F405              EQ_ESCAPE_POD           EQU 5
   8++F405              EQ_ENERGY_BOMB          EQU 6
   9++F405              EQ_ENERGY_UNIT          EQU 7
  10++F405              EQ_DOCK_COMP            EQU 8
  11++F405              EQ_GAL_DRIVE            EQU 9
  12++F405              EQ_FRONT_PULSE          EQU 10
  13++F405              EQ_REAR_PULSE           EQU 11
  14++F405              EQ_LEFT_PULSE           EQU 12
  15++F405              EQ_RIGHT_PULSE          EQU 13
  16++F405              EQ_FRONT_BEAM           EQU 14
  17++F405              EQ_REAR_BEAM            EQU 15
  18++F405              EQ_LEFT_BEAM            EQU 16
  19++F405              EQ_RIGHT_BEAM           EQU 17
  20++F405              EQ_FRONT_MINING         EQU 18
  21++F405              EQ_REAR_MINING          EQU 19
  22++F405              EQ_LEFT_MINING          EQU 20
  23++F405              EQ_RIGHT_MINING         EQU 21
  24++F405              EQ_FRONT_MILITARY       EQU 22
  25++F405              EQ_REAR_MILITARY        EQU 23
  26++F405              EQ_LEFT_MILITARY        EQU 24
  27++F405              EQ_RIGHT_MILITARY       EQU 25
  28++F405
  29++F405              EQ_ITEM_COUNT           EQU EQ_RIGHT_MILITARY+1
  30++F405
# file closed: ././Data/EquipmentEquates.asm
 311+ F405
 312+ F405              EquipNameTableRowLen    EQU 8
 313+ F405 C8 9A 00 00  ShipEquipNameTable      DW  WordFuel,       0,              0,          0
 313+ F409 00 00 00 00
 314+ F40D 7D 9D 00 00                          DW  WordMissile,    0,              0,          0
 314+ F411 00 00 00 00
 315+ F415 AD 9A BE 9A                          DW  WordLarge,      WordCargo,      WordBay,    0
 315+ F419 C4 9A 00 00
 316+ F41D D4 9A DB 9A                          DW  WordECM,        WordSystem,     0,          0
 316+ F421 00 00 00 00
 317+ F425 C8 9A CD 9A                          DW  WordFuel,       WordScoops,     0,          0
 317+ F429 00 00 00 00
 318+ F42D B3 9A BA 9A                          DW  WordEscape,     WordPod,        0,          0
 318+ F431 00 00 00 00
 319+ F435 E2 9A E9 9A                          DW  WordEnergy,     WordBomb,       0,          0
 319+ F439 00 00 00 00
 320+ F43D 47 9B E2 9A                          DW  WordExtra,      WordEnergy,     WordUnit,   0
 320+ F441 15 9B 00 00
 321+ F445 21 9B 29 9B                          DW  WordDocking,    WordComputers,  0,          0
 321+ F449 00 00 00 00
 322+ F44D 3E 9B 85 9D                          DW  WordGalactic,   WordHyperdrive, 0,          0
 322+ F451 00 00 00 00
 323+ F455 97 9A F4 9A                          DW  WordFront,      WordPulse,      WordLaser,  0
 323+ F459 EE 9A 00 00
 324+ F45D A8 9A F4 9A                          DW  WordRear,       WordPulse,      WordLaser,  0
 324+ F461 EE 9A 00 00
 325+ F465 A3 9A F4 9A                          DW  WordLeft,       WordPulse,      WordLaser,  0
 325+ F469 EE 9A 00 00
 326+ F46D 9D 9A F4 9A                          DW  WordRight,      WordPulse,      WordLaser,  0
 326+ F471 EE 9A 00 00
 327+ F475 97 9A FA 9A                          DW  WordFront,      WordBeam,       WordLaser,  0
 327+ F479 EE 9A 00 00
 328+ F47D A8 9A FA 9A                          DW  WordRear,       WordBeam,       WordLaser,  0
 328+ F481 EE 9A 00 00
 329+ F485 A3 9A FA 9A                          DW  WordLeft,       WordBeam,       WordLaser,  0
 329+ F489 EE 9A 00 00
 330+ F48D 9D 9A FA 9A                          DW  WordRight,      WordBeam,       WordLaser,  0
 330+ F491 EE 9A 00 00
 331+ F495 97 9A 07 9B                          DW  WordFront,      WordMining,     WordLaser,  0
 331+ F499 EE 9A 00 00
 332+ F49D A8 9A 07 9B                          DW  WordRear,       WordMining,     WordLaser,  0
 332+ F4A1 EE 9A 00 00
 333+ F4A5 A3 9A 07 9B                          DW  WordLeft,       WordMining,     WordLaser,  0
 333+ F4A9 EE 9A 00 00
 334+ F4AD 9D 9A 07 9B                          DW  WordRight,      WordMining,     WordLaser,  0
 334+ F4B1 EE 9A 00 00
 335+ F4B5 97 9A 90 9D                          DW  WordFront,      WordMilitary,   WordLaser,  0
 335+ F4B9 EE 9A 00 00
 336+ F4BD A8 9A 90 9D                          DW  WordRear,       WordMilitary,   WordLaser,  0
 336+ F4C1 EE 9A 00 00
 337+ F4C5 A3 9A 90 9D                          DW  WordLeft,       WordMilitary,   WordLaser,  0
 337+ F4C9 EE 9A 00 00
 338+ F4CD 9D 9A 90 9D                          DW  WordRight,      WordMilitary,   WordLaser,  0
 338+ F4D1 EE 9A 00 00
 339+ F4D5
 340+ F4D5              ;Each row is 7 bytes
 341+ F4D5              ;                                                               12345  6  789012345678901
 342+ F4D5              ;	canbuy;
 343+ F4D5              ;	y;
 344+ F4D5              ;	show;
 345+ F4D5              ;	level;
 346+ F4D5              ;	price 2 bytes;
 347+ F4D5              ;	type;
 348+ F4D5              ;ShipFrontWeapons        DB EQ_FRONT_PULSE,  EQ_FRONT_PULSE,     EQ_FRONT_MINING,    EQ_FRONT_MINING
 349+ F4D5              ;ShipRearWeapons         DB EQ_REAR_PULSE,   EQ_REAR_PULSE,      EQ_REAR_MINING,     EQ_REAR_MINING
 350+ F4D5              ;ShipLeftWeapons         DB EQ_LEFT_PULSE,   EQ_LEFT_PULSE,      EQ_LEFT_MINING,     EQ_LEFT_MINING
 351+ F4D5              ;ShipRightWeapons        DB EQ_RIGHT_PULSE,  EQ_RIGHT_PULSE,     EQ_RIGHT_MINING,    EQ_RIGHT_MINING
 352+ F4D5              ;                           c  y  s  t
 353+ F4D5              ;                           a  p  h  e                                            fi     P
 354+ F4D5              ;                           n  o  o  c                                            tt     o
 355+ F4D5              ;                           B  s  w  h  price                  type               ed     s
 356+ F4D5 00 00 01 01  ShipEquipmentList       DB  0, 0, 1, 1, low     2, high     2, EQ_FUEL          , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 356+ F4D9 02 00 00 00
 356+ F4DD FF 00 00 00
 356+ F4E1 00 00 00 00
 357+ F4E5 00 01 01 01                          DB  0, 1, 1, 1, low   300, high   300, EQ_MISSILE       , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 357+ F4E9 2C 01 01 00
 357+ F4ED FF 00 00 00
 357+ F4F1 00 00 00 00
 358+ F4F5 00 02 01 01                          DB  0, 2, 1, 1, low  4000, high  4000, EQ_CARGO_BAY     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 358+ F4F9 A0 0F 02 00
 358+ F4FD FF 00 00 00
 358+ F501 00 00 00 00
 359+ F505 00 03 01 02                          DB  0, 3, 1, 2, low  6000, high  6000, EQ_ECM           , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 359+ F509 70 17 03 00
 359+ F50D FF 00 00 00
 359+ F511 00 00 00 00
 360+ F515 00 04 01 05                          DB  0, 4, 1, 5, low  5250, high  5250, EQ_FUEL_SCOOPS   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 360+ F519 82 14 04 00
 360+ F51D FF 00 00 00
 360+ F521 00 00 00 00
 361+ F525 00 05 01 06                          DB  0, 5, 1, 6, low 10000, high 10000, EQ_ESCAPE_POD    , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 361+ F529 10 27 05 00
 361+ F52D FF 00 00 00
 361+ F531 00 00 00 00
 362+ F535 00 06 01 07                          DB  0, 6, 1, 7, low  9000, high  9000, EQ_ENERGY_BOMB   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 362+ F539 28 23 06 00
 362+ F53D FF 00 00 00
 362+ F541 00 00 00 00
 363+ F545 00 07 01 08                          DB  0, 7, 1, 8, low 15000, high 15000, EQ_ENERGY_UNIT   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 363+ F549 98 3A 07 00
 363+ F54D FF 00 00 00
 363+ F551 00 00 00 00
 364+ F555 00 08 01 09                          DB  0, 8, 1, 9, low 15000, high 15000, EQ_DOCK_COMP     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 364+ F559 98 3A 08 00
 364+ F55D FF 00 00 00
 364+ F561 00 00 00 00
 365+ F565 00 09 01 0A                          DB  0, 9, 1,10, low 50000, high 50000, EQ_GAL_DRIVE     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 365+ F569 50 C3 09 00
 365+ F56D FF 00 00 00
 365+ F571 00 00 00 00
 366+ F575 00 0A 01 03                          DB  0,10, 1, 3, low  4000, high  4000, EQ_FRONT_PULSE   , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 366+ F579 A0 0F 0A 00
 366+ F57D 00 00 00 00
 366+ F581 00 00 00 00
 367+ F585 00 0B 01 03                          DB  0,11, 1, 3, low  4000, high  4000, EQ_REAR_PULSE    , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 367+ F589 A0 0F 0B 00
 367+ F58D 01 00 00 00
 367+ F591 00 00 00 00
 368+ F595 00 0C 01 03                          DB  0,12, 1, 3, low  4000, high  4000, EQ_LEFT_PULSE    , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 368+ F599 A0 0F 0C 00
 368+ F59D 02 00 00 00
 368+ F5A1 00 00 00 00
 369+ F5A5 00 0D 01 03                          DB  0,13, 1, 3, low  4000, high  4000, EQ_RIGHT_PULSE   , 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 369+ F5A9 A0 0F 0D 00
 369+ F5AD 03 00 00 00
 369+ F5B1 00 00 00 00
 370+ F5B5 00 0E 00 04                          DB  0,14, 0, 4, low 10000, high 10000, EQ_FRONT_BEAM    , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 370+ F5B9 10 27 0E 00
 370+ F5BD 00 00 00 00
 370+ F5C1 00 00 00 00
 371+ F5C5 00 0F 00 04                          DB  0,15, 0, 4, low 10000, high 10000, EQ_REAR_BEAM     , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 371+ F5C9 10 27 0F 00
 371+ F5CD 01 00 00 00
 371+ F5D1 00 00 00 00
 372+ F5D5 00 10 00 04                          DB  0,16, 0, 4, low 10000, high 10000, EQ_LEFT_BEAM     , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 372+ F5D9 10 27 10 00
 372+ F5DD 02 00 00 00
 372+ F5E1 00 00 00 00
 373+ F5E5 00 11 00 04                          DB  0,17, 0, 4, low 10000, high 10000, EQ_RIGHT_BEAM    , 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 373+ F5E9 10 27 11 00
 373+ F5ED 03 00 00 00
 373+ F5F1 00 00 00 00
 374+ F5F5 00 12 00 0A                          DB  0,18, 0,10, low  8000, high  8000, EQ_FRONT_MINING  , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 374+ F5F9 40 1F 12 00
 374+ F5FD 00 00 00 00
 374+ F601 00 00 00 00
 375+ F605 00 13 00 0A                          DB  0,19, 0,10, low  8000, high  8000, EQ_REAR_MINING   , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 375+ F609 40 1F 13 00
 375+ F60D 01 00 00 00
 375+ F611 00 00 00 00
 376+ F615 00 14 00 0A                          DB  0,20, 0,10, low  8000, high  8000, EQ_LEFT_MINING   , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 376+ F619 40 1F 14 00
 376+ F61D 02 00 00 00
 376+ F621 00 00 00 00
 377+ F625 00 15 00 0A                          DB  0,21, 0,10, low  8000, high  8000, EQ_RIGHT_MINING  , 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 377+ F629 40 1F 15 00
 377+ F62D 03 00 00 00
 377+ F631 00 00 00 00
 378+ F635 00 16 00 0A                          DB  0,22, 0,10, low 60000, high 60000, EQ_FRONT_MILITARY, 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 378+ F639 60 EA 16 00
 378+ F63D 00 00 00 00
 378+ F641 00 00 00 00
 379+ F645 00 17 00 0A                          DB  0,23, 0,10, low 60000, high 60000, EQ_REAR_MILITARY , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 379+ F649 60 EA 17 00
 379+ F64D 01 00 00 00
 379+ F651 00 00 00 00
 380+ F655 00 18 00 0A                          DB  0,24, 0,10, low 60000, high 60000, EQ_LEFT_MILITARY , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 380+ F659 60 EA 18 00
 380+ F65D 02 00 00 00
 380+ F661 00 00 00 00
 381+ F665 00 19 00 0A                          DB  0,25, 0,10, low 60000, high 60000, EQ_RIGHT_MILITARY, 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 381+ F669 60 EA 19 00
 381+ F66D 03 00 00 00
 381+ F671 00 00 00 00
 382+ F675              ShipEquipTableRowLen    EQU 16
 383+ F675              ShipEquipTableSize      EQU ($-ShipEquipmentList)/ShipEquipTableRowLen
 384+ F675
 385+ F675              ;------------------------------------------------------------------------------------------------------------------------------------
 386+ F675 2B           GalaxyRandSeed			DB	43	            ; Just some start values
 387+ F676 20           GalaxyRandSeed1			DB	32	            ; Just some start values
 388+ F677 0C           GalaxyRandSeed2			DB	12	            ; Just some start values
 389+ F678 42           GalaxyRandSeed3			DB	66	            ; Just some start values
 390+ F679              GalaxySeedRandom:
 391+ F679              ;------------------------------------------------------------------------------------------------------------------------------------
 392+ F679 CD A5 97     GetDigramGalaxySeed:    call	copy_galaxy_to_working
 393+ F67C 18 03                                jr		GetDigramWorkingSeed
 394+ F67E CD BD 97     GetDigramSystemSeed:    call	copy_system_to_working
 395+ F681 11 BB 9F     GetDigramWorkingSeed:   ld		de,name_expanded    ; ">GetDigram a = digram seed"
 396+ F684 06 03                                ld		b,3
 397+ F686 3A B9 93                             ld		a,(WorkingSeeds)
 398+ F689 E6 40                                and		$40
 399+ F68B 28 03                                jr		z,.SmallSizeName
 400+ F68D CD DC 9F     .LargeSizeName:         call	NamingLoop
 401+ F690 CD DC 9F     .SmallSizeName:         call	NamingLoop
 402+ F693 CD DC 9F                             call	NamingLoop
 403+ F696 CD DC 9F                             call	NamingLoop
 404+ F699 EB           .DoneName:              ex		de,hl
 405+ F69A 36 00                                ld		(hl),0
 406+ F69C EB                                   ex		de,hl
 407+ F69D C9                                   ret
 408+ F69E
 409+ F69E 11 75 F6     GalaxySetSeedFromHL:    ld      de,GalaxyRandSeed
 410+ F6A1              ; Uses registers a,b and hl
 411+ F6A1 B7           GalaxyDoRandom:         or      a                                               ; in 6502 this is called after a bcc instruction to will always be clear (see .detok2 and .dt6)
 412+ F6A2 3A 75 F6                             ld      a,(GalaxyRandSeed)
 413+ F6A5 CB 17        .Seed0Rolled:           rl      a                                               ; r0 << 1
 414+ F6A7 47                                   ld      b,a                                             ; b = reg x in 6502 so x = r0 << 1
 415+ F6A8 21 77 F6     .AddSeed2               ld      hl,GalaxyRandSeed2                              ;
 416+ F6AB 8E                                   adc     a,(hl)                                          ; a = r0 << 1 + r2
 417+ F6AC 32 75 F6     .SetRandSeed0:          ld		(GalaxyRandSeed),a					            ; set r0' = (r0 << 1) +  r2 + (r0 bit 7)
 418+ F6AF 78                                   ld      a,b
 419+ F6B0 32 77 F6     .SetRandSeed2:          ld      (GalaxyRandSeed2),a                             ; set r2' =  r0 << 1
 420+ F6B3 3A 76 F6     .GetRandSeed1:          ld      a,(GalaxyRandSeed1)
 421+ F6B6 47                                   ld      b,a                                             ; b = r1
 422+ F6B7 21 78 F6                             ld      hl,GalaxyRandSeed3
 423+ F6BA 8E                                   adc     a,(hl)                                          ; Adc from before may have set carry flag or may not, will be set if r0 << 1 + r2 + carry > 256
 424+ F6BB 32 76 F6                             ld      (GalaxyRandSeed1),a                             ; set r1' = r1 + r3 + carry
 425+ F6BE 4F                                   ld      c,a
 426+ F6BF 78                                   ld      a,b
 427+ F6C0 32 78 F6                             ld      (GalaxyRandSeed3),a                             ; set r3 = r1
 428+ F6C3 79                                   ld      a,c
 429+ F6C4 C9                                   ret
 430+ F6C5
 431+ F6C5              ;------------------------------------------------------------------------------------------------------------------------------------
 432+ F6C5 ED 31        galaxy_cpy_str_a_at_hl_to_de:add     hl,a
 433+ F6C7 ED 31                                add     hl,a
 434+ F6C9 7E                                   ld      a,(hl)              ;  Fetch low byte
 435+ F6CA 47                                   ld      b,a
 436+ F6CB 23                                   inc     hl
 437+ F6CC 7E                                   ld      a,(hl)              ;  Fetch high byte
 438+ F6CD 68                                   ld      l,b
 439+ F6CE 67                                   ld      h,a
 440+ F6CF 7E           GalaxyCopyLoop:         ld      a,(hl)
 441+ F6D0 FE 00                                cp      0
 442+ F6D2 C8                                   ret     z
 443+ F6D3 12                                   ld      (de),a
 444+ F6D4 23                                   inc     hl
 445+ F6D5 13                                   inc     de
 446+ F6D6 18 F7                                jr      GalaxyCopyLoop
 447+ F6D8              ;------------------------------------------------------------------------------------------------------------------------------------
 448+ F6D8 11 63 F1     galaxy_get_species:     ld      de,GalaxySpecies
 449+ F6DB 3E 28                                ld      a,"("
 450+ F6DD 12                                   ld      (de),a
 451+ F6DE 13                                   inc     de
 452+ F6DF 3A FB E8                             ld      a,(GalaxyWorkingSeed+4)
 453+ F6E2 CB 7F                                bit     7,a
 454+ F6E4 20 0A                                jr      nz,.NonHuman
 455+ F6E6 21 61 F1                             ld      hl,GalaxyInhabitantHumanIx
 456+ F6E9 AF                                   xor     a
 457+ F6EA CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 458+ F6ED C3 4B F7                             jp      .galaxy_species_exit
 459+ F6F0 3A FC E8     .NonHuman:              ld      a,(GalaxyWorkingSeed+5)
 460+ F6F3 CB 3F                                srl     a
 461+ F6F5 CB 3F                                srl     a
 462+ F6F7 E6 07                                and     $07
 463+ F6F9 FE 03                                cp      3
 464+ F6FB 30 0A                                jr      nc,.NotDesc1
 465+ F6FD 21 33 F1                             ld      hl,GalaxyInhabitantDesc1Ix
 466+ F700 CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 467+ F703 3E 20                                ld      a," "
 468+ F705 12                                   ld      (de),a
 469+ F706 13                                   inc     de
 470+ F707 3A FC E8     .NotDesc1:              ld      a,(GalaxyWorkingSeed+5)
 471+ F70A CB 3F                                srl     a
 472+ F70C CB 3F                                srl     a
 473+ F70E CB 3F                                srl     a
 474+ F710 CB 3F                                srl     a
 475+ F712 CB 3F                                srl     a
 476+ F714 FE 06                                cp      6
 477+ F716 30 0A                                jr      nc,.NotDesc2
 478+ F718 21 39 F1                             ld      hl,GalaxyInhabitantDesc2Ix
 479+ F71B CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 480+ F71E 3E 20                                ld      a," "
 481+ F720 12                                   ld      (de),a
 482+ F721 13                                   inc     de
 483+ F722 3A F8 E8     .NotDesc2:              ld      a,(GalaxyWorkingSeed+1)
 484+ F725 47                                   ld      b,a
 485+ F726 3A FA E8                             ld      a,(GalaxyWorkingSeed+3)
 486+ F729 A8                                   xor     b
 487+ F72A E6 07                                and     $07
 488+ F72C F5                                   push    af
 489+ F72D FE 06                                cp      6
 490+ F72F 30 0A                                jr      nc,.NotDesc3
 491+ F731 21 45 F1                             ld      hl,GalaxyInhabitantDesc3Ix
 492+ F734 CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 493+ F737 3E 20                                ld      a," "
 494+ F739 12                                   ld      (de),a
 495+ F73A 13                                   inc     de
 496+ F73B F1           .NotDesc3:              pop     af
 497+ F73C 47                                   ld      b,a
 498+ F73D 3A FC E8                             ld      a,(GalaxyWorkingSeed+5)
 499+ F740 E6 03                                and     $03
 500+ F742 80                                   add     a,b
 501+ F743 E6 07                                and     $07
 502+ F745 21 51 F1                             ld      hl,GalaxyInhabitantDesc4Ix
 503+ F748 CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 504+ F74B 3E 73        .galaxy_species_exit:   ld      a,"s"
 505+ F74D 12                                   ld      (de),a
 506+ F74E 13                                   inc     de
 507+ F74F 3E 29                                ld      a,")"
 508+ F751 12                                   ld      (de),a
 509+ F752 13                                   inc     de
 510+ F753 AF                                   xor     a
 511+ F754 12                                   ld      (de),a
 512+ F755 C9                                   ret
 513+ F756
 514+ F756
 515+ F756              ; To copy seed, loops from 3 to 0
 516+ F756              ; copy seed X + 2 to target X
 517+ F756              ; x = x -1
 518+ F756
 519+ F756              ; For lave we shoudl have "Lave is most famous for its vast rain forests and the Lavian tree grub"
 520+ F756
 521+ F756              GalaxyCapitaliseString: ; ">CapitaliseString hl = address"
 522+ F756 23                                   inc		hl
 523+ F757 7E                                   ld		a,(hl)
 524+ F758 FE 00                                cp		0
 525+ F75A C8                                   ret		z
 526+ F75B FE 5B                                cp		'Z'+1
 527+ F75D 30 F7                                jr		nc,GalaxyCapitaliseString
 528+ F75F FE 41                                cp		'A'
 529+ F761 38 F3                                jr		c,GalaxyCapitaliseString
 530+ F763 C6 20        .LowerCase:             add		a,'a'-'A'
 531+ F765 77                                   ld		(hl),a
 532+ F766 18 EE                                jr		GalaxyCapitaliseString
 533+ F768
 534+ F768
 535+ F768              GalaxyGoatSoup:         ;ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 536+ F768                                      ;call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 537+ F768                                      ;cp      $FF
 538+ F768                                      ;jr      z,.NoSystemFound
 539+ F768 3A BB 93     .SeedGalaxy             ld      a,(WorkingSeeds+2)                              ;
 540+ F76B 32 75 F6                             ld      (GalaxyRandSeed),a                              ; r0 = Seed C
 541+ F76E 3A BC 93                             ld      a,(WorkingSeeds+3)                              ;
 542+ F771 32 76 F6                             ld      (GalaxyRandSeed1),a                             ; r1 = Seeed D
 543+ F774 3A BD 93                             ld      a,(WorkingSeeds+4)                              ;
 544+ F777 32 77 F6                             ld      (GalaxyRandSeed2),a                             ; r2 = Seed E
 545+ F77A 3A BE 93                             ld      a,(WorkingSeeds+5)                              ;
 546+ F77D 32 78 F6                             ld      (GalaxyRandSeed3),a                             ; r3 = Seed F
 547+ F780 C9                                   ret
 548+ F781              ; For later......
 549+ F781 3E 05        .MarkExtendedDesc:      ld      a,5                                             ;  ("{lower case}{justify}{single cap}[86-90] IS [140-144].{cr}{left align}"
 550+ F783 F5           .GalaxyExpandDesc:      push    af
 551+ F784 47                                   ld      b,a                                             ; b = 6502 X reg
 552+ F785 C5                                   push    bc                                              ; save Y reg
 553+ F786
 554+ F786              ;------------------------------------------------------------------------------------------------------------------------------------
 555+ F786              ; We enter here with BC = the Y and X Coordinates of the system to select in this galaxy
 556+ F786              ; This is based on the docked BBC PDesc Pink Volcanoes version ratehr tha goat soup
 557+ F786 ED 43 5B E8  GalaxyPinkVolcano:      ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 558+ F78A CD 55 FC                             call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 559+ F78D                                      ;cp      $FF
 560+ F78D                                      ;jr      z,.NoSystemFound
 561+ F78D              .SpecialDescs:          ; this is not implemented yet to read GalaxyExtendedDescs look at .PDL1
 562+ F78D
 563+ F78D
 564+ F78D
 565+ F78D              ;.NoSytemFound:          Print the "Unable to identify a system at present position"
 566+ F78D
 567+ F78D 00 00 00...  GalaxyNameCopy          DS      30
 568+ F7AB
 569+ F7AB 1E 00        ExpandAtHLToE:          ld      e,0
 570+ F7AD 7E           .ExpandTokenLoop:       ld      a,(hl)
 571+ F7AE FE 3E                                cp      ">"
 572+ F7B0 C8                                   ret     z
 573+ F7B1 23                                   inc     hl
 574+ F7B2 16 0A                                ld      d,10
 575+ F7B4 ED 30                                mul
 576+ F7B6 D6 30                                sub     "0"
 577+ F7B8 83                                   add     a,e
 578+ F7B9 5F                                   ld      e,a
 579+ F7BA 18 F1                                jr      .ExpandTokenLoop
 580+ F7BC
 581+ F7BC E5           SelectTokenToHL:        push    hl                                          ;+1
 582+ F7BD C5                                   push    bc                                          ;+2
 583+ F7BE CD A1 F6                             call    GalaxyDoRandom
 584+ F7C1 C1                                   pop     bc                                          ;+1
 585+ F7C2 E1                                   pop     hl                                          ;+0
 586+ F7C3 16 00        .CalcOptionAToD:        ld      d,0
 587+ F7C5 FE 33                                cp      $33
 588+ F7C7 DA CB F7                             jp      c,.Check66
 589+ F7CA 14           .IsGTE33:               inc     d
 590+ F7CB FE 66        .Check66:               cp      $66
 591+ F7CD DA D1 F7                             jp      c,.Check99
 592+ F7D0 14           .IsGTE66:               inc     d
 593+ F7D1 FE 99        .Check99:               cp      $99
 594+ F7D3 DA D7 F7     .IsGTE99:               jp      c,.CheckCC
 595+ F7D6 14                                   inc     d
 596+ F7D7 FE CC        .CheckCC:               cp      $CC
 597+ F7D9 38 01                                jr      c,.TokenIdToAddress
 598+ F7DB 14           .ItGETCC:               inc     d
 599+ F7DC 21 1A EF     .TokenIdToAddress:      ld      hl,GalaxyDescList
 600+ F7DF 7B                                   ld      a,e
 601+ F7E0 CB 27                                sla     a                                               ; x 2
 602+ F7E2 ED 31                                add     hl,a                                            ; hl + a * 2
 603+ F7E4 ED 31                                add     hl,a                                            ; hl + a * 4
 604+ F7E6 ED 31                                add     hl,a                                            ; hl + a * 6
 605+ F7E8 ED 31                                add     hl,a                                            ; hl + a * 8
 606+ F7EA ED 31                                add     hl,a                                            ; hl + a * 10
 607+ F7EC 7A                                   ld      a,d
 608+ F7ED ED 31                                add     hl,a
 609+ F7EF ED 31                                add     hl,a                                            ; hl = desc array [e][d]
 610+ F7F1 7E           .LookUpDataFromTable:   ld      a,(hl)
 611+ F7F2 DD 6F                                ld      ixl,a
 612+ F7F4 23                                   inc     hl
 613+ F7F5 7E                                   ld      a,(hl)
 614+ F7F6 DD 67                                ld      ixh,a                                           ; ix = address at (hl)
 615+ F7F8 DD E5                                push    ix                                              ;+2
 616+ F7FA E1                                   pop     hl                                              ;+1
 617+ F7FB C9                                   ret
 618+ F7FC              ;------------------------------------------------------------------------------------------------------------------------------------
 619+ F7FC E5           ProcessHSymbol:         push    hl                                              ;+1
 620+ F7FD D5                                   push    de                                              ;+2
 621+ F7FE C5                                   push    bc                                              ;+3
 622+ F7FF 21 8D F7     .CopyInNameH:           ld      hl, GalaxyNameCopy
 623+ F802 FD 54                                ld      d,iyh
 624+ F804 FD 5D                                ld      e,iyl
 625+ F806 CD CF F6                             call    GalaxyCopyLoop
 626+ F809 FD 62                                ld      iyh,d
 627+ F80B FD 6B                                ld      iyl,e
 628+ F80D C1                                   pop     bc                                              ;+2
 629+ F80E D1                                   pop     de                                              ;+1
 630+ F80F E1                                   pop     hl
 631+ F810 C9                                   ret
 632+ F811              ;------------------------------------------------------------------------------------------------------------------------------------
 633+ F811 E5           ProcessISymbol:         push    hl                                              ;+1
 634+ F812 D5                                   push    de                                              ;+2
 635+ F813 C5                                   push    bc                                              ;+3
 636+ F814 21 8D F7     .CopyInNameI:           ld      hl, GalaxyNameCopy
 637+ F817 FD 54                                ld      d,iyh
 638+ F819 FD 5D                                ld      e,iyl
 639+ F81B CD CF F6                             call    GalaxyCopyLoop
 640+ F81E FD 62                                ld      iyh,d
 641+ F820 FD 6B                                ld      iyl,e
 642+ F822 3E 69                                ld      a,"i"
 643+ F824 EB                                   ex      de,hl
 644+ F825 77                                   ld      (hl),a
 645+ F826 23                                   inc     hl
 646+ F827 3E 61                                ld      a,"a"
 647+ F829 77                                   ld      (hl),a
 648+ F82A 23                                   inc     hl
 649+ F82B 3E 6E                                ld      a,"n"
 650+ F82D 77                                   ld      (hl),a
 651+ F82E 23                                   inc     hl
 652+ F82F E5                                   push    hl
 653+ F830 FD E1                                pop     iy
 654+ F832 C1                                   pop     bc                                              ;+2
 655+ F833 D1                                   pop     de                                              ;+1
 656+ F834 E1                                   pop     hl                                              ;+0
 657+ F835 C9                                   ret
 658+ F836              ;------------------------------------------------------------------------------------------------------------------------------------
 659+ F836 E5           ProcessRSymbol:         push    hl                                              ;+1
 660+ F837 D5                                   push    de                                              ;+2
 661+ F838 CD A1 F6                             call    GalaxyDoRandom ;(Correct one or do we use teh clear carry version?)
 662+ F83B E6 03                                and     $03
 663+ F83D 47                                   ld      b,a
 664+ F83E 04                                   inc     b
 665+ F83F AF                                   xor     a
 666+ F840 4F                                   ld      c,a
 667+ F841 C5           .RLoop:                 push    bc                                              ;+3
 668+ F842 CD A1 F6                             call    GalaxyDoRandom
 669+ F845 C1                                   pop     bc                                              ;+2
 670+ F846 E6 3E                                and     $3E
 671+ F848 21 9F E8                             ld      hl,GalaxyName_digrams
 672+ F84B ED 31                                add     hl,a
 673+ F84D 7E                                   ld      a,(hl)
 674+ F84E FE 41                                cp      "A"
 675+ F850 38 01                                jr      c,.NotLowercase
 676+ F852 81                                   add     a,c
 677+ F853 FD 77 00     .NotLowercase:          ld      (iy+0),a
 678+ F856 23                                   inc     hl
 679+ F857 FD 23                                inc     iy
 680+ F859 0E 20                                ld      c,$20               ; fixed force to lower case
 681+ F85B 7E                                   ld      a,(hl)
 682+ F85C FE 41                                cp      "A"
 683+ F85E 38 01                                jr      c,.NotLowercase2
 684+ F860 81                                   add     a,c
 685+ F861 FD 77 00     .NotLowercase2:         ld      (iy+0),a
 686+ F864 FD 23                                inc     iy
 687+ F866 10 D9                                djnz    .RLoop
 688+ F868 D1                                   pop     de                                              ;+1
 689+ F869 E1                                   pop     hl                                              ;+0
 690+ F86A C9                                   ret
 691+ F86B              ;------------------------------------------------------------------------------------------------------------------------------------
 692+ F86B ED 43 5B E8  GalaxyGenerateDesc:     ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 693+ F86F CD 55 FC                             call    galaxy_system_under_cursor
 694+ F872 CD BB FA     .CopySystemName:        call    galaxy_digram_seed                              ; make a local copy of system name
 695+ F875 21 7E E8                             ld      hl,GalaxyExpandedName
 696+ F878 11 8D F7                             ld      de,GalaxyNameCopy
 697+ F87B CD CF F6                             call    GalaxyCopyLoop
 698+ F87E 21 8D F7     .CapitaliseName:        ld      hl,GalaxyNameCopy
 699+ F881 CD 56 F7                             call    GalaxyCapitaliseString
 700+ F884                                      ; we will also capitalise the local copy here later
 701+ F884 21 DD F3     .InitDescription:       ld      hl,GalaxyPlanetDescStarter                      ; Initialise galaxy description to  <14> is <22>
 702+ F887 11 B1 F2                             ld      de,GalaxyPlanetSource
 703+ F88A CD CF F6                             call    GalaxyCopyLoop
 704+ F88D AF           .ClearOutDescription:   xor     a
 705+ F88E 21 84 F1                             ld      hl,GalaxyPlanetDescription
 706+ F891 77                                   ld      (hl),a
 707+ F892 11 85 F1                             ld      de,GalaxyPlanetDescription+1
 708+ F895 01 2C 01                             ld      bc,300                                          ; copy previous byte to current for 300 bytes (as we have DS 300 + 1)
 709+ F898 ED B0                                ldir                                                    ; zero it out, don't need this at the end but simplifies debugging
 710+ F89A CD 68 F7     .CopySeedToRandom:      call    GalaxyGoatSoup
 711+ F89D 21 B1 F2                             ld      hl,GalaxyPlanetSource
 712+ F8A0 FD 21 84 F1                          ld      iy,GalaxyPlanetDescription
 713+ F8A4              ; At this point we are now prepped ready to expand the string to a full description
 714+ F8A4              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 715+ F8A4 7E           .ExpRecursive:          ld      a,(hl)
 716+ F8A5 FE 00                                cp      0
 717+ F8A7 CA EC F8                             jp      z,.ExpansionComplete
 718+ F8AA FE 3C                                cp      "<"
 719+ F8AC C2 BF F8                             jp      nz,.NotToken
 720+ F8AF 23           .ItIsAToken:            inc     hl
 721+ F8B0 CD AB F7     .ReadToken:             call    ExpandAtHLToE                                   ; here we have a <X> token
 722+ F8B3 23                                   inc     hl
 723+ F8B4 E5           .SaveCurrentPosition:   push    hl                                              ;+1 Save the current pointer to the text as we are now diverting off to another address
 724+ F8B5 CD BC F7     .LookUpToken:           call    SelectTokenToHL                                 ; Get random token id by using d as list and e as offest against galaxydesc list and return address in hl
 725+ F8B8 CD A4 F8                             call    .ExpRecursive
 726+ F8BB E1           .RestoreCurrentPosition:pop     hl                                              ;+0 get back our old HL we saved off
 727+ F8BC C3 A4 F8     .TokenNextIteration:    jp      .ExpRecursive
 728+ F8BF              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 729+ F8BF FE 25        .NotToken:              cp      "%"
 730+ F8C1 C2 E3 F8                             jp      nz,.RegularCharacter
 731+ F8C4 23                                   inc     hl                                              ; issue was that it was stuck on "%" and not reading the next character for the token to expand
 732+ F8C5 7E                                   ld      a,(hl)
 733+ F8C6 FE 48                                cp      "H"
 734+ F8C8 20 07                                jr      nz,.IsItI
 735+ F8CA 23           .ItIsAnH:               inc     hl
 736+ F8CB CD FC F7                             call    ProcessHSymbol
 737+ F8CE C3 A4 F8                             jp      .ExpRecursive
 738+ F8D1 FE 49        .IsItI:                 cp      "I"
 739+ F8D3 20 07                                jr      nz,.ItIsR
 740+ F8D5 23           .ItIsAnI:               inc     hl
 741+ F8D6 CD 11 F8                             call    ProcessISymbol
 742+ F8D9 C3 A4 F8                             jp      .ExpRecursive
 743+ F8DC CD 36 F8     .ItIsR:                 call    ProcessRSymbol
 744+ F8DF 23                                   inc     hl
 745+ F8E0 C3 A4 F8     .SystemNextIteration:   jp      .ExpRecursive
 746+ F8E3 FD 77 00     .RegularCharacter:      ld      (iy+0),a
 747+ F8E6 FD 23                                inc     iy
 748+ F8E8 23                                   inc     hl
 749+ F8E9 C3 A4 F8     .RegularNextIteration:  jp      .ExpRecursive
 750+ F8EC AF           .ExpansionComplete:     xor     a
 751+ F8ED FD 77 01                             ld      (iy+1),a    ; will thsi work as a bodge
 752+ F8F0 C9                                   ret
 753+ F8F1              ;----------------------------------------------------------------------------------------------------------------------------------
 754+ F8F1 3A 0B E9     galaxy_equip_market:    ld      a,(GalaxyDisplayTekLevel)
 755+ F8F4 3C                                   inc     a
 756+ F8F5 67                                   ld      h,a
 757+ F8F6 0E 00                                ld      c,0
 758+ F8F8 06 1A                                ld      b,ShipEquipTableSize            ;NO_OF_EQUIP_ITEMS
 759+ F8FA 11 10 00                             ld      de,ShipEquipTableRowLen         ; Bytes per row
 760+ F8FD DD 21 D5 F4                          ld      ix,ShipEquipmentList
 761+ F901 DD 7E 06     .ItemCheckLoop:         ld      a,(ix+6)                        ; is it type fuel
 762+ F904 FE 00                                cp      0
 763+ F906                                      ; Check Cash TODO
 764+ F906 28 00                                jr      z,.CheckTechLevel
 765+ F908 DD 7E 03     .CheckTechLevel:        ld      a,(ix+3)                        ; ItemTech Level
 766+ F90B BC                                   cp      h
 767+ F90C                                      ;jr      nc,.DoNotShowItem
 768+ F90C DD 7E 02     .CheckShowItem:         ld      a,(ix+2)
 769+ F90F FE 00                                cp      0
 770+ F911                                    ;  jr      z,.DoNotShowItem
 771+ F911 79           .ShowItem:              ld      a,c
 772+ F912 DD 71 01                             ld      (ix+1),c                        ; Show Item Row Id
 773+ F915 DD 7E 06     .CheckFitted:           ld      a,(ix+6)
 774+ F918 FE 00                                cp      EQ_FUEL
 775+ F91A 28 18                                jr      z,.FuelLevel
 776+ F91C FE 01                                cp      EQ_MISSILE
 777+ F91E 28 25                                jr      z,.CountMissiles
 778+ F920 21 32 97     .IsFitted:              ld      hl,EquipmentFitted
 779+ F923 ED 31                                add     hl,a
 780+ F925 7E                                   ld      a,(hl)
 781+ F926 FE 00                                cp      0
 782+ F928 28 05                                jr      z,.NotFittedItem
 783+ F92A 3E 2A        .FittedItem:            ld      a,"*"
 784+ F92C C3 56 F9                             jp      .MoreToDoCheck
 785+ F92F 3E 2D        .NotFittedItem:         ld      a,"-"
 786+ F931 C3 56 F9                             jp      .MoreToDoCheck
 787+ F934 3A F7 96     .FuelLevel:             ld      a,(Fuel)
 788+ F937 FE 46                                cp      MaxFuelLevel
 789+ F939 28 05                                jr      z,.FullFuel
 790+ F93B 3E 2D        .NotFullFuel:           ld      a,"-"
 791+ F93D C3 56 F9                             jp      .MoreToDoCheck
 792+ F940 3E 2A        .FullFuel               ld      a,"*"                           ; later on do 3 starts low, med,full
 793+ F942 C3 56 F9                             jp      .MoreToDoCheck
 794+ F945 3A 82 93     .CountMissiles:         ld      a,(NbrMissiles)
 795+ F948 FE 00                                cp      0
 796+ F94A 28 05                                jr      z,.NoMissiles
 797+ F94C C6 30                                add     "0"
 798+ F94E C3 56 F9                             jp      .MoreToDoCheck
 799+ F951 3E 2D        .NoMissiles:            ld      a,"-"
 800+ F953 C3 56 F9                             jp      .MoreToDoCheck
 801+ F956 DD 77 07     .MoreToDoCheck:         ld      (ix+7),a                        ; update fitted status
 802+ F959 0C                                   inc     c
 803+ F95A DD 19                                add     ix,de
 804+ F95C 10 A3                                djnz    .ItemCheckLoop
 805+ F95E C9                                   ret
 806+ F95F 3E FF        .DoNotShowItem          ld      a,$FF                           ; $FF = hide
 807+ F961 DD 77 01                             ld      (ix+1),a
 808+ F964 DD 19                                add     ix,de
 809+ F966 10 99                                djnz    .ItemCheckLoop
 810+ F968 C9                                   ret
 811+ F969              ;----------------------------------------------------------------------------------------------------------------------------------
 812+ F969 3A F9 E8     galaxy_planet_data:     ld      a,(GalaxyWorkingSeed+2)
 813+ F96C B7           .GenerateGovernment:    or      a
 814+ F96D CB 3F                                srl	    a                                               ; Government = seed2 / 8 & 7
 815+ F96F CB 3F                                srl	    a
 816+ F971 CB 3F                                srl	    a                                                   ;
 817+ F973 E6 07                                and     $07                                             ;
 818+ F975 32 09 E9                             ld      (GalaxyDisplayGovernment),a                     ;
 819+ F978 3A F8 E8     .GenerateEconomy:       ld      a,(GalaxyWorkingSeed+1)
 820+ F97B E6 07                                and     $07
 821+ F97D 47                                   ld      b,a
 822+ F97E 3A 09 E9                             ld      a,(GalaxyDisplayGovernment)
 823+ F981                                      JumpIfAGTENusng 1, .GreaterThan1
 823+ F981 FE 01       >                        cp     1
 823+ F983 D2 8F F9    >                        jp		nc,.GreaterThan1
 824+ F986 78           .OneOrZero:             ld      a,b
 825+ F987 F6 02                                or      2
 826+ F989 32 0A E9                             ld      (GalaxyDisplayEconomy),a
 827+ F98C C3 93 F9                             jp      .GenerateTechLevel
 828+ F98F 78           .GreaterThan1:          ld      a,b
 829+ F990 32 0A E9                             ld      (GalaxyDisplayEconomy),a
 830+ F993 EE 07        .GenerateTechLevel:     xor     $07                                             ; tech = economy xor 7 + seed3 & 3 + government /2 + fovernemnt & 1
 831+ F995 47                                   ld      b,a
 832+ F996 3A FA E8                             ld      a,(GalaxyWorkingSeed+3)
 833+ F999 E6 03                                and     $03
 834+ F99B 80                                   add     b
 835+ F99C 47                                   ld      b,a
 836+ F99D 3A 09 E9                             ld      a,(GalaxyDisplayGovernment)
 837+ F9A0 4F                                   ld      c,a
 838+ F9A1 CB 2F                                sra     a
 839+ F9A3 80                                   add     b
 840+ F9A4 47                                   ld      b,a
 841+ F9A5 79                                   ld      a,c
 842+ F9A6 E6 01                                and     $1
 843+ F9A8 80                                   add     b
 844+ F9A9 32 0B E9                             ld      (GalaxyDisplayTekLevel),a
 845+ F9AC CB 27        .GeneratePopulation:    sla     a                                               ; population = tech level * 4 + government + economy + 1
 846+ F9AE CB 27                                sla     a
 847+ F9B0 21 09 E9                             ld      hl,GalaxyDisplayGovernment
 848+ F9B3 86                                   add     a,(hl)
 849+ F9B4 47                                   ld      b,a
 850+ F9B5 3A 0A E9                             ld      a,(GalaxyDisplayEconomy)
 851+ F9B8 80                                   add     a,b
 852+ F9B9 3C                                   inc     a
 853+ F9BA 32 0C E9                             ld      (GalaxyDisplayPopulation),a
 854+ F9BD 3A 0A E9     .GenerateProductivity:  ld      a,(GalaxyDisplayEconomy)
 855+ F9C0 EE 07                                xor     7
 856+ F9C2 C6 03                                add     3
 857+ F9C4 57                                   ld      d,a
 858+ F9C5 3A 09 E9                             ld      a,(GalaxyDisplayGovernment)
 859+ F9C8 C6 04                                add     4
 860+ F9CA 5F                                   ld      e,a
 861+ F9CB ED 30                                mul                                                     ; the next mulitply will be a 16 bit value
 862+ F9CD 3A 0C E9                             ld      a,(GalaxyDisplayPopulation)
 863+ F9D0 26 00                                ld      h,0
 864+ F9D2 6F                                   ld      l,a
 865+ F9D3 CD AB A2                             call    mulDEbyHL
 866+ F9D6 EB                                   ex      de,hl
 867+ F9D7                                      ShiftDELeft1
 867+ F9D7 CB 23       >			   sla e
 867+ F9D9 CB 12       >			   rl  d
 868+ F9DB                                      ShiftDELeft1
 868+ F9DB CB 23       >			   sla e
 868+ F9DD CB 12       >			   rl  d
 869+ F9DF                                      ShiftDELeft1
 869+ F9DF CB 23       >			   sla e
 869+ F9E1 CB 12       >			   rl  d
 870+ F9E3 ED 53 0D E9                          ld      (GalaxyDisplayProductivity),de
 871+ F9E7 3A FC E8     .GenerateRadius:        ld		a,(GalaxyWorkingSeed+5)                         ;radius min = 256*11 = 2816 km
 872+ F9EA E6 0F                                and		$0F
 873+ F9EC C6 0B                                add     11
 874+ F9EE 47                                   ld      b,a
 875+ F9EF 3A FA E8                             ld      a,(GalaxyWorkingSeed+3)
 876+ F9F2 4F                                   ld      c,a
 877+ F9F3 ED 43 0F E9                          ld      (GalaxyDisplayRadius),bc
 878+ F9F7 C9                                   ret
 879+ F9F8
 880+ F9F8              galaxy_master_seed_to_system:
 881+ F9F8 21 10 E0     		ld		hl,galaxy_master_seed
 882+ F9FB 11 A0 92     		ld		de,SystemSeed
 883+ F9FE              galaxy_copy_seed:
 884+ F9FE ED A0        		ldi
 885+ FA00 ED A0        		ldi
 886+ FA02 ED A0        		ldi
 887+ FA04 ED A0        		ldi
 888+ FA06 ED A0        		ldi
 889+ FA08 ED A0        		ldi
 890+ FA0A C9           		ret
 891+ FA0B
 892+ FA0B              galaxy_master_to_galaxy_working:
 893+ FA0B 21 10 E0     		ld		hl,galaxy_master_seed
 894+ FA0E 11 F7 E8     		ld		de,GalaxyWorkingSeed
 895+ FA11 18 EB        		jr		galaxy_copy_seed
 896+ FA13
 897+ FA13              galaxy_master_to_galaxy_naming:
 898+ FA13 21 10 E0     		ld		hl,galaxy_master_seed
 899+ FA16 11 FD E8     		ld		de,GalaxyNamingSeed
 900+ FA19 18 E3        		jr		galaxy_copy_seed
 901+ FA1B
 902+ FA1B              working_seed_to_galaxy_working:
 903+ FA1B 21 B9 93             ld      hl,WorkingSeeds
 904+ FA1E 11 F7 E8     		ld		de,GalaxyWorkingSeed
 905+ FA21 18 DB        		jr		galaxy_copy_seed
 906+ FA23
 907+ FA23              working_seed_to_galaxy_naming:
 908+ FA23 21 B9 93             ld      hl,WorkingSeeds
 909+ FA26 11 FD E8     		ld		de,GalaxyNamingSeed
 910+ FA29 18 D3        		jr		galaxy_copy_seed
 911+ FA2B
 912+ FA2B              galaxy_ix_seed_to_galaxy_naming:
 913+ FA2B DD E5                push    ix
 914+ FA2D E1                   pop     hl
 915+ FA2E 11 FD E8     		ld		de,GalaxyNamingSeed
 916+ FA31 18 CB        		jr		galaxy_copy_seed
 917+ FA33
 918+ FA33
 919+ FA33              galaxy_working_seed_to_galaxy_naming:
 920+ FA33 21 F7 E8             ld      hl,GalaxyWorkingSeed
 921+ FA36 11 FD E8     		ld		de,GalaxyNamingSeed
 922+ FA39 18 C3        		jr		galaxy_copy_seed
 923+ FA3B
 924+ FA3B              galaxy_working_seed_to_system:
 925+ FA3B 21 F7 E8     		ld		hl,GalaxyWorkingSeed
 926+ FA3E 11 A0 92     		ld		de,SystemSeed
 927+ FA41 18 BB        		jr		galaxy_copy_seed
 928+ FA43
 929+ FA43              system_seed_to_galaxy_working:
 930+ FA43 21 A0 92     		ld		hl,SystemSeed
 931+ FA46 11 F7 E8     		ld		de,GalaxyWorkingSeed
 932+ FA49 18 B3        		jr		galaxy_copy_seed
 933+ FA4B
 934+ FA4B
 935+ FA4B              system_seed_to_galaxy_naming:
 936+ FA4B 21 A0 92     		ld		hl,SystemSeed
 937+ FA4E 11 FD E8     		ld		de,GalaxyNamingSeed
 938+ FA51 18 AB        		jr		galaxy_copy_seed
 939+ FA53
 940+ FA53              ix_seed_to_galaxy_working:
 941+ FA53 DD E5                push    ix
 942+ FA55 E1                   pop     hl
 943+ FA56 11 F7 E8     		ld		de,GalaxyWorkingSeed
 944+ FA59 18 A3        		jr		galaxy_copy_seed
 945+ FA5B
 946+ FA5B              ; Here we twist just once rather than the usual4 for a system
 947+ FA5B 3A FD E8     NextGalaxyNamingSeed:   ld		a,(GalaxyNamingSeed)			; QQ15 ; x = a + c
 948+ FA5E B7                                   or		a							; clear carry flag
 949+ FA5F 21 FF E8                             ld		hl,GalaxyNamingSeed+2			; hl -> qq+2 [c]
 950+ FA62 86                                   add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
 951+ FA63 47                                   ld		b,a							; partial sum lo [x]
 952+ FA64              ; y = b + d	+ carry
 953+ FA64 3A FE E8                             ld		a,(GalaxyNamingSeed+1)          ; [b]
 954+ FA67 21 00 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
 955+ FA6A 8E                                   adc		a,(hl)						; note add with carry
 956+ FA6B 4F                                   ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
 957+ FA6C 3A FF E8                             ld		a,(GalaxyNamingSeed+2)
 958+ FA6F 32 FD E8                             ld		(GalaxyNamingSeed+0),a			; copy qq152 to qq150 [a] = [c]
 959+ FA72 3A 00 E9                             ld		a,(GalaxyNamingSeed+3)
 960+ FA75 32 FE E8                             ld		(GalaxyNamingSeed+1),a			; copy qq153 to qq151 [b] = [d]
 961+ FA78 3A 02 E9                             ld		a,(GalaxyNamingSeed+5)
 962+ FA7B 32 00 E9                             ld		(GalaxyNamingSeed+3),a			; copy qq155 to qq153 [d] = [f]
 963+ FA7E 3A 01 E9                             ld		a,(GalaxyNamingSeed+4)
 964+ FA81 32 FF E8                             ld		(GalaxyNamingSeed+2),a			; copy qq154 to qq152 [c] = [e]
 965+ FA84 B7                                   or		a
 966+ FA85 78                                   ld		a,b
 967+ FA86 21 FF E8                             ld		hl,GalaxyNamingSeed+2		    ; hl -> qq+2
 968+ FA89 86                                   add	    a,(hl)
 969+ FA8A 32 01 E9                             ld		(GalaxyNamingSeed+4),a			; e = x + [c]
 970+ FA8D 79                                   ld		a,c
 971+ FA8E 21 00 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 )we don't inc as it affects carry)
 972+ FA91 8E                                   adc		a,(hl)
 973+ FA92 32 02 E9                             ld		(GalaxyNamingSeed+5),a			; f = y + [d] + carry
 974+ FA95 C9                                   ret
 975+ FA96
 976+ FA96
 977+ FA96 3A 02 E9     GalaxyNamingLoop:       ld		a,(GalaxyNamingSeed+5)	        ; a = first byte of name seed
 978+ FA99 E6 1F                                and 	$1F					            ; Keep bottom 5 bits only
 979+ FA9B FE 00                                cp		0					            ; 0 = skip 2 chars
 980+ FA9D 28 12                                jr		z,.SkipPhrase
 981+ FA9F C6 0C                                add		a,12
 982+ FAA1 CB 27                                sla		a					            ; phrase = (a+12)*2
 983+ FAA3 21 9F E8                             ld		hl,GalaxyName_digrams
 984+ FAA6 ED 31                                add		hl,a
 985+ FAA8 ED A0                                ldi
 986+ FAAA 7E                                   ld		a,(hl)
 987+ FAAB FE 3F                                cp		'?'
 988+ FAAD 28 02                                jr		z,.SkipPhrase
 989+ FAAF ED A0        .AddExtra:              ldi
 990+ FAB1 D5           .SkipPhrase:            push	de
 991+ FAB2 CD 5B FA                             call	NextGalaxyNamingSeed
 992+ FAB5 D1                                   pop		de
 993+ FAB6 C9                                   ret
 994+ FAB7
 995+ FAB7              ; takes location in BC, finds seed and expands the name
 996+ FAB7 ED 43 5B E8  galaxy_name_at_bc:      ld      (GalaxyTargetSystem),bc
 997+ FABB CD 55 FC     galaxy_digram_seed:     call    galaxy_system_under_cursor
 998+ FABE FE 00                                cp      0
 999+ FAC0 C8                                   ret     z
1000+ FAC1
1001+ FAC1 CD 23 FA     GalaxyDigramWorkings:   call    working_seed_to_galaxy_naming
1002+ FAC4 C3 DC FA                             jp      GalaxyDigramNamingSeed
1003+ FAC7
1004+ FAC7 CD 13 FA     GalaxyDigramSeed:       call    galaxy_master_to_galaxy_naming
1005+ FACA C3 DC FA                             jp      GalaxyDigramNamingSeed
1006+ FACD
1007+ FACD CD 33 FA     GalaxyDigramWorkingSeed:call    galaxy_working_seed_to_galaxy_naming
1008+ FAD0 C3 DC FA                             jp      GalaxyDigramNamingSeed
1009+ FAD3
1010+ FAD3 CD 2B FA     GalaxyDigramWIXSeed:    call    galaxy_ix_seed_to_galaxy_naming
1011+ FAD6 C3 DC FA                             jp      GalaxyDigramNamingSeed
1012+ FAD9
1013+ FAD9 CD 4B FA     SystemGetDigramSeed:    call    system_seed_to_galaxy_naming
1014+ FADC
1015+ FADC 11 7E E8     GalaxyDigramNamingSeed: ld		de,GalaxyExpandedName
1016+ FADF 06 03        GalaxyDigramToDE:       ld		b,3
1017+ FAE1 3A FD E8                             ld		a,(GalaxyNamingSeed)
1018+ FAE4 E6 40                                and		$40
1019+ FAE6 28 03                                jr		z,.SmallSizeName
1020+ FAE8 CD 96 FA     .LargeSizeName:         call	GalaxyNamingLoop
1021+ FAEB CD 96 FA     .SmallSizeName:         call	GalaxyNamingLoop
1022+ FAEE CD 96 FA                             call	GalaxyNamingLoop
1023+ FAF1 CD 96 FA                             call	GalaxyNamingLoop
1024+ FAF4 EB           .DoneName:              ex		de,hl
1025+ FAF5 36 00                                ld		(hl),0
1026+ FAF7 EB                                   ex		de,hl
1027+ FAF8 AF                                   xor     a
1028+ FAF9 3D                                   dec     a
1029+ FAFA C9                                   ret
1030+ FAFB              ;reorte X 13 Y 97
1031+ FAFB
1032+ FAFB              set_names_lowercase:
1033+ FAFB                  ;- to do, for case insensitive match
1034+ FAFB C9               ret
1035+ FAFC              ;----------------------------------------------------------------------------------------------------------------------------------
1036+ FAFC              is_system_found:        ; search string does not have /0
1037+ FAFC              ; search for riinus then ra you get seardh of rainus
1038+ FAFC 21 5D E8                             ld      hl,GalaxySearchString
1039+ FAFF 11 7E E8                             ld      de,GalaxyExpandedName
1040+ FB02 0E 00        .getsearchlen:          ld      c,0
1041+ FB04 7E           .getsearchlenloop:      ld      a,(hl)
1042+ FB05 FE 00                                cp      0
1043+ FB07 28 07                                jr      z,.readyToSearch
1044+ FB09 23                                   inc     hl
1045+ FB0A 0C                                   inc     c
1046+ FB0B C3 04 FB                             jp      .getsearchlenloop
1047+ FB0E 06 20                                ld      b,32
1048+ FB10 21 5D E8     .readyToSearch:         ld      hl,GalaxySearchString
1049+ FB13 1A           .searchLoop:            ld      a,(de)
1050+ FB14 FE 00                                cp      0
1051+ FB16 28 0D                                jr      z,.EndOfMatch
1052+ FB18 0D                                   dec     c
1053+ FB19 C5                                   push    bc
1054+ FB1A ED A1                                cpi
1055+ FB1C C1                                   pop     bc
1056+ FB1D 20 03                                jr      nz,.noMatch
1057+ FB1F 13                                   inc     de
1058+ FB20
1059+ FB20 10 F1                                djnz    .searchLoop
1060+ FB22 3E FF        .noMatch:               ld      a,$FF
1061+ FB24 C9                                   ret
1062+ FB25 79           .EndOfMatch:            ld      a,c
1063+ FB26 FE 00                                cp      0
1064+ FB28 C8                                   ret     z
1065+ FB29 3E FF                                ld      a,$FF
1066+ FB2B C9                                   ret
1067+ FB2C
1068+ FB2C AF           find_system_by_name:    xor     a
1069+ FB2D 32 B9 92                             ld      (XSAV),a
1070+ FB30 DD 21 16 E0                          ld      ix,galaxy_data
1071+ FB34 CD 53 FA     .nextSystem:            call    ix_seed_to_galaxy_working
1072+ FB37 CD CD FA                             call    GalaxyDigramWorkingSeed
1073+ FB3A CD FC FA                             call    is_system_found
1074+ FB3D FE 00                                cp      0
1075+ FB3F 28 19                                jr      z,.FoundAtIX
1076+ FB41 3A B9 92                             ld      a,(XSAV)
1077+ FB44 3D                                   dec     a
1078+ FB45 28 10                                jr      z,.NoMoreSystems
1079+ FB47 32 B9 92                             ld      (XSAV),a
1080+ FB4A DD E5                                push    ix
1081+ FB4C E1                                   pop     hl
1082+ FB4D ED 34 08 00                          add     hl,8
1083+ FB51 E5                                   push    hl
1084+ FB52 DD E1                                pop     ix
1085+ FB54 C3 34 FB                             jp      .nextSystem
1086+ FB57 3E FF        .NoMoreSystems:         ld      a,$FF
1087+ FB59 C9                                   ret
1088+ FB5A CD 53 FA     .FoundAtIX              call    ix_seed_to_galaxy_working
1089+ FB5D C9                                   ret
1090+ FB5E              ;----------------------------------------------------------------------------------------------------------------------------------
1091+ FB5E 00 00        nearestfound:           DW 0
1092+ FB60              ; In here de carries current nearest and loads into nearest found
1093+ FB60              ; does a basic distance check for x then y each under threshold, then does x+y under threshold  jsut in case we have an extreme like 0 x and high dist y
1094+ FB60 DD 21 16 E0  find_nearest_to_bc:     ld      ix,galaxy_data
1095+ FB64 FD 26 00                             ld      iyh,0
1096+ FB67 FD 2E 78                             ld      iyl,120
1097+ FB6A ED 43 5E FB                          ld      (nearestfound),bc
1098+ FB6E DD 7E 03     find_nearest_loop:      ld      a,(ix+3)                        ;
1099+ FB71 5F                                   ld      e,a                             ; e= current seed x
1100+ FB72                                      JumpIfALTNusng c, nearestXPosLT         ; not we need to know if its e - c or c - e we coudl do 2's compliement of course
1100+ FB72 B9          >                        cp      c
1100+ FB73 DA 84 FB    >                        jp		c, nearestXPosLT
1101+ FB76 D5           nearestXPosGTE:         push    de                              ;
1102+ FB77 26 00                                ld      h,0                             ;
1103+ FB79 6F                                   ld      l,a                             ; hl = seed x
1104+ FB7A 16 00                                ld      d,0                             ;
1105+ FB7C 59                                   ld      e,c                             ; de = nearest x
1106+ FB7D B7                                   or      a                               ;
1107+ FB7E ED 52                                sbc     hl,de                           ; hl = distance between the two
1108+ FB80 D1                                   pop     de
1109+ FB81 C3 8E FB                             jp      nearestDistXPos
1110+ FB84 D5           nearestXPosLT:          push    de                              ;
1111+ FB85 26 00                                ld      h,0                             ;
1112+ FB87 69                                   ld      l,c                             ; hl = nearest x
1113+ FB88 16 00                                ld      d,0                             ;
1114+ FB8A B7                                   or      a                               ; de = seed x
1115+ FB8B ED 52                                sbc     hl,de                           ;
1116+ FB8D D1                                   pop     de                              ; hl = distance between the two
1117+ FB8E 7D           nearestDistXPos:        ld      a,l                             ; so l = abs distance as does a
1118+ FB8F FD BD                                cp      iyl                             ; under initial threshold?
1119+ FB91 30 3D                                jr      nc,find_nearest_miss            ; no so its a miss
1120+ FB93               ;DEBUG                       ld      l,a                             ; l = distance (we can drop thsi as it was done above!)
1121+ FB93 DD 7E 01                             ld      a,(ix+1)                        ;
1122+ FB96 57                                   ld      d,a                             ; d = seed y
1123+ FB97                                      JumpIfALTNusng b, nearestYPosLT         ; determine abs calc
1123+ FB97 B8          >                        cp      b
1123+ FB98 DA AC FB    >                        jp		c, nearestYPosLT
1124+ FB9B E5           nearestYPosGTE:         push    hl                              ; save current x distance
1125+ FB9C D5                                   push    de                              ;
1126+ FB9D 26 00                                ld      h,0                             ;
1127+ FB9F 6F                                   ld      l,a                             ; hl = seed y
1128+ FBA0 16 00                                ld      d,0                             ;
1129+ FBA2 58                                   ld      e,b                             ; de = nearest y
1130+ FBA3 B7                                   or      a                               ;
1131+ FBA4 ED 52                                sbc     hl,de                           ; hl = distance between the two
1132+ FBA6 7D                                   ld      a,l
1133+ FBA7 D1                                   pop     de
1134+ FBA8 E1                                   pop     hl
1135+ FBA9 C3 BA FB                             jp      nearestDistYPos
1136+ FBAC E5           nearestYPosLT:          push    hl                              ; save current x distance
1137+ FBAD D5                                   push    de                              ;
1138+ FBAE 26 00                                ld      h,0                             ;
1139+ FBB0 68                                   ld      l,b                             ; hl = nearest y
1140+ FBB1 5A                                   ld      e,d                             ;
1141+ FBB2 16 00                                ld      d,0                             ; de = seed y
1142+ FBB4 B7                                   or      a                               ;
1143+ FBB5 ED 52                                sbc     hl,de                           ; hl = distance between the two
1144+ FBB7 7D                                   ld      a,l
1145+ FBB8 D1                                   pop     de
1146+ FBB9 E1                                   pop     hl                              ; now we get distance in l back into hl, distance y is in a
1147+ FBBA FD BD        nearestDistYPos:        cp      iyl                             ; under initial threshold?
1148+ FBBC 30 12                                jr      nc, find_nearest_miss
1149+ FBBE 26 00                                ld      h,0                             ; hl = distance for x
1150+ FBC0 ED 31                                add     hl,a                            ; adding distance y
1151+ FBC2 7D                                   ld      a,l                             ; and copy it to l
1152+ FBC3 FD BD                                cp      iyl                             ; is the pair under distance
1153+ FBC5 30 09                                jr      nc, find_nearest_miss           ;
1154+ FBC7 FD 6F        nearest_found_a_hit:    ld      iyl,a                           ; so we have a hit
1155+ FBC9 ED 53 5E FB                          ld      (nearestfound),de               ;
1156+ FBCD                                      ReturnIfALTNusng 2                      ; exact match bail out, note 1 can be an exact match due to Y axis, as we are looking at seed pos then this is accurate enough and we won't hit dx 1 and dy 0 hopefully in any galaxy :)
1156+ FBCD FE 02       >                    cp    2
1156+ FBCF D8          >                    ret	 c
1157+ FBD0 DD E5        find_nearest_miss:      push     ix
1158+ FBD2 E1                                   pop      hl
1159+ FBD3 ED 34 08 00                          add      hl,8
1160+ FBD7 E5                                   push     hl
1161+ FBD8 DD E1                                pop      ix
1162+ FBDA FD 25                                dec     iyh
1163+ FBDC FD 7C                                ld      a,iyh
1164+ FBDE                                      IfANotZeroGoto find_nearest_loop
1164+ FBDE FE 00       >				cp	0
1164+ FBE0 C2 6E FB    >				jp	nz,find_nearest_loop
1165+ FBE3 ED 4B 5E FB                          ld      bc ,(nearestfound)              ; if we hit here then after searching we have found a nearest
1166+ FBE7 C9                                   ret
1167+ FBE8              ;----------------------------------------------------------------------------------------------------------------------------------
1168+ FBE8              ; Does a sqare root distance
1169+ FBE8 16 00        galaxy_find_distance:   ld      d,0
1170+ FBEA 26 00                                ld      h,0
1171+ FBEC 3A 57 E8                             ld      a,(GalaxyPresentSystem)
1172+ FBEF 47                                   ld      b,a
1173+ FBF0 3A 59 E8                             ld      a,(GalaxyDestinationSystem)
1174+ FBF3 B8                                   cp      b
1175+ FBF4 20 0E                                jr      nz,.NotSame
1176+ FBF6 C5           .XSame:                 push    bc
1177+ FBF7 F5                                   push    af
1178+ FBF8 3A 58 E8                             ld      a,(GalaxyPresentSystem+1)
1179+ FBFB 47                                   ld      b,a
1180+ FBFC 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1181+ FBFF B8                                   cp      b
1182+ FC00 C1                                   pop     bc
1183+ FC01 F1                                   pop     af
1184+ FC02 28 49                                jr      z,.ZeroDistance
1185+ FC04 30 08        .NotSame:               jr      nc,.DestinationGTEPresentX
1186+ FC06 68           .DestinationLTPresentX: ld      l,b
1187+ FC07 5F                                   ld      e,a
1188+ FC08 B7                                   or      a
1189+ FC09 ED 52                                sbc     hl,de
1190+ FC0B C3 13 FC                             jp      .SquareXDist
1191+ FC0E 6F           .DestinationGTEPresentX:ld      l,a
1192+ FC0F 58                                   ld      e,b
1193+ FC10 B7                                   or      a
1194+ FC11 ED 52                                sbc     hl,de
1195+ FC13 55           .SquareXDist:           ld      d,l
1196+ FC14 5D                                   ld      e,l
1197+ FC15 ED 30                                mul
1198+ FC17 3A 58 E8     .CalcYDistSq            ld      a,(GalaxyPresentSystem+1)
1199+ FC1A 47                                   ld      b,a
1200+ FC1B 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1201+ FC1E B8                                   cp      b
1202+ FC1F 30 0B                                jr      nc,.DestinationGTEPresentY
1203+ FC21 4F           .DestinationLTPresentY: ld      c,a
1204+ FC22 68                                   ld      l,b
1205+ FC23 06 00                                ld      b,0
1206+ FC25 26 00                                ld      h,0
1207+ FC27 ED 42                                sbc     hl,bc
1208+ FC29 C3 34 FC                             jp      .DestinationYDone
1209+ FC2C 48           .DestinationGTEPresentY:ld      c,b
1210+ FC2D 6F                                   ld      l,a
1211+ FC2E 06 00                                ld      b,0
1212+ FC30 26 00                                ld      h,0
1213+ FC32 ED 42                                sbc     hl,bc
1214+ FC34 CB 2D        .DestinationYDone:      sra     l                   ; divide L by 2 for galaxy size
1215+ FC36 7D                                   ld      a,l
1216+ FC37 EB                                   ex      de,hl
1217+ FC38 57                                   ld      d,a
1218+ FC39 5F                                   ld      e,a
1219+ FC3A ED 30        .SquareYDist:           mul
1220+ FC3C 19                                   add     hl,de
1221+ FC3D EB                                   ex      de,hl
1222+ FC3E CD 26 A3                             call    asm_sqrt            ; distance via pythagoras in hl
1223+ FC41                                      ShiftHLLeft1
1223+ FC41 CB 25       >			   sla l
1223+ FC43 CB 14       >			   rl  h
1224+ FC45                                      ShiftHLLeft1                ; Multiply by 4 to get distance
1224+ FC45 CB 25       >			   sla l
1224+ FC47 CB 14       >			   rl  h
1225+ FC49 22 AD 93                             ld      (Distance),hl       ; Distance is now caulated distance
1226+ FC4C C9                                   ret
1227+ FC4D AF           .ZeroDistance:          xor     a
1228+ FC4E 32 AD 93                             ld      (Distance),a
1229+ FC51 32 AE 93                             ld      (Distance+1),a
1230+ FC54 C9                                   ret
1231+ FC55              ;----------------------------------------------------------------------------------------------------------------------------------
1232+ FC55              ; Find the systems pointed to by GalaxyTargetSystem and loads it into WorkingSeeds
1233+ FC55              ; this needs to chagne to galaxyresultseed or galayxworkingseed
1234+ FC55 AF           galaxy_system_under_cursor:xor     a
1235+ FC56 32 B9 92                             ld		(XSAV),a
1236+ FC59 DD 21 16 E0                          ld      ix,galaxy_data
1237+ FC5D 2A 5B E8     .GCCounterLoop:         ld      hl,(GalaxyTargetSystem)
1238+ FC60 DD E5                                push    ix
1239+ FC62 7D                                   ld      a,l
1240+ FC63 DD BE 03                             cp      (ix+3)                          ; seed x
1241+ FC66 20 14                                jr      nz,.ItsNotThisX
1242+ FC68 7C                                   ld      a,h
1243+ FC69 DD BE 01                             cp      (ix+1)                          ; seed x
1244+ FC6C 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
1245+ FC6E DD E5                                push    ix
1246+ FC70 E1                                   pop     hl
1247+ FC71 11 B9 93                             ld      de,WorkingSeeds                 ;' copy to wkring Seeds
1248+ FC74 CD 90 97                             call    copy_seed
1249+ FC77 3E FF                                ld      a,$FF
1250+ FC79 DD E1                                pop     ix
1251+ FC7B C9                                   ret
1252+ FC7C E1           .ItsNotThisX:           pop     hl
1253+ FC7D ED 34 08 00                          add     hl,8
1254+ FC81 E5                                   push    hl
1255+ FC82 DD E1                                pop     ix
1256+ FC84 3A B9 92                             ld		a,(XSAV)
1257+ FC87 3D                                   dec		a
1258+ FC88 32 B9 92                             ld      (XSAV),a
1259+ FC8B FE 00                                cp		0
1260+ FC8D C8                                   ret		z
1261+ FC8E 18 CD                                jr		.GCCounterLoop
1262+ FC90              ;----------------------------------------------------------------------------------------------------------------------------------
1263+ FC90 21 A0 92     SeedGalaxy:             ld      hl,SystemSeed                   ; First copy system seed to galaxy master
1264+ FC93 11 10 E0                             ld      de,galaxy_master_seed           ; .
1265+ FC96 ED A0                                ldi                                     ; .
1266+ FC98 ED A0                                ldi                                     ; .
1267+ FC9A ED A0                                ldi                                     ; .
1268+ FC9C ED A0                                ldi                                     ; .
1269+ FC9E ED A0                                ldi                                     ; .
1270+ FCA0 ED A0                                ldi                                     ; .
1271+ FCA2 DD 21 16 E0                          ld      ix,galaxy_data                  ; Generate system seed data for each planet
1272+ FCA6 AF                                   xor		a                               ; .
1273+ FCA7 32 B9 92                             ld		(XSAV),a                        ; .
1274+ FCAA DD E5        SeedGalaxyLoop:         push    ix                              ; .
1275+ FCAC D1                                   pop     de                              ; .
1276+ FCAD 21 A0 92                             ld      hl,SystemSeed                   ; .
1277+ FCB0 CD 90 97                             call    copy_seed                       ; .
1278+ FCB3 DD E5                                push    ix                              ; .
1279+ FCB5 E1                                   pop     hl                              ; .
1280+ FCB6 ED 34 08 00                          add     hl,8                            ; .
1281+ FCBA E5                                   push    hl                              ; .
1282+ FCBB DD E1                                pop     ix                              ; .
1283+ FCBD CD C5 97                             call    next_system_seed                ; .
1284+ FCC0 3A B9 92                             ld		a,(XSAV)                        ; .
1285+ FCC3 3D                                   dec		a                               ; .
1286+ FCC4 FE 00                                cp		0                               ; .
1287+ FCC6 C8                                   ret		z                               ; .
1288+ FCC7 32 B9 92                             ld		(XSAV),a                        ; .
1289+ FCCA 18 DE                                jr      SeedGalaxyLoop                  ; .
1290+ FCCC C9                                   ret
1291+ FCCD
1292+ FCCD              GalaxyBankSize   EQU $ - galaxy_page_marker
1293+ FCCD
# file closed: ./Universe/galaxy_data.asm
1291  FCCD
1292  FCCD                  DISPLAY "Galaxy Data - Bytes free ",/D, $2000 - ($- GalaxyDataAddr)
1293  FCCD
1294  FCCD              ; Bank 83  ------------------------------------------------------------------------------------------------------------------------
1295  FCCD                  SLOT    SunBankAddr
1296  FCCD                  PAGE    BankSunData
1297  FCCD              	ORG	    SunBankAddr,BankSunData
1298  C000                  INCLUDE "./Universe/Sun/sun_data.asm"
# file opened: ./Universe/Sun/sun_data.asm
   1+ C000              ; In  flight ship data tables
   2+ C000              ; In  flight ship data tables
   3+ C000              ; There can be upto &12 objects in flight.
   4+ C000              ; To avoid hassle of memory heap managment, the free list
   5+ C000              ; will correspond to a memory bank offset so data will be held in
   6+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   7+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   8+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
   9+ C000              ; This means each gets its own line list, inwork etc
  10+ C000
  11+ C000              ; "Runtime Ship Data paged into in Bank 7"
  12+ C000 53 75 6E 20  StartOfSun:        DB "Sun and Planet X"
  12+ C004 61 6E 64 20
  12+ C008 50 6C 61 6E
  12+ C00C 65 74 20 58
  13+ C010              ; NOTE we can cheat and pre allocate segs just using a DS for now
  14+ C010
  15+ C010              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  16+ C010              ; Universe map substibute for INWK
  17+ C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  18+ C010                                      INCLUDE "./Universe/Sun/SunPosVars.asm"
# file opened: ././Universe/Sun/SunPosVars.asm
   1++C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C010 00           SBnKxlo                     DB  0                       ; INWK+0
   3++C011 00           SBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   4++C012 00           SBnKxsgn                    DB  0                       ; INWK+2
   5++C013 00           SBnKylo                     DB  0                       ; INWK+3 \ ylo
   6++C014 00           SbnKyhi                     DB  0                       ; INWK+4 \ yHi
   7++C015 00           SBnKysgn                    DB  0                       ; INWK +5
   8++C016 00           SBnKzlo                     DB  0                       ; INWK +6
   9++C017 00           SBnKzhi                     DB  0                       ; INWK +7
  10++C018 00           SBnKzsgn                    DB  0                       ; INWK +8
  11++C019
# file closed: ././Universe/Sun/SunPosVars.asm
  19+ C019                                      INCLUDE "./Universe/Sun/SunRotationMatrixVars.asm"
# file opened: ././Universe/Sun/SunRotationMatrixVars.asm
   1++C019              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
   2++C019              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
   3++C019 00 00        SBnKrotmatSidevX            DW  0                       ; INWK +21
   4++C01B              SBnKrotmatSidev             equ SBnKrotmatSidevX
   5++C01B 00 00        SBnKrotmatSidevY            DW  0                       ; INWK +23
   6++C01D 00 00        SBnKrotmatSidevZ            DW  0                       ; INWK +25
   7++C01F 00 00        SBnKrotmatRoofvX            DW  0                       ; INWK +15
   8++C021              SBnKrotmatRoofv             equ SBnKrotmatRoofvX
   9++C021 00 00        SBnKrotmatRoofvY            DW  0                       ; INWK +17
  10++C023 00 00        SBnKrotmatRoofvZ            DW  0                       ; INWK +19
  11++C025 00 00        SBnKrotmatNosevX            DW  0                       ; INWK +9
  12++C027              SBnKrotmatNosev             EQU SBnKrotmatNosevX
  13++C027 00 00        SBnKrotmatNosevY            DW  0                       ; INWK +11
  14++C029 00 00        SBnKrotmatNosevZ            DW  0                       ; INWK +13
  15++C02B
# file closed: ././Universe/Sun/SunRotationMatrixVars.asm
  20+ C02B                                      INCLUDE "./Universe/Sun/SunAIRuntimeData.asm"
# file opened: ././Universe/Sun/SunAIRuntimeData.asm
   1++C02B              ; -- Ship AI data
   2++C02B 00           SBnKRotXCounter             DB  0                       ; INWK +29
   3++C02C 00           SBnKRotZCounter             DB  0                       ; INWK +30
   4++C02D 00           SBnkCam0yLo                 DB  0                       ; INWK +33 ????
   5++C02E 00           SBnkCam0yHi                 DB  0                       ; INWK +34?????
   6++C02F
# file closed: ././Universe/Sun/SunAIRuntimeData.asm
  21+ C02F
  22+ C02F
  23+ C02F                                      INCLUDE "./Universe/Sun/SunXX16Vars.asm"
# file opened: ././Universe/Sun/SunXX16Vars.asm
   1++C02F              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C02F 00 00        SBnkTransmatSidevX          DW  0               ; XX16+0
   3++C031              SBnkTransmatSidev           EQU SBnkTransmatSidevX
   4++C031 00 00        SBnkTransmatSidevY          DW 0                ; XX16+2
   5++C033 00 00        SBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C035 00 00        SBnkTransmatRoofvX          DW 0
   7++C037              SBnkTransmatRoofv           EQU SBnkTransmatRoofvX
   8++C037 00 00        SBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C039 00 00        SBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C03B 00 00        SBnkTransmatNosevX          DW 0
  11++C03D              SBnkTransmatNosev           EQU SBnkTransmatNosevX
  12++C03D 00 00        SBnkTransmatNosevY          DW 0                ; XX16+2
  13++C03F 00 00        SBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C041 00 00        SBnkTransmatTransX          DW 0
  15++C043 00 00        SBnkTransmatTransY          DW 0
  16++C045 00 00        SBnkTransmatTransZ          DW 0
  17++C047              SunXX16                      equ SBnkTransmatSidev
  18++C047              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C047 00 00        SBnkTransInvRow0x0          DW 0
  20++C049 00 00        SBnkTransInvRow0x1          DW 0
  21++C04B 00 00        SBnkTransInvRow0x2          DW 0
  22++C04D 00 00        SBnkTransInvRow0x3          DW 0
  23++C04F 00 00        SBnkTransInvRow1y0          DW 0
  24++C051 00 00        SBnkTransInvRow1y1          DW 0
  25++C053 00 00        SBnkTransInvRow1y2          DW 0
  26++C055 00 00        SBnkTransInvRow1y3          DW 0
  27++C057 00 00        SBnkTransInvRow2z0          DW 0
  28++C059 00 00        SBnkTransInvRow2z1          DW 0
  29++C05B 00 00        SBnkTransInvRow2z2          DW 0
  30++C05D 00 00        SBnkTransInvRow2z3          DW 0
  31++C05F
  32++C05F              SunXX16Inv             equ SBnkTransInvRow0x0
  33++C05F
# file closed: ././Universe/Sun/SunXX16Vars.asm
  24+ C05F                                      INCLUDE "./Universe/Sun/SunXX25Vars.asm"
# file opened: ././Universe/Sun/SunXX25Vars.asm
   1++C05F              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C05F 00           SBnKProjxLo                 DB  0
   3++C060 00           SBnKProjxHi                 DB  0
   4++C061 00           SBnKProjxSgn                DB  0
   5++C062              SBnKProjx                   EQU SBnKProjxLo
   6++C062 00           SBnKProjyLo                 DB  0
   7++C063 00           SBnKProjyHi                 DB  0
   8++C064 00           SBnKProjySgn                DB  0
   9++C065              SBnKProjy                   EQU SBnKProjyLo
  10++C065 00           SBnKProjzLo                 DB  0
  11++C066 00           SBnKProjzHi                 DB  0
  12++C067 00           SBnKProjzSgn                DB  0
  13++C068              SBnKProjz                   EQU SBnKProjzLo
  14++C068              SXX25                       EQU SBnKProjxLo
  15++C068
# file closed: ././Universe/Sun/SunXX25Vars.asm
  25+ C068                                      INCLUDE "./Universe/Sun/SunXX18Vars.asm"
# file opened: ././Universe/Sun/SunXX18Vars.asm
   1++C068              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C068 00           SBnKDrawCam0xLo             DB  0               ; XX18+0
   3++C069 00           SBnKDrawCam0xHi             DB  0               ; XX18+1
   4++C06A 00           SBnKDrawCam0xSgn            DB  0               ; XX18+2
   5++C06B              SBnKDrawCam0x               equ SBnKDrawCam0xLo
   6++C06B 00           SBnKDrawCam0yLo             DB  0               ; XX18+3
   7++C06C 00           SBnKDrawCam0yHi             DB  0               ; XX18+4
   8++C06D 00           SBnKDrawCam0ySgn            DB  0               ; XX18+5
   9++C06E              SBnKDrawCam0y               equ SBnKDrawCam0yLo
  10++C06E 00           SBnKDrawCam0zLo             DB  0               ; XX18+6
  11++C06F 00           SBnKDrawCam0zHi             DB  0               ; XX18+7
  12++C070 00           SBnKDrawCam0zSgn            DB  0               ; XX18+8
  13++C071              SBnKDrawCam0z               equ SBnKDrawCam0zLo
  14++C071              SXX18                       equ SBnKDrawCam0xLo
  15++C071
# file closed: ././Universe/Sun/SunXX18Vars.asm
  26+ C071
  27+ C071              ; Used to make 16 bit reads a little cleaner in source code
  28+ C071 00 00 00     SBnKzPoint                  DS  3
  29+ C074              SBnKzPointLo                equ SBnKzPoint
  30+ C074              SBnKzPointHi                equ SBnKzPoint+1
  31+ C074              SBnKzPointSign              equ SBnKzPoint+2
  32+ C074                                      INCLUDE "./Universe/Sun/SunXX15Vars.asm"
# file opened: ././Universe/Sun/SunXX15Vars.asm
   1++C074              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C074 00           SBnKXScaled                 DB  0               ; XX15+0Xscaled
   3++C075 00           SBnKXScaledSign             DB  0               ; XX15+1xsign
   4++C076 00           SBnKYScaled                 DB  0               ; XX15+2yscaled
   5++C077 00           SBnKYScaledSign             DB  0               ; XX15+3ysign
   6++C078 00           SBnKZScaled                 DB  0               ; XX15+4zscaled
   7++C079 00           SBnKZScaledSign             DB  0               ; XX15+5zsign
   8++C07A
   9++C07A              SXX15                       equ SBnKXScaled
  10++C07A              SXX15VecX                   equ SXX15
  11++C07A              SXX15VecY                   equ SXX15+1
  12++C07A              SXX15VecZ                   equ SXX15+2
  13++C07A              SBnKXPoint                  equ SXX15
  14++C07A              SBnKXPointLo                equ SXX15+0
  15++C07A              SBnKXPointHi                equ SXX15+1
  16++C07A              SBnKXPointSign              equ SXX15+2
  17++C07A              SBnKYPoint                  equ SXX15+3
  18++C07A              SBnKYPointLo                equ SXX15+3
  19++C07A              SBnKYPointHi                equ SXX15+4
  20++C07A              SBnKYPointSign              equ SXX15+5
  21++C07A
# file closed: ././Universe/Sun/SunXX15Vars.asm
  33+ C07A                                      INCLUDE "./Universe/Sun/SunXX12Vars.asm"
# file opened: ././Universe/Sun/SunXX12Vars.asm
   1++C07A              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C07A              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C07A 00           SBnKXX12xLo                 DB  0               ; XX12+0
   4++C07B 00           SBnKXX12xSign               DB  0               ; XX12+1
   5++C07C 00           SBnKXX12yLo                 DB  0               ; XX12+2
   6++C07D 00           SBnKXX12ySign               DB  0               ; XX12+3
   7++C07E 00           SBnKXX12zLo                 DB  0               ; XX12+4
   8++C07F 00           SBnKXX12zSign               DB  0               ; XX12+5
   9++C080 00 00 00...  SXX12Save                   DS  6
  10++C086 00 00 00...  SXX12Save2                  DS  6
  11++C08C              SXX12                       equ SBnKXX12xLo
  12++C08C              varSXX12                    equ SBnKXX12xLo
  13++C08C              ; Repurposed XX12 when plotting lines
  14++C08C              SBnkY2                      equ SXX12+0
  15++C08C              SbnKy2Lo                    equ SXX12+0
  16++C08C              SBnkY2Hi                    equ SXX12+1
  17++C08C              SBnkDeltaXLo                equ SXX12+2
  18++C08C              SBnkDeltaXHi                equ SXX12+3
  19++C08C              SBnkDeltaYLo                equ SXX12+4
  20++C08C              SBnkDeltaYHi                equ SXX12+5
  21++C08C              SbnkGradient                equ SXX12+2
  22++C08C              SBnkTemp1                   equ SXX12+2
  23++C08C              SBnkTemp1Lo                 equ SXX12+2
  24++C08C              SBnkTemp1Hi                 equ SXX12+3
  25++C08C              SBnkTemp2                   equ SXX12+3
  26++C08C              SBnkTemp2Lo                 equ SXX12+3
  27++C08C              SBnkTemp2Hi                 equ SXX12+4
  28++C08C
# file closed: ././Universe/Sun/SunXX12Vars.asm
  34+ C08C
  35+ C08C
  36+ C08C              ; Post clipping the results are now 8 bit
  37+ C08C 00           SBnKVisibility              DB  0               ; replaces general purpose xx4 in rendering
  38+ C08D 00           SBnKProjectedY              DB  0
  39+ C08E 00           SBnKProjectedX              DB  0
  40+ C08F              SBnKProjected               equ SBnKProjectedY  ; resultant projected position
  41+ C08F 00 00 00...  SunXX15Save                 DS  8
  42+ C097 00 00 00...  SunXX15Save2                DS  8
  43+ C09F              ; Heap (or array) information for lines and normals
  44+ C09F              ; Coords are stored XY,XY,XY,XY
  45+ C09F              ; Normals
  46+ C09F              ; This needs re-oprganising now.
  47+ C09F              ; Runtime Calculation Store
  48+ C09F
  49+ C09F              SunLineArraySize            equ 128 * 2
  50+ C09F              ; Storage arrays for data
  51+ C09F              ; Structure of arrays
  52+ C09F              ; Visibility array  - 1 Byte per face/normal on ship model Bit 7 (or FF) visible, 0 Invisible
  53+ C09F              ; Node array corresponds to a processed vertex from the ship model transformed into world coordinates and tracks the node list from model
  54+ C09F              ; NodeArray         -  4 bytes per element      0           1            2          3
  55+ C09F              ;                                               X Coord Lo  Y Coord Lo   Z CoordLo  Sign Bits 7 6 5 for X Y Z Signs (set = negative)
  56+ C09F              ; Line Array        -  4 bytes per eleement     0           1            2          3
  57+ C09F              ;                                               X1          Y1           X2         Y2
  58+ C09F 00 00 00...  SBnKLineArray               DS SunLineArraySize * 4        ; XX19 Holds the clipped line details
  59+ C49F              SBnKLinesHeapMax            EQU $ - SBnKLineArray
  60+ C49F
  61+ C49F              SBnK_Data_len               EQU $ - StartOfUniv
  62+ C49F
  63+ C49F              ; --------------------------------------------------------------
  64+ C49F 21 00 C0     ResetSBnKData:          ld      hl,StartOfUniv
  65+ C4A2 11 9F 04                             ld      de,SBnK_Data_len
  66+ C4A5 AF                                   xor     a
  67+ C4A6 CD 17 8F                             call    memfill_dma
  68+ C4A9 C9                                   ret
  69+ C4AA              ; --------------------------------------------------------------
  70+ C4AA 21 10 C0     ResetSBnKPosition:      ld      hl,SBnKxlo
  71+ C4AD 06 09                                ld      b, 3*3
  72+ C4AF AF                                   xor     a
  73+ C4B0 77           .zeroLoop:              ld      (hl),a
  74+ C4B1 23                                   inc     hl
  75+ C4B2 10 FC                                djnz    .zeroLoop
  76+ C4B4 C9                                   ret
  77+ C4B5              ; This uses UBNKNodeArray as the list
  78+ C4B5              ; the array is 256 * 2 bytes
  79+ C4B5              ; counter is current row y pos
  80+ C4B5              ; byte 1 is start x pos
  81+ C4B5              ; byte 2 is end x pos
  82+ C4B5              ; if they are both 0 then skip
  83+ C4B5              ; its always horizontal, yellow
  84+ C4B5
  85+ C4B5              ; PLANET
  86+ C4B5
  87+ C4B5
  88+ C4B5              .SunNoDraw:             SetCarryFlag                        ; ship is behind so do not draw, so we don't care abour draw as dot
  88+ C4B5 37          >                    scf
  89+ C4B6 C9                                   ret
  90+ C4B7
  91+ C4B7              SunDraw:                MMUSelectLayer2
  91+ C4B7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  92+ C4BB AF                                   xor     a
  93+ C4BC CD 0D E0                             call    asm_l2_bank_select      ; get in the first bank, we will only then bank select when needed
  94+ C4BF 21 9F C0                             ld      hl,SBnKLineArray
  95+ C4C2 06 40                                ld      b,64
  96+ C4C4 0E 00                                ld      c,0
  97+ C4C6 E5 C5        .drawLineLoop1:         push    hl,,bc
  98+ C4C8 7E                                   ld      a,(hl)
  99+ C4C9 57                                   ld      d,a
 100+ C4CA 5E                                   ld      e,(hl)
 101+ C4CB A3                                   and     e                       ; if both points are zero then no line
 102+ C4CC 28 2A                                jr      z,.NoLine
 103+ C4CE 4A                                   ld      c,d
 104+ C4CF 7B                                   ld      a,e
 105+ C4D0 92                                   sub     d
 106+ C4D1 57                                   ld      d,a                     ; de = length (e - d)
 107+ C4D2 1E D8                                ld      e,216                   ; yellow
 108+ C4D4 CD 3A E2                             call    l2_draw_horz_dma
 109+ C4D7 C1 E1                                pop     hl,,bc                  ; is it quicker to use iy ??
 110+ C4D9 0C                                   inc     c
 111+ C4DA 23                                   inc     hl
 112+ C4DB 05                                   dec     b
 113+ C4DC 10 E8                                djnz    .drawLineLoop1
 114+ C4DE 3E 01                                ld      a,1
 115+ C4E0 CD 0D E0                             call    asm_l2_bank_select      ; now do the lower bank
 116+ C4E3 0E 00                                ld      c,0                     ; reset the row as we have moved to a new bank
 117+ C4E5 06 40                                ld      b,64
 118+ C4E7              ; Could make this a sub routine but unwrapping saves a call
 119+ C4E7 E5 C5        .drawLineLoop2:         push    hl,,bc
 120+ C4E9 7E                                   ld      a,(hl)
 121+ C4EA 57                                   ld      d,a
 122+ C4EB 5E                                   ld      e,(hl)
 123+ C4EC A3                                   and     e                       ; if both points are zero then no line
 124+ C4ED 28 09                                jr      z,.NoLine
 125+ C4EF 4A                                   ld      c,d
 126+ C4F0 7B                                   ld      a,e
 127+ C4F1 92                                   sub     d
 128+ C4F2 57                                   ld      d,a                     ; de = length (e - d)
 129+ C4F3 1E D8                                ld      e,216                   ; yellow
 130+ C4F5 CD 3A E2                             call    l2_draw_horz_dma
 131+ C4F8 C1 E1        .NoLine                 pop     hl,,bc                  ; is it quicker to use iy ??
 132+ C4FA 0C                                   inc     c
 133+ C4FB 23                                   inc     hl
 134+ C4FC 05                                   dec     b
 135+ C4FD 10 E8                                djnz    .drawLineLoop2
 136+ C4FF C9                                   ret
 137+ C500
 138+ C500              ; --------------------------------------------------------------
 139+ C500              ; This sets current universe object to a star / sun, they use sign + 23 bit positions
 140+ C500 CD 9F C4     CreateSun:              call    ResetSBnKData
 141+ C503 3A BC 93                             ld      a,(WorkingSeeds+3)
 142+ C506 E6 07                                and     %00000111
 143+ C508 F6 81                                or      %10000001 ;so working seed byte 3, take lower 3 bits, make sure 0 is set for negative z
 144+ C50A 32 18 C0                             ld      (SBnKzsgn),a
 145+ C50D 3A BE 93                             ld      a,(WorkingSeeds+5)
 146+ C510 E6 03                                and     %00000011
 147+ C512 32 18 C0                             ld      (SBnKzsgn),a
 148+ C515 32 15 C0                             ld      (SBnKysgn),a
 149+ C518 C9                                   ret
 150+ C519              ; --------------------------------------------------------------
 151+ C519              ; This sets current universe object to a planet,they use sign + 23 bit positions
 152+ C519              ;;TODOCreatePlanet:           call    ResetSBnKData
 153+ C519              ;;TODO                        ld      a,(DisplayTekLevel)
 154+ C519              ;;TODO                        and     $00000010               ; Set A = 128 or 130 depending on bit 1 of the system's tech level
 155+ C519              ;;TODO                        or      $10000000
 156+ C519              ;;TODO                        ld      (SBnKShipType),a
 157+ C519              ;;TODO                        xor     a
 158+ C519              ;;TODO                        ld      (SBnKaiatkecm),a
 159+ C519              ;;TODO                        MaxUnivPitchAndRoll
 160+ C519              ;;TODO                        ld      a,(WorkingSeeds+1)      ; a= bits 1 and 0 of working seed1 + 3 + carry
 161+ C519              ;;TODO                        and     %00000011               ; .
 162+ C519              ;;TODO                        adc     3                       ; .
 163+ C519              ;;TODO                        ld      (SBnKzsgn),a            ; set z sign to 3 + C + 0..3 bits
 164+ C519              ;;TODO                        rr      a
 165+ C519              ;;TODO                        ld      (PlanetXsgn),a
 166+ C519              ;;TODO                        ld      (PlanetYsgn),a
 167+ C519              ;;TODO                        ret
 168+ C519
 169+ C519
 170+ C519                                 ;     include "./Maths/ADDHLDESignBC.asm"
 171+ C519
 172+ C519 7C           SunADDHLDESignedv3:     ld      a,h
 173+ C51A E6 80                                and     SignOnly8Bit
 174+ C51C 47                                   ld      b,a                         ;save sign bit in b
 175+ C51D AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 176+ C51E                                      JumpIfNegative .SunADDHLDEOppSGN    ;Signs are opposite there fore we can subtract to get difference
 176+ C51E FA 39 C5    >                        jp		m, .SunADDHLDEOppSGN
 177+ C521 78           .SunADDHLDESameSigns:   ld      a,b
 178+ C522 B2                                   or      d
 179+ C523                                      JumpIfNegative .SunADDHLDESameNeg   ; optimisation so we can just do simple add if both positive
 179+ C523 FA 2B C5    >                        jp		m, .SunADDHLDESameNeg
 180+ C526                                      JumpIfNegative .SunADDHLDESameNeg   ; optimisation so we can just do simple add if both positive
 180+ C526 FA 2B C5    >                        jp		m, .SunADDHLDESameNeg
 181+ C529 19                                   add     hl,de
 182+ C52A C9                                   ret
 183+ C52B 7C           .SunADDHLDESameNeg:     ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 184+ C52C E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 185+ C52E 67                                   ld      h,a
 186+ C52F 7A                                   ld      a,d
 187+ C530 E6 7F                                and     SignMask8Bit
 188+ C532 57                                   ld      d,a
 189+ C533 19                                   add     hl,de
 190+ C534 3E 80                                ld      a,SignOnly8Bit
 191+ C536 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 192+ C537 67                                   ld      h,a
 193+ C538 C9                                   ret
 194+ C539 7C           .SunADDHLDEOppSGN:      ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 195+ C53A E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 196+ C53C 67                                   ld      h,a
 197+ C53D 7A                                   ld      a,d
 198+ C53E E6 7F                                and     SignMask8Bit
 199+ C540 57                                   ld      d,a
 200+ C541 B7                                   or      a
 201+ C542 ED 52                                sbc     hl,de
 202+ C544 38 04                                jr      c,.SunADDHLDEOppInvert
 203+ C546 78           .SunADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 204+ C547 B4                                   or      h
 205+ C548 67                                   ld      h,a                         ; set the previou sign value
 206+ C549 C9                                   ret
 207+ C54A              .SunADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 207+ C54A AF          >                    xor a
 207+ C54B 95          >                    sub l
 207+ C54C 6F          >                    ld l,a
 207+ C54D 9F          >                    sbc a,a
 207+ C54E 94          >                    sub h
 207+ C54F 67          >                    ld h,a
 208+ C550 78                                   ld      a,b
 209+ C551 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 210+ C553 B4                                   or      h
 211+ C554 67                                   ld      h,a                         ; recover sign
 212+ C555 C9                                   ret
 213+ C556
 214+ C556              ; we could cheat, flip the sign of DE and just add but its not very optimised
 215+ C556 7C           .SunSUBHLDESignedv3:        ld      a,h
 216+ C557 E6 80                                and     SignOnly8Bit
 217+ C559 47                                   ld      b,a                         ;save sign bit in b
 218+ C55A AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 219+ C55B                                      JumpIfNegative .SunSUBHLDEOppSGN        ;Signs are opposite therefore we can add
 219+ C55B FA 89 C5    >                        jp		m, .SunSUBHLDEOppSGN
 220+ C55E 78           .SunSUBHLDESameSigns:       ld      a,b
 221+ C55F B2                                   or      d
 222+ C560                                      JumpIfNegative .SunSUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 222+ C560 FA 6A C5    >                        jp		m, .SunSUBHLDESameNeg
 223+ C563 B7                                   or      a
 224+ C564 ED 52                                sbc     hl,de
 225+ C566                                      JumpIfNegative .SunSUBHLDESameOvrFlw
 225+ C566 FA 7D C5    >                        jp		m, .SunSUBHLDESameOvrFlw
 226+ C569 C9                                   ret
 227+ C56A 7C           .SunSUBHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 228+ C56B E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 229+ C56D 67                                   ld      h,a
 230+ C56E 7A                                   ld      a,d
 231+ C56F E6 7F                                and     SignMask8Bit
 232+ C571 57                                   ld      d,a
 233+ C572 B7                                   or      a
 234+ C573 ED 52                                sbc     hl,de
 235+ C575                                      JumpIfNegative .SunSUBHLDESameOvrFlw
 235+ C575 FA 7D C5    >                        jp		m, .SunSUBHLDESameOvrFlw
 236+ C578 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 237+ C579 F6 80                                or      SignOnly8Bit
 238+ C57B 67                                   ld      h,a
 239+ C57C C9                                   ret
 240+ C57D              .SunSUBHLDESameOvrFlw:      NegHL                                                        ; we need to flip the sign and 2'c the Hl result
 240+ C57D AF          >                    xor a
 240+ C57E 95          >                    sub l
 240+ C57F 6F          >                    ld l,a
 240+ C580 9F          >                    sbc a,a
 240+ C581 94          >                    sub h
 240+ C582 67          >                    ld h,a
 241+ C583 78                                   ld      a,b
 242+ C584 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 243+ C586 B4                                   or      h
 244+ C587 67                                   ld      h,a                         ; recover sign
 245+ C588 C9                                   ret
 246+ C589 B7           .SunSUBHLDEOppSGN:          or      a                                               ; here HL and DE are opposite so we can add the values
 247+ C58A 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 248+ C58B E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 249+ C58D 67                                   ld      h,a
 250+ C58E 7A                                   ld      a,d
 251+ C58F E6 7F                                and     SignMask8Bit
 252+ C591 57                                   ld      d,a
 253+ C592 19                                   add     hl,de
 254+ C593 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 255+ C594 B4                                   or      h
 256+ C595 67                                   ld      h,a                         ; set the previou sign value
 257+ C596 C9                                   ret
 258+ C597
 259+ C597
 260+ C597              .SunSBCHLDESigned:      JumpOnBitSet h,7,.SunSBCHLDEhlNeg
 260+ C597 CB 7C       >                        bit 	7,h
 260+ C599 C2 AA C5    >                        jp      nz,.SunSBCHLDEhlNeg
 261+ C59C              .SunSBCHLDEhlPos:       JumpOnBitSet h,7,.SunSBCHLDEhlNeg
 261+ C59C CB 7C       >                        bit 	7,h
 261+ C59E C2 AA C5    >                        jp      nz,.SunSBCHLDEhlNeg
 262+ C5A1 ED 52        .SunSBCHLDEhlPosDePos:  sbc     hl,de                           ; ignore overflow for now will sort later TODO
 263+ C5A3 C9                                   ret
 264+ C5A4 CB BA        .SunSBCHLDEhlPosDeNeg:  res     7,d
 265+ C5A6 19                                   add     hl,de                           ; ignore overflow for now will sort later TODO
 266+ C5A7 CB FA                                set     7,d
 267+ C5A9 C9                                   ret
 268+ C5AA CB BC        .SunSBCHLDEhlNeg:       res     7,h
 269+ C5AC                                      JumpOnBitSet d,7,.SunSBCHLDEhlNegdeNeg
 269+ C5AC CB 7A       >                        bit 	7,d
 269+ C5AE C2 B6 C5    >                        jp      nz,.SunSBCHLDEhlNegdeNeg
 270+ C5B1 ED 52        .SunSBCHLDEhlNegdePos:  sbc     hl,de                       ; ignore overflow for now will sort later TODO
 271+ C5B3 CB FC                                set     7,h
 272+ C5B5 C9                                   ret
 273+ C5B6 CB BA        .SunSBCHLDEhlNegdeNeg:      res     7,d
 274+ C5B8 19                                   add     hl,de                   ; ignore overflow for now will sort later TODO
 275+ C5B9 CB FA                                set     7,d
 276+ C5BB CB FC                                set     7,h
 277+ C5BD C9                                   ret
 278+ C5BE
 279+ C5BE
 280+ C5BE
 281+ C5BE              ;                    include "Universe/InitialiseOrientation.asm"
 282+ C5BE              ;----------------------------------------------------------------------------------------------------------------------------------
 283+ C5BE              ;;;
 284+ C5BE              ;;;Project:
 285+ C5BE              ;;;PROJ:                   ld      hl,(SBnKxlo)                    ; Project K+INWK(x,y)/z to K3,K4 for center to screen
 286+ C5BE              ;;;                        ld      (varP),hl
 287+ C5BE              ;;;                        ld      a,(SBnKxsgn)
 288+ C5BE              ;;;                        call    PLS6                            ; returns result in K (0 1) (unsigned) and K (3) = sign note to no longer does 2's C
 289+ C5BE              ;;;                        ret     c                               ; carry means don't print
 290+ C5BE              ;;;                        ld      hl,(varK)                       ; hl = k (0 1)
 291+ C5BE              ;;;                        ; Now the question is as hl is the fractional part, should this be multiplied by 127 to get the actual range
 292+ C5BE              ;;;                        ld      a,ViewCenterX
 293+ C5BE              ;;;                        add     hl,a                            ; add unsigned a to the 2's C HL to get pixel position
 294+ C5BE              ;;;                        ld      (varK3),hl                      ; K3 = X position on screen
 295+ C5BE              ;;;ProjectY:               ld      hl,(SBnKylo)
 296+ C5BE              ;;;                        ld      (varP),hl
 297+ C5BE              ;;;                        ld      a,(SBnKysgn)
 298+ C5BE              ;;;                        call    PLS6
 299+ C5BE              ;;;                        ret     c
 300+ C5BE              ;;;                        ld      hl,(varK)                       ; hl = k (0 1)
 301+ C5BE              ;;;                        ld      a,ViewCenterY
 302+ C5BE              ;;;                        add     hl,a                            ; add unsigned a to the 2's C HL to get pixel position
 303+ C5BE              ;;;                        ld      (varK4),hl                      ; K3 = X position on screen
 304+ C5BE              ;;;                        ret
 305+ C5BE              ;--------------------------------------------------------------------------------------------------------
 306+ C5BE              ;                        include "./ModelRender/EraseOldLines-EE51.asm"
 307+ C5BE              ;                        include "./ModelRender/TrimToScreenGrad-LL118.asm"
 308+ C5BE              ;                        include "./ModelRender/CLIP-LL145.asm"
 309+ C5BE              ;--------------------------------------------------------------------------------------------------------
 310+ C5BE              ;                        include "./Variables/CopyRotmatToTransMat.asm"
 311+ C5BE                                      include "./Universe/Sun/TransposeSunXX12BySunToSunXX15.asm"
# file opened: ././Universe/Sun/TransposeSunXX12BySunToSunXX15.asm
   1++C5BE              TransposeSXX12BySunToSXX15:
   2++C5BE 2A 7A C0                             ld		hl,(SBnKXX12xLo)					; get X into HL
   3++C5C1 7C                                   ld		a,h			                        ; get XX12 Sign
   4++C5C2 E6 80                                and		$80									; check sign bit on high byte
   5++C5C4 47                                   ld		b,a									; and put it in of 12xlo in b
   6++C5C5                                      ;110921 debugld      h,0
   7++C5C5 7C                                   ld      a,h
   8++C5C6 E6 7F                                and     $7F
   9++C5C8 67                                   ld      h,a
  10++C5C9                                      ;110921 debugld      h,0
  11++C5C9 ED 5B 10 C0                          ld		de,(SBnKxlo)						;
  12++C5CD 3A 12 C0                             ld		a,(SBnKxsgn)						; get Ship Pos (low,high,sign)
  13++C5D0 E6 80                                and		$80									; make sure we only have bit 7
  14++C5D2 4F                                   ld		c,a									; and put sign of unkxsgn c
  15++C5D3 CD E6 A7                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
  16++C5D6 B4                                   or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
  17++C5D7 67                                   ld		h,a
  18++C5D8 22 74 C0                             ld		(SBnKXScaled),hl					; now write it out to XX15 X pos
  19++C5DB              ; ..................................
  20++C5DB 2A 7C C0                             ld		hl,(SBnKXX12yLo)					; Repeat above for Y coordinate
  21++C5DE 7C                                   ld		a,h
  22++C5DF E6 80                                and		$80
  23++C5E1 47                                   ld		b,a
  24++C5E2                                      ;110921 debugld      h,0
  25++C5E2 7C                                   ld      a,h
  26++C5E3 E6 7F                                and     $7F
  27++C5E5 67                                   ld      h,a
  28++C5E6                                      ;110921 debugld      h,0
  29++C5E6 ED 5B 13 C0                          ld		de,(SBnKylo)
  30++C5EA 3A 15 C0                             ld		a,(SBnKysgn)
  31++C5ED E6 80                                and		$80									; make sure we only have bit 7
  32++C5EF 4F                                   ld		c,a
  33++C5F0 CD E6 A7                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  34++C5F3 B4                                   or		h									; combine sign in A with H
  35++C5F4 67                                   ld		h,a
  36++C5F5 22 76 C0                             ld		(SBnKYScaled),hl
  37++C5F8              ; ..................................
  38++C5F8 2A 7E C0                             ld		hl,(SBnKXX12zLo)					; and now repeat for Z cooord
  39++C5FB 7C                                   ld		a,h
  40++C5FC E6 80                                and		$80
  41++C5FE 47                                   ld		b,a
  42++C5FF                                      ;110921 debugld      h,0
  43++C5FF 7C                                   ld      a,h
  44++C600 E6 7F                                and     $7F
  45++C602 67                                   ld      h,a
  46++C603                                      ;110921 debugld      h,0
  47++C603 ED 5B 16 C0                          ld		de,(SBnKzlo)
  48++C607 3A 18 C0                             ld		a,(SBnKzsgn)
  49++C60A E6 80                                and		$80									; make sure we only have bit 7
  50++C60C 4F                                   ld		c,a
  51++C60D CD E6 A7                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  52++C610 B4                                   or		h									; combine sign in A with H
  53++C611 67                                   ld		h,a
  54++C612 CB 7C                                bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
  55++C614 20 16                                jr		nz,.ClampZto4                        ; result was negative so we need to clamp to 4
  56++C616 E6 7F                                and     $7F                                 ; a = value unsigned
  57++C618 20 06                                jr      nz,.NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
  58++C61A 7D                                   ld      a,l                                 ; get low byte now
  59++C61B                                      JumpIfALTNusng 4,.ClampZto4					; if its < 4 then fix at 4
  59++C61B FE 04       >                        cp      4
  59++C61D DA 2C C6    >                        jp		c, .ClampZto4
  60++C620 22 78 C0     .NoClampZto4:           ld		(SBnKZScaled),hl					; hl = signed calculation and > 4
  61++C623 7D                                   ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
  62++C624 32 D2 92                             ld      (varT),a
  63++C627 7C                                   ld		a,h
  64++C628 32 B3 92                             ld      (varU),a
  65++C62B C9                                   ret
  66++C62C              ; This is where we limit 4 to a minimum of 4
  67++C62C 21 04 00     .ClampZto4:             ld		hl,4
  68++C62F 22 78 C0                             ld		(SBnKZScaled),hl; BODGE FOR NOW
  69++C632 7D                                   ld		a,l
  70++C633 32 D2 92                             ld      (varT),a                            ;                                                                           ;;;
  71++C636 7C                                   ld		a,h
  72++C637 32 B3 92                             ld      (varU),a 						; compatibility for now
  73++C63A C9                                   ret
  74++C63B
# file closed: ././Universe/Sun/TransposeSunXX12BySunToSunXX15.asm
 312+ C63B
 313+ C63B
 314+ C63B ED 4B 78 C0  ScaleSunTo8Bit:			ld			bc,(SBnKZScaled)
 315+ C63F 2A 74 C0                             ld			hl,(SBnKXScaled)
 316+ C642 ED 5B 76 C0                          ld			de,(SBnKYScaled)
 317+ C646 78           .SetABSbc:              ld			a,b
 318+ C647 DD 67                                ld			ixh,a
 319+ C649 E6 7F                                and			SignMask8Bit
 320+ C64B 47                                   ld			b,a									; bc = ABS bc
 321+ C64C 7C           .SetABShl:              ld			a,h
 322+ C64D DD 6F                                ld			ixl,a
 323+ C64F E6 7F                                and			SignMask8Bit
 324+ C651 67                                   ld			h,a									; hl = ABS hl
 325+ C652 7A           .SetABSde:              ld			a,d
 326+ C653 FD 67                                ld			iyh,a
 327+ C655 E6 7F                                and			SignMask8Bit
 328+ C657 57                                   ld			d,a									; de = ABS de
 329+ C658 78           .ScaleNodeTo8BitLoop:   ld          a,b		                            ; U	\ z hi
 330+ C659 B4                                   or			h                                   ; XX15+1	\ x hi
 331+ C65A B2                                   or			d                                   ; XX15+4	\ y hi
 332+ C65B 28 0F                                jr          z,.ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 333+ C65D                                      ShiftHLRight1
 333+ C65D CB 3C       >			   srl h
 333+ C65F CB 1D       >			   rr  l
 334+ C661                                      ShiftDERight1
 334+ C661 CB 3A       >			   srl d
 334+ C663 CB 1B       >			   rr  e
 335+ C665                                      ShiftBCRight1
 335+ C665 CB 38       >			   srl b
 335+ C667 CB 19       >			   rr  c
 336+ C669 C3 58 C6                             jp          .ScaleNodeTo8BitLoop
 337+ C66C              ; now we have scaled values we have to deal with sign
 338+ C66C DD 7C        .ScaleNodeDone:          ld			a,ixh								; get sign bit and or with b
 339+ C66E E6 80                                and			SignOnly8Bit
 340+ C670 B0                                   or			b
 341+ C671 47                                   ld			b,a
 342+ C672 DD 7D        .SignforHL:              ld			a,ixl								; get sign bit and or with b
 343+ C674 E6 80                                and			SignOnly8Bit
 344+ C676 B4                                   or			h
 345+ C677 67                                   ld			h,a
 346+ C678 FD 7C        .SignforDE:              ld			a,iyh								; get sign bit and or with b
 347+ C67A E6 80                                and			SignOnly8Bit
 348+ C67C B2                                   or			d
 349+ C67D 57                                   ld			d,a
 350+ C67E ED 43 78 C0  .SignsDoneSaveResult:	ld			(SBnKZScaled),bc
 351+ C682 22 74 C0                             ld			(SBnKXScaled),hl
 352+ C685 ED 53 76 C0                          ld			(SBnKYScaled),de
 353+ C689 78                                   ld			a,b
 354+ C68A 32 B3 92                             ld			(varU),a
 355+ C68D 79                                   ld			a,c
 356+ C68E 32 D2 92                             ld			(varT),a
 357+ C691 C9                                   ret
 358+ C692
 359+ C692              ;--------------------------------------------------------------------------------------------------------
 360+ C692              ;;;;X = normal scale
 361+ C692              ;;;;ZtempHi = zhi
 362+ C692              ;;;;......................................................
 363+ C692              ;;;; if ztemp hi <> 0                                   ::Scale Object Distance
 364+ C692              ;;;;  Loop                                              ::LL90
 365+ C692              ;;;;     inc X
 366+ C692              ;;;;     divide X, Y & ZtempHiLo by 2
 367+ C692              ;;;;  Until ZtempHi = 0
 368+ C692              ;;;;......................................................
 369+ C692              ;-LL21---------------------------------------------------------------------------------------------------
 370+ C692              ;                        include "./Universe/NormaliseTransMat.asm"
 371+ C692              ;-LL91---------------------------------------------------------------------------------------------------
 372+ C692
 373+ C692              ; Now we have
 374+ C692              ;   * XX18(2 1 0) = (x_sign x_hi x_lo)
 375+ C692              ;   * XX18(5 4 3) = (y_sign y_hi y_lo)
 376+ C692              ;   * XX18(8 7 6) = (z_sign z_hi z_lo)
 377+ C692              ;
 378+ C692              ;--------------------------------------------------------------------------------------------------------
 379+ C692              ;--------------------------------------------------------------------------------------------------------
 380+ C692              ;   XX12(1 0) = [x y z] . sidev  = (dot_sidev_sign dot_sidev_lo)  = dot_sidev
 381+ C692              ;   XX12(3 2) = [x y z] . roofv  = (dot_roofv_sign dot_roofv_lo)  = dot_roofv
 382+ C692              ;   XX12(5 4) = [x y z] . nosev  = (dot_nosev_sign dot_nosev_lo)  = dot_nosev
 383+ C692              ; Returns
 384+ C692              ;
 385+ C692              ;   XX12(1 0)            The dot product of [x y z] vector with the sidev (or _x)
 386+ C692              ;                        vector, with the sign in XX12+1 and magnitude in XX12
 387+ C692              ;
 388+ C692              ;   XX12(3 2)            The dot product of [x y z] vector with the roofv (or _y)
 389+ C692              ;                        vector, with the sign in XX12+3 and magnitude in XX12+2
 390+ C692              ;
 391+ C692              ;   XX12(5 4)            The dot product of [x y z] vector with the nosev (or _z)
 392+ C692              ;                        vector, with the sign in XX12+5 and magnitude in XX12+4
 393+ C692
 394+ C692
 395+ C692               ; TESTEDOK
 396+ C692              SXX12DotOneRow:
 397+ C692              SXX12CalcX:              N0equN1byN2div256 varT, (hl), (SBnKXScaled)       ; T = (hl) * regSunXX15fx /256
 397+ C692 3A 74 C0    >                        ld      a,(SBnKXScaled)                        ;
 397+ C695 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 397+ C696 7E          >                        ld      a,(hl)                        ; A = XX16 element
 397+ C697 57          >                        ld      d,a
 397+ C698 ED 30       >                        mul
 397+ C69A 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 397+ C69B 32 D2 92    >                        ld      (varT),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 398+ C69E 23                                   inc     hl                                  ; move to sign byte
 399+ C69F              SXX12CalcXSign:          AequN1xorN2 SBnKXScaledSign,(hl)             ;
 399+ C69F 3A 75 C0    >                        ld      a,(SBnKXScaledSign)
 399+ C6A2 AE          >                        xor     (hl)
 400+ C6A3 32 B6 92                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 401+ C6A6 23                                   inc     hl
 402+ C6A7              SXX12CalcY:              N0equN1byN2div256 varQ, (hl),(SBnKYScaled)       ; Q = XX16 * SunXX15 /256 using varQ to hold regSunXX15fx
 402+ C6A7 3A 76 C0    >                        ld      a,(SBnKYScaled)                        ;
 402+ C6AA 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 402+ C6AB 7E          >                        ld      a,(hl)                        ; A = XX16 element
 402+ C6AC 57          >                        ld      d,a
 402+ C6AD ED 30       >                        mul
 402+ C6AF 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 402+ C6B0 32 B4 92    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 403+ C6B3                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 403+ C6B3 3A D2 92    >               ld       a,(varT)
 403+ C6B6 32 B5 92    >               ld       (varR),a
 404+ C6B9 23                                   inc     hl
 405+ C6BA                                      AequN1xorN2 SBnKYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 405+ C6BA 3A 77 C0    >                        ld      a,(SBnKYScaledSign)
 405+ C6BD AE          >                        xor     (hl)
 406+ C6BE              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 407+ C6BE E5           SSTequSRplusAQ           push    hl
 408+ C6BF CD DD A8                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 409+ C6C2 E1                                   pop     hl
 410+ C6C3 32 D2 92                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 411+ C6C6 23                                   inc     hl
 412+ C6C7              SXX12CalcZ:              N0equN1byN2div256 varQ,(hl),(SBnKZScaled)       ; Q = |sidev_z| * z_lo / 256
 412+ C6C7 3A 78 C0    >                        ld      a,(SBnKZScaled)                        ;
 412+ C6CA 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 412+ C6CB 7E          >                        ld      a,(hl)                        ; A = XX16 element
 412+ C6CC 57          >                        ld      d,a
 412+ C6CD ED 30       >                        mul
 412+ C6CF 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 412+ C6D0 32 B4 92    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 413+ C6D3                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 413+ C6D3 3A D2 92    >               ld       a,(varT)
 413+ C6D6 32 B5 92    >               ld       (varR),a
 414+ C6D9 23                                   inc     hl
 415+ C6DA                                      AequN1xorN2 SBnKZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 415+ C6DA 3A 79 C0    >                        ld      a,(SBnKZScaledSign)
 415+ C6DD AE          >                        xor     (hl)
 416+ C6DE              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 417+ C6DE CD DD A8                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 418+ C6E1              ; Now we exit with A = result S = Sign
 419+ C6E1 C9                                   ret
 420+ C6E2
 421+ C6E2
 422+ C6E2
 423+ C6E2              ;--------------------------------------------------------------------------------------------------------
 424+ C6E2                                      include "./Universe/Sun/CopySunXX12ScaledToSunXX18.asm"
# file opened: ././Universe/Sun/CopySunXX12ScaledToSunXX18.asm
   1++C6E2              CopySXX12ScaledToSXX18:
   2++C6E2              CopyResultToSDrawCam:
   3++C6E2                      ldCopyByte SXX12         ,SXX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++C6E2 3A 7A C0    >               ld       a,(SXX12)
   3++C6E5 32 68 C0    >               ld       (SXX18),a
   4++C6E8                      ldCopyByte SXX12+1       ,SXX18+2           ; XX12+1 => XX18+2
   4++C6E8 3A 7B C0    >               ld       a,(SXX12+1)
   4++C6EB 32 6A C0    >               ld       (SXX18+2),a
   5++C6EE                      ldCopyByte SXX12+2       ,SXX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++C6EE 3A 7C C0    >               ld       a,(SXX12+2)
   5++C6F1 32 6B C0    >               ld       (SXX18+3),a
   6++C6F4                      ldCopyByte SXX12+3       ,SXX18+5           ; XX12+3 => XX18+5
   6++C6F4 3A 7D C0    >               ld       a,(SXX12+3)
   6++C6F7 32 6D C0    >               ld       (SXX18+5),a
   7++C6FA                      ldCopyByte SXX12+4       ,SXX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++C6FA 3A 7E C0    >               ld       a,(SXX12+4)
   7++C6FD 32 6E C0    >               ld       (SXX18+6),a
   8++C700                      ldCopyByte SXX12+5       ,SXX18+8           ; XX12+5 => XX18+8
   8++C700 3A 7F C0    >               ld       a,(SXX12+5)
   8++C703 32 70 C0    >               ld       (SXX18+8),a
   9++C706 C9                   ret
  10++C707
# file closed: ././Universe/Sun/CopySunXX12ScaledToSunXX18.asm
 425+ C707              ;                        include "./Variables/CopySunXX12toSunXX15.asm"
 426+ C707              ;                       include "./Variables/CopySunXX18toSunXX15.asm"
 427+ C707              ;                       include "./Variables/CopySunXX18ScaledToSunXX15.asm"
 428+ C707              ;                       include "./Variables/CopySunXX12ToScaled.asm"
 429+ C707              ;--------------------------------------------------------------------------------------------------------
 430+ C707              ;                        include "./Maths/Utilities/DotProductXX12SunXX15.asm"
 431+ C707              ;--------------------------------------------------------------------------------------------------------
 432+ C707
 433+ C707 DD 25        ScaleDownSXX15byIXH:    dec     ixh
 434+ C709 F8                                   ret     m
 435+ C70A 21 74 C0                             ld      hl,SBnKXScaled
 436+ C70D CB 3E                                srl     (hl)                        ; SunXX15  \ xnormal lo/2 \ LL93+3 \ counter X
 437+ C70F 23                                   inc     hl                          ; looking at SunXX15 x sign now
 438+ C710 23                                   inc     hl                          ; looking at SunXX15 y Lo now
 439+ C711 CB 3E                                srl     (hl)                        ; SunXX15+2    \ ynormal lo/2
 440+ C713 23                                   inc     hl                          ; looking at SunXX15 y sign now
 441+ C714 23                                   inc     hl                          ; looking at SunXX15 z Lo now
 442+ C715 CB 3E                                srl     (hl)
 443+ C717 C3 07 C7                             jp      ScaleDownSXX15byIXH
 444+ C71A C9                                   ret
 445+ C71B
 446+ C71B 21 68 C0     DivideSXX18By2:         ld      hl,SBnKDrawCam0xLo
 447+ C71E CB 3E                                srl     (hl)                        ; XX18  \ xnormal lo/2 \ LL93+3 \ counter X
 448+ C720 23                                   inc     hl                          ; looking at XX18 x sign now
 449+ C721 23                                   inc     hl                          ; looking at XX18 y Lo now
 450+ C722 CB 3E                                srl     (hl)                        ; XX18+2    \ ynormal lo/2
 451+ C724 23                                   inc     hl                          ; looking at XX18 y sign now
 452+ C725 23                                   inc     hl                          ; looking at XX18 z Lo now
 453+ C726 CB 3E                                srl     (hl)
 454+ C728 C9                                   ret
 455+ C729
 456+ C729              ; ......................................................                                                         ;;;
 457+ C729
 458+ C729              SunProjectToEye:
 459+ C729 ED 4B 78 C0  	ld			bc,(SBnKZScaled)					; BC = Z Cordinate. By here it MUST be positive as its clamped to 4 min
 460+ C72D 79           	ld			a,c                                 ;  so no need for a negative check
 461+ C72E 32 B4 92     	ld			(varQ),a		                    ; VarQ = z
 462+ C731 3A 74 C0         ld          a,(SBnKXScaled)                     ; SunXX15	\ rolled x lo which is signed
 463+ C734 CD E5 A3     	call		DIV16Amul256dCUNDOC					; result in BC which is 16 bit TODO Move to 16 bit below not just C reg
 464+ C737 3A 75 C0         ld          a,(SBnKXScaledSign)                 ; SunXX15+2 \ sign of X dist
 465+ C73A                  JumpOnBitSet a,7,.EyeNegativeXPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 465+ C73A CB 7F       >                        bit 	7,a
 465+ C73C C2 47 C7    >                        jp      nz,.EyeNegativeXPoint
 466+ C73F              .EyePositiveXPoint:									; x was positive result
 467+ C73F 2E 80            ld          l,ScreenCenterX						;
 468+ C741 26 00            ld          h,0
 469+ C743 09               add         hl,bc								; hl = Screen Centre + X
 470+ C744 C3 30 D8         jp          EyeStoreXPoint
 471+ C747              .EyeNegativeXPoint:                                 ; x < 0 so need to subtract from the screen centre position
 472+ C747 2E 80            ld          l,ScreenCenterX
 473+ C749 26 00            ld          h,0
 474+ C74B                  ClearCarryFlag
 474+ C74B B7          >                    or a
 475+ C74C ED 42            sbc         hl,bc                               ; hl = Screen Centre - X
 476+ C74E              .EyeStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 477+ C74E EB               ex          de,hl
 478+ C74F FD 73 00         ld          (iy+0),e                            ; Update X Point TODO this bit is 16 bit aware just need to fix above bit
 479+ C752 FD 72 01         ld          (iy+1),d                            ; Update X Point
 480+ C755              .EyeProcessYPoint:
 481+ C755 ED 4B 78 C0  	ld			bc,(SBnKZScaled)					; Now process Y co-ordinate
 482+ C759 79           	ld			a,c
 483+ C75A 32 B4 92     	ld			(varQ),a
 484+ C75D 3A 76 C0         ld          a,(SBnKYScaled)                     ; SunXX15	\ rolled x lo
 485+ C760 CD E5 A3     	call		DIV16Amul256dCUNDOC	                ; a = Y scaled * 256 / zscaled
 486+ C763 3A 77 C0         ld          a,(SBnKYScaledSign)                 ; SunXX15+2 \ sign of X dist
 487+ C766                  JumpOnBitSet a,7,.EyeNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
 487+ C766 CB 7F       >                        bit 	7,a
 487+ C768 C2 73 C7    >                        jp      nz,.EyeNegativeYPoint
 488+ C76B              .EyePositiveYPoint:									; Y is positive so above the centre line
 489+ C76B 2E 60            ld          l,ScreenCenterY
 490+ C76D                  ClearCarryFlag
 490+ C76D B7          >                    or a
 491+ C76E ED 42            sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
 492+ C770 C3 5A D8         jp          EyeStoreYPoint
 493+ C773              .EyeNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
 494+ C773 2E 60            ld          l,ScreenCenterY
 495+ C775 26 00            ld          h,0
 496+ C777 09               add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
 497+ C778              .EyeStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 498+ C778 EB               ex          de,hl
 499+ C779 FD 73 02         ld          (iy+2),e                            ; Update Y Point
 500+ C77C FD 72 03         ld          (iy+3),d                            ; Update Y Point
 501+ C77F C9               ret
 502+ C780
 503+ C780
 504+ C780
 505+ C780              ; Pitch and roll are 2 phases
 506+ C780              ; 1 - we apply our pitch and roll to the ship position
 507+ C780              ;       x -> x + alpha * (y - alpha * x)
 508+ C780              ;       y -> y - alpha * x - beta * z
 509+ C780              ;       z -> z + beta * (y - alpha * x - beta * z)
 510+ C780              ; which can be simplified as:
 511+ C780              ;       1. K2 = y - alpha * x
 512+ C780              ;       2. z = z + beta * K2
 513+ C780              ;       3. y = K2 - beta * z
 514+ C780              ;       4. x = x + alpha * y
 515+ C780              ; 2 - we apply our patch and roll to the ship orientation
 516+ C780              ;      Roll calculations:
 517+ C780              ;
 518+ C780              ;        nosev_y = nosev_y - alpha * nosev_x_hi
 519+ C780              ;        nosev_x = nosev_x + alpha * nosev_y_hi
 520+ C780              ;      Pitch calculations:
 521+ C780              ;
 522+ C780              ;        nosev_y = nosev_y - beta * nosev_z_hi
 523+ C780              ;        nosev_z = nosev_z + beta * nosev_y_hi
 524+ C780
 525+ C780
 526+ C780                          INCLUDE "./Universe/Sun/SunApplyMyRollAndPitch.asm"
# file opened: ././Universe/Sun/SunApplyMyRollAndPitch.asm
   1++C780
   2++C780              ; Full version
   3++C780              ; 1. K2 = y - alpha * x
   4++C780              ; 2. z = z + beta * K2
   5++C780              ; 3. y = K2 - beta * z
   6++C780              ; 4. x = x + alpha * y
   7++C780
   8++C780
   9++C780
  10++C780              SAPPequPosPlusAPP:       MACRO    Position, PositionSign
  11++C780 ~                                    push    bc
  12++C780 ~                                    ld      c,a                         ; save original value of a into c
  13++C780 ~                                    ld      a,(PositionSign)
  14++C780 ~                                    ld      b,a
  15++C780 ~                                    ld      a,c
  16++C780 ~                                    xor     b                           ; a = a xor x postition sign
  17++C780 ~                                    jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  18++C780 ~            ; Signs are the same to we just add and take which ever sign
  19++C780 ~                                    ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  20++C780 ~                                    ld      hl,(Position)
  21++C780 ~                                    add     hl,de
  22++C780 ~                                    ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  23++C780 ~                                    ld      a,c                         ; and a = original sign as they were both the same
  24++C780 ~                                    pop     bc
  25++C780 ~                                    ret
  26++C780 ~            ; Signs are opposite so we subtract
  27++C780 ~            .MV50:                  ld      de,(varPp1)
  28++C780 ~                                    ld      hl,(Position)
  29++C780 ~                                    or      a
  30++C780 ~                                    sbc     hl,de
  31++C780 ~                                    jr      c,.MV51                     ; if the result was negative then negate result
  32++C780 ~                                    ld      a,c                         ; get back the original sign
  33++C780 ~                                    ld      (varPp1),hl                 ; and save result to P[2][1]
  34++C780 ~                                    xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  35++C780 ~                                    pop     bc
  36++C780 ~                                    ret
  37++C780 ~            .MV51:                  NegHL
  38++C780 ~                                    ld      (varPp1),hl
  39++C780 ~                                    ld      a,c                         ; the original sign will still be good
  40++C780 ~                                    pop     bc
  41++C780 ~                                    ret
  42++C780                                      ENDM
  43++C780
  44++C780
  45++C780              SAPPequXPosPlusAPP:     SAPPequPosPlusAPP SBnKxlo, SBnKxsgn
  45++C780 C5          >                        push    bc
  45++C781 4F          >                        ld      c,a                         ; save original value of a into c
  45++C782 3A 12 C0    >                        ld      a,(SBnKxsgn)
  45++C785 47          >                        ld      b,a
  45++C786 79          >                        ld      a,c
  45++C787 A8          >                        xor     b                           ; a = a xor x postition sign
  45++C788 FA 99 C7    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  45++C78B             >; Signs are the same to we just add and take which ever sign
  45++C78B ED 5B 55 92 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  45++C78F 2A 10 C0    >                        ld      hl,(SBnKxlo)
  45++C792 19          >                        add     hl,de
  45++C793 22 55 92    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  45++C796 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  45++C797 C1          >                        pop     bc
  45++C798 C9          >                        ret
  45++C799             >; Signs are opposite so we subtract
  45++C799 ED 5B 55 92 >.MV50:                  ld      de,(varPp1)
  45++C79D 2A 10 C0    >                        ld      hl,(SBnKxlo)
  45++C7A0 B7          >                        or      a
  45++C7A1 ED 52       >                        sbc     hl,de
  45++C7A3 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  45++C7A5 79          >                        ld      a,c                         ; get back the original sign
  45++C7A6 22 55 92    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  45++C7A9 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  45++C7AB C1          >                        pop     bc
  45++C7AC C9          >                        ret
  45++C7AD             >.MV51:                  NegHL
  45++C7AD AF          >                    xor a
  45++C7AE 95          >                    sub l
  45++C7AF 6F          >                    ld l,a
  45++C7B0 9F          >                    sbc a,a
  45++C7B1 94          >                    sub h
  45++C7B2 67          >                    ld h,a
  45++C7B3 22 55 92    >                        ld      (varPp1),hl
  45++C7B6 79          >                        ld      a,c                         ; the original sign will still be good
  45++C7B7 C1          >                        pop     bc
  45++C7B8 C9          >                        ret
  46++C7B9
  47++C7B9              SAPPequYPosPlusAPP:     SAPPequPosPlusAPP SBnKylo, SBnKysgn
  47++C7B9 C5          >                        push    bc
  47++C7BA 4F          >                        ld      c,a                         ; save original value of a into c
  47++C7BB 3A 15 C0    >                        ld      a,(SBnKysgn)
  47++C7BE 47          >                        ld      b,a
  47++C7BF 79          >                        ld      a,c
  47++C7C0 A8          >                        xor     b                           ; a = a xor x postition sign
  47++C7C1 FA D2 C7    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  47++C7C4             >; Signs are the same to we just add and take which ever sign
  47++C7C4 ED 5B 55 92 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  47++C7C8 2A 13 C0    >                        ld      hl,(SBnKylo)
  47++C7CB 19          >                        add     hl,de
  47++C7CC 22 55 92    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  47++C7CF 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  47++C7D0 C1          >                        pop     bc
  47++C7D1 C9          >                        ret
  47++C7D2             >; Signs are opposite so we subtract
  47++C7D2 ED 5B 55 92 >.MV50:                  ld      de,(varPp1)
  47++C7D6 2A 13 C0    >                        ld      hl,(SBnKylo)
  47++C7D9 B7          >                        or      a
  47++C7DA ED 52       >                        sbc     hl,de
  47++C7DC 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  47++C7DE 79          >                        ld      a,c                         ; get back the original sign
  47++C7DF 22 55 92    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  47++C7E2 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  47++C7E4 C1          >                        pop     bc
  47++C7E5 C9          >                        ret
  47++C7E6             >.MV51:                  NegHL
  47++C7E6 AF          >                    xor a
  47++C7E7 95          >                    sub l
  47++C7E8 6F          >                    ld l,a
  47++C7E9 9F          >                    sbc a,a
  47++C7EA 94          >                    sub h
  47++C7EB 67          >                    ld h,a
  47++C7EC 22 55 92    >                        ld      (varPp1),hl
  47++C7EF 79          >                        ld      a,c                         ; the original sign will still be good
  47++C7F0 C1          >                        pop     bc
  47++C7F1 C9          >                        ret
  48++C7F2
  49++C7F2              SAPPequZPosPlusAPP:     SAPPequPosPlusAPP SBnKzlo, SBnKzsgn
  49++C7F2 C5          >                        push    bc
  49++C7F3 4F          >                        ld      c,a                         ; save original value of a into c
  49++C7F4 3A 18 C0    >                        ld      a,(SBnKzsgn)
  49++C7F7 47          >                        ld      b,a
  49++C7F8 79          >                        ld      a,c
  49++C7F9 A8          >                        xor     b                           ; a = a xor x postition sign
  49++C7FA FA 0B C8    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  49++C7FD             >; Signs are the same to we just add and take which ever sign
  49++C7FD ED 5B 55 92 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  49++C801 2A 16 C0    >                        ld      hl,(SBnKzlo)
  49++C804 19          >                        add     hl,de
  49++C805 22 55 92    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  49++C808 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  49++C809 C1          >                        pop     bc
  49++C80A C9          >                        ret
  49++C80B             >; Signs are opposite so we subtract
  49++C80B ED 5B 55 92 >.MV50:                  ld      de,(varPp1)
  49++C80F 2A 16 C0    >                        ld      hl,(SBnKzlo)
  49++C812 B7          >                        or      a
  49++C813 ED 52       >                        sbc     hl,de
  49++C815 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  49++C817 79          >                        ld      a,c                         ; get back the original sign
  49++C818 22 55 92    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  49++C81B EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  49++C81D C1          >                        pop     bc
  49++C81E C9          >                        ret
  49++C81F             >.MV51:                  NegHL
  49++C81F AF          >                    xor a
  49++C820 95          >                    sub l
  49++C821 6F          >                    ld l,a
  49++C822 9F          >                    sbc a,a
  49++C823 94          >                    sub h
  49++C824 67          >                    ld h,a
  49++C825 22 55 92    >                        ld      (varPp1),hl
  49++C828 79          >                        ld      a,c                         ; the original sign will still be good
  49++C829 C1          >                        pop     bc
  49++C82A C9          >                        ret
  50++C82B
  51++C82B              ; SunrollWork holds Alpha intermidate results
  52++C82B 00 00 00     SunrollWork      DS 3
  53++C82E              SunrollWorkp1    equ SunrollWork
  54++C82E              SunrollWorkp2    equ SunrollWork+1
  55++C82E              SunrollWorkp3    equ SunrollWork+2
  56++C82E
  57++C82E              ;----------------------------------------------------------------------------------------------------------------------------------
  58++C82E              ; based on MVEIT part 4 of 9
  59++C82E 3A 71 92     SunApplyMyRollAndPitch: ld      a,(ALP1)                    ; get roll magnitude
  60++C831 21 61 92                             ld      hl,BET1                     ; and pitch
  61++C834 B6                                   or      (hl)
  62++C835 CA DD C8                             jp      z,.NoRotation               ; if both zero then don't compute
  63++C838                                      ;break
  64++C838              ; P[210] = x * alph (we use P[2]P[1] later as result/256
  65++C838 5F                                   ld      e,a                         ; e = roll magnitude
  66++C839 2A 10 C0                             ld      hl,(SBnKxlo)                ; hl = ship x pos
  67++C83C CD 7C A2                             call    AHLequHLmulE                ; MULTU2-2 AHL = SBnKXlo * Alp1 both unsigned
  68++C83F 32 56 92                             ld      (varPhi2),a                 ; set P[2] to high byte to help with ./256
  69++C842 22 54 92                             ld      (varP),hl                   ; P (2 1 0) = SBnKXlo * Alph1
  70++C845              ; A = Flip sign
  71++C845 3A 73 92                             ld      a,(ALP2FLIP)                ; flip the current roll angle alpha and xor with x sign
  72++C848 21 12 C0                             ld      hl,SBnKxsgn                 ; and xor with x pos sign
  73++C84B AE                                   xor     (hl)                        ; so now  (A P+2 P+1) = - (x_sign x_hi x_lo) * alpha / 256
  74++C84C              ; AP[2]P[1] =Y + AP[2]P[1] (i.e. Previous APP/256)
  75++C84C CD B9 C7                             call    SAPPequYPosPlusAPP           ; MVT6 calculate APP = y - (x * alpha / 256)
  76++C84F              ; K2 = AP[2][1] K2(3 2 1) = (A P+2 P+1) = y - x * alpha / 256
  77++C84F 32 2D C8                             ld      (SunrollWorkp3),a               ; k2+3 = sign of result
  78++C852 22 2B C8                             ld      (SunrollWorkp1),hl             ; k2+1,2 = result
  79++C855              ; P[210] = K2[2 1] * Beta  = (A ~P) * X
  80++C855 3A 61 92                             ld      a,(BET1)                    ; a = magnitude of pitch
  81++C858 5F                                   ld      e,a
  82++C859 CD 7C A2                             call    AHLequHLmulE                ; MLTU2-2 AHL = (P+2 P+1) * BET1 or by now ((SBnKXlo * Alph1)/256 * Bet1)
  83++C85C 32 56 92                             ld      (varPp2),a                   ; save highest byte in P2
  84++C85F 22 54 92                             ld      (varP),hl
  85++C862              ; Fetch sign of previosu cal and xor with BETA inverted
  86++C862 3A 2D C8                             ld      a,(SunrollWorkp3)
  87++C865 5F                                   ld      e,a
  88++C866 3A 62 92                             ld      a,(BET2)
  89++C869 AB                                   xor     e                           ; so we get the sign of K3 and xor with pitch sign
  90++C86A              ; Z = P[210] =Z + APP
  91++C86A CD F2 C7                             call    SAPPequZPosPlusAPP           ; MVT6
  92++C86D 32 18 C0                             ld      (SBnKzsgn),a                ; save result back into z
  93++C870 22 16 C0                             ld      (SBnKzlo),hl
  94++C873              ; A[P1]P[0] = z * Beta
  95++C873 3A 61 92                             ld      a,(BET1)                    ; get pitch back again for mulitply in original it was kept in Q so no fetch needed
  96++C876 5F                                   ld      e,a
  97++C877 CD 7C A2                             call    AHLequHLmulE                ; MULTU2 P2 P1 was already in hl (A P+1 P) = (z_hi z_lo) * beta
  98++C87A 32 56 92                             ld      (varPp2),a                  ; P2 = high byte of result
  99++C87D 22 54 92                             ld      (varP),hl                   ; P (2 1 0) = SBnKXlo & Alph1
 100++C880              ; A xor BET2,Zsign
 101++C880 3A 2D C8                             ld      a,(SunrollWorkp3)               ; get K3 (sign of y) and store it in y pos
 102++C883 32 15 C0                             ld      (SBnKysgn),a                ; save result back into y
 103++C886 5F                                   ld      e,a                         ; a = y sign Xor pitch rate sign
 104++C887 3A 62 92                             ld      a,(BET2)                    ;
 105++C88A AB                                   xor     e                           ;
 106++C88B 5F                                   ld      e,a                         ; now xor it with z sign too
 107++C88C 3A 18 C0                             ld      a,(SBnKzsgn)                ;
 108++C88F AB                                   xor     e                           ; so now a = sign of y * beta * sign y * sign z
 109++C890 F2 9F C8                             jp      p,.MV43                     ; if result is pve beta * z and y have differetn signs
 110++C893 2A 55 92                             ld      hl,(varPp1)
 111++C896 ED 5B 2B C8                          ld      de,(SunrollWorkp1)
 112++C89A B7                                   or      a
 113++C89B 19                                   add     hl,de
 114++C89C C3 B9 C8                             jp      .MV44
 115++C89F 2A 2B C8     .MV43:                  ld      hl,(SunrollWorkp1)
 116++C8A2 ED 5B 55 92                          ld      de,(varPp1)
 117++C8A6 B7                                   or      a
 118++C8A7 ED 52                                sbc     hl,de                       ; (y_hi y_lo) = K2(2 1) - P(2 1)
 119++C8A9 30 0E                                jr      nc,.MV44                    ; if there was no over flow carry on
 120++C8AB                                      NegHL
 120++C8AB AF          >                    xor a
 120++C8AC 95          >                    sub l
 120++C8AD 6F          >                    ld l,a
 120++C8AE 9F          >                    sbc a,a
 120++C8AF 94          >                    sub h
 120++C8B0 67          >                    ld h,a
 121++C8B1 3A 15 C0                             ld      a,(SBnKysgn)                ; flip sign bit TODO, we may have to remove xor as planets and suns are sign + 23 bit xpos
 122++C8B4 EE 80                                xor     SignOnly8Bit
 123++C8B6 32 15 C0                             ld      (SBnKysgn),a
 124++C8B9              ; by here we have (y_sign y_hi y_lo) = K2(2 1) - P(2 1) = K2 - beta * z
 125++C8B9 22 13 C0     .MV44:                  ld      (SBnKylo),hl                ; we do save here to avoid two writes if MV43 ended up with a 2s'c conversion
 126++C8BC 3A 71 92                             ld      a,(ALP1)                    ; get roll magnitude
 127++C8BF 5F                                   ld      e,a
 128++C8C0 2A 13 C0                             ld      hl,(SBnKylo)
 129++C8C3 CD 7C A2                             call    AHLequHLmulE                ; MLTU2-2 AHL = (y_hi y_lo) * alpha
 130++C8C6 32 56 92                             ld      (varPp2),a                  ; store high byte P(2 1 0) = (y_hi y_lo) * alpha
 131++C8C9 22 54 92                             ld      (varP),hl
 132++C8CC 3A 72 92                             ld      a,(ALP2)
 133++C8CF 5F                                   ld      e,a
 134++C8D0 3A 15 C0                             ld      a,(SBnKysgn)
 135++C8D3 AB                                   xor     e                           ; a = sign of roll xor y so now we have (A P+2 P+1) = (y_sign y_hi y_lo) * alpha / 256
 136++C8D4 CD 80 C7                             call    SAPPequXPosPlusAPP           ; MVT6 Set (A P+2 P+1) = (x_sign x_hi x_lo) + (A P+2 P+1) = x + y * alpha / 256
 137++C8D7 32 12 C0                             ld      (SBnKxsgn),a                ; save resutl stright into X pos
 138++C8DA 22 10 C0                             ld      (SBnKxlo),hl
 139++C8DD                                      ;break
 140++C8DD                                      ; if its not a sun then apply to local orientation
 141++C8DD
 142++C8DD 3A B0 92     .NoRotation:            ld      a,(DELTA)                   ; get speed
 143++C8E0 16 00                                ld      d,0
 144++C8E2 5F                                   ld      e,a                         ; de = speed in low byte
 145++C8E3 2A 16 C0                             ld      hl,(SBnKzlo)                ; hl = z position
 146++C8E6 3A 18 C0                             ld      a,(SBnKzsgn)                ; b = z sign
 147++C8E9 47                                   ld      b,a                         ;
 148++C8EA 0E 80                                ld      c,$80                       ; c = -ve as we are always moving forwards
 149++C8EC CD E6 A7                             call    ADDHLDESignBC               ; update speed
 150++C8EF 22 16 C0                             ld      (SBnKzlo),hl                ; write back to zpos
 151++C8F2 32 18 C0                             ld      (SBnKzsgn),a                ;
 152++C8F5 C9                                   ret
# file closed: ././Universe/Sun/SunApplyMyRollAndPitch.asm
 527+ C8F6              ;            INCLUDE "./Universe/SunApplyShipRollAndPitch.asm"
 528+ C8F6
 529+ C8F6 00 00 00     XProj       DS 3
 530+ C8F9 00 00 00     YProj       DS 3
 531+ C8FC CD 2E C8     SunUpdateAndRender:     call    SunApplyMyRollAndPitch
 532+ C8FF 3A 18 C0     .CheckDrawable:         ld      a,(SBnKzsgn)
 533+ C902 E6 80                                and     SignOnly8Bit
 534+ C904 C0                                   ret     nz
 535+ C905              .CheckDist48:           ReturnIfAGTENusng 48
 535+ C905 FE 30       >                    cp    48
 535+ C907 D0          >                    ret	 nc
 536+ C908 2A 17 C0                             ld      hl,(SBnKzhi)                ; are zhigh and zsng both 0, if so too close
 537+ C90B B6                                   or      (hl)
 538+ C90C                                      ReturnIfAIsZero
 538+ C90C A7          >                    and a
 538+ C90D C8          >                    ret    z
 539+ C90E              ;.ProjectCentreOfSunX:   ld      hl,(SBnKzLo)
 540+ C90E              ;                        ex      hl,de
 541+ C90E              ;                        ld      a,(SBnKzsgn)
 542+ C90E              ;                        ld      c,a
 543+ C90E              ;                        ld      hl,(SBnKXLo)
 544+ C90E              ;                        ld      a,(SBnKXsgn)
 545+ C90E              ;                        call    Div24by24LeadSign
 546+ C90E              ;
 547+ C90E              ;                        ret     c                           ; if carry way set then off screen
 548+ C90E              ;
 549+ C90E 2A 16 C0     .PojectCenterOfSunX:    ld      hl,(SBnKzlo)
 550+ C911 22 54 92                             ld      (varP),hl
 551+ C914 3A 18 C0                             ld      a,(SBnKzsgn)
 552+ C917 32 56 92                             ld      (varPhi2),a
 553+ C91A 2A 17 C0                             ld      hl,(SBnKzhi)
 554+ C91D
 555+ C91D 3E 80                                ld      a,ViewCenterX
 556+ C91F ED 31                                add     hl,a
 557+ C921
 558+ C921 2A 16 C0     .ProjectCentreOfSunY:   ld      hl,(SBnKzlo)
 559+ C924 EB                                   ex      hl,de
 560+ C925 3A 18 C0                             ld      a,(SBnKzsgn)
 561+ C928 4F                                   ld      c,a
 562+ C929 2A 13 C0                             ld      hl,(SBnKylo)
 563+ C92C 3A 15 C0                             ld      a,(SBnKysgn)
 564+ C92F CD D2 A0                             call    Div24by24LeadSign
 565+ C932
 566+ C932 D8                                   ret     c                           ; if carry way set then off screen
 567+ C933
 568+ C933 3E 40                                ld      a,ViewCenterY
 569+ C935 ED 31                                add     hl,a
 570+ C937
 571+ C937
 572+ C937                                        ; no need to do set carry so just return
 573+ C937 2A 16 C0     .CalculateRadius:       ld      hl,(SBnKzlo)
 574+ C93A 3A 18 C0                             ld      a,(SBnKzsgn)
 575+ C93D EB                                   ex      hl,de
 576+ C93E 4F                                   ld      c,a
 577+ C93F
 578+ C93F 21 00 60                             ld      hl,$6000                    ; planet radius at Z = 1
 579+ C942 AF                                   xor     a
 580+ C943 CD D2 A0                             call    Div24by24LeadSign
 581+ C946 7A                                   ld      a,d
 582+ C947 FE 00                                cp      0
 583+ C949 28 02                                jr      z,.SkipSetK
 584+ C94B 0E F8                                ld      c,248
 585+ C94D              .SkipSetK:
 586+ C94D
 587+ C94D
 588+ C94D
 589+ C94D
 590+ C94D              ; .....................................................
 591+ C94D              ; if the universe object is a planet or sun then do that instead
 592+ C94D              ;;TODOProcessPlanet:          cp      129
 593+ C94D              ;;TODO                        jr      nz, .ItsAPlanet
 594+ C94D              ;;TODO.ItsAStar:              ld      a,(SBnKzsgn)
 595+ C94D              ;;TODO                        cp      48                               ; if z > 48 (it must be positive to enter this routine)
 596+ C94D
 597+ C94D
 598+ C94D
 599+ C94D              SunBankSize  EQU $ - StartOfSun
 600+ C94D
# file closed: ./Universe/Sun/sun_data.asm
1299  C94D
1300  C94D              ; Bank 84  ------------------------------------------------------------------------------------------------------------------------
1301  C94D                  SLOT    PlanetBankAddr
1302  C94D                  PAGE    BankPlanetData
1303  C94D              	ORG	    PlanetBankAddr,BankPlanetData
1304  C000                  ;TODO INCLUDE "./Universe/planet_data.asm"
1305  C000
1306  C000                  SLOT    GalaxyDataAddr
1307  C000                  PAGE    BankGalaxyData1
1308  C000              	ORG GalaxyDataAddr, BankGalaxyData1
1309  E000 FF           GALAXYDATABlock1         DB $FF
1310  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1311  0000
1312  0000                  SLOT    GalaxyDataAddr
1313  0000                  PAGE    BankGalaxyData2
1314  0000              	ORG GalaxyDataAddr, BankGalaxyData2
1315  E000 FF           GALAXYDATABlock2         DB $FF
1316  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1317  0000                  SLOT    GalaxyDataAddr
1318  0000                  PAGE    BankGalaxyData3
1319  0000              	ORG GalaxyDataAddr, BankGalaxyData3
1320  E000 FF           GALAXYDATABlock3         DB $FF
1321  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1322  0000                  SLOT    GalaxyDataAddr
1323  0000                  PAGE    BankGalaxyData4
1324  0000              	ORG GalaxyDataAddr, BankGalaxyData4
1325  E000 FF           GALAXYDATABlock4         DB $FF
1326  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1327  0000                  SLOT    GalaxyDataAddr
1328  0000                  PAGE    BankGalaxyData5
1329  0000              	ORG GalaxyDataAddr,BankGalaxyData5
1330  E000 FF           GALAXYDATABlock5         DB $FF
1331  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1332  0000                  SLOT    GalaxyDataAddr
1333  0000                  PAGE    BankGalaxyData6
1334  0000              	ORG GalaxyDataAddr,BankGalaxyData6
1335  E000 FF           GALAXYDATABlock6         DB $FF
1336  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1337  0000                  SLOT    GalaxyDataAddr
1338  0000                  PAGE    BankGalaxyData7
1339  0000              	ORG GalaxyDataAddr,BankGalaxyData7
1340  E000 FF           GALAXYDATABlock7         DB $FF
1341  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1342  0000
1343  0000
1344  0000
1345  0000
1346  0000                  SAVENEX OPEN "EliteN.nex", $8000 , $7F00
1347  0000                  SAVENEX CFG  0,0,0,1
1348  0000                  SAVENEX AUTO
1349  0000                  SAVENEX CLOSE
1350  0000
# file closed: eliteNext.asm
